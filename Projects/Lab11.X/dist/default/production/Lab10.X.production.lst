

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Fri Oct 29 23:26:19 2021

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1
    73                           	psect	text56,global,reloc=2,class=CODE,delta=1
    74                           	psect	text57,global,reloc=2,class=CODE,delta=1
    75                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    76                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    77                           	psect	text59,global,reloc=2,class=CODE,delta=1
    78                           	psect	text60,global,reloc=2,class=CODE,delta=1
    79                           	psect	text61,global,reloc=2,class=CODE,delta=1
    80                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    81                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    82  0000                     
    83                           	psect	idataCOMRAM
    84  001BD0                     __pidataCOMRAM:
    85                           	opt stack 0
    86                           
    87                           ;initializer for _tempSecond
    88  001BD0  FF                 	db	255
    89                           
    90                           ;initializer for _wrap
    91  001BD1  01                 	db	1
    92                           
    93                           	psect	idataBANK0
    94  00172E                     __pidataBANK0:
    95                           	opt stack 0
    96                           
    97                           ;initializer for _color
    98  00172E  F800               	dw	63488
    99  001730  F800               	dw	63488
   100  001732  F800               	dw	63488
   101  001734  07FF               	dw	2047
   102  001736  07FF               	dw	2047
   103  001738  07E0               	dw	2016
   104  00173A  001F               	dw	31
   105  00173C  001F               	dw	31
   106  00173E  F81F               	dw	63519
   107  001740  0000               	dw	0
   108  001742  0000               	dw	0
   109  001744  0000               	dw	0
   110  001746  0000               	dw	0
   111  001748  0000               	dw	0
   112  00174A  0000               	dw	0
   113  00174C  0000               	dw	0
   114  00174E  0000               	dw	0
   115  001750  0000               	dw	0
   116  001752  0000               	dw	0
   117  001754  0000               	dw	0
   118  001756  0000               	dw	0
   119                           
   120                           ;initializer for _array1
   121  001758  A2                 	db	162
   122  001759  62                 	db	98
   123  00175A  E2                 	db	226
   124  00175B  22                 	db	34
   125  00175C  02                 	db	2
   126  00175D  C2                 	db	194
   127  00175E  E0                 	db	224
   128  00175F  A8                 	db	168
   129  001760  90                 	db	144
   130  001761  68                 	db	104
   131  001762  98                 	db	152
   132  001763  B0                 	db	176
   133  001764  30                 	db	48
   134  001765  18                 	db	24
   135  001766  7A                 	db	122
   136  001767  10                 	db	16
   137  001768  38                 	db	56
   138  001769  5A                 	db	90
   139  00176A  42                 	db	66
   140  00176B  4A                 	db	74
   141  00176C  52                 	db	82
   142                           
   143                           ;initializer for _Display_D1
   144  00176D  00                 	db	0
   145  00176E  02                 	db	2
   146  00176F  04                 	db	4
   147  001770  06                 	db	6
   148  001771  10                 	db	16
   149  001772  12                 	db	18
   150  001773  14                 	db	20
   151  001774  16                 	db	22
   152  001775  16                 	db	22
   153  001776  16                 	db	22
   154                           
   155                           	psect	idataBANK1
   156  0015F0                     __pidataBANK1:
   157                           	opt stack 0
   158                           
   159                           ;initializer for _txt1
   160  0015F0  43                 	db	67
   161  0015F1  48                 	db	72
   162  0015F2  2D                 	db	45
   163  0015F3  00                 	db	0
   164  0015F4  43                 	db	67
   165  0015F5  48                 	db	72
   166  0015F6  20                 	db	32
   167  0015F7  00                 	db	0
   168  0015F8  43                 	db	67
   169  0015F9  48                 	db	72
   170  0015FA  2B                 	db	43
   171  0015FB  00                 	db	0
   172  0015FC  50                 	db	80
   173  0015FD  52                 	db	82
   174  0015FE  56                 	db	86
   175  0015FF  00                 	db	0
   176  001600  4E                 	db	78
   177  001601  58                 	db	88
   178  001602  54                 	db	84
   179  001603  00                 	db	0
   180  001604  50                 	db	80
   181  001605  4C                 	db	76
   182  001606  59                 	db	89
   183  001607  00                 	db	0
   184  001608  20                 	db	32
   185  001609  2D                 	db	45
   186  00160A  20                 	db	32
   187  00160B  00                 	db	0
   188  00160C  20                 	db	32
   189  00160D  2B                 	db	43
   190  00160E  20                 	db	32
   191  00160F  00                 	db	0
   192  001610  20                 	db	32
   193  001611  45                 	db	69
   194  001612  51                 	db	81
   195  001613  00                 	db	0
   196  001614  20                 	db	32
   197  001615  30                 	db	48
   198  001616  20                 	db	32
   199  001617  00                 	db	0
   200  001618  31                 	db	49
   201  001619  30                 	db	48
   202  00161A  30                 	db	48
   203  00161B  00                 	db	0
   204  00161C  32                 	db	50
   205  00161D  30                 	db	48
   206  00161E  30                 	db	48
   207  00161F  00                 	db	0
   208  001620  20                 	db	32
   209  001621  31                 	db	49
   210  001622  20                 	db	32
   211  001623  00                 	db	0
   212  001624  20                 	db	32
   213  001625  32                 	db	50
   214  001626  20                 	db	32
   215  001627  00                 	db	0
   216  001628  20                 	db	32
   217  001629  33                 	db	51
   218  00162A  20                 	db	32
   219  00162B  00                 	db	0
   220  00162C  20                 	db	32
   221  00162D  34                 	db	52
   222  00162E  20                 	db	32
   223  00162F  00                 	db	0
   224  001630  20                 	db	32
   225  001631  35                 	db	53
   226  001632  20                 	db	32
   227  001633  00                 	db	0
   228  001634  20                 	db	32
   229  001635  36                 	db	54
   230  001636  20                 	db	32
   231  001637  00                 	db	0
   232  001638  20                 	db	32
   233  001639  37                 	db	55
   234  00163A  20                 	db	32
   235  00163B  00                 	db	0
   236  00163C  20                 	db	32
   237  00163D  38                 	db	56
   238  00163E  20                 	db	32
   239  00163F  00                 	db	0
   240  001640  20                 	db	32
   241  001641  39                 	db	57
   242  001642  20                 	db	32
   243  001643  00                 	db	0
   244                           
   245                           	psect	mediumconst
   246  00FD48                     __pmediumconst:
   247                           	opt stack 0
   248  00FD48  00                 	db	0
   249  00FD49                     _font:
   250                           	opt stack 0
   251  00FD49  00                 	db	0
   252  00FD4A  00                 	db	0
   253  00FD4B  00                 	db	0
   254  00FD4C  00                 	db	0
   255  00FD4D  00                 	db	0
   256  00FD4E  00                 	db	0
   257  00FD4F  00                 	db	0
   258  00FD50  5F                 	db	95
   259  00FD51  00                 	db	0
   260  00FD52  00                 	db	0
   261  00FD53  00                 	db	0
   262  00FD54  07                 	db	7
   263  00FD55  00                 	db	0
   264  00FD56  07                 	db	7
   265  00FD57  00                 	db	0
   266  00FD58  14                 	db	20
   267  00FD59  7F                 	db	127
   268  00FD5A  14                 	db	20
   269  00FD5B  7F                 	db	127
   270  00FD5C  14                 	db	20
   271  00FD5D  24                 	db	36
   272  00FD5E  2A                 	db	42
   273  00FD5F  7F                 	db	127
   274  00FD60  2A                 	db	42
   275  00FD61  12                 	db	18
   276  00FD62  23                 	db	35
   277  00FD63  13                 	db	19
   278  00FD64  08                 	db	8
   279  00FD65  64                 	db	100
   280  00FD66  62                 	db	98
   281  00FD67  36                 	db	54
   282  00FD68  49                 	db	73
   283  00FD69  56                 	db	86
   284  00FD6A  20                 	db	32
   285  00FD6B  50                 	db	80
   286  00FD6C  00                 	db	0
   287  00FD6D  08                 	db	8
   288  00FD6E  07                 	db	7
   289  00FD6F  03                 	db	3
   290  00FD70  00                 	db	0
   291  00FD71  00                 	db	0
   292  00FD72  1C                 	db	28
   293  00FD73  22                 	db	34
   294  00FD74  41                 	db	65
   295  00FD75  00                 	db	0
   296  00FD76  00                 	db	0
   297  00FD77  41                 	db	65
   298  00FD78  22                 	db	34
   299  00FD79  1C                 	db	28
   300  00FD7A  00                 	db	0
   301  00FD7B  2A                 	db	42
   302  00FD7C  1C                 	db	28
   303  00FD7D  7F                 	db	127
   304  00FD7E  1C                 	db	28
   305  00FD7F  2A                 	db	42
   306  00FD80  08                 	db	8
   307  00FD81  08                 	db	8
   308  00FD82  3E                 	db	62
   309  00FD83  08                 	db	8
   310  00FD84  08                 	db	8
   311  00FD85  00                 	db	0
   312  00FD86  80                 	db	128
   313  00FD87  70                 	db	112
   314  00FD88  30                 	db	48
   315  00FD89  00                 	db	0
   316  00FD8A  08                 	db	8
   317  00FD8B  08                 	db	8
   318  00FD8C  08                 	db	8
   319  00FD8D  08                 	db	8
   320  00FD8E  08                 	db	8
   321  00FD8F  00                 	db	0
   322  00FD90  00                 	db	0
   323  00FD91  60                 	db	96
   324  00FD92  60                 	db	96
   325  00FD93  00                 	db	0
   326  00FD94  20                 	db	32
   327  00FD95  10                 	db	16
   328  00FD96  08                 	db	8
   329  00FD97  04                 	db	4
   330  00FD98  02                 	db	2
   331  00FD99  3E                 	db	62
   332  00FD9A  51                 	db	81
   333  00FD9B  49                 	db	73
   334  00FD9C  45                 	db	69
   335  00FD9D  3E                 	db	62
   336  00FD9E  00                 	db	0
   337  00FD9F  42                 	db	66
   338  00FDA0  7F                 	db	127
   339  00FDA1  40                 	db	64
   340  00FDA2  00                 	db	0
   341  00FDA3  72                 	db	114
   342  00FDA4  49                 	db	73
   343  00FDA5  49                 	db	73
   344  00FDA6  49                 	db	73
   345  00FDA7  46                 	db	70
   346  00FDA8  21                 	db	33
   347  00FDA9  41                 	db	65
   348  00FDAA  49                 	db	73
   349  00FDAB  4D                 	db	77
   350  00FDAC  33                 	db	51
   351  00FDAD  18                 	db	24
   352  00FDAE  14                 	db	20
   353  00FDAF  12                 	db	18
   354  00FDB0  7F                 	db	127
   355  00FDB1  10                 	db	16
   356  00FDB2  27                 	db	39
   357  00FDB3  45                 	db	69
   358  00FDB4  45                 	db	69
   359  00FDB5  45                 	db	69
   360  00FDB6  39                 	db	57
   361  00FDB7  3C                 	db	60
   362  00FDB8  4A                 	db	74
   363  00FDB9  49                 	db	73
   364  00FDBA  49                 	db	73
   365  00FDBB  31                 	db	49
   366  00FDBC  41                 	db	65
   367  00FDBD  21                 	db	33
   368  00FDBE  11                 	db	17
   369  00FDBF  09                 	db	9
   370  00FDC0  07                 	db	7
   371  00FDC1  36                 	db	54
   372  00FDC2  49                 	db	73
   373  00FDC3  49                 	db	73
   374  00FDC4  49                 	db	73
   375  00FDC5  36                 	db	54
   376  00FDC6  46                 	db	70
   377  00FDC7  49                 	db	73
   378  00FDC8  49                 	db	73
   379  00FDC9  29                 	db	41
   380  00FDCA  1E                 	db	30
   381  00FDCB  00                 	db	0
   382  00FDCC  00                 	db	0
   383  00FDCD  14                 	db	20
   384  00FDCE  00                 	db	0
   385  00FDCF  00                 	db	0
   386  00FDD0  00                 	db	0
   387  00FDD1  40                 	db	64
   388  00FDD2  34                 	db	52
   389  00FDD3  00                 	db	0
   390  00FDD4  00                 	db	0
   391  00FDD5  00                 	db	0
   392  00FDD6  08                 	db	8
   393  00FDD7  14                 	db	20
   394  00FDD8  22                 	db	34
   395  00FDD9  41                 	db	65
   396  00FDDA  14                 	db	20
   397  00FDDB  14                 	db	20
   398  00FDDC  14                 	db	20
   399  00FDDD  14                 	db	20
   400  00FDDE  14                 	db	20
   401  00FDDF  00                 	db	0
   402  00FDE0  41                 	db	65
   403  00FDE1  22                 	db	34
   404  00FDE2  14                 	db	20
   405  00FDE3  08                 	db	8
   406  00FDE4  02                 	db	2
   407  00FDE5  01                 	db	1
   408  00FDE6  59                 	db	89
   409  00FDE7  09                 	db	9
   410  00FDE8  06                 	db	6
   411  00FDE9  3E                 	db	62
   412  00FDEA  41                 	db	65
   413  00FDEB  5D                 	db	93
   414  00FDEC  59                 	db	89
   415  00FDED  4E                 	db	78
   416  00FDEE  7C                 	db	124
   417  00FDEF  12                 	db	18
   418  00FDF0  11                 	db	17
   419  00FDF1  12                 	db	18
   420  00FDF2  7C                 	db	124
   421  00FDF3  7F                 	db	127
   422  00FDF4  49                 	db	73
   423  00FDF5  49                 	db	73
   424  00FDF6  49                 	db	73
   425  00FDF7  36                 	db	54
   426  00FDF8  3E                 	db	62
   427  00FDF9  41                 	db	65
   428  00FDFA  41                 	db	65
   429  00FDFB  41                 	db	65
   430  00FDFC  22                 	db	34
   431  00FDFD  7F                 	db	127
   432  00FDFE  41                 	db	65
   433  00FDFF  41                 	db	65
   434  00FE00  41                 	db	65
   435  00FE01  3E                 	db	62
   436  00FE02  7F                 	db	127
   437  00FE03  49                 	db	73
   438  00FE04  49                 	db	73
   439  00FE05  49                 	db	73
   440  00FE06  41                 	db	65
   441  00FE07  7F                 	db	127
   442  00FE08  09                 	db	9
   443  00FE09  09                 	db	9
   444  00FE0A  09                 	db	9
   445  00FE0B  01                 	db	1
   446  00FE0C  3E                 	db	62
   447  00FE0D  41                 	db	65
   448  00FE0E  41                 	db	65
   449  00FE0F  51                 	db	81
   450  00FE10  73                 	db	115
   451  00FE11  7F                 	db	127
   452  00FE12  08                 	db	8
   453  00FE13  08                 	db	8
   454  00FE14  08                 	db	8
   455  00FE15  7F                 	db	127
   456  00FE16  00                 	db	0
   457  00FE17  41                 	db	65
   458  00FE18  7F                 	db	127
   459  00FE19  41                 	db	65
   460  00FE1A  00                 	db	0
   461  00FE1B  20                 	db	32
   462  00FE1C  40                 	db	64
   463  00FE1D  41                 	db	65
   464  00FE1E  3F                 	db	63
   465  00FE1F  01                 	db	1
   466  00FE20  7F                 	db	127
   467  00FE21  08                 	db	8
   468  00FE22  14                 	db	20
   469  00FE23  22                 	db	34
   470  00FE24  41                 	db	65
   471  00FE25  7F                 	db	127
   472  00FE26  40                 	db	64
   473  00FE27  40                 	db	64
   474  00FE28  40                 	db	64
   475  00FE29  40                 	db	64
   476  00FE2A  7F                 	db	127
   477  00FE2B  02                 	db	2
   478  00FE2C  1C                 	db	28
   479  00FE2D  02                 	db	2
   480  00FE2E  7F                 	db	127
   481  00FE2F  7F                 	db	127
   482  00FE30  04                 	db	4
   483  00FE31  08                 	db	8
   484  00FE32  10                 	db	16
   485  00FE33  7F                 	db	127
   486  00FE34  3E                 	db	62
   487  00FE35  41                 	db	65
   488  00FE36  41                 	db	65
   489  00FE37  41                 	db	65
   490  00FE38  3E                 	db	62
   491  00FE39  7F                 	db	127
   492  00FE3A  09                 	db	9
   493  00FE3B  09                 	db	9
   494  00FE3C  09                 	db	9
   495  00FE3D  06                 	db	6
   496  00FE3E  3E                 	db	62
   497  00FE3F  41                 	db	65
   498  00FE40  51                 	db	81
   499  00FE41  21                 	db	33
   500  00FE42  5E                 	db	94
   501  00FE43  7F                 	db	127
   502  00FE44  09                 	db	9
   503  00FE45  19                 	db	25
   504  00FE46  29                 	db	41
   505  00FE47  46                 	db	70
   506  00FE48                     __end_of_font:
   507                           	opt stack 0
   508  00FE48                     _font2:
   509                           	opt stack 0
   510  00FE48  26                 	db	38
   511  00FE49  49                 	db	73
   512  00FE4A  49                 	db	73
   513  00FE4B  49                 	db	73
   514  00FE4C  32                 	db	50
   515  00FE4D  03                 	db	3
   516  00FE4E  01                 	db	1
   517  00FE4F  7F                 	db	127
   518  00FE50  01                 	db	1
   519  00FE51  03                 	db	3
   520  00FE52  3F                 	db	63
   521  00FE53  40                 	db	64
   522  00FE54  40                 	db	64
   523  00FE55  40                 	db	64
   524  00FE56  3F                 	db	63
   525  00FE57  1F                 	db	31
   526  00FE58  20                 	db	32
   527  00FE59  40                 	db	64
   528  00FE5A  20                 	db	32
   529  00FE5B  1F                 	db	31
   530  00FE5C  3F                 	db	63
   531  00FE5D  40                 	db	64
   532  00FE5E  38                 	db	56
   533  00FE5F  40                 	db	64
   534  00FE60  3F                 	db	63
   535  00FE61  63                 	db	99
   536  00FE62  14                 	db	20
   537  00FE63  08                 	db	8
   538  00FE64  14                 	db	20
   539  00FE65  63                 	db	99
   540  00FE66  03                 	db	3
   541  00FE67  04                 	db	4
   542  00FE68  78                 	db	120
   543  00FE69  04                 	db	4
   544  00FE6A  03                 	db	3
   545  00FE6B  61                 	db	97
   546  00FE6C  59                 	db	89
   547  00FE6D  49                 	db	73
   548  00FE6E  4D                 	db	77
   549  00FE6F  43                 	db	67
   550  00FE70  00                 	db	0
   551  00FE71  7F                 	db	127
   552  00FE72  41                 	db	65
   553  00FE73  41                 	db	65
   554  00FE74  41                 	db	65
   555  00FE75  02                 	db	2
   556  00FE76  04                 	db	4
   557  00FE77  08                 	db	8
   558  00FE78  10                 	db	16
   559  00FE79  20                 	db	32
   560  00FE7A  00                 	db	0
   561  00FE7B  41                 	db	65
   562  00FE7C  41                 	db	65
   563  00FE7D  41                 	db	65
   564  00FE7E  7F                 	db	127
   565  00FE7F  04                 	db	4
   566  00FE80  02                 	db	2
   567  00FE81  01                 	db	1
   568  00FE82  02                 	db	2
   569  00FE83  04                 	db	4
   570  00FE84  40                 	db	64
   571  00FE85  40                 	db	64
   572  00FE86  40                 	db	64
   573  00FE87  40                 	db	64
   574  00FE88  40                 	db	64
   575  00FE89  00                 	db	0
   576  00FE8A  03                 	db	3
   577  00FE8B  07                 	db	7
   578  00FE8C  08                 	db	8
   579  00FE8D  00                 	db	0
   580  00FE8E  20                 	db	32
   581  00FE8F  54                 	db	84
   582  00FE90  54                 	db	84
   583  00FE91  78                 	db	120
   584  00FE92  40                 	db	64
   585  00FE93  7F                 	db	127
   586  00FE94  28                 	db	40
   587  00FE95  44                 	db	68
   588  00FE96  44                 	db	68
   589  00FE97  38                 	db	56
   590  00FE98  38                 	db	56
   591  00FE99  44                 	db	68
   592  00FE9A  44                 	db	68
   593  00FE9B  44                 	db	68
   594  00FE9C  28                 	db	40
   595  00FE9D  38                 	db	56
   596  00FE9E  44                 	db	68
   597  00FE9F  44                 	db	68
   598  00FEA0  28                 	db	40
   599  00FEA1  7F                 	db	127
   600  00FEA2  38                 	db	56
   601  00FEA3  54                 	db	84
   602  00FEA4  54                 	db	84
   603  00FEA5  54                 	db	84
   604  00FEA6  18                 	db	24
   605  00FEA7  00                 	db	0
   606  00FEA8  08                 	db	8
   607  00FEA9  7E                 	db	126
   608  00FEAA  09                 	db	9
   609  00FEAB  02                 	db	2
   610  00FEAC  18                 	db	24
   611  00FEAD  A4                 	db	164
   612  00FEAE  A4                 	db	164
   613  00FEAF  9C                 	db	156
   614  00FEB0  78                 	db	120
   615  00FEB1  7F                 	db	127
   616  00FEB2  08                 	db	8
   617  00FEB3  04                 	db	4
   618  00FEB4  04                 	db	4
   619  00FEB5  78                 	db	120
   620  00FEB6  00                 	db	0
   621  00FEB7  44                 	db	68
   622  00FEB8  7D                 	db	125
   623  00FEB9  40                 	db	64
   624  00FEBA  00                 	db	0
   625  00FEBB  20                 	db	32
   626  00FEBC  40                 	db	64
   627  00FEBD  40                 	db	64
   628  00FEBE  3D                 	db	61
   629  00FEBF  00                 	db	0
   630  00FEC0  7F                 	db	127
   631  00FEC1  10                 	db	16
   632  00FEC2  28                 	db	40
   633  00FEC3  44                 	db	68
   634  00FEC4  00                 	db	0
   635  00FEC5  00                 	db	0
   636  00FEC6  41                 	db	65
   637  00FEC7  7F                 	db	127
   638  00FEC8  40                 	db	64
   639  00FEC9  00                 	db	0
   640  00FECA  7C                 	db	124
   641  00FECB  04                 	db	4
   642  00FECC  78                 	db	120
   643  00FECD  04                 	db	4
   644  00FECE  78                 	db	120
   645  00FECF  7C                 	db	124
   646  00FED0  08                 	db	8
   647  00FED1  04                 	db	4
   648  00FED2  04                 	db	4
   649  00FED3  78                 	db	120
   650  00FED4  38                 	db	56
   651  00FED5  44                 	db	68
   652  00FED6  44                 	db	68
   653  00FED7  44                 	db	68
   654  00FED8  38                 	db	56
   655  00FED9  FC                 	db	252
   656  00FEDA  18                 	db	24
   657  00FEDB  24                 	db	36
   658  00FEDC  24                 	db	36
   659  00FEDD  18                 	db	24
   660  00FEDE  18                 	db	24
   661  00FEDF  24                 	db	36
   662  00FEE0  24                 	db	36
   663  00FEE1  18                 	db	24
   664  00FEE2  FC                 	db	252
   665  00FEE3  7C                 	db	124
   666  00FEE4  08                 	db	8
   667  00FEE5  04                 	db	4
   668  00FEE6  04                 	db	4
   669  00FEE7  08                 	db	8
   670  00FEE8  48                 	db	72
   671  00FEE9  54                 	db	84
   672  00FEEA  54                 	db	84
   673  00FEEB  54                 	db	84
   674  00FEEC  24                 	db	36
   675  00FEED  04                 	db	4
   676  00FEEE  04                 	db	4
   677  00FEEF  3F                 	db	63
   678  00FEF0  44                 	db	68
   679  00FEF1  24                 	db	36
   680  00FEF2  3C                 	db	60
   681  00FEF3  40                 	db	64
   682  00FEF4  40                 	db	64
   683  00FEF5  20                 	db	32
   684  00FEF6  7C                 	db	124
   685  00FEF7  1C                 	db	28
   686  00FEF8  20                 	db	32
   687  00FEF9  40                 	db	64
   688  00FEFA  20                 	db	32
   689  00FEFB  1C                 	db	28
   690  00FEFC  3C                 	db	60
   691  00FEFD  40                 	db	64
   692  00FEFE  30                 	db	48
   693  00FEFF  40                 	db	64
   694  00FF00  3C                 	db	60
   695  00FF01  44                 	db	68
   696  00FF02  28                 	db	40
   697  00FF03  10                 	db	16
   698  00FF04  28                 	db	40
   699  00FF05  44                 	db	68
   700  00FF06  4C                 	db	76
   701  00FF07  90                 	db	144
   702  00FF08  90                 	db	144
   703  00FF09  90                 	db	144
   704  00FF0A  7C                 	db	124
   705  00FF0B  44                 	db	68
   706  00FF0C  64                 	db	100
   707  00FF0D  54                 	db	84
   708  00FF0E  4C                 	db	76
   709  00FF0F  44                 	db	68
   710  00FF10  00                 	db	0
   711  00FF11  08                 	db	8
   712  00FF12  36                 	db	54
   713  00FF13  41                 	db	65
   714  00FF14  00                 	db	0
   715  00FF15  00                 	db	0
   716  00FF16  00                 	db	0
   717  00FF17  77                 	db	119
   718  00FF18  00                 	db	0
   719  00FF19  00                 	db	0
   720  00FF1A  00                 	db	0
   721  00FF1B  41                 	db	65
   722  00FF1C  36                 	db	54
   723  00FF1D  08                 	db	8
   724  00FF1E  00                 	db	0
   725  00FF1F  02                 	db	2
   726  00FF20  01                 	db	1
   727  00FF21  02                 	db	2
   728  00FF22  04                 	db	4
   729  00FF23  02                 	db	2
   730  00FF24                     __end_of_font2:
   731                           	opt stack 0
   732  00FF24                     _dpowers:
   733                           	opt stack 0
   734  00FF24  0001               	dw	1
   735  00FF26  0000               	dw	0
   736  00FF28  000A               	dw	10
   737  00FF2A  0000               	dw	0
   738  00FF2C  0064               	dw	100
   739  00FF2E  0000               	dw	0
   740  00FF30  03E8               	dw	1000
   741  00FF32  0000               	dw	0
   742  00FF34  2710               	dw	10000
   743  00FF36  0000               	dw	0
   744  00FF38  86A0               	dw	34464
   745  00FF3A  0001               	dw	1
   746  00FF3C  4240               	dw	16960
   747  00FF3E  000F               	dw	15
   748  00FF40  9680               	dw	38528
   749  00FF42  0098               	dw	152
   750  00FF44  E100               	dw	57600
   751  00FF46  05F5               	dw	1525
   752  00FF48  CA00               	dw	51712
   753  00FF4A  3B9A               	dw	15258
   754  00FF4C                     __end_of_dpowers:
   755                           	opt stack 0
   756  00FF4C                     _hexpowers:
   757                           	opt stack 0
   758  00FF4C  0001               	dw	1
   759  00FF4E  0000               	dw	0
   760  00FF50  0010               	dw	16
   761  00FF52  0000               	dw	0
   762  00FF54  0100               	dw	256
   763  00FF56  0000               	dw	0
   764  00FF58  1000               	dw	4096
   765  00FF5A  0000               	dw	0
   766  00FF5C  0000               	dw	0
   767  00FF5E  0001               	dw	1
   768  00FF60  0000               	dw	0
   769  00FF62  0010               	dw	16
   770  00FF64  0000               	dw	0
   771  00FF66  0100               	dw	256
   772  00FF68  0000               	dw	0
   773  00FF6A  1000               	dw	4096
   774  00FF6C                     __end_of_hexpowers:
   775                           	opt stack 0
   776  0000                     _ADCON1	set	4033
   777  0000                     _CCP2CON	set	4026
   778  0000                     _CCPR2L	set	4027
   779  0000                     _INTCON2bits	set	4081
   780  0000                     _INTCONbits	set	4082
   781  0000                     _OSCCON	set	4051
   782  0000                     _PIE1bits	set	3997
   783  0000                     _PIR1bits	set	3998
   784  0000                     _PIR2bits	set	4001
   785  0000                     _PORTA	set	3968
   786  0000                     _PORTBbits	set	3969
   787  0000                     _PORTCbits	set	3970
   788  0000                     _PORTDbits	set	3971
   789  0000                     _PORTEbits	set	3972
   790  0000                     _PR2	set	4043
   791  0000                     _RCSTA	set	4011
   792  0000                     _RCSTAbits	set	4011
   793  0000                     _SPBRG	set	4015
   794  0000                     _SPBRGH	set	4016
   795  0000                     _SSPBUF	set	4041
   796  0000                     _SSPCON1	set	4038
   797  0000                     _SSPSTAT	set	4039
   798  0000                     _SSPSTATbits	set	4039
   799  0000                     _T0CON	set	4053
   800  0000                     _T0CONbits	set	4053
   801  0000                     _T1CON	set	4045
   802  0000                     _T1CONbits	set	4045
   803  0000                     _T2CON	set	4042
   804  0000                     _T3CON	set	4017
   805  0000                     _T3CONbits	set	4017
   806  0000                     _TMR0H	set	4055
   807  0000                     _TMR0L	set	4054
   808  0000                     _TMR1H	set	4047
   809  0000                     _TMR1L	set	4046
   810  0000                     _TMR3H	set	4019
   811  0000                     _TMR3L	set	4018
   812  0000                     _TRISA	set	3986
   813  0000                     _TRISB	set	3987
   814  0000                     _TRISC	set	3988
   815  0000                     _TRISCbits	set	3988
   816  0000                     _TRISD	set	3989
   817  0000                     _TRISE	set	3990
   818  0000                     _TXREG	set	4013
   819  0000                     _TXSTA	set	4012
   820  0000                     _TXSTAbits	set	4012
   821  0000                     _RBPU	set	32655
   822  0000                     _TRMT	set	32097
   823  00FF6C                     STR_2:
   824  00FF6C  20                 	db	32
   825  00FF6D  54                 	db	84	;'T'
   826  00FF6E  65                 	db	101	;'e'
   827  00FF6F  6D                 	db	109	;'m'
   828  00FF70  70                 	db	112	;'p'
   829  00FF71  65                 	db	101	;'e'
   830  00FF72  72                 	db	114	;'r'
   831  00FF73  61                 	db	97	;'a'
   832  00FF74  74                 	db	116	;'t'
   833  00FF75  75                 	db	117	;'u'
   834  00FF76  72                 	db	114	;'r'
   835  00FF77  65                 	db	101	;'e'
   836  00FF78  20                 	db	32
   837  00FF79  3D                 	db	61	;'='
   838  00FF7A  20                 	db	32
   839  00FF7B  25                 	db	37
   840  00FF7C  64                 	db	100	;'d'
   841  00FF7D  20                 	db	32
   842  00FF7E  64                 	db	100	;'d'
   843  00FF7F  65                 	db	101	;'e'
   844  00FF80  67                 	db	103	;'g'
   845  00FF81  72                 	db	114	;'r'
   846  00FF82  65                 	db	101	;'e'
   847  00FF83  65                 	db	101	;'e'
   848  00FF84  73                 	db	115	;'s'
   849  00FF85  43                 	db	67	;'C'
   850  00FF86  20                 	db	32
   851  00FF87  3D                 	db	61	;'='
   852  00FF88  20                 	db	32
   853  00FF89  25                 	db	37
   854  00FF8A  64                 	db	100	;'d'
   855  00FF8B  20                 	db	32
   856  00FF8C  64                 	db	100	;'d'
   857  00FF8D  65                 	db	101	;'e'
   858  00FF8E  67                 	db	103	;'g'
   859  00FF8F  72                 	db	114	;'r'
   860  00FF90  65                 	db	101	;'e'
   861  00FF91  65                 	db	101	;'e'
   862  00FF92  73                 	db	115	;'s'
   863  00FF93  46                 	db	70	;'F'
   864  00FF94  0D                 	db	13
   865  00FF95  0A                 	db	10
   866  00FF96  00                 	db	0
   867  00FF97                     STR_1:
   868  00FF97  25                 	db	37
   869  00FF98  30                 	db	48	;'0'
   870  00FF99  32                 	db	50	;'2'
   871  00FF9A  78                 	db	120	;'x'
   872  00FF9B  3A                 	db	58	;':'
   873  00FF9C  25                 	db	37
   874  00FF9D  30                 	db	48	;'0'
   875  00FF9E  32                 	db	50	;'2'
   876  00FF9F  78                 	db	120	;'x'
   877  00FFA0  3A                 	db	58	;':'
   878  00FFA1  25                 	db	37
   879  00FFA2  30                 	db	48	;'0'
   880  00FFA3  32                 	db	50	;'2'
   881  00FFA4  78                 	db	120	;'x'
   882  00FFA5  20                 	db	32
   883  00FFA6  25                 	db	37
   884  00FFA7  30                 	db	48	;'0'
   885  00FFA8  32                 	db	50	;'2'
   886  00FFA9  78                 	db	120	;'x'
   887  00FFAA  2F                 	db	47
   888  00FFAB  25                 	db	37
   889  00FFAC  30                 	db	48	;'0'
   890  00FFAD  32                 	db	50	;'2'
   891  00FFAE  78                 	db	120	;'x'
   892  00FFAF  2F                 	db	47
   893  00FFB0  25                 	db	37
   894  00FFB1  30                 	db	48	;'0'
   895  00FFB2  32                 	db	50	;'2'
   896  00FFB3  78                 	db	120	;'x'
   897  00FFB4  00                 	db	0
   898  00FFB5                     STR_3:
   899  00FFB5  4E                 	db	78	;'N'
   900  00FFB6  45                 	db	69	;'E'
   901  00FFB7  43                 	db	67	;'C'
   902  00FFB8  5F                 	db	95	;'_'
   903  00FFB9  43                 	db	67	;'C'
   904  00FFBA  6F                 	db	111	;'o'
   905  00FFBB  64                 	db	100	;'d'
   906  00FFBC  65                 	db	101	;'e'
   907  00FFBD  20                 	db	32
   908  00FFBE  3D                 	db	61	;'='
   909  00FFBF  20                 	db	32
   910  00FFC0  25                 	db	37
   911  00FFC1  30                 	db	48	;'0'
   912  00FFC2  38                 	db	56	;'8'
   913  00FFC3  6C                 	db	108	;'l'
   914  00FFC4  78                 	db	120	;'x'
   915  00FFC5  20                 	db	32
   916  00FFC6  25                 	db	37
   917  00FFC7  78                 	db	120	;'x'
   918  00FFC8  0D                 	db	13
   919  00FFC9  0A                 	db	10
   920  00FFCA  00                 	db	0
   921  00FFCB                     STR_5:
   922  00FFCB  45                 	db	69	;'E'
   923  00FFCC  43                 	db	67	;'C'
   924  00FFCD  45                 	db	69	;'E'
   925  00FFCE  33                 	db	51	;'3'
   926  00FFCF  33                 	db	51	;'3'
   927  00FFD0  30                 	db	48	;'0'
   928  00FFD1  31                 	db	49	;'1'
   929  00FFD2  4C                 	db	76	;'L'
   930  00FFD3  20                 	db	32
   931  00FFD4  46                 	db	70	;'F'
   932  00FFD5  61                 	db	97	;'a'
   933  00FFD6  6C                 	db	108	;'l'
   934  00FFD7  6C                 	db	108	;'l'
   935  00FFD8  20                 	db	32
   936  00FFD9  32                 	db	50	;'2'
   937  00FFDA  31                 	db	49	;'1'
   938  00FFDB  2D                 	db	45
   939  00FFDC  53                 	db	83	;'S'
   940  00FFDD  34                 	db	52	;'4'
   941  00FFDE  00                 	db	0
   942  00FFDF                     STR_7:
   943  00FFDF  30                 	db	48	;'0'
   944  00FFE0  31                 	db	49	;'1'
   945  00FFE1  32                 	db	50	;'2'
   946  00FFE2  33                 	db	51	;'3'
   947  00FFE3  34                 	db	52	;'4'
   948  00FFE4  35                 	db	53	;'5'
   949  00FFE5  36                 	db	54	;'6'
   950  00FFE6  37                 	db	55	;'7'
   951  00FFE7  38                 	db	56	;'8'
   952  00FFE8  39                 	db	57	;'9'
   953  00FFE9  61                 	db	97	;'a'
   954  00FFEA  62                 	db	98	;'b'
   955  00FFEB  63                 	db	99	;'c'
   956  00FFEC  64                 	db	100	;'d'
   957  00FFED  65                 	db	101	;'e'
   958  00FFEE  66                 	db	102	;'f'
   959  00FFEF  00                 	db	0
   960  00FFF0                     STR_6:
   961  00FFF0  4C                 	db	76	;'L'
   962  00FFF1  41                 	db	65	;'A'
   963  00FFF2  42                 	db	66	;'B'
   964  00FFF3  20                 	db	32
   965  00FFF4  31                 	db	49	;'1'
   966  00FFF5  30                 	db	48	;'0'
   967  00FFF6  20                 	db	32
   968  00FFF7  00                 	db	0
   969  00FFF8                     STR_4:
   970  00FFF8  25                 	db	37
   971  00FFF9  64                 	db	100	;'d'
   972  00FFFA  20                 	db	32
   973  00FFFB  0D                 	db	13
   974  00FFFC  0A                 	db	10
   975  00FFFD  00                 	db	0
   976                           
   977                           ; #config settings
   978  00FFFE  00                 	db	0	; dummy byte at the end
   979  0000                     
   980                           	psect	cinit
   981  001372                     __pcinit:
   982                           	opt stack 0
   983  001372                     start_initialization:
   984                           	opt stack 0
   985  001372                     __initialization:
   986                           	opt stack 0
   987                           
   988                           ; Clear objects allocated to BANK0 (33 bytes)
   989  001372  EE00  F0C9         	lfsr	0,__pbssBANK0
   990  001376  0E21               	movlw	33
   991  001378                     clear_0:
   992  001378  6AEE               	clrf	postinc0,c
   993  00137A  06E8               	decf	wreg,f,c
   994  00137C  E1FD               	bnz	clear_0
   995                           
   996                           ; Clear objects allocated to COMRAM (45 bytes)
   997  00137E  EE00  F041         	lfsr	0,__pbssCOMRAM
   998  001382  0E2D               	movlw	45
   999  001384                     clear_1:
  1000  001384  6AEE               	clrf	postinc0,c
  1001  001386  06E8               	decf	wreg,f,c
  1002  001388  E1FD               	bnz	clear_1
  1003                           
  1004                           ; Initialize objects allocated to BANK1 (84 bytes)
  1005                           ; load TBLPTR registers with __pidataBANK1
  1006  00138A  0EF0               	movlw	low __pidataBANK1
  1007  00138C  6EF6               	movwf	tblptrl,c
  1008  00138E  0E15               	movlw	high __pidataBANK1
  1009  001390  6EF7               	movwf	tblptrh,c
  1010  001392  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1011  001394  6EF8               	movwf	tblptru,c
  1012  001396  EE01  F000         	lfsr	0,__pdataBANK1
  1013  00139A  EE10 F054          	lfsr	1,84
  1014  00139E                     copy_data0:
  1015  00139E  0009               	tblrd		*+
  1016  0013A0  CFF5 FFEE          	movff	tablat,postinc0
  1017  0013A4  50E5               	movf	postdec1,w,c
  1018  0013A6  50E1               	movf	fsr1l,w,c
  1019  0013A8  E1FA               	bnz	copy_data0
  1020                           
  1021                           ; Initialize objects allocated to BANK0 (73 bytes)
  1022                           ; load TBLPTR registers with __pidataBANK0
  1023  0013AA  0E2E               	movlw	low __pidataBANK0
  1024  0013AC  6EF6               	movwf	tblptrl,c
  1025  0013AE  0E17               	movlw	high __pidataBANK0
  1026  0013B0  6EF7               	movwf	tblptrh,c
  1027  0013B2  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1028  0013B4  6EF8               	movwf	tblptru,c
  1029  0013B6  EE00  F080         	lfsr	0,__pdataBANK0
  1030  0013BA  EE10 F049          	lfsr	1,73
  1031  0013BE                     copy_data1:
  1032  0013BE  0009               	tblrd		*+
  1033  0013C0  CFF5 FFEE          	movff	tablat,postinc0
  1034  0013C4  50E5               	movf	postdec1,w,c
  1035  0013C6  50E1               	movf	fsr1l,w,c
  1036  0013C8  E1FA               	bnz	copy_data1
  1037                           
  1038                           ; Initialize objects allocated to COMRAM (2 bytes)
  1039                           ; load TBLPTR registers with __pidataCOMRAM
  1040  0013CA  0ED0               	movlw	low __pidataCOMRAM
  1041  0013CC  6EF6               	movwf	tblptrl,c
  1042  0013CE  0E1B               	movlw	high __pidataCOMRAM
  1043  0013D0  6EF7               	movwf	tblptrh,c
  1044  0013D2  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1045  0013D4  6EF8               	movwf	tblptru,c
  1046  0013D6  0009               	tblrd		*+	;fetch initializer
  1047  0013D8  CFF5 F06E          	movff	tablat,__pdataCOMRAM
  1048  0013DC  0009               	tblrd		*+	;fetch initializer
  1049  0013DE  CFF5 F06F          	movff	tablat,__pdataCOMRAM+1
  1050  0013E2                     end_of_initialization:
  1051                           	opt stack 0
  1052  0013E2                     __end_of__initialization:
  1053                           	opt stack 0
  1054  0013E2  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1055  0013E4  6EF8               	movwf	tblptru,c
  1056  0013E6  0100               	movlb	0
  1057  0013E8  EF79  F002         	goto	_main	;jump to C main() function
  1058                           tblptru	equ	0xFF8
  1059                           tblptrh	equ	0xFF7
  1060                           tblptrl	equ	0xFF6
  1061                           tablat	equ	0xFF5
  1062                           postinc0	equ	0xFEE
  1063                           wreg	equ	0xFE8
  1064                           postdec1	equ	0xFE5
  1065                           fsr1l	equ	0xFE1
  1066                           
  1067                           	psect	bssCOMRAM
  1068  000041                     __pbssCOMRAM:
  1069                           	opt stack 0
  1070  000041                     _Nec_code:
  1071                           	opt stack 0
  1072  000041                     	ds	4
  1073  000045                     _Time_Elapsed:
  1074                           	opt stack 0
  1075  000045                     	ds	2
  1076  000047                     _nec_ok:
  1077                           	opt stack 0
  1078  000047                     	ds	2
  1079  000049                     _txt:
  1080                           	opt stack 0
  1081  000049                     	ds	2
  1082  00004B                     _Address:
  1083                           	opt stack 0
  1084  00004B                     	ds	1
  1085  00004C                     _Cmd:
  1086                           	opt stack 0
  1087  00004C                     	ds	1
  1088  00004D                     _Device:
  1089                           	opt stack 0
  1090  00004D                     	ds	1
  1091  00004E                     _Nec_code1:
  1092                           	opt stack 0
  1093  00004E                     	ds	1
  1094  00004F                     _Nec_state:
  1095                           	opt stack 0
  1096  00004F                     	ds	1
  1097  000050                     _TempSecond:
  1098                           	opt stack 0
  1099  000050                     	ds	1
  1100  000051                     __tft_type:
  1101                           	opt stack 0
  1102  000051                     	ds	1
  1103  000052                     _alarm_date:
  1104                           	opt stack 0
  1105  000052                     	ds	1
  1106  000053                     _alarm_hour:
  1107                           	opt stack 0
  1108  000053                     	ds	1
  1109  000054                     _alarm_minute:
  1110                           	opt stack 0
  1111  000054                     	ds	1
  1112  000055                     _alarm_second:
  1113                           	opt stack 0
  1114  000055                     	ds	1
  1115  000056                     _bit_count:
  1116                           	opt stack 0
  1117  000056                     	ds	1
  1118  000057                     _colstart:
  1119                           	opt stack 0
  1120  000057                     	ds	1
  1121  000058                     _day:
  1122                           	opt stack 0
  1123  000058                     	ds	1
  1124  000059                     _dow:
  1125                           	opt stack 0
  1126  000059                     	ds	1
  1127  00005A                     _found:
  1128                           	opt stack 0
  1129  00005A                     	ds	1
  1130  00005B                     _hour:
  1131                           	opt stack 0
  1132  00005B                     	ds	1
  1133  00005C                     _i:
  1134                           	opt stack 0
  1135  00005C                     	ds	1
  1136  00005D                     _minute:
  1137                           	opt stack 0
  1138  00005D                     	ds	1
  1139  00005E                     _month:
  1140                           	opt stack 0
  1141  00005E                     	ds	1
  1142  00005F                     _prev_second:
  1143                           	opt stack 0
  1144  00005F                     	ds	1
  1145  000060                     _rowstart:
  1146                           	opt stack 0
  1147  000060                     	ds	1
  1148  000061                     _second:
  1149                           	opt stack 0
  1150  000061                     	ds	1
  1151  000062                     _setup_alarm_hour:
  1152                           	opt stack 0
  1153  000062                     	ds	1
  1154  000063                     _setup_alarm_minute:
  1155                           	opt stack 0
  1156  000063                     	ds	1
  1157  000064                     _setup_alarm_second:
  1158                           	opt stack 0
  1159  000064                     	ds	1
  1160  000065                     _setup_day:
  1161                           	opt stack 0
  1162  000065                     	ds	1
  1163  000066                     _setup_hour:
  1164                           	opt stack 0
  1165  000066                     	ds	1
  1166  000067                     _setup_minute:
  1167                           	opt stack 0
  1168  000067                     	ds	1
  1169  000068                     _setup_month:
  1170                           	opt stack 0
  1171  000068                     	ds	1
  1172  000069                     _setup_second:
  1173                           	opt stack 0
  1174  000069                     	ds	1
  1175  00006A                     _setup_year:
  1176                           	opt stack 0
  1177  00006A                     	ds	1
  1178  00006B                     _tempF:
  1179                           	opt stack 0
  1180  00006B                     	ds	1
  1181  00006C                     _tempc:
  1182                           	opt stack 0
  1183  00006C                     	ds	1
  1184  00006D                     _year:
  1185                           	opt stack 0
  1186  00006D                     	ds	1
  1187                           tblptru	equ	0xFF8
  1188                           tblptrh	equ	0xFF7
  1189                           tblptrl	equ	0xFF6
  1190                           tablat	equ	0xFF5
  1191                           postinc0	equ	0xFEE
  1192                           wreg	equ	0xFE8
  1193                           postdec1	equ	0xFE5
  1194                           fsr1l	equ	0xFE1
  1195                           
  1196                           	psect	dataCOMRAM
  1197  00006E                     __pdataCOMRAM:
  1198                           	opt stack 0
  1199  00006E                     _tempSecond:
  1200                           	opt stack 0
  1201  00006E                     	ds	1
  1202  00006F                     _wrap:
  1203                           	opt stack 0
  1204  00006F                     	ds	1
  1205                           tblptru	equ	0xFF8
  1206                           tblptrh	equ	0xFF7
  1207                           tblptrl	equ	0xFF6
  1208                           tablat	equ	0xFF5
  1209                           postinc0	equ	0xFEE
  1210                           wreg	equ	0xFE8
  1211                           postdec1	equ	0xFE5
  1212                           fsr1l	equ	0xFE1
  1213                           
  1214                           	psect	bssBANK0
  1215  0000C9                     __pbssBANK0:
  1216                           	opt stack 0
  1217  0000C9                     _nbr:
  1218                           	opt stack 0
  1219  0000C9                     	ds	2
  1220  0000CB                     _buffer:
  1221                           	opt stack 0
  1222  0000CB                     	ds	31
  1223                           tblptru	equ	0xFF8
  1224                           tblptrh	equ	0xFF7
  1225                           tblptrl	equ	0xFF6
  1226                           tablat	equ	0xFF5
  1227                           postinc0	equ	0xFEE
  1228                           wreg	equ	0xFE8
  1229                           postdec1	equ	0xFE5
  1230                           fsr1l	equ	0xFE1
  1231                           
  1232                           	psect	dataBANK0
  1233  000080                     __pdataBANK0:
  1234                           	opt stack 0
  1235  000080                     _color:
  1236                           	opt stack 0
  1237  000080                     	ds	42
  1238  0000AA                     _array1:
  1239                           	opt stack 0
  1240  0000AA                     	ds	21
  1241  0000BF                     _Display_D1:
  1242                           	opt stack 0
  1243  0000BF                     	ds	10
  1244                           tblptru	equ	0xFF8
  1245                           tblptrh	equ	0xFF7
  1246                           tblptrl	equ	0xFF6
  1247                           tablat	equ	0xFF5
  1248                           postinc0	equ	0xFEE
  1249                           wreg	equ	0xFE8
  1250                           postdec1	equ	0xFE5
  1251                           fsr1l	equ	0xFE1
  1252                           
  1253                           	psect	dataBANK1
  1254  000100                     __pdataBANK1:
  1255                           	opt stack 0
  1256  000100                     _txt1:
  1257                           	opt stack 0
  1258  000100                     	ds	84
  1259                           tblptru	equ	0xFF8
  1260                           tblptrh	equ	0xFF7
  1261                           tblptrl	equ	0xFF6
  1262                           tablat	equ	0xFF5
  1263                           postinc0	equ	0xFEE
  1264                           wreg	equ	0xFE8
  1265                           postdec1	equ	0xFE5
  1266                           fsr1l	equ	0xFE1
  1267                           
  1268                           	psect	cstackBANK0
  1269  0000EA                     __pcstackBANK0:
  1270                           	opt stack 0
  1271  0000EA                     ??_drawtext:
  1272  0000EA                     printf@idx:
  1273                           	opt stack 0
  1274  0000EA                     fillCircle@x0:
  1275                           	opt stack 0
  1276                           
  1277                           ; 2 bytes @ 0x0
  1278  0000EA                     	ds	1
  1279  0000EB                     printf@prec:
  1280                           	opt stack 0
  1281                           
  1282                           ; 2 bytes @ 0x1
  1283  0000EB                     	ds	1
  1284  0000EC                     drawtext@x:
  1285                           	opt stack 0
  1286  0000EC                     fillCircle@y0:
  1287                           	opt stack 0
  1288                           
  1289                           ; 2 bytes @ 0x2
  1290  0000EC                     	ds	1
  1291  0000ED                     drawtext@textsize:
  1292                           	opt stack 0
  1293  0000ED                     printf@ap:
  1294                           	opt stack 0
  1295                           
  1296                           ; 2 bytes @ 0x3
  1297  0000ED                     	ds	1
  1298  0000EE                     fillCircle@r:
  1299                           	opt stack 0
  1300                           
  1301                           ; 2 bytes @ 0x4
  1302  0000EE                     	ds	1
  1303  0000EF                     drawtext@i:
  1304                           	opt stack 0
  1305  0000EF                     printf@val:
  1306                           	opt stack 0
  1307                           
  1308                           ; 4 bytes @ 0x5
  1309  0000EF                     	ds	1
  1310  0000F0                     fillCircle@color:
  1311                           	opt stack 0
  1312                           
  1313                           ; 2 bytes @ 0x6
  1314  0000F0                     	ds	1
  1315  0000F1                     drawtext@cursor_y:
  1316                           	opt stack 0
  1317                           
  1318                           ; 1 bytes @ 0x7
  1319  0000F1                     	ds	1
  1320  0000F2                     drawtext@cursor_x:
  1321                           	opt stack 0
  1322                           
  1323                           ; 1 bytes @ 0x8
  1324  0000F2                     	ds	1
  1325  0000F3                     printf@width:
  1326                           	opt stack 0
  1327                           
  1328                           ; 2 bytes @ 0x9
  1329  0000F3                     	ds	2
  1330  0000F5                     printf@flag:
  1331                           	opt stack 0
  1332                           
  1333                           ; 1 bytes @ 0xB
  1334  0000F5                     	ds	1
  1335  0000F6                     printf@c:
  1336                           	opt stack 0
  1337                           
  1338                           ; 1 bytes @ 0xC
  1339  0000F6                     	ds	1
  1340  0000F7                     
  1341                           ; 0 bytes @ 0xD
  1342  0000F7                     	ds	1
  1343  0000F8                     main@U:
  1344                           	opt stack 0
  1345                           
  1346                           ; 1 bytes @ 0xE
  1347  0000F8                     	ds	1
  1348  0000F9                     main@tempC:
  1349                           	opt stack 0
  1350                           
  1351                           ; 1 bytes @ 0xF
  1352  0000F9                     	ds	1
  1353  0000FA                     main@tempF:
  1354                           	opt stack 0
  1355                           
  1356                           ; 1 bytes @ 0x10
  1357  0000FA                     	ds	1
  1358  0000FB                     main@i:
  1359                           	opt stack 0
  1360                           
  1361                           ; 2 bytes @ 0x11
  1362  0000FB                     	ds	2
  1363  0000FD                     main@found:
  1364                           	opt stack 0
  1365                           
  1366                           ; 1 bytes @ 0x13
  1367  0000FD                     	ds	1
  1368                           tblptru	equ	0xFF8
  1369                           tblptrh	equ	0xFF7
  1370                           tblptrl	equ	0xFF6
  1371                           tablat	equ	0xFF5
  1372                           postinc0	equ	0xFEE
  1373                           wreg	equ	0xFE8
  1374                           postdec1	equ	0xFE5
  1375                           fsr1l	equ	0xFE1
  1376                           
  1377                           	psect	cstackCOMRAM
  1378  000001                     __pcstackCOMRAM:
  1379                           	opt stack 0
  1380  000001                     ??_INT0_isr:
  1381  000001                     
  1382                           ; 1 bytes @ 0x0
  1383  000001                     	ds	2
  1384  000003                     ??_chkisr:
  1385                           
  1386                           ; 0 bytes @ 0x2
  1387  000003                     	ds	14
  1388  000011                     ??_isdigit:
  1389  000011                     ?_strlen:
  1390                           	opt stack 0
  1391  000011                     ?___wmul:
  1392                           	opt stack 0
  1393  000011                     ?___lldiv:
  1394                           	opt stack 0
  1395  000011                     I2C_Read@ack:
  1396                           	opt stack 0
  1397  000011                     I2C_Write@outByte:
  1398                           	opt stack 0
  1399  000011                     spiwrite@x:
  1400                           	opt stack 0
  1401  000011                     putch@c:
  1402                           	opt stack 0
  1403  000011                     Do_LED@digit:
  1404                           	opt stack 0
  1405  000011                     OpenUSART@spbrg:
  1406                           	opt stack 0
  1407  000011                     ___wmul@multiplier:
  1408                           	opt stack 0
  1409  000011                     strcpy@to:
  1410                           	opt stack 0
  1411  000011                     strlen@s:
  1412                           	opt stack 0
  1413  000011                     I2C_Init@c:
  1414                           	opt stack 0
  1415  000011                     ___lldiv@dividend:
  1416                           	opt stack 0
  1417                           
  1418                           ; 4 bytes @ 0x10
  1419  000011                     	ds	1
  1420  000012                     I2C_Read@n:
  1421                           	opt stack 0
  1422  000012                     I2C_Write@n:
  1423                           	opt stack 0
  1424  000012                     spiwrite@spidata:
  1425                           	opt stack 0
  1426  000012                     _isdigit$2066:
  1427                           	opt stack 0
  1428                           
  1429                           ; 1 bytes @ 0x11
  1430  000012                     	ds	1
  1431  000013                     ??_strlen:
  1432  000013                     I2C_Read@inByte:
  1433                           	opt stack 0
  1434  000013                     I2C_Write_Cmd_Only@Cmd:
  1435                           	opt stack 0
  1436  000013                     I2C_Write_Cmd_Write_Data@Cmd:
  1437                           	opt stack 0
  1438  000013                     DS3231_Setup_Time@Device:
  1439                           	opt stack 0
  1440  000013                     write_command@cmd_:
  1441                           	opt stack 0
  1442  000013                     write_data@data_:
  1443                           	opt stack 0
  1444  000013                     OpenUSART@config:
  1445                           	opt stack 0
  1446  000013                     isdigit@c:
  1447                           	opt stack 0
  1448  000013                     ___wmul@multiplicand:
  1449                           	opt stack 0
  1450  000013                     strcpy@from:
  1451                           	opt stack 0
  1452                           
  1453                           ; 2 bytes @ 0x12
  1454  000013                     	ds	1
  1455  000014                     ?_DS1621_Read_Temp:
  1456                           	opt stack 0
  1457  000014                     I2C_Write_Cmd_Only@Device:
  1458                           	opt stack 0
  1459  000014                     I2C_Write_Cmd_Write_Data@Data_Out:
  1460                           	opt stack 0
  1461  000014                     DS3231_Read_Time@Address:
  1462                           	opt stack 0
  1463  000014                     DS3231_Setup_Time@Address:
  1464                           	opt stack 0
  1465  000014                     setAddrWindow@y0:
  1466                           	opt stack 0
  1467                           
  1468                           ; 1 bytes @ 0x13
  1469  000014                     	ds	1
  1470  000015                     I2C_Write_Cmd_Write_Data@Device:
  1471                           	opt stack 0
  1472  000015                     DS3231_Read_Time@Device:
  1473                           	opt stack 0
  1474  000015                     setAddrWindow@x1:
  1475                           	opt stack 0
  1476  000015                     ___wmul@product:
  1477                           	opt stack 0
  1478  000015                     strcpy@cp:
  1479                           	opt stack 0
  1480  000015                     strlen@cp:
  1481                           	opt stack 0
  1482  000015                     ___lldiv@divisor:
  1483                           	opt stack 0
  1484                           
  1485                           ; 4 bytes @ 0x14
  1486  000015                     	ds	1
  1487  000016                     DS1621_Init@Device:
  1488                           	opt stack 0
  1489  000016                     DS1621_Read_Temp@Cmd:
  1490                           	opt stack 0
  1491  000016                     setAddrWindow@y1:
  1492                           	opt stack 0
  1493                           
  1494                           ; 1 bytes @ 0x15
  1495  000016                     	ds	1
  1496  000017                     ?___awdiv:
  1497                           	opt stack 0
  1498  000017                     DS1621_Read_Temp@Data_Ret:
  1499                           	opt stack 0
  1500  000017                     setAddrWindow@x0:
  1501                           	opt stack 0
  1502  000017                     delay_ms@ms:
  1503                           	opt stack 0
  1504  000017                     ___awdiv@dividend:
  1505                           	opt stack 0
  1506                           
  1507                           ; 2 bytes @ 0x16
  1508  000017                     	ds	1
  1509  000018                     DS1621_Read_Temp@Device:
  1510                           	opt stack 0
  1511  000018                     drawPixel@y:
  1512                           	opt stack 0
  1513  000018                     drawFastVLine@y:
  1514                           	opt stack 0
  1515  000018                     fillRectangle@y:
  1516                           	opt stack 0
  1517                           
  1518                           ; 1 bytes @ 0x17
  1519  000018                     	ds	1
  1520  000019                     ??_delay_ms:
  1521  000019                     drawFastVLine@h:
  1522                           	opt stack 0
  1523  000019                     fillRectangle@w:
  1524                           	opt stack 0
  1525  000019                     drawPixel@color:
  1526                           	opt stack 0
  1527  000019                     ___awdiv@divisor:
  1528                           	opt stack 0
  1529  000019                     ___lldiv@quotient:
  1530                           	opt stack 0
  1531                           
  1532                           ; 4 bytes @ 0x18
  1533  000019                     	ds	1
  1534  00001A                     fillRectangle@h:
  1535                           	opt stack 0
  1536  00001A                     drawFastVLine@color:
  1537                           	opt stack 0
  1538                           
  1539                           ; 2 bytes @ 0x19
  1540  00001A                     	ds	1
  1541  00001B                     drawPixel@x:
  1542                           	opt stack 0
  1543  00001B                     ___awdiv@counter:
  1544                           	opt stack 0
  1545  00001B                     delay_ms@count:
  1546                           	opt stack 0
  1547  00001B                     fillRectangle@color:
  1548                           	opt stack 0
  1549                           
  1550                           ; 2 bytes @ 0x1A
  1551  00001B                     	ds	1
  1552  00001C                     ??_drawFastVLine:
  1553  00001C                     ___awdiv@sign:
  1554                           	opt stack 0
  1555  00001C                     drawCircle@x0:
  1556                           	opt stack 0
  1557                           
  1558                           ; 2 bytes @ 0x1B
  1559  00001C                     	ds	1
  1560  00001D                     ??_fillRectangle:
  1561  00001D                     ___lldiv@counter:
  1562                           	opt stack 0
  1563  00001D                     ___awdiv@quotient:
  1564                           	opt stack 0
  1565                           
  1566                           ; 2 bytes @ 0x1C
  1567  00001D                     	ds	1
  1568  00001E                     ?___llmod:
  1569                           	opt stack 0
  1570  00001E                     drawCircle@y0:
  1571                           	opt stack 0
  1572  00001E                     ___llmod@dividend:
  1573                           	opt stack 0
  1574                           
  1575                           ; 4 bytes @ 0x1D
  1576  00001E                     	ds	2
  1577  000020                     drawFastVLine@hi:
  1578                           	opt stack 0
  1579  000020                     drawCircle@r:
  1580                           	opt stack 0
  1581                           
  1582                           ; 2 bytes @ 0x1F
  1583  000020                     	ds	1
  1584  000021                     drawFastVLine@lo:
  1585                           	opt stack 0
  1586  000021                     fillRectangle@hi:
  1587                           	opt stack 0
  1588                           
  1589                           ; 1 bytes @ 0x20
  1590  000021                     	ds	1
  1591  000022                     drawFastVLine@x:
  1592                           	opt stack 0
  1593  000022                     fillRectangle@lo:
  1594                           	opt stack 0
  1595  000022                     drawCircle@color:
  1596                           	opt stack 0
  1597  000022                     ___llmod@divisor:
  1598                           	opt stack 0
  1599                           
  1600                           ; 4 bytes @ 0x21
  1601  000022                     	ds	1
  1602  000023                     fillRect@y:
  1603                           	opt stack 0
  1604  000023                     fillRectangle@x:
  1605                           	opt stack 0
  1606  000023                     fillCircleHelper@x0:
  1607                           	opt stack 0
  1608                           
  1609                           ; 2 bytes @ 0x22
  1610  000023                     	ds	1
  1611  000024                     ??_drawCircle:
  1612  000024                     fillRect@w:
  1613                           	opt stack 0
  1614  000024                     fillScreen@color:
  1615                           	opt stack 0
  1616                           
  1617                           ; 2 bytes @ 0x23
  1618  000024                     	ds	1
  1619  000025                     fillRect@h:
  1620                           	opt stack 0
  1621  000025                     fillCircleHelper@y0:
  1622                           	opt stack 0
  1623                           
  1624                           ; 2 bytes @ 0x24
  1625  000025                     	ds	1
  1626  000026                     ___llmod@counter:
  1627                           	opt stack 0
  1628  000026                     fillRect@color:
  1629                           	opt stack 0
  1630  000026                     drawCircle@ddF_x:
  1631                           	opt stack 0
  1632                           
  1633                           ; 2 bytes @ 0x25
  1634  000026                     	ds	1
  1635  000027                     ?_printf:
  1636                           	opt stack 0
  1637  000027                     fillCircleHelper@r:
  1638                           	opt stack 0
  1639  000027                     printf@f:
  1640                           	opt stack 0
  1641                           
  1642                           ; 2 bytes @ 0x26
  1643  000027                     	ds	1
  1644  000028                     ??_fillRect:
  1645  000028                     drawCircle@ddF_y:
  1646                           	opt stack 0
  1647                           
  1648                           ; 2 bytes @ 0x27
  1649  000028                     	ds	1
  1650  000029                     fillCircleHelper@cornername:
  1651                           	opt stack 0
  1652                           
  1653                           ; 2 bytes @ 0x28
  1654  000029                     	ds	1
  1655  00002A                     drawCircle@f:
  1656                           	opt stack 0
  1657                           
  1658                           ; 2 bytes @ 0x29
  1659  00002A                     	ds	1
  1660  00002B                     fillRect@x:
  1661                           	opt stack 0
  1662  00002B                     fillCircleHelper@delta:
  1663                           	opt stack 0
  1664                           
  1665                           ; 2 bytes @ 0x2A
  1666  00002B                     	ds	1
  1667  00002C                     fillRect@i:
  1668                           	opt stack 0
  1669  00002C                     drawCircle@x:
  1670                           	opt stack 0
  1671                           
  1672                           ; 2 bytes @ 0x2B
  1673  00002C                     	ds	1
  1674  00002D                     fillCircleHelper@color:
  1675                           	opt stack 0
  1676                           
  1677                           ; 2 bytes @ 0x2C
  1678  00002D                     	ds	1
  1679  00002E                     drawChar@y:
  1680                           	opt stack 0
  1681  00002E                     drawCircle@y:
  1682                           	opt stack 0
  1683                           
  1684                           ; 2 bytes @ 0x2D
  1685  00002E                     	ds	1
  1686  00002F                     ??_fillCircleHelper:
  1687  00002F                     drawChar@c:
  1688                           	opt stack 0
  1689                           
  1690                           ; 1 bytes @ 0x2E
  1691  00002F                     	ds	1
  1692  000030                     drawChar@color:
  1693                           	opt stack 0
  1694                           
  1695                           ; 2 bytes @ 0x2F
  1696  000030                     	ds	1
  1697  000031                     fillCircleHelper@ddF_x:
  1698                           	opt stack 0
  1699                           
  1700                           ; 2 bytes @ 0x30
  1701  000031                     	ds	1
  1702  000032                     drawChar@bg:
  1703                           	opt stack 0
  1704                           
  1705                           ; 2 bytes @ 0x31
  1706  000032                     	ds	1
  1707  000033                     fillCircleHelper@ddF_y:
  1708                           	opt stack 0
  1709                           
  1710                           ; 2 bytes @ 0x32
  1711  000033                     	ds	1
  1712  000034                     drawChar@size:
  1713                           	opt stack 0
  1714                           
  1715                           ; 1 bytes @ 0x33
  1716  000034                     	ds	1
  1717  000035                     ??_printf:
  1718  000035                     drawChar@line:
  1719                           	opt stack 0
  1720  000035                     fillCircleHelper@f:
  1721                           	opt stack 0
  1722                           
  1723                           ; 2 bytes @ 0x34
  1724  000035                     	ds	1
  1725  000036                     drawChar@x:
  1726                           	opt stack 0
  1727                           
  1728                           ; 1 bytes @ 0x35
  1729  000036                     	ds	1
  1730  000037                     drawChar@j:
  1731                           	opt stack 0
  1732  000037                     fillCircleHelper@x:
  1733                           	opt stack 0
  1734                           
  1735                           ; 2 bytes @ 0x36
  1736  000037                     	ds	1
  1737  000038                     drawChar@i:
  1738                           	opt stack 0
  1739                           
  1740                           ; 1 bytes @ 0x37
  1741  000038                     	ds	1
  1742  000039                     drawtext@y:
  1743                           	opt stack 0
  1744  000039                     fillCircleHelper@y:
  1745                           	opt stack 0
  1746                           
  1747                           ; 2 bytes @ 0x38
  1748  000039                     	ds	1
  1749  00003A                     drawtext@_text:
  1750                           	opt stack 0
  1751                           
  1752                           ; 2 bytes @ 0x39
  1753  00003A                     	ds	1
  1754  00003B                     
  1755                           ; 0 bytes @ 0x3A
  1756  00003B                     	ds	1
  1757  00003C                     drawtext@color:
  1758                           	opt stack 0
  1759                           
  1760                           ; 2 bytes @ 0x3B
  1761  00003C                     	ds	2
  1762  00003E                     drawtext@bg:
  1763                           	opt stack 0
  1764                           
  1765                           ; 2 bytes @ 0x3D
  1766  00003E                     	ds	2
  1767  000040                     drawtext@size:
  1768                           	opt stack 0
  1769                           
  1770                           ; 1 bytes @ 0x3F
  1771  000040                     	ds	1
  1772  000041                     tblptru	equ	0xFF8
  1773                           tblptrh	equ	0xFF7
  1774                           tblptrl	equ	0xFF6
  1775                           tablat	equ	0xFF5
  1776                           postinc0	equ	0xFEE
  1777                           wreg	equ	0xFE8
  1778                           postdec1	equ	0xFE5
  1779                           fsr1l	equ	0xFE1
  1780                           
  1781                           ; 0 bytes @ 0x40
  1782 ;;
  1783 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1784 ;;
  1785 ;; *************** function _main *****************
  1786 ;; Defined at:
  1787 ;;		line 209 in file "Lab10.c"
  1788 ;; Parameters:    Size  Location     Type
  1789 ;;		None
  1790 ;; Auto vars:     Size  Location     Type
  1791 ;;  i               2   17[BANK0 ] int 
  1792 ;;  found           1   19[BANK0 ] unsigned char 
  1793 ;;  tempF           1   16[BANK0 ] char 
  1794 ;;  tempC           1   15[BANK0 ] char 
  1795 ;;  U               1   14[BANK0 ] char 
  1796 ;; Return value:  Size  Location     Type
  1797 ;;		None               void
  1798 ;; Registers used:
  1799 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1800 ;; Tracked objects:
  1801 ;;		On entry : 0/0
  1802 ;;		On exit  : 0/0
  1803 ;;		Unchanged: 0/0
  1804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1805 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1806 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1807 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1808 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1809 ;;Total ram usage:        7 bytes
  1810 ;; Hardware stack levels required when called:   12
  1811 ;; This function calls:
  1812 ;;		_DS1621_Read_Temp
  1813 ;;		_DS3231_Read_Time
  1814 ;;		_DS3231_Setup_Time
  1815 ;;		_Do_Init
  1816 ;;		_Do_LED
  1817 ;;		_Wait_Half_Second_With_Beep
  1818 ;;		___awdiv
  1819 ;;		___wmul
  1820 ;;		_drawCircle
  1821 ;;		_drawtext
  1822 ;;		_fillCircle
  1823 ;;		_printf
  1824 ;; This function is called by:
  1825 ;;		Startup code after reset
  1826 ;; This function uses a non-reentrant model
  1827 ;;
  1828                           
  1829                           	psect	text0
  1830  0004F2                     __ptext0:
  1831                           	opt stack 0
  1832  0004F2                     _main:
  1833                           	opt stack 19
  1834                           
  1835                           ;Lab10.c: 211: Do_Init();
  1836                           
  1837                           ;incstack = 0
  1838  0004F2  ECE0  F00B         	call	_Do_Init	;wreg free
  1839                           
  1840                           ;Lab10.c: 225: DS3231_Setup_Time();
  1841  0004F6  EC66  F00A         	call	_DS3231_Setup_Time	;wreg free
  1842  0004FA  D000               	goto	l5413
  1843  0004FC                     l5413:
  1844                           
  1845                           ;Lab10.c: 227: {
  1846                           ;Lab10.c: 229: DS3231_Read_Time();
  1847  0004FC  EC99  F00A         	call	_DS3231_Read_Time	;wreg free
  1848                           
  1849                           ;Lab10.c: 230: if(tempSecond != second)
  1850  000500  5061               	movf	_second,w,c
  1851  000502  186E               	xorwf	_tempSecond,w,c
  1852  000504  B4D8               	btfsc	status,2,c
  1853  000506  D05F               	goto	l5431
  1854                           
  1855                           ;Lab10.c: 231: {
  1856                           ;Lab10.c: 232: tempSecond = second;
  1857  000508  C061  F06E         	movff	_second,_tempSecond
  1858                           
  1859                           ;Lab10.c: 233: signed char tempC = DS1621_Read_Temp();
  1860  00050C  EC5F  F00C         	call	_DS1621_Read_Temp	;wreg free
  1861  000510  5014               	movf	?_DS1621_Read_Temp,w,c
  1862  000512  0100               	movlb	0	; () banked
  1863  000514  6FF9               	movwf	main@tempC& (0+255),b
  1864                           
  1865                           ; BSR set to: 0
  1866                           ;Lab10.c: 234: signed char tempF = (tempC * 9 / 5) + 32;
  1867  000516  0100               	movlb	0	; () banked
  1868  000518  51F9               	movf	main@tempC& (0+255),w,b
  1869  00051A  6E11               	movwf	___wmul@multiplier,c
  1870  00051C  6A12               	clrf	___wmul@multiplier+1,c
  1871  00051E  BE11               	btfsc	___wmul@multiplier,7,c
  1872  000520  0612               	decf	___wmul@multiplier+1,f,c
  1873  000522  0E00               	movlw	0
  1874  000524  6E14               	movwf	___wmul@multiplicand+1,c
  1875  000526  0E09               	movlw	9
  1876  000528  6E13               	movwf	___wmul@multiplicand,c
  1877  00052A  ECDB  F00C         	call	___wmul	;wreg free
  1878  00052E  C011  F017         	movff	?___wmul,___awdiv@dividend
  1879  000532  C012  F018         	movff	?___wmul+1,___awdiv@dividend+1
  1880  000536  0E00               	movlw	0
  1881  000538  6E1A               	movwf	___awdiv@divisor+1,c
  1882  00053A  0E05               	movlw	5
  1883  00053C  6E19               	movwf	___awdiv@divisor,c
  1884  00053E  EC5F  F008         	call	___awdiv	;wreg free
  1885  000542  5017               	movf	?___awdiv,w,c
  1886  000544  0F20               	addlw	32
  1887  000546  0100               	movlb	0	; () banked
  1888  000548  6FFA               	movwf	main@tempF& (0+255),b
  1889                           
  1890                           ; BSR set to: 0
  1891                           ;Lab10.c: 235: printf ("%02x:%02x:%02x %02x/%02x/%02x",hour,minute,second,month,day,year
      +                          );
  1892  00054A  0E97               	movlw	low STR_1
  1893  00054C  6E27               	movwf	printf@f,c
  1894  00054E  0EFF               	movlw	high STR_1
  1895  000550  6E28               	movwf	printf@f+1,c
  1896  000552  C05B  F029         	movff	_hour,?_printf+2
  1897  000556  6A2A               	clrf	?_printf+3,c
  1898  000558  C05D  F02B         	movff	_minute,?_printf+4
  1899  00055C  6A2C               	clrf	?_printf+5,c
  1900  00055E  C061  F02D         	movff	_second,?_printf+6
  1901  000562  6A2E               	clrf	?_printf+7,c
  1902  000564  C05E  F02F         	movff	_month,?_printf+8
  1903  000568  6A30               	clrf	?_printf+9,c
  1904  00056A  C058  F031         	movff	_day,?_printf+10
  1905  00056E  6A32               	clrf	?_printf+11,c
  1906  000570  C06D  F033         	movff	_year,?_printf+12
  1907  000574  6A34               	clrf	?_printf+13,c
  1908  000576  EC0E  F000         	call	_printf	;wreg free
  1909                           
  1910                           ;Lab10.c: 236: printf (" Temperature = %d degreesC = %d degreesF\r\n", tempC, tempF);
  1911  00057A  0E6C               	movlw	low STR_2
  1912  00057C  6E27               	movwf	printf@f,c
  1913  00057E  0EFF               	movlw	high STR_2
  1914  000580  6E28               	movwf	printf@f+1,c
  1915  000582  0100               	movlb	0	; () banked
  1916  000584  51F9               	movf	main@tempC& (0+255),w,b
  1917  000586  6E29               	movwf	?_printf+2,c
  1918  000588  6A2A               	clrf	?_printf+3,c
  1919  00058A  BE29               	btfsc	?_printf+2,7,c
  1920  00058C  062A               	decf	?_printf+3,f,c
  1921  00058E  0100               	movlb	0	; () banked
  1922  000590  51FA               	movf	main@tempF& (0+255),w,b
  1923  000592  6E2B               	movwf	?_printf+4,c
  1924  000594  6A2C               	clrf	?_printf+5,c
  1925  000596  BE2B               	btfsc	?_printf+4,7,c
  1926  000598  062C               	decf	?_printf+5,f,c
  1927  00059A  EC0E  F000         	call	_printf	;wreg free
  1928                           
  1929                           ;Lab10.c: 237: signed char U = (int)(tempF/10);
  1930  00059E  0100               	movlb	0	; () banked
  1931  0005A0  51FA               	movf	main@tempF& (0+255),w,b
  1932  0005A2  6E17               	movwf	___awdiv@dividend,c
  1933  0005A4  6A18               	clrf	___awdiv@dividend+1,c
  1934  0005A6  BE17               	btfsc	___awdiv@dividend,7,c
  1935  0005A8  0618               	decf	___awdiv@dividend+1,f,c
  1936  0005AA  0E00               	movlw	0
  1937  0005AC  6E1A               	movwf	___awdiv@divisor+1,c
  1938  0005AE  0E0A               	movlw	10
  1939  0005B0  6E19               	movwf	___awdiv@divisor,c
  1940  0005B2  EC5F  F008         	call	___awdiv	;wreg free
  1941  0005B6  5017               	movf	?___awdiv,w,c
  1942  0005B8  0100               	movlb	0	; () banked
  1943  0005BA  6FF8               	movwf	main@U& (0+255),b
  1944                           
  1945                           ; BSR set to: 0
  1946                           ;Lab10.c: 239: Do_LED(U);
  1947  0005BC  0100               	movlb	0	; () banked
  1948  0005BE  51F8               	movf	main@U& (0+255),w,b
  1949  0005C0  EC47  F00D         	call	_Do_LED
  1950  0005C4  D000               	goto	l5431
  1951  0005C6                     l5431:
  1952                           
  1953                           ;Lab10.c: 240: }
  1954                           ;Lab10.c: 242: if (nec_ok == 1)
  1955  0005C6  0447               	decf	_nec_ok,w,c
  1956  0005C8  1048               	iorwf	_nec_ok+1,w,c
  1957  0005CA  A4D8               	btfss	status,2,c
  1958  0005CC  D797               	goto	l5413
  1959                           
  1960                           ;Lab10.c: 243: {
  1961                           ;Lab10.c: 244: nec_ok = 0;
  1962  0005CE  0E00               	movlw	0
  1963  0005D0  6E48               	movwf	_nec_ok+1,c
  1964  0005D2  0E00               	movlw	0
  1965  0005D4  6E47               	movwf	_nec_ok,c
  1966                           
  1967                           ;Lab10.c: 246: Nec_code1 = (char) ((Nec_code >> 8));
  1968  0005D6  C042  F04E         	movff	_Nec_code+1,_Nec_code1
  1969                           
  1970                           ;Lab10.c: 248: INTCONbits.INT0IE = 1;
  1971  0005DA  88F2               	bsf	intcon,4,c	;volatile
  1972                           
  1973                           ;Lab10.c: 249: INTCON2bits.INTEDG0 = 0;
  1974  0005DC  9CF1               	bcf	intcon2,6,c	;volatile
  1975                           
  1976                           ;Lab10.c: 251: char found = 0xff;
  1977  0005DE  0100               	movlb	0	; () banked
  1978  0005E0  69FD               	setf	main@found& (0+255),b
  1979                           
  1980                           ;Lab10.c: 252: for (int i=0; i<21; i++)
  1981  0005E2  0E00               	movlw	0
  1982  0005E4  0100               	movlb	0	; () banked
  1983  0005E6  6FFC               	movwf	(main@i+1)& (0+255),b
  1984  0005E8  0E00               	movlw	0
  1985  0005EA  6FFB               	movwf	main@i& (0+255),b
  1986  0005EC                     l5443:
  1987                           
  1988                           ; BSR set to: 0
  1989  0005EC  0100               	movlb	0	; () banked
  1990  0005EE  BFFC               	btfsc	(main@i+1)& (0+255),7,b
  1991  0005F0  D00A               	goto	l5447
  1992  0005F2  0100               	movlb	0	; () banked
  1993  0005F4  51FC               	movf	(main@i+1)& (0+255),w,b
  1994  0005F6  E120               	bnz	l5457
  1995  0005F8  0E15               	movlw	21
  1996  0005FA  0100               	movlb	0	; () banked
  1997  0005FC  5DFB               	subwf	main@i& (0+255),w,b
  1998  0005FE  B0D8               	btfsc	status,0,c
  1999  000600  D01B               	goto	l5457
  2000  000602  D001               	goto	l5447
  2001                           
  2002                           ; BSR set to: 0
  2003  000604  D019               	goto	l5457
  2004  000606                     l5447:
  2005                           
  2006                           ; BSR set to: 0
  2007                           ;Lab10.c: 253: {
  2008                           ;Lab10.c: 254: if(Nec_code1 == array1[i])
  2009  000606  0EAA               	movlw	low _array1
  2010  000608  0100               	movlb	0	; () banked
  2011  00060A  25FB               	addwf	main@i& (0+255),w,b
  2012  00060C  6ED9               	movwf	fsr2l,c
  2013  00060E  0E00               	movlw	high _array1
  2014  000610  0100               	movlb	0	; () banked
  2015  000612  21FC               	addwfc	(main@i+1)& (0+255),w,b
  2016  000614  6EDA               	movwf	fsr2h,c
  2017  000616  504E               	movf	_Nec_code1,w,c
  2018  000618  18DE               	xorwf	postinc2,w,c
  2019  00061A  A4D8               	btfss	status,2,c
  2020  00061C  D008               	goto	l5453
  2021                           
  2022                           ; BSR set to: 0
  2023                           ;Lab10.c: 255: {
  2024                           ;Lab10.c: 256: found = i;
  2025  00061E  C0FB  F0FD         	movff	main@i,main@found
  2026                           
  2027                           ; BSR set to: 0
  2028                           ;Lab10.c: 257: i = 21;
  2029  000622  0E00               	movlw	0
  2030  000624  0100               	movlb	0	; () banked
  2031  000626  6FFC               	movwf	(main@i+1)& (0+255),b
  2032  000628  0E15               	movlw	21
  2033  00062A  6FFB               	movwf	main@i& (0+255),b
  2034  00062C  D000               	goto	l5453
  2035  00062E                     l5453:
  2036                           
  2037                           ; BSR set to: 0
  2038  00062E  0100               	movlb	0	; () banked
  2039  000630  4BFB               	infsnz	main@i& (0+255),f,b
  2040  000632  2BFC               	incf	(main@i+1)& (0+255),f,b
  2041  000634  D7DB               	goto	l5443
  2042                           
  2043                           ; BSR set to: 0
  2044  000636  D000               	goto	l5457
  2045  000638                     l5457:
  2046                           
  2047                           ; BSR set to: 0
  2048                           ;Lab10.c: 258: }
  2049                           ;Lab10.c: 259: }
  2050                           ;Lab10.c: 261: printf ("NEC_Code = %08lx %x\r\n", Nec_code, Nec_code1);
  2051  000638  0EB5               	movlw	low STR_3
  2052  00063A  6E27               	movwf	printf@f,c
  2053  00063C  0EFF               	movlw	high STR_3
  2054  00063E  6E28               	movwf	printf@f+1,c
  2055  000640  C041  F029         	movff	_Nec_code,?_printf+2
  2056  000644  C042  F02A         	movff	_Nec_code+1,?_printf+3
  2057  000648  C043  F02B         	movff	_Nec_code+2,?_printf+4
  2058  00064C  C044  F02C         	movff	_Nec_code+3,?_printf+5
  2059  000650  C04E  F02D         	movff	_Nec_code1,?_printf+6
  2060  000654  6A2E               	clrf	?_printf+7,c
  2061  000656  EC0E  F000         	call	_printf	;wreg free
  2062                           
  2063                           ;Lab10.c: 262: printf ("%d \r\n", found);
  2064  00065A  0EF8               	movlw	low STR_4
  2065  00065C  6E27               	movwf	printf@f,c
  2066  00065E  0EFF               	movlw	high STR_4
  2067  000660  6E28               	movwf	printf@f+1,c
  2068  000662  C0FD  F029         	movff	main@found,?_printf+2
  2069  000666  6A2A               	clrf	?_printf+3,c
  2070  000668  EC0E  F000         	call	_printf	;wreg free
  2071                           
  2072                           ;Lab10.c: 268: if (found != 0xff)
  2073  00066C  0100               	movlb	0	; () banked
  2074  00066E  29FD               	incf	main@found& (0+255),w,b
  2075  000670  B4D8               	btfsc	status,2,c
  2076  000672  D04B               	goto	l5473
  2077                           
  2078                           ; BSR set to: 0
  2079                           ;Lab10.c: 269: {
  2080                           ;Lab10.c: 271: PORTEbits.RE1 = 1;
  2081  000674  8284               	bsf	3972,1,c	;volatile
  2082                           
  2083                           ; BSR set to: 0
  2084                           ;Lab10.c: 272: fillCircle(60, 80, 20, color[found]);
  2085  000676  0E00               	movlw	0
  2086  000678  0100               	movlb	0	; () banked
  2087  00067A  6FEB               	movwf	(fillCircle@x0+1)& (0+255),b
  2088  00067C  0E3C               	movlw	60
  2089  00067E  6FEA               	movwf	fillCircle@x0& (0+255),b
  2090  000680  0E00               	movlw	0
  2091  000682  0100               	movlb	0	; () banked
  2092  000684  6FED               	movwf	(fillCircle@y0+1)& (0+255),b
  2093  000686  0E50               	movlw	80
  2094  000688  6FEC               	movwf	fillCircle@y0& (0+255),b
  2095  00068A  0E00               	movlw	0
  2096  00068C  0100               	movlb	0	; () banked
  2097  00068E  6FEF               	movwf	(fillCircle@r+1)& (0+255),b
  2098  000690  0E14               	movlw	20
  2099  000692  6FEE               	movwf	fillCircle@r& (0+255),b
  2100  000694  0100               	movlb	0	; () banked
  2101  000696  51FD               	movf	main@found& (0+255),w,b
  2102  000698  0D02               	mullw	2
  2103  00069A  0E80               	movlw	low _color
  2104  00069C  24F3               	addwf	prodl,w,c
  2105  00069E  6ED9               	movwf	fsr2l,c
  2106  0006A0  0E00               	movlw	high _color
  2107  0006A2  20F4               	addwfc	prodh,w,c
  2108  0006A4  6EDA               	movwf	fsr2h,c
  2109  0006A6  CFDE F0F0          	movff	postinc2,fillCircle@color
  2110  0006AA  CFDD F0F1          	movff	postdec2,fillCircle@color+1
  2111  0006AE  ECCB  F00A         	call	_fillCircle	;wreg free
  2112                           
  2113                           ;Lab10.c: 273: drawCircle(60, 80, 20, 0xFFFF);
  2114  0006B2  0E00               	movlw	0
  2115  0006B4  6E1D               	movwf	drawCircle@x0+1,c
  2116  0006B6  0E3C               	movlw	60
  2117  0006B8  6E1C               	movwf	drawCircle@x0,c
  2118  0006BA  0E00               	movlw	0
  2119  0006BC  6E1F               	movwf	drawCircle@y0+1,c
  2120  0006BE  0E50               	movlw	80
  2121  0006C0  6E1E               	movwf	drawCircle@y0,c
  2122  0006C2  0E00               	movlw	0
  2123  0006C4  6E21               	movwf	drawCircle@r+1,c
  2124  0006C6  0E14               	movlw	20
  2125  0006C8  6E20               	movwf	drawCircle@r,c
  2126  0006CA  0EFF               	movlw	255
  2127  0006CC  6E23               	movwf	drawCircle@color+1,c
  2128  0006CE  6822               	setf	drawCircle@color,c
  2129  0006D0  EC97  F003         	call	_drawCircle	;wreg free
  2130                           
  2131                           ;Lab10.c: 274: drawtext(52, 77, txt1[found], 0xFFFF, 0x0000,1);
  2132  0006D4  0E4D               	movlw	77
  2133  0006D6  6E39               	movwf	drawtext@y,c
  2134  0006D8  0100               	movlb	0	; () banked
  2135  0006DA  51FD               	movf	main@found& (0+255),w,b
  2136  0006DC  0D04               	mullw	4
  2137  0006DE  0E00               	movlw	low _txt1
  2138  0006E0  24F3               	addwf	prodl,w,c
  2139  0006E2  6E3A               	movwf	drawtext@_text,c
  2140  0006E4  0E01               	movlw	high _txt1
  2141  0006E6  20F4               	addwfc	prodh,w,c
  2142  0006E8  6E3B               	movwf	drawtext@_text+1,c
  2143  0006EA  0EFF               	movlw	255
  2144  0006EC  6E3D               	movwf	drawtext@color+1,c
  2145  0006EE  683C               	setf	drawtext@color,c
  2146  0006F0  0E00               	movlw	0
  2147  0006F2  6E3F               	movwf	drawtext@bg+1,c
  2148  0006F4  0E00               	movlw	0
  2149  0006F6  6E3E               	movwf	drawtext@bg,c
  2150  0006F8  0E01               	movlw	1
  2151  0006FA  6E40               	movwf	drawtext@size,c
  2152  0006FC  0E34               	movlw	52
  2153  0006FE  EC65  F006         	call	_drawtext
  2154                           
  2155                           ;Lab10.c: 275: Wait_Half_Second_With_Beep();
  2156  000702  ECB6  F00D         	call	_Wait_Half_Second_With_Beep	;wreg free
  2157                           
  2158                           ;Lab10.c: 276: PORTEbits.RE1 = 0;
  2159  000706  9284               	bcf	3972,1,c	;volatile
  2160  000708  D000               	goto	l5473
  2161  00070A                     l5473:
  2162                           
  2163                           ;Lab10.c: 277: }
  2164                           ;Lab10.c: 278: if (array1[found] == 0x90)
  2165  00070A  0100               	movlb	0	; () banked
  2166  00070C  51FD               	movf	main@found& (0+255),w,b
  2167  00070E  0D01               	mullw	1
  2168  000710  0EAA               	movlw	low _array1
  2169  000712  24F3               	addwf	prodl,w,c
  2170  000714  6ED9               	movwf	fsr2l,c
  2171  000716  0E00               	movlw	high _array1
  2172  000718  20F4               	addwfc	prodh,w,c
  2173  00071A  6EDA               	movwf	fsr2h,c
  2174  00071C  0E90               	movlw	144
  2175  00071E  18DE               	xorwf	postinc2,w,c
  2176  000720  A4D8               	btfss	status,2,c
  2177  000722  D6EC               	goto	l5413
  2178                           
  2179                           ; BSR set to: 0
  2180                           ;Lab10.c: 279: {
  2181                           ;Lab10.c: 280: DS3231_Setup_Time();
  2182  000724  EC66  F00A         	call	_DS3231_Setup_Time	;wreg free
  2183  000728  D6E9               	goto	l5413
  2184  00072A  EF0C  F000         	goto	start
  2185  00072E                     __end_of_main:
  2186                           	opt stack 0
  2187                           tblptru	equ	0xFF8
  2188                           tblptrh	equ	0xFF7
  2189                           tblptrl	equ	0xFF6
  2190                           tablat	equ	0xFF5
  2191                           prodh	equ	0xFF4
  2192                           prodl	equ	0xFF3
  2193                           intcon	equ	0xFF2
  2194                           intcon2	equ	0xFF1
  2195                           postinc0	equ	0xFEE
  2196                           wreg	equ	0xFE8
  2197                           postdec1	equ	0xFE5
  2198                           fsr1l	equ	0xFE1
  2199                           postinc2	equ	0xFDE
  2200                           postdec2	equ	0xFDD
  2201                           fsr2h	equ	0xFDA
  2202                           fsr2l	equ	0xFD9
  2203                           status	equ	0xFD8
  2204                           
  2205 ;; *************** function _printf *****************
  2206 ;; Defined at:
  2207 ;;		line 464 in file "E:\XC8\sources\common\doprnt.c"
  2208 ;; Parameters:    Size  Location     Type
  2209 ;;  f               2   38[COMRAM] PTR const unsigned char 
  2210 ;;		 -> STR_4(6), STR_3(22), STR_2(43), STR_1(30), 
  2211 ;; Auto vars:     Size  Location     Type
  2212 ;;  idx             1    0[BANK0 ] unsigned char 
  2213 ;;  val             4    5[BANK0 ] unsigned long 
  2214 ;;  tmpval          4    0        struct .
  2215 ;;  cp              3    0        PTR const unsigned char 
  2216 ;;  width           2    9[BANK0 ] int 
  2217 ;;  ap              2    3[BANK0 ] PTR void [1]
  2218 ;;		 -> ?_printf(2), 
  2219 ;;  prec            2    1[BANK0 ] int 
  2220 ;;  len             2    0        unsigned int 
  2221 ;;  c               1   12[BANK0 ] char 
  2222 ;;  flag            1   11[BANK0 ] unsigned char 
  2223 ;; Return value:  Size  Location     Type
  2224 ;;                  2   38[COMRAM] int 
  2225 ;; Registers used:
  2226 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2227 ;; Tracked objects:
  2228 ;;		On entry : 0/0
  2229 ;;		On exit  : 0/0
  2230 ;;		Unchanged: 0/0
  2231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2232 ;;      Params:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2233 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2234 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2235 ;;      Totals:        18      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2236 ;;Total ram usage:       31 bytes
  2237 ;; Hardware stack levels used:    1
  2238 ;; Hardware stack levels required when called:    4
  2239 ;; This function calls:
  2240 ;;		___lldiv
  2241 ;;		___llmod
  2242 ;;		___wmul
  2243 ;;		_isdigit
  2244 ;;		_putch
  2245 ;; This function is called by:
  2246 ;;		_main
  2247 ;; This function uses a non-reentrant model
  2248 ;;
  2249                           
  2250                           	psect	text1
  2251  00001C                     __ptext1:
  2252                           	opt stack 0
  2253  00001C                     _printf:
  2254                           	opt stack 26
  2255                           
  2256                           ;doprnt.c: 466: va_list ap;
  2257                           ;doprnt.c: 499: signed char c;
  2258                           ;doprnt.c: 501: int width;
  2259                           ;doprnt.c: 504: int prec;
  2260                           ;doprnt.c: 508: unsigned char flag;
  2261                           ;doprnt.c: 523: union {
  2262                           ;doprnt.c: 524: unsigned long vd;
  2263                           ;doprnt.c: 525: double integ;
  2264                           ;doprnt.c: 526: } tmpval;
  2265                           ;doprnt.c: 528: unsigned long val;
  2266                           ;doprnt.c: 529: unsigned len;
  2267                           ;doprnt.c: 530: const char * cp;
  2268                           ;doprnt.c: 533: *ap = __va_start();
  2269                           
  2270                           ;incstack = 0
  2271  00001C  0E29               	movlw	low (?_printf+2)
  2272  00001E  0100               	movlb	0	; () banked
  2273  000020  6FED               	movwf	printf@ap& (0+255),b
  2274  000022  0E00               	movlw	high (?_printf+2)
  2275  000024  0100               	movlb	0	; () banked
  2276  000026  6FEE               	movwf	(printf@ap+1)& (0+255),b
  2277                           
  2278                           ;doprnt.c: 536: while(c = *f++) {
  2279  000028  D254               	goto	l5083
  2280  00002A                     l4945:
  2281                           
  2282                           ; BSR set to: 0
  2283                           ;doprnt.c: 538: if(c != '%')
  2284  00002A  0E25               	movlw	37
  2285  00002C  0100               	movlb	0	; () banked
  2286  00002E  19F6               	xorwf	printf@c& (0+255),w,b
  2287  000030  B4D8               	btfsc	status,2,c
  2288  000032  D005               	goto	l4949
  2289                           
  2290                           ; BSR set to: 0
  2291                           ;doprnt.c: 540: {
  2292                           ;doprnt.c: 541: (putch(c) );
  2293  000034  0100               	movlb	0	; () banked
  2294  000036  51F6               	movf	printf@c& (0+255),w,b
  2295  000038  ECAF  F00D         	call	_putch
  2296                           
  2297                           ;doprnt.c: 542: continue;
  2298  00003C  D24A               	goto	l5083
  2299  00003E                     l4949:
  2300                           
  2301                           ;doprnt.c: 543: }
  2302                           ;doprnt.c: 546: width = 0;
  2303  00003E  0E00               	movlw	0
  2304  000040  0100               	movlb	0	; () banked
  2305  000042  6FF4               	movwf	(printf@width+1)& (0+255),b
  2306  000044  0E00               	movlw	0
  2307  000046  6FF3               	movwf	printf@width& (0+255),b
  2308                           
  2309                           ;doprnt.c: 548: flag = 0;
  2310  000048  0E00               	movlw	0
  2311  00004A  0100               	movlb	0	; () banked
  2312  00004C  6FF5               	movwf	printf@flag& (0+255),b
  2313                           
  2314                           ; BSR set to: 0
  2315                           ;doprnt.c: 551: switch(*f) {
  2316                           
  2317                           ;doprnt.c: 550: for(;;) {
  2318  00004E  D006               	goto	l4955
  2319  000050                     l4951:
  2320                           
  2321                           ;doprnt.c: 580: flag |= 0x04;
  2322  000050  0100               	movlb	0	; () banked
  2323  000052  85F5               	bsf	printf@flag& (0+255),2,b
  2324                           
  2325                           ;doprnt.c: 581: f++;
  2326  000054  4A27               	infsnz	printf@f,f,c
  2327  000056  2A28               	incf	printf@f+1,f,c
  2328                           
  2329                           ;doprnt.c: 582: continue;
  2330  000058  D001               	goto	l4955
  2331                           
  2332                           ; BSR set to: 0
  2333                           ;doprnt.c: 584: }
  2334  00005A  D00B               	goto	l4957
  2335  00005C                     l4955:
  2336  00005C  C027  FFF6         	movff	printf@f,tblptrl
  2337  000060  C028  FFF7         	movff	printf@f+1,tblptrh
  2338  000064                     	if	0	;tblptru may be non-zero
  2339  000064                     	endif
  2340  000064                     	if	0	;tblptru may be non-zero
  2341  000064                     	endif
  2342  000064  0008               	tblrd		*
  2343  000066  50F5               	movf	tablat,w,c
  2344                           
  2345                           ; Switch size 1, requested type "space"
  2346                           ; Number of cases is 1, Range of values is 48 to 48
  2347                           ; switch strategies available:
  2348                           ; Name         Instructions Cycles
  2349                           ; simple_byte            4     3 (average)
  2350                           ;	Chosen strategy is simple_byte
  2351  000068  0A30               	xorlw	48	; case 48
  2352  00006A  B4D8               	btfsc	status,2,c
  2353  00006C  D7F1               	goto	l4951
  2354                           
  2355                           ;doprnt.c: 585: break;
  2356  00006E  D001               	goto	l4957
  2357                           
  2358                           ;doprnt.c: 586: }
  2359  000070  D7F5               	goto	l4955
  2360  000072                     l4957:
  2361                           
  2362                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2363  000072  C027  FFF6         	movff	printf@f,tblptrl
  2364  000076  C028  FFF7         	movff	printf@f+1,tblptrh
  2365  00007A                     	if	0	;tblptru may be non-zero
  2366  00007A                     	endif
  2367  00007A                     	if	0	;tblptru may be non-zero
  2368  00007A                     	endif
  2369  00007A  0008               	tblrd		*
  2370  00007C  50F5               	movf	tablat,w,c
  2371  00007E  ECEF  F00C         	call	_isdigit
  2372  000082  A0D8               	btfss	status,0,c
  2373  000084  D042               	goto	l4975
  2374                           
  2375                           ;doprnt.c: 598: width = 0;
  2376  000086  0E00               	movlw	0
  2377  000088  0100               	movlb	0	; () banked
  2378  00008A  6FF4               	movwf	(printf@width+1)& (0+255),b
  2379  00008C  0E00               	movlw	0
  2380  00008E  6FF3               	movwf	printf@width& (0+255),b
  2381  000090  D000               	goto	l4961
  2382  000092                     l4961:
  2383                           
  2384                           ;doprnt.c: 600: width *= 10;
  2385  000092  C0F3  F011         	movff	printf@width,___wmul@multiplier
  2386  000096  C0F4  F012         	movff	printf@width+1,___wmul@multiplier+1
  2387  00009A  0E00               	movlw	0
  2388  00009C  6E14               	movwf	___wmul@multiplicand+1,c
  2389  00009E  0E0A               	movlw	10
  2390  0000A0  6E13               	movwf	___wmul@multiplicand,c
  2391  0000A2  ECDB  F00C         	call	___wmul	;wreg free
  2392  0000A6  C011  F0F3         	movff	?___wmul,printf@width
  2393  0000AA  C012  F0F4         	movff	?___wmul+1,printf@width+1
  2394                           
  2395                           ;doprnt.c: 601: width += *f++ - '0';
  2396  0000AE  0ED0               	movlw	208
  2397  0000B0  6E35               	movwf	??_printf& (0+255),c
  2398  0000B2  0EFF               	movlw	255
  2399  0000B4  6E36               	movwf	(??_printf+1)& (0+255),c
  2400  0000B6  C027  FFF6         	movff	printf@f,tblptrl
  2401  0000BA  C028  FFF7         	movff	printf@f+1,tblptrh
  2402  0000BE                     	if	0	;tblptru may be non-zero
  2403  0000BE                     	endif
  2404  0000BE                     	if	0	;tblptru may be non-zero
  2405  0000BE                     	endif
  2406  0000BE  0008               	tblrd		*
  2407  0000C0  50F5               	movf	tablat,w,c
  2408  0000C2  6E37               	movwf	(??_printf+2)& (0+255),c
  2409  0000C4  6A38               	clrf	(??_printf+3)& (0+255),c
  2410  0000C6  5035               	movf	??_printf,w,c
  2411  0000C8  2637               	addwf	??_printf+2,f,c
  2412  0000CA  5036               	movf	??_printf+1,w,c
  2413  0000CC  2238               	addwfc	??_printf+3,f,c
  2414  0000CE  5037               	movf	??_printf+2,w,c
  2415  0000D0  0100               	movlb	0	; () banked
  2416  0000D2  27F3               	addwf	printf@width& (0+255),f,b
  2417  0000D4  5038               	movf	??_printf+3,w,c
  2418  0000D6  0100               	movlb	0	; () banked
  2419  0000D8  23F4               	addwfc	(printf@width+1)& (0+255),f,b
  2420                           
  2421                           ; BSR set to: 0
  2422  0000DA  4A27               	infsnz	printf@f,f,c
  2423  0000DC  2A28               	incf	printf@f+1,f,c
  2424                           
  2425                           ; BSR set to: 0
  2426                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2427  0000DE  C027  FFF6         	movff	printf@f,tblptrl
  2428  0000E2  C028  FFF7         	movff	printf@f+1,tblptrh
  2429  0000E6                     	if	0	;tblptru may be non-zero
  2430  0000E6                     	endif
  2431  0000E6                     	if	0	;tblptru may be non-zero
  2432  0000E6                     	endif
  2433  0000E6  0008               	tblrd		*
  2434  0000E8  50F5               	movf	tablat,w,c
  2435  0000EA  ECEF  F00C         	call	_isdigit
  2436  0000EE  A0D8               	btfss	status,0,c
  2437  0000F0  D00C               	goto	l4975
  2438  0000F2  D7CF               	goto	l4961
  2439                           
  2440                           ;doprnt.c: 635: switch(c = *f++) {
  2441                           
  2442                           ;doprnt.c: 608: }
  2443                           ;doprnt.c: 633: loop:
  2444  0000F4  D00A               	goto	l4975
  2445                           
  2446                           ;doprnt.c: 638: goto alldone;
  2447                           
  2448                           ;doprnt.c: 637: case 0:
  2449  0000F6  D1FC               	goto	l641
  2450  0000F8                     l4969:
  2451                           
  2452                           ;doprnt.c: 643: flag |= 0x10;
  2453  0000F8  0100               	movlb	0	; () banked
  2454  0000FA  89F5               	bsf	printf@flag& (0+255),4,b
  2455                           
  2456                           ;doprnt.c: 644: goto loop;
  2457  0000FC  D006               	goto	l4975
  2458                           
  2459                           ; BSR set to: 0
  2460                           ;doprnt.c: 698: case 'i':
  2461                           ;doprnt.c: 699: break;
  2462                           
  2463                           ; BSR set to: 0
  2464                           
  2465                           ;doprnt.c: 697: case 'd':
  2466  0000FE  D020               	goto	l600
  2467  000100                     l4971:
  2468                           
  2469                           ; BSR set to: 0
  2470                           ;doprnt.c: 721: flag |= 0x80;
  2471  000100  0100               	movlb	0	; () banked
  2472  000102  8FF5               	bsf	printf@flag& (0+255),7,b
  2473                           
  2474                           ;doprnt.c: 723: break;
  2475  000104  D01D               	goto	l600
  2476                           
  2477                           ; BSR set to: 0
  2478                           ;doprnt.c: 813: continue;
  2479                           
  2480                           ;doprnt.c: 802: default:
  2481  000106  D1E5               	goto	l5083
  2482                           
  2483                           ; BSR set to: 0
  2484                           ;doprnt.c: 822: }
  2485  000108  D01B               	goto	l600
  2486  00010A                     l4975:
  2487  00010A  C027  FFF6         	movff	printf@f,tblptrl
  2488  00010E  C028  FFF7         	movff	printf@f+1,tblptrh
  2489  000112  4A27               	infsnz	printf@f,f,c
  2490  000114  2A28               	incf	printf@f+1,f,c
  2491  000116                     	if	0	;tblptru may be non-zero
  2492  000116                     	endif
  2493  000116                     	if	0	;tblptru may be non-zero
  2494  000116                     	endif
  2495  000116  0008               	tblrd		*
  2496  000118  CFF5 F0F6          	movff	tablat,printf@c
  2497  00011C  0100               	movlb	0	; () banked
  2498  00011E  51F6               	movf	printf@c& (0+255),w,b
  2499                           
  2500                           ; Switch size 1, requested type "space"
  2501                           ; Number of cases is 5, Range of values is 0 to 120
  2502                           ; switch strategies available:
  2503                           ; Name         Instructions Cycles
  2504                           ; simple_byte           16     9 (average)
  2505                           ;	Chosen strategy is simple_byte
  2506  000120  0A00               	xorlw	0	; case 0
  2507  000122  B4D8               	btfsc	status,2,c
  2508  000124  D1E5               	goto	l641
  2509  000126  0A64               	xorlw	100	; case 100
  2510  000128  B4D8               	btfsc	status,2,c
  2511  00012A  D00A               	goto	l600
  2512  00012C  0A0D               	xorlw	13	; case 105
  2513  00012E  B4D8               	btfsc	status,2,c
  2514  000130  D007               	goto	l600
  2515  000132  0A05               	xorlw	5	; case 108
  2516  000134  B4D8               	btfsc	status,2,c
  2517  000136  D7E0               	goto	l4969
  2518  000138  0A14               	xorlw	20	; case 120
  2519  00013A  B4D8               	btfsc	status,2,c
  2520  00013C  D7E1               	goto	l4971
  2521  00013E  D1C9               	goto	l5083
  2522  000140                     l600:
  2523                           
  2524                           ; BSR set to: 0
  2525                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  2526  000140  0100               	movlb	0	; () banked
  2527  000142  BFF5               	btfsc	printf@flag& (0+255),7,b
  2528  000144  D035               	goto	l603
  2529                           
  2530                           ; BSR set to: 0
  2531                           ;doprnt.c: 1253: {
  2532                           ;doprnt.c: 1255: if(flag & 0x10)
  2533  000146  0100               	movlb	0	; () banked
  2534  000148  A9F5               	btfss	printf@flag& (0+255),4,b
  2535  00014A  D00E               	goto	l4983
  2536                           
  2537                           ; BSR set to: 0
  2538                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  2539  00014C  C0ED  FFD9         	movff	printf@ap,fsr2l
  2540  000150  C0EE  FFDA         	movff	printf@ap+1,fsr2h
  2541  000154  CFDE F0EF          	movff	postinc2,printf@val
  2542  000158  CFDE F0F0          	movff	postinc2,printf@val+1
  2543  00015C  CFDE F0F1          	movff	postinc2,printf@val+2
  2544  000160  CFDE F0F2          	movff	postinc2,printf@val+3
  2545                           
  2546                           ; BSR set to: 0
  2547  000164  0E04               	movlw	4
  2548  000166  D00F               	goto	L1
  2549  000168                     l4983:
  2550                           
  2551                           ; BSR set to: 0
  2552                           ;doprnt.c: 1257: else
  2553                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  2554  000168  C0ED  FFD9         	movff	printf@ap,fsr2l
  2555  00016C  C0EE  FFDA         	movff	printf@ap+1,fsr2h
  2556  000170  CFDE F0EF          	movff	postinc2,printf@val
  2557  000174  CFDD F0F0          	movff	postdec2,printf@val+1
  2558  000178  0100               	movlb	0	; () banked
  2559  00017A  0E00               	movlw	0
  2560  00017C  BFF0               	btfsc	(printf@val+1)& (0+255),7,b
  2561  00017E  0EFF               	movlw	-1
  2562  000180  6FF1               	movwf	(printf@val+2)& (0+255),b
  2563  000182  6FF2               	movwf	(printf@val+3)& (0+255),b
  2564                           
  2565                           ; BSR set to: 0
  2566  000184  0E02               	movlw	2
  2567  000186                     L1:
  2568  000186  0100               	movlb	0	; () banked
  2569  000188  27ED               	addwf	printf@ap& (0+255),f,b
  2570  00018A  0E00               	movlw	0
  2571  00018C  23EE               	addwfc	(printf@ap+1)& (0+255),f,b
  2572  00018E  D000               	goto	l4987
  2573  000190                     l4987:
  2574                           
  2575                           ; BSR set to: 0
  2576                           ;doprnt.c: 1261: if((long)val < 0) {
  2577  000190  0100               	movlb	0	; () banked
  2578  000192  AFF2               	btfss	(printf@val+3)& (0+255),7,b
  2579  000194  D089               	goto	l5031
  2580                           
  2581                           ; BSR set to: 0
  2582                           ;doprnt.c: 1262: flag |= 0x03;
  2583  000196  0E03               	movlw	3
  2584  000198  0100               	movlb	0	; () banked
  2585  00019A  13F5               	iorwf	printf@flag& (0+255),f,b
  2586                           
  2587                           ; BSR set to: 0
  2588                           ;doprnt.c: 1263: val = -val;
  2589  00019C  0100               	movlb	0	; () banked
  2590  00019E  1FF2               	comf	(printf@val+3)& (0+255),f,b
  2591  0001A0  1FF1               	comf	(printf@val+2)& (0+255),f,b
  2592  0001A2  1FF0               	comf	(printf@val+1)& (0+255),f,b
  2593  0001A4  6DEF               	negf	printf@val& (0+255),b
  2594  0001A6  0E00               	movlw	0
  2595  0001A8  23F0               	addwfc	(printf@val+1)& (0+255),f,b
  2596  0001AA  23F1               	addwfc	(printf@val+2)& (0+255),f,b
  2597  0001AC  23F2               	addwfc	(printf@val+3)& (0+255),f,b
  2598                           
  2599                           ; BSR set to: 0
  2600                           ;doprnt.c: 1264: }
  2601                           ;doprnt.c: 1266: }
  2602  0001AE  D07C               	goto	l5031
  2603  0001B0                     l603:
  2604                           
  2605                           ; BSR set to: 0
  2606                           ;doprnt.c: 1268: else
  2607                           ;doprnt.c: 1273: {
  2608                           ;doprnt.c: 1281: if(flag & 0x10)
  2609  0001B0  0100               	movlb	0	; () banked
  2610  0001B2  A9F5               	btfss	printf@flag& (0+255),4,b
  2611  0001B4  D00E               	goto	l4997
  2612                           
  2613                           ; BSR set to: 0
  2614                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  2615  0001B6  C0ED  FFD9         	movff	printf@ap,fsr2l
  2616  0001BA  C0EE  FFDA         	movff	printf@ap+1,fsr2h
  2617  0001BE  CFDE F0EF          	movff	postinc2,printf@val
  2618  0001C2  CFDE F0F0          	movff	postinc2,printf@val+1
  2619  0001C6  CFDE F0F1          	movff	postinc2,printf@val+2
  2620  0001CA  CFDE F0F2          	movff	postinc2,printf@val+3
  2621                           
  2622                           ; BSR set to: 0
  2623  0001CE  0E04               	movlw	4
  2624  0001D0  D010               	goto	L2
  2625  0001D2                     l4997:
  2626                           
  2627                           ; BSR set to: 0
  2628                           ;doprnt.c: 1283: else
  2629                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2630  0001D2  C0ED  FFD9         	movff	printf@ap,fsr2l
  2631  0001D6  C0EE  FFDA         	movff	printf@ap+1,fsr2h
  2632  0001DA  CFDE F035          	movff	postinc2,??_printf
  2633  0001DE  CFDD F036          	movff	postdec2,??_printf+1
  2634  0001E2  C035  F0EF         	movff	??_printf,printf@val
  2635  0001E6  C036  F0F0         	movff	??_printf+1,printf@val+1
  2636  0001EA  0100               	movlb	0	; () banked
  2637  0001EC  6BF1               	clrf	(printf@val+2)& (0+255),b
  2638  0001EE  6BF2               	clrf	(printf@val+3)& (0+255),b
  2639                           
  2640                           ; BSR set to: 0
  2641  0001F0  0E02               	movlw	2
  2642  0001F2                     L2:
  2643  0001F2  0100               	movlb	0	; () banked
  2644  0001F4  27ED               	addwf	printf@ap& (0+255),f,b
  2645  0001F6  0E00               	movlw	0
  2646  0001F8  23EE               	addwfc	(printf@ap+1)& (0+255),f,b
  2647                           
  2648                           ; BSR set to: 0
  2649                           ;doprnt.c: 1287: }
  2650                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  2651                           
  2652                           ; BSR set to: 0
  2653  0001FA  D056               	goto	l5031
  2654  0001FC                     l5001:
  2655                           
  2656                           ; BSR set to: 0
  2657                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2658  0001FC  0E01               	movlw	1
  2659  0001FE  0100               	movlb	0	; () banked
  2660  000200  6FF6               	movwf	printf@c& (0+255),b
  2661  000202                     l5003:
  2662                           
  2663                           ; BSR set to: 0
  2664  000202  0E0A               	movlw	10
  2665  000204  0100               	movlb	0	; () banked
  2666  000206  19F6               	xorwf	printf@c& (0+255),w,b
  2667  000208  B4D8               	btfsc	status,2,c
  2668  00020A  D058               	goto	l5033
  2669  00020C  D001               	goto	l5007
  2670                           
  2671                           ; BSR set to: 0
  2672  00020E  D056               	goto	l5033
  2673  000210                     l5007:
  2674                           
  2675                           ; BSR set to: 0
  2676                           ;doprnt.c: 1306: if(val < dpowers[c])
  2677  000210  0100               	movlb	0	; () banked
  2678  000212  51F6               	movf	printf@c& (0+255),w,b
  2679  000214  0D04               	mullw	4
  2680  000216  0E24               	movlw	low _dpowers
  2681  000218  24F3               	addwf	prodl,w,c
  2682  00021A  6EF6               	movwf	tblptrl,c
  2683  00021C  0EFF               	movlw	high _dpowers
  2684  00021E  20F4               	addwfc	prodh,w,c
  2685  000220  6EF7               	movwf	tblptrh,c
  2686  000222                     	if	0	;There are less than 3 active tblptr bytes
  2687  000222                     	endif
  2688  000222  0009               	tblrd		*+
  2689  000224  50F5               	movf	tablat,w,c
  2690  000226  0100               	movlb	0	; () banked
  2691  000228  5DEF               	subwf	printf@val& (0+255),w,b
  2692  00022A  0009               	tblrd		*+
  2693  00022C  50F5               	movf	tablat,w,c
  2694  00022E  0100               	movlb	0	; () banked
  2695  000230  59F0               	subwfb	(printf@val+1)& (0+255),w,b
  2696  000232  0009               	tblrd		*+
  2697  000234  50F5               	movf	tablat,w,c
  2698  000236  0100               	movlb	0	; () banked
  2699  000238  59F1               	subwfb	(printf@val+2)& (0+255),w,b
  2700  00023A  0009               	tblrd		*+
  2701  00023C  50F5               	movf	tablat,w,c
  2702  00023E  0100               	movlb	0	; () banked
  2703  000240  59F2               	subwfb	(printf@val+3)& (0+255),w,b
  2704  000242  A0D8               	btfss	status,0,c
  2705  000244  D03B               	goto	l5033
  2706  000246  D001               	goto	l5011
  2707                           
  2708                           ; BSR set to: 0
  2709                           ;doprnt.c: 1307: break;
  2710  000248  D039               	goto	l5033
  2711  00024A                     l5011:
  2712                           
  2713                           ; BSR set to: 0
  2714  00024A  0100               	movlb	0	; () banked
  2715  00024C  2BF6               	incf	printf@c& (0+255),f,b
  2716  00024E  D7D9               	goto	l5003
  2717                           
  2718                           ; BSR set to: 0
  2719                           ;doprnt.c: 1309: break;
  2720                           
  2721                           ; BSR set to: 0
  2722  000250  D035               	goto	l5033
  2723  000252                     l5015:
  2724                           
  2725                           ; BSR set to: 0
  2726                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2727  000252  0E01               	movlw	1
  2728  000254  0100               	movlb	0	; () banked
  2729  000256  6FF6               	movwf	printf@c& (0+255),b
  2730  000258                     l5017:
  2731                           
  2732                           ; BSR set to: 0
  2733  000258  0E08               	movlw	8
  2734  00025A  0100               	movlb	0	; () banked
  2735  00025C  19F6               	xorwf	printf@c& (0+255),w,b
  2736  00025E  B4D8               	btfsc	status,2,c
  2737  000260  D02D               	goto	l5033
  2738  000262  D001               	goto	l5021
  2739                           
  2740                           ; BSR set to: 0
  2741  000264  D02B               	goto	l5033
  2742  000266                     l5021:
  2743                           
  2744                           ; BSR set to: 0
  2745                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2746  000266  0100               	movlb	0	; () banked
  2747  000268  51F6               	movf	printf@c& (0+255),w,b
  2748  00026A  0D04               	mullw	4
  2749  00026C  0E4C               	movlw	low _hexpowers
  2750  00026E  24F3               	addwf	prodl,w,c
  2751  000270  6EF6               	movwf	tblptrl,c
  2752  000272  0EFF               	movlw	high _hexpowers
  2753  000274  20F4               	addwfc	prodh,w,c
  2754  000276  6EF7               	movwf	tblptrh,c
  2755  000278                     	if	0	;There are less than 3 active tblptr bytes
  2756  000278                     	endif
  2757  000278  0009               	tblrd		*+
  2758  00027A  50F5               	movf	tablat,w,c
  2759  00027C  0100               	movlb	0	; () banked
  2760  00027E  5DEF               	subwf	printf@val& (0+255),w,b
  2761  000280  0009               	tblrd		*+
  2762  000282  50F5               	movf	tablat,w,c
  2763  000284  0100               	movlb	0	; () banked
  2764  000286  59F0               	subwfb	(printf@val+1)& (0+255),w,b
  2765  000288  0009               	tblrd		*+
  2766  00028A  50F5               	movf	tablat,w,c
  2767  00028C  0100               	movlb	0	; () banked
  2768  00028E  59F1               	subwfb	(printf@val+2)& (0+255),w,b
  2769  000290  0009               	tblrd		*+
  2770  000292  50F5               	movf	tablat,w,c
  2771  000294  0100               	movlb	0	; () banked
  2772  000296  59F2               	subwfb	(printf@val+3)& (0+255),w,b
  2773  000298  A0D8               	btfss	status,0,c
  2774  00029A  D010               	goto	l5033
  2775  00029C  D001               	goto	l5025
  2776                           
  2777                           ; BSR set to: 0
  2778                           ;doprnt.c: 1318: break;
  2779  00029E  D00E               	goto	l5033
  2780  0002A0                     l5025:
  2781                           
  2782                           ; BSR set to: 0
  2783  0002A0  0100               	movlb	0	; () banked
  2784  0002A2  2BF6               	incf	printf@c& (0+255),f,b
  2785  0002A4  D7D9               	goto	l5017
  2786                           
  2787                           ; BSR set to: 0
  2788                           ;doprnt.c: 1336: }
  2789                           
  2790                           ; BSR set to: 0
  2791                           ;doprnt.c: 1320: break;
  2792                           
  2793                           ; BSR set to: 0
  2794  0002A6  D00A               	goto	l5033
  2795  0002A8                     l5031:
  2796                           
  2797                           ; BSR set to: 0
  2798  0002A8  0100               	movlb	0	; () banked
  2799  0002AA  51F5               	movf	printf@flag& (0+255),w,b
  2800  0002AC  0B80               	andlw	128
  2801                           
  2802                           ; Switch size 1, requested type "space"
  2803                           ; Number of cases is 2, Range of values is 0 to 128
  2804                           ; switch strategies available:
  2805                           ; Name         Instructions Cycles
  2806                           ; simple_byte            7     4 (average)
  2807                           ;	Chosen strategy is simple_byte
  2808  0002AE  0A00               	xorlw	0	; case 0
  2809  0002B0  B4D8               	btfsc	status,2,c
  2810  0002B2  D7A4               	goto	l5001
  2811  0002B4  0A80               	xorlw	128	; case 128
  2812  0002B6  B4D8               	btfsc	status,2,c
  2813  0002B8  D7CC               	goto	l5015
  2814  0002BA  D000               	goto	l5033
  2815  0002BC                     l5033:
  2816                           
  2817                           ; BSR set to: 0
  2818                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2819  0002BC  0100               	movlb	0	; () banked
  2820  0002BE  51F3               	movf	printf@width& (0+255),w,b
  2821  0002C0  0100               	movlb	0	; () banked
  2822  0002C2  11F4               	iorwf	(printf@width+1)& (0+255),w,b
  2823  0002C4  B4D8               	btfsc	status,2,c
  2824  0002C6  D00B               	goto	l5039
  2825                           
  2826                           ; BSR set to: 0
  2827  0002C8  C0F5  F035         	movff	printf@flag,??_printf
  2828  0002CC  0E03               	movlw	3
  2829  0002CE  1635               	andwf	??_printf,f,c
  2830  0002D0  B4D8               	btfsc	status,2,c
  2831  0002D2  D005               	goto	l5039
  2832                           
  2833                           ; BSR set to: 0
  2834                           ;doprnt.c: 1346: width--;
  2835  0002D4  0100               	movlb	0	; () banked
  2836  0002D6  07F3               	decf	printf@width& (0+255),f,b
  2837  0002D8  A0D8               	btfss	status,0,c
  2838  0002DA  07F4               	decf	(printf@width+1)& (0+255),f,b
  2839  0002DC  D000               	goto	l5039
  2840  0002DE                     l5039:
  2841                           
  2842                           ; BSR set to: 0
  2843                           ;doprnt.c: 1381: if(width > c)
  2844  0002DE  0E80               	movlw	128
  2845  0002E0  0100               	movlb	0	; () banked
  2846  0002E2  BFF6               	btfsc	printf@c& (0+255),7,b
  2847  0002E4  0E7F               	movlw	127
  2848  0002E6  6E35               	movwf	??_printf& (0+255),c
  2849  0002E8  0100               	movlb	0	; () banked
  2850  0002EA  51F3               	movf	printf@width& (0+255),w,b
  2851  0002EC  0100               	movlb	0	; () banked
  2852  0002EE  5DF6               	subwf	printf@c& (0+255),w,b
  2853  0002F0  0100               	movlb	0	; () banked
  2854  0002F2  51F4               	movf	(printf@width+1)& (0+255),w,b
  2855  0002F4  0A80               	xorlw	128
  2856  0002F6  5835               	subwfb	??_printf& (0+255),w,c
  2857  0002F8  B0D8               	btfsc	status,0,c
  2858  0002FA  D00B               	goto	l5043
  2859                           
  2860                           ; BSR set to: 0
  2861                           ;doprnt.c: 1382: width -= c;
  2862  0002FC  0100               	movlb	0	; () banked
  2863  0002FE  51F6               	movf	printf@c& (0+255),w,b
  2864  000300  0100               	movlb	0	; () banked
  2865  000302  5FF3               	subwf	printf@width& (0+255),f,b
  2866  000304  0E00               	movlw	0
  2867  000306  0100               	movlb	0	; () banked
  2868  000308  BFF6               	btfsc	printf@c& (0+255),7,b
  2869  00030A  0EFF               	movlw	255
  2870  00030C  0100               	movlb	0	; () banked
  2871  00030E  5BF4               	subwfb	(printf@width+1)& (0+255),f,b
  2872  000310  D006               	goto	l5045
  2873  000312                     l5043:
  2874                           
  2875                           ; BSR set to: 0
  2876                           ;doprnt.c: 1383: else
  2877                           ;doprnt.c: 1384: width = 0;
  2878  000312  0E00               	movlw	0
  2879  000314  0100               	movlb	0	; () banked
  2880  000316  6FF4               	movwf	(printf@width+1)& (0+255),b
  2881  000318  0E00               	movlw	0
  2882  00031A  6FF3               	movwf	printf@width& (0+255),b
  2883  00031C  D000               	goto	l5045
  2884  00031E                     l5045:
  2885                           
  2886                           ; BSR set to: 0
  2887                           ;doprnt.c: 1387: if(flag & 0x04) {
  2888  00031E  0100               	movlb	0	; () banked
  2889  000320  A5F5               	btfss	printf@flag& (0+255),2,b
  2890  000322  D01F               	goto	l5057
  2891                           
  2892                           ; BSR set to: 0
  2893                           ;doprnt.c: 1392: if(flag & 0x03)
  2894  000324  C0F5  F035         	movff	printf@flag,??_printf
  2895  000328  0E03               	movlw	3
  2896  00032A  1635               	andwf	??_printf,f,c
  2897  00032C  B4D8               	btfsc	status,2,c
  2898  00032E  D004               	goto	l5051
  2899                           
  2900                           ; BSR set to: 0
  2901                           ;doprnt.c: 1393: (putch('-') );
  2902  000330  0E2D               	movlw	45
  2903  000332  ECAF  F00D         	call	_putch
  2904  000336  D000               	goto	l5051
  2905  000338                     l5051:
  2906                           
  2907                           ;doprnt.c: 1415: if(width)
  2908  000338  0100               	movlb	0	; () banked
  2909  00033A  51F3               	movf	printf@width& (0+255),w,b
  2910  00033C  0100               	movlb	0	; () banked
  2911  00033E  11F4               	iorwf	(printf@width+1)& (0+255),w,b
  2912  000340  B4D8               	btfsc	status,2,c
  2913  000342  D02E               	goto	l5067
  2914  000344                     l5053:
  2915                           
  2916                           ; BSR set to: 0
  2917                           ;doprnt.c: 1417: (putch('0') );
  2918  000344  0E30               	movlw	48
  2919  000346  ECAF  F00D         	call	_putch
  2920                           
  2921                           ;doprnt.c: 1418: while(--width);
  2922  00034A  0100               	movlb	0	; () banked
  2923  00034C  07F3               	decf	printf@width& (0+255),f,b
  2924  00034E  A0D8               	btfss	status,0,c
  2925  000350  07F4               	decf	(printf@width+1)& (0+255),f,b
  2926  000352  0100               	movlb	0	; () banked
  2927  000354  51F3               	movf	printf@width& (0+255),w,b
  2928  000356  0100               	movlb	0	; () banked
  2929  000358  11F4               	iorwf	(printf@width+1)& (0+255),w,b
  2930  00035A  B4D8               	btfsc	status,2,c
  2931  00035C  D021               	goto	l5067
  2932  00035E  D7F2               	goto	l5053
  2933                           
  2934                           ; BSR set to: 0
  2935                           ;doprnt.c: 1420: } else
  2936                           
  2937                           ; BSR set to: 0
  2938  000360  D01F               	goto	l5067
  2939  000362                     l5057:
  2940                           
  2941                           ; BSR set to: 0
  2942                           ;doprnt.c: 1422: {
  2943                           ;doprnt.c: 1424: if(width
  2944                           ;doprnt.c: 1428: )
  2945  000362  0100               	movlb	0	; () banked
  2946  000364  51F3               	movf	printf@width& (0+255),w,b
  2947  000366  0100               	movlb	0	; () banked
  2948  000368  11F4               	iorwf	(printf@width+1)& (0+255),w,b
  2949  00036A  B4D8               	btfsc	status,2,c
  2950  00036C  D00F               	goto	l5063
  2951  00036E                     l5059:
  2952                           
  2953                           ; BSR set to: 0
  2954                           ;doprnt.c: 1430: (putch(' ') );
  2955  00036E  0E20               	movlw	32
  2956  000370  ECAF  F00D         	call	_putch
  2957                           
  2958                           ;doprnt.c: 1431: while(--width);
  2959  000374  0100               	movlb	0	; () banked
  2960  000376  07F3               	decf	printf@width& (0+255),f,b
  2961  000378  A0D8               	btfss	status,0,c
  2962  00037A  07F4               	decf	(printf@width+1)& (0+255),f,b
  2963  00037C  0100               	movlb	0	; () banked
  2964  00037E  51F3               	movf	printf@width& (0+255),w,b
  2965  000380  0100               	movlb	0	; () banked
  2966  000382  11F4               	iorwf	(printf@width+1)& (0+255),w,b
  2967  000384  B4D8               	btfsc	status,2,c
  2968  000386  D002               	goto	l5063
  2969  000388  D7F2               	goto	l5059
  2970                           
  2971                           ; BSR set to: 0
  2972  00038A  D000               	goto	l5063
  2973  00038C                     l5063:
  2974                           
  2975                           ; BSR set to: 0
  2976                           ;doprnt.c: 1438: if(flag & 0x03)
  2977  00038C  C0F5  F035         	movff	printf@flag,??_printf
  2978  000390  0E03               	movlw	3
  2979  000392  1635               	andwf	??_printf,f,c
  2980  000394  B4D8               	btfsc	status,2,c
  2981  000396  D004               	goto	l5067
  2982                           
  2983                           ; BSR set to: 0
  2984                           ;doprnt.c: 1439: (putch('-') );
  2985  000398  0E2D               	movlw	45
  2986  00039A  ECAF  F00D         	call	_putch
  2987  00039E  D000               	goto	l5067
  2988  0003A0                     l5067:
  2989                           
  2990                           ;doprnt.c: 1469: }
  2991                           ;doprnt.c: 1472: prec = c;
  2992  0003A0  0100               	movlb	0	; () banked
  2993  0003A2  51F6               	movf	printf@c& (0+255),w,b
  2994  0003A4  0100               	movlb	0	; () banked
  2995  0003A6  6FEB               	movwf	printf@prec& (0+255),b
  2996  0003A8  6BEC               	clrf	(printf@prec+1)& (0+255),b
  2997  0003AA  BFEB               	btfsc	printf@prec& (0+255),7,b
  2998  0003AC  07EC               	decf	(printf@prec+1)& (0+255),f,b
  2999                           
  3000                           ;doprnt.c: 1474: while(prec--) {
  3001  0003AE  D084               	goto	l5081
  3002                           
  3003                           ; BSR set to: 0
  3004                           ;doprnt.c: 1476: switch((unsigned char)(flag & 0x80))
  3005  0003B0  D074               	goto	l5077
  3006  0003B2                     l5069:
  3007                           
  3008                           ; BSR set to: 0
  3009                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3010  0003B2  C0EB  F035         	movff	printf@prec,??_printf
  3011  0003B6  C0EC  F036         	movff	printf@prec+1,??_printf+1
  3012  0003BA  90D8               	bcf	status,0,c
  3013  0003BC  3635               	rlcf	??_printf,f,c
  3014  0003BE  3636               	rlcf	??_printf+1,f,c
  3015  0003C0  90D8               	bcf	status,0,c
  3016  0003C2  3635               	rlcf	??_printf,f,c
  3017  0003C4  3636               	rlcf	??_printf+1,f,c
  3018  0003C6  0E24               	movlw	low _dpowers
  3019  0003C8  2435               	addwf	??_printf,w,c
  3020  0003CA  6EF6               	movwf	tblptrl,c
  3021  0003CC  0EFF               	movlw	high _dpowers
  3022  0003CE  2036               	addwfc	??_printf+1,w,c
  3023  0003D0  6EF7               	movwf	tblptrh,c
  3024  0003D2                     	if	0	;There are less than 3 active tblptr bytes
  3025  0003D2                     	endif
  3026  0003D2  0009               	tblrd		*+
  3027  0003D4  CFF5 F015          	movff	tablat,___lldiv@divisor
  3028  0003D8  0009               	tblrd		*+
  3029  0003DA  CFF5 F016          	movff	tablat,___lldiv@divisor+1
  3030  0003DE  0009               	tblrd		*+
  3031  0003E0  CFF5 F017          	movff	tablat,___lldiv@divisor+2
  3032  0003E4  000A               	tblrd		*-
  3033  0003E6  CFF5 F018          	movff	tablat,___lldiv@divisor+3
  3034  0003EA  C0EF  F011         	movff	printf@val,___lldiv@dividend
  3035  0003EE  C0F0  F012         	movff	printf@val+1,___lldiv@dividend+1
  3036  0003F2  C0F1  F013         	movff	printf@val+2,___lldiv@dividend+2
  3037  0003F6  C0F2  F014         	movff	printf@val+3,___lldiv@dividend+3
  3038  0003FA  ECF1  F008         	call	___lldiv	;wreg free
  3039  0003FE  C011  F01E         	movff	?___lldiv,___llmod@dividend
  3040  000402  C012  F01F         	movff	?___lldiv+1,___llmod@dividend+1
  3041  000406  C013  F020         	movff	?___lldiv+2,___llmod@dividend+2
  3042  00040A  C014  F021         	movff	?___lldiv+3,___llmod@dividend+3
  3043  00040E  0E0A               	movlw	10
  3044  000410  6E22               	movwf	___llmod@divisor,c
  3045  000412  0E00               	movlw	0
  3046  000414  6E23               	movwf	___llmod@divisor+1,c
  3047  000416  0E00               	movlw	0
  3048  000418  6E24               	movwf	___llmod@divisor+2,c
  3049  00041A  0E00               	movlw	0
  3050  00041C  6E25               	movwf	___llmod@divisor+3,c
  3051  00041E  ECF6  F009         	call	___llmod	;wreg free
  3052  000422  501E               	movf	?___llmod,w,c
  3053  000424  0F30               	addlw	48
  3054  000426  0100               	movlb	0	; () banked
  3055  000428  6FF6               	movwf	printf@c& (0+255),b
  3056                           
  3057                           ;doprnt.c: 1491: break;
  3058  00042A  D041               	goto	l5079
  3059  00042C                     l5071:
  3060                           
  3061                           ; BSR set to: 0
  3062                           ;doprnt.c: 1499: {
  3063                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  3064  00042C  C0EF  F011         	movff	printf@val,___lldiv@dividend
  3065  000430  C0F0  F012         	movff	printf@val+1,___lldiv@dividend+1
  3066  000434  C0F1  F013         	movff	printf@val+2,___lldiv@dividend+2
  3067  000438  C0F2  F014         	movff	printf@val+3,___lldiv@dividend+3
  3068  00043C  C0EB  F035         	movff	printf@prec,??_printf
  3069  000440  C0EC  F036         	movff	printf@prec+1,??_printf+1
  3070  000444  90D8               	bcf	status,0,c
  3071  000446  3635               	rlcf	??_printf,f,c
  3072  000448  3636               	rlcf	??_printf+1,f,c
  3073  00044A  90D8               	bcf	status,0,c
  3074  00044C  3635               	rlcf	??_printf,f,c
  3075  00044E  3636               	rlcf	??_printf+1,f,c
  3076  000450  0E4C               	movlw	low _hexpowers
  3077  000452  2435               	addwf	??_printf,w,c
  3078  000454  6EF6               	movwf	tblptrl,c
  3079  000456  0EFF               	movlw	high _hexpowers
  3080  000458  2036               	addwfc	??_printf+1,w,c
  3081  00045A  6EF7               	movwf	tblptrh,c
  3082  00045C                     	if	0	;There are less than 3 active tblptr bytes
  3083  00045C                     	endif
  3084  00045C  0009               	tblrd		*+
  3085  00045E  CFF5 F015          	movff	tablat,___lldiv@divisor
  3086  000462  0009               	tblrd		*+
  3087  000464  CFF5 F016          	movff	tablat,___lldiv@divisor+1
  3088  000468  0009               	tblrd		*+
  3089  00046A  CFF5 F017          	movff	tablat,___lldiv@divisor+2
  3090  00046E  000A               	tblrd		*-
  3091  000470  CFF5 F018          	movff	tablat,___lldiv@divisor+3
  3092  000474  ECF1  F008         	call	___lldiv	;wreg free
  3093  000478  5011               	movf	?___lldiv,w,c
  3094  00047A  0B0F               	andlw	15
  3095  00047C  0100               	movlb	0	; () banked
  3096  00047E  6FEA               	movwf	printf@idx& (0+255),b
  3097                           
  3098                           ; BSR set to: 0
  3099                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  3100  000480  0100               	movlb	0	; () banked
  3101  000482  51EA               	movf	printf@idx& (0+255),w,b
  3102  000484  0D01               	mullw	1
  3103  000486  0EDF               	movlw	low STR_7
  3104  000488  24F3               	addwf	prodl,w,c
  3105  00048A  6EF6               	movwf	tblptrl,c
  3106  00048C  0EFF               	movlw	high STR_7
  3107  00048E  20F4               	addwfc	prodh,w,c
  3108  000490  6EF7               	movwf	tblptrh,c
  3109  000492                     	if	0	;There are less than 3 active tblptr bytes
  3110  000492                     	endif
  3111  000492  0008               	tblrd		*
  3112  000494  CFF5 F0F6          	movff	tablat,printf@c
  3113                           
  3114                           ; BSR set to: 0
  3115                           ;doprnt.c: 1523: }
  3116                           
  3117                           ;doprnt.c: 1508: }
  3118                           ;doprnt.c: 1510: break;
  3119  000498  D00A               	goto	l5079
  3120  00049A                     l5077:
  3121                           
  3122                           ; BSR set to: 0
  3123  00049A  0100               	movlb	0	; () banked
  3124  00049C  51F5               	movf	printf@flag& (0+255),w,b
  3125  00049E  0B80               	andlw	128
  3126                           
  3127                           ; Switch size 1, requested type "space"
  3128                           ; Number of cases is 2, Range of values is 0 to 128
  3129                           ; switch strategies available:
  3130                           ; Name         Instructions Cycles
  3131                           ; simple_byte            7     4 (average)
  3132                           ;	Chosen strategy is simple_byte
  3133  0004A0  0A00               	xorlw	0	; case 0
  3134  0004A2  B4D8               	btfsc	status,2,c
  3135  0004A4  D786               	goto	l5069
  3136  0004A6  0A80               	xorlw	128	; case 128
  3137  0004A8  B4D8               	btfsc	status,2,c
  3138  0004AA  D7C0               	goto	l5071
  3139  0004AC  D000               	goto	l5079
  3140  0004AE                     l5079:
  3141                           
  3142                           ; BSR set to: 0
  3143                           ;doprnt.c: 1524: (putch(c) );
  3144  0004AE  0100               	movlb	0	; () banked
  3145  0004B0  51F6               	movf	printf@c& (0+255),w,b
  3146  0004B2  ECAF  F00D         	call	_putch
  3147  0004B6  D000               	goto	l5081
  3148  0004B8                     l5081:
  3149  0004B8  0100               	movlb	0	; () banked
  3150  0004BA  07EB               	decf	printf@prec& (0+255),f,b
  3151  0004BC  A0D8               	btfss	status,0,c
  3152  0004BE  07EC               	decf	(printf@prec+1)& (0+255),f,b
  3153  0004C0  0100               	movlb	0	; () banked
  3154  0004C2  29EB               	incf	printf@prec& (0+255),w,b
  3155  0004C4  E1EA               	bnz	l5077
  3156  0004C6  0100               	movlb	0	; () banked
  3157  0004C8  29EC               	incf	(printf@prec+1)& (0+255),w,b
  3158  0004CA  B4D8               	btfsc	status,2,c
  3159  0004CC  D002               	goto	l5083
  3160  0004CE  D7E5               	goto	l5077
  3161                           
  3162                           ; BSR set to: 0
  3163  0004D0  D000               	goto	l5083
  3164  0004D2                     l5083:
  3165  0004D2  C027  FFF6         	movff	printf@f,tblptrl
  3166  0004D6  C028  FFF7         	movff	printf@f+1,tblptrh
  3167  0004DA  4A27               	infsnz	printf@f,f,c
  3168  0004DC  2A28               	incf	printf@f+1,f,c
  3169  0004DE                     	if	0	;tblptru may be non-zero
  3170  0004DE                     	endif
  3171  0004DE                     	if	0	;tblptru may be non-zero
  3172  0004DE                     	endif
  3173  0004DE  0008               	tblrd		*
  3174  0004E0  CFF5 F0F6          	movff	tablat,printf@c
  3175  0004E4  0100               	movlb	0	; () banked
  3176  0004E6  51F6               	movf	printf@c& (0+255),w,b
  3177  0004E8  B4D8               	btfsc	status,2,c
  3178  0004EA  D002               	goto	l641
  3179  0004EC  D59E               	goto	l4945
  3180                           
  3181                           ; BSR set to: 0
  3182  0004EE  D000               	goto	l641
  3183  0004F0                     l641:
  3184  0004F0  0012               	return		;funcret
  3185  0004F2                     __end_of_printf:
  3186                           	opt stack 0
  3187                           tblptru	equ	0xFF8
  3188                           tblptrh	equ	0xFF7
  3189                           tblptrl	equ	0xFF6
  3190                           tablat	equ	0xFF5
  3191                           prodh	equ	0xFF4
  3192                           prodl	equ	0xFF3
  3193                           intcon	equ	0xFF2
  3194                           intcon2	equ	0xFF1
  3195                           postinc0	equ	0xFEE
  3196                           wreg	equ	0xFE8
  3197                           postdec1	equ	0xFE5
  3198                           fsr1l	equ	0xFE1
  3199                           postinc2	equ	0xFDE
  3200                           postdec2	equ	0xFDD
  3201                           fsr2h	equ	0xFDA
  3202                           fsr2l	equ	0xFD9
  3203                           status	equ	0xFD8
  3204                           
  3205 ;; *************** function _putch *****************
  3206 ;; Defined at:
  3207 ;;		line 149 in file "Lab10.c"
  3208 ;; Parameters:    Size  Location     Type
  3209 ;;  c               1    wreg     unsigned char 
  3210 ;; Auto vars:     Size  Location     Type
  3211 ;;  c               1   16[COMRAM] unsigned char 
  3212 ;; Return value:  Size  Location     Type
  3213 ;;		None               void
  3214 ;; Registers used:
  3215 ;;		wreg
  3216 ;; Tracked objects:
  3217 ;;		On entry : 0/0
  3218 ;;		On exit  : 0/0
  3219 ;;		Unchanged: 0/0
  3220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3221 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3222 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3223 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3224 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3225 ;;Total ram usage:        1 bytes
  3226 ;; Hardware stack levels used:    1
  3227 ;; Hardware stack levels required when called:    3
  3228 ;; This function calls:
  3229 ;;		Nothing
  3230 ;; This function is called by:
  3231 ;;		_printf
  3232 ;; This function uses a non-reentrant model
  3233 ;;
  3234                           
  3235                           	psect	text2
  3236  001B5E                     __ptext2:
  3237                           	opt stack 0
  3238  001B5E                     _putch:
  3239                           	opt stack 26
  3240                           
  3241                           ;incstack = 0
  3242                           ;putch@c stored from wreg
  3243  001B5E  6E11               	movwf	putch@c,c
  3244                           
  3245                           ;Lab10.c: 151: while (!TRMT);
  3246  001B60  D000               	goto	l520
  3247  001B62                     l520:
  3248  001B62  A2AC               	btfss	4012,1,c	;volatile
  3249  001B64  D7FE               	goto	l520
  3250                           
  3251                           ;Lab10.c: 152: TXREG = c;
  3252  001B66  C011  FFAD         	movff	putch@c,4013	;volatile
  3253  001B6A  0012               	return		;funcret
  3254  001B6C                     __end_of_putch:
  3255                           	opt stack 0
  3256                           tblptru	equ	0xFF8
  3257                           tblptrh	equ	0xFF7
  3258                           tblptrl	equ	0xFF6
  3259                           tablat	equ	0xFF5
  3260                           prodh	equ	0xFF4
  3261                           prodl	equ	0xFF3
  3262                           intcon	equ	0xFF2
  3263                           intcon2	equ	0xFF1
  3264                           postinc0	equ	0xFEE
  3265                           wreg	equ	0xFE8
  3266                           postdec1	equ	0xFE5
  3267                           fsr1l	equ	0xFE1
  3268                           postinc2	equ	0xFDE
  3269                           postdec2	equ	0xFDD
  3270                           fsr2h	equ	0xFDA
  3271                           fsr2l	equ	0xFD9
  3272                           status	equ	0xFD8
  3273                           
  3274 ;; *************** function _isdigit *****************
  3275 ;; Defined at:
  3276 ;;		line 8 in file "E:\XC8\sources\common\isdigit.c"
  3277 ;; Parameters:    Size  Location     Type
  3278 ;;  c               1    wreg     unsigned char 
  3279 ;; Auto vars:     Size  Location     Type
  3280 ;;  c               1   18[COMRAM] unsigned char 
  3281 ;; Return value:  Size  Location     Type
  3282 ;;		None               void
  3283 ;; Registers used:
  3284 ;;		wreg, status,2, status,0
  3285 ;; Tracked objects:
  3286 ;;		On entry : 0/0
  3287 ;;		On exit  : 0/0
  3288 ;;		Unchanged: 0/0
  3289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3290 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3291 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3292 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3293 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3294 ;;Total ram usage:        3 bytes
  3295 ;; Hardware stack levels used:    1
  3296 ;; Hardware stack levels required when called:    3
  3297 ;; This function calls:
  3298 ;;		Nothing
  3299 ;; This function is called by:
  3300 ;;		_printf
  3301 ;; This function uses a non-reentrant model
  3302 ;;
  3303                           
  3304                           	psect	text3
  3305  0019DE                     __ptext3:
  3306                           	opt stack 0
  3307  0019DE                     _isdigit:
  3308                           	opt stack 26
  3309                           
  3310                           ;incstack = 0
  3311                           ;isdigit@c stored from wreg
  3312  0019DE  6E13               	movwf	isdigit@c,c
  3313  0019E0  0E00               	movlw	0
  3314  0019E2  6E12               	movwf	_isdigit$2066,c
  3315  0019E4  0E3A               	movlw	58
  3316  0019E6  6013               	cpfslt	isdigit@c,c
  3317  0019E8  D006               	goto	l4727
  3318  0019EA  0E2F               	movlw	47
  3319  0019EC  6413               	cpfsgt	isdigit@c,c
  3320  0019EE  D003               	goto	l4727
  3321  0019F0  0E01               	movlw	1
  3322  0019F2  6E12               	movwf	_isdigit$2066,c
  3323  0019F4  D000               	goto	l4727
  3324  0019F6                     l4727:
  3325  0019F6  C012  F011         	movff	_isdigit$2066,??_isdigit
  3326  0019FA  3011               	rrcf	??_isdigit,w,c
  3327  0019FC  D000               	goto	l1108
  3328  0019FE                     l1108:
  3329  0019FE  0012               	return		;funcret
  3330  001A00                     __end_of_isdigit:
  3331                           	opt stack 0
  3332                           tblptru	equ	0xFF8
  3333                           tblptrh	equ	0xFF7
  3334                           tblptrl	equ	0xFF6
  3335                           tablat	equ	0xFF5
  3336                           prodh	equ	0xFF4
  3337                           prodl	equ	0xFF3
  3338                           intcon	equ	0xFF2
  3339                           intcon2	equ	0xFF1
  3340                           postinc0	equ	0xFEE
  3341                           wreg	equ	0xFE8
  3342                           postdec1	equ	0xFE5
  3343                           fsr1l	equ	0xFE1
  3344                           postinc2	equ	0xFDE
  3345                           postdec2	equ	0xFDD
  3346                           fsr2h	equ	0xFDA
  3347                           fsr2l	equ	0xFD9
  3348                           status	equ	0xFD8
  3349                           
  3350 ;; *************** function ___llmod *****************
  3351 ;; Defined at:
  3352 ;;		line 8 in file "E:\XC8\sources\common\llmod.c"
  3353 ;; Parameters:    Size  Location     Type
  3354 ;;  dividend        4   29[COMRAM] unsigned long 
  3355 ;;  divisor         4   33[COMRAM] unsigned long 
  3356 ;; Auto vars:     Size  Location     Type
  3357 ;;  counter         1   37[COMRAM] unsigned char 
  3358 ;; Return value:  Size  Location     Type
  3359 ;;                  4   29[COMRAM] unsigned long 
  3360 ;; Registers used:
  3361 ;;		wreg, status,2, status,0
  3362 ;; Tracked objects:
  3363 ;;		On entry : 0/0
  3364 ;;		On exit  : 0/0
  3365 ;;		Unchanged: 0/0
  3366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3367 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3368 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3369 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3370 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3371 ;;Total ram usage:        9 bytes
  3372 ;; Hardware stack levels used:    1
  3373 ;; Hardware stack levels required when called:    3
  3374 ;; This function calls:
  3375 ;;		Nothing
  3376 ;; This function is called by:
  3377 ;;		_printf
  3378 ;; This function uses a non-reentrant model
  3379 ;;
  3380                           
  3381                           	psect	text4
  3382  0013EC                     __ptext4:
  3383                           	opt stack 0
  3384  0013EC                     ___llmod:
  3385                           	opt stack 26
  3386                           
  3387                           ;incstack = 0
  3388  0013EC  5022               	movf	___llmod@divisor,w,c
  3389  0013EE  1023               	iorwf	___llmod@divisor+1,w,c
  3390  0013F0  1024               	iorwf	___llmod@divisor+2,w,c
  3391  0013F2  1025               	iorwf	___llmod@divisor+3,w,c
  3392  0013F4  B4D8               	btfsc	status,2,c
  3393  0013F6  D029               	goto	l1147
  3394  0013F8  0E01               	movlw	1
  3395  0013FA  6E26               	movwf	___llmod@counter,c
  3396  0013FC  D007               	goto	l4759
  3397  0013FE                     l4757:
  3398  0013FE  90D8               	bcf	status,0,c
  3399  001400  3622               	rlcf	___llmod@divisor,f,c
  3400  001402  3623               	rlcf	___llmod@divisor+1,f,c
  3401  001404  3624               	rlcf	___llmod@divisor+2,f,c
  3402  001406  3625               	rlcf	___llmod@divisor+3,f,c
  3403  001408  2A26               	incf	___llmod@counter,f,c
  3404  00140A  D000               	goto	l4759
  3405  00140C                     l4759:
  3406  00140C  BE25               	btfsc	___llmod@divisor+3,7,c
  3407  00140E  D002               	goto	l4761
  3408  001410  D7F6               	goto	l4757
  3409  001412  D000               	goto	l4761
  3410  001414                     l4761:
  3411  001414  5022               	movf	___llmod@divisor,w,c
  3412  001416  5C1E               	subwf	___llmod@dividend,w,c
  3413  001418  5023               	movf	___llmod@divisor+1,w,c
  3414  00141A  581F               	subwfb	___llmod@dividend+1,w,c
  3415  00141C  5024               	movf	___llmod@divisor+2,w,c
  3416  00141E  5820               	subwfb	___llmod@dividend+2,w,c
  3417  001420  5025               	movf	___llmod@divisor+3,w,c
  3418  001422  5821               	subwfb	___llmod@dividend+3,w,c
  3419  001424  A0D8               	btfss	status,0,c
  3420  001426  D009               	goto	l4765
  3421  001428  5022               	movf	___llmod@divisor,w,c
  3422  00142A  5E1E               	subwf	___llmod@dividend,f,c
  3423  00142C  5023               	movf	___llmod@divisor+1,w,c
  3424  00142E  5A1F               	subwfb	___llmod@dividend+1,f,c
  3425  001430  5024               	movf	___llmod@divisor+2,w,c
  3426  001432  5A20               	subwfb	___llmod@dividend+2,f,c
  3427  001434  5025               	movf	___llmod@divisor+3,w,c
  3428  001436  5A21               	subwfb	___llmod@dividend+3,f,c
  3429  001438  D000               	goto	l4765
  3430  00143A                     l4765:
  3431  00143A  90D8               	bcf	status,0,c
  3432  00143C  3225               	rrcf	___llmod@divisor+3,f,c
  3433  00143E  3224               	rrcf	___llmod@divisor+2,f,c
  3434  001440  3223               	rrcf	___llmod@divisor+1,f,c
  3435  001442  3222               	rrcf	___llmod@divisor,f,c
  3436  001444  2E26               	decfsz	___llmod@counter,f,c
  3437  001446  D7E6               	goto	l4761
  3438  001448  D000               	goto	l1147
  3439  00144A                     l1147:
  3440  00144A  C01E  F01E         	movff	___llmod@dividend,?___llmod
  3441  00144E  C01F  F01F         	movff	___llmod@dividend+1,?___llmod+1
  3442  001452  C020  F020         	movff	___llmod@dividend+2,?___llmod+2
  3443  001456  C021  F021         	movff	___llmod@dividend+3,?___llmod+3
  3444  00145A  0012               	return		;funcret
  3445  00145C                     __end_of___llmod:
  3446                           	opt stack 0
  3447                           tblptru	equ	0xFF8
  3448                           tblptrh	equ	0xFF7
  3449                           tblptrl	equ	0xFF6
  3450                           tablat	equ	0xFF5
  3451                           prodh	equ	0xFF4
  3452                           prodl	equ	0xFF3
  3453                           intcon	equ	0xFF2
  3454                           intcon2	equ	0xFF1
  3455                           postinc0	equ	0xFEE
  3456                           wreg	equ	0xFE8
  3457                           postdec1	equ	0xFE5
  3458                           fsr1l	equ	0xFE1
  3459                           postinc2	equ	0xFDE
  3460                           postdec2	equ	0xFDD
  3461                           fsr2h	equ	0xFDA
  3462                           fsr2l	equ	0xFD9
  3463                           status	equ	0xFD8
  3464                           
  3465 ;; *************** function ___lldiv *****************
  3466 ;; Defined at:
  3467 ;;		line 8 in file "E:\XC8\sources\common\lldiv.c"
  3468 ;; Parameters:    Size  Location     Type
  3469 ;;  dividend        4   16[COMRAM] unsigned long 
  3470 ;;  divisor         4   20[COMRAM] unsigned long 
  3471 ;; Auto vars:     Size  Location     Type
  3472 ;;  quotient        4   24[COMRAM] unsigned long 
  3473 ;;  counter         1   28[COMRAM] unsigned char 
  3474 ;; Return value:  Size  Location     Type
  3475 ;;                  4   16[COMRAM] unsigned long 
  3476 ;; Registers used:
  3477 ;;		wreg, status,2, status,0
  3478 ;; Tracked objects:
  3479 ;;		On entry : 0/0
  3480 ;;		On exit  : 0/0
  3481 ;;		Unchanged: 0/0
  3482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3483 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3484 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3485 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3486 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3487 ;;Total ram usage:       13 bytes
  3488 ;; Hardware stack levels used:    1
  3489 ;; Hardware stack levels required when called:    3
  3490 ;; This function calls:
  3491 ;;		Nothing
  3492 ;; This function is called by:
  3493 ;;		_printf
  3494 ;; This function uses a non-reentrant model
  3495 ;;
  3496                           
  3497                           	psect	text5
  3498  0011E2                     __ptext5:
  3499                           	opt stack 0
  3500  0011E2                     ___lldiv:
  3501                           	opt stack 26
  3502                           
  3503                           ;incstack = 0
  3504  0011E2  0E00               	movlw	0
  3505  0011E4  6E19               	movwf	___lldiv@quotient,c
  3506  0011E6  0E00               	movlw	0
  3507  0011E8  6E1A               	movwf	___lldiv@quotient+1,c
  3508  0011EA  0E00               	movlw	0
  3509  0011EC  6E1B               	movwf	___lldiv@quotient+2,c
  3510  0011EE  0E00               	movlw	0
  3511  0011F0  6E1C               	movwf	___lldiv@quotient+3,c
  3512  0011F2  5015               	movf	___lldiv@divisor,w,c
  3513  0011F4  1016               	iorwf	___lldiv@divisor+1,w,c
  3514  0011F6  1017               	iorwf	___lldiv@divisor+2,w,c
  3515  0011F8  1018               	iorwf	___lldiv@divisor+3,w,c
  3516  0011FA  B4D8               	btfsc	status,2,c
  3517  0011FC  D02F               	goto	l1137
  3518  0011FE  0E01               	movlw	1
  3519  001200  6E1D               	movwf	___lldiv@counter,c
  3520  001202  D007               	goto	l4739
  3521  001204                     l4737:
  3522  001204  90D8               	bcf	status,0,c
  3523  001206  3615               	rlcf	___lldiv@divisor,f,c
  3524  001208  3616               	rlcf	___lldiv@divisor+1,f,c
  3525  00120A  3617               	rlcf	___lldiv@divisor+2,f,c
  3526  00120C  3618               	rlcf	___lldiv@divisor+3,f,c
  3527  00120E  2A1D               	incf	___lldiv@counter,f,c
  3528  001210  D000               	goto	l4739
  3529  001212                     l4739:
  3530  001212  BE18               	btfsc	___lldiv@divisor+3,7,c
  3531  001214  D002               	goto	l4741
  3532  001216  D7F6               	goto	l4737
  3533  001218  D000               	goto	l4741
  3534  00121A                     l4741:
  3535  00121A  90D8               	bcf	status,0,c
  3536  00121C  3619               	rlcf	___lldiv@quotient,f,c
  3537  00121E  361A               	rlcf	___lldiv@quotient+1,f,c
  3538  001220  361B               	rlcf	___lldiv@quotient+2,f,c
  3539  001222  361C               	rlcf	___lldiv@quotient+3,f,c
  3540  001224  5015               	movf	___lldiv@divisor,w,c
  3541  001226  5C11               	subwf	___lldiv@dividend,w,c
  3542  001228  5016               	movf	___lldiv@divisor+1,w,c
  3543  00122A  5812               	subwfb	___lldiv@dividend+1,w,c
  3544  00122C  5017               	movf	___lldiv@divisor+2,w,c
  3545  00122E  5813               	subwfb	___lldiv@dividend+2,w,c
  3546  001230  5018               	movf	___lldiv@divisor+3,w,c
  3547  001232  5814               	subwfb	___lldiv@dividend+3,w,c
  3548  001234  A0D8               	btfss	status,0,c
  3549  001236  D00A               	goto	l4749
  3550  001238  5015               	movf	___lldiv@divisor,w,c
  3551  00123A  5E11               	subwf	___lldiv@dividend,f,c
  3552  00123C  5016               	movf	___lldiv@divisor+1,w,c
  3553  00123E  5A12               	subwfb	___lldiv@dividend+1,f,c
  3554  001240  5017               	movf	___lldiv@divisor+2,w,c
  3555  001242  5A13               	subwfb	___lldiv@dividend+2,f,c
  3556  001244  5018               	movf	___lldiv@divisor+3,w,c
  3557  001246  5A14               	subwfb	___lldiv@dividend+3,f,c
  3558  001248  8019               	bsf	___lldiv@quotient,0,c
  3559  00124A  D000               	goto	l4749
  3560  00124C                     l4749:
  3561  00124C  90D8               	bcf	status,0,c
  3562  00124E  3218               	rrcf	___lldiv@divisor+3,f,c
  3563  001250  3217               	rrcf	___lldiv@divisor+2,f,c
  3564  001252  3216               	rrcf	___lldiv@divisor+1,f,c
  3565  001254  3215               	rrcf	___lldiv@divisor,f,c
  3566  001256  2E1D               	decfsz	___lldiv@counter,f,c
  3567  001258  D7E0               	goto	l4741
  3568  00125A  D000               	goto	l1137
  3569  00125C                     l1137:
  3570  00125C  C019  F011         	movff	___lldiv@quotient,?___lldiv
  3571  001260  C01A  F012         	movff	___lldiv@quotient+1,?___lldiv+1
  3572  001264  C01B  F013         	movff	___lldiv@quotient+2,?___lldiv+2
  3573  001268  C01C  F014         	movff	___lldiv@quotient+3,?___lldiv+3
  3574  00126C  0012               	return		;funcret
  3575  00126E                     __end_of___lldiv:
  3576                           	opt stack 0
  3577                           tblptru	equ	0xFF8
  3578                           tblptrh	equ	0xFF7
  3579                           tblptrl	equ	0xFF6
  3580                           tablat	equ	0xFF5
  3581                           prodh	equ	0xFF4
  3582                           prodl	equ	0xFF3
  3583                           intcon	equ	0xFF2
  3584                           intcon2	equ	0xFF1
  3585                           postinc0	equ	0xFEE
  3586                           wreg	equ	0xFE8
  3587                           postdec1	equ	0xFE5
  3588                           fsr1l	equ	0xFE1
  3589                           postinc2	equ	0xFDE
  3590                           postdec2	equ	0xFDD
  3591                           fsr2h	equ	0xFDA
  3592                           fsr2l	equ	0xFD9
  3593                           status	equ	0xFD8
  3594                           
  3595 ;; *************** function _fillCircle *****************
  3596 ;; Defined at:
  3597 ;;		line 614 in file "ST7735_TFT.c"
  3598 ;; Parameters:    Size  Location     Type
  3599 ;;  x0              2    0[BANK0 ] int 
  3600 ;;  y0              2    2[BANK0 ] int 
  3601 ;;  r               2    4[BANK0 ] int 
  3602 ;;  color           2    6[BANK0 ] unsigned int 
  3603 ;; Auto vars:     Size  Location     Type
  3604 ;;		None
  3605 ;; Return value:  Size  Location     Type
  3606 ;;		None               void
  3607 ;; Registers used:
  3608 ;;		wreg, status,2, status,0, cstack
  3609 ;; Tracked objects:
  3610 ;;		On entry : 0/0
  3611 ;;		On exit  : 0/0
  3612 ;;		Unchanged: 0/0
  3613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3614 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3615 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3616 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3617 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3618 ;;Total ram usage:        8 bytes
  3619 ;; Hardware stack levels used:    1
  3620 ;; Hardware stack levels required when called:    8
  3621 ;; This function calls:
  3622 ;;		_drawFastVLine
  3623 ;;		_fillCircleHelper
  3624 ;; This function is called by:
  3625 ;;		_main
  3626 ;; This function uses a non-reentrant model
  3627 ;;
  3628                           
  3629                           	psect	text6
  3630  001596                     __ptext6:
  3631                           	opt stack 0
  3632  001596                     _fillCircle:
  3633                           	opt stack 22
  3634                           
  3635                           ;ST7735_TFT.c: 616: drawFastVLine(x0, y0 - r, 2 * r + 1, color);
  3636                           
  3637                           ;incstack = 0
  3638  001596  0100               	movlb	0	; () banked
  3639  001598  51EE               	movf	fillCircle@r& (0+255),w,b
  3640  00159A  0800               	sublw	0
  3641  00159C  0100               	movlb	0	; () banked
  3642  00159E  25EC               	addwf	fillCircle@y0& (0+255),w,b
  3643  0015A0  6E18               	movwf	drawFastVLine@y,c
  3644  0015A2  80D8               	bsf	status,0,c
  3645  0015A4  0100               	movlb	0	; () banked
  3646  0015A6  35EE               	rlcf	fillCircle@r& (0+255),w,b
  3647  0015A8  6E19               	movwf	drawFastVLine@h,c
  3648  0015AA  C0F0  F01A         	movff	fillCircle@color,drawFastVLine@color
  3649  0015AE  C0F1  F01B         	movff	fillCircle@color+1,drawFastVLine@color+1
  3650  0015B2  0100               	movlb	0	; () banked
  3651  0015B4  51EA               	movf	fillCircle@x0& (0+255),w,b
  3652  0015B6  EC37  F009         	call	_drawFastVLine
  3653                           
  3654                           ;ST7735_TFT.c: 617: fillCircleHelper(x0, y0, r, 3, 0, color);
  3655  0015BA  C0EA  F023         	movff	fillCircle@x0,fillCircleHelper@x0
  3656  0015BE  C0EB  F024         	movff	fillCircle@x0+1,fillCircleHelper@x0+1
  3657  0015C2  C0EC  F025         	movff	fillCircle@y0,fillCircleHelper@y0
  3658  0015C6  C0ED  F026         	movff	fillCircle@y0+1,fillCircleHelper@y0+1
  3659  0015CA  C0EE  F027         	movff	fillCircle@r,fillCircleHelper@r
  3660  0015CE  C0EF  F028         	movff	fillCircle@r+1,fillCircleHelper@r+1
  3661  0015D2  0E00               	movlw	0
  3662  0015D4  6E2A               	movwf	fillCircleHelper@cornername+1,c
  3663  0015D6  0E03               	movlw	3
  3664  0015D8  6E29               	movwf	fillCircleHelper@cornername,c
  3665  0015DA  0E00               	movlw	0
  3666  0015DC  6E2C               	movwf	fillCircleHelper@delta+1,c
  3667  0015DE  0E00               	movlw	0
  3668  0015E0  6E2B               	movwf	fillCircleHelper@delta,c
  3669  0015E2  C0F0  F02D         	movff	fillCircle@color,fillCircleHelper@color
  3670  0015E6  C0F1  F02E         	movff	fillCircle@color+1,fillCircleHelper@color+1
  3671  0015EA  ECC9  F005         	call	_fillCircleHelper	;wreg free
  3672  0015EE  0012               	return		;funcret
  3673  0015F0                     __end_of_fillCircle:
  3674                           	opt stack 0
  3675                           tblptru	equ	0xFF8
  3676                           tblptrh	equ	0xFF7
  3677                           tblptrl	equ	0xFF6
  3678                           tablat	equ	0xFF5
  3679                           prodh	equ	0xFF4
  3680                           prodl	equ	0xFF3
  3681                           intcon	equ	0xFF2
  3682                           intcon2	equ	0xFF1
  3683                           postinc0	equ	0xFEE
  3684                           wreg	equ	0xFE8
  3685                           postdec1	equ	0xFE5
  3686                           fsr1l	equ	0xFE1
  3687                           postinc2	equ	0xFDE
  3688                           postdec2	equ	0xFDD
  3689                           fsr2h	equ	0xFDA
  3690                           fsr2l	equ	0xFD9
  3691                           status	equ	0xFD8
  3692                           
  3693 ;; *************** function _fillCircleHelper *****************
  3694 ;; Defined at:
  3695 ;;		line 589 in file "ST7735_TFT.c"
  3696 ;; Parameters:    Size  Location     Type
  3697 ;;  x0              2   34[COMRAM] int 
  3698 ;;  y0              2   36[COMRAM] int 
  3699 ;;  r               2   38[COMRAM] int 
  3700 ;;  cornername      2   40[COMRAM] unsigned int 
  3701 ;;  delta           2   42[COMRAM] int 
  3702 ;;  color           2   44[COMRAM] unsigned int 
  3703 ;; Auto vars:     Size  Location     Type
  3704 ;;  y               2   56[COMRAM] int 
  3705 ;;  x               2   54[COMRAM] int 
  3706 ;;  f               2   52[COMRAM] int 
  3707 ;;  ddF_y           2   50[COMRAM] int 
  3708 ;;  ddF_x           2   48[COMRAM] int 
  3709 ;; Return value:  Size  Location     Type
  3710 ;;		None               void
  3711 ;; Registers used:
  3712 ;;		wreg, status,2, status,0, cstack
  3713 ;; Tracked objects:
  3714 ;;		On entry : 0/0
  3715 ;;		On exit  : 0/0
  3716 ;;		Unchanged: 0/0
  3717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3718 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3719 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3720 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3721 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3722 ;;Total ram usage:       24 bytes
  3723 ;; Hardware stack levels used:    1
  3724 ;; Hardware stack levels required when called:    7
  3725 ;; This function calls:
  3726 ;;		_drawFastVLine
  3727 ;; This function is called by:
  3728 ;;		_fillCircle
  3729 ;; This function uses a non-reentrant model
  3730 ;;
  3731                           
  3732                           	psect	text7
  3733  000B92                     __ptext7:
  3734                           	opt stack 0
  3735  000B92                     _fillCircleHelper:
  3736                           	opt stack 22
  3737                           
  3738                           ;ST7735_TFT.c: 591: signed int f, ddF_x, ddF_y, x, y;
  3739                           ;ST7735_TFT.c: 592: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  3740                           
  3741                           ;incstack = 0
  3742  000B92  C027  F02F         	movff	fillCircleHelper@r,??_fillCircleHelper
  3743  000B96  C028  F030         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  3744  000B9A  1E2F               	comf	??_fillCircleHelper,f,c
  3745  000B9C  1E30               	comf	??_fillCircleHelper+1,f,c
  3746  000B9E  4A2F               	infsnz	??_fillCircleHelper,f,c
  3747  000BA0  2A30               	incf	??_fillCircleHelper+1,f,c
  3748  000BA2  0E01               	movlw	1
  3749  000BA4  242F               	addwf	??_fillCircleHelper,w,c
  3750  000BA6  6E35               	movwf	fillCircleHelper@f,c
  3751  000BA8  0E00               	movlw	0
  3752  000BAA  2030               	addwfc	??_fillCircleHelper+1,w,c
  3753  000BAC  6E36               	movwf	fillCircleHelper@f+1,c
  3754  000BAE  0E00               	movlw	0
  3755  000BB0  6E32               	movwf	fillCircleHelper@ddF_x+1,c
  3756  000BB2  0E01               	movlw	1
  3757  000BB4  6E31               	movwf	fillCircleHelper@ddF_x,c
  3758  000BB6  C027  F02F         	movff	fillCircleHelper@r,??_fillCircleHelper
  3759  000BBA  C028  F030         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  3760  000BBE  90D8               	bcf	status,0,c
  3761  000BC0  362F               	rlcf	??_fillCircleHelper,f,c
  3762  000BC2  3630               	rlcf	??_fillCircleHelper+1,f,c
  3763  000BC4  1E2F               	comf	??_fillCircleHelper,f,c
  3764  000BC6  1E30               	comf	??_fillCircleHelper+1,f,c
  3765  000BC8  4A2F               	infsnz	??_fillCircleHelper,f,c
  3766  000BCA  2A30               	incf	??_fillCircleHelper+1,f,c
  3767  000BCC  C02F  F033         	movff	??_fillCircleHelper,fillCircleHelper@ddF_y
  3768  000BD0  C030  F034         	movff	??_fillCircleHelper+1,fillCircleHelper@ddF_y+1
  3769  000BD4  0E00               	movlw	0
  3770  000BD6  6E38               	movwf	fillCircleHelper@x+1,c
  3771  000BD8  0E00               	movlw	0
  3772  000BDA  6E37               	movwf	fillCircleHelper@x,c
  3773  000BDC  C027  F039         	movff	fillCircleHelper@r,fillCircleHelper@y
  3774  000BE0  C028  F03A         	movff	fillCircleHelper@r+1,fillCircleHelper@y+1
  3775                           
  3776                           ;ST7735_TFT.c: 593: while (x<y) {
  3777  000BE4  D067               	goto	l4683
  3778  000BE6                     l4663:
  3779                           
  3780                           ;ST7735_TFT.c: 594: if (f >= 0) {
  3781  000BE6  BE36               	btfsc	fillCircleHelper@f+1,7,c
  3782  000BE8  D00B               	goto	l403
  3783                           
  3784                           ;ST7735_TFT.c: 595: y--;
  3785  000BEA  0639               	decf	fillCircleHelper@y,f,c
  3786  000BEC  A0D8               	btfss	status,0,c
  3787  000BEE  063A               	decf	fillCircleHelper@y+1,f,c
  3788                           
  3789                           ;ST7735_TFT.c: 596: ddF_y += 2;
  3790  000BF0  0E02               	movlw	2
  3791  000BF2  2633               	addwf	fillCircleHelper@ddF_y,f,c
  3792  000BF4  0E00               	movlw	0
  3793  000BF6  2234               	addwfc	fillCircleHelper@ddF_y+1,f,c
  3794                           
  3795                           ;ST7735_TFT.c: 597: f += ddF_y;
  3796  000BF8  5033               	movf	fillCircleHelper@ddF_y,w,c
  3797  000BFA  2635               	addwf	fillCircleHelper@f,f,c
  3798  000BFC  5034               	movf	fillCircleHelper@ddF_y+1,w,c
  3799  000BFE  2236               	addwfc	fillCircleHelper@f+1,f,c
  3800  000C00                     l403:
  3801                           
  3802                           ;ST7735_TFT.c: 598: }
  3803                           ;ST7735_TFT.c: 599: x++;
  3804  000C00  4A37               	infsnz	fillCircleHelper@x,f,c
  3805  000C02  2A38               	incf	fillCircleHelper@x+1,f,c
  3806                           
  3807                           ;ST7735_TFT.c: 600: ddF_x += 2;
  3808  000C04  0E02               	movlw	2
  3809  000C06  2631               	addwf	fillCircleHelper@ddF_x,f,c
  3810  000C08  0E00               	movlw	0
  3811  000C0A  2232               	addwfc	fillCircleHelper@ddF_x+1,f,c
  3812                           
  3813                           ;ST7735_TFT.c: 601: f += ddF_x;
  3814  000C0C  5031               	movf	fillCircleHelper@ddF_x,w,c
  3815  000C0E  2635               	addwf	fillCircleHelper@f,f,c
  3816  000C10  5032               	movf	fillCircleHelper@ddF_x+1,w,c
  3817  000C12  2236               	addwfc	fillCircleHelper@f+1,f,c
  3818                           
  3819                           ;ST7735_TFT.c: 603: if (cornername & 0x1) {
  3820  000C14  A029               	btfss	fillCircleHelper@cornername,0,c
  3821  000C16  D025               	goto	l4679
  3822                           
  3823                           ;ST7735_TFT.c: 604: drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
  3824  000C18  5039               	movf	fillCircleHelper@y,w,c
  3825  000C1A  0800               	sublw	0
  3826  000C1C  2425               	addwf	fillCircleHelper@y0,w,c
  3827  000C1E  6E18               	movwf	drawFastVLine@y,c
  3828  000C20  5039               	movf	fillCircleHelper@y,w,c
  3829  000C22  2439               	addwf	fillCircleHelper@y,w,c
  3830  000C24  242B               	addwf	fillCircleHelper@delta,w,c
  3831  000C26  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3832  000C28  282F               	incf	??_fillCircleHelper,w,c
  3833  000C2A  6E19               	movwf	drawFastVLine@h,c
  3834  000C2C  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3835  000C30  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3836  000C34  5023               	movf	fillCircleHelper@x0,w,c
  3837  000C36  2437               	addwf	fillCircleHelper@x,w,c
  3838  000C38  EC37  F009         	call	_drawFastVLine
  3839                           
  3840                           ;ST7735_TFT.c: 605: drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
  3841  000C3C  5037               	movf	fillCircleHelper@x,w,c
  3842  000C3E  0800               	sublw	0
  3843  000C40  2425               	addwf	fillCircleHelper@y0,w,c
  3844  000C42  6E18               	movwf	drawFastVLine@y,c
  3845  000C44  5037               	movf	fillCircleHelper@x,w,c
  3846  000C46  2437               	addwf	fillCircleHelper@x,w,c
  3847  000C48  242B               	addwf	fillCircleHelper@delta,w,c
  3848  000C4A  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3849  000C4C  282F               	incf	??_fillCircleHelper,w,c
  3850  000C4E  6E19               	movwf	drawFastVLine@h,c
  3851  000C50  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3852  000C54  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3853  000C58  5023               	movf	fillCircleHelper@x0,w,c
  3854  000C5A  2439               	addwf	fillCircleHelper@y,w,c
  3855  000C5C  EC37  F009         	call	_drawFastVLine
  3856  000C60  D000               	goto	l4679
  3857  000C62                     l4679:
  3858                           
  3859                           ;ST7735_TFT.c: 606: }
  3860                           ;ST7735_TFT.c: 607: if (cornername & 0x2) {
  3861  000C62  A229               	btfss	fillCircleHelper@cornername,1,c
  3862  000C64  D027               	goto	l4683
  3863                           
  3864                           ;ST7735_TFT.c: 608: drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
  3865  000C66  5039               	movf	fillCircleHelper@y,w,c
  3866  000C68  0800               	sublw	0
  3867  000C6A  2425               	addwf	fillCircleHelper@y0,w,c
  3868  000C6C  6E18               	movwf	drawFastVLine@y,c
  3869  000C6E  5039               	movf	fillCircleHelper@y,w,c
  3870  000C70  2439               	addwf	fillCircleHelper@y,w,c
  3871  000C72  242B               	addwf	fillCircleHelper@delta,w,c
  3872  000C74  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3873  000C76  282F               	incf	??_fillCircleHelper,w,c
  3874  000C78  6E19               	movwf	drawFastVLine@h,c
  3875  000C7A  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3876  000C7E  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3877  000C82  5037               	movf	fillCircleHelper@x,w,c
  3878  000C84  0800               	sublw	0
  3879  000C86  2423               	addwf	fillCircleHelper@x0,w,c
  3880  000C88  EC37  F009         	call	_drawFastVLine
  3881                           
  3882                           ;ST7735_TFT.c: 609: drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
  3883  000C8C  5037               	movf	fillCircleHelper@x,w,c
  3884  000C8E  0800               	sublw	0
  3885  000C90  2425               	addwf	fillCircleHelper@y0,w,c
  3886  000C92  6E18               	movwf	drawFastVLine@y,c
  3887  000C94  5037               	movf	fillCircleHelper@x,w,c
  3888  000C96  2437               	addwf	fillCircleHelper@x,w,c
  3889  000C98  242B               	addwf	fillCircleHelper@delta,w,c
  3890  000C9A  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3891  000C9C  282F               	incf	??_fillCircleHelper,w,c
  3892  000C9E  6E19               	movwf	drawFastVLine@h,c
  3893  000CA0  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3894  000CA4  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3895  000CA8  5039               	movf	fillCircleHelper@y,w,c
  3896  000CAA  0800               	sublw	0
  3897  000CAC  2423               	addwf	fillCircleHelper@x0,w,c
  3898  000CAE  EC37  F009         	call	_drawFastVLine
  3899  000CB2  D000               	goto	l4683
  3900  000CB4                     l4683:
  3901  000CB4  5039               	movf	fillCircleHelper@y,w,c
  3902  000CB6  5C37               	subwf	fillCircleHelper@x,w,c
  3903  000CB8  5038               	movf	fillCircleHelper@x+1,w,c
  3904  000CBA  0A80               	xorlw	128
  3905  000CBC  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3906  000CBE  503A               	movf	fillCircleHelper@y+1,w,c
  3907  000CC0  0A80               	xorlw	128
  3908  000CC2  582F               	subwfb	??_fillCircleHelper& (0+255),w,c
  3909  000CC4  A0D8               	btfss	status,0,c
  3910  000CC6  D78F               	goto	l4663
  3911  000CC8  0012               	return		;funcret
  3912  000CCA                     __end_of_fillCircleHelper:
  3913                           	opt stack 0
  3914                           tblptru	equ	0xFF8
  3915                           tblptrh	equ	0xFF7
  3916                           tblptrl	equ	0xFF6
  3917                           tablat	equ	0xFF5
  3918                           prodh	equ	0xFF4
  3919                           prodl	equ	0xFF3
  3920                           intcon	equ	0xFF2
  3921                           intcon2	equ	0xFF1
  3922                           postinc0	equ	0xFEE
  3923                           wreg	equ	0xFE8
  3924                           postdec1	equ	0xFE5
  3925                           fsr1l	equ	0xFE1
  3926                           postinc2	equ	0xFDE
  3927                           postdec2	equ	0xFDD
  3928                           fsr2h	equ	0xFDA
  3929                           fsr2l	equ	0xFD9
  3930                           status	equ	0xFD8
  3931                           
  3932 ;; *************** function _drawCircle *****************
  3933 ;; Defined at:
  3934 ;;		line 528 in file "ST7735_TFT.c"
  3935 ;; Parameters:    Size  Location     Type
  3936 ;;  x0              2   27[COMRAM] int 
  3937 ;;  y0              2   29[COMRAM] int 
  3938 ;;  r               2   31[COMRAM] int 
  3939 ;;  color           2   33[COMRAM] unsigned int 
  3940 ;; Auto vars:     Size  Location     Type
  3941 ;;  y               2   45[COMRAM] int 
  3942 ;;  x               2   43[COMRAM] int 
  3943 ;;  f               2   41[COMRAM] int 
  3944 ;;  ddF_y           2   39[COMRAM] int 
  3945 ;;  ddF_x           2   37[COMRAM] int 
  3946 ;; Return value:  Size  Location     Type
  3947 ;;		None               void
  3948 ;; Registers used:
  3949 ;;		wreg, status,2, status,0, cstack
  3950 ;; Tracked objects:
  3951 ;;		On entry : 0/0
  3952 ;;		On exit  : 0/0
  3953 ;;		Unchanged: 0/0
  3954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3955 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3956 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3957 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3958 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3959 ;;Total ram usage:       20 bytes
  3960 ;; Hardware stack levels used:    1
  3961 ;; Hardware stack levels required when called:    7
  3962 ;; This function calls:
  3963 ;;		_drawPixel
  3964 ;; This function is called by:
  3965 ;;		_main
  3966 ;; This function uses a non-reentrant model
  3967 ;;
  3968                           
  3969                           	psect	text8
  3970  00072E                     __ptext8:
  3971                           	opt stack 0
  3972  00072E                     _drawCircle:
  3973                           	opt stack 23
  3974                           
  3975                           ;ST7735_TFT.c: 530: signed int f, ddF_x, ddF_y, x, y;
  3976                           ;ST7735_TFT.c: 531: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  3977                           
  3978                           ;incstack = 0
  3979  00072E  C020  F024         	movff	drawCircle@r,??_drawCircle
  3980  000732  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
  3981  000736  1E24               	comf	??_drawCircle,f,c
  3982  000738  1E25               	comf	??_drawCircle+1,f,c
  3983  00073A  4A24               	infsnz	??_drawCircle,f,c
  3984  00073C  2A25               	incf	??_drawCircle+1,f,c
  3985  00073E  0E01               	movlw	1
  3986  000740  2424               	addwf	??_drawCircle,w,c
  3987  000742  6E2A               	movwf	drawCircle@f,c
  3988  000744  0E00               	movlw	0
  3989  000746  2025               	addwfc	??_drawCircle+1,w,c
  3990  000748  6E2B               	movwf	drawCircle@f+1,c
  3991  00074A  0E00               	movlw	0
  3992  00074C  6E27               	movwf	drawCircle@ddF_x+1,c
  3993  00074E  0E01               	movlw	1
  3994  000750  6E26               	movwf	drawCircle@ddF_x,c
  3995  000752  C020  F024         	movff	drawCircle@r,??_drawCircle
  3996  000756  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
  3997  00075A  90D8               	bcf	status,0,c
  3998  00075C  3624               	rlcf	??_drawCircle,f,c
  3999  00075E  3625               	rlcf	??_drawCircle+1,f,c
  4000  000760  1E24               	comf	??_drawCircle,f,c
  4001  000762  1E25               	comf	??_drawCircle+1,f,c
  4002  000764  4A24               	infsnz	??_drawCircle,f,c
  4003  000766  2A25               	incf	??_drawCircle+1,f,c
  4004  000768  C024  F028         	movff	??_drawCircle,drawCircle@ddF_y
  4005  00076C  C025  F029         	movff	??_drawCircle+1,drawCircle@ddF_y+1
  4006  000770  0E00               	movlw	0
  4007  000772  6E2D               	movwf	drawCircle@x+1,c
  4008  000774  0E00               	movlw	0
  4009  000776  6E2C               	movwf	drawCircle@x,c
  4010  000778  C020  F02E         	movff	drawCircle@r,drawCircle@y
  4011  00077C  C021  F02F         	movff	drawCircle@r+1,drawCircle@y+1
  4012                           
  4013                           ;ST7735_TFT.c: 532: drawPixel(x0 , y0 + r, color);
  4014  000780  501E               	movf	drawCircle@y0,w,c
  4015  000782  2420               	addwf	drawCircle@r,w,c
  4016  000784  6E18               	movwf	drawPixel@y,c
  4017  000786  C022  F019         	movff	drawCircle@color,drawPixel@color
  4018  00078A  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4019  00078E  501C               	movf	drawCircle@x0,w,c
  4020  000790  ECAE  F00C         	call	_drawPixel
  4021                           
  4022                           ;ST7735_TFT.c: 533: drawPixel(x0 , y0 - r, color);
  4023  000794  5020               	movf	drawCircle@r,w,c
  4024  000796  0800               	sublw	0
  4025  000798  241E               	addwf	drawCircle@y0,w,c
  4026  00079A  6E18               	movwf	drawPixel@y,c
  4027  00079C  C022  F019         	movff	drawCircle@color,drawPixel@color
  4028  0007A0  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4029  0007A4  501C               	movf	drawCircle@x0,w,c
  4030  0007A6  ECAE  F00C         	call	_drawPixel
  4031                           
  4032                           ;ST7735_TFT.c: 534: drawPixel(x0+r, y0 , color);
  4033  0007AA  C01E  F018         	movff	drawCircle@y0,drawPixel@y
  4034  0007AE  C022  F019         	movff	drawCircle@color,drawPixel@color
  4035  0007B2  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4036  0007B6  501C               	movf	drawCircle@x0,w,c
  4037  0007B8  2420               	addwf	drawCircle@r,w,c
  4038  0007BA  ECAE  F00C         	call	_drawPixel
  4039                           
  4040                           ;ST7735_TFT.c: 535: drawPixel(x0-r, y0 , color);
  4041  0007BE  C01E  F018         	movff	drawCircle@y0,drawPixel@y
  4042  0007C2  C022  F019         	movff	drawCircle@color,drawPixel@color
  4043  0007C6  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4044  0007CA  5020               	movf	drawCircle@r,w,c
  4045  0007CC  0800               	sublw	0
  4046  0007CE  241C               	addwf	drawCircle@x0,w,c
  4047  0007D0  ECAE  F00C         	call	_drawPixel
  4048                           
  4049                           ;ST7735_TFT.c: 536: while (x < y) {
  4050  0007D4  D078               	goto	l4889
  4051  0007D6                     l4861:
  4052                           
  4053                           ;ST7735_TFT.c: 537: if (f >= 0) {
  4054  0007D6  BE2B               	btfsc	drawCircle@f+1,7,c
  4055  0007D8  D00B               	goto	l385
  4056                           
  4057                           ;ST7735_TFT.c: 538: y--;
  4058  0007DA  062E               	decf	drawCircle@y,f,c
  4059  0007DC  A0D8               	btfss	status,0,c
  4060  0007DE  062F               	decf	drawCircle@y+1,f,c
  4061                           
  4062                           ;ST7735_TFT.c: 539: ddF_y += 2;
  4063  0007E0  0E02               	movlw	2
  4064  0007E2  2628               	addwf	drawCircle@ddF_y,f,c
  4065  0007E4  0E00               	movlw	0
  4066  0007E6  2229               	addwfc	drawCircle@ddF_y+1,f,c
  4067                           
  4068                           ;ST7735_TFT.c: 540: f += ddF_y;
  4069  0007E8  5028               	movf	drawCircle@ddF_y,w,c
  4070  0007EA  262A               	addwf	drawCircle@f,f,c
  4071  0007EC  5029               	movf	drawCircle@ddF_y+1,w,c
  4072  0007EE  222B               	addwfc	drawCircle@f+1,f,c
  4073  0007F0                     l385:
  4074                           
  4075                           ;ST7735_TFT.c: 541: }
  4076                           ;ST7735_TFT.c: 542: x++;
  4077  0007F0  4A2C               	infsnz	drawCircle@x,f,c
  4078  0007F2  2A2D               	incf	drawCircle@x+1,f,c
  4079                           
  4080                           ;ST7735_TFT.c: 543: ddF_x += 2;
  4081  0007F4  0E02               	movlw	2
  4082  0007F6  2626               	addwf	drawCircle@ddF_x,f,c
  4083  0007F8  0E00               	movlw	0
  4084  0007FA  2227               	addwfc	drawCircle@ddF_x+1,f,c
  4085                           
  4086                           ;ST7735_TFT.c: 544: f += ddF_x;
  4087  0007FC  5026               	movf	drawCircle@ddF_x,w,c
  4088  0007FE  262A               	addwf	drawCircle@f,f,c
  4089  000800  5027               	movf	drawCircle@ddF_x+1,w,c
  4090  000802  222B               	addwfc	drawCircle@f+1,f,c
  4091                           
  4092                           ;ST7735_TFT.c: 545: drawPixel(x0 + x, y0 + y, color);
  4093  000804  501E               	movf	drawCircle@y0,w,c
  4094  000806  242E               	addwf	drawCircle@y,w,c
  4095  000808  6E18               	movwf	drawPixel@y,c
  4096  00080A  C022  F019         	movff	drawCircle@color,drawPixel@color
  4097  00080E  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4098  000812  501C               	movf	drawCircle@x0,w,c
  4099  000814  242C               	addwf	drawCircle@x,w,c
  4100  000816  ECAE  F00C         	call	_drawPixel
  4101                           
  4102                           ;ST7735_TFT.c: 546: drawPixel(x0 - x, y0 + y, color);
  4103  00081A  501E               	movf	drawCircle@y0,w,c
  4104  00081C  242E               	addwf	drawCircle@y,w,c
  4105  00081E  6E18               	movwf	drawPixel@y,c
  4106  000820  C022  F019         	movff	drawCircle@color,drawPixel@color
  4107  000824  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4108  000828  502C               	movf	drawCircle@x,w,c
  4109  00082A  0800               	sublw	0
  4110  00082C  241C               	addwf	drawCircle@x0,w,c
  4111  00082E  ECAE  F00C         	call	_drawPixel
  4112                           
  4113                           ;ST7735_TFT.c: 547: drawPixel(x0 + x, y0 - y, color);
  4114  000832  502E               	movf	drawCircle@y,w,c
  4115  000834  0800               	sublw	0
  4116  000836  241E               	addwf	drawCircle@y0,w,c
  4117  000838  6E18               	movwf	drawPixel@y,c
  4118  00083A  C022  F019         	movff	drawCircle@color,drawPixel@color
  4119  00083E  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4120  000842  501C               	movf	drawCircle@x0,w,c
  4121  000844  242C               	addwf	drawCircle@x,w,c
  4122  000846  ECAE  F00C         	call	_drawPixel
  4123                           
  4124                           ;ST7735_TFT.c: 548: drawPixel(x0 - x, y0 - y, color);
  4125  00084A  502E               	movf	drawCircle@y,w,c
  4126  00084C  0800               	sublw	0
  4127  00084E  241E               	addwf	drawCircle@y0,w,c
  4128  000850  6E18               	movwf	drawPixel@y,c
  4129  000852  C022  F019         	movff	drawCircle@color,drawPixel@color
  4130  000856  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4131  00085A  502C               	movf	drawCircle@x,w,c
  4132  00085C  0800               	sublw	0
  4133  00085E  241C               	addwf	drawCircle@x0,w,c
  4134  000860  ECAE  F00C         	call	_drawPixel
  4135                           
  4136                           ;ST7735_TFT.c: 549: drawPixel(x0 + y, y0 + x, color);
  4137  000864  501E               	movf	drawCircle@y0,w,c
  4138  000866  242C               	addwf	drawCircle@x,w,c
  4139  000868  6E18               	movwf	drawPixel@y,c
  4140  00086A  C022  F019         	movff	drawCircle@color,drawPixel@color
  4141  00086E  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4142  000872  501C               	movf	drawCircle@x0,w,c
  4143  000874  242E               	addwf	drawCircle@y,w,c
  4144  000876  ECAE  F00C         	call	_drawPixel
  4145                           
  4146                           ;ST7735_TFT.c: 550: drawPixel(x0 - y, y0 + x, color);
  4147  00087A  501E               	movf	drawCircle@y0,w,c
  4148  00087C  242C               	addwf	drawCircle@x,w,c
  4149  00087E  6E18               	movwf	drawPixel@y,c
  4150  000880  C022  F019         	movff	drawCircle@color,drawPixel@color
  4151  000884  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4152  000888  502E               	movf	drawCircle@y,w,c
  4153  00088A  0800               	sublw	0
  4154  00088C  241C               	addwf	drawCircle@x0,w,c
  4155  00088E  ECAE  F00C         	call	_drawPixel
  4156                           
  4157                           ;ST7735_TFT.c: 551: drawPixel(x0 + y, y0 - x, color);
  4158  000892  502C               	movf	drawCircle@x,w,c
  4159  000894  0800               	sublw	0
  4160  000896  241E               	addwf	drawCircle@y0,w,c
  4161  000898  6E18               	movwf	drawPixel@y,c
  4162  00089A  C022  F019         	movff	drawCircle@color,drawPixel@color
  4163  00089E  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4164  0008A2  501C               	movf	drawCircle@x0,w,c
  4165  0008A4  242E               	addwf	drawCircle@y,w,c
  4166  0008A6  ECAE  F00C         	call	_drawPixel
  4167                           
  4168                           ;ST7735_TFT.c: 552: drawPixel(x0 - y, y0 - x, color);
  4169  0008AA  502C               	movf	drawCircle@x,w,c
  4170  0008AC  0800               	sublw	0
  4171  0008AE  241E               	addwf	drawCircle@y0,w,c
  4172  0008B0  6E18               	movwf	drawPixel@y,c
  4173  0008B2  C022  F019         	movff	drawCircle@color,drawPixel@color
  4174  0008B6  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4175  0008BA  502E               	movf	drawCircle@y,w,c
  4176  0008BC  0800               	sublw	0
  4177  0008BE  241C               	addwf	drawCircle@x0,w,c
  4178  0008C0  ECAE  F00C         	call	_drawPixel
  4179  0008C4  D000               	goto	l4889
  4180  0008C6                     l4889:
  4181  0008C6  502E               	movf	drawCircle@y,w,c
  4182  0008C8  5C2C               	subwf	drawCircle@x,w,c
  4183  0008CA  502D               	movf	drawCircle@x+1,w,c
  4184  0008CC  0A80               	xorlw	128
  4185  0008CE  6E24               	movwf	??_drawCircle& (0+255),c
  4186  0008D0  502F               	movf	drawCircle@y+1,w,c
  4187  0008D2  0A80               	xorlw	128
  4188  0008D4  5824               	subwfb	??_drawCircle& (0+255),w,c
  4189  0008D6  A0D8               	btfss	status,0,c
  4190  0008D8  D77E               	goto	l4861
  4191  0008DA  0012               	return		;funcret
  4192  0008DC                     __end_of_drawCircle:
  4193                           	opt stack 0
  4194                           tblptru	equ	0xFF8
  4195                           tblptrh	equ	0xFF7
  4196                           tblptrl	equ	0xFF6
  4197                           tablat	equ	0xFF5
  4198                           prodh	equ	0xFF4
  4199                           prodl	equ	0xFF3
  4200                           intcon	equ	0xFF2
  4201                           intcon2	equ	0xFF1
  4202                           postinc0	equ	0xFEE
  4203                           wreg	equ	0xFE8
  4204                           postdec1	equ	0xFE5
  4205                           fsr1l	equ	0xFE1
  4206                           postinc2	equ	0xFDE
  4207                           postdec2	equ	0xFDD
  4208                           fsr2h	equ	0xFDA
  4209                           fsr2l	equ	0xFD9
  4210                           status	equ	0xFD8
  4211                           
  4212 ;; *************** function ___awdiv *****************
  4213 ;; Defined at:
  4214 ;;		line 8 in file "E:\XC8\sources\common\awdiv.c"
  4215 ;; Parameters:    Size  Location     Type
  4216 ;;  dividend        2   22[COMRAM] int 
  4217 ;;  divisor         2   24[COMRAM] int 
  4218 ;; Auto vars:     Size  Location     Type
  4219 ;;  quotient        2   28[COMRAM] int 
  4220 ;;  sign            1   27[COMRAM] unsigned char 
  4221 ;;  counter         1   26[COMRAM] unsigned char 
  4222 ;; Return value:  Size  Location     Type
  4223 ;;                  2   22[COMRAM] int 
  4224 ;; Registers used:
  4225 ;;		wreg, status,2, status,0
  4226 ;; Tracked objects:
  4227 ;;		On entry : 0/0
  4228 ;;		On exit  : 0/0
  4229 ;;		Unchanged: 0/0
  4230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4231 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4232 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4233 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4234 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4235 ;;Total ram usage:        8 bytes
  4236 ;; Hardware stack levels used:    1
  4237 ;; Hardware stack levels required when called:    3
  4238 ;; This function calls:
  4239 ;;		Nothing
  4240 ;; This function is called by:
  4241 ;;		_main
  4242 ;; This function uses a non-reentrant model
  4243 ;;
  4244                           
  4245                           	psect	text9
  4246  0010BE                     __ptext9:
  4247                           	opt stack 0
  4248  0010BE                     ___awdiv:
  4249                           	opt stack 27
  4250                           
  4251                           ;incstack = 0
  4252  0010BE  0E00               	movlw	0
  4253  0010C0  6E1C               	movwf	___awdiv@sign,c
  4254  0010C2  AE1A               	btfss	___awdiv@divisor+1,7,c
  4255  0010C4  D007               	goto	l5095
  4256  0010C6  6C19               	negf	___awdiv@divisor,c
  4257  0010C8  1E1A               	comf	___awdiv@divisor+1,f,c
  4258  0010CA  B0D8               	btfsc	status,0,c
  4259  0010CC  2A1A               	incf	___awdiv@divisor+1,f,c
  4260  0010CE  0E01               	movlw	1
  4261  0010D0  6E1C               	movwf	___awdiv@sign,c
  4262  0010D2  D000               	goto	l5095
  4263  0010D4                     l5095:
  4264  0010D4  AE18               	btfss	___awdiv@dividend+1,7,c
  4265  0010D6  D007               	goto	l5101
  4266  0010D8  6C17               	negf	___awdiv@dividend,c
  4267  0010DA  1E18               	comf	___awdiv@dividend+1,f,c
  4268  0010DC  B0D8               	btfsc	status,0,c
  4269  0010DE  2A18               	incf	___awdiv@dividend+1,f,c
  4270  0010E0  0E01               	movlw	1
  4271  0010E2  1A1C               	xorwf	___awdiv@sign,f,c
  4272  0010E4  D000               	goto	l5101
  4273  0010E6                     l5101:
  4274  0010E6  0E00               	movlw	0
  4275  0010E8  6E1E               	movwf	___awdiv@quotient+1,c
  4276  0010EA  0E00               	movlw	0
  4277  0010EC  6E1D               	movwf	___awdiv@quotient,c
  4278  0010EE  5019               	movf	___awdiv@divisor,w,c
  4279  0010F0  101A               	iorwf	___awdiv@divisor+1,w,c
  4280  0010F2  B4D8               	btfsc	status,2,c
  4281  0010F4  D021               	goto	l5123
  4282  0010F6  0E01               	movlw	1
  4283  0010F8  6E1B               	movwf	___awdiv@counter,c
  4284  0010FA  D005               	goto	l5109
  4285  0010FC                     l5107:
  4286  0010FC  90D8               	bcf	status,0,c
  4287  0010FE  3619               	rlcf	___awdiv@divisor,f,c
  4288  001100  361A               	rlcf	___awdiv@divisor+1,f,c
  4289  001102  2A1B               	incf	___awdiv@counter,f,c
  4290  001104  D000               	goto	l5109
  4291  001106                     l5109:
  4292  001106  BE1A               	btfsc	___awdiv@divisor+1,7,c
  4293  001108  D002               	goto	l5111
  4294  00110A  D7F8               	goto	l5107
  4295  00110C  D000               	goto	l5111
  4296  00110E                     l5111:
  4297  00110E  90D8               	bcf	status,0,c
  4298  001110  361D               	rlcf	___awdiv@quotient,f,c
  4299  001112  361E               	rlcf	___awdiv@quotient+1,f,c
  4300  001114  5019               	movf	___awdiv@divisor,w,c
  4301  001116  5C17               	subwf	___awdiv@dividend,w,c
  4302  001118  501A               	movf	___awdiv@divisor+1,w,c
  4303  00111A  5818               	subwfb	___awdiv@dividend+1,w,c
  4304  00111C  A0D8               	btfss	status,0,c
  4305  00111E  D006               	goto	l5119
  4306  001120  5019               	movf	___awdiv@divisor,w,c
  4307  001122  5E17               	subwf	___awdiv@dividend,f,c
  4308  001124  501A               	movf	___awdiv@divisor+1,w,c
  4309  001126  5A18               	subwfb	___awdiv@dividend+1,f,c
  4310  001128  801D               	bsf	___awdiv@quotient,0,c
  4311  00112A  D000               	goto	l5119
  4312  00112C                     l5119:
  4313  00112C  90D8               	bcf	status,0,c
  4314  00112E  321A               	rrcf	___awdiv@divisor+1,f,c
  4315  001130  3219               	rrcf	___awdiv@divisor,f,c
  4316  001132  2E1B               	decfsz	___awdiv@counter,f,c
  4317  001134  D7EC               	goto	l5111
  4318  001136  D000               	goto	l5123
  4319  001138                     l5123:
  4320  001138  501C               	movf	___awdiv@sign,w,c
  4321  00113A  B4D8               	btfsc	status,2,c
  4322  00113C  D005               	goto	l5127
  4323  00113E  6C1D               	negf	___awdiv@quotient,c
  4324  001140  1E1E               	comf	___awdiv@quotient+1,f,c
  4325  001142  B0D8               	btfsc	status,0,c
  4326  001144  2A1E               	incf	___awdiv@quotient+1,f,c
  4327  001146  D000               	goto	l5127
  4328  001148                     l5127:
  4329  001148  C01D  F017         	movff	___awdiv@quotient,?___awdiv
  4330  00114C  C01E  F018         	movff	___awdiv@quotient+1,?___awdiv+1
  4331  001150  D000               	goto	l870
  4332  001152                     l870:
  4333  001152  0012               	return		;funcret
  4334  001154                     __end_of___awdiv:
  4335                           	opt stack 0
  4336                           tblptru	equ	0xFF8
  4337                           tblptrh	equ	0xFF7
  4338                           tblptrl	equ	0xFF6
  4339                           tablat	equ	0xFF5
  4340                           prodh	equ	0xFF4
  4341                           prodl	equ	0xFF3
  4342                           intcon	equ	0xFF2
  4343                           intcon2	equ	0xFF1
  4344                           postinc0	equ	0xFEE
  4345                           wreg	equ	0xFE8
  4346                           postdec1	equ	0xFE5
  4347                           fsr1l	equ	0xFE1
  4348                           postinc2	equ	0xFDE
  4349                           postdec2	equ	0xFDD
  4350                           fsr2h	equ	0xFDA
  4351                           fsr2l	equ	0xFD9
  4352                           status	equ	0xFD8
  4353                           
  4354 ;; *************** function _Wait_Half_Second_With_Beep *****************
  4355 ;; Defined at:
  4356 ;;		line 163 in file "Lab10.c"
  4357 ;; Parameters:    Size  Location     Type
  4358 ;;		None
  4359 ;; Auto vars:     Size  Location     Type
  4360 ;;		None
  4361 ;; Return value:  Size  Location     Type
  4362 ;;		None               void
  4363 ;; Registers used:
  4364 ;;		wreg, status,2, cstack
  4365 ;; Tracked objects:
  4366 ;;		On entry : 0/0
  4367 ;;		On exit  : 0/0
  4368 ;;		Unchanged: 0/0
  4369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4370 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4371 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4372 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4373 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4374 ;;Total ram usage:        0 bytes
  4375 ;; Hardware stack levels used:    1
  4376 ;; Hardware stack levels required when called:    4
  4377 ;; This function calls:
  4378 ;;		_Activate_Buzzer
  4379 ;;		_Deactivate_Buzzer
  4380 ;;		_Wait_Half_Second
  4381 ;; This function is called by:
  4382 ;;		_main
  4383 ;; This function uses a non-reentrant model
  4384 ;;
  4385                           
  4386                           	psect	text10
  4387  001B6C                     __ptext10:
  4388                           	opt stack 0
  4389  001B6C                     _Wait_Half_Second_With_Beep:
  4390                           	opt stack 26
  4391                           
  4392                           ;Lab10.c: 165: Activate_Buzzer();
  4393                           
  4394                           ;incstack = 0
  4395  001B6C  EC72  F00D         	call	_Activate_Buzzer	;wreg free
  4396                           
  4397                           ;Lab10.c: 166: Wait_Half_Second();
  4398  001B70  EC2D  F00D         	call	_Wait_Half_Second	;wreg free
  4399                           
  4400                           ;Lab10.c: 168: Deactivate_Buzzer();
  4401  001B74  ECD8  F00D         	call	_Deactivate_Buzzer	;wreg free
  4402  001B78  0012               	return		;funcret
  4403  001B7A                     __end_of_Wait_Half_Second_With_Beep:
  4404                           	opt stack 0
  4405                           tblptru	equ	0xFF8
  4406                           tblptrh	equ	0xFF7
  4407                           tblptrl	equ	0xFF6
  4408                           tablat	equ	0xFF5
  4409                           prodh	equ	0xFF4
  4410                           prodl	equ	0xFF3
  4411                           intcon	equ	0xFF2
  4412                           intcon2	equ	0xFF1
  4413                           postinc0	equ	0xFEE
  4414                           wreg	equ	0xFE8
  4415                           postdec1	equ	0xFE5
  4416                           fsr1l	equ	0xFE1
  4417                           postinc2	equ	0xFDE
  4418                           postdec2	equ	0xFDD
  4419                           fsr2h	equ	0xFDA
  4420                           fsr2l	equ	0xFD9
  4421                           status	equ	0xFD8
  4422                           
  4423 ;; *************** function _Wait_Half_Second *****************
  4424 ;; Defined at:
  4425 ;;		line 171 in file "Lab10.c"
  4426 ;; Parameters:    Size  Location     Type
  4427 ;;		None
  4428 ;; Auto vars:     Size  Location     Type
  4429 ;;		None
  4430 ;; Return value:  Size  Location     Type
  4431 ;;		None               void
  4432 ;; Registers used:
  4433 ;;		wreg, status,2
  4434 ;; Tracked objects:
  4435 ;;		On entry : 0/0
  4436 ;;		On exit  : 0/0
  4437 ;;		Unchanged: 0/0
  4438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4439 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4440 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4441 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4442 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4443 ;;Total ram usage:        0 bytes
  4444 ;; Hardware stack levels used:    1
  4445 ;; Hardware stack levels required when called:    3
  4446 ;; This function calls:
  4447 ;;		Nothing
  4448 ;; This function is called by:
  4449 ;;		_Wait_Half_Second_With_Beep
  4450 ;;		_Wait_One_Sec
  4451 ;; This function uses a non-reentrant model
  4452 ;;
  4453                           
  4454                           	psect	text11
  4455  001A5A                     __ptext11:
  4456                           	opt stack 0
  4457  001A5A                     _Wait_Half_Second:
  4458                           	opt stack 26
  4459                           
  4460                           ;Lab10.c: 173: T0CON = 0x03;
  4461                           
  4462                           ;incstack = 0
  4463  001A5A  0E03               	movlw	3
  4464  001A5C  6ED5               	movwf	4053,c	;volatile
  4465                           
  4466                           ;Lab10.c: 174: TMR0L = 0xDB;
  4467  001A5E  0EDB               	movlw	219
  4468  001A60  6ED6               	movwf	4054,c	;volatile
  4469                           
  4470                           ;Lab10.c: 175: TMR0H = 0x0B;
  4471  001A62  0E0B               	movlw	11
  4472  001A64  6ED7               	movwf	4055,c	;volatile
  4473                           
  4474                           ;Lab10.c: 176: INTCONbits.TMR0IF = 0;
  4475  001A66  94F2               	bcf	intcon,2,c	;volatile
  4476                           
  4477                           ;Lab10.c: 177: T0CONbits.TMR0ON = 1;
  4478  001A68  8ED5               	bsf	4053,7,c	;volatile
  4479                           
  4480                           ;Lab10.c: 178: while (INTCONbits.TMR0IF == 0);
  4481  001A6A  D000               	goto	l532
  4482  001A6C                     l532:
  4483  001A6C  A4F2               	btfss	intcon,2,c	;volatile
  4484  001A6E  D7FE               	goto	l532
  4485                           
  4486                           ;Lab10.c: 179: T0CONbits.TMR0ON = 0;
  4487  001A70  9ED5               	bcf	4053,7,c	;volatile
  4488  001A72  0012               	return		;funcret
  4489  001A74                     __end_of_Wait_Half_Second:
  4490                           	opt stack 0
  4491                           tblptru	equ	0xFF8
  4492                           tblptrh	equ	0xFF7
  4493                           tblptrl	equ	0xFF6
  4494                           tablat	equ	0xFF5
  4495                           prodh	equ	0xFF4
  4496                           prodl	equ	0xFF3
  4497                           intcon	equ	0xFF2
  4498                           intcon2	equ	0xFF1
  4499                           postinc0	equ	0xFEE
  4500                           wreg	equ	0xFE8
  4501                           postdec1	equ	0xFE5
  4502                           fsr1l	equ	0xFE1
  4503                           postinc2	equ	0xFDE
  4504                           postdec2	equ	0xFDD
  4505                           fsr2h	equ	0xFDA
  4506                           fsr2l	equ	0xFD9
  4507                           status	equ	0xFD8
  4508                           
  4509 ;; *************** function _Deactivate_Buzzer *****************
  4510 ;; Defined at:
  4511 ;;		line 296 in file "Lab10.c"
  4512 ;; Parameters:    Size  Location     Type
  4513 ;;		None
  4514 ;; Auto vars:     Size  Location     Type
  4515 ;;		None
  4516 ;; Return value:  Size  Location     Type
  4517 ;;		None               void
  4518 ;; Registers used:
  4519 ;;		wreg, status,2
  4520 ;; Tracked objects:
  4521 ;;		On entry : 0/0
  4522 ;;		On exit  : 0/0
  4523 ;;		Unchanged: 0/0
  4524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4525 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4526 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4527 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4528 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4529 ;;Total ram usage:        0 bytes
  4530 ;; Hardware stack levels used:    1
  4531 ;; Hardware stack levels required when called:    3
  4532 ;; This function calls:
  4533 ;;		Nothing
  4534 ;; This function is called by:
  4535 ;;		_Wait_Half_Second_With_Beep
  4536 ;; This function uses a non-reentrant model
  4537 ;;
  4538                           
  4539                           	psect	text12
  4540  001BB0                     __ptext12:
  4541                           	opt stack 0
  4542  001BB0                     _Deactivate_Buzzer:
  4543                           	opt stack 26
  4544                           
  4545                           ;Lab10.c: 298: CCP2CON = 0x0;
  4546                           
  4547                           ;incstack = 0
  4548  001BB0  0E00               	movlw	0
  4549  001BB2  6EBA               	movwf	4026,c	;volatile
  4550                           
  4551                           ;Lab10.c: 299: PORTBbits.RB3 = 0;
  4552  001BB4  9681               	bcf	3969,3,c	;volatile
  4553  001BB6  0012               	return		;funcret
  4554  001BB8                     __end_of_Deactivate_Buzzer:
  4555                           	opt stack 0
  4556                           tblptru	equ	0xFF8
  4557                           tblptrh	equ	0xFF7
  4558                           tblptrl	equ	0xFF6
  4559                           tablat	equ	0xFF5
  4560                           prodh	equ	0xFF4
  4561                           prodl	equ	0xFF3
  4562                           intcon	equ	0xFF2
  4563                           intcon2	equ	0xFF1
  4564                           postinc0	equ	0xFEE
  4565                           wreg	equ	0xFE8
  4566                           postdec1	equ	0xFE5
  4567                           fsr1l	equ	0xFE1
  4568                           postinc2	equ	0xFDE
  4569                           postdec2	equ	0xFDD
  4570                           fsr2h	equ	0xFDA
  4571                           fsr2l	equ	0xFD9
  4572                           status	equ	0xFD8
  4573                           
  4574 ;; *************** function _Activate_Buzzer *****************
  4575 ;; Defined at:
  4576 ;;		line 288 in file "Lab10.c"
  4577 ;; Parameters:    Size  Location     Type
  4578 ;;		None
  4579 ;; Auto vars:     Size  Location     Type
  4580 ;;		None
  4581 ;; Return value:  Size  Location     Type
  4582 ;;		None               void
  4583 ;; Registers used:
  4584 ;;		wreg, status,2
  4585 ;; Tracked objects:
  4586 ;;		On entry : 0/0
  4587 ;;		On exit  : 0/0
  4588 ;;		Unchanged: 0/0
  4589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4590 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4591 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4592 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4593 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4594 ;;Total ram usage:        0 bytes
  4595 ;; Hardware stack levels used:    1
  4596 ;; Hardware stack levels required when called:    3
  4597 ;; This function calls:
  4598 ;;		Nothing
  4599 ;; This function is called by:
  4600 ;;		_Wait_Half_Second_With_Beep
  4601 ;; This function uses a non-reentrant model
  4602 ;;
  4603                           
  4604                           	psect	text13
  4605  001AE4                     __ptext13:
  4606                           	opt stack 0
  4607  001AE4                     _Activate_Buzzer:
  4608                           	opt stack 26
  4609                           
  4610                           ;Lab10.c: 290: PR2 = 0b11111001 ;
  4611                           
  4612                           ;incstack = 0
  4613  001AE4  0EF9               	movlw	249
  4614  001AE6  6ECB               	movwf	4043,c	;volatile
  4615                           
  4616                           ;Lab10.c: 291: T2CON = 0b00000101 ;
  4617  001AE8  0E05               	movlw	5
  4618  001AEA  6ECA               	movwf	4042,c	;volatile
  4619                           
  4620                           ;Lab10.c: 292: CCPR2L = 0b01001010 ;
  4621  001AEC  0E4A               	movlw	74
  4622  001AEE  6EBB               	movwf	4027,c	;volatile
  4623                           
  4624                           ;Lab10.c: 293: CCP2CON = 0b00111100 ;
  4625  001AF0  0E3C               	movlw	60
  4626  001AF2  6EBA               	movwf	4026,c	;volatile
  4627  001AF4  0012               	return		;funcret
  4628  001AF6                     __end_of_Activate_Buzzer:
  4629                           	opt stack 0
  4630                           tblptru	equ	0xFF8
  4631                           tblptrh	equ	0xFF7
  4632                           tblptrl	equ	0xFF6
  4633                           tablat	equ	0xFF5
  4634                           prodh	equ	0xFF4
  4635                           prodl	equ	0xFF3
  4636                           intcon	equ	0xFF2
  4637                           intcon2	equ	0xFF1
  4638                           postinc0	equ	0xFEE
  4639                           wreg	equ	0xFE8
  4640                           postdec1	equ	0xFE5
  4641                           fsr1l	equ	0xFE1
  4642                           postinc2	equ	0xFDE
  4643                           postdec2	equ	0xFDD
  4644                           fsr2h	equ	0xFDA
  4645                           fsr2l	equ	0xFD9
  4646                           status	equ	0xFD8
  4647                           
  4648 ;; *************** function _Do_LED *****************
  4649 ;; Defined at:
  4650 ;;		line 317 in file "Lab10.c"
  4651 ;; Parameters:    Size  Location     Type
  4652 ;;  digit           1    wreg     unsigned char 
  4653 ;; Auto vars:     Size  Location     Type
  4654 ;;  digit           1   16[COMRAM] unsigned char 
  4655 ;; Return value:  Size  Location     Type
  4656 ;;		None               void
  4657 ;; Registers used:
  4658 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4659 ;; Tracked objects:
  4660 ;;		On entry : 0/0
  4661 ;;		On exit  : 0/0
  4662 ;;		Unchanged: 0/0
  4663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4664 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4665 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4666 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4667 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4668 ;;Total ram usage:        1 bytes
  4669 ;; Hardware stack levels used:    1
  4670 ;; Hardware stack levels required when called:    3
  4671 ;; This function calls:
  4672 ;;		Nothing
  4673 ;; This function is called by:
  4674 ;;		_main
  4675 ;; This function uses a non-reentrant model
  4676 ;;
  4677                           
  4678                           	psect	text14
  4679  001A8E                     __ptext14:
  4680                           	opt stack 0
  4681  001A8E                     _Do_LED:
  4682                           	opt stack 27
  4683                           
  4684                           ;incstack = 0
  4685                           ;Do_LED@digit stored from wreg
  4686  001A8E  6E11               	movwf	Do_LED@digit,c
  4687                           
  4688                           ;Lab10.c: 319: PORTA = Display_D1[digit];
  4689  001A90  5011               	movf	Do_LED@digit,w,c
  4690  001A92  0D01               	mullw	1
  4691  001A94  0EBF               	movlw	low _Display_D1
  4692  001A96  24F3               	addwf	prodl,w,c
  4693  001A98  6ED9               	movwf	fsr2l,c
  4694  001A9A  0E00               	movlw	high _Display_D1
  4695  001A9C  20F4               	addwfc	prodh,w,c
  4696  001A9E  6EDA               	movwf	fsr2h,c
  4697  001AA0  50DF               	movf	indf2,w,c
  4698  001AA2  6E80               	movwf	3968,c	;volatile
  4699  001AA4  0012               	return		;funcret
  4700  001AA6                     __end_of_Do_LED:
  4701                           	opt stack 0
  4702                           tblptru	equ	0xFF8
  4703                           tblptrh	equ	0xFF7
  4704                           tblptrl	equ	0xFF6
  4705                           tablat	equ	0xFF5
  4706                           prodh	equ	0xFF4
  4707                           prodl	equ	0xFF3
  4708                           intcon	equ	0xFF2
  4709                           intcon2	equ	0xFF1
  4710                           postinc0	equ	0xFEE
  4711                           wreg	equ	0xFE8
  4712                           postdec1	equ	0xFE5
  4713                           fsr1l	equ	0xFE1
  4714                           indf2	equ	0xFDF
  4715                           postinc2	equ	0xFDE
  4716                           postdec2	equ	0xFDD
  4717                           fsr2h	equ	0xFDA
  4718                           fsr2l	equ	0xFD9
  4719                           status	equ	0xFD8
  4720                           
  4721 ;; *************** function _Do_Init *****************
  4722 ;; Defined at:
  4723 ;;		line 190 in file "Lab10.c"
  4724 ;; Parameters:    Size  Location     Type
  4725 ;;		None
  4726 ;; Auto vars:     Size  Location     Type
  4727 ;;		None
  4728 ;; Return value:  Size  Location     Type
  4729 ;;		None               void
  4730 ;; Registers used:
  4731 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4732 ;; Tracked objects:
  4733 ;;		On entry : 0/0
  4734 ;;		On exit  : 0/0
  4735 ;;		Unchanged: 0/0
  4736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4737 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4738 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4739 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4740 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4741 ;;Total ram usage:        0 bytes
  4742 ;; Hardware stack levels used:    1
  4743 ;; Hardware stack levels required when called:   11
  4744 ;; This function calls:
  4745 ;;		_DS1621_Init
  4746 ;;		_I2C_Init
  4747 ;;		_Initialize_Screen
  4748 ;;		_init_INTERRUPT
  4749 ;;		_init_UART
  4750 ;; This function is called by:
  4751 ;;		_main
  4752 ;; This function uses a non-reentrant model
  4753 ;;
  4754                           
  4755                           	psect	text15
  4756  0017C0                     __ptext15:
  4757                           	opt stack 0
  4758  0017C0                     _Do_Init:
  4759                           	opt stack 19
  4760                           
  4761                           ;Lab10.c: 193: init_UART();
  4762                           
  4763                           ;incstack = 0
  4764  0017C0  EC5E  F00D         	call	_init_UART	;wreg free
  4765                           
  4766                           ;Lab10.c: 194: OSCCON=0x70;
  4767  0017C4  0E70               	movlw	112
  4768  0017C6  6ED3               	movwf	4051,c	;volatile
  4769                           
  4770                           ;Lab10.c: 196: ADCON1=0x0F;
  4771  0017C8  0E0F               	movlw	15
  4772  0017CA  6EC1               	movwf	4033,c	;volatile
  4773                           
  4774                           ;Lab10.c: 197: TRISA = 0x00;
  4775  0017CC  0E00               	movlw	0
  4776  0017CE  6E92               	movwf	3986,c	;volatile
  4777                           
  4778                           ;Lab10.c: 198: TRISB = 0x01;
  4779  0017D0  0E01               	movlw	1
  4780  0017D2  6E93               	movwf	3987,c	;volatile
  4781                           
  4782                           ;Lab10.c: 199: TRISC = 0x00;
  4783  0017D4  0E00               	movlw	0
  4784  0017D6  6E94               	movwf	3988,c	;volatile
  4785                           
  4786                           ;Lab10.c: 200: TRISD = 0x00;
  4787  0017D8  0E00               	movlw	0
  4788  0017DA  6E95               	movwf	3989,c	;volatile
  4789                           
  4790                           ;Lab10.c: 201: TRISE = 0x00;
  4791  0017DC  0E00               	movlw	0
  4792  0017DE  6E96               	movwf	3990,c	;volatile
  4793                           
  4794                           ;Lab10.c: 202: Initialize_Screen();
  4795  0017E0  ECAA  F008         	call	_Initialize_Screen	;wreg free
  4796                           
  4797                           ;Lab10.c: 203: RBPU=0;
  4798  0017E4  9EF1               	bcf	intcon2,7,c	;volatile
  4799                           
  4800                           ;Lab10.c: 204: DS1621_Init();
  4801  0017E6  EC10  F00D         	call	_DS1621_Init	;wreg free
  4802                           
  4803                           ;Lab10.c: 205: init_INTERRUPT();
  4804  0017EA  EC96  F00C         	call	_init_INTERRUPT	;wreg free
  4805                           
  4806                           ;Lab10.c: 206: I2C_Init(100000);
  4807  0017EE  0EA0               	movlw	160
  4808  0017F0  6E11               	movwf	I2C_Init@c,c
  4809  0017F2  0E86               	movlw	134
  4810  0017F4  6E12               	movwf	I2C_Init@c+1,c
  4811  0017F6  0E01               	movlw	1
  4812  0017F8  6E13               	movwf	I2C_Init@c+2,c
  4813  0017FA  0E00               	movlw	0
  4814  0017FC  6E14               	movwf	I2C_Init@c+3,c
  4815  0017FE  ECC9  F00D         	call	_I2C_Init	;wreg free
  4816  001802  0012               	return		;funcret
  4817  001804                     __end_of_Do_Init:
  4818                           	opt stack 0
  4819                           tblptru	equ	0xFF8
  4820                           tblptrh	equ	0xFF7
  4821                           tblptrl	equ	0xFF6
  4822                           tablat	equ	0xFF5
  4823                           prodh	equ	0xFF4
  4824                           prodl	equ	0xFF3
  4825                           intcon	equ	0xFF2
  4826                           intcon2	equ	0xFF1
  4827                           postinc0	equ	0xFEE
  4828                           wreg	equ	0xFE8
  4829                           postdec1	equ	0xFE5
  4830                           fsr1l	equ	0xFE1
  4831                           indf2	equ	0xFDF
  4832                           postinc2	equ	0xFDE
  4833                           postdec2	equ	0xFDD
  4834                           fsr2h	equ	0xFDA
  4835                           fsr2l	equ	0xFD9
  4836                           status	equ	0xFD8
  4837                           
  4838 ;; *************** function _init_UART *****************
  4839 ;; Defined at:
  4840 ;;		line 155 in file "Lab10.c"
  4841 ;; Parameters:    Size  Location     Type
  4842 ;;		None
  4843 ;; Auto vars:     Size  Location     Type
  4844 ;;		None
  4845 ;; Return value:  Size  Location     Type
  4846 ;;		None               void
  4847 ;; Registers used:
  4848 ;;		wreg, status,2, cstack
  4849 ;; Tracked objects:
  4850 ;;		On entry : 0/0
  4851 ;;		On exit  : 0/0
  4852 ;;		Unchanged: 0/0
  4853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4854 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4855 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4856 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4857 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4858 ;;Total ram usage:        0 bytes
  4859 ;; Hardware stack levels used:    1
  4860 ;; Hardware stack levels required when called:    4
  4861 ;; This function calls:
  4862 ;;		_OpenUSART
  4863 ;; This function is called by:
  4864 ;;		_Do_Init
  4865 ;; This function uses a non-reentrant model
  4866 ;;
  4867                           
  4868                           	psect	text16
  4869  001ABC                     __ptext16:
  4870                           	opt stack 0
  4871  001ABC                     _init_UART:
  4872                           	opt stack 25
  4873                           
  4874                           ;Lab10.c: 157: OpenUSART (0b01111111 & 0b10111111 &
  4875                           ;Lab10.c: 158: 0b11111110 & 0b11111101 & 0b11111111 &
  4876                           ;Lab10.c: 159: 0b11111111, 25);
  4877                           
  4878                           ;incstack = 0
  4879  001ABC  0E00               	movlw	0
  4880  001ABE  6E12               	movwf	OpenUSART@spbrg+1,c
  4881  001AC0  0E19               	movlw	25
  4882  001AC2  6E11               	movwf	OpenUSART@spbrg,c
  4883  001AC4  0E3C               	movlw	60
  4884  001AC6  EC2E  F00A         	call	_OpenUSART
  4885                           
  4886                           ;Lab10.c: 160: OSCCON = 0x70;
  4887  001ACA  0E70               	movlw	112
  4888  001ACC  6ED3               	movwf	4051,c	;volatile
  4889  001ACE  0012               	return		;funcret
  4890  001AD0                     __end_of_init_UART:
  4891                           	opt stack 0
  4892                           tblptru	equ	0xFF8
  4893                           tblptrh	equ	0xFF7
  4894                           tblptrl	equ	0xFF6
  4895                           tablat	equ	0xFF5
  4896                           prodh	equ	0xFF4
  4897                           prodl	equ	0xFF3
  4898                           intcon	equ	0xFF2
  4899                           intcon2	equ	0xFF1
  4900                           postinc0	equ	0xFEE
  4901                           wreg	equ	0xFE8
  4902                           postdec1	equ	0xFE5
  4903                           fsr1l	equ	0xFE1
  4904                           indf2	equ	0xFDF
  4905                           postinc2	equ	0xFDE
  4906                           postdec2	equ	0xFDD
  4907                           fsr2h	equ	0xFDA
  4908                           fsr2l	equ	0xFD9
  4909                           status	equ	0xFD8
  4910                           
  4911 ;; *************** function _OpenUSART *****************
  4912 ;; Defined at:
  4913 ;;		line 73 in file "E:\XC8\sources\pic18\plib\USART\uopen.c"
  4914 ;; Parameters:    Size  Location     Type
  4915 ;;  config          1    wreg     unsigned char 
  4916 ;;  spbrg           2   16[COMRAM] unsigned int 
  4917 ;; Auto vars:     Size  Location     Type
  4918 ;;  config          1   18[COMRAM] unsigned char 
  4919 ;; Return value:  Size  Location     Type
  4920 ;;		None               void
  4921 ;; Registers used:
  4922 ;;		wreg, status,2
  4923 ;; Tracked objects:
  4924 ;;		On entry : 0/0
  4925 ;;		On exit  : 0/0
  4926 ;;		Unchanged: 0/0
  4927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4928 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4929 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4930 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4931 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4932 ;;Total ram usage:        3 bytes
  4933 ;; Hardware stack levels used:    1
  4934 ;; Hardware stack levels required when called:    3
  4935 ;; This function calls:
  4936 ;;		Nothing
  4937 ;; This function is called by:
  4938 ;;		_init_UART
  4939 ;; This function uses a non-reentrant model
  4940 ;;
  4941                           
  4942                           	psect	text17
  4943  00145C                     __ptext17:
  4944                           	opt stack 0
  4945  00145C                     _OpenUSART:
  4946                           	opt stack 25
  4947                           
  4948                           ;incstack = 0
  4949                           ;OpenUSART@config stored from wreg
  4950  00145C  6E13               	movwf	OpenUSART@config,c
  4951  00145E  0E00               	movlw	0
  4952  001460  6EAC               	movwf	4012,c	;volatile
  4953  001462  0E00               	movlw	0
  4954  001464  6EAB               	movwf	4011,c	;volatile
  4955  001466  A013               	btfss	OpenUSART@config,0,c
  4956  001468  D002               	goto	l4541
  4957  00146A  88AC               	bsf	4012,4,c	;volatile
  4958  00146C  D000               	goto	l4541
  4959  00146E                     l4541:
  4960  00146E  A213               	btfss	OpenUSART@config,1,c
  4961  001470  D003               	goto	l4545
  4962  001472  8CAC               	bsf	4012,6,c	;volatile
  4963  001474  8CAB               	bsf	4011,6,c	;volatile
  4964  001476  D000               	goto	l4545
  4965  001478                     l4545:
  4966  001478  A413               	btfss	OpenUSART@config,2,c
  4967  00147A  D002               	goto	l4549
  4968  00147C  8EAC               	bsf	4012,7,c	;volatile
  4969  00147E  D000               	goto	l4549
  4970  001480                     l4549:
  4971  001480  A613               	btfss	OpenUSART@config,3,c
  4972  001482  D002               	goto	l665
  4973  001484  88AB               	bsf	4011,4,c	;volatile
  4974  001486  D002               	goto	l4553
  4975  001488                     l665:
  4976  001488  8AAB               	bsf	4011,5,c	;volatile
  4977  00148A  D000               	goto	l4553
  4978  00148C                     l4553:
  4979  00148C  B813               	btfsc	OpenUSART@config,4,c
  4980  00148E  84AC               	bsf	4012,2,c	;volatile
  4981  001490  989E               	bcf	3998,4,c	;volatile
  4982  001492  AA13               	btfss	OpenUSART@config,5,c
  4983  001494  D002               	goto	l4561
  4984  001496  86AB               	bsf	4011,3,c	;volatile
  4985  001498  D000               	goto	l4561
  4986  00149A                     l4561:
  4987  00149A  AC13               	btfss	OpenUSART@config,6,c
  4988  00149C  D002               	goto	l669
  4989  00149E  8A9D               	bsf	3997,5,c	;volatile
  4990  0014A0  D001               	goto	l670
  4991  0014A2                     l669:
  4992  0014A2  9A9D               	bcf	3997,5,c	;volatile
  4993  0014A4                     l670:
  4994  0014A4  9A9E               	bcf	3998,5,c	;volatile
  4995  0014A6  AE13               	btfss	OpenUSART@config,7,c
  4996  0014A8  D002               	goto	l671
  4997  0014AA  889D               	bsf	3997,4,c	;volatile
  4998  0014AC  D001               	goto	l672
  4999  0014AE                     l671:
  5000  0014AE  989D               	bcf	3997,4,c	;volatile
  5001  0014B0                     l672:
  5002  0014B0  C011  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  5003  0014B4  5012               	movf	OpenUSART@spbrg+1,w,c
  5004  0014B6  6EB0               	movwf	4016,c	;volatile
  5005  0014B8  8AAC               	bsf	4012,5,c	;volatile
  5006  0014BA  8EAB               	bsf	4011,7,c	;volatile
  5007  0014BC  9C94               	bcf	3988,6,c	;volatile
  5008  0014BE  8E94               	bsf	3988,7,c	;volatile
  5009  0014C0  B8AC               	btfsc	4012,4,c	;volatile
  5010  0014C2  BEAC               	btfsc	4012,7,c	;volatile
  5011  0014C4  D002               	goto	l674
  5012  0014C6  8C94               	bsf	3988,6,c	;volatile
  5013  0014C8  D000               	goto	l674
  5014  0014CA                     l674:
  5015  0014CA  0012               	return		;funcret
  5016  0014CC                     __end_of_OpenUSART:
  5017                           	opt stack 0
  5018                           tblptru	equ	0xFF8
  5019                           tblptrh	equ	0xFF7
  5020                           tblptrl	equ	0xFF6
  5021                           tablat	equ	0xFF5
  5022                           prodh	equ	0xFF4
  5023                           prodl	equ	0xFF3
  5024                           intcon	equ	0xFF2
  5025                           intcon2	equ	0xFF1
  5026                           postinc0	equ	0xFEE
  5027                           wreg	equ	0xFE8
  5028                           postdec1	equ	0xFE5
  5029                           fsr1l	equ	0xFE1
  5030                           indf2	equ	0xFDF
  5031                           postinc2	equ	0xFDE
  5032                           postdec2	equ	0xFDD
  5033                           fsr2h	equ	0xFDA
  5034                           fsr2l	equ	0xFD9
  5035                           status	equ	0xFD8
  5036                           
  5037 ;; *************** function _init_INTERRUPT *****************
  5038 ;; Defined at:
  5039 ;;		line 13 in file "Interrupt.c"
  5040 ;; Parameters:    Size  Location     Type
  5041 ;;		None
  5042 ;; Auto vars:     Size  Location     Type
  5043 ;;		None
  5044 ;; Return value:  Size  Location     Type
  5045 ;;		None               void
  5046 ;; Registers used:
  5047 ;;		wreg, status,2
  5048 ;; Tracked objects:
  5049 ;;		On entry : 0/0
  5050 ;;		On exit  : 0/0
  5051 ;;		Unchanged: 0/0
  5052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5053 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5054 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5055 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5056 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5057 ;;Total ram usage:        0 bytes
  5058 ;; Hardware stack levels used:    1
  5059 ;; Hardware stack levels required when called:    3
  5060 ;; This function calls:
  5061 ;;		Nothing
  5062 ;; This function is called by:
  5063 ;;		_Do_Init
  5064 ;; This function uses a non-reentrant model
  5065 ;;
  5066                           
  5067                           	psect	text18
  5068  00192C                     __ptext18:
  5069                           	opt stack 0
  5070  00192C                     _init_INTERRUPT:
  5071                           	opt stack 26
  5072                           
  5073                           ;Interrupt.c: 15: INTCONbits.INT0IF = 0;
  5074                           
  5075                           ;incstack = 0
  5076  00192C  92F2               	bcf	intcon,1,c	;volatile
  5077                           
  5078                           ;Interrupt.c: 16: INTCON2bits.INTEDG0 = 0;
  5079  00192E  9CF1               	bcf	intcon2,6,c	;volatile
  5080                           
  5081                           ;Interrupt.c: 17: INTCONbits.INT0IE = 1;
  5082  001930  88F2               	bsf	intcon,4,c	;volatile
  5083                           
  5084                           ;Interrupt.c: 18: TMR1H = 0;
  5085  001932  0E00               	movlw	0
  5086  001934  6ECF               	movwf	4047,c	;volatile
  5087                           
  5088                           ;Interrupt.c: 19: TMR1L = 0;
  5089  001936  0E00               	movlw	0
  5090  001938  6ECE               	movwf	4046,c	;volatile
  5091                           
  5092                           ;Interrupt.c: 20: PIR1bits.TMR1IF = 0;
  5093  00193A  909E               	bcf	3998,0,c	;volatile
  5094                           
  5095                           ;Interrupt.c: 21: PIE1bits.TMR1IE = 1;
  5096  00193C  809D               	bsf	3997,0,c	;volatile
  5097                           
  5098                           ;Interrupt.c: 22: INTCONbits.PEIE = 1;
  5099  00193E  8CF2               	bsf	intcon,6,c	;volatile
  5100                           
  5101                           ;Interrupt.c: 23: INTCONbits.GIE = 1;
  5102  001940  8EF2               	bsf	intcon,7,c	;volatile
  5103                           
  5104                           ;Interrupt.c: 24: nec_ok = 0;
  5105  001942  0E00               	movlw	0
  5106  001944  6E48               	movwf	_nec_ok+1,c
  5107  001946  0E00               	movlw	0
  5108  001948  6E47               	movwf	_nec_ok,c
  5109                           
  5110                           ;Interrupt.c: 25: Nec_code = 0x0;
  5111  00194A  0E00               	movlw	0
  5112  00194C  6E41               	movwf	_Nec_code,c
  5113  00194E  0E00               	movlw	0
  5114  001950  6E42               	movwf	_Nec_code+1,c
  5115  001952  0E00               	movlw	0
  5116  001954  6E43               	movwf	_Nec_code+2,c
  5117  001956  0E00               	movlw	0
  5118  001958  6E44               	movwf	_Nec_code+3,c
  5119  00195A  0012               	return		;funcret
  5120  00195C                     __end_of_init_INTERRUPT:
  5121                           	opt stack 0
  5122                           tblptru	equ	0xFF8
  5123                           tblptrh	equ	0xFF7
  5124                           tblptrl	equ	0xFF6
  5125                           tablat	equ	0xFF5
  5126                           prodh	equ	0xFF4
  5127                           prodl	equ	0xFF3
  5128                           intcon	equ	0xFF2
  5129                           intcon2	equ	0xFF1
  5130                           postinc0	equ	0xFEE
  5131                           wreg	equ	0xFE8
  5132                           postdec1	equ	0xFE5
  5133                           fsr1l	equ	0xFE1
  5134                           indf2	equ	0xFDF
  5135                           postinc2	equ	0xFDE
  5136                           postdec2	equ	0xFDD
  5137                           fsr2h	equ	0xFDA
  5138                           fsr2l	equ	0xFD9
  5139                           status	equ	0xFD8
  5140                           
  5141 ;; *************** function _Initialize_Screen *****************
  5142 ;; Defined at:
  5143 ;;		line 302 in file "Lab10.c"
  5144 ;; Parameters:    Size  Location     Type
  5145 ;;		None
  5146 ;; Auto vars:     Size  Location     Type
  5147 ;;		None
  5148 ;; Return value:  Size  Location     Type
  5149 ;;		None               void
  5150 ;; Registers used:
  5151 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5152 ;; Tracked objects:
  5153 ;;		On entry : 0/0
  5154 ;;		On exit  : 0/0
  5155 ;;		Unchanged: 0/0
  5156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5157 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5158 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5159 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5160 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5161 ;;Total ram usage:        0 bytes
  5162 ;; Hardware stack levels used:    1
  5163 ;; Hardware stack levels required when called:   10
  5164 ;; This function calls:
  5165 ;;		_LCD_Reset
  5166 ;;		_TFT_GreenTab_Initialize
  5167 ;;		_drawtext
  5168 ;;		_fillScreen
  5169 ;;		_strcpy
  5170 ;; This function is called by:
  5171 ;;		_Do_Init
  5172 ;; This function uses a non-reentrant model
  5173 ;;
  5174                           
  5175                           	psect	text19
  5176  001154                     __ptext19:
  5177                           	opt stack 0
  5178  001154                     _Initialize_Screen:
  5179                           	opt stack 19
  5180                           
  5181                           ;Lab10.c: 304: LCD_Reset();
  5182                           
  5183                           ;incstack = 0
  5184  001154  EC7B  F00D         	call	_LCD_Reset	;wreg free
  5185                           
  5186                           ;Lab10.c: 305: TFT_GreenTab_Initialize();
  5187  001158  ECC6  F00C         	call	_TFT_GreenTab_Initialize	;wreg free
  5188                           
  5189                           ;Lab10.c: 306: fillScreen(0x0000);
  5190  00115C  0E00               	movlw	0
  5191  00115E  6E25               	movwf	fillScreen@color+1,c
  5192  001160  0E00               	movlw	0
  5193  001162  6E24               	movwf	fillScreen@color,c
  5194  001164  EC1F  F00D         	call	_fillScreen	;wreg free
  5195                           
  5196                           ;Lab10.c: 309: txt = buffer;
  5197  001168  0ECB               	movlw	low _buffer
  5198  00116A  6E49               	movwf	_txt,c
  5199  00116C  0E00               	movlw	high _buffer
  5200  00116E  6E4A               	movwf	_txt+1,c
  5201                           
  5202                           ;Lab10.c: 310: strcpy(txt, "ECE3301L Fall 21-S4");
  5203  001170  C049  F011         	movff	_txt,strcpy@to
  5204  001174  C04A  F012         	movff	_txt+1,strcpy@to+1
  5205  001178  0ECB               	movlw	low STR_5
  5206  00117A  6E13               	movwf	strcpy@from,c
  5207  00117C  0EFF               	movlw	high STR_5
  5208  00117E  6E14               	movwf	strcpy@from+1,c
  5209  001180  EC7D  F00C         	call	_strcpy	;wreg free
  5210                           
  5211                           ;Lab10.c: 311: drawtext(2, 2, txt, 0xFFFF, 0x0000, 1);
  5212  001184  0E02               	movlw	2
  5213  001186  6E39               	movwf	drawtext@y,c
  5214  001188  C049  F03A         	movff	_txt,drawtext@_text
  5215  00118C  C04A  F03B         	movff	_txt+1,drawtext@_text+1
  5216  001190  0EFF               	movlw	255
  5217  001192  6E3D               	movwf	drawtext@color+1,c
  5218  001194  683C               	setf	drawtext@color,c
  5219  001196  0E00               	movlw	0
  5220  001198  6E3F               	movwf	drawtext@bg+1,c
  5221  00119A  0E00               	movlw	0
  5222  00119C  6E3E               	movwf	drawtext@bg,c
  5223  00119E  0E01               	movlw	1
  5224  0011A0  6E40               	movwf	drawtext@size,c
  5225  0011A2  0E02               	movlw	2
  5226  0011A4  EC65  F006         	call	_drawtext
  5227                           
  5228                           ;Lab10.c: 313: strcpy(txt, "LAB 10 ");
  5229  0011A8  C049  F011         	movff	_txt,strcpy@to
  5230  0011AC  C04A  F012         	movff	_txt+1,strcpy@to+1
  5231  0011B0  0EF0               	movlw	low STR_6
  5232  0011B2  6E13               	movwf	strcpy@from,c
  5233  0011B4  0EFF               	movlw	high STR_6
  5234  0011B6  6E14               	movwf	strcpy@from+1,c
  5235  0011B8  EC7D  F00C         	call	_strcpy	;wreg free
  5236                           
  5237                           ;Lab10.c: 314: drawtext(50, 10, txt, 0xFFFF, 0x0000, 1);
  5238  0011BC  0E0A               	movlw	10
  5239  0011BE  6E39               	movwf	drawtext@y,c
  5240  0011C0  C049  F03A         	movff	_txt,drawtext@_text
  5241  0011C4  C04A  F03B         	movff	_txt+1,drawtext@_text+1
  5242  0011C8  0EFF               	movlw	255
  5243  0011CA  6E3D               	movwf	drawtext@color+1,c
  5244  0011CC  683C               	setf	drawtext@color,c
  5245  0011CE  0E00               	movlw	0
  5246  0011D0  6E3F               	movwf	drawtext@bg+1,c
  5247  0011D2  0E00               	movlw	0
  5248  0011D4  6E3E               	movwf	drawtext@bg,c
  5249  0011D6  0E01               	movlw	1
  5250  0011D8  6E40               	movwf	drawtext@size,c
  5251  0011DA  0E32               	movlw	50
  5252  0011DC  EC65  F006         	call	_drawtext
  5253  0011E0  0012               	return		;funcret
  5254  0011E2                     __end_of_Initialize_Screen:
  5255                           	opt stack 0
  5256                           tblptru	equ	0xFF8
  5257                           tblptrh	equ	0xFF7
  5258                           tblptrl	equ	0xFF6
  5259                           tablat	equ	0xFF5
  5260                           prodh	equ	0xFF4
  5261                           prodl	equ	0xFF3
  5262                           intcon	equ	0xFF2
  5263                           intcon2	equ	0xFF1
  5264                           postinc0	equ	0xFEE
  5265                           wreg	equ	0xFE8
  5266                           postdec1	equ	0xFE5
  5267                           fsr1l	equ	0xFE1
  5268                           indf2	equ	0xFDF
  5269                           postinc2	equ	0xFDE
  5270                           postdec2	equ	0xFDD
  5271                           fsr2h	equ	0xFDA
  5272                           fsr2l	equ	0xFD9
  5273                           status	equ	0xFD8
  5274                           
  5275 ;; *************** function _strcpy *****************
  5276 ;; Defined at:
  5277 ;;		line 8 in file "E:\XC8\sources\common\strcpy.c"
  5278 ;; Parameters:    Size  Location     Type
  5279 ;;  to              2   16[COMRAM] PTR unsigned char 
  5280 ;;		 -> NULL(0), buffer(31), 
  5281 ;;  from            2   18[COMRAM] PTR const unsigned char 
  5282 ;;		 -> STR_6(8), STR_5(20), 
  5283 ;; Auto vars:     Size  Location     Type
  5284 ;;  cp              2   20[COMRAM] PTR unsigned char 
  5285 ;;		 -> NULL(0), buffer(31), 
  5286 ;; Return value:  Size  Location     Type
  5287 ;;                  2   16[COMRAM] PTR unsigned char 
  5288 ;; Registers used:
  5289 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  5290 ;; Tracked objects:
  5291 ;;		On entry : 0/0
  5292 ;;		On exit  : 0/0
  5293 ;;		Unchanged: 0/0
  5294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5295 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5296 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5297 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5298 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5299 ;;Total ram usage:        6 bytes
  5300 ;; Hardware stack levels used:    1
  5301 ;; Hardware stack levels required when called:    3
  5302 ;; This function calls:
  5303 ;;		Nothing
  5304 ;; This function is called by:
  5305 ;;		_Initialize_Screen
  5306 ;; This function uses a non-reentrant model
  5307 ;;
  5308                           
  5309                           	psect	text20
  5310  0018FA                     __ptext20:
  5311                           	opt stack 0
  5312  0018FA                     _strcpy:
  5313                           	opt stack 25
  5314                           
  5315                           ;incstack = 0
  5316  0018FA  C011  F015         	movff	strcpy@to,strcpy@cp
  5317  0018FE  C012  F016         	movff	strcpy@to+1,strcpy@cp+1
  5318  001902  D005               	goto	l4589
  5319  001904                     l4587:
  5320  001904  4A15               	infsnz	strcpy@cp,f,c
  5321  001906  2A16               	incf	strcpy@cp+1,f,c
  5322  001908  4A13               	infsnz	strcpy@from,f,c
  5323  00190A  2A14               	incf	strcpy@from+1,f,c
  5324  00190C  D000               	goto	l4589
  5325  00190E                     l4589:
  5326  00190E  C013  FFF6         	movff	strcpy@from,tblptrl
  5327  001912  C014  FFF7         	movff	strcpy@from+1,tblptrh
  5328  001916                     	if	0	;tblptru may be non-zero
  5329  001916                     	endif
  5330  001916                     	if	0	;tblptru may be non-zero
  5331  001916                     	endif
  5332  001916  C015  FFD9         	movff	strcpy@cp,fsr2l
  5333  00191A  C016  FFDA         	movff	strcpy@cp+1,fsr2h
  5334  00191E  0008               	tblrd		*
  5335  001920  CFF5 FFDF          	movff	tablat,indf2
  5336  001924  50DF               	movf	indf2,w,c
  5337  001926  A4D8               	btfss	status,2,c
  5338  001928  D7ED               	goto	l4587
  5339                           
  5340                           ;	Return value of _strcpy is never used
  5341  00192A  0012               	return		;funcret
  5342  00192C                     __end_of_strcpy:
  5343                           	opt stack 0
  5344                           tblptru	equ	0xFF8
  5345                           tblptrh	equ	0xFF7
  5346                           tblptrl	equ	0xFF6
  5347                           tablat	equ	0xFF5
  5348                           prodh	equ	0xFF4
  5349                           prodl	equ	0xFF3
  5350                           intcon	equ	0xFF2
  5351                           intcon2	equ	0xFF1
  5352                           postinc0	equ	0xFEE
  5353                           wreg	equ	0xFE8
  5354                           postdec1	equ	0xFE5
  5355                           fsr1l	equ	0xFE1
  5356                           indf2	equ	0xFDF
  5357                           postinc2	equ	0xFDE
  5358                           postdec2	equ	0xFDD
  5359                           fsr2h	equ	0xFDA
  5360                           fsr2l	equ	0xFD9
  5361                           status	equ	0xFD8
  5362                           
  5363 ;; *************** function _fillScreen *****************
  5364 ;; Defined at:
  5365 ;;		line 619 in file "ST7735_TFT.c"
  5366 ;; Parameters:    Size  Location     Type
  5367 ;;  color           2   35[COMRAM] unsigned int 
  5368 ;; Auto vars:     Size  Location     Type
  5369 ;;		None
  5370 ;; Return value:  Size  Location     Type
  5371 ;;		None               void
  5372 ;; Registers used:
  5373 ;;		wreg, status,2, status,0, cstack
  5374 ;; Tracked objects:
  5375 ;;		On entry : 0/0
  5376 ;;		On exit  : 0/0
  5377 ;;		Unchanged: 0/0
  5378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5379 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5380 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5381 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5382 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5383 ;;Total ram usage:        2 bytes
  5384 ;; Hardware stack levels used:    1
  5385 ;; Hardware stack levels required when called:    7
  5386 ;; This function calls:
  5387 ;;		_fillRectangle
  5388 ;; This function is called by:
  5389 ;;		_Initialize_Screen
  5390 ;; This function uses a non-reentrant model
  5391 ;;
  5392                           
  5393                           	psect	text21
  5394  001A3E                     __ptext21:
  5395                           	opt stack 0
  5396  001A3E                     _fillScreen:
  5397                           	opt stack 21
  5398                           
  5399                           ;ST7735_TFT.c: 621: fillRectangle(0, 0, 128, 160, color);
  5400                           
  5401                           ;incstack = 0
  5402  001A3E  0E00               	movlw	0
  5403  001A40  6E18               	movwf	fillRectangle@y,c
  5404  001A42  0E80               	movlw	128
  5405  001A44  6E19               	movwf	fillRectangle@w,c
  5406  001A46  0EA0               	movlw	160
  5407  001A48  6E1A               	movwf	fillRectangle@h,c
  5408  001A4A  C024  F01B         	movff	fillScreen@color,fillRectangle@color
  5409  001A4E  C025  F01C         	movff	fillScreen@color+1,fillRectangle@color+1
  5410  001A52  0E00               	movlw	0
  5411  001A54  ECF1  F007         	call	_fillRectangle
  5412  001A58  0012               	return		;funcret
  5413  001A5A                     __end_of_fillScreen:
  5414                           	opt stack 0
  5415                           tblptru	equ	0xFF8
  5416                           tblptrh	equ	0xFF7
  5417                           tblptrl	equ	0xFF6
  5418                           tablat	equ	0xFF5
  5419                           prodh	equ	0xFF4
  5420                           prodl	equ	0xFF3
  5421                           intcon	equ	0xFF2
  5422                           intcon2	equ	0xFF1
  5423                           postinc0	equ	0xFEE
  5424                           wreg	equ	0xFE8
  5425                           postdec1	equ	0xFE5
  5426                           fsr1l	equ	0xFE1
  5427                           indf2	equ	0xFDF
  5428                           postinc2	equ	0xFDE
  5429                           postdec2	equ	0xFDD
  5430                           fsr2h	equ	0xFDA
  5431                           fsr2l	equ	0xFD9
  5432                           status	equ	0xFD8
  5433                           
  5434 ;; *************** function _fillRectangle *****************
  5435 ;; Defined at:
  5436 ;;		line 503 in file "ST7735_TFT.c"
  5437 ;; Parameters:    Size  Location     Type
  5438 ;;  x               1    wreg     unsigned char 
  5439 ;;  y               1   23[COMRAM] unsigned char 
  5440 ;;  w               1   24[COMRAM] unsigned char 
  5441 ;;  h               1   25[COMRAM] unsigned char 
  5442 ;;  color           2   26[COMRAM] unsigned int 
  5443 ;; Auto vars:     Size  Location     Type
  5444 ;;  x               1   34[COMRAM] unsigned char 
  5445 ;;  lo              1   33[COMRAM] unsigned char 
  5446 ;;  hi              1   32[COMRAM] unsigned char 
  5447 ;; Return value:  Size  Location     Type
  5448 ;;		None               void
  5449 ;; Registers used:
  5450 ;;		wreg, status,2, status,0, cstack
  5451 ;; Tracked objects:
  5452 ;;		On entry : 0/0
  5453 ;;		On exit  : 0/0
  5454 ;;		Unchanged: 0/0
  5455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5456 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5457 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5458 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5459 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5460 ;;Total ram usage:       12 bytes
  5461 ;; Hardware stack levels used:    1
  5462 ;; Hardware stack levels required when called:    6
  5463 ;; This function calls:
  5464 ;;		_setAddrWindow
  5465 ;;		_spiwrite
  5466 ;; This function is called by:
  5467 ;;		_fillScreen
  5468 ;; This function uses a non-reentrant model
  5469 ;;
  5470                           
  5471                           	psect	text22
  5472  000FE2                     __ptext22:
  5473                           	opt stack 0
  5474  000FE2                     _fillRectangle:
  5475                           	opt stack 21
  5476                           
  5477                           ;incstack = 0
  5478                           ;fillRectangle@x stored from wreg
  5479  000FE2  6E23               	movwf	fillRectangle@x,c
  5480                           
  5481                           ;ST7735_TFT.c: 505: unsigned char hi, lo;
  5482                           ;ST7735_TFT.c: 506: if((x >= 128) || (y >= 160))
  5483  000FE4  0E80               	movlw	128
  5484  000FE6  6023               	cpfslt	fillRectangle@x,c
  5485  000FE8  D069               	goto	l374
  5486  000FEA  0E9F               	movlw	159
  5487  000FEC  6418               	cpfsgt	fillRectangle@y,c
  5488  000FEE  D001               	goto	l4411
  5489                           
  5490                           ;ST7735_TFT.c: 507: return;
  5491  000FF0  D065               	goto	l374
  5492  000FF2                     l4411:
  5493                           
  5494                           ;ST7735_TFT.c: 508: if((x + w - 1) >= 128)
  5495  000FF2  0EFF               	movlw	255
  5496  000FF4  6E1D               	movwf	??_fillRectangle& (0+255),c
  5497  000FF6  0EFF               	movlw	255
  5498  000FF8  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  5499  000FFA  5019               	movf	fillRectangle@w,w,c
  5500  000FFC  C023  F01F         	movff	fillRectangle@x,??_fillRectangle+2
  5501  001000  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  5502  001002  261F               	addwf	??_fillRectangle+2,f,c
  5503  001004  0E00               	movlw	0
  5504  001006  2220               	addwfc	??_fillRectangle+3,f,c
  5505  001008  501D               	movf	??_fillRectangle,w,c
  5506  00100A  261F               	addwf	??_fillRectangle+2,f,c
  5507  00100C  501E               	movf	??_fillRectangle+1,w,c
  5508  00100E  2220               	addwfc	??_fillRectangle+3,f,c
  5509  001010  BE20               	btfsc	??_fillRectangle+3,7,c
  5510  001012  D00A               	goto	l375
  5511  001014  5020               	movf	??_fillRectangle+3,w,c
  5512  001016  E104               	bnz	u2970
  5513  001018  0E80               	movlw	128
  5514  00101A  5C1F               	subwf	??_fillRectangle+2,w,c
  5515  00101C  A0D8               	btfss	status,0,c
  5516  00101E  D004               	goto	l375
  5517  001020                     u2970:
  5518                           
  5519                           ;ST7735_TFT.c: 509: w = 128 - x;
  5520  001020  5023               	movf	fillRectangle@x,w,c
  5521  001022  0800               	sublw	0
  5522  001024  0F80               	addlw	128
  5523  001026  6E19               	movwf	fillRectangle@w,c
  5524  001028                     l375:
  5525                           
  5526                           ;ST7735_TFT.c: 510: if((y + h - 1) >= 160)
  5527  001028  0EFF               	movlw	255
  5528  00102A  6E1D               	movwf	??_fillRectangle& (0+255),c
  5529  00102C  0EFF               	movlw	255
  5530  00102E  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  5531  001030  501A               	movf	fillRectangle@h,w,c
  5532  001032  C018  F01F         	movff	fillRectangle@y,??_fillRectangle+2
  5533  001036  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  5534  001038  261F               	addwf	??_fillRectangle+2,f,c
  5535  00103A  0E00               	movlw	0
  5536  00103C  2220               	addwfc	??_fillRectangle+3,f,c
  5537  00103E  501D               	movf	??_fillRectangle,w,c
  5538  001040  261F               	addwf	??_fillRectangle+2,f,c
  5539  001042  501E               	movf	??_fillRectangle+1,w,c
  5540  001044  2220               	addwfc	??_fillRectangle+3,f,c
  5541  001046  BE20               	btfsc	??_fillRectangle+3,7,c
  5542  001048  D00B               	goto	l4417
  5543  00104A  5020               	movf	??_fillRectangle+3,w,c
  5544  00104C  E104               	bnz	u2980
  5545  00104E  0EA0               	movlw	160
  5546  001050  5C1F               	subwf	??_fillRectangle+2,w,c
  5547  001052  A0D8               	btfss	status,0,c
  5548  001054  D005               	goto	l4417
  5549  001056                     u2980:
  5550                           
  5551                           ;ST7735_TFT.c: 511: h = 160 - y;
  5552  001056  5018               	movf	fillRectangle@y,w,c
  5553  001058  0800               	sublw	0
  5554  00105A  0FA0               	addlw	160
  5555  00105C  6E1A               	movwf	fillRectangle@h,c
  5556  00105E  D000               	goto	l4417
  5557  001060                     l4417:
  5558                           
  5559                           ;ST7735_TFT.c: 512: setAddrWindow(x, y, x+w-1, y+h-1);
  5560  001060  C018  F014         	movff	fillRectangle@y,setAddrWindow@y0
  5561  001064  5023               	movf	fillRectangle@x,w,c
  5562  001066  2419               	addwf	fillRectangle@w,w,c
  5563  001068  6E1D               	movwf	??_fillRectangle& (0+255),c
  5564  00106A  041D               	decf	??_fillRectangle,w,c
  5565  00106C  6E15               	movwf	setAddrWindow@x1,c
  5566  00106E  5018               	movf	fillRectangle@y,w,c
  5567  001070  241A               	addwf	fillRectangle@h,w,c
  5568  001072  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  5569  001074  041E               	decf	??_fillRectangle+1,w,c
  5570  001076  6E16               	movwf	setAddrWindow@y1,c
  5571  001078  5023               	movf	fillRectangle@x,w,c
  5572  00107A  EC4B  F00B         	call	_setAddrWindow
  5573                           
  5574                           ;ST7735_TFT.c: 513: hi = color >> 8; lo = color;
  5575  00107E  501C               	movf	fillRectangle@color+1,w,c
  5576  001080  6E21               	movwf	fillRectangle@hi,c
  5577  001082  C01B  F022         	movff	fillRectangle@color,fillRectangle@lo
  5578                           
  5579                           ;ST7735_TFT.c: 514: PORTDbits.RD0 = 1;
  5580  001086  8083               	bsf	3971,0,c	;volatile
  5581                           
  5582                           ;ST7735_TFT.c: 515: PORTDbits.RD1 = 0;
  5583  001088  9283               	bcf	3971,1,c	;volatile
  5584                           
  5585                           ;ST7735_TFT.c: 517: for(y=h; y>0; y--) {
  5586  00108A  C01A  F018         	movff	fillRectangle@h,fillRectangle@y
  5587  00108E                     l4429:
  5588  00108E  5018               	movf	fillRectangle@y,w,c
  5589  001090  B4D8               	btfsc	status,2,c
  5590  001092  D013               	goto	l378
  5591  001094  D001               	goto	l377
  5592  001096  D011               	goto	l378
  5593  001098                     l377:
  5594                           
  5595                           ;ST7735_TFT.c: 518: for(x = w; x > 0; x--) {
  5596  001098  C019  F023         	movff	fillRectangle@w,fillRectangle@x
  5597  00109C                     l4433:
  5598  00109C  5023               	movf	fillRectangle@x,w,c
  5599  00109E  B4D8               	btfsc	status,2,c
  5600  0010A0  D00A               	goto	l4443
  5601  0010A2  D001               	goto	l4437
  5602  0010A4  D008               	goto	l4443
  5603  0010A6                     l4437:
  5604                           
  5605                           ;ST7735_TFT.c: 519: spiwrite(hi);
  5606  0010A6  5021               	movf	fillRectangle@hi,w,c
  5607  0010A8  EC68  F00D         	call	_spiwrite
  5608                           
  5609                           ;ST7735_TFT.c: 520: spiwrite(lo);
  5610  0010AC  5022               	movf	fillRectangle@lo,w,c
  5611  0010AE  EC68  F00D         	call	_spiwrite
  5612  0010B2  0623               	decf	fillRectangle@x,f,c
  5613  0010B4  D7F3               	goto	l4433
  5614  0010B6                     l4443:
  5615  0010B6  0618               	decf	fillRectangle@y,f,c
  5616  0010B8  D7EA               	goto	l4429
  5617  0010BA                     l378:
  5618                           
  5619                           ;ST7735_TFT.c: 521: }
  5620                           ;ST7735_TFT.c: 522: }
  5621                           ;ST7735_TFT.c: 523: PORTDbits.RD1 = 1;
  5622  0010BA  8283               	bsf	3971,1,c	;volatile
  5623  0010BC                     l374:
  5624  0010BC  0012               	return		;funcret
  5625  0010BE                     __end_of_fillRectangle:
  5626                           	opt stack 0
  5627                           tblptru	equ	0xFF8
  5628                           tblptrh	equ	0xFF7
  5629                           tblptrl	equ	0xFF6
  5630                           tablat	equ	0xFF5
  5631                           prodh	equ	0xFF4
  5632                           prodl	equ	0xFF3
  5633                           intcon	equ	0xFF2
  5634                           intcon2	equ	0xFF1
  5635                           postinc0	equ	0xFEE
  5636                           wreg	equ	0xFE8
  5637                           postdec1	equ	0xFE5
  5638                           fsr1l	equ	0xFE1
  5639                           indf2	equ	0xFDF
  5640                           postinc2	equ	0xFDE
  5641                           postdec2	equ	0xFDD
  5642                           fsr2h	equ	0xFDA
  5643                           fsr2l	equ	0xFD9
  5644                           status	equ	0xFD8
  5645                           
  5646 ;; *************** function _drawtext *****************
  5647 ;; Defined at:
  5648 ;;		line 474 in file "ST7735_TFT.c"
  5649 ;; Parameters:    Size  Location     Type
  5650 ;;  x               1    wreg     unsigned char 
  5651 ;;  y               1   56[COMRAM] unsigned char 
  5652 ;;  _text           2   57[COMRAM] PTR unsigned char 
  5653 ;;		 -> NULL(0), buffer(31), txt1(84), 
  5654 ;;  color           2   59[COMRAM] unsigned int 
  5655 ;;  bg              2   61[COMRAM] unsigned int 
  5656 ;;  size            1   63[COMRAM] unsigned char 
  5657 ;; Auto vars:     Size  Location     Type
  5658 ;;  x               1    2[BANK0 ] unsigned char 
  5659 ;;  i               2    5[BANK0 ] unsigned int 
  5660 ;;  textsize        2    3[BANK0 ] unsigned int 
  5661 ;;  cursor_x        1    8[BANK0 ] unsigned char 
  5662 ;;  cursor_y        1    7[BANK0 ] unsigned char 
  5663 ;; Return value:  Size  Location     Type
  5664 ;;		None               void
  5665 ;; Registers used:
  5666 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5667 ;; Tracked objects:
  5668 ;;		On entry : 0/0
  5669 ;;		On exit  : 0/0
  5670 ;;		Unchanged: 0/0
  5671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5672 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5673 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5674 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5675 ;;      Totals:         8       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5676 ;;Total ram usage:       17 bytes
  5677 ;; Hardware stack levels used:    1
  5678 ;; Hardware stack levels required when called:    9
  5679 ;; This function calls:
  5680 ;;		_drawChar
  5681 ;;		_strlen
  5682 ;; This function is called by:
  5683 ;;		_main
  5684 ;;		_Initialize_Screen
  5685 ;; This function uses a non-reentrant model
  5686 ;;
  5687                           
  5688                           	psect	text23
  5689  000CCA                     __ptext23:
  5690                           	opt stack 0
  5691  000CCA                     _drawtext:
  5692                           	opt stack 21
  5693                           
  5694                           ;incstack = 0
  5695                           ;drawtext@x stored from wreg
  5696  000CCA  0100               	movlb	0	; () banked
  5697  000CCC  6FEC               	movwf	drawtext@x& (0+255),b
  5698                           
  5699                           ; BSR set to: 0
  5700                           ;ST7735_TFT.c: 476: unsigned char cursor_x, cursor_y;
  5701                           ;ST7735_TFT.c: 477: unsigned int textsize, i;
  5702                           ;ST7735_TFT.c: 478: cursor_x = x, cursor_y = y;
  5703  000CCE  C0EC  F0F2         	movff	drawtext@x,drawtext@cursor_x
  5704                           
  5705                           ; BSR set to: 0
  5706  000CD2  C039  F0F1         	movff	drawtext@y,drawtext@cursor_y
  5707                           
  5708                           ; BSR set to: 0
  5709                           ;ST7735_TFT.c: 479: textsize = strlen(_text);
  5710  000CD6  C03A  F011         	movff	drawtext@_text,strlen@s
  5711  000CDA  C03B  F012         	movff	drawtext@_text+1,strlen@s+1
  5712  000CDE  EC02  F00C         	call	_strlen	;wreg free
  5713  000CE2  C011  F0ED         	movff	?_strlen,drawtext@textsize
  5714  000CE6  C012  F0EE         	movff	?_strlen+1,drawtext@textsize+1
  5715                           
  5716                           ;ST7735_TFT.c: 480: for(i = 0; i < textsize; i++){
  5717  000CEA  0E00               	movlw	0
  5718  000CEC  0100               	movlb	0	; () banked
  5719  000CEE  6FF0               	movwf	(drawtext@i+1)& (0+255),b
  5720  000CF0  0E00               	movlw	0
  5721  000CF2  6FEF               	movwf	drawtext@i& (0+255),b
  5722  000CF4  D06A               	goto	l4515
  5723  000CF6                     l4489:
  5724                           
  5725                           ; BSR set to: 0
  5726                           ;ST7735_TFT.c: 481: if(wrap && ((cursor_x + size * 5) > 128)){
  5727  000CF6  506F               	movf	_wrap,w,c
  5728  000CF8  B4D8               	btfsc	status,2,c
  5729  000CFA  D03A               	goto	l4505
  5730                           
  5731                           ; BSR set to: 0
  5732  000CFC  5040               	movf	drawtext@size,w,c
  5733  000CFE  0D05               	mullw	5
  5734  000D00  0100               	movlb	0	; () banked
  5735  000D02  51F2               	movf	drawtext@cursor_x& (0+255),w,b
  5736  000D04  0100               	movlb	0	; () banked
  5737  000D06  6FEA               	movwf	??_drawtext& (0+255),b
  5738  000D08  6BEB               	clrf	(??_drawtext+1)& (0+255),b
  5739  000D0A  50F3               	movf	prodl,w,c
  5740  000D0C  0100               	movlb	0	; () banked
  5741  000D0E  27EA               	addwf	??_drawtext& (0+255),f,b
  5742  000D10  50F4               	movf	prodh,w,c
  5743  000D12  0100               	movlb	0	; () banked
  5744  000D14  23EB               	addwfc	(??_drawtext+1)& (0+255),f,b
  5745  000D16  0100               	movlb	0	; () banked
  5746  000D18  BFEB               	btfsc	(??_drawtext+1)& (0+255),7,b
  5747  000D1A  D02A               	goto	l4505
  5748  000D1C  0100               	movlb	0	; () banked
  5749  000D1E  51EB               	movf	(??_drawtext+1)& (0+255),w,b
  5750  000D20  E105               	bnz	u3040
  5751  000D22  0E81               	movlw	129
  5752  000D24  0100               	movlb	0	; () banked
  5753  000D26  5DEA               	subwf	??_drawtext& (0+255),w,b
  5754  000D28  A0D8               	btfss	status,0,c
  5755  000D2A  D022               	goto	l4505
  5756  000D2C                     u3040:
  5757                           
  5758                           ; BSR set to: 0
  5759                           ;ST7735_TFT.c: 482: cursor_x = 0;
  5760  000D2C  0E00               	movlw	0
  5761  000D2E  0100               	movlb	0	; () banked
  5762  000D30  6FF2               	movwf	drawtext@cursor_x& (0+255),b
  5763                           
  5764                           ; BSR set to: 0
  5765                           ;ST7735_TFT.c: 483: cursor_y = cursor_y + size * 7 + 3 ;
  5766  000D32  5040               	movf	drawtext@size,w,c
  5767  000D34  0D07               	mullw	7
  5768  000D36  50F3               	movf	prodl,w,c
  5769  000D38  0100               	movlb	0	; () banked
  5770  000D3A  25F1               	addwf	drawtext@cursor_y& (0+255),w,b
  5771  000D3C  0F03               	addlw	3
  5772  000D3E  0100               	movlb	0	; () banked
  5773  000D40  6FF1               	movwf	drawtext@cursor_y& (0+255),b
  5774                           
  5775                           ; BSR set to: 0
  5776                           ;ST7735_TFT.c: 484: if(cursor_y > 160) cursor_y = 160;
  5777  000D42  0EA0               	movlw	160
  5778  000D44  0100               	movlb	0	; () banked
  5779  000D46  65F1               	cpfsgt	drawtext@cursor_y& (0+255),b
  5780  000D48  D004               	goto	l4501
  5781                           
  5782                           ; BSR set to: 0
  5783  000D4A  0EA0               	movlw	160
  5784  000D4C  0100               	movlb	0	; () banked
  5785  000D4E  6FF1               	movwf	drawtext@cursor_y& (0+255),b
  5786  000D50  D000               	goto	l4501
  5787  000D52                     l4501:
  5788                           
  5789                           ; BSR set to: 0
  5790                           ;ST7735_TFT.c: 485: if(_text[i] == 0x20) goto _skip; }
  5791  000D52  0100               	movlb	0	; () banked
  5792  000D54  51EF               	movf	drawtext@i& (0+255),w,b
  5793  000D56  243A               	addwf	drawtext@_text,w,c
  5794  000D58  6ED9               	movwf	fsr2l,c
  5795  000D5A  0100               	movlb	0	; () banked
  5796  000D5C  51F0               	movf	(drawtext@i+1)& (0+255),w,b
  5797  000D5E  203B               	addwfc	drawtext@_text+1,w,c
  5798  000D60  6EDA               	movwf	fsr2h,c
  5799  000D62  0E20               	movlw	32
  5800  000D64  18DE               	xorwf	postinc2,w,c
  5801  000D66  B4D8               	btfsc	status,2,c
  5802  000D68  D02C               	goto	l4513
  5803  000D6A  D002               	goto	l4505
  5804                           
  5805                           ; BSR set to: 0
  5806  000D6C  D02A               	goto	l4513
  5807                           
  5808                           ; BSR set to: 0
  5809  000D6E  D000               	goto	l4505
  5810  000D70                     l4505:
  5811                           
  5812                           ; BSR set to: 0
  5813                           ;ST7735_TFT.c: 486: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
  5814  000D70  C0F1  F02E         	movff	drawtext@cursor_y,drawChar@y
  5815  000D74  0100               	movlb	0	; () banked
  5816  000D76  51EF               	movf	drawtext@i& (0+255),w,b
  5817  000D78  243A               	addwf	drawtext@_text,w,c
  5818  000D7A  6ED9               	movwf	fsr2l,c
  5819  000D7C  0100               	movlb	0	; () banked
  5820  000D7E  51F0               	movf	(drawtext@i+1)& (0+255),w,b
  5821  000D80  203B               	addwfc	drawtext@_text+1,w,c
  5822  000D82  6EDA               	movwf	fsr2h,c
  5823  000D84  50DF               	movf	indf2,w,c
  5824  000D86  6E2F               	movwf	drawChar@c,c
  5825  000D88  C03C  F030         	movff	drawtext@color,drawChar@color
  5826  000D8C  C03D  F031         	movff	drawtext@color+1,drawChar@color+1
  5827  000D90  C03E  F032         	movff	drawtext@bg,drawChar@bg
  5828  000D94  C03F  F033         	movff	drawtext@bg+1,drawChar@bg+1
  5829  000D98  C040  F034         	movff	drawtext@size,drawChar@size
  5830  000D9C  0100               	movlb	0	; () banked
  5831  000D9E  51F2               	movf	drawtext@cursor_x& (0+255),w,b
  5832  000DA0  EC1E  F005         	call	_drawChar
  5833                           
  5834                           ;ST7735_TFT.c: 487: cursor_x = cursor_x + size * 6;
  5835  000DA4  5040               	movf	drawtext@size,w,c
  5836  000DA6  0D06               	mullw	6
  5837  000DA8  50F3               	movf	prodl,w,c
  5838  000DAA  0100               	movlb	0	; () banked
  5839  000DAC  25F2               	addwf	drawtext@cursor_x& (0+255),w,b
  5840  000DAE  0100               	movlb	0	; () banked
  5841  000DB0  6FF2               	movwf	drawtext@cursor_x& (0+255),b
  5842                           
  5843                           ; BSR set to: 0
  5844                           ;ST7735_TFT.c: 488: if(cursor_x > 128) cursor_x = 128;
  5845  000DB2  0E80               	movlw	128
  5846  000DB4  0100               	movlb	0	; () banked
  5847  000DB6  65F2               	cpfsgt	drawtext@cursor_x& (0+255),b
  5848  000DB8  D004               	goto	l4513
  5849                           
  5850                           ; BSR set to: 0
  5851  000DBA  0E80               	movlw	128
  5852  000DBC  0100               	movlb	0	; () banked
  5853  000DBE  6FF2               	movwf	drawtext@cursor_x& (0+255),b
  5854                           
  5855                           ; BSR set to: 0
  5856  000DC0  D000               	goto	l4513
  5857  000DC2                     l4513:
  5858                           
  5859                           ; BSR set to: 0
  5860  000DC2  0100               	movlb	0	; () banked
  5861  000DC4  4BEF               	infsnz	drawtext@i& (0+255),f,b
  5862  000DC6  2BF0               	incf	(drawtext@i+1)& (0+255),f,b
  5863  000DC8  D000               	goto	l4515
  5864  000DCA                     l4515:
  5865                           
  5866                           ; BSR set to: 0
  5867  000DCA  0100               	movlb	0	; () banked
  5868  000DCC  51ED               	movf	drawtext@textsize& (0+255),w,b
  5869  000DCE  0100               	movlb	0	; () banked
  5870  000DD0  5DEF               	subwf	drawtext@i& (0+255),w,b
  5871  000DD2  0100               	movlb	0	; () banked
  5872  000DD4  51EE               	movf	(drawtext@textsize+1)& (0+255),w,b
  5873  000DD6  0100               	movlb	0	; () banked
  5874  000DD8  59F0               	subwfb	(drawtext@i+1)& (0+255),w,b
  5875  000DDA  A0D8               	btfss	status,0,c
  5876  000DDC  D78C               	goto	l4489
  5877                           
  5878                           ; BSR set to: 0
  5879                           
  5880                           ; BSR set to: 0
  5881  000DDE  0012               	return		;funcret
  5882  000DE0                     __end_of_drawtext:
  5883                           	opt stack 0
  5884                           tblptru	equ	0xFF8
  5885                           tblptrh	equ	0xFF7
  5886                           tblptrl	equ	0xFF6
  5887                           tablat	equ	0xFF5
  5888                           prodh	equ	0xFF4
  5889                           prodl	equ	0xFF3
  5890                           intcon	equ	0xFF2
  5891                           intcon2	equ	0xFF1
  5892                           postinc0	equ	0xFEE
  5893                           wreg	equ	0xFE8
  5894                           postdec1	equ	0xFE5
  5895                           fsr1l	equ	0xFE1
  5896                           indf2	equ	0xFDF
  5897                           postinc2	equ	0xFDE
  5898                           postdec2	equ	0xFDD
  5899                           fsr2h	equ	0xFDA
  5900                           fsr2l	equ	0xFD9
  5901                           status	equ	0xFD8
  5902                           
  5903 ;; *************** function _strlen *****************
  5904 ;; Defined at:
  5905 ;;		line 4 in file "E:\XC8\sources\common\strlen.c"
  5906 ;; Parameters:    Size  Location     Type
  5907 ;;  s               2   16[COMRAM] PTR const unsigned char 
  5908 ;;		 -> NULL(0), buffer(31), txt1(84), 
  5909 ;; Auto vars:     Size  Location     Type
  5910 ;;  cp              2   20[COMRAM] PTR const unsigned char 
  5911 ;;		 -> NULL(0), buffer(31), txt1(84), 
  5912 ;; Return value:  Size  Location     Type
  5913 ;;                  2   16[COMRAM] unsigned int 
  5914 ;; Registers used:
  5915 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5916 ;; Tracked objects:
  5917 ;;		On entry : 0/0
  5918 ;;		On exit  : 0/0
  5919 ;;		Unchanged: 0/0
  5920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5921 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5922 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5923 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5924 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5925 ;;Total ram usage:        6 bytes
  5926 ;; Hardware stack levels used:    1
  5927 ;; Hardware stack levels required when called:    3
  5928 ;; This function calls:
  5929 ;;		Nothing
  5930 ;; This function is called by:
  5931 ;;		_drawtext
  5932 ;; This function uses a non-reentrant model
  5933 ;;
  5934                           
  5935                           	psect	text24
  5936  001804                     __ptext24:
  5937                           	opt stack 0
  5938  001804                     _strlen:
  5939                           	opt stack 26
  5940                           
  5941                           ; BSR set to: 0
  5942                           ;incstack = 0
  5943  001804  C011  F015         	movff	strlen@s,strlen@cp
  5944  001808  C012  F016         	movff	strlen@s+1,strlen@cp+1
  5945  00180C  D003               	goto	l4401
  5946  00180E                     l4399:
  5947  00180E  4A15               	infsnz	strlen@cp,f,c
  5948  001810  2A16               	incf	strlen@cp+1,f,c
  5949  001812  D000               	goto	l4401
  5950  001814                     l4401:
  5951  001814  C015  FFD9         	movff	strlen@cp,fsr2l
  5952  001818  C016  FFDA         	movff	strlen@cp+1,fsr2h
  5953  00181C  50DF               	movf	indf2,w,c
  5954  00181E  A4D8               	btfss	status,2,c
  5955  001820  D7F6               	goto	l4399
  5956  001822  C011  F013         	movff	strlen@s,??_strlen
  5957  001826  C012  F014         	movff	strlen@s+1,??_strlen+1
  5958  00182A  1E13               	comf	??_strlen,f,c
  5959  00182C  1E14               	comf	??_strlen+1,f,c
  5960  00182E  4A13               	infsnz	??_strlen,f,c
  5961  001830  2A14               	incf	??_strlen+1,f,c
  5962  001832  5015               	movf	strlen@cp,w,c
  5963  001834  2413               	addwf	??_strlen,w,c
  5964  001836  6E11               	movwf	?_strlen,c
  5965  001838  5016               	movf	strlen@cp+1,w,c
  5966  00183A  2014               	addwfc	??_strlen+1,w,c
  5967  00183C  6E12               	movwf	?_strlen+1,c
  5968  00183E  D000               	goto	l1239
  5969  001840                     l1239:
  5970  001840  0012               	return		;funcret
  5971  001842                     __end_of_strlen:
  5972                           	opt stack 0
  5973                           tblptru	equ	0xFF8
  5974                           tblptrh	equ	0xFF7
  5975                           tblptrl	equ	0xFF6
  5976                           tablat	equ	0xFF5
  5977                           prodh	equ	0xFF4
  5978                           prodl	equ	0xFF3
  5979                           intcon	equ	0xFF2
  5980                           intcon2	equ	0xFF1
  5981                           postinc0	equ	0xFEE
  5982                           wreg	equ	0xFE8
  5983                           postdec1	equ	0xFE5
  5984                           fsr1l	equ	0xFE1
  5985                           indf2	equ	0xFDF
  5986                           postinc2	equ	0xFDE
  5987                           postdec2	equ	0xFDD
  5988                           fsr2h	equ	0xFDA
  5989                           fsr2l	equ	0xFD9
  5990                           status	equ	0xFD8
  5991                           
  5992 ;; *************** function _drawChar *****************
  5993 ;; Defined at:
  5994 ;;		line 447 in file "ST7735_TFT.c"
  5995 ;; Parameters:    Size  Location     Type
  5996 ;;  x               1    wreg     unsigned char 
  5997 ;;  y               1   45[COMRAM] unsigned char 
  5998 ;;  c               1   46[COMRAM] unsigned char 
  5999 ;;  color           2   47[COMRAM] unsigned int 
  6000 ;;  bg              2   49[COMRAM] unsigned int 
  6001 ;;  size            1   51[COMRAM] unsigned char 
  6002 ;; Auto vars:     Size  Location     Type
  6003 ;;  x               1   53[COMRAM] unsigned char 
  6004 ;;  line            1   52[COMRAM] unsigned char 
  6005 ;;  i               1   55[COMRAM] unsigned char 
  6006 ;;  j               1   54[COMRAM] unsigned char 
  6007 ;; Return value:  Size  Location     Type
  6008 ;;		None               void
  6009 ;; Registers used:
  6010 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6011 ;; Tracked objects:
  6012 ;;		On entry : 0/0
  6013 ;;		On exit  : 0/0
  6014 ;;		Unchanged: 0/0
  6015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6016 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6017 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6018 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6019 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6020 ;;Total ram usage:       11 bytes
  6021 ;; Hardware stack levels used:    1
  6022 ;; Hardware stack levels required when called:    8
  6023 ;; This function calls:
  6024 ;;		___wmul
  6025 ;;		_drawPixel
  6026 ;;		_fillRect
  6027 ;; This function is called by:
  6028 ;;		_drawtext
  6029 ;; This function uses a non-reentrant model
  6030 ;;
  6031                           
  6032                           	psect	text25
  6033  000A3C                     __ptext25:
  6034                           	opt stack 0
  6035  000A3C                     _drawChar:
  6036                           	opt stack 21
  6037                           
  6038                           ;incstack = 0
  6039                           ;drawChar@x stored from wreg
  6040  000A3C  6E36               	movwf	drawChar@x,c
  6041                           
  6042                           ;ST7735_TFT.c: 449: char i, j;
  6043                           ;ST7735_TFT.c: 450: if((x >= 128) || (y >= 160))
  6044  000A3E  0E80               	movlw	128
  6045  000A40  6036               	cpfslt	drawChar@x,c
  6046  000A42  D0A6               	goto	l337
  6047  000A44  0E9F               	movlw	159
  6048  000A46  642E               	cpfsgt	drawChar@y,c
  6049  000A48  D001               	goto	l4347
  6050                           
  6051                           ;ST7735_TFT.c: 451: return;
  6052  000A4A  D0A2               	goto	l337
  6053  000A4C                     l4347:
  6054                           
  6055                           ;ST7735_TFT.c: 452: if(size < 1) size = 1;
  6056  000A4C  5034               	movf	drawChar@size,w,c
  6057  000A4E  A4D8               	btfss	status,2,c
  6058  000A50  D003               	goto	l4351
  6059  000A52  0E01               	movlw	1
  6060  000A54  6E34               	movwf	drawChar@size,c
  6061  000A56  D000               	goto	l4351
  6062  000A58                     l4351:
  6063                           
  6064                           ;ST7735_TFT.c: 453: if((c < ' ') || (c > '~'))
  6065  000A58  0E1F               	movlw	31
  6066  000A5A  642F               	cpfsgt	drawChar@c,c
  6067  000A5C  D004               	goto	l4355
  6068  000A5E  0E7E               	movlw	126
  6069  000A60  642F               	cpfsgt	drawChar@c,c
  6070  000A62  D003               	goto	l339
  6071  000A64  D000               	goto	l4355
  6072  000A66                     l4355:
  6073                           
  6074                           ;ST7735_TFT.c: 454: c = '?';
  6075  000A66  0E3F               	movlw	63
  6076  000A68  6E2F               	movwf	drawChar@c,c
  6077  000A6A                     l339:
  6078                           
  6079                           ;ST7735_TFT.c: 455: for(i=0; i<5; i++ ) {
  6080  000A6A  0E00               	movlw	0
  6081  000A6C  6E38               	movwf	drawChar@i,c
  6082  000A6E                     l4357:
  6083  000A6E  0E04               	movlw	4
  6084  000A70  6438               	cpfsgt	drawChar@i,c
  6085  000A72  D001               	goto	l4361
  6086  000A74  D08D               	goto	l337
  6087  000A76                     l4361:
  6088                           
  6089                           ;ST7735_TFT.c: 456: unsigned char line;
  6090                           ;ST7735_TFT.c: 457: if(c < 'S')
  6091  000A76  0E53               	movlw	83
  6092  000A78  602F               	cpfslt	drawChar@c,c
  6093  000A7A  D015               	goto	l4365
  6094                           
  6095                           ;ST7735_TFT.c: 458: line = font[(c - 32)*5 + i];
  6096  000A7C  0EE0               	movlw	224
  6097  000A7E  242F               	addwf	drawChar@c,w,c
  6098  000A80  6E11               	movwf	___wmul@multiplier,c
  6099  000A82  6A12               	clrf	___wmul@multiplier+1,c
  6100  000A84  0EFF               	movlw	255
  6101  000A86  2212               	addwfc	___wmul@multiplier+1,f,c
  6102  000A88  0E00               	movlw	0
  6103  000A8A  6E14               	movwf	___wmul@multiplicand+1,c
  6104  000A8C  0E05               	movlw	5
  6105  000A8E  6E13               	movwf	___wmul@multiplicand,c
  6106  000A90  ECDB  F00C         	call	___wmul	;wreg free
  6107  000A94  5038               	movf	drawChar@i,w,c
  6108  000A96  2611               	addwf	?___wmul,f,c
  6109  000A98  0E00               	movlw	0
  6110  000A9A  2212               	addwfc	?___wmul+1,f,c
  6111  000A9C  0E49               	movlw	low _font
  6112  000A9E  2411               	addwf	?___wmul,w,c
  6113  000AA0  6EF6               	movwf	tblptrl,c
  6114  000AA2  0EFD               	movlw	high _font
  6115  000AA4  D014               	goto	L3
  6116  000AA6                     l4365:
  6117                           
  6118                           ;ST7735_TFT.c: 459: else
  6119                           ;ST7735_TFT.c: 460: line = font2[(c - 'S')*5 + i];
  6120  000AA6  0EAD               	movlw	173
  6121  000AA8  242F               	addwf	drawChar@c,w,c
  6122  000AAA  6E11               	movwf	___wmul@multiplier,c
  6123  000AAC  6A12               	clrf	___wmul@multiplier+1,c
  6124  000AAE  0EFF               	movlw	255
  6125  000AB0  2212               	addwfc	___wmul@multiplier+1,f,c
  6126  000AB2  0E00               	movlw	0
  6127  000AB4  6E14               	movwf	___wmul@multiplicand+1,c
  6128  000AB6  0E05               	movlw	5
  6129  000AB8  6E13               	movwf	___wmul@multiplicand,c
  6130  000ABA  ECDB  F00C         	call	___wmul	;wreg free
  6131  000ABE  5038               	movf	drawChar@i,w,c
  6132  000AC0  2611               	addwf	?___wmul,f,c
  6133  000AC2  0E00               	movlw	0
  6134  000AC4  2212               	addwfc	?___wmul+1,f,c
  6135  000AC6  0E48               	movlw	low _font2
  6136  000AC8  2411               	addwf	?___wmul,w,c
  6137  000ACA  6EF6               	movwf	tblptrl,c
  6138  000ACC  0EFE               	movlw	high _font2
  6139  000ACE                     L3:
  6140  000ACE  2012               	addwfc	?___wmul+1,w,c
  6141  000AD0  6EF7               	movwf	tblptrh,c
  6142  000AD2                     	if	0	;There are less than 3 active tblptr bytes
  6143  000AD2                     	endif
  6144  000AD2  0008               	tblrd		*
  6145  000AD4  CFF5 F035          	movff	tablat,drawChar@line
  6146  000AD8  D000               	goto	l4367
  6147  000ADA                     l4367:
  6148                           
  6149                           ;ST7735_TFT.c: 461: for(j=0; j<7; j++, line >>= 1) {
  6150  000ADA  0E00               	movlw	0
  6151  000ADC  6E37               	movwf	drawChar@j,c
  6152  000ADE                     l4369:
  6153  000ADE  0E06               	movlw	6
  6154  000AE0  6437               	cpfsgt	drawChar@j,c
  6155  000AE2  D001               	goto	l346
  6156  000AE4  D053               	goto	l4393
  6157  000AE6                     l346:
  6158                           
  6159                           ;ST7735_TFT.c: 462: if(line & 0x01) {
  6160  000AE6  A035               	btfss	drawChar@line,0,c
  6161  000AE8  D023               	goto	l4379
  6162                           
  6163                           ;ST7735_TFT.c: 463: if(size == 1) drawPixel(x+i, y+j, color);
  6164  000AEA  0434               	decf	drawChar@size,w,c
  6165  000AEC  A4D8               	btfss	status,2,c
  6166  000AEE  D00C               	goto	l4377
  6167  000AF0  502E               	movf	drawChar@y,w,c
  6168  000AF2  2437               	addwf	drawChar@j,w,c
  6169  000AF4  6E18               	movwf	drawPixel@y,c
  6170  000AF6  C030  F019         	movff	drawChar@color,drawPixel@color
  6171  000AFA  C031  F01A         	movff	drawChar@color+1,drawPixel@color+1
  6172  000AFE  5036               	movf	drawChar@x,w,c
  6173  000B00  2438               	addwf	drawChar@i,w,c
  6174  000B02  ECAE  F00C         	call	_drawPixel
  6175  000B06  D03E               	goto	l4387
  6176  000B08                     l4377:
  6177                           
  6178                           ;ST7735_TFT.c: 464: else fillRect(x+(i*size), y+(j*size), size, size, color);
  6179  000B08  5037               	movf	drawChar@j,w,c
  6180  000B0A  0234               	mulwf	drawChar@size,c
  6181  000B0C  50F3               	movf	prodl,w,c
  6182  000B0E  242E               	addwf	drawChar@y,w,c
  6183  000B10  6E23               	movwf	fillRect@y,c
  6184  000B12  C034  F024         	movff	drawChar@size,fillRect@w
  6185  000B16  C034  F025         	movff	drawChar@size,fillRect@h
  6186  000B1A  C030  F026         	movff	drawChar@color,fillRect@color
  6187  000B1E  C031  F027         	movff	drawChar@color+1,fillRect@color+1
  6188  000B22  5038               	movf	drawChar@i,w,c
  6189  000B24  0234               	mulwf	drawChar@size,c
  6190  000B26  50F3               	movf	prodl,w,c
  6191  000B28  2436               	addwf	drawChar@x,w,c
  6192  000B2A  EC72  F00B         	call	_fillRect
  6193                           
  6194                           ;ST7735_TFT.c: 465: }
  6195  000B2E  D02A               	goto	l4387
  6196  000B30                     l4379:
  6197                           
  6198                           ;ST7735_TFT.c: 466: else if(bg != color) {
  6199  000B30  5030               	movf	drawChar@color,w,c
  6200  000B32  1832               	xorwf	drawChar@bg,w,c
  6201  000B34  E104               	bnz	u2900
  6202  000B36  5031               	movf	drawChar@color+1,w,c
  6203  000B38  1833               	xorwf	drawChar@bg+1,w,c
  6204  000B3A  B4D8               	btfsc	status,2,c
  6205  000B3C  D023               	goto	l4387
  6206  000B3E                     u2900:
  6207                           
  6208                           ;ST7735_TFT.c: 467: if(size == 1) drawPixel(x+i, y+j, bg);
  6209  000B3E  0434               	decf	drawChar@size,w,c
  6210  000B40  A4D8               	btfss	status,2,c
  6211  000B42  D00C               	goto	l4385
  6212  000B44  502E               	movf	drawChar@y,w,c
  6213  000B46  2437               	addwf	drawChar@j,w,c
  6214  000B48  6E18               	movwf	drawPixel@y,c
  6215  000B4A  C032  F019         	movff	drawChar@bg,drawPixel@color
  6216  000B4E  C033  F01A         	movff	drawChar@bg+1,drawPixel@color+1
  6217  000B52  5036               	movf	drawChar@x,w,c
  6218  000B54  2438               	addwf	drawChar@i,w,c
  6219  000B56  ECAE  F00C         	call	_drawPixel
  6220  000B5A  D014               	goto	l4387
  6221  000B5C                     l4385:
  6222                           
  6223                           ;ST7735_TFT.c: 468: else fillRect(x+i*size, y+j*size, size, size, bg);
  6224  000B5C  5037               	movf	drawChar@j,w,c
  6225  000B5E  0234               	mulwf	drawChar@size,c
  6226  000B60  50F3               	movf	prodl,w,c
  6227  000B62  242E               	addwf	drawChar@y,w,c
  6228  000B64  6E23               	movwf	fillRect@y,c
  6229  000B66  C034  F024         	movff	drawChar@size,fillRect@w
  6230  000B6A  C034  F025         	movff	drawChar@size,fillRect@h
  6231  000B6E  C032  F026         	movff	drawChar@bg,fillRect@color
  6232  000B72  C033  F027         	movff	drawChar@bg+1,fillRect@color+1
  6233  000B76  5038               	movf	drawChar@i,w,c
  6234  000B78  0234               	mulwf	drawChar@size,c
  6235  000B7A  50F3               	movf	prodl,w,c
  6236  000B7C  2436               	addwf	drawChar@x,w,c
  6237  000B7E  EC72  F00B         	call	_fillRect
  6238  000B82  D000               	goto	l4387
  6239  000B84                     l4387:
  6240  000B84  2A37               	incf	drawChar@j,f,c
  6241  000B86  90D8               	bcf	status,0,c
  6242  000B88  3235               	rrcf	drawChar@line,f,c
  6243  000B8A  D7A9               	goto	l4369
  6244  000B8C                     l4393:
  6245  000B8C  2A38               	incf	drawChar@i,f,c
  6246  000B8E  D76F               	goto	l4357
  6247  000B90                     l337:
  6248  000B90  0012               	return		;funcret
  6249  000B92                     __end_of_drawChar:
  6250                           	opt stack 0
  6251                           tblptru	equ	0xFF8
  6252                           tblptrh	equ	0xFF7
  6253                           tblptrl	equ	0xFF6
  6254                           tablat	equ	0xFF5
  6255                           prodh	equ	0xFF4
  6256                           prodl	equ	0xFF3
  6257                           intcon	equ	0xFF2
  6258                           intcon2	equ	0xFF1
  6259                           postinc0	equ	0xFEE
  6260                           wreg	equ	0xFE8
  6261                           postdec1	equ	0xFE5
  6262                           fsr1l	equ	0xFE1
  6263                           indf2	equ	0xFDF
  6264                           postinc2	equ	0xFDE
  6265                           postdec2	equ	0xFDD
  6266                           fsr2h	equ	0xFDA
  6267                           fsr2l	equ	0xFD9
  6268                           status	equ	0xFD8
  6269                           
  6270 ;; *************** function _fillRect *****************
  6271 ;; Defined at:
  6272 ;;		line 437 in file "ST7735_TFT.c"
  6273 ;; Parameters:    Size  Location     Type
  6274 ;;  x               1    wreg     unsigned char 
  6275 ;;  y               1   34[COMRAM] unsigned char 
  6276 ;;  w               1   35[COMRAM] unsigned char 
  6277 ;;  h               1   36[COMRAM] unsigned char 
  6278 ;;  color           2   37[COMRAM] unsigned int 
  6279 ;; Auto vars:     Size  Location     Type
  6280 ;;  x               1   42[COMRAM] unsigned char 
  6281 ;;  i               2   43[COMRAM] int 
  6282 ;; Return value:  Size  Location     Type
  6283 ;;		None               void
  6284 ;; Registers used:
  6285 ;;		wreg, status,2, status,0, cstack
  6286 ;; Tracked objects:
  6287 ;;		On entry : 0/0
  6288 ;;		On exit  : 0/0
  6289 ;;		Unchanged: 0/0
  6290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6291 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6292 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6293 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6294 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6295 ;;Total ram usage:       11 bytes
  6296 ;; Hardware stack levels used:    1
  6297 ;; Hardware stack levels required when called:    7
  6298 ;; This function calls:
  6299 ;;		_drawFastVLine
  6300 ;; This function is called by:
  6301 ;;		_drawChar
  6302 ;; This function uses a non-reentrant model
  6303 ;;
  6304                           
  6305                           	psect	text26
  6306  0016E4                     __ptext26:
  6307                           	opt stack 0
  6308  0016E4                     _fillRect:
  6309                           	opt stack 21
  6310                           
  6311                           ;incstack = 0
  6312                           ;fillRect@x stored from wreg
  6313  0016E4  6E2B               	movwf	fillRect@x,c
  6314                           
  6315                           ;ST7735_TFT.c: 439: signed int i;
  6316                           ;ST7735_TFT.c: 441: for (i = x; i < x + w; i++)
  6317  0016E6  C02B  F02C         	movff	fillRect@x,fillRect@i
  6318  0016EA  6A2D               	clrf	fillRect@i+1,c
  6319  0016EC  D00E               	goto	l4209
  6320  0016EE                     l4205:
  6321                           
  6322                           ;ST7735_TFT.c: 442: {
  6323                           ;ST7735_TFT.c: 443: drawFastVLine(i, y, h, color);
  6324  0016EE  C023  F018         	movff	fillRect@y,drawFastVLine@y
  6325  0016F2  C025  F019         	movff	fillRect@h,drawFastVLine@h
  6326  0016F6  C026  F01A         	movff	fillRect@color,drawFastVLine@color
  6327  0016FA  C027  F01B         	movff	fillRect@color+1,drawFastVLine@color+1
  6328  0016FE  502C               	movf	fillRect@i,w,c
  6329  001700  EC37  F009         	call	_drawFastVLine
  6330  001704  4A2C               	infsnz	fillRect@i,f,c
  6331  001706  2A2D               	incf	fillRect@i+1,f,c
  6332  001708  D000               	goto	l4209
  6333  00170A                     l4209:
  6334  00170A  5024               	movf	fillRect@w,w,c
  6335  00170C  C02B  F028         	movff	fillRect@x,??_fillRect
  6336  001710  6A29               	clrf	(??_fillRect+1)& (0+255),c
  6337  001712  2628               	addwf	??_fillRect,f,c
  6338  001714  0E00               	movlw	0
  6339  001716  2229               	addwfc	??_fillRect+1,f,c
  6340  001718  5028               	movf	??_fillRect,w,c
  6341  00171A  5C2C               	subwf	fillRect@i,w,c
  6342  00171C  502D               	movf	fillRect@i+1,w,c
  6343  00171E  0A80               	xorlw	128
  6344  001720  6E2A               	movwf	(??_fillRect+2)& (0+255),c
  6345  001722  5029               	movf	??_fillRect+1,w,c
  6346  001724  0A80               	xorlw	128
  6347  001726  582A               	subwfb	(??_fillRect+2)& (0+255),w,c
  6348  001728  A0D8               	btfss	status,0,c
  6349  00172A  D7E1               	goto	l4205
  6350  00172C  0012               	return		;funcret
  6351  00172E                     __end_of_fillRect:
  6352                           	opt stack 0
  6353                           tblptru	equ	0xFF8
  6354                           tblptrh	equ	0xFF7
  6355                           tblptrl	equ	0xFF6
  6356                           tablat	equ	0xFF5
  6357                           prodh	equ	0xFF4
  6358                           prodl	equ	0xFF3
  6359                           intcon	equ	0xFF2
  6360                           intcon2	equ	0xFF1
  6361                           postinc0	equ	0xFEE
  6362                           wreg	equ	0xFE8
  6363                           postdec1	equ	0xFE5
  6364                           fsr1l	equ	0xFE1
  6365                           indf2	equ	0xFDF
  6366                           postinc2	equ	0xFDE
  6367                           postdec2	equ	0xFDD
  6368                           fsr2h	equ	0xFDA
  6369                           fsr2l	equ	0xFD9
  6370                           status	equ	0xFD8
  6371                           
  6372 ;; *************** function _drawFastVLine *****************
  6373 ;; Defined at:
  6374 ;;		line 416 in file "ST7735_TFT.c"
  6375 ;; Parameters:    Size  Location     Type
  6376 ;;  x               1    wreg     unsigned char 
  6377 ;;  y               1   23[COMRAM] unsigned char 
  6378 ;;  h               1   24[COMRAM] unsigned char 
  6379 ;;  color           2   25[COMRAM] unsigned int 
  6380 ;; Auto vars:     Size  Location     Type
  6381 ;;  x               1   33[COMRAM] unsigned char 
  6382 ;;  lo              1   32[COMRAM] unsigned char 
  6383 ;;  hi              1   31[COMRAM] unsigned char 
  6384 ;; Return value:  Size  Location     Type
  6385 ;;		None               void
  6386 ;; Registers used:
  6387 ;;		wreg, status,2, status,0, cstack
  6388 ;; Tracked objects:
  6389 ;;		On entry : 0/0
  6390 ;;		On exit  : 0/0
  6391 ;;		Unchanged: 0/0
  6392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6393 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6394 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6395 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6396 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6397 ;;Total ram usage:       11 bytes
  6398 ;; Hardware stack levels used:    1
  6399 ;; Hardware stack levels required when called:    6
  6400 ;; This function calls:
  6401 ;;		_setAddrWindow
  6402 ;;		_spiwrite
  6403 ;; This function is called by:
  6404 ;;		_fillRect
  6405 ;;		_fillCircleHelper
  6406 ;;		_fillCircle
  6407 ;;		_drawRect
  6408 ;; This function uses a non-reentrant model
  6409 ;;
  6410                           
  6411                           	psect	text27
  6412  00126E                     __ptext27:
  6413                           	opt stack 0
  6414  00126E                     _drawFastVLine:
  6415                           	opt stack 22
  6416                           
  6417                           ;incstack = 0
  6418                           ;drawFastVLine@x stored from wreg
  6419  00126E  6E22               	movwf	drawFastVLine@x,c
  6420                           
  6421                           ;ST7735_TFT.c: 418: unsigned char hi, lo;
  6422                           ;ST7735_TFT.c: 419: if((x >= 128) || (y >= 160))
  6423  001270  0E80               	movlw	128
  6424  001272  6022               	cpfslt	drawFastVLine@x,c
  6425  001274  D03F               	goto	l321
  6426  001276  0E9F               	movlw	159
  6427  001278  6418               	cpfsgt	drawFastVLine@y,c
  6428  00127A  D001               	goto	l4145
  6429                           
  6430                           ;ST7735_TFT.c: 420: return;
  6431  00127C  D03B               	goto	l321
  6432  00127E                     l4145:
  6433                           
  6434                           ;ST7735_TFT.c: 421: if((y + h - 1) >= 160)
  6435  00127E  0EFF               	movlw	255
  6436  001280  6E1C               	movwf	??_drawFastVLine& (0+255),c
  6437  001282  0EFF               	movlw	255
  6438  001284  6E1D               	movwf	(??_drawFastVLine+1)& (0+255),c
  6439  001286  5019               	movf	drawFastVLine@h,w,c
  6440  001288  C018  F01E         	movff	drawFastVLine@y,??_drawFastVLine+2
  6441  00128C  6A1F               	clrf	(??_drawFastVLine+3)& (0+255),c
  6442  00128E  261E               	addwf	??_drawFastVLine+2,f,c
  6443  001290  0E00               	movlw	0
  6444  001292  221F               	addwfc	??_drawFastVLine+3,f,c
  6445  001294  501C               	movf	??_drawFastVLine,w,c
  6446  001296  261E               	addwf	??_drawFastVLine+2,f,c
  6447  001298  501D               	movf	??_drawFastVLine+1,w,c
  6448  00129A  221F               	addwfc	??_drawFastVLine+3,f,c
  6449  00129C  BE1F               	btfsc	??_drawFastVLine+3,7,c
  6450  00129E  D00B               	goto	l4149
  6451  0012A0  501F               	movf	??_drawFastVLine+3,w,c
  6452  0012A2  E104               	bnz	u2710
  6453  0012A4  0EA0               	movlw	160
  6454  0012A6  5C1E               	subwf	??_drawFastVLine+2,w,c
  6455  0012A8  A0D8               	btfss	status,0,c
  6456  0012AA  D005               	goto	l4149
  6457  0012AC                     u2710:
  6458                           
  6459                           ;ST7735_TFT.c: 422: h = 160 - y;
  6460  0012AC  5018               	movf	drawFastVLine@y,w,c
  6461  0012AE  0800               	sublw	0
  6462  0012B0  0FA0               	addlw	160
  6463  0012B2  6E19               	movwf	drawFastVLine@h,c
  6464  0012B4  D000               	goto	l4149
  6465  0012B6                     l4149:
  6466                           
  6467                           ;ST7735_TFT.c: 423: hi = color >> 8; lo = color;
  6468  0012B6  501B               	movf	drawFastVLine@color+1,w,c
  6469  0012B8  6E20               	movwf	drawFastVLine@hi,c
  6470  0012BA  C01A  F021         	movff	drawFastVLine@color,drawFastVLine@lo
  6471                           
  6472                           ;ST7735_TFT.c: 424: setAddrWindow(x, y, x, y + h - 1);
  6473  0012BE  C018  F014         	movff	drawFastVLine@y,setAddrWindow@y0
  6474  0012C2  C022  F015         	movff	drawFastVLine@x,setAddrWindow@x1
  6475  0012C6  5018               	movf	drawFastVLine@y,w,c
  6476  0012C8  2419               	addwf	drawFastVLine@h,w,c
  6477  0012CA  6E1C               	movwf	??_drawFastVLine& (0+255),c
  6478  0012CC  041C               	decf	??_drawFastVLine,w,c
  6479  0012CE  6E16               	movwf	setAddrWindow@y1,c
  6480  0012D0  5022               	movf	drawFastVLine@x,w,c
  6481  0012D2  EC4B  F00B         	call	_setAddrWindow
  6482                           
  6483                           ;ST7735_TFT.c: 425: PORTDbits.RD0 = 1;
  6484  0012D6  8083               	bsf	3971,0,c	;volatile
  6485                           
  6486                           ;ST7735_TFT.c: 426: PORTDbits.RD1 = 0;
  6487  0012D8  9283               	bcf	3971,1,c	;volatile
  6488                           
  6489                           ;ST7735_TFT.c: 428: while (h--) {
  6490  0012DA  D007               	goto	l4161
  6491  0012DC                     l4159:
  6492                           
  6493                           ;ST7735_TFT.c: 429: spiwrite(hi);
  6494  0012DC  5020               	movf	drawFastVLine@hi,w,c
  6495  0012DE  EC68  F00D         	call	_spiwrite
  6496                           
  6497                           ;ST7735_TFT.c: 430: spiwrite(lo);
  6498  0012E2  5021               	movf	drawFastVLine@lo,w,c
  6499  0012E4  EC68  F00D         	call	_spiwrite
  6500  0012E8  D000               	goto	l4161
  6501  0012EA                     l4161:
  6502  0012EA  0619               	decf	drawFastVLine@h,f,c
  6503  0012EC  2819               	incf	drawFastVLine@h,w,c
  6504  0012EE  A4D8               	btfss	status,2,c
  6505  0012F0  D7F5               	goto	l4159
  6506                           
  6507                           ;ST7735_TFT.c: 431: }
  6508                           ;ST7735_TFT.c: 432: PORTDbits.RD1 = 1;
  6509  0012F2  8283               	bsf	3971,1,c	;volatile
  6510  0012F4                     l321:
  6511  0012F4  0012               	return		;funcret
  6512  0012F6                     __end_of_drawFastVLine:
  6513                           	opt stack 0
  6514                           tblptru	equ	0xFF8
  6515                           tblptrh	equ	0xFF7
  6516                           tblptrl	equ	0xFF6
  6517                           tablat	equ	0xFF5
  6518                           prodh	equ	0xFF4
  6519                           prodl	equ	0xFF3
  6520                           intcon	equ	0xFF2
  6521                           intcon2	equ	0xFF1
  6522                           postinc0	equ	0xFEE
  6523                           wreg	equ	0xFE8
  6524                           postdec1	equ	0xFE5
  6525                           fsr1l	equ	0xFE1
  6526                           indf2	equ	0xFDF
  6527                           postinc2	equ	0xFDE
  6528                           postdec2	equ	0xFDD
  6529                           fsr2h	equ	0xFDA
  6530                           fsr2l	equ	0xFD9
  6531                           status	equ	0xFD8
  6532                           
  6533 ;; *************** function _drawPixel *****************
  6534 ;; Defined at:
  6535 ;;		line 407 in file "ST7735_TFT.c"
  6536 ;; Parameters:    Size  Location     Type
  6537 ;;  x               1    wreg     unsigned char 
  6538 ;;  y               1   23[COMRAM] unsigned char 
  6539 ;;  color           2   24[COMRAM] unsigned int 
  6540 ;; Auto vars:     Size  Location     Type
  6541 ;;  x               1   26[COMRAM] unsigned char 
  6542 ;; Return value:  Size  Location     Type
  6543 ;;		None               void
  6544 ;; Registers used:
  6545 ;;		wreg, status,2, status,0, cstack
  6546 ;; Tracked objects:
  6547 ;;		On entry : 0/0
  6548 ;;		On exit  : 0/0
  6549 ;;		Unchanged: 0/0
  6550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6551 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6552 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6553 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6554 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6555 ;;Total ram usage:        4 bytes
  6556 ;; Hardware stack levels used:    1
  6557 ;; Hardware stack levels required when called:    6
  6558 ;; This function calls:
  6559 ;;		_setAddrWindow
  6560 ;;		_write_data
  6561 ;; This function is called by:
  6562 ;;		_drawChar
  6563 ;;		_drawCircle
  6564 ;;		_drawCircleHelper
  6565 ;; This function uses a non-reentrant model
  6566 ;;
  6567                           
  6568                           	psect	text28
  6569  00195C                     __ptext28:
  6570                           	opt stack 0
  6571  00195C                     _drawPixel:
  6572                           	opt stack 22
  6573                           
  6574                           ;incstack = 0
  6575                           ;drawPixel@x stored from wreg
  6576  00195C  6E1B               	movwf	drawPixel@x,c
  6577                           
  6578                           ;ST7735_TFT.c: 409: if((x >= 128) || (y >= 160))
  6579  00195E  0E80               	movlw	128
  6580  001960  601B               	cpfslt	drawPixel@x,c
  6581  001962  D013               	goto	l315
  6582  001964  0E9F               	movlw	159
  6583  001966  6418               	cpfsgt	drawPixel@y,c
  6584  001968  D001               	goto	l4197
  6585                           
  6586                           ;ST7735_TFT.c: 410: return;
  6587  00196A  D00F               	goto	l315
  6588  00196C                     l4197:
  6589                           
  6590                           ;ST7735_TFT.c: 411: setAddrWindow(x,y,x+1,y+1);
  6591  00196C  C018  F014         	movff	drawPixel@y,setAddrWindow@y0
  6592  001970  281B               	incf	drawPixel@x,w,c
  6593  001972  6E15               	movwf	setAddrWindow@x1,c
  6594  001974  2818               	incf	drawPixel@y,w,c
  6595  001976  6E16               	movwf	setAddrWindow@y1,c
  6596  001978  501B               	movf	drawPixel@x,w,c
  6597  00197A  EC4B  F00B         	call	_setAddrWindow
  6598                           
  6599                           ;ST7735_TFT.c: 412: write_data(color >> 8);
  6600  00197E  501A               	movf	drawPixel@color+1,w,c
  6601  001980  EC9F  F00D         	call	_write_data
  6602                           
  6603                           ;ST7735_TFT.c: 413: write_data(color & 0xFF);
  6604  001984  5019               	movf	drawPixel@color,w,c
  6605  001986  EC9F  F00D         	call	_write_data
  6606  00198A                     l315:
  6607  00198A  0012               	return		;funcret
  6608  00198C                     __end_of_drawPixel:
  6609                           	opt stack 0
  6610                           tblptru	equ	0xFF8
  6611                           tblptrh	equ	0xFF7
  6612                           tblptrl	equ	0xFF6
  6613                           tablat	equ	0xFF5
  6614                           prodh	equ	0xFF4
  6615                           prodl	equ	0xFF3
  6616                           intcon	equ	0xFF2
  6617                           intcon2	equ	0xFF1
  6618                           postinc0	equ	0xFEE
  6619                           wreg	equ	0xFE8
  6620                           postdec1	equ	0xFE5
  6621                           fsr1l	equ	0xFE1
  6622                           indf2	equ	0xFDF
  6623                           postinc2	equ	0xFDE
  6624                           postdec2	equ	0xFDD
  6625                           fsr2h	equ	0xFDA
  6626                           fsr2l	equ	0xFD9
  6627                           status	equ	0xFD8
  6628                           
  6629 ;; *************** function _setAddrWindow *****************
  6630 ;; Defined at:
  6631 ;;		line 392 in file "ST7735_TFT.c"
  6632 ;; Parameters:    Size  Location     Type
  6633 ;;  x0              1    wreg     unsigned char 
  6634 ;;  y0              1   19[COMRAM] unsigned char 
  6635 ;;  x1              1   20[COMRAM] unsigned char 
  6636 ;;  y1              1   21[COMRAM] unsigned char 
  6637 ;; Auto vars:     Size  Location     Type
  6638 ;;  x0              1   22[COMRAM] unsigned char 
  6639 ;; Return value:  Size  Location     Type
  6640 ;;		None               void
  6641 ;; Registers used:
  6642 ;;		wreg, status,2, status,0, cstack
  6643 ;; Tracked objects:
  6644 ;;		On entry : 0/0
  6645 ;;		On exit  : 0/0
  6646 ;;		Unchanged: 0/0
  6647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6648 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6649 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6650 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6651 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6652 ;;Total ram usage:        4 bytes
  6653 ;; Hardware stack levels used:    1
  6654 ;; Hardware stack levels required when called:    5
  6655 ;; This function calls:
  6656 ;;		_write_command
  6657 ;;		_write_data
  6658 ;; This function is called by:
  6659 ;;		_drawPixel
  6660 ;;		_drawFastVLine
  6661 ;;		_fillRectangle
  6662 ;;		_drawFastHLine
  6663 ;; This function uses a non-reentrant model
  6664 ;;
  6665                           
  6666                           	psect	text29
  6667  001696                     __ptext29:
  6668                           	opt stack 0
  6669  001696                     _setAddrWindow:
  6670                           	opt stack 22
  6671                           
  6672                           ;incstack = 0
  6673                           ;setAddrWindow@x0 stored from wreg
  6674  001696  6E17               	movwf	setAddrWindow@x0,c
  6675                           
  6676                           ;ST7735_TFT.c: 394: write_command(0x2A);
  6677  001698  0E2A               	movlw	42
  6678  00169A  ECA7  F00D         	call	_write_command
  6679                           
  6680                           ;ST7735_TFT.c: 395: write_data(0);
  6681  00169E  0E00               	movlw	0
  6682  0016A0  EC9F  F00D         	call	_write_data
  6683                           
  6684                           ;ST7735_TFT.c: 396: write_data(x0 + colstart);
  6685  0016A4  5017               	movf	setAddrWindow@x0,w,c
  6686  0016A6  2457               	addwf	_colstart,w,c
  6687  0016A8  EC9F  F00D         	call	_write_data
  6688                           
  6689                           ;ST7735_TFT.c: 397: write_data(0);
  6690  0016AC  0E00               	movlw	0
  6691  0016AE  EC9F  F00D         	call	_write_data
  6692                           
  6693                           ;ST7735_TFT.c: 398: write_data(x1 + colstart);
  6694  0016B2  5015               	movf	setAddrWindow@x1,w,c
  6695  0016B4  2457               	addwf	_colstart,w,c
  6696  0016B6  EC9F  F00D         	call	_write_data
  6697                           
  6698                           ;ST7735_TFT.c: 399: write_command(0x2B);
  6699  0016BA  0E2B               	movlw	43
  6700  0016BC  ECA7  F00D         	call	_write_command
  6701                           
  6702                           ;ST7735_TFT.c: 400: write_data(0);
  6703  0016C0  0E00               	movlw	0
  6704  0016C2  EC9F  F00D         	call	_write_data
  6705                           
  6706                           ;ST7735_TFT.c: 401: write_data(y0 + rowstart);
  6707  0016C6  5014               	movf	setAddrWindow@y0,w,c
  6708  0016C8  2460               	addwf	_rowstart,w,c
  6709  0016CA  EC9F  F00D         	call	_write_data
  6710                           
  6711                           ;ST7735_TFT.c: 402: write_data(0);
  6712  0016CE  0E00               	movlw	0
  6713  0016D0  EC9F  F00D         	call	_write_data
  6714                           
  6715                           ;ST7735_TFT.c: 403: write_data(y1 + rowstart);
  6716  0016D4  5016               	movf	setAddrWindow@y1,w,c
  6717  0016D6  2460               	addwf	_rowstart,w,c
  6718  0016D8  EC9F  F00D         	call	_write_data
  6719                           
  6720                           ;ST7735_TFT.c: 404: write_command(0x2C);
  6721  0016DC  0E2C               	movlw	44
  6722  0016DE  ECA7  F00D         	call	_write_command
  6723  0016E2  0012               	return		;funcret
  6724  0016E4                     __end_of_setAddrWindow:
  6725                           	opt stack 0
  6726                           tblptru	equ	0xFF8
  6727                           tblptrh	equ	0xFF7
  6728                           tblptrl	equ	0xFF6
  6729                           tablat	equ	0xFF5
  6730                           prodh	equ	0xFF4
  6731                           prodl	equ	0xFF3
  6732                           intcon	equ	0xFF2
  6733                           intcon2	equ	0xFF1
  6734                           postinc0	equ	0xFEE
  6735                           wreg	equ	0xFE8
  6736                           postdec1	equ	0xFE5
  6737                           fsr1l	equ	0xFE1
  6738                           indf2	equ	0xFDF
  6739                           postinc2	equ	0xFDE
  6740                           postdec2	equ	0xFDD
  6741                           fsr2h	equ	0xFDA
  6742                           fsr2l	equ	0xFD9
  6743                           status	equ	0xFD8
  6744                           
  6745 ;; *************** function _TFT_GreenTab_Initialize *****************
  6746 ;; Defined at:
  6747 ;;		line 644 in file "ST7735_TFT.c"
  6748 ;; Parameters:    Size  Location     Type
  6749 ;;		None
  6750 ;; Auto vars:     Size  Location     Type
  6751 ;;		None
  6752 ;; Return value:  Size  Location     Type
  6753 ;;		None               void
  6754 ;; Registers used:
  6755 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6756 ;; Tracked objects:
  6757 ;;		On entry : 0/0
  6758 ;;		On exit  : 0/0
  6759 ;;		Unchanged: 0/0
  6760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6761 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6762 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6763 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6764 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6765 ;;Total ram usage:        0 bytes
  6766 ;; Hardware stack levels used:    1
  6767 ;; Hardware stack levels required when called:    6
  6768 ;; This function calls:
  6769 ;;		_Rcmd1
  6770 ;;		_Rcmd2red
  6771 ;;		_Rcmd3
  6772 ;;		_write_command
  6773 ;;		_write_data
  6774 ;; This function is called by:
  6775 ;;		_Initialize_Screen
  6776 ;; This function uses a non-reentrant model
  6777 ;;
  6778                           
  6779                           	psect	text30
  6780  00198C                     __ptext30:
  6781                           	opt stack 0
  6782  00198C                     _TFT_GreenTab_Initialize:
  6783                           	opt stack 22
  6784                           
  6785                           ;ST7735_TFT.c: 646: PORTDbits.RD1 = 1;
  6786                           
  6787                           ;incstack = 0
  6788  00198C  8283               	bsf	3971,1,c	;volatile
  6789                           
  6790                           ;ST7735_TFT.c: 647: PORTDbits.RD0 = 0;
  6791  00198E  9083               	bcf	3971,0,c	;volatile
  6792                           
  6793                           ;ST7735_TFT.c: 649: SSPSTAT=0x80;
  6794  001990  0E80               	movlw	128
  6795  001992  6EC7               	movwf	4039,c	;volatile
  6796                           
  6797                           ;ST7735_TFT.c: 650: SSPCON1=0x30;
  6798  001994  0E30               	movlw	48
  6799  001996  6EC6               	movwf	4038,c	;volatile
  6800                           
  6801                           ;ST7735_TFT.c: 653: Rcmd1();
  6802  001998  ECF0  F006         	call	_Rcmd1	;wreg free
  6803                           
  6804                           ;ST7735_TFT.c: 654: Rcmd2red();
  6805  00199C  EC21  F00C         	call	_Rcmd2red	;wreg free
  6806                           
  6807                           ;ST7735_TFT.c: 655: Rcmd3();
  6808  0019A0  EC78  F007         	call	_Rcmd3	;wreg free
  6809                           
  6810                           ;ST7735_TFT.c: 656: write_command(0x36);
  6811  0019A4  0E36               	movlw	54
  6812  0019A6  ECA7  F00D         	call	_write_command
  6813                           
  6814                           ;ST7735_TFT.c: 657: write_data(0xC0);
  6815  0019AA  0EC0               	movlw	192
  6816  0019AC  EC9F  F00D         	call	_write_data
  6817                           
  6818                           ;ST7735_TFT.c: 658: _tft_type = 1;
  6819  0019B0  0E01               	movlw	1
  6820  0019B2  6E51               	movwf	__tft_type,c
  6821  0019B4  0012               	return		;funcret
  6822  0019B6                     __end_of_TFT_GreenTab_Initialize:
  6823                           	opt stack 0
  6824                           tblptru	equ	0xFF8
  6825                           tblptrh	equ	0xFF7
  6826                           tblptrl	equ	0xFF6
  6827                           tablat	equ	0xFF5
  6828                           prodh	equ	0xFF4
  6829                           prodl	equ	0xFF3
  6830                           intcon	equ	0xFF2
  6831                           intcon2	equ	0xFF1
  6832                           postinc0	equ	0xFEE
  6833                           wreg	equ	0xFE8
  6834                           postdec1	equ	0xFE5
  6835                           fsr1l	equ	0xFE1
  6836                           indf2	equ	0xFDF
  6837                           postinc2	equ	0xFDE
  6838                           postdec2	equ	0xFDD
  6839                           fsr2h	equ	0xFDA
  6840                           fsr2l	equ	0xFD9
  6841                           status	equ	0xFD8
  6842                           
  6843 ;; *************** function _Rcmd3 *****************
  6844 ;; Defined at:
  6845 ;;		line 338 in file "ST7735_TFT.c"
  6846 ;; Parameters:    Size  Location     Type
  6847 ;;		None
  6848 ;; Auto vars:     Size  Location     Type
  6849 ;;		None
  6850 ;; Return value:  Size  Location     Type
  6851 ;;		None               void
  6852 ;; Registers used:
  6853 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6854 ;; Tracked objects:
  6855 ;;		On entry : 0/0
  6856 ;;		On exit  : 0/0
  6857 ;;		Unchanged: 0/0
  6858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6859 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6860 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6861 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6862 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6863 ;;Total ram usage:        0 bytes
  6864 ;; Hardware stack levels used:    1
  6865 ;; Hardware stack levels required when called:    5
  6866 ;; This function calls:
  6867 ;;		_delay_ms
  6868 ;;		_write_command
  6869 ;;		_write_data
  6870 ;; This function is called by:
  6871 ;;		_TFT_GreenTab_Initialize
  6872 ;;		_TFT_BlackTab_Initialize
  6873 ;; This function uses a non-reentrant model
  6874 ;;
  6875                           
  6876                           	psect	text31
  6877  000EF0                     __ptext31:
  6878                           	opt stack 0
  6879  000EF0                     _Rcmd3:
  6880                           	opt stack 22
  6881                           
  6882                           ;ST7735_TFT.c: 340: write_command(0xE0);
  6883                           
  6884                           ;incstack = 0
  6885  000EF0  0EE0               	movlw	224
  6886  000EF2  ECA7  F00D         	call	_write_command
  6887                           
  6888                           ;ST7735_TFT.c: 341: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
  6889  000EF6  0E02               	movlw	2
  6890  000EF8  EC9F  F00D         	call	_write_data
  6891  000EFC  0E1C               	movlw	28
  6892  000EFE  EC9F  F00D         	call	_write_data
  6893  000F02  0E07               	movlw	7
  6894  000F04  EC9F  F00D         	call	_write_data
  6895  000F08  0E12               	movlw	18
  6896  000F0A  EC9F  F00D         	call	_write_data
  6897                           
  6898                           ;ST7735_TFT.c: 342: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
  6899  000F0E  0E37               	movlw	55
  6900  000F10  EC9F  F00D         	call	_write_data
  6901  000F14  0E32               	movlw	50
  6902  000F16  EC9F  F00D         	call	_write_data
  6903  000F1A  0E29               	movlw	41
  6904  000F1C  EC9F  F00D         	call	_write_data
  6905  000F20  0E2D               	movlw	45
  6906  000F22  EC9F  F00D         	call	_write_data
  6907                           
  6908                           ;ST7735_TFT.c: 343: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
  6909  000F26  0E29               	movlw	41
  6910  000F28  EC9F  F00D         	call	_write_data
  6911  000F2C  0E25               	movlw	37
  6912  000F2E  EC9F  F00D         	call	_write_data
  6913  000F32  0E2B               	movlw	43
  6914  000F34  EC9F  F00D         	call	_write_data
  6915  000F38  0E39               	movlw	57
  6916  000F3A  EC9F  F00D         	call	_write_data
  6917                           
  6918                           ;ST7735_TFT.c: 344: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
  6919  000F3E  0E00               	movlw	0
  6920  000F40  EC9F  F00D         	call	_write_data
  6921  000F44  0E01               	movlw	1
  6922  000F46  EC9F  F00D         	call	_write_data
  6923  000F4A  0E03               	movlw	3
  6924  000F4C  EC9F  F00D         	call	_write_data
  6925  000F50  0E10               	movlw	16
  6926  000F52  EC9F  F00D         	call	_write_data
  6927                           
  6928                           ;ST7735_TFT.c: 345: write_command(0xE1);
  6929  000F56  0EE1               	movlw	225
  6930  000F58  ECA7  F00D         	call	_write_command
  6931                           
  6932                           ;ST7735_TFT.c: 346: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
  6933  000F5C  0E03               	movlw	3
  6934  000F5E  EC9F  F00D         	call	_write_data
  6935  000F62  0E1D               	movlw	29
  6936  000F64  EC9F  F00D         	call	_write_data
  6937  000F68  0E07               	movlw	7
  6938  000F6A  EC9F  F00D         	call	_write_data
  6939  000F6E  0E06               	movlw	6
  6940  000F70  EC9F  F00D         	call	_write_data
  6941                           
  6942                           ;ST7735_TFT.c: 347: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
  6943  000F74  0E2E               	movlw	46
  6944  000F76  EC9F  F00D         	call	_write_data
  6945  000F7A  0E2C               	movlw	44
  6946  000F7C  EC9F  F00D         	call	_write_data
  6947  000F80  0E29               	movlw	41
  6948  000F82  EC9F  F00D         	call	_write_data
  6949  000F86  0E2D               	movlw	45
  6950  000F88  EC9F  F00D         	call	_write_data
  6951                           
  6952                           ;ST7735_TFT.c: 348: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
  6953  000F8C  0E2E               	movlw	46
  6954  000F8E  EC9F  F00D         	call	_write_data
  6955  000F92  0E2E               	movlw	46
  6956  000F94  EC9F  F00D         	call	_write_data
  6957  000F98  0E37               	movlw	55
  6958  000F9A  EC9F  F00D         	call	_write_data
  6959  000F9E  0E3F               	movlw	63
  6960  000FA0  EC9F  F00D         	call	_write_data
  6961                           
  6962                           ;ST7735_TFT.c: 349: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
  6963  000FA4  0E00               	movlw	0
  6964  000FA6  EC9F  F00D         	call	_write_data
  6965  000FAA  0E00               	movlw	0
  6966  000FAC  EC9F  F00D         	call	_write_data
  6967  000FB0  0E02               	movlw	2
  6968  000FB2  EC9F  F00D         	call	_write_data
  6969  000FB6  0E10               	movlw	16
  6970  000FB8  EC9F  F00D         	call	_write_data
  6971                           
  6972                           ;ST7735_TFT.c: 350: write_command(0x13);
  6973  000FBC  0E13               	movlw	19
  6974  000FBE  ECA7  F00D         	call	_write_command
  6975                           
  6976                           ;ST7735_TFT.c: 351: delay_ms(10);
  6977  000FC2  0E00               	movlw	0
  6978  000FC4  6E18               	movwf	delay_ms@ms+1,c
  6979  000FC6  0E0A               	movlw	10
  6980  000FC8  6E17               	movwf	delay_ms@ms,c
  6981  000FCA  EC22  F00B         	call	_delay_ms	;wreg free
  6982                           
  6983                           ;ST7735_TFT.c: 352: write_command(0x29);
  6984  000FCE  0E29               	movlw	41
  6985  000FD0  ECA7  F00D         	call	_write_command
  6986                           
  6987                           ;ST7735_TFT.c: 353: delay_ms(100);
  6988  000FD4  0E00               	movlw	0
  6989  000FD6  6E18               	movwf	delay_ms@ms+1,c
  6990  000FD8  0E64               	movlw	100
  6991  000FDA  6E17               	movwf	delay_ms@ms,c
  6992  000FDC  EC22  F00B         	call	_delay_ms	;wreg free
  6993  000FE0  0012               	return		;funcret
  6994  000FE2                     __end_of_Rcmd3:
  6995                           	opt stack 0
  6996                           tblptru	equ	0xFF8
  6997                           tblptrh	equ	0xFF7
  6998                           tblptrl	equ	0xFF6
  6999                           tablat	equ	0xFF5
  7000                           prodh	equ	0xFF4
  7001                           prodl	equ	0xFF3
  7002                           intcon	equ	0xFF2
  7003                           intcon2	equ	0xFF1
  7004                           postinc0	equ	0xFEE
  7005                           wreg	equ	0xFE8
  7006                           postdec1	equ	0xFE5
  7007                           fsr1l	equ	0xFE1
  7008                           indf2	equ	0xFDF
  7009                           postinc2	equ	0xFDE
  7010                           postdec2	equ	0xFDD
  7011                           fsr2h	equ	0xFDA
  7012                           fsr2l	equ	0xFD9
  7013                           status	equ	0xFD8
  7014                           
  7015 ;; *************** function _Rcmd2red *****************
  7016 ;; Defined at:
  7017 ;;		line 328 in file "ST7735_TFT.c"
  7018 ;; Parameters:    Size  Location     Type
  7019 ;;		None
  7020 ;; Auto vars:     Size  Location     Type
  7021 ;;		None
  7022 ;; Return value:  Size  Location     Type
  7023 ;;		None               void
  7024 ;; Registers used:
  7025 ;;		wreg, status,2, cstack
  7026 ;; Tracked objects:
  7027 ;;		On entry : 0/0
  7028 ;;		On exit  : 0/0
  7029 ;;		Unchanged: 0/0
  7030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7031 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7032 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7033 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7034 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7035 ;;Total ram usage:        0 bytes
  7036 ;; Hardware stack levels used:    1
  7037 ;; Hardware stack levels required when called:    5
  7038 ;; This function calls:
  7039 ;;		_write_command
  7040 ;;		_write_data
  7041 ;; This function is called by:
  7042 ;;		_TFT_GreenTab_Initialize
  7043 ;; This function uses a non-reentrant model
  7044 ;;
  7045                           
  7046                           	psect	text32
  7047  001842                     __ptext32:
  7048                           	opt stack 0
  7049  001842                     _Rcmd2red:
  7050                           	opt stack 22
  7051                           
  7052                           ;ST7735_TFT.c: 330: write_command(0x2A);
  7053                           
  7054                           ;incstack = 0
  7055  001842  0E2A               	movlw	42
  7056  001844  ECA7  F00D         	call	_write_command
  7057                           
  7058                           ;ST7735_TFT.c: 331: write_data(0x00); write_data(0x00);
  7059  001848  0E00               	movlw	0
  7060  00184A  EC9F  F00D         	call	_write_data
  7061  00184E  0E00               	movlw	0
  7062  001850  EC9F  F00D         	call	_write_data
  7063                           
  7064                           ;ST7735_TFT.c: 332: write_data(0x00); write_data(0x7F);
  7065  001854  0E00               	movlw	0
  7066  001856  EC9F  F00D         	call	_write_data
  7067  00185A  0E7F               	movlw	127
  7068  00185C  EC9F  F00D         	call	_write_data
  7069                           
  7070                           ;ST7735_TFT.c: 333: write_command(0x2B);
  7071  001860  0E2B               	movlw	43
  7072  001862  ECA7  F00D         	call	_write_command
  7073                           
  7074                           ;ST7735_TFT.c: 334: write_data(0x00); write_data(0x00);
  7075  001866  0E00               	movlw	0
  7076  001868  EC9F  F00D         	call	_write_data
  7077  00186C  0E00               	movlw	0
  7078  00186E  EC9F  F00D         	call	_write_data
  7079                           
  7080                           ;ST7735_TFT.c: 335: write_data(0x00); write_data(0x9F);
  7081  001872  0E00               	movlw	0
  7082  001874  EC9F  F00D         	call	_write_data
  7083  001878  0E9F               	movlw	159
  7084  00187A  EC9F  F00D         	call	_write_data
  7085  00187E  0012               	return		;funcret
  7086  001880                     __end_of_Rcmd2red:
  7087                           	opt stack 0
  7088                           tblptru	equ	0xFF8
  7089                           tblptrh	equ	0xFF7
  7090                           tblptrl	equ	0xFF6
  7091                           tablat	equ	0xFF5
  7092                           prodh	equ	0xFF4
  7093                           prodl	equ	0xFF3
  7094                           intcon	equ	0xFF2
  7095                           intcon2	equ	0xFF1
  7096                           postinc0	equ	0xFEE
  7097                           wreg	equ	0xFE8
  7098                           postdec1	equ	0xFE5
  7099                           fsr1l	equ	0xFE1
  7100                           indf2	equ	0xFDF
  7101                           postinc2	equ	0xFDE
  7102                           postdec2	equ	0xFDD
  7103                           fsr2h	equ	0xFDA
  7104                           fsr2l	equ	0xFD9
  7105                           status	equ	0xFD8
  7106                           
  7107 ;; *************** function _Rcmd1 *****************
  7108 ;; Defined at:
  7109 ;;		line 281 in file "ST7735_TFT.c"
  7110 ;; Parameters:    Size  Location     Type
  7111 ;;		None
  7112 ;; Auto vars:     Size  Location     Type
  7113 ;;		None
  7114 ;; Return value:  Size  Location     Type
  7115 ;;		None               void
  7116 ;; Registers used:
  7117 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7118 ;; Tracked objects:
  7119 ;;		On entry : 0/0
  7120 ;;		On exit  : 0/0
  7121 ;;		Unchanged: 0/0
  7122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7123 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7124 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7125 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7126 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7127 ;;Total ram usage:        0 bytes
  7128 ;; Hardware stack levels used:    1
  7129 ;; Hardware stack levels required when called:    5
  7130 ;; This function calls:
  7131 ;;		_delay_ms
  7132 ;;		_write_command
  7133 ;;		_write_data
  7134 ;; This function is called by:
  7135 ;;		_TFT_GreenTab_Initialize
  7136 ;;		_TFT_BlackTab_Initialize
  7137 ;; This function uses a non-reentrant model
  7138 ;;
  7139                           
  7140                           	psect	text33
  7141  000DE0                     __ptext33:
  7142                           	opt stack 0
  7143  000DE0                     _Rcmd1:
  7144                           	opt stack 22
  7145                           
  7146                           ;ST7735_TFT.c: 283: write_command(0x01);
  7147                           
  7148                           ;incstack = 0
  7149  000DE0  0E01               	movlw	1
  7150  000DE2  ECA7  F00D         	call	_write_command
  7151                           
  7152                           ;ST7735_TFT.c: 284: delay_ms(150);
  7153  000DE6  0E00               	movlw	0
  7154  000DE8  6E18               	movwf	delay_ms@ms+1,c
  7155  000DEA  0E96               	movlw	150
  7156  000DEC  6E17               	movwf	delay_ms@ms,c
  7157  000DEE  EC22  F00B         	call	_delay_ms	;wreg free
  7158                           
  7159                           ;ST7735_TFT.c: 285: write_command(0x11);
  7160  000DF2  0E11               	movlw	17
  7161  000DF4  ECA7  F00D         	call	_write_command
  7162                           
  7163                           ;ST7735_TFT.c: 286: delay_ms(500);
  7164  000DF8  0E01               	movlw	1
  7165  000DFA  6E18               	movwf	delay_ms@ms+1,c
  7166  000DFC  0EF4               	movlw	244
  7167  000DFE  6E17               	movwf	delay_ms@ms,c
  7168  000E00  EC22  F00B         	call	_delay_ms	;wreg free
  7169                           
  7170                           ;ST7735_TFT.c: 287: write_command(0xB1);
  7171  000E04  0EB1               	movlw	177
  7172  000E06  ECA7  F00D         	call	_write_command
  7173                           
  7174                           ;ST7735_TFT.c: 288: write_data(0x01);
  7175  000E0A  0E01               	movlw	1
  7176  000E0C  EC9F  F00D         	call	_write_data
  7177                           
  7178                           ;ST7735_TFT.c: 289: write_data(0x2C);
  7179  000E10  0E2C               	movlw	44
  7180  000E12  EC9F  F00D         	call	_write_data
  7181                           
  7182                           ;ST7735_TFT.c: 290: write_data(0x2D);
  7183  000E16  0E2D               	movlw	45
  7184  000E18  EC9F  F00D         	call	_write_data
  7185                           
  7186                           ;ST7735_TFT.c: 291: write_command(0xB2);
  7187  000E1C  0EB2               	movlw	178
  7188  000E1E  ECA7  F00D         	call	_write_command
  7189                           
  7190                           ;ST7735_TFT.c: 292: write_data(0x01);
  7191  000E22  0E01               	movlw	1
  7192  000E24  EC9F  F00D         	call	_write_data
  7193                           
  7194                           ;ST7735_TFT.c: 293: write_data(0x2C);
  7195  000E28  0E2C               	movlw	44
  7196  000E2A  EC9F  F00D         	call	_write_data
  7197                           
  7198                           ;ST7735_TFT.c: 294: write_data(0x2D);
  7199  000E2E  0E2D               	movlw	45
  7200  000E30  EC9F  F00D         	call	_write_data
  7201                           
  7202                           ;ST7735_TFT.c: 295: write_command(0xB3);
  7203  000E34  0EB3               	movlw	179
  7204  000E36  ECA7  F00D         	call	_write_command
  7205                           
  7206                           ;ST7735_TFT.c: 296: write_data(0x01);
  7207  000E3A  0E01               	movlw	1
  7208  000E3C  EC9F  F00D         	call	_write_data
  7209                           
  7210                           ;ST7735_TFT.c: 297: write_data(0x2C);
  7211  000E40  0E2C               	movlw	44
  7212  000E42  EC9F  F00D         	call	_write_data
  7213                           
  7214                           ;ST7735_TFT.c: 298: write_data(0x2D);
  7215  000E46  0E2D               	movlw	45
  7216  000E48  EC9F  F00D         	call	_write_data
  7217                           
  7218                           ;ST7735_TFT.c: 299: write_data(0x01);
  7219  000E4C  0E01               	movlw	1
  7220  000E4E  EC9F  F00D         	call	_write_data
  7221                           
  7222                           ;ST7735_TFT.c: 300: write_data(0x2C);
  7223  000E52  0E2C               	movlw	44
  7224  000E54  EC9F  F00D         	call	_write_data
  7225                           
  7226                           ;ST7735_TFT.c: 301: write_data(0x2D);
  7227  000E58  0E2D               	movlw	45
  7228  000E5A  EC9F  F00D         	call	_write_data
  7229                           
  7230                           ;ST7735_TFT.c: 302: write_command(0xB4);
  7231  000E5E  0EB4               	movlw	180
  7232  000E60  ECA7  F00D         	call	_write_command
  7233                           
  7234                           ;ST7735_TFT.c: 303: write_data(0x07);
  7235  000E64  0E07               	movlw	7
  7236  000E66  EC9F  F00D         	call	_write_data
  7237                           
  7238                           ;ST7735_TFT.c: 304: write_command(0xC0);
  7239  000E6A  0EC0               	movlw	192
  7240  000E6C  ECA7  F00D         	call	_write_command
  7241                           
  7242                           ;ST7735_TFT.c: 305: write_data(0xA2);
  7243  000E70  0EA2               	movlw	162
  7244  000E72  EC9F  F00D         	call	_write_data
  7245                           
  7246                           ;ST7735_TFT.c: 306: write_data(0x02);
  7247  000E76  0E02               	movlw	2
  7248  000E78  EC9F  F00D         	call	_write_data
  7249                           
  7250                           ;ST7735_TFT.c: 307: write_data(0x84);
  7251  000E7C  0E84               	movlw	132
  7252  000E7E  EC9F  F00D         	call	_write_data
  7253                           
  7254                           ;ST7735_TFT.c: 308: write_command(0xC1);
  7255  000E82  0EC1               	movlw	193
  7256  000E84  ECA7  F00D         	call	_write_command
  7257                           
  7258                           ;ST7735_TFT.c: 309: write_data(0xC5);
  7259  000E88  0EC5               	movlw	197
  7260  000E8A  EC9F  F00D         	call	_write_data
  7261                           
  7262                           ;ST7735_TFT.c: 310: write_command(0xC2);
  7263  000E8E  0EC2               	movlw	194
  7264  000E90  ECA7  F00D         	call	_write_command
  7265                           
  7266                           ;ST7735_TFT.c: 311: write_data(0x0A);
  7267  000E94  0E0A               	movlw	10
  7268  000E96  EC9F  F00D         	call	_write_data
  7269                           
  7270                           ;ST7735_TFT.c: 312: write_data(0x00);
  7271  000E9A  0E00               	movlw	0
  7272  000E9C  EC9F  F00D         	call	_write_data
  7273                           
  7274                           ;ST7735_TFT.c: 313: write_command(0xC3);
  7275  000EA0  0EC3               	movlw	195
  7276  000EA2  ECA7  F00D         	call	_write_command
  7277                           
  7278                           ;ST7735_TFT.c: 314: write_data(0x8A);
  7279  000EA6  0E8A               	movlw	138
  7280  000EA8  EC9F  F00D         	call	_write_data
  7281                           
  7282                           ;ST7735_TFT.c: 315: write_data(0x2A);
  7283  000EAC  0E2A               	movlw	42
  7284  000EAE  EC9F  F00D         	call	_write_data
  7285                           
  7286                           ;ST7735_TFT.c: 316: write_command(0xC4);
  7287  000EB2  0EC4               	movlw	196
  7288  000EB4  ECA7  F00D         	call	_write_command
  7289                           
  7290                           ;ST7735_TFT.c: 317: write_data(0x8A);
  7291  000EB8  0E8A               	movlw	138
  7292  000EBA  EC9F  F00D         	call	_write_data
  7293                           
  7294                           ;ST7735_TFT.c: 318: write_data(0xEE);
  7295  000EBE  0EEE               	movlw	238
  7296  000EC0  EC9F  F00D         	call	_write_data
  7297                           
  7298                           ;ST7735_TFT.c: 319: write_command(0xC5);
  7299  000EC4  0EC5               	movlw	197
  7300  000EC6  ECA7  F00D         	call	_write_command
  7301                           
  7302                           ;ST7735_TFT.c: 320: write_data(0x0E);
  7303  000ECA  0E0E               	movlw	14
  7304  000ECC  EC9F  F00D         	call	_write_data
  7305                           
  7306                           ;ST7735_TFT.c: 321: write_command(0x20);
  7307  000ED0  0E20               	movlw	32
  7308  000ED2  ECA7  F00D         	call	_write_command
  7309                           
  7310                           ;ST7735_TFT.c: 322: write_command(0x36);
  7311  000ED6  0E36               	movlw	54
  7312  000ED8  ECA7  F00D         	call	_write_command
  7313                           
  7314                           ;ST7735_TFT.c: 323: write_data(0xC8);
  7315  000EDC  0EC8               	movlw	200
  7316  000EDE  EC9F  F00D         	call	_write_data
  7317                           
  7318                           ;ST7735_TFT.c: 324: write_command(0x3A);
  7319  000EE2  0E3A               	movlw	58
  7320  000EE4  ECA7  F00D         	call	_write_command
  7321                           
  7322                           ;ST7735_TFT.c: 325: write_data(0x05);
  7323  000EE8  0E05               	movlw	5
  7324  000EEA  EC9F  F00D         	call	_write_data
  7325  000EEE  0012               	return		;funcret
  7326  000EF0                     __end_of_Rcmd1:
  7327                           	opt stack 0
  7328                           tblptru	equ	0xFF8
  7329                           tblptrh	equ	0xFF7
  7330                           tblptrl	equ	0xFF6
  7331                           tablat	equ	0xFF5
  7332                           prodh	equ	0xFF4
  7333                           prodl	equ	0xFF3
  7334                           intcon	equ	0xFF2
  7335                           intcon2	equ	0xFF1
  7336                           postinc0	equ	0xFEE
  7337                           wreg	equ	0xFE8
  7338                           postdec1	equ	0xFE5
  7339                           fsr1l	equ	0xFE1
  7340                           indf2	equ	0xFDF
  7341                           postinc2	equ	0xFDE
  7342                           postdec2	equ	0xFDD
  7343                           fsr2h	equ	0xFDA
  7344                           fsr2l	equ	0xFD9
  7345                           status	equ	0xFD8
  7346                           
  7347 ;; *************** function _write_data *****************
  7348 ;; Defined at:
  7349 ;;		line 209 in file "ST7735_TFT.c"
  7350 ;; Parameters:    Size  Location     Type
  7351 ;;  data_           1    wreg     unsigned char 
  7352 ;; Auto vars:     Size  Location     Type
  7353 ;;  data_           1   18[COMRAM] unsigned char 
  7354 ;; Return value:  Size  Location     Type
  7355 ;;		None               void
  7356 ;; Registers used:
  7357 ;;		wreg, status,2, cstack
  7358 ;; Tracked objects:
  7359 ;;		On entry : 0/0
  7360 ;;		On exit  : 0/0
  7361 ;;		Unchanged: 0/0
  7362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7363 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7364 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7365 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7366 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7367 ;;Total ram usage:        1 bytes
  7368 ;; Hardware stack levels used:    1
  7369 ;; Hardware stack levels required when called:    4
  7370 ;; This function calls:
  7371 ;;		_spiwrite
  7372 ;; This function is called by:
  7373 ;;		_Rcmd1
  7374 ;;		_Rcmd2red
  7375 ;;		_Rcmd3
  7376 ;;		_setAddrWindow
  7377 ;;		_drawPixel
  7378 ;;		_TFT_GreenTab_Initialize
  7379 ;;		_Bcmd
  7380 ;;		_setScrollDefinition
  7381 ;;		_Rcmd2green
  7382 ;;		_VerticalScroll
  7383 ;; This function uses a non-reentrant model
  7384 ;;
  7385                           
  7386                           	psect	text34
  7387  001B3E                     __ptext34:
  7388                           	opt stack 0
  7389  001B3E                     _write_data:
  7390                           	opt stack 22
  7391                           
  7392                           ;incstack = 0
  7393                           ;write_data@data_ stored from wreg
  7394  001B3E  6E13               	movwf	write_data@data_,c
  7395                           
  7396                           ;ST7735_TFT.c: 211: PORTDbits.RD1 = 0;
  7397  001B40  9283               	bcf	3971,1,c	;volatile
  7398                           
  7399                           ;ST7735_TFT.c: 212: PORTDbits.RD0 = 1;
  7400  001B42  8083               	bsf	3971,0,c	;volatile
  7401                           
  7402                           ;ST7735_TFT.c: 213: spiwrite(data_);
  7403  001B44  5013               	movf	write_data@data_,w,c
  7404  001B46  EC68  F00D         	call	_spiwrite
  7405                           
  7406                           ;ST7735_TFT.c: 214: PORTDbits.RD1 = 1;
  7407  001B4A  8283               	bsf	3971,1,c	;volatile
  7408  001B4C  0012               	return		;funcret
  7409  001B4E                     __end_of_write_data:
  7410                           	opt stack 0
  7411                           tblptru	equ	0xFF8
  7412                           tblptrh	equ	0xFF7
  7413                           tblptrl	equ	0xFF6
  7414                           tablat	equ	0xFF5
  7415                           prodh	equ	0xFF4
  7416                           prodl	equ	0xFF3
  7417                           intcon	equ	0xFF2
  7418                           intcon2	equ	0xFF1
  7419                           postinc0	equ	0xFEE
  7420                           wreg	equ	0xFE8
  7421                           postdec1	equ	0xFE5
  7422                           fsr1l	equ	0xFE1
  7423                           indf2	equ	0xFDF
  7424                           postinc2	equ	0xFDE
  7425                           postdec2	equ	0xFDD
  7426                           fsr2h	equ	0xFDA
  7427                           fsr2l	equ	0xFD9
  7428                           status	equ	0xFD8
  7429                           
  7430 ;; *************** function _write_command *****************
  7431 ;; Defined at:
  7432 ;;		line 198 in file "ST7735_TFT.c"
  7433 ;; Parameters:    Size  Location     Type
  7434 ;;  cmd_            1    wreg     unsigned char 
  7435 ;; Auto vars:     Size  Location     Type
  7436 ;;  cmd_            1   18[COMRAM] unsigned char 
  7437 ;; Return value:  Size  Location     Type
  7438 ;;		None               void
  7439 ;; Registers used:
  7440 ;;		wreg, status,2, cstack
  7441 ;; Tracked objects:
  7442 ;;		On entry : 0/0
  7443 ;;		On exit  : 0/0
  7444 ;;		Unchanged: 0/0
  7445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7446 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7447 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7448 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7449 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7450 ;;Total ram usage:        1 bytes
  7451 ;; Hardware stack levels used:    1
  7452 ;; Hardware stack levels required when called:    4
  7453 ;; This function calls:
  7454 ;;		_spiwrite
  7455 ;; This function is called by:
  7456 ;;		_Rcmd1
  7457 ;;		_Rcmd2red
  7458 ;;		_Rcmd3
  7459 ;;		_setAddrWindow
  7460 ;;		_TFT_GreenTab_Initialize
  7461 ;;		_Bcmd
  7462 ;;		_setScrollDefinition
  7463 ;;		_Rcmd2green
  7464 ;;		_VerticalScroll
  7465 ;; This function uses a non-reentrant model
  7466 ;;
  7467                           
  7468                           	psect	text35
  7469  001B4E                     __ptext35:
  7470                           	opt stack 0
  7471  001B4E                     _write_command:
  7472                           	opt stack 22
  7473                           
  7474                           ;incstack = 0
  7475                           ;write_command@cmd_ stored from wreg
  7476  001B4E  6E13               	movwf	write_command@cmd_,c
  7477                           
  7478                           ;ST7735_TFT.c: 200: PORTDbits.RD1 = 0;
  7479  001B50  9283               	bcf	3971,1,c	;volatile
  7480                           
  7481                           ;ST7735_TFT.c: 202: PORTDbits.RD0 = 0;
  7482  001B52  9083               	bcf	3971,0,c	;volatile
  7483                           
  7484                           ;ST7735_TFT.c: 203: spiwrite(cmd_);
  7485  001B54  5013               	movf	write_command@cmd_,w,c
  7486  001B56  EC68  F00D         	call	_spiwrite
  7487                           
  7488                           ;ST7735_TFT.c: 205: PORTDbits.RD1 = 1;
  7489  001B5A  8283               	bsf	3971,1,c	;volatile
  7490  001B5C  0012               	return		;funcret
  7491  001B5E                     __end_of_write_command:
  7492                           	opt stack 0
  7493                           tblptru	equ	0xFF8
  7494                           tblptrh	equ	0xFF7
  7495                           tblptrl	equ	0xFF6
  7496                           tablat	equ	0xFF5
  7497                           prodh	equ	0xFF4
  7498                           prodl	equ	0xFF3
  7499                           intcon	equ	0xFF2
  7500                           intcon2	equ	0xFF1
  7501                           postinc0	equ	0xFEE
  7502                           wreg	equ	0xFE8
  7503                           postdec1	equ	0xFE5
  7504                           fsr1l	equ	0xFE1
  7505                           indf2	equ	0xFDF
  7506                           postinc2	equ	0xFDE
  7507                           postdec2	equ	0xFDD
  7508                           fsr2h	equ	0xFDA
  7509                           fsr2l	equ	0xFD9
  7510                           status	equ	0xFD8
  7511                           
  7512 ;; *************** function _spiwrite *****************
  7513 ;; Defined at:
  7514 ;;		line 189 in file "ST7735_TFT.c"
  7515 ;; Parameters:    Size  Location     Type
  7516 ;;  spidata         1    wreg     unsigned char 
  7517 ;; Auto vars:     Size  Location     Type
  7518 ;;  spidata         1   17[COMRAM] unsigned char 
  7519 ;;  x               1   16[COMRAM] unsigned char 
  7520 ;; Return value:  Size  Location     Type
  7521 ;;		None               void
  7522 ;; Registers used:
  7523 ;;		wreg
  7524 ;; Tracked objects:
  7525 ;;		On entry : 0/0
  7526 ;;		On exit  : 0/0
  7527 ;;		Unchanged: 0/0
  7528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7529 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7530 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7531 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7532 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7533 ;;Total ram usage:        2 bytes
  7534 ;; Hardware stack levels used:    1
  7535 ;; Hardware stack levels required when called:    3
  7536 ;; This function calls:
  7537 ;;		Nothing
  7538 ;; This function is called by:
  7539 ;;		_write_command
  7540 ;;		_write_data
  7541 ;;		_drawFastVLine
  7542 ;;		_fillRectangle
  7543 ;;		_drawFastHLine
  7544 ;; This function uses a non-reentrant model
  7545 ;;
  7546                           
  7547                           	psect	text36
  7548  001AD0                     __ptext36:
  7549                           	opt stack 0
  7550  001AD0                     _spiwrite:
  7551                           	opt stack 24
  7552                           
  7553                           ;incstack = 0
  7554                           ;spiwrite@spidata stored from wreg
  7555  001AD0  6E12               	movwf	spiwrite@spidata,c
  7556                           
  7557                           ;ST7735_TFT.c: 191: char x;
  7558                           ;ST7735_TFT.c: 192: PIR1bits.SSPIF = 0;
  7559  001AD2  969E               	bcf	3998,3,c	;volatile
  7560                           
  7561                           ;ST7735_TFT.c: 193: x = SSPBUF;
  7562  001AD4  CFC9 F011          	movff	4041,spiwrite@x	;volatile
  7563                           
  7564                           ;ST7735_TFT.c: 194: SSPBUF = spidata;
  7565  001AD8  C012  FFC9         	movff	spiwrite@spidata,4041	;volatile
  7566                           
  7567                           ;ST7735_TFT.c: 195: while (!SSPSTATbits.BF);
  7568  001ADC  D000               	goto	l271
  7569  001ADE                     l271:
  7570  001ADE  A0C7               	btfss	4039,0,c	;volatile
  7571  001AE0  D7FE               	goto	l271
  7572  001AE2  0012               	return		;funcret
  7573  001AE4                     __end_of_spiwrite:
  7574                           	opt stack 0
  7575                           tblptru	equ	0xFF8
  7576                           tblptrh	equ	0xFF7
  7577                           tblptrl	equ	0xFF6
  7578                           tablat	equ	0xFF5
  7579                           prodh	equ	0xFF4
  7580                           prodl	equ	0xFF3
  7581                           intcon	equ	0xFF2
  7582                           intcon2	equ	0xFF1
  7583                           postinc0	equ	0xFEE
  7584                           wreg	equ	0xFE8
  7585                           postdec1	equ	0xFE5
  7586                           fsr1l	equ	0xFE1
  7587                           indf2	equ	0xFDF
  7588                           postinc2	equ	0xFDE
  7589                           postdec2	equ	0xFDD
  7590                           fsr2h	equ	0xFDA
  7591                           fsr2l	equ	0xFD9
  7592                           status	equ	0xFD8
  7593                           
  7594 ;; *************** function _LCD_Reset *****************
  7595 ;; Defined at:
  7596 ;;		line 217 in file "ST7735_TFT.c"
  7597 ;; Parameters:    Size  Location     Type
  7598 ;;		None
  7599 ;; Auto vars:     Size  Location     Type
  7600 ;;		None
  7601 ;; Return value:  Size  Location     Type
  7602 ;;		None               void
  7603 ;; Registers used:
  7604 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7605 ;; Tracked objects:
  7606 ;;		On entry : 0/0
  7607 ;;		On exit  : 0/0
  7608 ;;		Unchanged: 0/0
  7609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7610 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7611 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7612 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7613 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7614 ;;Total ram usage:        0 bytes
  7615 ;; Hardware stack levels used:    1
  7616 ;; Hardware stack levels required when called:    5
  7617 ;; This function calls:
  7618 ;;		_delay_ms
  7619 ;; This function is called by:
  7620 ;;		_Initialize_Screen
  7621 ;; This function uses a non-reentrant model
  7622 ;;
  7623                           
  7624                           	psect	text37
  7625  001AF6                     __ptext37:
  7626                           	opt stack 0
  7627  001AF6                     _LCD_Reset:
  7628                           	opt stack 23
  7629                           
  7630                           ;ST7735_TFT.c: 219: PORTDbits.RD2 = 0;
  7631                           
  7632                           ;incstack = 0
  7633  001AF6  9483               	bcf	3971,2,c	;volatile
  7634                           
  7635                           ;ST7735_TFT.c: 220: delay_ms(100);
  7636  001AF8  0E00               	movlw	0
  7637  001AFA  6E18               	movwf	delay_ms@ms+1,c
  7638  001AFC  0E64               	movlw	100
  7639  001AFE  6E17               	movwf	delay_ms@ms,c
  7640  001B00  EC22  F00B         	call	_delay_ms	;wreg free
  7641                           
  7642                           ;ST7735_TFT.c: 221: PORTDbits.RD2 = 1;
  7643  001B04  8483               	bsf	3971,2,c	;volatile
  7644  001B06  0012               	return		;funcret
  7645  001B08                     __end_of_LCD_Reset:
  7646                           	opt stack 0
  7647                           tblptru	equ	0xFF8
  7648                           tblptrh	equ	0xFF7
  7649                           tblptrl	equ	0xFF6
  7650                           tablat	equ	0xFF5
  7651                           prodh	equ	0xFF4
  7652                           prodl	equ	0xFF3
  7653                           intcon	equ	0xFF2
  7654                           intcon2	equ	0xFF1
  7655                           postinc0	equ	0xFEE
  7656                           wreg	equ	0xFE8
  7657                           postdec1	equ	0xFE5
  7658                           fsr1l	equ	0xFE1
  7659                           indf2	equ	0xFDF
  7660                           postinc2	equ	0xFDE
  7661                           postdec2	equ	0xFDD
  7662                           fsr2h	equ	0xFDA
  7663                           fsr2l	equ	0xFD9
  7664                           status	equ	0xFD8
  7665                           
  7666 ;; *************** function _delay_ms *****************
  7667 ;; Defined at:
  7668 ;;		line 64 in file "ST7735_TFT.c"
  7669 ;; Parameters:    Size  Location     Type
  7670 ;;  ms              2   22[COMRAM] int 
  7671 ;; Auto vars:     Size  Location     Type
  7672 ;;  count           2   26[COMRAM] int 
  7673 ;; Return value:  Size  Location     Type
  7674 ;;		None               void
  7675 ;; Registers used:
  7676 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7677 ;; Tracked objects:
  7678 ;;		On entry : 0/0
  7679 ;;		On exit  : 0/0
  7680 ;;		Unchanged: 0/0
  7681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7682 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7683 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7684 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7685 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7686 ;;Total ram usage:        6 bytes
  7687 ;; Hardware stack levels used:    1
  7688 ;; Hardware stack levels required when called:    4
  7689 ;; This function calls:
  7690 ;;		___wmul
  7691 ;; This function is called by:
  7692 ;;		_LCD_Reset
  7693 ;;		_Rcmd1
  7694 ;;		_Rcmd3
  7695 ;;		_Bcmd
  7696 ;; This function uses a non-reentrant model
  7697 ;;
  7698                           
  7699                           	psect	text38
  7700  001644                     __ptext38:
  7701                           	opt stack 0
  7702  001644                     _delay_ms:
  7703                           	opt stack 22
  7704                           
  7705                           ;ST7735_TFT.c: 70: int count;
  7706                           ;ST7735_TFT.c: 71: count = 8000000/4000/8 * ms;
  7707                           
  7708                           ;incstack = 0
  7709  001644  C017  F011         	movff	delay_ms@ms,___wmul@multiplier
  7710  001648  C018  F012         	movff	delay_ms@ms+1,___wmul@multiplier+1
  7711  00164C  0E00               	movlw	0
  7712  00164E  6E14               	movwf	___wmul@multiplicand+1,c
  7713  001650  0EFA               	movlw	250
  7714  001652  6E13               	movwf	___wmul@multiplicand,c
  7715  001654  ECDB  F00C         	call	___wmul	;wreg free
  7716  001658  C011  F01B         	movff	?___wmul,delay_ms@count
  7717  00165C  C012  F01C         	movff	?___wmul+1,delay_ms@count+1
  7718                           
  7719                           ;ST7735_TFT.c: 72: count = (0xffff - count);
  7720  001660  C01B  F019         	movff	delay_ms@count,??_delay_ms
  7721  001664  C01C  F01A         	movff	delay_ms@count+1,??_delay_ms+1
  7722  001668  1E19               	comf	??_delay_ms,f,c
  7723  00166A  1E1A               	comf	??_delay_ms+1,f,c
  7724  00166C  4A19               	infsnz	??_delay_ms,f,c
  7725  00166E  2A1A               	incf	??_delay_ms+1,f,c
  7726  001670  0EFF               	movlw	255
  7727  001672  2419               	addwf	??_delay_ms,w,c
  7728  001674  6E1B               	movwf	delay_ms@count,c
  7729  001676  0EFF               	movlw	255
  7730  001678  201A               	addwfc	??_delay_ms+1,w,c
  7731  00167A  6E1C               	movwf	delay_ms@count+1,c
  7732                           
  7733                           ;ST7735_TFT.c: 74: T3CON = 0xb8;
  7734  00167C  0EB8               	movlw	184
  7735  00167E  6EB1               	movwf	4017,c	;volatile
  7736                           
  7737                           ;ST7735_TFT.c: 76: TMR3L = count & 0x00ff;
  7738  001680  C01B  FFB2         	movff	delay_ms@count,4018	;volatile
  7739                           
  7740                           ;ST7735_TFT.c: 77: TMR3H = count >> 8;
  7741  001684  501C               	movf	delay_ms@count+1,w,c
  7742  001686  6EB3               	movwf	4019,c	;volatile
  7743                           
  7744                           ;ST7735_TFT.c: 79: PIR2bits.TMR3IF = 0;
  7745  001688  92A1               	bcf	4001,1,c	;volatile
  7746                           
  7747                           ;ST7735_TFT.c: 80: T3CONbits.TMR3ON = 1;
  7748  00168A  80B1               	bsf	4017,0,c	;volatile
  7749                           
  7750                           ;ST7735_TFT.c: 82: while (PIR2bits.TMR3IF == 0);
  7751  00168C  D000               	goto	l261
  7752  00168E                     l261:
  7753  00168E  A2A1               	btfss	4001,1,c	;volatile
  7754  001690  D7FE               	goto	l261
  7755                           
  7756                           ;ST7735_TFT.c: 83: T3CONbits.TMR3ON = 0;
  7757  001692  90B1               	bcf	4017,0,c	;volatile
  7758  001694  0012               	return		;funcret
  7759  001696                     __end_of_delay_ms:
  7760                           	opt stack 0
  7761                           tblptru	equ	0xFF8
  7762                           tblptrh	equ	0xFF7
  7763                           tblptrl	equ	0xFF6
  7764                           tablat	equ	0xFF5
  7765                           prodh	equ	0xFF4
  7766                           prodl	equ	0xFF3
  7767                           intcon	equ	0xFF2
  7768                           intcon2	equ	0xFF1
  7769                           postinc0	equ	0xFEE
  7770                           wreg	equ	0xFE8
  7771                           postdec1	equ	0xFE5
  7772                           fsr1l	equ	0xFE1
  7773                           indf2	equ	0xFDF
  7774                           postinc2	equ	0xFDE
  7775                           postdec2	equ	0xFDD
  7776                           fsr2h	equ	0xFDA
  7777                           fsr2l	equ	0xFD9
  7778                           status	equ	0xFD8
  7779                           
  7780 ;; *************** function ___wmul *****************
  7781 ;; Defined at:
  7782 ;;		line 15 in file "E:\XC8\sources\common\Umul16.c"
  7783 ;; Parameters:    Size  Location     Type
  7784 ;;  multiplier      2   16[COMRAM] unsigned int 
  7785 ;;  multiplicand    2   18[COMRAM] unsigned int 
  7786 ;; Auto vars:     Size  Location     Type
  7787 ;;  product         2   20[COMRAM] unsigned int 
  7788 ;; Return value:  Size  Location     Type
  7789 ;;                  2   16[COMRAM] unsigned int 
  7790 ;; Registers used:
  7791 ;;		wreg, status,2, status,0, prodl, prodh
  7792 ;; Tracked objects:
  7793 ;;		On entry : 0/0
  7794 ;;		On exit  : 0/0
  7795 ;;		Unchanged: 0/0
  7796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7797 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7798 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7799 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7800 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7801 ;;Total ram usage:        6 bytes
  7802 ;; Hardware stack levels used:    1
  7803 ;; Hardware stack levels required when called:    3
  7804 ;; This function calls:
  7805 ;;		Nothing
  7806 ;; This function is called by:
  7807 ;;		_delay_ms
  7808 ;;		_drawChar
  7809 ;;		_main
  7810 ;;		_printf
  7811 ;; This function uses a non-reentrant model
  7812 ;;
  7813                           
  7814                           	psect	text39
  7815  0019B6                     __ptext39:
  7816                           	opt stack 0
  7817  0019B6                     ___wmul:
  7818                           	opt stack 26
  7819                           
  7820                           ;incstack = 0
  7821  0019B6  5011               	movf	___wmul@multiplier,w,c
  7822  0019B8  0213               	mulwf	___wmul@multiplicand,c
  7823  0019BA  CFF3 F015          	movff	prodl,___wmul@product
  7824  0019BE  CFF4 F016          	movff	prodh,___wmul@product+1
  7825  0019C2  5011               	movf	___wmul@multiplier,w,c
  7826  0019C4  0214               	mulwf	___wmul@multiplicand+1,c
  7827  0019C6  50F3               	movf	prodl,w,c
  7828  0019C8  2616               	addwf	___wmul@product+1,f,c
  7829  0019CA  5012               	movf	___wmul@multiplier+1,w,c
  7830  0019CC  0213               	mulwf	___wmul@multiplicand,c
  7831  0019CE  50F3               	movf	prodl,w,c
  7832  0019D0  2616               	addwf	___wmul@product+1,f,c
  7833  0019D2  C015  F011         	movff	___wmul@product,?___wmul
  7834  0019D6  C016  F012         	movff	___wmul@product+1,?___wmul+1
  7835  0019DA  D000               	goto	l677
  7836  0019DC                     l677:
  7837  0019DC  0012               	return		;funcret
  7838  0019DE                     __end_of___wmul:
  7839                           	opt stack 0
  7840                           tblptru	equ	0xFF8
  7841                           tblptrh	equ	0xFF7
  7842                           tblptrl	equ	0xFF6
  7843                           tablat	equ	0xFF5
  7844                           prodh	equ	0xFF4
  7845                           prodl	equ	0xFF3
  7846                           intcon	equ	0xFF2
  7847                           intcon2	equ	0xFF1
  7848                           postinc0	equ	0xFEE
  7849                           wreg	equ	0xFE8
  7850                           postdec1	equ	0xFE5
  7851                           fsr1l	equ	0xFE1
  7852                           indf2	equ	0xFDF
  7853                           postinc2	equ	0xFDE
  7854                           postdec2	equ	0xFDD
  7855                           fsr2h	equ	0xFDA
  7856                           fsr2l	equ	0xFD9
  7857                           status	equ	0xFD8
  7858                           
  7859 ;; *************** function _I2C_Init *****************
  7860 ;; Defined at:
  7861 ;;		line 14 in file "I2C.c"
  7862 ;; Parameters:    Size  Location     Type
  7863 ;;  c               4   16[COMRAM] unsigned long 
  7864 ;; Auto vars:     Size  Location     Type
  7865 ;;		None
  7866 ;; Return value:  Size  Location     Type
  7867 ;;		None               void
  7868 ;; Registers used:
  7869 ;;		wreg, cstack
  7870 ;; Tracked objects:
  7871 ;;		On entry : 0/0
  7872 ;;		On exit  : 0/0
  7873 ;;		Unchanged: 0/0
  7874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7875 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7876 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7877 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7878 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7879 ;;Total ram usage:        4 bytes
  7880 ;; Hardware stack levels used:    1
  7881 ;; Hardware stack levels required when called:    4
  7882 ;; This function calls:
  7883 ;;		_i2cHighScl
  7884 ;;		_i2cHighSda
  7885 ;; This function is called by:
  7886 ;;		_Do_Init
  7887 ;; This function uses a non-reentrant model
  7888 ;;
  7889                           
  7890                           	psect	text40
  7891  001B92                     __ptext40:
  7892                           	opt stack 0
  7893  001B92                     _I2C_Init:
  7894                           	opt stack 25
  7895                           
  7896                           ;I2C.c: 16: i2cHighScl();
  7897                           
  7898                           ;incstack = 0
  7899  001B92  ECBD  F00D         	call	_i2cHighScl	;wreg free
  7900                           
  7901                           ;I2C.c: 17: i2cHighSda();
  7902  001B96  ECE0  F00D         	call	_i2cHighSda	;wreg free
  7903  001B9A  0012               	return		;funcret
  7904  001B9C                     __end_of_I2C_Init:
  7905                           	opt stack 0
  7906                           tblptru	equ	0xFF8
  7907                           tblptrh	equ	0xFF7
  7908                           tblptrl	equ	0xFF6
  7909                           tablat	equ	0xFF5
  7910                           prodh	equ	0xFF4
  7911                           prodl	equ	0xFF3
  7912                           intcon	equ	0xFF2
  7913                           intcon2	equ	0xFF1
  7914                           postinc0	equ	0xFEE
  7915                           wreg	equ	0xFE8
  7916                           postdec1	equ	0xFE5
  7917                           fsr1l	equ	0xFE1
  7918                           indf2	equ	0xFDF
  7919                           postinc2	equ	0xFDE
  7920                           postdec2	equ	0xFDD
  7921                           fsr2h	equ	0xFDA
  7922                           fsr2l	equ	0xFD9
  7923                           status	equ	0xFD8
  7924                           
  7925 ;; *************** function _DS1621_Init *****************
  7926 ;; Defined at:
  7927 ;;		line 21 in file "I2C_Support.c"
  7928 ;; Parameters:    Size  Location     Type
  7929 ;;		None
  7930 ;; Auto vars:     Size  Location     Type
  7931 ;;  Device          1   21[COMRAM] unsigned char 
  7932 ;; Return value:  Size  Location     Type
  7933 ;;		None               void
  7934 ;; Registers used:
  7935 ;;		wreg, status,2, status,0, cstack
  7936 ;; Tracked objects:
  7937 ;;		On entry : 0/0
  7938 ;;		On exit  : 0/0
  7939 ;;		Unchanged: 0/0
  7940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7941 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7942 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7943 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7944 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7945 ;;Total ram usage:        1 bytes
  7946 ;; Hardware stack levels used:    1
  7947 ;; Hardware stack levels required when called:    6
  7948 ;; This function calls:
  7949 ;;		_I2C_Write_Cmd_Only
  7950 ;;		_I2C_Write_Cmd_Write_Data
  7951 ;; This function is called by:
  7952 ;;		_Do_Init
  7953 ;; This function uses a non-reentrant model
  7954 ;;
  7955                           
  7956                           	psect	text41
  7957  001A20                     __ptext41:
  7958                           	opt stack 0
  7959  001A20                     _DS1621_Init:
  7960                           	opt stack 23
  7961                           
  7962                           ;I2C_Support.c: 23: char Device = 0x48;
  7963                           
  7964                           ;incstack = 0
  7965  001A20  0E48               	movlw	72
  7966  001A22  6E16               	movwf	DS1621_Init@Device,c
  7967                           
  7968                           ;I2C_Support.c: 24: I2C_Write_Cmd_Write_Data (Device, 0xAC, 0x02);
  7969  001A24  0EAC               	movlw	172
  7970  001A26  6E13               	movwf	I2C_Write_Cmd_Write_Data@Cmd,c
  7971  001A28  0E02               	movlw	2
  7972  001A2A  6E14               	movwf	I2C_Write_Cmd_Write_Data@Data_Out,c
  7973  001A2C  5016               	movf	DS1621_Init@Device,w,c
  7974  001A2E  EC00  F00D         	call	_I2C_Write_Cmd_Write_Data
  7975                           
  7976                           ;I2C_Support.c: 25: I2C_Write_Cmd_Only(Device, 0xEE);
  7977  001A32  0EEE               	movlw	238
  7978  001A34  6E13               	movwf	I2C_Write_Cmd_Only@Cmd,c
  7979  001A36  5016               	movf	DS1621_Init@Device,w,c
  7980  001A38  EC3A  F00D         	call	_I2C_Write_Cmd_Only
  7981  001A3C  0012               	return		;funcret
  7982  001A3E                     __end_of_DS1621_Init:
  7983                           	opt stack 0
  7984                           tblptru	equ	0xFF8
  7985                           tblptrh	equ	0xFF7
  7986                           tblptrl	equ	0xFF6
  7987                           tablat	equ	0xFF5
  7988                           prodh	equ	0xFF4
  7989                           prodl	equ	0xFF3
  7990                           intcon	equ	0xFF2
  7991                           intcon2	equ	0xFF1
  7992                           postinc0	equ	0xFEE
  7993                           wreg	equ	0xFE8
  7994                           postdec1	equ	0xFE5
  7995                           fsr1l	equ	0xFE1
  7996                           indf2	equ	0xFDF
  7997                           postinc2	equ	0xFDE
  7998                           postdec2	equ	0xFDD
  7999                           fsr2h	equ	0xFDA
  8000                           fsr2l	equ	0xFD9
  8001                           status	equ	0xFD8
  8002                           
  8003 ;; *************** function _I2C_Write_Cmd_Write_Data *****************
  8004 ;; Defined at:
  8005 ;;		line 152 in file "I2C.c"
  8006 ;; Parameters:    Size  Location     Type
  8007 ;;  Device          1    wreg     unsigned char 
  8008 ;;  Cmd             1   18[COMRAM] unsigned char 
  8009 ;;  Data_Out        1   19[COMRAM] unsigned char 
  8010 ;; Auto vars:     Size  Location     Type
  8011 ;;  Device          1   20[COMRAM] unsigned char 
  8012 ;; Return value:  Size  Location     Type
  8013 ;;		None               void
  8014 ;; Registers used:
  8015 ;;		wreg, status,2, status,0, cstack
  8016 ;; Tracked objects:
  8017 ;;		On entry : 0/0
  8018 ;;		On exit  : 0/0
  8019 ;;		Unchanged: 0/0
  8020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8021 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8022 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8023 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8024 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8025 ;;Total ram usage:        3 bytes
  8026 ;; Hardware stack levels used:    1
  8027 ;; Hardware stack levels required when called:    5
  8028 ;; This function calls:
  8029 ;;		_I2C_Start
  8030 ;;		_I2C_Stop
  8031 ;;		_I2C_Write
  8032 ;; This function is called by:
  8033 ;;		_DS1621_Init
  8034 ;; This function uses a non-reentrant model
  8035 ;;
  8036                           
  8037                           	psect	text42
  8038  001A00                     __ptext42:
  8039                           	opt stack 0
  8040  001A00                     _I2C_Write_Cmd_Write_Data:
  8041                           	opt stack 23
  8042                           
  8043                           ;incstack = 0
  8044                           ;I2C_Write_Cmd_Write_Data@Device stored from wreg
  8045  001A00  6E15               	movwf	I2C_Write_Cmd_Write_Data@Device,c
  8046                           
  8047                           ;I2C.c: 154: I2C_Start();
  8048  001A02  EC8D  F00D         	call	_I2C_Start	;wreg free
  8049                           
  8050                           ;I2C.c: 155: I2C_Write((Device << 1) | 0);
  8051  001A06  5015               	movf	I2C_Write_Cmd_Write_Data@Device,w,c
  8052  001A08  2415               	addwf	I2C_Write_Cmd_Write_Data@Device,w,c
  8053  001A0A  EC40  F00C         	call	_I2C_Write
  8054                           
  8055                           ;I2C.c: 156: I2C_Write(Cmd);
  8056  001A0E  5013               	movf	I2C_Write_Cmd_Write_Data@Cmd,w,c
  8057  001A10  EC40  F00C         	call	_I2C_Write
  8058                           
  8059                           ;I2C.c: 157: I2C_Write(Data_Out);
  8060  001A14  5014               	movf	I2C_Write_Cmd_Write_Data@Data_Out,w,c
  8061  001A16  EC40  F00C         	call	_I2C_Write
  8062                           
  8063                           ;I2C.c: 158: I2C_Stop();
  8064  001A1A  EC84  F00D         	call	_I2C_Stop	;wreg free
  8065  001A1E  0012               	return		;funcret
  8066  001A20                     __end_of_I2C_Write_Cmd_Write_Data:
  8067                           	opt stack 0
  8068                           tblptru	equ	0xFF8
  8069                           tblptrh	equ	0xFF7
  8070                           tblptrl	equ	0xFF6
  8071                           tablat	equ	0xFF5
  8072                           prodh	equ	0xFF4
  8073                           prodl	equ	0xFF3
  8074                           intcon	equ	0xFF2
  8075                           intcon2	equ	0xFF1
  8076                           postinc0	equ	0xFEE
  8077                           wreg	equ	0xFE8
  8078                           postdec1	equ	0xFE5
  8079                           fsr1l	equ	0xFE1
  8080                           indf2	equ	0xFDF
  8081                           postinc2	equ	0xFDE
  8082                           postdec2	equ	0xFDD
  8083                           fsr2h	equ	0xFDA
  8084                           fsr2l	equ	0xFD9
  8085                           status	equ	0xFD8
  8086                           
  8087 ;; *************** function _I2C_Write_Cmd_Only *****************
  8088 ;; Defined at:
  8089 ;;		line 144 in file "I2C.c"
  8090 ;; Parameters:    Size  Location     Type
  8091 ;;  Device          1    wreg     unsigned char 
  8092 ;;  Cmd             1   18[COMRAM] unsigned char 
  8093 ;; Auto vars:     Size  Location     Type
  8094 ;;  Device          1   19[COMRAM] unsigned char 
  8095 ;; Return value:  Size  Location     Type
  8096 ;;		None               void
  8097 ;; Registers used:
  8098 ;;		wreg, status,2, status,0, cstack
  8099 ;; Tracked objects:
  8100 ;;		On entry : 0/0
  8101 ;;		On exit  : 0/0
  8102 ;;		Unchanged: 0/0
  8103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8104 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8105 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8106 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8107 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8108 ;;Total ram usage:        2 bytes
  8109 ;; Hardware stack levels used:    1
  8110 ;; Hardware stack levels required when called:    5
  8111 ;; This function calls:
  8112 ;;		_I2C_Start
  8113 ;;		_I2C_Stop
  8114 ;;		_I2C_Write
  8115 ;; This function is called by:
  8116 ;;		_DS1621_Init
  8117 ;; This function uses a non-reentrant model
  8118 ;;
  8119                           
  8120                           	psect	text43
  8121  001A74                     __ptext43:
  8122                           	opt stack 0
  8123  001A74                     _I2C_Write_Cmd_Only:
  8124                           	opt stack 23
  8125                           
  8126                           ;incstack = 0
  8127                           ;I2C_Write_Cmd_Only@Device stored from wreg
  8128  001A74  6E14               	movwf	I2C_Write_Cmd_Only@Device,c
  8129                           
  8130                           ;I2C.c: 146: I2C_Start();
  8131  001A76  EC8D  F00D         	call	_I2C_Start	;wreg free
  8132                           
  8133                           ;I2C.c: 147: I2C_Write((Device << 1) | 0);
  8134  001A7A  5014               	movf	I2C_Write_Cmd_Only@Device,w,c
  8135  001A7C  2414               	addwf	I2C_Write_Cmd_Only@Device,w,c
  8136  001A7E  EC40  F00C         	call	_I2C_Write
  8137                           
  8138                           ;I2C.c: 148: I2C_Write(Cmd);
  8139  001A82  5013               	movf	I2C_Write_Cmd_Only@Cmd,w,c
  8140  001A84  EC40  F00C         	call	_I2C_Write
  8141                           
  8142                           ;I2C.c: 149: I2C_Stop();
  8143  001A88  EC84  F00D         	call	_I2C_Stop	;wreg free
  8144  001A8C  0012               	return		;funcret
  8145  001A8E                     __end_of_I2C_Write_Cmd_Only:
  8146                           	opt stack 0
  8147                           tblptru	equ	0xFF8
  8148                           tblptrh	equ	0xFF7
  8149                           tblptrl	equ	0xFF6
  8150                           tablat	equ	0xFF5
  8151                           prodh	equ	0xFF4
  8152                           prodl	equ	0xFF3
  8153                           intcon	equ	0xFF2
  8154                           intcon2	equ	0xFF1
  8155                           postinc0	equ	0xFEE
  8156                           wreg	equ	0xFE8
  8157                           postdec1	equ	0xFE5
  8158                           fsr1l	equ	0xFE1
  8159                           indf2	equ	0xFDF
  8160                           postinc2	equ	0xFDE
  8161                           postdec2	equ	0xFDD
  8162                           fsr2h	equ	0xFDA
  8163                           fsr2l	equ	0xFD9
  8164                           status	equ	0xFD8
  8165                           
  8166 ;; *************** function _DS3231_Setup_Time *****************
  8167 ;; Defined at:
  8168 ;;		line 67 in file "I2C_Support.c"
  8169 ;; Parameters:    Size  Location     Type
  8170 ;;		None
  8171 ;; Auto vars:     Size  Location     Type
  8172 ;;  Address         1   19[COMRAM] unsigned char 
  8173 ;;  Device          1   18[COMRAM] unsigned char 
  8174 ;; Return value:  Size  Location     Type
  8175 ;;		None               void
  8176 ;; Registers used:
  8177 ;;		wreg, status,2, status,0, cstack
  8178 ;; Tracked objects:
  8179 ;;		On entry : 0/0
  8180 ;;		On exit  : 0/0
  8181 ;;		Unchanged: 0/0
  8182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8183 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8184 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8185 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8186 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8187 ;;Total ram usage:        2 bytes
  8188 ;; Hardware stack levels used:    1
  8189 ;; Hardware stack levels required when called:    5
  8190 ;; This function calls:
  8191 ;;		_I2C_Start
  8192 ;;		_I2C_Stop
  8193 ;;		_I2C_Write
  8194 ;; This function is called by:
  8195 ;;		_main
  8196 ;; This function uses a non-reentrant model
  8197 ;;
  8198                           
  8199                           	psect	text44
  8200  0014CC                     __ptext44:
  8201                           	opt stack 0
  8202  0014CC                     _DS3231_Setup_Time:
  8203                           	opt stack 25
  8204                           
  8205                           ;I2C_Support.c: 70: char Device = 0x68;
  8206                           
  8207                           ;incstack = 0
  8208  0014CC  0E68               	movlw	104
  8209  0014CE  6E13               	movwf	DS3231_Setup_Time@Device,c
  8210                           
  8211                           ;I2C_Support.c: 71: char Address = 0x00;
  8212  0014D0  0E00               	movlw	0
  8213  0014D2  6E14               	movwf	DS3231_Setup_Time@Address,c
  8214                           
  8215                           ;I2C_Support.c: 73: second = 0x00;
  8216  0014D4  0E00               	movlw	0
  8217  0014D6  6E61               	movwf	_second,c
  8218                           
  8219                           ;I2C_Support.c: 74: minute = 0x00;
  8220  0014D8  0E00               	movlw	0
  8221  0014DA  6E5D               	movwf	_minute,c
  8222                           
  8223                           ;I2C_Support.c: 75: hour = 0x09;
  8224  0014DC  0E09               	movlw	9
  8225  0014DE  6E5B               	movwf	_hour,c
  8226                           
  8227                           ;I2C_Support.c: 76: dow = 0x00;
  8228  0014E0  0E00               	movlw	0
  8229  0014E2  6E59               	movwf	_dow,c
  8230                           
  8231                           ;I2C_Support.c: 77: day = 0x28;
  8232  0014E4  0E28               	movlw	40
  8233  0014E6  6E58               	movwf	_day,c
  8234                           
  8235                           ;I2C_Support.c: 78: month = 0x10;
  8236  0014E8  0E10               	movlw	16
  8237  0014EA  6E5E               	movwf	_month,c
  8238                           
  8239                           ;I2C_Support.c: 79: year = 0x21;
  8240  0014EC  0E21               	movlw	33
  8241  0014EE  6E6D               	movwf	_year,c
  8242                           
  8243                           ;I2C_Support.c: 81: I2C_Start();
  8244  0014F0  EC8D  F00D         	call	_I2C_Start	;wreg free
  8245                           
  8246                           ;I2C_Support.c: 82: I2C_Write((Device << 1) | 0);
  8247  0014F4  5013               	movf	DS3231_Setup_Time@Device,w,c
  8248  0014F6  2413               	addwf	DS3231_Setup_Time@Device,w,c
  8249  0014F8  EC40  F00C         	call	_I2C_Write
  8250                           
  8251                           ;I2C_Support.c: 83: I2C_Write(Address);
  8252  0014FC  5014               	movf	DS3231_Setup_Time@Address,w,c
  8253  0014FE  EC40  F00C         	call	_I2C_Write
  8254                           
  8255                           ;I2C_Support.c: 84: I2C_Write(second);
  8256  001502  5061               	movf	_second,w,c
  8257  001504  EC40  F00C         	call	_I2C_Write
  8258                           
  8259                           ;I2C_Support.c: 85: I2C_Write(minute);
  8260  001508  505D               	movf	_minute,w,c
  8261  00150A  EC40  F00C         	call	_I2C_Write
  8262                           
  8263                           ;I2C_Support.c: 86: I2C_Write(hour);
  8264  00150E  505B               	movf	_hour,w,c
  8265  001510  EC40  F00C         	call	_I2C_Write
  8266                           
  8267                           ;I2C_Support.c: 87: I2C_Write(dow);
  8268  001514  5059               	movf	_dow,w,c
  8269  001516  EC40  F00C         	call	_I2C_Write
  8270                           
  8271                           ;I2C_Support.c: 88: I2C_Write(day);
  8272  00151A  5058               	movf	_day,w,c
  8273  00151C  EC40  F00C         	call	_I2C_Write
  8274                           
  8275                           ;I2C_Support.c: 89: I2C_Write(month);
  8276  001520  505E               	movf	_month,w,c
  8277  001522  EC40  F00C         	call	_I2C_Write
  8278                           
  8279                           ;I2C_Support.c: 90: I2C_Write(year);
  8280  001526  506D               	movf	_year,w,c
  8281  001528  EC40  F00C         	call	_I2C_Write
  8282                           
  8283                           ;I2C_Support.c: 91: I2C_Stop();
  8284  00152C  EC84  F00D         	call	_I2C_Stop	;wreg free
  8285  001530  0012               	return		;funcret
  8286  001532                     __end_of_DS3231_Setup_Time:
  8287                           	opt stack 0
  8288                           tblptru	equ	0xFF8
  8289                           tblptrh	equ	0xFF7
  8290                           tblptrl	equ	0xFF6
  8291                           tablat	equ	0xFF5
  8292                           prodh	equ	0xFF4
  8293                           prodl	equ	0xFF3
  8294                           intcon	equ	0xFF2
  8295                           intcon2	equ	0xFF1
  8296                           postinc0	equ	0xFEE
  8297                           wreg	equ	0xFE8
  8298                           postdec1	equ	0xFE5
  8299                           fsr1l	equ	0xFE1
  8300                           indf2	equ	0xFDF
  8301                           postinc2	equ	0xFDE
  8302                           postdec2	equ	0xFDD
  8303                           fsr2h	equ	0xFDA
  8304                           fsr2l	equ	0xFD9
  8305                           status	equ	0xFD8
  8306                           
  8307 ;; *************** function _DS3231_Read_Time *****************
  8308 ;; Defined at:
  8309 ;;		line 45 in file "I2C_Support.c"
  8310 ;; Parameters:    Size  Location     Type
  8311 ;;		None
  8312 ;; Auto vars:     Size  Location     Type
  8313 ;;  Device          1   20[COMRAM] unsigned char 
  8314 ;;  Address         1   19[COMRAM] unsigned char 
  8315 ;;  Data_Ret        1    0        unsigned char 
  8316 ;; Return value:  Size  Location     Type
  8317 ;;		None               void
  8318 ;; Registers used:
  8319 ;;		wreg, status,2, status,0, cstack
  8320 ;; Tracked objects:
  8321 ;;		On entry : 0/0
  8322 ;;		On exit  : 0/0
  8323 ;;		Unchanged: 0/0
  8324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8325 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8326 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8327 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8328 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8329 ;;Total ram usage:        2 bytes
  8330 ;; Hardware stack levels used:    1
  8331 ;; Hardware stack levels required when called:    6
  8332 ;; This function calls:
  8333 ;;		_I2C_ReStart
  8334 ;;		_I2C_Read
  8335 ;;		_I2C_Start
  8336 ;;		_I2C_Stop
  8337 ;;		_I2C_Write
  8338 ;; This function is called by:
  8339 ;;		_main
  8340 ;; This function uses a non-reentrant model
  8341 ;;
  8342                           
  8343                           	psect	text45
  8344  001532                     __ptext45:
  8345                           	opt stack 0
  8346  001532                     _DS3231_Read_Time:
  8347                           	opt stack 24
  8348                           
  8349                           ;I2C_Support.c: 47: char Device = 0x68;
  8350                           
  8351                           ;incstack = 0
  8352  001532  0E68               	movlw	104
  8353  001534  6E15               	movwf	DS3231_Read_Time@Device,c
  8354                           
  8355                           ;I2C_Support.c: 48: char Address = 0x00;
  8356  001536  0E00               	movlw	0
  8357  001538  6E14               	movwf	DS3231_Read_Time@Address,c
  8358                           
  8359                           ;I2C_Support.c: 49: char Data_Ret;
  8360                           ;I2C_Support.c: 50: I2C_Start();
  8361  00153A  EC8D  F00D         	call	_I2C_Start	;wreg free
  8362                           
  8363                           ;I2C_Support.c: 51: I2C_Write((Device << 1) | 0);
  8364  00153E  5015               	movf	DS3231_Read_Time@Device,w,c
  8365  001540  2415               	addwf	DS3231_Read_Time@Device,w,c
  8366  001542  EC40  F00C         	call	_I2C_Write
  8367                           
  8368                           ;I2C_Support.c: 52: I2C_Write(Address);
  8369  001546  5014               	movf	DS3231_Read_Time@Address,w,c
  8370  001548  EC40  F00C         	call	_I2C_Write
  8371                           
  8372                           ;I2C_Support.c: 53: I2C_ReStart();
  8373  00154C  EC53  F00D         	call	_I2C_ReStart	;wreg free
  8374                           
  8375                           ;I2C_Support.c: 54: I2C_Write((Device << 1) | 1);
  8376  001550  80D8               	bsf	status,0,c
  8377  001552  3415               	rlcf	DS3231_Read_Time@Device,w,c
  8378  001554  EC40  F00C         	call	_I2C_Write
  8379                           
  8380                           ;I2C_Support.c: 56: second = I2C_Read(1);
  8381  001558  0E01               	movlw	1
  8382  00155A  ECBC  F00B         	call	_I2C_Read
  8383  00155E  6E61               	movwf	_second,c
  8384                           
  8385                           ;I2C_Support.c: 57: minute = I2C_Read(1);
  8386  001560  0E01               	movlw	1
  8387  001562  ECBC  F00B         	call	_I2C_Read
  8388  001566  6E5D               	movwf	_minute,c
  8389                           
  8390                           ;I2C_Support.c: 58: hour = I2C_Read(1);
  8391  001568  0E01               	movlw	1
  8392  00156A  ECBC  F00B         	call	_I2C_Read
  8393  00156E  6E5B               	movwf	_hour,c
  8394                           
  8395                           ;I2C_Support.c: 59: dow = I2C_Read(1);
  8396  001570  0E01               	movlw	1
  8397  001572  ECBC  F00B         	call	_I2C_Read
  8398  001576  6E59               	movwf	_dow,c
  8399                           
  8400                           ;I2C_Support.c: 60: day = I2C_Read(1);
  8401  001578  0E01               	movlw	1
  8402  00157A  ECBC  F00B         	call	_I2C_Read
  8403  00157E  6E58               	movwf	_day,c
  8404                           
  8405                           ;I2C_Support.c: 61: month = I2C_Read(1);
  8406  001580  0E01               	movlw	1
  8407  001582  ECBC  F00B         	call	_I2C_Read
  8408  001586  6E5E               	movwf	_month,c
  8409                           
  8410                           ;I2C_Support.c: 62: year = I2C_Read(0);
  8411  001588  0E00               	movlw	0
  8412  00158A  ECBC  F00B         	call	_I2C_Read
  8413  00158E  6E6D               	movwf	_year,c
  8414                           
  8415                           ;I2C_Support.c: 64: I2C_Stop();
  8416  001590  EC84  F00D         	call	_I2C_Stop	;wreg free
  8417  001594  0012               	return		;funcret
  8418  001596                     __end_of_DS3231_Read_Time:
  8419                           	opt stack 0
  8420                           tblptru	equ	0xFF8
  8421                           tblptrh	equ	0xFF7
  8422                           tblptrl	equ	0xFF6
  8423                           tablat	equ	0xFF5
  8424                           prodh	equ	0xFF4
  8425                           prodl	equ	0xFF3
  8426                           intcon	equ	0xFF2
  8427                           intcon2	equ	0xFF1
  8428                           postinc0	equ	0xFEE
  8429                           wreg	equ	0xFE8
  8430                           postdec1	equ	0xFE5
  8431                           fsr1l	equ	0xFE1
  8432                           indf2	equ	0xFDF
  8433                           postinc2	equ	0xFDE
  8434                           postdec2	equ	0xFDD
  8435                           fsr2h	equ	0xFDA
  8436                           fsr2l	equ	0xFD9
  8437                           status	equ	0xFD8
  8438                           
  8439 ;; *************** function _DS1621_Read_Temp *****************
  8440 ;; Defined at:
  8441 ;;		line 29 in file "I2C_Support.c"
  8442 ;; Parameters:    Size  Location     Type
  8443 ;;		None
  8444 ;; Auto vars:     Size  Location     Type
  8445 ;;  Device          1   23[COMRAM] unsigned char 
  8446 ;;  Data_Ret        1   22[COMRAM] unsigned char 
  8447 ;;  Cmd             1   21[COMRAM] unsigned char 
  8448 ;; Return value:  Size  Location     Type
  8449 ;;                  2   19[COMRAM] int 
  8450 ;; Registers used:
  8451 ;;		wreg, status,2, status,0, cstack
  8452 ;; Tracked objects:
  8453 ;;		On entry : 0/0
  8454 ;;		On exit  : 0/0
  8455 ;;		Unchanged: 0/0
  8456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8457 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8458 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8459 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8460 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8461 ;;Total ram usage:        5 bytes
  8462 ;; Hardware stack levels used:    1
  8463 ;; Hardware stack levels required when called:    6
  8464 ;; This function calls:
  8465 ;;		_I2C_ReStart
  8466 ;;		_I2C_Read
  8467 ;;		_I2C_Start
  8468 ;;		_I2C_Stop
  8469 ;;		_I2C_Write
  8470 ;; This function is called by:
  8471 ;;		_main
  8472 ;; This function uses a non-reentrant model
  8473 ;;
  8474                           
  8475                           	psect	text46
  8476  0018BE                     __ptext46:
  8477                           	opt stack 0
  8478  0018BE                     _DS1621_Read_Temp:
  8479                           	opt stack 24
  8480                           
  8481                           ;I2C_Support.c: 31: char Device = 0x48;
  8482                           
  8483                           ;incstack = 0
  8484  0018BE  0E48               	movlw	72
  8485  0018C0  6E18               	movwf	DS1621_Read_Temp@Device,c
  8486                           
  8487                           ;I2C_Support.c: 32: char Cmd = 0xAA;
  8488  0018C2  0EAA               	movlw	170
  8489  0018C4  6E16               	movwf	DS1621_Read_Temp@Cmd,c
  8490                           
  8491                           ;I2C_Support.c: 34: char Data_Ret;
  8492                           ;I2C_Support.c: 35: I2C_Start();
  8493  0018C6  EC8D  F00D         	call	_I2C_Start	;wreg free
  8494                           
  8495                           ;I2C_Support.c: 36: I2C_Write((Device << 1) | 0);
  8496  0018CA  5018               	movf	DS1621_Read_Temp@Device,w,c
  8497  0018CC  2418               	addwf	DS1621_Read_Temp@Device,w,c
  8498  0018CE  EC40  F00C         	call	_I2C_Write
  8499                           
  8500                           ;I2C_Support.c: 37: I2C_Write(Cmd);
  8501  0018D2  5016               	movf	DS1621_Read_Temp@Cmd,w,c
  8502  0018D4  EC40  F00C         	call	_I2C_Write
  8503                           
  8504                           ;I2C_Support.c: 38: I2C_ReStart();
  8505  0018D8  EC53  F00D         	call	_I2C_ReStart	;wreg free
  8506                           
  8507                           ;I2C_Support.c: 39: I2C_Write((Device << 1) | 1);
  8508  0018DC  80D8               	bsf	status,0,c
  8509  0018DE  3418               	rlcf	DS1621_Read_Temp@Device,w,c
  8510  0018E0  EC40  F00C         	call	_I2C_Write
  8511                           
  8512                           ;I2C_Support.c: 40: Data_Ret = I2C_Read(0);
  8513  0018E4  0E00               	movlw	0
  8514  0018E6  ECBC  F00B         	call	_I2C_Read
  8515  0018EA  6E17               	movwf	DS1621_Read_Temp@Data_Ret,c
  8516                           
  8517                           ;I2C_Support.c: 41: I2C_Stop();
  8518  0018EC  EC84  F00D         	call	_I2C_Stop	;wreg free
  8519                           
  8520                           ;I2C_Support.c: 42: return Data_Ret;
  8521  0018F0  C017  F014         	movff	DS1621_Read_Temp@Data_Ret,?_DS1621_Read_Temp
  8522  0018F4  6A15               	clrf	?_DS1621_Read_Temp+1,c
  8523  0018F6  D000               	goto	l205
  8524  0018F8                     l205:
  8525  0018F8  0012               	return		;funcret
  8526  0018FA                     __end_of_DS1621_Read_Temp:
  8527                           	opt stack 0
  8528                           tblptru	equ	0xFF8
  8529                           tblptrh	equ	0xFF7
  8530                           tblptrl	equ	0xFF6
  8531                           tablat	equ	0xFF5
  8532                           prodh	equ	0xFF4
  8533                           prodl	equ	0xFF3
  8534                           intcon	equ	0xFF2
  8535                           intcon2	equ	0xFF1
  8536                           postinc0	equ	0xFEE
  8537                           wreg	equ	0xFE8
  8538                           postdec1	equ	0xFE5
  8539                           fsr1l	equ	0xFE1
  8540                           indf2	equ	0xFDF
  8541                           postinc2	equ	0xFDE
  8542                           postdec2	equ	0xFDD
  8543                           fsr2h	equ	0xFDA
  8544                           fsr2l	equ	0xFD9
  8545                           status	equ	0xFD8
  8546                           
  8547 ;; *************** function _I2C_Write *****************
  8548 ;; Defined at:
  8549 ;;		line 41 in file "I2C.c"
  8550 ;; Parameters:    Size  Location     Type
  8551 ;;  outByte         1    wreg     unsigned char 
  8552 ;; Auto vars:     Size  Location     Type
  8553 ;;  outByte         1   16[COMRAM] unsigned char 
  8554 ;;  n               1   17[COMRAM] unsigned char 
  8555 ;; Return value:  Size  Location     Type
  8556 ;;		None               void
  8557 ;; Registers used:
  8558 ;;		wreg, status,2, status,0, cstack
  8559 ;; Tracked objects:
  8560 ;;		On entry : 0/0
  8561 ;;		On exit  : 0/0
  8562 ;;		Unchanged: 0/0
  8563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8564 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8565 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8566 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8567 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8568 ;;Total ram usage:        2 bytes
  8569 ;; Hardware stack levels used:    1
  8570 ;; Hardware stack levels required when called:    4
  8571 ;; This function calls:
  8572 ;;		_i2cHighScl
  8573 ;;		_i2cHighSda
  8574 ;;		_i2cLowScl
  8575 ;;		_i2cLowSda
  8576 ;; This function is called by:
  8577 ;;		_I2C_Write_Cmd_Only
  8578 ;;		_I2C_Write_Cmd_Write_Data
  8579 ;;		_DS1621_Read_Temp
  8580 ;;		_DS3231_Read_Time
  8581 ;;		_DS3231_Setup_Time
  8582 ;;		_I2C_Write_Address_Read_One_Byte
  8583 ;;		_I2C_Write_Address_Write_One_Byte
  8584 ;;		_I2C_Write_Cmd_Read_One_Byte
  8585 ;; This function uses a non-reentrant model
  8586 ;;
  8587                           
  8588                           	psect	text47
  8589  001880                     __ptext47:
  8590                           	opt stack 0
  8591  001880                     _I2C_Write:
  8592                           	opt stack 23
  8593                           
  8594                           ;incstack = 0
  8595                           ;I2C_Write@outByte stored from wreg
  8596  001880  6E11               	movwf	I2C_Write@outByte,c
  8597                           
  8598                           ;I2C.c: 43: unsigned char n;
  8599                           ;I2C.c: 44: for(n=0; n<8; n++)
  8600  001882  0E00               	movlw	0
  8601  001884  6E12               	movwf	I2C_Write@n,c
  8602  001886                     l4213:
  8603  001886  0E07               	movlw	7
  8604  001888  6412               	cpfsgt	I2C_Write@n,c
  8605  00188A  D001               	goto	l153
  8606  00188C  D011               	goto	l4231
  8607  00188E                     l153:
  8608                           
  8609                           ;I2C.c: 45: {
  8610                           ;I2C.c: 46: if(outByte&0x80) i2cHighSda();
  8611  00188E  AE11               	btfss	I2C_Write@outByte,7,c
  8612  001890  D003               	goto	l4219
  8613  001892  ECE0  F00D         	call	_i2cHighSda	;wreg free
  8614  001896  D003               	goto	l4221
  8615  001898                     l4219:
  8616                           
  8617                           ;I2C.c: 47: else i2cLowSda();
  8618  001898  ECD3  F00D         	call	_i2cLowSda	;wreg free
  8619  00189C  D000               	goto	l4221
  8620  00189E                     l4221:
  8621                           
  8622                           ;I2C.c: 48: i2cHighScl();
  8623  00189E  ECBD  F00D         	call	_i2cHighScl	;wreg free
  8624                           
  8625                           ;I2C.c: 49: i2cLowScl();
  8626  0018A2  ECDC  F00D         	call	_i2cLowScl	;wreg free
  8627                           
  8628                           ;I2C.c: 50: outByte = outByte << 1;
  8629  0018A6  5011               	movf	I2C_Write@outByte,w,c
  8630  0018A8  2411               	addwf	I2C_Write@outByte,w,c
  8631  0018AA  6E11               	movwf	I2C_Write@outByte,c
  8632  0018AC  2A12               	incf	I2C_Write@n,f,c
  8633  0018AE  D7EB               	goto	l4213
  8634  0018B0                     l4231:
  8635                           
  8636                           ;I2C.c: 51: }
  8637                           ;I2C.c: 52: i2cHighSda();
  8638  0018B0  ECE0  F00D         	call	_i2cHighSda	;wreg free
  8639                           
  8640                           ;I2C.c: 53: i2cHighScl();
  8641  0018B4  ECBD  F00D         	call	_i2cHighScl	;wreg free
  8642                           
  8643                           ;I2C.c: 54: i2cLowScl();
  8644  0018B8  ECDC  F00D         	call	_i2cLowScl	;wreg free
  8645  0018BC  0012               	return		;funcret
  8646  0018BE                     __end_of_I2C_Write:
  8647                           	opt stack 0
  8648                           tblptru	equ	0xFF8
  8649                           tblptrh	equ	0xFF7
  8650                           tblptrl	equ	0xFF6
  8651                           tablat	equ	0xFF5
  8652                           prodh	equ	0xFF4
  8653                           prodl	equ	0xFF3
  8654                           intcon	equ	0xFF2
  8655                           intcon2	equ	0xFF1
  8656                           postinc0	equ	0xFEE
  8657                           wreg	equ	0xFE8
  8658                           postdec1	equ	0xFE5
  8659                           fsr1l	equ	0xFE1
  8660                           indf2	equ	0xFDF
  8661                           postinc2	equ	0xFDE
  8662                           postdec2	equ	0xFDD
  8663                           fsr2h	equ	0xFDA
  8664                           fsr2l	equ	0xFD9
  8665                           status	equ	0xFD8
  8666                           
  8667 ;; *************** function _I2C_Stop *****************
  8668 ;; Defined at:
  8669 ;;		line 88 in file "I2C.c"
  8670 ;; Parameters:    Size  Location     Type
  8671 ;;		None
  8672 ;; Auto vars:     Size  Location     Type
  8673 ;;		None
  8674 ;; Return value:  Size  Location     Type
  8675 ;;		None               void
  8676 ;; Registers used:
  8677 ;;		wreg, cstack
  8678 ;; Tracked objects:
  8679 ;;		On entry : 0/0
  8680 ;;		On exit  : 0/0
  8681 ;;		Unchanged: 0/0
  8682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8683 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8684 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8685 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8686 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8687 ;;Total ram usage:        0 bytes
  8688 ;; Hardware stack levels used:    1
  8689 ;; Hardware stack levels required when called:    4
  8690 ;; This function calls:
  8691 ;;		_i2cHighScl
  8692 ;;		_i2cHighSda
  8693 ;;		_i2cLowScl
  8694 ;;		_i2cLowSda
  8695 ;; This function is called by:
  8696 ;;		_I2C_Write_Cmd_Only
  8697 ;;		_I2C_Write_Cmd_Write_Data
  8698 ;;		_DS1621_Read_Temp
  8699 ;;		_DS3231_Read_Time
  8700 ;;		_DS3231_Setup_Time
  8701 ;;		_I2C_Write_Address_Read_One_Byte
  8702 ;;		_I2C_Write_Address_Write_One_Byte
  8703 ;;		_I2C_Write_Cmd_Read_One_Byte
  8704 ;; This function uses a non-reentrant model
  8705 ;;
  8706                           
  8707                           	psect	text48
  8708  001B08                     __ptext48:
  8709                           	opt stack 0
  8710  001B08                     _I2C_Stop:
  8711                           	opt stack 23
  8712                           
  8713                           ;I2C.c: 90: i2cLowScl();
  8714                           
  8715                           ;incstack = 0
  8716  001B08  ECDC  F00D         	call	_i2cLowScl	;wreg free
  8717                           
  8718                           ;I2C.c: 91: i2cLowSda();
  8719  001B0C  ECD3  F00D         	call	_i2cLowSda	;wreg free
  8720                           
  8721                           ;I2C.c: 92: i2cHighScl();
  8722  001B10  ECBD  F00D         	call	_i2cHighScl	;wreg free
  8723                           
  8724                           ;I2C.c: 93: i2cHighSda();
  8725  001B14  ECE0  F00D         	call	_i2cHighSda	;wreg free
  8726  001B18  0012               	return		;funcret
  8727  001B1A                     __end_of_I2C_Stop:
  8728                           	opt stack 0
  8729                           tblptru	equ	0xFF8
  8730                           tblptrh	equ	0xFF7
  8731                           tblptrl	equ	0xFF6
  8732                           tablat	equ	0xFF5
  8733                           prodh	equ	0xFF4
  8734                           prodl	equ	0xFF3
  8735                           intcon	equ	0xFF2
  8736                           intcon2	equ	0xFF1
  8737                           postinc0	equ	0xFEE
  8738                           wreg	equ	0xFE8
  8739                           postdec1	equ	0xFE5
  8740                           fsr1l	equ	0xFE1
  8741                           indf2	equ	0xFDF
  8742                           postinc2	equ	0xFDE
  8743                           postdec2	equ	0xFDD
  8744                           fsr2h	equ	0xFDA
  8745                           fsr2l	equ	0xFD9
  8746                           status	equ	0xFD8
  8747                           
  8748 ;; *************** function _I2C_Start *****************
  8749 ;; Defined at:
  8750 ;;		line 71 in file "I2C.c"
  8751 ;; Parameters:    Size  Location     Type
  8752 ;;		None
  8753 ;; Auto vars:     Size  Location     Type
  8754 ;;		None
  8755 ;; Return value:  Size  Location     Type
  8756 ;;		None               void
  8757 ;; Registers used:
  8758 ;;		wreg, cstack
  8759 ;; Tracked objects:
  8760 ;;		On entry : 0/0
  8761 ;;		On exit  : 0/0
  8762 ;;		Unchanged: 0/0
  8763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8764 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8765 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8766 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8767 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8768 ;;Total ram usage:        0 bytes
  8769 ;; Hardware stack levels used:    1
  8770 ;; Hardware stack levels required when called:    4
  8771 ;; This function calls:
  8772 ;;		_i2cHighScl
  8773 ;;		_i2cHighSda
  8774 ;;		_i2cLowScl
  8775 ;;		_i2cLowSda
  8776 ;; This function is called by:
  8777 ;;		_I2C_Write_Cmd_Only
  8778 ;;		_I2C_Write_Cmd_Write_Data
  8779 ;;		_DS1621_Read_Temp
  8780 ;;		_DS3231_Read_Time
  8781 ;;		_DS3231_Setup_Time
  8782 ;;		_I2C_Write_Address_Read_One_Byte
  8783 ;;		_I2C_Write_Address_Write_One_Byte
  8784 ;;		_I2C_Write_Cmd_Read_One_Byte
  8785 ;; This function uses a non-reentrant model
  8786 ;;
  8787                           
  8788                           	psect	text49
  8789  001B1A                     __ptext49:
  8790                           	opt stack 0
  8791  001B1A                     _I2C_Start:
  8792                           	opt stack 23
  8793                           
  8794                           ;I2C.c: 73: i2cHighSda();
  8795                           
  8796                           ;incstack = 0
  8797  001B1A  ECE0  F00D         	call	_i2cHighSda	;wreg free
  8798                           
  8799                           ;I2C.c: 74: i2cHighScl();
  8800  001B1E  ECBD  F00D         	call	_i2cHighScl	;wreg free
  8801                           
  8802                           ;I2C.c: 75: i2cLowSda();
  8803  001B22  ECD3  F00D         	call	_i2cLowSda	;wreg free
  8804                           
  8805                           ;I2C.c: 76: i2cLowScl();
  8806  001B26  ECDC  F00D         	call	_i2cLowScl	;wreg free
  8807  001B2A  0012               	return		;funcret
  8808  001B2C                     __end_of_I2C_Start:
  8809                           	opt stack 0
  8810                           tblptru	equ	0xFF8
  8811                           tblptrh	equ	0xFF7
  8812                           tblptrl	equ	0xFF6
  8813                           tablat	equ	0xFF5
  8814                           prodh	equ	0xFF4
  8815                           prodl	equ	0xFF3
  8816                           intcon	equ	0xFF2
  8817                           intcon2	equ	0xFF1
  8818                           postinc0	equ	0xFEE
  8819                           wreg	equ	0xFE8
  8820                           postdec1	equ	0xFE5
  8821                           fsr1l	equ	0xFE1
  8822                           indf2	equ	0xFDF
  8823                           postinc2	equ	0xFDE
  8824                           postdec2	equ	0xFDD
  8825                           fsr2h	equ	0xFDA
  8826                           fsr2l	equ	0xFD9
  8827                           status	equ	0xFD8
  8828                           
  8829 ;; *************** function _I2C_Read *****************
  8830 ;; Defined at:
  8831 ;;		line 20 in file "I2C.c"
  8832 ;; Parameters:    Size  Location     Type
  8833 ;;  ack             1    wreg     unsigned char 
  8834 ;; Auto vars:     Size  Location     Type
  8835 ;;  ack             1   16[COMRAM] unsigned char 
  8836 ;;  inByte          1   18[COMRAM] unsigned char 
  8837 ;;  n               1   17[COMRAM] unsigned char 
  8838 ;; Return value:  Size  Location     Type
  8839 ;;                  1    wreg      unsigned char 
  8840 ;; Registers used:
  8841 ;;		wreg, status,2, status,0, cstack
  8842 ;; Tracked objects:
  8843 ;;		On entry : 0/0
  8844 ;;		On exit  : 0/0
  8845 ;;		Unchanged: 0/0
  8846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8847 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8848 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8849 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8850 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8851 ;;Total ram usage:        3 bytes
  8852 ;; Hardware stack levels used:    1
  8853 ;; Hardware stack levels required when called:    5
  8854 ;; This function calls:
  8855 ;;		_i2cAck
  8856 ;;		_i2cHighScl
  8857 ;;		_i2cHighSda
  8858 ;;		_i2cLowScl
  8859 ;;		_i2cNack
  8860 ;; This function is called by:
  8861 ;;		_DS1621_Read_Temp
  8862 ;;		_DS3231_Read_Time
  8863 ;;		_I2C_Write_Address_Read_One_Byte
  8864 ;;		_I2C_Write_Cmd_Read_One_Byte
  8865 ;; This function uses a non-reentrant model
  8866 ;;
  8867                           
  8868                           	psect	text50
  8869  001778                     __ptext50:
  8870                           	opt stack 0
  8871  001778                     _I2C_Read:
  8872                           	opt stack 24
  8873                           
  8874                           ;incstack = 0
  8875                           ;I2C_Read@ack stored from wreg
  8876  001778  6E11               	movwf	I2C_Read@ack,c
  8877                           
  8878                           ;I2C.c: 22: unsigned char inByte, n;
  8879                           ;I2C.c: 23: i2cHighSda();
  8880  00177A  ECE0  F00D         	call	_i2cHighSda	;wreg free
  8881                           
  8882                           ;I2C.c: 24: for (n=0; n<8; n++)
  8883  00177E  0E00               	movlw	0
  8884  001780  6E12               	movwf	I2C_Read@n,c
  8885  001782                     l4599:
  8886  001782  0E07               	movlw	7
  8887  001784  6412               	cpfsgt	I2C_Read@n,c
  8888  001786  D001               	goto	l4603
  8889  001788  D00F               	goto	l4617
  8890  00178A                     l4603:
  8891                           
  8892                           ;I2C.c: 25: {
  8893                           ;I2C.c: 26: i2cHighScl();
  8894  00178A  ECBD  F00D         	call	_i2cHighScl	;wreg free
  8895                           
  8896                           ;I2C.c: 28: if (PORTCbits.RC1)
  8897  00178E  A282               	btfss	3970,1,c	;volatile
  8898  001790  D003               	goto	l4609
  8899                           
  8900                           ;I2C.c: 29: inByte = (inByte << 1) | 0x01;
  8901  001792  80D8               	bsf	status,0,c
  8902  001794  3613               	rlcf	I2C_Read@inByte,f,c
  8903  001796  D004               	goto	l4611
  8904  001798                     l4609:
  8905                           
  8906                           ;I2C.c: 30: else
  8907                           ;I2C.c: 31: inByte = inByte << 1;
  8908  001798  5013               	movf	I2C_Read@inByte,w,c
  8909  00179A  2413               	addwf	I2C_Read@inByte,w,c
  8910  00179C  6E13               	movwf	I2C_Read@inByte,c
  8911  00179E  D000               	goto	l4611
  8912  0017A0                     l4611:
  8913                           
  8914                           ;I2C.c: 32: i2cLowScl();
  8915  0017A0  ECDC  F00D         	call	_i2cLowScl	;wreg free
  8916  0017A4  2A12               	incf	I2C_Read@n,f,c
  8917  0017A6  D7ED               	goto	l4599
  8918  0017A8                     l4617:
  8919                           
  8920                           ;I2C.c: 33: }
  8921                           ;I2C.c: 34: if (ack) i2cAck();
  8922  0017A8  5011               	movf	I2C_Read@ack,w,c
  8923  0017AA  B4D8               	btfsc	status,2,c
  8924  0017AC  D003               	goto	l4621
  8925  0017AE  EC96  F00D         	call	_i2cAck	;wreg free
  8926  0017B2  D003               	goto	l4623
  8927  0017B4                     l4621:
  8928                           
  8929                           ;I2C.c: 35: else i2cNack();
  8930  0017B4  ECCE  F00D         	call	_i2cNack	;wreg free
  8931  0017B8  D000               	goto	l4623
  8932  0017BA                     l4623:
  8933                           
  8934                           ;I2C.c: 38: return(inByte);
  8935  0017BA  5013               	movf	I2C_Read@inByte,w,c
  8936  0017BC  D000               	goto	l150
  8937  0017BE                     l150:
  8938  0017BE  0012               	return		;funcret
  8939  0017C0                     __end_of_I2C_Read:
  8940                           	opt stack 0
  8941                           tblptru	equ	0xFF8
  8942                           tblptrh	equ	0xFF7
  8943                           tblptrl	equ	0xFF6
  8944                           tablat	equ	0xFF5
  8945                           prodh	equ	0xFF4
  8946                           prodl	equ	0xFF3
  8947                           intcon	equ	0xFF2
  8948                           intcon2	equ	0xFF1
  8949                           postinc0	equ	0xFEE
  8950                           wreg	equ	0xFE8
  8951                           postdec1	equ	0xFE5
  8952                           fsr1l	equ	0xFE1
  8953                           indf2	equ	0xFDF
  8954                           postinc2	equ	0xFDE
  8955                           postdec2	equ	0xFDD
  8956                           fsr2h	equ	0xFDA
  8957                           fsr2l	equ	0xFD9
  8958                           status	equ	0xFD8
  8959                           
  8960 ;; *************** function _i2cNack *****************
  8961 ;; Defined at:
  8962 ;;		line 57 in file "I2C.c"
  8963 ;; Parameters:    Size  Location     Type
  8964 ;;		None
  8965 ;; Auto vars:     Size  Location     Type
  8966 ;;		None
  8967 ;; Return value:  Size  Location     Type
  8968 ;;		None               void
  8969 ;; Registers used:
  8970 ;;		wreg, cstack
  8971 ;; Tracked objects:
  8972 ;;		On entry : 0/0
  8973 ;;		On exit  : 0/0
  8974 ;;		Unchanged: 0/0
  8975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8976 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8977 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8978 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8979 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8980 ;;Total ram usage:        0 bytes
  8981 ;; Hardware stack levels used:    1
  8982 ;; Hardware stack levels required when called:    4
  8983 ;; This function calls:
  8984 ;;		_i2cHighScl
  8985 ;;		_i2cLowScl
  8986 ;; This function is called by:
  8987 ;;		_I2C_Read
  8988 ;; This function uses a non-reentrant model
  8989 ;;
  8990                           
  8991                           	psect	text51
  8992  001B9C                     __ptext51:
  8993                           	opt stack 0
  8994  001B9C                     _i2cNack:
  8995                           	opt stack 24
  8996                           
  8997                           ;I2C.c: 59: i2cHighScl();
  8998                           
  8999                           ;incstack = 0
  9000  001B9C  ECBD  F00D         	call	_i2cHighScl	;wreg free
  9001                           
  9002                           ;I2C.c: 60: i2cLowScl();
  9003  001BA0  ECDC  F00D         	call	_i2cLowScl	;wreg free
  9004  001BA4  0012               	return		;funcret
  9005  001BA6                     __end_of_i2cNack:
  9006                           	opt stack 0
  9007                           tblptru	equ	0xFF8
  9008                           tblptrh	equ	0xFF7
  9009                           tblptrl	equ	0xFF6
  9010                           tablat	equ	0xFF5
  9011                           prodh	equ	0xFF4
  9012                           prodl	equ	0xFF3
  9013                           intcon	equ	0xFF2
  9014                           intcon2	equ	0xFF1
  9015                           postinc0	equ	0xFEE
  9016                           wreg	equ	0xFE8
  9017                           postdec1	equ	0xFE5
  9018                           fsr1l	equ	0xFE1
  9019                           indf2	equ	0xFDF
  9020                           postinc2	equ	0xFDE
  9021                           postdec2	equ	0xFDD
  9022                           fsr2h	equ	0xFDA
  9023                           fsr2l	equ	0xFD9
  9024                           status	equ	0xFD8
  9025                           
  9026 ;; *************** function _i2cAck *****************
  9027 ;; Defined at:
  9028 ;;		line 63 in file "I2C.c"
  9029 ;; Parameters:    Size  Location     Type
  9030 ;;		None
  9031 ;; Auto vars:     Size  Location     Type
  9032 ;;		None
  9033 ;; Return value:  Size  Location     Type
  9034 ;;		None               void
  9035 ;; Registers used:
  9036 ;;		wreg, cstack
  9037 ;; Tracked objects:
  9038 ;;		On entry : 0/0
  9039 ;;		On exit  : 0/0
  9040 ;;		Unchanged: 0/0
  9041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9042 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9043 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9044 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9045 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9046 ;;Total ram usage:        0 bytes
  9047 ;; Hardware stack levels used:    1
  9048 ;; Hardware stack levels required when called:    4
  9049 ;; This function calls:
  9050 ;;		_i2cHighScl
  9051 ;;		_i2cHighSda
  9052 ;;		_i2cLowScl
  9053 ;;		_i2cLowSda
  9054 ;; This function is called by:
  9055 ;;		_I2C_Read
  9056 ;; This function uses a non-reentrant model
  9057 ;;
  9058                           
  9059                           	psect	text52
  9060  001B2C                     __ptext52:
  9061                           	opt stack 0
  9062  001B2C                     _i2cAck:
  9063                           	opt stack 24
  9064                           
  9065                           ;I2C.c: 65: i2cLowSda();
  9066                           
  9067                           ;incstack = 0
  9068  001B2C  ECD3  F00D         	call	_i2cLowSda	;wreg free
  9069                           
  9070                           ;I2C.c: 66: i2cHighScl();
  9071  001B30  ECBD  F00D         	call	_i2cHighScl	;wreg free
  9072                           
  9073                           ;I2C.c: 67: i2cLowScl();
  9074  001B34  ECDC  F00D         	call	_i2cLowScl	;wreg free
  9075                           
  9076                           ;I2C.c: 68: i2cHighSda();
  9077  001B38  ECE0  F00D         	call	_i2cHighSda	;wreg free
  9078  001B3C  0012               	return		;funcret
  9079  001B3E                     __end_of_i2cAck:
  9080                           	opt stack 0
  9081                           tblptru	equ	0xFF8
  9082                           tblptrh	equ	0xFF7
  9083                           tblptrl	equ	0xFF6
  9084                           tablat	equ	0xFF5
  9085                           prodh	equ	0xFF4
  9086                           prodl	equ	0xFF3
  9087                           intcon	equ	0xFF2
  9088                           intcon2	equ	0xFF1
  9089                           postinc0	equ	0xFEE
  9090                           wreg	equ	0xFE8
  9091                           postdec1	equ	0xFE5
  9092                           fsr1l	equ	0xFE1
  9093                           indf2	equ	0xFDF
  9094                           postinc2	equ	0xFDE
  9095                           postdec2	equ	0xFDD
  9096                           fsr2h	equ	0xFDA
  9097                           fsr2l	equ	0xFD9
  9098                           status	equ	0xFD8
  9099                           
  9100 ;; *************** function _I2C_ReStart *****************
  9101 ;; Defined at:
  9102 ;;		line 79 in file "I2C.c"
  9103 ;; Parameters:    Size  Location     Type
  9104 ;;		None
  9105 ;; Auto vars:     Size  Location     Type
  9106 ;;		None
  9107 ;; Return value:  Size  Location     Type
  9108 ;;		None               void
  9109 ;; Registers used:
  9110 ;;		wreg, cstack
  9111 ;; Tracked objects:
  9112 ;;		On entry : 0/0
  9113 ;;		On exit  : 0/0
  9114 ;;		Unchanged: 0/0
  9115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9116 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9117 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9118 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9119 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9120 ;;Total ram usage:        0 bytes
  9121 ;; Hardware stack levels used:    1
  9122 ;; Hardware stack levels required when called:    4
  9123 ;; This function calls:
  9124 ;;		_i2cHighScl
  9125 ;;		_i2cHighSda
  9126 ;;		_i2cLowScl
  9127 ;;		_i2cLowSda
  9128 ;; This function is called by:
  9129 ;;		_DS1621_Read_Temp
  9130 ;;		_DS3231_Read_Time
  9131 ;;		_I2C_Write_Address_Read_One_Byte
  9132 ;;		_I2C_Write_Cmd_Read_One_Byte
  9133 ;; This function uses a non-reentrant model
  9134 ;;
  9135                           
  9136                           	psect	text53
  9137  001AA6                     __ptext53:
  9138                           	opt stack 0
  9139  001AA6                     _I2C_ReStart:
  9140                           	opt stack 25
  9141                           
  9142                           ;I2C.c: 81: i2cLowScl();
  9143                           
  9144                           ;incstack = 0
  9145  001AA6  ECDC  F00D         	call	_i2cLowScl	;wreg free
  9146                           
  9147                           ;I2C.c: 82: i2cHighSda();
  9148  001AAA  ECE0  F00D         	call	_i2cHighSda	;wreg free
  9149                           
  9150                           ;I2C.c: 83: i2cHighScl();
  9151  001AAE  ECBD  F00D         	call	_i2cHighScl	;wreg free
  9152                           
  9153                           ;I2C.c: 84: i2cLowSda();
  9154  001AB2  ECD3  F00D         	call	_i2cLowSda	;wreg free
  9155                           
  9156                           ;I2C.c: 85: i2cLowScl();
  9157  001AB6  ECDC  F00D         	call	_i2cLowScl	;wreg free
  9158  001ABA  0012               	return		;funcret
  9159  001ABC                     __end_of_I2C_ReStart:
  9160                           	opt stack 0
  9161                           tblptru	equ	0xFF8
  9162                           tblptrh	equ	0xFF7
  9163                           tblptrl	equ	0xFF6
  9164                           tablat	equ	0xFF5
  9165                           prodh	equ	0xFF4
  9166                           prodl	equ	0xFF3
  9167                           intcon	equ	0xFF2
  9168                           intcon2	equ	0xFF1
  9169                           postinc0	equ	0xFEE
  9170                           wreg	equ	0xFE8
  9171                           postdec1	equ	0xFE5
  9172                           fsr1l	equ	0xFE1
  9173                           indf2	equ	0xFDF
  9174                           postinc2	equ	0xFDE
  9175                           postdec2	equ	0xFDD
  9176                           fsr2h	equ	0xFDA
  9177                           fsr2l	equ	0xFD9
  9178                           status	equ	0xFD8
  9179                           
  9180 ;; *************** function _i2cLowSda *****************
  9181 ;; Defined at:
  9182 ;;		line 102 in file "I2C.c"
  9183 ;; Parameters:    Size  Location     Type
  9184 ;;		None
  9185 ;; Auto vars:     Size  Location     Type
  9186 ;;		None
  9187 ;; Return value:  Size  Location     Type
  9188 ;;		None               void
  9189 ;; Registers used:
  9190 ;;		None
  9191 ;; Tracked objects:
  9192 ;;		On entry : 0/0
  9193 ;;		On exit  : 0/0
  9194 ;;		Unchanged: 0/0
  9195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9196 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9197 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9198 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9199 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9200 ;;Total ram usage:        0 bytes
  9201 ;; Hardware stack levels used:    1
  9202 ;; Hardware stack levels required when called:    3
  9203 ;; This function calls:
  9204 ;;		Nothing
  9205 ;; This function is called by:
  9206 ;;		_I2C_Write
  9207 ;;		_i2cAck
  9208 ;;		_I2C_Start
  9209 ;;		_I2C_ReStart
  9210 ;;		_I2C_Stop
  9211 ;; This function uses a non-reentrant model
  9212 ;;
  9213                           
  9214                           	psect	text54
  9215  001BA6                     __ptext54:
  9216                           	opt stack 0
  9217  001BA6                     _i2cLowSda:
  9218                           	opt stack 23
  9219                           
  9220                           ;I2C.c: 104: PORTCbits.RC1 = 0;
  9221                           
  9222                           ;incstack = 0
  9223  001BA6  9282               	bcf	3970,1,c	;volatile
  9224                           
  9225                           ;I2C.c: 105: TRISCbits.RC1 = 0;
  9226  001BA8  9294               	bcf	3988,1,c	;volatile
  9227                           
  9228                           ;I2C.c: 106: _delay((unsigned long)((2)*(8000000/4000000.0)));
  9229  001BAA  D000               	nop2		;2 cycle nop
  9230  001BAC  D000               	nop2		;2 cycle nop
  9231  001BAE  0012               	return		;funcret
  9232  001BB0                     __end_of_i2cLowSda:
  9233                           	opt stack 0
  9234                           tblptru	equ	0xFF8
  9235                           tblptrh	equ	0xFF7
  9236                           tblptrl	equ	0xFF6
  9237                           tablat	equ	0xFF5
  9238                           prodh	equ	0xFF4
  9239                           prodl	equ	0xFF3
  9240                           intcon	equ	0xFF2
  9241                           intcon2	equ	0xFF1
  9242                           postinc0	equ	0xFEE
  9243                           wreg	equ	0xFE8
  9244                           postdec1	equ	0xFE5
  9245                           fsr1l	equ	0xFE1
  9246                           indf2	equ	0xFDF
  9247                           postinc2	equ	0xFDE
  9248                           postdec2	equ	0xFDD
  9249                           fsr2h	equ	0xFDA
  9250                           fsr2l	equ	0xFD9
  9251                           status	equ	0xFD8
  9252                           
  9253 ;; *************** function _i2cLowScl *****************
  9254 ;; Defined at:
  9255 ;;		line 115 in file "I2C.c"
  9256 ;; Parameters:    Size  Location     Type
  9257 ;;		None
  9258 ;; Auto vars:     Size  Location     Type
  9259 ;;		None
  9260 ;; Return value:  Size  Location     Type
  9261 ;;		None               void
  9262 ;; Registers used:
  9263 ;;		None
  9264 ;; Tracked objects:
  9265 ;;		On entry : 0/0
  9266 ;;		On exit  : 0/0
  9267 ;;		Unchanged: 0/0
  9268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9269 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9270 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9271 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9272 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9273 ;;Total ram usage:        0 bytes
  9274 ;; Hardware stack levels used:    1
  9275 ;; Hardware stack levels required when called:    3
  9276 ;; This function calls:
  9277 ;;		Nothing
  9278 ;; This function is called by:
  9279 ;;		_I2C_Read
  9280 ;;		_I2C_Write
  9281 ;;		_i2cNack
  9282 ;;		_i2cAck
  9283 ;;		_I2C_Start
  9284 ;;		_I2C_ReStart
  9285 ;;		_I2C_Stop
  9286 ;; This function uses a non-reentrant model
  9287 ;;
  9288                           
  9289                           	psect	text55
  9290  001BB8                     __ptext55:
  9291                           	opt stack 0
  9292  001BB8                     _i2cLowScl:
  9293                           	opt stack 23
  9294                           
  9295                           ;I2C.c: 117: PORTCbits.RC0 = 0;
  9296                           
  9297                           ;incstack = 0
  9298  001BB8  9082               	bcf	3970,0,c	;volatile
  9299                           
  9300                           ;I2C.c: 118: TRISCbits.RC0 = 0;
  9301  001BBA  9094               	bcf	3988,0,c	;volatile
  9302                           
  9303                           ;I2C.c: 119: _delay((unsigned long)((1)*(8000000/4000000.0)));
  9304  001BBC  D000               	nop2		;2 cycle nop
  9305  001BBE  0012               	return		;funcret
  9306  001BC0                     __end_of_i2cLowScl:
  9307                           	opt stack 0
  9308                           tblptru	equ	0xFF8
  9309                           tblptrh	equ	0xFF7
  9310                           tblptrl	equ	0xFF6
  9311                           tablat	equ	0xFF5
  9312                           prodh	equ	0xFF4
  9313                           prodl	equ	0xFF3
  9314                           intcon	equ	0xFF2
  9315                           intcon2	equ	0xFF1
  9316                           postinc0	equ	0xFEE
  9317                           wreg	equ	0xFE8
  9318                           postdec1	equ	0xFE5
  9319                           fsr1l	equ	0xFE1
  9320                           indf2	equ	0xFDF
  9321                           postinc2	equ	0xFDE
  9322                           postdec2	equ	0xFDD
  9323                           fsr2h	equ	0xFDA
  9324                           fsr2l	equ	0xFD9
  9325                           status	equ	0xFD8
  9326                           
  9327 ;; *************** function _i2cHighSda *****************
  9328 ;; Defined at:
  9329 ;;		line 96 in file "I2C.c"
  9330 ;; Parameters:    Size  Location     Type
  9331 ;;		None
  9332 ;; Auto vars:     Size  Location     Type
  9333 ;;		None
  9334 ;; Return value:  Size  Location     Type
  9335 ;;		None               void
  9336 ;; Registers used:
  9337 ;;		None
  9338 ;; Tracked objects:
  9339 ;;		On entry : 0/0
  9340 ;;		On exit  : 0/0
  9341 ;;		Unchanged: 0/0
  9342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9343 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9344 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9345 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9346 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9347 ;;Total ram usage:        0 bytes
  9348 ;; Hardware stack levels used:    1
  9349 ;; Hardware stack levels required when called:    3
  9350 ;; This function calls:
  9351 ;;		Nothing
  9352 ;; This function is called by:
  9353 ;;		_I2C_Init
  9354 ;;		_I2C_Read
  9355 ;;		_I2C_Write
  9356 ;;		_i2cAck
  9357 ;;		_I2C_Start
  9358 ;;		_I2C_ReStart
  9359 ;;		_I2C_Stop
  9360 ;; This function uses a non-reentrant model
  9361 ;;
  9362                           
  9363                           	psect	text56
  9364  001BC0                     __ptext56:
  9365                           	opt stack 0
  9366  001BC0                     _i2cHighSda:
  9367                           	opt stack 25
  9368                           
  9369                           ;I2C.c: 98: TRISCbits.RC1 = 1;
  9370                           
  9371                           ;incstack = 0
  9372  001BC0  8294               	bsf	3988,1,c	;volatile
  9373                           
  9374                           ;I2C.c: 99: _delay((unsigned long)((2)*(8000000/4000000.0)));
  9375  001BC2  D000               	nop2		;2 cycle nop
  9376  001BC4  D000               	nop2		;2 cycle nop
  9377  001BC6  0012               	return		;funcret
  9378  001BC8                     __end_of_i2cHighSda:
  9379                           	opt stack 0
  9380                           tblptru	equ	0xFF8
  9381                           tblptrh	equ	0xFF7
  9382                           tblptrl	equ	0xFF6
  9383                           tablat	equ	0xFF5
  9384                           prodh	equ	0xFF4
  9385                           prodl	equ	0xFF3
  9386                           intcon	equ	0xFF2
  9387                           intcon2	equ	0xFF1
  9388                           postinc0	equ	0xFEE
  9389                           wreg	equ	0xFE8
  9390                           postdec1	equ	0xFE5
  9391                           fsr1l	equ	0xFE1
  9392                           indf2	equ	0xFDF
  9393                           postinc2	equ	0xFDE
  9394                           postdec2	equ	0xFDD
  9395                           fsr2h	equ	0xFDA
  9396                           fsr2l	equ	0xFD9
  9397                           status	equ	0xFD8
  9398                           
  9399 ;; *************** function _i2cHighScl *****************
  9400 ;; Defined at:
  9401 ;;		line 109 in file "I2C.c"
  9402 ;; Parameters:    Size  Location     Type
  9403 ;;		None
  9404 ;; Auto vars:     Size  Location     Type
  9405 ;;		None
  9406 ;; Return value:  Size  Location     Type
  9407 ;;		None               void
  9408 ;; Registers used:
  9409 ;;		wreg
  9410 ;; Tracked objects:
  9411 ;;		On entry : 0/0
  9412 ;;		On exit  : 0/0
  9413 ;;		Unchanged: 0/0
  9414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9415 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9416 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9417 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9418 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9419 ;;Total ram usage:        0 bytes
  9420 ;; Hardware stack levels used:    1
  9421 ;; Hardware stack levels required when called:    3
  9422 ;; This function calls:
  9423 ;;		Nothing
  9424 ;; This function is called by:
  9425 ;;		_I2C_Init
  9426 ;;		_I2C_Read
  9427 ;;		_I2C_Write
  9428 ;;		_i2cNack
  9429 ;;		_i2cAck
  9430 ;;		_I2C_Start
  9431 ;;		_I2C_ReStart
  9432 ;;		_I2C_Stop
  9433 ;; This function uses a non-reentrant model
  9434 ;;
  9435                           
  9436                           	psect	text57
  9437  001B7A                     __ptext57:
  9438                           	opt stack 0
  9439  001B7A                     _i2cHighScl:
  9440                           	opt stack 25
  9441                           
  9442                           ;I2C.c: 111: TRISCbits.RC0 = 1;
  9443                           
  9444                           ;incstack = 0
  9445  001B7A  8094               	bsf	3988,0,c	;volatile
  9446                           
  9447                           ;I2C.c: 112: _delay((unsigned long)((10)*(8000000/4000000.0)));
  9448  001B7C  0E06               	movlw	6
  9449  001B7E                     u3957:
  9450  001B7E  2EE8               	decfsz	wreg,f,c
  9451  001B80  D7FE               	goto	u3957
  9452  001B82  D000               	nop2		;nop
  9453  001B84  0012               	return		;funcret
  9454  001B86                     __end_of_i2cHighScl:
  9455                           	opt stack 0
  9456                           tblptru	equ	0xFF8
  9457                           tblptrh	equ	0xFF7
  9458                           tblptrl	equ	0xFF6
  9459                           tablat	equ	0xFF5
  9460                           prodh	equ	0xFF4
  9461                           prodl	equ	0xFF3
  9462                           intcon	equ	0xFF2
  9463                           intcon2	equ	0xFF1
  9464                           postinc0	equ	0xFEE
  9465                           wreg	equ	0xFE8
  9466                           postdec1	equ	0xFE5
  9467                           fsr1l	equ	0xFE1
  9468                           indf2	equ	0xFDF
  9469                           postinc2	equ	0xFDE
  9470                           postdec2	equ	0xFDD
  9471                           fsr2h	equ	0xFDA
  9472                           fsr2l	equ	0xFD9
  9473                           status	equ	0xFD8
  9474                           
  9475 ;; *************** function _chkisr *****************
  9476 ;; Defined at:
  9477 ;;		line 28 in file "Interrupt.c"
  9478 ;; Parameters:    Size  Location     Type
  9479 ;;		None
  9480 ;; Auto vars:     Size  Location     Type
  9481 ;;		None
  9482 ;; Return value:  Size  Location     Type
  9483 ;;		None               void
  9484 ;; Registers used:
  9485 ;;		wreg, status,2, status,0, cstack
  9486 ;; Tracked objects:
  9487 ;;		On entry : 0/0
  9488 ;;		On exit  : 0/0
  9489 ;;		Unchanged: 0/0
  9490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9491 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9492 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9493 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9494 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9495 ;;Total ram usage:       14 bytes
  9496 ;; Hardware stack levels used:    1
  9497 ;; Hardware stack levels required when called:    2
  9498 ;; This function calls:
  9499 ;;		_INT0_isr
  9500 ;;		_TIMER1_isr
  9501 ;; This function is called by:
  9502 ;;		Interrupt level 2
  9503 ;; This function uses a non-reentrant model
  9504 ;;
  9505                           
  9506                           	psect	intcode
  9507  000008                     __pintcode:
  9508                           	opt stack 0
  9509  000008                     _chkisr:
  9510                           	opt stack 19
  9511                           
  9512                           ;incstack = 0
  9513  000008  CFFA F003          	movff	pclath,??_chkisr
  9514  00000C  CFFB F004          	movff	pclatu,??_chkisr+1
  9515  000010  CFE9 F005          	movff	fsr0l,??_chkisr+2
  9516  000014  ED7B  F009         	call	int_func,f	;refresh shadow registers
  9517                           pclatu	equ	0xFFB
  9518                           pclath	equ	0xFFA
  9519                           tblptru	equ	0xFF8
  9520                           tblptrh	equ	0xFF7
  9521                           tblptrl	equ	0xFF6
  9522                           tablat	equ	0xFF5
  9523                           prodh	equ	0xFF4
  9524                           prodl	equ	0xFF3
  9525                           intcon	equ	0xFF2
  9526                           intcon2	equ	0xFF1
  9527                           postinc0	equ	0xFEE
  9528                           fsr0l	equ	0xFE9
  9529                           wreg	equ	0xFE8
  9530                           postdec1	equ	0xFE5
  9531                           fsr1l	equ	0xFE1
  9532                           indf2	equ	0xFDF
  9533                           postinc2	equ	0xFDE
  9534                           postdec2	equ	0xFDD
  9535                           fsr2h	equ	0xFDA
  9536                           fsr2l	equ	0xFD9
  9537                           status	equ	0xFD8
  9538                           
  9539                           	psect	intcode_body
  9540  0012F6                     __pintcode_body:
  9541                           	opt stack 19
  9542  0012F6                     int_func:
  9543                           	opt stack 19
  9544  0012F6  0006               	pop		; remove dummy address from shadow register refresh
  9545  0012F8  CFEA F006          	movff	fsr0h,??_chkisr+3
  9546  0012FC  CFE1 F007          	movff	fsr1l,??_chkisr+4
  9547  001300  CFE2 F008          	movff	fsr1h,??_chkisr+5
  9548  001304  CFD9 F009          	movff	fsr2l,??_chkisr+6
  9549  001308  CFDA F00A          	movff	fsr2h,??_chkisr+7
  9550  00130C  CFF3 F00B          	movff	prodl,??_chkisr+8
  9551  001310  CFF4 F00C          	movff	prodh,??_chkisr+9
  9552  001314  CFF6 F00D          	movff	tblptrl,??_chkisr+10
  9553  001318  CFF7 F00E          	movff	tblptrh,??_chkisr+11
  9554  00131C  CFF8 F00F          	movff	tblptru,??_chkisr+12
  9555  001320  CFF5 F010          	movff	tablat,??_chkisr+13
  9556                           
  9557                           ;Interrupt.c: 30: if (PIR1bits.TMR1IF == 1) TIMER1_isr();
  9558  001324  A09E               	btfss	3998,0,c	;volatile
  9559  001326  D003               	goto	i2l2429
  9560  001328  ECC3  F00D         	call	_TIMER1_isr	;wreg free
  9561  00132C  D000               	goto	i2l2429
  9562  00132E                     i2l2429:
  9563                           
  9564                           ;Interrupt.c: 31: if (INTCONbits.INT0IF == 1) INT0_isr();
  9565  00132E  A2F2               	btfss	intcon,1,c	;volatile
  9566  001330  D003               	goto	i2l223
  9567  001332  EC6E  F004         	call	_INT0_isr	;wreg free
  9568  001336  D000               	goto	i2l223
  9569  001338                     i2l223:
  9570  001338  C010  FFF5         	movff	??_chkisr+13,tablat
  9571  00133C  C00F  FFF8         	movff	??_chkisr+12,tblptru
  9572  001340  C00E  FFF7         	movff	??_chkisr+11,tblptrh
  9573  001344  C00D  FFF6         	movff	??_chkisr+10,tblptrl
  9574  001348  C00C  FFF4         	movff	??_chkisr+9,prodh
  9575  00134C  C00B  FFF3         	movff	??_chkisr+8,prodl
  9576  001350  C00A  FFDA         	movff	??_chkisr+7,fsr2h
  9577  001354  C009  FFD9         	movff	??_chkisr+6,fsr2l
  9578  001358  C008  FFE2         	movff	??_chkisr+5,fsr1h
  9579  00135C  C007  FFE1         	movff	??_chkisr+4,fsr1l
  9580  001360  C006  FFEA         	movff	??_chkisr+3,fsr0h
  9581  001364  C005  FFE9         	movff	??_chkisr+2,fsr0l
  9582  001368  C004  FFFB         	movff	??_chkisr+1,pclatu
  9583  00136C  C003  FFFA         	movff	??_chkisr,pclath
  9584  001370  0011               	retfie		f
  9585  001372                     __end_of_chkisr:
  9586                           	opt stack 0
  9587                           pclatu	equ	0xFFB
  9588                           pclath	equ	0xFFA
  9589                           tblptru	equ	0xFF8
  9590                           tblptrh	equ	0xFF7
  9591                           tblptrl	equ	0xFF6
  9592                           tablat	equ	0xFF5
  9593                           prodh	equ	0xFF4
  9594                           prodl	equ	0xFF3
  9595                           intcon	equ	0xFF2
  9596                           intcon2	equ	0xFF1
  9597                           postinc0	equ	0xFEE
  9598                           fsr0h	equ	0xFEA
  9599                           fsr0l	equ	0xFE9
  9600                           wreg	equ	0xFE8
  9601                           postdec1	equ	0xFE5
  9602                           fsr1h	equ	0xFE2
  9603                           fsr1l	equ	0xFE1
  9604                           indf2	equ	0xFDF
  9605                           postinc2	equ	0xFDE
  9606                           postdec2	equ	0xFDD
  9607                           fsr2h	equ	0xFDA
  9608                           fsr2l	equ	0xFD9
  9609                           status	equ	0xFD8
  9610                           
  9611 ;; *************** function _TIMER1_isr *****************
  9612 ;; Defined at:
  9613 ;;		line 34 in file "Interrupt.c"
  9614 ;; Parameters:    Size  Location     Type
  9615 ;;		None
  9616 ;; Auto vars:     Size  Location     Type
  9617 ;;		None
  9618 ;; Return value:  Size  Location     Type
  9619 ;;		None               void
  9620 ;; Registers used:
  9621 ;;		wreg, status,2
  9622 ;; Tracked objects:
  9623 ;;		On entry : 0/0
  9624 ;;		On exit  : 0/0
  9625 ;;		Unchanged: 0/0
  9626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9627 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9628 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9629 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9630 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9631 ;;Total ram usage:        0 bytes
  9632 ;; Hardware stack levels used:    1
  9633 ;; This function calls:
  9634 ;;		Nothing
  9635 ;; This function is called by:
  9636 ;;		_chkisr
  9637 ;; This function uses a non-reentrant model
  9638 ;;
  9639                           
  9640                           	psect	text59
  9641  001B86                     __ptext59:
  9642                           	opt stack 0
  9643  001B86                     _TIMER1_isr:
  9644                           	opt stack 20
  9645                           
  9646                           ;Interrupt.c: 36: Nec_state = 0;
  9647                           
  9648                           ;incstack = 0
  9649  001B86  0E00               	movlw	0
  9650  001B88  6E4F               	movwf	_Nec_state,c
  9651                           
  9652                           ;Interrupt.c: 37: INTCON2bits.INTEDG0 = 0;
  9653  001B8A  9CF1               	bcf	intcon2,6,c	;volatile
  9654                           
  9655                           ;Interrupt.c: 38: T1CONbits.TMR1ON = 0;
  9656  001B8C  90CD               	bcf	4045,0,c	;volatile
  9657                           
  9658                           ;Interrupt.c: 39: PIR1bits.TMR1IF = 0;
  9659  001B8E  909E               	bcf	3998,0,c	;volatile
  9660  001B90  0012               	return		;funcret
  9661  001B92                     __end_of_TIMER1_isr:
  9662                           	opt stack 0
  9663                           pclatu	equ	0xFFB
  9664                           pclath	equ	0xFFA
  9665                           tblptru	equ	0xFF8
  9666                           tblptrh	equ	0xFF7
  9667                           tblptrl	equ	0xFF6
  9668                           tablat	equ	0xFF5
  9669                           prodh	equ	0xFF4
  9670                           prodl	equ	0xFF3
  9671                           intcon	equ	0xFF2
  9672                           intcon2	equ	0xFF1
  9673                           postinc0	equ	0xFEE
  9674                           fsr0h	equ	0xFEA
  9675                           fsr0l	equ	0xFE9
  9676                           wreg	equ	0xFE8
  9677                           postdec1	equ	0xFE5
  9678                           fsr1h	equ	0xFE2
  9679                           fsr1l	equ	0xFE1
  9680                           indf2	equ	0xFDF
  9681                           postinc2	equ	0xFDE
  9682                           postdec2	equ	0xFDD
  9683                           fsr2h	equ	0xFDA
  9684                           fsr2l	equ	0xFD9
  9685                           status	equ	0xFD8
  9686                           
  9687 ;; *************** function _INT0_isr *****************
  9688 ;; Defined at:
  9689 ;;		line 48 in file "Interrupt.c"
  9690 ;; Parameters:    Size  Location     Type
  9691 ;;		None
  9692 ;; Auto vars:     Size  Location     Type
  9693 ;;		None
  9694 ;; Return value:  Size  Location     Type
  9695 ;;		None               void
  9696 ;; Registers used:
  9697 ;;		wreg, status,2, status,0, cstack
  9698 ;; Tracked objects:
  9699 ;;		On entry : 0/0
  9700 ;;		On exit  : 0/0
  9701 ;;		Unchanged: 0/0
  9702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9703 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9704 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9705 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9706 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9707 ;;Total ram usage:        2 bytes
  9708 ;; Hardware stack levels used:    1
  9709 ;; Hardware stack levels required when called:    1
  9710 ;; This function calls:
  9711 ;;		_force_nec_state0
  9712 ;; This function is called by:
  9713 ;;		_chkisr
  9714 ;; This function uses a non-reentrant model
  9715 ;;
  9716                           
  9717                           	psect	text60
  9718  0008DC                     __ptext60:
  9719                           	opt stack 0
  9720  0008DC                     _INT0_isr:
  9721                           	opt stack 19
  9722                           
  9723                           ;Interrupt.c: 51: INTCONbits.INT0IF = 0;
  9724                           
  9725                           ;incstack = 0
  9726  0008DC  92F2               	bcf	intcon,1,c	;volatile
  9727                           
  9728                           ;Interrupt.c: 52: if (Nec_state != 0)
  9729  0008DE  504F               	movf	_Nec_state,w,c
  9730  0008E0  B4D8               	btfsc	status,2,c
  9731  0008E2  D09A               	goto	i2l2099
  9732                           
  9733                           ;Interrupt.c: 53: {
  9734                           ;Interrupt.c: 54: Time_Elapsed = (TMR1H << 8) | TMR1L;
  9735  0008E4  50CE               	movf	4046,w,c	;volatile
  9736  0008E6  CFCF F001          	movff	4047,??_INT0_isr	;volatile
  9737  0008EA  6A02               	clrf	(??_INT0_isr+1)& (0+255),c
  9738  0008EC  C001  F002         	movff	??_INT0_isr,??_INT0_isr+1
  9739  0008F0  6A01               	clrf	??_INT0_isr,c
  9740  0008F2  1001               	iorwf	??_INT0_isr,w,c
  9741  0008F4  6E45               	movwf	_Time_Elapsed,c
  9742  0008F6  5002               	movf	??_INT0_isr+1,w,c
  9743  0008F8  6E46               	movwf	_Time_Elapsed+1,c
  9744                           
  9745                           ;Interrupt.c: 55: TMR1H = 0;
  9746  0008FA  0E00               	movlw	0
  9747  0008FC  6ECF               	movwf	4047,c	;volatile
  9748                           
  9749                           ;Interrupt.c: 56: TMR1L = 0;
  9750  0008FE  0E00               	movlw	0
  9751  000900  6ECE               	movwf	4046,c	;volatile
  9752                           
  9753                           ;Interrupt.c: 57: }
  9754                           ;Interrupt.c: 59: switch(Nec_state)
  9755  000902  D08A               	goto	i2l2099
  9756  000904                     i2l2033:
  9757                           
  9758                           ;Interrupt.c: 62: {
  9759                           ;Interrupt.c: 63: TMR1H = 0;
  9760  000904  0E00               	movlw	0
  9761  000906  6ECF               	movwf	4047,c	;volatile
  9762                           
  9763                           ;Interrupt.c: 64: TMR1L = 0;
  9764  000908  0E00               	movlw	0
  9765  00090A  6ECE               	movwf	4046,c	;volatile
  9766                           
  9767                           ;Interrupt.c: 65: PIR1bits.TMR1IF = 0;
  9768  00090C  909E               	bcf	3998,0,c	;volatile
  9769                           
  9770                           ;Interrupt.c: 66: T1CON= 0x90;
  9771  00090E  0E90               	movlw	144
  9772  000910  6ECD               	movwf	4045,c	;volatile
  9773                           
  9774                           ;Interrupt.c: 67: T1CONbits.TMR1ON = 1;
  9775  000912  80CD               	bsf	4045,0,c	;volatile
  9776                           
  9777                           ;Interrupt.c: 68: bit_count = 0;
  9778  000914  0E00               	movlw	0
  9779  000916  6E56               	movwf	_bit_count,c
  9780                           
  9781                           ;Interrupt.c: 69: Nec_code = 0;
  9782  000918  0E00               	movlw	0
  9783  00091A  6E41               	movwf	_Nec_code,c
  9784  00091C  0E00               	movlw	0
  9785  00091E  6E42               	movwf	_Nec_code+1,c
  9786  000920  0E00               	movlw	0
  9787  000922  6E43               	movwf	_Nec_code+2,c
  9788  000924  0E00               	movlw	0
  9789  000926  6E44               	movwf	_Nec_code+3,c
  9790                           
  9791                           ;Interrupt.c: 70: Nec_state = 1;
  9792  000928  0E01               	movlw	1
  9793  00092A  6E4F               	movwf	_Nec_state,c
  9794  00092C  D073               	goto	i2l2093
  9795                           
  9796                           ;Interrupt.c: 72: return;
  9797                           
  9798                           ;Interrupt.c: 71: INTCON2bits.INTEDG0 = 1;
  9799  00092E  D085               	goto	i2l235
  9800  000930                     i2l2043:
  9801                           
  9802                           ;Interrupt.c: 76: {
  9803                           ;Interrupt.c: 77: if (Time_Elapsed > 8500 && Time_Elapsed < 9500)
  9804  000930  0E35               	movlw	53
  9805  000932  5C45               	subwf	_Time_Elapsed,w,c
  9806  000934  0E21               	movlw	33
  9807  000936  5846               	subwfb	_Time_Elapsed+1,w,c
  9808  000938  A0D8               	btfss	status,0,c
  9809  00093A  D009               	goto	i2l2049
  9810  00093C  0E1C               	movlw	28
  9811  00093E  5C45               	subwf	_Time_Elapsed,w,c
  9812  000940  0E25               	movlw	37
  9813  000942  5846               	subwfb	_Time_Elapsed+1,w,c
  9814  000944  B0D8               	btfsc	status,0,c
  9815  000946  D003               	goto	i2l2049
  9816                           
  9817                           ;Interrupt.c: 78: {
  9818                           ;Interrupt.c: 79: Nec_state = 2;
  9819  000948  0E02               	movlw	2
  9820  00094A  6E4F               	movwf	_Nec_state,c
  9821                           
  9822                           ;Interrupt.c: 80: }
  9823  00094C  D02A               	goto	i2l2075
  9824  00094E                     i2l2049:
  9825                           
  9826                           ;Interrupt.c: 81: else
  9827                           ;Interrupt.c: 82: {
  9828                           ;Interrupt.c: 83: force_nec_state0();
  9829  00094E  ECE4  F00D         	call	_force_nec_state0	;wreg free
  9830  000952  D027               	goto	i2l2075
  9831  000954  D026               	goto	i2l2075
  9832                           
  9833                           ;Interrupt.c: 86: return;
  9834                           
  9835                           ;Interrupt.c: 84: }
  9836                           ;Interrupt.c: 85: INTCON2bits.INTEDG0 = 0;
  9837  000956  D071               	goto	i2l235
  9838  000958                     i2l2055:
  9839                           
  9840                           ;Interrupt.c: 90: {
  9841                           ;Interrupt.c: 91: if (Time_Elapsed > 4000 && Time_Elapsed < 5000 )
  9842  000958  0EA1               	movlw	161
  9843  00095A  5C45               	subwf	_Time_Elapsed,w,c
  9844  00095C  0E0F               	movlw	15
  9845  00095E  5846               	subwfb	_Time_Elapsed+1,w,c
  9846  000960  A0D8               	btfss	status,0,c
  9847  000962  D009               	goto	i2l2061
  9848  000964  0E88               	movlw	136
  9849  000966  5C45               	subwf	_Time_Elapsed,w,c
  9850  000968  0E13               	movlw	19
  9851  00096A  5846               	subwfb	_Time_Elapsed+1,w,c
  9852  00096C  B0D8               	btfsc	status,0,c
  9853  00096E  D003               	goto	i2l2061
  9854  000970                     
  9855                           ;Interrupt.c: 92: {
  9856                           ;Interrupt.c: 93: Nec_state = 3;
  9857  000970  0E03               	movlw	3
  9858  000972  6E4F               	movwf	_Nec_state,c
  9859                           
  9860                           ;Interrupt.c: 94: }
  9861  000974  D04F               	goto	i2l2093
  9862  000976                     i2l2061:
  9863                           
  9864                           ;Interrupt.c: 95: else
  9865                           ;Interrupt.c: 96: {
  9866                           ;Interrupt.c: 97: force_nec_state0();
  9867  000976  ECE4  F00D         	call	_force_nec_state0	;wreg free
  9868  00097A  D04C               	goto	i2l2093
  9869  00097C  D04B               	goto	i2l2093
  9870                           
  9871                           ;Interrupt.c: 100: return;
  9872                           
  9873                           ;Interrupt.c: 98: }
  9874                           ;Interrupt.c: 99: INTCON2bits.INTEDG0 = 1;
  9875  00097E  D05D               	goto	i2l235
  9876  000980                     i2l2067:
  9877                           
  9878                           ;Interrupt.c: 104: {
  9879                           ;Interrupt.c: 105: if (Time_Elapsed > 400 && Time_Elapsed < 700)
  9880  000980  0E91               	movlw	145
  9881  000982  5C45               	subwf	_Time_Elapsed,w,c
  9882  000984  0E01               	movlw	1
  9883  000986  5846               	subwfb	_Time_Elapsed+1,w,c
  9884  000988  A0D8               	btfss	status,0,c
  9885  00098A  D008               	goto	i2l2073
  9886  00098C  0EBC               	movlw	188
  9887  00098E  5C45               	subwf	_Time_Elapsed,w,c
  9888  000990  0E02               	movlw	2
  9889  000992  5846               	subwfb	_Time_Elapsed+1,w,c
  9890  000994  B0D8               	btfsc	status,0,c
  9891  000996  D002               	goto	i2l2073
  9892                           
  9893                           ;Interrupt.c: 106: {
  9894                           ;Interrupt.c: 107: Nec_state = 4;
  9895  000998  0E04               	movlw	4
  9896  00099A  D7D7               	goto	L4
  9897  00099C                     i2l2073:
  9898                           
  9899                           ;Interrupt.c: 109: else
  9900                           ;Interrupt.c: 110: {
  9901                           ;Interrupt.c: 111: force_nec_state0();
  9902  00099C  ECE4  F00D         	call	_force_nec_state0	;wreg free
  9903  0009A0  D000               	goto	i2l2075
  9904  0009A2                     i2l2075:
  9905                           
  9906                           ;Interrupt.c: 112: }
  9907                           ;Interrupt.c: 113: INTCON2bits.INTEDG0 = 0;
  9908  0009A2  9CF1               	bcf	intcon2,6,c	;volatile
  9909                           
  9910                           ;Interrupt.c: 114: return;
  9911  0009A4  D04A               	goto	i2l235
  9912  0009A6                     i2l2079:
  9913                           
  9914                           ;Interrupt.c: 118: {
  9915                           ;Interrupt.c: 119: if (Time_Elapsed > 400 && Time_Elapsed < 1800)
  9916  0009A6  0E91               	movlw	145
  9917  0009A8  5C45               	subwf	_Time_Elapsed,w,c
  9918  0009AA  0E01               	movlw	1
  9919  0009AC  5846               	subwfb	_Time_Elapsed+1,w,c
  9920  0009AE  A0D8               	btfss	status,0,c
  9921  0009B0  D02E               	goto	i2l2091
  9922  0009B2  0E08               	movlw	8
  9923  0009B4  5C45               	subwf	_Time_Elapsed,w,c
  9924  0009B6  0E07               	movlw	7
  9925  0009B8  5846               	subwfb	_Time_Elapsed+1,w,c
  9926  0009BA  B0D8               	btfsc	status,0,c
  9927  0009BC  D028               	goto	i2l2091
  9928                           
  9929                           ;Interrupt.c: 120: {
  9930                           ;Interrupt.c: 121: Nec_code = Nec_code << 1;
  9931  0009BE  90D8               	bcf	status,0,c
  9932  0009C0  3441               	rlcf	_Nec_code,w,c
  9933  0009C2  6E41               	movwf	_Nec_code,c
  9934  0009C4  3442               	rlcf	_Nec_code+1,w,c
  9935  0009C6  6E42               	movwf	_Nec_code+1,c
  9936  0009C8  3443               	rlcf	_Nec_code+2,w,c
  9937  0009CA  6E43               	movwf	_Nec_code+2,c
  9938  0009CC  3444               	rlcf	_Nec_code+3,w,c
  9939  0009CE  6E44               	movwf	_Nec_code+3,c
  9940                           
  9941                           ;Interrupt.c: 122: if (Time_Elapsed > 1000)
  9942  0009D0  0EE9               	movlw	233
  9943  0009D2  5C45               	subwf	_Time_Elapsed,w,c
  9944  0009D4  0E03               	movlw	3
  9945  0009D6  5846               	subwfb	_Time_Elapsed+1,w,c
  9946  0009D8  A0D8               	btfss	status,0,c
  9947  0009DA  D00C               	goto	i2l247
  9948                           
  9949                           ;Interrupt.c: 123: {
  9950                           ;Interrupt.c: 124: Nec_code = Nec_code + 1;
  9951  0009DC  0E01               	movlw	1
  9952  0009DE  2441               	addwf	_Nec_code,w,c
  9953  0009E0  6E41               	movwf	_Nec_code,c
  9954  0009E2  0E00               	movlw	0
  9955  0009E4  2042               	addwfc	_Nec_code+1,w,c
  9956  0009E6  6E42               	movwf	_Nec_code+1,c
  9957  0009E8  0E00               	movlw	0
  9958  0009EA  2043               	addwfc	_Nec_code+2,w,c
  9959  0009EC  6E43               	movwf	_Nec_code+2,c
  9960  0009EE  0E00               	movlw	0
  9961  0009F0  2044               	addwfc	_Nec_code+3,w,c
  9962  0009F2  6E44               	movwf	_Nec_code+3,c
  9963  0009F4                     i2l247:
  9964                           
  9965                           ;Interrupt.c: 125: }
  9966                           ;Interrupt.c: 126: bit_count = bit_count + 1;
  9967  0009F4  2856               	incf	_bit_count,w,c
  9968  0009F6  6E56               	movwf	_bit_count,c
  9969                           
  9970                           ;Interrupt.c: 127: if (bit_count > 31)
  9971  0009F8  0E1F               	movlw	31
  9972  0009FA  6456               	cpfsgt	_bit_count,c
  9973  0009FC  D7B9               	goto	L5
  9974                           
  9975                           ;Interrupt.c: 128: {
  9976                           ;Interrupt.c: 129: nec_ok = 1;
  9977  0009FE  0E00               	movlw	0
  9978  000A00  6E48               	movwf	_nec_ok+1,c
  9979  000A02  0E01               	movlw	1
  9980  000A04  6E47               	movwf	_nec_ok,c
  9981                           
  9982                           ;Interrupt.c: 130: INTCONbits.INT0IE = 0;
  9983  000A06  98F2               	bcf	intcon,4,c	;volatile
  9984                           
  9985                           ;Interrupt.c: 131: Nec_state = 0;
  9986  000A08  0E00               	movlw	0
  9987  000A0A  6E4F               	movwf	_Nec_state,c
  9988  000A0C  D7B1               	goto	L5
  9989  000A0E                     i2l2091:
  9990                           
  9991                           ;Interrupt.c: 135: else
  9992                           ;Interrupt.c: 136: {
  9993                           ;Interrupt.c: 137: force_nec_state0();
  9994  000A0E  ECE4  F00D         	call	_force_nec_state0	;wreg free
  9995  000A12  D000               	goto	i2l2093
  9996  000A14                     i2l2093:
  9997                           
  9998                           ;Interrupt.c: 138: }
  9999                           ;Interrupt.c: 139: INTCON2bits.INTEDG0 = 1;
 10000  000A14  8CF1               	bsf	intcon2,6,c	;volatile
 10001                           
 10002                           ;Interrupt.c: 141: }
 10003                           ;Interrupt.c: 142: }
 10004                           
 10005                           ;Interrupt.c: 140: return;
 10006  000A16  D011               	goto	i2l235
 10007  000A18                     i2l2099:
 10008  000A18  504F               	movf	_Nec_state,w,c
 10009                           
 10010                           ; Switch size 1, requested type "space"
 10011                           ; Number of cases is 5, Range of values is 0 to 4
 10012                           ; switch strategies available:
 10013                           ; Name         Instructions Cycles
 10014                           ; simple_byte           16     9 (average)
 10015                           ;	Chosen strategy is simple_byte
 10016  000A1A  0A00               	xorlw	0	; case 0
 10017  000A1C  B4D8               	btfsc	status,2,c
 10018  000A1E  D772               	goto	i2l2033
 10019  000A20  0A01               	xorlw	1	; case 1
 10020  000A22  B4D8               	btfsc	status,2,c
 10021  000A24  D785               	goto	i2l2043
 10022  000A26  0A03               	xorlw	3	; case 2
 10023  000A28  B4D8               	btfsc	status,2,c
 10024  000A2A  D796               	goto	i2l2055
 10025  000A2C  0A01               	xorlw	1	; case 3
 10026  000A2E  B4D8               	btfsc	status,2,c
 10027  000A30  D7A7               	goto	i2l2067
 10028  000A32  0A07               	xorlw	7	; case 4
 10029  000A34  B4D8               	btfsc	status,2,c
 10030  000A36  D7B7               	goto	i2l2079
 10031  000A38  D000               	goto	i2l235
 10032  000A3A                     i2l235:
 10033  000A3A  0012               	return		;funcret
 10034  000A3C                     __end_of_INT0_isr:
 10035                           	opt stack 0
 10036                           pclatu	equ	0xFFB
 10037                           pclath	equ	0xFFA
 10038                           tblptru	equ	0xFF8
 10039                           tblptrh	equ	0xFF7
 10040                           tblptrl	equ	0xFF6
 10041                           tablat	equ	0xFF5
 10042                           prodh	equ	0xFF4
 10043                           prodl	equ	0xFF3
 10044                           intcon	equ	0xFF2
 10045                           intcon2	equ	0xFF1
 10046                           postinc0	equ	0xFEE
 10047                           fsr0h	equ	0xFEA
 10048                           fsr0l	equ	0xFE9
 10049                           wreg	equ	0xFE8
 10050                           postdec1	equ	0xFE5
 10051                           fsr1h	equ	0xFE2
 10052                           fsr1l	equ	0xFE1
 10053                           indf2	equ	0xFDF
 10054                           postinc2	equ	0xFDE
 10055                           postdec2	equ	0xFDD
 10056                           fsr2h	equ	0xFDA
 10057                           fsr2l	equ	0xFD9
 10058                           status	equ	0xFD8
 10059                           
 10060 ;; *************** function _force_nec_state0 *****************
 10061 ;; Defined at:
 10062 ;;		line 42 in file "Interrupt.c"
 10063 ;; Parameters:    Size  Location     Type
 10064 ;;		None
 10065 ;; Auto vars:     Size  Location     Type
 10066 ;;		None
 10067 ;; Return value:  Size  Location     Type
 10068 ;;		None               void
 10069 ;; Registers used:
 10070 ;;		wreg, status,2
 10071 ;; Tracked objects:
 10072 ;;		On entry : 0/0
 10073 ;;		On exit  : 0/0
 10074 ;;		Unchanged: 0/0
 10075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10076 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10077 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10078 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10079 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10080 ;;Total ram usage:        0 bytes
 10081 ;; Hardware stack levels used:    1
 10082 ;; This function calls:
 10083 ;;		Nothing
 10084 ;; This function is called by:
 10085 ;;		_INT0_isr
 10086 ;; This function uses a non-reentrant model
 10087 ;;
 10088                           
 10089                           	psect	text61
 10090  001BC8                     __ptext61:
 10091                           	opt stack 0
 10092  001BC8                     _force_nec_state0:
 10093                           	opt stack 19
 10094                           
 10095                           ;Interrupt.c: 44: Nec_state=0;
 10096                           
 10097                           ;incstack = 0
 10098  001BC8  0E00               	movlw	0
 10099  001BCA  6E4F               	movwf	_Nec_state,c
 10100                           
 10101                           ;Interrupt.c: 45: T1CONbits.TMR1ON = 0;
 10102  001BCC  90CD               	bcf	4045,0,c	;volatile
 10103  001BCE  0012               	return		;funcret
 10104  001BD0                     __end_of_force_nec_state0:
 10105                           	opt stack 0
 10106                           pclatu	equ	0xFFB
 10107                           pclath	equ	0xFFA
 10108                           tblptru	equ	0xFF8
 10109                           tblptrh	equ	0xFF7
 10110                           tblptrl	equ	0xFF6
 10111                           tablat	equ	0xFF5
 10112                           prodh	equ	0xFF4
 10113                           prodl	equ	0xFF3
 10114                           intcon	equ	0xFF2
 10115                           intcon2	equ	0xFF1
 10116                           postinc0	equ	0xFEE
 10117                           fsr0h	equ	0xFEA
 10118                           fsr0l	equ	0xFE9
 10119                           wreg	equ	0xFE8
 10120                           postdec1	equ	0xFE5
 10121                           fsr1h	equ	0xFE2
 10122                           fsr1l	equ	0xFE1
 10123                           indf2	equ	0xFDF
 10124                           postinc2	equ	0xFDE
 10125                           postdec2	equ	0xFDD
 10126                           fsr2h	equ	0xFDA
 10127                           fsr2l	equ	0xFD9
 10128                           status	equ	0xFD8
 10129                           pclatu	equ	0xFFB
 10130                           pclath	equ	0xFFA
 10131                           tblptru	equ	0xFF8
 10132                           tblptrh	equ	0xFF7
 10133                           tblptrl	equ	0xFF6
 10134                           tablat	equ	0xFF5
 10135                           prodh	equ	0xFF4
 10136                           prodl	equ	0xFF3
 10137                           intcon	equ	0xFF2
 10138                           intcon2	equ	0xFF1
 10139                           postinc0	equ	0xFEE
 10140                           fsr0h	equ	0xFEA
 10141                           fsr0l	equ	0xFE9
 10142                           wreg	equ	0xFE8
 10143                           postdec1	equ	0xFE5
 10144                           fsr1h	equ	0xFE2
 10145                           fsr1l	equ	0xFE1
 10146                           indf2	equ	0xFDF
 10147                           postinc2	equ	0xFDE
 10148                           postdec2	equ	0xFDD
 10149                           fsr2h	equ	0xFDA
 10150                           fsr2l	equ	0xFD9
 10151                           status	equ	0xFD8
 10152                           
 10153                           	psect	rparam
 10154  0000                     pclatu	equ	0xFFB
 10155                           pclath	equ	0xFFA
 10156                           tblptru	equ	0xFF8
 10157                           tblptrh	equ	0xFF7
 10158                           tblptrl	equ	0xFF6
 10159                           tablat	equ	0xFF5
 10160                           prodh	equ	0xFF4
 10161                           prodl	equ	0xFF3
 10162                           intcon	equ	0xFF2
 10163                           intcon2	equ	0xFF1
 10164                           postinc0	equ	0xFEE
 10165                           fsr0h	equ	0xFEA
 10166                           fsr0l	equ	0xFE9
 10167                           wreg	equ	0xFE8
 10168                           postdec1	equ	0xFE5
 10169                           fsr1h	equ	0xFE2
 10170                           fsr1l	equ	0xFE1
 10171                           indf2	equ	0xFDF
 10172                           postinc2	equ	0xFDE
 10173                           postdec2	equ	0xFDD
 10174                           fsr2h	equ	0xFDA
 10175                           fsr2l	equ	0xFD9
 10176                           status	equ	0xFD8


Data Sizes:
    Strings     146
    Constant    547
    Data        159
    BSS         78
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     64     111
    BANK0           128     20     126
    BANK1           256      0      84
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 84
		 -> NULL(NULL[0]), buffer(BANK0[31]), txt1(BANK1[84]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 84
		 -> NULL(NULL[0]), buffer(BANK0[31]), txt1(BANK1[84]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_6(CODE[8]), STR_5(CODE[20]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 43
		 -> STR_4(CODE[6]), STR_3(CODE[22]), STR_2(CODE[43]), STR_1(CODE[30]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    txt	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 84
		 -> NULL(NULL[0]), buffer(BANK0[31]), txt1(BANK1[84]), 


Critical Paths under _main in COMRAM

    _main->_drawtext
    _printf->___llmod
    ___llmod->___lldiv
    _fillCircle->_fillCircleHelper
    _fillCircleHelper->_drawFastVLine
    _drawCircle->_drawPixel
    ___awdiv->___wmul
    _init_UART->_OpenUSART
    _Initialize_Screen->_drawtext
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _write_data->_spiwrite
    _write_command->_spiwrite
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul
    _DS1621_Init->_I2C_Write_Cmd_Write_Data
    _I2C_Write_Cmd_Write_Data->_I2C_Write
    _I2C_Write_Cmd_Only->_I2C_Write
    _DS3231_Setup_Time->_I2C_Write
    _DS3231_Read_Time->_I2C_Read
    _DS1621_Read_Temp->_I2C_Read

Critical Paths under _chkisr in COMRAM

    _chkisr->_INT0_isr

Critical Paths under _main in BANK0

    _main->_printf
    _Initialize_Screen->_drawtext

Critical Paths under _chkisr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _chkisr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _chkisr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _chkisr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _chkisr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _chkisr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _chkisr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _chkisr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _chkisr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _chkisr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _chkisr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _chkisr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _chkisr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _chkisr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _chkisr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _chkisr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0   57004
                                             13 BANK0      7     7      0
                   _DS1621_Read_Temp
                   _DS3231_Read_Time
                  _DS3231_Setup_Time
                            _Do_Init
                             _Do_LED
         _Wait_Half_Second_With_Beep
                            ___awdiv
                             ___wmul
                         _drawCircle
                           _drawtext
                         _fillCircle
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              40    26     14    3725
                                             38 COMRAM    18     4     14
                                              0 BANK0     13    13      0
                            ___lldiv
                            ___llmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      31
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             16 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     362
                                             29 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     501
                                             16 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _fillCircle                                           8     0      8    8344
                                              0 BANK0      8     0      8
                      _drawFastVLine
                   _fillCircleHelper
 ---------------------------------------------------------------------------------
 (2) _fillCircleHelper                                    24    12     12    4703
                                             34 COMRAM    24    12     12
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (1) _drawCircle                                          20    12      8    6484
                                             27 COMRAM    20    12      8
                          _drawPixel
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              8     4      4     705
                                             22 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Wait_Half_Second_With_Beep                           0     0      0       0
                    _Activate_Buzzer
                  _Deactivate_Buzzer
                   _Wait_Half_Second
 ---------------------------------------------------------------------------------
 (2) _Wait_Half_Second                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Deactivate_Buzzer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Activate_Buzzer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Do_LED                                               1     1      0      31
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Do_Init                                              0     0      0   22624
                        _DS1621_Init
                           _I2C_Init
                  _Initialize_Screen
                     _init_INTERRUPT
                          _init_UART
 ---------------------------------------------------------------------------------
 (2) _init_UART                                            0     0      0     375
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (3) _OpenUSART                                            3     1      2     375
                                             16 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _init_INTERRUPT                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Initialize_Screen                                    0     0      0   21503
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                           _drawtext
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _strcpy                                               6     2      4     369
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _fillScreen                                           2     0      2    2192
                                             35 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (4) _fillRectangle                                       12     7      5    2096
                                             23 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (1) _drawtext                                            17     9      8   12656
                                             56 COMRAM     8     0      8
                                              0 BANK0      9     9      0
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               6     4      2     195
                                             16 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _drawChar                                            11     4      7   10774
                                             45 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (3) _fillRect                                            11     6      5    3876
                                             34 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (3) _drawFastVLine                                       11     7      4    3102
                                             23 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (3) _drawPixel                                            4     1      3    4207
                                             23 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (4) _setAddrWindow                                        4     1      3    1034
                                             19 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _TFT_GreenTab_Initialize                              0     0      0    4364
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (4) _Rcmd3                                                0     0      0    2052
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (4) _Rcmd2red                                             0     0      0     130
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (4) _Rcmd1                                                0     0      0    2052
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (5) _write_data                                           1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (5) _write_command                                        1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (4) _spiwrite                                             2     2      0      34
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _LCD_Reset                                            0     0      0    1922
                           _delay_ms
 ---------------------------------------------------------------------------------
 (5) _delay_ms                                             6     4      2    1922
                                             22 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     882
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _I2C_Init                                             4     0      4      65
                                             16 COMRAM     4     0      4
                         _i2cHighScl
                         _i2cHighSda
 ---------------------------------------------------------------------------------
 (2) _DS1621_Init                                          1     1      0     681
                                             21 COMRAM     1     1      0
                 _I2C_Write_Cmd_Only
           _I2C_Write_Cmd_Write_Data
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Write_Data                             3     1      2     356
                                             18 COMRAM     3     1      2
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Only                                   2     1      1     260
                                             18 COMRAM     2     1      1
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DS3231_Setup_Time                                    2     2      0     201
                                             18 COMRAM     2     2      0
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DS3231_Read_Time                                     3     3      0     430
                                             19 COMRAM     2     2      0
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DS1621_Read_Temp                                     5     3      2     464
                                             19 COMRAM     5     3      2
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Write                                            2     2      0     133
                                             16 COMRAM     2     2      0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Stop                                             0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Start                                            0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (2) _I2C_Read                                             3     3      0     198
                                             16 COMRAM     3     3      0
                             _i2cAck
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                            _i2cNack
 ---------------------------------------------------------------------------------
 (3) _i2cNack                                              0     0      0       0
                         _i2cHighScl
                          _i2cLowScl
 ---------------------------------------------------------------------------------
 (3) _i2cAck                                               0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (2) _I2C_ReStart                                          0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (5) _i2cLowSda                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2cLowScl                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2cHighSda                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2cHighScl                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _chkisr                                             14    14      0       0
                                              2 COMRAM    14    14      0
                           _INT0_isr
                         _TIMER1_isr
 ---------------------------------------------------------------------------------
 (11) _TIMER1_isr                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _INT0_isr                                            2     2      0       0
                                              0 COMRAM     2     2      0
                   _force_nec_state0
 ---------------------------------------------------------------------------------
 (12) _force_nec_state0                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DS1621_Read_Temp
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Read_Time
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Setup_Time
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _Do_Init
     _DS1621_Init
       _I2C_Write_Cmd_Only
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Cmd_Write_Data
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _I2C_Init
       _i2cHighScl
       _i2cHighSda
     _Initialize_Screen
       _LCD_Reset
         _delay_ms
           ___wmul
       _TFT_GreenTab_Initialize
         _Rcmd1
           _delay_ms
             ___wmul
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _Rcmd2red
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _Rcmd3
           _delay_ms
             ___wmul
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
       _fillScreen
         _fillRectangle
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _strcpy
     _init_INTERRUPT
     _init_UART
       _OpenUSART
   _Do_LED
   _Wait_Half_Second_With_Beep
     _Activate_Buzzer
     _Deactivate_Buzzer
     _Wait_Half_Second
   ___awdiv
     ___wmul (ARG)
   ___wmul
   _drawCircle
     _drawPixel
       _setAddrWindow
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_data
         _spiwrite
   _drawtext
     _drawChar
       ___wmul
       _drawPixel
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_data
           _spiwrite
       _fillRect
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
     _strlen
   _fillCircle
     _drawFastVLine
       _setAddrWindow
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _spiwrite
     _fillCircleHelper
       _drawFastVLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
   _printf
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___wmul
     _isdigit
     _putch

 _chkisr (ROOT)
   _INT0_isr
     _force_nec_state0
   _TIMER1_isr

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      54       7       32.8%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     14      7E       5       98.4%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     40      6F       1       87.4%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     141      34        0.0%
DATA                 0      0     141       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Fri Oct 29 23:26:19 2021

                        drawCircle@f 002A                          drawCircle@r 0020  
                        drawCircle@x 002C                          drawCircle@y 002E  
                                  _i 005C                   __size_of_I2C_Start 0012  
                        _SSPSTATbits 000FC7                   __size_of_I2C_Write 003E  
                       drawCircle@x0 001C                         drawCircle@y0 001E  
                       ___awdiv@sign 001C                  ___wmul@multiplicand 0013  
                                l205 18F8                                  l150 17BE  
                                l153 188E                                  l321 12F4  
                                l315 198A                                  l403 0C00  
                                l261 168E                                  l271 1ADE  
                                l520 1B62                                  l600 0140  
                                l337 0B90                                  l346 0AE6  
                                l339 0A6A                                  l603 01B0  
                                l532 1A6C                                  l374 10BC  
                                l375 1028                                  l377 1098  
                                l385 07F0                                  l641 04F0  
                                l378 10BA                                  l670 14A4  
                                l671 14AE                                  l672 14B0  
                                l665 1488                                  l674 14CA  
                                l677 19DC                                  l669 14A2  
                                l870 1152                    ?_Wait_Half_Second 0001  
                                _PR2 000FCB                                  _Cmd 004C  
                                _day 0058                    _Deactivate_Buzzer 1BB0  
               __size_of_I2C_ReStart 0016                                  _dow 0059  
                                _nbr 00C9                                  _txt 0049  
                                prod 000FF3                                  wreg 000FE8  
                 ??_Wait_Half_Second 0011                   ?_Deactivate_Buzzer 0001  
                    ??_fillRectangle 001D                         __CFG_LVP$OFF 000000  
            _TFT_GreenTab_Initialize 198C                         __CFG_WDT$OFF 000000  
                               l1108 19FE                       drawFastVLine@h 0019  
                               l1137 125C                                 l1147 144A  
                               l1239 1840                       drawFastVLine@x 0022  
                     drawFastVLine@y 0018                                 l5001 01FC  
                               l5011 024A                                 l5003 0202  
                               l4221 189E                                 l4213 1886  
                               l4205 16EE                                 l5101 10E6  
                               l5021 0266                                 l4231 18B0  
                               l5111 110E                                 l5015 0252  
                               l5007 0210                                 l5031 02A8  
                               l4161 12EA                                 l4145 127E  
                               l4209 170A                                 l4401 1814  
                               l5025 02A0                                 l5017 0258  
                               l5033 02BC                                 l4219 1898  
                               l4411 0FF2                                 l5107 10FC  
                               l5123 1138                                 l5051 0338  
                               l5043 0312                                 l4149 12B6  
                               l4501 0D52                                 l5109 1106  
                               l5053 0344                                 l5045 031E  
                               l4159 12DC                                 l4351 0A58  
                               l5127 1148                                 l5119 112C  
                               l5071 042C                                 l5063 038C  
                               l5039 02DE                                 l4361 0A76  
                               l4513 0DC2                                 l4505 0D70  
                               l4433 109C                                 l4417 1060  
                               l5081 04B8                                 l5057 0362  
                               l4611 17A0                                 l4603 178A  
                               l4355 0A66                                 l4347 0A4C  
                               l4515 0DCA                                 l4443 10B6  
                               l5059 036E                                 l5067 03A0  
                               l5083 04D2                                 l4621 17B4  
                               l4197 196C                                 l4365 0AA6  
                               l4357 0A6E                                 l4437 10A6  
                               l4429 108E                                 l4541 146E  
                               l5069 03B2                                 l5077 049A  
                               l5413 04FC                                 l4623 17BA  
                               l4367 0ADA                                 l5095 10D4  
                               l5079 04AE                                 l5431 05C6  
                               l4609 1798                                 l4617 17A8  
                               l4385 0B5C                                 l4377 0B08  
                               l4393 0B8C                                 l4369 0ADE  
                               l4561 149A                                 l4553 148C  
                               l4545 1478                                 l4387 0B84  
                               l4379 0B30                                 l5443 05EC  
                               l4549 1480                                 l4741 121A  
                               l5453 062E       I2C_Write_Cmd_Write_Data@Device 0015  
                               l4399 180E                                 l4663 0BE6  
                               l4727 19F6                                 l5447 0606  
                               l4489 0CF6                                 l4737 1204  
                               l4761 1414                                 l5473 070A  
                               l5457 0638                                 l4587 1904  
                               l4683 0CB4                                 l4739 1212  
                               l4589 190E                                 l4861 07D6  
                               l4749 124C                                 l4765 143A  
                               l4757 13FE                                 l4599 1782  
                               l4679 0C62                                 l4759 140C  
                               l4951 0050                                 l4961 0092  
                               l4945 002A                                 l4971 0100  
                               l4955 005C                                 l4957 0072  
                               l4949 003E                                 l4983 0168  
                               l4975 010A                                 l4889 08C6  
                               l4969 00F8                                 l4987 0190  
                               l4997 01D2                                 STR_1 FF97  
                               STR_2 FF6C                                 STR_3 FFB5  
                               STR_4 FFF8                                 STR_5 FFCB  
                               STR_6 FFF0                                 STR_7 FFDF  
                               u3040 0D2C                                 u2710 12AC  
                               u2900 0B3E                                 u2970 1020  
                               u2980 1056                                 u3957 1B7E  
                               _RBPU 007F8F                                 _TRMT 007D61  
                ??_Deactivate_Buzzer 0011                                 _main 04F2  
                               _font FD49                                 _hour 005B  
                   __end_of_I2C_Init 1B9C                     __end_of_I2C_Read 17C0  
                               _year 006D                                 fsr0h 000FEA  
                               _txt1 0100                                 fsr1h 000FE2  
                               fsr0l 000FE9                                 fsr2h 000FDA  
                               fsr1l 000FE1                                 indf2 000FDF  
                               fsr2l 000FD9                                 _wrap 006F  
                   __end_of_I2C_Stop 1B1A                                 pclat 000FFA  
                 __size_of_LCD_Reset 0012                                 prodh 000FF4  
                               prodl 000FF3                                 start 0018  
        __size_of_I2C_Write_Cmd_Only 001A                      __end_of_Do_Init 1804  
                    ??_drawFastVLine 001C                      __end_of_i2cNack 1BA6  
                       ___param_bank 000010                          ?_TIMER1_isr 0001  
                   __end_of_INT0_isr 0A3C            __end_of_Deactivate_Buzzer 1BB8  
                    drawFastVLine@hi 0020                      drawFastVLine@lo 0021  
                              ?_main 0001                      __end_of___awdiv 1154  
                    drawCircle@ddF_x 0026                      drawCircle@ddF_y 0028  
                    __end_of___lldiv 126E                                _T0CON 000FD5  
                    ___awdiv@divisor 0019                                _T1CON 000FCD  
                    __end_of___llmod 145C                                _T2CON 000FCA  
                              _T3CON 000FB1                                i2l223 1338  
                              i2l235 0A3A                                i2l247 09F4  
                    ___awdiv@counter 001B                      drawCircle@color 0022  
                              _RCSTA 000FAB                                _TMR0H 000FD7  
                              _TMR1H 000FCF                                _TMR0L 000FD6  
                              _TMR3H 000FB3                                _TMR1L 000FCE  
                              _TMR3L 000FB2                                _SPBRG 000FAF  
                              _PORTA 000F80                                _TRISA 000F92  
                              _TRISB 000F93                                _TRISC 000F94  
                              _TRISD 000F95                                _TRISE 000F96  
                              _TXREG 000FAD                                _TXSTA 000FAC  
                              _Rcmd1 0DE0                                _Rcmd3 0EF0  
                         _Display_D1 00BF                           _i2cHighSda 1BC0  
                         _i2cHighScl 1B7A                      __end_of_dpowers FF4C  
                              _color 0080                                _font2 FE48  
              fillCircleHelper@ddF_x 0031                fillCircleHelper@ddF_y 0033  
                              _found 005A                      __end_of_isdigit 1A00  
                              _tempF 006B                                _month 005E  
                              _tempc 006C                fillCircleHelper@delta 002B  
                              main@U 00F8                                _putch 1B5E  
              fillCircleHelper@color 002D                                main@i 00FB  
                  __end_of_I2C_Start 1B2C                    __end_of_I2C_Write 18BE  
                     __CFG_BOREN$OFF 000000                                tablat 000FF5  
                              status 000FD8                    ?_DS1621_Read_Temp 0014  
                    write_data@data_ 0013                   ??_DS1621_Read_Temp 0016  
                    __initialization 1372                         __end_of_main 072E  
                       __end_of_font FE48                     __end_of_Rcmd2red 1880  
                             ??_main 00F7                        __activetblptr 000002  
                  ?_DS3231_Read_Time 0001   __end_of_Wait_Half_Second_With_Beep 1B7A  
         _Wait_Half_Second_With_Beep 1B6C                    __end_of_LCD_Reset 1B08  
          ??_TFT_GreenTab_Initialize 001D                   ??_DS3231_Read_Time 0014  
                             ?_Rcmd1 0001                               ?_Rcmd3 0001  
            __size_of_init_INTERRUPT 0030                            I2C_Init@c 0011  
                          I2C_Read@n 0012                               _ADCON1 000FC1  
                DS1621_Read_Temp@Cmd 0016                     ___llmod@dividend 001E  
                             _CCPR2L 000FBB                     ___awdiv@dividend 0017  
                 __size_of_i2cLowSda 000A                   __size_of_i2cLowScl 0008  
                             ?_putch 0001                               i2l2033 0904  
                             i2l2043 0930                               i2l2061 0976  
                             i2l2055 0958                               i2l2073 099C  
                             i2l2049 094E                               i2l2091 0A0E  
                             i2l2075 09A2                               i2l2067 0980  
                             i2l2093 0A14                               i2l2079 09A6  
                             i2l2099 0A18                               i2l2429 132E  
                          ??_Do_Init 0041                               _OSCCON 000FD3  
                __size_of_TIMER1_isr 000C                               _SPBRGH 000FB0  
                             _SSPBUF 000FC9                            ??_i2cNack 0011  
                             _Do_LED 1A8E                     _force_nec_state0 1BC8  
                             _Device 004D                     __end_of_delay_ms 1696  
                             _i2cAck 1B2C                           _TempSecond 0050  
                   __end_of_fillRect 172E                     __end_of_drawChar 0B92  
                 __size_of_OpenUSART 0070             __size_of_Activate_Buzzer 0012  
                             ___wmul 19B6                            ??___awdiv 001B  
          __size_of_fillCircleHelper 0138                     __end_of_drawtext 0DE0  
                          ??___lldiv 0019                            ??___llmod 0026  
                             _chkisr 0008                               _array1 00AA  
                             _buffer 00CB                               _nec_ok 0047  
                             clear_0 1378                               clear_1 1384  
                   ___awdiv@quotient 001D                               _minute 005D  
                             _second 0061              DS3231_Setup_Time@Device 0013  
         __size_of_Deactivate_Buzzer 0008                               _printf 001C  
                       drawtext@size 0040                               _strcpy 18FA  
                             _strlen 1804                         __pdataCOMRAM 006E  
                          ??_isdigit 0011                            ?_I2C_Init 0011  
                          ?_I2C_Read 0001                            ?_I2C_Stop 0001  
                       __mediumconst FD48                               tblptrh 000FF7  
                             tblptrl 000FF6                               tblptru 000FF8  
   __end_of_I2C_Write_Cmd_Write_Data 1A20                          ?_i2cHighSda 0001  
                        ?_i2cHighScl 0001                               putch@c 0011  
                   __end_of_spiwrite 1AE4                           __accesstop 0080  
            __end_of__initialization 13E2                            ?_INT0_isr 0001  
                 _setup_alarm_minute 0063                   _setup_alarm_second 0064  
                      ___rparam_used 000001                        __end_of_Rcmd1 0EF0  
                      __end_of_Rcmd3 0FE2                       __pcstackCOMRAM 0001  
                       __pidataBANK0 172E                         __pidataBANK1 15F0  
                      __end_of_font2 FF24                    __end_of_i2cLowSda 1BB0  
                  __end_of_i2cLowScl 1BC0                        __end_of_putch 1B6C  
                     drawPixel@color 0019               __size_of_write_command 0010  
                         ??_I2C_Init 0015                           ??_I2C_Read 0011  
                       _alarm_minute 0054                         _alarm_second 0055  
                         ??_I2C_Stop 0011           fillCircleHelper@cornername 0029  
                            ??_Rcmd1 001D                              ??_Rcmd3 001D  
                 __size_of_drawPixel 0030                    __end_of_OpenUSART 14CC  
                            ??_putch 0011                           __pbssBANK0 00C9  
                   _setup_alarm_hour 0062                        ??_DS1621_Init 0016  
                          ?_Rcmd2red 0001                   __size_of_init_UART 0014  
          __size_of_Wait_Half_Second 001A                      spiwrite@spidata 0012  
                         _alarm_date 0052                              ?_Do_LED 0001  
                         ??_INT0_isr 0001                           _alarm_hour 0053  
                            ?_i2cAck 0001                   __CFG_CCP2MX$PORTBE 000000  
                     I2C_Read@inByte 0013                              ?___wmul 0011  
                __size_of_i2cHighSda 0008                  __size_of_i2cHighScl 000C  
                            ?_chkisr 0001               __size_of_setAddrWindow 004E  
   I2C_Write_Cmd_Write_Data@Data_Out 0014                              _CCP2CON 000FBA  
                       ??_TIMER1_isr 0001                        ??_I2C_ReStart 0011  
                         _fillCircle 1596                           I2C_Write@n 0012  
                            ?_printf 0027                              ?_strcpy 0011  
                            ?_strlen 0011                    ??_Activate_Buzzer 0011  
                         _fillScreen 1A3E                           _drawCircle 072E  
                     _init_INTERRUPT 192C                            ?_delay_ms 0017  
                          ?_fillRect 0023                            ?_drawChar 002E  
                            _SSPCON1 000FC6                              _SSPSTAT 000FC7  
                            _Address 004B                __end_of_fillRectangle 10BE  
                          ?_drawtext 0039                    _DS3231_Setup_Time 14CC  
                            _Do_Init 17C0             _I2C_Write_Cmd_Write_Data 1A00  
         __end_of_I2C_Write_Cmd_Only 1A8E                           ??_Rcmd2red 0014  
             DS1621_Read_Temp@Device 0018                              _i2cNack 1B9C  
                 __end_of_TIMER1_isr 1B92                   ?_DS3231_Setup_Time 0001  
                      _write_command 1B4E                      __size_of_Do_LED 0018  
                          _I2C_Start 1B1A                            _I2C_Write 1880  
                    __size_of_i2cAck 0012                              __Hparam 0000  
                            __Lparam 0000                  __end_of_DS1621_Init 1A3E  
                  __end_of_drawPixel 198C                  ??_DS3231_Setup_Time 0013  
              __end_of_drawFastVLine 12F6                     _fillCircleHelper 0B92  
                            ___awdiv 10BE                              ___lldiv 11E2  
                    __size_of___wmul 0028                              ___llmod 13EC  
                    __size_of_chkisr 136A                            ?_spiwrite 0001  
                            __pcinit 1372                              __ramtop 1000  
                            __ptext0 04F2                              __ptext1 001C  
                            __ptext2 1B5E                              __ptext3 19DE  
                            __ptext4 13EC                              __ptext5 11E2  
          __size_of_DS1621_Read_Temp 003C                              __ptext6 1596  
                            __ptext7 0B92                              __ptext8 072E  
                            __ptext9 10BE                      __size_of_printf 04D6  
                  __end_of_init_UART 1AD0               __end_of_init_INTERRUPT 195C  
                          _T0CONbits 000FD5                      __size_of_strcpy 0032  
                    __size_of_strlen 003E                    __end_of_hexpowers FF6C  
           __end_of_force_nec_state0 1BD0                            _T1CONbits 000FCD  
           DS3231_Setup_Time@Address 0014                              _dpowers FF24  
                            _isdigit 19DE          ?_Wait_Half_Second_With_Beep 0001  
                          _T3CONbits 000FB1                           ??_delay_ms 0019  
                __end_of_I2C_ReStart 1ABC                        drawtext@_text 003A  
                      drawtext@color 003C                           ??_fillRect 0028  
          __end_of_DS3231_Setup_Time 1532                           ??_drawChar 0035  
                          _LCD_Reset 1AF6                        _setAddrWindow 1696  
                     __pintcode_body 12F6                           delay_ms@ms 0017  
               end_of_initialization 13E2                           ??_drawtext 00EA  
                     ?_write_command 0001                        __Lmediumconst FD48  
          __size_of_DS3231_Read_Time 0064                              int_func 12F6  
            DS3231_Read_Time@Address 0014                           ?_I2C_Start 0001  
                         ?_I2C_Write 0001                      ___lldiv@divisor 0015  
                    ___lldiv@counter 001D                           _tempSecond 006E  
                          _RCSTAbits 000FAB                              printf@c 00F6  
                            printf@f 0027                              postdec1 000FE5  
                            postdec2 000FDD                              postinc0 000FEE  
                            postinc2 000FDE                           ??_spiwrite 0011  
                            strlen@s 0011                      fillCircle@color 00F0  
        I2C_Write_Cmd_Write_Data@Cmd 0013                          ?_fillCircle 00EA  
                   drawtext@cursor_x 00F2                     drawtext@cursor_y 00F1  
                          _PORTBbits 000F81                            _PORTCbits 000F82  
                          _PORTDbits 000F83                            _PORTEbits 000F84  
                   I2C_Write@outByte 0011                      ?_init_INTERRUPT 0001  
                        ?_fillScreen 0024                           _setup_hour 0066  
                         _setup_year 006A                          ?_drawCircle 001C  
                         drawChar@bg 0032                            _TRISCbits 000F94  
                       ??_i2cHighSda 0011                         ??_i2cHighScl 0011  
                  __size_of_I2C_Init 000A                    __size_of_I2C_Read 0048  
                  __size_of_I2C_Stop 0012                       ?_setAddrWindow 0014  
                         ?_LCD_Reset 0001                     drawtext@textsize 00ED  
                         drawPixel@x 001B                           drawPixel@y 0018  
                   _Wait_Half_Second 1A5A                          _DS1621_Init 1A20  
                        printf@width 00F3                            _TXSTAbits 000FAC  
                     __end_of_Do_LED 1AA6                    __size_of_INT0_isr 0160  
                     __end_of_i2cAck 1B3E             DS1621_Read_Temp@Data_Ret 0017  
                 __end_of_i2cHighSda 1BC8                   __end_of_i2cHighScl 1B86  
                     __end_of___wmul 19DE                        delay_ms@count 001B  
                         _write_data 1B3E                        __pidataCOMRAM 1BD0  
                     __end_of_chkisr 1372             ?_TFT_GreenTab_Initialize 0001  
                        _I2C_ReStart 1AA6                           drawtext@bg 003E  
                          _Nec_code1 004E                            _i2cLowSda 1BA6  
                          _i2cLowScl 1BB8                       __end_of_printf 04F2  
                     __end_of_strcpy 192C                       __end_of_strlen 1842  
                          _Nec_state 004F                  start_initialization 1372  
         __size_of_DS3231_Setup_Time 0066                      ??_write_command 0013  
                          _OpenUSART 145C                  __size_of_fillCircle 005A  
                    ___llmod@divisor 0022                             ??_Do_LED 0011  
                   __CFG_OSC$INTIO67 000000                          ??_I2C_Start 0011  
                    ___llmod@counter 0026                          ??_I2C_Write 0011  
                           ??_i2cAck 0011                    __size_of_Rcmd2red 003E  
                __size_of_fillScreen 001C                  __size_of_drawCircle 01AE  
                    _Activate_Buzzer 1AE4  __size_of_Wait_Half_Second_With_Beep 000E  
                           ??___wmul 0015                             ??_chkisr 0003  
                        __pdataBANK0 0080                          __pdataBANK1 0100  
                        Do_LED@digit 0011                      setAddrWindow@x0 0017  
                    setAddrWindow@x1 0015                      setAddrWindow@y0 0014  
                    setAddrWindow@y1 0016                             ??_printf 0035  
                   _DS1621_Read_Temp 18BE                             ??_strcpy 0015  
                           ??_strlen 0013                           ?_i2cLowSda 0001  
                         ?_i2cLowScl 0001                          __pbssCOMRAM 0041  
         ??_I2C_Write_Cmd_Write_Data 0015                      ??_setAddrWindow 0017  
                      __pcstackBANK0 00EA                          ??_LCD_Reset 001D  
                       _isdigit$2066 0012             __end_of_fillCircleHelper 0CCA  
                  __size_of_delay_ms 0052                             ?_Do_Init 0001  
                  __size_of_fillRect 004A                    __size_of_drawChar 0156  
                         ?_OpenUSART 0011                     _DS3231_Read_Time 1532  
                           ?_i2cNack 0001                    __size_of_drawtext 0116  
                        I2C_Read@ack 0011                            _bit_count 0056  
                          __pintcode 0008      __end_of_TFT_GreenTab_Initialize 19B6  
                      __pmediumconst FD48                             ?___awdiv 0017  
                           ?___lldiv 0011                             ?___llmod 001E  
                          __tft_type 0051                   _I2C_Write_Cmd_Only 1A74  
                 drawFastVLine@color 001A                          ?_write_data 0001  
                          _drawPixel 195C                    __size_of_spiwrite 0014  
                ?_I2C_Write_Cmd_Only 0013                    ?_force_nec_state0 0001  
                           ?_isdigit 0001                             _I2C_Init 1B92  
                           _I2C_Read 1778                             _I2C_Stop 1B08  
                  _Initialize_Screen 1154                       __size_of_Rcmd1 0110  
                     __size_of_Rcmd3 00F2                            _init_UART 1ABC  
                 ??_force_nec_state0 0001             I2C_Write_Cmd_Only@Device 0014  
                          _hexpowers FF4C                   ?_Initialize_Screen 0001  
                     __size_of_putch 000E              __end_of_Activate_Buzzer 1AF6  
                     ___wmul@product 0015                  ??_Initialize_Screen 0041  
                           _INT0_isr 08DC                 ??_I2C_Write_Cmd_Only 0014  
                           _PIE1bits 000F9D               DS3231_Read_Time@Device 0015  
                           _PIR1bits 000F9E                             _PIR2bits 000FA1  
                   ??_init_INTERRUPT 0011                            _setup_day 0065  
                  DS1621_Init@Device 0016                            fillRect@h 0025  
                          fillRect@i 002C                            fillRect@w 0024  
                          fillRect@x 002B                            fillRect@y 0023  
                          drawChar@c 002F                            drawChar@i 0038  
                          drawChar@j 0037                         ??_fillCircle 003B  
                          drawChar@x 0036                            drawChar@y 002E  
                         ?_drawPixel 0018               __size_of_fillRectangle 00DC  
           __end_of_Wait_Half_Second 1A74                    ___wmul@multiplier 0011  
          __end_of_Initialize_Screen 11E2                          ??_i2cLowSda 0011  
                        ??_i2cLowScl 0011                         ??_fillScreen 0026  
                       ??_drawCircle 0024                           printf@flag 00F5  
                         printf@prec 00EB                            main@found 00FD  
                          main@tempC 00F9                            main@tempF 00FA  
                         ?_init_UART 0001                          _INTCON2bits 000FF1  
                          copy_data0 139E                            copy_data1 13BE  
                          drawtext@i 00EF               __size_of_drawFastVLine 0088  
                          drawtext@x 00EC                            drawtext@y 0039  
                           _Nec_code 0041                    write_command@cmd_ 0013  
                        ??_OpenUSART 0013                         ?_DS1621_Init 0001  
                           _Rcmd2red 1842                     __size_of_Do_Init 0044  
                __size_of_write_data 0010                      OpenUSART@config 0013  
                       _Time_Elapsed 0045                   __end_of_fillCircle 15F0  
                   __size_of_i2cNack 000A                             __Hrparam 0000  
                 __end_of_fillScreen 1A5A                             __Lrparam 0000  
                 __end_of_drawCircle 08DC                     __size_of___awdiv 0096  
                   __size_of___lldiv 008C                     __size_of___llmod 0070  
                       ?_I2C_ReStart 0001                     __size_of_isdigit 0022  
                           _delay_ms 1644                             __ptext10 1B6C  
                           __ptext11 1A5A                             __ptext20 18FA  
                           __ptext12 1BB0                             __ptext21 1A3E  
                           __ptext13 1AE4                             __ptext30 198C  
                           __ptext22 0FE2                             __ptext14 1A8E  
                           __ptext31 0EF0                             __ptext23 0CCA  
                           __ptext15 17C0                             __ptext40 1B92  
                           __ptext32 1842                             __ptext24 1804  
                           __ptext16 1ABC                             __ptext41 1A20  
                           __ptext33 0DE0                             __ptext25 0A3C  
                           __ptext17 145C                             __ptext50 1778  
                           __ptext42 1A00                             __ptext34 1B3E  
                           __ptext26 16E4                             __ptext18 192C  
                           __ptext51 1B9C                             __ptext43 1A74  
                           __ptext35 1B4E                             __ptext27 126E  
                           __ptext19 1154                             __ptext60 08DC  
                           __ptext52 1B2C                             __ptext44 14CC  
                           __ptext36 1AD0                             __ptext28 195C  
                           __ptext61 1BC8                             __ptext53 1AA6  
                           __ptext45 1532                             __ptext37 1AF6  
                           __ptext29 1696                             __ptext54 1BA6  
                           __ptext46 18BE                             __ptext38 1644  
                           __ptext55 1BB8                             __ptext47 1880  
                           __ptext39 19B6                             __ptext56 1BC0  
                           __ptext48 1B08                             __ptext57 1B7A  
                           __ptext49 1B1A                             __ptext59 1B86  
                           _fillRect 16E4                             _drawChar 0A3C  
   __size_of_TFT_GreenTab_Initialize 002A                             _colstart 0057  
                           _drawtext 0CCA                           strcpy@from 0013  
                      _fillRectangle 0FE2             __end_of_DS1621_Read_Temp 18FA  
                   ?_Activate_Buzzer 0001                        __size_of_main 023C  
                    fillRectangle@hi 0021                      fillRectangle@lo 0022  
                      _drawFastVLine 126E                            printf@idx 00EA  
                           _spiwrite 1AD0                            printf@val 00EF  
                        ??_drawPixel 001B                             _rowstart 0060  
           __end_of_DS3231_Read_Time 1596                   fillCircleHelper@x0 0023  
                 fillCircleHelper@y0 0025           __size_of_Initialize_Screen 008E  
                         _INTCONbits 000FF2                       OpenUSART@spbrg 0011  
                        ??_init_UART 0014                             isdigit@c 0013  
                  ?_fillCircleHelper 0023                            spiwrite@x 0011  
                           intlevel2 0000                       ?_fillRectangle 0018  
                 ??_fillCircleHelper 002F                __end_of_write_command 1B5E  
                   ___lldiv@dividend 0011                      fillScreen@color 0024  
                       fillCircle@x0 00EA                         fillCircle@y0 00EC  
                     fillRectangle@h 001A                       fillRectangle@w 0019  
                     fillRectangle@x 0023                       fillRectangle@y 0018  
                     ?_drawFastVLine 0018                             printf@ap 00ED  
                  fillCircleHelper@f 0035                    fillCircleHelper@r 0027  
                  fillCircleHelper@x 0037                    fillCircleHelper@y 0039  
                       ??_write_data 0013                           _TIMER1_isr 1B86  
                      fillRect@color 0026                     ___lldiv@quotient 0019  
                           strcpy@cp 0015                             strlen@cp 0015  
                           strcpy@to 0011                I2C_Write_Cmd_Only@Cmd 0013  
       ??_Wait_Half_Second_With_Beep 0011                         _setup_minute 0067  
                       _setup_second 0069                          fillCircle@r 00EE  
                        _prev_second 005F                __end_of_setAddrWindow 16E4  
                 fillRectangle@color 001B                        drawChar@color 0030  
                        _setup_month 0068                   __end_of_write_data 1B4E  
          __size_of_force_nec_state0 0008                         drawChar@line 0035  
                       drawChar@size 0034    __size_of_I2C_Write_Cmd_Write_Data 0020  
               __size_of_DS1621_Init 001E            ?_I2C_Write_Cmd_Write_Data 0013  
