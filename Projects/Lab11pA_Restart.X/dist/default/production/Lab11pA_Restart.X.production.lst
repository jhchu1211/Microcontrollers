

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Wed Nov 10 12:12:58 2021

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	text44,global,reloc=2,class=CODE,delta=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	text53,global,reloc=2,class=CODE,delta=1
    72                           	psect	text54,global,reloc=2,class=CODE,delta=1
    73                           	psect	text55,global,reloc=2,class=CODE,delta=1
    74                           	psect	text56,global,reloc=2,class=CODE,delta=1
    75                           	psect	text57,global,reloc=2,class=CODE,delta=1
    76                           	psect	text58,global,reloc=2,class=CODE,delta=1
    77                           	psect	text59,global,reloc=2,class=CODE,delta=1
    78                           	psect	text60,global,reloc=2,class=CODE,delta=1
    79                           	psect	text61,global,reloc=2,class=CODE,delta=1
    80                           	psect	text62,global,reloc=2,class=CODE,delta=1
    81                           	psect	text63,global,reloc=2,class=CODE,delta=1
    82                           	psect	text64,global,reloc=2,class=CODE,delta=1
    83                           	psect	text65,global,reloc=2,class=CODE,delta=1
    84                           	psect	text66,global,reloc=2,class=CODE,delta=1
    85                           	psect	text67,global,reloc=2,class=CODE,delta=1
    86                           	psect	text68,global,reloc=2,class=CODE,delta=1
    87                           	psect	text69,global,reloc=2,class=CODE,delta=1
    88                           	psect	text70,global,reloc=2,class=CODE,delta=1
    89                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    90                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    91                           	psect	text72,global,reloc=2,class=CODE,delta=1
    92                           	psect	text73,global,reloc=2,class=CODE,delta=1
    93                           	psect	text74,global,reloc=2,class=CODE,delta=1
    94                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    95                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    96  0000                     
    97                           	psect	idataCOMRAM
    98  0025C2                     __pidataCOMRAM:
    99                           	opt stack 0
   100                           
   101                           ;initializer for _setup_fan_temp
   102  0025C2  4B                 	db	75
   103                           
   104                           ;initializer for _tempSecond
   105  0025C3  FF                 	db	255
   106                           
   107                           ;initializer for _wrap
   108  0025C4  01                 	db	1
   109                           
   110                           	psect	idataBANK0
   111  001E32                     __pidataBANK0:
   112                           	opt stack 0
   113                           
   114                           ;initializer for _Display_D1
   115  001E32  00                 	db	0
   116  001E33  02                 	db	2
   117  001E34  04                 	db	4
   118  001E35  06                 	db	6
   119  001E36  10                 	db	16
   120  001E37  12                 	db	18
   121  001E38  14                 	db	20
   122  001E39  16                 	db	22
   123  001E3A  16                 	db	22
   124  001E3B  16                 	db	22
   125  001E3C  16                 	db	22
   126                           
   127                           ;initializer for _alarm_time
   128  001E3D  30                 	db	48
   129  001E3E  30                 	db	48
   130  001E3F  3A                 	db	58
   131  001E40  30                 	db	48
   132  001E41  30                 	db	48
   133  001E42  3A                 	db	58
   134  001E43  30                 	db	48
   135  001E44  30                 	db	48
   136  001E45  00                 	db	0
   137                           
   138                           ;initializer for _setup_alarm_time
   139  001E46  30                 	db	48
   140  001E47  30                 	db	48
   141  001E48  3A                 	db	58
   142  001E49  30                 	db	48
   143  001E4A  30                 	db	48
   144  001E4B  3A                 	db	58
   145  001E4C  30                 	db	48
   146  001E4D  30                 	db	48
   147  001E4E  00                 	db	0
   148                           
   149                           ;initializer for _setup_date
   150  001E4F  30                 	db	48
   151  001E50  31                 	db	49
   152  001E51  2F                 	db	47
   153  001E52  30                 	db	48
   154  001E53  31                 	db	49
   155  001E54  2F                 	db	47
   156  001E55  30                 	db	48
   157  001E56  30                 	db	48
   158  001E57  00                 	db	0
   159                           
   160                           ;initializer for _setup_time
   161  001E58  30                 	db	48
   162  001E59  30                 	db	48
   163  001E5A  3A                 	db	58
   164  001E5B  30                 	db	48
   165  001E5C  30                 	db	48
   166  001E5D  3A                 	db	58
   167  001E5E  30                 	db	48
   168  001E5F  30                 	db	48
   169  001E60  00                 	db	0
   170                           
   171                           ;initializer for _setup_fan_text
   172  001E61  30                 	db	48
   173  001E62  37                 	db	55
   174  001E63  35                 	db	53
   175  001E64  46                 	db	70
   176  001E65  00                 	db	0
   177                           
   178                           ;initializer for _Alarm_SW_Txt
   179  001E66  4F                 	db	79
   180  001E67  46                 	db	70
   181  001E68  46                 	db	70
   182  001E69  00                 	db	0
   183                           
   184                           ;initializer for _Display_D2
   185  001E6A  00                 	db	0
   186  001E6B  40                 	db	64
   187  001E6C  C0                 	db	192
   188  001E6D  80                 	db	128
   189                           
   190                           ;initializer for _RTC_ALARM_Txt
   191  001E6E  30                 	db	48
   192  001E6F  00                 	db	0
   193                           
   194                           ;initializer for _date
   195  001E70  30                 	db	48
   196  001E71  30                 	db	48
   197  001E72  2F                 	db	47
   198  001E73  30                 	db	48
   199  001E74  30                 	db	48
   200  001E75  2F                 	db	47
   201  001E76  30                 	db	48
   202  001E77  30                 	db	48
   203  001E78  00                 	db	0
   204                           
   205                           ;initializer for _time
   206  001E79  30                 	db	48
   207  001E7A  30                 	db	48
   208  001E7B  3A                 	db	58
   209  001E7C  30                 	db	48
   210  001E7D  30                 	db	48
   211  001E7E  3A                 	db	58
   212  001E7F  30                 	db	48
   213  001E80  30                 	db	48
   214  001E81  00                 	db	0
   215                           
   216                           ;initializer for _RPM_Txt
   217  001E82  30                 	db	48
   218  001E83  30                 	db	48
   219  001E84  30                 	db	48
   220  001E85  30                 	db	48
   221  001E86  00                 	db	0
   222                           
   223                           ;initializer for _DC_Txt
   224  001E87  30                 	db	48
   225  001E88  30                 	db	48
   226  001E89  30                 	db	48
   227  001E8A  00                 	db	0
   228                           
   229                           ;initializer for _Fan_SW_Txt
   230  001E8B  4F                 	db	79
   231  001E8C  46                 	db	70
   232  001E8D  46                 	db	70
   233  001E8E  00                 	db	0
   234                           
   235                           ;initializer for _tempC
   236  001E8F  2B                 	db	43
   237  001E90  32                 	db	50
   238  001E91  35                 	db	53
   239  001E92  00                 	db	0
   240                           
   241                           ;initializer for _tempF
   242  001E93  2B                 	db	43
   243  001E94  37                 	db	55
   244  001E95  37                 	db	55
   245  001E96  00                 	db	0
   246                           
   247                           	psect	idataBANK1
   248  001A62                     __pidataBANK1:
   249                           	opt stack 0
   250                           
   251                           ;initializer for _txt1
   252  001A62  43                 	db	67
   253  001A63  48                 	db	72
   254  001A64  2D                 	db	45
   255  001A65  00                 	db	0
   256  001A66  43                 	db	67
   257  001A67  48                 	db	72
   258  001A68  20                 	db	32
   259  001A69  00                 	db	0
   260  001A6A  43                 	db	67
   261  001A6B  48                 	db	72
   262  001A6C  2B                 	db	43
   263  001A6D  00                 	db	0
   264  001A6E  50                 	db	80
   265  001A6F  52                 	db	82
   266  001A70  56                 	db	86
   267  001A71  00                 	db	0
   268  001A72  4E                 	db	78
   269  001A73  58                 	db	88
   270  001A74  54                 	db	84
   271  001A75  00                 	db	0
   272  001A76  50                 	db	80
   273  001A77  4C                 	db	76
   274  001A78  59                 	db	89
   275  001A79  00                 	db	0
   276  001A7A  56                 	db	86
   277  001A7B  4C                 	db	76
   278  001A7C  2D                 	db	45
   279  001A7D  00                 	db	0
   280  001A7E  56                 	db	86
   281  001A7F  4C                 	db	76
   282  001A80  2B                 	db	43
   283  001A81  00                 	db	0
   284  001A82  45                 	db	69
   285  001A83  51                 	db	81
   286  001A84  20                 	db	32
   287  001A85  00                 	db	0
   288  001A86  20                 	db	32
   289  001A87  30                 	db	48
   290  001A88  20                 	db	32
   291  001A89  00                 	db	0
   292  001A8A  31                 	db	49
   293  001A8B  30                 	db	48
   294  001A8C  30                 	db	48
   295  001A8D  00                 	db	0
   296  001A8E  32                 	db	50
   297  001A8F  30                 	db	48
   298  001A90  30                 	db	48
   299  001A91  00                 	db	0
   300  001A92  20                 	db	32
   301  001A93  31                 	db	49
   302  001A94  20                 	db	32
   303  001A95  00                 	db	0
   304  001A96  20                 	db	32
   305  001A97  32                 	db	50
   306  001A98  20                 	db	32
   307  001A99  00                 	db	0
   308  001A9A  20                 	db	32
   309  001A9B  33                 	db	51
   310  001A9C  20                 	db	32
   311  001A9D  00                 	db	0
   312  001A9E  20                 	db	32
   313  001A9F  34                 	db	52
   314  001AA0  20                 	db	32
   315  001AA1  00                 	db	0
   316  001AA2  20                 	db	32
   317  001AA3  35                 	db	53
   318  001AA4  20                 	db	32
   319  001AA5  00                 	db	0
   320  001AA6  20                 	db	32
   321  001AA7  36                 	db	54
   322  001AA8  20                 	db	32
   323  001AA9  00                 	db	0
   324  001AAA  20                 	db	32
   325  001AAB  37                 	db	55
   326  001AAC  20                 	db	32
   327  001AAD  00                 	db	0
   328  001AAE  20                 	db	32
   329  001AAF  38                 	db	56
   330  001AB0  20                 	db	32
   331  001AB1  00                 	db	0
   332  001AB2  20                 	db	32
   333  001AB3  39                 	db	57
   334  001AB4  20                 	db	32
   335  001AB5  00                 	db	0
   336                           
   337                           ;initializer for _array1
   338  001AB6  A2                 	db	162
   339  001AB7  62                 	db	98
   340  001AB8  E2                 	db	226
   341  001AB9  22                 	db	34
   342  001ABA  02                 	db	2
   343  001ABB  C2                 	db	194
   344  001ABC  E0                 	db	224
   345  001ABD  A8                 	db	168
   346  001ABE  90                 	db	144
   347  001ABF  68                 	db	104
   348  001AC0  98                 	db	152
   349  001AC1  B0                 	db	176
   350  001AC2  30                 	db	48
   351  001AC3  18                 	db	24
   352  001AC4  7A                 	db	122
   353  001AC5  10                 	db	16
   354  001AC6  38                 	db	56
   355  001AC7  5A                 	db	90
   356  001AC8  42                 	db	66
   357  001AC9  4A                 	db	74
   358  001ACA  52                 	db	82
   359                           
   360                           ;initializer for _buffer
   361  001ACB  20                 	db	32
   362  001ACC  45                 	db	69
   363  001ACD  43                 	db	67
   364  001ACE  45                 	db	69
   365  001ACF  33                 	db	51
   366  001AD0  33                 	db	51
   367  001AD1  30                 	db	48
   368  001AD2  31                 	db	49
   369  001AD3  4C                 	db	76
   370  001AD4  20                 	db	32
   371  001AD5  46                 	db	70
   372  001AD6  61                 	db	97
   373  001AD7  6C                 	db	108
   374  001AD8  6C                 	db	108
   375  001AD9  27                 	db	39
   376  001ADA  32                 	db	50
   377  001ADB  31                 	db	49
   378  001ADC  20                 	db	32
   379  001ADD  4C                 	db	76
   380  001ADE  31                 	db	49
   381  001ADF  31                 	db	49
   382  001AE0  00                 	db	0
   383  001AE1  00                 	db	0
   384  001AE2  00                 	db	0
   385  001AE3  00                 	db	0
   386  001AE4  00                 	db	0
   387  001AE5  00                 	db	0
   388  001AE6  00                 	db	0
   389  001AE7  00                 	db	0
   390  001AE8  00                 	db	0
   391  001AE9  00                 	db	0
   392                           
   393                           	psect	mediumconst
   394  00FD26                     __pmediumconst:
   395                           	opt stack 0
   396  00FD26  00                 	db	0
   397  00FD27                     _font:
   398                           	opt stack 0
   399  00FD27  00                 	db	0
   400  00FD28  00                 	db	0
   401  00FD29  00                 	db	0
   402  00FD2A  00                 	db	0
   403  00FD2B  00                 	db	0
   404  00FD2C  00                 	db	0
   405  00FD2D  00                 	db	0
   406  00FD2E  5F                 	db	95
   407  00FD2F  00                 	db	0
   408  00FD30  00                 	db	0
   409  00FD31  00                 	db	0
   410  00FD32  07                 	db	7
   411  00FD33  00                 	db	0
   412  00FD34  07                 	db	7
   413  00FD35  00                 	db	0
   414  00FD36  14                 	db	20
   415  00FD37  7F                 	db	127
   416  00FD38  14                 	db	20
   417  00FD39  7F                 	db	127
   418  00FD3A  14                 	db	20
   419  00FD3B  24                 	db	36
   420  00FD3C  2A                 	db	42
   421  00FD3D  7F                 	db	127
   422  00FD3E  2A                 	db	42
   423  00FD3F  12                 	db	18
   424  00FD40  23                 	db	35
   425  00FD41  13                 	db	19
   426  00FD42  08                 	db	8
   427  00FD43  64                 	db	100
   428  00FD44  62                 	db	98
   429  00FD45  36                 	db	54
   430  00FD46  49                 	db	73
   431  00FD47  56                 	db	86
   432  00FD48  20                 	db	32
   433  00FD49  50                 	db	80
   434  00FD4A  00                 	db	0
   435  00FD4B  08                 	db	8
   436  00FD4C  07                 	db	7
   437  00FD4D  03                 	db	3
   438  00FD4E  00                 	db	0
   439  00FD4F  00                 	db	0
   440  00FD50  1C                 	db	28
   441  00FD51  22                 	db	34
   442  00FD52  41                 	db	65
   443  00FD53  00                 	db	0
   444  00FD54  00                 	db	0
   445  00FD55  41                 	db	65
   446  00FD56  22                 	db	34
   447  00FD57  1C                 	db	28
   448  00FD58  00                 	db	0
   449  00FD59  2A                 	db	42
   450  00FD5A  1C                 	db	28
   451  00FD5B  7F                 	db	127
   452  00FD5C  1C                 	db	28
   453  00FD5D  2A                 	db	42
   454  00FD5E  08                 	db	8
   455  00FD5F  08                 	db	8
   456  00FD60  3E                 	db	62
   457  00FD61  08                 	db	8
   458  00FD62  08                 	db	8
   459  00FD63  00                 	db	0
   460  00FD64  80                 	db	128
   461  00FD65  70                 	db	112
   462  00FD66  30                 	db	48
   463  00FD67  00                 	db	0
   464  00FD68  08                 	db	8
   465  00FD69  08                 	db	8
   466  00FD6A  08                 	db	8
   467  00FD6B  08                 	db	8
   468  00FD6C  08                 	db	8
   469  00FD6D  00                 	db	0
   470  00FD6E  00                 	db	0
   471  00FD6F  60                 	db	96
   472  00FD70  60                 	db	96
   473  00FD71  00                 	db	0
   474  00FD72  20                 	db	32
   475  00FD73  10                 	db	16
   476  00FD74  08                 	db	8
   477  00FD75  04                 	db	4
   478  00FD76  02                 	db	2
   479  00FD77  3E                 	db	62
   480  00FD78  51                 	db	81
   481  00FD79  49                 	db	73
   482  00FD7A  45                 	db	69
   483  00FD7B  3E                 	db	62
   484  00FD7C  00                 	db	0
   485  00FD7D  42                 	db	66
   486  00FD7E  7F                 	db	127
   487  00FD7F  40                 	db	64
   488  00FD80  00                 	db	0
   489  00FD81  72                 	db	114
   490  00FD82  49                 	db	73
   491  00FD83  49                 	db	73
   492  00FD84  49                 	db	73
   493  00FD85  46                 	db	70
   494  00FD86  21                 	db	33
   495  00FD87  41                 	db	65
   496  00FD88  49                 	db	73
   497  00FD89  4D                 	db	77
   498  00FD8A  33                 	db	51
   499  00FD8B  18                 	db	24
   500  00FD8C  14                 	db	20
   501  00FD8D  12                 	db	18
   502  00FD8E  7F                 	db	127
   503  00FD8F  10                 	db	16
   504  00FD90  27                 	db	39
   505  00FD91  45                 	db	69
   506  00FD92  45                 	db	69
   507  00FD93  45                 	db	69
   508  00FD94  39                 	db	57
   509  00FD95  3C                 	db	60
   510  00FD96  4A                 	db	74
   511  00FD97  49                 	db	73
   512  00FD98  49                 	db	73
   513  00FD99  31                 	db	49
   514  00FD9A  41                 	db	65
   515  00FD9B  21                 	db	33
   516  00FD9C  11                 	db	17
   517  00FD9D  09                 	db	9
   518  00FD9E  07                 	db	7
   519  00FD9F  36                 	db	54
   520  00FDA0  49                 	db	73
   521  00FDA1  49                 	db	73
   522  00FDA2  49                 	db	73
   523  00FDA3  36                 	db	54
   524  00FDA4  46                 	db	70
   525  00FDA5  49                 	db	73
   526  00FDA6  49                 	db	73
   527  00FDA7  29                 	db	41
   528  00FDA8  1E                 	db	30
   529  00FDA9  00                 	db	0
   530  00FDAA  00                 	db	0
   531  00FDAB  14                 	db	20
   532  00FDAC  00                 	db	0
   533  00FDAD  00                 	db	0
   534  00FDAE  00                 	db	0
   535  00FDAF  40                 	db	64
   536  00FDB0  34                 	db	52
   537  00FDB1  00                 	db	0
   538  00FDB2  00                 	db	0
   539  00FDB3  00                 	db	0
   540  00FDB4  08                 	db	8
   541  00FDB5  14                 	db	20
   542  00FDB6  22                 	db	34
   543  00FDB7  41                 	db	65
   544  00FDB8  14                 	db	20
   545  00FDB9  14                 	db	20
   546  00FDBA  14                 	db	20
   547  00FDBB  14                 	db	20
   548  00FDBC  14                 	db	20
   549  00FDBD  00                 	db	0
   550  00FDBE  41                 	db	65
   551  00FDBF  22                 	db	34
   552  00FDC0  14                 	db	20
   553  00FDC1  08                 	db	8
   554  00FDC2  02                 	db	2
   555  00FDC3  01                 	db	1
   556  00FDC4  59                 	db	89
   557  00FDC5  09                 	db	9
   558  00FDC6  06                 	db	6
   559  00FDC7  3E                 	db	62
   560  00FDC8  41                 	db	65
   561  00FDC9  5D                 	db	93
   562  00FDCA  59                 	db	89
   563  00FDCB  4E                 	db	78
   564  00FDCC  7C                 	db	124
   565  00FDCD  12                 	db	18
   566  00FDCE  11                 	db	17
   567  00FDCF  12                 	db	18
   568  00FDD0  7C                 	db	124
   569  00FDD1  7F                 	db	127
   570  00FDD2  49                 	db	73
   571  00FDD3  49                 	db	73
   572  00FDD4  49                 	db	73
   573  00FDD5  36                 	db	54
   574  00FDD6  3E                 	db	62
   575  00FDD7  41                 	db	65
   576  00FDD8  41                 	db	65
   577  00FDD9  41                 	db	65
   578  00FDDA  22                 	db	34
   579  00FDDB  7F                 	db	127
   580  00FDDC  41                 	db	65
   581  00FDDD  41                 	db	65
   582  00FDDE  41                 	db	65
   583  00FDDF  3E                 	db	62
   584  00FDE0  7F                 	db	127
   585  00FDE1  49                 	db	73
   586  00FDE2  49                 	db	73
   587  00FDE3  49                 	db	73
   588  00FDE4  41                 	db	65
   589  00FDE5  7F                 	db	127
   590  00FDE6  09                 	db	9
   591  00FDE7  09                 	db	9
   592  00FDE8  09                 	db	9
   593  00FDE9  01                 	db	1
   594  00FDEA  3E                 	db	62
   595  00FDEB  41                 	db	65
   596  00FDEC  41                 	db	65
   597  00FDED  51                 	db	81
   598  00FDEE  73                 	db	115
   599  00FDEF  7F                 	db	127
   600  00FDF0  08                 	db	8
   601  00FDF1  08                 	db	8
   602  00FDF2  08                 	db	8
   603  00FDF3  7F                 	db	127
   604  00FDF4  00                 	db	0
   605  00FDF5  41                 	db	65
   606  00FDF6  7F                 	db	127
   607  00FDF7  41                 	db	65
   608  00FDF8  00                 	db	0
   609  00FDF9  20                 	db	32
   610  00FDFA  40                 	db	64
   611  00FDFB  41                 	db	65
   612  00FDFC  3F                 	db	63
   613  00FDFD  01                 	db	1
   614  00FDFE  7F                 	db	127
   615  00FDFF  08                 	db	8
   616  00FE00  14                 	db	20
   617  00FE01  22                 	db	34
   618  00FE02  41                 	db	65
   619  00FE03  7F                 	db	127
   620  00FE04  40                 	db	64
   621  00FE05  40                 	db	64
   622  00FE06  40                 	db	64
   623  00FE07  40                 	db	64
   624  00FE08  7F                 	db	127
   625  00FE09  02                 	db	2
   626  00FE0A  1C                 	db	28
   627  00FE0B  02                 	db	2
   628  00FE0C  7F                 	db	127
   629  00FE0D  7F                 	db	127
   630  00FE0E  04                 	db	4
   631  00FE0F  08                 	db	8
   632  00FE10  10                 	db	16
   633  00FE11  7F                 	db	127
   634  00FE12  3E                 	db	62
   635  00FE13  41                 	db	65
   636  00FE14  41                 	db	65
   637  00FE15  41                 	db	65
   638  00FE16  3E                 	db	62
   639  00FE17  7F                 	db	127
   640  00FE18  09                 	db	9
   641  00FE19  09                 	db	9
   642  00FE1A  09                 	db	9
   643  00FE1B  06                 	db	6
   644  00FE1C  3E                 	db	62
   645  00FE1D  41                 	db	65
   646  00FE1E  51                 	db	81
   647  00FE1F  21                 	db	33
   648  00FE20  5E                 	db	94
   649  00FE21  7F                 	db	127
   650  00FE22  09                 	db	9
   651  00FE23  19                 	db	25
   652  00FE24  29                 	db	41
   653  00FE25  46                 	db	70
   654  00FE26                     __end_of_font:
   655                           	opt stack 0
   656  00FE26                     _font2:
   657                           	opt stack 0
   658  00FE26  26                 	db	38
   659  00FE27  49                 	db	73
   660  00FE28  49                 	db	73
   661  00FE29  49                 	db	73
   662  00FE2A  32                 	db	50
   663  00FE2B  03                 	db	3
   664  00FE2C  01                 	db	1
   665  00FE2D  7F                 	db	127
   666  00FE2E  01                 	db	1
   667  00FE2F  03                 	db	3
   668  00FE30  3F                 	db	63
   669  00FE31  40                 	db	64
   670  00FE32  40                 	db	64
   671  00FE33  40                 	db	64
   672  00FE34  3F                 	db	63
   673  00FE35  1F                 	db	31
   674  00FE36  20                 	db	32
   675  00FE37  40                 	db	64
   676  00FE38  20                 	db	32
   677  00FE39  1F                 	db	31
   678  00FE3A  3F                 	db	63
   679  00FE3B  40                 	db	64
   680  00FE3C  38                 	db	56
   681  00FE3D  40                 	db	64
   682  00FE3E  3F                 	db	63
   683  00FE3F  63                 	db	99
   684  00FE40  14                 	db	20
   685  00FE41  08                 	db	8
   686  00FE42  14                 	db	20
   687  00FE43  63                 	db	99
   688  00FE44  03                 	db	3
   689  00FE45  04                 	db	4
   690  00FE46  78                 	db	120
   691  00FE47  04                 	db	4
   692  00FE48  03                 	db	3
   693  00FE49  61                 	db	97
   694  00FE4A  59                 	db	89
   695  00FE4B  49                 	db	73
   696  00FE4C  4D                 	db	77
   697  00FE4D  43                 	db	67
   698  00FE4E  00                 	db	0
   699  00FE4F  7F                 	db	127
   700  00FE50  41                 	db	65
   701  00FE51  41                 	db	65
   702  00FE52  41                 	db	65
   703  00FE53  02                 	db	2
   704  00FE54  04                 	db	4
   705  00FE55  08                 	db	8
   706  00FE56  10                 	db	16
   707  00FE57  20                 	db	32
   708  00FE58  00                 	db	0
   709  00FE59  41                 	db	65
   710  00FE5A  41                 	db	65
   711  00FE5B  41                 	db	65
   712  00FE5C  7F                 	db	127
   713  00FE5D  04                 	db	4
   714  00FE5E  02                 	db	2
   715  00FE5F  01                 	db	1
   716  00FE60  02                 	db	2
   717  00FE61  04                 	db	4
   718  00FE62  40                 	db	64
   719  00FE63  40                 	db	64
   720  00FE64  40                 	db	64
   721  00FE65  40                 	db	64
   722  00FE66  40                 	db	64
   723  00FE67  00                 	db	0
   724  00FE68  03                 	db	3
   725  00FE69  07                 	db	7
   726  00FE6A  08                 	db	8
   727  00FE6B  00                 	db	0
   728  00FE6C  20                 	db	32
   729  00FE6D  54                 	db	84
   730  00FE6E  54                 	db	84
   731  00FE6F  78                 	db	120
   732  00FE70  40                 	db	64
   733  00FE71  7F                 	db	127
   734  00FE72  28                 	db	40
   735  00FE73  44                 	db	68
   736  00FE74  44                 	db	68
   737  00FE75  38                 	db	56
   738  00FE76  38                 	db	56
   739  00FE77  44                 	db	68
   740  00FE78  44                 	db	68
   741  00FE79  44                 	db	68
   742  00FE7A  28                 	db	40
   743  00FE7B  38                 	db	56
   744  00FE7C  44                 	db	68
   745  00FE7D  44                 	db	68
   746  00FE7E  28                 	db	40
   747  00FE7F  7F                 	db	127
   748  00FE80  38                 	db	56
   749  00FE81  54                 	db	84
   750  00FE82  54                 	db	84
   751  00FE83  54                 	db	84
   752  00FE84  18                 	db	24
   753  00FE85  00                 	db	0
   754  00FE86  08                 	db	8
   755  00FE87  7E                 	db	126
   756  00FE88  09                 	db	9
   757  00FE89  02                 	db	2
   758  00FE8A  18                 	db	24
   759  00FE8B  A4                 	db	164
   760  00FE8C  A4                 	db	164
   761  00FE8D  9C                 	db	156
   762  00FE8E  78                 	db	120
   763  00FE8F  7F                 	db	127
   764  00FE90  08                 	db	8
   765  00FE91  04                 	db	4
   766  00FE92  04                 	db	4
   767  00FE93  78                 	db	120
   768  00FE94  00                 	db	0
   769  00FE95  44                 	db	68
   770  00FE96  7D                 	db	125
   771  00FE97  40                 	db	64
   772  00FE98  00                 	db	0
   773  00FE99  20                 	db	32
   774  00FE9A  40                 	db	64
   775  00FE9B  40                 	db	64
   776  00FE9C  3D                 	db	61
   777  00FE9D  00                 	db	0
   778  00FE9E  7F                 	db	127
   779  00FE9F  10                 	db	16
   780  00FEA0  28                 	db	40
   781  00FEA1  44                 	db	68
   782  00FEA2  00                 	db	0
   783  00FEA3  00                 	db	0
   784  00FEA4  41                 	db	65
   785  00FEA5  7F                 	db	127
   786  00FEA6  40                 	db	64
   787  00FEA7  00                 	db	0
   788  00FEA8  7C                 	db	124
   789  00FEA9  04                 	db	4
   790  00FEAA  78                 	db	120
   791  00FEAB  04                 	db	4
   792  00FEAC  78                 	db	120
   793  00FEAD  7C                 	db	124
   794  00FEAE  08                 	db	8
   795  00FEAF  04                 	db	4
   796  00FEB0  04                 	db	4
   797  00FEB1  78                 	db	120
   798  00FEB2  38                 	db	56
   799  00FEB3  44                 	db	68
   800  00FEB4  44                 	db	68
   801  00FEB5  44                 	db	68
   802  00FEB6  38                 	db	56
   803  00FEB7  FC                 	db	252
   804  00FEB8  18                 	db	24
   805  00FEB9  24                 	db	36
   806  00FEBA  24                 	db	36
   807  00FEBB  18                 	db	24
   808  00FEBC  18                 	db	24
   809  00FEBD  24                 	db	36
   810  00FEBE  24                 	db	36
   811  00FEBF  18                 	db	24
   812  00FEC0  FC                 	db	252
   813  00FEC1  7C                 	db	124
   814  00FEC2  08                 	db	8
   815  00FEC3  04                 	db	4
   816  00FEC4  04                 	db	4
   817  00FEC5  08                 	db	8
   818  00FEC6  48                 	db	72
   819  00FEC7  54                 	db	84
   820  00FEC8  54                 	db	84
   821  00FEC9  54                 	db	84
   822  00FECA  24                 	db	36
   823  00FECB  04                 	db	4
   824  00FECC  04                 	db	4
   825  00FECD  3F                 	db	63
   826  00FECE  44                 	db	68
   827  00FECF  24                 	db	36
   828  00FED0  3C                 	db	60
   829  00FED1  40                 	db	64
   830  00FED2  40                 	db	64
   831  00FED3  20                 	db	32
   832  00FED4  7C                 	db	124
   833  00FED5  1C                 	db	28
   834  00FED6  20                 	db	32
   835  00FED7  40                 	db	64
   836  00FED8  20                 	db	32
   837  00FED9  1C                 	db	28
   838  00FEDA  3C                 	db	60
   839  00FEDB  40                 	db	64
   840  00FEDC  30                 	db	48
   841  00FEDD  40                 	db	64
   842  00FEDE  3C                 	db	60
   843  00FEDF  44                 	db	68
   844  00FEE0  28                 	db	40
   845  00FEE1  10                 	db	16
   846  00FEE2  28                 	db	40
   847  00FEE3  44                 	db	68
   848  00FEE4  4C                 	db	76
   849  00FEE5  90                 	db	144
   850  00FEE6  90                 	db	144
   851  00FEE7  90                 	db	144
   852  00FEE8  7C                 	db	124
   853  00FEE9  44                 	db	68
   854  00FEEA  64                 	db	100
   855  00FEEB  54                 	db	84
   856  00FEEC  4C                 	db	76
   857  00FEED  44                 	db	68
   858  00FEEE  00                 	db	0
   859  00FEEF  08                 	db	8
   860  00FEF0  36                 	db	54
   861  00FEF1  41                 	db	65
   862  00FEF2  00                 	db	0
   863  00FEF3  00                 	db	0
   864  00FEF4  00                 	db	0
   865  00FEF5  77                 	db	119
   866  00FEF6  00                 	db	0
   867  00FEF7  00                 	db	0
   868  00FEF8  00                 	db	0
   869  00FEF9  41                 	db	65
   870  00FEFA  36                 	db	54
   871  00FEFB  08                 	db	8
   872  00FEFC  00                 	db	0
   873  00FEFD  02                 	db	2
   874  00FEFE  01                 	db	1
   875  00FEFF  02                 	db	2
   876  00FF00  04                 	db	4
   877  00FF01  02                 	db	2
   878  00FF02                     __end_of_font2:
   879                           	opt stack 0
   880  00FF02                     _dpowers:
   881                           	opt stack 0
   882  00FF02  0001               	dw	1
   883  00FF04  000A               	dw	10
   884  00FF06  0064               	dw	100
   885  00FF08  03E8               	dw	1000
   886  00FF0A  2710               	dw	10000
   887  00FF0C                     __end_of_dpowers:
   888                           	opt stack 0
   889  00FF0C                     _hexpowers:
   890                           	opt stack 0
   891  00FF0C  0001               	dw	1
   892  00FF0E  0010               	dw	16
   893  00FF10  0100               	dw	256
   894  00FF12  1000               	dw	4096
   895  00FF14                     __end_of_hexpowers:
   896                           	opt stack 0
   897  0000                     _ADCON1	set	4033
   898  0000                     _CCP1CON	set	4029
   899  0000                     _CCP2CON	set	4026
   900  0000                     _CCPR1L	set	4030
   901  0000                     _CCPR2L	set	4027
   902  0000                     _INTCON2bits	set	4081
   903  0000                     _INTCONbits	set	4082
   904  0000                     _OSCCON	set	4051
   905  0000                     _PIE1bits	set	3997
   906  0000                     _PIR1bits	set	3998
   907  0000                     _PORTAbits	set	3968
   908  0000                     _PORTBbits	set	3969
   909  0000                     _PORTDbits	set	3971
   910  0000                     _PORTEbits	set	3972
   911  0000                     _PR2	set	4043
   912  0000                     _RCSTA	set	4011
   913  0000                     _RCSTAbits	set	4011
   914  0000                     _SPBRG	set	4015
   915  0000                     _SPBRGH	set	4016
   916  0000                     _SSPBUF	set	4041
   917  0000                     _SSPCON1	set	4038
   918  0000                     _SSPSTAT	set	4039
   919  0000                     _SSPSTATbits	set	4039
   920  0000                     _T0CON	set	4053
   921  0000                     _T0CONbits	set	4053
   922  0000                     _T1CON	set	4045
   923  0000                     _T1CONbits	set	4045
   924  0000                     _T2CON	set	4042
   925  0000                     _T3CON	set	4017
   926  0000                     _TMR0H	set	4055
   927  0000                     _TMR0L	set	4054
   928  0000                     _TMR1H	set	4047
   929  0000                     _TMR1L	set	4046
   930  0000                     _TMR3L	set	4018
   931  0000                     _TRISA	set	3986
   932  0000                     _TRISB	set	3987
   933  0000                     _TRISBbits	set	3987
   934  0000                     _TRISC	set	3988
   935  0000                     _TRISCbits	set	3988
   936  0000                     _TRISD	set	3989
   937  0000                     _TRISE	set	3990
   938  0000                     _TXREG	set	4013
   939  0000                     _TXSTA	set	4012
   940  0000                     _TXSTAbits	set	4012
   941  0000                     _RBPU	set	32655
   942  0000                     _TRMT	set	32097
   943  00FF14                     STR_12:
   944  00FF14  25                 	db	37
   945  00FF15  30                 	db	48	;'0'
   946  00FF16  32                 	db	50	;'2'
   947  00FF17  78                 	db	120	;'x'
   948  00FF18  3A                 	db	58	;':'
   949  00FF19  25                 	db	37
   950  00FF1A  30                 	db	48	;'0'
   951  00FF1B  32                 	db	50	;'2'
   952  00FF1C  78                 	db	120	;'x'
   953  00FF1D  3A                 	db	58	;':'
   954  00FF1E  25                 	db	37
   955  00FF1F  30                 	db	48	;'0'
   956  00FF20  32                 	db	50	;'2'
   957  00FF21  78                 	db	120	;'x'
   958  00FF22  20                 	db	32
   959  00FF23  25                 	db	37
   960  00FF24  30                 	db	48	;'0'
   961  00FF25  32                 	db	50	;'2'
   962  00FF26  78                 	db	120	;'x'
   963  00FF27  2F                 	db	47
   964  00FF28  25                 	db	37
   965  00FF29  30                 	db	48	;'0'
   966  00FF2A  32                 	db	50	;'2'
   967  00FF2B  78                 	db	120	;'x'
   968  00FF2C  2F                 	db	47
   969  00FF2D  25                 	db	37
   970  00FF2E  30                 	db	48	;'0'
   971  00FF2F  32                 	db	50	;'2'
   972  00FF30  78                 	db	120	;'x'
   973  00FF31  00                 	db	0
   974  00FF32                     STR_18:
   975  00FF32  0A                 	db	10
   976  00FF33  54                 	db	84	;'T'
   977  00FF34  69                 	db	105	;'i'
   978  00FF35  6D                 	db	109	;'m'
   979  00FF36  65                 	db	101	;'e'
   980  00FF37  20                 	db	32
   981  00FF38  68                 	db	104	;'h'
   982  00FF39  61                 	db	97	;'a'
   983  00FF3A  73                 	db	115	;'s'
   984  00FF3B  20                 	db	32
   985  00FF3C  62                 	db	98	;'b'
   986  00FF3D  65                 	db	101	;'e'
   987  00FF3E  65                 	db	101	;'e'
   988  00FF3F  6E                 	db	110	;'n'
   989  00FF40  20                 	db	32
   990  00FF41  72                 	db	114	;'r'
   991  00FF42  65                 	db	101	;'e'
   992  00FF43  73                 	db	115	;'s'
   993  00FF44  65                 	db	101	;'e'
   994  00FF45  74                 	db	116	;'t'
   995  00FF46  0D                 	db	13
   996  00FF47  0A                 	db	10
   997  00FF48  0A                 	db	10
   998  00FF49  00                 	db	0
   999  00FF4A                     STR_16:
  1000  00FF4A  43                 	db	67	;'C'
  1001  00FF4B  61                 	db	97	;'a'
  1002  00FF4C  6E                 	db	110	;'n'
  1003  00FF4D  6E                 	db	110	;'n'
  1004  00FF4E  6F                 	db	111	;'o'
  1005  00FF4F  74                 	db	116	;'t'
  1006  00FF50  20                 	db	32
  1007  00FF51  66                 	db	102	;'f'
  1008  00FF52  69                 	db	105	;'i'
  1009  00FF53  6E                 	db	110	;'n'
  1010  00FF54  64                 	db	100	;'d'
  1011  00FF55  20                 	db	32
  1012  00FF56  62                 	db	98	;'b'
  1013  00FF57  75                 	db	117	;'u'
  1014  00FF58  74                 	db	116	;'t'
  1015  00FF59  74                 	db	116	;'t'
  1016  00FF5A  6F                 	db	111	;'o'
  1017  00FF5B  6E                 	db	110	;'n'
  1018  00FF5C  20                 	db	32
  1019  00FF5D  0D                 	db	13
  1020  00FF5E  0A                 	db	10
  1021  00FF5F  00                 	db	0
  1022  00FF60                     STR_1:
  1023  00FF60  45                 	db	69	;'E'
  1024  00FF61  43                 	db	67	;'C'
  1025  00FF62  45                 	db	69	;'E'
  1026  00FF63  33                 	db	51	;'3'
  1027  00FF64  33                 	db	51	;'3'
  1028  00FF65  30                 	db	48	;'0'
  1029  00FF66  31                 	db	49	;'1'
  1030  00FF67  4C                 	db	76	;'L'
  1031  00FF68  20                 	db	32
  1032  00FF69  53                 	db	83	;'S'
  1033  00FF6A  70                 	db	112	;'p'
  1034  00FF6B  72                 	db	114	;'r'
  1035  00FF6C  69                 	db	105	;'i'
  1036  00FF6D  6E                 	db	110	;'n'
  1037  00FF6E  67                 	db	103	;'g'
  1038  00FF6F  20                 	db	32
  1039  00FF70  32                 	db	50	;'2'
  1040  00FF71  31                 	db	49	;'1'
  1041  00FF72  2D                 	db	45
  1042  00FF73  53                 	db	83	;'S'
  1043  00FF74  31                 	db	49	;'1'
  1044  00FF75  00                 	db	0
  1045  00FF76                     STR_13:
  1046  00FF76  20                 	db	32
  1047  00FF77  54                 	db	84	;'T'
  1048  00FF78  65                 	db	101	;'e'
  1049  00FF79  6D                 	db	109	;'m'
  1050  00FF7A  70                 	db	112	;'p'
  1051  00FF7B  20                 	db	32
  1052  00FF7C  3D                 	db	61	;'='
  1053  00FF7D  20                 	db	32
  1054  00FF7E  25                 	db	37
  1055  00FF7F  64                 	db	100	;'d'
  1056  00FF80  20                 	db	32
  1057  00FF81  43                 	db	67	;'C'
  1058  00FF82  20                 	db	32
  1059  00FF83  3D                 	db	61	;'='
  1060  00FF84  20                 	db	32
  1061  00FF85  25                 	db	37
  1062  00FF86  64                 	db	100	;'d'
  1063  00FF87  20                 	db	32
  1064  00FF88  46                 	db	70	;'F'
  1065  00FF89  20                 	db	32
  1066  00FF8A  00                 	db	0
  1067  00FF8B                     STR_14:
  1068  00FF8B  52                 	db	82	;'R'
  1069  00FF8C  50                 	db	80	;'P'
  1070  00FF8D  4D                 	db	77	;'M'
  1071  00FF8E  20                 	db	32
  1072  00FF8F  3D                 	db	61	;'='
  1073  00FF90  20                 	db	32
  1074  00FF91  25                 	db	37
  1075  00FF92  64                 	db	100	;'d'
  1076  00FF93  20                 	db	32
  1077  00FF94  20                 	db	32
  1078  00FF95  64                 	db	100	;'d'
  1079  00FF96  63                 	db	99	;'c'
  1080  00FF97  20                 	db	32
  1081  00FF98  3D                 	db	61	;'='
  1082  00FF99  20                 	db	32
  1083  00FF9A  25                 	db	37
  1084  00FF9B  64                 	db	100	;'d'
  1085  00FF9C  0D                 	db	13
  1086  00FF9D  0A                 	db	10
  1087  00FF9E  00                 	db	0
  1088  00FF9F                     STR_19:
  1089  00FF9F  30                 	db	48	;'0'
  1090  00FFA0  31                 	db	49	;'1'
  1091  00FFA1  32                 	db	50	;'2'
  1092  00FFA2  33                 	db	51	;'3'
  1093  00FFA3  34                 	db	52	;'4'
  1094  00FFA4  35                 	db	53	;'5'
  1095  00FFA5  36                 	db	54	;'6'
  1096  00FFA6  37                 	db	55	;'7'
  1097  00FFA7  38                 	db	56	;'8'
  1098  00FFA8  39                 	db	57	;'9'
  1099  00FFA9  61                 	db	97	;'a'
  1100  00FFAA  62                 	db	98	;'b'
  1101  00FFAB  63                 	db	99	;'c'
  1102  00FFAC  64                 	db	100	;'d'
  1103  00FFAD  65                 	db	101	;'e'
  1104  00FFAE  66                 	db	102	;'f'
  1105  00FFAF  00                 	db	0
  1106  00FFB0                     STR_15:
  1107  00FFB0  4E                 	db	78	;'N'
  1108  00FFB1  45                 	db	69	;'E'
  1109  00FFB2  43                 	db	67	;'C'
  1110  00FFB3  5F                 	db	95	;'_'
  1111  00FFB4  43                 	db	67	;'C'
  1112  00FFB5  6F                 	db	111	;'o'
  1113  00FFB6  64                 	db	100	;'d'
  1114  00FFB7  65                 	db	101	;'e'
  1115  00FFB8  20                 	db	32
  1116  00FFB9  3D                 	db	61	;'='
  1117  00FFBA  20                 	db	32
  1118  00FFBB  25                 	db	37
  1119  00FFBC  78                 	db	120	;'x'
  1120  00FFBD  0D                 	db	13
  1121  00FFBE  0A                 	db	10
  1122  00FFBF  00                 	db	0
  1123  00FFC0                     STR_17:
  1124  00FFC0  62                 	db	98	;'b'
  1125  00FFC1  75                 	db	117	;'u'
  1126  00FFC2  74                 	db	116	;'t'
  1127  00FFC3  74                 	db	116	;'t'
  1128  00FFC4  6F                 	db	111	;'o'
  1129  00FFC5  6E                 	db	110	;'n'
  1130  00FFC6  20                 	db	32
  1131  00FFC7  3D                 	db	61	;'='
  1132  00FFC8  20                 	db	32
  1133  00FFC9  25                 	db	37
  1134  00FFCA  64                 	db	100	;'d'
  1135  00FFCB  20                 	db	32
  1136  00FFCC  0D                 	db	13
  1137  00FFCD  0A                 	db	10
  1138  00FFCE  00                 	db	0
  1139  00FFCF                     STR_2:
  1140  00FFCF  54                 	db	84	;'T'
  1141  00FFD0  65                 	db	101	;'e'
  1142  00FFD1  6D                 	db	109	;'m'
  1143  00FFD2  70                 	db	112	;'p'
  1144  00FFD3  65                 	db	101	;'e'
  1145  00FFD4  72                 	db	114	;'r'
  1146  00FFD5  61                 	db	97	;'a'
  1147  00FFD6  74                 	db	116	;'t'
  1148  00FFD7  75                 	db	117	;'u'
  1149  00FFD8  72                 	db	114	;'r'
  1150  00FFD9  65                 	db	101	;'e'
  1151  00FFDA  3A                 	db	58	;':'
  1152  00FFDB  00                 	db	0
  1153  00FFDC                     STR_7:
  1154  00FFDC  20                 	db	32
  1155  00FFDD  20                 	db	32
  1156  00FFDE  46                 	db	70	;'F'
  1157  00FFDF  41                 	db	65	;'A'
  1158  00FFE0  4E                 	db	78	;'N'
  1159  00FFE1  00                 	db	0
  1160  00FFE2                     STR_5:
  1161  00FFE2  54                 	db	84	;'T'
  1162  00FFE3  69                 	db	105	;'i'
  1163  00FFE4  6D                 	db	109	;'m'
  1164  00FFE5  65                 	db	101	;'e'
  1165  00FFE6  00                 	db	0
  1166  00FFE7                     STR_6:
  1167  00FFE7  44                 	db	68	;'D'
  1168  00FFE8  61                 	db	97	;'a'
  1169  00FFE9  74                 	db	116	;'t'
  1170  00FFEA  65                 	db	101	;'e'
  1171  00FFEB  00                 	db	0
  1172  00FFEC                     STR_10:
  1173  00FFEC  4F                 	db	79	;'O'
  1174  00FFED  4E                 	db	78	;'N'
  1175  00FFEE  20                 	db	32
  1176  00FFEF  00                 	db	0
  1177  00FFF0                     STR_11:
  1178  00FFF0  4F                 	db	79	;'O'
  1179  00FFF1  46                 	db	70	;'F'
  1180  00FFF2  46                 	db	70	;'F'
  1181  00FFF3  00                 	db	0
  1182  00FFF4                     STR_9:
  1183  00FFF4  52                 	db	82	;'R'
  1184  00FFF5  50                 	db	80	;'P'
  1185  00FFF6  4D                 	db	77	;'M'
  1186  00FFF7  00                 	db	0
  1187  00FFF8                     STR_3:
  1188  00FFF8  43                 	db	67	;'C'
  1189  00FFF9  2F                 	db	47
  1190  00FFFA  00                 	db	0
  1191  00FFFB                     STR_8:
  1192  00FFFB  44                 	db	68	;'D'
  1193  00FFFC  43                 	db	67	;'C'
  1194  00FFFD  00                 	db	0
  1195  0000                     
  1196                           ; #config settings
  1197  00FFFE  00                 	db	0	; dummy byte at the end
  1198  0000                     
  1199                           	psect	cinit
  1200  001BF4                     __pcinit:
  1201                           	opt stack 0
  1202  001BF4                     start_initialization:
  1203                           	opt stack 0
  1204  001BF4                     __initialization:
  1205                           	opt stack 0
  1206                           
  1207                           ; Clear objects allocated to BANK0 (14 bytes)
  1208  001BF4  EE00  F0E5         	lfsr	0,__pbssBANK0
  1209  001BF8  0E0E               	movlw	14
  1210  001BFA                     clear_0:
  1211  001BFA  6AEE               	clrf	postinc0,c
  1212  001BFC  06E8               	decf	wreg,f,c
  1213  001BFE  E1FD               	bnz	clear_0
  1214                           
  1215                           ; Clear objects allocated to COMRAM (39 bytes)
  1216  001C00  EE00  F046         	lfsr	0,__pbssCOMRAM
  1217  001C04  0E27               	movlw	39
  1218  001C06                     clear_1:
  1219  001C06  6AEE               	clrf	postinc0,c
  1220  001C08  06E8               	decf	wreg,f,c
  1221  001C0A  E1FD               	bnz	clear_1
  1222                           
  1223                           ; Initialize objects allocated to BANK1 (136 bytes)
  1224                           ; load TBLPTR registers with __pidataBANK1
  1225  001C0C  0E62               	movlw	low __pidataBANK1
  1226  001C0E  6EF6               	movwf	tblptrl,c
  1227  001C10  0E1A               	movlw	high __pidataBANK1
  1228  001C12  6EF7               	movwf	tblptrh,c
  1229  001C14  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1230  001C16  6EF8               	movwf	tblptru,c
  1231  001C18  EE01  F000         	lfsr	0,__pdataBANK1
  1232  001C1C  EE10 F088          	lfsr	1,136
  1233  001C20                     copy_data0:
  1234  001C20  0009               	tblrd		*+
  1235  001C22  CFF5 FFEE          	movff	tablat,postinc0
  1236  001C26  50E5               	movf	postdec1,w,c
  1237  001C28  50E1               	movf	fsr1l,w,c
  1238  001C2A  E1FA               	bnz	copy_data0
  1239                           
  1240                           ; Initialize objects allocated to BANK0 (101 bytes)
  1241                           ; load TBLPTR registers with __pidataBANK0
  1242  001C2C  0E32               	movlw	low __pidataBANK0
  1243  001C2E  6EF6               	movwf	tblptrl,c
  1244  001C30  0E1E               	movlw	high __pidataBANK0
  1245  001C32  6EF7               	movwf	tblptrh,c
  1246  001C34  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1247  001C36  6EF8               	movwf	tblptru,c
  1248  001C38  EE00  F080         	lfsr	0,__pdataBANK0
  1249  001C3C  EE10 F065          	lfsr	1,101
  1250  001C40                     copy_data1:
  1251  001C40  0009               	tblrd		*+
  1252  001C42  CFF5 FFEE          	movff	tablat,postinc0
  1253  001C46  50E5               	movf	postdec1,w,c
  1254  001C48  50E1               	movf	fsr1l,w,c
  1255  001C4A  E1FA               	bnz	copy_data1
  1256                           
  1257                           ; Initialize objects allocated to COMRAM (3 bytes)
  1258                           ; load TBLPTR registers with __pidataCOMRAM
  1259  001C4C  0EC2               	movlw	low __pidataCOMRAM
  1260  001C4E  6EF6               	movwf	tblptrl,c
  1261  001C50  0E25               	movlw	high __pidataCOMRAM
  1262  001C52  6EF7               	movwf	tblptrh,c
  1263  001C54  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1264  001C56  6EF8               	movwf	tblptru,c
  1265  001C58  0009               	tblrd		*+	;fetch initializer
  1266  001C5A  CFF5 F06D          	movff	tablat,__pdataCOMRAM
  1267  001C5E  0009               	tblrd		*+	;fetch initializer
  1268  001C60  CFF5 F06E          	movff	tablat,__pdataCOMRAM+1
  1269  001C64  0009               	tblrd		*+	;fetch initializer
  1270  001C66  CFF5 F06F          	movff	tablat,__pdataCOMRAM+2
  1271  001C6A                     end_of_initialization:
  1272                           	opt stack 0
  1273  001C6A                     __end_of__initialization:
  1274                           	opt stack 0
  1275  001C6A  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1276  001C6C  6EF8               	movwf	tblptru,c
  1277  001C6E  0100               	movlb	0
  1278  001C70  EF07  F005         	goto	_main	;jump to C main() function
  1279                           tblptru	equ	0xFF8
  1280                           tblptrh	equ	0xFF7
  1281                           tblptrl	equ	0xFF6
  1282                           tablat	equ	0xFF5
  1283                           postinc0	equ	0xFEE
  1284                           wreg	equ	0xFE8
  1285                           postdec1	equ	0xFE5
  1286                           fsr1l	equ	0xFE1
  1287                           
  1288                           	psect	bssCOMRAM
  1289  000046                     __pbssCOMRAM:
  1290                           	opt stack 0
  1291  000046                     _DS1621_tempC:
  1292                           	opt stack 0
  1293  000046                     	ds	2
  1294  000048                     _DS1621_tempF:
  1295                           	opt stack 0
  1296  000048                     	ds	2
  1297  00004A                     _Time_Elapsed:
  1298                           	opt stack 0
  1299  00004A                     	ds	2
  1300  00004C                     _rpm:
  1301                           	opt stack 0
  1302  00004C                     	ds	2
  1303  00004E                     _txt:
  1304                           	opt stack 0
  1305  00004E                     	ds	2
  1306  000050                     _FAN:
  1307                           	opt stack 0
  1308  000050                     	ds	1
  1309  000051                     _Nec_code1:
  1310                           	opt stack 0
  1311  000051                     	ds	1
  1312  000052                     _Nec_state:
  1313                           	opt stack 0
  1314  000052                     	ds	1
  1315  000053                     __tft_type:
  1316                           	opt stack 0
  1317  000053                     	ds	1
  1318  000054                     _alarm_date:
  1319                           	opt stack 0
  1320  000054                     	ds	1
  1321  000055                     _alarm_hour:
  1322                           	opt stack 0
  1323  000055                     	ds	1
  1324  000056                     _alarm_minute:
  1325                           	opt stack 0
  1326  000056                     	ds	1
  1327  000057                     _alarm_second:
  1328                           	opt stack 0
  1329  000057                     	ds	1
  1330  000058                     _bit_count:
  1331                           	opt stack 0
  1332  000058                     	ds	1
  1333  000059                     _colstart:
  1334                           	opt stack 0
  1335  000059                     	ds	1
  1336  00005A                     _day:
  1337                           	opt stack 0
  1338  00005A                     	ds	1
  1339  00005B                     _dow:
  1340                           	opt stack 0
  1341  00005B                     	ds	1
  1342  00005C                     _duty_cycle:
  1343                           	opt stack 0
  1344  00005C                     	ds	1
  1345  00005D                     _found:
  1346                           	opt stack 0
  1347  00005D                     	ds	1
  1348  00005E                     _hour:
  1349                           	opt stack 0
  1350  00005E                     	ds	1
  1351  00005F                     _minute:
  1352                           	opt stack 0
  1353  00005F                     	ds	1
  1354  000060                     _month:
  1355                           	opt stack 0
  1356  000060                     	ds	1
  1357  000061                     _rowstart:
  1358                           	opt stack 0
  1359  000061                     	ds	1
  1360  000062                     _second:
  1361                           	opt stack 0
  1362  000062                     	ds	1
  1363  000063                     _setup_alarm_hour:
  1364                           	opt stack 0
  1365  000063                     	ds	1
  1366  000064                     _setup_alarm_minute:
  1367                           	opt stack 0
  1368  000064                     	ds	1
  1369  000065                     _setup_alarm_second:
  1370                           	opt stack 0
  1371  000065                     	ds	1
  1372  000066                     _setup_day:
  1373                           	opt stack 0
  1374  000066                     	ds	1
  1375  000067                     _setup_hour:
  1376                           	opt stack 0
  1377  000067                     	ds	1
  1378  000068                     _setup_minute:
  1379                           	opt stack 0
  1380  000068                     	ds	1
  1381  000069                     _setup_month:
  1382                           	opt stack 0
  1383  000069                     	ds	1
  1384  00006A                     _setup_second:
  1385                           	opt stack 0
  1386  00006A                     	ds	1
  1387  00006B                     _setup_year:
  1388                           	opt stack 0
  1389  00006B                     	ds	1
  1390  00006C                     _year:
  1391                           	opt stack 0
  1392  00006C                     	ds	1
  1393                           tblptru	equ	0xFF8
  1394                           tblptrh	equ	0xFF7
  1395                           tblptrl	equ	0xFF6
  1396                           tablat	equ	0xFF5
  1397                           postinc0	equ	0xFEE
  1398                           wreg	equ	0xFE8
  1399                           postdec1	equ	0xFE5
  1400                           fsr1l	equ	0xFE1
  1401                           
  1402                           	psect	dataCOMRAM
  1403  00006D                     __pdataCOMRAM:
  1404                           	opt stack 0
  1405  00006D                     _setup_fan_temp:
  1406                           	opt stack 0
  1407  00006D                     	ds	1
  1408  00006E                     _tempSecond:
  1409                           	opt stack 0
  1410  00006E                     	ds	1
  1411  00006F                     _wrap:
  1412                           	opt stack 0
  1413  00006F                     	ds	1
  1414                           tblptru	equ	0xFF8
  1415                           tblptrh	equ	0xFF7
  1416                           tblptrl	equ	0xFF6
  1417                           tablat	equ	0xFF5
  1418                           postinc0	equ	0xFEE
  1419                           wreg	equ	0xFE8
  1420                           postdec1	equ	0xFE5
  1421                           fsr1l	equ	0xFE1
  1422                           
  1423                           	psect	bssBANK0
  1424  0000E5                     __pbssBANK0:
  1425                           	opt stack 0
  1426  0000E5                     _Nec_code:
  1427                           	opt stack 0
  1428  0000E5                     	ds	4
  1429  0000E9                     _ALARMEN:
  1430                           	opt stack 0
  1431  0000E9                     	ds	2
  1432  0000EB                     _nbr:
  1433                           	opt stack 0
  1434  0000EB                     	ds	2
  1435  0000ED                     _nec_ok:
  1436                           	opt stack 0
  1437  0000ED                     	ds	2
  1438  0000EF                     _rps:
  1439                           	opt stack 0
  1440  0000EF                     	ds	2
  1441  0000F1                     _MASKA:
  1442                           	opt stack 0
  1443  0000F1                     	ds	1
  1444  0000F2                     _MASKD:
  1445                           	opt stack 0
  1446  0000F2                     	ds	1
  1447                           tblptru	equ	0xFF8
  1448                           tblptrh	equ	0xFF7
  1449                           tblptrl	equ	0xFF6
  1450                           tablat	equ	0xFF5
  1451                           postinc0	equ	0xFEE
  1452                           wreg	equ	0xFE8
  1453                           postdec1	equ	0xFE5
  1454                           fsr1l	equ	0xFE1
  1455                           
  1456                           	psect	dataBANK0
  1457  000080                     __pdataBANK0:
  1458                           	opt stack 0
  1459  000080                     _Display_D1:
  1460                           	opt stack 0
  1461  000080                     	ds	11
  1462  00008B                     _alarm_time:
  1463                           	opt stack 0
  1464  00008B                     	ds	9
  1465  000094                     _setup_alarm_time:
  1466                           	opt stack 0
  1467  000094                     	ds	9
  1468  00009D                     _setup_date:
  1469                           	opt stack 0
  1470  00009D                     	ds	9
  1471  0000A6                     _setup_time:
  1472                           	opt stack 0
  1473  0000A6                     	ds	9
  1474  0000AF                     _setup_fan_text:
  1475                           	opt stack 0
  1476  0000AF                     	ds	5
  1477  0000B4                     _Alarm_SW_Txt:
  1478                           	opt stack 0
  1479  0000B4                     	ds	4
  1480  0000B8                     _Display_D2:
  1481                           	opt stack 0
  1482  0000B8                     	ds	4
  1483  0000BC                     _RTC_ALARM_Txt:
  1484                           	opt stack 0
  1485  0000BC                     	ds	2
  1486  0000BE                     _date:
  1487                           	opt stack 0
  1488  0000BE                     	ds	9
  1489  0000C7                     _time:
  1490                           	opt stack 0
  1491  0000C7                     	ds	9
  1492  0000D0                     _RPM_Txt:
  1493                           	opt stack 0
  1494  0000D0                     	ds	5
  1495  0000D5                     _DC_Txt:
  1496                           	opt stack 0
  1497  0000D5                     	ds	4
  1498  0000D9                     _Fan_SW_Txt:
  1499                           	opt stack 0
  1500  0000D9                     	ds	4
  1501  0000DD                     _tempC:
  1502                           	opt stack 0
  1503  0000DD                     	ds	4
  1504  0000E1                     _tempF:
  1505                           	opt stack 0
  1506  0000E1                     	ds	4
  1507                           tblptru	equ	0xFF8
  1508                           tblptrh	equ	0xFF7
  1509                           tblptrl	equ	0xFF6
  1510                           tablat	equ	0xFF5
  1511                           postinc0	equ	0xFEE
  1512                           wreg	equ	0xFE8
  1513                           postdec1	equ	0xFE5
  1514                           fsr1l	equ	0xFE1
  1515                           
  1516                           	psect	dataBANK1
  1517  000100                     __pdataBANK1:
  1518                           	opt stack 0
  1519  000100                     _txt1:
  1520                           	opt stack 0
  1521  000100                     	ds	84
  1522  000154                     _array1:
  1523                           	opt stack 0
  1524  000154                     	ds	21
  1525  000169                     _buffer:
  1526                           	opt stack 0
  1527  000169                     	ds	31
  1528                           tblptru	equ	0xFF8
  1529                           tblptrh	equ	0xFF7
  1530                           tblptrl	equ	0xFF6
  1531                           tablat	equ	0xFF5
  1532                           postinc0	equ	0xFEE
  1533                           wreg	equ	0xFE8
  1534                           postdec1	equ	0xFE5
  1535                           fsr1l	equ	0xFE1
  1536                           
  1537                           	psect	cstackBANK1
  1538  000188                     __pcstackBANK1:
  1539                           	opt stack 0
  1540  000188                     main@U:
  1541                           	opt stack 0
  1542                           
  1543                           ; 1 bytes @ 0x0
  1544  000188                     	ds	1
  1545  000189                     main@j:
  1546                           	opt stack 0
  1547                           
  1548                           ; 2 bytes @ 0x1
  1549  000189                     	ds	2
  1550                           tblptru	equ	0xFF8
  1551                           tblptrh	equ	0xFF7
  1552                           tblptrl	equ	0xFF6
  1553                           tablat	equ	0xFF5
  1554                           postinc0	equ	0xFEE
  1555                           wreg	equ	0xFE8
  1556                           postdec1	equ	0xFE5
  1557                           fsr1l	equ	0xFE1
  1558                           
  1559                           	psect	cstackBANK0
  1560  0000F3                     __pcstackBANK0:
  1561                           	opt stack 0
  1562  0000F3                     drawtext@x:
  1563                           	opt stack 0
  1564                           
  1565                           ; 1 bytes @ 0x0
  1566  0000F3                     	ds	1
  1567  0000F4                     drawtext@textsize:
  1568                           	opt stack 0
  1569                           
  1570                           ; 2 bytes @ 0x1
  1571  0000F4                     	ds	2
  1572  0000F6                     drawtext@i:
  1573                           	opt stack 0
  1574                           
  1575                           ; 2 bytes @ 0x3
  1576  0000F6                     	ds	2
  1577  0000F8                     drawtext@cursor_y:
  1578                           	opt stack 0
  1579                           
  1580                           ; 1 bytes @ 0x5
  1581  0000F8                     	ds	1
  1582  0000F9                     drawtext@cursor_x:
  1583                           	opt stack 0
  1584                           
  1585                           ; 1 bytes @ 0x6
  1586  0000F9                     	ds	1
  1587  0000FA                     _Update_Screen$2400:
  1588                           	opt stack 0
  1589                           
  1590                           ; 2 bytes @ 0x7
  1591  0000FA                     	ds	2
  1592  0000FC                     Update_Screen@neg_tempF:
  1593                           	opt stack 0
  1594                           
  1595                           ; 2 bytes @ 0x9
  1596  0000FC                     	ds	2
  1597  0000FE                     _Update_Screen$2399:
  1598                           	opt stack 0
  1599                           
  1600                           ; 2 bytes @ 0xB
  1601  0000FE                     	ds	2
  1602                           tblptru	equ	0xFF8
  1603                           tblptrh	equ	0xFF7
  1604                           tblptrl	equ	0xFF6
  1605                           tablat	equ	0xFF5
  1606                           postinc0	equ	0xFEE
  1607                           wreg	equ	0xFE8
  1608                           postdec1	equ	0xFE5
  1609                           fsr1l	equ	0xFE1
  1610                           
  1611                           	psect	cstackCOMRAM
  1612  000001                     __pcstackCOMRAM:
  1613                           	opt stack 0
  1614  000001                     ??_INT0_isr:
  1615  000001                     
  1616                           ; 1 bytes @ 0x0
  1617  000001                     	ds	2
  1618  000003                     ??_chkisr:
  1619                           
  1620                           ; 0 bytes @ 0x2
  1621  000003                     	ds	14
  1622  000011                     ??_isdigit:
  1623  000011                     ?_strlen:
  1624                           	opt stack 0
  1625  000011                     ?___wmul:
  1626                           	opt stack 0
  1627  000011                     ?___awmod:
  1628                           	opt stack 0
  1629  000011                     ?___lwdiv:
  1630                           	opt stack 0
  1631  000011                     ?___ftpack:
  1632                           	opt stack 0
  1633  000011                     ?___fttol:
  1634                           	opt stack 0
  1635  000011                     I2C_Read@ack:
  1636                           	opt stack 0
  1637  000011                     I2C_Write@outByte:
  1638                           	opt stack 0
  1639  000011                     spiwrite@x:
  1640                           	opt stack 0
  1641  000011                     putch@c:
  1642                           	opt stack 0
  1643  000011                     Set_DC_RGB@duty_cycle:
  1644                           	opt stack 0
  1645  000011                     Set_RPM_RGB@rpm:
  1646                           	opt stack 0
  1647  000011                     Wait_One_Sec@j:
  1648                           	opt stack 0
  1649  000011                     OpenUSART@spbrg:
  1650                           	opt stack 0
  1651  000011                     ___wmul@multiplier:
  1652                           	opt stack 0
  1653  000011                     ___awmod@dividend:
  1654                           	opt stack 0
  1655  000011                     ___lwdiv@dividend:
  1656                           	opt stack 0
  1657  000011                     strcpy@to:
  1658                           	opt stack 0
  1659  000011                     strlen@s:
  1660                           	opt stack 0
  1661  000011                     ___ftpack@arg:
  1662                           	opt stack 0
  1663  000011                     ___fttol@f1:
  1664                           	opt stack 0
  1665  000011                     I2C_Init@c:
  1666                           	opt stack 0
  1667                           
  1668                           ; 4 bytes @ 0x10
  1669  000011                     	ds	1
  1670  000012                     I2C_Read@n:
  1671                           	opt stack 0
  1672  000012                     I2C_Write@n:
  1673                           	opt stack 0
  1674  000012                     spiwrite@spidata:
  1675                           	opt stack 0
  1676  000012                     _isdigit$2048:
  1677                           	opt stack 0
  1678                           
  1679                           ; 1 bytes @ 0x11
  1680  000012                     	ds	1
  1681  000013                     ??_strlen:
  1682  000013                     I2C_Read@inByte:
  1683                           	opt stack 0
  1684  000013                     I2C_Write_Cmd_Only@Cmd:
  1685                           	opt stack 0
  1686  000013                     I2C_Write_Cmd_Write_Data@Cmd:
  1687                           	opt stack 0
  1688  000013                     DS3231_Setup_Time@Device:
  1689                           	opt stack 0
  1690  000013                     write_command@cmd_:
  1691                           	opt stack 0
  1692  000013                     write_data@data_:
  1693                           	opt stack 0
  1694  000013                     OpenUSART@config:
  1695                           	opt stack 0
  1696  000013                     isdigit@c:
  1697                           	opt stack 0
  1698  000013                     ___wmul@multiplicand:
  1699                           	opt stack 0
  1700  000013                     ___awmod@divisor:
  1701                           	opt stack 0
  1702  000013                     ___lwdiv@divisor:
  1703                           	opt stack 0
  1704  000013                     strcpy@from:
  1705                           	opt stack 0
  1706                           
  1707                           ; 2 bytes @ 0x12
  1708  000013                     	ds	1
  1709  000014                     ?_DS1621_Read_Temp:
  1710                           	opt stack 0
  1711  000014                     I2C_Write_Cmd_Only@Device:
  1712                           	opt stack 0
  1713  000014                     I2C_Write_Cmd_Write_Data@Data_Out:
  1714                           	opt stack 0
  1715  000014                     DS3231_Read_Time@Address:
  1716                           	opt stack 0
  1717  000014                     DS3231_Setup_Time@Address:
  1718                           	opt stack 0
  1719  000014                     setAddrWindow@y0:
  1720                           	opt stack 0
  1721  000014                     ___ftpack@exp:
  1722                           	opt stack 0
  1723                           
  1724                           ; 1 bytes @ 0x13
  1725  000014                     	ds	1
  1726  000015                     ??___fttol:
  1727  000015                     I2C_Write_Cmd_Write_Data@Device:
  1728                           	opt stack 0
  1729  000015                     DS3231_Read_Time@Device:
  1730                           	opt stack 0
  1731  000015                     setAddrWindow@x1:
  1732                           	opt stack 0
  1733  000015                     ___awmod@counter:
  1734                           	opt stack 0
  1735  000015                     ___ftpack@sign:
  1736                           	opt stack 0
  1737  000015                     ___lwdiv@counter:
  1738                           	opt stack 0
  1739  000015                     ___wmul@product:
  1740                           	opt stack 0
  1741  000015                     strcpy@cp:
  1742                           	opt stack 0
  1743  000015                     strlen@cp:
  1744                           	opt stack 0
  1745                           
  1746                           ; 2 bytes @ 0x14
  1747  000015                     	ds	1
  1748  000016                     ??___ftpack:
  1749  000016                     DS1621_Init@Device:
  1750                           	opt stack 0
  1751  000016                     DS1621_Read_Temp@Cmd:
  1752                           	opt stack 0
  1753  000016                     setAddrWindow@y1:
  1754                           	opt stack 0
  1755  000016                     ___awmod@sign:
  1756                           	opt stack 0
  1757  000016                     ___lwdiv@quotient:
  1758                           	opt stack 0
  1759                           
  1760                           ; 2 bytes @ 0x15
  1761  000016                     	ds	1
  1762  000017                     ?___awdiv:
  1763                           	opt stack 0
  1764  000017                     DS1621_Read_Temp@Data_Ret:
  1765                           	opt stack 0
  1766  000017                     setAddrWindow@x0:
  1767                           	opt stack 0
  1768  000017                     delay_ms@ms:
  1769                           	opt stack 0
  1770  000017                     ___awdiv@dividend:
  1771                           	opt stack 0
  1772                           
  1773                           ; 2 bytes @ 0x16
  1774  000017                     	ds	1
  1775  000018                     ?___lwmod:
  1776                           	opt stack 0
  1777  000018                     DS1621_Read_Temp@Device:
  1778                           	opt stack 0
  1779  000018                     drawPixel@y:
  1780                           	opt stack 0
  1781  000018                     drawFastVLine@y:
  1782                           	opt stack 0
  1783  000018                     fillRectangle@y:
  1784                           	opt stack 0
  1785  000018                     ___lwmod@dividend:
  1786                           	opt stack 0
  1787                           
  1788                           ; 2 bytes @ 0x17
  1789  000018                     	ds	1
  1790  000019                     ??_delay_ms:
  1791  000019                     ?___lbtoft:
  1792                           	opt stack 0
  1793  000019                     drawFastVLine@h:
  1794                           	opt stack 0
  1795  000019                     fillRectangle@w:
  1796                           	opt stack 0
  1797  000019                     drawPixel@color:
  1798                           	opt stack 0
  1799  000019                     ___awdiv@divisor:
  1800                           	opt stack 0
  1801                           
  1802                           ; 2 bytes @ 0x18
  1803  000019                     	ds	1
  1804  00001A                     fillRectangle@h:
  1805                           	opt stack 0
  1806  00001A                     ___fttol@sign1:
  1807                           	opt stack 0
  1808  00001A                     drawFastVLine@color:
  1809                           	opt stack 0
  1810  00001A                     ___lwmod@divisor:
  1811                           	opt stack 0
  1812                           
  1813                           ; 2 bytes @ 0x19
  1814  00001A                     	ds	1
  1815  00001B                     drawPixel@x:
  1816                           	opt stack 0
  1817  00001B                     ___awdiv@counter:
  1818                           	opt stack 0
  1819  00001B                     delay_ms@count:
  1820                           	opt stack 0
  1821  00001B                     fillRectangle@color:
  1822                           	opt stack 0
  1823  00001B                     ___fttol@lval:
  1824                           	opt stack 0
  1825                           
  1826                           ; 4 bytes @ 0x1A
  1827  00001B                     	ds	1
  1828  00001C                     ??_drawFastVLine:
  1829  00001C                     ___awdiv@sign:
  1830                           	opt stack 0
  1831  00001C                     ___lbtoft@c:
  1832                           	opt stack 0
  1833  00001C                     ___lwmod@counter:
  1834                           	opt stack 0
  1835  00001C                     drawCircle@x0:
  1836                           	opt stack 0
  1837                           
  1838                           ; 2 bytes @ 0x1B
  1839  00001C                     	ds	1
  1840  00001D                     ??_fillRectangle:
  1841  00001D                     ?_printf:
  1842                           	opt stack 0
  1843  00001D                     ?___ftmul:
  1844                           	opt stack 0
  1845  00001D                     printf@f:
  1846                           	opt stack 0
  1847  00001D                     ___awdiv@quotient:
  1848                           	opt stack 0
  1849  00001D                     ___ftmul@f1:
  1850                           	opt stack 0
  1851                           
  1852                           ; 3 bytes @ 0x1C
  1853  00001D                     	ds	1
  1854  00001E                     drawCircle@y0:
  1855                           	opt stack 0
  1856                           
  1857                           ; 2 bytes @ 0x1D
  1858  00001E                     	ds	1
  1859  00001F                     ?_get_RPM:
  1860                           	opt stack 0
  1861  00001F                     ___fttol@exp1:
  1862                           	opt stack 0
  1863                           
  1864                           ; 1 bytes @ 0x1E
  1865  00001F                     	ds	1
  1866  000020                     drawFastVLine@hi:
  1867                           	opt stack 0
  1868  000020                     drawCircle@r:
  1869                           	opt stack 0
  1870  000020                     ___ftmul@f2:
  1871                           	opt stack 0
  1872                           
  1873                           ; 3 bytes @ 0x1F
  1874  000020                     	ds	1
  1875  000021                     drawFastVLine@lo:
  1876                           	opt stack 0
  1877  000021                     fillRectangle@hi:
  1878                           	opt stack 0
  1879  000021                     get_RPM@RPS:
  1880                           	opt stack 0
  1881                           
  1882                           ; 2 bytes @ 0x20
  1883  000021                     	ds	1
  1884  000022                     drawFastVLine@x:
  1885                           	opt stack 0
  1886  000022                     fillRectangle@lo:
  1887                           	opt stack 0
  1888  000022                     drawCircle@color:
  1889                           	opt stack 0
  1890                           
  1891                           ; 2 bytes @ 0x21
  1892  000022                     	ds	1
  1893  000023                     ??___ftmul:
  1894  000023                     fillRect@y:
  1895                           	opt stack 0
  1896  000023                     fillRectangle@x:
  1897                           	opt stack 0
  1898                           
  1899                           ; 1 bytes @ 0x22
  1900  000023                     	ds	1
  1901  000024                     ??_drawCircle:
  1902  000024                     fillRect@w:
  1903                           	opt stack 0
  1904  000024                     fillScreen@color:
  1905                           	opt stack 0
  1906                           
  1907                           ; 2 bytes @ 0x23
  1908  000024                     	ds	1
  1909  000025                     fillRect@h:
  1910                           	opt stack 0
  1911                           
  1912                           ; 1 bytes @ 0x24
  1913  000025                     	ds	1
  1914  000026                     ___ftmul@exp:
  1915                           	opt stack 0
  1916  000026                     fillRect@color:
  1917                           	opt stack 0
  1918  000026                     drawCircle@ddF_x:
  1919                           	opt stack 0
  1920                           
  1921                           ; 2 bytes @ 0x25
  1922  000026                     	ds	1
  1923  000027                     ___ftmul@f3_as_product:
  1924                           	opt stack 0
  1925                           
  1926                           ; 3 bytes @ 0x26
  1927  000027                     	ds	1
  1928  000028                     ??_fillRect:
  1929  000028                     drawCircle@ddF_y:
  1930                           	opt stack 0
  1931                           
  1932                           ; 2 bytes @ 0x27
  1933  000028                     	ds	2
  1934  00002A                     ___ftmul@cntr:
  1935                           	opt stack 0
  1936  00002A                     drawCircle@f:
  1937                           	opt stack 0
  1938                           
  1939                           ; 2 bytes @ 0x29
  1940  00002A                     	ds	1
  1941  00002B                     ??_printf:
  1942  00002B                     fillRect@x:
  1943                           	opt stack 0
  1944  00002B                     ___ftmul@sign:
  1945                           	opt stack 0
  1946                           
  1947                           ; 1 bytes @ 0x2A
  1948  00002B                     	ds	1
  1949  00002C                     ?___ftdiv:
  1950                           	opt stack 0
  1951  00002C                     fillRect@i:
  1952                           	opt stack 0
  1953  00002C                     drawCircle@x:
  1954                           	opt stack 0
  1955  00002C                     ___ftdiv@f1:
  1956                           	opt stack 0
  1957                           
  1958                           ; 3 bytes @ 0x2B
  1959  00002C                     	ds	2
  1960  00002E                     drawChar@y:
  1961                           	opt stack 0
  1962  00002E                     drawCircle@y:
  1963                           	opt stack 0
  1964                           
  1965                           ; 2 bytes @ 0x2D
  1966  00002E                     	ds	1
  1967  00002F                     drawChar@c:
  1968                           	opt stack 0
  1969  00002F                     printf@idx:
  1970                           	opt stack 0
  1971  00002F                     ___ftdiv@f2:
  1972                           	opt stack 0
  1973                           
  1974                           ; 3 bytes @ 0x2E
  1975  00002F                     	ds	1
  1976  000030                     drawChar@color:
  1977                           	opt stack 0
  1978  000030                     printf@ap:
  1979                           	opt stack 0
  1980                           
  1981                           ; 2 bytes @ 0x2F
  1982  000030                     	ds	2
  1983  000032                     ??___ftdiv:
  1984  000032                     printf@prec:
  1985                           	opt stack 0
  1986  000032                     drawChar@bg:
  1987                           	opt stack 0
  1988                           
  1989                           ; 2 bytes @ 0x31
  1990  000032                     	ds	1
  1991  000033                     printf@val:
  1992                           	opt stack 0
  1993                           
  1994                           ; 2 bytes @ 0x32
  1995  000033                     	ds	1
  1996  000034                     drawChar@size:
  1997                           	opt stack 0
  1998                           
  1999                           ; 1 bytes @ 0x33
  2000  000034                     	ds	1
  2001  000035                     drawChar@line:
  2002                           	opt stack 0
  2003  000035                     printf@flag:
  2004                           	opt stack 0
  2005  000035                     ___ftdiv@cntr:
  2006                           	opt stack 0
  2007                           
  2008                           ; 1 bytes @ 0x34
  2009  000035                     	ds	1
  2010  000036                     drawChar@x:
  2011                           	opt stack 0
  2012  000036                     printf@width:
  2013                           	opt stack 0
  2014  000036                     ___ftdiv@f3:
  2015                           	opt stack 0
  2016                           
  2017                           ; 3 bytes @ 0x35
  2018  000036                     	ds	1
  2019  000037                     drawChar@j:
  2020                           	opt stack 0
  2021                           
  2022                           ; 1 bytes @ 0x36
  2023  000037                     	ds	1
  2024  000038                     drawChar@i:
  2025                           	opt stack 0
  2026  000038                     printf@c:
  2027                           	opt stack 0
  2028                           
  2029                           ; 1 bytes @ 0x37
  2030  000038                     	ds	1
  2031  000039                     drawtext@y:
  2032                           	opt stack 0
  2033  000039                     ___ftdiv@exp:
  2034                           	opt stack 0
  2035                           
  2036                           ; 1 bytes @ 0x38
  2037  000039                     	ds	1
  2038  00003A                     ___ftdiv@sign:
  2039                           	opt stack 0
  2040  00003A                     drawtext@_text:
  2041                           	opt stack 0
  2042                           
  2043                           ; 2 bytes @ 0x39
  2044  00003A                     	ds	1
  2045  00003B                     ??_do_update_pwm:
  2046                           
  2047                           ; 0 bytes @ 0x3A
  2048  00003B                     	ds	1
  2049  00003C                     drawtext@color:
  2050                           	opt stack 0
  2051                           
  2052                           ; 2 bytes @ 0x3B
  2053  00003C                     	ds	2
  2054  00003E                     drawtext@bg:
  2055                           	opt stack 0
  2056  00003E                     do_update_pwm@dc_f:
  2057                           	opt stack 0
  2058                           
  2059                           ; 3 bytes @ 0x3D
  2060  00003E                     	ds	2
  2061  000040                     drawtext@size:
  2062                           	opt stack 0
  2063                           
  2064                           ; 1 bytes @ 0x3F
  2065  000040                     	ds	1
  2066  000041                     ??_drawtext:
  2067  000041                     do_update_pwm@duty_cycle:
  2068                           	opt stack 0
  2069                           
  2070                           ; 1 bytes @ 0x40
  2071  000041                     	ds	1
  2072  000042                     do_update_pwm@dc_I:
  2073                           	opt stack 0
  2074                           
  2075                           ; 2 bytes @ 0x41
  2076  000042                     	ds	1
  2077  000043                     ??_Update_Screen:
  2078                           
  2079                           ; 0 bytes @ 0x42
  2080  000043                     	ds	1
  2081  000044                     
  2082                           ; 0 bytes @ 0x43
  2083  000044                     	ds	1
  2084  000045                     
  2085                           ; 0 bytes @ 0x44
  2086  000045                     	ds	1
  2087                           tblptru	equ	0xFF8
  2088                           tblptrh	equ	0xFF7
  2089                           tblptrl	equ	0xFF6
  2090                           tablat	equ	0xFF5
  2091                           postinc0	equ	0xFEE
  2092                           wreg	equ	0xFE8
  2093                           postdec1	equ	0xFE5
  2094                           fsr1l	equ	0xFE1
  2095                           
  2096 ;;
  2097 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2098 ;;
  2099 ;; *************** function _main *****************
  2100 ;; Defined at:
  2101 ;;		line 123 in file "Lab11pA_Restart.c"
  2102 ;; Parameters:    Size  Location     Type
  2103 ;;		None
  2104 ;; Auto vars:     Size  Location     Type
  2105 ;;  j               2    1[BANK1 ] int 
  2106 ;;  U               1    0[BANK1 ] unsigned char 
  2107 ;; Return value:  Size  Location     Type
  2108 ;;		None               void
  2109 ;; Registers used:
  2110 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2111 ;; Tracked objects:
  2112 ;;		On entry : 0/0
  2113 ;;		On exit  : 0/0
  2114 ;;		Unchanged: 0/0
  2115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2116 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2117 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2118 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2119 ;;      Totals:         1       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2120 ;;Total ram usage:        4 bytes
  2121 ;; Hardware stack levels required when called:   11
  2122 ;; This function calls:
  2123 ;;		_DS1621_Read_Temp
  2124 ;;		_DS3231_Read_Time
  2125 ;;		_DS3231_Setup_Time
  2126 ;;		_Decrease_Speed
  2127 ;;		_Do_Beep
  2128 ;;		_Do_Init
  2129 ;;		_Increase_Speed
  2130 ;;		_Initialize_Screen
  2131 ;;		_Set_DC_RGB
  2132 ;;		_Set_RPM_RGB
  2133 ;;		_Toggle_Fan
  2134 ;;		_Update_Screen
  2135 ;;		___awdiv
  2136 ;;		___wmul
  2137 ;;		_do_update_pwm
  2138 ;;		_get_RPM
  2139 ;;		_printf
  2140 ;; This function is called by:
  2141 ;;		Startup code after reset
  2142 ;; This function uses a non-reentrant model
  2143 ;;
  2144                           
  2145                           	psect	text0
  2146  000A0E                     __ptext0:
  2147                           	opt stack 0
  2148  000A0E                     _main:
  2149                           	opt stack 20
  2150                           
  2151                           ;Lab11pA_Restart.c: 125: Do_Init();
  2152                           
  2153                           ;incstack = 0
  2154  000A0E  EC22  F010         	call	_Do_Init	;wreg free
  2155                           
  2156                           ;Lab11pA_Restart.c: 126: Initialize_Screen();
  2157  000A12  ECD2  F003         	call	_Initialize_Screen	;wreg free
  2158                           
  2159                           ;Lab11pA_Restart.c: 128: PORTAbits.RA5 = 0;
  2160  000A16  9A80               	bcf	3968,5,c	;volatile
  2161                           
  2162                           ;Lab11pA_Restart.c: 129: PORTEbits.RE2 = 0;
  2163  000A18  9484               	bcf	3972,2,c	;volatile
  2164                           
  2165                           ;Lab11pA_Restart.c: 130: duty_cycle = 50;
  2166  000A1A  0E32               	movlw	50
  2167  000A1C  6E5C               	movwf	_duty_cycle,c
  2168                           
  2169                           ;Lab11pA_Restart.c: 131: do_update_pwm(duty_cycle);
  2170  000A1E  505C               	movf	_duty_cycle,w,c
  2171  000A20  EC8B  F00C         	call	_do_update_pwm
  2172  000A24  D000               	goto	l7068
  2173  000A26                     l7068:
  2174                           
  2175                           ;Lab11pA_Restart.c: 133: {
  2176                           ;Lab11pA_Restart.c: 135: DS3231_Read_Time();
  2177  000A26  EC4C  F00F         	call	_DS3231_Read_Time	;wreg free
  2178                           
  2179                           ;Lab11pA_Restart.c: 137: if(tempSecond != second)
  2180  000A2A  5062               	movf	_second,w,c
  2181  000A2C  186E               	xorwf	_tempSecond,w,c
  2182  000A2E  B4D8               	btfsc	status,2,c
  2183  000A30  D075               	goto	l7092
  2184                           
  2185                           ;Lab11pA_Restart.c: 138: {
  2186                           ;Lab11pA_Restart.c: 139: tempSecond = second;
  2187  000A32  C062  F06E         	movff	_second,_tempSecond
  2188                           
  2189                           ;Lab11pA_Restart.c: 140: DS1621_tempC = DS1621_Read_Temp();
  2190  000A36  EC0D  F011         	call	_DS1621_Read_Temp	;wreg free
  2191  000A3A  C014  F046         	movff	?_DS1621_Read_Temp,_DS1621_tempC
  2192  000A3E  C015  F047         	movff	?_DS1621_Read_Temp+1,_DS1621_tempC+1
  2193                           
  2194                           ;Lab11pA_Restart.c: 141: DS1621_tempF = (DS1621_tempC * 9 / 5) + 32;
  2195  000A42  C046  F011         	movff	_DS1621_tempC,___wmul@multiplier
  2196  000A46  C047  F012         	movff	_DS1621_tempC+1,___wmul@multiplier+1
  2197  000A4A  0E00               	movlw	0
  2198  000A4C  6E14               	movwf	___wmul@multiplicand+1,c
  2199  000A4E  0E09               	movlw	9
  2200  000A50  6E13               	movwf	___wmul@multiplicand,c
  2201  000A52  EC8B  F011         	call	___wmul	;wreg free
  2202  000A56  C011  F017         	movff	?___wmul,___awdiv@dividend
  2203  000A5A  C012  F018         	movff	?___wmul+1,___awdiv@dividend+1
  2204  000A5E  0E00               	movlw	0
  2205  000A60  6E1A               	movwf	___awdiv@divisor+1,c
  2206  000A62  0E05               	movlw	5
  2207  000A64  6E19               	movwf	___awdiv@divisor,c
  2208  000A66  ECE6  F00C         	call	___awdiv	;wreg free
  2209  000A6A  0E20               	movlw	32
  2210  000A6C  2417               	addwf	?___awdiv,w,c
  2211  000A6E  6E48               	movwf	_DS1621_tempF,c
  2212  000A70  0E00               	movlw	0
  2213  000A72  2018               	addwfc	?___awdiv+1,w,c
  2214  000A74  6E49               	movwf	_DS1621_tempF+1,c
  2215                           
  2216                           ;Lab11pA_Restart.c: 142: rpm = get_RPM();
  2217  000A76  EC91  F010         	call	_get_RPM	;wreg free
  2218  000A7A  C01F  F04C         	movff	?_get_RPM,_rpm
  2219  000A7E  C020  F04D         	movff	?_get_RPM+1,_rpm+1
  2220                           
  2221                           ;Lab11pA_Restart.c: 143: printf ("%02x:%02x:%02x %02x/%02x/%02x",hour,minute,second,mont
      +                          h,day,year);
  2222  000A82  0E14               	movlw	low STR_12
  2223  000A84  6E1D               	movwf	printf@f,c
  2224  000A86  0EFF               	movlw	high STR_12
  2225  000A88  6E1E               	movwf	printf@f+1,c
  2226  000A8A  C05E  F01F         	movff	_hour,?_printf+2
  2227  000A8E  6A20               	clrf	?_printf+3,c
  2228  000A90  C05F  F021         	movff	_minute,?_printf+4
  2229  000A94  6A22               	clrf	?_printf+5,c
  2230  000A96  C062  F023         	movff	_second,?_printf+6
  2231  000A9A  6A24               	clrf	?_printf+7,c
  2232  000A9C  C060  F025         	movff	_month,?_printf+8
  2233  000AA0  6A26               	clrf	?_printf+9,c
  2234  000AA2  C05A  F027         	movff	_day,?_printf+10
  2235  000AA6  6A28               	clrf	?_printf+11,c
  2236  000AA8  C06C  F029         	movff	_year,?_printf+12
  2237  000AAC  6A2A               	clrf	?_printf+13,c
  2238  000AAE  EC25  F002         	call	_printf	;wreg free
  2239                           
  2240                           ;Lab11pA_Restart.c: 144: printf (" Temp = %d C = %d F ", DS1621_tempC, DS1621_tempF);
  2241  000AB2  0E76               	movlw	low STR_13
  2242  000AB4  6E1D               	movwf	printf@f,c
  2243  000AB6  0EFF               	movlw	high STR_13
  2244  000AB8  6E1E               	movwf	printf@f+1,c
  2245  000ABA  C046  F01F         	movff	_DS1621_tempC,?_printf+2
  2246  000ABE  C047  F020         	movff	_DS1621_tempC+1,?_printf+3
  2247  000AC2  C048  F021         	movff	_DS1621_tempF,?_printf+4
  2248  000AC6  C049  F022         	movff	_DS1621_tempF+1,?_printf+5
  2249  000ACA  EC25  F002         	call	_printf	;wreg free
  2250                           
  2251                           ;Lab11pA_Restart.c: 145: printf ("RPM = %d  dc = %d\r\n", rpm, duty_cycle);
  2252  000ACE  0E8B               	movlw	low STR_14
  2253  000AD0  6E1D               	movwf	printf@f,c
  2254  000AD2  0EFF               	movlw	high STR_14
  2255  000AD4  6E1E               	movwf	printf@f+1,c
  2256  000AD6  C04C  F01F         	movff	_rpm,?_printf+2
  2257  000ADA  C04D  F020         	movff	_rpm+1,?_printf+3
  2258  000ADE  C05C  F021         	movff	_duty_cycle,?_printf+4
  2259  000AE2  6A22               	clrf	?_printf+5,c
  2260  000AE4  EC25  F002         	call	_printf	;wreg free
  2261                           
  2262                           ;Lab11pA_Restart.c: 146: char U = (int)(duty_cycle/10);
  2263  000AE8  C05C  F017         	movff	_duty_cycle,___awdiv@dividend
  2264  000AEC  6A18               	clrf	___awdiv@dividend+1,c
  2265  000AEE  0E00               	movlw	0
  2266  000AF0  6E1A               	movwf	___awdiv@divisor+1,c
  2267  000AF2  0E0A               	movlw	10
  2268  000AF4  6E19               	movwf	___awdiv@divisor,c
  2269  000AF6  ECE6  F00C         	call	___awdiv	;wreg free
  2270  000AFA  5017               	movf	?___awdiv,w,c
  2271  000AFC  0101               	movlb	1	; () banked
  2272  000AFE  6F88               	movwf	main@U& (0+255),b
  2273                           
  2274                           ; BSR set to: 1
  2275                           ;Lab11pA_Restart.c: 147: Set_DC_RGB(U);
  2276  000B00  C188  F011         	movff	main@U,Set_DC_RGB@duty_cycle
  2277  000B04  6A12               	clrf	Set_DC_RGB@duty_cycle+1,c
  2278  000B06  EC48  F008         	call	_Set_DC_RGB	;wreg free
  2279                           
  2280                           ;Lab11pA_Restart.c: 148: Set_RPM_RGB(rpm);
  2281  000B0A  C04C  F011         	movff	_rpm,Set_RPM_RGB@rpm
  2282  000B0E  C04D  F012         	movff	_rpm+1,Set_RPM_RGB@rpm+1
  2283  000B12  ECB0  F00E         	call	_Set_RPM_RGB	;wreg free
  2284                           
  2285                           ;Lab11pA_Restart.c: 149: Update_Screen();
  2286  000B16  EC0E  F000         	call	_Update_Screen	;wreg free
  2287  000B1A  D000               	goto	l7092
  2288  000B1C                     l7092:
  2289                           
  2290                           ;Lab11pA_Restart.c: 150: }
  2291                           ;Lab11pA_Restart.c: 152: if (nec_ok == 1)
  2292  000B1C  0100               	movlb	0	; () banked
  2293  000B1E  05ED               	decf	_nec_ok& (0+255),w,b
  2294  000B20  0100               	movlb	0	; () banked
  2295  000B22  11EE               	iorwf	(_nec_ok+1)& (0+255),w,b
  2296  000B24  A4D8               	btfss	status,2,c
  2297  000B26  D77F               	goto	l7068
  2298                           
  2299                           ; BSR set to: 0
  2300                           ;Lab11pA_Restart.c: 153: {
  2301                           ;Lab11pA_Restart.c: 154: nec_ok = 0;
  2302  000B28  0E00               	movlw	0
  2303  000B2A  0100               	movlb	0	; () banked
  2304  000B2C  6FEE               	movwf	(_nec_ok+1)& (0+255),b
  2305  000B2E  0E00               	movlw	0
  2306  000B30  6FED               	movwf	_nec_ok& (0+255),b
  2307                           
  2308                           ; BSR set to: 0
  2309                           ;Lab11pA_Restart.c: 155: printf ("NEC_Code = %x\r\n", Nec_code1);
  2310  000B32  0EB0               	movlw	low STR_15
  2311  000B34  6E1D               	movwf	printf@f,c
  2312  000B36  0EFF               	movlw	high STR_15
  2313  000B38  6E1E               	movwf	printf@f+1,c
  2314  000B3A  C051  F01F         	movff	_Nec_code1,?_printf+2
  2315  000B3E  6A20               	clrf	?_printf+3,c
  2316  000B40  EC25  F002         	call	_printf	;wreg free
  2317                           
  2318                           ;Lab11pA_Restart.c: 157: INTCONbits.INT0IE = 1;
  2319  000B44  88F2               	bsf	intcon,4,c	;volatile
  2320                           
  2321                           ;Lab11pA_Restart.c: 158: INTCON2bits.INTEDG0 = 0;
  2322  000B46  9CF1               	bcf	intcon2,6,c	;volatile
  2323                           
  2324                           ;Lab11pA_Restart.c: 160: found = 0xff;
  2325  000B48  685D               	setf	_found,c
  2326                           
  2327                           ;Lab11pA_Restart.c: 161: for (int j=0; j< 21; j++)
  2328  000B4A  0E00               	movlw	0
  2329  000B4C  0101               	movlb	1	; () banked
  2330  000B4E  6F8A               	movwf	(main@j+1)& (0+255),b
  2331  000B50  0E00               	movlw	0
  2332  000B52  6F89               	movwf	main@j& (0+255),b
  2333  000B54                     l7106:
  2334                           
  2335                           ; BSR set to: 1
  2336  000B54  0101               	movlb	1	; () banked
  2337  000B56  BF8A               	btfsc	(main@j+1)& (0+255),7,b
  2338  000B58  D00A               	goto	l7110
  2339  000B5A  0101               	movlb	1	; () banked
  2340  000B5C  518A               	movf	(main@j+1)& (0+255),w,b
  2341  000B5E  E120               	bnz	l7120
  2342  000B60  0E15               	movlw	21
  2343  000B62  0101               	movlb	1	; () banked
  2344  000B64  5D89               	subwf	main@j& (0+255),w,b
  2345  000B66  B0D8               	btfsc	status,0,c
  2346  000B68  D01B               	goto	l7120
  2347  000B6A  D001               	goto	l7110
  2348                           
  2349                           ; BSR set to: 1
  2350  000B6C  D019               	goto	l7120
  2351  000B6E                     l7110:
  2352                           
  2353                           ; BSR set to: 1
  2354                           ;Lab11pA_Restart.c: 162: {
  2355                           ;Lab11pA_Restart.c: 163: if (Nec_code1 == array1[j])
  2356  000B6E  0E54               	movlw	low _array1
  2357  000B70  0101               	movlb	1	; () banked
  2358  000B72  2589               	addwf	main@j& (0+255),w,b
  2359  000B74  6ED9               	movwf	fsr2l,c
  2360  000B76  0E01               	movlw	high _array1
  2361  000B78  0101               	movlb	1	; () banked
  2362  000B7A  218A               	addwfc	(main@j+1)& (0+255),w,b
  2363  000B7C  6EDA               	movwf	fsr2h,c
  2364  000B7E  5051               	movf	_Nec_code1,w,c
  2365  000B80  18DE               	xorwf	postinc2,w,c
  2366  000B82  A4D8               	btfss	status,2,c
  2367  000B84  D008               	goto	l7116
  2368                           
  2369                           ; BSR set to: 1
  2370                           ;Lab11pA_Restart.c: 164: {
  2371                           ;Lab11pA_Restart.c: 165: found = j;
  2372  000B86  C189  F05D         	movff	main@j,_found
  2373                           
  2374                           ; BSR set to: 1
  2375                           ;Lab11pA_Restart.c: 166: j = 21;
  2376  000B8A  0E00               	movlw	0
  2377  000B8C  0101               	movlb	1	; () banked
  2378  000B8E  6F8A               	movwf	(main@j+1)& (0+255),b
  2379  000B90  0E15               	movlw	21
  2380  000B92  6F89               	movwf	main@j& (0+255),b
  2381  000B94  D000               	goto	l7116
  2382  000B96                     l7116:
  2383                           
  2384                           ; BSR set to: 1
  2385  000B96  0101               	movlb	1	; () banked
  2386  000B98  4B89               	infsnz	main@j& (0+255),f,b
  2387  000B9A  2B8A               	incf	(main@j+1)& (0+255),f,b
  2388  000B9C  D7DB               	goto	l7106
  2389                           
  2390                           ; BSR set to: 1
  2391  000B9E  D000               	goto	l7120
  2392  000BA0                     l7120:
  2393                           
  2394                           ; BSR set to: 1
  2395                           ;Lab11pA_Restart.c: 167: }
  2396                           ;Lab11pA_Restart.c: 168: }
  2397                           ;Lab11pA_Restart.c: 170: if (found == 0xff)
  2398  000BA0  285D               	incf	_found,w,c
  2399  000BA2  A4D8               	btfss	status,2,c
  2400  000BA4  D007               	goto	l7124
  2401                           
  2402                           ; BSR set to: 1
  2403                           ;Lab11pA_Restart.c: 171: {
  2404                           ;Lab11pA_Restart.c: 172: printf ("Cannot find button \r\n");
  2405  000BA6  0E4A               	movlw	low STR_16
  2406  000BA8  6E1D               	movwf	printf@f,c
  2407  000BAA  0EFF               	movlw	high STR_16
  2408  000BAC  6E1E               	movwf	printf@f+1,c
  2409  000BAE  EC25  F002         	call	_printf	;wreg free
  2410                           
  2411                           ;Lab11pA_Restart.c: 173: }
  2412  000BB2  D739               	goto	l7068
  2413  000BB4                     l7124:
  2414                           
  2415                           ;Lab11pA_Restart.c: 174: else
  2416                           ;Lab11pA_Restart.c: 175: {
  2417                           ;Lab11pA_Restart.c: 176: Do_Beep();
  2418  000BB4  EC5B  F012         	call	_Do_Beep	;wreg free
  2419                           
  2420                           ;Lab11pA_Restart.c: 177: printf ("button = %d \r\n", found);
  2421  000BB8  0EC0               	movlw	low STR_17
  2422  000BBA  6E1D               	movwf	printf@f,c
  2423  000BBC  0EFF               	movlw	high STR_17
  2424  000BBE  6E1E               	movwf	printf@f+1,c
  2425  000BC0  C05D  F01F         	movff	_found,?_printf+2
  2426  000BC4  6A20               	clrf	?_printf+3,c
  2427  000BC6  EC25  F002         	call	_printf	;wreg free
  2428                           
  2429                           ;Lab11pA_Restart.c: 178: if (found == 5) Toggle_Fan();
  2430  000BCA  0E05               	movlw	5
  2431  000BCC  185D               	xorwf	_found,w,c
  2432  000BCE  A4D8               	btfss	status,2,c
  2433  000BD0  D003               	goto	l7132
  2434  000BD2  EC3D  F012         	call	_Toggle_Fan	;wreg free
  2435  000BD6  D000               	goto	l7132
  2436  000BD8                     l7132:
  2437                           
  2438                           ;Lab11pA_Restart.c: 179: if (found == 6) Decrease_Speed();
  2439  000BD8  0E06               	movlw	6
  2440  000BDA  185D               	xorwf	_found,w,c
  2441  000BDC  A4D8               	btfss	status,2,c
  2442  000BDE  D003               	goto	l7136
  2443  000BE0  ECE7  F011         	call	_Decrease_Speed	;wreg free
  2444  000BE4  D000               	goto	l7136
  2445  000BE6                     l7136:
  2446                           
  2447                           ;Lab11pA_Restart.c: 180: if (found == 7) Increase_Speed();
  2448  000BE6  0E07               	movlw	7
  2449  000BE8  185D               	xorwf	_found,w,c
  2450  000BEA  A4D8               	btfss	status,2,c
  2451  000BEC  D003               	goto	l7140
  2452  000BEE  ECB2  F011         	call	_Increase_Speed	;wreg free
  2453  000BF2  D000               	goto	l7140
  2454  000BF4                     l7140:
  2455                           
  2456                           ;Lab11pA_Restart.c: 181: if (found == 8)
  2457  000BF4  0E08               	movlw	8
  2458  000BF6  185D               	xorwf	_found,w,c
  2459  000BF8  A4D8               	btfss	status,2,c
  2460  000BFA  D009               	goto	l7146
  2461                           
  2462                           ;Lab11pA_Restart.c: 182: {
  2463                           ;Lab11pA_Restart.c: 183: printf("\nTime has been reset\r\n\n");
  2464  000BFC  0E32               	movlw	low STR_18
  2465  000BFE  6E1D               	movwf	printf@f,c
  2466  000C00  0EFF               	movlw	high STR_18
  2467  000C02  6E1E               	movwf	printf@f+1,c
  2468  000C04  EC25  F002         	call	_printf	;wreg free
  2469                           
  2470                           ;Lab11pA_Restart.c: 184: DS3231_Setup_Time();
  2471  000C08  ECE6  F00E         	call	_DS3231_Setup_Time	;wreg free
  2472                           
  2473                           ;Lab11pA_Restart.c: 185: }
  2474  000C0C  D70C               	goto	l7068
  2475  000C0E                     l7146:
  2476                           
  2477                           ;Lab11pA_Restart.c: 186: else do_update_pwm(duty_cycle);
  2478  000C0E  505C               	movf	_duty_cycle,w,c
  2479  000C10  EC8B  F00C         	call	_do_update_pwm
  2480  000C14  D708               	goto	l7068
  2481  000C16  EF0C  F000         	goto	start
  2482  000C1A                     __end_of_main:
  2483                           	opt stack 0
  2484                           tblptru	equ	0xFF8
  2485                           tblptrh	equ	0xFF7
  2486                           tblptrl	equ	0xFF6
  2487                           tablat	equ	0xFF5
  2488                           intcon	equ	0xFF2
  2489                           intcon2	equ	0xFF1
  2490                           postinc0	equ	0xFEE
  2491                           wreg	equ	0xFE8
  2492                           postdec1	equ	0xFE5
  2493                           fsr1l	equ	0xFE1
  2494                           postinc2	equ	0xFDE
  2495                           fsr2h	equ	0xFDA
  2496                           fsr2l	equ	0xFD9
  2497                           status	equ	0xFD8
  2498                           
  2499 ;; *************** function _printf *****************
  2500 ;; Defined at:
  2501 ;;		line 464 in file "E:\XC8\sources\common\doprnt.c"
  2502 ;; Parameters:    Size  Location     Type
  2503 ;;  f               2   28[COMRAM] PTR const unsigned char 
  2504 ;;		 -> STR_18(24), STR_17(15), STR_16(22), STR_15(16), 
  2505 ;;		 -> STR_14(20), STR_13(21), STR_12(30), 
  2506 ;; Auto vars:     Size  Location     Type
  2507 ;;  idx             1   46[COMRAM] unsigned char 
  2508 ;;  tmpval          4    0        struct .
  2509 ;;  cp              3    0        PTR const unsigned char 
  2510 ;;  width           2   53[COMRAM] int 
  2511 ;;  val             2   50[COMRAM] unsigned int 
  2512 ;;  ap              2   47[COMRAM] PTR void [1]
  2513 ;;		 -> ?_printf(2), 
  2514 ;;  len             2    0        unsigned int 
  2515 ;;  c               1   55[COMRAM] char 
  2516 ;;  flag            1   52[COMRAM] unsigned char 
  2517 ;;  prec            1   49[COMRAM] char 
  2518 ;; Return value:  Size  Location     Type
  2519 ;;                  2   28[COMRAM] int 
  2520 ;; Registers used:
  2521 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2522 ;; Tracked objects:
  2523 ;;		On entry : 0/0
  2524 ;;		On exit  : 0/0
  2525 ;;		Unchanged: 0/0
  2526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2527 ;;      Params:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2528 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2529 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2530 ;;      Totals:        28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2531 ;;Total ram usage:       28 bytes
  2532 ;; Hardware stack levels used:    1
  2533 ;; Hardware stack levels required when called:    4
  2534 ;; This function calls:
  2535 ;;		___lwdiv
  2536 ;;		___lwmod
  2537 ;;		___wmul
  2538 ;;		_isdigit
  2539 ;;		_putch
  2540 ;; This function is called by:
  2541 ;;		_main
  2542 ;; This function uses a non-reentrant model
  2543 ;;
  2544                           
  2545                           	psect	text1
  2546  00044A                     __ptext1:
  2547                           	opt stack 0
  2548  00044A                     _printf:
  2549                           	opt stack 26
  2550                           
  2551                           ;doprnt.c: 466: va_list ap;
  2552                           ;doprnt.c: 499: signed char c;
  2553                           ;doprnt.c: 501: int width;
  2554                           ;doprnt.c: 506: signed char prec;
  2555                           ;doprnt.c: 508: unsigned char flag;
  2556                           ;doprnt.c: 523: union {
  2557                           ;doprnt.c: 524: unsigned long vd;
  2558                           ;doprnt.c: 525: double integ;
  2559                           ;doprnt.c: 526: } tmpval;
  2560                           ;doprnt.c: 528: unsigned int val;
  2561                           ;doprnt.c: 529: unsigned len;
  2562                           ;doprnt.c: 530: const char * cp;
  2563                           ;doprnt.c: 533: *ap = __va_start();
  2564                           
  2565                           ;incstack = 0
  2566  00044A  0E1F               	movlw	low (?_printf+2)
  2567  00044C  6E30               	movwf	printf@ap,c
  2568  00044E  0E00               	movlw	high (?_printf+2)
  2569  000450  6E31               	movwf	printf@ap+1,c
  2570                           
  2571                           ;doprnt.c: 536: while(c = *f++) {
  2572  000452  D199               	goto	l6780
  2573  000454                     l6654:
  2574                           
  2575                           ;doprnt.c: 538: if(c != '%')
  2576  000454  0E25               	movlw	37
  2577  000456  1838               	xorwf	printf@c,w,c
  2578  000458  B4D8               	btfsc	status,2,c
  2579  00045A  D004               	goto	l6658
  2580                           
  2581                           ;doprnt.c: 540: {
  2582                           ;doprnt.c: 541: (putch(c) );
  2583  00045C  5038               	movf	printf@c,w,c
  2584  00045E  ECAA  F012         	call	_putch
  2585                           
  2586                           ;doprnt.c: 542: continue;
  2587  000462  D191               	goto	l6780
  2588  000464                     l6658:
  2589                           
  2590                           ;doprnt.c: 543: }
  2591                           ;doprnt.c: 546: width = 0;
  2592  000464  0E00               	movlw	0
  2593  000466  6E37               	movwf	printf@width+1,c
  2594  000468  0E00               	movlw	0
  2595  00046A  6E36               	movwf	printf@width,c
  2596                           
  2597                           ;doprnt.c: 548: flag = 0;
  2598  00046C  0E00               	movlw	0
  2599  00046E  6E35               	movwf	printf@flag,c
  2600                           
  2601                           ;doprnt.c: 551: switch(*f) {
  2602                           
  2603                           ;doprnt.c: 550: for(;;) {
  2604  000470  D005               	goto	l6664
  2605  000472                     l6660:
  2606                           
  2607                           ;doprnt.c: 580: flag |= 0x04;
  2608  000472  8435               	bsf	printf@flag,2,c
  2609                           
  2610                           ;doprnt.c: 581: f++;
  2611  000474  4A1D               	infsnz	printf@f,f,c
  2612  000476  2A1E               	incf	printf@f+1,f,c
  2613                           
  2614                           ;doprnt.c: 582: continue;
  2615  000478  D001               	goto	l6664
  2616                           
  2617                           ;doprnt.c: 584: }
  2618  00047A  D00B               	goto	l6666
  2619  00047C                     l6664:
  2620  00047C  C01D  FFF6         	movff	printf@f,tblptrl
  2621  000480  C01E  FFF7         	movff	printf@f+1,tblptrh
  2622  000484                     	if	0	;tblptru may be non-zero
  2623  000484                     	endif
  2624  000484                     	if	0	;tblptru may be non-zero
  2625  000484                     	endif
  2626  000484  0008               	tblrd		*
  2627  000486  50F5               	movf	tablat,w,c
  2628                           
  2629                           ; Switch size 1, requested type "space"
  2630                           ; Number of cases is 1, Range of values is 48 to 48
  2631                           ; switch strategies available:
  2632                           ; Name         Instructions Cycles
  2633                           ; simple_byte            4     3 (average)
  2634                           ;	Chosen strategy is simple_byte
  2635  000488  0A30               	xorlw	48	; case 48
  2636  00048A  B4D8               	btfsc	status,2,c
  2637  00048C  D7F2               	goto	l6660
  2638                           
  2639                           ;doprnt.c: 585: break;
  2640  00048E  D001               	goto	l6666
  2641                           
  2642                           ;doprnt.c: 586: }
  2643  000490  D7F5               	goto	l6664
  2644  000492                     l6666:
  2645                           
  2646                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2647  000492  C01D  FFF6         	movff	printf@f,tblptrl
  2648  000496  C01E  FFF7         	movff	printf@f+1,tblptrh
  2649  00049A                     	if	0	;tblptru may be non-zero
  2650  00049A                     	endif
  2651  00049A                     	if	0	;tblptru may be non-zero
  2652  00049A                     	endif
  2653  00049A  0008               	tblrd		*
  2654  00049C  50F5               	movf	tablat,w,c
  2655  00049E  ECD6  F011         	call	_isdigit
  2656  0004A2  A0D8               	btfss	status,0,c
  2657  0004A4  D03B               	goto	l6682
  2658                           
  2659                           ;doprnt.c: 598: width = 0;
  2660  0004A6  0E00               	movlw	0
  2661  0004A8  6E37               	movwf	printf@width+1,c
  2662  0004AA  0E00               	movlw	0
  2663  0004AC  6E36               	movwf	printf@width,c
  2664  0004AE  D000               	goto	l6670
  2665  0004B0                     l6670:
  2666                           
  2667                           ;doprnt.c: 600: width *= 10;
  2668  0004B0  C036  F011         	movff	printf@width,___wmul@multiplier
  2669  0004B4  C037  F012         	movff	printf@width+1,___wmul@multiplier+1
  2670  0004B8  0E00               	movlw	0
  2671  0004BA  6E14               	movwf	___wmul@multiplicand+1,c
  2672  0004BC  0E0A               	movlw	10
  2673  0004BE  6E13               	movwf	___wmul@multiplicand,c
  2674  0004C0  EC8B  F011         	call	___wmul	;wreg free
  2675  0004C4  C011  F036         	movff	?___wmul,printf@width
  2676  0004C8  C012  F037         	movff	?___wmul+1,printf@width+1
  2677                           
  2678                           ;doprnt.c: 601: width += *f++ - '0';
  2679  0004CC  0ED0               	movlw	208
  2680  0004CE  6E2B               	movwf	??_printf& (0+255),c
  2681  0004D0  0EFF               	movlw	255
  2682  0004D2  6E2C               	movwf	(??_printf+1)& (0+255),c
  2683  0004D4  C01D  FFF6         	movff	printf@f,tblptrl
  2684  0004D8  C01E  FFF7         	movff	printf@f+1,tblptrh
  2685  0004DC                     	if	0	;tblptru may be non-zero
  2686  0004DC                     	endif
  2687  0004DC                     	if	0	;tblptru may be non-zero
  2688  0004DC                     	endif
  2689  0004DC  0008               	tblrd		*
  2690  0004DE  50F5               	movf	tablat,w,c
  2691  0004E0  6E2D               	movwf	(??_printf+2)& (0+255),c
  2692  0004E2  6A2E               	clrf	(??_printf+3)& (0+255),c
  2693  0004E4  502B               	movf	??_printf,w,c
  2694  0004E6  262D               	addwf	??_printf+2,f,c
  2695  0004E8  502C               	movf	??_printf+1,w,c
  2696  0004EA  222E               	addwfc	??_printf+3,f,c
  2697  0004EC  502D               	movf	??_printf+2,w,c
  2698  0004EE  2636               	addwf	printf@width,f,c
  2699  0004F0  502E               	movf	??_printf+3,w,c
  2700  0004F2  2237               	addwfc	printf@width+1,f,c
  2701  0004F4  4A1D               	infsnz	printf@f,f,c
  2702  0004F6  2A1E               	incf	printf@f+1,f,c
  2703                           
  2704                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2705  0004F8  C01D  FFF6         	movff	printf@f,tblptrl
  2706  0004FC  C01E  FFF7         	movff	printf@f+1,tblptrh
  2707  000500                     	if	0	;tblptru may be non-zero
  2708  000500                     	endif
  2709  000500                     	if	0	;tblptru may be non-zero
  2710  000500                     	endif
  2711  000500  0008               	tblrd		*
  2712  000502  50F5               	movf	tablat,w,c
  2713  000504  ECD6  F011         	call	_isdigit
  2714  000508  A0D8               	btfss	status,0,c
  2715  00050A  D008               	goto	l6682
  2716  00050C  D7D1               	goto	l6670
  2717                           
  2718                           ;doprnt.c: 608: }
  2719                           ;doprnt.c: 635: switch(c = *f++) {
  2720  00050E  D006               	goto	l6682
  2721                           
  2722                           ;doprnt.c: 638: goto alldone;
  2723                           
  2724                           ;doprnt.c: 637: case 0:
  2725  000510  D148               	goto	l758
  2726                           
  2727                           ;doprnt.c: 698: case 'i':
  2728                           ;doprnt.c: 699: break;
  2729                           
  2730                           ;doprnt.c: 697: case 'd':
  2731  000512  D01B               	goto	l721
  2732  000514                     l6678:
  2733                           
  2734                           ;doprnt.c: 721: flag |= 0x80;
  2735  000514  8E35               	bsf	printf@flag,7,c
  2736                           
  2737                           ;doprnt.c: 723: break;
  2738  000516  D019               	goto	l721
  2739                           
  2740                           ;doprnt.c: 813: continue;
  2741                           
  2742                           ;doprnt.c: 802: default:
  2743  000518  D136               	goto	l6780
  2744                           
  2745                           ;doprnt.c: 822: }
  2746  00051A  D017               	goto	l721
  2747  00051C                     l6682:
  2748  00051C  C01D  FFF6         	movff	printf@f,tblptrl
  2749  000520  C01E  FFF7         	movff	printf@f+1,tblptrh
  2750  000524  4A1D               	infsnz	printf@f,f,c
  2751  000526  2A1E               	incf	printf@f+1,f,c
  2752  000528                     	if	0	;tblptru may be non-zero
  2753  000528                     	endif
  2754  000528                     	if	0	;tblptru may be non-zero
  2755  000528                     	endif
  2756  000528  0008               	tblrd		*
  2757  00052A  CFF5 F038          	movff	tablat,printf@c
  2758  00052E  5038               	movf	printf@c,w,c
  2759                           
  2760                           ; Switch size 1, requested type "space"
  2761                           ; Number of cases is 4, Range of values is 0 to 120
  2762                           ; switch strategies available:
  2763                           ; Name         Instructions Cycles
  2764                           ; simple_byte           13     7 (average)
  2765                           ;	Chosen strategy is simple_byte
  2766  000530  0A00               	xorlw	0	; case 0
  2767  000532  B4D8               	btfsc	status,2,c
  2768  000534  D136               	goto	l758
  2769  000536  0A64               	xorlw	100	; case 100
  2770  000538  B4D8               	btfsc	status,2,c
  2771  00053A  D007               	goto	l721
  2772  00053C  0A0D               	xorlw	13	; case 105
  2773  00053E  B4D8               	btfsc	status,2,c
  2774  000540  D004               	goto	l721
  2775  000542  0A11               	xorlw	17	; case 120
  2776  000544  B4D8               	btfsc	status,2,c
  2777  000546  D7E6               	goto	l6678
  2778  000548  D11E               	goto	l6780
  2779  00054A                     l721:
  2780                           
  2781                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  2782  00054A  BE35               	btfsc	printf@flag,7,c
  2783  00054C  D015               	goto	l6694
  2784                           
  2785                           ;doprnt.c: 1253: {
  2786                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2787  00054E  C030  FFD9         	movff	printf@ap,fsr2l
  2788  000552  C031  FFDA         	movff	printf@ap+1,fsr2h
  2789  000556  CFDE F033          	movff	postinc2,printf@val
  2790  00055A  CFDD F034          	movff	postdec2,printf@val+1
  2791  00055E  0E02               	movlw	2
  2792  000560  2630               	addwf	printf@ap,f,c
  2793  000562  0E00               	movlw	0
  2794  000564  2231               	addwfc	printf@ap+1,f,c
  2795                           
  2796                           ;doprnt.c: 1261: if((int)val < 0) {
  2797  000566  AE34               	btfss	printf@val+1,7,c
  2798  000568  D04E               	goto	l6728
  2799                           
  2800                           ;doprnt.c: 1262: flag |= 0x03;
  2801  00056A  0E03               	movlw	3
  2802  00056C  1235               	iorwf	printf@flag,f,c
  2803                           
  2804                           ;doprnt.c: 1263: val = -val;
  2805  00056E  6C33               	negf	printf@val,c
  2806  000570  1E34               	comf	printf@val+1,f,c
  2807  000572  B0D8               	btfsc	status,0,c
  2808  000574  2A34               	incf	printf@val+1,f,c
  2809                           
  2810                           ;doprnt.c: 1264: }
  2811                           ;doprnt.c: 1266: }
  2812  000576  D047               	goto	l6728
  2813  000578                     l6694:
  2814                           
  2815                           ;doprnt.c: 1268: else
  2816                           ;doprnt.c: 1273: {
  2817                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2818  000578  C030  FFD9         	movff	printf@ap,fsr2l
  2819  00057C  C031  FFDA         	movff	printf@ap+1,fsr2h
  2820  000580  CFDE F033          	movff	postinc2,printf@val
  2821  000584  CFDD F034          	movff	postdec2,printf@val+1
  2822  000588  0E02               	movlw	2
  2823  00058A  2630               	addwf	printf@ap,f,c
  2824  00058C  0E00               	movlw	0
  2825  00058E  2231               	addwfc	printf@ap+1,f,c
  2826                           
  2827                           ;doprnt.c: 1287: }
  2828                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  2829  000590  D03A               	goto	l6728
  2830  000592                     l6698:
  2831                           
  2832                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2833  000592  0E01               	movlw	1
  2834  000594  6E38               	movwf	printf@c,c
  2835  000596                     l6700:
  2836  000596  0E05               	movlw	5
  2837  000598  1838               	xorwf	printf@c,w,c
  2838  00059A  B4D8               	btfsc	status,2,c
  2839  00059C  D03D               	goto	l6730
  2840  00059E  D001               	goto	l6704
  2841  0005A0  D03B               	goto	l6730
  2842  0005A2                     l6704:
  2843                           
  2844                           ;doprnt.c: 1306: if(val < dpowers[c])
  2845  0005A2  5038               	movf	printf@c,w,c
  2846  0005A4  0D02               	mullw	2
  2847  0005A6  0E02               	movlw	low _dpowers
  2848  0005A8  24F3               	addwf	prodl,w,c
  2849  0005AA  6EF6               	movwf	tblptrl,c
  2850  0005AC  0EFF               	movlw	high _dpowers
  2851  0005AE  20F4               	addwfc	prodh,w,c
  2852  0005B0  6EF7               	movwf	tblptrh,c
  2853  0005B2                     	if	0	;There are less than 3 active tblptr bytes
  2854  0005B2                     	endif
  2855  0005B2  0009               	tblrd		*+
  2856  0005B4  50F5               	movf	tablat,w,c
  2857  0005B6  5C33               	subwf	printf@val,w,c
  2858  0005B8  0009               	tblrd		*+
  2859  0005BA  50F5               	movf	tablat,w,c
  2860  0005BC  5834               	subwfb	printf@val+1,w,c
  2861  0005BE  A0D8               	btfss	status,0,c
  2862  0005C0  D02B               	goto	l6730
  2863  0005C2  D001               	goto	l6708
  2864                           
  2865                           ;doprnt.c: 1307: break;
  2866  0005C4  D029               	goto	l6730
  2867  0005C6                     l6708:
  2868  0005C6  2A38               	incf	printf@c,f,c
  2869  0005C8  D7E6               	goto	l6700
  2870                           
  2871                           ;doprnt.c: 1309: break;
  2872  0005CA  D026               	goto	l6730
  2873  0005CC                     l6712:
  2874                           
  2875                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2876  0005CC  0E01               	movlw	1
  2877  0005CE  6E38               	movwf	printf@c,c
  2878  0005D0                     l6714:
  2879  0005D0  0E04               	movlw	4
  2880  0005D2  1838               	xorwf	printf@c,w,c
  2881  0005D4  B4D8               	btfsc	status,2,c
  2882  0005D6  D020               	goto	l6730
  2883  0005D8  D001               	goto	l6718
  2884  0005DA  D01E               	goto	l6730
  2885  0005DC                     l6718:
  2886                           
  2887                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2888  0005DC  5038               	movf	printf@c,w,c
  2889  0005DE  0D02               	mullw	2
  2890  0005E0  0E0C               	movlw	low _hexpowers
  2891  0005E2  24F3               	addwf	prodl,w,c
  2892  0005E4  6EF6               	movwf	tblptrl,c
  2893  0005E6  0EFF               	movlw	high _hexpowers
  2894  0005E8  20F4               	addwfc	prodh,w,c
  2895  0005EA  6EF7               	movwf	tblptrh,c
  2896  0005EC                     	if	0	;There are less than 3 active tblptr bytes
  2897  0005EC                     	endif
  2898  0005EC  0009               	tblrd		*+
  2899  0005EE  50F5               	movf	tablat,w,c
  2900  0005F0  5C33               	subwf	printf@val,w,c
  2901  0005F2  0009               	tblrd		*+
  2902  0005F4  50F5               	movf	tablat,w,c
  2903  0005F6  5834               	subwfb	printf@val+1,w,c
  2904  0005F8  A0D8               	btfss	status,0,c
  2905  0005FA  D00E               	goto	l6730
  2906  0005FC  D001               	goto	l6722
  2907                           
  2908                           ;doprnt.c: 1318: break;
  2909  0005FE  D00C               	goto	l6730
  2910  000600                     l6722:
  2911  000600  2A38               	incf	printf@c,f,c
  2912  000602  D7E6               	goto	l6714
  2913                           
  2914                           ;doprnt.c: 1336: }
  2915                           
  2916                           ;doprnt.c: 1320: break;
  2917  000604  D009               	goto	l6730
  2918  000606                     l6728:
  2919  000606  5035               	movf	printf@flag,w,c
  2920  000608  0B80               	andlw	128
  2921                           
  2922                           ; Switch size 1, requested type "space"
  2923                           ; Number of cases is 2, Range of values is 0 to 128
  2924                           ; switch strategies available:
  2925                           ; Name         Instructions Cycles
  2926                           ; simple_byte            7     4 (average)
  2927                           ;	Chosen strategy is simple_byte
  2928  00060A  0A00               	xorlw	0	; case 0
  2929  00060C  B4D8               	btfsc	status,2,c
  2930  00060E  D7C1               	goto	l6698
  2931  000610  0A80               	xorlw	128	; case 128
  2932  000612  B4D8               	btfsc	status,2,c
  2933  000614  D7DB               	goto	l6712
  2934  000616  D000               	goto	l6730
  2935  000618                     l6730:
  2936                           
  2937                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2938  000618  5036               	movf	printf@width,w,c
  2939  00061A  1037               	iorwf	printf@width+1,w,c
  2940  00061C  B4D8               	btfsc	status,2,c
  2941  00061E  D00A               	goto	l6736
  2942  000620  C035  F02B         	movff	printf@flag,??_printf
  2943  000624  0E03               	movlw	3
  2944  000626  162B               	andwf	??_printf,f,c
  2945  000628  B4D8               	btfsc	status,2,c
  2946  00062A  D004               	goto	l6736
  2947                           
  2948                           ;doprnt.c: 1346: width--;
  2949  00062C  0636               	decf	printf@width,f,c
  2950  00062E  A0D8               	btfss	status,0,c
  2951  000630  0637               	decf	printf@width+1,f,c
  2952  000632  D000               	goto	l6736
  2953  000634                     l6736:
  2954                           
  2955                           ;doprnt.c: 1381: if(width > c)
  2956  000634  0E80               	movlw	128
  2957  000636  BE38               	btfsc	printf@c,7,c
  2958  000638  0E7F               	movlw	127
  2959  00063A  6E2B               	movwf	??_printf& (0+255),c
  2960  00063C  5036               	movf	printf@width,w,c
  2961  00063E  5C38               	subwf	printf@c,w,c
  2962  000640  5037               	movf	printf@width+1,w,c
  2963  000642  0A80               	xorlw	128
  2964  000644  582B               	subwfb	??_printf& (0+255),w,c
  2965  000646  B0D8               	btfsc	status,0,c
  2966  000648  D007               	goto	l6740
  2967                           
  2968                           ;doprnt.c: 1382: width -= c;
  2969  00064A  5038               	movf	printf@c,w,c
  2970  00064C  5E36               	subwf	printf@width,f,c
  2971  00064E  0E00               	movlw	0
  2972  000650  BE38               	btfsc	printf@c,7,c
  2973  000652  0EFF               	movlw	255
  2974  000654  5A37               	subwfb	printf@width+1,f,c
  2975  000656  D005               	goto	l6742
  2976  000658                     l6740:
  2977                           
  2978                           ;doprnt.c: 1383: else
  2979                           ;doprnt.c: 1384: width = 0;
  2980  000658  0E00               	movlw	0
  2981  00065A  6E37               	movwf	printf@width+1,c
  2982  00065C  0E00               	movlw	0
  2983  00065E  6E36               	movwf	printf@width,c
  2984  000660  D000               	goto	l6742
  2985  000662                     l6742:
  2986                           
  2987                           ;doprnt.c: 1387: if(flag & 0x04) {
  2988  000662  A435               	btfss	printf@flag,2,c
  2989  000664  D01A               	goto	l6754
  2990                           
  2991                           ;doprnt.c: 1392: if(flag & 0x03)
  2992  000666  C035  F02B         	movff	printf@flag,??_printf
  2993  00066A  0E03               	movlw	3
  2994  00066C  162B               	andwf	??_printf,f,c
  2995  00066E  B4D8               	btfsc	status,2,c
  2996  000670  D004               	goto	l6748
  2997                           
  2998                           ;doprnt.c: 1393: (putch('-') );
  2999  000672  0E2D               	movlw	45
  3000  000674  ECAA  F012         	call	_putch
  3001  000678  D000               	goto	l6748
  3002  00067A                     l6748:
  3003                           
  3004                           ;doprnt.c: 1415: if(width)
  3005  00067A  5036               	movf	printf@width,w,c
  3006  00067C  1037               	iorwf	printf@width+1,w,c
  3007  00067E  B4D8               	btfsc	status,2,c
  3008  000680  D026               	goto	l6764
  3009  000682                     l6750:
  3010                           
  3011                           ;doprnt.c: 1417: (putch('0') );
  3012  000682  0E30               	movlw	48
  3013  000684  ECAA  F012         	call	_putch
  3014                           
  3015                           ;doprnt.c: 1418: while(--width);
  3016  000688  0636               	decf	printf@width,f,c
  3017  00068A  A0D8               	btfss	status,0,c
  3018  00068C  0637               	decf	printf@width+1,f,c
  3019  00068E  5036               	movf	printf@width,w,c
  3020  000690  1037               	iorwf	printf@width+1,w,c
  3021  000692  B4D8               	btfsc	status,2,c
  3022  000694  D01C               	goto	l6764
  3023  000696  D7F5               	goto	l6750
  3024                           
  3025                           ;doprnt.c: 1420: } else
  3026  000698  D01A               	goto	l6764
  3027  00069A                     l6754:
  3028                           
  3029                           ;doprnt.c: 1422: {
  3030                           ;doprnt.c: 1424: if(width
  3031                           ;doprnt.c: 1428: )
  3032  00069A  5036               	movf	printf@width,w,c
  3033  00069C  1037               	iorwf	printf@width+1,w,c
  3034  00069E  B4D8               	btfsc	status,2,c
  3035  0006A0  D00C               	goto	l6760
  3036  0006A2                     l6756:
  3037                           
  3038                           ;doprnt.c: 1430: (putch(' ') );
  3039  0006A2  0E20               	movlw	32
  3040  0006A4  ECAA  F012         	call	_putch
  3041                           
  3042                           ;doprnt.c: 1431: while(--width);
  3043  0006A8  0636               	decf	printf@width,f,c
  3044  0006AA  A0D8               	btfss	status,0,c
  3045  0006AC  0637               	decf	printf@width+1,f,c
  3046  0006AE  5036               	movf	printf@width,w,c
  3047  0006B0  1037               	iorwf	printf@width+1,w,c
  3048  0006B2  B4D8               	btfsc	status,2,c
  3049  0006B4  D002               	goto	l6760
  3050  0006B6  D7F5               	goto	l6756
  3051  0006B8  D000               	goto	l6760
  3052  0006BA                     l6760:
  3053                           
  3054                           ;doprnt.c: 1438: if(flag & 0x03)
  3055  0006BA  C035  F02B         	movff	printf@flag,??_printf
  3056  0006BE  0E03               	movlw	3
  3057  0006C0  162B               	andwf	??_printf,f,c
  3058  0006C2  B4D8               	btfsc	status,2,c
  3059  0006C4  D004               	goto	l6764
  3060                           
  3061                           ;doprnt.c: 1439: (putch('-') );
  3062  0006C6  0E2D               	movlw	45
  3063  0006C8  ECAA  F012         	call	_putch
  3064  0006CC  D000               	goto	l6764
  3065  0006CE                     l6764:
  3066                           
  3067                           ;doprnt.c: 1469: }
  3068                           ;doprnt.c: 1472: prec = c;
  3069  0006CE  C038  F032         	movff	printf@c,printf@prec
  3070                           
  3071                           ;doprnt.c: 1474: while(prec--) {
  3072  0006D2  D053               	goto	l6778
  3073                           
  3074                           ;doprnt.c: 1476: switch((unsigned char)(flag & 0x80))
  3075  0006D4  D045               	goto	l6774
  3076  0006D6                     l6766:
  3077                           
  3078                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3079  0006D6  5032               	movf	printf@prec,w,c
  3080  0006D8  0D02               	mullw	2
  3081  0006DA  0E02               	movlw	low _dpowers
  3082  0006DC  24F3               	addwf	prodl,w,c
  3083  0006DE  6EF6               	movwf	tblptrl,c
  3084  0006E0  0EFF               	movlw	high _dpowers
  3085  0006E2  20F4               	addwfc	prodh,w,c
  3086  0006E4  6EF7               	movwf	tblptrh,c
  3087  0006E6                     	if	0	;There are less than 3 active tblptr bytes
  3088  0006E6                     	endif
  3089  0006E6  0009               	tblrd		*+
  3090  0006E8  CFF5 F013          	movff	tablat,___lwdiv@divisor
  3091  0006EC  000A               	tblrd		*-
  3092  0006EE  CFF5 F014          	movff	tablat,___lwdiv@divisor+1
  3093  0006F2  C033  F011         	movff	printf@val,___lwdiv@dividend
  3094  0006F6  C034  F012         	movff	printf@val+1,___lwdiv@dividend+1
  3095  0006FA  EC7E  F00F         	call	___lwdiv	;wreg free
  3096  0006FE  C011  F018         	movff	?___lwdiv,___lwmod@dividend
  3097  000702  C012  F019         	movff	?___lwdiv+1,___lwmod@dividend+1
  3098  000706  0E00               	movlw	0
  3099  000708  6E1B               	movwf	___lwmod@divisor+1,c
  3100  00070A  0E0A               	movlw	10
  3101  00070C  6E1A               	movwf	___lwmod@divisor,c
  3102  00070E  ECFC  F00F         	call	___lwmod	;wreg free
  3103  000712  5018               	movf	?___lwmod,w,c
  3104  000714  0F30               	addlw	48
  3105  000716  6E38               	movwf	printf@c,c
  3106                           
  3107                           ;doprnt.c: 1491: break;
  3108  000718  D02C               	goto	l6776
  3109  00071A                     l6768:
  3110                           
  3111                           ;doprnt.c: 1499: {
  3112                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  3113  00071A  C033  F011         	movff	printf@val,___lwdiv@dividend
  3114  00071E  C034  F012         	movff	printf@val+1,___lwdiv@dividend+1
  3115  000722  5032               	movf	printf@prec,w,c
  3116  000724  0D02               	mullw	2
  3117  000726  0E0C               	movlw	low _hexpowers
  3118  000728  24F3               	addwf	prodl,w,c
  3119  00072A  6EF6               	movwf	tblptrl,c
  3120  00072C  0EFF               	movlw	high _hexpowers
  3121  00072E  20F4               	addwfc	prodh,w,c
  3122  000730  6EF7               	movwf	tblptrh,c
  3123  000732                     	if	0	;There are less than 3 active tblptr bytes
  3124  000732                     	endif
  3125  000732  0009               	tblrd		*+
  3126  000734  CFF5 F013          	movff	tablat,___lwdiv@divisor
  3127  000738  000A               	tblrd		*-
  3128  00073A  CFF5 F014          	movff	tablat,___lwdiv@divisor+1
  3129  00073E  EC7E  F00F         	call	___lwdiv	;wreg free
  3130  000742  5011               	movf	?___lwdiv,w,c
  3131  000744  0B0F               	andlw	15
  3132  000746  6E2F               	movwf	printf@idx,c
  3133                           
  3134                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  3135  000748  502F               	movf	printf@idx,w,c
  3136  00074A  0D01               	mullw	1
  3137  00074C  0E9F               	movlw	low STR_19
  3138  00074E  24F3               	addwf	prodl,w,c
  3139  000750  6EF6               	movwf	tblptrl,c
  3140  000752  0EFF               	movlw	high STR_19
  3141  000754  20F4               	addwfc	prodh,w,c
  3142  000756  6EF7               	movwf	tblptrh,c
  3143  000758                     	if	0	;There are less than 3 active tblptr bytes
  3144  000758                     	endif
  3145  000758  0008               	tblrd		*
  3146  00075A  CFF5 F038          	movff	tablat,printf@c
  3147                           
  3148                           ;doprnt.c: 1523: }
  3149                           
  3150                           ;doprnt.c: 1508: }
  3151                           ;doprnt.c: 1510: break;
  3152  00075E  D009               	goto	l6776
  3153  000760                     l6774:
  3154  000760  5035               	movf	printf@flag,w,c
  3155  000762  0B80               	andlw	128
  3156                           
  3157                           ; Switch size 1, requested type "space"
  3158                           ; Number of cases is 2, Range of values is 0 to 128
  3159                           ; switch strategies available:
  3160                           ; Name         Instructions Cycles
  3161                           ; simple_byte            7     4 (average)
  3162                           ;	Chosen strategy is simple_byte
  3163  000764  0A00               	xorlw	0	; case 0
  3164  000766  B4D8               	btfsc	status,2,c
  3165  000768  D7B6               	goto	l6766
  3166  00076A  0A80               	xorlw	128	; case 128
  3167  00076C  B4D8               	btfsc	status,2,c
  3168  00076E  D7D5               	goto	l6768
  3169  000770  D000               	goto	l6776
  3170  000772                     l6776:
  3171                           
  3172                           ;doprnt.c: 1524: (putch(c) );
  3173  000772  5038               	movf	printf@c,w,c
  3174  000774  ECAA  F012         	call	_putch
  3175  000778  D000               	goto	l6778
  3176  00077A                     l6778:
  3177  00077A  0632               	decf	printf@prec,f,c
  3178  00077C  2832               	incf	printf@prec,w,c
  3179  00077E  B4D8               	btfsc	status,2,c
  3180  000780  D002               	goto	l6780
  3181  000782  D7EE               	goto	l6774
  3182  000784  D000               	goto	l6780
  3183  000786                     l6780:
  3184  000786  C01D  FFF6         	movff	printf@f,tblptrl
  3185  00078A  C01E  FFF7         	movff	printf@f+1,tblptrh
  3186  00078E  4A1D               	infsnz	printf@f,f,c
  3187  000790  2A1E               	incf	printf@f+1,f,c
  3188  000792                     	if	0	;tblptru may be non-zero
  3189  000792                     	endif
  3190  000792                     	if	0	;tblptru may be non-zero
  3191  000792                     	endif
  3192  000792  0008               	tblrd		*
  3193  000794  CFF5 F038          	movff	tablat,printf@c
  3194  000798  5038               	movf	printf@c,w,c
  3195  00079A  B4D8               	btfsc	status,2,c
  3196  00079C  D002               	goto	l758
  3197  00079E  D65A               	goto	l6654
  3198  0007A0  D000               	goto	l758
  3199  0007A2                     l758:
  3200  0007A2  0012               	return		;funcret
  3201  0007A4                     __end_of_printf:
  3202                           	opt stack 0
  3203                           tblptru	equ	0xFF8
  3204                           tblptrh	equ	0xFF7
  3205                           tblptrl	equ	0xFF6
  3206                           tablat	equ	0xFF5
  3207                           prodh	equ	0xFF4
  3208                           prodl	equ	0xFF3
  3209                           intcon	equ	0xFF2
  3210                           intcon2	equ	0xFF1
  3211                           postinc0	equ	0xFEE
  3212                           wreg	equ	0xFE8
  3213                           postdec1	equ	0xFE5
  3214                           fsr1l	equ	0xFE1
  3215                           postinc2	equ	0xFDE
  3216                           postdec2	equ	0xFDD
  3217                           fsr2h	equ	0xFDA
  3218                           fsr2l	equ	0xFD9
  3219                           status	equ	0xFD8
  3220                           
  3221 ;; *************** function _putch *****************
  3222 ;; Defined at:
  3223 ;;		line 89 in file "Lab11pA_Restart.c"
  3224 ;; Parameters:    Size  Location     Type
  3225 ;;  c               1    wreg     unsigned char 
  3226 ;; Auto vars:     Size  Location     Type
  3227 ;;  c               1   16[COMRAM] unsigned char 
  3228 ;; Return value:  Size  Location     Type
  3229 ;;		None               void
  3230 ;; Registers used:
  3231 ;;		wreg
  3232 ;; Tracked objects:
  3233 ;;		On entry : 0/0
  3234 ;;		On exit  : 0/0
  3235 ;;		Unchanged: 0/0
  3236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3237 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3238 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3239 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3240 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3241 ;;Total ram usage:        1 bytes
  3242 ;; Hardware stack levels used:    1
  3243 ;; Hardware stack levels required when called:    3
  3244 ;; This function calls:
  3245 ;;		Nothing
  3246 ;; This function is called by:
  3247 ;;		_printf
  3248 ;; This function uses a non-reentrant model
  3249 ;;
  3250                           
  3251                           	psect	text2
  3252  002554                     __ptext2:
  3253                           	opt stack 0
  3254  002554                     _putch:
  3255                           	opt stack 26
  3256                           
  3257                           ;incstack = 0
  3258                           ;putch@c stored from wreg
  3259  002554  6E11               	movwf	putch@c,c
  3260                           
  3261                           ;Lab11pA_Restart.c: 91: while (!TRMT);
  3262  002556  D000               	goto	l662
  3263  002558                     l662:
  3264  002558  A2AC               	btfss	4012,1,c	;volatile
  3265  00255A  D7FE               	goto	l662
  3266                           
  3267                           ;Lab11pA_Restart.c: 92: TXREG = c;
  3268  00255C  C011  FFAD         	movff	putch@c,4013	;volatile
  3269  002560  0012               	return		;funcret
  3270  002562                     __end_of_putch:
  3271                           	opt stack 0
  3272                           tblptru	equ	0xFF8
  3273                           tblptrh	equ	0xFF7
  3274                           tblptrl	equ	0xFF6
  3275                           tablat	equ	0xFF5
  3276                           prodh	equ	0xFF4
  3277                           prodl	equ	0xFF3
  3278                           intcon	equ	0xFF2
  3279                           intcon2	equ	0xFF1
  3280                           postinc0	equ	0xFEE
  3281                           wreg	equ	0xFE8
  3282                           postdec1	equ	0xFE5
  3283                           fsr1l	equ	0xFE1
  3284                           postinc2	equ	0xFDE
  3285                           postdec2	equ	0xFDD
  3286                           fsr2h	equ	0xFDA
  3287                           fsr2l	equ	0xFD9
  3288                           status	equ	0xFD8
  3289                           
  3290 ;; *************** function _isdigit *****************
  3291 ;; Defined at:
  3292 ;;		line 8 in file "E:\XC8\sources\common\isdigit.c"
  3293 ;; Parameters:    Size  Location     Type
  3294 ;;  c               1    wreg     unsigned char 
  3295 ;; Auto vars:     Size  Location     Type
  3296 ;;  c               1   18[COMRAM] unsigned char 
  3297 ;; Return value:  Size  Location     Type
  3298 ;;		None               void
  3299 ;; Registers used:
  3300 ;;		wreg, status,2, status,0
  3301 ;; Tracked objects:
  3302 ;;		On entry : 0/0
  3303 ;;		On exit  : 0/0
  3304 ;;		Unchanged: 0/0
  3305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3306 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3307 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3308 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3309 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3310 ;;Total ram usage:        3 bytes
  3311 ;; Hardware stack levels used:    1
  3312 ;; Hardware stack levels required when called:    3
  3313 ;; This function calls:
  3314 ;;		Nothing
  3315 ;; This function is called by:
  3316 ;;		_printf
  3317 ;; This function uses a non-reentrant model
  3318 ;;
  3319                           
  3320                           	psect	text3
  3321  0023AC                     __ptext3:
  3322                           	opt stack 0
  3323  0023AC                     _isdigit:
  3324                           	opt stack 26
  3325                           
  3326                           ;incstack = 0
  3327                           ;isdigit@c stored from wreg
  3328  0023AC  6E13               	movwf	isdigit@c,c
  3329  0023AE  0E00               	movlw	0
  3330  0023B0  6E12               	movwf	_isdigit$2048,c
  3331  0023B2  0E3A               	movlw	58
  3332  0023B4  6013               	cpfslt	isdigit@c,c
  3333  0023B6  D006               	goto	l6134
  3334  0023B8  0E2F               	movlw	47
  3335  0023BA  6413               	cpfsgt	isdigit@c,c
  3336  0023BC  D003               	goto	l6134
  3337  0023BE  0E01               	movlw	1
  3338  0023C0  6E12               	movwf	_isdigit$2048,c
  3339  0023C2  D000               	goto	l6134
  3340  0023C4                     l6134:
  3341  0023C4  C012  F011         	movff	_isdigit$2048,??_isdigit
  3342  0023C8  3011               	rrcf	??_isdigit,w,c
  3343  0023CA  D000               	goto	l1225
  3344  0023CC                     l1225:
  3345  0023CC  0012               	return		;funcret
  3346  0023CE                     __end_of_isdigit:
  3347                           	opt stack 0
  3348                           tblptru	equ	0xFF8
  3349                           tblptrh	equ	0xFF7
  3350                           tblptrl	equ	0xFF6
  3351                           tablat	equ	0xFF5
  3352                           prodh	equ	0xFF4
  3353                           prodl	equ	0xFF3
  3354                           intcon	equ	0xFF2
  3355                           intcon2	equ	0xFF1
  3356                           postinc0	equ	0xFEE
  3357                           wreg	equ	0xFE8
  3358                           postdec1	equ	0xFE5
  3359                           fsr1l	equ	0xFE1
  3360                           postinc2	equ	0xFDE
  3361                           postdec2	equ	0xFDD
  3362                           fsr2h	equ	0xFDA
  3363                           fsr2l	equ	0xFD9
  3364                           status	equ	0xFD8
  3365                           
  3366 ;; *************** function ___lwmod *****************
  3367 ;; Defined at:
  3368 ;;		line 8 in file "E:\XC8\sources\common\lwmod.c"
  3369 ;; Parameters:    Size  Location     Type
  3370 ;;  dividend        2   23[COMRAM] unsigned int 
  3371 ;;  divisor         2   25[COMRAM] unsigned int 
  3372 ;; Auto vars:     Size  Location     Type
  3373 ;;  counter         1   27[COMRAM] unsigned char 
  3374 ;; Return value:  Size  Location     Type
  3375 ;;                  2   23[COMRAM] unsigned int 
  3376 ;; Registers used:
  3377 ;;		wreg, status,2, status,0
  3378 ;; Tracked objects:
  3379 ;;		On entry : 0/0
  3380 ;;		On exit  : 0/0
  3381 ;;		Unchanged: 0/0
  3382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3383 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3384 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3385 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3386 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3387 ;;Total ram usage:        5 bytes
  3388 ;; Hardware stack levels used:    1
  3389 ;; Hardware stack levels required when called:    3
  3390 ;; This function calls:
  3391 ;;		Nothing
  3392 ;; This function is called by:
  3393 ;;		_printf
  3394 ;; This function uses a non-reentrant model
  3395 ;;
  3396                           
  3397                           	psect	text4
  3398  001FF8                     __ptext4:
  3399                           	opt stack 0
  3400  001FF8                     ___lwmod:
  3401                           	opt stack 26
  3402                           
  3403                           ;incstack = 0
  3404  001FF8  501A               	movf	___lwmod@divisor,w,c
  3405  001FFA  101B               	iorwf	___lwmod@divisor+1,w,c
  3406  001FFC  B4D8               	btfsc	status,2,c
  3407  001FFE  D01D               	goto	l1327
  3408  002000  0E01               	movlw	1
  3409  002002  6E1C               	movwf	___lwmod@counter,c
  3410  002004  D005               	goto	l6246
  3411  002006                     l6244:
  3412  002006  90D8               	bcf	status,0,c
  3413  002008  361A               	rlcf	___lwmod@divisor,f,c
  3414  00200A  361B               	rlcf	___lwmod@divisor+1,f,c
  3415  00200C  2A1C               	incf	___lwmod@counter,f,c
  3416  00200E  D000               	goto	l6246
  3417  002010                     l6246:
  3418  002010  BE1B               	btfsc	___lwmod@divisor+1,7,c
  3419  002012  D002               	goto	l6248
  3420  002014  D7F8               	goto	l6244
  3421  002016  D000               	goto	l6248
  3422  002018                     l6248:
  3423  002018  501A               	movf	___lwmod@divisor,w,c
  3424  00201A  5C18               	subwf	___lwmod@dividend,w,c
  3425  00201C  501B               	movf	___lwmod@divisor+1,w,c
  3426  00201E  5819               	subwfb	___lwmod@dividend+1,w,c
  3427  002020  A0D8               	btfss	status,0,c
  3428  002022  D005               	goto	l6252
  3429  002024  501A               	movf	___lwmod@divisor,w,c
  3430  002026  5E18               	subwf	___lwmod@dividend,f,c
  3431  002028  501B               	movf	___lwmod@divisor+1,w,c
  3432  00202A  5A19               	subwfb	___lwmod@dividend+1,f,c
  3433  00202C  D000               	goto	l6252
  3434  00202E                     l6252:
  3435  00202E  90D8               	bcf	status,0,c
  3436  002030  321B               	rrcf	___lwmod@divisor+1,f,c
  3437  002032  321A               	rrcf	___lwmod@divisor,f,c
  3438  002034  2E1C               	decfsz	___lwmod@counter,f,c
  3439  002036  D7F0               	goto	l6248
  3440  002038  D000               	goto	l1327
  3441  00203A                     l1327:
  3442  00203A  C018  F018         	movff	___lwmod@dividend,?___lwmod
  3443  00203E  C019  F019         	movff	___lwmod@dividend+1,?___lwmod+1
  3444  002042  0012               	return		;funcret
  3445  002044                     __end_of___lwmod:
  3446                           	opt stack 0
  3447                           tblptru	equ	0xFF8
  3448                           tblptrh	equ	0xFF7
  3449                           tblptrl	equ	0xFF6
  3450                           tablat	equ	0xFF5
  3451                           prodh	equ	0xFF4
  3452                           prodl	equ	0xFF3
  3453                           intcon	equ	0xFF2
  3454                           intcon2	equ	0xFF1
  3455                           postinc0	equ	0xFEE
  3456                           wreg	equ	0xFE8
  3457                           postdec1	equ	0xFE5
  3458                           fsr1l	equ	0xFE1
  3459                           postinc2	equ	0xFDE
  3460                           postdec2	equ	0xFDD
  3461                           fsr2h	equ	0xFDA
  3462                           fsr2l	equ	0xFD9
  3463                           status	equ	0xFD8
  3464                           
  3465 ;; *************** function ___lwdiv *****************
  3466 ;; Defined at:
  3467 ;;		line 8 in file "E:\XC8\sources\common\lwdiv.c"
  3468 ;; Parameters:    Size  Location     Type
  3469 ;;  dividend        2   16[COMRAM] unsigned int 
  3470 ;;  divisor         2   18[COMRAM] unsigned int 
  3471 ;; Auto vars:     Size  Location     Type
  3472 ;;  quotient        2   21[COMRAM] unsigned int 
  3473 ;;  counter         1   20[COMRAM] unsigned char 
  3474 ;; Return value:  Size  Location     Type
  3475 ;;                  2   16[COMRAM] unsigned int 
  3476 ;; Registers used:
  3477 ;;		wreg, status,2, status,0
  3478 ;; Tracked objects:
  3479 ;;		On entry : 0/0
  3480 ;;		On exit  : 0/0
  3481 ;;		Unchanged: 0/0
  3482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3483 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3484 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3485 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3486 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3487 ;;Total ram usage:        7 bytes
  3488 ;; Hardware stack levels used:    1
  3489 ;; Hardware stack levels required when called:    3
  3490 ;; This function calls:
  3491 ;;		Nothing
  3492 ;; This function is called by:
  3493 ;;		_printf
  3494 ;; This function uses a non-reentrant model
  3495 ;;
  3496                           
  3497                           	psect	text5
  3498  001EFC                     __ptext5:
  3499                           	opt stack 0
  3500  001EFC                     ___lwdiv:
  3501                           	opt stack 26
  3502                           
  3503                           ;incstack = 0
  3504  001EFC  0E00               	movlw	0
  3505  001EFE  6E17               	movwf	___lwdiv@quotient+1,c
  3506  001F00  0E00               	movlw	0
  3507  001F02  6E16               	movwf	___lwdiv@quotient,c
  3508  001F04  5013               	movf	___lwdiv@divisor,w,c
  3509  001F06  1014               	iorwf	___lwdiv@divisor+1,w,c
  3510  001F08  B4D8               	btfsc	status,2,c
  3511  001F0A  D021               	goto	l1317
  3512  001F0C  0E01               	movlw	1
  3513  001F0E  6E15               	movwf	___lwdiv@counter,c
  3514  001F10  D005               	goto	l6226
  3515  001F12                     l6224:
  3516  001F12  90D8               	bcf	status,0,c
  3517  001F14  3613               	rlcf	___lwdiv@divisor,f,c
  3518  001F16  3614               	rlcf	___lwdiv@divisor+1,f,c
  3519  001F18  2A15               	incf	___lwdiv@counter,f,c
  3520  001F1A  D000               	goto	l6226
  3521  001F1C                     l6226:
  3522  001F1C  BE14               	btfsc	___lwdiv@divisor+1,7,c
  3523  001F1E  D002               	goto	l6228
  3524  001F20  D7F8               	goto	l6224
  3525  001F22  D000               	goto	l6228
  3526  001F24                     l6228:
  3527  001F24  90D8               	bcf	status,0,c
  3528  001F26  3616               	rlcf	___lwdiv@quotient,f,c
  3529  001F28  3617               	rlcf	___lwdiv@quotient+1,f,c
  3530  001F2A  5013               	movf	___lwdiv@divisor,w,c
  3531  001F2C  5C11               	subwf	___lwdiv@dividend,w,c
  3532  001F2E  5014               	movf	___lwdiv@divisor+1,w,c
  3533  001F30  5812               	subwfb	___lwdiv@dividend+1,w,c
  3534  001F32  A0D8               	btfss	status,0,c
  3535  001F34  D006               	goto	l6236
  3536  001F36  5013               	movf	___lwdiv@divisor,w,c
  3537  001F38  5E11               	subwf	___lwdiv@dividend,f,c
  3538  001F3A  5014               	movf	___lwdiv@divisor+1,w,c
  3539  001F3C  5A12               	subwfb	___lwdiv@dividend+1,f,c
  3540  001F3E  8016               	bsf	___lwdiv@quotient,0,c
  3541  001F40  D000               	goto	l6236
  3542  001F42                     l6236:
  3543  001F42  90D8               	bcf	status,0,c
  3544  001F44  3214               	rrcf	___lwdiv@divisor+1,f,c
  3545  001F46  3213               	rrcf	___lwdiv@divisor,f,c
  3546  001F48  2E15               	decfsz	___lwdiv@counter,f,c
  3547  001F4A  D7EC               	goto	l6228
  3548  001F4C  D000               	goto	l1317
  3549  001F4E                     l1317:
  3550  001F4E  C016  F011         	movff	___lwdiv@quotient,?___lwdiv
  3551  001F52  C017  F012         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3552  001F56  0012               	return		;funcret
  3553  001F58                     __end_of___lwdiv:
  3554                           	opt stack 0
  3555                           tblptru	equ	0xFF8
  3556                           tblptrh	equ	0xFF7
  3557                           tblptrl	equ	0xFF6
  3558                           tablat	equ	0xFF5
  3559                           prodh	equ	0xFF4
  3560                           prodl	equ	0xFF3
  3561                           intcon	equ	0xFF2
  3562                           intcon2	equ	0xFF1
  3563                           postinc0	equ	0xFEE
  3564                           wreg	equ	0xFE8
  3565                           postdec1	equ	0xFE5
  3566                           fsr1l	equ	0xFE1
  3567                           postinc2	equ	0xFDE
  3568                           postdec2	equ	0xFDD
  3569                           fsr2h	equ	0xFDA
  3570                           fsr2l	equ	0xFD9
  3571                           status	equ	0xFD8
  3572                           
  3573 ;; *************** function _get_RPM *****************
  3574 ;; Defined at:
  3575 ;;		line 18 in file "Fan_Support.c"
  3576 ;; Parameters:    Size  Location     Type
  3577 ;;		None
  3578 ;; Auto vars:     Size  Location     Type
  3579 ;;  RPS             2   32[COMRAM] int 
  3580 ;; Return value:  Size  Location     Type
  3581 ;;                  2   30[COMRAM] int 
  3582 ;; Registers used:
  3583 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3584 ;; Tracked objects:
  3585 ;;		On entry : 0/0
  3586 ;;		On exit  : 0/0
  3587 ;;		Unchanged: 0/0
  3588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3589 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3590 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3591 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3592 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3593 ;;Total ram usage:        4 bytes
  3594 ;; Hardware stack levels used:    1
  3595 ;; Hardware stack levels required when called:    4
  3596 ;; This function calls:
  3597 ;;		___awdiv
  3598 ;;		___wmul
  3599 ;; This function is called by:
  3600 ;;		_main
  3601 ;; This function uses a non-reentrant model
  3602 ;;
  3603                           
  3604                           	psect	text6
  3605  002122                     __ptext6:
  3606                           	opt stack 0
  3607  002122                     _get_RPM:
  3608                           	opt stack 26
  3609                           
  3610                           ;Fan_Support.c: 20: int RPS = TMR3L / 2;
  3611                           
  3612                           ;incstack = 0
  3613  002122  CFB2 F017          	movff	4018,___awdiv@dividend	;volatile
  3614  002126  6A18               	clrf	___awdiv@dividend+1,c
  3615  002128  0E00               	movlw	0
  3616  00212A  6E1A               	movwf	___awdiv@divisor+1,c
  3617  00212C  0E02               	movlw	2
  3618  00212E  6E19               	movwf	___awdiv@divisor,c
  3619  002130  ECE6  F00C         	call	___awdiv	;wreg free
  3620  002134  C017  F021         	movff	?___awdiv,get_RPM@RPS
  3621  002138  C018  F022         	movff	?___awdiv+1,get_RPM@RPS+1
  3622                           
  3623                           ;Fan_Support.c: 22: TMR3L = 0;
  3624  00213C  0E00               	movlw	0
  3625  00213E  6EB2               	movwf	4018,c	;volatile
  3626                           
  3627                           ;Fan_Support.c: 23: return (RPS * 60);
  3628  002140  C021  F011         	movff	get_RPM@RPS,___wmul@multiplier
  3629  002144  C022  F012         	movff	get_RPM@RPS+1,___wmul@multiplier+1
  3630  002148  0E00               	movlw	0
  3631  00214A  6E14               	movwf	___wmul@multiplicand+1,c
  3632  00214C  0E3C               	movlw	60
  3633  00214E  6E13               	movwf	___wmul@multiplicand,c
  3634  002150  EC8B  F011         	call	___wmul	;wreg free
  3635  002154  C011  F01F         	movff	?___wmul,?_get_RPM
  3636  002158  C012  F020         	movff	?___wmul+1,?_get_RPM+1
  3637  00215C  D000               	goto	l480
  3638  00215E                     l480:
  3639  00215E  0012               	return		;funcret
  3640  002160                     __end_of_get_RPM:
  3641                           	opt stack 0
  3642                           tblptru	equ	0xFF8
  3643                           tblptrh	equ	0xFF7
  3644                           tblptrl	equ	0xFF6
  3645                           tablat	equ	0xFF5
  3646                           prodh	equ	0xFF4
  3647                           prodl	equ	0xFF3
  3648                           intcon	equ	0xFF2
  3649                           intcon2	equ	0xFF1
  3650                           postinc0	equ	0xFEE
  3651                           wreg	equ	0xFE8
  3652                           postdec1	equ	0xFE5
  3653                           fsr1l	equ	0xFE1
  3654                           postinc2	equ	0xFDE
  3655                           postdec2	equ	0xFDD
  3656                           fsr2h	equ	0xFDA
  3657                           fsr2l	equ	0xFD9
  3658                           status	equ	0xFD8
  3659                           
  3660 ;; *************** function _Update_Screen *****************
  3661 ;; Defined at:
  3662 ;;		line 69 in file "Main_Screen.c"
  3663 ;; Parameters:    Size  Location     Type
  3664 ;;		None
  3665 ;; Auto vars:     Size  Location     Type
  3666 ;;  neg_tempF       2    9[BANK0 ] int 
  3667 ;; Return value:  Size  Location     Type
  3668 ;;		None               void
  3669 ;; Registers used:
  3670 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3671 ;; Tracked objects:
  3672 ;;		On entry : 0/0
  3673 ;;		On exit  : 0/0
  3674 ;;		Unchanged: 0/0
  3675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3676 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3677 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3678 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3679 ;;      Totals:         2       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3680 ;;Total ram usage:        8 bytes
  3681 ;; Hardware stack levels used:    1
  3682 ;; Hardware stack levels required when called:   10
  3683 ;; This function calls:
  3684 ;;		___awdiv
  3685 ;;		___awmod
  3686 ;;		_drawtext
  3687 ;;		_strcpy
  3688 ;; This function is called by:
  3689 ;;		_main
  3690 ;; This function uses a non-reentrant model
  3691 ;;
  3692                           
  3693                           	psect	text7
  3694  00001C                     __ptext7:
  3695                           	opt stack 0
  3696  00001C                     _Update_Screen:
  3697                           	opt stack 20
  3698                           
  3699                           ;Main_Screen.c: 71: if ((DS1621_tempC & 0x80) == 0x80)
  3700                           
  3701                           ;incstack = 0
  3702  00001C  AE46               	btfss	_DS1621_tempC,7,c
  3703  00001E  D01C               	goto	l6438
  3704                           
  3705                           ;Main_Screen.c: 72: {
  3706                           ;Main_Screen.c: 73: tempC[0] = '-';
  3707  000020  0E2D               	movlw	45
  3708  000022  0100               	movlb	0	; () banked
  3709  000024  6FDD               	movwf	_tempC& (0+255),b
  3710                           
  3711                           ; BSR set to: 0
  3712                           ;Main_Screen.c: 74: tempC[1] = (DS1621_tempC & 0x7f)/10 + '0';
  3713  000026  0E7F               	movlw	127
  3714  000028  1446               	andwf	_DS1621_tempC,w,c
  3715  00002A  6E17               	movwf	___awdiv@dividend,c
  3716  00002C  6A18               	clrf	___awdiv@dividend+1,c
  3717  00002E  0E00               	movlw	0
  3718  000030  6E1A               	movwf	___awdiv@divisor+1,c
  3719  000032  0E0A               	movlw	10
  3720  000034  6E19               	movwf	___awdiv@divisor,c
  3721  000036  ECE6  F00C         	call	___awdiv	;wreg free
  3722  00003A  5017               	movf	?___awdiv,w,c
  3723  00003C  0F30               	addlw	48
  3724  00003E  0100               	movlb	0	; () banked
  3725  000040  6FDE               	movwf	(_tempC+1)& (0+255),b
  3726                           
  3727                           ; BSR set to: 0
  3728                           ;Main_Screen.c: 75: tempC[2] = (DS1621_tempC & 0x7f)%10 + '0';
  3729  000042  0E7F               	movlw	127
  3730  000044  1446               	andwf	_DS1621_tempC,w,c
  3731  000046  6E11               	movwf	___awmod@dividend,c
  3732  000048  6A12               	clrf	___awmod@dividend+1,c
  3733  00004A  0E00               	movlw	0
  3734  00004C  6E14               	movwf	___awmod@divisor+1,c
  3735  00004E  0E0A               	movlw	10
  3736  000050  6E13               	movwf	___awmod@divisor,c
  3737  000052  ECB9  F00D         	call	___awmod	;wreg free
  3738  000056  D01B               	goto	L1
  3739  000058                     l6438:
  3740                           
  3741                           ;Main_Screen.c: 77: else
  3742                           ;Main_Screen.c: 78: {
  3743                           ;Main_Screen.c: 79: tempC[0] = '+';
  3744  000058  0E2B               	movlw	43
  3745  00005A  0100               	movlb	0	; () banked
  3746  00005C  6FDD               	movwf	_tempC& (0+255),b
  3747                           
  3748                           ; BSR set to: 0
  3749                           ;Main_Screen.c: 80: tempC[1] = DS1621_tempC/10 + '0';
  3750  00005E  C046  F017         	movff	_DS1621_tempC,___awdiv@dividend
  3751  000062  C047  F018         	movff	_DS1621_tempC+1,___awdiv@dividend+1
  3752  000066  0E00               	movlw	0
  3753  000068  6E1A               	movwf	___awdiv@divisor+1,c
  3754  00006A  0E0A               	movlw	10
  3755  00006C  6E19               	movwf	___awdiv@divisor,c
  3756  00006E  ECE6  F00C         	call	___awdiv	;wreg free
  3757  000072  5017               	movf	?___awdiv,w,c
  3758  000074  0F30               	addlw	48
  3759  000076  0100               	movlb	0	; () banked
  3760  000078  6FDE               	movwf	(_tempC+1)& (0+255),b
  3761                           
  3762                           ; BSR set to: 0
  3763                           ;Main_Screen.c: 81: tempC[2] = DS1621_tempC%10 + '0';
  3764  00007A  C046  F011         	movff	_DS1621_tempC,___awmod@dividend
  3765  00007E  C047  F012         	movff	_DS1621_tempC+1,___awmod@dividend+1
  3766  000082  0E00               	movlw	0
  3767  000084  6E14               	movwf	___awmod@divisor+1,c
  3768  000086  0E0A               	movlw	10
  3769  000088  6E13               	movwf	___awmod@divisor,c
  3770  00008A  ECB9  F00D         	call	___awmod	;wreg free
  3771  00008E                     L1:
  3772  00008E  5011               	movf	?___awmod,w,c
  3773  000090  0F30               	addlw	48
  3774  000092  0100               	movlb	0	; () banked
  3775  000094  6FDF               	movwf	(_tempC+2)& (0+255),b
  3776  000096  D000               	goto	l6444
  3777  000098                     l6444:
  3778                           
  3779                           ; BSR set to: 0
  3780                           ;Main_Screen.c: 82: }
  3781                           ;Main_Screen.c: 84: if (DS1621_tempF < 0)
  3782  000098  AE49               	btfss	_DS1621_tempF+1,7,c
  3783  00009A  D028               	goto	l6454
  3784                           
  3785                           ; BSR set to: 0
  3786                           ;Main_Screen.c: 85: {
  3787                           ;Main_Screen.c: 86: tempF[0] = '-';
  3788  00009C  0E2D               	movlw	45
  3789  00009E  0100               	movlb	0	; () banked
  3790  0000A0  6FE1               	movwf	_tempF& (0+255),b
  3791                           
  3792                           ; BSR set to: 0
  3793                           ;Main_Screen.c: 87: int neg_tempF = -DS1621_tempF;
  3794  0000A2  C048  F043         	movff	_DS1621_tempF,??_Update_Screen
  3795  0000A6  C049  F044         	movff	_DS1621_tempF+1,??_Update_Screen+1
  3796  0000AA  1E43               	comf	??_Update_Screen,f,c
  3797  0000AC  1E44               	comf	??_Update_Screen+1,f,c
  3798  0000AE  4A43               	infsnz	??_Update_Screen,f,c
  3799  0000B0  2A44               	incf	??_Update_Screen+1,f,c
  3800  0000B2  C043  F0FC         	movff	??_Update_Screen,Update_Screen@neg_tempF
  3801  0000B6  C044  F0FD         	movff	??_Update_Screen+1,Update_Screen@neg_tempF+1
  3802                           
  3803                           ; BSR set to: 0
  3804                           ;Main_Screen.c: 88: tempF[1] = neg_tempF/10 + '0';
  3805  0000BA  C0FC  F017         	movff	Update_Screen@neg_tempF,___awdiv@dividend
  3806  0000BE  C0FD  F018         	movff	Update_Screen@neg_tempF+1,___awdiv@dividend+1
  3807  0000C2  0E00               	movlw	0
  3808  0000C4  6E1A               	movwf	___awdiv@divisor+1,c
  3809  0000C6  0E0A               	movlw	10
  3810  0000C8  6E19               	movwf	___awdiv@divisor,c
  3811  0000CA  ECE6  F00C         	call	___awdiv	;wreg free
  3812  0000CE  5017               	movf	?___awdiv,w,c
  3813  0000D0  0F30               	addlw	48
  3814  0000D2  0100               	movlb	0	; () banked
  3815  0000D4  6FE2               	movwf	(_tempF+1)& (0+255),b
  3816                           
  3817                           ; BSR set to: 0
  3818                           ;Main_Screen.c: 89: tempF[2] = neg_tempF%10 + '0';
  3819  0000D6  C0FC  F011         	movff	Update_Screen@neg_tempF,___awmod@dividend
  3820  0000DA  C0FD  F012         	movff	Update_Screen@neg_tempF+1,___awmod@dividend+1
  3821  0000DE  0E00               	movlw	0
  3822  0000E0  6E14               	movwf	___awmod@divisor+1,c
  3823  0000E2  0E0A               	movlw	10
  3824  0000E4  6E13               	movwf	___awmod@divisor,c
  3825  0000E6  ECB9  F00D         	call	___awmod	;wreg free
  3826  0000EA  D01B               	goto	L2
  3827  0000EC                     l6454:
  3828                           
  3829                           ; BSR set to: 0
  3830                           ;Main_Screen.c: 91: else
  3831                           ;Main_Screen.c: 92: {
  3832                           ;Main_Screen.c: 93: tempF[0] = '+';
  3833  0000EC  0E2B               	movlw	43
  3834  0000EE  0100               	movlb	0	; () banked
  3835  0000F0  6FE1               	movwf	_tempF& (0+255),b
  3836                           
  3837                           ; BSR set to: 0
  3838                           ;Main_Screen.c: 94: tempF[1] = DS1621_tempF/10 + '0';
  3839  0000F2  C048  F017         	movff	_DS1621_tempF,___awdiv@dividend
  3840  0000F6  C049  F018         	movff	_DS1621_tempF+1,___awdiv@dividend+1
  3841  0000FA  0E00               	movlw	0
  3842  0000FC  6E1A               	movwf	___awdiv@divisor+1,c
  3843  0000FE  0E0A               	movlw	10
  3844  000100  6E19               	movwf	___awdiv@divisor,c
  3845  000102  ECE6  F00C         	call	___awdiv	;wreg free
  3846  000106  5017               	movf	?___awdiv,w,c
  3847  000108  0F30               	addlw	48
  3848  00010A  0100               	movlb	0	; () banked
  3849  00010C  6FE2               	movwf	(_tempF+1)& (0+255),b
  3850                           
  3851                           ; BSR set to: 0
  3852                           ;Main_Screen.c: 95: tempF[2] = DS1621_tempF%10 + '0';
  3853  00010E  C048  F011         	movff	_DS1621_tempF,___awmod@dividend
  3854  000112  C049  F012         	movff	_DS1621_tempF+1,___awmod@dividend+1
  3855  000116  0E00               	movlw	0
  3856  000118  6E14               	movwf	___awmod@divisor+1,c
  3857  00011A  0E0A               	movlw	10
  3858  00011C  6E13               	movwf	___awmod@divisor,c
  3859  00011E  ECB9  F00D         	call	___awmod	;wreg free
  3860  000122                     L2:
  3861  000122  5011               	movf	?___awmod,w,c
  3862  000124  0F30               	addlw	48
  3863  000126  0100               	movlb	0	; () banked
  3864  000128  6FE3               	movwf	(_tempF+2)& (0+255),b
  3865  00012A  D000               	goto	l6460
  3866  00012C                     l6460:
  3867                           
  3868                           ; BSR set to: 0
  3869                           ;Main_Screen.c: 96: }
  3870                           ;Main_Screen.c: 97: time[0] = (hour>>4) + '0';
  3871  00012C  385E               	swapf	_hour,w,c
  3872  00012E  0B0F               	andlw	15
  3873  000130  0F30               	addlw	48
  3874  000132  0100               	movlb	0	; () banked
  3875  000134  6FC7               	movwf	_time& (0+255),b
  3876                           
  3877                           ; BSR set to: 0
  3878                           ;Main_Screen.c: 98: time[1] = (hour & 0x0f)+ '0';
  3879  000136  505E               	movf	_hour,w,c
  3880  000138  0B0F               	andlw	15
  3881  00013A  0F30               	addlw	48
  3882  00013C  0100               	movlb	0	; () banked
  3883  00013E  6FC8               	movwf	(_time+1)& (0+255),b
  3884                           
  3885                           ; BSR set to: 0
  3886                           ;Main_Screen.c: 101: time[3] = (minute>>4) + '0';
  3887  000140  385F               	swapf	_minute,w,c
  3888  000142  0B0F               	andlw	15
  3889  000144  0F30               	addlw	48
  3890  000146  0100               	movlb	0	; () banked
  3891  000148  6FCA               	movwf	(_time+3)& (0+255),b
  3892                           
  3893                           ; BSR set to: 0
  3894                           ;Main_Screen.c: 102: time[4] = (minute & 0x0f)+ '0';
  3895  00014A  505F               	movf	_minute,w,c
  3896  00014C  0B0F               	andlw	15
  3897  00014E  0F30               	addlw	48
  3898  000150  0100               	movlb	0	; () banked
  3899  000152  6FCB               	movwf	(_time+4)& (0+255),b
  3900                           
  3901                           ; BSR set to: 0
  3902                           ;Main_Screen.c: 104: time[6] = (second>>4) + '0';
  3903  000154  3862               	swapf	_second,w,c
  3904  000156  0B0F               	andlw	15
  3905  000158  0F30               	addlw	48
  3906  00015A  0100               	movlb	0	; () banked
  3907  00015C  6FCD               	movwf	(_time+6)& (0+255),b
  3908                           
  3909                           ; BSR set to: 0
  3910                           ;Main_Screen.c: 105: time[7] = (second & 0x0f)+ '0';
  3911  00015E  5062               	movf	_second,w,c
  3912  000160  0B0F               	andlw	15
  3913  000162  0F30               	addlw	48
  3914  000164  0100               	movlb	0	; () banked
  3915  000166  6FCE               	movwf	(_time+7)& (0+255),b
  3916                           
  3917                           ; BSR set to: 0
  3918                           ;Main_Screen.c: 107: date[0] = (month>>4) + '0';
  3919  000168  3860               	swapf	_month,w,c
  3920  00016A  0B0F               	andlw	15
  3921  00016C  0F30               	addlw	48
  3922  00016E  0100               	movlb	0	; () banked
  3923  000170  6FBE               	movwf	_date& (0+255),b
  3924                           
  3925                           ; BSR set to: 0
  3926                           ;Main_Screen.c: 108: date[1] = (month & 0x0f)+ '0';
  3927  000172  5060               	movf	_month,w,c
  3928  000174  0B0F               	andlw	15
  3929  000176  0F30               	addlw	48
  3930  000178  0100               	movlb	0	; () banked
  3931  00017A  6FBF               	movwf	(_date+1)& (0+255),b
  3932                           
  3933                           ; BSR set to: 0
  3934                           ;Main_Screen.c: 109: date[3] = (day>>4) + '0';
  3935  00017C  385A               	swapf	_day,w,c
  3936  00017E  0B0F               	andlw	15
  3937  000180  0F30               	addlw	48
  3938  000182  0100               	movlb	0	; () banked
  3939  000184  6FC1               	movwf	(_date+3)& (0+255),b
  3940                           
  3941                           ; BSR set to: 0
  3942                           ;Main_Screen.c: 110: date[4] = (day & 0x0f)+ '0';
  3943  000186  505A               	movf	_day,w,c
  3944  000188  0B0F               	andlw	15
  3945  00018A  0F30               	addlw	48
  3946  00018C  0100               	movlb	0	; () banked
  3947  00018E  6FC2               	movwf	(_date+4)& (0+255),b
  3948                           
  3949                           ; BSR set to: 0
  3950                           ;Main_Screen.c: 111: date[6] = (year>>4) + '0';
  3951  000190  386C               	swapf	_year,w,c
  3952  000192  0B0F               	andlw	15
  3953  000194  0F30               	addlw	48
  3954  000196  0100               	movlb	0	; () banked
  3955  000198  6FC4               	movwf	(_date+6)& (0+255),b
  3956                           
  3957                           ; BSR set to: 0
  3958                           ;Main_Screen.c: 112: date[7] = (year & 0x0f)+ '0';
  3959  00019A  506C               	movf	_year,w,c
  3960  00019C  0B0F               	andlw	15
  3961  00019E  0F30               	addlw	48
  3962  0001A0  0100               	movlb	0	; () banked
  3963  0001A2  6FC5               	movwf	(_date+7)& (0+255),b
  3964                           
  3965                           ; BSR set to: 0
  3966                           ;Main_Screen.c: 115: if (FAN == 1) strcpy(Fan_SW_Txt, "ON ");
  3967  0001A4  0450               	decf	_FAN,w,c
  3968  0001A6  A4D8               	btfss	status,2,c
  3969  0001A8  D00B               	goto	l6488
  3970                           
  3971                           ; BSR set to: 0
  3972  0001AA  0ED9               	movlw	low _Fan_SW_Txt
  3973  0001AC  6E11               	movwf	strcpy@to,c
  3974  0001AE  0E00               	movlw	high _Fan_SW_Txt
  3975  0001B0  6E12               	movwf	strcpy@to+1,c
  3976  0001B2  0EEC               	movlw	low STR_10
  3977  0001B4  6E13               	movwf	strcpy@from,c
  3978  0001B6  0EFF               	movlw	high STR_10
  3979  0001B8  6E14               	movwf	strcpy@from+1,c
  3980  0001BA  EC45  F011         	call	_strcpy	;wreg free
  3981  0001BE  D00B               	goto	l6490
  3982  0001C0                     l6488:
  3983                           
  3984                           ;Main_Screen.c: 116: else strcpy(Fan_SW_Txt, "OFF");
  3985  0001C0  0ED9               	movlw	low _Fan_SW_Txt
  3986  0001C2  6E11               	movwf	strcpy@to,c
  3987  0001C4  0E00               	movlw	high _Fan_SW_Txt
  3988  0001C6  6E12               	movwf	strcpy@to+1,c
  3989  0001C8  0EF0               	movlw	low STR_11
  3990  0001CA  6E13               	movwf	strcpy@from,c
  3991  0001CC  0EFF               	movlw	high STR_11
  3992  0001CE  6E14               	movwf	strcpy@from+1,c
  3993  0001D0  EC45  F011         	call	_strcpy	;wreg free
  3994  0001D4  D000               	goto	l6490
  3995  0001D6                     l6490:
  3996                           
  3997                           ;Main_Screen.c: 119: DC_Txt[0] = duty_cycle/100 + '0';
  3998  0001D6  C05C  F017         	movff	_duty_cycle,___awdiv@dividend
  3999  0001DA  6A18               	clrf	___awdiv@dividend+1,c
  4000  0001DC  0E00               	movlw	0
  4001  0001DE  6E1A               	movwf	___awdiv@divisor+1,c
  4002  0001E0  0E64               	movlw	100
  4003  0001E2  6E19               	movwf	___awdiv@divisor,c
  4004  0001E4  ECE6  F00C         	call	___awdiv	;wreg free
  4005  0001E8  5017               	movf	?___awdiv,w,c
  4006  0001EA  0F30               	addlw	48
  4007  0001EC  0100               	movlb	0	; () banked
  4008  0001EE  6FD5               	movwf	_DC_Txt& (0+255),b
  4009                           
  4010                           ; BSR set to: 0
  4011                           ;Main_Screen.c: 120: DC_Txt[1] = (duty_cycle%100)/10 + '0';
  4012  0001F0  0E00               	movlw	0
  4013  0001F2  6E14               	movwf	___awmod@divisor+1,c
  4014  0001F4  0E64               	movlw	100
  4015  0001F6  6E13               	movwf	___awmod@divisor,c
  4016  0001F8  C05C  F011         	movff	_duty_cycle,___awmod@dividend
  4017  0001FC  6A12               	clrf	___awmod@dividend+1,c
  4018  0001FE  ECB9  F00D         	call	___awmod	;wreg free
  4019  000202  C011  F017         	movff	?___awmod,___awdiv@dividend
  4020  000206  C012  F018         	movff	?___awmod+1,___awdiv@dividend+1
  4021  00020A  0E00               	movlw	0
  4022  00020C  6E1A               	movwf	___awdiv@divisor+1,c
  4023  00020E  0E0A               	movlw	10
  4024  000210  6E19               	movwf	___awdiv@divisor,c
  4025  000212  ECE6  F00C         	call	___awdiv	;wreg free
  4026  000216  5017               	movf	?___awdiv,w,c
  4027  000218  0F30               	addlw	48
  4028  00021A  0100               	movlb	0	; () banked
  4029  00021C  6FD6               	movwf	(_DC_Txt+1)& (0+255),b
  4030                           
  4031                           ; BSR set to: 0
  4032                           ;Main_Screen.c: 121: DC_Txt[2] = (duty_cycle%100)%10 + '0';
  4033  00021E  0E00               	movlw	0
  4034  000220  6E14               	movwf	___awmod@divisor+1,c
  4035  000222  0E64               	movlw	100
  4036  000224  6E13               	movwf	___awmod@divisor,c
  4037  000226  C05C  F011         	movff	_duty_cycle,___awmod@dividend
  4038  00022A  6A12               	clrf	___awmod@dividend+1,c
  4039  00022C  ECB9  F00D         	call	___awmod	;wreg free
  4040  000230  C011  F0FE         	movff	?___awmod,_Update_Screen$2399
  4041  000234  C012  F0FF         	movff	?___awmod+1,_Update_Screen$2399+1
  4042                           
  4043                           ;Main_Screen.c: 121: DC_Txt[2] = (duty_cycle%100)%10 + '0';
  4044  000238  C0FE  F011         	movff	_Update_Screen$2399,___awmod@dividend
  4045  00023C  C0FF  F012         	movff	_Update_Screen$2399+1,___awmod@dividend+1
  4046  000240  0E00               	movlw	0
  4047  000242  6E14               	movwf	___awmod@divisor+1,c
  4048  000244  0E0A               	movlw	10
  4049  000246  6E13               	movwf	___awmod@divisor,c
  4050  000248  ECB9  F00D         	call	___awmod	;wreg free
  4051  00024C  5011               	movf	?___awmod,w,c
  4052  00024E  0F30               	addlw	48
  4053  000250  0100               	movlb	0	; () banked
  4054  000252  6FD7               	movwf	(_DC_Txt+2)& (0+255),b
  4055                           
  4056                           ; BSR set to: 0
  4057                           ;Main_Screen.c: 124: RPM_Txt[0] = rpm/1000 + '0';
  4058  000254  C04C  F017         	movff	_rpm,___awdiv@dividend
  4059  000258  C04D  F018         	movff	_rpm+1,___awdiv@dividend+1
  4060  00025C  0E03               	movlw	3
  4061  00025E  6E1A               	movwf	___awdiv@divisor+1,c
  4062  000260  0EE8               	movlw	232
  4063  000262  6E19               	movwf	___awdiv@divisor,c
  4064  000264  ECE6  F00C         	call	___awdiv	;wreg free
  4065  000268  5017               	movf	?___awdiv,w,c
  4066  00026A  0F30               	addlw	48
  4067  00026C  0100               	movlb	0	; () banked
  4068  00026E  6FD0               	movwf	_RPM_Txt& (0+255),b
  4069                           
  4070                           ; BSR set to: 0
  4071                           ;Main_Screen.c: 125: RPM_Txt[1] = (rpm%1000)/100 + '0';
  4072  000270  0E03               	movlw	3
  4073  000272  6E14               	movwf	___awmod@divisor+1,c
  4074  000274  0EE8               	movlw	232
  4075  000276  6E13               	movwf	___awmod@divisor,c
  4076  000278  C04C  F011         	movff	_rpm,___awmod@dividend
  4077  00027C  C04D  F012         	movff	_rpm+1,___awmod@dividend+1
  4078  000280  ECB9  F00D         	call	___awmod	;wreg free
  4079  000284  C011  F017         	movff	?___awmod,___awdiv@dividend
  4080  000288  C012  F018         	movff	?___awmod+1,___awdiv@dividend+1
  4081  00028C  0E00               	movlw	0
  4082  00028E  6E1A               	movwf	___awdiv@divisor+1,c
  4083  000290  0E64               	movlw	100
  4084  000292  6E19               	movwf	___awdiv@divisor,c
  4085  000294  ECE6  F00C         	call	___awdiv	;wreg free
  4086  000298  5017               	movf	?___awdiv,w,c
  4087  00029A  0F30               	addlw	48
  4088  00029C  0100               	movlb	0	; () banked
  4089  00029E  6FD1               	movwf	(_RPM_Txt+1)& (0+255),b
  4090                           
  4091                           ; BSR set to: 0
  4092                           ;Main_Screen.c: 126: RPM_Txt[2] = ((rpm%1000)%100)/10 + '0';
  4093  0002A0  0E03               	movlw	3
  4094  0002A2  6E14               	movwf	___awmod@divisor+1,c
  4095  0002A4  0EE8               	movlw	232
  4096  0002A6  6E13               	movwf	___awmod@divisor,c
  4097  0002A8  C04C  F011         	movff	_rpm,___awmod@dividend
  4098  0002AC  C04D  F012         	movff	_rpm+1,___awmod@dividend+1
  4099  0002B0  ECB9  F00D         	call	___awmod	;wreg free
  4100  0002B4  C011  F0FE         	movff	?___awmod,_Update_Screen$2399
  4101  0002B8  C012  F0FF         	movff	?___awmod+1,_Update_Screen$2399+1
  4102                           
  4103                           ;Main_Screen.c: 126: RPM_Txt[2] = ((rpm%1000)%100)/10 + '0';
  4104  0002BC  0E00               	movlw	0
  4105  0002BE  6E14               	movwf	___awmod@divisor+1,c
  4106  0002C0  0E64               	movlw	100
  4107  0002C2  6E13               	movwf	___awmod@divisor,c
  4108  0002C4  C0FE  F011         	movff	_Update_Screen$2399,___awmod@dividend
  4109  0002C8  C0FF  F012         	movff	_Update_Screen$2399+1,___awmod@dividend+1
  4110  0002CC  ECB9  F00D         	call	___awmod	;wreg free
  4111  0002D0  C011  F017         	movff	?___awmod,___awdiv@dividend
  4112  0002D4  C012  F018         	movff	?___awmod+1,___awdiv@dividend+1
  4113  0002D8  0E00               	movlw	0
  4114  0002DA  6E1A               	movwf	___awdiv@divisor+1,c
  4115  0002DC  0E0A               	movlw	10
  4116  0002DE  6E19               	movwf	___awdiv@divisor,c
  4117  0002E0  ECE6  F00C         	call	___awdiv	;wreg free
  4118  0002E4  5017               	movf	?___awdiv,w,c
  4119  0002E6  0F30               	addlw	48
  4120  0002E8  0100               	movlb	0	; () banked
  4121  0002EA  6FD2               	movwf	(_RPM_Txt+2)& (0+255),b
  4122                           
  4123                           ; BSR set to: 0
  4124                           ;Main_Screen.c: 127: RPM_Txt[3] = ((rpm%1000)%100)%10 + '0';
  4125  0002EC  0E03               	movlw	3
  4126  0002EE  6E14               	movwf	___awmod@divisor+1,c
  4127  0002F0  0EE8               	movlw	232
  4128  0002F2  6E13               	movwf	___awmod@divisor,c
  4129  0002F4  C04C  F011         	movff	_rpm,___awmod@dividend
  4130  0002F8  C04D  F012         	movff	_rpm+1,___awmod@dividend+1
  4131  0002FC  ECB9  F00D         	call	___awmod	;wreg free
  4132  000300  C011  F0FE         	movff	?___awmod,_Update_Screen$2399
  4133  000304  C012  F0FF         	movff	?___awmod+1,_Update_Screen$2399+1
  4134                           
  4135                           ;Main_Screen.c: 127: RPM_Txt[3] = ((rpm%1000)%100)%10 + '0';
  4136  000308  0E00               	movlw	0
  4137  00030A  6E14               	movwf	___awmod@divisor+1,c
  4138  00030C  0E64               	movlw	100
  4139  00030E  6E13               	movwf	___awmod@divisor,c
  4140  000310  C0FE  F011         	movff	_Update_Screen$2399,___awmod@dividend
  4141  000314  C0FF  F012         	movff	_Update_Screen$2399+1,___awmod@dividend+1
  4142  000318  ECB9  F00D         	call	___awmod	;wreg free
  4143  00031C  C011  F0FA         	movff	?___awmod,_Update_Screen$2400
  4144  000320  C012  F0FB         	movff	?___awmod+1,_Update_Screen$2400+1
  4145                           
  4146                           ;Main_Screen.c: 127: RPM_Txt[3] = ((rpm%1000)%100)%10 + '0';
  4147  000324  C0FA  F011         	movff	_Update_Screen$2400,___awmod@dividend
  4148  000328  C0FB  F012         	movff	_Update_Screen$2400+1,___awmod@dividend+1
  4149  00032C  0E00               	movlw	0
  4150  00032E  6E14               	movwf	___awmod@divisor+1,c
  4151  000330  0E0A               	movlw	10
  4152  000332  6E13               	movwf	___awmod@divisor,c
  4153  000334  ECB9  F00D         	call	___awmod	;wreg free
  4154  000338  5011               	movf	?___awmod,w,c
  4155  00033A  0F30               	addlw	48
  4156  00033C  0100               	movlb	0	; () banked
  4157  00033E  6FD3               	movwf	(_RPM_Txt+3)& (0+255),b
  4158                           
  4159                           ; BSR set to: 0
  4160                           ;Main_Screen.c: 129: drawtext(1, 23, tempC , 0xFFE0 , 0x0000 , 2);
  4161  000340  0E17               	movlw	23
  4162  000342  6E39               	movwf	drawtext@y,c
  4163  000344  0EDD               	movlw	low _tempC
  4164  000346  6E3A               	movwf	drawtext@_text,c
  4165  000348  0E00               	movlw	high _tempC
  4166  00034A  6E3B               	movwf	drawtext@_text+1,c
  4167  00034C  0EFF               	movlw	255
  4168  00034E  6E3D               	movwf	drawtext@color+1,c
  4169  000350  0EE0               	movlw	224
  4170  000352  6E3C               	movwf	drawtext@color,c
  4171  000354  0E00               	movlw	0
  4172  000356  6E3F               	movwf	drawtext@bg+1,c
  4173  000358  0E00               	movlw	0
  4174  00035A  6E3E               	movwf	drawtext@bg,c
  4175  00035C  0E02               	movlw	2
  4176  00035E  6E40               	movwf	drawtext@size,c
  4177  000360  0E01               	movlw	1
  4178  000362  EC5C  F009         	call	_drawtext
  4179                           
  4180                           ;Main_Screen.c: 130: drawtext(70, 23, tempF , 0xFFE0 , 0x0000 , 2);
  4181  000366  0E17               	movlw	23
  4182  000368  6E39               	movwf	drawtext@y,c
  4183  00036A  0EE1               	movlw	low _tempF
  4184  00036C  6E3A               	movwf	drawtext@_text,c
  4185  00036E  0E00               	movlw	high _tempF
  4186  000370  6E3B               	movwf	drawtext@_text+1,c
  4187  000372  0EFF               	movlw	255
  4188  000374  6E3D               	movwf	drawtext@color+1,c
  4189  000376  0EE0               	movlw	224
  4190  000378  6E3C               	movwf	drawtext@color,c
  4191  00037A  0E00               	movlw	0
  4192  00037C  6E3F               	movwf	drawtext@bg+1,c
  4193  00037E  0E00               	movlw	0
  4194  000380  6E3E               	movwf	drawtext@bg,c
  4195  000382  0E02               	movlw	2
  4196  000384  6E40               	movwf	drawtext@size,c
  4197  000386  0E46               	movlw	70
  4198  000388  EC5C  F009         	call	_drawtext
  4199                           
  4200                           ;Main_Screen.c: 131: drawtext(15 , 52 , time , 0x07FF , 0x0000 , 2);
  4201  00038C  0E34               	movlw	52
  4202  00038E  6E39               	movwf	drawtext@y,c
  4203  000390  0EC7               	movlw	low _time
  4204  000392  6E3A               	movwf	drawtext@_text,c
  4205  000394  0E00               	movlw	high _time
  4206  000396  6E3B               	movwf	drawtext@_text+1,c
  4207  000398  0E07               	movlw	7
  4208  00039A  6E3D               	movwf	drawtext@color+1,c
  4209  00039C  683C               	setf	drawtext@color,c
  4210  00039E  0E00               	movlw	0
  4211  0003A0  6E3F               	movwf	drawtext@bg+1,c
  4212  0003A2  0E00               	movlw	0
  4213  0003A4  6E3E               	movwf	drawtext@bg,c
  4214  0003A6  0E02               	movlw	2
  4215  0003A8  6E40               	movwf	drawtext@size,c
  4216  0003AA  0E0F               	movlw	15
  4217  0003AC  EC5C  F009         	call	_drawtext
  4218                           
  4219                           ;Main_Screen.c: 132: drawtext(15 , 82 , date , 0x07E0 , 0x0000 , 2);
  4220  0003B0  0E52               	movlw	82
  4221  0003B2  6E39               	movwf	drawtext@y,c
  4222  0003B4  0EBE               	movlw	low _date
  4223  0003B6  6E3A               	movwf	drawtext@_text,c
  4224  0003B8  0E00               	movlw	high _date
  4225  0003BA  6E3B               	movwf	drawtext@_text+1,c
  4226  0003BC  0E07               	movlw	7
  4227  0003BE  6E3D               	movwf	drawtext@color+1,c
  4228  0003C0  0EE0               	movlw	224
  4229  0003C2  6E3C               	movwf	drawtext@color,c
  4230  0003C4  0E00               	movlw	0
  4231  0003C6  6E3F               	movwf	drawtext@bg+1,c
  4232  0003C8  0E00               	movlw	0
  4233  0003CA  6E3E               	movwf	drawtext@bg,c
  4234  0003CC  0E02               	movlw	2
  4235  0003CE  6E40               	movwf	drawtext@size,c
  4236  0003D0  0E0F               	movlw	15
  4237  0003D2  EC5C  F009         	call	_drawtext
  4238                           
  4239                           ;Main_Screen.c: 134: drawtext(95, 130, Fan_SW_Txt, 0xF800 , 0x0000 , 1);
  4240  0003D6  0E82               	movlw	130
  4241  0003D8  6E39               	movwf	drawtext@y,c
  4242  0003DA  0ED9               	movlw	low _Fan_SW_Txt
  4243  0003DC  6E3A               	movwf	drawtext@_text,c
  4244  0003DE  0E00               	movlw	high _Fan_SW_Txt
  4245  0003E0  6E3B               	movwf	drawtext@_text+1,c
  4246  0003E2  0EF8               	movlw	248
  4247  0003E4  6E3D               	movwf	drawtext@color+1,c
  4248  0003E6  0E00               	movlw	0
  4249  0003E8  6E3C               	movwf	drawtext@color,c
  4250  0003EA  0E00               	movlw	0
  4251  0003EC  6E3F               	movwf	drawtext@bg+1,c
  4252  0003EE  0E00               	movlw	0
  4253  0003F0  6E3E               	movwf	drawtext@bg,c
  4254  0003F2  0E01               	movlw	1
  4255  0003F4  6E40               	movwf	drawtext@size,c
  4256  0003F6  0E5F               	movlw	95
  4257  0003F8  EC5C  F009         	call	_drawtext
  4258                           
  4259                           ;Main_Screen.c: 135: drawtext(10, 150, DC_Txt, 0x07E0, 0x0000, 1);
  4260  0003FC  0E96               	movlw	150
  4261  0003FE  6E39               	movwf	drawtext@y,c
  4262  000400  0ED5               	movlw	low _DC_Txt
  4263  000402  6E3A               	movwf	drawtext@_text,c
  4264  000404  0E00               	movlw	high _DC_Txt
  4265  000406  6E3B               	movwf	drawtext@_text+1,c
  4266  000408  0E07               	movlw	7
  4267  00040A  6E3D               	movwf	drawtext@color+1,c
  4268  00040C  0EE0               	movlw	224
  4269  00040E  6E3C               	movwf	drawtext@color,c
  4270  000410  0E00               	movlw	0
  4271  000412  6E3F               	movwf	drawtext@bg+1,c
  4272  000414  0E00               	movlw	0
  4273  000416  6E3E               	movwf	drawtext@bg,c
  4274  000418  0E01               	movlw	1
  4275  00041A  6E40               	movwf	drawtext@size,c
  4276  00041C  0E0A               	movlw	10
  4277  00041E  EC5C  F009         	call	_drawtext
  4278                           
  4279                           ;Main_Screen.c: 136: drawtext(93, 150, RPM_Txt, 0x07E0, 0x0000, 1);
  4280  000422  0E96               	movlw	150
  4281  000424  6E39               	movwf	drawtext@y,c
  4282  000426  0ED0               	movlw	low _RPM_Txt
  4283  000428  6E3A               	movwf	drawtext@_text,c
  4284  00042A  0E00               	movlw	high _RPM_Txt
  4285  00042C  6E3B               	movwf	drawtext@_text+1,c
  4286  00042E  0E07               	movlw	7
  4287  000430  6E3D               	movwf	drawtext@color+1,c
  4288  000432  0EE0               	movlw	224
  4289  000434  6E3C               	movwf	drawtext@color,c
  4290  000436  0E00               	movlw	0
  4291  000438  6E3F               	movwf	drawtext@bg+1,c
  4292  00043A  0E00               	movlw	0
  4293  00043C  6E3E               	movwf	drawtext@bg,c
  4294  00043E  0E01               	movlw	1
  4295  000440  6E40               	movwf	drawtext@size,c
  4296  000442  0E5D               	movlw	93
  4297  000444  EC5C  F009         	call	_drawtext
  4298  000448  0012               	return		;funcret
  4299  00044A                     __end_of_Update_Screen:
  4300                           	opt stack 0
  4301                           tblptru	equ	0xFF8
  4302                           tblptrh	equ	0xFF7
  4303                           tblptrl	equ	0xFF6
  4304                           tablat	equ	0xFF5
  4305                           prodh	equ	0xFF4
  4306                           prodl	equ	0xFF3
  4307                           intcon	equ	0xFF2
  4308                           intcon2	equ	0xFF1
  4309                           postinc0	equ	0xFEE
  4310                           wreg	equ	0xFE8
  4311                           postdec1	equ	0xFE5
  4312                           fsr1l	equ	0xFE1
  4313                           postinc2	equ	0xFDE
  4314                           postdec2	equ	0xFDD
  4315                           fsr2h	equ	0xFDA
  4316                           fsr2l	equ	0xFD9
  4317                           status	equ	0xFD8
  4318                           
  4319 ;; *************** function ___awmod *****************
  4320 ;; Defined at:
  4321 ;;		line 8 in file "E:\XC8\sources\common\awmod.c"
  4322 ;; Parameters:    Size  Location     Type
  4323 ;;  dividend        2   16[COMRAM] int 
  4324 ;;  divisor         2   18[COMRAM] int 
  4325 ;; Auto vars:     Size  Location     Type
  4326 ;;  sign            1   21[COMRAM] unsigned char 
  4327 ;;  counter         1   20[COMRAM] unsigned char 
  4328 ;; Return value:  Size  Location     Type
  4329 ;;                  2   16[COMRAM] int 
  4330 ;; Registers used:
  4331 ;;		wreg, status,2, status,0
  4332 ;; Tracked objects:
  4333 ;;		On entry : 0/0
  4334 ;;		On exit  : 0/0
  4335 ;;		Unchanged: 0/0
  4336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4337 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4338 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4339 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4340 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4341 ;;Total ram usage:        6 bytes
  4342 ;; Hardware stack levels used:    1
  4343 ;; Hardware stack levels required when called:    3
  4344 ;; This function calls:
  4345 ;;		Nothing
  4346 ;; This function is called by:
  4347 ;;		_Update_Screen
  4348 ;; This function uses a non-reentrant model
  4349 ;;
  4350                           
  4351                           	psect	text8
  4352  001B72                     __ptext8:
  4353                           	opt stack 0
  4354  001B72                     ___awmod:
  4355                           	opt stack 26
  4356                           
  4357                           ;incstack = 0
  4358  001B72  0E00               	movlw	0
  4359  001B74  6E16               	movwf	___awmod@sign,c
  4360  001B76  AE12               	btfss	___awmod@dividend+1,7,c
  4361  001B78  D007               	goto	l6190
  4362  001B7A  6C11               	negf	___awmod@dividend,c
  4363  001B7C  1E12               	comf	___awmod@dividend+1,f,c
  4364  001B7E  B0D8               	btfsc	status,0,c
  4365  001B80  2A12               	incf	___awmod@dividend+1,f,c
  4366  001B82  0E01               	movlw	1
  4367  001B84  6E16               	movwf	___awmod@sign,c
  4368  001B86  D000               	goto	l6190
  4369  001B88                     l6190:
  4370  001B88  AE14               	btfss	___awmod@divisor+1,7,c
  4371  001B8A  D005               	goto	l6194
  4372  001B8C  6C13               	negf	___awmod@divisor,c
  4373  001B8E  1E14               	comf	___awmod@divisor+1,f,c
  4374  001B90  B0D8               	btfsc	status,0,c
  4375  001B92  2A14               	incf	___awmod@divisor+1,f,c
  4376  001B94  D000               	goto	l6194
  4377  001B96                     l6194:
  4378  001B96  5013               	movf	___awmod@divisor,w,c
  4379  001B98  1014               	iorwf	___awmod@divisor+1,w,c
  4380  001B9A  B4D8               	btfsc	status,2,c
  4381  001B9C  D01D               	goto	l6210
  4382  001B9E  0E01               	movlw	1
  4383  001BA0  6E15               	movwf	___awmod@counter,c
  4384  001BA2  D005               	goto	l6200
  4385  001BA4                     l6198:
  4386  001BA4  90D8               	bcf	status,0,c
  4387  001BA6  3613               	rlcf	___awmod@divisor,f,c
  4388  001BA8  3614               	rlcf	___awmod@divisor+1,f,c
  4389  001BAA  2A15               	incf	___awmod@counter,f,c
  4390  001BAC  D000               	goto	l6200
  4391  001BAE                     l6200:
  4392  001BAE  BE14               	btfsc	___awmod@divisor+1,7,c
  4393  001BB0  D002               	goto	l6202
  4394  001BB2  D7F8               	goto	l6198
  4395  001BB4  D000               	goto	l6202
  4396  001BB6                     l6202:
  4397  001BB6  5013               	movf	___awmod@divisor,w,c
  4398  001BB8  5C11               	subwf	___awmod@dividend,w,c
  4399  001BBA  5014               	movf	___awmod@divisor+1,w,c
  4400  001BBC  5812               	subwfb	___awmod@dividend+1,w,c
  4401  001BBE  A0D8               	btfss	status,0,c
  4402  001BC0  D005               	goto	l6206
  4403  001BC2  5013               	movf	___awmod@divisor,w,c
  4404  001BC4  5E11               	subwf	___awmod@dividend,f,c
  4405  001BC6  5014               	movf	___awmod@divisor+1,w,c
  4406  001BC8  5A12               	subwfb	___awmod@dividend+1,f,c
  4407  001BCA  D000               	goto	l6206
  4408  001BCC                     l6206:
  4409  001BCC  90D8               	bcf	status,0,c
  4410  001BCE  3214               	rrcf	___awmod@divisor+1,f,c
  4411  001BD0  3213               	rrcf	___awmod@divisor,f,c
  4412  001BD2  2E15               	decfsz	___awmod@counter,f,c
  4413  001BD4  D7F0               	goto	l6202
  4414  001BD6  D000               	goto	l6210
  4415  001BD8                     l6210:
  4416  001BD8  5016               	movf	___awmod@sign,w,c
  4417  001BDA  B4D8               	btfsc	status,2,c
  4418  001BDC  D005               	goto	l6214
  4419  001BDE  6C11               	negf	___awmod@dividend,c
  4420  001BE0  1E12               	comf	___awmod@dividend+1,f,c
  4421  001BE2  B0D8               	btfsc	status,0,c
  4422  001BE4  2A12               	incf	___awmod@dividend+1,f,c
  4423  001BE6  D000               	goto	l6214
  4424  001BE8                     l6214:
  4425  001BE8  C011  F011         	movff	___awmod@dividend,?___awmod
  4426  001BEC  C012  F012         	movff	___awmod@dividend+1,?___awmod+1
  4427  001BF0  D000               	goto	l1000
  4428  001BF2                     l1000:
  4429  001BF2  0012               	return		;funcret
  4430  001BF4                     __end_of___awmod:
  4431                           	opt stack 0
  4432                           tblptru	equ	0xFF8
  4433                           tblptrh	equ	0xFF7
  4434                           tblptrl	equ	0xFF6
  4435                           tablat	equ	0xFF5
  4436                           prodh	equ	0xFF4
  4437                           prodl	equ	0xFF3
  4438                           intcon	equ	0xFF2
  4439                           intcon2	equ	0xFF1
  4440                           postinc0	equ	0xFEE
  4441                           wreg	equ	0xFE8
  4442                           postdec1	equ	0xFE5
  4443                           fsr1l	equ	0xFE1
  4444                           postinc2	equ	0xFDE
  4445                           postdec2	equ	0xFDD
  4446                           fsr2h	equ	0xFDA
  4447                           fsr2l	equ	0xFD9
  4448                           status	equ	0xFD8
  4449                           
  4450 ;; *************** function ___awdiv *****************
  4451 ;; Defined at:
  4452 ;;		line 8 in file "E:\XC8\sources\common\awdiv.c"
  4453 ;; Parameters:    Size  Location     Type
  4454 ;;  dividend        2   22[COMRAM] int 
  4455 ;;  divisor         2   24[COMRAM] int 
  4456 ;; Auto vars:     Size  Location     Type
  4457 ;;  quotient        2   28[COMRAM] int 
  4458 ;;  sign            1   27[COMRAM] unsigned char 
  4459 ;;  counter         1   26[COMRAM] unsigned char 
  4460 ;; Return value:  Size  Location     Type
  4461 ;;                  2   22[COMRAM] int 
  4462 ;; Registers used:
  4463 ;;		wreg, status,2, status,0
  4464 ;; Tracked objects:
  4465 ;;		On entry : 0/0
  4466 ;;		On exit  : 0/0
  4467 ;;		Unchanged: 0/0
  4468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4469 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4470 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4472 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4473 ;;Total ram usage:        8 bytes
  4474 ;; Hardware stack levels used:    1
  4475 ;; Hardware stack levels required when called:    3
  4476 ;; This function calls:
  4477 ;;		Nothing
  4478 ;; This function is called by:
  4479 ;;		_Update_Screen
  4480 ;;		_get_RPM
  4481 ;;		_main
  4482 ;; This function uses a non-reentrant model
  4483 ;;
  4484                           
  4485                           	psect	text9
  4486  0019CC                     __ptext9:
  4487                           	opt stack 0
  4488  0019CC                     ___awdiv:
  4489                           	opt stack 26
  4490                           
  4491                           ;incstack = 0
  4492  0019CC  0E00               	movlw	0
  4493  0019CE  6E1C               	movwf	___awdiv@sign,c
  4494  0019D0  AE1A               	btfss	___awdiv@divisor+1,7,c
  4495  0019D2  D007               	goto	l6146
  4496  0019D4  6C19               	negf	___awdiv@divisor,c
  4497  0019D6  1E1A               	comf	___awdiv@divisor+1,f,c
  4498  0019D8  B0D8               	btfsc	status,0,c
  4499  0019DA  2A1A               	incf	___awdiv@divisor+1,f,c
  4500  0019DC  0E01               	movlw	1
  4501  0019DE  6E1C               	movwf	___awdiv@sign,c
  4502  0019E0  D000               	goto	l6146
  4503  0019E2                     l6146:
  4504  0019E2  AE18               	btfss	___awdiv@dividend+1,7,c
  4505  0019E4  D007               	goto	l6152
  4506  0019E6  6C17               	negf	___awdiv@dividend,c
  4507  0019E8  1E18               	comf	___awdiv@dividend+1,f,c
  4508  0019EA  B0D8               	btfsc	status,0,c
  4509  0019EC  2A18               	incf	___awdiv@dividend+1,f,c
  4510  0019EE  0E01               	movlw	1
  4511  0019F0  1A1C               	xorwf	___awdiv@sign,f,c
  4512  0019F2  D000               	goto	l6152
  4513  0019F4                     l6152:
  4514  0019F4  0E00               	movlw	0
  4515  0019F6  6E1E               	movwf	___awdiv@quotient+1,c
  4516  0019F8  0E00               	movlw	0
  4517  0019FA  6E1D               	movwf	___awdiv@quotient,c
  4518  0019FC  5019               	movf	___awdiv@divisor,w,c
  4519  0019FE  101A               	iorwf	___awdiv@divisor+1,w,c
  4520  001A00  B4D8               	btfsc	status,2,c
  4521  001A02  D021               	goto	l6174
  4522  001A04  0E01               	movlw	1
  4523  001A06  6E1B               	movwf	___awdiv@counter,c
  4524  001A08  D005               	goto	l6160
  4525  001A0A                     l6158:
  4526  001A0A  90D8               	bcf	status,0,c
  4527  001A0C  3619               	rlcf	___awdiv@divisor,f,c
  4528  001A0E  361A               	rlcf	___awdiv@divisor+1,f,c
  4529  001A10  2A1B               	incf	___awdiv@counter,f,c
  4530  001A12  D000               	goto	l6160
  4531  001A14                     l6160:
  4532  001A14  BE1A               	btfsc	___awdiv@divisor+1,7,c
  4533  001A16  D002               	goto	l6162
  4534  001A18  D7F8               	goto	l6158
  4535  001A1A  D000               	goto	l6162
  4536  001A1C                     l6162:
  4537  001A1C  90D8               	bcf	status,0,c
  4538  001A1E  361D               	rlcf	___awdiv@quotient,f,c
  4539  001A20  361E               	rlcf	___awdiv@quotient+1,f,c
  4540  001A22  5019               	movf	___awdiv@divisor,w,c
  4541  001A24  5C17               	subwf	___awdiv@dividend,w,c
  4542  001A26  501A               	movf	___awdiv@divisor+1,w,c
  4543  001A28  5818               	subwfb	___awdiv@dividend+1,w,c
  4544  001A2A  A0D8               	btfss	status,0,c
  4545  001A2C  D006               	goto	l6170
  4546  001A2E  5019               	movf	___awdiv@divisor,w,c
  4547  001A30  5E17               	subwf	___awdiv@dividend,f,c
  4548  001A32  501A               	movf	___awdiv@divisor+1,w,c
  4549  001A34  5A18               	subwfb	___awdiv@dividend+1,f,c
  4550  001A36  801D               	bsf	___awdiv@quotient,0,c
  4551  001A38  D000               	goto	l6170
  4552  001A3A                     l6170:
  4553  001A3A  90D8               	bcf	status,0,c
  4554  001A3C  321A               	rrcf	___awdiv@divisor+1,f,c
  4555  001A3E  3219               	rrcf	___awdiv@divisor,f,c
  4556  001A40  2E1B               	decfsz	___awdiv@counter,f,c
  4557  001A42  D7EC               	goto	l6162
  4558  001A44  D000               	goto	l6174
  4559  001A46                     l6174:
  4560  001A46  501C               	movf	___awdiv@sign,w,c
  4561  001A48  B4D8               	btfsc	status,2,c
  4562  001A4A  D005               	goto	l6178
  4563  001A4C  6C1D               	negf	___awdiv@quotient,c
  4564  001A4E  1E1E               	comf	___awdiv@quotient+1,f,c
  4565  001A50  B0D8               	btfsc	status,0,c
  4566  001A52  2A1E               	incf	___awdiv@quotient+1,f,c
  4567  001A54  D000               	goto	l6178
  4568  001A56                     l6178:
  4569  001A56  C01D  F017         	movff	___awdiv@quotient,?___awdiv
  4570  001A5A  C01E  F018         	movff	___awdiv@quotient+1,?___awdiv+1
  4571  001A5E  D000               	goto	l987
  4572  001A60                     l987:
  4573  001A60  0012               	return		;funcret
  4574  001A62                     __end_of___awdiv:
  4575                           	opt stack 0
  4576                           tblptru	equ	0xFF8
  4577                           tblptrh	equ	0xFF7
  4578                           tblptrl	equ	0xFF6
  4579                           tablat	equ	0xFF5
  4580                           prodh	equ	0xFF4
  4581                           prodl	equ	0xFF3
  4582                           intcon	equ	0xFF2
  4583                           intcon2	equ	0xFF1
  4584                           postinc0	equ	0xFEE
  4585                           wreg	equ	0xFE8
  4586                           postdec1	equ	0xFE5
  4587                           fsr1l	equ	0xFE1
  4588                           postinc2	equ	0xFDE
  4589                           postdec2	equ	0xFDD
  4590                           fsr2h	equ	0xFDA
  4591                           fsr2l	equ	0xFD9
  4592                           status	equ	0xFD8
  4593                           
  4594 ;; *************** function _Toggle_Fan *****************
  4595 ;; Defined at:
  4596 ;;		line 27 in file "Fan_Support.c"
  4597 ;; Parameters:    Size  Location     Type
  4598 ;;		None
  4599 ;; Auto vars:     Size  Location     Type
  4600 ;;		None
  4601 ;; Return value:  Size  Location     Type
  4602 ;;		None               void
  4603 ;; Registers used:
  4604 ;;		wreg, status,2, status,0, cstack
  4605 ;; Tracked objects:
  4606 ;;		On entry : 0/0
  4607 ;;		On exit  : 0/0
  4608 ;;		Unchanged: 0/0
  4609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4610 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4611 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4612 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4613 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4614 ;;Total ram usage:        0 bytes
  4615 ;; Hardware stack levels used:    1
  4616 ;; Hardware stack levels required when called:    7
  4617 ;; This function calls:
  4618 ;;		_Turn_Off_Fan
  4619 ;;		_Turn_On_Fan
  4620 ;; This function is called by:
  4621 ;;		_main
  4622 ;; This function uses a non-reentrant model
  4623 ;;
  4624                           
  4625                           	psect	text10
  4626  00247A                     __ptext10:
  4627                           	opt stack 0
  4628  00247A                     _Toggle_Fan:
  4629                           	opt stack 23
  4630                           
  4631                           ;Fan_Support.c: 29: if (FAN==0) Turn_On_Fan();
  4632                           
  4633                           ;incstack = 0
  4634  00247A  5050               	movf	_FAN,w,c
  4635  00247C  A4D8               	btfss	status,2,c
  4636  00247E  D003               	goto	l6538
  4637  002480  EC92  F012         	call	_Turn_On_Fan	;wreg free
  4638  002484  D003               	goto	l485
  4639  002486                     l6538:
  4640                           
  4641                           ;Fan_Support.c: 30: else Turn_Off_Fan();
  4642  002486  ECBD  F012         	call	_Turn_Off_Fan	;wreg free
  4643  00248A  D000               	goto	l485
  4644  00248C                     l485:
  4645  00248C  0012               	return		;funcret
  4646  00248E                     __end_of_Toggle_Fan:
  4647                           	opt stack 0
  4648                           tblptru	equ	0xFF8
  4649                           tblptrh	equ	0xFF7
  4650                           tblptrl	equ	0xFF6
  4651                           tablat	equ	0xFF5
  4652                           prodh	equ	0xFF4
  4653                           prodl	equ	0xFF3
  4654                           intcon	equ	0xFF2
  4655                           intcon2	equ	0xFF1
  4656                           postinc0	equ	0xFEE
  4657                           wreg	equ	0xFE8
  4658                           postdec1	equ	0xFE5
  4659                           fsr1l	equ	0xFE1
  4660                           postinc2	equ	0xFDE
  4661                           postdec2	equ	0xFDD
  4662                           fsr2h	equ	0xFDA
  4663                           fsr2l	equ	0xFD9
  4664                           status	equ	0xFD8
  4665                           
  4666 ;; *************** function _Turn_On_Fan *****************
  4667 ;; Defined at:
  4668 ;;		line 43 in file "Fan_Support.c"
  4669 ;; Parameters:    Size  Location     Type
  4670 ;;		None
  4671 ;; Auto vars:     Size  Location     Type
  4672 ;;		None
  4673 ;; Return value:  Size  Location     Type
  4674 ;;		None               void
  4675 ;; Registers used:
  4676 ;;		wreg, status,2, status,0, cstack
  4677 ;; Tracked objects:
  4678 ;;		On entry : 0/0
  4679 ;;		On exit  : 0/0
  4680 ;;		Unchanged: 0/0
  4681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4682 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4683 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4684 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4685 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4686 ;;Total ram usage:        0 bytes
  4687 ;; Hardware stack levels used:    1
  4688 ;; Hardware stack levels required when called:    6
  4689 ;; This function calls:
  4690 ;;		_do_update_pwm
  4691 ;; This function is called by:
  4692 ;;		_Toggle_Fan
  4693 ;; This function uses a non-reentrant model
  4694 ;;
  4695                           
  4696                           	psect	text11
  4697  002524                     __ptext11:
  4698                           	opt stack 0
  4699  002524                     _Turn_On_Fan:
  4700                           	opt stack 23
  4701                           
  4702                           ;Fan_Support.c: 46: FAN=1;
  4703                           
  4704                           ;incstack = 0
  4705  002524  0E01               	movlw	1
  4706  002526  6E50               	movwf	_FAN,c
  4707                           
  4708                           ;Fan_Support.c: 47: do_update_pwm(duty_cycle);
  4709  002528  505C               	movf	_duty_cycle,w,c
  4710  00252A  EC8B  F00C         	call	_do_update_pwm
  4711                           
  4712                           ;Fan_Support.c: 48: PORTAbits.RA5=1;
  4713  00252E  8A80               	bsf	3968,5,c	;volatile
  4714                           
  4715                           ;Fan_Support.c: 49: PORTEbits.RE1=1;
  4716  002530  8284               	bsf	3972,1,c	;volatile
  4717  002532  0012               	return		;funcret
  4718  002534                     __end_of_Turn_On_Fan:
  4719                           	opt stack 0
  4720                           tblptru	equ	0xFF8
  4721                           tblptrh	equ	0xFF7
  4722                           tblptrl	equ	0xFF6
  4723                           tablat	equ	0xFF5
  4724                           prodh	equ	0xFF4
  4725                           prodl	equ	0xFF3
  4726                           intcon	equ	0xFF2
  4727                           intcon2	equ	0xFF1
  4728                           postinc0	equ	0xFEE
  4729                           wreg	equ	0xFE8
  4730                           postdec1	equ	0xFE5
  4731                           fsr1l	equ	0xFE1
  4732                           postinc2	equ	0xFDE
  4733                           postdec2	equ	0xFDD
  4734                           fsr2h	equ	0xFDA
  4735                           fsr2l	equ	0xFD9
  4736                           status	equ	0xFD8
  4737                           
  4738 ;; *************** function _Turn_Off_Fan *****************
  4739 ;; Defined at:
  4740 ;;		line 34 in file "Fan_Support.c"
  4741 ;; Parameters:    Size  Location     Type
  4742 ;;		None
  4743 ;; Auto vars:     Size  Location     Type
  4744 ;;		None
  4745 ;; Return value:  Size  Location     Type
  4746 ;;		None               void
  4747 ;; Registers used:
  4748 ;;		wreg, status,2
  4749 ;; Tracked objects:
  4750 ;;		On entry : 0/0
  4751 ;;		On exit  : 0/0
  4752 ;;		Unchanged: 0/0
  4753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4754 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4755 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4756 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4757 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4758 ;;Total ram usage:        0 bytes
  4759 ;; Hardware stack levels used:    1
  4760 ;; Hardware stack levels required when called:    3
  4761 ;; This function calls:
  4762 ;;		Nothing
  4763 ;; This function is called by:
  4764 ;;		_Toggle_Fan
  4765 ;; This function uses a non-reentrant model
  4766 ;;
  4767                           
  4768                           	psect	text12
  4769  00257A                     __ptext12:
  4770                           	opt stack 0
  4771  00257A                     _Turn_Off_Fan:
  4772                           	opt stack 26
  4773                           
  4774                           ;Fan_Support.c: 37: FAN=0;
  4775                           
  4776                           ;incstack = 0
  4777  00257A  0E00               	movlw	0
  4778  00257C  6E50               	movwf	_FAN,c
  4779                           
  4780                           ;Fan_Support.c: 38: PORTAbits.RA5=0;
  4781  00257E  9A80               	bcf	3968,5,c	;volatile
  4782                           
  4783                           ;Fan_Support.c: 39: PORTEbits.RE1=0;
  4784  002580  9284               	bcf	3972,1,c	;volatile
  4785  002582  0012               	return		;funcret
  4786  002584                     __end_of_Turn_Off_Fan:
  4787                           	opt stack 0
  4788                           tblptru	equ	0xFF8
  4789                           tblptrh	equ	0xFF7
  4790                           tblptrl	equ	0xFF6
  4791                           tablat	equ	0xFF5
  4792                           prodh	equ	0xFF4
  4793                           prodl	equ	0xFF3
  4794                           intcon	equ	0xFF2
  4795                           intcon2	equ	0xFF1
  4796                           postinc0	equ	0xFEE
  4797                           wreg	equ	0xFE8
  4798                           postdec1	equ	0xFE5
  4799                           fsr1l	equ	0xFE1
  4800                           postinc2	equ	0xFDE
  4801                           postdec2	equ	0xFDD
  4802                           fsr2h	equ	0xFDA
  4803                           fsr2l	equ	0xFD9
  4804                           status	equ	0xFD8
  4805                           
  4806 ;; *************** function _Set_RPM_RGB *****************
  4807 ;; Defined at:
  4808 ;;		line 152 in file "Fan_Support.c"
  4809 ;; Parameters:    Size  Location     Type
  4810 ;;  rpm             2   16[COMRAM] int 
  4811 ;; Auto vars:     Size  Location     Type
  4812 ;;		None
  4813 ;; Return value:  Size  Location     Type
  4814 ;;		None               void
  4815 ;; Registers used:
  4816 ;;		wreg, status,2, status,0
  4817 ;; Tracked objects:
  4818 ;;		On entry : 0/0
  4819 ;;		On exit  : 0/0
  4820 ;;		Unchanged: 0/0
  4821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4822 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4823 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4824 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4825 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4826 ;;Total ram usage:        2 bytes
  4827 ;; Hardware stack levels used:    1
  4828 ;; Hardware stack levels required when called:    3
  4829 ;; This function calls:
  4830 ;;		Nothing
  4831 ;; This function is called by:
  4832 ;;		_main
  4833 ;; This function uses a non-reentrant model
  4834 ;;
  4835                           
  4836                           	psect	text13
  4837  001D60                     __ptext13:
  4838                           	opt stack 0
  4839  001D60                     _Set_RPM_RGB:
  4840                           	opt stack 27
  4841                           
  4842                           ;Fan_Support.c: 154: if (rpm==0)
  4843                           
  4844                           ;incstack = 0
  4845  001D60  5011               	movf	Set_RPM_RGB@rpm,w,c
  4846  001D62  1012               	iorwf	Set_RPM_RGB@rpm+1,w,c
  4847  001D64  A4D8               	btfss	status,2,c
  4848  001D66  D002               	goto	l6606
  4849                           
  4850                           ;Fan_Support.c: 155: {
  4851                           ;Fan_Support.c: 156: PORTDbits.RD6=0;
  4852  001D68  9C83               	bcf	3971,6,c	;volatile
  4853  001D6A  D010               	goto	L3
  4854  001D6C                     l6606:
  4855                           
  4856                           ;Fan_Support.c: 159: else if (rpm>0 & rpm<1800)
  4857  001D6C  BE12               	btfsc	Set_RPM_RGB@rpm+1,7,c
  4858  001D6E  D010               	goto	l6612
  4859  001D70  5012               	movf	Set_RPM_RGB@rpm+1,w,c
  4860  001D72  E103               	bnz	u5460
  4861  001D74  0411               	decf	Set_RPM_RGB@rpm,w,c
  4862  001D76  A0D8               	btfss	status,0,c
  4863  001D78  D00B               	goto	l6612
  4864  001D7A                     u5460:
  4865  001D7A  BE12               	btfsc	Set_RPM_RGB@rpm+1,7,c
  4866  001D7C  D006               	goto	l6610
  4867  001D7E  0E08               	movlw	8
  4868  001D80  5C11               	subwf	Set_RPM_RGB@rpm,w,c
  4869  001D82  0E07               	movlw	7
  4870  001D84  5812               	subwfb	Set_RPM_RGB@rpm+1,w,c
  4871  001D86  B0D8               	btfsc	status,0,c
  4872  001D88  D003               	goto	l6612
  4873  001D8A                     l6610:
  4874                           
  4875                           ;Fan_Support.c: 160: {
  4876                           ;Fan_Support.c: 161: PORTDbits.RD6=1;
  4877  001D8A  8C83               	bsf	3971,6,c	;volatile
  4878  001D8C                     L3:
  4879                           
  4880                           ;Fan_Support.c: 162: PORTDbits.RD7=0;
  4881  001D8C  9E83               	bcf	3971,7,c	;volatile
  4882                           
  4883                           ;Fan_Support.c: 163: }
  4884  001D8E  D01D               	goto	l533
  4885  001D90                     l6612:
  4886                           
  4887                           ;Fan_Support.c: 164: else if (rpm>=1800 & rpm<2700)
  4888  001D90  BE12               	btfsc	Set_RPM_RGB@rpm+1,7,c
  4889  001D92  D010               	goto	l6618
  4890  001D94  0E08               	movlw	8
  4891  001D96  5C11               	subwf	Set_RPM_RGB@rpm,w,c
  4892  001D98  0E07               	movlw	7
  4893  001D9A  5812               	subwfb	Set_RPM_RGB@rpm+1,w,c
  4894  001D9C  A0D8               	btfss	status,0,c
  4895  001D9E  D00A               	goto	l6618
  4896  001DA0  BE12               	btfsc	Set_RPM_RGB@rpm+1,7,c
  4897  001DA2  D006               	goto	l6616
  4898  001DA4  0E8C               	movlw	140
  4899  001DA6  5C11               	subwf	Set_RPM_RGB@rpm,w,c
  4900  001DA8  0E0A               	movlw	10
  4901  001DAA  5812               	subwfb	Set_RPM_RGB@rpm+1,w,c
  4902  001DAC  B0D8               	btfsc	status,0,c
  4903  001DAE  D002               	goto	l6618
  4904  001DB0                     l6616:
  4905                           
  4906                           ;Fan_Support.c: 165: {
  4907                           ;Fan_Support.c: 166: PORTDbits.RD6=1;
  4908  001DB0  8C83               	bsf	3971,6,c	;volatile
  4909  001DB2  D009               	goto	L4
  4910  001DB4                     l6618:
  4911                           
  4912                           ;Fan_Support.c: 169: else if (rpm>=2700)
  4913  001DB4  BE12               	btfsc	Set_RPM_RGB@rpm+1,7,c
  4914  001DB6  D009               	goto	l533
  4915  001DB8  0E8C               	movlw	140
  4916  001DBA  5C11               	subwf	Set_RPM_RGB@rpm,w,c
  4917  001DBC  0E0A               	movlw	10
  4918  001DBE  5812               	subwfb	Set_RPM_RGB@rpm+1,w,c
  4919  001DC0  A0D8               	btfss	status,0,c
  4920  001DC2  D003               	goto	l533
  4921                           
  4922                           ;Fan_Support.c: 170: {
  4923                           ;Fan_Support.c: 171: PORTDbits.RD6=0;
  4924  001DC4  9C83               	bcf	3971,6,c	;volatile
  4925  001DC6                     L4:
  4926                           
  4927                           ;Fan_Support.c: 172: PORTDbits.RD7=1;
  4928  001DC6  8E83               	bsf	3971,7,c	;volatile
  4929  001DC8  D000               	goto	l533
  4930  001DCA                     l533:
  4931  001DCA  0012               	return		;funcret
  4932  001DCC                     __end_of_Set_RPM_RGB:
  4933                           	opt stack 0
  4934                           tblptru	equ	0xFF8
  4935                           tblptrh	equ	0xFF7
  4936                           tblptrl	equ	0xFF6
  4937                           tablat	equ	0xFF5
  4938                           prodh	equ	0xFF4
  4939                           prodl	equ	0xFF3
  4940                           intcon	equ	0xFF2
  4941                           intcon2	equ	0xFF1
  4942                           postinc0	equ	0xFEE
  4943                           wreg	equ	0xFE8
  4944                           postdec1	equ	0xFE5
  4945                           fsr1l	equ	0xFE1
  4946                           postinc2	equ	0xFDE
  4947                           postdec2	equ	0xFDD
  4948                           fsr2h	equ	0xFDA
  4949                           fsr2l	equ	0xFD9
  4950                           status	equ	0xFD8
  4951                           
  4952 ;; *************** function _Set_DC_RGB *****************
  4953 ;; Defined at:
  4954 ;;		line 99 in file "Fan_Support.c"
  4955 ;; Parameters:    Size  Location     Type
  4956 ;;  duty_cycle      2   16[COMRAM] int 
  4957 ;; Auto vars:     Size  Location     Type
  4958 ;;		None
  4959 ;; Return value:  Size  Location     Type
  4960 ;;		None               void
  4961 ;; Registers used:
  4962 ;;		wreg, status,2, status,0
  4963 ;; Tracked objects:
  4964 ;;		On entry : 0/0
  4965 ;;		On exit  : 0/0
  4966 ;;		Unchanged: 0/0
  4967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4968 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4969 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4970 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4971 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4972 ;;Total ram usage:        2 bytes
  4973 ;; Hardware stack levels used:    1
  4974 ;; Hardware stack levels required when called:    3
  4975 ;; This function calls:
  4976 ;;		Nothing
  4977 ;; This function is called by:
  4978 ;;		_main
  4979 ;; This function uses a non-reentrant model
  4980 ;;
  4981                           
  4982                           	psect	text14
  4983  001090                     __ptext14:
  4984                           	opt stack 0
  4985  001090                     _Set_DC_RGB:
  4986                           	opt stack 27
  4987                           
  4988                           ;Fan_Support.c: 101: if (duty_cycle>=0 & duty_cycle<9)
  4989                           
  4990                           ;incstack = 0
  4991  001090  BE12               	btfsc	Set_DC_RGB@duty_cycle+1,7,c
  4992  001092  D00A               	goto	l6562
  4993  001094  BE12               	btfsc	Set_DC_RGB@duty_cycle+1,7,c
  4994  001096  D006               	goto	l6560
  4995  001098  5012               	movf	Set_DC_RGB@duty_cycle+1,w,c
  4996  00109A  E106               	bnz	l6562
  4997  00109C  0E09               	movlw	9
  4998  00109E  5C11               	subwf	Set_DC_RGB@duty_cycle,w,c
  4999  0010A0  B0D8               	btfsc	status,0,c
  5000  0010A2  D002               	goto	l6562
  5001  0010A4                     l6560:
  5002                           
  5003                           ;Fan_Support.c: 102: {
  5004                           ;Fan_Support.c: 103: PORTAbits.RA1=0;
  5005  0010A4  9280               	bcf	3968,1,c	;volatile
  5006  0010A6  D011               	goto	L5
  5007  0010A8                     l6562:
  5008                           
  5009                           ;Fan_Support.c: 107: else if (duty_cycle>=10 & duty_cycle<19)
  5010  0010A8  BE12               	btfsc	Set_DC_RGB@duty_cycle+1,7,c
  5011  0010AA  D011               	goto	l6568
  5012  0010AC  5012               	movf	Set_DC_RGB@duty_cycle+1,w,c
  5013  0010AE  E104               	bnz	u5320
  5014  0010B0  0E0A               	movlw	10
  5015  0010B2  5C11               	subwf	Set_DC_RGB@duty_cycle,w,c
  5016  0010B4  A0D8               	btfss	status,0,c
  5017  0010B6  D00B               	goto	l6568
  5018  0010B8                     u5320:
  5019  0010B8  BE12               	btfsc	Set_DC_RGB@duty_cycle+1,7,c
  5020  0010BA  D006               	goto	l6566
  5021  0010BC  5012               	movf	Set_DC_RGB@duty_cycle+1,w,c
  5022  0010BE  E107               	bnz	l6568
  5023  0010C0  0E13               	movlw	19
  5024  0010C2  5C11               	subwf	Set_DC_RGB@duty_cycle,w,c
  5025  0010C4  B0D8               	btfsc	status,0,c
  5026  0010C6  D003               	goto	l6568
  5027  0010C8                     l6566:
  5028                           
  5029                           ;Fan_Support.c: 108: {
  5030                           ;Fan_Support.c: 109: PORTAbits.RA1=1;
  5031  0010C8  8280               	bsf	3968,1,c	;volatile
  5032  0010CA                     L5:
  5033                           
  5034                           ;Fan_Support.c: 110: PORTAbits.RA2=0;
  5035  0010CA  9480               	bcf	3968,2,c	;volatile
  5036  0010CC  D012               	goto	L6
  5037  0010CE                     l6568:
  5038                           
  5039                           ;Fan_Support.c: 113: else if (duty_cycle>=20 & duty_cycle<29)
  5040  0010CE  BE12               	btfsc	Set_DC_RGB@duty_cycle+1,7,c
  5041  0010D0  D012               	goto	l6574
  5042  0010D2  5012               	movf	Set_DC_RGB@duty_cycle+1,w,c
  5043  0010D4  E104               	bnz	u5340
  5044  0010D6  0E14               	movlw	20
  5045  0010D8  5C11               	subwf	Set_DC_RGB@duty_cycle,w,c
  5046  0010DA  A0D8               	btfss	status,0,c
  5047  0010DC  D00C               	goto	l6574
  5048  0010DE                     u5340:
  5049  0010DE  BE12               	btfsc	Set_DC_RGB@duty_cycle+1,7,c
  5050  0010E0  D006               	goto	l6572
  5051  0010E2  5012               	movf	Set_DC_RGB@duty_cycle+1,w,c
  5052  0010E4  E108               	bnz	l6574
  5053  0010E6  0E1D               	movlw	29
  5054  0010E8  5C11               	subwf	Set_DC_RGB@duty_cycle,w,c
  5055  0010EA  B0D8               	btfsc	status,0,c
  5056  0010EC  D004               	goto	l6574
  5057  0010EE                     l6572:
  5058                           
  5059                           ;Fan_Support.c: 114: {
  5060                           ;Fan_Support.c: 115: PORTAbits.RA1=0;
  5061  0010EE  9280               	bcf	3968,1,c	;volatile
  5062  0010F0  D013               	goto	L7
  5063  0010F2                     L6:
  5064                           
  5065                           ;Fan_Support.c: 117: PORTAbits.RA4=0;
  5066  0010F2  9880               	bcf	3968,4,c	;volatile
  5067                           
  5068                           ;Fan_Support.c: 118: }
  5069  0010F4  D058               	goto	l523
  5070  0010F6                     l6574:
  5071                           
  5072                           ;Fan_Support.c: 119: else if (duty_cycle>=30 & duty_cycle<39)
  5073  0010F6  BE12               	btfsc	Set_DC_RGB@duty_cycle+1,7,c
  5074  0010F8  D011               	goto	l6580
  5075  0010FA  5012               	movf	Set_DC_RGB@duty_cycle+1,w,c
  5076  0010FC  E104               	bnz	u5360
  5077  0010FE  0E1E               	movlw	30
  5078  001100  5C11               	subwf	Set_DC_RGB@duty_cycle,w,c
  5079  001102  A0D8               	btfss	status,0,c
  5080  001104  D00B               	goto	l6580
  5081  001106                     u5360:
  5082  001106  BE12               	btfsc	Set_DC_RGB@duty_cycle+1,7,c
  5083  001108  D006               	goto	l6578
  5084  00110A  5012               	movf	Set_DC_RGB@duty_cycle+1,w,c
  5085  00110C  E107               	bnz	l6580
  5086  00110E  0E27               	movlw	39
  5087  001110  5C11               	subwf	Set_DC_RGB@duty_cycle,w,c
  5088  001112  B0D8               	btfsc	status,0,c
  5089  001114  D003               	goto	l6580
  5090  001116                     l6578:
  5091                           
  5092                           ;Fan_Support.c: 120: {
  5093                           ;Fan_Support.c: 121: PORTAbits.RA1=1;
  5094  001116  8280               	bsf	3968,1,c	;volatile
  5095  001118                     L7:
  5096                           
  5097                           ;Fan_Support.c: 122: PORTAbits.RA2=1;
  5098  001118  8480               	bsf	3968,2,c	;volatile
  5099  00111A  D7EB               	goto	L6
  5100  00111C                     l6580:
  5101                           
  5102                           ;Fan_Support.c: 125: else if (duty_cycle>=40 & duty_cycle<49)
  5103  00111C  BE12               	btfsc	Set_DC_RGB@duty_cycle+1,7,c
  5104  00111E  D010               	goto	l6586
  5105  001120  5012               	movf	Set_DC_RGB@duty_cycle+1,w,c
  5106  001122  E104               	bnz	u5380
  5107  001124  0E28               	movlw	40
  5108  001126  5C11               	subwf	Set_DC_RGB@duty_cycle,w,c
  5109  001128  A0D8               	btfss	status,0,c
  5110  00112A  D00A               	goto	l6586
  5111  00112C                     u5380:
  5112  00112C  BE12               	btfsc	Set_DC_RGB@duty_cycle+1,7,c
  5113  00112E  D006               	goto	l6584
  5114  001130  5012               	movf	Set_DC_RGB@duty_cycle+1,w,c
  5115  001132  E106               	bnz	l6586
  5116  001134  0E31               	movlw	49
  5117  001136  5C11               	subwf	Set_DC_RGB@duty_cycle,w,c
  5118  001138  B0D8               	btfsc	status,0,c
  5119  00113A  D002               	goto	l6586
  5120  00113C                     l6584:
  5121                           
  5122                           ;Fan_Support.c: 126: {
  5123                           ;Fan_Support.c: 127: PORTAbits.RA1=0;
  5124  00113C  9280               	bcf	3968,1,c	;volatile
  5125  00113E  D011               	goto	L8
  5126  001140                     l6586:
  5127                           
  5128                           ;Fan_Support.c: 131: else if (duty_cycle>=50 & duty_cycle<59)
  5129  001140  BE12               	btfsc	Set_DC_RGB@duty_cycle+1,7,c
  5130  001142  D011               	goto	l6592
  5131  001144  5012               	movf	Set_DC_RGB@duty_cycle+1,w,c
  5132  001146  E104               	bnz	u5400
  5133  001148  0E32               	movlw	50
  5134  00114A  5C11               	subwf	Set_DC_RGB@duty_cycle,w,c
  5135  00114C  A0D8               	btfss	status,0,c
  5136  00114E  D00B               	goto	l6592
  5137  001150                     u5400:
  5138  001150  BE12               	btfsc	Set_DC_RGB@duty_cycle+1,7,c
  5139  001152  D006               	goto	l6590
  5140  001154  5012               	movf	Set_DC_RGB@duty_cycle+1,w,c
  5141  001156  E107               	bnz	l6592
  5142  001158  0E3B               	movlw	59
  5143  00115A  5C11               	subwf	Set_DC_RGB@duty_cycle,w,c
  5144  00115C  B0D8               	btfsc	status,0,c
  5145  00115E  D003               	goto	l6592
  5146  001160                     l6590:
  5147                           
  5148                           ;Fan_Support.c: 132: {
  5149                           ;Fan_Support.c: 133: PORTAbits.RA1=1;
  5150  001160  8280               	bsf	3968,1,c	;volatile
  5151  001162                     L8:
  5152                           
  5153                           ;Fan_Support.c: 134: PORTAbits.RA2=0;
  5154  001162  9480               	bcf	3968,2,c	;volatile
  5155  001164  D012               	goto	L9
  5156  001166                     l6592:
  5157                           
  5158                           ;Fan_Support.c: 137: else if (duty_cycle>=60 & duty_cycle<69)
  5159  001166  BE12               	btfsc	Set_DC_RGB@duty_cycle+1,7,c
  5160  001168  D012               	goto	l6598
  5161  00116A  5012               	movf	Set_DC_RGB@duty_cycle+1,w,c
  5162  00116C  E104               	bnz	u5420
  5163  00116E  0E3C               	movlw	60
  5164  001170  5C11               	subwf	Set_DC_RGB@duty_cycle,w,c
  5165  001172  A0D8               	btfss	status,0,c
  5166  001174  D00C               	goto	l6598
  5167  001176                     u5420:
  5168  001176  BE12               	btfsc	Set_DC_RGB@duty_cycle+1,7,c
  5169  001178  D006               	goto	l6596
  5170  00117A  5012               	movf	Set_DC_RGB@duty_cycle+1,w,c
  5171  00117C  E108               	bnz	l6598
  5172  00117E  0E45               	movlw	69
  5173  001180  5C11               	subwf	Set_DC_RGB@duty_cycle,w,c
  5174  001182  B0D8               	btfsc	status,0,c
  5175  001184  D004               	goto	l6598
  5176  001186                     l6596:
  5177                           
  5178                           ;Fan_Support.c: 138: {
  5179                           ;Fan_Support.c: 139: PORTAbits.RA1=0;
  5180  001186  9280               	bcf	3968,1,c	;volatile
  5181  001188  D00B               	goto	L10
  5182  00118A                     L9:
  5183                           
  5184                           ;Fan_Support.c: 141: PORTAbits.RA4=1;
  5185  00118A  8880               	bsf	3968,4,c	;volatile
  5186                           
  5187                           ;Fan_Support.c: 142: }
  5188  00118C  D00C               	goto	l523
  5189  00118E                     l6598:
  5190                           
  5191                           ;Fan_Support.c: 143: else if (duty_cycle>=70)
  5192  00118E  BE12               	btfsc	Set_DC_RGB@duty_cycle+1,7,c
  5193  001190  D00A               	goto	l523
  5194  001192  5012               	movf	Set_DC_RGB@duty_cycle+1,w,c
  5195  001194  E104               	bnz	u5440
  5196  001196  0E46               	movlw	70
  5197  001198  5C11               	subwf	Set_DC_RGB@duty_cycle,w,c
  5198  00119A  A0D8               	btfss	status,0,c
  5199  00119C  D004               	goto	l523
  5200  00119E                     u5440:
  5201                           
  5202                           ;Fan_Support.c: 144: {
  5203                           ;Fan_Support.c: 145: PORTAbits.RA1=1;
  5204  00119E  8280               	bsf	3968,1,c	;volatile
  5205  0011A0                     L10:
  5206                           
  5207                           ;Fan_Support.c: 146: PORTAbits.RA2=1;
  5208  0011A0  8480               	bsf	3968,2,c	;volatile
  5209  0011A2  D7F3               	goto	L9
  5210                           
  5211                           ;Fan_Support.c: 147: PORTAbits.RA4=1;
  5212  0011A4  D000               	goto	l523
  5213  0011A6                     l523:
  5214  0011A6  0012               	return		;funcret
  5215  0011A8                     __end_of_Set_DC_RGB:
  5216                           	opt stack 0
  5217                           tblptru	equ	0xFF8
  5218                           tblptrh	equ	0xFF7
  5219                           tblptrl	equ	0xFF6
  5220                           tablat	equ	0xFF5
  5221                           prodh	equ	0xFF4
  5222                           prodl	equ	0xFF3
  5223                           intcon	equ	0xFF2
  5224                           intcon2	equ	0xFF1
  5225                           postinc0	equ	0xFEE
  5226                           wreg	equ	0xFE8
  5227                           postdec1	equ	0xFE5
  5228                           fsr1l	equ	0xFE1
  5229                           postinc2	equ	0xFDE
  5230                           postdec2	equ	0xFDD
  5231                           fsr2h	equ	0xFDA
  5232                           fsr2l	equ	0xFD9
  5233                           status	equ	0xFD8
  5234                           
  5235 ;; *************** function _Initialize_Screen *****************
  5236 ;; Defined at:
  5237 ;;		line 34 in file "Main_Screen.c"
  5238 ;; Parameters:    Size  Location     Type
  5239 ;;		None
  5240 ;; Auto vars:     Size  Location     Type
  5241 ;;		None
  5242 ;; Return value:  Size  Location     Type
  5243 ;;		None               void
  5244 ;; Registers used:
  5245 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5246 ;; Tracked objects:
  5247 ;;		On entry : 0/0
  5248 ;;		On exit  : 0/0
  5249 ;;		Unchanged: 0/0
  5250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5251 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5252 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5253 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5254 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5255 ;;Total ram usage:        0 bytes
  5256 ;; Hardware stack levels used:    1
  5257 ;; Hardware stack levels required when called:   10
  5258 ;; This function calls:
  5259 ;;		_LCD_Reset
  5260 ;;		_TFT_GreenTab_Initialize
  5261 ;;		_drawCircle
  5262 ;;		_drawtext
  5263 ;;		_fillScreen
  5264 ;;		_strcpy
  5265 ;; This function is called by:
  5266 ;;		_main
  5267 ;; This function uses a non-reentrant model
  5268 ;;
  5269                           
  5270                           	psect	text15
  5271  0007A4                     __ptext15:
  5272                           	opt stack 0
  5273  0007A4                     _Initialize_Screen:
  5274                           	opt stack 20
  5275                           
  5276                           ;Main_Screen.c: 36: LCD_Reset();
  5277                           
  5278                           ;incstack = 0
  5279  0007A4  EC65  F012         	call	_LCD_Reset	;wreg free
  5280                           
  5281                           ;Main_Screen.c: 37: TFT_GreenTab_Initialize();
  5282  0007A8  EC76  F011         	call	_TFT_GreenTab_Initialize	;wreg free
  5283                           
  5284                           ;Main_Screen.c: 38: fillScreen(0x0000);
  5285  0007AC  0E00               	movlw	0
  5286  0007AE  6E25               	movwf	fillScreen@color+1,c
  5287  0007B0  0E00               	movlw	0
  5288  0007B2  6E24               	movwf	fillScreen@color,c
  5289  0007B4  EC17  F012         	call	_fillScreen	;wreg free
  5290                           
  5291                           ;Main_Screen.c: 39: txt = buffer;
  5292  0007B8  0E69               	movlw	low _buffer
  5293  0007BA  6E4E               	movwf	_txt,c
  5294  0007BC  0E01               	movlw	high _buffer
  5295  0007BE  6E4F               	movwf	_txt+1,c
  5296                           
  5297                           ;Main_Screen.c: 40: strcpy(txt, "ECE3301L Spring 21-S1");
  5298  0007C0  C04E  F011         	movff	_txt,strcpy@to
  5299  0007C4  C04F  F012         	movff	_txt+1,strcpy@to+1
  5300  0007C8  0E60               	movlw	low STR_1
  5301  0007CA  6E13               	movwf	strcpy@from,c
  5302  0007CC  0EFF               	movlw	high STR_1
  5303  0007CE  6E14               	movwf	strcpy@from+1,c
  5304  0007D0  EC45  F011         	call	_strcpy	;wreg free
  5305                           
  5306                           ;Main_Screen.c: 42: drawtext(1 , 1, txt, 0xFFFF , 0x0000, 1);
  5307  0007D4  0E01               	movlw	1
  5308  0007D6  6E39               	movwf	drawtext@y,c
  5309  0007D8  C04E  F03A         	movff	_txt,drawtext@_text
  5310  0007DC  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  5311  0007E0  0EFF               	movlw	255
  5312  0007E2  6E3D               	movwf	drawtext@color+1,c
  5313  0007E4  683C               	setf	drawtext@color,c
  5314  0007E6  0E00               	movlw	0
  5315  0007E8  6E3F               	movwf	drawtext@bg+1,c
  5316  0007EA  0E00               	movlw	0
  5317  0007EC  6E3E               	movwf	drawtext@bg,c
  5318  0007EE  0E01               	movlw	1
  5319  0007F0  6E40               	movwf	drawtext@size,c
  5320  0007F2  0E01               	movlw	1
  5321  0007F4  EC5C  F009         	call	_drawtext
  5322                           
  5323                           ;Main_Screen.c: 44: strcpy(txt, "Temperature:");
  5324  0007F8  C04E  F011         	movff	_txt,strcpy@to
  5325  0007FC  C04F  F012         	movff	_txt+1,strcpy@to+1
  5326  000800  0ECF               	movlw	low STR_2
  5327  000802  6E13               	movwf	strcpy@from,c
  5328  000804  0EFF               	movlw	high STR_2
  5329  000806  6E14               	movwf	strcpy@from+1,c
  5330  000808  EC45  F011         	call	_strcpy	;wreg free
  5331                           
  5332                           ;Main_Screen.c: 45: drawtext(24 , 11 , txt, 0xF81F, 0x0000, 1);
  5333  00080C  0E0B               	movlw	11
  5334  00080E  6E39               	movwf	drawtext@y,c
  5335  000810  C04E  F03A         	movff	_txt,drawtext@_text
  5336  000814  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  5337  000818  0EF8               	movlw	248
  5338  00081A  6E3D               	movwf	drawtext@color+1,c
  5339  00081C  0E1F               	movlw	31
  5340  00081E  6E3C               	movwf	drawtext@color,c
  5341  000820  0E00               	movlw	0
  5342  000822  6E3F               	movwf	drawtext@bg+1,c
  5343  000824  0E00               	movlw	0
  5344  000826  6E3E               	movwf	drawtext@bg,c
  5345  000828  0E01               	movlw	1
  5346  00082A  6E40               	movwf	drawtext@size,c
  5347  00082C  0E18               	movlw	24
  5348  00082E  EC5C  F009         	call	_drawtext
  5349                           
  5350                           ;Main_Screen.c: 46: drawCircle(40, 23 , 2 , 0xFFE0);
  5351  000832  0E00               	movlw	0
  5352  000834  6E1D               	movwf	drawCircle@x0+1,c
  5353  000836  0E28               	movlw	40
  5354  000838  6E1C               	movwf	drawCircle@x0,c
  5355  00083A  0E00               	movlw	0
  5356  00083C  6E1F               	movwf	drawCircle@y0+1,c
  5357  00083E  0E17               	movlw	23
  5358  000840  6E1E               	movwf	drawCircle@y0,c
  5359  000842  0E00               	movlw	0
  5360  000844  6E21               	movwf	drawCircle@r+1,c
  5361  000846  0E02               	movlw	2
  5362  000848  6E20               	movwf	drawCircle@r,c
  5363  00084A  0EFF               	movlw	255
  5364  00084C  6E23               	movwf	drawCircle@color+1,c
  5365  00084E  0EE0               	movlw	224
  5366  000850  6E22               	movwf	drawCircle@color,c
  5367  000852  EC0D  F006         	call	_drawCircle	;wreg free
  5368                           
  5369                           ;Main_Screen.c: 47: strcpy(txt, "C/");
  5370  000856  C04E  F011         	movff	_txt,strcpy@to
  5371  00085A  C04F  F012         	movff	_txt+1,strcpy@to+1
  5372  00085E  0EF8               	movlw	low STR_3
  5373  000860  6E13               	movwf	strcpy@from,c
  5374  000862  0EFF               	movlw	high STR_3
  5375  000864  6E14               	movwf	strcpy@from+1,c
  5376  000866  EC45  F011         	call	_strcpy	;wreg free
  5377                           
  5378                           ;Main_Screen.c: 48: drawtext(45 , 23, txt, 0xFFE0 , 0x0000, 2);
  5379  00086A  0E17               	movlw	23
  5380  00086C  6E39               	movwf	drawtext@y,c
  5381  00086E  C04E  F03A         	movff	_txt,drawtext@_text
  5382  000872  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  5383  000876  0EFF               	movlw	255
  5384  000878  6E3D               	movwf	drawtext@color+1,c
  5385  00087A  0EE0               	movlw	224
  5386  00087C  6E3C               	movwf	drawtext@color,c
  5387  00087E  0E00               	movlw	0
  5388  000880  6E3F               	movwf	drawtext@bg+1,c
  5389  000882  0E00               	movlw	0
  5390  000884  6E3E               	movwf	drawtext@bg,c
  5391  000886  0E02               	movlw	2
  5392  000888  6E40               	movwf	drawtext@size,c
  5393  00088A  0E2D               	movlw	45
  5394  00088C  EC5C  F009         	call	_drawtext
  5395                           
  5396                           ;Main_Screen.c: 49: strcpy(txt, "F");
  5397  000890  C04E  F011         	movff	_txt,strcpy@to
  5398  000894  C04F  F012         	movff	_txt+1,strcpy@to+1
  5399  000898  0EF2               	movlw	low (STR_11+2)
  5400  00089A  6E13               	movwf	strcpy@from,c
  5401  00089C  0EFF               	movlw	high (STR_11+2)
  5402  00089E  6E14               	movwf	strcpy@from+1,c
  5403  0008A0  EC45  F011         	call	_strcpy	;wreg free
  5404                           
  5405                           ;Main_Screen.c: 50: drawCircle(110, 23 , 2 , 0xFFE0);
  5406  0008A4  0E00               	movlw	0
  5407  0008A6  6E1D               	movwf	drawCircle@x0+1,c
  5408  0008A8  0E6E               	movlw	110
  5409  0008AA  6E1C               	movwf	drawCircle@x0,c
  5410  0008AC  0E00               	movlw	0
  5411  0008AE  6E1F               	movwf	drawCircle@y0+1,c
  5412  0008B0  0E17               	movlw	23
  5413  0008B2  6E1E               	movwf	drawCircle@y0,c
  5414  0008B4  0E00               	movlw	0
  5415  0008B6  6E21               	movwf	drawCircle@r+1,c
  5416  0008B8  0E02               	movlw	2
  5417  0008BA  6E20               	movwf	drawCircle@r,c
  5418  0008BC  0EFF               	movlw	255
  5419  0008BE  6E23               	movwf	drawCircle@color+1,c
  5420  0008C0  0EE0               	movlw	224
  5421  0008C2  6E22               	movwf	drawCircle@color,c
  5422  0008C4  EC0D  F006         	call	_drawCircle	;wreg free
  5423                           
  5424                           ;Main_Screen.c: 51: drawtext(115 , 23, txt, 0xFFE0 , 0x0000, 2);
  5425  0008C8  0E17               	movlw	23
  5426  0008CA  6E39               	movwf	drawtext@y,c
  5427  0008CC  C04E  F03A         	movff	_txt,drawtext@_text
  5428  0008D0  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  5429  0008D4  0EFF               	movlw	255
  5430  0008D6  6E3D               	movwf	drawtext@color+1,c
  5431  0008D8  0EE0               	movlw	224
  5432  0008DA  6E3C               	movwf	drawtext@color,c
  5433  0008DC  0E00               	movlw	0
  5434  0008DE  6E3F               	movwf	drawtext@bg+1,c
  5435  0008E0  0E00               	movlw	0
  5436  0008E2  6E3E               	movwf	drawtext@bg,c
  5437  0008E4  0E02               	movlw	2
  5438  0008E6  6E40               	movwf	drawtext@size,c
  5439  0008E8  0E73               	movlw	115
  5440  0008EA  EC5C  F009         	call	_drawtext
  5441                           
  5442                           ;Main_Screen.c: 52: strcpy(txt, "Time");
  5443  0008EE  C04E  F011         	movff	_txt,strcpy@to
  5444  0008F2  C04F  F012         	movff	_txt+1,strcpy@to+1
  5445  0008F6  0EE2               	movlw	low STR_5
  5446  0008F8  6E13               	movwf	strcpy@from,c
  5447  0008FA  0EFF               	movlw	high STR_5
  5448  0008FC  6E14               	movwf	strcpy@from+1,c
  5449  0008FE  EC45  F011         	call	_strcpy	;wreg free
  5450                           
  5451                           ;Main_Screen.c: 53: drawtext(50 , 40 , txt, 0x001F , 0x0000, 1);
  5452  000902  0E28               	movlw	40
  5453  000904  6E39               	movwf	drawtext@y,c
  5454  000906  C04E  F03A         	movff	_txt,drawtext@_text
  5455  00090A  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  5456  00090E  0E00               	movlw	0
  5457  000910  6E3D               	movwf	drawtext@color+1,c
  5458  000912  0E1F               	movlw	31
  5459  000914  6E3C               	movwf	drawtext@color,c
  5460  000916  0E00               	movlw	0
  5461  000918  6E3F               	movwf	drawtext@bg+1,c
  5462  00091A  0E00               	movlw	0
  5463  00091C  6E3E               	movwf	drawtext@bg,c
  5464  00091E  0E01               	movlw	1
  5465  000920  6E40               	movwf	drawtext@size,c
  5466  000922  0E32               	movlw	50
  5467  000924  EC5C  F009         	call	_drawtext
  5468                           
  5469                           ;Main_Screen.c: 54: strcpy(txt, "Date");
  5470  000928  C04E  F011         	movff	_txt,strcpy@to
  5471  00092C  C04F  F012         	movff	_txt+1,strcpy@to+1
  5472  000930  0EE7               	movlw	low STR_6
  5473  000932  6E13               	movwf	strcpy@from,c
  5474  000934  0EFF               	movlw	high STR_6
  5475  000936  6E14               	movwf	strcpy@from+1,c
  5476  000938  EC45  F011         	call	_strcpy	;wreg free
  5477                           
  5478                           ;Main_Screen.c: 55: drawtext(50 , 71 , txt, 0xF800 , 0x0000, 1);
  5479  00093C  0E47               	movlw	71
  5480  00093E  6E39               	movwf	drawtext@y,c
  5481  000940  C04E  F03A         	movff	_txt,drawtext@_text
  5482  000944  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  5483  000948  0EF8               	movlw	248
  5484  00094A  6E3D               	movwf	drawtext@color+1,c
  5485  00094C  0E00               	movlw	0
  5486  00094E  6E3C               	movwf	drawtext@color,c
  5487  000950  0E00               	movlw	0
  5488  000952  6E3F               	movwf	drawtext@bg+1,c
  5489  000954  0E00               	movlw	0
  5490  000956  6E3E               	movwf	drawtext@bg,c
  5491  000958  0E01               	movlw	1
  5492  00095A  6E40               	movwf	drawtext@size,c
  5493  00095C  0E32               	movlw	50
  5494  00095E  EC5C  F009         	call	_drawtext
  5495                           
  5496                           ;Main_Screen.c: 58: strcpy(txt, "  FAN");
  5497  000962  C04E  F011         	movff	_txt,strcpy@to
  5498  000966  C04F  F012         	movff	_txt+1,strcpy@to+1
  5499  00096A  0EDC               	movlw	low STR_7
  5500  00096C  6E13               	movwf	strcpy@from,c
  5501  00096E  0EFF               	movlw	high STR_7
  5502  000970  6E14               	movwf	strcpy@from+1,c
  5503  000972  EC45  F011         	call	_strcpy	;wreg free
  5504                           
  5505                           ;Main_Screen.c: 59: drawtext(85, 120, txt, 0x001F , 0x0000, 1);
  5506  000976  0E78               	movlw	120
  5507  000978  6E39               	movwf	drawtext@y,c
  5508  00097A  C04E  F03A         	movff	_txt,drawtext@_text
  5509  00097E  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  5510  000982  0E00               	movlw	0
  5511  000984  6E3D               	movwf	drawtext@color+1,c
  5512  000986  0E1F               	movlw	31
  5513  000988  6E3C               	movwf	drawtext@color,c
  5514  00098A  0E00               	movlw	0
  5515  00098C  6E3F               	movwf	drawtext@bg+1,c
  5516  00098E  0E00               	movlw	0
  5517  000990  6E3E               	movwf	drawtext@bg,c
  5518  000992  0E01               	movlw	1
  5519  000994  6E40               	movwf	drawtext@size,c
  5520  000996  0E55               	movlw	85
  5521  000998  EC5C  F009         	call	_drawtext
  5522                           
  5523                           ;Main_Screen.c: 61: strcpy(txt, "DC");
  5524  00099C  C04E  F011         	movff	_txt,strcpy@to
  5525  0009A0  C04F  F012         	movff	_txt+1,strcpy@to+1
  5526  0009A4  0EFB               	movlw	low STR_8
  5527  0009A6  6E13               	movwf	strcpy@from,c
  5528  0009A8  0EFF               	movlw	high STR_8
  5529  0009AA  6E14               	movwf	strcpy@from+1,c
  5530  0009AC  EC45  F011         	call	_strcpy	;wreg free
  5531                           
  5532                           ;Main_Screen.c: 62: drawtext(12, 140, txt, 0xFFFF , 0x0000, 1);
  5533  0009B0  0E8C               	movlw	140
  5534  0009B2  6E39               	movwf	drawtext@y,c
  5535  0009B4  C04E  F03A         	movff	_txt,drawtext@_text
  5536  0009B8  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  5537  0009BC  0EFF               	movlw	255
  5538  0009BE  6E3D               	movwf	drawtext@color+1,c
  5539  0009C0  683C               	setf	drawtext@color,c
  5540  0009C2  0E00               	movlw	0
  5541  0009C4  6E3F               	movwf	drawtext@bg+1,c
  5542  0009C6  0E00               	movlw	0
  5543  0009C8  6E3E               	movwf	drawtext@bg,c
  5544  0009CA  0E01               	movlw	1
  5545  0009CC  6E40               	movwf	drawtext@size,c
  5546  0009CE  0E0C               	movlw	12
  5547  0009D0  EC5C  F009         	call	_drawtext
  5548                           
  5549                           ;Main_Screen.c: 64: strcpy(txt, "RPM");
  5550  0009D4  C04E  F011         	movff	_txt,strcpy@to
  5551  0009D8  C04F  F012         	movff	_txt+1,strcpy@to+1
  5552  0009DC  0EF4               	movlw	low STR_9
  5553  0009DE  6E13               	movwf	strcpy@from,c
  5554  0009E0  0EFF               	movlw	high STR_9
  5555  0009E2  6E14               	movwf	strcpy@from+1,c
  5556  0009E4  EC45  F011         	call	_strcpy	;wreg free
  5557                           
  5558                           ;Main_Screen.c: 65: drawtext(95, 140, txt, 0xFFFF , 0x0000 , 1);
  5559  0009E8  0E8C               	movlw	140
  5560  0009EA  6E39               	movwf	drawtext@y,c
  5561  0009EC  C04E  F03A         	movff	_txt,drawtext@_text
  5562  0009F0  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  5563  0009F4  0EFF               	movlw	255
  5564  0009F6  6E3D               	movwf	drawtext@color+1,c
  5565  0009F8  683C               	setf	drawtext@color,c
  5566  0009FA  0E00               	movlw	0
  5567  0009FC  6E3F               	movwf	drawtext@bg+1,c
  5568  0009FE  0E00               	movlw	0
  5569  000A00  6E3E               	movwf	drawtext@bg,c
  5570  000A02  0E01               	movlw	1
  5571  000A04  6E40               	movwf	drawtext@size,c
  5572  000A06  0E5F               	movlw	95
  5573  000A08  EC5C  F009         	call	_drawtext
  5574  000A0C  0012               	return		;funcret
  5575  000A0E                     __end_of_Initialize_Screen:
  5576                           	opt stack 0
  5577                           tblptru	equ	0xFF8
  5578                           tblptrh	equ	0xFF7
  5579                           tblptrl	equ	0xFF6
  5580                           tablat	equ	0xFF5
  5581                           prodh	equ	0xFF4
  5582                           prodl	equ	0xFF3
  5583                           intcon	equ	0xFF2
  5584                           intcon2	equ	0xFF1
  5585                           postinc0	equ	0xFEE
  5586                           wreg	equ	0xFE8
  5587                           postdec1	equ	0xFE5
  5588                           fsr1l	equ	0xFE1
  5589                           postinc2	equ	0xFDE
  5590                           postdec2	equ	0xFDD
  5591                           fsr2h	equ	0xFDA
  5592                           fsr2l	equ	0xFD9
  5593                           status	equ	0xFD8
  5594                           
  5595 ;; *************** function _strcpy *****************
  5596 ;; Defined at:
  5597 ;;		line 8 in file "E:\XC8\sources\common\strcpy.c"
  5598 ;; Parameters:    Size  Location     Type
  5599 ;;  to              2   16[COMRAM] PTR unsigned char 
  5600 ;;		 -> NULL(0), Fan_SW_Txt(4), buffer(31), 
  5601 ;;  from            2   18[COMRAM] PTR const unsigned char 
  5602 ;;		 -> STR_11(4), STR_10(4), STR_9(4), STR_8(3), 
  5603 ;;		 -> STR_7(6), STR_6(5), STR_5(5), STR_4(2), 
  5604 ;;		 -> STR_3(3), STR_2(13), STR_1(22), 
  5605 ;; Auto vars:     Size  Location     Type
  5606 ;;  cp              2   20[COMRAM] PTR unsigned char 
  5607 ;;		 -> NULL(0), Fan_SW_Txt(4), buffer(31), 
  5608 ;; Return value:  Size  Location     Type
  5609 ;;                  2   16[COMRAM] PTR unsigned char 
  5610 ;; Registers used:
  5611 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  5612 ;; Tracked objects:
  5613 ;;		On entry : 0/0
  5614 ;;		On exit  : 0/0
  5615 ;;		Unchanged: 0/0
  5616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5617 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5618 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5619 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5620 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5621 ;;Total ram usage:        6 bytes
  5622 ;; Hardware stack levels used:    1
  5623 ;; Hardware stack levels required when called:    3
  5624 ;; This function calls:
  5625 ;;		Nothing
  5626 ;; This function is called by:
  5627 ;;		_Initialize_Screen
  5628 ;;		_Update_Screen
  5629 ;; This function uses a non-reentrant model
  5630 ;;
  5631                           
  5632                           	psect	text16
  5633  00228A                     __ptext16:
  5634                           	opt stack 0
  5635  00228A                     _strcpy:
  5636                           	opt stack 26
  5637                           
  5638                           ;incstack = 0
  5639  00228A  C011  F015         	movff	strcpy@to,strcpy@cp
  5640  00228E  C012  F016         	movff	strcpy@to+1,strcpy@cp+1
  5641  002292  D005               	goto	l6096
  5642  002294                     l6094:
  5643  002294  4A15               	infsnz	strcpy@cp,f,c
  5644  002296  2A16               	incf	strcpy@cp+1,f,c
  5645  002298  4A13               	infsnz	strcpy@from,f,c
  5646  00229A  2A14               	incf	strcpy@from+1,f,c
  5647  00229C  D000               	goto	l6096
  5648  00229E                     l6096:
  5649  00229E  C013  FFF6         	movff	strcpy@from,tblptrl
  5650  0022A2  C014  FFF7         	movff	strcpy@from+1,tblptrh
  5651  0022A6                     	if	0	;tblptru may be non-zero
  5652  0022A6                     	endif
  5653  0022A6                     	if	0	;tblptru may be non-zero
  5654  0022A6                     	endif
  5655  0022A6  C015  FFD9         	movff	strcpy@cp,fsr2l
  5656  0022AA  C016  FFDA         	movff	strcpy@cp+1,fsr2h
  5657  0022AE  0008               	tblrd		*
  5658  0022B0  CFF5 FFDF          	movff	tablat,indf2
  5659  0022B4  50DF               	movf	indf2,w,c
  5660  0022B6  A4D8               	btfss	status,2,c
  5661  0022B8  D7ED               	goto	l6094
  5662                           
  5663                           ;	Return value of _strcpy is never used
  5664  0022BA  0012               	return		;funcret
  5665  0022BC                     __end_of_strcpy:
  5666                           	opt stack 0
  5667                           tblptru	equ	0xFF8
  5668                           tblptrh	equ	0xFF7
  5669                           tblptrl	equ	0xFF6
  5670                           tablat	equ	0xFF5
  5671                           prodh	equ	0xFF4
  5672                           prodl	equ	0xFF3
  5673                           intcon	equ	0xFF2
  5674                           intcon2	equ	0xFF1
  5675                           postinc0	equ	0xFEE
  5676                           wreg	equ	0xFE8
  5677                           postdec1	equ	0xFE5
  5678                           fsr1l	equ	0xFE1
  5679                           indf2	equ	0xFDF
  5680                           postinc2	equ	0xFDE
  5681                           postdec2	equ	0xFDD
  5682                           fsr2h	equ	0xFDA
  5683                           fsr2l	equ	0xFD9
  5684                           status	equ	0xFD8
  5685                           
  5686 ;; *************** function _fillScreen *****************
  5687 ;; Defined at:
  5688 ;;		line 620 in file "ST7735_TFT.c"
  5689 ;; Parameters:    Size  Location     Type
  5690 ;;  color           2   35[COMRAM] unsigned int 
  5691 ;; Auto vars:     Size  Location     Type
  5692 ;;		None
  5693 ;; Return value:  Size  Location     Type
  5694 ;;		None               void
  5695 ;; Registers used:
  5696 ;;		wreg, status,2, status,0, cstack
  5697 ;; Tracked objects:
  5698 ;;		On entry : 0/0
  5699 ;;		On exit  : 0/0
  5700 ;;		Unchanged: 0/0
  5701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5702 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5703 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5705 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5706 ;;Total ram usage:        2 bytes
  5707 ;; Hardware stack levels used:    1
  5708 ;; Hardware stack levels required when called:    7
  5709 ;; This function calls:
  5710 ;;		_fillRectangle
  5711 ;; This function is called by:
  5712 ;;		_Initialize_Screen
  5713 ;; This function uses a non-reentrant model
  5714 ;;
  5715                           
  5716                           	psect	text17
  5717  00242E                     __ptext17:
  5718                           	opt stack 0
  5719  00242E                     _fillScreen:
  5720                           	opt stack 22
  5721                           
  5722                           ;ST7735_TFT.c: 622: fillRectangle(0, 0, 128, 160, color);
  5723                           
  5724                           ;incstack = 0
  5725  00242E  0E00               	movlw	0
  5726  002430  6E18               	movwf	fillRectangle@y,c
  5727  002432  0E80               	movlw	128
  5728  002434  6E19               	movwf	fillRectangle@w,c
  5729  002436  0EA0               	movlw	160
  5730  002438  6E1A               	movwf	fillRectangle@h,c
  5731  00243A  C024  F01B         	movff	fillScreen@color,fillRectangle@color
  5732  00243E  C025  F01C         	movff	fillScreen@color+1,fillRectangle@color+1
  5733  002442  0E00               	movlw	0
  5734  002444  ECBA  F00B         	call	_fillRectangle
  5735  002448  0012               	return		;funcret
  5736  00244A                     __end_of_fillScreen:
  5737                           	opt stack 0
  5738                           tblptru	equ	0xFF8
  5739                           tblptrh	equ	0xFF7
  5740                           tblptrl	equ	0xFF6
  5741                           tablat	equ	0xFF5
  5742                           prodh	equ	0xFF4
  5743                           prodl	equ	0xFF3
  5744                           intcon	equ	0xFF2
  5745                           intcon2	equ	0xFF1
  5746                           postinc0	equ	0xFEE
  5747                           wreg	equ	0xFE8
  5748                           postdec1	equ	0xFE5
  5749                           fsr1l	equ	0xFE1
  5750                           indf2	equ	0xFDF
  5751                           postinc2	equ	0xFDE
  5752                           postdec2	equ	0xFDD
  5753                           fsr2h	equ	0xFDA
  5754                           fsr2l	equ	0xFD9
  5755                           status	equ	0xFD8
  5756                           
  5757 ;; *************** function _fillRectangle *****************
  5758 ;; Defined at:
  5759 ;;		line 504 in file "ST7735_TFT.c"
  5760 ;; Parameters:    Size  Location     Type
  5761 ;;  x               1    wreg     unsigned char 
  5762 ;;  y               1   23[COMRAM] unsigned char 
  5763 ;;  w               1   24[COMRAM] unsigned char 
  5764 ;;  h               1   25[COMRAM] unsigned char 
  5765 ;;  color           2   26[COMRAM] unsigned int 
  5766 ;; Auto vars:     Size  Location     Type
  5767 ;;  x               1   34[COMRAM] unsigned char 
  5768 ;;  lo              1   33[COMRAM] unsigned char 
  5769 ;;  hi              1   32[COMRAM] unsigned char 
  5770 ;; Return value:  Size  Location     Type
  5771 ;;		None               void
  5772 ;; Registers used:
  5773 ;;		wreg, status,2, status,0, cstack
  5774 ;; Tracked objects:
  5775 ;;		On entry : 0/0
  5776 ;;		On exit  : 0/0
  5777 ;;		Unchanged: 0/0
  5778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5779 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5780 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5781 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5782 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5783 ;;Total ram usage:       12 bytes
  5784 ;; Hardware stack levels used:    1
  5785 ;; Hardware stack levels required when called:    6
  5786 ;; This function calls:
  5787 ;;		_setAddrWindow
  5788 ;;		_spiwrite
  5789 ;; This function is called by:
  5790 ;;		_fillScreen
  5791 ;; This function uses a non-reentrant model
  5792 ;;
  5793                           
  5794                           	psect	text18
  5795  001774                     __ptext18:
  5796                           	opt stack 0
  5797  001774                     _fillRectangle:
  5798                           	opt stack 22
  5799                           
  5800                           ;incstack = 0
  5801                           ;fillRectangle@x stored from wreg
  5802  001774  6E23               	movwf	fillRectangle@x,c
  5803                           
  5804                           ;ST7735_TFT.c: 506: unsigned char hi, lo;
  5805                           ;ST7735_TFT.c: 507: if((x >= 128) || (y >= 160))
  5806  001776  0E80               	movlw	128
  5807  001778  6023               	cpfslt	fillRectangle@x,c
  5808  00177A  D069               	goto	l404
  5809  00177C  0E9F               	movlw	159
  5810  00177E  6418               	cpfsgt	fillRectangle@y,c
  5811  001780  D001               	goto	l5806
  5812                           
  5813                           ;ST7735_TFT.c: 508: return;
  5814  001782  D065               	goto	l404
  5815  001784                     l5806:
  5816                           
  5817                           ;ST7735_TFT.c: 509: if((x + w - 1) >= 128)
  5818  001784  0EFF               	movlw	255
  5819  001786  6E1D               	movwf	??_fillRectangle& (0+255),c
  5820  001788  0EFF               	movlw	255
  5821  00178A  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  5822  00178C  5019               	movf	fillRectangle@w,w,c
  5823  00178E  C023  F01F         	movff	fillRectangle@x,??_fillRectangle+2
  5824  001792  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  5825  001794  261F               	addwf	??_fillRectangle+2,f,c
  5826  001796  0E00               	movlw	0
  5827  001798  2220               	addwfc	??_fillRectangle+3,f,c
  5828  00179A  501D               	movf	??_fillRectangle,w,c
  5829  00179C  261F               	addwf	??_fillRectangle+2,f,c
  5830  00179E  501E               	movf	??_fillRectangle+1,w,c
  5831  0017A0  2220               	addwfc	??_fillRectangle+3,f,c
  5832  0017A2  BE20               	btfsc	??_fillRectangle+3,7,c
  5833  0017A4  D00A               	goto	l405
  5834  0017A6  5020               	movf	??_fillRectangle+3,w,c
  5835  0017A8  E104               	bnz	u4630
  5836  0017AA  0E80               	movlw	128
  5837  0017AC  5C1F               	subwf	??_fillRectangle+2,w,c
  5838  0017AE  A0D8               	btfss	status,0,c
  5839  0017B0  D004               	goto	l405
  5840  0017B2                     u4630:
  5841                           
  5842                           ;ST7735_TFT.c: 510: w = 128 - x;
  5843  0017B2  5023               	movf	fillRectangle@x,w,c
  5844  0017B4  0800               	sublw	0
  5845  0017B6  0F80               	addlw	128
  5846  0017B8  6E19               	movwf	fillRectangle@w,c
  5847  0017BA                     l405:
  5848                           
  5849                           ;ST7735_TFT.c: 511: if((y + h - 1) >= 160)
  5850  0017BA  0EFF               	movlw	255
  5851  0017BC  6E1D               	movwf	??_fillRectangle& (0+255),c
  5852  0017BE  0EFF               	movlw	255
  5853  0017C0  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  5854  0017C2  501A               	movf	fillRectangle@h,w,c
  5855  0017C4  C018  F01F         	movff	fillRectangle@y,??_fillRectangle+2
  5856  0017C8  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  5857  0017CA  261F               	addwf	??_fillRectangle+2,f,c
  5858  0017CC  0E00               	movlw	0
  5859  0017CE  2220               	addwfc	??_fillRectangle+3,f,c
  5860  0017D0  501D               	movf	??_fillRectangle,w,c
  5861  0017D2  261F               	addwf	??_fillRectangle+2,f,c
  5862  0017D4  501E               	movf	??_fillRectangle+1,w,c
  5863  0017D6  2220               	addwfc	??_fillRectangle+3,f,c
  5864  0017D8  BE20               	btfsc	??_fillRectangle+3,7,c
  5865  0017DA  D00B               	goto	l5812
  5866  0017DC  5020               	movf	??_fillRectangle+3,w,c
  5867  0017DE  E104               	bnz	u4640
  5868  0017E0  0EA0               	movlw	160
  5869  0017E2  5C1F               	subwf	??_fillRectangle+2,w,c
  5870  0017E4  A0D8               	btfss	status,0,c
  5871  0017E6  D005               	goto	l5812
  5872  0017E8                     u4640:
  5873                           
  5874                           ;ST7735_TFT.c: 512: h = 160 - y;
  5875  0017E8  5018               	movf	fillRectangle@y,w,c
  5876  0017EA  0800               	sublw	0
  5877  0017EC  0FA0               	addlw	160
  5878  0017EE  6E1A               	movwf	fillRectangle@h,c
  5879  0017F0  D000               	goto	l5812
  5880  0017F2                     l5812:
  5881                           
  5882                           ;ST7735_TFT.c: 513: setAddrWindow(x, y, x+w-1, y+h-1);
  5883  0017F2  C018  F014         	movff	fillRectangle@y,setAddrWindow@y0
  5884  0017F6  5023               	movf	fillRectangle@x,w,c
  5885  0017F8  2419               	addwf	fillRectangle@w,w,c
  5886  0017FA  6E1D               	movwf	??_fillRectangle& (0+255),c
  5887  0017FC  041D               	decf	??_fillRectangle,w,c
  5888  0017FE  6E15               	movwf	setAddrWindow@x1,c
  5889  001800  5018               	movf	fillRectangle@y,w,c
  5890  001802  241A               	addwf	fillRectangle@h,w,c
  5891  001804  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  5892  001806  041E               	decf	??_fillRectangle+1,w,c
  5893  001808  6E16               	movwf	setAddrWindow@y1,c
  5894  00180A  5023               	movf	fillRectangle@x,w,c
  5895  00180C  ECD5  F00F         	call	_setAddrWindow
  5896                           
  5897                           ;ST7735_TFT.c: 514: hi = color >> 8; lo = color;
  5898  001810  501C               	movf	fillRectangle@color+1,w,c
  5899  001812  6E21               	movwf	fillRectangle@hi,c
  5900  001814  C01B  F022         	movff	fillRectangle@color,fillRectangle@lo
  5901                           
  5902                           ;ST7735_TFT.c: 515: PORTDbits.RD0 = 1;
  5903  001818  8083               	bsf	3971,0,c	;volatile
  5904                           
  5905                           ;ST7735_TFT.c: 516: PORTDbits.RD1 = 0;
  5906  00181A  9283               	bcf	3971,1,c	;volatile
  5907                           
  5908                           ;ST7735_TFT.c: 518: for(y=h; y>0; y--) {
  5909  00181C  C01A  F018         	movff	fillRectangle@h,fillRectangle@y
  5910  001820                     l5824:
  5911  001820  5018               	movf	fillRectangle@y,w,c
  5912  001822  B4D8               	btfsc	status,2,c
  5913  001824  D013               	goto	l408
  5914  001826  D001               	goto	l407
  5915  001828  D011               	goto	l408
  5916  00182A                     l407:
  5917                           
  5918                           ;ST7735_TFT.c: 519: for(x = w; x > 0; x--) {
  5919  00182A  C019  F023         	movff	fillRectangle@w,fillRectangle@x
  5920  00182E                     l5828:
  5921  00182E  5023               	movf	fillRectangle@x,w,c
  5922  001830  B4D8               	btfsc	status,2,c
  5923  001832  D00A               	goto	l5838
  5924  001834  D001               	goto	l5832
  5925  001836  D008               	goto	l5838
  5926  001838                     l5832:
  5927                           
  5928                           ;ST7735_TFT.c: 520: spiwrite(hi);
  5929  001838  5021               	movf	fillRectangle@hi,w,c
  5930  00183A  EC47  F012         	call	_spiwrite
  5931                           
  5932                           ;ST7735_TFT.c: 521: spiwrite(lo);
  5933  00183E  5022               	movf	fillRectangle@lo,w,c
  5934  001840  EC47  F012         	call	_spiwrite
  5935  001844  0623               	decf	fillRectangle@x,f,c
  5936  001846  D7F3               	goto	l5828
  5937  001848                     l5838:
  5938  001848  0618               	decf	fillRectangle@y,f,c
  5939  00184A  D7EA               	goto	l5824
  5940  00184C                     l408:
  5941                           
  5942                           ;ST7735_TFT.c: 522: }
  5943                           ;ST7735_TFT.c: 523: }
  5944                           ;ST7735_TFT.c: 524: PORTDbits.RD1 = 1;
  5945  00184C  8283               	bsf	3971,1,c	;volatile
  5946  00184E                     l404:
  5947  00184E  0012               	return		;funcret
  5948  001850                     __end_of_fillRectangle:
  5949                           	opt stack 0
  5950                           tblptru	equ	0xFF8
  5951                           tblptrh	equ	0xFF7
  5952                           tblptrl	equ	0xFF6
  5953                           tablat	equ	0xFF5
  5954                           prodh	equ	0xFF4
  5955                           prodl	equ	0xFF3
  5956                           intcon	equ	0xFF2
  5957                           intcon2	equ	0xFF1
  5958                           postinc0	equ	0xFEE
  5959                           wreg	equ	0xFE8
  5960                           postdec1	equ	0xFE5
  5961                           fsr1l	equ	0xFE1
  5962                           indf2	equ	0xFDF
  5963                           postinc2	equ	0xFDE
  5964                           postdec2	equ	0xFDD
  5965                           fsr2h	equ	0xFDA
  5966                           fsr2l	equ	0xFD9
  5967                           status	equ	0xFD8
  5968                           
  5969 ;; *************** function _drawtext *****************
  5970 ;; Defined at:
  5971 ;;		line 475 in file "ST7735_TFT.c"
  5972 ;; Parameters:    Size  Location     Type
  5973 ;;  x               1    wreg     unsigned char 
  5974 ;;  y               1   56[COMRAM] unsigned char 
  5975 ;;  _text           2   57[COMRAM] PTR unsigned char 
  5976 ;;		 -> NULL(0), RPM_Txt(5), DC_Txt(4), Fan_SW_Txt(4), 
  5977 ;;		 -> date(9), time(9), tempF(4), tempC(4), 
  5978 ;;		 -> buffer(31), 
  5979 ;;  color           2   59[COMRAM] unsigned int 
  5980 ;;  bg              2   61[COMRAM] unsigned int 
  5981 ;;  size            1   63[COMRAM] unsigned char 
  5982 ;; Auto vars:     Size  Location     Type
  5983 ;;  x               1    0[BANK0 ] unsigned char 
  5984 ;;  i               2    3[BANK0 ] unsigned int 
  5985 ;;  textsize        2    1[BANK0 ] unsigned int 
  5986 ;;  cursor_x        1    6[BANK0 ] unsigned char 
  5987 ;;  cursor_y        1    5[BANK0 ] unsigned char 
  5988 ;; Return value:  Size  Location     Type
  5989 ;;		None               void
  5990 ;; Registers used:
  5991 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5992 ;; Tracked objects:
  5993 ;;		On entry : 0/0
  5994 ;;		On exit  : 0/0
  5995 ;;		Unchanged: 0/0
  5996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5997 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5998 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5999 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6000 ;;      Totals:        10       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6001 ;;Total ram usage:       17 bytes
  6002 ;; Hardware stack levels used:    1
  6003 ;; Hardware stack levels required when called:    9
  6004 ;; This function calls:
  6005 ;;		_drawChar
  6006 ;;		_strlen
  6007 ;; This function is called by:
  6008 ;;		_Initialize_Screen
  6009 ;;		_Update_Screen
  6010 ;; This function uses a non-reentrant model
  6011 ;;
  6012                           
  6013                           	psect	text19
  6014  0012B8                     __ptext19:
  6015                           	opt stack 0
  6016  0012B8                     _drawtext:
  6017                           	opt stack 20
  6018                           
  6019                           ;incstack = 0
  6020                           ;drawtext@x stored from wreg
  6021  0012B8  0100               	movlb	0	; () banked
  6022  0012BA  6FF3               	movwf	drawtext@x& (0+255),b
  6023                           
  6024                           ; BSR set to: 0
  6025                           ;ST7735_TFT.c: 477: unsigned char cursor_x, cursor_y;
  6026                           ;ST7735_TFT.c: 478: unsigned int textsize, i;
  6027                           ;ST7735_TFT.c: 479: cursor_x = x, cursor_y = y;
  6028  0012BC  C0F3  F0F9         	movff	drawtext@x,drawtext@cursor_x
  6029                           
  6030                           ; BSR set to: 0
  6031  0012C0  C039  F0F8         	movff	drawtext@y,drawtext@cursor_y
  6032                           
  6033                           ; BSR set to: 0
  6034                           ;ST7735_TFT.c: 480: textsize = strlen(_text);
  6035  0012C4  C03A  F011         	movff	drawtext@_text,strlen@s
  6036  0012C8  C03B  F012         	movff	drawtext@_text+1,strlen@s+1
  6037  0012CC  ECB0  F010         	call	_strlen	;wreg free
  6038  0012D0  C011  F0F4         	movff	?_strlen,drawtext@textsize
  6039  0012D4  C012  F0F5         	movff	?_strlen+1,drawtext@textsize+1
  6040                           
  6041                           ;ST7735_TFT.c: 481: for(i = 0; i < textsize; i++){
  6042  0012D8  0E00               	movlw	0
  6043  0012DA  0100               	movlb	0	; () banked
  6044  0012DC  6FF7               	movwf	(drawtext@i+1)& (0+255),b
  6045  0012DE  0E00               	movlw	0
  6046  0012E0  6FF6               	movwf	drawtext@i& (0+255),b
  6047  0012E2  D064               	goto	l6024
  6048  0012E4                     l5998:
  6049                           
  6050                           ; BSR set to: 0
  6051                           ;ST7735_TFT.c: 482: if(wrap && ((cursor_x + size * 5) > 128)){
  6052  0012E4  506F               	movf	_wrap,w,c
  6053  0012E6  B4D8               	btfsc	status,2,c
  6054  0012E8  D034               	goto	l6014
  6055                           
  6056                           ; BSR set to: 0
  6057  0012EA  5040               	movf	drawtext@size,w,c
  6058  0012EC  0D05               	mullw	5
  6059  0012EE  0100               	movlb	0	; () banked
  6060  0012F0  51F9               	movf	drawtext@cursor_x& (0+255),w,b
  6061  0012F2  6E41               	movwf	??_drawtext& (0+255),c
  6062  0012F4  6A42               	clrf	(??_drawtext+1)& (0+255),c
  6063  0012F6  50F3               	movf	prodl,w,c
  6064  0012F8  2641               	addwf	??_drawtext,f,c
  6065  0012FA  50F4               	movf	prodh,w,c
  6066  0012FC  2242               	addwfc	??_drawtext+1,f,c
  6067  0012FE  BE42               	btfsc	??_drawtext+1,7,c
  6068  001300  D028               	goto	l6014
  6069  001302  5042               	movf	??_drawtext+1,w,c
  6070  001304  E104               	bnz	u4870
  6071  001306  0E81               	movlw	129
  6072  001308  5C41               	subwf	??_drawtext,w,c
  6073  00130A  A0D8               	btfss	status,0,c
  6074  00130C  D022               	goto	l6014
  6075  00130E                     u4870:
  6076                           
  6077                           ; BSR set to: 0
  6078                           ;ST7735_TFT.c: 483: cursor_x = 0;
  6079  00130E  0E00               	movlw	0
  6080  001310  0100               	movlb	0	; () banked
  6081  001312  6FF9               	movwf	drawtext@cursor_x& (0+255),b
  6082                           
  6083                           ; BSR set to: 0
  6084                           ;ST7735_TFT.c: 484: cursor_y = cursor_y + size * 7 + 3 ;
  6085  001314  5040               	movf	drawtext@size,w,c
  6086  001316  0D07               	mullw	7
  6087  001318  50F3               	movf	prodl,w,c
  6088  00131A  0100               	movlb	0	; () banked
  6089  00131C  25F8               	addwf	drawtext@cursor_y& (0+255),w,b
  6090  00131E  0F03               	addlw	3
  6091  001320  0100               	movlb	0	; () banked
  6092  001322  6FF8               	movwf	drawtext@cursor_y& (0+255),b
  6093                           
  6094                           ; BSR set to: 0
  6095                           ;ST7735_TFT.c: 485: if(cursor_y > 160) cursor_y = 160;
  6096  001324  0EA0               	movlw	160
  6097  001326  0100               	movlb	0	; () banked
  6098  001328  65F8               	cpfsgt	drawtext@cursor_y& (0+255),b
  6099  00132A  D004               	goto	l6010
  6100                           
  6101                           ; BSR set to: 0
  6102  00132C  0EA0               	movlw	160
  6103  00132E  0100               	movlb	0	; () banked
  6104  001330  6FF8               	movwf	drawtext@cursor_y& (0+255),b
  6105  001332  D000               	goto	l6010
  6106  001334                     l6010:
  6107                           
  6108                           ; BSR set to: 0
  6109                           ;ST7735_TFT.c: 486: if(_text[i] == 0x20) goto _skip; }
  6110  001334  0100               	movlb	0	; () banked
  6111  001336  51F6               	movf	drawtext@i& (0+255),w,b
  6112  001338  243A               	addwf	drawtext@_text,w,c
  6113  00133A  6ED9               	movwf	fsr2l,c
  6114  00133C  0100               	movlb	0	; () banked
  6115  00133E  51F7               	movf	(drawtext@i+1)& (0+255),w,b
  6116  001340  203B               	addwfc	drawtext@_text+1,w,c
  6117  001342  6EDA               	movwf	fsr2h,c
  6118  001344  0E20               	movlw	32
  6119  001346  18DE               	xorwf	postinc2,w,c
  6120  001348  B4D8               	btfsc	status,2,c
  6121  00134A  D02C               	goto	l6022
  6122  00134C  D002               	goto	l6014
  6123                           
  6124                           ; BSR set to: 0
  6125  00134E  D02A               	goto	l6022
  6126                           
  6127                           ; BSR set to: 0
  6128  001350  D000               	goto	l6014
  6129  001352                     l6014:
  6130                           
  6131                           ; BSR set to: 0
  6132                           ;ST7735_TFT.c: 487: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
  6133  001352  C0F8  F02E         	movff	drawtext@cursor_y,drawChar@y
  6134  001356  0100               	movlb	0	; () banked
  6135  001358  51F6               	movf	drawtext@i& (0+255),w,b
  6136  00135A  243A               	addwf	drawtext@_text,w,c
  6137  00135C  6ED9               	movwf	fsr2l,c
  6138  00135E  0100               	movlb	0	; () banked
  6139  001360  51F7               	movf	(drawtext@i+1)& (0+255),w,b
  6140  001362  203B               	addwfc	drawtext@_text+1,w,c
  6141  001364  6EDA               	movwf	fsr2h,c
  6142  001366  50DF               	movf	indf2,w,c
  6143  001368  6E2F               	movwf	drawChar@c,c
  6144  00136A  C03C  F030         	movff	drawtext@color,drawChar@color
  6145  00136E  C03D  F031         	movff	drawtext@color+1,drawChar@color+1
  6146  001372  C03E  F032         	movff	drawtext@bg,drawChar@bg
  6147  001376  C03F  F033         	movff	drawtext@bg+1,drawChar@bg+1
  6148  00137A  C040  F034         	movff	drawtext@size,drawChar@size
  6149  00137E  0100               	movlb	0	; () banked
  6150  001380  51F9               	movf	drawtext@cursor_x& (0+255),w,b
  6151  001382  EC9D  F007         	call	_drawChar
  6152                           
  6153                           ;ST7735_TFT.c: 488: cursor_x = cursor_x + size * 6;
  6154  001386  5040               	movf	drawtext@size,w,c
  6155  001388  0D06               	mullw	6
  6156  00138A  50F3               	movf	prodl,w,c
  6157  00138C  0100               	movlb	0	; () banked
  6158  00138E  25F9               	addwf	drawtext@cursor_x& (0+255),w,b
  6159  001390  0100               	movlb	0	; () banked
  6160  001392  6FF9               	movwf	drawtext@cursor_x& (0+255),b
  6161                           
  6162                           ; BSR set to: 0
  6163                           ;ST7735_TFT.c: 489: if(cursor_x > 128) cursor_x = 128;
  6164  001394  0E80               	movlw	128
  6165  001396  0100               	movlb	0	; () banked
  6166  001398  65F9               	cpfsgt	drawtext@cursor_x& (0+255),b
  6167  00139A  D004               	goto	l6022
  6168                           
  6169                           ; BSR set to: 0
  6170  00139C  0E80               	movlw	128
  6171  00139E  0100               	movlb	0	; () banked
  6172  0013A0  6FF9               	movwf	drawtext@cursor_x& (0+255),b
  6173                           
  6174                           ; BSR set to: 0
  6175  0013A2  D000               	goto	l6022
  6176  0013A4                     l6022:
  6177                           
  6178                           ; BSR set to: 0
  6179  0013A4  0100               	movlb	0	; () banked
  6180  0013A6  4BF6               	infsnz	drawtext@i& (0+255),f,b
  6181  0013A8  2BF7               	incf	(drawtext@i+1)& (0+255),f,b
  6182  0013AA  D000               	goto	l6024
  6183  0013AC                     l6024:
  6184                           
  6185                           ; BSR set to: 0
  6186  0013AC  0100               	movlb	0	; () banked
  6187  0013AE  51F4               	movf	drawtext@textsize& (0+255),w,b
  6188  0013B0  0100               	movlb	0	; () banked
  6189  0013B2  5DF6               	subwf	drawtext@i& (0+255),w,b
  6190  0013B4  0100               	movlb	0	; () banked
  6191  0013B6  51F5               	movf	(drawtext@textsize+1)& (0+255),w,b
  6192  0013B8  0100               	movlb	0	; () banked
  6193  0013BA  59F7               	subwfb	(drawtext@i+1)& (0+255),w,b
  6194  0013BC  A0D8               	btfss	status,0,c
  6195  0013BE  D792               	goto	l5998
  6196                           
  6197                           ; BSR set to: 0
  6198                           
  6199                           ; BSR set to: 0
  6200  0013C0  0012               	return		;funcret
  6201  0013C2                     __end_of_drawtext:
  6202                           	opt stack 0
  6203                           tblptru	equ	0xFF8
  6204                           tblptrh	equ	0xFF7
  6205                           tblptrl	equ	0xFF6
  6206                           tablat	equ	0xFF5
  6207                           prodh	equ	0xFF4
  6208                           prodl	equ	0xFF3
  6209                           intcon	equ	0xFF2
  6210                           intcon2	equ	0xFF1
  6211                           postinc0	equ	0xFEE
  6212                           wreg	equ	0xFE8
  6213                           postdec1	equ	0xFE5
  6214                           fsr1l	equ	0xFE1
  6215                           indf2	equ	0xFDF
  6216                           postinc2	equ	0xFDE
  6217                           postdec2	equ	0xFDD
  6218                           fsr2h	equ	0xFDA
  6219                           fsr2l	equ	0xFD9
  6220                           status	equ	0xFD8
  6221                           
  6222 ;; *************** function _strlen *****************
  6223 ;; Defined at:
  6224 ;;		line 4 in file "E:\XC8\sources\common\strlen.c"
  6225 ;; Parameters:    Size  Location     Type
  6226 ;;  s               2   16[COMRAM] PTR const unsigned char 
  6227 ;;		 -> NULL(0), RPM_Txt(5), DC_Txt(4), Fan_SW_Txt(4), 
  6228 ;;		 -> date(9), time(9), tempF(4), tempC(4), 
  6229 ;;		 -> buffer(31), 
  6230 ;; Auto vars:     Size  Location     Type
  6231 ;;  cp              2   20[COMRAM] PTR const unsigned char 
  6232 ;;		 -> NULL(0), RPM_Txt(5), DC_Txt(4), Fan_SW_Txt(4), 
  6233 ;;		 -> date(9), time(9), tempF(4), tempC(4), 
  6234 ;;		 -> buffer(31), 
  6235 ;; Return value:  Size  Location     Type
  6236 ;;                  2   16[COMRAM] unsigned int 
  6237 ;; Registers used:
  6238 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6239 ;; Tracked objects:
  6240 ;;		On entry : 0/0
  6241 ;;		On exit  : 0/0
  6242 ;;		Unchanged: 0/0
  6243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6244 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6245 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6246 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6247 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6248 ;;Total ram usage:        6 bytes
  6249 ;; Hardware stack levels used:    1
  6250 ;; Hardware stack levels required when called:    3
  6251 ;; This function calls:
  6252 ;;		Nothing
  6253 ;; This function is called by:
  6254 ;;		_drawtext
  6255 ;; This function uses a non-reentrant model
  6256 ;;
  6257                           
  6258                           	psect	text20
  6259  002160                     __ptext20:
  6260                           	opt stack 0
  6261  002160                     _strlen:
  6262                           	opt stack 25
  6263                           
  6264                           ; BSR set to: 0
  6265                           ;incstack = 0
  6266  002160  C011  F015         	movff	strlen@s,strlen@cp
  6267  002164  C012  F016         	movff	strlen@s+1,strlen@cp+1
  6268  002168  D003               	goto	l5796
  6269  00216A                     l5794:
  6270  00216A  4A15               	infsnz	strlen@cp,f,c
  6271  00216C  2A16               	incf	strlen@cp+1,f,c
  6272  00216E  D000               	goto	l5796
  6273  002170                     l5796:
  6274  002170  C015  FFD9         	movff	strlen@cp,fsr2l
  6275  002174  C016  FFDA         	movff	strlen@cp+1,fsr2h
  6276  002178  50DF               	movf	indf2,w,c
  6277  00217A  A4D8               	btfss	status,2,c
  6278  00217C  D7F6               	goto	l5794
  6279  00217E  C011  F013         	movff	strlen@s,??_strlen
  6280  002182  C012  F014         	movff	strlen@s+1,??_strlen+1
  6281  002186  1E13               	comf	??_strlen,f,c
  6282  002188  1E14               	comf	??_strlen+1,f,c
  6283  00218A  4A13               	infsnz	??_strlen,f,c
  6284  00218C  2A14               	incf	??_strlen+1,f,c
  6285  00218E  5015               	movf	strlen@cp,w,c
  6286  002190  2413               	addwf	??_strlen,w,c
  6287  002192  6E11               	movwf	?_strlen,c
  6288  002194  5016               	movf	strlen@cp+1,w,c
  6289  002196  2014               	addwfc	??_strlen+1,w,c
  6290  002198  6E12               	movwf	?_strlen+1,c
  6291  00219A  D000               	goto	l1356
  6292  00219C                     l1356:
  6293  00219C  0012               	return		;funcret
  6294  00219E                     __end_of_strlen:
  6295                           	opt stack 0
  6296                           tblptru	equ	0xFF8
  6297                           tblptrh	equ	0xFF7
  6298                           tblptrl	equ	0xFF6
  6299                           tablat	equ	0xFF5
  6300                           prodh	equ	0xFF4
  6301                           prodl	equ	0xFF3
  6302                           intcon	equ	0xFF2
  6303                           intcon2	equ	0xFF1
  6304                           postinc0	equ	0xFEE
  6305                           wreg	equ	0xFE8
  6306                           postdec1	equ	0xFE5
  6307                           fsr1l	equ	0xFE1
  6308                           indf2	equ	0xFDF
  6309                           postinc2	equ	0xFDE
  6310                           postdec2	equ	0xFDD
  6311                           fsr2h	equ	0xFDA
  6312                           fsr2l	equ	0xFD9
  6313                           status	equ	0xFD8
  6314                           
  6315 ;; *************** function _drawChar *****************
  6316 ;; Defined at:
  6317 ;;		line 448 in file "ST7735_TFT.c"
  6318 ;; Parameters:    Size  Location     Type
  6319 ;;  x               1    wreg     unsigned char 
  6320 ;;  y               1   45[COMRAM] unsigned char 
  6321 ;;  c               1   46[COMRAM] unsigned char 
  6322 ;;  color           2   47[COMRAM] unsigned int 
  6323 ;;  bg              2   49[COMRAM] unsigned int 
  6324 ;;  size            1   51[COMRAM] unsigned char 
  6325 ;; Auto vars:     Size  Location     Type
  6326 ;;  x               1   53[COMRAM] unsigned char 
  6327 ;;  line            1   52[COMRAM] unsigned char 
  6328 ;;  i               1   55[COMRAM] unsigned char 
  6329 ;;  j               1   54[COMRAM] unsigned char 
  6330 ;; Return value:  Size  Location     Type
  6331 ;;		None               void
  6332 ;; Registers used:
  6333 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6334 ;; Tracked objects:
  6335 ;;		On entry : 0/0
  6336 ;;		On exit  : 0/0
  6337 ;;		Unchanged: 0/0
  6338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6339 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6340 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6341 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6342 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6343 ;;Total ram usage:       11 bytes
  6344 ;; Hardware stack levels used:    1
  6345 ;; Hardware stack levels required when called:    8
  6346 ;; This function calls:
  6347 ;;		___wmul
  6348 ;;		_drawPixel
  6349 ;;		_fillRect
  6350 ;; This function is called by:
  6351 ;;		_drawtext
  6352 ;; This function uses a non-reentrant model
  6353 ;;
  6354                           
  6355                           	psect	text21
  6356  000F3A                     __ptext21:
  6357                           	opt stack 0
  6358  000F3A                     _drawChar:
  6359                           	opt stack 20
  6360                           
  6361                           ;incstack = 0
  6362                           ;drawChar@x stored from wreg
  6363  000F3A  6E36               	movwf	drawChar@x,c
  6364                           
  6365                           ;ST7735_TFT.c: 450: char i, j;
  6366                           ;ST7735_TFT.c: 451: if((x >= 128) || (y >= 160))
  6367  000F3C  0E80               	movlw	128
  6368  000F3E  6036               	cpfslt	drawChar@x,c
  6369  000F40  D0A6               	goto	l367
  6370  000F42  0E9F               	movlw	159
  6371  000F44  642E               	cpfsgt	drawChar@y,c
  6372  000F46  D001               	goto	l5742
  6373                           
  6374                           ;ST7735_TFT.c: 452: return;
  6375  000F48  D0A2               	goto	l367
  6376  000F4A                     l5742:
  6377                           
  6378                           ;ST7735_TFT.c: 453: if(size < 1) size = 1;
  6379  000F4A  5034               	movf	drawChar@size,w,c
  6380  000F4C  A4D8               	btfss	status,2,c
  6381  000F4E  D003               	goto	l5746
  6382  000F50  0E01               	movlw	1
  6383  000F52  6E34               	movwf	drawChar@size,c
  6384  000F54  D000               	goto	l5746
  6385  000F56                     l5746:
  6386                           
  6387                           ;ST7735_TFT.c: 454: if((c < ' ') || (c > '~'))
  6388  000F56  0E1F               	movlw	31
  6389  000F58  642F               	cpfsgt	drawChar@c,c
  6390  000F5A  D004               	goto	l5750
  6391  000F5C  0E7E               	movlw	126
  6392  000F5E  642F               	cpfsgt	drawChar@c,c
  6393  000F60  D003               	goto	l369
  6394  000F62  D000               	goto	l5750
  6395  000F64                     l5750:
  6396                           
  6397                           ;ST7735_TFT.c: 455: c = '?';
  6398  000F64  0E3F               	movlw	63
  6399  000F66  6E2F               	movwf	drawChar@c,c
  6400  000F68                     l369:
  6401                           
  6402                           ;ST7735_TFT.c: 456: for(i=0; i<5; i++ ) {
  6403  000F68  0E00               	movlw	0
  6404  000F6A  6E38               	movwf	drawChar@i,c
  6405  000F6C                     l5752:
  6406  000F6C  0E04               	movlw	4
  6407  000F6E  6438               	cpfsgt	drawChar@i,c
  6408  000F70  D001               	goto	l5756
  6409  000F72  D08D               	goto	l367
  6410  000F74                     l5756:
  6411                           
  6412                           ;ST7735_TFT.c: 457: unsigned char line;
  6413                           ;ST7735_TFT.c: 458: if(c < 'S')
  6414  000F74  0E53               	movlw	83
  6415  000F76  602F               	cpfslt	drawChar@c,c
  6416  000F78  D015               	goto	l5760
  6417                           
  6418                           ;ST7735_TFT.c: 459: line = font[(c - 32)*5 + i];
  6419  000F7A  0EE0               	movlw	224
  6420  000F7C  242F               	addwf	drawChar@c,w,c
  6421  000F7E  6E11               	movwf	___wmul@multiplier,c
  6422  000F80  6A12               	clrf	___wmul@multiplier+1,c
  6423  000F82  0EFF               	movlw	255
  6424  000F84  2212               	addwfc	___wmul@multiplier+1,f,c
  6425  000F86  0E00               	movlw	0
  6426  000F88  6E14               	movwf	___wmul@multiplicand+1,c
  6427  000F8A  0E05               	movlw	5
  6428  000F8C  6E13               	movwf	___wmul@multiplicand,c
  6429  000F8E  EC8B  F011         	call	___wmul	;wreg free
  6430  000F92  5038               	movf	drawChar@i,w,c
  6431  000F94  2611               	addwf	?___wmul,f,c
  6432  000F96  0E00               	movlw	0
  6433  000F98  2212               	addwfc	?___wmul+1,f,c
  6434  000F9A  0E27               	movlw	low _font
  6435  000F9C  2411               	addwf	?___wmul,w,c
  6436  000F9E  6EF6               	movwf	tblptrl,c
  6437  000FA0  0EFD               	movlw	high _font
  6438  000FA2  D014               	goto	L11
  6439  000FA4                     l5760:
  6440                           
  6441                           ;ST7735_TFT.c: 460: else
  6442                           ;ST7735_TFT.c: 461: line = font2[(c - 'S')*5 + i];
  6443  000FA4  0EAD               	movlw	173
  6444  000FA6  242F               	addwf	drawChar@c,w,c
  6445  000FA8  6E11               	movwf	___wmul@multiplier,c
  6446  000FAA  6A12               	clrf	___wmul@multiplier+1,c
  6447  000FAC  0EFF               	movlw	255
  6448  000FAE  2212               	addwfc	___wmul@multiplier+1,f,c
  6449  000FB0  0E00               	movlw	0
  6450  000FB2  6E14               	movwf	___wmul@multiplicand+1,c
  6451  000FB4  0E05               	movlw	5
  6452  000FB6  6E13               	movwf	___wmul@multiplicand,c
  6453  000FB8  EC8B  F011         	call	___wmul	;wreg free
  6454  000FBC  5038               	movf	drawChar@i,w,c
  6455  000FBE  2611               	addwf	?___wmul,f,c
  6456  000FC0  0E00               	movlw	0
  6457  000FC2  2212               	addwfc	?___wmul+1,f,c
  6458  000FC4  0E26               	movlw	low _font2
  6459  000FC6  2411               	addwf	?___wmul,w,c
  6460  000FC8  6EF6               	movwf	tblptrl,c
  6461  000FCA  0EFE               	movlw	high _font2
  6462  000FCC                     L11:
  6463  000FCC  2012               	addwfc	?___wmul+1,w,c
  6464  000FCE  6EF7               	movwf	tblptrh,c
  6465  000FD0                     	if	0	;There are less than 3 active tblptr bytes
  6466  000FD0                     	endif
  6467  000FD0  0008               	tblrd		*
  6468  000FD2  CFF5 F035          	movff	tablat,drawChar@line
  6469  000FD6  D000               	goto	l5762
  6470  000FD8                     l5762:
  6471                           
  6472                           ;ST7735_TFT.c: 462: for(j=0; j<7; j++, line >>= 1) {
  6473  000FD8  0E00               	movlw	0
  6474  000FDA  6E37               	movwf	drawChar@j,c
  6475  000FDC                     l5764:
  6476  000FDC  0E06               	movlw	6
  6477  000FDE  6437               	cpfsgt	drawChar@j,c
  6478  000FE0  D001               	goto	l376
  6479  000FE2  D053               	goto	l5788
  6480  000FE4                     l376:
  6481                           
  6482                           ;ST7735_TFT.c: 463: if(line & 0x01) {
  6483  000FE4  A035               	btfss	drawChar@line,0,c
  6484  000FE6  D023               	goto	l5774
  6485                           
  6486                           ;ST7735_TFT.c: 464: if(size == 1) drawPixel(x+i, y+j, color);
  6487  000FE8  0434               	decf	drawChar@size,w,c
  6488  000FEA  A4D8               	btfss	status,2,c
  6489  000FEC  D00C               	goto	l5772
  6490  000FEE  502E               	movf	drawChar@y,w,c
  6491  000FF0  2437               	addwf	drawChar@j,w,c
  6492  000FF2  6E18               	movwf	drawPixel@y,c
  6493  000FF4  C030  F019         	movff	drawChar@color,drawPixel@color
  6494  000FF8  C031  F01A         	movff	drawChar@color+1,drawPixel@color+1
  6495  000FFC  5036               	movf	drawChar@x,w,c
  6496  000FFE  2438               	addwf	drawChar@i,w,c
  6497  001000  EC5E  F011         	call	_drawPixel
  6498  001004  D03E               	goto	l5782
  6499  001006                     l5772:
  6500                           
  6501                           ;ST7735_TFT.c: 465: else fillRect(x+(i*size), y+(j*size), size, size, color);
  6502  001006  5037               	movf	drawChar@j,w,c
  6503  001008  0234               	mulwf	drawChar@size,c
  6504  00100A  50F3               	movf	prodl,w,c
  6505  00100C  242E               	addwf	drawChar@y,w,c
  6506  00100E  6E23               	movwf	fillRect@y,c
  6507  001010  C034  F024         	movff	drawChar@size,fillRect@w
  6508  001014  C034  F025         	movff	drawChar@size,fillRect@h
  6509  001018  C030  F026         	movff	drawChar@color,fillRect@color
  6510  00101C  C031  F027         	movff	drawChar@color+1,fillRect@color+1
  6511  001020  5038               	movf	drawChar@i,w,c
  6512  001022  0234               	mulwf	drawChar@size,c
  6513  001024  50F3               	movf	prodl,w,c
  6514  001026  2436               	addwf	drawChar@x,w,c
  6515  001028  EC48  F010         	call	_fillRect
  6516                           
  6517                           ;ST7735_TFT.c: 466: }
  6518  00102C  D02A               	goto	l5782
  6519  00102E                     l5774:
  6520                           
  6521                           ;ST7735_TFT.c: 467: else if(bg != color) {
  6522  00102E  5030               	movf	drawChar@color,w,c
  6523  001030  1832               	xorwf	drawChar@bg,w,c
  6524  001032  E104               	bnz	u4560
  6525  001034  5031               	movf	drawChar@color+1,w,c
  6526  001036  1833               	xorwf	drawChar@bg+1,w,c
  6527  001038  B4D8               	btfsc	status,2,c
  6528  00103A  D023               	goto	l5782
  6529  00103C                     u4560:
  6530                           
  6531                           ;ST7735_TFT.c: 468: if(size == 1) drawPixel(x+i, y+j, bg);
  6532  00103C  0434               	decf	drawChar@size,w,c
  6533  00103E  A4D8               	btfss	status,2,c
  6534  001040  D00C               	goto	l5780
  6535  001042  502E               	movf	drawChar@y,w,c
  6536  001044  2437               	addwf	drawChar@j,w,c
  6537  001046  6E18               	movwf	drawPixel@y,c
  6538  001048  C032  F019         	movff	drawChar@bg,drawPixel@color
  6539  00104C  C033  F01A         	movff	drawChar@bg+1,drawPixel@color+1
  6540  001050  5036               	movf	drawChar@x,w,c
  6541  001052  2438               	addwf	drawChar@i,w,c
  6542  001054  EC5E  F011         	call	_drawPixel
  6543  001058  D014               	goto	l5782
  6544  00105A                     l5780:
  6545                           
  6546                           ;ST7735_TFT.c: 469: else fillRect(x+i*size, y+j*size, size, size, bg);
  6547  00105A  5037               	movf	drawChar@j,w,c
  6548  00105C  0234               	mulwf	drawChar@size,c
  6549  00105E  50F3               	movf	prodl,w,c
  6550  001060  242E               	addwf	drawChar@y,w,c
  6551  001062  6E23               	movwf	fillRect@y,c
  6552  001064  C034  F024         	movff	drawChar@size,fillRect@w
  6553  001068  C034  F025         	movff	drawChar@size,fillRect@h
  6554  00106C  C032  F026         	movff	drawChar@bg,fillRect@color
  6555  001070  C033  F027         	movff	drawChar@bg+1,fillRect@color+1
  6556  001074  5038               	movf	drawChar@i,w,c
  6557  001076  0234               	mulwf	drawChar@size,c
  6558  001078  50F3               	movf	prodl,w,c
  6559  00107A  2436               	addwf	drawChar@x,w,c
  6560  00107C  EC48  F010         	call	_fillRect
  6561  001080  D000               	goto	l5782
  6562  001082                     l5782:
  6563  001082  2A37               	incf	drawChar@j,f,c
  6564  001084  90D8               	bcf	status,0,c
  6565  001086  3235               	rrcf	drawChar@line,f,c
  6566  001088  D7A9               	goto	l5764
  6567  00108A                     l5788:
  6568  00108A  2A38               	incf	drawChar@i,f,c
  6569  00108C  D76F               	goto	l5752
  6570  00108E                     l367:
  6571  00108E  0012               	return		;funcret
  6572  001090                     __end_of_drawChar:
  6573                           	opt stack 0
  6574                           tblptru	equ	0xFF8
  6575                           tblptrh	equ	0xFF7
  6576                           tblptrl	equ	0xFF6
  6577                           tablat	equ	0xFF5
  6578                           prodh	equ	0xFF4
  6579                           prodl	equ	0xFF3
  6580                           intcon	equ	0xFF2
  6581                           intcon2	equ	0xFF1
  6582                           postinc0	equ	0xFEE
  6583                           wreg	equ	0xFE8
  6584                           postdec1	equ	0xFE5
  6585                           fsr1l	equ	0xFE1
  6586                           indf2	equ	0xFDF
  6587                           postinc2	equ	0xFDE
  6588                           postdec2	equ	0xFDD
  6589                           fsr2h	equ	0xFDA
  6590                           fsr2l	equ	0xFD9
  6591                           status	equ	0xFD8
  6592                           
  6593 ;; *************** function _fillRect *****************
  6594 ;; Defined at:
  6595 ;;		line 438 in file "ST7735_TFT.c"
  6596 ;; Parameters:    Size  Location     Type
  6597 ;;  x               1    wreg     unsigned char 
  6598 ;;  y               1   34[COMRAM] unsigned char 
  6599 ;;  w               1   35[COMRAM] unsigned char 
  6600 ;;  h               1   36[COMRAM] unsigned char 
  6601 ;;  color           2   37[COMRAM] unsigned int 
  6602 ;; Auto vars:     Size  Location     Type
  6603 ;;  x               1   42[COMRAM] unsigned char 
  6604 ;;  i               2   43[COMRAM] int 
  6605 ;; Return value:  Size  Location     Type
  6606 ;;		None               void
  6607 ;; Registers used:
  6608 ;;		wreg, status,2, status,0, cstack
  6609 ;; Tracked objects:
  6610 ;;		On entry : 0/0
  6611 ;;		On exit  : 0/0
  6612 ;;		Unchanged: 0/0
  6613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6614 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6615 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6616 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6617 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6618 ;;Total ram usage:       11 bytes
  6619 ;; Hardware stack levels used:    1
  6620 ;; Hardware stack levels required when called:    7
  6621 ;; This function calls:
  6622 ;;		_drawFastVLine
  6623 ;; This function is called by:
  6624 ;;		_drawChar
  6625 ;; This function uses a non-reentrant model
  6626 ;;
  6627                           
  6628                           	psect	text22
  6629  002090                     __ptext22:
  6630                           	opt stack 0
  6631  002090                     _fillRect:
  6632                           	opt stack 20
  6633                           
  6634                           ;incstack = 0
  6635                           ;fillRect@x stored from wreg
  6636  002090  6E2B               	movwf	fillRect@x,c
  6637                           
  6638                           ;ST7735_TFT.c: 440: signed int i;
  6639                           ;ST7735_TFT.c: 442: for (i = x; i < x + w; i++)
  6640  002092  C02B  F02C         	movff	fillRect@x,fillRect@i
  6641  002096  6A2D               	clrf	fillRect@i+1,c
  6642  002098  D00E               	goto	l5472
  6643  00209A                     l5468:
  6644                           
  6645                           ;ST7735_TFT.c: 443: {
  6646                           ;ST7735_TFT.c: 444: drawFastVLine(i, y, h, color);
  6647  00209A  C023  F018         	movff	fillRect@y,drawFastVLine@y
  6648  00209E  C025  F019         	movff	fillRect@h,drawFastVLine@h
  6649  0020A2  C026  F01A         	movff	fillRect@color,drawFastVLine@color
  6650  0020A6  C027  F01B         	movff	fillRect@color+1,drawFastVLine@color+1
  6651  0020AA  502C               	movf	fillRect@i,w,c
  6652  0020AC  EC75  F00D         	call	_drawFastVLine
  6653  0020B0  4A2C               	infsnz	fillRect@i,f,c
  6654  0020B2  2A2D               	incf	fillRect@i+1,f,c
  6655  0020B4  D000               	goto	l5472
  6656  0020B6                     l5472:
  6657  0020B6  5024               	movf	fillRect@w,w,c
  6658  0020B8  C02B  F028         	movff	fillRect@x,??_fillRect
  6659  0020BC  6A29               	clrf	(??_fillRect+1)& (0+255),c
  6660  0020BE  2628               	addwf	??_fillRect,f,c
  6661  0020C0  0E00               	movlw	0
  6662  0020C2  2229               	addwfc	??_fillRect+1,f,c
  6663  0020C4  5028               	movf	??_fillRect,w,c
  6664  0020C6  5C2C               	subwf	fillRect@i,w,c
  6665  0020C8  502D               	movf	fillRect@i+1,w,c
  6666  0020CA  0A80               	xorlw	128
  6667  0020CC  6E2A               	movwf	(??_fillRect+2)& (0+255),c
  6668  0020CE  5029               	movf	??_fillRect+1,w,c
  6669  0020D0  0A80               	xorlw	128
  6670  0020D2  582A               	subwfb	(??_fillRect+2)& (0+255),w,c
  6671  0020D4  A0D8               	btfss	status,0,c
  6672  0020D6  D7E1               	goto	l5468
  6673  0020D8  0012               	return		;funcret
  6674  0020DA                     __end_of_fillRect:
  6675                           	opt stack 0
  6676                           tblptru	equ	0xFF8
  6677                           tblptrh	equ	0xFF7
  6678                           tblptrl	equ	0xFF6
  6679                           tablat	equ	0xFF5
  6680                           prodh	equ	0xFF4
  6681                           prodl	equ	0xFF3
  6682                           intcon	equ	0xFF2
  6683                           intcon2	equ	0xFF1
  6684                           postinc0	equ	0xFEE
  6685                           wreg	equ	0xFE8
  6686                           postdec1	equ	0xFE5
  6687                           fsr1l	equ	0xFE1
  6688                           indf2	equ	0xFDF
  6689                           postinc2	equ	0xFDE
  6690                           postdec2	equ	0xFDD
  6691                           fsr2h	equ	0xFDA
  6692                           fsr2l	equ	0xFD9
  6693                           status	equ	0xFD8
  6694                           
  6695 ;; *************** function _drawFastVLine *****************
  6696 ;; Defined at:
  6697 ;;		line 417 in file "ST7735_TFT.c"
  6698 ;; Parameters:    Size  Location     Type
  6699 ;;  x               1    wreg     unsigned char 
  6700 ;;  y               1   23[COMRAM] unsigned char 
  6701 ;;  h               1   24[COMRAM] unsigned char 
  6702 ;;  color           2   25[COMRAM] unsigned int 
  6703 ;; Auto vars:     Size  Location     Type
  6704 ;;  x               1   33[COMRAM] unsigned char 
  6705 ;;  lo              1   32[COMRAM] unsigned char 
  6706 ;;  hi              1   31[COMRAM] unsigned char 
  6707 ;; Return value:  Size  Location     Type
  6708 ;;		None               void
  6709 ;; Registers used:
  6710 ;;		wreg, status,2, status,0, cstack
  6711 ;; Tracked objects:
  6712 ;;		On entry : 0/0
  6713 ;;		On exit  : 0/0
  6714 ;;		Unchanged: 0/0
  6715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6716 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6717 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6718 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6719 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6720 ;;Total ram usage:       11 bytes
  6721 ;; Hardware stack levels used:    1
  6722 ;; Hardware stack levels required when called:    6
  6723 ;; This function calls:
  6724 ;;		_setAddrWindow
  6725 ;;		_spiwrite
  6726 ;; This function is called by:
  6727 ;;		_fillRect
  6728 ;;		_fillCircleHelper
  6729 ;;		_fillCircle
  6730 ;;		_drawRect
  6731 ;; This function uses a non-reentrant model
  6732 ;;
  6733                           
  6734                           	psect	text23
  6735  001AEA                     __ptext23:
  6736                           	opt stack 0
  6737  001AEA                     _drawFastVLine:
  6738                           	opt stack 20
  6739                           
  6740                           ;incstack = 0
  6741                           ;drawFastVLine@x stored from wreg
  6742  001AEA  6E22               	movwf	drawFastVLine@x,c
  6743                           
  6744                           ;ST7735_TFT.c: 419: unsigned char hi, lo;
  6745                           ;ST7735_TFT.c: 420: if((x >= 128) || (y >= 160))
  6746  001AEC  0E80               	movlw	128
  6747  001AEE  6022               	cpfslt	drawFastVLine@x,c
  6748  001AF0  D03F               	goto	l351
  6749  001AF2  0E9F               	movlw	159
  6750  001AF4  6418               	cpfsgt	drawFastVLine@y,c
  6751  001AF6  D001               	goto	l5342
  6752                           
  6753                           ;ST7735_TFT.c: 421: return;
  6754  001AF8  D03B               	goto	l351
  6755  001AFA                     l5342:
  6756                           
  6757                           ;ST7735_TFT.c: 422: if((y + h - 1) >= 160)
  6758  001AFA  0EFF               	movlw	255
  6759  001AFC  6E1C               	movwf	??_drawFastVLine& (0+255),c
  6760  001AFE  0EFF               	movlw	255
  6761  001B00  6E1D               	movwf	(??_drawFastVLine+1)& (0+255),c
  6762  001B02  5019               	movf	drawFastVLine@h,w,c
  6763  001B04  C018  F01E         	movff	drawFastVLine@y,??_drawFastVLine+2
  6764  001B08  6A1F               	clrf	(??_drawFastVLine+3)& (0+255),c
  6765  001B0A  261E               	addwf	??_drawFastVLine+2,f,c
  6766  001B0C  0E00               	movlw	0
  6767  001B0E  221F               	addwfc	??_drawFastVLine+3,f,c
  6768  001B10  501C               	movf	??_drawFastVLine,w,c
  6769  001B12  261E               	addwf	??_drawFastVLine+2,f,c
  6770  001B14  501D               	movf	??_drawFastVLine+1,w,c
  6771  001B16  221F               	addwfc	??_drawFastVLine+3,f,c
  6772  001B18  BE1F               	btfsc	??_drawFastVLine+3,7,c
  6773  001B1A  D00B               	goto	l5346
  6774  001B1C  501F               	movf	??_drawFastVLine+3,w,c
  6775  001B1E  E104               	bnz	u4100
  6776  001B20  0EA0               	movlw	160
  6777  001B22  5C1E               	subwf	??_drawFastVLine+2,w,c
  6778  001B24  A0D8               	btfss	status,0,c
  6779  001B26  D005               	goto	l5346
  6780  001B28                     u4100:
  6781                           
  6782                           ;ST7735_TFT.c: 423: h = 160 - y;
  6783  001B28  5018               	movf	drawFastVLine@y,w,c
  6784  001B2A  0800               	sublw	0
  6785  001B2C  0FA0               	addlw	160
  6786  001B2E  6E19               	movwf	drawFastVLine@h,c
  6787  001B30  D000               	goto	l5346
  6788  001B32                     l5346:
  6789                           
  6790                           ;ST7735_TFT.c: 424: hi = color >> 8; lo = color;
  6791  001B32  501B               	movf	drawFastVLine@color+1,w,c
  6792  001B34  6E20               	movwf	drawFastVLine@hi,c
  6793  001B36  C01A  F021         	movff	drawFastVLine@color,drawFastVLine@lo
  6794                           
  6795                           ;ST7735_TFT.c: 425: setAddrWindow(x, y, x, y + h - 1);
  6796  001B3A  C018  F014         	movff	drawFastVLine@y,setAddrWindow@y0
  6797  001B3E  C022  F015         	movff	drawFastVLine@x,setAddrWindow@x1
  6798  001B42  5018               	movf	drawFastVLine@y,w,c
  6799  001B44  2419               	addwf	drawFastVLine@h,w,c
  6800  001B46  6E1C               	movwf	??_drawFastVLine& (0+255),c
  6801  001B48  041C               	decf	??_drawFastVLine,w,c
  6802  001B4A  6E16               	movwf	setAddrWindow@y1,c
  6803  001B4C  5022               	movf	drawFastVLine@x,w,c
  6804  001B4E  ECD5  F00F         	call	_setAddrWindow
  6805                           
  6806                           ;ST7735_TFT.c: 426: PORTDbits.RD0 = 1;
  6807  001B52  8083               	bsf	3971,0,c	;volatile
  6808                           
  6809                           ;ST7735_TFT.c: 427: PORTDbits.RD1 = 0;
  6810  001B54  9283               	bcf	3971,1,c	;volatile
  6811                           
  6812                           ;ST7735_TFT.c: 429: while (h--) {
  6813  001B56  D007               	goto	l5358
  6814  001B58                     l5356:
  6815                           
  6816                           ;ST7735_TFT.c: 430: spiwrite(hi);
  6817  001B58  5020               	movf	drawFastVLine@hi,w,c
  6818  001B5A  EC47  F012         	call	_spiwrite
  6819                           
  6820                           ;ST7735_TFT.c: 431: spiwrite(lo);
  6821  001B5E  5021               	movf	drawFastVLine@lo,w,c
  6822  001B60  EC47  F012         	call	_spiwrite
  6823  001B64  D000               	goto	l5358
  6824  001B66                     l5358:
  6825  001B66  0619               	decf	drawFastVLine@h,f,c
  6826  001B68  2819               	incf	drawFastVLine@h,w,c
  6827  001B6A  A4D8               	btfss	status,2,c
  6828  001B6C  D7F5               	goto	l5356
  6829                           
  6830                           ;ST7735_TFT.c: 432: }
  6831                           ;ST7735_TFT.c: 433: PORTDbits.RD1 = 1;
  6832  001B6E  8283               	bsf	3971,1,c	;volatile
  6833  001B70                     l351:
  6834  001B70  0012               	return		;funcret
  6835  001B72                     __end_of_drawFastVLine:
  6836                           	opt stack 0
  6837                           tblptru	equ	0xFF8
  6838                           tblptrh	equ	0xFF7
  6839                           tblptrl	equ	0xFF6
  6840                           tablat	equ	0xFF5
  6841                           prodh	equ	0xFF4
  6842                           prodl	equ	0xFF3
  6843                           intcon	equ	0xFF2
  6844                           intcon2	equ	0xFF1
  6845                           postinc0	equ	0xFEE
  6846                           wreg	equ	0xFE8
  6847                           postdec1	equ	0xFE5
  6848                           fsr1l	equ	0xFE1
  6849                           indf2	equ	0xFDF
  6850                           postinc2	equ	0xFDE
  6851                           postdec2	equ	0xFDD
  6852                           fsr2h	equ	0xFDA
  6853                           fsr2l	equ	0xFD9
  6854                           status	equ	0xFD8
  6855                           
  6856 ;; *************** function _drawCircle *****************
  6857 ;; Defined at:
  6858 ;;		line 529 in file "ST7735_TFT.c"
  6859 ;; Parameters:    Size  Location     Type
  6860 ;;  x0              2   27[COMRAM] int 
  6861 ;;  y0              2   29[COMRAM] int 
  6862 ;;  r               2   31[COMRAM] int 
  6863 ;;  color           2   33[COMRAM] unsigned int 
  6864 ;; Auto vars:     Size  Location     Type
  6865 ;;  y               2   45[COMRAM] int 
  6866 ;;  x               2   43[COMRAM] int 
  6867 ;;  f               2   41[COMRAM] int 
  6868 ;;  ddF_y           2   39[COMRAM] int 
  6869 ;;  ddF_x           2   37[COMRAM] int 
  6870 ;; Return value:  Size  Location     Type
  6871 ;;		None               void
  6872 ;; Registers used:
  6873 ;;		wreg, status,2, status,0, cstack
  6874 ;; Tracked objects:
  6875 ;;		On entry : 0/0
  6876 ;;		On exit  : 0/0
  6877 ;;		Unchanged: 0/0
  6878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6879 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6880 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6881 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6882 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6883 ;;Total ram usage:       20 bytes
  6884 ;; Hardware stack levels used:    1
  6885 ;; Hardware stack levels required when called:    7
  6886 ;; This function calls:
  6887 ;;		_drawPixel
  6888 ;; This function is called by:
  6889 ;;		_Initialize_Screen
  6890 ;; This function uses a non-reentrant model
  6891 ;;
  6892                           
  6893                           	psect	text24
  6894  000C1A                     __ptext24:
  6895                           	opt stack 0
  6896  000C1A                     _drawCircle:
  6897                           	opt stack 22
  6898                           
  6899                           ;ST7735_TFT.c: 531: signed int f, ddF_x, ddF_y, x, y;
  6900                           ;ST7735_TFT.c: 532: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  6901                           
  6902                           ;incstack = 0
  6903  000C1A  C020  F024         	movff	drawCircle@r,??_drawCircle
  6904  000C1E  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
  6905  000C22  1E24               	comf	??_drawCircle,f,c
  6906  000C24  1E25               	comf	??_drawCircle+1,f,c
  6907  000C26  4A24               	infsnz	??_drawCircle,f,c
  6908  000C28  2A25               	incf	??_drawCircle+1,f,c
  6909  000C2A  0E01               	movlw	1
  6910  000C2C  2424               	addwf	??_drawCircle,w,c
  6911  000C2E  6E2A               	movwf	drawCircle@f,c
  6912  000C30  0E00               	movlw	0
  6913  000C32  2025               	addwfc	??_drawCircle+1,w,c
  6914  000C34  6E2B               	movwf	drawCircle@f+1,c
  6915  000C36  0E00               	movlw	0
  6916  000C38  6E27               	movwf	drawCircle@ddF_x+1,c
  6917  000C3A  0E01               	movlw	1
  6918  000C3C  6E26               	movwf	drawCircle@ddF_x,c
  6919  000C3E  C020  F024         	movff	drawCircle@r,??_drawCircle
  6920  000C42  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
  6921  000C46  90D8               	bcf	status,0,c
  6922  000C48  3624               	rlcf	??_drawCircle,f,c
  6923  000C4A  3625               	rlcf	??_drawCircle+1,f,c
  6924  000C4C  1E24               	comf	??_drawCircle,f,c
  6925  000C4E  1E25               	comf	??_drawCircle+1,f,c
  6926  000C50  4A24               	infsnz	??_drawCircle,f,c
  6927  000C52  2A25               	incf	??_drawCircle+1,f,c
  6928  000C54  C024  F028         	movff	??_drawCircle,drawCircle@ddF_y
  6929  000C58  C025  F029         	movff	??_drawCircle+1,drawCircle@ddF_y+1
  6930  000C5C  0E00               	movlw	0
  6931  000C5E  6E2D               	movwf	drawCircle@x+1,c
  6932  000C60  0E00               	movlw	0
  6933  000C62  6E2C               	movwf	drawCircle@x,c
  6934  000C64  C020  F02E         	movff	drawCircle@r,drawCircle@y
  6935  000C68  C021  F02F         	movff	drawCircle@r+1,drawCircle@y+1
  6936                           
  6937                           ;ST7735_TFT.c: 533: drawPixel(x0 , y0 + r, color);
  6938  000C6C  501E               	movf	drawCircle@y0,w,c
  6939  000C6E  2420               	addwf	drawCircle@r,w,c
  6940  000C70  6E18               	movwf	drawPixel@y,c
  6941  000C72  C022  F019         	movff	drawCircle@color,drawPixel@color
  6942  000C76  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6943  000C7A  501C               	movf	drawCircle@x0,w,c
  6944  000C7C  EC5E  F011         	call	_drawPixel
  6945                           
  6946                           ;ST7735_TFT.c: 534: drawPixel(x0 , y0 - r, color);
  6947  000C80  5020               	movf	drawCircle@r,w,c
  6948  000C82  0800               	sublw	0
  6949  000C84  241E               	addwf	drawCircle@y0,w,c
  6950  000C86  6E18               	movwf	drawPixel@y,c
  6951  000C88  C022  F019         	movff	drawCircle@color,drawPixel@color
  6952  000C8C  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6953  000C90  501C               	movf	drawCircle@x0,w,c
  6954  000C92  EC5E  F011         	call	_drawPixel
  6955                           
  6956                           ;ST7735_TFT.c: 535: drawPixel(x0+r, y0 , color);
  6957  000C96  C01E  F018         	movff	drawCircle@y0,drawPixel@y
  6958  000C9A  C022  F019         	movff	drawCircle@color,drawPixel@color
  6959  000C9E  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6960  000CA2  501C               	movf	drawCircle@x0,w,c
  6961  000CA4  2420               	addwf	drawCircle@r,w,c
  6962  000CA6  EC5E  F011         	call	_drawPixel
  6963                           
  6964                           ;ST7735_TFT.c: 536: drawPixel(x0-r, y0 , color);
  6965  000CAA  C01E  F018         	movff	drawCircle@y0,drawPixel@y
  6966  000CAE  C022  F019         	movff	drawCircle@color,drawPixel@color
  6967  000CB2  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6968  000CB6  5020               	movf	drawCircle@r,w,c
  6969  000CB8  0800               	sublw	0
  6970  000CBA  241C               	addwf	drawCircle@x0,w,c
  6971  000CBC  EC5E  F011         	call	_drawPixel
  6972                           
  6973                           ;ST7735_TFT.c: 537: while (x < y) {
  6974  000CC0  D078               	goto	l6072
  6975  000CC2                     l6044:
  6976                           
  6977                           ;ST7735_TFT.c: 538: if (f >= 0) {
  6978  000CC2  BE2B               	btfsc	drawCircle@f+1,7,c
  6979  000CC4  D00B               	goto	l415
  6980                           
  6981                           ;ST7735_TFT.c: 539: y--;
  6982  000CC6  062E               	decf	drawCircle@y,f,c
  6983  000CC8  A0D8               	btfss	status,0,c
  6984  000CCA  062F               	decf	drawCircle@y+1,f,c
  6985                           
  6986                           ;ST7735_TFT.c: 540: ddF_y += 2;
  6987  000CCC  0E02               	movlw	2
  6988  000CCE  2628               	addwf	drawCircle@ddF_y,f,c
  6989  000CD0  0E00               	movlw	0
  6990  000CD2  2229               	addwfc	drawCircle@ddF_y+1,f,c
  6991                           
  6992                           ;ST7735_TFT.c: 541: f += ddF_y;
  6993  000CD4  5028               	movf	drawCircle@ddF_y,w,c
  6994  000CD6  262A               	addwf	drawCircle@f,f,c
  6995  000CD8  5029               	movf	drawCircle@ddF_y+1,w,c
  6996  000CDA  222B               	addwfc	drawCircle@f+1,f,c
  6997  000CDC                     l415:
  6998                           
  6999                           ;ST7735_TFT.c: 542: }
  7000                           ;ST7735_TFT.c: 543: x++;
  7001  000CDC  4A2C               	infsnz	drawCircle@x,f,c
  7002  000CDE  2A2D               	incf	drawCircle@x+1,f,c
  7003                           
  7004                           ;ST7735_TFT.c: 544: ddF_x += 2;
  7005  000CE0  0E02               	movlw	2
  7006  000CE2  2626               	addwf	drawCircle@ddF_x,f,c
  7007  000CE4  0E00               	movlw	0
  7008  000CE6  2227               	addwfc	drawCircle@ddF_x+1,f,c
  7009                           
  7010                           ;ST7735_TFT.c: 545: f += ddF_x;
  7011  000CE8  5026               	movf	drawCircle@ddF_x,w,c
  7012  000CEA  262A               	addwf	drawCircle@f,f,c
  7013  000CEC  5027               	movf	drawCircle@ddF_x+1,w,c
  7014  000CEE  222B               	addwfc	drawCircle@f+1,f,c
  7015                           
  7016                           ;ST7735_TFT.c: 546: drawPixel(x0 + x, y0 + y, color);
  7017  000CF0  501E               	movf	drawCircle@y0,w,c
  7018  000CF2  242E               	addwf	drawCircle@y,w,c
  7019  000CF4  6E18               	movwf	drawPixel@y,c
  7020  000CF6  C022  F019         	movff	drawCircle@color,drawPixel@color
  7021  000CFA  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  7022  000CFE  501C               	movf	drawCircle@x0,w,c
  7023  000D00  242C               	addwf	drawCircle@x,w,c
  7024  000D02  EC5E  F011         	call	_drawPixel
  7025                           
  7026                           ;ST7735_TFT.c: 547: drawPixel(x0 - x, y0 + y, color);
  7027  000D06  501E               	movf	drawCircle@y0,w,c
  7028  000D08  242E               	addwf	drawCircle@y,w,c
  7029  000D0A  6E18               	movwf	drawPixel@y,c
  7030  000D0C  C022  F019         	movff	drawCircle@color,drawPixel@color
  7031  000D10  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  7032  000D14  502C               	movf	drawCircle@x,w,c
  7033  000D16  0800               	sublw	0
  7034  000D18  241C               	addwf	drawCircle@x0,w,c
  7035  000D1A  EC5E  F011         	call	_drawPixel
  7036                           
  7037                           ;ST7735_TFT.c: 548: drawPixel(x0 + x, y0 - y, color);
  7038  000D1E  502E               	movf	drawCircle@y,w,c
  7039  000D20  0800               	sublw	0
  7040  000D22  241E               	addwf	drawCircle@y0,w,c
  7041  000D24  6E18               	movwf	drawPixel@y,c
  7042  000D26  C022  F019         	movff	drawCircle@color,drawPixel@color
  7043  000D2A  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  7044  000D2E  501C               	movf	drawCircle@x0,w,c
  7045  000D30  242C               	addwf	drawCircle@x,w,c
  7046  000D32  EC5E  F011         	call	_drawPixel
  7047                           
  7048                           ;ST7735_TFT.c: 549: drawPixel(x0 - x, y0 - y, color);
  7049  000D36  502E               	movf	drawCircle@y,w,c
  7050  000D38  0800               	sublw	0
  7051  000D3A  241E               	addwf	drawCircle@y0,w,c
  7052  000D3C  6E18               	movwf	drawPixel@y,c
  7053  000D3E  C022  F019         	movff	drawCircle@color,drawPixel@color
  7054  000D42  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  7055  000D46  502C               	movf	drawCircle@x,w,c
  7056  000D48  0800               	sublw	0
  7057  000D4A  241C               	addwf	drawCircle@x0,w,c
  7058  000D4C  EC5E  F011         	call	_drawPixel
  7059                           
  7060                           ;ST7735_TFT.c: 550: drawPixel(x0 + y, y0 + x, color);
  7061  000D50  501E               	movf	drawCircle@y0,w,c
  7062  000D52  242C               	addwf	drawCircle@x,w,c
  7063  000D54  6E18               	movwf	drawPixel@y,c
  7064  000D56  C022  F019         	movff	drawCircle@color,drawPixel@color
  7065  000D5A  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  7066  000D5E  501C               	movf	drawCircle@x0,w,c
  7067  000D60  242E               	addwf	drawCircle@y,w,c
  7068  000D62  EC5E  F011         	call	_drawPixel
  7069                           
  7070                           ;ST7735_TFT.c: 551: drawPixel(x0 - y, y0 + x, color);
  7071  000D66  501E               	movf	drawCircle@y0,w,c
  7072  000D68  242C               	addwf	drawCircle@x,w,c
  7073  000D6A  6E18               	movwf	drawPixel@y,c
  7074  000D6C  C022  F019         	movff	drawCircle@color,drawPixel@color
  7075  000D70  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  7076  000D74  502E               	movf	drawCircle@y,w,c
  7077  000D76  0800               	sublw	0
  7078  000D78  241C               	addwf	drawCircle@x0,w,c
  7079  000D7A  EC5E  F011         	call	_drawPixel
  7080                           
  7081                           ;ST7735_TFT.c: 552: drawPixel(x0 + y, y0 - x, color);
  7082  000D7E  502C               	movf	drawCircle@x,w,c
  7083  000D80  0800               	sublw	0
  7084  000D82  241E               	addwf	drawCircle@y0,w,c
  7085  000D84  6E18               	movwf	drawPixel@y,c
  7086  000D86  C022  F019         	movff	drawCircle@color,drawPixel@color
  7087  000D8A  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  7088  000D8E  501C               	movf	drawCircle@x0,w,c
  7089  000D90  242E               	addwf	drawCircle@y,w,c
  7090  000D92  EC5E  F011         	call	_drawPixel
  7091                           
  7092                           ;ST7735_TFT.c: 553: drawPixel(x0 - y, y0 - x, color);
  7093  000D96  502C               	movf	drawCircle@x,w,c
  7094  000D98  0800               	sublw	0
  7095  000D9A  241E               	addwf	drawCircle@y0,w,c
  7096  000D9C  6E18               	movwf	drawPixel@y,c
  7097  000D9E  C022  F019         	movff	drawCircle@color,drawPixel@color
  7098  000DA2  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  7099  000DA6  502E               	movf	drawCircle@y,w,c
  7100  000DA8  0800               	sublw	0
  7101  000DAA  241C               	addwf	drawCircle@x0,w,c
  7102  000DAC  EC5E  F011         	call	_drawPixel
  7103  000DB0  D000               	goto	l6072
  7104  000DB2                     l6072:
  7105  000DB2  502E               	movf	drawCircle@y,w,c
  7106  000DB4  5C2C               	subwf	drawCircle@x,w,c
  7107  000DB6  502D               	movf	drawCircle@x+1,w,c
  7108  000DB8  0A80               	xorlw	128
  7109  000DBA  6E24               	movwf	??_drawCircle& (0+255),c
  7110  000DBC  502F               	movf	drawCircle@y+1,w,c
  7111  000DBE  0A80               	xorlw	128
  7112  000DC0  5824               	subwfb	??_drawCircle& (0+255),w,c
  7113  000DC2  A0D8               	btfss	status,0,c
  7114  000DC4  D77E               	goto	l6044
  7115  000DC6  0012               	return		;funcret
  7116  000DC8                     __end_of_drawCircle:
  7117                           	opt stack 0
  7118                           tblptru	equ	0xFF8
  7119                           tblptrh	equ	0xFF7
  7120                           tblptrl	equ	0xFF6
  7121                           tablat	equ	0xFF5
  7122                           prodh	equ	0xFF4
  7123                           prodl	equ	0xFF3
  7124                           intcon	equ	0xFF2
  7125                           intcon2	equ	0xFF1
  7126                           postinc0	equ	0xFEE
  7127                           wreg	equ	0xFE8
  7128                           postdec1	equ	0xFE5
  7129                           fsr1l	equ	0xFE1
  7130                           indf2	equ	0xFDF
  7131                           postinc2	equ	0xFDE
  7132                           postdec2	equ	0xFDD
  7133                           fsr2h	equ	0xFDA
  7134                           fsr2l	equ	0xFD9
  7135                           status	equ	0xFD8
  7136                           
  7137 ;; *************** function _drawPixel *****************
  7138 ;; Defined at:
  7139 ;;		line 408 in file "ST7735_TFT.c"
  7140 ;; Parameters:    Size  Location     Type
  7141 ;;  x               1    wreg     unsigned char 
  7142 ;;  y               1   23[COMRAM] unsigned char 
  7143 ;;  color           2   24[COMRAM] unsigned int 
  7144 ;; Auto vars:     Size  Location     Type
  7145 ;;  x               1   26[COMRAM] unsigned char 
  7146 ;; Return value:  Size  Location     Type
  7147 ;;		None               void
  7148 ;; Registers used:
  7149 ;;		wreg, status,2, status,0, cstack
  7150 ;; Tracked objects:
  7151 ;;		On entry : 0/0
  7152 ;;		On exit  : 0/0
  7153 ;;		Unchanged: 0/0
  7154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7155 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7156 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7157 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7158 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7159 ;;Total ram usage:        4 bytes
  7160 ;; Hardware stack levels used:    1
  7161 ;; Hardware stack levels required when called:    6
  7162 ;; This function calls:
  7163 ;;		_setAddrWindow
  7164 ;;		_write_data
  7165 ;; This function is called by:
  7166 ;;		_drawChar
  7167 ;;		_drawCircle
  7168 ;;		_drawCircleHelper
  7169 ;; This function uses a non-reentrant model
  7170 ;;
  7171                           
  7172                           	psect	text25
  7173  0022BC                     __ptext25:
  7174                           	opt stack 0
  7175  0022BC                     _drawPixel:
  7176                           	opt stack 21
  7177                           
  7178                           ;incstack = 0
  7179                           ;drawPixel@x stored from wreg
  7180  0022BC  6E1B               	movwf	drawPixel@x,c
  7181                           
  7182                           ;ST7735_TFT.c: 410: if((x >= 128) || (y >= 160))
  7183  0022BE  0E80               	movlw	128
  7184  0022C0  601B               	cpfslt	drawPixel@x,c
  7185  0022C2  D013               	goto	l345
  7186  0022C4  0E9F               	movlw	159
  7187  0022C6  6418               	cpfsgt	drawPixel@y,c
  7188  0022C8  D001               	goto	l5460
  7189                           
  7190                           ;ST7735_TFT.c: 411: return;
  7191  0022CA  D00F               	goto	l345
  7192  0022CC                     l5460:
  7193                           
  7194                           ;ST7735_TFT.c: 412: setAddrWindow(x,y,x+1,y+1);
  7195  0022CC  C018  F014         	movff	drawPixel@y,setAddrWindow@y0
  7196  0022D0  281B               	incf	drawPixel@x,w,c
  7197  0022D2  6E15               	movwf	setAddrWindow@x1,c
  7198  0022D4  2818               	incf	drawPixel@y,w,c
  7199  0022D6  6E16               	movwf	setAddrWindow@y1,c
  7200  0022D8  501B               	movf	drawPixel@x,w,c
  7201  0022DA  ECD5  F00F         	call	_setAddrWindow
  7202                           
  7203                           ;ST7735_TFT.c: 413: write_data(color >> 8);
  7204  0022DE  501A               	movf	drawPixel@color+1,w,c
  7205  0022E0  EC9A  F012         	call	_write_data
  7206                           
  7207                           ;ST7735_TFT.c: 414: write_data(color & 0xFF);
  7208  0022E4  5019               	movf	drawPixel@color,w,c
  7209  0022E6  EC9A  F012         	call	_write_data
  7210  0022EA                     l345:
  7211  0022EA  0012               	return		;funcret
  7212  0022EC                     __end_of_drawPixel:
  7213                           	opt stack 0
  7214                           tblptru	equ	0xFF8
  7215                           tblptrh	equ	0xFF7
  7216                           tblptrl	equ	0xFF6
  7217                           tablat	equ	0xFF5
  7218                           prodh	equ	0xFF4
  7219                           prodl	equ	0xFF3
  7220                           intcon	equ	0xFF2
  7221                           intcon2	equ	0xFF1
  7222                           postinc0	equ	0xFEE
  7223                           wreg	equ	0xFE8
  7224                           postdec1	equ	0xFE5
  7225                           fsr1l	equ	0xFE1
  7226                           indf2	equ	0xFDF
  7227                           postinc2	equ	0xFDE
  7228                           postdec2	equ	0xFDD
  7229                           fsr2h	equ	0xFDA
  7230                           fsr2l	equ	0xFD9
  7231                           status	equ	0xFD8
  7232                           
  7233 ;; *************** function _setAddrWindow *****************
  7234 ;; Defined at:
  7235 ;;		line 393 in file "ST7735_TFT.c"
  7236 ;; Parameters:    Size  Location     Type
  7237 ;;  x0              1    wreg     unsigned char 
  7238 ;;  y0              1   19[COMRAM] unsigned char 
  7239 ;;  x1              1   20[COMRAM] unsigned char 
  7240 ;;  y1              1   21[COMRAM] unsigned char 
  7241 ;; Auto vars:     Size  Location     Type
  7242 ;;  x0              1   22[COMRAM] unsigned char 
  7243 ;; Return value:  Size  Location     Type
  7244 ;;		None               void
  7245 ;; Registers used:
  7246 ;;		wreg, status,2, status,0, cstack
  7247 ;; Tracked objects:
  7248 ;;		On entry : 0/0
  7249 ;;		On exit  : 0/0
  7250 ;;		Unchanged: 0/0
  7251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7252 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7253 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7254 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7255 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7256 ;;Total ram usage:        4 bytes
  7257 ;; Hardware stack levels used:    1
  7258 ;; Hardware stack levels required when called:    5
  7259 ;; This function calls:
  7260 ;;		_write_command
  7261 ;;		_write_data
  7262 ;; This function is called by:
  7263 ;;		_drawPixel
  7264 ;;		_drawFastVLine
  7265 ;;		_fillRectangle
  7266 ;;		_drawFastHLine
  7267 ;; This function uses a non-reentrant model
  7268 ;;
  7269                           
  7270                           	psect	text26
  7271  001FAA                     __ptext26:
  7272                           	opt stack 0
  7273  001FAA                     _setAddrWindow:
  7274                           	opt stack 20
  7275                           
  7276                           ;incstack = 0
  7277                           ;setAddrWindow@x0 stored from wreg
  7278  001FAA  6E17               	movwf	setAddrWindow@x0,c
  7279                           
  7280                           ;ST7735_TFT.c: 395: write_command(0x2A);
  7281  001FAC  0E2A               	movlw	42
  7282  001FAE  ECA2  F012         	call	_write_command
  7283                           
  7284                           ;ST7735_TFT.c: 396: write_data(0);
  7285  001FB2  0E00               	movlw	0
  7286  001FB4  EC9A  F012         	call	_write_data
  7287                           
  7288                           ;ST7735_TFT.c: 397: write_data(x0 + colstart);
  7289  001FB8  5017               	movf	setAddrWindow@x0,w,c
  7290  001FBA  2459               	addwf	_colstart,w,c
  7291  001FBC  EC9A  F012         	call	_write_data
  7292                           
  7293                           ;ST7735_TFT.c: 398: write_data(0);
  7294  001FC0  0E00               	movlw	0
  7295  001FC2  EC9A  F012         	call	_write_data
  7296                           
  7297                           ;ST7735_TFT.c: 399: write_data(x1 + colstart);
  7298  001FC6  5015               	movf	setAddrWindow@x1,w,c
  7299  001FC8  2459               	addwf	_colstart,w,c
  7300  001FCA  EC9A  F012         	call	_write_data
  7301                           
  7302                           ;ST7735_TFT.c: 400: write_command(0x2B);
  7303  001FCE  0E2B               	movlw	43
  7304  001FD0  ECA2  F012         	call	_write_command
  7305                           
  7306                           ;ST7735_TFT.c: 401: write_data(0);
  7307  001FD4  0E00               	movlw	0
  7308  001FD6  EC9A  F012         	call	_write_data
  7309                           
  7310                           ;ST7735_TFT.c: 402: write_data(y0 + rowstart);
  7311  001FDA  5014               	movf	setAddrWindow@y0,w,c
  7312  001FDC  2461               	addwf	_rowstart,w,c
  7313  001FDE  EC9A  F012         	call	_write_data
  7314                           
  7315                           ;ST7735_TFT.c: 403: write_data(0);
  7316  001FE2  0E00               	movlw	0
  7317  001FE4  EC9A  F012         	call	_write_data
  7318                           
  7319                           ;ST7735_TFT.c: 404: write_data(y1 + rowstart);
  7320  001FE8  5016               	movf	setAddrWindow@y1,w,c
  7321  001FEA  2461               	addwf	_rowstart,w,c
  7322  001FEC  EC9A  F012         	call	_write_data
  7323                           
  7324                           ;ST7735_TFT.c: 405: write_command(0x2C);
  7325  001FF0  0E2C               	movlw	44
  7326  001FF2  ECA2  F012         	call	_write_command
  7327  001FF6  0012               	return		;funcret
  7328  001FF8                     __end_of_setAddrWindow:
  7329                           	opt stack 0
  7330                           tblptru	equ	0xFF8
  7331                           tblptrh	equ	0xFF7
  7332                           tblptrl	equ	0xFF6
  7333                           tablat	equ	0xFF5
  7334                           prodh	equ	0xFF4
  7335                           prodl	equ	0xFF3
  7336                           intcon	equ	0xFF2
  7337                           intcon2	equ	0xFF1
  7338                           postinc0	equ	0xFEE
  7339                           wreg	equ	0xFE8
  7340                           postdec1	equ	0xFE5
  7341                           fsr1l	equ	0xFE1
  7342                           indf2	equ	0xFDF
  7343                           postinc2	equ	0xFDE
  7344                           postdec2	equ	0xFDD
  7345                           fsr2h	equ	0xFDA
  7346                           fsr2l	equ	0xFD9
  7347                           status	equ	0xFD8
  7348                           
  7349 ;; *************** function _TFT_GreenTab_Initialize *****************
  7350 ;; Defined at:
  7351 ;;		line 645 in file "ST7735_TFT.c"
  7352 ;; Parameters:    Size  Location     Type
  7353 ;;		None
  7354 ;; Auto vars:     Size  Location     Type
  7355 ;;		None
  7356 ;; Return value:  Size  Location     Type
  7357 ;;		None               void
  7358 ;; Registers used:
  7359 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7360 ;; Tracked objects:
  7361 ;;		On entry : 0/0
  7362 ;;		On exit  : 0/0
  7363 ;;		Unchanged: 0/0
  7364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7365 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7366 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7367 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7368 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7369 ;;Total ram usage:        0 bytes
  7370 ;; Hardware stack levels used:    1
  7371 ;; Hardware stack levels required when called:    6
  7372 ;; This function calls:
  7373 ;;		_Rcmd1
  7374 ;;		_Rcmd2red
  7375 ;;		_Rcmd3
  7376 ;;		_write_command
  7377 ;;		_write_data
  7378 ;; This function is called by:
  7379 ;;		_Initialize_Screen
  7380 ;; This function uses a non-reentrant model
  7381 ;;
  7382                           
  7383                           	psect	text27
  7384  0022EC                     __ptext27:
  7385                           	opt stack 0
  7386  0022EC                     _TFT_GreenTab_Initialize:
  7387                           	opt stack 23
  7388                           
  7389                           ;ST7735_TFT.c: 647: PORTDbits.RD1 = 1;
  7390                           
  7391                           ;incstack = 0
  7392  0022EC  8283               	bsf	3971,1,c	;volatile
  7393                           
  7394                           ;ST7735_TFT.c: 648: PORTDbits.RD0 = 0;
  7395  0022EE  9083               	bcf	3971,0,c	;volatile
  7396                           
  7397                           ;ST7735_TFT.c: 650: SSPSTAT=0x80;
  7398  0022F0  0E80               	movlw	128
  7399  0022F2  6EC7               	movwf	4039,c	;volatile
  7400                           
  7401                           ;ST7735_TFT.c: 651: SSPCON1=0x30;
  7402  0022F4  0E30               	movlw	48
  7403  0022F6  6EC6               	movwf	4038,c	;volatile
  7404                           
  7405                           ;ST7735_TFT.c: 654: Rcmd1();
  7406  0022F8  ECD4  F008         	call	_Rcmd1	;wreg free
  7407                           
  7408                           ;ST7735_TFT.c: 655: Rcmd2red();
  7409  0022FC  ECCF  F010         	call	_Rcmd2red	;wreg free
  7410                           
  7411                           ;ST7735_TFT.c: 656: Rcmd3();
  7412  002300  EC5D  F00A         	call	_Rcmd3	;wreg free
  7413                           
  7414                           ;ST7735_TFT.c: 657: write_command(0x36);
  7415  002304  0E36               	movlw	54
  7416  002306  ECA2  F012         	call	_write_command
  7417                           
  7418                           ;ST7735_TFT.c: 658: write_data(0xC0);
  7419  00230A  0EC0               	movlw	192
  7420  00230C  EC9A  F012         	call	_write_data
  7421                           
  7422                           ;ST7735_TFT.c: 659: _tft_type = 1;
  7423  002310  0E01               	movlw	1
  7424  002312  6E53               	movwf	__tft_type,c
  7425  002314  0012               	return		;funcret
  7426  002316                     __end_of_TFT_GreenTab_Initialize:
  7427                           	opt stack 0
  7428                           tblptru	equ	0xFF8
  7429                           tblptrh	equ	0xFF7
  7430                           tblptrl	equ	0xFF6
  7431                           tablat	equ	0xFF5
  7432                           prodh	equ	0xFF4
  7433                           prodl	equ	0xFF3
  7434                           intcon	equ	0xFF2
  7435                           intcon2	equ	0xFF1
  7436                           postinc0	equ	0xFEE
  7437                           wreg	equ	0xFE8
  7438                           postdec1	equ	0xFE5
  7439                           fsr1l	equ	0xFE1
  7440                           indf2	equ	0xFDF
  7441                           postinc2	equ	0xFDE
  7442                           postdec2	equ	0xFDD
  7443                           fsr2h	equ	0xFDA
  7444                           fsr2l	equ	0xFD9
  7445                           status	equ	0xFD8
  7446                           
  7447 ;; *************** function _Rcmd3 *****************
  7448 ;; Defined at:
  7449 ;;		line 339 in file "ST7735_TFT.c"
  7450 ;; Parameters:    Size  Location     Type
  7451 ;;		None
  7452 ;; Auto vars:     Size  Location     Type
  7453 ;;		None
  7454 ;; Return value:  Size  Location     Type
  7455 ;;		None               void
  7456 ;; Registers used:
  7457 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7458 ;; Tracked objects:
  7459 ;;		On entry : 0/0
  7460 ;;		On exit  : 0/0
  7461 ;;		Unchanged: 0/0
  7462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7463 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7464 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7465 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7466 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7467 ;;Total ram usage:        0 bytes
  7468 ;; Hardware stack levels used:    1
  7469 ;; Hardware stack levels required when called:    5
  7470 ;; This function calls:
  7471 ;;		_delay_ms
  7472 ;;		_write_command
  7473 ;;		_write_data
  7474 ;; This function is called by:
  7475 ;;		_TFT_GreenTab_Initialize
  7476 ;;		_TFT_BlackTab_Initialize
  7477 ;; This function uses a non-reentrant model
  7478 ;;
  7479                           
  7480                           	psect	text28
  7481  0014BA                     __ptext28:
  7482                           	opt stack 0
  7483  0014BA                     _Rcmd3:
  7484                           	opt stack 23
  7485                           
  7486                           ;ST7735_TFT.c: 341: write_command(0xE0);
  7487                           
  7488                           ;incstack = 0
  7489  0014BA  0EE0               	movlw	224
  7490  0014BC  ECA2  F012         	call	_write_command
  7491                           
  7492                           ;ST7735_TFT.c: 342: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
  7493  0014C0  0E02               	movlw	2
  7494  0014C2  EC9A  F012         	call	_write_data
  7495  0014C6  0E1C               	movlw	28
  7496  0014C8  EC9A  F012         	call	_write_data
  7497  0014CC  0E07               	movlw	7
  7498  0014CE  EC9A  F012         	call	_write_data
  7499  0014D2  0E12               	movlw	18
  7500  0014D4  EC9A  F012         	call	_write_data
  7501                           
  7502                           ;ST7735_TFT.c: 343: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
  7503  0014D8  0E37               	movlw	55
  7504  0014DA  EC9A  F012         	call	_write_data
  7505  0014DE  0E32               	movlw	50
  7506  0014E0  EC9A  F012         	call	_write_data
  7507  0014E4  0E29               	movlw	41
  7508  0014E6  EC9A  F012         	call	_write_data
  7509  0014EA  0E2D               	movlw	45
  7510  0014EC  EC9A  F012         	call	_write_data
  7511                           
  7512                           ;ST7735_TFT.c: 344: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
  7513  0014F0  0E29               	movlw	41
  7514  0014F2  EC9A  F012         	call	_write_data
  7515  0014F6  0E25               	movlw	37
  7516  0014F8  EC9A  F012         	call	_write_data
  7517  0014FC  0E2B               	movlw	43
  7518  0014FE  EC9A  F012         	call	_write_data
  7519  001502  0E39               	movlw	57
  7520  001504  EC9A  F012         	call	_write_data
  7521                           
  7522                           ;ST7735_TFT.c: 345: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
  7523  001508  0E00               	movlw	0
  7524  00150A  EC9A  F012         	call	_write_data
  7525  00150E  0E01               	movlw	1
  7526  001510  EC9A  F012         	call	_write_data
  7527  001514  0E03               	movlw	3
  7528  001516  EC9A  F012         	call	_write_data
  7529  00151A  0E10               	movlw	16
  7530  00151C  EC9A  F012         	call	_write_data
  7531                           
  7532                           ;ST7735_TFT.c: 346: write_command(0xE1);
  7533  001520  0EE1               	movlw	225
  7534  001522  ECA2  F012         	call	_write_command
  7535                           
  7536                           ;ST7735_TFT.c: 347: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
  7537  001526  0E03               	movlw	3
  7538  001528  EC9A  F012         	call	_write_data
  7539  00152C  0E1D               	movlw	29
  7540  00152E  EC9A  F012         	call	_write_data
  7541  001532  0E07               	movlw	7
  7542  001534  EC9A  F012         	call	_write_data
  7543  001538  0E06               	movlw	6
  7544  00153A  EC9A  F012         	call	_write_data
  7545                           
  7546                           ;ST7735_TFT.c: 348: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
  7547  00153E  0E2E               	movlw	46
  7548  001540  EC9A  F012         	call	_write_data
  7549  001544  0E2C               	movlw	44
  7550  001546  EC9A  F012         	call	_write_data
  7551  00154A  0E29               	movlw	41
  7552  00154C  EC9A  F012         	call	_write_data
  7553  001550  0E2D               	movlw	45
  7554  001552  EC9A  F012         	call	_write_data
  7555                           
  7556                           ;ST7735_TFT.c: 349: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
  7557  001556  0E2E               	movlw	46
  7558  001558  EC9A  F012         	call	_write_data
  7559  00155C  0E2E               	movlw	46
  7560  00155E  EC9A  F012         	call	_write_data
  7561  001562  0E37               	movlw	55
  7562  001564  EC9A  F012         	call	_write_data
  7563  001568  0E3F               	movlw	63
  7564  00156A  EC9A  F012         	call	_write_data
  7565                           
  7566                           ;ST7735_TFT.c: 350: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
  7567  00156E  0E00               	movlw	0
  7568  001570  EC9A  F012         	call	_write_data
  7569  001574  0E00               	movlw	0
  7570  001576  EC9A  F012         	call	_write_data
  7571  00157A  0E02               	movlw	2
  7572  00157C  EC9A  F012         	call	_write_data
  7573  001580  0E10               	movlw	16
  7574  001582  EC9A  F012         	call	_write_data
  7575                           
  7576                           ;ST7735_TFT.c: 351: write_command(0x13);
  7577  001586  0E13               	movlw	19
  7578  001588  ECA2  F012         	call	_write_command
  7579                           
  7580                           ;ST7735_TFT.c: 352: delay_ms(10);
  7581  00158C  0E00               	movlw	0
  7582  00158E  6E18               	movwf	delay_ms@ms+1,c
  7583  001590  0E0A               	movlw	10
  7584  001592  6E17               	movwf	delay_ms@ms,c
  7585  001594  ECAC  F00F         	call	_delay_ms	;wreg free
  7586                           
  7587                           ;ST7735_TFT.c: 353: write_command(0x29);
  7588  001598  0E29               	movlw	41
  7589  00159A  ECA2  F012         	call	_write_command
  7590                           
  7591                           ;ST7735_TFT.c: 354: delay_ms(100);
  7592  00159E  0E00               	movlw	0
  7593  0015A0  6E18               	movwf	delay_ms@ms+1,c
  7594  0015A2  0E64               	movlw	100
  7595  0015A4  6E17               	movwf	delay_ms@ms,c
  7596  0015A6  ECAC  F00F         	call	_delay_ms	;wreg free
  7597  0015AA  0012               	return		;funcret
  7598  0015AC                     __end_of_Rcmd3:
  7599                           	opt stack 0
  7600                           tblptru	equ	0xFF8
  7601                           tblptrh	equ	0xFF7
  7602                           tblptrl	equ	0xFF6
  7603                           tablat	equ	0xFF5
  7604                           prodh	equ	0xFF4
  7605                           prodl	equ	0xFF3
  7606                           intcon	equ	0xFF2
  7607                           intcon2	equ	0xFF1
  7608                           postinc0	equ	0xFEE
  7609                           wreg	equ	0xFE8
  7610                           postdec1	equ	0xFE5
  7611                           fsr1l	equ	0xFE1
  7612                           indf2	equ	0xFDF
  7613                           postinc2	equ	0xFDE
  7614                           postdec2	equ	0xFDD
  7615                           fsr2h	equ	0xFDA
  7616                           fsr2l	equ	0xFD9
  7617                           status	equ	0xFD8
  7618                           
  7619 ;; *************** function _Rcmd2red *****************
  7620 ;; Defined at:
  7621 ;;		line 329 in file "ST7735_TFT.c"
  7622 ;; Parameters:    Size  Location     Type
  7623 ;;		None
  7624 ;; Auto vars:     Size  Location     Type
  7625 ;;		None
  7626 ;; Return value:  Size  Location     Type
  7627 ;;		None               void
  7628 ;; Registers used:
  7629 ;;		wreg, status,2, cstack
  7630 ;; Tracked objects:
  7631 ;;		On entry : 0/0
  7632 ;;		On exit  : 0/0
  7633 ;;		Unchanged: 0/0
  7634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7635 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7636 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7637 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7638 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7639 ;;Total ram usage:        0 bytes
  7640 ;; Hardware stack levels used:    1
  7641 ;; Hardware stack levels required when called:    5
  7642 ;; This function calls:
  7643 ;;		_write_command
  7644 ;;		_write_data
  7645 ;; This function is called by:
  7646 ;;		_TFT_GreenTab_Initialize
  7647 ;; This function uses a non-reentrant model
  7648 ;;
  7649                           
  7650                           	psect	text29
  7651  00219E                     __ptext29:
  7652                           	opt stack 0
  7653  00219E                     _Rcmd2red:
  7654                           	opt stack 23
  7655                           
  7656                           ;ST7735_TFT.c: 331: write_command(0x2A);
  7657                           
  7658                           ;incstack = 0
  7659  00219E  0E2A               	movlw	42
  7660  0021A0  ECA2  F012         	call	_write_command
  7661                           
  7662                           ;ST7735_TFT.c: 332: write_data(0x00); write_data(0x00);
  7663  0021A4  0E00               	movlw	0
  7664  0021A6  EC9A  F012         	call	_write_data
  7665  0021AA  0E00               	movlw	0
  7666  0021AC  EC9A  F012         	call	_write_data
  7667                           
  7668                           ;ST7735_TFT.c: 333: write_data(0x00); write_data(0x7F);
  7669  0021B0  0E00               	movlw	0
  7670  0021B2  EC9A  F012         	call	_write_data
  7671  0021B6  0E7F               	movlw	127
  7672  0021B8  EC9A  F012         	call	_write_data
  7673                           
  7674                           ;ST7735_TFT.c: 334: write_command(0x2B);
  7675  0021BC  0E2B               	movlw	43
  7676  0021BE  ECA2  F012         	call	_write_command
  7677                           
  7678                           ;ST7735_TFT.c: 335: write_data(0x00); write_data(0x00);
  7679  0021C2  0E00               	movlw	0
  7680  0021C4  EC9A  F012         	call	_write_data
  7681  0021C8  0E00               	movlw	0
  7682  0021CA  EC9A  F012         	call	_write_data
  7683                           
  7684                           ;ST7735_TFT.c: 336: write_data(0x00); write_data(0x9F);
  7685  0021CE  0E00               	movlw	0
  7686  0021D0  EC9A  F012         	call	_write_data
  7687  0021D4  0E9F               	movlw	159
  7688  0021D6  EC9A  F012         	call	_write_data
  7689  0021DA  0012               	return		;funcret
  7690  0021DC                     __end_of_Rcmd2red:
  7691                           	opt stack 0
  7692                           tblptru	equ	0xFF8
  7693                           tblptrh	equ	0xFF7
  7694                           tblptrl	equ	0xFF6
  7695                           tablat	equ	0xFF5
  7696                           prodh	equ	0xFF4
  7697                           prodl	equ	0xFF3
  7698                           intcon	equ	0xFF2
  7699                           intcon2	equ	0xFF1
  7700                           postinc0	equ	0xFEE
  7701                           wreg	equ	0xFE8
  7702                           postdec1	equ	0xFE5
  7703                           fsr1l	equ	0xFE1
  7704                           indf2	equ	0xFDF
  7705                           postinc2	equ	0xFDE
  7706                           postdec2	equ	0xFDD
  7707                           fsr2h	equ	0xFDA
  7708                           fsr2l	equ	0xFD9
  7709                           status	equ	0xFD8
  7710                           
  7711 ;; *************** function _Rcmd1 *****************
  7712 ;; Defined at:
  7713 ;;		line 282 in file "ST7735_TFT.c"
  7714 ;; Parameters:    Size  Location     Type
  7715 ;;		None
  7716 ;; Auto vars:     Size  Location     Type
  7717 ;;		None
  7718 ;; Return value:  Size  Location     Type
  7719 ;;		None               void
  7720 ;; Registers used:
  7721 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7722 ;; Tracked objects:
  7723 ;;		On entry : 0/0
  7724 ;;		On exit  : 0/0
  7725 ;;		Unchanged: 0/0
  7726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7727 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7728 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7729 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7730 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7731 ;;Total ram usage:        0 bytes
  7732 ;; Hardware stack levels used:    1
  7733 ;; Hardware stack levels required when called:    5
  7734 ;; This function calls:
  7735 ;;		_delay_ms
  7736 ;;		_write_command
  7737 ;;		_write_data
  7738 ;; This function is called by:
  7739 ;;		_TFT_GreenTab_Initialize
  7740 ;;		_TFT_BlackTab_Initialize
  7741 ;; This function uses a non-reentrant model
  7742 ;;
  7743                           
  7744                           	psect	text30
  7745  0011A8                     __ptext30:
  7746                           	opt stack 0
  7747  0011A8                     _Rcmd1:
  7748                           	opt stack 23
  7749                           
  7750                           ;ST7735_TFT.c: 284: write_command(0x01);
  7751                           
  7752                           ;incstack = 0
  7753  0011A8  0E01               	movlw	1
  7754  0011AA  ECA2  F012         	call	_write_command
  7755                           
  7756                           ;ST7735_TFT.c: 285: delay_ms(150);
  7757  0011AE  0E00               	movlw	0
  7758  0011B0  6E18               	movwf	delay_ms@ms+1,c
  7759  0011B2  0E96               	movlw	150
  7760  0011B4  6E17               	movwf	delay_ms@ms,c
  7761  0011B6  ECAC  F00F         	call	_delay_ms	;wreg free
  7762                           
  7763                           ;ST7735_TFT.c: 286: write_command(0x11);
  7764  0011BA  0E11               	movlw	17
  7765  0011BC  ECA2  F012         	call	_write_command
  7766                           
  7767                           ;ST7735_TFT.c: 287: delay_ms(500);
  7768  0011C0  0E01               	movlw	1
  7769  0011C2  6E18               	movwf	delay_ms@ms+1,c
  7770  0011C4  0EF4               	movlw	244
  7771  0011C6  6E17               	movwf	delay_ms@ms,c
  7772  0011C8  ECAC  F00F         	call	_delay_ms	;wreg free
  7773                           
  7774                           ;ST7735_TFT.c: 288: write_command(0xB1);
  7775  0011CC  0EB1               	movlw	177
  7776  0011CE  ECA2  F012         	call	_write_command
  7777                           
  7778                           ;ST7735_TFT.c: 289: write_data(0x01);
  7779  0011D2  0E01               	movlw	1
  7780  0011D4  EC9A  F012         	call	_write_data
  7781                           
  7782                           ;ST7735_TFT.c: 290: write_data(0x2C);
  7783  0011D8  0E2C               	movlw	44
  7784  0011DA  EC9A  F012         	call	_write_data
  7785                           
  7786                           ;ST7735_TFT.c: 291: write_data(0x2D);
  7787  0011DE  0E2D               	movlw	45
  7788  0011E0  EC9A  F012         	call	_write_data
  7789                           
  7790                           ;ST7735_TFT.c: 292: write_command(0xB2);
  7791  0011E4  0EB2               	movlw	178
  7792  0011E6  ECA2  F012         	call	_write_command
  7793                           
  7794                           ;ST7735_TFT.c: 293: write_data(0x01);
  7795  0011EA  0E01               	movlw	1
  7796  0011EC  EC9A  F012         	call	_write_data
  7797                           
  7798                           ;ST7735_TFT.c: 294: write_data(0x2C);
  7799  0011F0  0E2C               	movlw	44
  7800  0011F2  EC9A  F012         	call	_write_data
  7801                           
  7802                           ;ST7735_TFT.c: 295: write_data(0x2D);
  7803  0011F6  0E2D               	movlw	45
  7804  0011F8  EC9A  F012         	call	_write_data
  7805                           
  7806                           ;ST7735_TFT.c: 296: write_command(0xB3);
  7807  0011FC  0EB3               	movlw	179
  7808  0011FE  ECA2  F012         	call	_write_command
  7809                           
  7810                           ;ST7735_TFT.c: 297: write_data(0x01);
  7811  001202  0E01               	movlw	1
  7812  001204  EC9A  F012         	call	_write_data
  7813                           
  7814                           ;ST7735_TFT.c: 298: write_data(0x2C);
  7815  001208  0E2C               	movlw	44
  7816  00120A  EC9A  F012         	call	_write_data
  7817                           
  7818                           ;ST7735_TFT.c: 299: write_data(0x2D);
  7819  00120E  0E2D               	movlw	45
  7820  001210  EC9A  F012         	call	_write_data
  7821                           
  7822                           ;ST7735_TFT.c: 300: write_data(0x01);
  7823  001214  0E01               	movlw	1
  7824  001216  EC9A  F012         	call	_write_data
  7825                           
  7826                           ;ST7735_TFT.c: 301: write_data(0x2C);
  7827  00121A  0E2C               	movlw	44
  7828  00121C  EC9A  F012         	call	_write_data
  7829                           
  7830                           ;ST7735_TFT.c: 302: write_data(0x2D);
  7831  001220  0E2D               	movlw	45
  7832  001222  EC9A  F012         	call	_write_data
  7833                           
  7834                           ;ST7735_TFT.c: 303: write_command(0xB4);
  7835  001226  0EB4               	movlw	180
  7836  001228  ECA2  F012         	call	_write_command
  7837                           
  7838                           ;ST7735_TFT.c: 304: write_data(0x07);
  7839  00122C  0E07               	movlw	7
  7840  00122E  EC9A  F012         	call	_write_data
  7841                           
  7842                           ;ST7735_TFT.c: 305: write_command(0xC0);
  7843  001232  0EC0               	movlw	192
  7844  001234  ECA2  F012         	call	_write_command
  7845                           
  7846                           ;ST7735_TFT.c: 306: write_data(0xA2);
  7847  001238  0EA2               	movlw	162
  7848  00123A  EC9A  F012         	call	_write_data
  7849                           
  7850                           ;ST7735_TFT.c: 307: write_data(0x02);
  7851  00123E  0E02               	movlw	2
  7852  001240  EC9A  F012         	call	_write_data
  7853                           
  7854                           ;ST7735_TFT.c: 308: write_data(0x84);
  7855  001244  0E84               	movlw	132
  7856  001246  EC9A  F012         	call	_write_data
  7857                           
  7858                           ;ST7735_TFT.c: 309: write_command(0xC1);
  7859  00124A  0EC1               	movlw	193
  7860  00124C  ECA2  F012         	call	_write_command
  7861                           
  7862                           ;ST7735_TFT.c: 310: write_data(0xC5);
  7863  001250  0EC5               	movlw	197
  7864  001252  EC9A  F012         	call	_write_data
  7865                           
  7866                           ;ST7735_TFT.c: 311: write_command(0xC2);
  7867  001256  0EC2               	movlw	194
  7868  001258  ECA2  F012         	call	_write_command
  7869                           
  7870                           ;ST7735_TFT.c: 312: write_data(0x0A);
  7871  00125C  0E0A               	movlw	10
  7872  00125E  EC9A  F012         	call	_write_data
  7873                           
  7874                           ;ST7735_TFT.c: 313: write_data(0x00);
  7875  001262  0E00               	movlw	0
  7876  001264  EC9A  F012         	call	_write_data
  7877                           
  7878                           ;ST7735_TFT.c: 314: write_command(0xC3);
  7879  001268  0EC3               	movlw	195
  7880  00126A  ECA2  F012         	call	_write_command
  7881                           
  7882                           ;ST7735_TFT.c: 315: write_data(0x8A);
  7883  00126E  0E8A               	movlw	138
  7884  001270  EC9A  F012         	call	_write_data
  7885                           
  7886                           ;ST7735_TFT.c: 316: write_data(0x2A);
  7887  001274  0E2A               	movlw	42
  7888  001276  EC9A  F012         	call	_write_data
  7889                           
  7890                           ;ST7735_TFT.c: 317: write_command(0xC4);
  7891  00127A  0EC4               	movlw	196
  7892  00127C  ECA2  F012         	call	_write_command
  7893                           
  7894                           ;ST7735_TFT.c: 318: write_data(0x8A);
  7895  001280  0E8A               	movlw	138
  7896  001282  EC9A  F012         	call	_write_data
  7897                           
  7898                           ;ST7735_TFT.c: 319: write_data(0xEE);
  7899  001286  0EEE               	movlw	238
  7900  001288  EC9A  F012         	call	_write_data
  7901                           
  7902                           ;ST7735_TFT.c: 320: write_command(0xC5);
  7903  00128C  0EC5               	movlw	197
  7904  00128E  ECA2  F012         	call	_write_command
  7905                           
  7906                           ;ST7735_TFT.c: 321: write_data(0x0E);
  7907  001292  0E0E               	movlw	14
  7908  001294  EC9A  F012         	call	_write_data
  7909                           
  7910                           ;ST7735_TFT.c: 322: write_command(0x20);
  7911  001298  0E20               	movlw	32
  7912  00129A  ECA2  F012         	call	_write_command
  7913                           
  7914                           ;ST7735_TFT.c: 323: write_command(0x36);
  7915  00129E  0E36               	movlw	54
  7916  0012A0  ECA2  F012         	call	_write_command
  7917                           
  7918                           ;ST7735_TFT.c: 324: write_data(0xC8);
  7919  0012A4  0EC8               	movlw	200
  7920  0012A6  EC9A  F012         	call	_write_data
  7921                           
  7922                           ;ST7735_TFT.c: 325: write_command(0x3A);
  7923  0012AA  0E3A               	movlw	58
  7924  0012AC  ECA2  F012         	call	_write_command
  7925                           
  7926                           ;ST7735_TFT.c: 326: write_data(0x05);
  7927  0012B0  0E05               	movlw	5
  7928  0012B2  EC9A  F012         	call	_write_data
  7929  0012B6  0012               	return		;funcret
  7930  0012B8                     __end_of_Rcmd1:
  7931                           	opt stack 0
  7932                           tblptru	equ	0xFF8
  7933                           tblptrh	equ	0xFF7
  7934                           tblptrl	equ	0xFF6
  7935                           tablat	equ	0xFF5
  7936                           prodh	equ	0xFF4
  7937                           prodl	equ	0xFF3
  7938                           intcon	equ	0xFF2
  7939                           intcon2	equ	0xFF1
  7940                           postinc0	equ	0xFEE
  7941                           wreg	equ	0xFE8
  7942                           postdec1	equ	0xFE5
  7943                           fsr1l	equ	0xFE1
  7944                           indf2	equ	0xFDF
  7945                           postinc2	equ	0xFDE
  7946                           postdec2	equ	0xFDD
  7947                           fsr2h	equ	0xFDA
  7948                           fsr2l	equ	0xFD9
  7949                           status	equ	0xFD8
  7950                           
  7951 ;; *************** function _write_data *****************
  7952 ;; Defined at:
  7953 ;;		line 210 in file "ST7735_TFT.c"
  7954 ;; Parameters:    Size  Location     Type
  7955 ;;  data_           1    wreg     unsigned char 
  7956 ;; Auto vars:     Size  Location     Type
  7957 ;;  data_           1   18[COMRAM] unsigned char 
  7958 ;; Return value:  Size  Location     Type
  7959 ;;		None               void
  7960 ;; Registers used:
  7961 ;;		wreg, status,2, cstack
  7962 ;; Tracked objects:
  7963 ;;		On entry : 0/0
  7964 ;;		On exit  : 0/0
  7965 ;;		Unchanged: 0/0
  7966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7967 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7968 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7969 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7970 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7971 ;;Total ram usage:        1 bytes
  7972 ;; Hardware stack levels used:    1
  7973 ;; Hardware stack levels required when called:    4
  7974 ;; This function calls:
  7975 ;;		_spiwrite
  7976 ;; This function is called by:
  7977 ;;		_Rcmd1
  7978 ;;		_Rcmd2red
  7979 ;;		_Rcmd3
  7980 ;;		_setAddrWindow
  7981 ;;		_drawPixel
  7982 ;;		_TFT_GreenTab_Initialize
  7983 ;;		_Bcmd
  7984 ;;		_setScrollDefinition
  7985 ;;		_Rcmd2green
  7986 ;;		_VerticalScroll
  7987 ;; This function uses a non-reentrant model
  7988 ;;
  7989                           
  7990                           	psect	text31
  7991  002534                     __ptext31:
  7992                           	opt stack 0
  7993  002534                     _write_data:
  7994                           	opt stack 20
  7995                           
  7996                           ;incstack = 0
  7997                           ;write_data@data_ stored from wreg
  7998  002534  6E13               	movwf	write_data@data_,c
  7999                           
  8000                           ;ST7735_TFT.c: 212: PORTDbits.RD1 = 0;
  8001  002536  9283               	bcf	3971,1,c	;volatile
  8002                           
  8003                           ;ST7735_TFT.c: 213: PORTDbits.RD0 = 1;
  8004  002538  8083               	bsf	3971,0,c	;volatile
  8005                           
  8006                           ;ST7735_TFT.c: 214: spiwrite(data_);
  8007  00253A  5013               	movf	write_data@data_,w,c
  8008  00253C  EC47  F012         	call	_spiwrite
  8009                           
  8010                           ;ST7735_TFT.c: 215: PORTDbits.RD1 = 1;
  8011  002540  8283               	bsf	3971,1,c	;volatile
  8012  002542  0012               	return		;funcret
  8013  002544                     __end_of_write_data:
  8014                           	opt stack 0
  8015                           tblptru	equ	0xFF8
  8016                           tblptrh	equ	0xFF7
  8017                           tblptrl	equ	0xFF6
  8018                           tablat	equ	0xFF5
  8019                           prodh	equ	0xFF4
  8020                           prodl	equ	0xFF3
  8021                           intcon	equ	0xFF2
  8022                           intcon2	equ	0xFF1
  8023                           postinc0	equ	0xFEE
  8024                           wreg	equ	0xFE8
  8025                           postdec1	equ	0xFE5
  8026                           fsr1l	equ	0xFE1
  8027                           indf2	equ	0xFDF
  8028                           postinc2	equ	0xFDE
  8029                           postdec2	equ	0xFDD
  8030                           fsr2h	equ	0xFDA
  8031                           fsr2l	equ	0xFD9
  8032                           status	equ	0xFD8
  8033                           
  8034 ;; *************** function _write_command *****************
  8035 ;; Defined at:
  8036 ;;		line 199 in file "ST7735_TFT.c"
  8037 ;; Parameters:    Size  Location     Type
  8038 ;;  cmd_            1    wreg     unsigned char 
  8039 ;; Auto vars:     Size  Location     Type
  8040 ;;  cmd_            1   18[COMRAM] unsigned char 
  8041 ;; Return value:  Size  Location     Type
  8042 ;;		None               void
  8043 ;; Registers used:
  8044 ;;		wreg, status,2, cstack
  8045 ;; Tracked objects:
  8046 ;;		On entry : 0/0
  8047 ;;		On exit  : 0/0
  8048 ;;		Unchanged: 0/0
  8049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8050 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8051 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8052 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8053 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8054 ;;Total ram usage:        1 bytes
  8055 ;; Hardware stack levels used:    1
  8056 ;; Hardware stack levels required when called:    4
  8057 ;; This function calls:
  8058 ;;		_spiwrite
  8059 ;; This function is called by:
  8060 ;;		_Rcmd1
  8061 ;;		_Rcmd2red
  8062 ;;		_Rcmd3
  8063 ;;		_setAddrWindow
  8064 ;;		_TFT_GreenTab_Initialize
  8065 ;;		_Bcmd
  8066 ;;		_setScrollDefinition
  8067 ;;		_Rcmd2green
  8068 ;;		_VerticalScroll
  8069 ;; This function uses a non-reentrant model
  8070 ;;
  8071                           
  8072                           	psect	text32
  8073  002544                     __ptext32:
  8074                           	opt stack 0
  8075  002544                     _write_command:
  8076                           	opt stack 20
  8077                           
  8078                           ;incstack = 0
  8079                           ;write_command@cmd_ stored from wreg
  8080  002544  6E13               	movwf	write_command@cmd_,c
  8081                           
  8082                           ;ST7735_TFT.c: 201: PORTDbits.RD1 = 0;
  8083  002546  9283               	bcf	3971,1,c	;volatile
  8084                           
  8085                           ;ST7735_TFT.c: 203: PORTDbits.RD0 = 0;
  8086  002548  9083               	bcf	3971,0,c	;volatile
  8087                           
  8088                           ;ST7735_TFT.c: 204: spiwrite(cmd_);
  8089  00254A  5013               	movf	write_command@cmd_,w,c
  8090  00254C  EC47  F012         	call	_spiwrite
  8091                           
  8092                           ;ST7735_TFT.c: 206: PORTDbits.RD1 = 1;
  8093  002550  8283               	bsf	3971,1,c	;volatile
  8094  002552  0012               	return		;funcret
  8095  002554                     __end_of_write_command:
  8096                           	opt stack 0
  8097                           tblptru	equ	0xFF8
  8098                           tblptrh	equ	0xFF7
  8099                           tblptrl	equ	0xFF6
  8100                           tablat	equ	0xFF5
  8101                           prodh	equ	0xFF4
  8102                           prodl	equ	0xFF3
  8103                           intcon	equ	0xFF2
  8104                           intcon2	equ	0xFF1
  8105                           postinc0	equ	0xFEE
  8106                           wreg	equ	0xFE8
  8107                           postdec1	equ	0xFE5
  8108                           fsr1l	equ	0xFE1
  8109                           indf2	equ	0xFDF
  8110                           postinc2	equ	0xFDE
  8111                           postdec2	equ	0xFDD
  8112                           fsr2h	equ	0xFDA
  8113                           fsr2l	equ	0xFD9
  8114                           status	equ	0xFD8
  8115                           
  8116 ;; *************** function _spiwrite *****************
  8117 ;; Defined at:
  8118 ;;		line 190 in file "ST7735_TFT.c"
  8119 ;; Parameters:    Size  Location     Type
  8120 ;;  spidata         1    wreg     unsigned char 
  8121 ;; Auto vars:     Size  Location     Type
  8122 ;;  spidata         1   17[COMRAM] unsigned char 
  8123 ;;  x               1   16[COMRAM] unsigned char 
  8124 ;; Return value:  Size  Location     Type
  8125 ;;		None               void
  8126 ;; Registers used:
  8127 ;;		wreg
  8128 ;; Tracked objects:
  8129 ;;		On entry : 0/0
  8130 ;;		On exit  : 0/0
  8131 ;;		Unchanged: 0/0
  8132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8133 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8134 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8135 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8136 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8137 ;;Total ram usage:        2 bytes
  8138 ;; Hardware stack levels used:    1
  8139 ;; Hardware stack levels required when called:    3
  8140 ;; This function calls:
  8141 ;;		Nothing
  8142 ;; This function is called by:
  8143 ;;		_write_command
  8144 ;;		_write_data
  8145 ;;		_drawFastVLine
  8146 ;;		_fillRectangle
  8147 ;;		_drawFastHLine
  8148 ;; This function uses a non-reentrant model
  8149 ;;
  8150                           
  8151                           	psect	text33
  8152  00248E                     __ptext33:
  8153                           	opt stack 0
  8154  00248E                     _spiwrite:
  8155                           	opt stack 22
  8156                           
  8157                           ;incstack = 0
  8158                           ;spiwrite@spidata stored from wreg
  8159  00248E  6E12               	movwf	spiwrite@spidata,c
  8160                           
  8161                           ;ST7735_TFT.c: 192: char x;
  8162                           ;ST7735_TFT.c: 193: PIR1bits.SSPIF = 0;
  8163  002490  969E               	bcf	3998,3,c	;volatile
  8164                           
  8165                           ;ST7735_TFT.c: 194: x = SSPBUF;
  8166  002492  CFC9 F011          	movff	4041,spiwrite@x	;volatile
  8167                           
  8168                           ;ST7735_TFT.c: 195: SSPBUF = spidata;
  8169  002496  C012  FFC9         	movff	spiwrite@spidata,4041	;volatile
  8170                           
  8171                           ;ST7735_TFT.c: 196: while (!SSPSTATbits.BF);
  8172  00249A  D000               	goto	l301
  8173  00249C                     l301:
  8174  00249C  A0C7               	btfss	4039,0,c	;volatile
  8175  00249E  D7FE               	goto	l301
  8176  0024A0  0012               	return		;funcret
  8177  0024A2                     __end_of_spiwrite:
  8178                           	opt stack 0
  8179                           tblptru	equ	0xFF8
  8180                           tblptrh	equ	0xFF7
  8181                           tblptrl	equ	0xFF6
  8182                           tablat	equ	0xFF5
  8183                           prodh	equ	0xFF4
  8184                           prodl	equ	0xFF3
  8185                           intcon	equ	0xFF2
  8186                           intcon2	equ	0xFF1
  8187                           postinc0	equ	0xFEE
  8188                           wreg	equ	0xFE8
  8189                           postdec1	equ	0xFE5
  8190                           fsr1l	equ	0xFE1
  8191                           indf2	equ	0xFDF
  8192                           postinc2	equ	0xFDE
  8193                           postdec2	equ	0xFDD
  8194                           fsr2h	equ	0xFDA
  8195                           fsr2l	equ	0xFD9
  8196                           status	equ	0xFD8
  8197                           
  8198 ;; *************** function _LCD_Reset *****************
  8199 ;; Defined at:
  8200 ;;		line 218 in file "ST7735_TFT.c"
  8201 ;; Parameters:    Size  Location     Type
  8202 ;;		None
  8203 ;; Auto vars:     Size  Location     Type
  8204 ;;		None
  8205 ;; Return value:  Size  Location     Type
  8206 ;;		None               void
  8207 ;; Registers used:
  8208 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8209 ;; Tracked objects:
  8210 ;;		On entry : 0/0
  8211 ;;		On exit  : 0/0
  8212 ;;		Unchanged: 0/0
  8213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8214 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8215 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8216 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8217 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8218 ;;Total ram usage:        0 bytes
  8219 ;; Hardware stack levels used:    1
  8220 ;; Hardware stack levels required when called:    5
  8221 ;; This function calls:
  8222 ;;		_delay_ms
  8223 ;; This function is called by:
  8224 ;;		_Initialize_Screen
  8225 ;; This function uses a non-reentrant model
  8226 ;;
  8227                           
  8228                           	psect	text34
  8229  0024CA                     __ptext34:
  8230                           	opt stack 0
  8231  0024CA                     _LCD_Reset:
  8232                           	opt stack 24
  8233                           
  8234                           ;ST7735_TFT.c: 220: PORTDbits.RD2 = 0;
  8235                           
  8236                           ;incstack = 0
  8237  0024CA  9483               	bcf	3971,2,c	;volatile
  8238                           
  8239                           ;ST7735_TFT.c: 221: delay_ms(100);
  8240  0024CC  0E00               	movlw	0
  8241  0024CE  6E18               	movwf	delay_ms@ms+1,c
  8242  0024D0  0E64               	movlw	100
  8243  0024D2  6E17               	movwf	delay_ms@ms,c
  8244  0024D4  ECAC  F00F         	call	_delay_ms	;wreg free
  8245                           
  8246                           ;ST7735_TFT.c: 222: PORTDbits.RD2 = 1;
  8247  0024D8  8483               	bsf	3971,2,c	;volatile
  8248  0024DA  0012               	return		;funcret
  8249  0024DC                     __end_of_LCD_Reset:
  8250                           	opt stack 0
  8251                           tblptru	equ	0xFF8
  8252                           tblptrh	equ	0xFF7
  8253                           tblptrl	equ	0xFF6
  8254                           tablat	equ	0xFF5
  8255                           prodh	equ	0xFF4
  8256                           prodl	equ	0xFF3
  8257                           intcon	equ	0xFF2
  8258                           intcon2	equ	0xFF1
  8259                           postinc0	equ	0xFEE
  8260                           wreg	equ	0xFE8
  8261                           postdec1	equ	0xFE5
  8262                           fsr1l	equ	0xFE1
  8263                           indf2	equ	0xFDF
  8264                           postinc2	equ	0xFDE
  8265                           postdec2	equ	0xFDD
  8266                           fsr2h	equ	0xFDA
  8267                           fsr2l	equ	0xFD9
  8268                           status	equ	0xFD8
  8269                           
  8270 ;; *************** function _delay_ms *****************
  8271 ;; Defined at:
  8272 ;;		line 65 in file "ST7735_TFT.c"
  8273 ;; Parameters:    Size  Location     Type
  8274 ;;  ms              2   22[COMRAM] int 
  8275 ;; Auto vars:     Size  Location     Type
  8276 ;;  count           2   26[COMRAM] int 
  8277 ;; Return value:  Size  Location     Type
  8278 ;;		None               void
  8279 ;; Registers used:
  8280 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8281 ;; Tracked objects:
  8282 ;;		On entry : 0/0
  8283 ;;		On exit  : 0/0
  8284 ;;		Unchanged: 0/0
  8285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8286 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8287 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8288 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8289 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8290 ;;Total ram usage:        6 bytes
  8291 ;; Hardware stack levels used:    1
  8292 ;; Hardware stack levels required when called:    4
  8293 ;; This function calls:
  8294 ;;		___wmul
  8295 ;; This function is called by:
  8296 ;;		_LCD_Reset
  8297 ;;		_Rcmd1
  8298 ;;		_Rcmd3
  8299 ;;		_Bcmd
  8300 ;; This function uses a non-reentrant model
  8301 ;;
  8302                           
  8303                           	psect	text35
  8304  001F58                     __ptext35:
  8305                           	opt stack 0
  8306  001F58                     _delay_ms:
  8307                           	opt stack 23
  8308                           
  8309                           ;ST7735_TFT.c: 71: int count;
  8310                           ;ST7735_TFT.c: 72: count = 8000000/4000/16 * ms;
  8311                           
  8312                           ;incstack = 0
  8313  001F58  C017  F011         	movff	delay_ms@ms,___wmul@multiplier
  8314  001F5C  C018  F012         	movff	delay_ms@ms+1,___wmul@multiplier+1
  8315  001F60  0E00               	movlw	0
  8316  001F62  6E14               	movwf	___wmul@multiplicand+1,c
  8317  001F64  0E7D               	movlw	125
  8318  001F66  6E13               	movwf	___wmul@multiplicand,c
  8319  001F68  EC8B  F011         	call	___wmul	;wreg free
  8320  001F6C  C011  F01B         	movff	?___wmul,delay_ms@count
  8321  001F70  C012  F01C         	movff	?___wmul+1,delay_ms@count+1
  8322                           
  8323                           ;ST7735_TFT.c: 73: count = (0xffff - count);
  8324  001F74  C01B  F019         	movff	delay_ms@count,??_delay_ms
  8325  001F78  C01C  F01A         	movff	delay_ms@count+1,??_delay_ms+1
  8326  001F7C  1E19               	comf	??_delay_ms,f,c
  8327  001F7E  1E1A               	comf	??_delay_ms+1,f,c
  8328  001F80  4A19               	infsnz	??_delay_ms,f,c
  8329  001F82  2A1A               	incf	??_delay_ms+1,f,c
  8330  001F84  0EFF               	movlw	255
  8331  001F86  2419               	addwf	??_delay_ms,w,c
  8332  001F88  6E1B               	movwf	delay_ms@count,c
  8333  001F8A  0EFF               	movlw	255
  8334  001F8C  201A               	addwfc	??_delay_ms+1,w,c
  8335  001F8E  6E1C               	movwf	delay_ms@count+1,c
  8336                           
  8337                           ;ST7735_TFT.c: 75: T0CON = 0x03;
  8338  001F90  0E03               	movlw	3
  8339  001F92  6ED5               	movwf	4053,c	;volatile
  8340                           
  8341                           ;ST7735_TFT.c: 77: TMR0L = count & 0x00ff;
  8342  001F94  C01B  FFD6         	movff	delay_ms@count,4054	;volatile
  8343                           
  8344                           ;ST7735_TFT.c: 78: TMR0H = count >> 8;
  8345  001F98  501C               	movf	delay_ms@count+1,w,c
  8346  001F9A  6ED7               	movwf	4055,c	;volatile
  8347                           
  8348                           ;ST7735_TFT.c: 80: INTCONbits.TMR0IF = 0;
  8349  001F9C  94F2               	bcf	intcon,2,c	;volatile
  8350                           
  8351                           ;ST7735_TFT.c: 81: T0CONbits.TMR0ON = 1;
  8352  001F9E  8ED5               	bsf	4053,7,c	;volatile
  8353                           
  8354                           ;ST7735_TFT.c: 83: while (INTCONbits.TMR0IF == 0);
  8355  001FA0  D000               	goto	l291
  8356  001FA2                     l291:
  8357  001FA2  A4F2               	btfss	intcon,2,c	;volatile
  8358  001FA4  D7FE               	goto	l291
  8359                           
  8360                           ;ST7735_TFT.c: 84: T0CONbits.TMR0ON = 0;
  8361  001FA6  9ED5               	bcf	4053,7,c	;volatile
  8362  001FA8  0012               	return		;funcret
  8363  001FAA                     __end_of_delay_ms:
  8364                           	opt stack 0
  8365                           tblptru	equ	0xFF8
  8366                           tblptrh	equ	0xFF7
  8367                           tblptrl	equ	0xFF6
  8368                           tablat	equ	0xFF5
  8369                           prodh	equ	0xFF4
  8370                           prodl	equ	0xFF3
  8371                           intcon	equ	0xFF2
  8372                           intcon2	equ	0xFF1
  8373                           postinc0	equ	0xFEE
  8374                           wreg	equ	0xFE8
  8375                           postdec1	equ	0xFE5
  8376                           fsr1l	equ	0xFE1
  8377                           indf2	equ	0xFDF
  8378                           postinc2	equ	0xFDE
  8379                           postdec2	equ	0xFDD
  8380                           fsr2h	equ	0xFDA
  8381                           fsr2l	equ	0xFD9
  8382                           status	equ	0xFD8
  8383                           
  8384 ;; *************** function ___wmul *****************
  8385 ;; Defined at:
  8386 ;;		line 15 in file "E:\XC8\sources\common\Umul16.c"
  8387 ;; Parameters:    Size  Location     Type
  8388 ;;  multiplier      2   16[COMRAM] unsigned int 
  8389 ;;  multiplicand    2   18[COMRAM] unsigned int 
  8390 ;; Auto vars:     Size  Location     Type
  8391 ;;  product         2   20[COMRAM] unsigned int 
  8392 ;; Return value:  Size  Location     Type
  8393 ;;                  2   16[COMRAM] unsigned int 
  8394 ;; Registers used:
  8395 ;;		wreg, status,2, status,0, prodl, prodh
  8396 ;; Tracked objects:
  8397 ;;		On entry : 0/0
  8398 ;;		On exit  : 0/0
  8399 ;;		Unchanged: 0/0
  8400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8401 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8402 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8403 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8404 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8405 ;;Total ram usage:        6 bytes
  8406 ;; Hardware stack levels used:    1
  8407 ;; Hardware stack levels required when called:    3
  8408 ;; This function calls:
  8409 ;;		Nothing
  8410 ;; This function is called by:
  8411 ;;		_delay_ms
  8412 ;;		_drawChar
  8413 ;;		_get_RPM
  8414 ;;		_main
  8415 ;;		_printf
  8416 ;; This function uses a non-reentrant model
  8417 ;;
  8418                           
  8419                           	psect	text36
  8420  002316                     __ptext36:
  8421                           	opt stack 0
  8422  002316                     ___wmul:
  8423                           	opt stack 26
  8424                           
  8425                           ;incstack = 0
  8426  002316  5011               	movf	___wmul@multiplier,w,c
  8427  002318  0213               	mulwf	___wmul@multiplicand,c
  8428  00231A  CFF3 F015          	movff	prodl,___wmul@product
  8429  00231E  CFF4 F016          	movff	prodh,___wmul@product+1
  8430  002322  5011               	movf	___wmul@multiplier,w,c
  8431  002324  0214               	mulwf	___wmul@multiplicand+1,c
  8432  002326  50F3               	movf	prodl,w,c
  8433  002328  2616               	addwf	___wmul@product+1,f,c
  8434  00232A  5012               	movf	___wmul@multiplier+1,w,c
  8435  00232C  0213               	mulwf	___wmul@multiplicand,c
  8436  00232E  50F3               	movf	prodl,w,c
  8437  002330  2616               	addwf	___wmul@product+1,f,c
  8438  002332  C015  F011         	movff	___wmul@product,?___wmul
  8439  002336  C016  F012         	movff	___wmul@product+1,?___wmul+1
  8440  00233A  D000               	goto	l794
  8441  00233C                     l794:
  8442  00233C  0012               	return		;funcret
  8443  00233E                     __end_of___wmul:
  8444                           	opt stack 0
  8445                           tblptru	equ	0xFF8
  8446                           tblptrh	equ	0xFF7
  8447                           tblptrl	equ	0xFF6
  8448                           tablat	equ	0xFF5
  8449                           prodh	equ	0xFF4
  8450                           prodl	equ	0xFF3
  8451                           intcon	equ	0xFF2
  8452                           intcon2	equ	0xFF1
  8453                           postinc0	equ	0xFEE
  8454                           wreg	equ	0xFE8
  8455                           postdec1	equ	0xFE5
  8456                           fsr1l	equ	0xFE1
  8457                           indf2	equ	0xFDF
  8458                           postinc2	equ	0xFDE
  8459                           postdec2	equ	0xFDD
  8460                           fsr2h	equ	0xFDA
  8461                           fsr2l	equ	0xFD9
  8462                           status	equ	0xFD8
  8463                           
  8464 ;; *************** function _Increase_Speed *****************
  8465 ;; Defined at:
  8466 ;;		line 53 in file "Fan_Support.c"
  8467 ;; Parameters:    Size  Location     Type
  8468 ;;		None
  8469 ;; Auto vars:     Size  Location     Type
  8470 ;;		None
  8471 ;; Return value:  Size  Location     Type
  8472 ;;		None               void
  8473 ;; Registers used:
  8474 ;;		wreg, status,2, status,0, cstack
  8475 ;; Tracked objects:
  8476 ;;		On entry : 0/0
  8477 ;;		On exit  : 0/0
  8478 ;;		Unchanged: 0/0
  8479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8480 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8481 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8483 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8484 ;;Total ram usage:        0 bytes
  8485 ;; Hardware stack levels used:    1
  8486 ;; Hardware stack levels required when called:    7
  8487 ;; This function calls:
  8488 ;;		_Do_Beep
  8489 ;;		_do_update_pwm
  8490 ;; This function is called by:
  8491 ;;		_main
  8492 ;; This function uses a non-reentrant model
  8493 ;;
  8494                           
  8495                           	psect	text37
  8496  002364                     __ptext37:
  8497                           	opt stack 0
  8498  002364                     _Increase_Speed:
  8499                           	opt stack 23
  8500                           
  8501                           ;Fan_Support.c: 55: if (duty_cycle==100)
  8502                           
  8503                           ;incstack = 0
  8504  002364  0E64               	movlw	100
  8505  002366  185C               	xorwf	_duty_cycle,w,c
  8506  002368  A4D8               	btfss	status,2,c
  8507  00236A  D006               	goto	l6544
  8508                           
  8509                           ;Fan_Support.c: 56: {
  8510                           ;Fan_Support.c: 58: Do_Beep();
  8511  00236C  EC5B  F012         	call	_Do_Beep	;wreg free
  8512                           
  8513                           ;Fan_Support.c: 59: do_update_pwm(duty_cycle);
  8514  002370  505C               	movf	_duty_cycle,w,c
  8515  002372  EC8B  F00C         	call	_do_update_pwm
  8516                           
  8517                           ;Fan_Support.c: 60: }
  8518  002376  D007               	goto	l496
  8519  002378                     l6544:
  8520                           
  8521                           ;Fan_Support.c: 61: else
  8522                           ;Fan_Support.c: 62: {
  8523                           ;Fan_Support.c: 63: duty_cycle = duty_cycle + 5;
  8524  002378  505C               	movf	_duty_cycle,w,c
  8525  00237A  0F05               	addlw	5
  8526  00237C  6E5C               	movwf	_duty_cycle,c
  8527                           
  8528                           ;Fan_Support.c: 64: do_update_pwm(duty_cycle);
  8529  00237E  505C               	movf	_duty_cycle,w,c
  8530  002380  EC8B  F00C         	call	_do_update_pwm
  8531  002384  D000               	goto	l496
  8532  002386                     l496:
  8533  002386  0012               	return		;funcret
  8534  002388                     __end_of_Increase_Speed:
  8535                           	opt stack 0
  8536                           tblptru	equ	0xFF8
  8537                           tblptrh	equ	0xFF7
  8538                           tblptrl	equ	0xFF6
  8539                           tablat	equ	0xFF5
  8540                           prodh	equ	0xFF4
  8541                           prodl	equ	0xFF3
  8542                           intcon	equ	0xFF2
  8543                           intcon2	equ	0xFF1
  8544                           postinc0	equ	0xFEE
  8545                           wreg	equ	0xFE8
  8546                           postdec1	equ	0xFE5
  8547                           fsr1l	equ	0xFE1
  8548                           indf2	equ	0xFDF
  8549                           postinc2	equ	0xFDE
  8550                           postdec2	equ	0xFDD
  8551                           fsr2h	equ	0xFDA
  8552                           fsr2l	equ	0xFD9
  8553                           status	equ	0xFD8
  8554                           
  8555 ;; *************** function _Do_Init *****************
  8556 ;; Defined at:
  8557 ;;		line 101 in file "Lab11pA_Restart.c"
  8558 ;; Parameters:    Size  Location     Type
  8559 ;;		None
  8560 ;; Auto vars:     Size  Location     Type
  8561 ;;		None
  8562 ;; Return value:  Size  Location     Type
  8563 ;;		None               void
  8564 ;; Registers used:
  8565 ;;		wreg, status,2, status,0, cstack
  8566 ;; Tracked objects:
  8567 ;;		On entry : 0/0
  8568 ;;		On exit  : 0/0
  8569 ;;		Unchanged: 0/0
  8570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8571 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8572 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8573 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8574 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8575 ;;Total ram usage:        0 bytes
  8576 ;; Hardware stack levels used:    1
  8577 ;; Hardware stack levels required when called:    7
  8578 ;; This function calls:
  8579 ;;		_DS1621_Init
  8580 ;;		_I2C_Init
  8581 ;;		_init_INTERRUPT
  8582 ;;		_init_UART
  8583 ;; This function is called by:
  8584 ;;		_main
  8585 ;; This function uses a non-reentrant model
  8586 ;;
  8587                           
  8588                           	psect	text38
  8589  002044                     __ptext38:
  8590                           	opt stack 0
  8591  002044                     _Do_Init:
  8592                           	opt stack 23
  8593                           
  8594                           ;Lab11pA_Restart.c: 103: init_UART();
  8595                           
  8596                           ;incstack = 0
  8597  002044  EC51  F012         	call	_init_UART	;wreg free
  8598                           
  8599                           ;Lab11pA_Restart.c: 104: OSCCON=0x70;
  8600  002048  0E70               	movlw	112
  8601  00204A  6ED3               	movwf	4051,c	;volatile
  8602                           
  8603                           ;Lab11pA_Restart.c: 106: ADCON1=0x0F;
  8604  00204C  0E0F               	movlw	15
  8605  00204E  6EC1               	movwf	4033,c	;volatile
  8606                           
  8607                           ;Lab11pA_Restart.c: 107: TRISA = 0x00;
  8608  002050  0E00               	movlw	0
  8609  002052  6E92               	movwf	3986,c	;volatile
  8610                           
  8611                           ;Lab11pA_Restart.c: 108: TRISB = 0x01;
  8612  002054  0E01               	movlw	1
  8613  002056  6E93               	movwf	3987,c	;volatile
  8614                           
  8615                           ;Lab11pA_Restart.c: 109: TRISC = 0x02;
  8616  002058  0E02               	movlw	2
  8617  00205A  6E94               	movwf	3988,c	;volatile
  8618                           
  8619                           ;Lab11pA_Restart.c: 110: TRISD = 0x00;
  8620  00205C  0E00               	movlw	0
  8621  00205E  6E95               	movwf	3989,c	;volatile
  8622                           
  8623                           ;Lab11pA_Restart.c: 111: TRISE = 0x00;
  8624  002060  0E00               	movlw	0
  8625  002062  6E96               	movwf	3990,c	;volatile
  8626                           
  8627                           ;Lab11pA_Restart.c: 113: RBPU=0;
  8628  002064  9EF1               	bcf	intcon2,7,c	;volatile
  8629                           
  8630                           ;Lab11pA_Restart.c: 114: TMR3L = 0x00;
  8631  002066  0E00               	movlw	0
  8632  002068  6EB2               	movwf	4018,c	;volatile
  8633                           
  8634                           ;Lab11pA_Restart.c: 115: T3CON = 0x03;
  8635  00206A  0E03               	movlw	3
  8636  00206C  6EB1               	movwf	4017,c	;volatile
  8637                           
  8638                           ;Lab11pA_Restart.c: 116: I2C_Init(100000);
  8639  00206E  0EA0               	movlw	160
  8640  002070  6E11               	movwf	I2C_Init@c,c
  8641  002072  0E86               	movlw	134
  8642  002074  6E12               	movwf	I2C_Init@c+1,c
  8643  002076  0E01               	movlw	1
  8644  002078  6E13               	movwf	I2C_Init@c+2,c
  8645  00207A  0E00               	movlw	0
  8646  00207C  6E14               	movwf	I2C_Init@c+3,c
  8647  00207E  ECC2  F012         	call	_I2C_Init	;wreg free
  8648                           
  8649                           ;Lab11pA_Restart.c: 118: DS1621_Init();
  8650  002082  EC08  F012         	call	_DS1621_Init	;wreg free
  8651                           
  8652                           ;Lab11pA_Restart.c: 119: init_INTERRUPT();
  8653  002086  EC2B  F011         	call	_init_INTERRUPT	;wreg free
  8654                           
  8655                           ;Lab11pA_Restart.c: 120: FAN = 0;
  8656  00208A  0E00               	movlw	0
  8657  00208C  6E50               	movwf	_FAN,c
  8658  00208E  0012               	return		;funcret
  8659  002090                     __end_of_Do_Init:
  8660                           	opt stack 0
  8661                           tblptru	equ	0xFF8
  8662                           tblptrh	equ	0xFF7
  8663                           tblptrl	equ	0xFF6
  8664                           tablat	equ	0xFF5
  8665                           prodh	equ	0xFF4
  8666                           prodl	equ	0xFF3
  8667                           intcon	equ	0xFF2
  8668                           intcon2	equ	0xFF1
  8669                           postinc0	equ	0xFEE
  8670                           wreg	equ	0xFE8
  8671                           postdec1	equ	0xFE5
  8672                           fsr1l	equ	0xFE1
  8673                           indf2	equ	0xFDF
  8674                           postinc2	equ	0xFDE
  8675                           postdec2	equ	0xFDD
  8676                           fsr2h	equ	0xFDA
  8677                           fsr2l	equ	0xFD9
  8678                           status	equ	0xFD8
  8679                           
  8680 ;; *************** function _init_UART *****************
  8681 ;; Defined at:
  8682 ;;		line 95 in file "Lab11pA_Restart.c"
  8683 ;; Parameters:    Size  Location     Type
  8684 ;;		None
  8685 ;; Auto vars:     Size  Location     Type
  8686 ;;		None
  8687 ;; Return value:  Size  Location     Type
  8688 ;;		None               void
  8689 ;; Registers used:
  8690 ;;		wreg, status,2, cstack
  8691 ;; Tracked objects:
  8692 ;;		On entry : 0/0
  8693 ;;		On exit  : 0/0
  8694 ;;		Unchanged: 0/0
  8695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8696 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8697 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8698 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8699 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8700 ;;Total ram usage:        0 bytes
  8701 ;; Hardware stack levels used:    1
  8702 ;; Hardware stack levels required when called:    4
  8703 ;; This function calls:
  8704 ;;		_OpenUSART
  8705 ;; This function is called by:
  8706 ;;		_Do_Init
  8707 ;; This function uses a non-reentrant model
  8708 ;;
  8709                           
  8710                           	psect	text39
  8711  0024A2                     __ptext39:
  8712                           	opt stack 0
  8713  0024A2                     _init_UART:
  8714                           	opt stack 25
  8715                           
  8716                           ;Lab11pA_Restart.c: 97: OpenUSART (0b01111111 & 0b10111111 & 0b11111110 & 0b11111101 & 0
      +                          b11111111 & 0b11111111, 25);
  8717                           
  8718                           ;incstack = 0
  8719  0024A2  0E00               	movlw	0
  8720  0024A4  6E12               	movwf	OpenUSART@spbrg+1,c
  8721  0024A6  0E19               	movlw	25
  8722  0024A8  6E11               	movwf	OpenUSART@spbrg,c
  8723  0024AA  0E3C               	movlw	60
  8724  0024AC  EC78  F00E         	call	_OpenUSART
  8725                           
  8726                           ;Lab11pA_Restart.c: 98: OSCCON = 0x70;
  8727  0024B0  0E70               	movlw	112
  8728  0024B2  6ED3               	movwf	4051,c	;volatile
  8729  0024B4  0012               	return		;funcret
  8730  0024B6                     __end_of_init_UART:
  8731                           	opt stack 0
  8732                           tblptru	equ	0xFF8
  8733                           tblptrh	equ	0xFF7
  8734                           tblptrl	equ	0xFF6
  8735                           tablat	equ	0xFF5
  8736                           prodh	equ	0xFF4
  8737                           prodl	equ	0xFF3
  8738                           intcon	equ	0xFF2
  8739                           intcon2	equ	0xFF1
  8740                           postinc0	equ	0xFEE
  8741                           wreg	equ	0xFE8
  8742                           postdec1	equ	0xFE5
  8743                           fsr1l	equ	0xFE1
  8744                           indf2	equ	0xFDF
  8745                           postinc2	equ	0xFDE
  8746                           postdec2	equ	0xFDD
  8747                           fsr2h	equ	0xFDA
  8748                           fsr2l	equ	0xFD9
  8749                           status	equ	0xFD8
  8750                           
  8751 ;; *************** function _OpenUSART *****************
  8752 ;; Defined at:
  8753 ;;		line 73 in file "E:\XC8\sources\pic18\plib\USART\uopen.c"
  8754 ;; Parameters:    Size  Location     Type
  8755 ;;  config          1    wreg     unsigned char 
  8756 ;;  spbrg           2   16[COMRAM] unsigned int 
  8757 ;; Auto vars:     Size  Location     Type
  8758 ;;  config          1   18[COMRAM] unsigned char 
  8759 ;; Return value:  Size  Location     Type
  8760 ;;		None               void
  8761 ;; Registers used:
  8762 ;;		wreg, status,2
  8763 ;; Tracked objects:
  8764 ;;		On entry : 0/0
  8765 ;;		On exit  : 0/0
  8766 ;;		Unchanged: 0/0
  8767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8768 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8769 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8770 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8771 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8772 ;;Total ram usage:        3 bytes
  8773 ;; Hardware stack levels used:    1
  8774 ;; Hardware stack levels required when called:    3
  8775 ;; This function calls:
  8776 ;;		Nothing
  8777 ;; This function is called by:
  8778 ;;		_init_UART
  8779 ;; This function uses a non-reentrant model
  8780 ;;
  8781                           
  8782                           	psect	text40
  8783  001CF0                     __ptext40:
  8784                           	opt stack 0
  8785  001CF0                     _OpenUSART:
  8786                           	opt stack 25
  8787                           
  8788                           ;incstack = 0
  8789                           ;OpenUSART@config stored from wreg
  8790  001CF0  6E13               	movwf	OpenUSART@config,c
  8791  001CF2  0E00               	movlw	0
  8792  001CF4  6EAC               	movwf	4012,c	;volatile
  8793  001CF6  0E00               	movlw	0
  8794  001CF8  6EAB               	movwf	4011,c	;volatile
  8795  001CFA  A013               	btfss	OpenUSART@config,0,c
  8796  001CFC  D002               	goto	l5878
  8797  001CFE  88AC               	bsf	4012,4,c	;volatile
  8798  001D00  D000               	goto	l5878
  8799  001D02                     l5878:
  8800  001D02  A213               	btfss	OpenUSART@config,1,c
  8801  001D04  D003               	goto	l5882
  8802  001D06  8CAC               	bsf	4012,6,c	;volatile
  8803  001D08  8CAB               	bsf	4011,6,c	;volatile
  8804  001D0A  D000               	goto	l5882
  8805  001D0C                     l5882:
  8806  001D0C  A413               	btfss	OpenUSART@config,2,c
  8807  001D0E  D002               	goto	l5886
  8808  001D10  8EAC               	bsf	4012,7,c	;volatile
  8809  001D12  D000               	goto	l5886
  8810  001D14                     l5886:
  8811  001D14  A613               	btfss	OpenUSART@config,3,c
  8812  001D16  D002               	goto	l782
  8813  001D18  88AB               	bsf	4011,4,c	;volatile
  8814  001D1A  D002               	goto	l5890
  8815  001D1C                     l782:
  8816  001D1C  8AAB               	bsf	4011,5,c	;volatile
  8817  001D1E  D000               	goto	l5890
  8818  001D20                     l5890:
  8819  001D20  B813               	btfsc	OpenUSART@config,4,c
  8820  001D22  84AC               	bsf	4012,2,c	;volatile
  8821  001D24  989E               	bcf	3998,4,c	;volatile
  8822  001D26  AA13               	btfss	OpenUSART@config,5,c
  8823  001D28  D002               	goto	l5898
  8824  001D2A  86AB               	bsf	4011,3,c	;volatile
  8825  001D2C  D000               	goto	l5898
  8826  001D2E                     l5898:
  8827  001D2E  AC13               	btfss	OpenUSART@config,6,c
  8828  001D30  D002               	goto	l786
  8829  001D32  8A9D               	bsf	3997,5,c	;volatile
  8830  001D34  D001               	goto	l787
  8831  001D36                     l786:
  8832  001D36  9A9D               	bcf	3997,5,c	;volatile
  8833  001D38                     l787:
  8834  001D38  9A9E               	bcf	3998,5,c	;volatile
  8835  001D3A  AE13               	btfss	OpenUSART@config,7,c
  8836  001D3C  D002               	goto	l788
  8837  001D3E  889D               	bsf	3997,4,c	;volatile
  8838  001D40  D001               	goto	l789
  8839  001D42                     l788:
  8840  001D42  989D               	bcf	3997,4,c	;volatile
  8841  001D44                     l789:
  8842  001D44  C011  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  8843  001D48  5012               	movf	OpenUSART@spbrg+1,w,c
  8844  001D4A  6EB0               	movwf	4016,c	;volatile
  8845  001D4C  8AAC               	bsf	4012,5,c	;volatile
  8846  001D4E  8EAB               	bsf	4011,7,c	;volatile
  8847  001D50  9C94               	bcf	3988,6,c	;volatile
  8848  001D52  8E94               	bsf	3988,7,c	;volatile
  8849  001D54  B8AC               	btfsc	4012,4,c	;volatile
  8850  001D56  BEAC               	btfsc	4012,7,c	;volatile
  8851  001D58  D002               	goto	l791
  8852  001D5A  8C94               	bsf	3988,6,c	;volatile
  8853  001D5C  D000               	goto	l791
  8854  001D5E                     l791:
  8855  001D5E  0012               	return		;funcret
  8856  001D60                     __end_of_OpenUSART:
  8857                           	opt stack 0
  8858                           tblptru	equ	0xFF8
  8859                           tblptrh	equ	0xFF7
  8860                           tblptrl	equ	0xFF6
  8861                           tablat	equ	0xFF5
  8862                           prodh	equ	0xFF4
  8863                           prodl	equ	0xFF3
  8864                           intcon	equ	0xFF2
  8865                           intcon2	equ	0xFF1
  8866                           postinc0	equ	0xFEE
  8867                           wreg	equ	0xFE8
  8868                           postdec1	equ	0xFE5
  8869                           fsr1l	equ	0xFE1
  8870                           indf2	equ	0xFDF
  8871                           postinc2	equ	0xFDE
  8872                           postdec2	equ	0xFDD
  8873                           fsr2h	equ	0xFDA
  8874                           fsr2l	equ	0xFD9
  8875                           status	equ	0xFD8
  8876                           
  8877 ;; *************** function _init_INTERRUPT *****************
  8878 ;; Defined at:
  8879 ;;		line 15 in file "Interrupt.c"
  8880 ;; Parameters:    Size  Location     Type
  8881 ;;		None
  8882 ;; Auto vars:     Size  Location     Type
  8883 ;;		None
  8884 ;; Return value:  Size  Location     Type
  8885 ;;		None               void
  8886 ;; Registers used:
  8887 ;;		wreg, status,2
  8888 ;; Tracked objects:
  8889 ;;		On entry : 0/0
  8890 ;;		On exit  : 0/0
  8891 ;;		Unchanged: 0/0
  8892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8893 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8894 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8895 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8896 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8897 ;;Total ram usage:        0 bytes
  8898 ;; Hardware stack levels used:    1
  8899 ;; Hardware stack levels required when called:    3
  8900 ;; This function calls:
  8901 ;;		Nothing
  8902 ;; This function is called by:
  8903 ;;		_Do_Init
  8904 ;; This function uses a non-reentrant model
  8905 ;;
  8906                           
  8907                           	psect	text41
  8908  002256                     __ptext41:
  8909                           	opt stack 0
  8910  002256                     _init_INTERRUPT:
  8911                           	opt stack 26
  8912                           
  8913                           ;Interrupt.c: 17: INTCONbits.INT0IF = 0;
  8914                           
  8915                           ;incstack = 0
  8916  002256  92F2               	bcf	intcon,1,c	;volatile
  8917                           
  8918                           ;Interrupt.c: 18: INTCON2bits.INTEDG0 = 0;
  8919  002258  9CF1               	bcf	intcon2,6,c	;volatile
  8920                           
  8921                           ;Interrupt.c: 19: INTCONbits.INT0IE = 1;
  8922  00225A  88F2               	bsf	intcon,4,c	;volatile
  8923                           
  8924                           ;Interrupt.c: 20: TMR1H = 0;
  8925  00225C  0E00               	movlw	0
  8926  00225E  6ECF               	movwf	4047,c	;volatile
  8927                           
  8928                           ;Interrupt.c: 21: TMR1L = 0;
  8929  002260  0E00               	movlw	0
  8930  002262  6ECE               	movwf	4046,c	;volatile
  8931                           
  8932                           ;Interrupt.c: 22: PIR1bits.TMR1IF = 0;
  8933  002264  909E               	bcf	3998,0,c	;volatile
  8934                           
  8935                           ;Interrupt.c: 23: PIE1bits.TMR1IE = 1;
  8936  002266  809D               	bsf	3997,0,c	;volatile
  8937                           
  8938                           ;Interrupt.c: 24: INTCONbits.PEIE = 1;
  8939  002268  8CF2               	bsf	intcon,6,c	;volatile
  8940                           
  8941                           ;Interrupt.c: 25: INTCONbits.GIE = 1;
  8942  00226A  8EF2               	bsf	intcon,7,c	;volatile
  8943                           
  8944                           ;Interrupt.c: 26: nec_ok = 0;
  8945  00226C  0E00               	movlw	0
  8946  00226E  0100               	movlb	0	; () banked
  8947  002270  6FEE               	movwf	(_nec_ok+1)& (0+255),b
  8948  002272  0E00               	movlw	0
  8949  002274  6FED               	movwf	_nec_ok& (0+255),b
  8950                           
  8951                           ;Interrupt.c: 27: Nec_code = 0x0;
  8952  002276  0E00               	movlw	0
  8953  002278  0100               	movlb	0	; () banked
  8954  00227A  6FE5               	movwf	_Nec_code& (0+255),b
  8955  00227C  0E00               	movlw	0
  8956  00227E  6FE6               	movwf	(_Nec_code+1)& (0+255),b
  8957  002280  0E00               	movlw	0
  8958  002282  6FE7               	movwf	(_Nec_code+2)& (0+255),b
  8959  002284  0E00               	movlw	0
  8960  002286  6FE8               	movwf	(_Nec_code+3)& (0+255),b
  8961                           
  8962                           ; BSR set to: 0
  8963  002288  0012               	return		;funcret
  8964  00228A                     __end_of_init_INTERRUPT:
  8965                           	opt stack 0
  8966                           tblptru	equ	0xFF8
  8967                           tblptrh	equ	0xFF7
  8968                           tblptrl	equ	0xFF6
  8969                           tablat	equ	0xFF5
  8970                           prodh	equ	0xFF4
  8971                           prodl	equ	0xFF3
  8972                           intcon	equ	0xFF2
  8973                           intcon2	equ	0xFF1
  8974                           postinc0	equ	0xFEE
  8975                           wreg	equ	0xFE8
  8976                           postdec1	equ	0xFE5
  8977                           fsr1l	equ	0xFE1
  8978                           indf2	equ	0xFDF
  8979                           postinc2	equ	0xFDE
  8980                           postdec2	equ	0xFDD
  8981                           fsr2h	equ	0xFDA
  8982                           fsr2l	equ	0xFD9
  8983                           status	equ	0xFD8
  8984                           
  8985 ;; *************** function _I2C_Init *****************
  8986 ;; Defined at:
  8987 ;;		line 14 in file "I2C.c"
  8988 ;; Parameters:    Size  Location     Type
  8989 ;;  c               4   16[COMRAM] unsigned long 
  8990 ;; Auto vars:     Size  Location     Type
  8991 ;;		None
  8992 ;; Return value:  Size  Location     Type
  8993 ;;		None               void
  8994 ;; Registers used:
  8995 ;;		wreg, cstack
  8996 ;; Tracked objects:
  8997 ;;		On entry : 0/0
  8998 ;;		On exit  : 0/0
  8999 ;;		Unchanged: 0/0
  9000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9001 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9002 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9003 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9004 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9005 ;;Total ram usage:        4 bytes
  9006 ;; Hardware stack levels used:    1
  9007 ;; Hardware stack levels required when called:    4
  9008 ;; This function calls:
  9009 ;;		_i2cHighScl
  9010 ;;		_i2cHighSda
  9011 ;; This function is called by:
  9012 ;;		_Do_Init
  9013 ;; This function uses a non-reentrant model
  9014 ;;
  9015                           
  9016                           	psect	text42
  9017  002584                     __ptext42:
  9018                           	opt stack 0
  9019  002584                     _I2C_Init:
  9020                           	opt stack 25
  9021                           
  9022                           ;I2C.c: 16: i2cHighScl();
  9023                           
  9024                           ; BSR set to: 0
  9025                           ;incstack = 0
  9026  002584  ECB1  F012         	call	_i2cHighScl	;wreg free
  9027                           
  9028                           ;I2C.c: 17: i2cHighSda();
  9029  002588  ECD9  F012         	call	_i2cHighSda	;wreg free
  9030  00258C  0012               	return		;funcret
  9031  00258E                     __end_of_I2C_Init:
  9032                           	opt stack 0
  9033                           tblptru	equ	0xFF8
  9034                           tblptrh	equ	0xFF7
  9035                           tblptrl	equ	0xFF6
  9036                           tablat	equ	0xFF5
  9037                           prodh	equ	0xFF4
  9038                           prodl	equ	0xFF3
  9039                           intcon	equ	0xFF2
  9040                           intcon2	equ	0xFF1
  9041                           postinc0	equ	0xFEE
  9042                           wreg	equ	0xFE8
  9043                           postdec1	equ	0xFE5
  9044                           fsr1l	equ	0xFE1
  9045                           indf2	equ	0xFDF
  9046                           postinc2	equ	0xFDE
  9047                           postdec2	equ	0xFDD
  9048                           fsr2h	equ	0xFDA
  9049                           fsr2l	equ	0xFD9
  9050                           status	equ	0xFD8
  9051                           
  9052 ;; *************** function _DS1621_Init *****************
  9053 ;; Defined at:
  9054 ;;		line 21 in file "I2C_Support.c"
  9055 ;; Parameters:    Size  Location     Type
  9056 ;;		None
  9057 ;; Auto vars:     Size  Location     Type
  9058 ;;  Device          1   21[COMRAM] unsigned char 
  9059 ;; Return value:  Size  Location     Type
  9060 ;;		None               void
  9061 ;; Registers used:
  9062 ;;		wreg, status,2, status,0, cstack
  9063 ;; Tracked objects:
  9064 ;;		On entry : 0/0
  9065 ;;		On exit  : 0/0
  9066 ;;		Unchanged: 0/0
  9067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9068 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9069 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9070 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9071 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9072 ;;Total ram usage:        1 bytes
  9073 ;; Hardware stack levels used:    1
  9074 ;; Hardware stack levels required when called:    6
  9075 ;; This function calls:
  9076 ;;		_I2C_Write_Cmd_Only
  9077 ;;		_I2C_Write_Cmd_Write_Data
  9078 ;; This function is called by:
  9079 ;;		_Do_Init
  9080 ;; This function uses a non-reentrant model
  9081 ;;
  9082                           
  9083                           	psect	text43
  9084  002410                     __ptext43:
  9085                           	opt stack 0
  9086  002410                     _DS1621_Init:
  9087                           	opt stack 23
  9088                           
  9089                           ;I2C_Support.c: 23: char Device = 0x48;
  9090                           
  9091                           ;incstack = 0
  9092  002410  0E48               	movlw	72
  9093  002412  6E16               	movwf	DS1621_Init@Device,c
  9094                           
  9095                           ;I2C_Support.c: 24: I2C_Write_Cmd_Write_Data (Device, 0xAC, 0x02);
  9096  002414  0EAC               	movlw	172
  9097  002416  6E13               	movwf	I2C_Write_Cmd_Write_Data@Cmd,c
  9098  002418  0E02               	movlw	2
  9099  00241A  6E14               	movwf	I2C_Write_Cmd_Write_Data@Data_Out,c
  9100  00241C  5016               	movf	DS1621_Init@Device,w,c
  9101  00241E  ECF8  F011         	call	_I2C_Write_Cmd_Write_Data
  9102                           
  9103                           ;I2C_Support.c: 25: I2C_Write_Cmd_Only(Device, 0xEE);
  9104  002422  0EEE               	movlw	238
  9105  002424  6E13               	movwf	I2C_Write_Cmd_Only@Cmd,c
  9106  002426  5016               	movf	DS1621_Init@Device,w,c
  9107  002428  EC25  F012         	call	_I2C_Write_Cmd_Only
  9108  00242C  0012               	return		;funcret
  9109  00242E                     __end_of_DS1621_Init:
  9110                           	opt stack 0
  9111                           tblptru	equ	0xFF8
  9112                           tblptrh	equ	0xFF7
  9113                           tblptrl	equ	0xFF6
  9114                           tablat	equ	0xFF5
  9115                           prodh	equ	0xFF4
  9116                           prodl	equ	0xFF3
  9117                           intcon	equ	0xFF2
  9118                           intcon2	equ	0xFF1
  9119                           postinc0	equ	0xFEE
  9120                           wreg	equ	0xFE8
  9121                           postdec1	equ	0xFE5
  9122                           fsr1l	equ	0xFE1
  9123                           indf2	equ	0xFDF
  9124                           postinc2	equ	0xFDE
  9125                           postdec2	equ	0xFDD
  9126                           fsr2h	equ	0xFDA
  9127                           fsr2l	equ	0xFD9
  9128                           status	equ	0xFD8
  9129                           
  9130 ;; *************** function _I2C_Write_Cmd_Write_Data *****************
  9131 ;; Defined at:
  9132 ;;		line 152 in file "I2C.c"
  9133 ;; Parameters:    Size  Location     Type
  9134 ;;  Device          1    wreg     unsigned char 
  9135 ;;  Cmd             1   18[COMRAM] unsigned char 
  9136 ;;  Data_Out        1   19[COMRAM] unsigned char 
  9137 ;; Auto vars:     Size  Location     Type
  9138 ;;  Device          1   20[COMRAM] unsigned char 
  9139 ;; Return value:  Size  Location     Type
  9140 ;;		None               void
  9141 ;; Registers used:
  9142 ;;		wreg, status,2, status,0, cstack
  9143 ;; Tracked objects:
  9144 ;;		On entry : 0/0
  9145 ;;		On exit  : 0/0
  9146 ;;		Unchanged: 0/0
  9147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9148 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9149 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9150 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9151 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9152 ;;Total ram usage:        3 bytes
  9153 ;; Hardware stack levels used:    1
  9154 ;; Hardware stack levels required when called:    5
  9155 ;; This function calls:
  9156 ;;		_I2C_Start
  9157 ;;		_I2C_Stop
  9158 ;;		_I2C_Write
  9159 ;; This function is called by:
  9160 ;;		_DS1621_Init
  9161 ;; This function uses a non-reentrant model
  9162 ;;
  9163                           
  9164                           	psect	text44
  9165  0023F0                     __ptext44:
  9166                           	opt stack 0
  9167  0023F0                     _I2C_Write_Cmd_Write_Data:
  9168                           	opt stack 23
  9169                           
  9170                           ;incstack = 0
  9171                           ;I2C_Write_Cmd_Write_Data@Device stored from wreg
  9172  0023F0  6E15               	movwf	I2C_Write_Cmd_Write_Data@Device,c
  9173                           
  9174                           ;I2C.c: 154: I2C_Start();
  9175  0023F2  EC80  F012         	call	_I2C_Start	;wreg free
  9176                           
  9177                           ;I2C.c: 155: I2C_Write((Device << 1) | 0);
  9178  0023F6  5015               	movf	I2C_Write_Cmd_Write_Data@Device,w,c
  9179  0023F8  2415               	addwf	I2C_Write_Cmd_Write_Data@Device,w,c
  9180  0023FA  ECEE  F010         	call	_I2C_Write
  9181                           
  9182                           ;I2C.c: 156: I2C_Write(Cmd);
  9183  0023FE  5013               	movf	I2C_Write_Cmd_Write_Data@Cmd,w,c
  9184  002400  ECEE  F010         	call	_I2C_Write
  9185                           
  9186                           ;I2C.c: 157: I2C_Write(Data_Out);
  9187  002404  5014               	movf	I2C_Write_Cmd_Write_Data@Data_Out,w,c
  9188  002406  ECEE  F010         	call	_I2C_Write
  9189                           
  9190                           ;I2C.c: 158: I2C_Stop();
  9191  00240A  EC77  F012         	call	_I2C_Stop	;wreg free
  9192  00240E  0012               	return		;funcret
  9193  002410                     __end_of_I2C_Write_Cmd_Write_Data:
  9194                           	opt stack 0
  9195                           tblptru	equ	0xFF8
  9196                           tblptrh	equ	0xFF7
  9197                           tblptrl	equ	0xFF6
  9198                           tablat	equ	0xFF5
  9199                           prodh	equ	0xFF4
  9200                           prodl	equ	0xFF3
  9201                           intcon	equ	0xFF2
  9202                           intcon2	equ	0xFF1
  9203                           postinc0	equ	0xFEE
  9204                           wreg	equ	0xFE8
  9205                           postdec1	equ	0xFE5
  9206                           fsr1l	equ	0xFE1
  9207                           indf2	equ	0xFDF
  9208                           postinc2	equ	0xFDE
  9209                           postdec2	equ	0xFDD
  9210                           fsr2h	equ	0xFDA
  9211                           fsr2l	equ	0xFD9
  9212                           status	equ	0xFD8
  9213                           
  9214 ;; *************** function _I2C_Write_Cmd_Only *****************
  9215 ;; Defined at:
  9216 ;;		line 144 in file "I2C.c"
  9217 ;; Parameters:    Size  Location     Type
  9218 ;;  Device          1    wreg     unsigned char 
  9219 ;;  Cmd             1   18[COMRAM] unsigned char 
  9220 ;; Auto vars:     Size  Location     Type
  9221 ;;  Device          1   19[COMRAM] unsigned char 
  9222 ;; Return value:  Size  Location     Type
  9223 ;;		None               void
  9224 ;; Registers used:
  9225 ;;		wreg, status,2, status,0, cstack
  9226 ;; Tracked objects:
  9227 ;;		On entry : 0/0
  9228 ;;		On exit  : 0/0
  9229 ;;		Unchanged: 0/0
  9230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9231 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9232 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9233 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9234 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9235 ;;Total ram usage:        2 bytes
  9236 ;; Hardware stack levels used:    1
  9237 ;; Hardware stack levels required when called:    5
  9238 ;; This function calls:
  9239 ;;		_I2C_Start
  9240 ;;		_I2C_Stop
  9241 ;;		_I2C_Write
  9242 ;; This function is called by:
  9243 ;;		_DS1621_Init
  9244 ;; This function uses a non-reentrant model
  9245 ;;
  9246                           
  9247                           	psect	text45
  9248  00244A                     __ptext45:
  9249                           	opt stack 0
  9250  00244A                     _I2C_Write_Cmd_Only:
  9251                           	opt stack 23
  9252                           
  9253                           ;incstack = 0
  9254                           ;I2C_Write_Cmd_Only@Device stored from wreg
  9255  00244A  6E14               	movwf	I2C_Write_Cmd_Only@Device,c
  9256                           
  9257                           ;I2C.c: 146: I2C_Start();
  9258  00244C  EC80  F012         	call	_I2C_Start	;wreg free
  9259                           
  9260                           ;I2C.c: 147: I2C_Write((Device << 1) | 0);
  9261  002450  5014               	movf	I2C_Write_Cmd_Only@Device,w,c
  9262  002452  2414               	addwf	I2C_Write_Cmd_Only@Device,w,c
  9263  002454  ECEE  F010         	call	_I2C_Write
  9264                           
  9265                           ;I2C.c: 148: I2C_Write(Cmd);
  9266  002458  5013               	movf	I2C_Write_Cmd_Only@Cmd,w,c
  9267  00245A  ECEE  F010         	call	_I2C_Write
  9268                           
  9269                           ;I2C.c: 149: I2C_Stop();
  9270  00245E  EC77  F012         	call	_I2C_Stop	;wreg free
  9271  002462  0012               	return		;funcret
  9272  002464                     __end_of_I2C_Write_Cmd_Only:
  9273                           	opt stack 0
  9274                           tblptru	equ	0xFF8
  9275                           tblptrh	equ	0xFF7
  9276                           tblptrl	equ	0xFF6
  9277                           tablat	equ	0xFF5
  9278                           prodh	equ	0xFF4
  9279                           prodl	equ	0xFF3
  9280                           intcon	equ	0xFF2
  9281                           intcon2	equ	0xFF1
  9282                           postinc0	equ	0xFEE
  9283                           wreg	equ	0xFE8
  9284                           postdec1	equ	0xFE5
  9285                           fsr1l	equ	0xFE1
  9286                           indf2	equ	0xFDF
  9287                           postinc2	equ	0xFDE
  9288                           postdec2	equ	0xFDD
  9289                           fsr2h	equ	0xFDA
  9290                           fsr2l	equ	0xFD9
  9291                           status	equ	0xFD8
  9292                           
  9293 ;; *************** function _Decrease_Speed *****************
  9294 ;; Defined at:
  9295 ;;		line 68 in file "Fan_Support.c"
  9296 ;; Parameters:    Size  Location     Type
  9297 ;;		None
  9298 ;; Auto vars:     Size  Location     Type
  9299 ;;		None
  9300 ;; Return value:  Size  Location     Type
  9301 ;;		None               void
  9302 ;; Registers used:
  9303 ;;		wreg, status,2, status,0, cstack
  9304 ;; Tracked objects:
  9305 ;;		On entry : 0/0
  9306 ;;		On exit  : 0/0
  9307 ;;		Unchanged: 0/0
  9308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9310 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9311 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9312 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9313 ;;Total ram usage:        0 bytes
  9314 ;; Hardware stack levels used:    1
  9315 ;; Hardware stack levels required when called:    7
  9316 ;; This function calls:
  9317 ;;		_Do_Beep
  9318 ;;		_do_update_pwm
  9319 ;; This function is called by:
  9320 ;;		_main
  9321 ;; This function uses a non-reentrant model
  9322 ;;
  9323                           
  9324                           	psect	text46
  9325  0023CE                     __ptext46:
  9326                           	opt stack 0
  9327  0023CE                     _Decrease_Speed:
  9328                           	opt stack 23
  9329                           
  9330                           ;Fan_Support.c: 70: if (duty_cycle==0)
  9331                           
  9332                           ;incstack = 0
  9333  0023CE  505C               	movf	_duty_cycle,w,c
  9334  0023D0  A4D8               	btfss	status,2,c
  9335  0023D2  D006               	goto	l6552
  9336                           
  9337                           ;Fan_Support.c: 71: {
  9338                           ;Fan_Support.c: 73: Do_Beep();
  9339  0023D4  EC5B  F012         	call	_Do_Beep	;wreg free
  9340                           
  9341                           ;Fan_Support.c: 74: do_update_pwm(duty_cycle);
  9342  0023D8  505C               	movf	_duty_cycle,w,c
  9343  0023DA  EC8B  F00C         	call	_do_update_pwm
  9344                           
  9345                           ;Fan_Support.c: 75: }
  9346  0023DE  D007               	goto	l501
  9347  0023E0                     l6552:
  9348                           
  9349                           ;Fan_Support.c: 76: else
  9350                           ;Fan_Support.c: 77: {
  9351                           ;Fan_Support.c: 78: duty_cycle = duty_cycle - 5;
  9352  0023E0  505C               	movf	_duty_cycle,w,c
  9353  0023E2  0FFB               	addlw	251
  9354  0023E4  6E5C               	movwf	_duty_cycle,c
  9355                           
  9356                           ;Fan_Support.c: 79: do_update_pwm(duty_cycle);
  9357  0023E6  505C               	movf	_duty_cycle,w,c
  9358  0023E8  EC8B  F00C         	call	_do_update_pwm
  9359  0023EC  D000               	goto	l501
  9360  0023EE                     l501:
  9361  0023EE  0012               	return		;funcret
  9362  0023F0                     __end_of_Decrease_Speed:
  9363                           	opt stack 0
  9364                           tblptru	equ	0xFF8
  9365                           tblptrh	equ	0xFF7
  9366                           tblptrl	equ	0xFF6
  9367                           tablat	equ	0xFF5
  9368                           prodh	equ	0xFF4
  9369                           prodl	equ	0xFF3
  9370                           intcon	equ	0xFF2
  9371                           intcon2	equ	0xFF1
  9372                           postinc0	equ	0xFEE
  9373                           wreg	equ	0xFE8
  9374                           postdec1	equ	0xFE5
  9375                           fsr1l	equ	0xFE1
  9376                           indf2	equ	0xFDF
  9377                           postinc2	equ	0xFDE
  9378                           postdec2	equ	0xFDD
  9379                           fsr2h	equ	0xFDA
  9380                           fsr2l	equ	0xFD9
  9381                           status	equ	0xFD8
  9382                           
  9383 ;; *************** function _Do_Beep *****************
  9384 ;; Defined at:
  9385 ;;		line 11 in file "Utils.c"
  9386 ;; Parameters:    Size  Location     Type
  9387 ;;		None
  9388 ;; Auto vars:     Size  Location     Type
  9389 ;;		None
  9390 ;; Return value:  Size  Location     Type
  9391 ;;		None               void
  9392 ;; Registers used:
  9393 ;;		wreg, status,2, status,0, cstack
  9394 ;; Tracked objects:
  9395 ;;		On entry : 0/0
  9396 ;;		On exit  : 0/0
  9397 ;;		Unchanged: 0/0
  9398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9399 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9400 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9401 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9402 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9403 ;;Total ram usage:        0 bytes
  9404 ;; Hardware stack levels used:    1
  9405 ;; Hardware stack levels required when called:    6
  9406 ;; This function calls:
  9407 ;;		_Activate_Buzzer
  9408 ;;		_Deactivate_Buzzer
  9409 ;;		_Wait_One_Sec
  9410 ;;		_do_update_pwm
  9411 ;; This function is called by:
  9412 ;;		_Increase_Speed
  9413 ;;		_Decrease_Speed
  9414 ;;		_main
  9415 ;; This function uses a non-reentrant model
  9416 ;;
  9417                           
  9418                           	psect	text47
  9419  0024B6                     __ptext47:
  9420                           	opt stack 0
  9421  0024B6                     _Do_Beep:
  9422                           	opt stack 23
  9423                           
  9424                           ;Utils.c: 13: Activate_Buzzer();
  9425                           
  9426                           ;incstack = 0
  9427  0024B6  EC6E  F012         	call	_Activate_Buzzer	;wreg free
  9428                           
  9429                           ;Utils.c: 14: Wait_One_Sec();
  9430  0024BA  ECC4  F011         	call	_Wait_One_Sec	;wreg free
  9431                           
  9432                           ;Utils.c: 15: Deactivate_Buzzer();
  9433  0024BE  ECD1  F012         	call	_Deactivate_Buzzer	;wreg free
  9434                           
  9435                           ;Utils.c: 16: do_update_pwm(duty_cycle);
  9436  0024C2  505C               	movf	_duty_cycle,w,c
  9437  0024C4  EC8B  F00C         	call	_do_update_pwm
  9438  0024C8  0012               	return		;funcret
  9439  0024CA                     __end_of_Do_Beep:
  9440                           	opt stack 0
  9441                           tblptru	equ	0xFF8
  9442                           tblptrh	equ	0xFF7
  9443                           tblptrl	equ	0xFF6
  9444                           tablat	equ	0xFF5
  9445                           prodh	equ	0xFF4
  9446                           prodl	equ	0xFF3
  9447                           intcon	equ	0xFF2
  9448                           intcon2	equ	0xFF1
  9449                           postinc0	equ	0xFEE
  9450                           wreg	equ	0xFE8
  9451                           postdec1	equ	0xFE5
  9452                           fsr1l	equ	0xFE1
  9453                           indf2	equ	0xFDF
  9454                           postinc2	equ	0xFDE
  9455                           postdec2	equ	0xFDD
  9456                           fsr2h	equ	0xFDA
  9457                           fsr2l	equ	0xFD9
  9458                           status	equ	0xFD8
  9459                           
  9460 ;; *************** function _do_update_pwm *****************
  9461 ;; Defined at:
  9462 ;;		line 84 in file "Fan_Support.c"
  9463 ;; Parameters:    Size  Location     Type
  9464 ;;  duty_cycle      1    wreg     unsigned char 
  9465 ;; Auto vars:     Size  Location     Type
  9466 ;;  duty_cycle      1   64[COMRAM] unsigned char 
  9467 ;;  dc_f            3   61[COMRAM] float 
  9468 ;;  dc_I            2   65[COMRAM] int 
  9469 ;; Return value:  Size  Location     Type
  9470 ;;		None               void
  9471 ;; Registers used:
  9472 ;;		wreg, status,2, status,0, cstack
  9473 ;; Tracked objects:
  9474 ;;		On entry : 0/0
  9475 ;;		On exit  : 0/0
  9476 ;;		Unchanged: 0/0
  9477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9478 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9479 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9480 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9481 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9482 ;;Total ram usage:        9 bytes
  9483 ;; Hardware stack levels used:    1
  9484 ;; Hardware stack levels required when called:    5
  9485 ;; This function calls:
  9486 ;;		___ftdiv
  9487 ;;		___ftmul
  9488 ;;		___fttol
  9489 ;;		___lbtoft
  9490 ;; This function is called by:
  9491 ;;		_Turn_On_Fan
  9492 ;;		_Increase_Speed
  9493 ;;		_Decrease_Speed
  9494 ;;		_Do_Beep
  9495 ;;		_main
  9496 ;; This function uses a non-reentrant model
  9497 ;;
  9498                           
  9499                           	psect	text48
  9500  001916                     __ptext48:
  9501                           	opt stack 0
  9502  001916                     _do_update_pwm:
  9503                           	opt stack 25
  9504                           
  9505                           ;incstack = 0
  9506                           ;do_update_pwm@duty_cycle stored from wreg
  9507  001916  6E41               	movwf	do_update_pwm@duty_cycle,c
  9508                           
  9509                           ;Fan_Support.c: 86: float dc_f;
  9510                           ;Fan_Support.c: 87: int dc_I;
  9511                           ;Fan_Support.c: 88: PR2 = 0b00000100 ;
  9512  001918  0E04               	movlw	4
  9513  00191A  6ECB               	movwf	4043,c	;volatile
  9514                           
  9515                           ;Fan_Support.c: 89: T2CON = 0b00000111 ;
  9516  00191C  0E07               	movlw	7
  9517  00191E  6ECA               	movwf	4042,c	;volatile
  9518                           
  9519                           ;Fan_Support.c: 90: dc_f = ( 4.0 * duty_cycle / 20.0) ;
  9520  001920  0E00               	movlw	0
  9521  001922  6E20               	movwf	___ftmul@f2,c
  9522  001924  0E80               	movlw	128
  9523  001926  6E21               	movwf	___ftmul@f2+1,c
  9524  001928  0E40               	movlw	64
  9525  00192A  6E22               	movwf	___ftmul@f2+2,c
  9526  00192C  5041               	movf	do_update_pwm@duty_cycle,w,c
  9527  00192E  EC9F  F011         	call	___lbtoft
  9528  001932  C019  F01D         	movff	?___lbtoft,___ftmul@f1
  9529  001936  C01A  F01E         	movff	?___lbtoft+1,___ftmul@f1+1
  9530  00193A  C01B  F01F         	movff	?___lbtoft+2,___ftmul@f1+2
  9531  00193E  ECE1  F009         	call	___ftmul	;wreg free
  9532  001942  C01D  F02C         	movff	?___ftmul,___ftdiv@f1
  9533  001946  C01E  F02D         	movff	?___ftmul+1,___ftdiv@f1+1
  9534  00194A  C01F  F02E         	movff	?___ftmul+2,___ftdiv@f1+2
  9535  00194E  0E00               	movlw	0
  9536  001950  6E2F               	movwf	___ftdiv@f2,c
  9537  001952  0EA0               	movlw	160
  9538  001954  6E30               	movwf	___ftdiv@f2+1,c
  9539  001956  0E41               	movlw	65
  9540  001958  6E31               	movwf	___ftdiv@f2+2,c
  9541  00195A  EC49  F00B         	call	___ftdiv	;wreg free
  9542  00195E  C02C  F03E         	movff	?___ftdiv,do_update_pwm@dc_f
  9543  001962  C02D  F03F         	movff	?___ftdiv+1,do_update_pwm@dc_f+1
  9544  001966  C02E  F040         	movff	?___ftdiv+2,do_update_pwm@dc_f+2
  9545                           
  9546                           ;Fan_Support.c: 92: dc_I = (int) dc_f;
  9547  00196A  C03E  F011         	movff	do_update_pwm@dc_f,___fttol@f1
  9548  00196E  C03F  F012         	movff	do_update_pwm@dc_f+1,___fttol@f1+1
  9549  001972  C040  F013         	movff	do_update_pwm@dc_f+2,___fttol@f1+2
  9550  001976  ECD6  F00A         	call	___fttol	;wreg free
  9551  00197A  C011  F042         	movff	?___fttol,do_update_pwm@dc_I
  9552  00197E  C012  F043         	movff	?___fttol+1,do_update_pwm@dc_I+1
  9553                           
  9554                           ;Fan_Support.c: 93: if (dc_I > duty_cycle) dc_I++;
  9555  001982  5041               	movf	do_update_pwm@duty_cycle,w,c
  9556  001984  6E3B               	movwf	??_do_update_pwm& (0+255),c
  9557  001986  6A3C               	clrf	(??_do_update_pwm+1)& (0+255),c
  9558  001988  5042               	movf	do_update_pwm@dc_I,w,c
  9559  00198A  5C3B               	subwf	??_do_update_pwm,w,c
  9560  00198C  503C               	movf	??_do_update_pwm+1,w,c
  9561  00198E  0A80               	xorlw	128
  9562  001990  6E3D               	movwf	(??_do_update_pwm+2)& (0+255),c
  9563  001992  5043               	movf	do_update_pwm@dc_I+1,w,c
  9564  001994  0A80               	xorlw	128
  9565  001996  583D               	subwfb	(??_do_update_pwm+2)& (0+255),w,c
  9566  001998  B0D8               	btfsc	status,0,c
  9567  00199A  D003               	goto	l5852
  9568  00199C  4A42               	infsnz	do_update_pwm@dc_I,f,c
  9569  00199E  2A43               	incf	do_update_pwm@dc_I+1,f,c
  9570  0019A0  D000               	goto	l5852
  9571  0019A2                     l5852:
  9572                           
  9573                           ;Fan_Support.c: 94: CCP1CON = ((dc_I & 0x03) << 4) | 0b00001100;
  9574  0019A2  C042  F03B         	movff	do_update_pwm@dc_I,??_do_update_pwm
  9575  0019A6  0E03               	movlw	3
  9576  0019A8  163B               	andwf	??_do_update_pwm,f,c
  9577  0019AA  383B               	swapf	??_do_update_pwm,w,c
  9578  0019AC  0BF0               	andlw	240
  9579  0019AE  090C               	iorlw	12
  9580  0019B0  6EBD               	movwf	4029,c	;volatile
  9581                           
  9582                           ;Fan_Support.c: 95: CCPR1L = (dc_I) >> 2;
  9583  0019B2  C042  F03B         	movff	do_update_pwm@dc_I,??_do_update_pwm
  9584  0019B6  C043  F03C         	movff	do_update_pwm@dc_I+1,??_do_update_pwm+1
  9585  0019BA  343C               	rlcf	??_do_update_pwm+1,w,c
  9586  0019BC  323C               	rrcf	??_do_update_pwm+1,f,c
  9587  0019BE  323B               	rrcf	??_do_update_pwm,f,c
  9588  0019C0  343C               	rlcf	??_do_update_pwm+1,w,c
  9589  0019C2  323C               	rrcf	??_do_update_pwm+1,f,c
  9590  0019C4  323B               	rrcf	??_do_update_pwm,f,c
  9591  0019C6  503B               	movf	??_do_update_pwm,w,c
  9592  0019C8  6EBE               	movwf	4030,c	;volatile
  9593  0019CA  0012               	return		;funcret
  9594  0019CC                     __end_of_do_update_pwm:
  9595                           	opt stack 0
  9596                           tblptru	equ	0xFF8
  9597                           tblptrh	equ	0xFF7
  9598                           tblptrl	equ	0xFF6
  9599                           tablat	equ	0xFF5
  9600                           prodh	equ	0xFF4
  9601                           prodl	equ	0xFF3
  9602                           intcon	equ	0xFF2
  9603                           intcon2	equ	0xFF1
  9604                           postinc0	equ	0xFEE
  9605                           wreg	equ	0xFE8
  9606                           postdec1	equ	0xFE5
  9607                           fsr1l	equ	0xFE1
  9608                           indf2	equ	0xFDF
  9609                           postinc2	equ	0xFDE
  9610                           postdec2	equ	0xFDD
  9611                           fsr2h	equ	0xFDA
  9612                           fsr2l	equ	0xFD9
  9613                           status	equ	0xFD8
  9614                           
  9615 ;; *************** function ___lbtoft *****************
  9616 ;; Defined at:
  9617 ;;		line 27 in file "E:\XC8\sources\common\lbtoft.c"
  9618 ;; Parameters:    Size  Location     Type
  9619 ;;  c               1    wreg     unsigned char 
  9620 ;; Auto vars:     Size  Location     Type
  9621 ;;  c               1   27[COMRAM] unsigned char 
  9622 ;; Return value:  Size  Location     Type
  9623 ;;                  3   24[COMRAM] float 
  9624 ;; Registers used:
  9625 ;;		wreg, status,2, status,0, cstack
  9626 ;; Tracked objects:
  9627 ;;		On entry : 0/0
  9628 ;;		On exit  : 0/0
  9629 ;;		Unchanged: 0/0
  9630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9631 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9632 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9633 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9634 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9635 ;;Total ram usage:        4 bytes
  9636 ;; Hardware stack levels used:    1
  9637 ;; Hardware stack levels required when called:    4
  9638 ;; This function calls:
  9639 ;;		___ftpack
  9640 ;; This function is called by:
  9641 ;;		_do_update_pwm
  9642 ;; This function uses a non-reentrant model
  9643 ;;
  9644                           
  9645                           	psect	text49
  9646  00233E                     __ptext49:
  9647                           	opt stack 0
  9648  00233E                     ___lbtoft:
  9649                           	opt stack 25
  9650                           
  9651                           ;incstack = 0
  9652                           ;___lbtoft@c stored from wreg
  9653  00233E  6E1C               	movwf	___lbtoft@c,c
  9654  002340  501C               	movf	___lbtoft@c,w,c
  9655  002342  6E11               	movwf	___ftpack@arg,c
  9656  002344  6A12               	clrf	___ftpack@arg+1,c
  9657  002346  6A13               	clrf	___ftpack@arg+2,c
  9658  002348  0E8E               	movlw	142
  9659  00234A  6E14               	movwf	___ftpack@exp,c
  9660  00234C  0E00               	movlw	0
  9661  00234E  6E15               	movwf	___ftpack@sign,c
  9662  002350  EC28  F00C         	call	___ftpack	;wreg free
  9663  002354  C011  F019         	movff	?___ftpack,?___lbtoft
  9664  002358  C012  F01A         	movff	?___ftpack+1,?___lbtoft+1
  9665  00235C  C013  F01B         	movff	?___ftpack+2,?___lbtoft+2
  9666  002360  D000               	goto	l1251
  9667  002362                     l1251:
  9668  002362  0012               	return		;funcret
  9669  002364                     __end_of___lbtoft:
  9670                           	opt stack 0
  9671                           tblptru	equ	0xFF8
  9672                           tblptrh	equ	0xFF7
  9673                           tblptrl	equ	0xFF6
  9674                           tablat	equ	0xFF5
  9675                           prodh	equ	0xFF4
  9676                           prodl	equ	0xFF3
  9677                           intcon	equ	0xFF2
  9678                           intcon2	equ	0xFF1
  9679                           postinc0	equ	0xFEE
  9680                           wreg	equ	0xFE8
  9681                           postdec1	equ	0xFE5
  9682                           fsr1l	equ	0xFE1
  9683                           indf2	equ	0xFDF
  9684                           postinc2	equ	0xFDE
  9685                           postdec2	equ	0xFDD
  9686                           fsr2h	equ	0xFDA
  9687                           fsr2l	equ	0xFD9
  9688                           status	equ	0xFD8
  9689                           
  9690 ;; *************** function ___fttol *****************
  9691 ;; Defined at:
  9692 ;;		line 44 in file "E:\XC8\sources\common\fttol.c"
  9693 ;; Parameters:    Size  Location     Type
  9694 ;;  f1              3   16[COMRAM] float 
  9695 ;; Auto vars:     Size  Location     Type
  9696 ;;  lval            4   26[COMRAM] unsigned long 
  9697 ;;  exp1            1   30[COMRAM] unsigned char 
  9698 ;;  sign1           1   25[COMRAM] unsigned char 
  9699 ;; Return value:  Size  Location     Type
  9700 ;;                  4   16[COMRAM] long 
  9701 ;; Registers used:
  9702 ;;		wreg, status,2, status,0
  9703 ;; Tracked objects:
  9704 ;;		On entry : 0/0
  9705 ;;		On exit  : 0/0
  9706 ;;		Unchanged: 0/0
  9707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9708 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9709 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9710 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9711 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9712 ;;Total ram usage:       15 bytes
  9713 ;; Hardware stack levels used:    1
  9714 ;; Hardware stack levels required when called:    3
  9715 ;; This function calls:
  9716 ;;		Nothing
  9717 ;; This function is called by:
  9718 ;;		_do_update_pwm
  9719 ;; This function uses a non-reentrant model
  9720 ;;
  9721                           
  9722                           	psect	text50
  9723  0015AC                     __ptext50:
  9724                           	opt stack 0
  9725  0015AC                     ___fttol:
  9726                           	opt stack 26
  9727                           
  9728                           ;incstack = 0
  9729  0015AC  C013  F015         	movff	___fttol@f1+2,??___fttol
  9730  0015B0  6A16               	clrf	(??___fttol+1)& (0+255),c
  9731  0015B2  6A17               	clrf	(??___fttol+2)& (0+255),c
  9732  0015B4  3412               	rlcf	___fttol@f1+1,w,c
  9733  0015B6  3615               	rlcf	??___fttol& (0+255),f,c
  9734  0015B8  E301               	bnc	u4381
  9735  0015BA  8016               	bsf	(??___fttol+1)& (0+255),0,c
  9736  0015BC                     u4381:
  9737  0015BC  5015               	movf	??___fttol,w,c
  9738  0015BE  6E1F               	movwf	___fttol@exp1,c
  9739  0015C0  501F               	movf	___fttol@exp1,w,c
  9740  0015C2  A4D8               	btfss	status,2,c
  9741  0015C4  D002               	goto	l5574
  9742  0015C6  D039               	goto	l5598
  9743  0015C8  D063               	goto	l1210
  9744  0015CA                     l5574:
  9745  0015CA  0E17               	movlw	23
  9746  0015CC  6E15               	movwf	??___fttol& (0+255),c
  9747  0015CE  C011  F016         	movff	___fttol@f1,??___fttol+1
  9748  0015D2  C012  F017         	movff	___fttol@f1+1,??___fttol+2
  9749  0015D6  C013  F018         	movff	___fttol@f1+2,??___fttol+3
  9750  0015DA  2815               	incf	??___fttol,w,c
  9751  0015DC  6E19               	movwf	(??___fttol+4)& (0+255),c
  9752  0015DE  D004               	goto	u4400
  9753  0015E0                     u4405:
  9754  0015E0  90D8               	bcf	status,0,c
  9755  0015E2  3218               	rrcf	??___fttol+3,f,c
  9756  0015E4  3217               	rrcf	??___fttol+2,f,c
  9757  0015E6  3216               	rrcf	??___fttol+1,f,c
  9758  0015E8                     u4400:
  9759  0015E8  2E19               	decfsz	(??___fttol+4)& (0+255),f,c
  9760  0015EA  D7FA               	goto	u4405
  9761  0015EC  5016               	movf	??___fttol+1,w,c
  9762  0015EE  6E1A               	movwf	___fttol@sign1,c
  9763  0015F0  8E12               	bsf	___fttol@f1+1,7,c
  9764  0015F2  0EFF               	movlw	255
  9765  0015F4  1611               	andwf	___fttol@f1,f,c
  9766  0015F6  0EFF               	movlw	255
  9767  0015F8  1612               	andwf	___fttol@f1+1,f,c
  9768  0015FA  0E00               	movlw	0
  9769  0015FC  1613               	andwf	___fttol@f1+2,f,c
  9770  0015FE  5011               	movf	___fttol@f1,w,c
  9771  001600  6E1B               	movwf	___fttol@lval,c
  9772  001602  5012               	movf	___fttol@f1+1,w,c
  9773  001604  6E1C               	movwf	___fttol@lval+1,c
  9774  001606  5013               	movf	___fttol@f1+2,w,c
  9775  001608  6E1D               	movwf	___fttol@lval+2,c
  9776  00160A  6A1E               	clrf	___fttol@lval+3,c
  9777  00160C  0E8E               	movlw	142
  9778  00160E  5E1F               	subwf	___fttol@exp1,f,c
  9779  001610  AE1F               	btfss	___fttol@exp1,7,c
  9780  001612  D010               	goto	l5596
  9781  001614  501F               	movf	___fttol@exp1,w,c
  9782  001616  0A80               	xorlw	128
  9783  001618  0F8F               	addlw	143
  9784  00161A  B0D8               	btfsc	status,0,c
  9785  00161C  D003               	goto	l5592
  9786  00161E  D00D               	goto	l5598
  9787  001620  D037               	goto	l1210
  9788  001622  D000               	goto	l5592
  9789  001624                     l5592:
  9790  001624  90D8               	bcf	status,0,c
  9791  001626  321E               	rrcf	___fttol@lval+3,f,c
  9792  001628  321D               	rrcf	___fttol@lval+2,f,c
  9793  00162A  321C               	rrcf	___fttol@lval+1,f,c
  9794  00162C  321B               	rrcf	___fttol@lval,f,c
  9795  00162E  3E1F               	incfsz	___fttol@exp1,f,c
  9796  001630  D7F9               	goto	l5592
  9797  001632  D019               	goto	l5606
  9798  001634                     l5596:
  9799  001634  0E17               	movlw	23
  9800  001636  641F               	cpfsgt	___fttol@exp1,c
  9801  001638  D011               	goto	l5604
  9802  00163A                     l5598:
  9803  00163A  0E00               	movlw	0
  9804  00163C  6E11               	movwf	?___fttol,c
  9805  00163E  0E00               	movlw	0
  9806  001640  6E12               	movwf	?___fttol+1,c
  9807  001642  0E00               	movlw	0
  9808  001644  6E13               	movwf	?___fttol+2,c
  9809  001646  0E00               	movlw	0
  9810  001648  6E14               	movwf	?___fttol+3,c
  9811  00164A  D022               	goto	l1210
  9812  00164C  D007               	goto	l5604
  9813  00164E                     l5602:
  9814  00164E  90D8               	bcf	status,0,c
  9815  001650  361B               	rlcf	___fttol@lval,f,c
  9816  001652  361C               	rlcf	___fttol@lval+1,f,c
  9817  001654  361D               	rlcf	___fttol@lval+2,f,c
  9818  001656  361E               	rlcf	___fttol@lval+3,f,c
  9819  001658  061F               	decf	___fttol@exp1,f,c
  9820  00165A  D000               	goto	l5604
  9821  00165C                     l5604:
  9822  00165C  501F               	movf	___fttol@exp1,w,c
  9823  00165E  B4D8               	btfsc	status,2,c
  9824  001660  D002               	goto	l5606
  9825  001662  D7F5               	goto	l5602
  9826  001664  D000               	goto	l5606
  9827  001666                     l5606:
  9828  001666  501A               	movf	___fttol@sign1,w,c
  9829  001668  B4D8               	btfsc	status,2,c
  9830  00166A  D009               	goto	l5610
  9831  00166C  1E1E               	comf	___fttol@lval+3,f,c
  9832  00166E  1E1D               	comf	___fttol@lval+2,f,c
  9833  001670  1E1C               	comf	___fttol@lval+1,f,c
  9834  001672  6C1B               	negf	___fttol@lval,c
  9835  001674  0E00               	movlw	0
  9836  001676  221C               	addwfc	___fttol@lval+1,f,c
  9837  001678  221D               	addwfc	___fttol@lval+2,f,c
  9838  00167A  221E               	addwfc	___fttol@lval+3,f,c
  9839  00167C  D000               	goto	l5610
  9840  00167E                     l5610:
  9841  00167E  C01B  F011         	movff	___fttol@lval,?___fttol
  9842  001682  C01C  F012         	movff	___fttol@lval+1,?___fttol+1
  9843  001686  C01D  F013         	movff	___fttol@lval+2,?___fttol+2
  9844  00168A  C01E  F014         	movff	___fttol@lval+3,?___fttol+3
  9845  00168E  D000               	goto	l1210
  9846  001690                     l1210:
  9847  001690  0012               	return		;funcret
  9848  001692                     __end_of___fttol:
  9849                           	opt stack 0
  9850                           tblptru	equ	0xFF8
  9851                           tblptrh	equ	0xFF7
  9852                           tblptrl	equ	0xFF6
  9853                           tablat	equ	0xFF5
  9854                           prodh	equ	0xFF4
  9855                           prodl	equ	0xFF3
  9856                           intcon	equ	0xFF2
  9857                           intcon2	equ	0xFF1
  9858                           postinc0	equ	0xFEE
  9859                           wreg	equ	0xFE8
  9860                           postdec1	equ	0xFE5
  9861                           fsr1l	equ	0xFE1
  9862                           indf2	equ	0xFDF
  9863                           postinc2	equ	0xFDE
  9864                           postdec2	equ	0xFDD
  9865                           fsr2h	equ	0xFDA
  9866                           fsr2l	equ	0xFD9
  9867                           status	equ	0xFD8
  9868                           
  9869 ;; *************** function ___ftmul *****************
  9870 ;; Defined at:
  9871 ;;		line 62 in file "E:\XC8\sources\common\ftmul.c"
  9872 ;; Parameters:    Size  Location     Type
  9873 ;;  f1              3   28[COMRAM] float 
  9874 ;;  f2              3   31[COMRAM] float 
  9875 ;; Auto vars:     Size  Location     Type
  9876 ;;  f3_as_produc    3   38[COMRAM] unsigned um
  9877 ;;  sign            1   42[COMRAM] unsigned char 
  9878 ;;  cntr            1   41[COMRAM] unsigned char 
  9879 ;;  exp             1   37[COMRAM] unsigned char 
  9880 ;; Return value:  Size  Location     Type
  9881 ;;                  3   28[COMRAM] float 
  9882 ;; Registers used:
  9883 ;;		wreg, status,2, status,0, cstack
  9884 ;; Tracked objects:
  9885 ;;		On entry : 0/0
  9886 ;;		On exit  : 0/0
  9887 ;;		Unchanged: 0/0
  9888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9889 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9890 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9891 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9892 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9893 ;;Total ram usage:       15 bytes
  9894 ;; Hardware stack levels used:    1
  9895 ;; Hardware stack levels required when called:    4
  9896 ;; This function calls:
  9897 ;;		___ftpack
  9898 ;; This function is called by:
  9899 ;;		_do_update_pwm
  9900 ;; This function uses a non-reentrant model
  9901 ;;
  9902                           
  9903                           	psect	text51
  9904  0013C2                     __ptext51:
  9905                           	opt stack 0
  9906  0013C2                     ___ftmul:
  9907                           	opt stack 25
  9908                           
  9909                           ;incstack = 0
  9910  0013C2  C01F  F023         	movff	___ftmul@f1+2,??___ftmul
  9911  0013C6  6A24               	clrf	(??___ftmul+1)& (0+255),c
  9912  0013C8  6A25               	clrf	(??___ftmul+2)& (0+255),c
  9913  0013CA  341E               	rlcf	___ftmul@f1+1,w,c
  9914  0013CC  3623               	rlcf	??___ftmul& (0+255),f,c
  9915  0013CE  E301               	bnc	u4321
  9916  0013D0  8024               	bsf	(??___ftmul+1)& (0+255),0,c
  9917  0013D2                     u4321:
  9918  0013D2  5023               	movf	??___ftmul,w,c
  9919  0013D4  6E26               	movwf	___ftmul@exp,c
  9920  0013D6  5026               	movf	___ftmul@exp,w,c
  9921  0013D8  A4D8               	btfss	status,2,c
  9922  0013DA  D002               	goto	l5526
  9923  0013DC  D00E               	goto	l5528
  9924  0013DE  D06C               	goto	l1189
  9925  0013E0                     l5526:
  9926  0013E0  C022  F023         	movff	___ftmul@f2+2,??___ftmul
  9927  0013E4  6A24               	clrf	(??___ftmul+1)& (0+255),c
  9928  0013E6  6A25               	clrf	(??___ftmul+2)& (0+255),c
  9929  0013E8  3421               	rlcf	___ftmul@f2+1,w,c
  9930  0013EA  3623               	rlcf	??___ftmul& (0+255),f,c
  9931  0013EC  E301               	bnc	u4341
  9932  0013EE  8024               	bsf	(??___ftmul+1)& (0+255),0,c
  9933  0013F0                     u4341:
  9934  0013F0  5023               	movf	??___ftmul,w,c
  9935  0013F2  6E2B               	movwf	___ftmul@sign,c
  9936  0013F4  502B               	movf	___ftmul@sign,w,c
  9937  0013F6  A4D8               	btfss	status,2,c
  9938  0013F8  D007               	goto	l5532
  9939  0013FA                     l5528:
  9940  0013FA  0E00               	movlw	0
  9941  0013FC  6E1D               	movwf	?___ftmul,c
  9942  0013FE  0E00               	movlw	0
  9943  001400  6E1E               	movwf	?___ftmul+1,c
  9944  001402  0E00               	movlw	0
  9945  001404  6E1F               	movwf	?___ftmul+2,c
  9946  001406  D058               	goto	l1189
  9947  001408                     l5532:
  9948  001408  502B               	movf	___ftmul@sign,w,c
  9949  00140A  0F7B               	addlw	123
  9950  00140C  2626               	addwf	___ftmul@exp,f,c
  9951  00140E  C01F  F02B         	movff	___ftmul@f1+2,___ftmul@sign
  9952  001412  5022               	movf	___ftmul@f2+2,w,c
  9953  001414  1A2B               	xorwf	___ftmul@sign,f,c
  9954  001416  0E80               	movlw	128
  9955  001418  162B               	andwf	___ftmul@sign,f,c
  9956  00141A  8E1E               	bsf	___ftmul@f1+1,7,c
  9957  00141C  8E21               	bsf	___ftmul@f2+1,7,c
  9958  00141E  0EFF               	movlw	255
  9959  001420  1620               	andwf	___ftmul@f2,f,c
  9960  001422  0EFF               	movlw	255
  9961  001424  1621               	andwf	___ftmul@f2+1,f,c
  9962  001426  0E00               	movlw	0
  9963  001428  1622               	andwf	___ftmul@f2+2,f,c
  9964  00142A  0E00               	movlw	0
  9965  00142C  6E27               	movwf	___ftmul@f3_as_product,c
  9966  00142E  0E00               	movlw	0
  9967  001430  6E28               	movwf	___ftmul@f3_as_product+1,c
  9968  001432  0E00               	movlw	0
  9969  001434  6E29               	movwf	___ftmul@f3_as_product+2,c
  9970  001436  0E07               	movlw	7
  9971  001438  6E2A               	movwf	___ftmul@cntr,c
  9972  00143A  D000               	goto	l5546
  9973  00143C                     l5546:
  9974  00143C  A01D               	btfss	___ftmul@f1,0,c
  9975  00143E  D007               	goto	l5550
  9976  001440  5020               	movf	___ftmul@f2,w,c
  9977  001442  2627               	addwf	___ftmul@f3_as_product,f,c
  9978  001444  5021               	movf	___ftmul@f2+1,w,c
  9979  001446  2228               	addwfc	___ftmul@f3_as_product+1,f,c
  9980  001448  5022               	movf	___ftmul@f2+2,w,c
  9981  00144A  2229               	addwfc	___ftmul@f3_as_product+2,f,c
  9982  00144C  D000               	goto	l5550
  9983  00144E                     l5550:
  9984  00144E  90D8               	bcf	status,0,c
  9985  001450  321F               	rrcf	___ftmul@f1+2,f,c
  9986  001452  321E               	rrcf	___ftmul@f1+1,f,c
  9987  001454  321D               	rrcf	___ftmul@f1,f,c
  9988  001456  90D8               	bcf	status,0,c
  9989  001458  3620               	rlcf	___ftmul@f2,f,c
  9990  00145A  3621               	rlcf	___ftmul@f2+1,f,c
  9991  00145C  3622               	rlcf	___ftmul@f2+2,f,c
  9992  00145E  2E2A               	decfsz	___ftmul@cntr,f,c
  9993  001460  D7ED               	goto	l5546
  9994  001462  D000               	goto	l5554
  9995  001464                     l5554:
  9996  001464  0E09               	movlw	9
  9997  001466  6E2A               	movwf	___ftmul@cntr,c
  9998  001468  D000               	goto	l5556
  9999  00146A                     l5556:
 10000  00146A  A01D               	btfss	___ftmul@f1,0,c
 10001  00146C  D007               	goto	l5560
 10002  00146E  5020               	movf	___ftmul@f2,w,c
 10003  001470  2627               	addwf	___ftmul@f3_as_product,f,c
 10004  001472  5021               	movf	___ftmul@f2+1,w,c
 10005  001474  2228               	addwfc	___ftmul@f3_as_product+1,f,c
 10006  001476  5022               	movf	___ftmul@f2+2,w,c
 10007  001478  2229               	addwfc	___ftmul@f3_as_product+2,f,c
 10008  00147A  D000               	goto	l5560
 10009  00147C                     l5560:
 10010  00147C  90D8               	bcf	status,0,c
 10011  00147E  321F               	rrcf	___ftmul@f1+2,f,c
 10012  001480  321E               	rrcf	___ftmul@f1+1,f,c
 10013  001482  321D               	rrcf	___ftmul@f1,f,c
 10014  001484  90D8               	bcf	status,0,c
 10015  001486  3229               	rrcf	___ftmul@f3_as_product+2,f,c
 10016  001488  3228               	rrcf	___ftmul@f3_as_product+1,f,c
 10017  00148A  3227               	rrcf	___ftmul@f3_as_product,f,c
 10018  00148C  2E2A               	decfsz	___ftmul@cntr,f,c
 10019  00148E  D7ED               	goto	l5556
 10020  001490  D000               	goto	l5564
 10021  001492                     l5564:
 10022  001492  C027  F011         	movff	___ftmul@f3_as_product,___ftpack@arg
 10023  001496  C028  F012         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 10024  00149A  C029  F013         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 10025  00149E  C026  F014         	movff	___ftmul@exp,___ftpack@exp
 10026  0014A2  C02B  F015         	movff	___ftmul@sign,___ftpack@sign
 10027  0014A6  EC28  F00C         	call	___ftpack	;wreg free
 10028  0014AA  C011  F01D         	movff	?___ftpack,?___ftmul
 10029  0014AE  C012  F01E         	movff	?___ftpack+1,?___ftmul+1
 10030  0014B2  C013  F01F         	movff	?___ftpack+2,?___ftmul+2
 10031  0014B6  D000               	goto	l1189
 10032  0014B8                     l1189:
 10033  0014B8  0012               	return		;funcret
 10034  0014BA                     __end_of___ftmul:
 10035                           	opt stack 0
 10036                           tblptru	equ	0xFF8
 10037                           tblptrh	equ	0xFF7
 10038                           tblptrl	equ	0xFF6
 10039                           tablat	equ	0xFF5
 10040                           prodh	equ	0xFF4
 10041                           prodl	equ	0xFF3
 10042                           intcon	equ	0xFF2
 10043                           intcon2	equ	0xFF1
 10044                           postinc0	equ	0xFEE
 10045                           wreg	equ	0xFE8
 10046                           postdec1	equ	0xFE5
 10047                           fsr1l	equ	0xFE1
 10048                           indf2	equ	0xFDF
 10049                           postinc2	equ	0xFDE
 10050                           postdec2	equ	0xFDD
 10051                           fsr2h	equ	0xFDA
 10052                           fsr2l	equ	0xFD9
 10053                           status	equ	0xFD8
 10054                           
 10055 ;; *************** function ___ftdiv *****************
 10056 ;; Defined at:
 10057 ;;		line 54 in file "E:\XC8\sources\common\ftdiv.c"
 10058 ;; Parameters:    Size  Location     Type
 10059 ;;  f1              3   43[COMRAM] float 
 10060 ;;  f2              3   46[COMRAM] float 
 10061 ;; Auto vars:     Size  Location     Type
 10062 ;;  f3              3   53[COMRAM] float 
 10063 ;;  sign            1   57[COMRAM] unsigned char 
 10064 ;;  exp             1   56[COMRAM] unsigned char 
 10065 ;;  cntr            1   52[COMRAM] unsigned char 
 10066 ;; Return value:  Size  Location     Type
 10067 ;;                  3   43[COMRAM] float 
 10068 ;; Registers used:
 10069 ;;		wreg, status,2, status,0, cstack
 10070 ;; Tracked objects:
 10071 ;;		On entry : 0/0
 10072 ;;		On exit  : 0/0
 10073 ;;		Unchanged: 0/0
 10074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10075 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10076 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10077 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10078 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10079 ;;Total ram usage:       15 bytes
 10080 ;; Hardware stack levels used:    1
 10081 ;; Hardware stack levels required when called:    4
 10082 ;; This function calls:
 10083 ;;		___ftpack
 10084 ;; This function is called by:
 10085 ;;		_do_update_pwm
 10086 ;; This function uses a non-reentrant model
 10087 ;;
 10088                           
 10089                           	psect	text52
 10090  001692                     __ptext52:
 10091                           	opt stack 0
 10092  001692                     ___ftdiv:
 10093                           	opt stack 25
 10094                           
 10095                           ;incstack = 0
 10096  001692  C02E  F032         	movff	___ftdiv@f1+2,??___ftdiv
 10097  001696  6A33               	clrf	(??___ftdiv+1)& (0+255),c
 10098  001698  6A34               	clrf	(??___ftdiv+2)& (0+255),c
 10099  00169A  342D               	rlcf	___ftdiv@f1+1,w,c
 10100  00169C  3632               	rlcf	??___ftdiv& (0+255),f,c
 10101  00169E  E301               	bnc	u4271
 10102  0016A0  8033               	bsf	(??___ftdiv+1)& (0+255),0,c
 10103  0016A2                     u4271:
 10104  0016A2  5032               	movf	??___ftdiv,w,c
 10105  0016A4  6E39               	movwf	___ftdiv@exp,c
 10106  0016A6  5039               	movf	___ftdiv@exp,w,c
 10107  0016A8  A4D8               	btfss	status,2,c
 10108  0016AA  D002               	goto	l5480
 10109  0016AC  D00E               	goto	l5482
 10110  0016AE  D061               	goto	l1174
 10111  0016B0                     l5480:
 10112  0016B0  C031  F032         	movff	___ftdiv@f2+2,??___ftdiv
 10113  0016B4  6A33               	clrf	(??___ftdiv+1)& (0+255),c
 10114  0016B6  6A34               	clrf	(??___ftdiv+2)& (0+255),c
 10115  0016B8  3430               	rlcf	___ftdiv@f2+1,w,c
 10116  0016BA  3632               	rlcf	??___ftdiv& (0+255),f,c
 10117  0016BC  E301               	bnc	u4291
 10118  0016BE  8033               	bsf	(??___ftdiv+1)& (0+255),0,c
 10119  0016C0                     u4291:
 10120  0016C0  5032               	movf	??___ftdiv,w,c
 10121  0016C2  6E3A               	movwf	___ftdiv@sign,c
 10122  0016C4  503A               	movf	___ftdiv@sign,w,c
 10123  0016C6  A4D8               	btfss	status,2,c
 10124  0016C8  D007               	goto	l5486
 10125  0016CA                     l5482:
 10126  0016CA  0E00               	movlw	0
 10127  0016CC  6E2C               	movwf	?___ftdiv,c
 10128  0016CE  0E00               	movlw	0
 10129  0016D0  6E2D               	movwf	?___ftdiv+1,c
 10130  0016D2  0E00               	movlw	0
 10131  0016D4  6E2E               	movwf	?___ftdiv+2,c
 10132  0016D6  D04D               	goto	l1174
 10133  0016D8                     l5486:
 10134  0016D8  0E00               	movlw	0
 10135  0016DA  6E36               	movwf	___ftdiv@f3,c
 10136  0016DC  0E00               	movlw	0
 10137  0016DE  6E37               	movwf	___ftdiv@f3+1,c
 10138  0016E0  0E00               	movlw	0
 10139  0016E2  6E38               	movwf	___ftdiv@f3+2,c
 10140  0016E4  503A               	movf	___ftdiv@sign,w,c
 10141  0016E6  0F89               	addlw	137
 10142  0016E8  5E39               	subwf	___ftdiv@exp,f,c
 10143  0016EA  C02E  F03A         	movff	___ftdiv@f1+2,___ftdiv@sign
 10144  0016EE  5031               	movf	___ftdiv@f2+2,w,c
 10145  0016F0  1A3A               	xorwf	___ftdiv@sign,f,c
 10146  0016F2  0E80               	movlw	128
 10147  0016F4  163A               	andwf	___ftdiv@sign,f,c
 10148  0016F6  8E2D               	bsf	___ftdiv@f1+1,7,c
 10149  0016F8  0EFF               	movlw	255
 10150  0016FA  162C               	andwf	___ftdiv@f1,f,c
 10151  0016FC  0EFF               	movlw	255
 10152  0016FE  162D               	andwf	___ftdiv@f1+1,f,c
 10153  001700  0E00               	movlw	0
 10154  001702  162E               	andwf	___ftdiv@f1+2,f,c
 10155  001704  8E30               	bsf	___ftdiv@f2+1,7,c
 10156  001706  0EFF               	movlw	255
 10157  001708  162F               	andwf	___ftdiv@f2,f,c
 10158  00170A  0EFF               	movlw	255
 10159  00170C  1630               	andwf	___ftdiv@f2+1,f,c
 10160  00170E  0E00               	movlw	0
 10161  001710  1631               	andwf	___ftdiv@f2+2,f,c
 10162  001712  0E18               	movlw	24
 10163  001714  6E35               	movwf	___ftdiv@cntr,c
 10164  001716  D000               	goto	l5506
 10165  001718                     l5506:
 10166  001718  90D8               	bcf	status,0,c
 10167  00171A  3636               	rlcf	___ftdiv@f3,f,c
 10168  00171C  3637               	rlcf	___ftdiv@f3+1,f,c
 10169  00171E  3638               	rlcf	___ftdiv@f3+2,f,c
 10170  001720  502F               	movf	___ftdiv@f2,w,c
 10171  001722  5C2C               	subwf	___ftdiv@f1,w,c
 10172  001724  5030               	movf	___ftdiv@f2+1,w,c
 10173  001726  582D               	subwfb	___ftdiv@f1+1,w,c
 10174  001728  5031               	movf	___ftdiv@f2+2,w,c
 10175  00172A  582E               	subwfb	___ftdiv@f1+2,w,c
 10176  00172C  A0D8               	btfss	status,0,c
 10177  00172E  D007               	goto	l1177
 10178  001730  502F               	movf	___ftdiv@f2,w,c
 10179  001732  5E2C               	subwf	___ftdiv@f1,f,c
 10180  001734  5030               	movf	___ftdiv@f2+1,w,c
 10181  001736  5A2D               	subwfb	___ftdiv@f1+1,f,c
 10182  001738  5031               	movf	___ftdiv@f2+2,w,c
 10183  00173A  5A2E               	subwfb	___ftdiv@f1+2,f,c
 10184  00173C  8036               	bsf	___ftdiv@f3,0,c
 10185  00173E                     l1177:
 10186  00173E  90D8               	bcf	status,0,c
 10187  001740  362C               	rlcf	___ftdiv@f1,f,c
 10188  001742  362D               	rlcf	___ftdiv@f1+1,f,c
 10189  001744  362E               	rlcf	___ftdiv@f1+2,f,c
 10190  001746  2E35               	decfsz	___ftdiv@cntr,f,c
 10191  001748  D7E7               	goto	l5506
 10192  00174A  D000               	goto	l5516
 10193  00174C                     l5516:
 10194  00174C  C036  F011         	movff	___ftdiv@f3,___ftpack@arg
 10195  001750  C037  F012         	movff	___ftdiv@f3+1,___ftpack@arg+1
 10196  001754  C038  F013         	movff	___ftdiv@f3+2,___ftpack@arg+2
 10197  001758  C039  F014         	movff	___ftdiv@exp,___ftpack@exp
 10198  00175C  C03A  F015         	movff	___ftdiv@sign,___ftpack@sign
 10199  001760  EC28  F00C         	call	___ftpack	;wreg free
 10200  001764  C011  F02C         	movff	?___ftpack,?___ftdiv
 10201  001768  C012  F02D         	movff	?___ftpack+1,?___ftdiv+1
 10202  00176C  C013  F02E         	movff	?___ftpack+2,?___ftdiv+2
 10203  001770  D000               	goto	l1174
 10204  001772                     l1174:
 10205  001772  0012               	return		;funcret
 10206  001774                     __end_of___ftdiv:
 10207                           	opt stack 0
 10208                           tblptru	equ	0xFF8
 10209                           tblptrh	equ	0xFF7
 10210                           tblptrl	equ	0xFF6
 10211                           tablat	equ	0xFF5
 10212                           prodh	equ	0xFF4
 10213                           prodl	equ	0xFF3
 10214                           intcon	equ	0xFF2
 10215                           intcon2	equ	0xFF1
 10216                           postinc0	equ	0xFEE
 10217                           wreg	equ	0xFE8
 10218                           postdec1	equ	0xFE5
 10219                           fsr1l	equ	0xFE1
 10220                           indf2	equ	0xFDF
 10221                           postinc2	equ	0xFDE
 10222                           postdec2	equ	0xFDD
 10223                           fsr2h	equ	0xFDA
 10224                           fsr2l	equ	0xFD9
 10225                           status	equ	0xFD8
 10226                           
 10227 ;; *************** function ___ftpack *****************
 10228 ;; Defined at:
 10229 ;;		line 62 in file "E:\XC8\sources\common\float.c"
 10230 ;; Parameters:    Size  Location     Type
 10231 ;;  arg             3   16[COMRAM] unsigned um
 10232 ;;  exp             1   19[COMRAM] unsigned char 
 10233 ;;  sign            1   20[COMRAM] unsigned char 
 10234 ;; Auto vars:     Size  Location     Type
 10235 ;;		None
 10236 ;; Return value:  Size  Location     Type
 10237 ;;                  3   16[COMRAM] float 
 10238 ;; Registers used:
 10239 ;;		wreg, status,2, status,0
 10240 ;; Tracked objects:
 10241 ;;		On entry : 0/0
 10242 ;;		On exit  : 0/0
 10243 ;;		Unchanged: 0/0
 10244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10245 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10246 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10247 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10248 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10249 ;;Total ram usage:        8 bytes
 10250 ;; Hardware stack levels used:    1
 10251 ;; Hardware stack levels required when called:    3
 10252 ;; This function calls:
 10253 ;;		Nothing
 10254 ;; This function is called by:
 10255 ;;		___ftdiv
 10256 ;;		___ftmul
 10257 ;;		___lbtoft
 10258 ;; This function uses a non-reentrant model
 10259 ;;
 10260                           
 10261                           	psect	text53
 10262  001850                     __ptext53:
 10263                           	opt stack 0
 10264  001850                     ___ftpack:
 10265                           	opt stack 25
 10266                           
 10267                           ;incstack = 0
 10268  001850  5014               	movf	___ftpack@exp,w,c
 10269  001852  B4D8               	btfsc	status,2,c
 10270  001854  D005               	goto	l5370
 10271  001856  5011               	movf	___ftpack@arg,w,c
 10272  001858  1012               	iorwf	___ftpack@arg+1,w,c
 10273  00185A  1013               	iorwf	___ftpack@arg+2,w,c
 10274  00185C  A4D8               	btfss	status,2,c
 10275  00185E  D00E               	goto	l5376
 10276  001860                     l5370:
 10277  001860  0E00               	movlw	0
 10278  001862  6E11               	movwf	?___ftpack,c
 10279  001864  0E00               	movlw	0
 10280  001866  6E12               	movwf	?___ftpack+1,c
 10281  001868  0E00               	movlw	0
 10282  00186A  6E13               	movwf	?___ftpack+2,c
 10283  00186C  D053               	goto	l1102
 10284  00186E  D006               	goto	l5376
 10285  001870                     l5374:
 10286  001870  2A14               	incf	___ftpack@exp,f,c
 10287  001872  90D8               	bcf	status,0,c
 10288  001874  3213               	rrcf	___ftpack@arg+2,f,c
 10289  001876  3212               	rrcf	___ftpack@arg+1,f,c
 10290  001878  3211               	rrcf	___ftpack@arg,f,c
 10291  00187A  D000               	goto	l5376
 10292  00187C                     l5376:
 10293  00187C  0E00               	movlw	0
 10294  00187E  1411               	andwf	___ftpack@arg,w,c
 10295  001880  6E16               	movwf	??___ftpack& (0+255),c
 10296  001882  0E00               	movlw	0
 10297  001884  1412               	andwf	___ftpack@arg+1,w,c
 10298  001886  6E17               	movwf	(??___ftpack+1)& (0+255),c
 10299  001888  0EFE               	movlw	254
 10300  00188A  1413               	andwf	___ftpack@arg+2,w,c
 10301  00188C  6E18               	movwf	(??___ftpack+2)& (0+255),c
 10302  00188E  5016               	movf	??___ftpack,w,c
 10303  001890  1017               	iorwf	??___ftpack+1,w,c
 10304  001892  1018               	iorwf	??___ftpack+2,w,c
 10305  001894  B4D8               	btfsc	status,2,c
 10306  001896  D00E               	goto	l5382
 10307  001898  D7EB               	goto	l5374
 10308  00189A  D00C               	goto	l5382
 10309  00189C                     l5378:
 10310  00189C  2A14               	incf	___ftpack@exp,f,c
 10311  00189E  0E01               	movlw	1
 10312  0018A0  2611               	addwf	___ftpack@arg,f,c
 10313  0018A2  0E00               	movlw	0
 10314  0018A4  2212               	addwfc	___ftpack@arg+1,f,c
 10315  0018A6  0E00               	movlw	0
 10316  0018A8  2213               	addwfc	___ftpack@arg+2,f,c
 10317  0018AA  90D8               	bcf	status,0,c
 10318  0018AC  3213               	rrcf	___ftpack@arg+2,f,c
 10319  0018AE  3212               	rrcf	___ftpack@arg+1,f,c
 10320  0018B0  3211               	rrcf	___ftpack@arg,f,c
 10321  0018B2  D000               	goto	l5382
 10322  0018B4                     l5382:
 10323  0018B4  0E00               	movlw	0
 10324  0018B6  1411               	andwf	___ftpack@arg,w,c
 10325  0018B8  6E16               	movwf	??___ftpack& (0+255),c
 10326  0018BA  0E00               	movlw	0
 10327  0018BC  1412               	andwf	___ftpack@arg+1,w,c
 10328  0018BE  6E17               	movwf	(??___ftpack+1)& (0+255),c
 10329  0018C0  0EFF               	movlw	255
 10330  0018C2  1413               	andwf	___ftpack@arg+2,w,c
 10331  0018C4  6E18               	movwf	(??___ftpack+2)& (0+255),c
 10332  0018C6  5016               	movf	??___ftpack,w,c
 10333  0018C8  1017               	iorwf	??___ftpack+1,w,c
 10334  0018CA  1018               	iorwf	??___ftpack+2,w,c
 10335  0018CC  B4D8               	btfsc	status,2,c
 10336  0018CE  D008               	goto	l5386
 10337  0018D0  D7E5               	goto	l5378
 10338  0018D2  D006               	goto	l5386
 10339  0018D4                     l5384:
 10340  0018D4  0614               	decf	___ftpack@exp,f,c
 10341  0018D6  90D8               	bcf	status,0,c
 10342  0018D8  3611               	rlcf	___ftpack@arg,f,c
 10343  0018DA  3612               	rlcf	___ftpack@arg+1,f,c
 10344  0018DC  3613               	rlcf	___ftpack@arg+2,f,c
 10345  0018DE  D000               	goto	l5386
 10346  0018E0                     l5386:
 10347  0018E0  BE12               	btfsc	___ftpack@arg+1,7,c
 10348  0018E2  D004               	goto	l1113
 10349  0018E4  0E02               	movlw	2
 10350  0018E6  6014               	cpfslt	___ftpack@exp,c
 10351  0018E8  D7F5               	goto	l5384
 10352  0018EA  D000               	goto	l1113
 10353  0018EC                     l1113:
 10354  0018EC  B014               	btfsc	___ftpack@exp,0,c
 10355  0018EE  D002               	goto	l5392
 10356  0018F0  9E12               	bcf	___ftpack@arg+1,7,c
 10357  0018F2  D000               	goto	l5392
 10358  0018F4                     l5392:
 10359  0018F4  90D8               	bcf	status,0,c
 10360  0018F6  3214               	rrcf	___ftpack@exp,f,c
 10361  0018F8  5014               	movf	___ftpack@exp,w,c
 10362  0018FA  1213               	iorwf	___ftpack@arg+2,f,c
 10363  0018FC  5015               	movf	___ftpack@sign,w,c
 10364  0018FE  B4D8               	btfsc	status,2,c
 10365  001900  D002               	goto	l5398
 10366  001902  8E13               	bsf	___ftpack@arg+2,7,c
 10367  001904  D000               	goto	l5398
 10368  001906                     l5398:
 10369  001906  C011  F011         	movff	___ftpack@arg,?___ftpack
 10370  00190A  C012  F012         	movff	___ftpack@arg+1,?___ftpack+1
 10371  00190E  C013  F013         	movff	___ftpack@arg+2,?___ftpack+2
 10372  001912  D000               	goto	l1102
 10373  001914                     l1102:
 10374  001914  0012               	return		;funcret
 10375  001916                     __end_of___ftpack:
 10376                           	opt stack 0
 10377                           tblptru	equ	0xFF8
 10378                           tblptrh	equ	0xFF7
 10379                           tblptrl	equ	0xFF6
 10380                           tablat	equ	0xFF5
 10381                           prodh	equ	0xFF4
 10382                           prodl	equ	0xFF3
 10383                           intcon	equ	0xFF2
 10384                           intcon2	equ	0xFF1
 10385                           postinc0	equ	0xFEE
 10386                           wreg	equ	0xFE8
 10387                           postdec1	equ	0xFE5
 10388                           fsr1l	equ	0xFE1
 10389                           indf2	equ	0xFDF
 10390                           postinc2	equ	0xFDE
 10391                           postdec2	equ	0xFDD
 10392                           fsr2h	equ	0xFDA
 10393                           fsr2l	equ	0xFD9
 10394                           status	equ	0xFD8
 10395                           
 10396 ;; *************** function _Wait_One_Sec *****************
 10397 ;; Defined at:
 10398 ;;		line 19 in file "Utils.c"
 10399 ;; Parameters:    Size  Location     Type
 10400 ;;		None
 10401 ;; Auto vars:     Size  Location     Type
 10402 ;;  j               2   16[COMRAM] int 
 10403 ;; Return value:  Size  Location     Type
 10404 ;;		None               void
 10405 ;; Registers used:
 10406 ;;		wreg, status,2, status,0
 10407 ;; Tracked objects:
 10408 ;;		On entry : 0/0
 10409 ;;		On exit  : 0/0
 10410 ;;		Unchanged: 0/0
 10411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10412 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10413 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10415 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10416 ;;Total ram usage:        2 bytes
 10417 ;; Hardware stack levels used:    1
 10418 ;; Hardware stack levels required when called:    3
 10419 ;; This function calls:
 10420 ;;		Nothing
 10421 ;; This function is called by:
 10422 ;;		_Do_Beep
 10423 ;; This function uses a non-reentrant model
 10424 ;;
 10425                           
 10426                           	psect	text54
 10427  002388                     __ptext54:
 10428                           	opt stack 0
 10429  002388                     _Wait_One_Sec:
 10430                           	opt stack 25
 10431                           
 10432                           ;Utils.c: 21: for (int j=0; j<17000;j++);
 10433                           
 10434                           ;incstack = 0
 10435  002388  0E00               	movlw	0
 10436  00238A  6E12               	movwf	Wait_One_Sec@j+1,c
 10437  00238C  0E00               	movlw	0
 10438  00238E  6E11               	movwf	Wait_One_Sec@j,c
 10439  002390                     l5860:
 10440  002390  BE12               	btfsc	Wait_One_Sec@j+1,7,c
 10441  002392  D008               	goto	l5864
 10442  002394  0E68               	movlw	104
 10443  002396  5C11               	subwf	Wait_One_Sec@j,w,c
 10444  002398  0E42               	movlw	66
 10445  00239A  5812               	subwfb	Wait_One_Sec@j+1,w,c
 10446  00239C  B0D8               	btfsc	status,0,c
 10447  00239E  D005               	goto	l541
 10448  0023A0  D001               	goto	l5864
 10449  0023A2  D003               	goto	l541
 10450  0023A4                     l5864:
 10451  0023A4  4A11               	infsnz	Wait_One_Sec@j,f,c
 10452  0023A6  2A12               	incf	Wait_One_Sec@j+1,f,c
 10453  0023A8  D7F3               	goto	l5860
 10454  0023AA                     l541:
 10455  0023AA  0012               	return		;funcret
 10456  0023AC                     __end_of_Wait_One_Sec:
 10457                           	opt stack 0
 10458                           tblptru	equ	0xFF8
 10459                           tblptrh	equ	0xFF7
 10460                           tblptrl	equ	0xFF6
 10461                           tablat	equ	0xFF5
 10462                           prodh	equ	0xFF4
 10463                           prodl	equ	0xFF3
 10464                           intcon	equ	0xFF2
 10465                           intcon2	equ	0xFF1
 10466                           postinc0	equ	0xFEE
 10467                           wreg	equ	0xFE8
 10468                           postdec1	equ	0xFE5
 10469                           fsr1l	equ	0xFE1
 10470                           indf2	equ	0xFDF
 10471                           postinc2	equ	0xFDE
 10472                           postdec2	equ	0xFDD
 10473                           fsr2h	equ	0xFDA
 10474                           fsr2l	equ	0xFD9
 10475                           status	equ	0xFD8
 10476                           
 10477 ;; *************** function _Deactivate_Buzzer *****************
 10478 ;; Defined at:
 10479 ;;		line 32 in file "Utils.c"
 10480 ;; Parameters:    Size  Location     Type
 10481 ;;		None
 10482 ;; Auto vars:     Size  Location     Type
 10483 ;;		None
 10484 ;; Return value:  Size  Location     Type
 10485 ;;		None               void
 10486 ;; Registers used:
 10487 ;;		wreg, status,2
 10488 ;; Tracked objects:
 10489 ;;		On entry : 0/0
 10490 ;;		On exit  : 0/0
 10491 ;;		Unchanged: 0/0
 10492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10494 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10495 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10496 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10497 ;;Total ram usage:        0 bytes
 10498 ;; Hardware stack levels used:    1
 10499 ;; Hardware stack levels required when called:    3
 10500 ;; This function calls:
 10501 ;;		Nothing
 10502 ;; This function is called by:
 10503 ;;		_Do_Beep
 10504 ;; This function uses a non-reentrant model
 10505 ;;
 10506                           
 10507                           	psect	text55
 10508  0025A2                     __ptext55:
 10509                           	opt stack 0
 10510  0025A2                     _Deactivate_Buzzer:
 10511                           	opt stack 25
 10512                           
 10513                           ;Utils.c: 34: CCP2CON = 0x0;
 10514                           
 10515                           ;incstack = 0
 10516  0025A2  0E00               	movlw	0
 10517  0025A4  6EBA               	movwf	4026,c	;volatile
 10518                           
 10519                           ;Utils.c: 35: PORTBbits.RB3 = 0;
 10520  0025A6  9681               	bcf	3969,3,c	;volatile
 10521  0025A8  0012               	return		;funcret
 10522  0025AA                     __end_of_Deactivate_Buzzer:
 10523                           	opt stack 0
 10524                           tblptru	equ	0xFF8
 10525                           tblptrh	equ	0xFF7
 10526                           tblptrl	equ	0xFF6
 10527                           tablat	equ	0xFF5
 10528                           prodh	equ	0xFF4
 10529                           prodl	equ	0xFF3
 10530                           intcon	equ	0xFF2
 10531                           intcon2	equ	0xFF1
 10532                           postinc0	equ	0xFEE
 10533                           wreg	equ	0xFE8
 10534                           postdec1	equ	0xFE5
 10535                           fsr1l	equ	0xFE1
 10536                           indf2	equ	0xFDF
 10537                           postinc2	equ	0xFDE
 10538                           postdec2	equ	0xFDD
 10539                           fsr2h	equ	0xFDA
 10540                           fsr2l	equ	0xFD9
 10541                           status	equ	0xFD8
 10542                           
 10543 ;; *************** function _Activate_Buzzer *****************
 10544 ;; Defined at:
 10545 ;;		line 24 in file "Utils.c"
 10546 ;; Parameters:    Size  Location     Type
 10547 ;;		None
 10548 ;; Auto vars:     Size  Location     Type
 10549 ;;		None
 10550 ;; Return value:  Size  Location     Type
 10551 ;;		None               void
 10552 ;; Registers used:
 10553 ;;		wreg, status,2
 10554 ;; Tracked objects:
 10555 ;;		On entry : 0/0
 10556 ;;		On exit  : 0/0
 10557 ;;		Unchanged: 0/0
 10558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10559 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10560 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10561 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10562 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10563 ;;Total ram usage:        0 bytes
 10564 ;; Hardware stack levels used:    1
 10565 ;; Hardware stack levels required when called:    3
 10566 ;; This function calls:
 10567 ;;		Nothing
 10568 ;; This function is called by:
 10569 ;;		_Do_Beep
 10570 ;; This function uses a non-reentrant model
 10571 ;;
 10572                           
 10573                           	psect	text56
 10574  0024DC                     __ptext56:
 10575                           	opt stack 0
 10576  0024DC                     _Activate_Buzzer:
 10577                           	opt stack 25
 10578                           
 10579                           ;Utils.c: 26: PR2 = 0b11111001;
 10580                           
 10581                           ;incstack = 0
 10582  0024DC  0EF9               	movlw	249
 10583  0024DE  6ECB               	movwf	4043,c	;volatile
 10584                           
 10585                           ;Utils.c: 27: T2CON = 0b00000101;
 10586  0024E0  0E05               	movlw	5
 10587  0024E2  6ECA               	movwf	4042,c	;volatile
 10588                           
 10589                           ;Utils.c: 28: CCPR2L = 0b01001010;
 10590  0024E4  0E4A               	movlw	74
 10591  0024E6  6EBB               	movwf	4027,c	;volatile
 10592                           
 10593                           ;Utils.c: 29: CCP2CON = 0b00111100;
 10594  0024E8  0E3C               	movlw	60
 10595  0024EA  6EBA               	movwf	4026,c	;volatile
 10596  0024EC  0012               	return		;funcret
 10597  0024EE                     __end_of_Activate_Buzzer:
 10598                           	opt stack 0
 10599                           tblptru	equ	0xFF8
 10600                           tblptrh	equ	0xFF7
 10601                           tblptrl	equ	0xFF6
 10602                           tablat	equ	0xFF5
 10603                           prodh	equ	0xFF4
 10604                           prodl	equ	0xFF3
 10605                           intcon	equ	0xFF2
 10606                           intcon2	equ	0xFF1
 10607                           postinc0	equ	0xFEE
 10608                           wreg	equ	0xFE8
 10609                           postdec1	equ	0xFE5
 10610                           fsr1l	equ	0xFE1
 10611                           indf2	equ	0xFDF
 10612                           postinc2	equ	0xFDE
 10613                           postdec2	equ	0xFDD
 10614                           fsr2h	equ	0xFDA
 10615                           fsr2l	equ	0xFD9
 10616                           status	equ	0xFD8
 10617                           
 10618 ;; *************** function _DS3231_Setup_Time *****************
 10619 ;; Defined at:
 10620 ;;		line 67 in file "I2C_Support.c"
 10621 ;; Parameters:    Size  Location     Type
 10622 ;;		None
 10623 ;; Auto vars:     Size  Location     Type
 10624 ;;  Address         1   19[COMRAM] unsigned char 
 10625 ;;  Device          1   18[COMRAM] unsigned char 
 10626 ;; Return value:  Size  Location     Type
 10627 ;;		None               void
 10628 ;; Registers used:
 10629 ;;		wreg, status,2, status,0, cstack
 10630 ;; Tracked objects:
 10631 ;;		On entry : 0/0
 10632 ;;		On exit  : 0/0
 10633 ;;		Unchanged: 0/0
 10634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10635 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10636 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10637 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10638 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10639 ;;Total ram usage:        2 bytes
 10640 ;; Hardware stack levels used:    1
 10641 ;; Hardware stack levels required when called:    5
 10642 ;; This function calls:
 10643 ;;		_I2C_Start
 10644 ;;		_I2C_Stop
 10645 ;;		_I2C_Write
 10646 ;; This function is called by:
 10647 ;;		_main
 10648 ;; This function uses a non-reentrant model
 10649 ;;
 10650                           
 10651                           	psect	text57
 10652  001DCC                     __ptext57:
 10653                           	opt stack 0
 10654  001DCC                     _DS3231_Setup_Time:
 10655                           	opt stack 25
 10656                           
 10657                           ;I2C_Support.c: 70: char Device = 0x68;
 10658                           
 10659                           ;incstack = 0
 10660  001DCC  0E68               	movlw	104
 10661  001DCE  6E13               	movwf	DS3231_Setup_Time@Device,c
 10662                           
 10663                           ;I2C_Support.c: 71: char Address = 0x00;
 10664  001DD0  0E00               	movlw	0
 10665  001DD2  6E14               	movwf	DS3231_Setup_Time@Address,c
 10666                           
 10667                           ;I2C_Support.c: 73: second = 0x00;
 10668  001DD4  0E00               	movlw	0
 10669  001DD6  6E62               	movwf	_second,c
 10670                           
 10671                           ;I2C_Support.c: 74: minute = 0x00;
 10672  001DD8  0E00               	movlw	0
 10673  001DDA  6E5F               	movwf	_minute,c
 10674                           
 10675                           ;I2C_Support.c: 75: hour = 0x00;
 10676  001DDC  0E00               	movlw	0
 10677  001DDE  6E5E               	movwf	_hour,c
 10678                           
 10679                           ;I2C_Support.c: 76: dow = 0x00;
 10680  001DE0  0E00               	movlw	0
 10681  001DE2  6E5B               	movwf	_dow,c
 10682                           
 10683                           ;I2C_Support.c: 77: day = 0x28;
 10684  001DE4  0E28               	movlw	40
 10685  001DE6  6E5A               	movwf	_day,c
 10686                           
 10687                           ;I2C_Support.c: 78: month = 0x10;
 10688  001DE8  0E10               	movlw	16
 10689  001DEA  6E60               	movwf	_month,c
 10690                           
 10691                           ;I2C_Support.c: 79: year = 0x21;
 10692  001DEC  0E21               	movlw	33
 10693  001DEE  6E6C               	movwf	_year,c
 10694                           
 10695                           ;I2C_Support.c: 81: I2C_Start();
 10696  001DF0  EC80  F012         	call	_I2C_Start	;wreg free
 10697                           
 10698                           ;I2C_Support.c: 82: I2C_Write((Device << 1) | 0);
 10699  001DF4  5013               	movf	DS3231_Setup_Time@Device,w,c
 10700  001DF6  2413               	addwf	DS3231_Setup_Time@Device,w,c
 10701  001DF8  ECEE  F010         	call	_I2C_Write
 10702                           
 10703                           ;I2C_Support.c: 83: I2C_Write(Address);
 10704  001DFC  5014               	movf	DS3231_Setup_Time@Address,w,c
 10705  001DFE  ECEE  F010         	call	_I2C_Write
 10706                           
 10707                           ;I2C_Support.c: 84: I2C_Write(second);
 10708  001E02  5062               	movf	_second,w,c
 10709  001E04  ECEE  F010         	call	_I2C_Write
 10710                           
 10711                           ;I2C_Support.c: 85: I2C_Write(minute);
 10712  001E08  505F               	movf	_minute,w,c
 10713  001E0A  ECEE  F010         	call	_I2C_Write
 10714                           
 10715                           ;I2C_Support.c: 86: I2C_Write(hour);
 10716  001E0E  505E               	movf	_hour,w,c
 10717  001E10  ECEE  F010         	call	_I2C_Write
 10718                           
 10719                           ;I2C_Support.c: 87: I2C_Write(dow);
 10720  001E14  505B               	movf	_dow,w,c
 10721  001E16  ECEE  F010         	call	_I2C_Write
 10722                           
 10723                           ;I2C_Support.c: 88: I2C_Write(day);
 10724  001E1A  505A               	movf	_day,w,c
 10725  001E1C  ECEE  F010         	call	_I2C_Write
 10726                           
 10727                           ;I2C_Support.c: 89: I2C_Write(month);
 10728  001E20  5060               	movf	_month,w,c
 10729  001E22  ECEE  F010         	call	_I2C_Write
 10730                           
 10731                           ;I2C_Support.c: 90: I2C_Write(year);
 10732  001E26  506C               	movf	_year,w,c
 10733  001E28  ECEE  F010         	call	_I2C_Write
 10734                           
 10735                           ;I2C_Support.c: 91: I2C_Stop();
 10736  001E2C  EC77  F012         	call	_I2C_Stop	;wreg free
 10737  001E30  0012               	return		;funcret
 10738  001E32                     __end_of_DS3231_Setup_Time:
 10739                           	opt stack 0
 10740                           tblptru	equ	0xFF8
 10741                           tblptrh	equ	0xFF7
 10742                           tblptrl	equ	0xFF6
 10743                           tablat	equ	0xFF5
 10744                           prodh	equ	0xFF4
 10745                           prodl	equ	0xFF3
 10746                           intcon	equ	0xFF2
 10747                           intcon2	equ	0xFF1
 10748                           postinc0	equ	0xFEE
 10749                           wreg	equ	0xFE8
 10750                           postdec1	equ	0xFE5
 10751                           fsr1l	equ	0xFE1
 10752                           indf2	equ	0xFDF
 10753                           postinc2	equ	0xFDE
 10754                           postdec2	equ	0xFDD
 10755                           fsr2h	equ	0xFDA
 10756                           fsr2l	equ	0xFD9
 10757                           status	equ	0xFD8
 10758                           
 10759 ;; *************** function _DS3231_Read_Time *****************
 10760 ;; Defined at:
 10761 ;;		line 45 in file "I2C_Support.c"
 10762 ;; Parameters:    Size  Location     Type
 10763 ;;		None
 10764 ;; Auto vars:     Size  Location     Type
 10765 ;;  Device          1   20[COMRAM] unsigned char 
 10766 ;;  Address         1   19[COMRAM] unsigned char 
 10767 ;;  Data_Ret        1    0        unsigned char 
 10768 ;; Return value:  Size  Location     Type
 10769 ;;		None               void
 10770 ;; Registers used:
 10771 ;;		wreg, status,2, status,0, cstack
 10772 ;; Tracked objects:
 10773 ;;		On entry : 0/0
 10774 ;;		On exit  : 0/0
 10775 ;;		Unchanged: 0/0
 10776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10777 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10778 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10779 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10780 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10781 ;;Total ram usage:        2 bytes
 10782 ;; Hardware stack levels used:    1
 10783 ;; Hardware stack levels required when called:    6
 10784 ;; This function calls:
 10785 ;;		_I2C_ReStart
 10786 ;;		_I2C_Read
 10787 ;;		_I2C_Start
 10788 ;;		_I2C_Stop
 10789 ;;		_I2C_Write
 10790 ;; This function is called by:
 10791 ;;		_main
 10792 ;; This function uses a non-reentrant model
 10793 ;;
 10794                           
 10795                           	psect	text58
 10796  001E98                     __ptext58:
 10797                           	opt stack 0
 10798  001E98                     _DS3231_Read_Time:
 10799                           	opt stack 24
 10800                           
 10801                           ;I2C_Support.c: 47: char Device = 0x68;
 10802                           
 10803                           ;incstack = 0
 10804  001E98  0E68               	movlw	104
 10805  001E9A  6E15               	movwf	DS3231_Read_Time@Device,c
 10806                           
 10807                           ;I2C_Support.c: 48: char Address = 0x00;
 10808  001E9C  0E00               	movlw	0
 10809  001E9E  6E14               	movwf	DS3231_Read_Time@Address,c
 10810                           
 10811                           ;I2C_Support.c: 49: char Data_Ret;
 10812                           ;I2C_Support.c: 50: I2C_Start();
 10813  001EA0  EC80  F012         	call	_I2C_Start	;wreg free
 10814                           
 10815                           ;I2C_Support.c: 51: I2C_Write((Device << 1) | 0);
 10816  001EA4  5015               	movf	DS3231_Read_Time@Device,w,c
 10817  001EA6  2415               	addwf	DS3231_Read_Time@Device,w,c
 10818  001EA8  ECEE  F010         	call	_I2C_Write
 10819                           
 10820                           ;I2C_Support.c: 52: I2C_Write(Address);
 10821  001EAC  5014               	movf	DS3231_Read_Time@Address,w,c
 10822  001EAE  ECEE  F010         	call	_I2C_Write
 10823                           
 10824                           ;I2C_Support.c: 53: I2C_ReStart();
 10825  001EB2  EC32  F012         	call	_I2C_ReStart	;wreg free
 10826                           
 10827                           ;I2C_Support.c: 54: I2C_Write((Device << 1) | 1);
 10828  001EB6  80D8               	bsf	status,0,c
 10829  001EB8  3415               	rlcf	DS3231_Read_Time@Device,w,c
 10830  001EBA  ECEE  F010         	call	_I2C_Write
 10831                           
 10832                           ;I2C_Support.c: 56: second = I2C_Read(1);
 10833  001EBE  0E01               	movlw	1
 10834  001EC0  EC6D  F010         	call	_I2C_Read
 10835  001EC4  6E62               	movwf	_second,c
 10836                           
 10837                           ;I2C_Support.c: 57: minute = I2C_Read(1);
 10838  001EC6  0E01               	movlw	1
 10839  001EC8  EC6D  F010         	call	_I2C_Read
 10840  001ECC  6E5F               	movwf	_minute,c
 10841                           
 10842                           ;I2C_Support.c: 58: hour = I2C_Read(1);
 10843  001ECE  0E01               	movlw	1
 10844  001ED0  EC6D  F010         	call	_I2C_Read
 10845  001ED4  6E5E               	movwf	_hour,c
 10846                           
 10847                           ;I2C_Support.c: 59: dow = I2C_Read(1);
 10848  001ED6  0E01               	movlw	1
 10849  001ED8  EC6D  F010         	call	_I2C_Read
 10850  001EDC  6E5B               	movwf	_dow,c
 10851                           
 10852                           ;I2C_Support.c: 60: day = I2C_Read(1);
 10853  001EDE  0E01               	movlw	1
 10854  001EE0  EC6D  F010         	call	_I2C_Read
 10855  001EE4  6E5A               	movwf	_day,c
 10856                           
 10857                           ;I2C_Support.c: 61: month = I2C_Read(1);
 10858  001EE6  0E01               	movlw	1
 10859  001EE8  EC6D  F010         	call	_I2C_Read
 10860  001EEC  6E60               	movwf	_month,c
 10861                           
 10862                           ;I2C_Support.c: 62: year = I2C_Read(0);
 10863  001EEE  0E00               	movlw	0
 10864  001EF0  EC6D  F010         	call	_I2C_Read
 10865  001EF4  6E6C               	movwf	_year,c
 10866                           
 10867                           ;I2C_Support.c: 64: I2C_Stop();
 10868  001EF6  EC77  F012         	call	_I2C_Stop	;wreg free
 10869  001EFA  0012               	return		;funcret
 10870  001EFC                     __end_of_DS3231_Read_Time:
 10871                           	opt stack 0
 10872                           tblptru	equ	0xFF8
 10873                           tblptrh	equ	0xFF7
 10874                           tblptrl	equ	0xFF6
 10875                           tablat	equ	0xFF5
 10876                           prodh	equ	0xFF4
 10877                           prodl	equ	0xFF3
 10878                           intcon	equ	0xFF2
 10879                           intcon2	equ	0xFF1
 10880                           postinc0	equ	0xFEE
 10881                           wreg	equ	0xFE8
 10882                           postdec1	equ	0xFE5
 10883                           fsr1l	equ	0xFE1
 10884                           indf2	equ	0xFDF
 10885                           postinc2	equ	0xFDE
 10886                           postdec2	equ	0xFDD
 10887                           fsr2h	equ	0xFDA
 10888                           fsr2l	equ	0xFD9
 10889                           status	equ	0xFD8
 10890                           
 10891 ;; *************** function _DS1621_Read_Temp *****************
 10892 ;; Defined at:
 10893 ;;		line 29 in file "I2C_Support.c"
 10894 ;; Parameters:    Size  Location     Type
 10895 ;;		None
 10896 ;; Auto vars:     Size  Location     Type
 10897 ;;  Device          1   23[COMRAM] unsigned char 
 10898 ;;  Data_Ret        1   22[COMRAM] unsigned char 
 10899 ;;  Cmd             1   21[COMRAM] unsigned char 
 10900 ;; Return value:  Size  Location     Type
 10901 ;;                  2   19[COMRAM] int 
 10902 ;; Registers used:
 10903 ;;		wreg, status,2, status,0, cstack
 10904 ;; Tracked objects:
 10905 ;;		On entry : 0/0
 10906 ;;		On exit  : 0/0
 10907 ;;		Unchanged: 0/0
 10908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10909 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10910 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10911 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10912 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10913 ;;Total ram usage:        5 bytes
 10914 ;; Hardware stack levels used:    1
 10915 ;; Hardware stack levels required when called:    6
 10916 ;; This function calls:
 10917 ;;		_I2C_ReStart
 10918 ;;		_I2C_Read
 10919 ;;		_I2C_Start
 10920 ;;		_I2C_Stop
 10921 ;;		_I2C_Write
 10922 ;; This function is called by:
 10923 ;;		_main
 10924 ;; This function uses a non-reentrant model
 10925 ;;
 10926                           
 10927                           	psect	text59
 10928  00221A                     __ptext59:
 10929                           	opt stack 0
 10930  00221A                     _DS1621_Read_Temp:
 10931                           	opt stack 24
 10932                           
 10933                           ;I2C_Support.c: 31: char Device = 0x48;
 10934                           
 10935                           ;incstack = 0
 10936  00221A  0E48               	movlw	72
 10937  00221C  6E18               	movwf	DS1621_Read_Temp@Device,c
 10938                           
 10939                           ;I2C_Support.c: 32: char Cmd = 0xAA;
 10940  00221E  0EAA               	movlw	170
 10941  002220  6E16               	movwf	DS1621_Read_Temp@Cmd,c
 10942                           
 10943                           ;I2C_Support.c: 34: char Data_Ret;
 10944                           ;I2C_Support.c: 35: I2C_Start();
 10945  002222  EC80  F012         	call	_I2C_Start	;wreg free
 10946                           
 10947                           ;I2C_Support.c: 36: I2C_Write((Device << 1) | 0);
 10948  002226  5018               	movf	DS1621_Read_Temp@Device,w,c
 10949  002228  2418               	addwf	DS1621_Read_Temp@Device,w,c
 10950  00222A  ECEE  F010         	call	_I2C_Write
 10951                           
 10952                           ;I2C_Support.c: 37: I2C_Write(Cmd);
 10953  00222E  5016               	movf	DS1621_Read_Temp@Cmd,w,c
 10954  002230  ECEE  F010         	call	_I2C_Write
 10955                           
 10956                           ;I2C_Support.c: 38: I2C_ReStart();
 10957  002234  EC32  F012         	call	_I2C_ReStart	;wreg free
 10958                           
 10959                           ;I2C_Support.c: 39: I2C_Write((Device << 1) | 1);
 10960  002238  80D8               	bsf	status,0,c
 10961  00223A  3418               	rlcf	DS1621_Read_Temp@Device,w,c
 10962  00223C  ECEE  F010         	call	_I2C_Write
 10963                           
 10964                           ;I2C_Support.c: 40: Data_Ret = I2C_Read(0);
 10965  002240  0E00               	movlw	0
 10966  002242  EC6D  F010         	call	_I2C_Read
 10967  002246  6E17               	movwf	DS1621_Read_Temp@Data_Ret,c
 10968                           
 10969                           ;I2C_Support.c: 41: I2C_Stop();
 10970  002248  EC77  F012         	call	_I2C_Stop	;wreg free
 10971                           
 10972                           ;I2C_Support.c: 42: return Data_Ret;
 10973  00224C  C017  F014         	movff	DS1621_Read_Temp@Data_Ret,?_DS1621_Read_Temp
 10974  002250  6A15               	clrf	?_DS1621_Read_Temp+1,c
 10975  002252  D000               	goto	l233
 10976  002254                     l233:
 10977  002254  0012               	return		;funcret
 10978  002256                     __end_of_DS1621_Read_Temp:
 10979                           	opt stack 0
 10980                           tblptru	equ	0xFF8
 10981                           tblptrh	equ	0xFF7
 10982                           tblptrl	equ	0xFF6
 10983                           tablat	equ	0xFF5
 10984                           prodh	equ	0xFF4
 10985                           prodl	equ	0xFF3
 10986                           intcon	equ	0xFF2
 10987                           intcon2	equ	0xFF1
 10988                           postinc0	equ	0xFEE
 10989                           wreg	equ	0xFE8
 10990                           postdec1	equ	0xFE5
 10991                           fsr1l	equ	0xFE1
 10992                           indf2	equ	0xFDF
 10993                           postinc2	equ	0xFDE
 10994                           postdec2	equ	0xFDD
 10995                           fsr2h	equ	0xFDA
 10996                           fsr2l	equ	0xFD9
 10997                           status	equ	0xFD8
 10998                           
 10999 ;; *************** function _I2C_Write *****************
 11000 ;; Defined at:
 11001 ;;		line 41 in file "I2C.c"
 11002 ;; Parameters:    Size  Location     Type
 11003 ;;  outByte         1    wreg     unsigned char 
 11004 ;; Auto vars:     Size  Location     Type
 11005 ;;  outByte         1   16[COMRAM] unsigned char 
 11006 ;;  n               1   17[COMRAM] unsigned char 
 11007 ;; Return value:  Size  Location     Type
 11008 ;;		None               void
 11009 ;; Registers used:
 11010 ;;		wreg, status,2, status,0, cstack
 11011 ;; Tracked objects:
 11012 ;;		On entry : 0/0
 11013 ;;		On exit  : 0/0
 11014 ;;		Unchanged: 0/0
 11015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11016 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11017 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11018 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11019 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11020 ;;Total ram usage:        2 bytes
 11021 ;; Hardware stack levels used:    1
 11022 ;; Hardware stack levels required when called:    4
 11023 ;; This function calls:
 11024 ;;		_i2cHighScl
 11025 ;;		_i2cHighSda
 11026 ;;		_i2cLowScl
 11027 ;;		_i2cLowSda
 11028 ;; This function is called by:
 11029 ;;		_I2C_Write_Cmd_Only
 11030 ;;		_I2C_Write_Cmd_Write_Data
 11031 ;;		_DS1621_Read_Temp
 11032 ;;		_DS3231_Read_Time
 11033 ;;		_DS3231_Setup_Time
 11034 ;;		_I2C_Write_Address_Read_One_Byte
 11035 ;;		_I2C_Write_Address_Write_One_Byte
 11036 ;;		_I2C_Write_Cmd_Read_One_Byte
 11037 ;; This function uses a non-reentrant model
 11038 ;;
 11039                           
 11040                           	psect	text60
 11041  0021DC                     __ptext60:
 11042                           	opt stack 0
 11043  0021DC                     _I2C_Write:
 11044                           	opt stack 23
 11045                           
 11046                           ;incstack = 0
 11047                           ;I2C_Write@outByte stored from wreg
 11048  0021DC  6E11               	movwf	I2C_Write@outByte,c
 11049                           
 11050                           ;I2C.c: 43: unsigned char n;
 11051                           ;I2C.c: 44: for (n = 0; n < 8; n++)
 11052  0021DE  0E00               	movlw	0
 11053  0021E0  6E12               	movwf	I2C_Write@n,c
 11054  0021E2                     l5404:
 11055  0021E2  0E07               	movlw	7
 11056  0021E4  6412               	cpfsgt	I2C_Write@n,c
 11057  0021E6  D001               	goto	l181
 11058  0021E8  D011               	goto	l5422
 11059  0021EA                     l181:
 11060                           
 11061                           ;I2C.c: 45: {
 11062                           ;I2C.c: 46: if (outByte & 0x80) i2cHighSda();
 11063  0021EA  AE11               	btfss	I2C_Write@outByte,7,c
 11064  0021EC  D003               	goto	l5410
 11065  0021EE  ECD9  F012         	call	_i2cHighSda	;wreg free
 11066  0021F2  D003               	goto	l5412
 11067  0021F4                     l5410:
 11068                           
 11069                           ;I2C.c: 47: else i2cLowSda();
 11070  0021F4  ECCC  F012         	call	_i2cLowSda	;wreg free
 11071  0021F8  D000               	goto	l5412
 11072  0021FA                     l5412:
 11073                           
 11074                           ;I2C.c: 48: i2cHighScl();
 11075  0021FA  ECB1  F012         	call	_i2cHighScl	;wreg free
 11076                           
 11077                           ;I2C.c: 49: i2cLowScl();
 11078  0021FE  ECD5  F012         	call	_i2cLowScl	;wreg free
 11079                           
 11080                           ;I2C.c: 50: outByte = outByte << 1;
 11081  002202  5011               	movf	I2C_Write@outByte,w,c
 11082  002204  2411               	addwf	I2C_Write@outByte,w,c
 11083  002206  6E11               	movwf	I2C_Write@outByte,c
 11084  002208  2A12               	incf	I2C_Write@n,f,c
 11085  00220A  D7EB               	goto	l5404
 11086  00220C                     l5422:
 11087                           
 11088                           ;I2C.c: 51: }
 11089                           ;I2C.c: 52: i2cHighSda();
 11090  00220C  ECD9  F012         	call	_i2cHighSda	;wreg free
 11091                           
 11092                           ;I2C.c: 53: i2cHighScl();
 11093  002210  ECB1  F012         	call	_i2cHighScl	;wreg free
 11094                           
 11095                           ;I2C.c: 54: i2cLowScl();
 11096  002214  ECD5  F012         	call	_i2cLowScl	;wreg free
 11097  002218  0012               	return		;funcret
 11098  00221A                     __end_of_I2C_Write:
 11099                           	opt stack 0
 11100                           tblptru	equ	0xFF8
 11101                           tblptrh	equ	0xFF7
 11102                           tblptrl	equ	0xFF6
 11103                           tablat	equ	0xFF5
 11104                           prodh	equ	0xFF4
 11105                           prodl	equ	0xFF3
 11106                           intcon	equ	0xFF2
 11107                           intcon2	equ	0xFF1
 11108                           postinc0	equ	0xFEE
 11109                           wreg	equ	0xFE8
 11110                           postdec1	equ	0xFE5
 11111                           fsr1l	equ	0xFE1
 11112                           indf2	equ	0xFDF
 11113                           postinc2	equ	0xFDE
 11114                           postdec2	equ	0xFDD
 11115                           fsr2h	equ	0xFDA
 11116                           fsr2l	equ	0xFD9
 11117                           status	equ	0xFD8
 11118                           
 11119 ;; *************** function _I2C_Stop *****************
 11120 ;; Defined at:
 11121 ;;		line 88 in file "I2C.c"
 11122 ;; Parameters:    Size  Location     Type
 11123 ;;		None
 11124 ;; Auto vars:     Size  Location     Type
 11125 ;;		None
 11126 ;; Return value:  Size  Location     Type
 11127 ;;		None               void
 11128 ;; Registers used:
 11129 ;;		wreg, cstack
 11130 ;; Tracked objects:
 11131 ;;		On entry : 0/0
 11132 ;;		On exit  : 0/0
 11133 ;;		Unchanged: 0/0
 11134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11135 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11136 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11137 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11138 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11139 ;;Total ram usage:        0 bytes
 11140 ;; Hardware stack levels used:    1
 11141 ;; Hardware stack levels required when called:    4
 11142 ;; This function calls:
 11143 ;;		_i2cHighScl
 11144 ;;		_i2cHighSda
 11145 ;;		_i2cLowScl
 11146 ;;		_i2cLowSda
 11147 ;; This function is called by:
 11148 ;;		_I2C_Write_Cmd_Only
 11149 ;;		_I2C_Write_Cmd_Write_Data
 11150 ;;		_DS1621_Read_Temp
 11151 ;;		_DS3231_Read_Time
 11152 ;;		_DS3231_Setup_Time
 11153 ;;		_I2C_Write_Address_Read_One_Byte
 11154 ;;		_I2C_Write_Address_Write_One_Byte
 11155 ;;		_I2C_Write_Cmd_Read_One_Byte
 11156 ;; This function uses a non-reentrant model
 11157 ;;
 11158                           
 11159                           	psect	text61
 11160  0024EE                     __ptext61:
 11161                           	opt stack 0
 11162  0024EE                     _I2C_Stop:
 11163                           	opt stack 23
 11164                           
 11165                           ;I2C.c: 90: i2cLowScl();
 11166                           
 11167                           ;incstack = 0
 11168  0024EE  ECD5  F012         	call	_i2cLowScl	;wreg free
 11169                           
 11170                           ;I2C.c: 91: i2cLowSda();
 11171  0024F2  ECCC  F012         	call	_i2cLowSda	;wreg free
 11172                           
 11173                           ;I2C.c: 92: i2cHighScl();
 11174  0024F6  ECB1  F012         	call	_i2cHighScl	;wreg free
 11175                           
 11176                           ;I2C.c: 93: i2cHighSda();
 11177  0024FA  ECD9  F012         	call	_i2cHighSda	;wreg free
 11178  0024FE  0012               	return		;funcret
 11179  002500                     __end_of_I2C_Stop:
 11180                           	opt stack 0
 11181                           tblptru	equ	0xFF8
 11182                           tblptrh	equ	0xFF7
 11183                           tblptrl	equ	0xFF6
 11184                           tablat	equ	0xFF5
 11185                           prodh	equ	0xFF4
 11186                           prodl	equ	0xFF3
 11187                           intcon	equ	0xFF2
 11188                           intcon2	equ	0xFF1
 11189                           postinc0	equ	0xFEE
 11190                           wreg	equ	0xFE8
 11191                           postdec1	equ	0xFE5
 11192                           fsr1l	equ	0xFE1
 11193                           indf2	equ	0xFDF
 11194                           postinc2	equ	0xFDE
 11195                           postdec2	equ	0xFDD
 11196                           fsr2h	equ	0xFDA
 11197                           fsr2l	equ	0xFD9
 11198                           status	equ	0xFD8
 11199                           
 11200 ;; *************** function _I2C_Start *****************
 11201 ;; Defined at:
 11202 ;;		line 71 in file "I2C.c"
 11203 ;; Parameters:    Size  Location     Type
 11204 ;;		None
 11205 ;; Auto vars:     Size  Location     Type
 11206 ;;		None
 11207 ;; Return value:  Size  Location     Type
 11208 ;;		None               void
 11209 ;; Registers used:
 11210 ;;		wreg, cstack
 11211 ;; Tracked objects:
 11212 ;;		On entry : 0/0
 11213 ;;		On exit  : 0/0
 11214 ;;		Unchanged: 0/0
 11215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11217 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11218 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11219 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11220 ;;Total ram usage:        0 bytes
 11221 ;; Hardware stack levels used:    1
 11222 ;; Hardware stack levels required when called:    4
 11223 ;; This function calls:
 11224 ;;		_i2cHighScl
 11225 ;;		_i2cHighSda
 11226 ;;		_i2cLowScl
 11227 ;;		_i2cLowSda
 11228 ;; This function is called by:
 11229 ;;		_I2C_Write_Cmd_Only
 11230 ;;		_I2C_Write_Cmd_Write_Data
 11231 ;;		_DS1621_Read_Temp
 11232 ;;		_DS3231_Read_Time
 11233 ;;		_DS3231_Setup_Time
 11234 ;;		_I2C_Write_Address_Read_One_Byte
 11235 ;;		_I2C_Write_Address_Write_One_Byte
 11236 ;;		_I2C_Write_Cmd_Read_One_Byte
 11237 ;; This function uses a non-reentrant model
 11238 ;;
 11239                           
 11240                           	psect	text62
 11241  002500                     __ptext62:
 11242                           	opt stack 0
 11243  002500                     _I2C_Start:
 11244                           	opt stack 23
 11245                           
 11246                           ;I2C.c: 73: i2cHighSda();
 11247                           
 11248                           ;incstack = 0
 11249  002500  ECD9  F012         	call	_i2cHighSda	;wreg free
 11250                           
 11251                           ;I2C.c: 74: i2cHighScl();
 11252  002504  ECB1  F012         	call	_i2cHighScl	;wreg free
 11253                           
 11254                           ;I2C.c: 75: i2cLowSda();
 11255  002508  ECCC  F012         	call	_i2cLowSda	;wreg free
 11256                           
 11257                           ;I2C.c: 76: i2cLowScl();
 11258  00250C  ECD5  F012         	call	_i2cLowScl	;wreg free
 11259  002510  0012               	return		;funcret
 11260  002512                     __end_of_I2C_Start:
 11261                           	opt stack 0
 11262                           tblptru	equ	0xFF8
 11263                           tblptrh	equ	0xFF7
 11264                           tblptrl	equ	0xFF6
 11265                           tablat	equ	0xFF5
 11266                           prodh	equ	0xFF4
 11267                           prodl	equ	0xFF3
 11268                           intcon	equ	0xFF2
 11269                           intcon2	equ	0xFF1
 11270                           postinc0	equ	0xFEE
 11271                           wreg	equ	0xFE8
 11272                           postdec1	equ	0xFE5
 11273                           fsr1l	equ	0xFE1
 11274                           indf2	equ	0xFDF
 11275                           postinc2	equ	0xFDE
 11276                           postdec2	equ	0xFDD
 11277                           fsr2h	equ	0xFDA
 11278                           fsr2l	equ	0xFD9
 11279                           status	equ	0xFD8
 11280                           
 11281 ;; *************** function _I2C_Read *****************
 11282 ;; Defined at:
 11283 ;;		line 20 in file "I2C.c"
 11284 ;; Parameters:    Size  Location     Type
 11285 ;;  ack             1    wreg     unsigned char 
 11286 ;; Auto vars:     Size  Location     Type
 11287 ;;  ack             1   16[COMRAM] unsigned char 
 11288 ;;  inByte          1   18[COMRAM] unsigned char 
 11289 ;;  n               1   17[COMRAM] unsigned char 
 11290 ;; Return value:  Size  Location     Type
 11291 ;;                  1    wreg      unsigned char 
 11292 ;; Registers used:
 11293 ;;		wreg, status,2, status,0, cstack
 11294 ;; Tracked objects:
 11295 ;;		On entry : 0/0
 11296 ;;		On exit  : 0/0
 11297 ;;		Unchanged: 0/0
 11298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11299 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11300 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11301 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11302 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11303 ;;Total ram usage:        3 bytes
 11304 ;; Hardware stack levels used:    1
 11305 ;; Hardware stack levels required when called:    5
 11306 ;; This function calls:
 11307 ;;		_i2cAck
 11308 ;;		_i2cHighScl
 11309 ;;		_i2cHighSda
 11310 ;;		_i2cLowScl
 11311 ;;		_i2cNack
 11312 ;; This function is called by:
 11313 ;;		_DS1621_Read_Temp
 11314 ;;		_DS3231_Read_Time
 11315 ;;		_I2C_Write_Address_Read_One_Byte
 11316 ;;		_I2C_Write_Cmd_Read_One_Byte
 11317 ;; This function uses a non-reentrant model
 11318 ;;
 11319                           
 11320                           	psect	text63
 11321  0020DA                     __ptext63:
 11322                           	opt stack 0
 11323  0020DA                     _I2C_Read:
 11324                           	opt stack 24
 11325                           
 11326                           ;incstack = 0
 11327                           ;I2C_Read@ack stored from wreg
 11328  0020DA  6E11               	movwf	I2C_Read@ack,c
 11329                           
 11330                           ;I2C.c: 22: unsigned char inByte, n;
 11331                           ;I2C.c: 23: i2cHighSda();
 11332  0020DC  ECD9  F012         	call	_i2cHighSda	;wreg free
 11333                           
 11334                           ;I2C.c: 24: for (n = 0; n < 8; n++)
 11335  0020E0  0E00               	movlw	0
 11336  0020E2  6E12               	movwf	I2C_Read@n,c
 11337  0020E4                     l5930:
 11338  0020E4  0E07               	movlw	7
 11339  0020E6  6412               	cpfsgt	I2C_Read@n,c
 11340  0020E8  D001               	goto	l5934
 11341  0020EA  D00F               	goto	l5948
 11342  0020EC                     l5934:
 11343                           
 11344                           ;I2C.c: 25: {
 11345                           ;I2C.c: 26: i2cHighScl();
 11346  0020EC  ECB1  F012         	call	_i2cHighScl	;wreg free
 11347                           
 11348                           ;I2C.c: 28: if (PORTBbits.RB5)
 11349  0020F0  AA81               	btfss	3969,5,c	;volatile
 11350  0020F2  D003               	goto	l5940
 11351                           
 11352                           ;I2C.c: 29: inByte = (inByte << 1) | 0x01;
 11353  0020F4  80D8               	bsf	status,0,c
 11354  0020F6  3613               	rlcf	I2C_Read@inByte,f,c
 11355  0020F8  D004               	goto	l5942
 11356  0020FA                     l5940:
 11357                           
 11358                           ;I2C.c: 30: else
 11359                           ;I2C.c: 31: inByte = inByte << 1;
 11360  0020FA  5013               	movf	I2C_Read@inByte,w,c
 11361  0020FC  2413               	addwf	I2C_Read@inByte,w,c
 11362  0020FE  6E13               	movwf	I2C_Read@inByte,c
 11363  002100  D000               	goto	l5942
 11364  002102                     l5942:
 11365                           
 11366                           ;I2C.c: 32: i2cLowScl();
 11367  002102  ECD5  F012         	call	_i2cLowScl	;wreg free
 11368  002106  2A12               	incf	I2C_Read@n,f,c
 11369  002108  D7ED               	goto	l5930
 11370  00210A                     l5948:
 11371                           
 11372                           ;I2C.c: 33: }
 11373                           ;I2C.c: 34: if (ack) i2cAck();
 11374  00210A  5011               	movf	I2C_Read@ack,w,c
 11375  00210C  B4D8               	btfsc	status,2,c
 11376  00210E  D003               	goto	l5952
 11377  002110  EC89  F012         	call	_i2cAck	;wreg free
 11378  002114  D003               	goto	l5954
 11379  002116                     l5952:
 11380                           
 11381                           ;I2C.c: 35: else i2cNack();
 11382  002116  ECC7  F012         	call	_i2cNack	;wreg free
 11383  00211A  D000               	goto	l5954
 11384  00211C                     l5954:
 11385                           
 11386                           ;I2C.c: 38: return(inByte);
 11387  00211C  5013               	movf	I2C_Read@inByte,w,c
 11388  00211E  D000               	goto	l178
 11389  002120                     l178:
 11390  002120  0012               	return		;funcret
 11391  002122                     __end_of_I2C_Read:
 11392                           	opt stack 0
 11393                           tblptru	equ	0xFF8
 11394                           tblptrh	equ	0xFF7
 11395                           tblptrl	equ	0xFF6
 11396                           tablat	equ	0xFF5
 11397                           prodh	equ	0xFF4
 11398                           prodl	equ	0xFF3
 11399                           intcon	equ	0xFF2
 11400                           intcon2	equ	0xFF1
 11401                           postinc0	equ	0xFEE
 11402                           wreg	equ	0xFE8
 11403                           postdec1	equ	0xFE5
 11404                           fsr1l	equ	0xFE1
 11405                           indf2	equ	0xFDF
 11406                           postinc2	equ	0xFDE
 11407                           postdec2	equ	0xFDD
 11408                           fsr2h	equ	0xFDA
 11409                           fsr2l	equ	0xFD9
 11410                           status	equ	0xFD8
 11411                           
 11412 ;; *************** function _i2cNack *****************
 11413 ;; Defined at:
 11414 ;;		line 57 in file "I2C.c"
 11415 ;; Parameters:    Size  Location     Type
 11416 ;;		None
 11417 ;; Auto vars:     Size  Location     Type
 11418 ;;		None
 11419 ;; Return value:  Size  Location     Type
 11420 ;;		None               void
 11421 ;; Registers used:
 11422 ;;		wreg, cstack
 11423 ;; Tracked objects:
 11424 ;;		On entry : 0/0
 11425 ;;		On exit  : 0/0
 11426 ;;		Unchanged: 0/0
 11427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11428 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11429 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11430 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11431 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11432 ;;Total ram usage:        0 bytes
 11433 ;; Hardware stack levels used:    1
 11434 ;; Hardware stack levels required when called:    4
 11435 ;; This function calls:
 11436 ;;		_i2cHighScl
 11437 ;;		_i2cLowScl
 11438 ;; This function is called by:
 11439 ;;		_I2C_Read
 11440 ;; This function uses a non-reentrant model
 11441 ;;
 11442                           
 11443                           	psect	text64
 11444  00258E                     __ptext64:
 11445                           	opt stack 0
 11446  00258E                     _i2cNack:
 11447                           	opt stack 24
 11448                           
 11449                           ;I2C.c: 59: i2cHighScl();
 11450                           
 11451                           ;incstack = 0
 11452  00258E  ECB1  F012         	call	_i2cHighScl	;wreg free
 11453                           
 11454                           ;I2C.c: 60: i2cLowScl();
 11455  002592  ECD5  F012         	call	_i2cLowScl	;wreg free
 11456  002596  0012               	return		;funcret
 11457  002598                     __end_of_i2cNack:
 11458                           	opt stack 0
 11459                           tblptru	equ	0xFF8
 11460                           tblptrh	equ	0xFF7
 11461                           tblptrl	equ	0xFF6
 11462                           tablat	equ	0xFF5
 11463                           prodh	equ	0xFF4
 11464                           prodl	equ	0xFF3
 11465                           intcon	equ	0xFF2
 11466                           intcon2	equ	0xFF1
 11467                           postinc0	equ	0xFEE
 11468                           wreg	equ	0xFE8
 11469                           postdec1	equ	0xFE5
 11470                           fsr1l	equ	0xFE1
 11471                           indf2	equ	0xFDF
 11472                           postinc2	equ	0xFDE
 11473                           postdec2	equ	0xFDD
 11474                           fsr2h	equ	0xFDA
 11475                           fsr2l	equ	0xFD9
 11476                           status	equ	0xFD8
 11477                           
 11478 ;; *************** function _i2cAck *****************
 11479 ;; Defined at:
 11480 ;;		line 63 in file "I2C.c"
 11481 ;; Parameters:    Size  Location     Type
 11482 ;;		None
 11483 ;; Auto vars:     Size  Location     Type
 11484 ;;		None
 11485 ;; Return value:  Size  Location     Type
 11486 ;;		None               void
 11487 ;; Registers used:
 11488 ;;		wreg, cstack
 11489 ;; Tracked objects:
 11490 ;;		On entry : 0/0
 11491 ;;		On exit  : 0/0
 11492 ;;		Unchanged: 0/0
 11493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11494 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11495 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11496 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11497 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11498 ;;Total ram usage:        0 bytes
 11499 ;; Hardware stack levels used:    1
 11500 ;; Hardware stack levels required when called:    4
 11501 ;; This function calls:
 11502 ;;		_i2cHighScl
 11503 ;;		_i2cHighSda
 11504 ;;		_i2cLowScl
 11505 ;;		_i2cLowSda
 11506 ;; This function is called by:
 11507 ;;		_I2C_Read
 11508 ;; This function uses a non-reentrant model
 11509 ;;
 11510                           
 11511                           	psect	text65
 11512  002512                     __ptext65:
 11513                           	opt stack 0
 11514  002512                     _i2cAck:
 11515                           	opt stack 24
 11516                           
 11517                           ;I2C.c: 65: i2cLowSda();
 11518                           
 11519                           ;incstack = 0
 11520  002512  ECCC  F012         	call	_i2cLowSda	;wreg free
 11521                           
 11522                           ;I2C.c: 66: i2cHighScl();
 11523  002516  ECB1  F012         	call	_i2cHighScl	;wreg free
 11524                           
 11525                           ;I2C.c: 67: i2cLowScl();
 11526  00251A  ECD5  F012         	call	_i2cLowScl	;wreg free
 11527                           
 11528                           ;I2C.c: 68: i2cHighSda();
 11529  00251E  ECD9  F012         	call	_i2cHighSda	;wreg free
 11530  002522  0012               	return		;funcret
 11531  002524                     __end_of_i2cAck:
 11532                           	opt stack 0
 11533                           tblptru	equ	0xFF8
 11534                           tblptrh	equ	0xFF7
 11535                           tblptrl	equ	0xFF6
 11536                           tablat	equ	0xFF5
 11537                           prodh	equ	0xFF4
 11538                           prodl	equ	0xFF3
 11539                           intcon	equ	0xFF2
 11540                           intcon2	equ	0xFF1
 11541                           postinc0	equ	0xFEE
 11542                           wreg	equ	0xFE8
 11543                           postdec1	equ	0xFE5
 11544                           fsr1l	equ	0xFE1
 11545                           indf2	equ	0xFDF
 11546                           postinc2	equ	0xFDE
 11547                           postdec2	equ	0xFDD
 11548                           fsr2h	equ	0xFDA
 11549                           fsr2l	equ	0xFD9
 11550                           status	equ	0xFD8
 11551                           
 11552 ;; *************** function _I2C_ReStart *****************
 11553 ;; Defined at:
 11554 ;;		line 79 in file "I2C.c"
 11555 ;; Parameters:    Size  Location     Type
 11556 ;;		None
 11557 ;; Auto vars:     Size  Location     Type
 11558 ;;		None
 11559 ;; Return value:  Size  Location     Type
 11560 ;;		None               void
 11561 ;; Registers used:
 11562 ;;		wreg, cstack
 11563 ;; Tracked objects:
 11564 ;;		On entry : 0/0
 11565 ;;		On exit  : 0/0
 11566 ;;		Unchanged: 0/0
 11567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11568 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11569 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11570 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11571 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11572 ;;Total ram usage:        0 bytes
 11573 ;; Hardware stack levels used:    1
 11574 ;; Hardware stack levels required when called:    4
 11575 ;; This function calls:
 11576 ;;		_i2cHighScl
 11577 ;;		_i2cHighSda
 11578 ;;		_i2cLowScl
 11579 ;;		_i2cLowSda
 11580 ;; This function is called by:
 11581 ;;		_DS1621_Read_Temp
 11582 ;;		_DS3231_Read_Time
 11583 ;;		_I2C_Write_Address_Read_One_Byte
 11584 ;;		_I2C_Write_Cmd_Read_One_Byte
 11585 ;; This function uses a non-reentrant model
 11586 ;;
 11587                           
 11588                           	psect	text66
 11589  002464                     __ptext66:
 11590                           	opt stack 0
 11591  002464                     _I2C_ReStart:
 11592                           	opt stack 25
 11593                           
 11594                           ;I2C.c: 81: i2cLowScl();
 11595                           
 11596                           ;incstack = 0
 11597  002464  ECD5  F012         	call	_i2cLowScl	;wreg free
 11598                           
 11599                           ;I2C.c: 82: i2cHighSda();
 11600  002468  ECD9  F012         	call	_i2cHighSda	;wreg free
 11601                           
 11602                           ;I2C.c: 83: i2cHighScl();
 11603  00246C  ECB1  F012         	call	_i2cHighScl	;wreg free
 11604                           
 11605                           ;I2C.c: 84: i2cLowSda();
 11606  002470  ECCC  F012         	call	_i2cLowSda	;wreg free
 11607                           
 11608                           ;I2C.c: 85: i2cLowScl();
 11609  002474  ECD5  F012         	call	_i2cLowScl	;wreg free
 11610  002478  0012               	return		;funcret
 11611  00247A                     __end_of_I2C_ReStart:
 11612                           	opt stack 0
 11613                           tblptru	equ	0xFF8
 11614                           tblptrh	equ	0xFF7
 11615                           tblptrl	equ	0xFF6
 11616                           tablat	equ	0xFF5
 11617                           prodh	equ	0xFF4
 11618                           prodl	equ	0xFF3
 11619                           intcon	equ	0xFF2
 11620                           intcon2	equ	0xFF1
 11621                           postinc0	equ	0xFEE
 11622                           wreg	equ	0xFE8
 11623                           postdec1	equ	0xFE5
 11624                           fsr1l	equ	0xFE1
 11625                           indf2	equ	0xFDF
 11626                           postinc2	equ	0xFDE
 11627                           postdec2	equ	0xFDD
 11628                           fsr2h	equ	0xFDA
 11629                           fsr2l	equ	0xFD9
 11630                           status	equ	0xFD8
 11631                           
 11632 ;; *************** function _i2cLowSda *****************
 11633 ;; Defined at:
 11634 ;;		line 102 in file "I2C.c"
 11635 ;; Parameters:    Size  Location     Type
 11636 ;;		None
 11637 ;; Auto vars:     Size  Location     Type
 11638 ;;		None
 11639 ;; Return value:  Size  Location     Type
 11640 ;;		None               void
 11641 ;; Registers used:
 11642 ;;		None
 11643 ;; Tracked objects:
 11644 ;;		On entry : 0/0
 11645 ;;		On exit  : 0/0
 11646 ;;		Unchanged: 0/0
 11647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11648 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11649 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11650 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11651 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11652 ;;Total ram usage:        0 bytes
 11653 ;; Hardware stack levels used:    1
 11654 ;; Hardware stack levels required when called:    3
 11655 ;; This function calls:
 11656 ;;		Nothing
 11657 ;; This function is called by:
 11658 ;;		_I2C_Write
 11659 ;;		_i2cAck
 11660 ;;		_I2C_Start
 11661 ;;		_I2C_ReStart
 11662 ;;		_I2C_Stop
 11663 ;; This function uses a non-reentrant model
 11664 ;;
 11665                           
 11666                           	psect	text67
 11667  002598                     __ptext67:
 11668                           	opt stack 0
 11669  002598                     _i2cLowSda:
 11670                           	opt stack 23
 11671                           
 11672                           ;I2C.c: 104: PORTBbits.RB5 = 0;
 11673                           
 11674                           ;incstack = 0
 11675  002598  9A81               	bcf	3969,5,c	;volatile
 11676                           
 11677                           ;I2C.c: 105: TRISBbits.RB5 = 0;
 11678  00259A  9A93               	bcf	3987,5,c	;volatile
 11679                           
 11680                           ;I2C.c: 106: _delay((unsigned long)((2)*(8000000/4000000.0)));
 11681  00259C  D000               	nop2		;2 cycle nop
 11682  00259E  D000               	nop2		;2 cycle nop
 11683  0025A0  0012               	return		;funcret
 11684  0025A2                     __end_of_i2cLowSda:
 11685                           	opt stack 0
 11686                           tblptru	equ	0xFF8
 11687                           tblptrh	equ	0xFF7
 11688                           tblptrl	equ	0xFF6
 11689                           tablat	equ	0xFF5
 11690                           prodh	equ	0xFF4
 11691                           prodl	equ	0xFF3
 11692                           intcon	equ	0xFF2
 11693                           intcon2	equ	0xFF1
 11694                           postinc0	equ	0xFEE
 11695                           wreg	equ	0xFE8
 11696                           postdec1	equ	0xFE5
 11697                           fsr1l	equ	0xFE1
 11698                           indf2	equ	0xFDF
 11699                           postinc2	equ	0xFDE
 11700                           postdec2	equ	0xFDD
 11701                           fsr2h	equ	0xFDA
 11702                           fsr2l	equ	0xFD9
 11703                           status	equ	0xFD8
 11704                           
 11705 ;; *************** function _i2cLowScl *****************
 11706 ;; Defined at:
 11707 ;;		line 115 in file "I2C.c"
 11708 ;; Parameters:    Size  Location     Type
 11709 ;;		None
 11710 ;; Auto vars:     Size  Location     Type
 11711 ;;		None
 11712 ;; Return value:  Size  Location     Type
 11713 ;;		None               void
 11714 ;; Registers used:
 11715 ;;		None
 11716 ;; Tracked objects:
 11717 ;;		On entry : 0/0
 11718 ;;		On exit  : 0/0
 11719 ;;		Unchanged: 0/0
 11720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11722 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11723 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11724 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11725 ;;Total ram usage:        0 bytes
 11726 ;; Hardware stack levels used:    1
 11727 ;; Hardware stack levels required when called:    3
 11728 ;; This function calls:
 11729 ;;		Nothing
 11730 ;; This function is called by:
 11731 ;;		_I2C_Read
 11732 ;;		_I2C_Write
 11733 ;;		_i2cNack
 11734 ;;		_i2cAck
 11735 ;;		_I2C_Start
 11736 ;;		_I2C_ReStart
 11737 ;;		_I2C_Stop
 11738 ;; This function uses a non-reentrant model
 11739 ;;
 11740                           
 11741                           	psect	text68
 11742  0025AA                     __ptext68:
 11743                           	opt stack 0
 11744  0025AA                     _i2cLowScl:
 11745                           	opt stack 23
 11746                           
 11747                           ;I2C.c: 117: PORTBbits.RB4 = 0;
 11748                           
 11749                           ;incstack = 0
 11750  0025AA  9881               	bcf	3969,4,c	;volatile
 11751                           
 11752                           ;I2C.c: 118: TRISBbits.RB4 = 0;
 11753  0025AC  9893               	bcf	3987,4,c	;volatile
 11754                           
 11755                           ;I2C.c: 119: _delay((unsigned long)((1)*(8000000/4000000.0)));
 11756  0025AE  D000               	nop2		;2 cycle nop
 11757  0025B0  0012               	return		;funcret
 11758  0025B2                     __end_of_i2cLowScl:
 11759                           	opt stack 0
 11760                           tblptru	equ	0xFF8
 11761                           tblptrh	equ	0xFF7
 11762                           tblptrl	equ	0xFF6
 11763                           tablat	equ	0xFF5
 11764                           prodh	equ	0xFF4
 11765                           prodl	equ	0xFF3
 11766                           intcon	equ	0xFF2
 11767                           intcon2	equ	0xFF1
 11768                           postinc0	equ	0xFEE
 11769                           wreg	equ	0xFE8
 11770                           postdec1	equ	0xFE5
 11771                           fsr1l	equ	0xFE1
 11772                           indf2	equ	0xFDF
 11773                           postinc2	equ	0xFDE
 11774                           postdec2	equ	0xFDD
 11775                           fsr2h	equ	0xFDA
 11776                           fsr2l	equ	0xFD9
 11777                           status	equ	0xFD8
 11778                           
 11779 ;; *************** function _i2cHighSda *****************
 11780 ;; Defined at:
 11781 ;;		line 96 in file "I2C.c"
 11782 ;; Parameters:    Size  Location     Type
 11783 ;;		None
 11784 ;; Auto vars:     Size  Location     Type
 11785 ;;		None
 11786 ;; Return value:  Size  Location     Type
 11787 ;;		None               void
 11788 ;; Registers used:
 11789 ;;		None
 11790 ;; Tracked objects:
 11791 ;;		On entry : 0/0
 11792 ;;		On exit  : 0/0
 11793 ;;		Unchanged: 0/0
 11794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11795 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11796 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11797 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11798 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11799 ;;Total ram usage:        0 bytes
 11800 ;; Hardware stack levels used:    1
 11801 ;; Hardware stack levels required when called:    3
 11802 ;; This function calls:
 11803 ;;		Nothing
 11804 ;; This function is called by:
 11805 ;;		_I2C_Init
 11806 ;;		_I2C_Read
 11807 ;;		_I2C_Write
 11808 ;;		_i2cAck
 11809 ;;		_I2C_Start
 11810 ;;		_I2C_ReStart
 11811 ;;		_I2C_Stop
 11812 ;; This function uses a non-reentrant model
 11813 ;;
 11814                           
 11815                           	psect	text69
 11816  0025B2                     __ptext69:
 11817                           	opt stack 0
 11818  0025B2                     _i2cHighSda:
 11819                           	opt stack 25
 11820                           
 11821                           ;I2C.c: 98: TRISBbits.RB5 = 1;
 11822                           
 11823                           ;incstack = 0
 11824  0025B2  8A93               	bsf	3987,5,c	;volatile
 11825                           
 11826                           ;I2C.c: 99: _delay((unsigned long)((2)*(8000000/4000000.0)));
 11827  0025B4  D000               	nop2		;2 cycle nop
 11828  0025B6  D000               	nop2		;2 cycle nop
 11829  0025B8  0012               	return		;funcret
 11830  0025BA                     __end_of_i2cHighSda:
 11831                           	opt stack 0
 11832                           tblptru	equ	0xFF8
 11833                           tblptrh	equ	0xFF7
 11834                           tblptrl	equ	0xFF6
 11835                           tablat	equ	0xFF5
 11836                           prodh	equ	0xFF4
 11837                           prodl	equ	0xFF3
 11838                           intcon	equ	0xFF2
 11839                           intcon2	equ	0xFF1
 11840                           postinc0	equ	0xFEE
 11841                           wreg	equ	0xFE8
 11842                           postdec1	equ	0xFE5
 11843                           fsr1l	equ	0xFE1
 11844                           indf2	equ	0xFDF
 11845                           postinc2	equ	0xFDE
 11846                           postdec2	equ	0xFDD
 11847                           fsr2h	equ	0xFDA
 11848                           fsr2l	equ	0xFD9
 11849                           status	equ	0xFD8
 11850                           
 11851 ;; *************** function _i2cHighScl *****************
 11852 ;; Defined at:
 11853 ;;		line 109 in file "I2C.c"
 11854 ;; Parameters:    Size  Location     Type
 11855 ;;		None
 11856 ;; Auto vars:     Size  Location     Type
 11857 ;;		None
 11858 ;; Return value:  Size  Location     Type
 11859 ;;		None               void
 11860 ;; Registers used:
 11861 ;;		wreg
 11862 ;; Tracked objects:
 11863 ;;		On entry : 0/0
 11864 ;;		On exit  : 0/0
 11865 ;;		Unchanged: 0/0
 11866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11867 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11868 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11869 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11870 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11871 ;;Total ram usage:        0 bytes
 11872 ;; Hardware stack levels used:    1
 11873 ;; Hardware stack levels required when called:    3
 11874 ;; This function calls:
 11875 ;;		Nothing
 11876 ;; This function is called by:
 11877 ;;		_I2C_Init
 11878 ;;		_I2C_Read
 11879 ;;		_I2C_Write
 11880 ;;		_i2cNack
 11881 ;;		_i2cAck
 11882 ;;		_I2C_Start
 11883 ;;		_I2C_ReStart
 11884 ;;		_I2C_Stop
 11885 ;; This function uses a non-reentrant model
 11886 ;;
 11887                           
 11888                           	psect	text70
 11889  002562                     __ptext70:
 11890                           	opt stack 0
 11891  002562                     _i2cHighScl:
 11892                           	opt stack 25
 11893                           
 11894                           ;I2C.c: 111: TRISBbits.RB4 = 1;
 11895                           
 11896                           ;incstack = 0
 11897  002562  8893               	bsf	3987,4,c	;volatile
 11898                           
 11899                           ;I2C.c: 112: _delay((unsigned long)((10)*(8000000/4000000.0)));
 11900  002564  0E06               	movlw	6
 11901  002566                     u5977:
 11902  002566  2EE8               	decfsz	wreg,f,c
 11903  002568  D7FE               	goto	u5977
 11904  00256A  D000               	nop2		;nop
 11905  00256C  0012               	return		;funcret
 11906  00256E                     __end_of_i2cHighScl:
 11907                           	opt stack 0
 11908                           tblptru	equ	0xFF8
 11909                           tblptrh	equ	0xFF7
 11910                           tblptrl	equ	0xFF6
 11911                           tablat	equ	0xFF5
 11912                           prodh	equ	0xFF4
 11913                           prodl	equ	0xFF3
 11914                           intcon	equ	0xFF2
 11915                           intcon2	equ	0xFF1
 11916                           postinc0	equ	0xFEE
 11917                           wreg	equ	0xFE8
 11918                           postdec1	equ	0xFE5
 11919                           fsr1l	equ	0xFE1
 11920                           indf2	equ	0xFDF
 11921                           postinc2	equ	0xFDE
 11922                           postdec2	equ	0xFDD
 11923                           fsr2h	equ	0xFDA
 11924                           fsr2l	equ	0xFD9
 11925                           status	equ	0xFD8
 11926                           
 11927 ;; *************** function _chkisr *****************
 11928 ;; Defined at:
 11929 ;;		line 30 in file "Interrupt.c"
 11930 ;; Parameters:    Size  Location     Type
 11931 ;;		None
 11932 ;; Auto vars:     Size  Location     Type
 11933 ;;		None
 11934 ;; Return value:  Size  Location     Type
 11935 ;;		None               void
 11936 ;; Registers used:
 11937 ;;		wreg, status,2, status,0, cstack
 11938 ;; Tracked objects:
 11939 ;;		On entry : 0/0
 11940 ;;		On exit  : 0/0
 11941 ;;		Unchanged: 0/0
 11942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11943 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11944 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11945 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11946 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11947 ;;Total ram usage:       14 bytes
 11948 ;; Hardware stack levels used:    1
 11949 ;; Hardware stack levels required when called:    2
 11950 ;; This function calls:
 11951 ;;		_INT0_isr
 11952 ;;		_TIMER1_isr
 11953 ;; This function is called by:
 11954 ;;		Interrupt level 2
 11955 ;; This function uses a non-reentrant model
 11956 ;;
 11957                           
 11958                           	psect	intcode
 11959  000008                     __pintcode:
 11960                           	opt stack 0
 11961  000008                     _chkisr:
 11962                           	opt stack 20
 11963                           
 11964                           ;incstack = 0
 11965  000008  CFFA F003          	movff	pclath,??_chkisr
 11966  00000C  CFFB F004          	movff	pclatu,??_chkisr+1
 11967  000010  CFE9 F005          	movff	fsr0l,??_chkisr+2
 11968  000014  ED3A  F00E         	call	int_func,f	;refresh shadow registers
 11969                           pclatu	equ	0xFFB
 11970                           pclath	equ	0xFFA
 11971                           tblptru	equ	0xFF8
 11972                           tblptrh	equ	0xFF7
 11973                           tblptrl	equ	0xFF6
 11974                           tablat	equ	0xFF5
 11975                           prodh	equ	0xFF4
 11976                           prodl	equ	0xFF3
 11977                           intcon	equ	0xFF2
 11978                           intcon2	equ	0xFF1
 11979                           postinc0	equ	0xFEE
 11980                           fsr0l	equ	0xFE9
 11981                           wreg	equ	0xFE8
 11982                           postdec1	equ	0xFE5
 11983                           fsr1l	equ	0xFE1
 11984                           indf2	equ	0xFDF
 11985                           postinc2	equ	0xFDE
 11986                           postdec2	equ	0xFDD
 11987                           fsr2h	equ	0xFDA
 11988                           fsr2l	equ	0xFD9
 11989                           status	equ	0xFD8
 11990                           
 11991                           	psect	intcode_body
 11992  001C74                     __pintcode_body:
 11993                           	opt stack 20
 11994  001C74                     int_func:
 11995                           	opt stack 20
 11996  001C74  0006               	pop		; remove dummy address from shadow register refresh
 11997  001C76  CFEA F006          	movff	fsr0h,??_chkisr+3
 11998  001C7A  CFE1 F007          	movff	fsr1l,??_chkisr+4
 11999  001C7E  CFE2 F008          	movff	fsr1h,??_chkisr+5
 12000  001C82  CFD9 F009          	movff	fsr2l,??_chkisr+6
 12001  001C86  CFDA F00A          	movff	fsr2h,??_chkisr+7
 12002  001C8A  CFF3 F00B          	movff	prodl,??_chkisr+8
 12003  001C8E  CFF4 F00C          	movff	prodh,??_chkisr+9
 12004  001C92  CFF6 F00D          	movff	tblptrl,??_chkisr+10
 12005  001C96  CFF7 F00E          	movff	tblptrh,??_chkisr+11
 12006  001C9A  CFF8 F00F          	movff	tblptru,??_chkisr+12
 12007  001C9E  CFF5 F010          	movff	tablat,??_chkisr+13
 12008                           
 12009                           ;Interrupt.c: 32: if (PIR1bits.TMR1IF == 1) TIMER1_isr();
 12010  001CA2  A09E               	btfss	3998,0,c	;volatile
 12011  001CA4  D003               	goto	i2l4962
 12012  001CA6  ECB7  F012         	call	_TIMER1_isr	;wreg free
 12013  001CAA  D000               	goto	i2l4962
 12014  001CAC                     i2l4962:
 12015                           
 12016                           ;Interrupt.c: 33: if (INTCONbits.INT0IF == 1) INT0_isr();
 12017  001CAC  A2F2               	btfss	intcon,1,c	;volatile
 12018  001CAE  D003               	goto	i2l253
 12019  001CB0  ECE4  F006         	call	_INT0_isr	;wreg free
 12020  001CB4  D000               	goto	i2l253
 12021  001CB6                     i2l253:
 12022  001CB6  C010  FFF5         	movff	??_chkisr+13,tablat
 12023  001CBA  C00F  FFF8         	movff	??_chkisr+12,tblptru
 12024  001CBE  C00E  FFF7         	movff	??_chkisr+11,tblptrh
 12025  001CC2  C00D  FFF6         	movff	??_chkisr+10,tblptrl
 12026  001CC6  C00C  FFF4         	movff	??_chkisr+9,prodh
 12027  001CCA  C00B  FFF3         	movff	??_chkisr+8,prodl
 12028  001CCE  C00A  FFDA         	movff	??_chkisr+7,fsr2h
 12029  001CD2  C009  FFD9         	movff	??_chkisr+6,fsr2l
 12030  001CD6  C008  FFE2         	movff	??_chkisr+5,fsr1h
 12031  001CDA  C007  FFE1         	movff	??_chkisr+4,fsr1l
 12032  001CDE  C006  FFEA         	movff	??_chkisr+3,fsr0h
 12033  001CE2  C005  FFE9         	movff	??_chkisr+2,fsr0l
 12034  001CE6  C004  FFFB         	movff	??_chkisr+1,pclatu
 12035  001CEA  C003  FFFA         	movff	??_chkisr,pclath
 12036  001CEE  0011               	retfie		f
 12037  001CF0                     __end_of_chkisr:
 12038                           	opt stack 0
 12039                           pclatu	equ	0xFFB
 12040                           pclath	equ	0xFFA
 12041                           tblptru	equ	0xFF8
 12042                           tblptrh	equ	0xFF7
 12043                           tblptrl	equ	0xFF6
 12044                           tablat	equ	0xFF5
 12045                           prodh	equ	0xFF4
 12046                           prodl	equ	0xFF3
 12047                           intcon	equ	0xFF2
 12048                           intcon2	equ	0xFF1
 12049                           postinc0	equ	0xFEE
 12050                           fsr0h	equ	0xFEA
 12051                           fsr0l	equ	0xFE9
 12052                           wreg	equ	0xFE8
 12053                           postdec1	equ	0xFE5
 12054                           fsr1h	equ	0xFE2
 12055                           fsr1l	equ	0xFE1
 12056                           indf2	equ	0xFDF
 12057                           postinc2	equ	0xFDE
 12058                           postdec2	equ	0xFDD
 12059                           fsr2h	equ	0xFDA
 12060                           fsr2l	equ	0xFD9
 12061                           status	equ	0xFD8
 12062                           
 12063 ;; *************** function _TIMER1_isr *****************
 12064 ;; Defined at:
 12065 ;;		line 36 in file "Interrupt.c"
 12066 ;; Parameters:    Size  Location     Type
 12067 ;;		None
 12068 ;; Auto vars:     Size  Location     Type
 12069 ;;		None
 12070 ;; Return value:  Size  Location     Type
 12071 ;;		None               void
 12072 ;; Registers used:
 12073 ;;		wreg, status,2
 12074 ;; Tracked objects:
 12075 ;;		On entry : 0/0
 12076 ;;		On exit  : 0/0
 12077 ;;		Unchanged: 0/0
 12078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12079 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12080 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12081 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12082 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12083 ;;Total ram usage:        0 bytes
 12084 ;; Hardware stack levels used:    1
 12085 ;; This function calls:
 12086 ;;		Nothing
 12087 ;; This function is called by:
 12088 ;;		_chkisr
 12089 ;; This function uses a non-reentrant model
 12090 ;;
 12091                           
 12092                           	psect	text72
 12093  00256E                     __ptext72:
 12094                           	opt stack 0
 12095  00256E                     _TIMER1_isr:
 12096                           	opt stack 21
 12097                           
 12098                           ;Interrupt.c: 38: Nec_state = 0;
 12099                           
 12100                           ;incstack = 0
 12101  00256E  0E00               	movlw	0
 12102  002570  6E52               	movwf	_Nec_state,c
 12103                           
 12104                           ;Interrupt.c: 39: INTCON2bits.INTEDG0 = 0;
 12105  002572  9CF1               	bcf	intcon2,6,c	;volatile
 12106                           
 12107                           ;Interrupt.c: 40: T1CONbits.TMR1ON = 0;
 12108  002574  90CD               	bcf	4045,0,c	;volatile
 12109                           
 12110                           ;Interrupt.c: 41: PIR1bits.TMR1IF = 0;
 12111  002576  909E               	bcf	3998,0,c	;volatile
 12112  002578  0012               	return		;funcret
 12113  00257A                     __end_of_TIMER1_isr:
 12114                           	opt stack 0
 12115                           pclatu	equ	0xFFB
 12116                           pclath	equ	0xFFA
 12117                           tblptru	equ	0xFF8
 12118                           tblptrh	equ	0xFF7
 12119                           tblptrl	equ	0xFF6
 12120                           tablat	equ	0xFF5
 12121                           prodh	equ	0xFF4
 12122                           prodl	equ	0xFF3
 12123                           intcon	equ	0xFF2
 12124                           intcon2	equ	0xFF1
 12125                           postinc0	equ	0xFEE
 12126                           fsr0h	equ	0xFEA
 12127                           fsr0l	equ	0xFE9
 12128                           wreg	equ	0xFE8
 12129                           postdec1	equ	0xFE5
 12130                           fsr1h	equ	0xFE2
 12131                           fsr1l	equ	0xFE1
 12132                           indf2	equ	0xFDF
 12133                           postinc2	equ	0xFDE
 12134                           postdec2	equ	0xFDD
 12135                           fsr2h	equ	0xFDA
 12136                           fsr2l	equ	0xFD9
 12137                           status	equ	0xFD8
 12138                           
 12139 ;; *************** function _INT0_isr *****************
 12140 ;; Defined at:
 12141 ;;		line 50 in file "Interrupt.c"
 12142 ;; Parameters:    Size  Location     Type
 12143 ;;		None
 12144 ;; Auto vars:     Size  Location     Type
 12145 ;;		None
 12146 ;; Return value:  Size  Location     Type
 12147 ;;		None               void
 12148 ;; Registers used:
 12149 ;;		wreg, status,2, status,0, cstack
 12150 ;; Tracked objects:
 12151 ;;		On entry : 0/0
 12152 ;;		On exit  : 0/0
 12153 ;;		Unchanged: 0/0
 12154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12155 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12156 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12157 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12158 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12159 ;;Total ram usage:        2 bytes
 12160 ;; Hardware stack levels used:    1
 12161 ;; Hardware stack levels required when called:    1
 12162 ;; This function calls:
 12163 ;;		_force_nec_state0
 12164 ;; This function is called by:
 12165 ;;		_chkisr
 12166 ;; This function uses a non-reentrant model
 12167 ;;
 12168                           
 12169                           	psect	text73
 12170  000DC8                     __ptext73:
 12171                           	opt stack 0
 12172  000DC8                     _INT0_isr:
 12173                           	opt stack 20
 12174                           
 12175                           ;Interrupt.c: 52: INTCONbits.INT0IF = 0;
 12176                           
 12177                           ;incstack = 0
 12178  000DC8  92F2               	bcf	intcon,1,c	;volatile
 12179                           
 12180                           ;Interrupt.c: 53: if (Nec_state != 0)
 12181  000DCA  5052               	movf	_Nec_state,w,c
 12182  000DCC  B4D8               	btfsc	status,2,c
 12183  000DCE  D0A3               	goto	i2l4468
 12184                           
 12185                           ;Interrupt.c: 54: {
 12186                           ;Interrupt.c: 55: Time_Elapsed = (TMR1H << 8) | TMR1L;
 12187  000DD0  50CE               	movf	4046,w,c	;volatile
 12188  000DD2  CFCF F001          	movff	4047,??_INT0_isr	;volatile
 12189  000DD6  6A02               	clrf	(??_INT0_isr+1)& (0+255),c
 12190  000DD8  C001  F002         	movff	??_INT0_isr,??_INT0_isr+1
 12191  000DDC  6A01               	clrf	??_INT0_isr,c
 12192  000DDE  1001               	iorwf	??_INT0_isr,w,c
 12193  000DE0  6E4A               	movwf	_Time_Elapsed,c
 12194  000DE2  5002               	movf	??_INT0_isr+1,w,c
 12195  000DE4  6E4B               	movwf	_Time_Elapsed+1,c
 12196                           
 12197                           ;Interrupt.c: 56: TMR1H = 0;
 12198  000DE6  0E00               	movlw	0
 12199  000DE8  6ECF               	movwf	4047,c	;volatile
 12200                           
 12201                           ;Interrupt.c: 57: TMR1L = 0;
 12202  000DEA  0E00               	movlw	0
 12203  000DEC  6ECE               	movwf	4046,c	;volatile
 12204                           
 12205                           ;Interrupt.c: 58: }
 12206                           ;Interrupt.c: 60: switch(Nec_state)
 12207  000DEE  D093               	goto	i2l4468
 12208  000DF0                     i2l4396:
 12209                           
 12210                           ;Interrupt.c: 63: {
 12211                           ;Interrupt.c: 64: TMR1H = 0;
 12212  000DF0  0E00               	movlw	0
 12213  000DF2  6ECF               	movwf	4047,c	;volatile
 12214                           
 12215                           ;Interrupt.c: 65: TMR1L = 0;
 12216  000DF4  0E00               	movlw	0
 12217  000DF6  6ECE               	movwf	4046,c	;volatile
 12218                           
 12219                           ;Interrupt.c: 66: PIR1bits.TMR1IF = 0;
 12220  000DF8  909E               	bcf	3998,0,c	;volatile
 12221                           
 12222                           ;Interrupt.c: 67: T1CON= 0x90;
 12223  000DFA  0E90               	movlw	144
 12224  000DFC  6ECD               	movwf	4045,c	;volatile
 12225                           
 12226                           ;Interrupt.c: 68: T1CONbits.TMR1ON = 1;
 12227  000DFE  80CD               	bsf	4045,0,c	;volatile
 12228                           
 12229                           ;Interrupt.c: 69: bit_count = 0;
 12230  000E00  0E00               	movlw	0
 12231  000E02  6E58               	movwf	_bit_count,c
 12232                           
 12233                           ;Interrupt.c: 70: Nec_code = 0;
 12234  000E04  0E00               	movlw	0
 12235  000E06  0100               	movlb	0	; () banked
 12236  000E08  6FE5               	movwf	_Nec_code& (0+255),b
 12237  000E0A  0E00               	movlw	0
 12238  000E0C  6FE6               	movwf	(_Nec_code+1)& (0+255),b
 12239  000E0E  0E00               	movlw	0
 12240  000E10  6FE7               	movwf	(_Nec_code+2)& (0+255),b
 12241  000E12  0E00               	movlw	0
 12242  000E14  6FE8               	movwf	(_Nec_code+3)& (0+255),b
 12243                           
 12244                           ;Interrupt.c: 71: Nec_state = 1;
 12245  000E16  0E01               	movlw	1
 12246  000E18  6E52               	movwf	_Nec_state,c
 12247  000E1A  D027               	goto	i2l4426
 12248                           
 12249                           ; BSR set to: 0
 12250                           ;Interrupt.c: 73: return;
 12251                           
 12252                           ; BSR set to: 0
 12253                           ;Interrupt.c: 72: INTCON2bits.INTEDG0 = 1;
 12254  000E1C  D08D               	goto	i2l265
 12255  000E1E                     i2l4406:
 12256                           
 12257                           ;Interrupt.c: 77: {
 12258                           ;Interrupt.c: 78: if (Time_Elapsed > 8500 && Time_Elapsed < 9500)
 12259  000E1E  0E35               	movlw	53
 12260  000E20  5C4A               	subwf	_Time_Elapsed,w,c
 12261  000E22  0E21               	movlw	33
 12262  000E24  584B               	subwfb	_Time_Elapsed+1,w,c
 12263  000E26  A0D8               	btfss	status,0,c
 12264  000E28  D009               	goto	i2l4412
 12265  000E2A  0E1C               	movlw	28
 12266  000E2C  5C4A               	subwf	_Time_Elapsed,w,c
 12267  000E2E  0E25               	movlw	37
 12268  000E30  584B               	subwfb	_Time_Elapsed+1,w,c
 12269  000E32  B0D8               	btfsc	status,0,c
 12270  000E34  D003               	goto	i2l4412
 12271                           
 12272                           ;Interrupt.c: 79: {
 12273                           ;Interrupt.c: 80: Nec_state = 2;
 12274  000E36  0E02               	movlw	2
 12275  000E38  6E52               	movwf	_Nec_state,c
 12276                           
 12277                           ;Interrupt.c: 81: }
 12278  000E3A  D02A               	goto	i2l4438
 12279  000E3C                     i2l4412:
 12280                           
 12281                           ;Interrupt.c: 82: else
 12282                           ;Interrupt.c: 83: {
 12283                           ;Interrupt.c: 84: force_nec_state0();
 12284  000E3C  ECDD  F012         	call	_force_nec_state0	;wreg free
 12285  000E40  D027               	goto	i2l4438
 12286  000E42  D026               	goto	i2l4438
 12287                           
 12288                           ;Interrupt.c: 87: return;
 12289                           
 12290                           ;Interrupt.c: 85: }
 12291                           ;Interrupt.c: 86: INTCON2bits.INTEDG0 = 0;
 12292  000E44  D079               	goto	i2l265
 12293  000E46                     i2l4418:
 12294                           
 12295                           ;Interrupt.c: 91: {
 12296                           ;Interrupt.c: 92: if (Time_Elapsed > 4000 && Time_Elapsed < 5000 )
 12297  000E46  0EA1               	movlw	161
 12298  000E48  5C4A               	subwf	_Time_Elapsed,w,c
 12299  000E4A  0E0F               	movlw	15
 12300  000E4C  584B               	subwfb	_Time_Elapsed+1,w,c
 12301  000E4E  A0D8               	btfss	status,0,c
 12302  000E50  D009               	goto	i2l4424
 12303  000E52  0E88               	movlw	136
 12304  000E54  5C4A               	subwf	_Time_Elapsed,w,c
 12305  000E56  0E13               	movlw	19
 12306  000E58  584B               	subwfb	_Time_Elapsed+1,w,c
 12307  000E5A  B0D8               	btfsc	status,0,c
 12308  000E5C  D003               	goto	i2l4424
 12309                           
 12310                           ;Interrupt.c: 93: {
 12311                           ;Interrupt.c: 94: Nec_state = 3;
 12312  000E5E  0E03               	movlw	3
 12313  000E60  6E52               	movwf	_Nec_state,c
 12314                           
 12315                           ;Interrupt.c: 95: }
 12316  000E62  D003               	goto	i2l4426
 12317  000E64                     i2l4424:
 12318                           
 12319                           ;Interrupt.c: 96: else
 12320                           ;Interrupt.c: 97: {
 12321                           ;Interrupt.c: 98: force_nec_state0();
 12322  000E64  ECDD  F012         	call	_force_nec_state0	;wreg free
 12323  000E68  D000               	goto	i2l4426
 12324  000E6A                     i2l4426:
 12325                           
 12326                           ;Interrupt.c: 99: }
 12327                           ;Interrupt.c: 100: INTCON2bits.INTEDG0 = 1;
 12328  000E6A  8CF1               	bsf	intcon2,6,c	;volatile
 12329                           
 12330                           ;Interrupt.c: 101: return;
 12331  000E6C  D065               	goto	i2l265
 12332  000E6E                     i2l4430:
 12333                           
 12334                           ;Interrupt.c: 105: {
 12335                           ;Interrupt.c: 106: if (Time_Elapsed > 400 && Time_Elapsed < 700)
 12336  000E6E  0E91               	movlw	145
 12337  000E70  5C4A               	subwf	_Time_Elapsed,w,c
 12338  000E72  0E01               	movlw	1
 12339  000E74  584B               	subwfb	_Time_Elapsed+1,w,c
 12340  000E76  A0D8               	btfss	status,0,c
 12341  000E78  D008               	goto	i2l4436
 12342  000E7A  0EBC               	movlw	188
 12343  000E7C  5C4A               	subwf	_Time_Elapsed,w,c
 12344  000E7E  0E02               	movlw	2
 12345  000E80  584B               	subwfb	_Time_Elapsed+1,w,c
 12346  000E82  B0D8               	btfsc	status,0,c
 12347  000E84  D002               	goto	i2l4436
 12348                           
 12349                           ;Interrupt.c: 107: {
 12350                           ;Interrupt.c: 108: Nec_state = 4;
 12351  000E86  0E04               	movlw	4
 12352  000E88  D7D7               	goto	L12
 12353  000E8A                     i2l4436:
 12354                           
 12355                           ;Interrupt.c: 110: else
 12356                           ;Interrupt.c: 111: {
 12357                           ;Interrupt.c: 112: force_nec_state0();
 12358  000E8A  ECDD  F012         	call	_force_nec_state0	;wreg free
 12359  000E8E  D000               	goto	i2l4438
 12360  000E90                     i2l4438:
 12361                           
 12362                           ;Interrupt.c: 113: }
 12363                           ;Interrupt.c: 114: INTCON2bits.INTEDG0 = 0;
 12364  000E90  9CF1               	bcf	intcon2,6,c	;volatile
 12365                           
 12366                           ;Interrupt.c: 115: return;
 12367  000E92  D052               	goto	i2l265
 12368  000E94                     i2l4442:
 12369                           
 12370                           ;Interrupt.c: 119: {
 12371                           ;Interrupt.c: 120: if (Time_Elapsed >= 400 && Time_Elapsed <= 1800)
 12372  000E94  0E90               	movlw	144
 12373  000E96  5C4A               	subwf	_Time_Elapsed,w,c
 12374  000E98  0E01               	movlw	1
 12375  000E9A  584B               	subwfb	_Time_Elapsed+1,w,c
 12376  000E9C  A0D8               	btfss	status,0,c
 12377  000E9E  D034               	goto	i2l4458
 12378  000EA0  0E09               	movlw	9
 12379  000EA2  5C4A               	subwf	_Time_Elapsed,w,c
 12380  000EA4  0E07               	movlw	7
 12381  000EA6  584B               	subwfb	_Time_Elapsed+1,w,c
 12382  000EA8  B0D8               	btfsc	status,0,c
 12383  000EAA  D02E               	goto	i2l4458
 12384                           
 12385                           ;Interrupt.c: 121: {
 12386                           ;Interrupt.c: 122: Nec_code = Nec_code<<1;
 12387  000EAC  90D8               	bcf	status,0,c
 12388  000EAE  0100               	movlb	0	; () banked
 12389  000EB0  35E5               	rlcf	_Nec_code& (0+255),w,b
 12390  000EB2  0100               	movlb	0	; () banked
 12391  000EB4  6FE5               	movwf	_Nec_code& (0+255),b
 12392  000EB6  0100               	movlb	0	; () banked
 12393  000EB8  35E6               	rlcf	(_Nec_code+1)& (0+255),w,b
 12394  000EBA  0100               	movlb	0	; () banked
 12395  000EBC  6FE6               	movwf	(_Nec_code+1)& (0+255),b
 12396  000EBE  0100               	movlb	0	; () banked
 12397  000EC0  35E7               	rlcf	(_Nec_code+2)& (0+255),w,b
 12398  000EC2  0100               	movlb	0	; () banked
 12399  000EC4  6FE7               	movwf	(_Nec_code+2)& (0+255),b
 12400  000EC6  0100               	movlb	0	; () banked
 12401  000EC8  35E8               	rlcf	(_Nec_code+3)& (0+255),w,b
 12402  000ECA  0100               	movlb	0	; () banked
 12403  000ECC  6FE8               	movwf	(_Nec_code+3)& (0+255),b
 12404                           
 12405                           ;Interrupt.c: 123: if ( Time_Elapsed > 1000)
 12406  000ECE  0EE9               	movlw	233
 12407  000ED0  5C4A               	subwf	_Time_Elapsed,w,c
 12408  000ED2  0E03               	movlw	3
 12409  000ED4  584B               	subwfb	_Time_Elapsed+1,w,c
 12410  000ED6  A0D8               	btfss	status,0,c
 12411  000ED8  D008               	goto	i2l4450
 12412                           
 12413                           ; BSR set to: 0
 12414                           ;Interrupt.c: 124: {
 12415                           ;Interrupt.c: 125: Nec_code++;
 12416  000EDA  0E01               	movlw	1
 12417  000EDC  0100               	movlb	0	; () banked
 12418  000EDE  27E5               	addwf	_Nec_code& (0+255),f,b
 12419  000EE0  0E00               	movlw	0
 12420  000EE2  23E6               	addwfc	(_Nec_code+1)& (0+255),f,b
 12421  000EE4  23E7               	addwfc	(_Nec_code+2)& (0+255),f,b
 12422  000EE6  23E8               	addwfc	(_Nec_code+3)& (0+255),f,b
 12423  000EE8  D000               	goto	i2l4450
 12424  000EEA                     i2l4450:
 12425                           
 12426                           ; BSR set to: 0
 12427                           ;Interrupt.c: 126: }
 12428                           ;Interrupt.c: 127: bit_count++;
 12429  000EEA  2A58               	incf	_bit_count,f,c
 12430                           
 12431                           ; BSR set to: 0
 12432                           ;Interrupt.c: 128: if(bit_count > 31)
 12433  000EEC  0E1F               	movlw	31
 12434  000EEE  6458               	cpfsgt	_bit_count,c
 12435  000EF0  D008               	goto	i2l278
 12436                           
 12437                           ; BSR set to: 0
 12438                           ;Interrupt.c: 129: {
 12439                           ;Interrupt.c: 130: nec_ok = 1;
 12440  000EF2  0E00               	movlw	0
 12441  000EF4  0100               	movlb	0	; () banked
 12442  000EF6  6FEE               	movwf	(_nec_ok+1)& (0+255),b
 12443  000EF8  0E01               	movlw	1
 12444  000EFA  6FED               	movwf	_nec_ok& (0+255),b
 12445                           
 12446                           ; BSR set to: 0
 12447                           ;Interrupt.c: 131: INTCONbits.INT0IE = 0;
 12448  000EFC  98F2               	bcf	intcon,4,c	;volatile
 12449                           
 12450                           ;Interrupt.c: 132: Nec_state = 0;
 12451  000EFE  0E00               	movlw	0
 12452  000F00  6E52               	movwf	_Nec_state,c
 12453  000F02                     i2l278:
 12454                           
 12455                           ; BSR set to: 0
 12456                           ;Interrupt.c: 133: }
 12457                           ;Interrupt.c: 134: Nec_state = 3;
 12458  000F02  0E03               	movlw	3
 12459  000F04  6E52               	movwf	_Nec_state,c
 12460                           
 12461                           ;Interrupt.c: 135: }
 12462  000F06  D003               	goto	i2l4460
 12463  000F08                     i2l4458:
 12464                           
 12465                           ;Interrupt.c: 136: else
 12466                           ;Interrupt.c: 137: {
 12467                           ;Interrupt.c: 138: force_nec_state0();
 12468  000F08  ECDD  F012         	call	_force_nec_state0	;wreg free
 12469  000F0C  D000               	goto	i2l4460
 12470  000F0E                     i2l4460:
 12471                           
 12472                           ;Interrupt.c: 139: }
 12473                           ;Interrupt.c: 140: INTCON2bits.INTEDG0 = 1;
 12474  000F0E  8CF1               	bsf	intcon2,6,c	;volatile
 12475                           
 12476                           ;Interrupt.c: 141: Nec_code1 = (char) ((Nec_code >> 8));
 12477  000F10  C0E6  F051         	movff	_Nec_code+1,_Nec_code1
 12478                           
 12479                           ;Interrupt.c: 143: }
 12480                           ;Interrupt.c: 144: }
 12481                           
 12482                           ;Interrupt.c: 142: return;
 12483  000F14  D011               	goto	i2l265
 12484  000F16                     i2l4468:
 12485  000F16  5052               	movf	_Nec_state,w,c
 12486                           
 12487                           ; Switch size 1, requested type "space"
 12488                           ; Number of cases is 5, Range of values is 0 to 4
 12489                           ; switch strategies available:
 12490                           ; Name         Instructions Cycles
 12491                           ; simple_byte           16     9 (average)
 12492                           ;	Chosen strategy is simple_byte
 12493  000F18  0A00               	xorlw	0	; case 0
 12494  000F1A  B4D8               	btfsc	status,2,c
 12495  000F1C  D769               	goto	i2l4396
 12496  000F1E  0A01               	xorlw	1	; case 1
 12497  000F20  B4D8               	btfsc	status,2,c
 12498  000F22  D77D               	goto	i2l4406
 12499  000F24  0A03               	xorlw	3	; case 2
 12500  000F26  B4D8               	btfsc	status,2,c
 12501  000F28  D78E               	goto	i2l4418
 12502  000F2A  0A01               	xorlw	1	; case 3
 12503  000F2C  B4D8               	btfsc	status,2,c
 12504  000F2E  D79F               	goto	i2l4430
 12505  000F30  0A07               	xorlw	7	; case 4
 12506  000F32  B4D8               	btfsc	status,2,c
 12507  000F34  D7AF               	goto	i2l4442
 12508  000F36  D000               	goto	i2l265
 12509  000F38                     i2l265:
 12510  000F38  0012               	return		;funcret
 12511  000F3A                     __end_of_INT0_isr:
 12512                           	opt stack 0
 12513                           pclatu	equ	0xFFB
 12514                           pclath	equ	0xFFA
 12515                           tblptru	equ	0xFF8
 12516                           tblptrh	equ	0xFF7
 12517                           tblptrl	equ	0xFF6
 12518                           tablat	equ	0xFF5
 12519                           prodh	equ	0xFF4
 12520                           prodl	equ	0xFF3
 12521                           intcon	equ	0xFF2
 12522                           intcon2	equ	0xFF1
 12523                           postinc0	equ	0xFEE
 12524                           fsr0h	equ	0xFEA
 12525                           fsr0l	equ	0xFE9
 12526                           wreg	equ	0xFE8
 12527                           postdec1	equ	0xFE5
 12528                           fsr1h	equ	0xFE2
 12529                           fsr1l	equ	0xFE1
 12530                           indf2	equ	0xFDF
 12531                           postinc2	equ	0xFDE
 12532                           postdec2	equ	0xFDD
 12533                           fsr2h	equ	0xFDA
 12534                           fsr2l	equ	0xFD9
 12535                           status	equ	0xFD8
 12536                           
 12537 ;; *************** function _force_nec_state0 *****************
 12538 ;; Defined at:
 12539 ;;		line 44 in file "Interrupt.c"
 12540 ;; Parameters:    Size  Location     Type
 12541 ;;		None
 12542 ;; Auto vars:     Size  Location     Type
 12543 ;;		None
 12544 ;; Return value:  Size  Location     Type
 12545 ;;		None               void
 12546 ;; Registers used:
 12547 ;;		wreg, status,2
 12548 ;; Tracked objects:
 12549 ;;		On entry : 0/0
 12550 ;;		On exit  : 0/0
 12551 ;;		Unchanged: 0/0
 12552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12553 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12554 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12555 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12556 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12557 ;;Total ram usage:        0 bytes
 12558 ;; Hardware stack levels used:    1
 12559 ;; This function calls:
 12560 ;;		Nothing
 12561 ;; This function is called by:
 12562 ;;		_INT0_isr
 12563 ;; This function uses a non-reentrant model
 12564 ;;
 12565                           
 12566                           	psect	text74
 12567  0025BA                     __ptext74:
 12568                           	opt stack 0
 12569  0025BA                     _force_nec_state0:
 12570                           	opt stack 20
 12571                           
 12572                           ;Interrupt.c: 46: Nec_state=0;
 12573                           
 12574                           ;incstack = 0
 12575  0025BA  0E00               	movlw	0
 12576  0025BC  6E52               	movwf	_Nec_state,c
 12577                           
 12578                           ;Interrupt.c: 47: T1CONbits.TMR1ON = 0;
 12579  0025BE  90CD               	bcf	4045,0,c	;volatile
 12580  0025C0  0012               	return		;funcret
 12581  0025C2                     __end_of_force_nec_state0:
 12582                           	opt stack 0
 12583                           pclatu	equ	0xFFB
 12584                           pclath	equ	0xFFA
 12585                           tblptru	equ	0xFF8
 12586                           tblptrh	equ	0xFF7
 12587                           tblptrl	equ	0xFF6
 12588                           tablat	equ	0xFF5
 12589                           prodh	equ	0xFF4
 12590                           prodl	equ	0xFF3
 12591                           intcon	equ	0xFF2
 12592                           intcon2	equ	0xFF1
 12593                           postinc0	equ	0xFEE
 12594                           fsr0h	equ	0xFEA
 12595                           fsr0l	equ	0xFE9
 12596                           wreg	equ	0xFE8
 12597                           postdec1	equ	0xFE5
 12598                           fsr1h	equ	0xFE2
 12599                           fsr1l	equ	0xFE1
 12600                           indf2	equ	0xFDF
 12601                           postinc2	equ	0xFDE
 12602                           postdec2	equ	0xFDD
 12603                           fsr2h	equ	0xFDA
 12604                           fsr2l	equ	0xFD9
 12605                           status	equ	0xFD8
 12606                           pclatu	equ	0xFFB
 12607                           pclath	equ	0xFFA
 12608                           tblptru	equ	0xFF8
 12609                           tblptrh	equ	0xFF7
 12610                           tblptrl	equ	0xFF6
 12611                           tablat	equ	0xFF5
 12612                           prodh	equ	0xFF4
 12613                           prodl	equ	0xFF3
 12614                           intcon	equ	0xFF2
 12615                           intcon2	equ	0xFF1
 12616                           postinc0	equ	0xFEE
 12617                           fsr0h	equ	0xFEA
 12618                           fsr0l	equ	0xFE9
 12619                           wreg	equ	0xFE8
 12620                           postdec1	equ	0xFE5
 12621                           fsr1h	equ	0xFE2
 12622                           fsr1l	equ	0xFE1
 12623                           indf2	equ	0xFDF
 12624                           postinc2	equ	0xFDE
 12625                           postdec2	equ	0xFDD
 12626                           fsr2h	equ	0xFDA
 12627                           fsr2l	equ	0xFD9
 12628                           status	equ	0xFD8
 12629                           
 12630                           	psect	rparam
 12631  0000                     pclatu	equ	0xFFB
 12632                           pclath	equ	0xFFA
 12633                           tblptru	equ	0xFF8
 12634                           tblptrh	equ	0xFF7
 12635                           tblptrl	equ	0xFF6
 12636                           tablat	equ	0xFF5
 12637                           prodh	equ	0xFF4
 12638                           prodl	equ	0xFF3
 12639                           intcon	equ	0xFF2
 12640                           intcon2	equ	0xFF1
 12641                           postinc0	equ	0xFEE
 12642                           fsr0h	equ	0xFEA
 12643                           fsr0l	equ	0xFE9
 12644                           wreg	equ	0xFE8
 12645                           postdec1	equ	0xFE5
 12646                           fsr1h	equ	0xFE2
 12647                           fsr1l	equ	0xFE1
 12648                           indf2	equ	0xFDF
 12649                           postinc2	equ	0xFDE
 12650                           postdec2	equ	0xFDD
 12651                           fsr2h	equ	0xFDA
 12652                           fsr2l	equ	0xFD9
 12653                           status	equ	0xFD8


Data Sizes:
    Strings     234
    Constant    493
    Data        240
    BSS         53
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     69     111
    BANK0           128     13     128
    BANK1           256      3     139
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), RPM_Txt(BANK0[5]), DC_Txt(BANK0[4]), Fan_SW_Txt(BANK0[4]), 
		 -> date(BANK0[9]), time(BANK0[9]), tempF(BANK0[4]), tempC(BANK0[4]), 
		 -> buffer(BANK1[31]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), RPM_Txt(BANK0[5]), DC_Txt(BANK0[4]), Fan_SW_Txt(BANK0[4]), 
		 -> date(BANK0[9]), time(BANK0[9]), tempF(BANK0[4]), tempC(BANK0[4]), 
		 -> buffer(BANK1[31]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), STR_8(CODE[3]), 
		 -> STR_7(CODE[6]), STR_6(CODE[5]), STR_5(CODE[5]), STR_4(CODE[2]), 
		 -> STR_3(CODE[3]), STR_2(CODE[13]), STR_1(CODE[22]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), Fan_SW_Txt(BANK0[4]), buffer(BANK1[31]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), Fan_SW_Txt(BANK0[4]), buffer(BANK1[31]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 30
		 -> STR_18(CODE[24]), STR_17(CODE[15]), STR_16(CODE[22]), STR_15(CODE[16]), 
		 -> STR_14(CODE[20]), STR_13(CODE[21]), STR_12(CODE[30]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), Fan_SW_Txt(BANK0[4]), buffer(BANK1[31]), 

    txt	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK1[31]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), RPM_Txt(BANK0[5]), DC_Txt(BANK0[4]), Fan_SW_Txt(BANK0[4]), 
		 -> date(BANK0[9]), time(BANK0[9]), tempF(BANK0[4]), tempC(BANK0[4]), 
		 -> buffer(BANK1[31]), 


Critical Paths under _main in COMRAM

    _main->_Update_Screen
    _printf->___lwmod
    ___lwmod->___lwdiv
    _get_RPM->___awdiv
    _Update_Screen->_drawtext
    ___awdiv->___awmod
    ___awdiv->___wmul
    _Turn_On_Fan->_do_update_pwm
    _Initialize_Screen->_drawtext
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawCircle->_drawPixel
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _write_data->_spiwrite
    _write_command->_spiwrite
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul
    _Increase_Speed->_do_update_pwm
    _Do_Init->_DS1621_Init
    _init_UART->_OpenUSART
    _DS1621_Init->_I2C_Write_Cmd_Write_Data
    _I2C_Write_Cmd_Write_Data->_I2C_Write
    _I2C_Write_Cmd_Only->_I2C_Write
    _Decrease_Speed->_do_update_pwm
    _Do_Beep->_do_update_pwm
    _do_update_pwm->___ftdiv
    ___lbtoft->___ftpack
    ___ftmul->___lbtoft
    ___ftdiv->___ftmul
    _DS3231_Setup_Time->_I2C_Write
    _DS3231_Read_Time->_I2C_Read
    _DS1621_Read_Temp->_I2C_Read

Critical Paths under _chkisr in COMRAM

    _chkisr->_INT0_isr

Critical Paths under _main in BANK0

    _main->_Update_Screen
    _Update_Screen->_drawtext
    _Initialize_Screen->_drawtext

Critical Paths under _chkisr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _chkisr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _chkisr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _chkisr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _chkisr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _chkisr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _chkisr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _chkisr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _chkisr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _chkisr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _chkisr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _chkisr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _chkisr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _chkisr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _chkisr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _chkisr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0  126830
                                             68 COMRAM     1     1      0
                                              0 BANK1      3     3      0
                   _DS1621_Read_Temp
                   _DS3231_Read_Time
                  _DS3231_Setup_Time
                     _Decrease_Speed
                            _Do_Beep
                            _Do_Init
                     _Increase_Speed
                  _Initialize_Screen
                         _Set_DC_RGB
                        _Set_RPM_RGB
                         _Toggle_Fan
                      _Update_Screen
                            ___awdiv
                             ___wmul
                      _do_update_pwm
                            _get_RPM
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              37    23     14    3911
                                             28 COMRAM    28    14     14
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      31
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             16 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     362
                                             23 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     501
                                             16 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _get_RPM                                              4     2      2    3051
                                             30 COMRAM     4     2      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Update_Screen                                       12    12      0   23083
                                             66 COMRAM     2     2      0
                                              7 BANK0      6     6      0
                            ___awdiv
                            ___awmod
                           _drawtext
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    2123
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    2005
                                             22 COMRAM     8     4      4
                            ___awmod (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Toggle_Fan                                           0     0      0    8034
                       _Turn_Off_Fan
                        _Turn_On_Fan
 ---------------------------------------------------------------------------------
 (2) _Turn_On_Fan                                          0     0      0    8034
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (2) _Turn_Off_Fan                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Set_RPM_RGB                                          2     0      2     251
                                             16 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _Set_DC_RGB                                           2     0      2     530
                                             16 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _Initialize_Screen                                    0     0      0   34162
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                         _drawCircle
                           _drawtext
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4    1539
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _fillScreen                                           2     0      2    2192
                                             35 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (3) _fillRectangle                                       12     7      5    2096
                                             23 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _drawtext                                            17     9      8   17011
                                             56 COMRAM    10     2      8
                                              0 BANK0      7     7      0
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _strlen                                               6     4      2     195
                                             16 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) _drawChar                                            11     4      7   10904
                                             45 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (4) _fillRect                                            11     6      5    3876
                                             34 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (5) _drawFastVLine                                       11     7      4    3102
                                             23 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _drawCircle                                          20    12      8    6744
                                             27 COMRAM    20    12      8
                          _drawPixel
 ---------------------------------------------------------------------------------
 (4) _drawPixel                                            4     1      3    4207
                                             23 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (6) _setAddrWindow                                        4     1      3    1034
                                             19 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _TFT_GreenTab_Initialize                              0     0      0    4624
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd3                                                0     0      0    2182
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd2red                                             0     0      0     130
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd1                                                0     0      0    2182
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (7) _write_data                                           1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (7) _write_command                                        1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (6) _spiwrite                                             2     2      0      34
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _LCD_Reset                                            0     0      0    2052
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             6     4      2    2052
                                             22 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1012
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _Increase_Speed                                       0     0      0   16136
                            _Do_Beep
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (1) _Do_Init                                              0     0      0    1121
                        _DS1621_Init
                           _I2C_Init
                     _init_INTERRUPT
                          _init_UART
 ---------------------------------------------------------------------------------
 (2) _init_UART                                            0     0      0     375
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (3) _OpenUSART                                            3     1      2     375
                                             16 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _init_INTERRUPT                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Init                                             4     0      4      65
                                             16 COMRAM     4     0      4
                         _i2cHighScl
                         _i2cHighSda
 ---------------------------------------------------------------------------------
 (2) _DS1621_Init                                          1     1      0     681
                                             21 COMRAM     1     1      0
                 _I2C_Write_Cmd_Only
           _I2C_Write_Cmd_Write_Data
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Write_Data                             3     1      2     356
                                             18 COMRAM     3     1      2
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Only                                   2     1      1     260
                                             18 COMRAM     2     1      1
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _Decrease_Speed                                       0     0      0   16136
                            _Do_Beep
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (2) _Do_Beep                                              0     0      0    8102
                    _Activate_Buzzer
                  _Deactivate_Buzzer
                       _Wait_One_Sec
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (1) _do_update_pwm                                        9     9      0    8034
                                             58 COMRAM     9     9      0
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (2) ___lbtoft                                             4     1      3    2039
                                             24 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     436
                                             16 COMRAM    15    11      4
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    2716
                                             28 COMRAM    15     9      6
                           ___ftpack
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    2648
                                             43 COMRAM    15     9      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2008
                                             16 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (3) _Wait_One_Sec                                         2     2      0      68
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _Deactivate_Buzzer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Activate_Buzzer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DS3231_Setup_Time                                    2     2      0     201
                                             18 COMRAM     2     2      0
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DS3231_Read_Time                                     3     3      0     430
                                             19 COMRAM     2     2      0
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DS1621_Read_Temp                                     5     3      2     464
                                             19 COMRAM     5     3      2
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Write                                            2     2      0     133
                                             16 COMRAM     2     2      0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Stop                                             0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Start                                            0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (2) _I2C_Read                                             3     3      0     198
                                             16 COMRAM     3     3      0
                             _i2cAck
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                            _i2cNack
 ---------------------------------------------------------------------------------
 (3) _i2cNack                                              0     0      0       0
                         _i2cHighScl
                          _i2cLowScl
 ---------------------------------------------------------------------------------
 (3) _i2cAck                                               0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (2) _I2C_ReStart                                          0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (5) _i2cLowSda                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2cLowScl                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2cHighSda                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2cHighScl                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _chkisr                                              14    14      0       0
                                              2 COMRAM    14    14      0
                           _INT0_isr
                         _TIMER1_isr
 ---------------------------------------------------------------------------------
 (10) _TIMER1_isr                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _INT0_isr                                            2     2      0       0
                                              0 COMRAM     2     2      0
                   _force_nec_state0
 ---------------------------------------------------------------------------------
 (11) _force_nec_state0                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DS1621_Read_Temp
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Read_Time
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Setup_Time
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _Decrease_Speed
     _Do_Beep
       _Activate_Buzzer
       _Deactivate_Buzzer
       _Wait_One_Sec
       _do_update_pwm
         ___ftdiv
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
         ___lbtoft
           ___ftpack
     _do_update_pwm
       ___ftdiv
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___ftmul
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___fttol
       ___lbtoft
         ___ftpack
   _Do_Beep
     _Activate_Buzzer
     _Deactivate_Buzzer
     _Wait_One_Sec
     _do_update_pwm
       ___ftdiv
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___ftmul
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___fttol
       ___lbtoft
         ___ftpack
   _Do_Init
     _DS1621_Init
       _I2C_Write_Cmd_Only
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Cmd_Write_Data
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _I2C_Init
       _i2cHighScl
       _i2cHighSda
     _init_INTERRUPT
     _init_UART
       _OpenUSART
   _Increase_Speed
     _Do_Beep
       _Activate_Buzzer
       _Deactivate_Buzzer
       _Wait_One_Sec
       _do_update_pwm
         ___ftdiv
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
         ___lbtoft
           ___ftpack
     _do_update_pwm
       ___ftdiv
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___ftmul
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___fttol
       ___lbtoft
         ___ftpack
   _Initialize_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawCircle
       _drawPixel
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_data
           _spiwrite
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   _Set_DC_RGB
   _Set_RPM_RGB
   _Toggle_Fan
     _Turn_Off_Fan
     _Turn_On_Fan
       _do_update_pwm
         ___ftdiv
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
         ___lbtoft
           ___ftpack
   _Update_Screen
     ___awdiv
       ___awmod (ARG)
       ___wmul (ARG)
     ___awmod
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _strcpy
   ___awdiv
     ___awmod (ARG)
     ___wmul (ARG)
   ___wmul
   _do_update_pwm
     ___ftdiv
       ___ftmul (ARG)
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
     ___ftmul
       ___ftpack
       ___lbtoft (ARG)
         ___ftpack
     ___fttol
     ___lbtoft
       ___ftpack
   _get_RPM
     ___awdiv
       ___awmod (ARG)
       ___wmul (ARG)
     ___wmul
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch

 _chkisr (ROOT)
   _INT0_isr
     _force_nec_state0
   _TIMER1_isr

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      3      8B       7       54.3%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      D      80       5      100.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     45      6F       1       87.4%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     17A      34        0.0%
DATA                 0      0     17A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Wed Nov 10 12:12:58 2021

                      drawCircle@f 002A                        drawCircle@r 0020  
                      drawCircle@x 002C                        drawCircle@y 002E  
               __size_of_I2C_Start 0012                        _SSPSTATbits 000FC7  
               __size_of_I2C_Write 003E                       drawCircle@x0 001C  
                     drawCircle@y0 001E                       ___awdiv@sign 001C  
             __size_of_Turn_On_Fan 0010                ___wmul@multiplicand 0013  
                  ??_Update_Screen 0043                                l301 249C  
                              l233 2254                                l404 184E  
                              l181 21EA                                l501 23EE  
                              l405 17BA                                l415 0CDC  
                              l351 1B70                                l407 182A  
                              l408 184C                                l345 22EA  
                              l178 2120                                l291 1FA2  
                              l523 11A6                                l541 23AA  
                              l533 1DCA                                l367 108E  
                              l376 0FE4                                l480 215E  
                              l369 0F68                                l721 054A  
                              l485 248C                                l662 2558  
                              l496 2386                                l782 1D1C  
                              l758 07A2                                l791 1D5E  
                              _FAN 0050                                l786 1D36  
                              l794 233C                                l787 1D38  
                              l788 1D42                                l789 1D44  
                              l987 1A60                                _PR2 000FCB  
                              _day 005A                  _Deactivate_Buzzer 25A2  
             __size_of_I2C_ReStart 0016                                _dow 005B  
                              _nbr 00EB                                _rpm 004C  
            __size_of_Turn_Off_Fan 000A                                _rps 00EF  
                              _txt 004E                       ___awmod@sign 0016  
                              wreg 000FE8                 ?_Deactivate_Buzzer 0001  
                       _Fan_SW_Txt 00D9                    ??_fillRectangle 001D  
                     __CFG_LVP$OFF 000000            _TFT_GreenTab_Initialize 22EC  
                     ___ftdiv@cntr 0035                       ___ftdiv@sign 003A  
                     __CFG_WDT$OFF 000000                               l1000 1BF2  
                             l1102 1914                               l1113 18EC  
                             l1210 1690                     drawFastVLine@h 0019  
                             l1225 23CC                               l1251 2362  
                             l1317 1F4E                               l1174 1772  
                             l1327 203A                               l1177 173E  
                             l1356 219C                     drawFastVLine@x 0022  
                             l1189 14B8                     drawFastVLine@y 0018  
                             l6010 1334                               l6022 13A4  
                             l6014 1352                               l6024 13AC  
                             l6200 1BAE                               l5410 21F4  
                             l6202 1BB6                               l6210 1BD8  
                             l5412 21FA                               l5404 21E2  
                             l6044 0CC2                               l5422 220C  
                             l5342 1AFA                               l6214 1BE8  
                             l6206 1BCC                               l6134 23C4  
                             l7110 0B6E                               l6072 0DB2  
                             l6160 1A14                               l6152 19F4  
                             l6224 1F12                               l7120 0BA0  
                             l5370 1860                               l5506 1718  
                             l5610 167E                               l5602 164E  
                             l5346 1B32                               l6170 1A3A  
                             l6162 1A1C                               l6146 19E2  
                             l6226 1F1C                               l7106 0B54  
                             l5516 174C                               l5532 1408  
                             l5604 165C                               l5460 22CC  
                             l5356 1B58                               l6236 1F42  
                             l6228 1F24                               l6252 202E  
                             l6244 2006                               l7140 0BF4  
                             l7132 0BD8                               l7124 0BB4  
                             l7116 0B96                               l5382 18B4  
                             l5374 1870                               l5550 144E  
                             l5526 13E0                               l5606 1666  
                             l5358 1B66                               l6094 2294  
                             l6158 1A0A                               l6174 1A46  
                             l6190 1B88                               l6246 2010  
   I2C_Write_Cmd_Write_Data@Device 0015                               l5392 18F4  
                             l5384 18D4                               l5376 187C  
                             l5480 16B0                               l5560 147C  
                             l5528 13FA                               l5472 20B6  
                             l6096 229E                               l6248 2018  
                             l7136 0BE6                               l5386 18E0  
                             l5378 189C                               l5482 16CA  
                             l5554 1464                               l5546 143C  
                             l6610 1D8A                               l6178 1A56  
                             l6194 1B96                               l7146 0C0E  
                             l5564 1492                               l5556 146A  
                             l5468 209A                               l5812 17F2  
                             l6612 1D90                               l6460 012C  
                             l6444 0098                               l6700 0596  
                             l7092 0B1C                               l7068 0A26  
                             l5398 1906                               l5486 16D8  
                             l5574 15CA                               l5750 0F64  
                             l5742 0F4A                               l5806 1784  
                             l6606 1D6C                               l6198 1BA4  
                             l6454 00EC                               l6438 0058  
                             l5592 1624                               l6552 23E0  
                             l6544 2378                               l5760 0FA4  
                             l5752 0F6C                               l5832 1838  
                             l5824 1820                               l6560 10A4  
                             l6616 1DB0                               l6712 05CC  
                             l6704 05A2                               l5930 20E4  
                             l5762 0FD8                               l5746 0F56  
                             l6562 10A8                               l6618 1DB4  
                             l6538 2486                               l6490 01D6  
                             l6722 0600                               l6714 05D0  
                             l6730 0618                               l5940 20FA  
                             l5860 2390                               l5596 1634  
                             l5852 19A2                               l5780 105A  
                             l5772 1006                               l5764 0FDC  
                             l5756 0F74                               l5828 182E  
                             l6580 111C                               l6572 10EE  
                             l6740 0658                               l6708 05C6  
                             l6660 0472                               l5942 2102  
                             l5934 20EC                               l5598 163A  
                             l5782 1082                               l5774 102E  
                             l5838 1848                               l6590 1160  
                             l6574 10F6                               l6566 10C8  
                             l6750 0682                               l6742 0662  
                             l6718 05DC                               l6670 04B0  
                             l6654 0454                               l5952 2116  
                             l5864 23A4                               l6592 1166  
                             l6584 113C                               l6568 10CE  
                             l6488 01C0                               l6760 06BA  
                             l6736 0634                               l6728 0606  
                             l6664 047C                               l5954 211C  
                             l5890 1D20                               l5882 1D0C  
                             l5794 216A                               l6586 1140  
                             l6578 1116                               l6754 069A  
                             l6682 051C                               l6666 0492  
                             l6658 0464                               l5948 210A  
                             l5788 108A                               l5796 2170  
                             l6596 1186                               l6756 06A2  
                             l6764 06CE                               l6748 067A  
                             l6780 0786                               l5886 1D14  
                             l5878 1D02                               l6598 118E  
                             l6766 06D6                               l6774 0760  
                             l6694 0578                               l6678 0514  
                             l6768 071A                               l6776 0772  
                             l5898 1D2E                               l6778 077A  
                             l6698 0592                               l5998 12E4  
                             STR_1 FF60                               STR_2 FFCF  
                             STR_3 FFF8                               STR_4 FFF2  
                             STR_5 FFE2                               STR_6 FFE7  
                             STR_7 FFDC                               STR_8 FFFB  
                             STR_9 FFF4                               u4100 1B28  
                             u4400 15E8                               u4321 13D2  
                             u4341 13F0                               u4405 15E0  
                             u4271 16A2                               u5400 1150  
                             u5320 10B8                               u4291 16C0  
                             u5420 1176                               u5340 10DE  
                             u4381 15BC                               u4630 17B2  
                             u4560 103C                               u4640 17E8  
                             u5440 119E                               u5360 1106  
                             u5380 112C                               u5460 1D7A  
                             u4870 130E                               _RBPU 007F8F  
                             u5977 2566                               _TRMT 007D61  
                     _DS1621_tempC 0046                       _DS1621_tempF 0048  
              ??_Deactivate_Buzzer 0011                               _date 00BE  
                             _main 0A0E                               _font FD27  
                     ___ftpack@arg 0011                               _hour 005E  
                     ___ftpack@exp 0014                   __end_of_I2C_Init 258E  
                 __end_of_I2C_Read 2122                               _time 00C7  
                             _year 006C                               fsr0h 000FEA  
                             _txt1 0100                               fsr1h 000FE2  
                             fsr0l 000FE9                               fsr2h 000FDA  
                             fsr1l 000FE1                               indf2 000FDF  
                             fsr2l 000FD9                               _wrap 006F  
                 __end_of_I2C_Stop 2500                               pclat 000FFA  
               __size_of_LCD_Reset 0012                               prodh 000FF4  
                             prodl 000FF3                    __end_of_Do_Beep 24CA  
                             start 0018        __size_of_I2C_Write_Cmd_Only 001A  
                  __end_of_Do_Init 2090                     _Increase_Speed 2364  
                  ??_drawFastVLine 001C                       ___ftmul@cntr 002A  
                  __end_of_i2cNack 2598                       ___param_bank 000010  
                     ___ftmul@sign 002B                       ___fttol@exp1 001F  
                     _Turn_Off_Fan 257A                       ___fttol@lval 001B  
                      ?_TIMER1_isr 0001                   __end_of_INT0_isr 0F3A  
        __end_of_Deactivate_Buzzer 25AA                    ??_do_update_pwm 003B  
                  drawFastVLine@hi 0020                    drawFastVLine@lo 0021  
                            ?_main 0001                    __end_of___awdiv 1A62  
                  drawCircle@ddF_x 0026                              STR_10 FFEC  
                  drawCircle@ddF_y 0028                              STR_11 FFF0  
                            STR_12 FF14                              STR_13 FF76  
                            STR_14 FF8B                              STR_15 FFB0  
                            STR_16 FF4A                              STR_17 FFC0  
                            STR_18 FF32                              STR_19 FF9F  
                  __end_of___awmod 1BF4                    __end_of___ftdiv 1774  
                  __end_of___ftmul 14BA                              _T0CON 000FD5  
                  ___awdiv@divisor 0019                              _T1CON 000FCD  
                  __end_of___fttol 1692                              _T2CON 000FCA  
                            _T3CON 000FB1                    __end_of___lwdiv 1F58  
                            _MASKA 00F1                              _MASKD 00F2  
                  __end_of___lwmod 2044                              i2l253 1CB6  
                            i2l265 0F38                              i2l278 0F02  
                  ___awdiv@counter 001B                    drawCircle@color 0022  
                            _RCSTA 000FAB                              _TMR0H 000FD7  
                            _TMR1H 000FCF                              _TMR0L 000FD6  
                            _TMR1L 000FCE                              _TMR3L 000FB2  
                            _SPBRG 000FAF                              _TRISA 000F92  
                            _TRISB 000F93                              _TRISC 000F94  
                            _TRISD 000F95                              _TRISE 000F96  
                            _TXREG 000FAD                              _TXSTA 000FAC  
                  __end_of_get_RPM 2160                              _Rcmd1 11A8  
                            _Rcmd3 14BA                         _Display_D1 0080  
                       _Display_D2 00B8                         _i2cHighSda 25B2  
                       _i2cHighScl 2562                    __end_of_dpowers FF0C  
                            _font2 FE26                              _found 005D  
                  __end_of_isdigit 23CE                              _tempC 00DD  
                            _tempF 00E1                              _month 0060  
                    ___ftpack@sign 0015                              main@U 0188  
                            _putch 2554                              main@j 0189  
                __end_of_I2C_Start 2512                  __end_of_I2C_Write 221A  
                   __CFG_BOREN$OFF 000000                              tablat 000FF5  
                            status 000FD8             __end_of_Increase_Speed 2388  
                ?_DS1621_Read_Temp 0014                    write_data@data_ 0013  
               ??_DS1621_Read_Temp 0016                    __initialization 1BF4  
                    ??_Set_RPM_RGB 0013                       __end_of_main 0C1A  
                     __end_of_font FE26                   __end_of_Rcmd2red 21DC  
                 ??_Decrease_Speed 0044                             ??_main 0045  
                    ___fttol@sign1 001A                      __activetblptr 000002  
                ?_DS3231_Read_Time 0001                  __end_of_LCD_Reset 24DC  
                       _Set_DC_RGB 1090          ??_TFT_GreenTab_Initialize 001D  
               ??_DS3231_Read_Time 0014                             ?_Rcmd1 0001  
                           ?_Rcmd3 0001            __size_of_init_INTERRUPT 0034  
                        I2C_Init@c 0011                          I2C_Read@n 0012  
                           _ADCON1 000FC1                DS1621_Read_Temp@Cmd 0016  
                           _CCPR1L 000FBE                             _CCPR2L 000FBB  
                 ___awdiv@dividend 0017                 __size_of_i2cLowSda 000A  
               __size_of_i2cLowScl 0008                             ?_putch 0001  
                 __end_of___ftpack 1916                   __end_of___lbtoft 2364  
                        ??_Do_Beep 0044                             _DC_Txt 00D5  
                           i2l4412 0E3C                             i2l4430 0E6E  
                           i2l4406 0E1E                             i2l4424 0E64  
                        ??_Do_Init 0017                             i2l4450 0EEA  
                           i2l4442 0E94                             i2l4426 0E6A  
                           i2l4418 0E46                             i2l4460 0F0E  
                           i2l4436 0E8A                             i2l4438 0E90  
                           i2l4458 0F08                             i2l4396 0DF0  
                           i2l4468 0F16                             i2l4962 1CAC  
                           _OSCCON 000FD3                __size_of_TIMER1_isr 000C  
                           _SPBRGH 000FB0                             _SSPBUF 000FC9  
                  ?_Increase_Speed 0001                          ??_i2cNack 0011  
                     _Alarm_SW_Txt 00B4                   _force_nec_state0 25BA  
                 __end_of_delay_ms 1FAA                             _i2cAck 2512  
                 __end_of_fillRect 20DA                   __end_of_drawChar 1090  
               __size_of_OpenUSART 0070           __size_of_Activate_Buzzer 0012  
                           ___wmul 2316                          ??___awdiv 001B  
                 __end_of_drawtext 13C2                          ??___awmod 0015  
                        ??___ftdiv 0032                          ??___ftmul 0023  
                        ??___fttol 0015                             _chkisr 0008  
                        ??___lwdiv 0015                             _array1 0154  
                        ??___lwmod 001C                             _buffer 0169  
                           _nec_ok 00ED                             clear_0 1BFA  
                           clear_1 1C06                   ___awdiv@quotient 001D  
                           _minute 005F                             _second 0062  
          DS3231_Setup_Time@Device 0013                    ___awmod@divisor 0013  
                        ??_get_RPM 0021         __size_of_Deactivate_Buzzer 0008  
                  ___awmod@counter 0015                             _printf 044A  
                     drawtext@size 0040                             _strcpy 228A  
                           _strlen 2160              ___ftmul@f3_as_product 0027  
              __end_of_Set_RPM_RGB 1DCC                         _Toggle_Fan 247A  
                     __pdataCOMRAM 006D                          ??_isdigit 0011  
                        ?_I2C_Init 0011                          ?_I2C_Read 0001  
                        ?_I2C_Stop 0001                       __mediumconst FD26  
                           tblptrh 000FF7                             tblptrl 000FF6  
                           tblptru 000FF8   __end_of_I2C_Write_Cmd_Write_Data 2410  
                      ?_i2cHighSda 0001                        ?_i2cHighScl 0001  
                           putch@c 0011                   __end_of_spiwrite 24A2  
                       __accesstop 0080            __end_of__initialization 1C6A  
                        ?_INT0_isr 0001                 _setup_alarm_minute 0064  
               _setup_alarm_second 0065                      ___rparam_used 000001  
                       ___ftdiv@f1 002C                         ___ftdiv@f2 002F  
                       ___ftdiv@f3 0036                         ___lbtoft@c 001C  
                       ___ftmul@f1 001D                         ___ftmul@f2 0020  
                       ___fttol@f1 0011                      __end_of_Rcmd1 12B8  
                    __end_of_Rcmd3 15AC                     __pcstackCOMRAM 0001  
                     __pidataBANK0 1E32                       __pidataBANK1 1A62  
                    __end_of_font2 FF02                  __end_of_i2cLowSda 25A2  
                __end_of_i2cLowScl 25B2                      __end_of_putch 2562  
                   drawPixel@color 0019             __size_of_write_command 0010  
                       ??_I2C_Init 0015                        ?_Set_DC_RGB 0011  
                       ??_I2C_Read 0011                       _alarm_minute 0056  
                     _alarm_second 0057                         ??_I2C_Stop 0011  
                          ??_Rcmd1 001D                            ??_Rcmd3 001D  
               __size_of_drawPixel 0030                  __end_of_OpenUSART 1D60  
                          ??_putch 0011                         __pbssBANK0 00E5  
                 _setup_alarm_hour 0063                   _setup_alarm_time 0094  
                    ??_DS1621_Init 0016                          ?_Rcmd2red 0001  
               __size_of_init_UART 0014                    spiwrite@spidata 0012  
                       _alarm_date 0054                         ??_INT0_isr 0001  
                       _alarm_hour 0055                         _alarm_time 008B  
                    ?_Wait_One_Sec 0001                            ?_i2cAck 0001  
             Set_DC_RGB@duty_cycle 0011                 __CFG_CCP2MX$PORTBE 000000  
                    ??_Turn_On_Fan 0044                     I2C_Read@inByte 0013  
                          ?___wmul 0011                __size_of_i2cHighSda 0008  
              __size_of_i2cHighScl 000C                        _Set_RPM_RGB 1D60  
                          ?_chkisr 0001             __size_of_setAddrWindow 004E  
                          _CCP1CON 000FBD   I2C_Write_Cmd_Write_Data@Data_Out 0014  
                          _CCP2CON 000FBA                       ??_TIMER1_isr 0001  
                    ??_I2C_ReStart 0011                            _ALARMEN 00E9  
                        ?___ftpack 0011                          ?___lbtoft 0019  
                       I2C_Write@n 0012                            ?_printf 001D  
                          ?_strcpy 0011                            ?_strlen 0011  
                      ?_Toggle_Fan 0001                  ??_Activate_Buzzer 0011  
                       _fillScreen 242E              __end_of_Update_Screen 044A  
                       _drawCircle 0C1A                     _init_INTERRUPT 2256  
                        ?_delay_ms 0017                          ?_fillRect 0023  
                        ?_drawChar 002E                            _SSPCON1 000FC6  
                          _SSPSTAT 000FC7                            _RPM_Txt 00D0  
            __end_of_fillRectangle 1850                            _Do_Beep 24B6  
                        ?_drawtext 0039                  _DS3231_Setup_Time 1DCC  
                          _Do_Init 2044           _I2C_Write_Cmd_Write_Data 23F0  
       __end_of_I2C_Write_Cmd_Only 2464                         ??_Rcmd2red 0014  
           DS1621_Read_Temp@Device 0018                     ??_Wait_One_Sec 0011  
                          _i2cNack 258E                 __end_of_TIMER1_isr 257A  
               ?_DS3231_Setup_Time 0001                      _write_command 2544  
                        _I2C_Start 2500                          _I2C_Write 21DC  
                  __size_of_i2cAck 0012                            __Hparam 0000  
                          __Lparam 0000                __size_of_Set_DC_RGB 0118  
              __end_of_DS1621_Init 242E                  __end_of_drawPixel 22EC  
              ??_DS3231_Setup_Time 0013              __end_of_drawFastVLine 1B72  
                          ___awdiv 19CC                            ___awmod 1B72  
                          ___ftdiv 1692                    __size_of___wmul 0028  
                          ___ftmul 13C2                            ___fttol 15AC  
                          ___lwdiv 1EFC                            ___lwmod 1FF8  
                  __size_of_chkisr 1CE8                          ?_spiwrite 0001  
                          __pcinit 1BF4                         ??___ftpack 0016  
                       ??___lbtoft 001C                            __ramtop 1000  
                          _get_RPM 2122                            __ptext0 0A0E  
                          __ptext1 044A                            __ptext2 2554  
                          __ptext3 23AC                            __ptext4 1FF8  
                          __ptext5 1EFC          __size_of_DS1621_Read_Temp 003C  
                          __ptext6 2122                            __ptext7 001C  
                          __ptext8 1B72                            __ptext9 19CC  
                  __size_of_printf 035A                  __end_of_init_UART 24B6  
              __end_of_Turn_On_Fan 2534             __end_of_init_INTERRUPT 228A  
                        _T0CONbits 000FD5                    __size_of_strcpy 0032  
                  __size_of_strlen 003E                  __end_of_hexpowers FF14  
         __end_of_force_nec_state0 25C2                          _T1CONbits 000FCD  
         DS3231_Setup_Time@Address 0014                            _dpowers FF02  
            __end_of_do_update_pwm 19CC                            _isdigit 23AC  
                 ___awmod@dividend 0011                         _duty_cycle 005C  
                       ??_delay_ms 0019                __end_of_I2C_ReStart 247A  
                    drawtext@_text 003A                      drawtext@color 003C  
                       ??_fillRect 0028          __end_of_DS3231_Setup_Time 1E32  
                 ??_Increase_Speed 0044                         ??_drawChar 0035  
                        _LCD_Reset 24CA                      _setAddrWindow 1FAA  
                   __pintcode_body 1C74                      Wait_One_Sec@j 0011  
                       delay_ms@ms 0017               end_of_initialization 1C6A  
                       ??_drawtext 0041                     ?_write_command 0001  
                    __Lmediumconst FD26          __size_of_DS3231_Read_Time 0064  
                          int_func 1C74            DS3231_Read_Time@Address 0014  
                       ?_I2C_Start 0001                         ?_I2C_Write 0001  
                       get_RPM@RPS 0021                __size_of_Toggle_Fan 0014  
                       _tempSecond 006E                          _RCSTAbits 000FAB  
                          printf@c 0038                            printf@f 001D  
                          postdec1 000FE5                            postdec2 000FDD  
                          postinc0 000FEE                            postinc2 000FDE  
                       ??_spiwrite 0011                            strlen@s 0011  
      I2C_Write_Cmd_Write_Data@Cmd 0013                          _PORTAbits 000F80  
                 drawtext@cursor_x 00F9                   drawtext@cursor_y 00F8  
                        _PORTBbits 000F81                          _PORTDbits 000F83  
                        _PORTEbits 000F84                   I2C_Write@outByte 0011  
                  ?_init_INTERRUPT 0001                         _setup_date 009D  
                      ?_fillScreen 0024                         _setup_hour 0067  
                       _setup_time 00A6                         _setup_year 006B  
                      ?_drawCircle 001C                         drawChar@bg 0032  
                        _TRISBbits 000F93                          _TRISCbits 000F94  
                     ??_i2cHighSda 0011                       ??_i2cHighScl 0011  
                __size_of_I2C_Init 000A                  __size_of_I2C_Read 0048  
                __size_of_I2C_Stop 0012                     ?_setAddrWindow 0014  
                       ?_LCD_Reset 0001                   drawtext@textsize 00F4  
                       drawPixel@x 001B                         drawPixel@y 0018  
               _Update_Screen$2400 00FA                 _Update_Screen$2399 00FE  
                      _DS1621_Init 2410                        ___ftdiv@exp 0039  
                      printf@width 0036                          _TXSTAbits 000FAC  
                __size_of_INT0_isr 0172                     __end_of_i2cAck 2524  
                      ___ftmul@exp 0026           DS1621_Read_Temp@Data_Ret 0017  
                      _Turn_On_Fan 2524                 __end_of_i2cHighSda 25BA  
               __end_of_i2cHighScl 256E                     __end_of___wmul 233E  
                    delay_ms@count 001B                         _write_data 2534  
                    __pidataCOMRAM 25C2                     __end_of_chkisr 1CF0  
         ?_TFT_GreenTab_Initialize 0001                        _I2C_ReStart 2464  
                       drawtext@bg 003E                          _Nec_code1 0051  
                        _i2cLowSda 2598                          _i2cLowScl 25AA  
             __end_of_Wait_One_Sec 23AC                     __end_of_printf 07A4  
                     ??_Set_DC_RGB 0013                     __end_of_strcpy 22BC  
                   __end_of_strlen 219E                          _Nec_state 0052  
              start_initialization 1BF4             Update_Screen@neg_tempF 00FC  
       __size_of_DS3231_Setup_Time 0066            __size_of_Decrease_Speed 0022  
                  ??_write_command 0013                          _OpenUSART 1CF0  
                 __CFG_OSC$INTIO67 000000                        ??_I2C_Start 0011  
                      ??_I2C_Write 0011                           ??_i2cAck 0011  
                __size_of_Rcmd2red 003E                __size_of_fillScreen 001C  
              __size_of_drawCircle 01AE                    _Activate_Buzzer 24DC  
               __end_of_Set_DC_RGB 11A8                           ??___wmul 0015  
                     ?_Set_RPM_RGB 0011                      ?_Turn_Off_Fan 0001  
                         ??_chkisr 0003                        __pdataBANK0 0080  
                      __pdataBANK1 0100                    setAddrWindow@x0 0017  
                  setAddrWindow@x1 0015                    setAddrWindow@y0 0014  
                  setAddrWindow@y1 0016                           ??_printf 002B  
                 _DS1621_Read_Temp 221A                           ??_strcpy 0015  
                         ??_strlen 0013                       ??_Toggle_Fan 0044  
                       ?_i2cLowSda 0001                         ?_i2cLowScl 0001  
                __size_of___ftpack 00C6                  __size_of___lbtoft 0026  
                      __pbssCOMRAM 0046         ??_I2C_Write_Cmd_Write_Data 0015  
                  ??_setAddrWindow 0017                      __pcstackBANK0 00F3  
                    __pcstackBANK1 0188                        ??_LCD_Reset 001D  
                     _isdigit$2048 0012                  __size_of_delay_ms 0052  
                         ?_Do_Beep 0001                           ?_Do_Init 0001  
                __size_of_fillRect 004A                  __size_of_drawChar 0156  
                       ?_OpenUSART 0011                   _DS3231_Read_Time 1E98  
                         ?_i2cNack 0001                  __size_of_drawtext 010A  
                 ___lwdiv@dividend 0011                 __end_of_Toggle_Fan 248E  
                      I2C_Read@ack 0011                          _bit_count 0058  
                        __pintcode 0008    __end_of_TFT_GreenTab_Initialize 2316  
                   ??_Turn_Off_Fan 0011                      __pmediumconst FD26  
                         ?___awdiv 0017                           ?___awmod 0011  
                         ?___ftdiv 002C                           ?___ftmul 001D  
                         ?___fttol 0011                          __tft_type 0053  
                         ?___lwdiv 0011                 _I2C_Write_Cmd_Only 244A  
                         ?___lwmod 0018                 drawFastVLine@color 001A  
                      ?_write_data 0001                          _drawPixel 22BC  
                         ?_get_RPM 001F                  __size_of_spiwrite 0014  
              ?_I2C_Write_Cmd_Only 0013                  ?_force_nec_state0 0001  
                         ?_isdigit 0001                           _I2C_Init 2584  
                         _I2C_Read 20DA                           _I2C_Stop 24EE  
                _Initialize_Screen 07A4                     __size_of_Rcmd1 0110  
                   __size_of_Rcmd3 00F2                          _init_UART 24A2  
               ??_force_nec_state0 0001           I2C_Write_Cmd_Only@Device 0014  
                        _hexpowers FF0C                 ?_Initialize_Screen 0001  
                 ___lwdiv@quotient 0016                     __size_of_putch 000E  
          __end_of_Activate_Buzzer 24EE                     ___wmul@product 0015  
              ??_Initialize_Screen 0043                           _INT0_isr 0DC8  
             ??_I2C_Write_Cmd_Only 0014                           _PIE1bits 000F9D  
           __size_of_Update_Screen 042E             DS3231_Read_Time@Device 0015  
                         _PIR1bits 000F9E                   ??_init_INTERRUPT 0011  
            __size_of_Wait_One_Sec 0024                          _setup_day 0066  
                DS1621_Init@Device 0016                          fillRect@h 0025  
                        fillRect@i 002C                          fillRect@w 0024  
                        fillRect@x 002B                          fillRect@y 0023  
                        drawChar@c 002F                          drawChar@i 0038  
                        drawChar@j 0037                          drawChar@x 0036  
                        drawChar@y 002E                         ?_drawPixel 0018  
           __size_of_fillRectangle 00DC                  ___wmul@multiplier 0011  
        __end_of_Initialize_Screen 0A0E                        ??_i2cLowSda 0011  
                      ??_i2cLowScl 0011                       ??_fillScreen 0026  
                     ??_drawCircle 0024                         printf@flag 0035  
                       printf@prec 0032                         ?_init_UART 0001  
                   _Decrease_Speed 23CE                        _INTCON2bits 000FF1  
                        copy_data0 1C20                          copy_data1 1C40  
                        drawtext@i 00F6             __size_of_drawFastVLine 0088  
                        drawtext@x 00F3                          drawtext@y 0039  
                         _Nec_code 00E5                  write_command@cmd_ 0013  
                      ??_OpenUSART 0013                   __size_of_Do_Beep 0014  
                     ?_DS1621_Init 0001                           _Rcmd2red 219E  
                 __size_of_Do_Init 004C                __size_of_write_data 0010  
                  OpenUSART@config 0013                       _Time_Elapsed 004A  
                 __size_of_i2cNack 000A                      _RTC_ALARM_Txt 00BC  
                     _Wait_One_Sec 2388                           __Hrparam 0000  
           __size_of_do_update_pwm 00B6                 __end_of_fillScreen 244A  
                         __Lrparam 0000                 __end_of_drawCircle 0DC8  
                     ?_Turn_On_Fan 0001                   __size_of___awdiv 0096  
                 __size_of___awmod 0082                   __size_of___ftdiv 00E2  
                 __size_of___ftmul 00F8                   __size_of___fttol 00E6  
                 __size_of___lwdiv 005C                   __size_of___lwmod 004C  
             __size_of_Set_RPM_RGB 006C                           ___ftpack 1850  
                         ___lbtoft 233E                       ?_I2C_ReStart 0001  
                 __size_of_get_RPM 003E                      _Update_Screen 001C  
                   _setup_fan_temp 006D                     _setup_fan_text 00AF  
                 __size_of_isdigit 0022                           _delay_ms 1F58  
           __end_of_Decrease_Speed 23F0                    ___lwdiv@divisor 0013  
                  ___lwdiv@counter 0015                           __ptext10 247A  
                         __ptext11 2524                           __ptext20 2160  
                         __ptext12 257A                           __ptext21 0F3A  
                         __ptext13 1D60                           __ptext30 11A8  
                         __ptext22 2090                           __ptext14 1090  
                         __ptext31 2534                           __ptext23 1AEA  
                         __ptext15 07A4                           __ptext40 1CF0  
                         __ptext32 2544                           __ptext24 0C1A  
                         __ptext16 228A                           __ptext41 2256  
                         __ptext33 248E                           __ptext25 22BC  
                         __ptext17 242E                           __ptext50 15AC  
                         __ptext42 2584                           __ptext34 24CA  
                         __ptext26 1FAA                           __ptext18 1774  
                         __ptext51 13C2                           __ptext43 2410  
                         __ptext35 1F58                           __ptext27 22EC  
                         __ptext19 12B8                           __ptext60 21DC  
                         __ptext52 1692                           __ptext44 23F0  
                         __ptext36 2316                           __ptext28 14BA  
                         __ptext61 24EE                           __ptext53 1850  
                         __ptext45 244A                           __ptext37 2364  
                         __ptext29 219E                           __ptext70 2562  
                         __ptext62 2500                           __ptext54 2388  
                         __ptext46 23CE                           __ptext38 2044  
                         __ptext63 20DA                           __ptext55 25A2  
                         __ptext47 24B6                           __ptext39 24A2  
                         __ptext72 256E                           __ptext64 258E  
                         __ptext56 24DC                           __ptext48 1916  
                         __ptext73 0DC8                           __ptext65 2512  
                         __ptext57 1DCC                           __ptext49 233E  
                         __ptext74 25BA                           __ptext66 2464  
                         __ptext58 1E98                           __ptext67 2598  
                         __ptext59 221A                           __ptext68 25AA  
                         __ptext69 25B2                           _fillRect 2090  
                         _drawChar 0F3A               __end_of_Turn_Off_Fan 2584  
 __size_of_TFT_GreenTab_Initialize 002A                           _colstart 0059  
                         _drawtext 12B8                         strcpy@from 0013  
                    _fillRectangle 1774           __end_of_DS1621_Read_Temp 2256  
                 ?_Activate_Buzzer 0001                      __size_of_main 020C  
          __size_of_Increase_Speed 0024                    fillRectangle@hi 0021  
                  fillRectangle@lo 0022                      _drawFastVLine 1AEA  
                        printf@idx 002F                           _spiwrite 248E  
                        printf@val 0033                        ??_drawPixel 001B  
                         _rowstart 0061           __end_of_DS3231_Read_Time 1EFC  
       __size_of_Initialize_Screen 026A                     ?_Update_Screen 0001  
                       _INTCONbits 000FF2                      _do_update_pwm 1916  
                   OpenUSART@spbrg 0011                        ??_init_UART 0014  
                  ?_Decrease_Speed 0001                           isdigit@c 0013  
                        spiwrite@x 0011                           intlevel2 0000  
                   ?_fillRectangle 0018                   ___lwmod@dividend 0018  
            __end_of_write_command 2554                    fillScreen@color 0024  
          do_update_pwm@duty_cycle 0041                     fillRectangle@h 001A  
                   fillRectangle@w 0019                     fillRectangle@x 0023  
                   fillRectangle@y 0018                     ?_drawFastVLine 0018  
                         printf@ap 0030                       ??_write_data 0013  
                       _TIMER1_isr 256E                      fillRect@color 0026  
                   ?_do_update_pwm 0001                    ___lwmod@divisor 001A  
                         strcpy@cp 0015                           strlen@cp 0015  
                         strcpy@to 0011              I2C_Write_Cmd_Only@Cmd 0013  
                  ___lwmod@counter 001C                       _setup_minute 0068  
                     _setup_second 006A              __end_of_setAddrWindow 1FF8  
               fillRectangle@color 001B                  do_update_pwm@dc_I 0042  
                do_update_pwm@dc_f 003E                      drawChar@color 0030  
                      _setup_month 0069                     Set_RPM_RGB@rpm 0011  
               __end_of_write_data 2544          __size_of_force_nec_state0 0008  
                     drawChar@line 0035                       drawChar@size 0034  
__size_of_I2C_Write_Cmd_Write_Data 0020               __size_of_DS1621_Init 001E  
        ?_I2C_Write_Cmd_Write_Data 0013  
