

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Sat Oct 30 00:35:46 2021

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    68                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	text53,global,reloc=2,class=CODE,delta=1
    72                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    73                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    74  0000                     
    75                           	psect	idataCOMRAM
    76  0014FE                     __pidataCOMRAM:
    77                           	opt stack 0
    78                           
    79                           ;initializer for _tempSecond
    80  0014FE  FF                 	db	255
    81                           
    82                           ;initializer for _wrap
    83  0014FF  01                 	db	1
    84                           
    85                           	psect	idataBANK0
    86  0010B6                     __pidataBANK0:
    87                           	opt stack 0
    88                           
    89                           ;initializer for _color
    90  0010B6  F800               	dw	63488
    91  0010B8  F800               	dw	63488
    92  0010BA  F800               	dw	63488
    93  0010BC  07FF               	dw	2047
    94  0010BE  07FF               	dw	2047
    95  0010C0  07E0               	dw	2016
    96  0010C2  001F               	dw	31
    97  0010C4  001F               	dw	31
    98  0010C6  F81F               	dw	63519
    99  0010C8  0000               	dw	0
   100  0010CA  0000               	dw	0
   101  0010CC  0000               	dw	0
   102  0010CE  0000               	dw	0
   103  0010D0  0000               	dw	0
   104  0010D2  0000               	dw	0
   105  0010D4  0000               	dw	0
   106  0010D6  0000               	dw	0
   107  0010D8  0000               	dw	0
   108  0010DA  0000               	dw	0
   109  0010DC  0000               	dw	0
   110  0010DE  0000               	dw	0
   111                           
   112                           ;initializer for _array1
   113  0010E0  A2                 	db	162
   114  0010E1  62                 	db	98
   115  0010E2  E2                 	db	226
   116  0010E3  22                 	db	34
   117  0010E4  02                 	db	2
   118  0010E5  C2                 	db	194
   119  0010E6  E0                 	db	224
   120  0010E7  A8                 	db	168
   121  0010E8  90                 	db	144
   122  0010E9  68                 	db	104
   123  0010EA  98                 	db	152
   124  0010EB  B0                 	db	176
   125  0010EC  30                 	db	48
   126  0010ED  18                 	db	24
   127  0010EE  7A                 	db	122
   128  0010EF  10                 	db	16
   129  0010F0  38                 	db	56
   130  0010F1  5A                 	db	90
   131  0010F2  42                 	db	66
   132  0010F3  4A                 	db	74
   133  0010F4  52                 	db	82
   134                           
   135                           ;initializer for _Display_D1
   136  0010F5  00                 	db	0
   137  0010F6  02                 	db	2
   138  0010F7  04                 	db	4
   139  0010F8  06                 	db	6
   140  0010F9  10                 	db	16
   141  0010FA  12                 	db	18
   142  0010FB  14                 	db	20
   143  0010FC  16                 	db	22
   144  0010FD  16                 	db	22
   145  0010FE  16                 	db	22
   146                           
   147                           	psect	idataBANK1
   148  000F2C                     __pidataBANK1:
   149                           	opt stack 0
   150                           
   151                           ;initializer for _txt1
   152  000F2C  43                 	db	67
   153  000F2D  48                 	db	72
   154  000F2E  2D                 	db	45
   155  000F2F  00                 	db	0
   156  000F30  43                 	db	67
   157  000F31  48                 	db	72
   158  000F32  20                 	db	32
   159  000F33  00                 	db	0
   160  000F34  43                 	db	67
   161  000F35  48                 	db	72
   162  000F36  2B                 	db	43
   163  000F37  00                 	db	0
   164  000F38  50                 	db	80
   165  000F39  52                 	db	82
   166  000F3A  56                 	db	86
   167  000F3B  00                 	db	0
   168  000F3C  4E                 	db	78
   169  000F3D  58                 	db	88
   170  000F3E  54                 	db	84
   171  000F3F  00                 	db	0
   172  000F40  50                 	db	80
   173  000F41  4C                 	db	76
   174  000F42  59                 	db	89
   175  000F43  00                 	db	0
   176  000F44  20                 	db	32
   177  000F45  2D                 	db	45
   178  000F46  20                 	db	32
   179  000F47  00                 	db	0
   180  000F48  20                 	db	32
   181  000F49  2B                 	db	43
   182  000F4A  20                 	db	32
   183  000F4B  00                 	db	0
   184  000F4C  20                 	db	32
   185  000F4D  45                 	db	69
   186  000F4E  51                 	db	81
   187  000F4F  00                 	db	0
   188  000F50  20                 	db	32
   189  000F51  30                 	db	48
   190  000F52  20                 	db	32
   191  000F53  00                 	db	0
   192  000F54  31                 	db	49
   193  000F55  30                 	db	48
   194  000F56  30                 	db	48
   195  000F57  00                 	db	0
   196  000F58  32                 	db	50
   197  000F59  30                 	db	48
   198  000F5A  30                 	db	48
   199  000F5B  00                 	db	0
   200  000F5C  20                 	db	32
   201  000F5D  31                 	db	49
   202  000F5E  20                 	db	32
   203  000F5F  00                 	db	0
   204  000F60  20                 	db	32
   205  000F61  32                 	db	50
   206  000F62  20                 	db	32
   207  000F63  00                 	db	0
   208  000F64  20                 	db	32
   209  000F65  33                 	db	51
   210  000F66  20                 	db	32
   211  000F67  00                 	db	0
   212  000F68  20                 	db	32
   213  000F69  34                 	db	52
   214  000F6A  20                 	db	32
   215  000F6B  00                 	db	0
   216  000F6C  20                 	db	32
   217  000F6D  35                 	db	53
   218  000F6E  20                 	db	32
   219  000F6F  00                 	db	0
   220  000F70  20                 	db	32
   221  000F71  36                 	db	54
   222  000F72  20                 	db	32
   223  000F73  00                 	db	0
   224  000F74  20                 	db	32
   225  000F75  37                 	db	55
   226  000F76  20                 	db	32
   227  000F77  00                 	db	0
   228  000F78  20                 	db	32
   229  000F79  38                 	db	56
   230  000F7A  20                 	db	32
   231  000F7B  00                 	db	0
   232  000F7C  20                 	db	32
   233  000F7D  39                 	db	57
   234  000F7E  20                 	db	32
   235  000F7F  00                 	db	0
   236                           
   237                           	psect	mediumconst
   238  00FD9A                     __pmediumconst:
   239                           	opt stack 0
   240  00FD9A  00                 	db	0
   241  00FD9B                     _font:
   242                           	opt stack 0
   243  00FD9B  00                 	db	0
   244  00FD9C  00                 	db	0
   245  00FD9D  00                 	db	0
   246  00FD9E  00                 	db	0
   247  00FD9F  00                 	db	0
   248  00FDA0  00                 	db	0
   249  00FDA1  00                 	db	0
   250  00FDA2  5F                 	db	95
   251  00FDA3  00                 	db	0
   252  00FDA4  00                 	db	0
   253  00FDA5  00                 	db	0
   254  00FDA6  07                 	db	7
   255  00FDA7  00                 	db	0
   256  00FDA8  07                 	db	7
   257  00FDA9  00                 	db	0
   258  00FDAA  14                 	db	20
   259  00FDAB  7F                 	db	127
   260  00FDAC  14                 	db	20
   261  00FDAD  7F                 	db	127
   262  00FDAE  14                 	db	20
   263  00FDAF  24                 	db	36
   264  00FDB0  2A                 	db	42
   265  00FDB1  7F                 	db	127
   266  00FDB2  2A                 	db	42
   267  00FDB3  12                 	db	18
   268  00FDB4  23                 	db	35
   269  00FDB5  13                 	db	19
   270  00FDB6  08                 	db	8
   271  00FDB7  64                 	db	100
   272  00FDB8  62                 	db	98
   273  00FDB9  36                 	db	54
   274  00FDBA  49                 	db	73
   275  00FDBB  56                 	db	86
   276  00FDBC  20                 	db	32
   277  00FDBD  50                 	db	80
   278  00FDBE  00                 	db	0
   279  00FDBF  08                 	db	8
   280  00FDC0  07                 	db	7
   281  00FDC1  03                 	db	3
   282  00FDC2  00                 	db	0
   283  00FDC3  00                 	db	0
   284  00FDC4  1C                 	db	28
   285  00FDC5  22                 	db	34
   286  00FDC6  41                 	db	65
   287  00FDC7  00                 	db	0
   288  00FDC8  00                 	db	0
   289  00FDC9  41                 	db	65
   290  00FDCA  22                 	db	34
   291  00FDCB  1C                 	db	28
   292  00FDCC  00                 	db	0
   293  00FDCD  2A                 	db	42
   294  00FDCE  1C                 	db	28
   295  00FDCF  7F                 	db	127
   296  00FDD0  1C                 	db	28
   297  00FDD1  2A                 	db	42
   298  00FDD2  08                 	db	8
   299  00FDD3  08                 	db	8
   300  00FDD4  3E                 	db	62
   301  00FDD5  08                 	db	8
   302  00FDD6  08                 	db	8
   303  00FDD7  00                 	db	0
   304  00FDD8  80                 	db	128
   305  00FDD9  70                 	db	112
   306  00FDDA  30                 	db	48
   307  00FDDB  00                 	db	0
   308  00FDDC  08                 	db	8
   309  00FDDD  08                 	db	8
   310  00FDDE  08                 	db	8
   311  00FDDF  08                 	db	8
   312  00FDE0  08                 	db	8
   313  00FDE1  00                 	db	0
   314  00FDE2  00                 	db	0
   315  00FDE3  60                 	db	96
   316  00FDE4  60                 	db	96
   317  00FDE5  00                 	db	0
   318  00FDE6  20                 	db	32
   319  00FDE7  10                 	db	16
   320  00FDE8  08                 	db	8
   321  00FDE9  04                 	db	4
   322  00FDEA  02                 	db	2
   323  00FDEB  3E                 	db	62
   324  00FDEC  51                 	db	81
   325  00FDED  49                 	db	73
   326  00FDEE  45                 	db	69
   327  00FDEF  3E                 	db	62
   328  00FDF0  00                 	db	0
   329  00FDF1  42                 	db	66
   330  00FDF2  7F                 	db	127
   331  00FDF3  40                 	db	64
   332  00FDF4  00                 	db	0
   333  00FDF5  72                 	db	114
   334  00FDF6  49                 	db	73
   335  00FDF7  49                 	db	73
   336  00FDF8  49                 	db	73
   337  00FDF9  46                 	db	70
   338  00FDFA  21                 	db	33
   339  00FDFB  41                 	db	65
   340  00FDFC  49                 	db	73
   341  00FDFD  4D                 	db	77
   342  00FDFE  33                 	db	51
   343  00FDFF  18                 	db	24
   344  00FE00  14                 	db	20
   345  00FE01  12                 	db	18
   346  00FE02  7F                 	db	127
   347  00FE03  10                 	db	16
   348  00FE04  27                 	db	39
   349  00FE05  45                 	db	69
   350  00FE06  45                 	db	69
   351  00FE07  45                 	db	69
   352  00FE08  39                 	db	57
   353  00FE09  3C                 	db	60
   354  00FE0A  4A                 	db	74
   355  00FE0B  49                 	db	73
   356  00FE0C  49                 	db	73
   357  00FE0D  31                 	db	49
   358  00FE0E  41                 	db	65
   359  00FE0F  21                 	db	33
   360  00FE10  11                 	db	17
   361  00FE11  09                 	db	9
   362  00FE12  07                 	db	7
   363  00FE13  36                 	db	54
   364  00FE14  49                 	db	73
   365  00FE15  49                 	db	73
   366  00FE16  49                 	db	73
   367  00FE17  36                 	db	54
   368  00FE18  46                 	db	70
   369  00FE19  49                 	db	73
   370  00FE1A  49                 	db	73
   371  00FE1B  29                 	db	41
   372  00FE1C  1E                 	db	30
   373  00FE1D  00                 	db	0
   374  00FE1E  00                 	db	0
   375  00FE1F  14                 	db	20
   376  00FE20  00                 	db	0
   377  00FE21  00                 	db	0
   378  00FE22  00                 	db	0
   379  00FE23  40                 	db	64
   380  00FE24  34                 	db	52
   381  00FE25  00                 	db	0
   382  00FE26  00                 	db	0
   383  00FE27  00                 	db	0
   384  00FE28  08                 	db	8
   385  00FE29  14                 	db	20
   386  00FE2A  22                 	db	34
   387  00FE2B  41                 	db	65
   388  00FE2C  14                 	db	20
   389  00FE2D  14                 	db	20
   390  00FE2E  14                 	db	20
   391  00FE2F  14                 	db	20
   392  00FE30  14                 	db	20
   393  00FE31  00                 	db	0
   394  00FE32  41                 	db	65
   395  00FE33  22                 	db	34
   396  00FE34  14                 	db	20
   397  00FE35  08                 	db	8
   398  00FE36  02                 	db	2
   399  00FE37  01                 	db	1
   400  00FE38  59                 	db	89
   401  00FE39  09                 	db	9
   402  00FE3A  06                 	db	6
   403  00FE3B  3E                 	db	62
   404  00FE3C  41                 	db	65
   405  00FE3D  5D                 	db	93
   406  00FE3E  59                 	db	89
   407  00FE3F  4E                 	db	78
   408  00FE40  7C                 	db	124
   409  00FE41  12                 	db	18
   410  00FE42  11                 	db	17
   411  00FE43  12                 	db	18
   412  00FE44  7C                 	db	124
   413  00FE45  7F                 	db	127
   414  00FE46  49                 	db	73
   415  00FE47  49                 	db	73
   416  00FE48  49                 	db	73
   417  00FE49  36                 	db	54
   418  00FE4A  3E                 	db	62
   419  00FE4B  41                 	db	65
   420  00FE4C  41                 	db	65
   421  00FE4D  41                 	db	65
   422  00FE4E  22                 	db	34
   423  00FE4F  7F                 	db	127
   424  00FE50  41                 	db	65
   425  00FE51  41                 	db	65
   426  00FE52  41                 	db	65
   427  00FE53  3E                 	db	62
   428  00FE54  7F                 	db	127
   429  00FE55  49                 	db	73
   430  00FE56  49                 	db	73
   431  00FE57  49                 	db	73
   432  00FE58  41                 	db	65
   433  00FE59  7F                 	db	127
   434  00FE5A  09                 	db	9
   435  00FE5B  09                 	db	9
   436  00FE5C  09                 	db	9
   437  00FE5D  01                 	db	1
   438  00FE5E  3E                 	db	62
   439  00FE5F  41                 	db	65
   440  00FE60  41                 	db	65
   441  00FE61  51                 	db	81
   442  00FE62  73                 	db	115
   443  00FE63  7F                 	db	127
   444  00FE64  08                 	db	8
   445  00FE65  08                 	db	8
   446  00FE66  08                 	db	8
   447  00FE67  7F                 	db	127
   448  00FE68  00                 	db	0
   449  00FE69  41                 	db	65
   450  00FE6A  7F                 	db	127
   451  00FE6B  41                 	db	65
   452  00FE6C  00                 	db	0
   453  00FE6D  20                 	db	32
   454  00FE6E  40                 	db	64
   455  00FE6F  41                 	db	65
   456  00FE70  3F                 	db	63
   457  00FE71  01                 	db	1
   458  00FE72  7F                 	db	127
   459  00FE73  08                 	db	8
   460  00FE74  14                 	db	20
   461  00FE75  22                 	db	34
   462  00FE76  41                 	db	65
   463  00FE77  7F                 	db	127
   464  00FE78  40                 	db	64
   465  00FE79  40                 	db	64
   466  00FE7A  40                 	db	64
   467  00FE7B  40                 	db	64
   468  00FE7C  7F                 	db	127
   469  00FE7D  02                 	db	2
   470  00FE7E  1C                 	db	28
   471  00FE7F  02                 	db	2
   472  00FE80  7F                 	db	127
   473  00FE81  7F                 	db	127
   474  00FE82  04                 	db	4
   475  00FE83  08                 	db	8
   476  00FE84  10                 	db	16
   477  00FE85  7F                 	db	127
   478  00FE86  3E                 	db	62
   479  00FE87  41                 	db	65
   480  00FE88  41                 	db	65
   481  00FE89  41                 	db	65
   482  00FE8A  3E                 	db	62
   483  00FE8B  7F                 	db	127
   484  00FE8C  09                 	db	9
   485  00FE8D  09                 	db	9
   486  00FE8E  09                 	db	9
   487  00FE8F  06                 	db	6
   488  00FE90  3E                 	db	62
   489  00FE91  41                 	db	65
   490  00FE92  51                 	db	81
   491  00FE93  21                 	db	33
   492  00FE94  5E                 	db	94
   493  00FE95  7F                 	db	127
   494  00FE96  09                 	db	9
   495  00FE97  19                 	db	25
   496  00FE98  29                 	db	41
   497  00FE99  46                 	db	70
   498  00FE9A                     __end_of_font:
   499                           	opt stack 0
   500  00FE9A                     _font2:
   501                           	opt stack 0
   502  00FE9A  26                 	db	38
   503  00FE9B  49                 	db	73
   504  00FE9C  49                 	db	73
   505  00FE9D  49                 	db	73
   506  00FE9E  32                 	db	50
   507  00FE9F  03                 	db	3
   508  00FEA0  01                 	db	1
   509  00FEA1  7F                 	db	127
   510  00FEA2  01                 	db	1
   511  00FEA3  03                 	db	3
   512  00FEA4  3F                 	db	63
   513  00FEA5  40                 	db	64
   514  00FEA6  40                 	db	64
   515  00FEA7  40                 	db	64
   516  00FEA8  3F                 	db	63
   517  00FEA9  1F                 	db	31
   518  00FEAA  20                 	db	32
   519  00FEAB  40                 	db	64
   520  00FEAC  20                 	db	32
   521  00FEAD  1F                 	db	31
   522  00FEAE  3F                 	db	63
   523  00FEAF  40                 	db	64
   524  00FEB0  38                 	db	56
   525  00FEB1  40                 	db	64
   526  00FEB2  3F                 	db	63
   527  00FEB3  63                 	db	99
   528  00FEB4  14                 	db	20
   529  00FEB5  08                 	db	8
   530  00FEB6  14                 	db	20
   531  00FEB7  63                 	db	99
   532  00FEB8  03                 	db	3
   533  00FEB9  04                 	db	4
   534  00FEBA  78                 	db	120
   535  00FEBB  04                 	db	4
   536  00FEBC  03                 	db	3
   537  00FEBD  61                 	db	97
   538  00FEBE  59                 	db	89
   539  00FEBF  49                 	db	73
   540  00FEC0  4D                 	db	77
   541  00FEC1  43                 	db	67
   542  00FEC2  00                 	db	0
   543  00FEC3  7F                 	db	127
   544  00FEC4  41                 	db	65
   545  00FEC5  41                 	db	65
   546  00FEC6  41                 	db	65
   547  00FEC7  02                 	db	2
   548  00FEC8  04                 	db	4
   549  00FEC9  08                 	db	8
   550  00FECA  10                 	db	16
   551  00FECB  20                 	db	32
   552  00FECC  00                 	db	0
   553  00FECD  41                 	db	65
   554  00FECE  41                 	db	65
   555  00FECF  41                 	db	65
   556  00FED0  7F                 	db	127
   557  00FED1  04                 	db	4
   558  00FED2  02                 	db	2
   559  00FED3  01                 	db	1
   560  00FED4  02                 	db	2
   561  00FED5  04                 	db	4
   562  00FED6  40                 	db	64
   563  00FED7  40                 	db	64
   564  00FED8  40                 	db	64
   565  00FED9  40                 	db	64
   566  00FEDA  40                 	db	64
   567  00FEDB  00                 	db	0
   568  00FEDC  03                 	db	3
   569  00FEDD  07                 	db	7
   570  00FEDE  08                 	db	8
   571  00FEDF  00                 	db	0
   572  00FEE0  20                 	db	32
   573  00FEE1  54                 	db	84
   574  00FEE2  54                 	db	84
   575  00FEE3  78                 	db	120
   576  00FEE4  40                 	db	64
   577  00FEE5  7F                 	db	127
   578  00FEE6  28                 	db	40
   579  00FEE7  44                 	db	68
   580  00FEE8  44                 	db	68
   581  00FEE9  38                 	db	56
   582  00FEEA  38                 	db	56
   583  00FEEB  44                 	db	68
   584  00FEEC  44                 	db	68
   585  00FEED  44                 	db	68
   586  00FEEE  28                 	db	40
   587  00FEEF  38                 	db	56
   588  00FEF0  44                 	db	68
   589  00FEF1  44                 	db	68
   590  00FEF2  28                 	db	40
   591  00FEF3  7F                 	db	127
   592  00FEF4  38                 	db	56
   593  00FEF5  54                 	db	84
   594  00FEF6  54                 	db	84
   595  00FEF7  54                 	db	84
   596  00FEF8  18                 	db	24
   597  00FEF9  00                 	db	0
   598  00FEFA  08                 	db	8
   599  00FEFB  7E                 	db	126
   600  00FEFC  09                 	db	9
   601  00FEFD  02                 	db	2
   602  00FEFE  18                 	db	24
   603  00FEFF  A4                 	db	164
   604  00FF00  A4                 	db	164
   605  00FF01  9C                 	db	156
   606  00FF02  78                 	db	120
   607  00FF03  7F                 	db	127
   608  00FF04  08                 	db	8
   609  00FF05  04                 	db	4
   610  00FF06  04                 	db	4
   611  00FF07  78                 	db	120
   612  00FF08  00                 	db	0
   613  00FF09  44                 	db	68
   614  00FF0A  7D                 	db	125
   615  00FF0B  40                 	db	64
   616  00FF0C  00                 	db	0
   617  00FF0D  20                 	db	32
   618  00FF0E  40                 	db	64
   619  00FF0F  40                 	db	64
   620  00FF10  3D                 	db	61
   621  00FF11  00                 	db	0
   622  00FF12  7F                 	db	127
   623  00FF13  10                 	db	16
   624  00FF14  28                 	db	40
   625  00FF15  44                 	db	68
   626  00FF16  00                 	db	0
   627  00FF17  00                 	db	0
   628  00FF18  41                 	db	65
   629  00FF19  7F                 	db	127
   630  00FF1A  40                 	db	64
   631  00FF1B  00                 	db	0
   632  00FF1C  7C                 	db	124
   633  00FF1D  04                 	db	4
   634  00FF1E  78                 	db	120
   635  00FF1F  04                 	db	4
   636  00FF20  78                 	db	120
   637  00FF21  7C                 	db	124
   638  00FF22  08                 	db	8
   639  00FF23  04                 	db	4
   640  00FF24  04                 	db	4
   641  00FF25  78                 	db	120
   642  00FF26  38                 	db	56
   643  00FF27  44                 	db	68
   644  00FF28  44                 	db	68
   645  00FF29  44                 	db	68
   646  00FF2A  38                 	db	56
   647  00FF2B  FC                 	db	252
   648  00FF2C  18                 	db	24
   649  00FF2D  24                 	db	36
   650  00FF2E  24                 	db	36
   651  00FF2F  18                 	db	24
   652  00FF30  18                 	db	24
   653  00FF31  24                 	db	36
   654  00FF32  24                 	db	36
   655  00FF33  18                 	db	24
   656  00FF34  FC                 	db	252
   657  00FF35  7C                 	db	124
   658  00FF36  08                 	db	8
   659  00FF37  04                 	db	4
   660  00FF38  04                 	db	4
   661  00FF39  08                 	db	8
   662  00FF3A  48                 	db	72
   663  00FF3B  54                 	db	84
   664  00FF3C  54                 	db	84
   665  00FF3D  54                 	db	84
   666  00FF3E  24                 	db	36
   667  00FF3F  04                 	db	4
   668  00FF40  04                 	db	4
   669  00FF41  3F                 	db	63
   670  00FF42  44                 	db	68
   671  00FF43  24                 	db	36
   672  00FF44  3C                 	db	60
   673  00FF45  40                 	db	64
   674  00FF46  40                 	db	64
   675  00FF47  20                 	db	32
   676  00FF48  7C                 	db	124
   677  00FF49  1C                 	db	28
   678  00FF4A  20                 	db	32
   679  00FF4B  40                 	db	64
   680  00FF4C  20                 	db	32
   681  00FF4D  1C                 	db	28
   682  00FF4E  3C                 	db	60
   683  00FF4F  40                 	db	64
   684  00FF50  30                 	db	48
   685  00FF51  40                 	db	64
   686  00FF52  3C                 	db	60
   687  00FF53  44                 	db	68
   688  00FF54  28                 	db	40
   689  00FF55  10                 	db	16
   690  00FF56  28                 	db	40
   691  00FF57  44                 	db	68
   692  00FF58  4C                 	db	76
   693  00FF59  90                 	db	144
   694  00FF5A  90                 	db	144
   695  00FF5B  90                 	db	144
   696  00FF5C  7C                 	db	124
   697  00FF5D  44                 	db	68
   698  00FF5E  64                 	db	100
   699  00FF5F  54                 	db	84
   700  00FF60  4C                 	db	76
   701  00FF61  44                 	db	68
   702  00FF62  00                 	db	0
   703  00FF63  08                 	db	8
   704  00FF64  36                 	db	54
   705  00FF65  41                 	db	65
   706  00FF66  00                 	db	0
   707  00FF67  00                 	db	0
   708  00FF68  00                 	db	0
   709  00FF69  77                 	db	119
   710  00FF6A  00                 	db	0
   711  00FF6B  00                 	db	0
   712  00FF6C  00                 	db	0
   713  00FF6D  41                 	db	65
   714  00FF6E  36                 	db	54
   715  00FF6F  08                 	db	8
   716  00FF70  00                 	db	0
   717  00FF71  02                 	db	2
   718  00FF72  01                 	db	1
   719  00FF73  02                 	db	2
   720  00FF74  04                 	db	4
   721  00FF75  02                 	db	2
   722  00FF76                     __end_of_font2:
   723                           	opt stack 0
   724  00FF76                     _dpowers:
   725                           	opt stack 0
   726  00FF76  0001               	dw	1
   727  00FF78  000A               	dw	10
   728  00FF7A  0064               	dw	100
   729  00FF7C  03E8               	dw	1000
   730  00FF7E  2710               	dw	10000
   731  00FF80                     __end_of_dpowers:
   732                           	opt stack 0
   733  00FF80                     _hexpowers:
   734                           	opt stack 0
   735  00FF80  0001               	dw	1
   736  00FF82  0010               	dw	16
   737  00FF84  0100               	dw	256
   738  00FF86  1000               	dw	4096
   739  00FF88                     __end_of_hexpowers:
   740                           	opt stack 0
   741  0000                     _ADCON1	set	4033
   742  0000                     _CCP2CON	set	4026
   743  0000                     _CCPR2L	set	4027
   744  0000                     _INTCON2bits	set	4081
   745  0000                     _INTCONbits	set	4082
   746  0000                     _OSCCON	set	4051
   747  0000                     _PIE1bits	set	3997
   748  0000                     _PIR1bits	set	3998
   749  0000                     _PIR2bits	set	4001
   750  0000                     _PORTA	set	3968
   751  0000                     _PORTBbits	set	3969
   752  0000                     _PORTCbits	set	3970
   753  0000                     _PORTDbits	set	3971
   754  0000                     _PORTEbits	set	3972
   755  0000                     _PR2	set	4043
   756  0000                     _RCSTA	set	4011
   757  0000                     _RCSTAbits	set	4011
   758  0000                     _SPBRG	set	4015
   759  0000                     _SPBRGH	set	4016
   760  0000                     _SSPBUF	set	4041
   761  0000                     _SSPCON1	set	4038
   762  0000                     _SSPSTAT	set	4039
   763  0000                     _SSPSTATbits	set	4039
   764  0000                     _T0CON	set	4053
   765  0000                     _T0CONbits	set	4053
   766  0000                     _T1CON	set	4045
   767  0000                     _T1CONbits	set	4045
   768  0000                     _T2CON	set	4042
   769  0000                     _T3CON	set	4017
   770  0000                     _T3CONbits	set	4017
   771  0000                     _TMR0H	set	4055
   772  0000                     _TMR0L	set	4054
   773  0000                     _TMR1H	set	4047
   774  0000                     _TMR1L	set	4046
   775  0000                     _TMR3H	set	4019
   776  0000                     _TMR3L	set	4018
   777  0000                     _TRISA	set	3986
   778  0000                     _TRISB	set	3987
   779  0000                     _TRISC	set	3988
   780  0000                     _TRISCbits	set	3988
   781  0000                     _TRISD	set	3989
   782  0000                     _TRISE	set	3990
   783  0000                     _TXREG	set	4013
   784  0000                     _TXSTA	set	4012
   785  0000                     _TXSTAbits	set	4012
   786  0000                     _RBPU	set	32655
   787  0000                     _TRMT	set	32097
   788  00FF88                     STR_2:
   789  00FF88  20                 	db	32
   790  00FF89  54                 	db	84	;'T'
   791  00FF8A  65                 	db	101	;'e'
   792  00FF8B  6D                 	db	109	;'m'
   793  00FF8C  70                 	db	112	;'p'
   794  00FF8D  65                 	db	101	;'e'
   795  00FF8E  72                 	db	114	;'r'
   796  00FF8F  61                 	db	97	;'a'
   797  00FF90  74                 	db	116	;'t'
   798  00FF91  75                 	db	117	;'u'
   799  00FF92  72                 	db	114	;'r'
   800  00FF93  65                 	db	101	;'e'
   801  00FF94  20                 	db	32
   802  00FF95  3D                 	db	61	;'='
   803  00FF96  20                 	db	32
   804  00FF97  25                 	db	37
   805  00FF98  64                 	db	100	;'d'
   806  00FF99  20                 	db	32
   807  00FF9A  64                 	db	100	;'d'
   808  00FF9B  65                 	db	101	;'e'
   809  00FF9C  67                 	db	103	;'g'
   810  00FF9D  72                 	db	114	;'r'
   811  00FF9E  65                 	db	101	;'e'
   812  00FF9F  65                 	db	101	;'e'
   813  00FFA0  73                 	db	115	;'s'
   814  00FFA1  43                 	db	67	;'C'
   815  00FFA2  20                 	db	32
   816  00FFA3  3D                 	db	61	;'='
   817  00FFA4  20                 	db	32
   818  00FFA5  25                 	db	37
   819  00FFA6  64                 	db	100	;'d'
   820  00FFA7  20                 	db	32
   821  00FFA8  64                 	db	100	;'d'
   822  00FFA9  65                 	db	101	;'e'
   823  00FFAA  67                 	db	103	;'g'
   824  00FFAB  72                 	db	114	;'r'
   825  00FFAC  65                 	db	101	;'e'
   826  00FFAD  65                 	db	101	;'e'
   827  00FFAE  73                 	db	115	;'s'
   828  00FFAF  46                 	db	70	;'F'
   829  00FFB0  0D                 	db	13
   830  00FFB1  0A                 	db	10
   831  00FFB2  00                 	db	0
   832  00FFB3                     STR_1:
   833  00FFB3  25                 	db	37
   834  00FFB4  30                 	db	48	;'0'
   835  00FFB5  32                 	db	50	;'2'
   836  00FFB6  78                 	db	120	;'x'
   837  00FFB7  3A                 	db	58	;':'
   838  00FFB8  25                 	db	37
   839  00FFB9  30                 	db	48	;'0'
   840  00FFBA  32                 	db	50	;'2'
   841  00FFBB  78                 	db	120	;'x'
   842  00FFBC  3A                 	db	58	;':'
   843  00FFBD  25                 	db	37
   844  00FFBE  30                 	db	48	;'0'
   845  00FFBF  32                 	db	50	;'2'
   846  00FFC0  78                 	db	120	;'x'
   847  00FFC1  20                 	db	32
   848  00FFC2  25                 	db	37
   849  00FFC3  30                 	db	48	;'0'
   850  00FFC4  32                 	db	50	;'2'
   851  00FFC5  78                 	db	120	;'x'
   852  00FFC6  2F                 	db	47
   853  00FFC7  25                 	db	37
   854  00FFC8  30                 	db	48	;'0'
   855  00FFC9  32                 	db	50	;'2'
   856  00FFCA  78                 	db	120	;'x'
   857  00FFCB  2F                 	db	47
   858  00FFCC  25                 	db	37
   859  00FFCD  30                 	db	48	;'0'
   860  00FFCE  32                 	db	50	;'2'
   861  00FFCF  78                 	db	120	;'x'
   862  00FFD0  00                 	db	0
   863  00FFD1                     STR_3:
   864  00FFD1  45                 	db	69	;'E'
   865  00FFD2  43                 	db	67	;'C'
   866  00FFD3  45                 	db	69	;'E'
   867  00FFD4  33                 	db	51	;'3'
   868  00FFD5  33                 	db	51	;'3'
   869  00FFD6  30                 	db	48	;'0'
   870  00FFD7  31                 	db	49	;'1'
   871  00FFD8  4C                 	db	76	;'L'
   872  00FFD9  20                 	db	32
   873  00FFDA  46                 	db	70	;'F'
   874  00FFDB  61                 	db	97	;'a'
   875  00FFDC  6C                 	db	108	;'l'
   876  00FFDD  6C                 	db	108	;'l'
   877  00FFDE  20                 	db	32
   878  00FFDF  32                 	db	50	;'2'
   879  00FFE0  31                 	db	49	;'1'
   880  00FFE1  2D                 	db	45
   881  00FFE2  53                 	db	83	;'S'
   882  00FFE3  34                 	db	52	;'4'
   883  00FFE4  00                 	db	0
   884  00FFE5                     STR_5:
   885  00FFE5  30                 	db	48	;'0'
   886  00FFE6  31                 	db	49	;'1'
   887  00FFE7  32                 	db	50	;'2'
   888  00FFE8  33                 	db	51	;'3'
   889  00FFE9  34                 	db	52	;'4'
   890  00FFEA  35                 	db	53	;'5'
   891  00FFEB  36                 	db	54	;'6'
   892  00FFEC  37                 	db	55	;'7'
   893  00FFED  38                 	db	56	;'8'
   894  00FFEE  39                 	db	57	;'9'
   895  00FFEF  61                 	db	97	;'a'
   896  00FFF0  62                 	db	98	;'b'
   897  00FFF1  63                 	db	99	;'c'
   898  00FFF2  64                 	db	100	;'d'
   899  00FFF3  65                 	db	101	;'e'
   900  00FFF4  66                 	db	102	;'f'
   901  00FFF5  00                 	db	0
   902  00FFF6                     STR_4:
   903  00FFF6  4C                 	db	76	;'L'
   904  00FFF7  41                 	db	65	;'A'
   905  00FFF8  42                 	db	66	;'B'
   906  00FFF9  20                 	db	32
   907  00FFFA  31                 	db	49	;'1'
   908  00FFFB  30                 	db	48	;'0'
   909  00FFFC  20                 	db	32
   910  00FFFD  00                 	db	0
   911                           
   912                           ; #config settings
   913  00FFFE  00                 	db	0	; dummy byte at the end
   914  0000                     
   915                           	psect	cinit
   916  000D1C                     __pcinit:
   917                           	opt stack 0
   918  000D1C                     start_initialization:
   919                           	opt stack 0
   920  000D1C                     __initialization:
   921                           	opt stack 0
   922                           
   923                           ; Clear objects allocated to BANK0 (31 bytes)
   924  000D1C  EE00  F0C9         	lfsr	0,__pbssBANK0
   925  000D20  0E1F               	movlw	31
   926  000D22                     clear_0:
   927  000D22  6AEE               	clrf	postinc0,c
   928  000D24  06E8               	decf	wreg,f,c
   929  000D26  E1FD               	bnz	clear_0
   930                           
   931                           ; Clear objects allocated to COMRAM (47 bytes)
   932  000D28  EE00  F03E         	lfsr	0,__pbssCOMRAM
   933  000D2C  0E2F               	movlw	47
   934  000D2E                     clear_1:
   935  000D2E  6AEE               	clrf	postinc0,c
   936  000D30  06E8               	decf	wreg,f,c
   937  000D32  E1FD               	bnz	clear_1
   938                           
   939                           ; Initialize objects allocated to BANK1 (84 bytes)
   940                           ; load TBLPTR registers with __pidataBANK1
   941  000D34  0E2C               	movlw	low __pidataBANK1
   942  000D36  6EF6               	movwf	tblptrl,c
   943  000D38  0E0F               	movlw	high __pidataBANK1
   944  000D3A  6EF7               	movwf	tblptrh,c
   945  000D3C  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   946  000D3E  6EF8               	movwf	tblptru,c
   947  000D40  EE01  F000         	lfsr	0,__pdataBANK1
   948  000D44  EE10 F054          	lfsr	1,84
   949  000D48                     copy_data0:
   950  000D48  0009               	tblrd		*+
   951  000D4A  CFF5 FFEE          	movff	tablat,postinc0
   952  000D4E  50E5               	movf	postdec1,w,c
   953  000D50  50E1               	movf	fsr1l,w,c
   954  000D52  E1FA               	bnz	copy_data0
   955                           
   956                           ; Initialize objects allocated to BANK0 (73 bytes)
   957                           ; load TBLPTR registers with __pidataBANK0
   958  000D54  0EB6               	movlw	low __pidataBANK0
   959  000D56  6EF6               	movwf	tblptrl,c
   960  000D58  0E10               	movlw	high __pidataBANK0
   961  000D5A  6EF7               	movwf	tblptrh,c
   962  000D5C  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   963  000D5E  6EF8               	movwf	tblptru,c
   964  000D60  EE00  F080         	lfsr	0,__pdataBANK0
   965  000D64  EE10 F049          	lfsr	1,73
   966  000D68                     copy_data1:
   967  000D68  0009               	tblrd		*+
   968  000D6A  CFF5 FFEE          	movff	tablat,postinc0
   969  000D6E  50E5               	movf	postdec1,w,c
   970  000D70  50E1               	movf	fsr1l,w,c
   971  000D72  E1FA               	bnz	copy_data1
   972                           
   973                           ; Initialize objects allocated to COMRAM (2 bytes)
   974                           ; load TBLPTR registers with __pidataCOMRAM
   975  000D74  0EFE               	movlw	low __pidataCOMRAM
   976  000D76  6EF6               	movwf	tblptrl,c
   977  000D78  0E14               	movlw	high __pidataCOMRAM
   978  000D7A  6EF7               	movwf	tblptrh,c
   979  000D7C  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   980  000D7E  6EF8               	movwf	tblptru,c
   981  000D80  0009               	tblrd		*+	;fetch initializer
   982  000D82  CFF5 F06D          	movff	tablat,__pdataCOMRAM
   983  000D86  0009               	tblrd		*+	;fetch initializer
   984  000D88  CFF5 F06E          	movff	tablat,__pdataCOMRAM+1
   985  000D8C                     end_of_initialization:
   986                           	opt stack 0
   987  000D8C                     __end_of__initialization:
   988                           	opt stack 0
   989  000D8C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   990  000D8E  6EF8               	movwf	tblptru,c
   991  000D90  0100               	movlb	0
   992  000D92  EF11  F005         	goto	_main	;jump to C main() function
   993                           tblptru	equ	0xFF8
   994                           tblptrh	equ	0xFF7
   995                           tblptrl	equ	0xFF6
   996                           tablat	equ	0xFF5
   997                           postinc0	equ	0xFEE
   998                           wreg	equ	0xFE8
   999                           postdec1	equ	0xFE5
  1000                           fsr1l	equ	0xFE1
  1001                           
  1002                           	psect	bssCOMRAM
  1003  00003E                     __pbssCOMRAM:
  1004                           	opt stack 0
  1005  00003E                     _Nec_code:
  1006                           	opt stack 0
  1007  00003E                     	ds	4
  1008  000042                     _Time_Elapsed:
  1009                           	opt stack 0
  1010  000042                     	ds	2
  1011  000044                     _nbr:
  1012                           	opt stack 0
  1013  000044                     	ds	2
  1014  000046                     _nec_ok:
  1015                           	opt stack 0
  1016  000046                     	ds	2
  1017  000048                     _txt:
  1018                           	opt stack 0
  1019  000048                     	ds	2
  1020  00004A                     _Address:
  1021                           	opt stack 0
  1022  00004A                     	ds	1
  1023  00004B                     _Cmd:
  1024                           	opt stack 0
  1025  00004B                     	ds	1
  1026  00004C                     _Device:
  1027                           	opt stack 0
  1028  00004C                     	ds	1
  1029  00004D                     _Nec_code1:
  1030                           	opt stack 0
  1031  00004D                     	ds	1
  1032  00004E                     _Nec_state:
  1033                           	opt stack 0
  1034  00004E                     	ds	1
  1035  00004F                     _TempSecond:
  1036                           	opt stack 0
  1037  00004F                     	ds	1
  1038  000050                     __tft_type:
  1039                           	opt stack 0
  1040  000050                     	ds	1
  1041  000051                     _alarm_date:
  1042                           	opt stack 0
  1043  000051                     	ds	1
  1044  000052                     _alarm_hour:
  1045                           	opt stack 0
  1046  000052                     	ds	1
  1047  000053                     _alarm_minute:
  1048                           	opt stack 0
  1049  000053                     	ds	1
  1050  000054                     _alarm_second:
  1051                           	opt stack 0
  1052  000054                     	ds	1
  1053  000055                     _bit_count:
  1054                           	opt stack 0
  1055  000055                     	ds	1
  1056  000056                     _colstart:
  1057                           	opt stack 0
  1058  000056                     	ds	1
  1059  000057                     _day:
  1060                           	opt stack 0
  1061  000057                     	ds	1
  1062  000058                     _dow:
  1063                           	opt stack 0
  1064  000058                     	ds	1
  1065  000059                     _found:
  1066                           	opt stack 0
  1067  000059                     	ds	1
  1068  00005A                     _hour:
  1069                           	opt stack 0
  1070  00005A                     	ds	1
  1071  00005B                     _i:
  1072                           	opt stack 0
  1073  00005B                     	ds	1
  1074  00005C                     _minute:
  1075                           	opt stack 0
  1076  00005C                     	ds	1
  1077  00005D                     _month:
  1078                           	opt stack 0
  1079  00005D                     	ds	1
  1080  00005E                     _prev_second:
  1081                           	opt stack 0
  1082  00005E                     	ds	1
  1083  00005F                     _rowstart:
  1084                           	opt stack 0
  1085  00005F                     	ds	1
  1086  000060                     _second:
  1087                           	opt stack 0
  1088  000060                     	ds	1
  1089  000061                     _setup_alarm_hour:
  1090                           	opt stack 0
  1091  000061                     	ds	1
  1092  000062                     _setup_alarm_minute:
  1093                           	opt stack 0
  1094  000062                     	ds	1
  1095  000063                     _setup_alarm_second:
  1096                           	opt stack 0
  1097  000063                     	ds	1
  1098  000064                     _setup_day:
  1099                           	opt stack 0
  1100  000064                     	ds	1
  1101  000065                     _setup_hour:
  1102                           	opt stack 0
  1103  000065                     	ds	1
  1104  000066                     _setup_minute:
  1105                           	opt stack 0
  1106  000066                     	ds	1
  1107  000067                     _setup_month:
  1108                           	opt stack 0
  1109  000067                     	ds	1
  1110  000068                     _setup_second:
  1111                           	opt stack 0
  1112  000068                     	ds	1
  1113  000069                     _setup_year:
  1114                           	opt stack 0
  1115  000069                     	ds	1
  1116  00006A                     _tempC:
  1117                           	opt stack 0
  1118  00006A                     	ds	1
  1119  00006B                     _tempF:
  1120                           	opt stack 0
  1121  00006B                     	ds	1
  1122  00006C                     _year:
  1123                           	opt stack 0
  1124  00006C                     	ds	1
  1125                           tblptru	equ	0xFF8
  1126                           tblptrh	equ	0xFF7
  1127                           tblptrl	equ	0xFF6
  1128                           tablat	equ	0xFF5
  1129                           postinc0	equ	0xFEE
  1130                           wreg	equ	0xFE8
  1131                           postdec1	equ	0xFE5
  1132                           fsr1l	equ	0xFE1
  1133                           
  1134                           	psect	dataCOMRAM
  1135  00006D                     __pdataCOMRAM:
  1136                           	opt stack 0
  1137  00006D                     _tempSecond:
  1138                           	opt stack 0
  1139  00006D                     	ds	1
  1140  00006E                     _wrap:
  1141                           	opt stack 0
  1142  00006E                     	ds	1
  1143                           tblptru	equ	0xFF8
  1144                           tblptrh	equ	0xFF7
  1145                           tblptrl	equ	0xFF6
  1146                           tablat	equ	0xFF5
  1147                           postinc0	equ	0xFEE
  1148                           wreg	equ	0xFE8
  1149                           postdec1	equ	0xFE5
  1150                           fsr1l	equ	0xFE1
  1151                           
  1152                           	psect	bssBANK0
  1153  0000C9                     __pbssBANK0:
  1154                           	opt stack 0
  1155  0000C9                     _buffer:
  1156                           	opt stack 0
  1157  0000C9                     	ds	31
  1158                           tblptru	equ	0xFF8
  1159                           tblptrh	equ	0xFF7
  1160                           tblptrl	equ	0xFF6
  1161                           tablat	equ	0xFF5
  1162                           postinc0	equ	0xFEE
  1163                           wreg	equ	0xFE8
  1164                           postdec1	equ	0xFE5
  1165                           fsr1l	equ	0xFE1
  1166                           
  1167                           	psect	dataBANK0
  1168  000080                     __pdataBANK0:
  1169                           	opt stack 0
  1170  000080                     _color:
  1171                           	opt stack 0
  1172  000080                     	ds	42
  1173  0000AA                     _array1:
  1174                           	opt stack 0
  1175  0000AA                     	ds	21
  1176  0000BF                     _Display_D1:
  1177                           	opt stack 0
  1178  0000BF                     	ds	10
  1179                           tblptru	equ	0xFF8
  1180                           tblptrh	equ	0xFF7
  1181                           tblptrl	equ	0xFF6
  1182                           tablat	equ	0xFF5
  1183                           postinc0	equ	0xFEE
  1184                           wreg	equ	0xFE8
  1185                           postdec1	equ	0xFE5
  1186                           fsr1l	equ	0xFE1
  1187                           
  1188                           	psect	dataBANK1
  1189  000100                     __pdataBANK1:
  1190                           	opt stack 0
  1191  000100                     _txt1:
  1192                           	opt stack 0
  1193  000100                     	ds	84
  1194                           tblptru	equ	0xFF8
  1195                           tblptrh	equ	0xFF7
  1196                           tblptrl	equ	0xFF6
  1197                           tablat	equ	0xFF5
  1198                           postinc0	equ	0xFEE
  1199                           wreg	equ	0xFE8
  1200                           postdec1	equ	0xFE5
  1201                           fsr1l	equ	0xFE1
  1202                           
  1203                           	psect	cstackBANK0
  1204  0000E8                     __pcstackBANK0:
  1205                           	opt stack 0
  1206  0000E8                     drawtext@y:
  1207                           	opt stack 0
  1208                           
  1209                           ; 1 bytes @ 0x0
  1210  0000E8                     	ds	1
  1211  0000E9                     drawtext@_text:
  1212                           	opt stack 0
  1213                           
  1214                           ; 2 bytes @ 0x1
  1215  0000E9                     	ds	2
  1216  0000EB                     drawtext@color:
  1217                           	opt stack 0
  1218                           
  1219                           ; 2 bytes @ 0x3
  1220  0000EB                     	ds	2
  1221  0000ED                     drawtext@bg:
  1222                           	opt stack 0
  1223                           
  1224                           ; 2 bytes @ 0x5
  1225  0000ED                     	ds	2
  1226  0000EF                     drawtext@size:
  1227                           	opt stack 0
  1228                           
  1229                           ; 1 bytes @ 0x7
  1230  0000EF                     	ds	1
  1231  0000F0                     drawtext@x:
  1232                           	opt stack 0
  1233                           
  1234                           ; 1 bytes @ 0x8
  1235  0000F0                     	ds	1
  1236  0000F1                     drawtext@textsize:
  1237                           	opt stack 0
  1238                           
  1239                           ; 2 bytes @ 0x9
  1240  0000F1                     	ds	2
  1241  0000F3                     drawtext@i:
  1242                           	opt stack 0
  1243                           
  1244                           ; 2 bytes @ 0xB
  1245  0000F3                     	ds	2
  1246  0000F5                     drawtext@cursor_y:
  1247                           	opt stack 0
  1248                           
  1249                           ; 1 bytes @ 0xD
  1250  0000F5                     	ds	1
  1251  0000F6                     drawtext@cursor_x:
  1252                           	opt stack 0
  1253                           
  1254                           ; 1 bytes @ 0xE
  1255  0000F6                     	ds	1
  1256                           tblptru	equ	0xFF8
  1257                           tblptrh	equ	0xFF7
  1258                           tblptrl	equ	0xFF6
  1259                           tablat	equ	0xFF5
  1260                           postinc0	equ	0xFEE
  1261                           wreg	equ	0xFE8
  1262                           postdec1	equ	0xFE5
  1263                           fsr1l	equ	0xFE1
  1264                           
  1265                           	psect	cstackCOMRAM
  1266  000001                     __pcstackCOMRAM:
  1267                           	opt stack 0
  1268  000001                     ??_INT0_isr:
  1269  000001                     
  1270                           ; 1 bytes @ 0x0
  1271  000001                     	ds	2
  1272  000003                     ??_chkisr:
  1273                           
  1274                           ; 0 bytes @ 0x2
  1275  000003                     	ds	14
  1276  000011                     ??_isdigit:
  1277  000011                     ?_strlen:
  1278                           	opt stack 0
  1279  000011                     ?___wmul:
  1280                           	opt stack 0
  1281  000011                     ?___lwdiv:
  1282                           	opt stack 0
  1283  000011                     I2C_Read@ack:
  1284                           	opt stack 0
  1285  000011                     I2C_Write@outByte:
  1286                           	opt stack 0
  1287  000011                     spiwrite@x:
  1288                           	opt stack 0
  1289  000011                     putch@c:
  1290                           	opt stack 0
  1291  000011                     OpenUSART@spbrg:
  1292                           	opt stack 0
  1293  000011                     ___wmul@multiplier:
  1294                           	opt stack 0
  1295  000011                     ___lwdiv@dividend:
  1296                           	opt stack 0
  1297  000011                     strcpy@to:
  1298                           	opt stack 0
  1299  000011                     strlen@s:
  1300                           	opt stack 0
  1301  000011                     I2C_Init@c:
  1302                           	opt stack 0
  1303                           
  1304                           ; 4 bytes @ 0x10
  1305  000011                     	ds	1
  1306  000012                     I2C_Read@n:
  1307                           	opt stack 0
  1308  000012                     I2C_Write@n:
  1309                           	opt stack 0
  1310  000012                     spiwrite@spidata:
  1311                           	opt stack 0
  1312  000012                     _isdigit$2054:
  1313                           	opt stack 0
  1314                           
  1315                           ; 1 bytes @ 0x11
  1316  000012                     	ds	1
  1317  000013                     ??_strlen:
  1318  000013                     I2C_Read@inByte:
  1319                           	opt stack 0
  1320  000013                     I2C_Write_Cmd_Only@Cmd:
  1321                           	opt stack 0
  1322  000013                     I2C_Write_Cmd_Write_Data@Cmd:
  1323                           	opt stack 0
  1324  000013                     DS3231_Setup_Time@Device:
  1325                           	opt stack 0
  1326  000013                     write_command@cmd_:
  1327                           	opt stack 0
  1328  000013                     write_data@data_:
  1329                           	opt stack 0
  1330  000013                     OpenUSART@config:
  1331                           	opt stack 0
  1332  000013                     isdigit@c:
  1333                           	opt stack 0
  1334  000013                     ___wmul@multiplicand:
  1335                           	opt stack 0
  1336  000013                     ___lwdiv@divisor:
  1337                           	opt stack 0
  1338  000013                     strcpy@from:
  1339                           	opt stack 0
  1340                           
  1341                           ; 2 bytes @ 0x12
  1342  000013                     	ds	1
  1343  000014                     ?_DS1621_Read_Temp:
  1344                           	opt stack 0
  1345  000014                     I2C_Write_Cmd_Only@Device:
  1346                           	opt stack 0
  1347  000014                     I2C_Write_Cmd_Write_Data@Data_Out:
  1348                           	opt stack 0
  1349  000014                     DS3231_Read_Time@Address:
  1350                           	opt stack 0
  1351  000014                     DS3231_Setup_Time@Address:
  1352                           	opt stack 0
  1353  000014                     setAddrWindow@y0:
  1354                           	opt stack 0
  1355                           
  1356                           ; 1 bytes @ 0x13
  1357  000014                     	ds	1
  1358  000015                     I2C_Write_Cmd_Write_Data@Device:
  1359                           	opt stack 0
  1360  000015                     DS3231_Read_Time@Device:
  1361                           	opt stack 0
  1362  000015                     setAddrWindow@x1:
  1363                           	opt stack 0
  1364  000015                     ___wmul@product:
  1365                           	opt stack 0
  1366  000015                     ___lwdiv@quotient:
  1367                           	opt stack 0
  1368  000015                     strcpy@cp:
  1369                           	opt stack 0
  1370  000015                     strlen@cp:
  1371                           	opt stack 0
  1372                           
  1373                           ; 2 bytes @ 0x14
  1374  000015                     	ds	1
  1375  000016                     DS1621_Init@Device:
  1376                           	opt stack 0
  1377  000016                     DS1621_Read_Temp@Cmd:
  1378                           	opt stack 0
  1379  000016                     setAddrWindow@y1:
  1380                           	opt stack 0
  1381                           
  1382                           ; 1 bytes @ 0x15
  1383  000016                     	ds	1
  1384  000017                     ?___awdiv:
  1385                           	opt stack 0
  1386  000017                     DS1621_Read_Temp@Data_Ret:
  1387                           	opt stack 0
  1388  000017                     setAddrWindow@x0:
  1389                           	opt stack 0
  1390  000017                     ___lwdiv@counter:
  1391                           	opt stack 0
  1392  000017                     delay_ms@ms:
  1393                           	opt stack 0
  1394  000017                     ___awdiv@dividend:
  1395                           	opt stack 0
  1396                           
  1397                           ; 2 bytes @ 0x16
  1398  000017                     	ds	1
  1399  000018                     ?___lwmod:
  1400                           	opt stack 0
  1401  000018                     DS1621_Read_Temp@Device:
  1402                           	opt stack 0
  1403  000018                     drawPixel@y:
  1404                           	opt stack 0
  1405  000018                     drawFastVLine@y:
  1406                           	opt stack 0
  1407  000018                     fillRectangle@y:
  1408                           	opt stack 0
  1409  000018                     ___lwmod@dividend:
  1410                           	opt stack 0
  1411                           
  1412                           ; 2 bytes @ 0x17
  1413  000018                     	ds	1
  1414  000019                     ??_delay_ms:
  1415  000019                     drawFastVLine@h:
  1416                           	opt stack 0
  1417  000019                     fillRectangle@w:
  1418                           	opt stack 0
  1419  000019                     drawPixel@color:
  1420                           	opt stack 0
  1421  000019                     ___awdiv@divisor:
  1422                           	opt stack 0
  1423                           
  1424                           ; 2 bytes @ 0x18
  1425  000019                     	ds	1
  1426  00001A                     fillRectangle@h:
  1427                           	opt stack 0
  1428  00001A                     drawFastVLine@color:
  1429                           	opt stack 0
  1430  00001A                     ___lwmod@divisor:
  1431                           	opt stack 0
  1432                           
  1433                           ; 2 bytes @ 0x19
  1434  00001A                     	ds	1
  1435  00001B                     drawPixel@x:
  1436                           	opt stack 0
  1437  00001B                     ___awdiv@counter:
  1438                           	opt stack 0
  1439  00001B                     delay_ms@count:
  1440                           	opt stack 0
  1441  00001B                     fillRectangle@color:
  1442                           	opt stack 0
  1443                           
  1444                           ; 2 bytes @ 0x1A
  1445  00001B                     	ds	1
  1446  00001C                     ??_drawFastVLine:
  1447  00001C                     ___awdiv@sign:
  1448                           	opt stack 0
  1449  00001C                     ___lwmod@counter:
  1450                           	opt stack 0
  1451                           
  1452                           ; 1 bytes @ 0x1B
  1453  00001C                     	ds	1
  1454  00001D                     ??_fillRectangle:
  1455  00001D                     ?_printf:
  1456                           	opt stack 0
  1457  00001D                     printf@f:
  1458                           	opt stack 0
  1459  00001D                     ___awdiv@quotient:
  1460                           	opt stack 0
  1461                           
  1462                           ; 2 bytes @ 0x1C
  1463  00001D                     	ds	3
  1464  000020                     drawFastVLine@hi:
  1465                           	opt stack 0
  1466                           
  1467                           ; 1 bytes @ 0x1F
  1468  000020                     	ds	1
  1469  000021                     drawFastVLine@lo:
  1470                           	opt stack 0
  1471  000021                     fillRectangle@hi:
  1472                           	opt stack 0
  1473                           
  1474                           ; 1 bytes @ 0x20
  1475  000021                     	ds	1
  1476  000022                     drawFastVLine@x:
  1477                           	opt stack 0
  1478  000022                     fillRectangle@lo:
  1479                           	opt stack 0
  1480                           
  1481                           ; 1 bytes @ 0x21
  1482  000022                     	ds	1
  1483  000023                     fillRect@y:
  1484                           	opt stack 0
  1485  000023                     fillRectangle@x:
  1486                           	opt stack 0
  1487                           
  1488                           ; 1 bytes @ 0x22
  1489  000023                     	ds	1
  1490  000024                     fillRect@w:
  1491                           	opt stack 0
  1492  000024                     fillScreen@color:
  1493                           	opt stack 0
  1494                           
  1495                           ; 2 bytes @ 0x23
  1496  000024                     	ds	1
  1497  000025                     fillRect@h:
  1498                           	opt stack 0
  1499                           
  1500                           ; 1 bytes @ 0x24
  1501  000025                     	ds	1
  1502  000026                     fillRect@color:
  1503                           	opt stack 0
  1504                           
  1505                           ; 2 bytes @ 0x25
  1506  000026                     	ds	2
  1507  000028                     ??_fillRect:
  1508                           
  1509                           ; 0 bytes @ 0x27
  1510  000028                     	ds	3
  1511  00002B                     ??_printf:
  1512  00002B                     fillRect@x:
  1513                           	opt stack 0
  1514                           
  1515                           ; 1 bytes @ 0x2A
  1516  00002B                     	ds	1
  1517  00002C                     fillRect@i:
  1518                           	opt stack 0
  1519                           
  1520                           ; 2 bytes @ 0x2B
  1521  00002C                     	ds	2
  1522  00002E                     drawChar@y:
  1523                           	opt stack 0
  1524                           
  1525                           ; 1 bytes @ 0x2D
  1526  00002E                     	ds	1
  1527  00002F                     drawChar@c:
  1528                           	opt stack 0
  1529  00002F                     printf@idx:
  1530                           	opt stack 0
  1531                           
  1532                           ; 1 bytes @ 0x2E
  1533  00002F                     	ds	1
  1534  000030                     drawChar@color:
  1535                           	opt stack 0
  1536  000030                     printf@ap:
  1537                           	opt stack 0
  1538                           
  1539                           ; 2 bytes @ 0x2F
  1540  000030                     	ds	2
  1541  000032                     printf@prec:
  1542                           	opt stack 0
  1543  000032                     drawChar@bg:
  1544                           	opt stack 0
  1545                           
  1546                           ; 2 bytes @ 0x31
  1547  000032                     	ds	1
  1548  000033                     printf@val:
  1549                           	opt stack 0
  1550                           
  1551                           ; 2 bytes @ 0x32
  1552  000033                     	ds	1
  1553  000034                     drawChar@size:
  1554                           	opt stack 0
  1555                           
  1556                           ; 1 bytes @ 0x33
  1557  000034                     	ds	1
  1558  000035                     drawChar@line:
  1559                           	opt stack 0
  1560  000035                     printf@flag:
  1561                           	opt stack 0
  1562                           
  1563                           ; 1 bytes @ 0x34
  1564  000035                     	ds	1
  1565  000036                     drawChar@x:
  1566                           	opt stack 0
  1567  000036                     printf@width:
  1568                           	opt stack 0
  1569                           
  1570                           ; 2 bytes @ 0x35
  1571  000036                     	ds	1
  1572  000037                     drawChar@j:
  1573                           	opt stack 0
  1574                           
  1575                           ; 1 bytes @ 0x36
  1576  000037                     	ds	1
  1577  000038                     drawChar@i:
  1578                           	opt stack 0
  1579  000038                     printf@c:
  1580                           	opt stack 0
  1581                           
  1582                           ; 1 bytes @ 0x37
  1583  000038                     	ds	1
  1584  000039                     ??_drawtext:
  1585                           
  1586                           ; 0 bytes @ 0x38
  1587  000039                     	ds	2
  1588  00003B                     main@U:
  1589                           	opt stack 0
  1590                           
  1591                           ; 1 bytes @ 0x3A
  1592  00003B                     	ds	1
  1593  00003C                     main@tempC:
  1594                           	opt stack 0
  1595                           
  1596                           ; 1 bytes @ 0x3B
  1597  00003C                     	ds	1
  1598  00003D                     main@tempF:
  1599                           	opt stack 0
  1600                           
  1601                           ; 1 bytes @ 0x3C
  1602  00003D                     	ds	1
  1603                           tblptru	equ	0xFF8
  1604                           tblptrh	equ	0xFF7
  1605                           tblptrl	equ	0xFF6
  1606                           tablat	equ	0xFF5
  1607                           postinc0	equ	0xFEE
  1608                           wreg	equ	0xFE8
  1609                           postdec1	equ	0xFE5
  1610                           fsr1l	equ	0xFE1
  1611                           
  1612 ;;
  1613 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1614 ;;
  1615 ;; *************** function _main *****************
  1616 ;; Defined at:
  1617 ;;		line 209 in file "Lab10p2.c"
  1618 ;; Parameters:    Size  Location     Type
  1619 ;;		None
  1620 ;; Auto vars:     Size  Location     Type
  1621 ;;  tempF           1   60[COMRAM] char 
  1622 ;;  tempC           1   59[COMRAM] char 
  1623 ;;  U               1   58[COMRAM] char 
  1624 ;; Return value:  Size  Location     Type
  1625 ;;		None               void
  1626 ;; Registers used:
  1627 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1628 ;; Tracked objects:
  1629 ;;		On entry : 0/0
  1630 ;;		On exit  : 0/0
  1631 ;;		Unchanged: 0/0
  1632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1633 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1634 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1635 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1636 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1637 ;;Total ram usage:        3 bytes
  1638 ;; Hardware stack levels required when called:   12
  1639 ;; This function calls:
  1640 ;;		_DS1621_Read_Temp
  1641 ;;		_DS3231_Read_Time
  1642 ;;		_DS3231_Setup_Time
  1643 ;;		_Do_Init
  1644 ;;		___awdiv
  1645 ;;		___wmul
  1646 ;;		_printf
  1647 ;; This function is called by:
  1648 ;;		Startup code after reset
  1649 ;; This function uses a non-reentrant model
  1650 ;;
  1651                           
  1652                           	psect	text0
  1653  000A22                     __ptext0:
  1654                           	opt stack 0
  1655  000A22                     _main:
  1656                           	opt stack 19
  1657                           
  1658                           ;Lab10p2.c: 211: Do_Init();
  1659                           
  1660                           ;incstack = 0
  1661  000A22  ECA4  F008         	call	_Do_Init	;wreg free
  1662                           
  1663                           ;Lab10p2.c: 213: DS3231_Setup_Time();
  1664  000A26  EC03  F007         	call	_DS3231_Setup_Time	;wreg free
  1665  000A2A  D000               	goto	l4621
  1666  000A2C                     l4621:
  1667                           
  1668                           ;Lab10p2.c: 215: {
  1669                           ;Lab10p2.c: 217: DS3231_Read_Time();
  1670  000A2C  EC36  F007         	call	_DS3231_Read_Time	;wreg free
  1671                           
  1672                           ;Lab10p2.c: 218: if(tempSecond != second)
  1673  000A30  5060               	movf	_second,w,c
  1674  000A32  186D               	xorwf	_tempSecond,w,c
  1675  000A34  B4D8               	btfsc	status,2,c
  1676  000A36  D7FA               	goto	l4621
  1677                           
  1678                           ;Lab10p2.c: 219: {
  1679                           ;Lab10p2.c: 220: tempSecond = second;
  1680  000A38  C060  F06D         	movff	_second,_tempSecond
  1681                           
  1682                           ;Lab10p2.c: 221: signed char tempC = DS1621_Read_Temp();
  1683  000A3C  EC23  F009         	call	_DS1621_Read_Temp	;wreg free
  1684  000A40  5014               	movf	?_DS1621_Read_Temp,w,c
  1685  000A42  6E3C               	movwf	main@tempC,c
  1686                           
  1687                           ;Lab10p2.c: 222: signed char tempF = (tempC * 9 / 5) + 32;
  1688  000A44  503C               	movf	main@tempC,w,c
  1689  000A46  6E11               	movwf	___wmul@multiplier,c
  1690  000A48  6A12               	clrf	___wmul@multiplier+1,c
  1691  000A4A  BE11               	btfsc	___wmul@multiplier,7,c
  1692  000A4C  0612               	decf	___wmul@multiplier+1,f,c
  1693  000A4E  0E00               	movlw	0
  1694  000A50  6E14               	movwf	___wmul@multiplicand+1,c
  1695  000A52  0E09               	movlw	9
  1696  000A54  6E13               	movwf	___wmul@multiplicand,c
  1697  000A56  EC9F  F009         	call	___wmul	;wreg free
  1698  000A5A  C011  F017         	movff	?___wmul,___awdiv@dividend
  1699  000A5E  C012  F018         	movff	?___wmul+1,___awdiv@dividend+1
  1700  000A62  0E00               	movlw	0
  1701  000A64  6E1A               	movwf	___awdiv@divisor+1,c
  1702  000A66  0E05               	movlw	5
  1703  000A68  6E19               	movwf	___awdiv@divisor,c
  1704  000A6A  ECC1  F005         	call	___awdiv	;wreg free
  1705  000A6E  5017               	movf	?___awdiv,w,c
  1706  000A70  0F20               	addlw	32
  1707  000A72  6E3D               	movwf	main@tempF,c
  1708                           
  1709                           ;Lab10p2.c: 223: printf ("%02x:%02x:%02x %02x/%02x/%02x",hour,minute,second,month,day,ye
      +                          ar);
  1710  000A74  0EB3               	movlw	low STR_1
  1711  000A76  6E1D               	movwf	printf@f,c
  1712  000A78  0EFF               	movlw	high STR_1
  1713  000A7A  6E1E               	movwf	printf@f+1,c
  1714  000A7C  C05A  F01F         	movff	_hour,?_printf+2
  1715  000A80  6A20               	clrf	?_printf+3,c
  1716  000A82  C05C  F021         	movff	_minute,?_printf+4
  1717  000A86  6A22               	clrf	?_printf+5,c
  1718  000A88  C060  F023         	movff	_second,?_printf+6
  1719  000A8C  6A24               	clrf	?_printf+7,c
  1720  000A8E  C05D  F025         	movff	_month,?_printf+8
  1721  000A92  6A26               	clrf	?_printf+9,c
  1722  000A94  C057  F027         	movff	_day,?_printf+10
  1723  000A98  6A28               	clrf	?_printf+11,c
  1724  000A9A  C06C  F029         	movff	_year,?_printf+12
  1725  000A9E  6A2A               	clrf	?_printf+13,c
  1726  000AA0  EC0E  F000         	call	_printf	;wreg free
  1727                           
  1728                           ;Lab10p2.c: 224: printf (" Temperature = %d degreesC = %d degreesF\r\n", tempC, tempF);
  1729  000AA4  0E88               	movlw	low STR_2
  1730  000AA6  6E1D               	movwf	printf@f,c
  1731  000AA8  0EFF               	movlw	high STR_2
  1732  000AAA  6E1E               	movwf	printf@f+1,c
  1733  000AAC  503C               	movf	main@tempC,w,c
  1734  000AAE  6E1F               	movwf	?_printf+2,c
  1735  000AB0  6A20               	clrf	?_printf+3,c
  1736  000AB2  BE1F               	btfsc	?_printf+2,7,c
  1737  000AB4  0620               	decf	?_printf+3,f,c
  1738  000AB6  503D               	movf	main@tempF,w,c
  1739  000AB8  6E21               	movwf	?_printf+4,c
  1740  000ABA  6A22               	clrf	?_printf+5,c
  1741  000ABC  BE21               	btfsc	?_printf+4,7,c
  1742  000ABE  0622               	decf	?_printf+5,f,c
  1743  000AC0  EC0E  F000         	call	_printf	;wreg free
  1744                           
  1745                           ;Lab10p2.c: 225: signed char U = (int)(tempF/10);
  1746  000AC4  503D               	movf	main@tempF,w,c
  1747  000AC6  6E17               	movwf	___awdiv@dividend,c
  1748  000AC8  6A18               	clrf	___awdiv@dividend+1,c
  1749  000ACA  BE17               	btfsc	___awdiv@dividend,7,c
  1750  000ACC  0618               	decf	___awdiv@dividend+1,f,c
  1751  000ACE  0E00               	movlw	0
  1752  000AD0  6E1A               	movwf	___awdiv@divisor+1,c
  1753  000AD2  0E0A               	movlw	10
  1754  000AD4  6E19               	movwf	___awdiv@divisor,c
  1755  000AD6  ECC1  F005         	call	___awdiv	;wreg free
  1756  000ADA  5017               	movf	?___awdiv,w,c
  1757  000ADC  6E3B               	movwf	main@U,c
  1758  000ADE  D7A6               	goto	l4621
  1759  000AE0  EF0C  F000         	goto	start
  1760  000AE4                     __end_of_main:
  1761                           	opt stack 0
  1762                           tblptru	equ	0xFF8
  1763                           tblptrh	equ	0xFF7
  1764                           tblptrl	equ	0xFF6
  1765                           tablat	equ	0xFF5
  1766                           postinc0	equ	0xFEE
  1767                           wreg	equ	0xFE8
  1768                           postdec1	equ	0xFE5
  1769                           fsr1l	equ	0xFE1
  1770                           status	equ	0xFD8
  1771                           
  1772 ;; *************** function _printf *****************
  1773 ;; Defined at:
  1774 ;;		line 464 in file "E:\XC8\sources\common\doprnt.c"
  1775 ;; Parameters:    Size  Location     Type
  1776 ;;  f               2   28[COMRAM] PTR const unsigned char 
  1777 ;;		 -> STR_2(43), STR_1(30), 
  1778 ;; Auto vars:     Size  Location     Type
  1779 ;;  idx             1   46[COMRAM] unsigned char 
  1780 ;;  tmpval          4    0        struct .
  1781 ;;  cp              3    0        PTR const unsigned char 
  1782 ;;  width           2   53[COMRAM] int 
  1783 ;;  val             2   50[COMRAM] unsigned int 
  1784 ;;  ap              2   47[COMRAM] PTR void [1]
  1785 ;;		 -> ?_printf(2), 
  1786 ;;  len             2    0        unsigned int 
  1787 ;;  c               1   55[COMRAM] char 
  1788 ;;  flag            1   52[COMRAM] unsigned char 
  1789 ;;  prec            1   49[COMRAM] char 
  1790 ;; Return value:  Size  Location     Type
  1791 ;;                  2   28[COMRAM] int 
  1792 ;; Registers used:
  1793 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1794 ;; Tracked objects:
  1795 ;;		On entry : 0/0
  1796 ;;		On exit  : 0/0
  1797 ;;		Unchanged: 0/0
  1798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1799 ;;      Params:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1800 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1801 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1802 ;;      Totals:        28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1803 ;;Total ram usage:       28 bytes
  1804 ;; Hardware stack levels used:    1
  1805 ;; Hardware stack levels required when called:    4
  1806 ;; This function calls:
  1807 ;;		___lwdiv
  1808 ;;		___lwmod
  1809 ;;		___wmul
  1810 ;;		_isdigit
  1811 ;;		_putch
  1812 ;; This function is called by:
  1813 ;;		_main
  1814 ;; This function uses a non-reentrant model
  1815 ;;
  1816                           
  1817                           	psect	text1
  1818  00001C                     __ptext1:
  1819                           	opt stack 0
  1820  00001C                     _printf:
  1821                           	opt stack 26
  1822                           
  1823                           ;doprnt.c: 466: va_list ap;
  1824                           ;doprnt.c: 499: signed char c;
  1825                           ;doprnt.c: 501: int width;
  1826                           ;doprnt.c: 506: signed char prec;
  1827                           ;doprnt.c: 508: unsigned char flag;
  1828                           ;doprnt.c: 523: union {
  1829                           ;doprnt.c: 524: unsigned long vd;
  1830                           ;doprnt.c: 525: double integ;
  1831                           ;doprnt.c: 526: } tmpval;
  1832                           ;doprnt.c: 528: unsigned int val;
  1833                           ;doprnt.c: 529: unsigned len;
  1834                           ;doprnt.c: 530: const char * cp;
  1835                           ;doprnt.c: 533: *ap = __va_start();
  1836                           
  1837                           ;incstack = 0
  1838  00001C  0E1F               	movlw	low (?_printf+2)
  1839  00001E  6E30               	movwf	printf@ap,c
  1840  000020  0E00               	movlw	high (?_printf+2)
  1841  000022  6E31               	movwf	printf@ap+1,c
  1842                           
  1843                           ;doprnt.c: 536: while(c = *f++) {
  1844  000024  D199               	goto	l4327
  1845  000026                     l4201:
  1846                           
  1847                           ;doprnt.c: 538: if(c != '%')
  1848  000026  0E25               	movlw	37
  1849  000028  1838               	xorwf	printf@c,w,c
  1850  00002A  B4D8               	btfsc	status,2,c
  1851  00002C  D004               	goto	l4205
  1852                           
  1853                           ;doprnt.c: 540: {
  1854                           ;doprnt.c: 541: (putch(c) );
  1855  00002E  5038               	movf	printf@c,w,c
  1856  000030  EC51  F00A         	call	_putch
  1857                           
  1858                           ;doprnt.c: 542: continue;
  1859  000034  D191               	goto	l4327
  1860  000036                     l4205:
  1861                           
  1862                           ;doprnt.c: 543: }
  1863                           ;doprnt.c: 546: width = 0;
  1864  000036  0E00               	movlw	0
  1865  000038  6E37               	movwf	printf@width+1,c
  1866  00003A  0E00               	movlw	0
  1867  00003C  6E36               	movwf	printf@width,c
  1868                           
  1869                           ;doprnt.c: 548: flag = 0;
  1870  00003E  0E00               	movlw	0
  1871  000040  6E35               	movwf	printf@flag,c
  1872                           
  1873                           ;doprnt.c: 551: switch(*f) {
  1874                           
  1875                           ;doprnt.c: 550: for(;;) {
  1876  000042  D005               	goto	l4211
  1877  000044                     l4207:
  1878                           
  1879                           ;doprnt.c: 580: flag |= 0x04;
  1880  000044  8435               	bsf	printf@flag,2,c
  1881                           
  1882                           ;doprnt.c: 581: f++;
  1883  000046  4A1D               	infsnz	printf@f,f,c
  1884  000048  2A1E               	incf	printf@f+1,f,c
  1885                           
  1886                           ;doprnt.c: 582: continue;
  1887  00004A  D001               	goto	l4211
  1888                           
  1889                           ;doprnt.c: 584: }
  1890  00004C  D00B               	goto	l4213
  1891  00004E                     l4211:
  1892  00004E  C01D  FFF6         	movff	printf@f,tblptrl
  1893  000052  C01E  FFF7         	movff	printf@f+1,tblptrh
  1894  000056                     	if	0	;tblptru may be non-zero
  1895  000056                     	endif
  1896  000056                     	if	0	;tblptru may be non-zero
  1897  000056                     	endif
  1898  000056  0008               	tblrd		*
  1899  000058  50F5               	movf	tablat,w,c
  1900                           
  1901                           ; Switch size 1, requested type "space"
  1902                           ; Number of cases is 1, Range of values is 48 to 48
  1903                           ; switch strategies available:
  1904                           ; Name         Instructions Cycles
  1905                           ; simple_byte            4     3 (average)
  1906                           ;	Chosen strategy is simple_byte
  1907  00005A  0A30               	xorlw	48	; case 48
  1908  00005C  B4D8               	btfsc	status,2,c
  1909  00005E  D7F2               	goto	l4207
  1910                           
  1911                           ;doprnt.c: 585: break;
  1912  000060  D001               	goto	l4213
  1913                           
  1914                           ;doprnt.c: 586: }
  1915  000062  D7F5               	goto	l4211
  1916  000064                     l4213:
  1917                           
  1918                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1919  000064  C01D  FFF6         	movff	printf@f,tblptrl
  1920  000068  C01E  FFF7         	movff	printf@f+1,tblptrh
  1921  00006C                     	if	0	;tblptru may be non-zero
  1922  00006C                     	endif
  1923  00006C                     	if	0	;tblptru may be non-zero
  1924  00006C                     	endif
  1925  00006C  0008               	tblrd		*
  1926  00006E  50F5               	movf	tablat,w,c
  1927  000070  ECB3  F009         	call	_isdigit
  1928  000074  A0D8               	btfss	status,0,c
  1929  000076  D03B               	goto	l4229
  1930                           
  1931                           ;doprnt.c: 598: width = 0;
  1932  000078  0E00               	movlw	0
  1933  00007A  6E37               	movwf	printf@width+1,c
  1934  00007C  0E00               	movlw	0
  1935  00007E  6E36               	movwf	printf@width,c
  1936  000080  D000               	goto	l4217
  1937  000082                     l4217:
  1938                           
  1939                           ;doprnt.c: 600: width *= 10;
  1940  000082  C036  F011         	movff	printf@width,___wmul@multiplier
  1941  000086  C037  F012         	movff	printf@width+1,___wmul@multiplier+1
  1942  00008A  0E00               	movlw	0
  1943  00008C  6E14               	movwf	___wmul@multiplicand+1,c
  1944  00008E  0E0A               	movlw	10
  1945  000090  6E13               	movwf	___wmul@multiplicand,c
  1946  000092  EC9F  F009         	call	___wmul	;wreg free
  1947  000096  C011  F036         	movff	?___wmul,printf@width
  1948  00009A  C012  F037         	movff	?___wmul+1,printf@width+1
  1949                           
  1950                           ;doprnt.c: 601: width += *f++ - '0';
  1951  00009E  0ED0               	movlw	208
  1952  0000A0  6E2B               	movwf	??_printf& (0+255),c
  1953  0000A2  0EFF               	movlw	255
  1954  0000A4  6E2C               	movwf	(??_printf+1)& (0+255),c
  1955  0000A6  C01D  FFF6         	movff	printf@f,tblptrl
  1956  0000AA  C01E  FFF7         	movff	printf@f+1,tblptrh
  1957  0000AE                     	if	0	;tblptru may be non-zero
  1958  0000AE                     	endif
  1959  0000AE                     	if	0	;tblptru may be non-zero
  1960  0000AE                     	endif
  1961  0000AE  0008               	tblrd		*
  1962  0000B0  50F5               	movf	tablat,w,c
  1963  0000B2  6E2D               	movwf	(??_printf+2)& (0+255),c
  1964  0000B4  6A2E               	clrf	(??_printf+3)& (0+255),c
  1965  0000B6  502B               	movf	??_printf,w,c
  1966  0000B8  262D               	addwf	??_printf+2,f,c
  1967  0000BA  502C               	movf	??_printf+1,w,c
  1968  0000BC  222E               	addwfc	??_printf+3,f,c
  1969  0000BE  502D               	movf	??_printf+2,w,c
  1970  0000C0  2636               	addwf	printf@width,f,c
  1971  0000C2  502E               	movf	??_printf+3,w,c
  1972  0000C4  2237               	addwfc	printf@width+1,f,c
  1973  0000C6  4A1D               	infsnz	printf@f,f,c
  1974  0000C8  2A1E               	incf	printf@f+1,f,c
  1975                           
  1976                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1977  0000CA  C01D  FFF6         	movff	printf@f,tblptrl
  1978  0000CE  C01E  FFF7         	movff	printf@f+1,tblptrh
  1979  0000D2                     	if	0	;tblptru may be non-zero
  1980  0000D2                     	endif
  1981  0000D2                     	if	0	;tblptru may be non-zero
  1982  0000D2                     	endif
  1983  0000D2  0008               	tblrd		*
  1984  0000D4  50F5               	movf	tablat,w,c
  1985  0000D6  ECB3  F009         	call	_isdigit
  1986  0000DA  A0D8               	btfss	status,0,c
  1987  0000DC  D008               	goto	l4229
  1988  0000DE  D7D1               	goto	l4217
  1989                           
  1990                           ;doprnt.c: 608: }
  1991                           ;doprnt.c: 635: switch(c = *f++) {
  1992  0000E0  D006               	goto	l4229
  1993                           
  1994                           ;doprnt.c: 638: goto alldone;
  1995                           
  1996                           ;doprnt.c: 637: case 0:
  1997  0000E2  D148               	goto	l627
  1998                           
  1999                           ;doprnt.c: 698: case 'i':
  2000                           ;doprnt.c: 699: break;
  2001                           
  2002                           ;doprnt.c: 697: case 'd':
  2003  0000E4  D01B               	goto	l590
  2004  0000E6                     l4225:
  2005                           
  2006                           ;doprnt.c: 721: flag |= 0x80;
  2007  0000E6  8E35               	bsf	printf@flag,7,c
  2008                           
  2009                           ;doprnt.c: 723: break;
  2010  0000E8  D019               	goto	l590
  2011                           
  2012                           ;doprnt.c: 813: continue;
  2013                           
  2014                           ;doprnt.c: 802: default:
  2015  0000EA  D136               	goto	l4327
  2016                           
  2017                           ;doprnt.c: 822: }
  2018  0000EC  D017               	goto	l590
  2019  0000EE                     l4229:
  2020  0000EE  C01D  FFF6         	movff	printf@f,tblptrl
  2021  0000F2  C01E  FFF7         	movff	printf@f+1,tblptrh
  2022  0000F6  4A1D               	infsnz	printf@f,f,c
  2023  0000F8  2A1E               	incf	printf@f+1,f,c
  2024  0000FA                     	if	0	;tblptru may be non-zero
  2025  0000FA                     	endif
  2026  0000FA                     	if	0	;tblptru may be non-zero
  2027  0000FA                     	endif
  2028  0000FA  0008               	tblrd		*
  2029  0000FC  CFF5 F038          	movff	tablat,printf@c
  2030  000100  5038               	movf	printf@c,w,c
  2031                           
  2032                           ; Switch size 1, requested type "space"
  2033                           ; Number of cases is 4, Range of values is 0 to 120
  2034                           ; switch strategies available:
  2035                           ; Name         Instructions Cycles
  2036                           ; simple_byte           13     7 (average)
  2037                           ;	Chosen strategy is simple_byte
  2038  000102  0A00               	xorlw	0	; case 0
  2039  000104  B4D8               	btfsc	status,2,c
  2040  000106  D136               	goto	l627
  2041  000108  0A64               	xorlw	100	; case 100
  2042  00010A  B4D8               	btfsc	status,2,c
  2043  00010C  D007               	goto	l590
  2044  00010E  0A0D               	xorlw	13	; case 105
  2045  000110  B4D8               	btfsc	status,2,c
  2046  000112  D004               	goto	l590
  2047  000114  0A11               	xorlw	17	; case 120
  2048  000116  B4D8               	btfsc	status,2,c
  2049  000118  D7E6               	goto	l4225
  2050  00011A  D11E               	goto	l4327
  2051  00011C                     l590:
  2052                           
  2053                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  2054  00011C  BE35               	btfsc	printf@flag,7,c
  2055  00011E  D015               	goto	l4241
  2056                           
  2057                           ;doprnt.c: 1253: {
  2058                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2059  000120  C030  FFD9         	movff	printf@ap,fsr2l
  2060  000124  C031  FFDA         	movff	printf@ap+1,fsr2h
  2061  000128  CFDE F033          	movff	postinc2,printf@val
  2062  00012C  CFDD F034          	movff	postdec2,printf@val+1
  2063  000130  0E02               	movlw	2
  2064  000132  2630               	addwf	printf@ap,f,c
  2065  000134  0E00               	movlw	0
  2066  000136  2231               	addwfc	printf@ap+1,f,c
  2067                           
  2068                           ;doprnt.c: 1261: if((int)val < 0) {
  2069  000138  AE34               	btfss	printf@val+1,7,c
  2070  00013A  D04E               	goto	l4275
  2071                           
  2072                           ;doprnt.c: 1262: flag |= 0x03;
  2073  00013C  0E03               	movlw	3
  2074  00013E  1235               	iorwf	printf@flag,f,c
  2075                           
  2076                           ;doprnt.c: 1263: val = -val;
  2077  000140  6C33               	negf	printf@val,c
  2078  000142  1E34               	comf	printf@val+1,f,c
  2079  000144  B0D8               	btfsc	status,0,c
  2080  000146  2A34               	incf	printf@val+1,f,c
  2081                           
  2082                           ;doprnt.c: 1264: }
  2083                           ;doprnt.c: 1266: }
  2084  000148  D047               	goto	l4275
  2085  00014A                     l4241:
  2086                           
  2087                           ;doprnt.c: 1268: else
  2088                           ;doprnt.c: 1273: {
  2089                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2090  00014A  C030  FFD9         	movff	printf@ap,fsr2l
  2091  00014E  C031  FFDA         	movff	printf@ap+1,fsr2h
  2092  000152  CFDE F033          	movff	postinc2,printf@val
  2093  000156  CFDD F034          	movff	postdec2,printf@val+1
  2094  00015A  0E02               	movlw	2
  2095  00015C  2630               	addwf	printf@ap,f,c
  2096  00015E  0E00               	movlw	0
  2097  000160  2231               	addwfc	printf@ap+1,f,c
  2098                           
  2099                           ;doprnt.c: 1287: }
  2100                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  2101  000162  D03A               	goto	l4275
  2102  000164                     l4245:
  2103                           
  2104                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2105  000164  0E01               	movlw	1
  2106  000166  6E38               	movwf	printf@c,c
  2107  000168                     l4247:
  2108  000168  0E05               	movlw	5
  2109  00016A  1838               	xorwf	printf@c,w,c
  2110  00016C  B4D8               	btfsc	status,2,c
  2111  00016E  D03D               	goto	l4277
  2112  000170  D001               	goto	l4251
  2113  000172  D03B               	goto	l4277
  2114  000174                     l4251:
  2115                           
  2116                           ;doprnt.c: 1306: if(val < dpowers[c])
  2117  000174  5038               	movf	printf@c,w,c
  2118  000176  0D02               	mullw	2
  2119  000178  0E76               	movlw	low _dpowers
  2120  00017A  24F3               	addwf	prodl,w,c
  2121  00017C  6EF6               	movwf	tblptrl,c
  2122  00017E  0EFF               	movlw	high _dpowers
  2123  000180  20F4               	addwfc	prodh,w,c
  2124  000182  6EF7               	movwf	tblptrh,c
  2125  000184                     	if	0	;There are less than 3 active tblptr bytes
  2126  000184                     	endif
  2127  000184  0009               	tblrd		*+
  2128  000186  50F5               	movf	tablat,w,c
  2129  000188  5C33               	subwf	printf@val,w,c
  2130  00018A  0009               	tblrd		*+
  2131  00018C  50F5               	movf	tablat,w,c
  2132  00018E  5834               	subwfb	printf@val+1,w,c
  2133  000190  A0D8               	btfss	status,0,c
  2134  000192  D02B               	goto	l4277
  2135  000194  D001               	goto	l4255
  2136                           
  2137                           ;doprnt.c: 1307: break;
  2138  000196  D029               	goto	l4277
  2139  000198                     l4255:
  2140  000198  2A38               	incf	printf@c,f,c
  2141  00019A  D7E6               	goto	l4247
  2142                           
  2143                           ;doprnt.c: 1309: break;
  2144  00019C  D026               	goto	l4277
  2145  00019E                     l4259:
  2146                           
  2147                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2148  00019E  0E01               	movlw	1
  2149  0001A0  6E38               	movwf	printf@c,c
  2150  0001A2                     l4261:
  2151  0001A2  0E04               	movlw	4
  2152  0001A4  1838               	xorwf	printf@c,w,c
  2153  0001A6  B4D8               	btfsc	status,2,c
  2154  0001A8  D020               	goto	l4277
  2155  0001AA  D001               	goto	l4265
  2156  0001AC  D01E               	goto	l4277
  2157  0001AE                     l4265:
  2158                           
  2159                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2160  0001AE  5038               	movf	printf@c,w,c
  2161  0001B0  0D02               	mullw	2
  2162  0001B2  0E80               	movlw	low _hexpowers
  2163  0001B4  24F3               	addwf	prodl,w,c
  2164  0001B6  6EF6               	movwf	tblptrl,c
  2165  0001B8  0EFF               	movlw	high _hexpowers
  2166  0001BA  20F4               	addwfc	prodh,w,c
  2167  0001BC  6EF7               	movwf	tblptrh,c
  2168  0001BE                     	if	0	;There are less than 3 active tblptr bytes
  2169  0001BE                     	endif
  2170  0001BE  0009               	tblrd		*+
  2171  0001C0  50F5               	movf	tablat,w,c
  2172  0001C2  5C33               	subwf	printf@val,w,c
  2173  0001C4  0009               	tblrd		*+
  2174  0001C6  50F5               	movf	tablat,w,c
  2175  0001C8  5834               	subwfb	printf@val+1,w,c
  2176  0001CA  A0D8               	btfss	status,0,c
  2177  0001CC  D00E               	goto	l4277
  2178  0001CE  D001               	goto	l4269
  2179                           
  2180                           ;doprnt.c: 1318: break;
  2181  0001D0  D00C               	goto	l4277
  2182  0001D2                     l4269:
  2183  0001D2  2A38               	incf	printf@c,f,c
  2184  0001D4  D7E6               	goto	l4261
  2185                           
  2186                           ;doprnt.c: 1336: }
  2187                           
  2188                           ;doprnt.c: 1320: break;
  2189  0001D6  D009               	goto	l4277
  2190  0001D8                     l4275:
  2191  0001D8  5035               	movf	printf@flag,w,c
  2192  0001DA  0B80               	andlw	128
  2193                           
  2194                           ; Switch size 1, requested type "space"
  2195                           ; Number of cases is 2, Range of values is 0 to 128
  2196                           ; switch strategies available:
  2197                           ; Name         Instructions Cycles
  2198                           ; simple_byte            7     4 (average)
  2199                           ;	Chosen strategy is simple_byte
  2200  0001DC  0A00               	xorlw	0	; case 0
  2201  0001DE  B4D8               	btfsc	status,2,c
  2202  0001E0  D7C1               	goto	l4245
  2203  0001E2  0A80               	xorlw	128	; case 128
  2204  0001E4  B4D8               	btfsc	status,2,c
  2205  0001E6  D7DB               	goto	l4259
  2206  0001E8  D000               	goto	l4277
  2207  0001EA                     l4277:
  2208                           
  2209                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2210  0001EA  5036               	movf	printf@width,w,c
  2211  0001EC  1037               	iorwf	printf@width+1,w,c
  2212  0001EE  B4D8               	btfsc	status,2,c
  2213  0001F0  D00A               	goto	l4283
  2214  0001F2  C035  F02B         	movff	printf@flag,??_printf
  2215  0001F6  0E03               	movlw	3
  2216  0001F8  162B               	andwf	??_printf,f,c
  2217  0001FA  B4D8               	btfsc	status,2,c
  2218  0001FC  D004               	goto	l4283
  2219                           
  2220                           ;doprnt.c: 1346: width--;
  2221  0001FE  0636               	decf	printf@width,f,c
  2222  000200  A0D8               	btfss	status,0,c
  2223  000202  0637               	decf	printf@width+1,f,c
  2224  000204  D000               	goto	l4283
  2225  000206                     l4283:
  2226                           
  2227                           ;doprnt.c: 1381: if(width > c)
  2228  000206  0E80               	movlw	128
  2229  000208  BE38               	btfsc	printf@c,7,c
  2230  00020A  0E7F               	movlw	127
  2231  00020C  6E2B               	movwf	??_printf& (0+255),c
  2232  00020E  5036               	movf	printf@width,w,c
  2233  000210  5C38               	subwf	printf@c,w,c
  2234  000212  5037               	movf	printf@width+1,w,c
  2235  000214  0A80               	xorlw	128
  2236  000216  582B               	subwfb	??_printf& (0+255),w,c
  2237  000218  B0D8               	btfsc	status,0,c
  2238  00021A  D007               	goto	l4287
  2239                           
  2240                           ;doprnt.c: 1382: width -= c;
  2241  00021C  5038               	movf	printf@c,w,c
  2242  00021E  5E36               	subwf	printf@width,f,c
  2243  000220  0E00               	movlw	0
  2244  000222  BE38               	btfsc	printf@c,7,c
  2245  000224  0EFF               	movlw	255
  2246  000226  5A37               	subwfb	printf@width+1,f,c
  2247  000228  D005               	goto	l4289
  2248  00022A                     l4287:
  2249                           
  2250                           ;doprnt.c: 1383: else
  2251                           ;doprnt.c: 1384: width = 0;
  2252  00022A  0E00               	movlw	0
  2253  00022C  6E37               	movwf	printf@width+1,c
  2254  00022E  0E00               	movlw	0
  2255  000230  6E36               	movwf	printf@width,c
  2256  000232  D000               	goto	l4289
  2257  000234                     l4289:
  2258                           
  2259                           ;doprnt.c: 1387: if(flag & 0x04) {
  2260  000234  A435               	btfss	printf@flag,2,c
  2261  000236  D01A               	goto	l4301
  2262                           
  2263                           ;doprnt.c: 1392: if(flag & 0x03)
  2264  000238  C035  F02B         	movff	printf@flag,??_printf
  2265  00023C  0E03               	movlw	3
  2266  00023E  162B               	andwf	??_printf,f,c
  2267  000240  B4D8               	btfsc	status,2,c
  2268  000242  D004               	goto	l4295
  2269                           
  2270                           ;doprnt.c: 1393: (putch('-') );
  2271  000244  0E2D               	movlw	45
  2272  000246  EC51  F00A         	call	_putch
  2273  00024A  D000               	goto	l4295
  2274  00024C                     l4295:
  2275                           
  2276                           ;doprnt.c: 1415: if(width)
  2277  00024C  5036               	movf	printf@width,w,c
  2278  00024E  1037               	iorwf	printf@width+1,w,c
  2279  000250  B4D8               	btfsc	status,2,c
  2280  000252  D026               	goto	l4311
  2281  000254                     l4297:
  2282                           
  2283                           ;doprnt.c: 1417: (putch('0') );
  2284  000254  0E30               	movlw	48
  2285  000256  EC51  F00A         	call	_putch
  2286                           
  2287                           ;doprnt.c: 1418: while(--width);
  2288  00025A  0636               	decf	printf@width,f,c
  2289  00025C  A0D8               	btfss	status,0,c
  2290  00025E  0637               	decf	printf@width+1,f,c
  2291  000260  5036               	movf	printf@width,w,c
  2292  000262  1037               	iorwf	printf@width+1,w,c
  2293  000264  B4D8               	btfsc	status,2,c
  2294  000266  D01C               	goto	l4311
  2295  000268  D7F5               	goto	l4297
  2296                           
  2297                           ;doprnt.c: 1420: } else
  2298  00026A  D01A               	goto	l4311
  2299  00026C                     l4301:
  2300                           
  2301                           ;doprnt.c: 1422: {
  2302                           ;doprnt.c: 1424: if(width
  2303                           ;doprnt.c: 1428: )
  2304  00026C  5036               	movf	printf@width,w,c
  2305  00026E  1037               	iorwf	printf@width+1,w,c
  2306  000270  B4D8               	btfsc	status,2,c
  2307  000272  D00C               	goto	l4307
  2308  000274                     l4303:
  2309                           
  2310                           ;doprnt.c: 1430: (putch(' ') );
  2311  000274  0E20               	movlw	32
  2312  000276  EC51  F00A         	call	_putch
  2313                           
  2314                           ;doprnt.c: 1431: while(--width);
  2315  00027A  0636               	decf	printf@width,f,c
  2316  00027C  A0D8               	btfss	status,0,c
  2317  00027E  0637               	decf	printf@width+1,f,c
  2318  000280  5036               	movf	printf@width,w,c
  2319  000282  1037               	iorwf	printf@width+1,w,c
  2320  000284  B4D8               	btfsc	status,2,c
  2321  000286  D002               	goto	l4307
  2322  000288  D7F5               	goto	l4303
  2323  00028A  D000               	goto	l4307
  2324  00028C                     l4307:
  2325                           
  2326                           ;doprnt.c: 1438: if(flag & 0x03)
  2327  00028C  C035  F02B         	movff	printf@flag,??_printf
  2328  000290  0E03               	movlw	3
  2329  000292  162B               	andwf	??_printf,f,c
  2330  000294  B4D8               	btfsc	status,2,c
  2331  000296  D004               	goto	l4311
  2332                           
  2333                           ;doprnt.c: 1439: (putch('-') );
  2334  000298  0E2D               	movlw	45
  2335  00029A  EC51  F00A         	call	_putch
  2336  00029E  D000               	goto	l4311
  2337  0002A0                     l4311:
  2338                           
  2339                           ;doprnt.c: 1469: }
  2340                           ;doprnt.c: 1472: prec = c;
  2341  0002A0  C038  F032         	movff	printf@c,printf@prec
  2342                           
  2343                           ;doprnt.c: 1474: while(prec--) {
  2344  0002A4  D053               	goto	l4325
  2345                           
  2346                           ;doprnt.c: 1476: switch((unsigned char)(flag & 0x80))
  2347  0002A6  D045               	goto	l4321
  2348  0002A8                     l4313:
  2349                           
  2350                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2351  0002A8  5032               	movf	printf@prec,w,c
  2352  0002AA  0D02               	mullw	2
  2353  0002AC  0E76               	movlw	low _dpowers
  2354  0002AE  24F3               	addwf	prodl,w,c
  2355  0002B0  6EF6               	movwf	tblptrl,c
  2356  0002B2  0EFF               	movlw	high _dpowers
  2357  0002B4  20F4               	addwfc	prodh,w,c
  2358  0002B6  6EF7               	movwf	tblptrh,c
  2359  0002B8                     	if	0	;There are less than 3 active tblptr bytes
  2360  0002B8                     	endif
  2361  0002B8  0009               	tblrd		*+
  2362  0002BA  CFF5 F013          	movff	tablat,___lwdiv@divisor
  2363  0002BE  000A               	tblrd		*-
  2364  0002C0  CFF5 F014          	movff	tablat,___lwdiv@divisor+1
  2365  0002C4  C033  F011         	movff	printf@val,___lwdiv@dividend
  2366  0002C8  C034  F012         	movff	printf@val+1,___lwdiv@dividend+1
  2367  0002CC  EC68  F007         	call	___lwdiv	;wreg free
  2368  0002D0  C011  F018         	movff	?___lwdiv,___lwmod@dividend
  2369  0002D4  C012  F019         	movff	?___lwdiv+1,___lwmod@dividend+1
  2370  0002D8  0E00               	movlw	0
  2371  0002DA  6E1B               	movwf	___lwmod@divisor+1,c
  2372  0002DC  0E0A               	movlw	10
  2373  0002DE  6E1A               	movwf	___lwmod@divisor,c
  2374  0002E0  EC10  F008         	call	___lwmod	;wreg free
  2375  0002E4  5018               	movf	?___lwmod,w,c
  2376  0002E6  0F30               	addlw	48
  2377  0002E8  6E38               	movwf	printf@c,c
  2378                           
  2379                           ;doprnt.c: 1491: break;
  2380  0002EA  D02C               	goto	l4323
  2381  0002EC                     l4315:
  2382                           
  2383                           ;doprnt.c: 1499: {
  2384                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  2385  0002EC  C033  F011         	movff	printf@val,___lwdiv@dividend
  2386  0002F0  C034  F012         	movff	printf@val+1,___lwdiv@dividend+1
  2387  0002F4  5032               	movf	printf@prec,w,c
  2388  0002F6  0D02               	mullw	2
  2389  0002F8  0E80               	movlw	low _hexpowers
  2390  0002FA  24F3               	addwf	prodl,w,c
  2391  0002FC  6EF6               	movwf	tblptrl,c
  2392  0002FE  0EFF               	movlw	high _hexpowers
  2393  000300  20F4               	addwfc	prodh,w,c
  2394  000302  6EF7               	movwf	tblptrh,c
  2395  000304                     	if	0	;There are less than 3 active tblptr bytes
  2396  000304                     	endif
  2397  000304  0009               	tblrd		*+
  2398  000306  CFF5 F013          	movff	tablat,___lwdiv@divisor
  2399  00030A  000A               	tblrd		*-
  2400  00030C  CFF5 F014          	movff	tablat,___lwdiv@divisor+1
  2401  000310  EC68  F007         	call	___lwdiv	;wreg free
  2402  000314  5011               	movf	?___lwdiv,w,c
  2403  000316  0B0F               	andlw	15
  2404  000318  6E2F               	movwf	printf@idx,c
  2405                           
  2406                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  2407  00031A  502F               	movf	printf@idx,w,c
  2408  00031C  0D01               	mullw	1
  2409  00031E  0EE5               	movlw	low STR_5
  2410  000320  24F3               	addwf	prodl,w,c
  2411  000322  6EF6               	movwf	tblptrl,c
  2412  000324  0EFF               	movlw	high STR_5
  2413  000326  20F4               	addwfc	prodh,w,c
  2414  000328  6EF7               	movwf	tblptrh,c
  2415  00032A                     	if	0	;There are less than 3 active tblptr bytes
  2416  00032A                     	endif
  2417  00032A  0008               	tblrd		*
  2418  00032C  CFF5 F038          	movff	tablat,printf@c
  2419                           
  2420                           ;doprnt.c: 1523: }
  2421                           
  2422                           ;doprnt.c: 1508: }
  2423                           ;doprnt.c: 1510: break;
  2424  000330  D009               	goto	l4323
  2425  000332                     l4321:
  2426  000332  5035               	movf	printf@flag,w,c
  2427  000334  0B80               	andlw	128
  2428                           
  2429                           ; Switch size 1, requested type "space"
  2430                           ; Number of cases is 2, Range of values is 0 to 128
  2431                           ; switch strategies available:
  2432                           ; Name         Instructions Cycles
  2433                           ; simple_byte            7     4 (average)
  2434                           ;	Chosen strategy is simple_byte
  2435  000336  0A00               	xorlw	0	; case 0
  2436  000338  B4D8               	btfsc	status,2,c
  2437  00033A  D7B6               	goto	l4313
  2438  00033C  0A80               	xorlw	128	; case 128
  2439  00033E  B4D8               	btfsc	status,2,c
  2440  000340  D7D5               	goto	l4315
  2441  000342  D000               	goto	l4323
  2442  000344                     l4323:
  2443                           
  2444                           ;doprnt.c: 1524: (putch(c) );
  2445  000344  5038               	movf	printf@c,w,c
  2446  000346  EC51  F00A         	call	_putch
  2447  00034A  D000               	goto	l4325
  2448  00034C                     l4325:
  2449  00034C  0632               	decf	printf@prec,f,c
  2450  00034E  2832               	incf	printf@prec,w,c
  2451  000350  B4D8               	btfsc	status,2,c
  2452  000352  D002               	goto	l4327
  2453  000354  D7EE               	goto	l4321
  2454  000356  D000               	goto	l4327
  2455  000358                     l4327:
  2456  000358  C01D  FFF6         	movff	printf@f,tblptrl
  2457  00035C  C01E  FFF7         	movff	printf@f+1,tblptrh
  2458  000360  4A1D               	infsnz	printf@f,f,c
  2459  000362  2A1E               	incf	printf@f+1,f,c
  2460  000364                     	if	0	;tblptru may be non-zero
  2461  000364                     	endif
  2462  000364                     	if	0	;tblptru may be non-zero
  2463  000364                     	endif
  2464  000364  0008               	tblrd		*
  2465  000366  CFF5 F038          	movff	tablat,printf@c
  2466  00036A  5038               	movf	printf@c,w,c
  2467  00036C  B4D8               	btfsc	status,2,c
  2468  00036E  D002               	goto	l627
  2469  000370  D65A               	goto	l4201
  2470  000372  D000               	goto	l627
  2471  000374                     l627:
  2472  000374  0012               	return		;funcret
  2473  000376                     __end_of_printf:
  2474                           	opt stack 0
  2475                           tblptru	equ	0xFF8
  2476                           tblptrh	equ	0xFF7
  2477                           tblptrl	equ	0xFF6
  2478                           tablat	equ	0xFF5
  2479                           prodh	equ	0xFF4
  2480                           prodl	equ	0xFF3
  2481                           postinc0	equ	0xFEE
  2482                           wreg	equ	0xFE8
  2483                           postdec1	equ	0xFE5
  2484                           fsr1l	equ	0xFE1
  2485                           postinc2	equ	0xFDE
  2486                           postdec2	equ	0xFDD
  2487                           fsr2h	equ	0xFDA
  2488                           fsr2l	equ	0xFD9
  2489                           status	equ	0xFD8
  2490                           
  2491 ;; *************** function _putch *****************
  2492 ;; Defined at:
  2493 ;;		line 149 in file "Lab10p2.c"
  2494 ;; Parameters:    Size  Location     Type
  2495 ;;  c               1    wreg     unsigned char 
  2496 ;; Auto vars:     Size  Location     Type
  2497 ;;  c               1   16[COMRAM] unsigned char 
  2498 ;; Return value:  Size  Location     Type
  2499 ;;		None               void
  2500 ;; Registers used:
  2501 ;;		wreg
  2502 ;; Tracked objects:
  2503 ;;		On entry : 0/0
  2504 ;;		On exit  : 0/0
  2505 ;;		Unchanged: 0/0
  2506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2507 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2508 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2509 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2510 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2511 ;;Total ram usage:        1 bytes
  2512 ;; Hardware stack levels used:    1
  2513 ;; Hardware stack levels required when called:    3
  2514 ;; This function calls:
  2515 ;;		Nothing
  2516 ;; This function is called by:
  2517 ;;		_printf
  2518 ;; This function uses a non-reentrant model
  2519 ;;
  2520                           
  2521                           	psect	text2
  2522  0014A2                     __ptext2:
  2523                           	opt stack 0
  2524  0014A2                     _putch:
  2525                           	opt stack 26
  2526                           
  2527                           ;incstack = 0
  2528                           ;putch@c stored from wreg
  2529  0014A2  6E11               	movwf	putch@c,c
  2530                           
  2531                           ;Lab10p2.c: 151: while (!TRMT);
  2532  0014A4  D000               	goto	l518
  2533  0014A6                     l518:
  2534  0014A6  A2AC               	btfss	4012,1,c	;volatile
  2535  0014A8  D7FE               	goto	l518
  2536                           
  2537                           ;Lab10p2.c: 152: TXREG = c;
  2538  0014AA  C011  FFAD         	movff	putch@c,4013	;volatile
  2539  0014AE  0012               	return		;funcret
  2540  0014B0                     __end_of_putch:
  2541                           	opt stack 0
  2542                           tblptru	equ	0xFF8
  2543                           tblptrh	equ	0xFF7
  2544                           tblptrl	equ	0xFF6
  2545                           tablat	equ	0xFF5
  2546                           prodh	equ	0xFF4
  2547                           prodl	equ	0xFF3
  2548                           postinc0	equ	0xFEE
  2549                           wreg	equ	0xFE8
  2550                           postdec1	equ	0xFE5
  2551                           fsr1l	equ	0xFE1
  2552                           postinc2	equ	0xFDE
  2553                           postdec2	equ	0xFDD
  2554                           fsr2h	equ	0xFDA
  2555                           fsr2l	equ	0xFD9
  2556                           status	equ	0xFD8
  2557                           
  2558 ;; *************** function _isdigit *****************
  2559 ;; Defined at:
  2560 ;;		line 8 in file "E:\XC8\sources\common\isdigit.c"
  2561 ;; Parameters:    Size  Location     Type
  2562 ;;  c               1    wreg     unsigned char 
  2563 ;; Auto vars:     Size  Location     Type
  2564 ;;  c               1   18[COMRAM] unsigned char 
  2565 ;; Return value:  Size  Location     Type
  2566 ;;		None               void
  2567 ;; Registers used:
  2568 ;;		wreg, status,2, status,0
  2569 ;; Tracked objects:
  2570 ;;		On entry : 0/0
  2571 ;;		On exit  : 0/0
  2572 ;;		Unchanged: 0/0
  2573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2574 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2575 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2576 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2577 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2578 ;;Total ram usage:        3 bytes
  2579 ;; Hardware stack levels used:    1
  2580 ;; Hardware stack levels required when called:    3
  2581 ;; This function calls:
  2582 ;;		Nothing
  2583 ;; This function is called by:
  2584 ;;		_printf
  2585 ;; This function uses a non-reentrant model
  2586 ;;
  2587                           
  2588                           	psect	text3
  2589  001366                     __ptext3:
  2590                           	opt stack 0
  2591  001366                     _isdigit:
  2592                           	opt stack 26
  2593                           
  2594                           ;incstack = 0
  2595                           ;isdigit@c stored from wreg
  2596  001366  6E13               	movwf	isdigit@c,c
  2597  001368  0E00               	movlw	0
  2598  00136A  6E12               	movwf	_isdigit$2054,c
  2599  00136C  0E3A               	movlw	58
  2600  00136E  6013               	cpfslt	isdigit@c,c
  2601  001370  D006               	goto	l3129
  2602  001372  0E2F               	movlw	47
  2603  001374  6413               	cpfsgt	isdigit@c,c
  2604  001376  D003               	goto	l3129
  2605  001378  0E01               	movlw	1
  2606  00137A  6E12               	movwf	_isdigit$2054,c
  2607  00137C  D000               	goto	l3129
  2608  00137E                     l3129:
  2609  00137E  C012  F011         	movff	_isdigit$2054,??_isdigit
  2610  001382  3011               	rrcf	??_isdigit,w,c
  2611  001384  D000               	goto	l1094
  2612  001386                     l1094:
  2613  001386  0012               	return		;funcret
  2614  001388                     __end_of_isdigit:
  2615                           	opt stack 0
  2616                           tblptru	equ	0xFF8
  2617                           tblptrh	equ	0xFF7
  2618                           tblptrl	equ	0xFF6
  2619                           tablat	equ	0xFF5
  2620                           prodh	equ	0xFF4
  2621                           prodl	equ	0xFF3
  2622                           postinc0	equ	0xFEE
  2623                           wreg	equ	0xFE8
  2624                           postdec1	equ	0xFE5
  2625                           fsr1l	equ	0xFE1
  2626                           postinc2	equ	0xFDE
  2627                           postdec2	equ	0xFDD
  2628                           fsr2h	equ	0xFDA
  2629                           fsr2l	equ	0xFD9
  2630                           status	equ	0xFD8
  2631                           
  2632 ;; *************** function ___lwmod *****************
  2633 ;; Defined at:
  2634 ;;		line 8 in file "E:\XC8\sources\common\lwmod.c"
  2635 ;; Parameters:    Size  Location     Type
  2636 ;;  dividend        2   23[COMRAM] unsigned int 
  2637 ;;  divisor         2   25[COMRAM] unsigned int 
  2638 ;; Auto vars:     Size  Location     Type
  2639 ;;  counter         1   27[COMRAM] unsigned char 
  2640 ;; Return value:  Size  Location     Type
  2641 ;;                  2   23[COMRAM] unsigned int 
  2642 ;; Registers used:
  2643 ;;		wreg, status,2, status,0
  2644 ;; Tracked objects:
  2645 ;;		On entry : 0/0
  2646 ;;		On exit  : 0/0
  2647 ;;		Unchanged: 0/0
  2648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2649 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2650 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2651 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2652 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2653 ;;Total ram usage:        5 bytes
  2654 ;; Hardware stack levels used:    1
  2655 ;; Hardware stack levels required when called:    3
  2656 ;; This function calls:
  2657 ;;		Nothing
  2658 ;; This function is called by:
  2659 ;;		_printf
  2660 ;; This function uses a non-reentrant model
  2661 ;;
  2662                           
  2663                           	psect	text4
  2664  001020                     __ptext4:
  2665                           	opt stack 0
  2666  001020                     ___lwmod:
  2667                           	opt stack 26
  2668                           
  2669                           ;incstack = 0
  2670  001020  501A               	movf	___lwmod@divisor,w,c
  2671  001022  101B               	iorwf	___lwmod@divisor+1,w,c
  2672  001024  B4D8               	btfsc	status,2,c
  2673  001026  D01D               	goto	l1196
  2674  001028  0E01               	movlw	1
  2675  00102A  6E1C               	movwf	___lwmod@counter,c
  2676  00102C  D005               	goto	l3161
  2677  00102E                     l3159:
  2678  00102E  90D8               	bcf	status,0,c
  2679  001030  361A               	rlcf	___lwmod@divisor,f,c
  2680  001032  361B               	rlcf	___lwmod@divisor+1,f,c
  2681  001034  2A1C               	incf	___lwmod@counter,f,c
  2682  001036  D000               	goto	l3161
  2683  001038                     l3161:
  2684  001038  BE1B               	btfsc	___lwmod@divisor+1,7,c
  2685  00103A  D002               	goto	l3163
  2686  00103C  D7F8               	goto	l3159
  2687  00103E  D000               	goto	l3163
  2688  001040                     l3163:
  2689  001040  501A               	movf	___lwmod@divisor,w,c
  2690  001042  5C18               	subwf	___lwmod@dividend,w,c
  2691  001044  501B               	movf	___lwmod@divisor+1,w,c
  2692  001046  5819               	subwfb	___lwmod@dividend+1,w,c
  2693  001048  A0D8               	btfss	status,0,c
  2694  00104A  D005               	goto	l3167
  2695  00104C  501A               	movf	___lwmod@divisor,w,c
  2696  00104E  5E18               	subwf	___lwmod@dividend,f,c
  2697  001050  501B               	movf	___lwmod@divisor+1,w,c
  2698  001052  5A19               	subwfb	___lwmod@dividend+1,f,c
  2699  001054  D000               	goto	l3167
  2700  001056                     l3167:
  2701  001056  90D8               	bcf	status,0,c
  2702  001058  321B               	rrcf	___lwmod@divisor+1,f,c
  2703  00105A  321A               	rrcf	___lwmod@divisor,f,c
  2704  00105C  2E1C               	decfsz	___lwmod@counter,f,c
  2705  00105E  D7F0               	goto	l3163
  2706  001060  D000               	goto	l1196
  2707  001062                     l1196:
  2708  001062  C018  F018         	movff	___lwmod@dividend,?___lwmod
  2709  001066  C019  F019         	movff	___lwmod@dividend+1,?___lwmod+1
  2710  00106A  0012               	return		;funcret
  2711  00106C                     __end_of___lwmod:
  2712                           	opt stack 0
  2713                           tblptru	equ	0xFF8
  2714                           tblptrh	equ	0xFF7
  2715                           tblptrl	equ	0xFF6
  2716                           tablat	equ	0xFF5
  2717                           prodh	equ	0xFF4
  2718                           prodl	equ	0xFF3
  2719                           postinc0	equ	0xFEE
  2720                           wreg	equ	0xFE8
  2721                           postdec1	equ	0xFE5
  2722                           fsr1l	equ	0xFE1
  2723                           postinc2	equ	0xFDE
  2724                           postdec2	equ	0xFDD
  2725                           fsr2h	equ	0xFDA
  2726                           fsr2l	equ	0xFD9
  2727                           status	equ	0xFD8
  2728                           
  2729 ;; *************** function ___lwdiv *****************
  2730 ;; Defined at:
  2731 ;;		line 8 in file "E:\XC8\sources\common\lwdiv.c"
  2732 ;; Parameters:    Size  Location     Type
  2733 ;;  dividend        2   16[COMRAM] unsigned int 
  2734 ;;  divisor         2   18[COMRAM] unsigned int 
  2735 ;; Auto vars:     Size  Location     Type
  2736 ;;  quotient        2   20[COMRAM] unsigned int 
  2737 ;;  counter         1   22[COMRAM] unsigned char 
  2738 ;; Return value:  Size  Location     Type
  2739 ;;                  2   16[COMRAM] unsigned int 
  2740 ;; Registers used:
  2741 ;;		wreg, status,2, status,0
  2742 ;; Tracked objects:
  2743 ;;		On entry : 0/0
  2744 ;;		On exit  : 0/0
  2745 ;;		Unchanged: 0/0
  2746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2747 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2748 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2749 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2750 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2751 ;;Total ram usage:        7 bytes
  2752 ;; Hardware stack levels used:    1
  2753 ;; Hardware stack levels required when called:    3
  2754 ;; This function calls:
  2755 ;;		Nothing
  2756 ;; This function is called by:
  2757 ;;		_printf
  2758 ;; This function uses a non-reentrant model
  2759 ;;
  2760                           
  2761                           	psect	text5
  2762  000ED0                     __ptext5:
  2763                           	opt stack 0
  2764  000ED0                     ___lwdiv:
  2765                           	opt stack 26
  2766                           
  2767                           ;incstack = 0
  2768  000ED0  0E00               	movlw	0
  2769  000ED2  6E16               	movwf	___lwdiv@quotient+1,c
  2770  000ED4  0E00               	movlw	0
  2771  000ED6  6E15               	movwf	___lwdiv@quotient,c
  2772  000ED8  5013               	movf	___lwdiv@divisor,w,c
  2773  000EDA  1014               	iorwf	___lwdiv@divisor+1,w,c
  2774  000EDC  B4D8               	btfsc	status,2,c
  2775  000EDE  D021               	goto	l1186
  2776  000EE0  0E01               	movlw	1
  2777  000EE2  6E17               	movwf	___lwdiv@counter,c
  2778  000EE4  D005               	goto	l3141
  2779  000EE6                     l3139:
  2780  000EE6  90D8               	bcf	status,0,c
  2781  000EE8  3613               	rlcf	___lwdiv@divisor,f,c
  2782  000EEA  3614               	rlcf	___lwdiv@divisor+1,f,c
  2783  000EEC  2A17               	incf	___lwdiv@counter,f,c
  2784  000EEE  D000               	goto	l3141
  2785  000EF0                     l3141:
  2786  000EF0  BE14               	btfsc	___lwdiv@divisor+1,7,c
  2787  000EF2  D002               	goto	l3143
  2788  000EF4  D7F8               	goto	l3139
  2789  000EF6  D000               	goto	l3143
  2790  000EF8                     l3143:
  2791  000EF8  90D8               	bcf	status,0,c
  2792  000EFA  3615               	rlcf	___lwdiv@quotient,f,c
  2793  000EFC  3616               	rlcf	___lwdiv@quotient+1,f,c
  2794  000EFE  5013               	movf	___lwdiv@divisor,w,c
  2795  000F00  5C11               	subwf	___lwdiv@dividend,w,c
  2796  000F02  5014               	movf	___lwdiv@divisor+1,w,c
  2797  000F04  5812               	subwfb	___lwdiv@dividend+1,w,c
  2798  000F06  A0D8               	btfss	status,0,c
  2799  000F08  D006               	goto	l3151
  2800  000F0A  5013               	movf	___lwdiv@divisor,w,c
  2801  000F0C  5E11               	subwf	___lwdiv@dividend,f,c
  2802  000F0E  5014               	movf	___lwdiv@divisor+1,w,c
  2803  000F10  5A12               	subwfb	___lwdiv@dividend+1,f,c
  2804  000F12  8015               	bsf	___lwdiv@quotient,0,c
  2805  000F14  D000               	goto	l3151
  2806  000F16                     l3151:
  2807  000F16  90D8               	bcf	status,0,c
  2808  000F18  3214               	rrcf	___lwdiv@divisor+1,f,c
  2809  000F1A  3213               	rrcf	___lwdiv@divisor,f,c
  2810  000F1C  2E17               	decfsz	___lwdiv@counter,f,c
  2811  000F1E  D7EC               	goto	l3143
  2812  000F20  D000               	goto	l1186
  2813  000F22                     l1186:
  2814  000F22  C015  F011         	movff	___lwdiv@quotient,?___lwdiv
  2815  000F26  C016  F012         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2816  000F2A  0012               	return		;funcret
  2817  000F2C                     __end_of___lwdiv:
  2818                           	opt stack 0
  2819                           tblptru	equ	0xFF8
  2820                           tblptrh	equ	0xFF7
  2821                           tblptrl	equ	0xFF6
  2822                           tablat	equ	0xFF5
  2823                           prodh	equ	0xFF4
  2824                           prodl	equ	0xFF3
  2825                           postinc0	equ	0xFEE
  2826                           wreg	equ	0xFE8
  2827                           postdec1	equ	0xFE5
  2828                           fsr1l	equ	0xFE1
  2829                           postinc2	equ	0xFDE
  2830                           postdec2	equ	0xFDD
  2831                           fsr2h	equ	0xFDA
  2832                           fsr2l	equ	0xFD9
  2833                           status	equ	0xFD8
  2834                           
  2835 ;; *************** function ___awdiv *****************
  2836 ;; Defined at:
  2837 ;;		line 8 in file "E:\XC8\sources\common\awdiv.c"
  2838 ;; Parameters:    Size  Location     Type
  2839 ;;  dividend        2   22[COMRAM] int 
  2840 ;;  divisor         2   24[COMRAM] int 
  2841 ;; Auto vars:     Size  Location     Type
  2842 ;;  quotient        2   28[COMRAM] int 
  2843 ;;  sign            1   27[COMRAM] unsigned char 
  2844 ;;  counter         1   26[COMRAM] unsigned char 
  2845 ;; Return value:  Size  Location     Type
  2846 ;;                  2   22[COMRAM] int 
  2847 ;; Registers used:
  2848 ;;		wreg, status,2, status,0
  2849 ;; Tracked objects:
  2850 ;;		On entry : 0/0
  2851 ;;		On exit  : 0/0
  2852 ;;		Unchanged: 0/0
  2853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2854 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2855 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2856 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2857 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2858 ;;Total ram usage:        8 bytes
  2859 ;; Hardware stack levels used:    1
  2860 ;; Hardware stack levels required when called:    3
  2861 ;; This function calls:
  2862 ;;		Nothing
  2863 ;; This function is called by:
  2864 ;;		_main
  2865 ;; This function uses a non-reentrant model
  2866 ;;
  2867                           
  2868                           	psect	text6
  2869  000B82                     __ptext6:
  2870                           	opt stack 0
  2871  000B82                     ___awdiv:
  2872                           	opt stack 27
  2873                           
  2874                           ;incstack = 0
  2875  000B82  0E00               	movlw	0
  2876  000B84  6E1C               	movwf	___awdiv@sign,c
  2877  000B86  AE1A               	btfss	___awdiv@divisor+1,7,c
  2878  000B88  D007               	goto	l3411
  2879  000B8A  6C19               	negf	___awdiv@divisor,c
  2880  000B8C  1E1A               	comf	___awdiv@divisor+1,f,c
  2881  000B8E  B0D8               	btfsc	status,0,c
  2882  000B90  2A1A               	incf	___awdiv@divisor+1,f,c
  2883  000B92  0E01               	movlw	1
  2884  000B94  6E1C               	movwf	___awdiv@sign,c
  2885  000B96  D000               	goto	l3411
  2886  000B98                     l3411:
  2887  000B98  AE18               	btfss	___awdiv@dividend+1,7,c
  2888  000B9A  D007               	goto	l3417
  2889  000B9C  6C17               	negf	___awdiv@dividend,c
  2890  000B9E  1E18               	comf	___awdiv@dividend+1,f,c
  2891  000BA0  B0D8               	btfsc	status,0,c
  2892  000BA2  2A18               	incf	___awdiv@dividend+1,f,c
  2893  000BA4  0E01               	movlw	1
  2894  000BA6  1A1C               	xorwf	___awdiv@sign,f,c
  2895  000BA8  D000               	goto	l3417
  2896  000BAA                     l3417:
  2897  000BAA  0E00               	movlw	0
  2898  000BAC  6E1E               	movwf	___awdiv@quotient+1,c
  2899  000BAE  0E00               	movlw	0
  2900  000BB0  6E1D               	movwf	___awdiv@quotient,c
  2901  000BB2  5019               	movf	___awdiv@divisor,w,c
  2902  000BB4  101A               	iorwf	___awdiv@divisor+1,w,c
  2903  000BB6  B4D8               	btfsc	status,2,c
  2904  000BB8  D021               	goto	l3439
  2905  000BBA  0E01               	movlw	1
  2906  000BBC  6E1B               	movwf	___awdiv@counter,c
  2907  000BBE  D005               	goto	l3425
  2908  000BC0                     l3423:
  2909  000BC0  90D8               	bcf	status,0,c
  2910  000BC2  3619               	rlcf	___awdiv@divisor,f,c
  2911  000BC4  361A               	rlcf	___awdiv@divisor+1,f,c
  2912  000BC6  2A1B               	incf	___awdiv@counter,f,c
  2913  000BC8  D000               	goto	l3425
  2914  000BCA                     l3425:
  2915  000BCA  BE1A               	btfsc	___awdiv@divisor+1,7,c
  2916  000BCC  D002               	goto	l3427
  2917  000BCE  D7F8               	goto	l3423
  2918  000BD0  D000               	goto	l3427
  2919  000BD2                     l3427:
  2920  000BD2  90D8               	bcf	status,0,c
  2921  000BD4  361D               	rlcf	___awdiv@quotient,f,c
  2922  000BD6  361E               	rlcf	___awdiv@quotient+1,f,c
  2923  000BD8  5019               	movf	___awdiv@divisor,w,c
  2924  000BDA  5C17               	subwf	___awdiv@dividend,w,c
  2925  000BDC  501A               	movf	___awdiv@divisor+1,w,c
  2926  000BDE  5818               	subwfb	___awdiv@dividend+1,w,c
  2927  000BE0  A0D8               	btfss	status,0,c
  2928  000BE2  D006               	goto	l3435
  2929  000BE4  5019               	movf	___awdiv@divisor,w,c
  2930  000BE6  5E17               	subwf	___awdiv@dividend,f,c
  2931  000BE8  501A               	movf	___awdiv@divisor+1,w,c
  2932  000BEA  5A18               	subwfb	___awdiv@dividend+1,f,c
  2933  000BEC  801D               	bsf	___awdiv@quotient,0,c
  2934  000BEE  D000               	goto	l3435
  2935  000BF0                     l3435:
  2936  000BF0  90D8               	bcf	status,0,c
  2937  000BF2  321A               	rrcf	___awdiv@divisor+1,f,c
  2938  000BF4  3219               	rrcf	___awdiv@divisor,f,c
  2939  000BF6  2E1B               	decfsz	___awdiv@counter,f,c
  2940  000BF8  D7EC               	goto	l3427
  2941  000BFA  D000               	goto	l3439
  2942  000BFC                     l3439:
  2943  000BFC  501C               	movf	___awdiv@sign,w,c
  2944  000BFE  B4D8               	btfsc	status,2,c
  2945  000C00  D005               	goto	l3443
  2946  000C02  6C1D               	negf	___awdiv@quotient,c
  2947  000C04  1E1E               	comf	___awdiv@quotient+1,f,c
  2948  000C06  B0D8               	btfsc	status,0,c
  2949  000C08  2A1E               	incf	___awdiv@quotient+1,f,c
  2950  000C0A  D000               	goto	l3443
  2951  000C0C                     l3443:
  2952  000C0C  C01D  F017         	movff	___awdiv@quotient,?___awdiv
  2953  000C10  C01E  F018         	movff	___awdiv@quotient+1,?___awdiv+1
  2954  000C14  D000               	goto	l856
  2955  000C16                     l856:
  2956  000C16  0012               	return		;funcret
  2957  000C18                     __end_of___awdiv:
  2958                           	opt stack 0
  2959                           tblptru	equ	0xFF8
  2960                           tblptrh	equ	0xFF7
  2961                           tblptrl	equ	0xFF6
  2962                           tablat	equ	0xFF5
  2963                           prodh	equ	0xFF4
  2964                           prodl	equ	0xFF3
  2965                           postinc0	equ	0xFEE
  2966                           wreg	equ	0xFE8
  2967                           postdec1	equ	0xFE5
  2968                           fsr1l	equ	0xFE1
  2969                           postinc2	equ	0xFDE
  2970                           postdec2	equ	0xFDD
  2971                           fsr2h	equ	0xFDA
  2972                           fsr2l	equ	0xFD9
  2973                           status	equ	0xFD8
  2974                           
  2975 ;; *************** function _Do_Init *****************
  2976 ;; Defined at:
  2977 ;;		line 190 in file "Lab10p2.c"
  2978 ;; Parameters:    Size  Location     Type
  2979 ;;		None
  2980 ;; Auto vars:     Size  Location     Type
  2981 ;;		None
  2982 ;; Return value:  Size  Location     Type
  2983 ;;		None               void
  2984 ;; Registers used:
  2985 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2986 ;; Tracked objects:
  2987 ;;		On entry : 0/0
  2988 ;;		On exit  : 0/0
  2989 ;;		Unchanged: 0/0
  2990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2991 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2992 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2993 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2994 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2995 ;;Total ram usage:        0 bytes
  2996 ;; Hardware stack levels used:    1
  2997 ;; Hardware stack levels required when called:   11
  2998 ;; This function calls:
  2999 ;;		_DS1621_Init
  3000 ;;		_I2C_Init
  3001 ;;		_Initialize_Screen
  3002 ;;		_init_INTERRUPT
  3003 ;;		_init_UART
  3004 ;; This function is called by:
  3005 ;;		_main
  3006 ;; This function uses a non-reentrant model
  3007 ;;
  3008                           
  3009                           	psect	text7
  3010  001148                     __ptext7:
  3011                           	opt stack 0
  3012  001148                     _Do_Init:
  3013                           	opt stack 19
  3014                           
  3015                           ;Lab10p2.c: 193: init_UART();
  3016                           
  3017                           ;incstack = 0
  3018  001148  EC09  F00A         	call	_init_UART	;wreg free
  3019                           
  3020                           ;Lab10p2.c: 194: OSCCON=0x70;
  3021  00114C  0E70               	movlw	112
  3022  00114E  6ED3               	movwf	4051,c	;volatile
  3023                           
  3024                           ;Lab10p2.c: 196: ADCON1=0x0F;
  3025  001150  0E0F               	movlw	15
  3026  001152  6EC1               	movwf	4033,c	;volatile
  3027                           
  3028                           ;Lab10p2.c: 197: TRISA = 0x00;
  3029  001154  0E00               	movlw	0
  3030  001156  6E92               	movwf	3986,c	;volatile
  3031                           
  3032                           ;Lab10p2.c: 198: TRISB = 0x01;
  3033  001158  0E01               	movlw	1
  3034  00115A  6E93               	movwf	3987,c	;volatile
  3035                           
  3036                           ;Lab10p2.c: 199: TRISC = 0x00;
  3037  00115C  0E00               	movlw	0
  3038  00115E  6E94               	movwf	3988,c	;volatile
  3039                           
  3040                           ;Lab10p2.c: 200: TRISD = 0x00;
  3041  001160  0E00               	movlw	0
  3042  001162  6E95               	movwf	3989,c	;volatile
  3043                           
  3044                           ;Lab10p2.c: 201: TRISE = 0x00;
  3045  001164  0E00               	movlw	0
  3046  001166  6E96               	movwf	3990,c	;volatile
  3047                           
  3048                           ;Lab10p2.c: 202: Initialize_Screen();
  3049  001168  EC72  F005         	call	_Initialize_Screen	;wreg free
  3050                           
  3051                           ;Lab10p2.c: 203: RBPU=0;
  3052  00116C  9EF1               	bcf	intcon2,7,c	;volatile
  3053                           
  3054                           ;Lab10p2.c: 204: DS1621_Init();
  3055  00116E  ECD4  F009         	call	_DS1621_Init	;wreg free
  3056                           
  3057                           ;Lab10p2.c: 205: init_INTERRUPT();
  3058  001172  EC5A  F009         	call	_init_INTERRUPT	;wreg free
  3059                           
  3060                           ;Lab10p2.c: 206: I2C_Init(100000);
  3061  001176  0EA0               	movlw	160
  3062  001178  6E11               	movwf	I2C_Init@c,c
  3063  00117A  0E86               	movlw	134
  3064  00117C  6E12               	movwf	I2C_Init@c+1,c
  3065  00117E  0E01               	movlw	1
  3066  001180  6E13               	movwf	I2C_Init@c+2,c
  3067  001182  0E00               	movlw	0
  3068  001184  6E14               	movwf	I2C_Init@c+3,c
  3069  001186  EC64  F00A         	call	_I2C_Init	;wreg free
  3070  00118A  0012               	return		;funcret
  3071  00118C                     __end_of_Do_Init:
  3072                           	opt stack 0
  3073                           tblptru	equ	0xFF8
  3074                           tblptrh	equ	0xFF7
  3075                           tblptrl	equ	0xFF6
  3076                           tablat	equ	0xFF5
  3077                           prodh	equ	0xFF4
  3078                           prodl	equ	0xFF3
  3079                           intcon2	equ	0xFF1
  3080                           postinc0	equ	0xFEE
  3081                           wreg	equ	0xFE8
  3082                           postdec1	equ	0xFE5
  3083                           fsr1l	equ	0xFE1
  3084                           postinc2	equ	0xFDE
  3085                           postdec2	equ	0xFDD
  3086                           fsr2h	equ	0xFDA
  3087                           fsr2l	equ	0xFD9
  3088                           status	equ	0xFD8
  3089                           
  3090 ;; *************** function _init_UART *****************
  3091 ;; Defined at:
  3092 ;;		line 155 in file "Lab10p2.c"
  3093 ;; Parameters:    Size  Location     Type
  3094 ;;		None
  3095 ;; Auto vars:     Size  Location     Type
  3096 ;;		None
  3097 ;; Return value:  Size  Location     Type
  3098 ;;		None               void
  3099 ;; Registers used:
  3100 ;;		wreg, status,2, cstack
  3101 ;; Tracked objects:
  3102 ;;		On entry : 0/0
  3103 ;;		On exit  : 0/0
  3104 ;;		Unchanged: 0/0
  3105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3106 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3107 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3108 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3109 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3110 ;;Total ram usage:        0 bytes
  3111 ;; Hardware stack levels used:    1
  3112 ;; Hardware stack levels required when called:    4
  3113 ;; This function calls:
  3114 ;;		_OpenUSART
  3115 ;; This function is called by:
  3116 ;;		_Do_Init
  3117 ;; This function uses a non-reentrant model
  3118 ;;
  3119                           
  3120                           	psect	text8
  3121  001412                     __ptext8:
  3122                           	opt stack 0
  3123  001412                     _init_UART:
  3124                           	opt stack 25
  3125                           
  3126                           ;Lab10p2.c: 157: OpenUSART (0b01111111 & 0b10111111 &
  3127                           ;Lab10p2.c: 158: 0b11111110 & 0b11111101 & 0b11111111 &
  3128                           ;Lab10p2.c: 159: 0b11111111, 25);
  3129                           
  3130                           ;incstack = 0
  3131  001412  0E00               	movlw	0
  3132  001414  6E12               	movwf	OpenUSART@spbrg+1,c
  3133  001416  0E19               	movlw	25
  3134  001418  6E11               	movwf	OpenUSART@spbrg,c
  3135  00141A  0E3C               	movlw	60
  3136  00141C  ECCB  F006         	call	_OpenUSART
  3137                           
  3138                           ;Lab10p2.c: 160: OSCCON = 0x70;
  3139  001420  0E70               	movlw	112
  3140  001422  6ED3               	movwf	4051,c	;volatile
  3141  001424  0012               	return		;funcret
  3142  001426                     __end_of_init_UART:
  3143                           	opt stack 0
  3144                           tblptru	equ	0xFF8
  3145                           tblptrh	equ	0xFF7
  3146                           tblptrl	equ	0xFF6
  3147                           tablat	equ	0xFF5
  3148                           prodh	equ	0xFF4
  3149                           prodl	equ	0xFF3
  3150                           intcon2	equ	0xFF1
  3151                           postinc0	equ	0xFEE
  3152                           wreg	equ	0xFE8
  3153                           postdec1	equ	0xFE5
  3154                           fsr1l	equ	0xFE1
  3155                           postinc2	equ	0xFDE
  3156                           postdec2	equ	0xFDD
  3157                           fsr2h	equ	0xFDA
  3158                           fsr2l	equ	0xFD9
  3159                           status	equ	0xFD8
  3160                           
  3161 ;; *************** function _OpenUSART *****************
  3162 ;; Defined at:
  3163 ;;		line 73 in file "E:\XC8\sources\pic18\plib\USART\uopen.c"
  3164 ;; Parameters:    Size  Location     Type
  3165 ;;  config          1    wreg     unsigned char 
  3166 ;;  spbrg           2   16[COMRAM] unsigned int 
  3167 ;; Auto vars:     Size  Location     Type
  3168 ;;  config          1   18[COMRAM] unsigned char 
  3169 ;; Return value:  Size  Location     Type
  3170 ;;		None               void
  3171 ;; Registers used:
  3172 ;;		wreg, status,2
  3173 ;; Tracked objects:
  3174 ;;		On entry : 0/0
  3175 ;;		On exit  : 0/0
  3176 ;;		Unchanged: 0/0
  3177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3178 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3179 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3180 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3181 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3182 ;;Total ram usage:        3 bytes
  3183 ;; Hardware stack levels used:    1
  3184 ;; Hardware stack levels required when called:    3
  3185 ;; This function calls:
  3186 ;;		Nothing
  3187 ;; This function is called by:
  3188 ;;		_init_UART
  3189 ;; This function uses a non-reentrant model
  3190 ;;
  3191                           
  3192                           	psect	text9
  3193  000D96                     __ptext9:
  3194                           	opt stack 0
  3195  000D96                     _OpenUSART:
  3196                           	opt stack 25
  3197                           
  3198                           ;incstack = 0
  3199                           ;OpenUSART@config stored from wreg
  3200  000D96  6E13               	movwf	OpenUSART@config,c
  3201  000D98  0E00               	movlw	0
  3202  000D9A  6EAC               	movwf	4012,c	;volatile
  3203  000D9C  0E00               	movlw	0
  3204  000D9E  6EAB               	movwf	4011,c	;volatile
  3205  000DA0  A013               	btfss	OpenUSART@config,0,c
  3206  000DA2  D002               	goto	l3043
  3207  000DA4  88AC               	bsf	4012,4,c	;volatile
  3208  000DA6  D000               	goto	l3043
  3209  000DA8                     l3043:
  3210  000DA8  A213               	btfss	OpenUSART@config,1,c
  3211  000DAA  D003               	goto	l3047
  3212  000DAC  8CAC               	bsf	4012,6,c	;volatile
  3213  000DAE  8CAB               	bsf	4011,6,c	;volatile
  3214  000DB0  D000               	goto	l3047
  3215  000DB2                     l3047:
  3216  000DB2  A413               	btfss	OpenUSART@config,2,c
  3217  000DB4  D002               	goto	l3051
  3218  000DB6  8EAC               	bsf	4012,7,c	;volatile
  3219  000DB8  D000               	goto	l3051
  3220  000DBA                     l3051:
  3221  000DBA  A613               	btfss	OpenUSART@config,3,c
  3222  000DBC  D002               	goto	l651
  3223  000DBE  88AB               	bsf	4011,4,c	;volatile
  3224  000DC0  D002               	goto	l3055
  3225  000DC2                     l651:
  3226  000DC2  8AAB               	bsf	4011,5,c	;volatile
  3227  000DC4  D000               	goto	l3055
  3228  000DC6                     l3055:
  3229  000DC6  B813               	btfsc	OpenUSART@config,4,c
  3230  000DC8  84AC               	bsf	4012,2,c	;volatile
  3231  000DCA  989E               	bcf	3998,4,c	;volatile
  3232  000DCC  AA13               	btfss	OpenUSART@config,5,c
  3233  000DCE  D002               	goto	l3063
  3234  000DD0  86AB               	bsf	4011,3,c	;volatile
  3235  000DD2  D000               	goto	l3063
  3236  000DD4                     l3063:
  3237  000DD4  AC13               	btfss	OpenUSART@config,6,c
  3238  000DD6  D002               	goto	l655
  3239  000DD8  8A9D               	bsf	3997,5,c	;volatile
  3240  000DDA  D001               	goto	l656
  3241  000DDC                     l655:
  3242  000DDC  9A9D               	bcf	3997,5,c	;volatile
  3243  000DDE                     l656:
  3244  000DDE  9A9E               	bcf	3998,5,c	;volatile
  3245  000DE0  AE13               	btfss	OpenUSART@config,7,c
  3246  000DE2  D002               	goto	l657
  3247  000DE4  889D               	bsf	3997,4,c	;volatile
  3248  000DE6  D001               	goto	l658
  3249  000DE8                     l657:
  3250  000DE8  989D               	bcf	3997,4,c	;volatile
  3251  000DEA                     l658:
  3252  000DEA  C011  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  3253  000DEE  5012               	movf	OpenUSART@spbrg+1,w,c
  3254  000DF0  6EB0               	movwf	4016,c	;volatile
  3255  000DF2  8AAC               	bsf	4012,5,c	;volatile
  3256  000DF4  8EAB               	bsf	4011,7,c	;volatile
  3257  000DF6  9C94               	bcf	3988,6,c	;volatile
  3258  000DF8  8E94               	bsf	3988,7,c	;volatile
  3259  000DFA  B8AC               	btfsc	4012,4,c	;volatile
  3260  000DFC  BEAC               	btfsc	4012,7,c	;volatile
  3261  000DFE  D002               	goto	l660
  3262  000E00  8C94               	bsf	3988,6,c	;volatile
  3263  000E02  D000               	goto	l660
  3264  000E04                     l660:
  3265  000E04  0012               	return		;funcret
  3266  000E06                     __end_of_OpenUSART:
  3267                           	opt stack 0
  3268                           tblptru	equ	0xFF8
  3269                           tblptrh	equ	0xFF7
  3270                           tblptrl	equ	0xFF6
  3271                           tablat	equ	0xFF5
  3272                           prodh	equ	0xFF4
  3273                           prodl	equ	0xFF3
  3274                           intcon2	equ	0xFF1
  3275                           postinc0	equ	0xFEE
  3276                           wreg	equ	0xFE8
  3277                           postdec1	equ	0xFE5
  3278                           fsr1l	equ	0xFE1
  3279                           postinc2	equ	0xFDE
  3280                           postdec2	equ	0xFDD
  3281                           fsr2h	equ	0xFDA
  3282                           fsr2l	equ	0xFD9
  3283                           status	equ	0xFD8
  3284                           
  3285 ;; *************** function _init_INTERRUPT *****************
  3286 ;; Defined at:
  3287 ;;		line 13 in file "Interrupt.c"
  3288 ;; Parameters:    Size  Location     Type
  3289 ;;		None
  3290 ;; Auto vars:     Size  Location     Type
  3291 ;;		None
  3292 ;; Return value:  Size  Location     Type
  3293 ;;		None               void
  3294 ;; Registers used:
  3295 ;;		wreg, status,2
  3296 ;; Tracked objects:
  3297 ;;		On entry : 0/0
  3298 ;;		On exit  : 0/0
  3299 ;;		Unchanged: 0/0
  3300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3301 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3302 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3303 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3304 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3305 ;;Total ram usage:        0 bytes
  3306 ;; Hardware stack levels used:    1
  3307 ;; Hardware stack levels required when called:    3
  3308 ;; This function calls:
  3309 ;;		Nothing
  3310 ;; This function is called by:
  3311 ;;		_Do_Init
  3312 ;; This function uses a non-reentrant model
  3313 ;;
  3314                           
  3315                           	psect	text10
  3316  0012B4                     __ptext10:
  3317                           	opt stack 0
  3318  0012B4                     _init_INTERRUPT:
  3319                           	opt stack 26
  3320                           
  3321                           ;Interrupt.c: 15: INTCONbits.INT0IF = 0;
  3322                           
  3323                           ;incstack = 0
  3324  0012B4  92F2               	bcf	intcon,1,c	;volatile
  3325                           
  3326                           ;Interrupt.c: 16: INTCON2bits.INTEDG0 = 0;
  3327  0012B6  9CF1               	bcf	intcon2,6,c	;volatile
  3328                           
  3329                           ;Interrupt.c: 17: INTCONbits.INT0IE = 1;
  3330  0012B8  88F2               	bsf	intcon,4,c	;volatile
  3331                           
  3332                           ;Interrupt.c: 18: TMR1H = 0;
  3333  0012BA  0E00               	movlw	0
  3334  0012BC  6ECF               	movwf	4047,c	;volatile
  3335                           
  3336                           ;Interrupt.c: 19: TMR1L = 0;
  3337  0012BE  0E00               	movlw	0
  3338  0012C0  6ECE               	movwf	4046,c	;volatile
  3339                           
  3340                           ;Interrupt.c: 20: PIR1bits.TMR1IF = 0;
  3341  0012C2  909E               	bcf	3998,0,c	;volatile
  3342                           
  3343                           ;Interrupt.c: 21: PIE1bits.TMR1IE = 1;
  3344  0012C4  809D               	bsf	3997,0,c	;volatile
  3345                           
  3346                           ;Interrupt.c: 22: INTCONbits.PEIE = 1;
  3347  0012C6  8CF2               	bsf	intcon,6,c	;volatile
  3348                           
  3349                           ;Interrupt.c: 23: INTCONbits.GIE = 1;
  3350  0012C8  8EF2               	bsf	intcon,7,c	;volatile
  3351                           
  3352                           ;Interrupt.c: 24: nec_ok = 0;
  3353  0012CA  0E00               	movlw	0
  3354  0012CC  6E47               	movwf	_nec_ok+1,c
  3355  0012CE  0E00               	movlw	0
  3356  0012D0  6E46               	movwf	_nec_ok,c
  3357                           
  3358                           ;Interrupt.c: 25: Nec_code = 0x0;
  3359  0012D2  0E00               	movlw	0
  3360  0012D4  6E3E               	movwf	_Nec_code,c
  3361  0012D6  0E00               	movlw	0
  3362  0012D8  6E3F               	movwf	_Nec_code+1,c
  3363  0012DA  0E00               	movlw	0
  3364  0012DC  6E40               	movwf	_Nec_code+2,c
  3365  0012DE  0E00               	movlw	0
  3366  0012E0  6E41               	movwf	_Nec_code+3,c
  3367  0012E2  0012               	return		;funcret
  3368  0012E4                     __end_of_init_INTERRUPT:
  3369                           	opt stack 0
  3370                           tblptru	equ	0xFF8
  3371                           tblptrh	equ	0xFF7
  3372                           tblptrl	equ	0xFF6
  3373                           tablat	equ	0xFF5
  3374                           prodh	equ	0xFF4
  3375                           prodl	equ	0xFF3
  3376                           intcon	equ	0xFF2
  3377                           intcon2	equ	0xFF1
  3378                           postinc0	equ	0xFEE
  3379                           wreg	equ	0xFE8
  3380                           postdec1	equ	0xFE5
  3381                           fsr1l	equ	0xFE1
  3382                           postinc2	equ	0xFDE
  3383                           postdec2	equ	0xFDD
  3384                           fsr2h	equ	0xFDA
  3385                           fsr2l	equ	0xFD9
  3386                           status	equ	0xFD8
  3387                           
  3388 ;; *************** function _Initialize_Screen *****************
  3389 ;; Defined at:
  3390 ;;		line 246 in file "Lab10p2.c"
  3391 ;; Parameters:    Size  Location     Type
  3392 ;;		None
  3393 ;; Auto vars:     Size  Location     Type
  3394 ;;		None
  3395 ;; Return value:  Size  Location     Type
  3396 ;;		None               void
  3397 ;; Registers used:
  3398 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3399 ;; Tracked objects:
  3400 ;;		On entry : 0/0
  3401 ;;		On exit  : 0/0
  3402 ;;		Unchanged: 0/0
  3403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3405 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3406 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3407 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3408 ;;Total ram usage:        0 bytes
  3409 ;; Hardware stack levels used:    1
  3410 ;; Hardware stack levels required when called:   10
  3411 ;; This function calls:
  3412 ;;		_LCD_Reset
  3413 ;;		_TFT_GreenTab_Initialize
  3414 ;;		_drawtext
  3415 ;;		_fillScreen
  3416 ;;		_strcpy
  3417 ;; This function is called by:
  3418 ;;		_Do_Init
  3419 ;; This function uses a non-reentrant model
  3420 ;;
  3421                           
  3422                           	psect	text11
  3423  000AE4                     __ptext11:
  3424                           	opt stack 0
  3425  000AE4                     _Initialize_Screen:
  3426                           	opt stack 19
  3427                           
  3428                           ;Lab10p2.c: 248: LCD_Reset();
  3429                           
  3430                           ;incstack = 0
  3431  000AE4  EC1D  F00A         	call	_LCD_Reset	;wreg free
  3432                           
  3433                           ;Lab10p2.c: 249: TFT_GreenTab_Initialize();
  3434  000AE8  EC8A  F009         	call	_TFT_GreenTab_Initialize	;wreg free
  3435                           
  3436                           ;Lab10p2.c: 250: fillScreen(0x0000);
  3437  000AEC  0E00               	movlw	0
  3438  000AEE  6E25               	movwf	fillScreen@color+1,c
  3439  000AF0  0E00               	movlw	0
  3440  000AF2  6E24               	movwf	fillScreen@color,c
  3441  000AF4  ECE3  F009         	call	_fillScreen	;wreg free
  3442                           
  3443                           ;Lab10p2.c: 253: txt = buffer;
  3444  000AF8  0EC9               	movlw	low _buffer
  3445  000AFA  6E48               	movwf	_txt,c
  3446  000AFC  0E00               	movlw	high _buffer
  3447  000AFE  6E49               	movwf	_txt+1,c
  3448                           
  3449                           ;Lab10p2.c: 254: strcpy(txt, "ECE3301L Fall 21-S4");
  3450  000B00  C048  F011         	movff	_txt,strcpy@to
  3451  000B04  C049  F012         	movff	_txt+1,strcpy@to+1
  3452  000B08  0ED1               	movlw	low STR_3
  3453  000B0A  6E13               	movwf	strcpy@from,c
  3454  000B0C  0EFF               	movlw	high STR_3
  3455  000B0E  6E14               	movwf	strcpy@from+1,c
  3456  000B10  EC41  F009         	call	_strcpy	;wreg free
  3457                           
  3458                           ;Lab10p2.c: 255: drawtext(2, 2, txt, 0xFFFF, 0x0000, 1);
  3459  000B14  0E02               	movlw	2
  3460  000B16  0100               	movlb	0	; () banked
  3461  000B18  6FE8               	movwf	drawtext@y& (0+255),b
  3462  000B1A  C048  F0E9         	movff	_txt,drawtext@_text
  3463  000B1E  C049  F0EA         	movff	_txt+1,drawtext@_text+1
  3464  000B22  0EFF               	movlw	255
  3465  000B24  0100               	movlb	0	; () banked
  3466  000B26  6FEC               	movwf	(drawtext@color+1)& (0+255),b
  3467  000B28  69EB               	setf	drawtext@color& (0+255),b
  3468  000B2A  0E00               	movlw	0
  3469  000B2C  0100               	movlb	0	; () banked
  3470  000B2E  6FEE               	movwf	(drawtext@bg+1)& (0+255),b
  3471  000B30  0E00               	movlw	0
  3472  000B32  6FED               	movwf	drawtext@bg& (0+255),b
  3473  000B34  0E01               	movlw	1
  3474  000B36  0100               	movlb	0	; () banked
  3475  000B38  6FEF               	movwf	drawtext@size& (0+255),b
  3476  000B3A  0E02               	movlw	2
  3477  000B3C  EC16  F003         	call	_drawtext
  3478                           
  3479                           ;Lab10p2.c: 257: strcpy(txt, "LAB 10 ");
  3480  000B40  C048  F011         	movff	_txt,strcpy@to
  3481  000B44  C049  F012         	movff	_txt+1,strcpy@to+1
  3482  000B48  0EF6               	movlw	low STR_4
  3483  000B4A  6E13               	movwf	strcpy@from,c
  3484  000B4C  0EFF               	movlw	high STR_4
  3485  000B4E  6E14               	movwf	strcpy@from+1,c
  3486  000B50  EC41  F009         	call	_strcpy	;wreg free
  3487                           
  3488                           ;Lab10p2.c: 258: drawtext(50, 10, txt, 0xFFFF, 0x0000, 1);
  3489  000B54  0E0A               	movlw	10
  3490  000B56  0100               	movlb	0	; () banked
  3491  000B58  6FE8               	movwf	drawtext@y& (0+255),b
  3492  000B5A  C048  F0E9         	movff	_txt,drawtext@_text
  3493  000B5E  C049  F0EA         	movff	_txt+1,drawtext@_text+1
  3494  000B62  0EFF               	movlw	255
  3495  000B64  0100               	movlb	0	; () banked
  3496  000B66  6FEC               	movwf	(drawtext@color+1)& (0+255),b
  3497  000B68  69EB               	setf	drawtext@color& (0+255),b
  3498  000B6A  0E00               	movlw	0
  3499  000B6C  0100               	movlb	0	; () banked
  3500  000B6E  6FEE               	movwf	(drawtext@bg+1)& (0+255),b
  3501  000B70  0E00               	movlw	0
  3502  000B72  6FED               	movwf	drawtext@bg& (0+255),b
  3503  000B74  0E01               	movlw	1
  3504  000B76  0100               	movlb	0	; () banked
  3505  000B78  6FEF               	movwf	drawtext@size& (0+255),b
  3506  000B7A  0E32               	movlw	50
  3507  000B7C  EC16  F003         	call	_drawtext
  3508  000B80  0012               	return		;funcret
  3509  000B82                     __end_of_Initialize_Screen:
  3510                           	opt stack 0
  3511                           tblptru	equ	0xFF8
  3512                           tblptrh	equ	0xFF7
  3513                           tblptrl	equ	0xFF6
  3514                           tablat	equ	0xFF5
  3515                           prodh	equ	0xFF4
  3516                           prodl	equ	0xFF3
  3517                           intcon	equ	0xFF2
  3518                           intcon2	equ	0xFF1
  3519                           postinc0	equ	0xFEE
  3520                           wreg	equ	0xFE8
  3521                           postdec1	equ	0xFE5
  3522                           fsr1l	equ	0xFE1
  3523                           postinc2	equ	0xFDE
  3524                           postdec2	equ	0xFDD
  3525                           fsr2h	equ	0xFDA
  3526                           fsr2l	equ	0xFD9
  3527                           status	equ	0xFD8
  3528                           
  3529 ;; *************** function _strcpy *****************
  3530 ;; Defined at:
  3531 ;;		line 8 in file "E:\XC8\sources\common\strcpy.c"
  3532 ;; Parameters:    Size  Location     Type
  3533 ;;  to              2   16[COMRAM] PTR unsigned char 
  3534 ;;		 -> NULL(0), buffer(31), 
  3535 ;;  from            2   18[COMRAM] PTR const unsigned char 
  3536 ;;		 -> STR_4(8), STR_3(20), 
  3537 ;; Auto vars:     Size  Location     Type
  3538 ;;  cp              2   20[COMRAM] PTR unsigned char 
  3539 ;;		 -> NULL(0), buffer(31), 
  3540 ;; Return value:  Size  Location     Type
  3541 ;;                  2   16[COMRAM] PTR unsigned char 
  3542 ;; Registers used:
  3543 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  3544 ;; Tracked objects:
  3545 ;;		On entry : 0/0
  3546 ;;		On exit  : 0/0
  3547 ;;		Unchanged: 0/0
  3548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3549 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3550 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3551 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3552 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3553 ;;Total ram usage:        6 bytes
  3554 ;; Hardware stack levels used:    1
  3555 ;; Hardware stack levels required when called:    3
  3556 ;; This function calls:
  3557 ;;		Nothing
  3558 ;; This function is called by:
  3559 ;;		_Initialize_Screen
  3560 ;; This function uses a non-reentrant model
  3561 ;;
  3562                           
  3563                           	psect	text12
  3564  001282                     __ptext12:
  3565                           	opt stack 0
  3566  001282                     _strcpy:
  3567                           	opt stack 25
  3568                           
  3569                           ;incstack = 0
  3570  001282  C011  F015         	movff	strcpy@to,strcpy@cp
  3571  001286  C012  F016         	movff	strcpy@to+1,strcpy@cp+1
  3572  00128A  D005               	goto	l3091
  3573  00128C                     l3089:
  3574  00128C  4A15               	infsnz	strcpy@cp,f,c
  3575  00128E  2A16               	incf	strcpy@cp+1,f,c
  3576  001290  4A13               	infsnz	strcpy@from,f,c
  3577  001292  2A14               	incf	strcpy@from+1,f,c
  3578  001294  D000               	goto	l3091
  3579  001296                     l3091:
  3580  001296  C013  FFF6         	movff	strcpy@from,tblptrl
  3581  00129A  C014  FFF7         	movff	strcpy@from+1,tblptrh
  3582  00129E                     	if	0	;tblptru may be non-zero
  3583  00129E                     	endif
  3584  00129E                     	if	0	;tblptru may be non-zero
  3585  00129E                     	endif
  3586  00129E  C015  FFD9         	movff	strcpy@cp,fsr2l
  3587  0012A2  C016  FFDA         	movff	strcpy@cp+1,fsr2h
  3588  0012A6  0008               	tblrd		*
  3589  0012A8  CFF5 FFDF          	movff	tablat,indf2
  3590  0012AC  50DF               	movf	indf2,w,c
  3591  0012AE  A4D8               	btfss	status,2,c
  3592  0012B0  D7ED               	goto	l3089
  3593                           
  3594                           ;	Return value of _strcpy is never used
  3595  0012B2  0012               	return		;funcret
  3596  0012B4                     __end_of_strcpy:
  3597                           	opt stack 0
  3598                           tblptru	equ	0xFF8
  3599                           tblptrh	equ	0xFF7
  3600                           tblptrl	equ	0xFF6
  3601                           tablat	equ	0xFF5
  3602                           prodh	equ	0xFF4
  3603                           prodl	equ	0xFF3
  3604                           intcon	equ	0xFF2
  3605                           intcon2	equ	0xFF1
  3606                           postinc0	equ	0xFEE
  3607                           wreg	equ	0xFE8
  3608                           postdec1	equ	0xFE5
  3609                           fsr1l	equ	0xFE1
  3610                           indf2	equ	0xFDF
  3611                           postinc2	equ	0xFDE
  3612                           postdec2	equ	0xFDD
  3613                           fsr2h	equ	0xFDA
  3614                           fsr2l	equ	0xFD9
  3615                           status	equ	0xFD8
  3616                           
  3617 ;; *************** function _fillScreen *****************
  3618 ;; Defined at:
  3619 ;;		line 619 in file "ST7735_TFT.c"
  3620 ;; Parameters:    Size  Location     Type
  3621 ;;  color           2   35[COMRAM] unsigned int 
  3622 ;; Auto vars:     Size  Location     Type
  3623 ;;		None
  3624 ;; Return value:  Size  Location     Type
  3625 ;;		None               void
  3626 ;; Registers used:
  3627 ;;		wreg, status,2, status,0, cstack
  3628 ;; Tracked objects:
  3629 ;;		On entry : 0/0
  3630 ;;		On exit  : 0/0
  3631 ;;		Unchanged: 0/0
  3632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3633 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3634 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3635 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3636 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3637 ;;Total ram usage:        2 bytes
  3638 ;; Hardware stack levels used:    1
  3639 ;; Hardware stack levels required when called:    7
  3640 ;; This function calls:
  3641 ;;		_fillRectangle
  3642 ;; This function is called by:
  3643 ;;		_Initialize_Screen
  3644 ;; This function uses a non-reentrant model
  3645 ;;
  3646                           
  3647                           	psect	text13
  3648  0013C6                     __ptext13:
  3649                           	opt stack 0
  3650  0013C6                     _fillScreen:
  3651                           	opt stack 21
  3652                           
  3653                           ;ST7735_TFT.c: 621: fillRectangle(0, 0, 128, 160, color);
  3654                           
  3655                           ;incstack = 0
  3656  0013C6  0E00               	movlw	0
  3657  0013C8  6E18               	movwf	fillRectangle@y,c
  3658  0013CA  0E80               	movlw	128
  3659  0013CC  6E19               	movwf	fillRectangle@w,c
  3660  0013CE  0EA0               	movlw	160
  3661  0013D0  6E1A               	movwf	fillRectangle@h,c
  3662  0013D2  C024  F01B         	movff	fillScreen@color,fillRectangle@color
  3663  0013D6  C025  F01C         	movff	fillScreen@color+1,fillRectangle@color+1
  3664  0013DA  0E00               	movlw	0
  3665  0013DC  ECA3  F004         	call	_fillRectangle
  3666  0013E0  0012               	return		;funcret
  3667  0013E2                     __end_of_fillScreen:
  3668                           	opt stack 0
  3669                           tblptru	equ	0xFF8
  3670                           tblptrh	equ	0xFF7
  3671                           tblptrl	equ	0xFF6
  3672                           tablat	equ	0xFF5
  3673                           prodh	equ	0xFF4
  3674                           prodl	equ	0xFF3
  3675                           intcon	equ	0xFF2
  3676                           intcon2	equ	0xFF1
  3677                           postinc0	equ	0xFEE
  3678                           wreg	equ	0xFE8
  3679                           postdec1	equ	0xFE5
  3680                           fsr1l	equ	0xFE1
  3681                           indf2	equ	0xFDF
  3682                           postinc2	equ	0xFDE
  3683                           postdec2	equ	0xFDD
  3684                           fsr2h	equ	0xFDA
  3685                           fsr2l	equ	0xFD9
  3686                           status	equ	0xFD8
  3687                           
  3688 ;; *************** function _fillRectangle *****************
  3689 ;; Defined at:
  3690 ;;		line 503 in file "ST7735_TFT.c"
  3691 ;; Parameters:    Size  Location     Type
  3692 ;;  x               1    wreg     unsigned char 
  3693 ;;  y               1   23[COMRAM] unsigned char 
  3694 ;;  w               1   24[COMRAM] unsigned char 
  3695 ;;  h               1   25[COMRAM] unsigned char 
  3696 ;;  color           2   26[COMRAM] unsigned int 
  3697 ;; Auto vars:     Size  Location     Type
  3698 ;;  x               1   34[COMRAM] unsigned char 
  3699 ;;  lo              1   33[COMRAM] unsigned char 
  3700 ;;  hi              1   32[COMRAM] unsigned char 
  3701 ;; Return value:  Size  Location     Type
  3702 ;;		None               void
  3703 ;; Registers used:
  3704 ;;		wreg, status,2, status,0, cstack
  3705 ;; Tracked objects:
  3706 ;;		On entry : 0/0
  3707 ;;		On exit  : 0/0
  3708 ;;		Unchanged: 0/0
  3709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3710 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3711 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3712 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3713 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3714 ;;Total ram usage:       12 bytes
  3715 ;; Hardware stack levels used:    1
  3716 ;; Hardware stack levels required when called:    6
  3717 ;; This function calls:
  3718 ;;		_setAddrWindow
  3719 ;;		_spiwrite
  3720 ;; This function is called by:
  3721 ;;		_fillScreen
  3722 ;; This function uses a non-reentrant model
  3723 ;;
  3724                           
  3725                           	psect	text14
  3726  000946                     __ptext14:
  3727                           	opt stack 0
  3728  000946                     _fillRectangle:
  3729                           	opt stack 21
  3730                           
  3731                           ;incstack = 0
  3732                           ;fillRectangle@x stored from wreg
  3733  000946  6E23               	movwf	fillRectangle@x,c
  3734                           
  3735                           ;ST7735_TFT.c: 505: unsigned char hi, lo;
  3736                           ;ST7735_TFT.c: 506: if((x >= 128) || (y >= 160))
  3737  000948  0E80               	movlw	128
  3738  00094A  6023               	cpfslt	fillRectangle@x,c
  3739  00094C  D069               	goto	l372
  3740  00094E  0E9F               	movlw	159
  3741  000950  6418               	cpfsgt	fillRectangle@y,c
  3742  000952  D001               	goto	l4007
  3743                           
  3744                           ;ST7735_TFT.c: 507: return;
  3745  000954  D065               	goto	l372
  3746  000956                     l4007:
  3747                           
  3748                           ;ST7735_TFT.c: 508: if((x + w - 1) >= 128)
  3749  000956  0EFF               	movlw	255
  3750  000958  6E1D               	movwf	??_fillRectangle& (0+255),c
  3751  00095A  0EFF               	movlw	255
  3752  00095C  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  3753  00095E  5019               	movf	fillRectangle@w,w,c
  3754  000960  C023  F01F         	movff	fillRectangle@x,??_fillRectangle+2
  3755  000964  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  3756  000966  261F               	addwf	??_fillRectangle+2,f,c
  3757  000968  0E00               	movlw	0
  3758  00096A  2220               	addwfc	??_fillRectangle+3,f,c
  3759  00096C  501D               	movf	??_fillRectangle,w,c
  3760  00096E  261F               	addwf	??_fillRectangle+2,f,c
  3761  000970  501E               	movf	??_fillRectangle+1,w,c
  3762  000972  2220               	addwfc	??_fillRectangle+3,f,c
  3763  000974  BE20               	btfsc	??_fillRectangle+3,7,c
  3764  000976  D00A               	goto	l373
  3765  000978  5020               	movf	??_fillRectangle+3,w,c
  3766  00097A  E104               	bnz	u2690
  3767  00097C  0E80               	movlw	128
  3768  00097E  5C1F               	subwf	??_fillRectangle+2,w,c
  3769  000980  A0D8               	btfss	status,0,c
  3770  000982  D004               	goto	l373
  3771  000984                     u2690:
  3772                           
  3773                           ;ST7735_TFT.c: 509: w = 128 - x;
  3774  000984  5023               	movf	fillRectangle@x,w,c
  3775  000986  0800               	sublw	0
  3776  000988  0F80               	addlw	128
  3777  00098A  6E19               	movwf	fillRectangle@w,c
  3778  00098C                     l373:
  3779                           
  3780                           ;ST7735_TFT.c: 510: if((y + h - 1) >= 160)
  3781  00098C  0EFF               	movlw	255
  3782  00098E  6E1D               	movwf	??_fillRectangle& (0+255),c
  3783  000990  0EFF               	movlw	255
  3784  000992  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  3785  000994  501A               	movf	fillRectangle@h,w,c
  3786  000996  C018  F01F         	movff	fillRectangle@y,??_fillRectangle+2
  3787  00099A  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  3788  00099C  261F               	addwf	??_fillRectangle+2,f,c
  3789  00099E  0E00               	movlw	0
  3790  0009A0  2220               	addwfc	??_fillRectangle+3,f,c
  3791  0009A2  501D               	movf	??_fillRectangle,w,c
  3792  0009A4  261F               	addwf	??_fillRectangle+2,f,c
  3793  0009A6  501E               	movf	??_fillRectangle+1,w,c
  3794  0009A8  2220               	addwfc	??_fillRectangle+3,f,c
  3795  0009AA  BE20               	btfsc	??_fillRectangle+3,7,c
  3796  0009AC  D00B               	goto	l4013
  3797  0009AE  5020               	movf	??_fillRectangle+3,w,c
  3798  0009B0  E104               	bnz	u2700
  3799  0009B2  0EA0               	movlw	160
  3800  0009B4  5C1F               	subwf	??_fillRectangle+2,w,c
  3801  0009B6  A0D8               	btfss	status,0,c
  3802  0009B8  D005               	goto	l4013
  3803  0009BA                     u2700:
  3804                           
  3805                           ;ST7735_TFT.c: 511: h = 160 - y;
  3806  0009BA  5018               	movf	fillRectangle@y,w,c
  3807  0009BC  0800               	sublw	0
  3808  0009BE  0FA0               	addlw	160
  3809  0009C0  6E1A               	movwf	fillRectangle@h,c
  3810  0009C2  D000               	goto	l4013
  3811  0009C4                     l4013:
  3812                           
  3813                           ;ST7735_TFT.c: 512: setAddrWindow(x, y, x+w-1, y+h-1);
  3814  0009C4  C018  F014         	movff	fillRectangle@y,setAddrWindow@y0
  3815  0009C8  5023               	movf	fillRectangle@x,w,c
  3816  0009CA  2419               	addwf	fillRectangle@w,w,c
  3817  0009CC  6E1D               	movwf	??_fillRectangle& (0+255),c
  3818  0009CE  041D               	decf	??_fillRectangle,w,c
  3819  0009D0  6E15               	movwf	setAddrWindow@x1,c
  3820  0009D2  5018               	movf	fillRectangle@y,w,c
  3821  0009D4  241A               	addwf	fillRectangle@h,w,c
  3822  0009D6  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  3823  0009D8  041E               	decf	??_fillRectangle+1,w,c
  3824  0009DA  6E16               	movwf	setAddrWindow@y1,c
  3825  0009DC  5023               	movf	fillRectangle@x,w,c
  3826  0009DE  ECE9  F007         	call	_setAddrWindow
  3827                           
  3828                           ;ST7735_TFT.c: 513: hi = color >> 8; lo = color;
  3829  0009E2  501C               	movf	fillRectangle@color+1,w,c
  3830  0009E4  6E21               	movwf	fillRectangle@hi,c
  3831  0009E6  C01B  F022         	movff	fillRectangle@color,fillRectangle@lo
  3832                           
  3833                           ;ST7735_TFT.c: 514: PORTDbits.RD0 = 1;
  3834  0009EA  8083               	bsf	3971,0,c	;volatile
  3835                           
  3836                           ;ST7735_TFT.c: 515: PORTDbits.RD1 = 0;
  3837  0009EC  9283               	bcf	3971,1,c	;volatile
  3838                           
  3839                           ;ST7735_TFT.c: 517: for(y=h; y>0; y--) {
  3840  0009EE  C01A  F018         	movff	fillRectangle@h,fillRectangle@y
  3841  0009F2                     l4025:
  3842  0009F2  5018               	movf	fillRectangle@y,w,c
  3843  0009F4  B4D8               	btfsc	status,2,c
  3844  0009F6  D013               	goto	l376
  3845  0009F8  D001               	goto	l375
  3846  0009FA  D011               	goto	l376
  3847  0009FC                     l375:
  3848                           
  3849                           ;ST7735_TFT.c: 518: for(x = w; x > 0; x--) {
  3850  0009FC  C019  F023         	movff	fillRectangle@w,fillRectangle@x
  3851  000A00                     l4029:
  3852  000A00  5023               	movf	fillRectangle@x,w,c
  3853  000A02  B4D8               	btfsc	status,2,c
  3854  000A04  D00A               	goto	l4039
  3855  000A06  D001               	goto	l4033
  3856  000A08  D008               	goto	l4039
  3857  000A0A                     l4033:
  3858                           
  3859                           ;ST7735_TFT.c: 519: spiwrite(hi);
  3860  000A0A  5021               	movf	fillRectangle@hi,w,c
  3861  000A0C  EC13  F00A         	call	_spiwrite
  3862                           
  3863                           ;ST7735_TFT.c: 520: spiwrite(lo);
  3864  000A10  5022               	movf	fillRectangle@lo,w,c
  3865  000A12  EC13  F00A         	call	_spiwrite
  3866  000A16  0623               	decf	fillRectangle@x,f,c
  3867  000A18  D7F3               	goto	l4029
  3868  000A1A                     l4039:
  3869  000A1A  0618               	decf	fillRectangle@y,f,c
  3870  000A1C  D7EA               	goto	l4025
  3871  000A1E                     l376:
  3872                           
  3873                           ;ST7735_TFT.c: 521: }
  3874                           ;ST7735_TFT.c: 522: }
  3875                           ;ST7735_TFT.c: 523: PORTDbits.RD1 = 1;
  3876  000A1E  8283               	bsf	3971,1,c	;volatile
  3877  000A20                     l372:
  3878  000A20  0012               	return		;funcret
  3879  000A22                     __end_of_fillRectangle:
  3880                           	opt stack 0
  3881                           tblptru	equ	0xFF8
  3882                           tblptrh	equ	0xFF7
  3883                           tblptrl	equ	0xFF6
  3884                           tablat	equ	0xFF5
  3885                           prodh	equ	0xFF4
  3886                           prodl	equ	0xFF3
  3887                           intcon	equ	0xFF2
  3888                           intcon2	equ	0xFF1
  3889                           postinc0	equ	0xFEE
  3890                           wreg	equ	0xFE8
  3891                           postdec1	equ	0xFE5
  3892                           fsr1l	equ	0xFE1
  3893                           indf2	equ	0xFDF
  3894                           postinc2	equ	0xFDE
  3895                           postdec2	equ	0xFDD
  3896                           fsr2h	equ	0xFDA
  3897                           fsr2l	equ	0xFD9
  3898                           status	equ	0xFD8
  3899                           
  3900 ;; *************** function _drawtext *****************
  3901 ;; Defined at:
  3902 ;;		line 474 in file "ST7735_TFT.c"
  3903 ;; Parameters:    Size  Location     Type
  3904 ;;  x               1    wreg     unsigned char 
  3905 ;;  y               1    0[BANK0 ] unsigned char 
  3906 ;;  _text           2    1[BANK0 ] PTR unsigned char 
  3907 ;;		 -> NULL(0), buffer(31), 
  3908 ;;  color           2    3[BANK0 ] unsigned int 
  3909 ;;  bg              2    5[BANK0 ] unsigned int 
  3910 ;;  size            1    7[BANK0 ] unsigned char 
  3911 ;; Auto vars:     Size  Location     Type
  3912 ;;  x               1    8[BANK0 ] unsigned char 
  3913 ;;  i               2   11[BANK0 ] unsigned int 
  3914 ;;  textsize        2    9[BANK0 ] unsigned int 
  3915 ;;  cursor_x        1   14[BANK0 ] unsigned char 
  3916 ;;  cursor_y        1   13[BANK0 ] unsigned char 
  3917 ;; Return value:  Size  Location     Type
  3918 ;;		None               void
  3919 ;; Registers used:
  3920 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3921 ;; Tracked objects:
  3922 ;;		On entry : 0/0
  3923 ;;		On exit  : 0/0
  3924 ;;		Unchanged: 0/0
  3925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3926 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3927 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3928 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3929 ;;      Totals:         2      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3930 ;;Total ram usage:       17 bytes
  3931 ;; Hardware stack levels used:    1
  3932 ;; Hardware stack levels required when called:    9
  3933 ;; This function calls:
  3934 ;;		_drawChar
  3935 ;;		_strlen
  3936 ;; This function is called by:
  3937 ;;		_Initialize_Screen
  3938 ;; This function uses a non-reentrant model
  3939 ;;
  3940                           
  3941                           	psect	text15
  3942  00062C                     __ptext15:
  3943                           	opt stack 0
  3944  00062C                     _drawtext:
  3945                           	opt stack 19
  3946                           
  3947                           ;incstack = 0
  3948                           ;drawtext@x stored from wreg
  3949  00062C  0100               	movlb	0	; () banked
  3950  00062E  6FF0               	movwf	drawtext@x& (0+255),b
  3951                           
  3952                           ; BSR set to: 0
  3953                           ;ST7735_TFT.c: 476: unsigned char cursor_x, cursor_y;
  3954                           ;ST7735_TFT.c: 477: unsigned int textsize, i;
  3955                           ;ST7735_TFT.c: 478: cursor_x = x, cursor_y = y;
  3956  000630  C0F0  F0F6         	movff	drawtext@x,drawtext@cursor_x
  3957                           
  3958                           ; BSR set to: 0
  3959  000634  C0E8  F0F5         	movff	drawtext@y,drawtext@cursor_y
  3960                           
  3961                           ; BSR set to: 0
  3962                           ;ST7735_TFT.c: 479: textsize = strlen(_text);
  3963  000638  C0E9  F011         	movff	drawtext@_text,strlen@s
  3964  00063C  C0EA  F012         	movff	drawtext@_text+1,strlen@s+1
  3965  000640  ECC6  F008         	call	_strlen	;wreg free
  3966  000644  C011  F0F1         	movff	?_strlen,drawtext@textsize
  3967  000648  C012  F0F2         	movff	?_strlen+1,drawtext@textsize+1
  3968                           
  3969                           ;ST7735_TFT.c: 480: for(i = 0; i < textsize; i++){
  3970  00064C  0E00               	movlw	0
  3971  00064E  0100               	movlb	0	; () banked
  3972  000650  6FF4               	movwf	(drawtext@i+1)& (0+255),b
  3973  000652  0E00               	movlw	0
  3974  000654  6FF3               	movwf	drawtext@i& (0+255),b
  3975  000656  D06B               	goto	l4083
  3976  000658                     l4057:
  3977                           
  3978                           ; BSR set to: 0
  3979                           ;ST7735_TFT.c: 481: if(wrap && ((cursor_x + size * 5) > 128)){
  3980  000658  506E               	movf	_wrap,w,c
  3981  00065A  B4D8               	btfsc	status,2,c
  3982  00065C  D038               	goto	l4073
  3983                           
  3984                           ; BSR set to: 0
  3985  00065E  0100               	movlb	0	; () banked
  3986  000660  51EF               	movf	drawtext@size& (0+255),w,b
  3987  000662  0D05               	mullw	5
  3988  000664  0100               	movlb	0	; () banked
  3989  000666  51F6               	movf	drawtext@cursor_x& (0+255),w,b
  3990  000668  6E39               	movwf	??_drawtext& (0+255),c
  3991  00066A  6A3A               	clrf	(??_drawtext+1)& (0+255),c
  3992  00066C  50F3               	movf	prodl,w,c
  3993  00066E  2639               	addwf	??_drawtext,f,c
  3994  000670  50F4               	movf	prodh,w,c
  3995  000672  223A               	addwfc	??_drawtext+1,f,c
  3996  000674  BE3A               	btfsc	??_drawtext+1,7,c
  3997  000676  D02B               	goto	l4073
  3998  000678  503A               	movf	??_drawtext+1,w,c
  3999  00067A  E104               	bnz	u2760
  4000  00067C  0E81               	movlw	129
  4001  00067E  5C39               	subwf	??_drawtext,w,c
  4002  000680  A0D8               	btfss	status,0,c
  4003  000682  D025               	goto	l4073
  4004  000684                     u2760:
  4005                           
  4006                           ; BSR set to: 0
  4007                           ;ST7735_TFT.c: 482: cursor_x = 0;
  4008  000684  0E00               	movlw	0
  4009  000686  0100               	movlb	0	; () banked
  4010  000688  6FF6               	movwf	drawtext@cursor_x& (0+255),b
  4011                           
  4012                           ; BSR set to: 0
  4013                           ;ST7735_TFT.c: 483: cursor_y = cursor_y + size * 7 + 3 ;
  4014  00068A  0100               	movlb	0	; () banked
  4015  00068C  51EF               	movf	drawtext@size& (0+255),w,b
  4016  00068E  0D07               	mullw	7
  4017  000690  50F3               	movf	prodl,w,c
  4018  000692  0100               	movlb	0	; () banked
  4019  000694  25F5               	addwf	drawtext@cursor_y& (0+255),w,b
  4020  000696  0F03               	addlw	3
  4021  000698  0100               	movlb	0	; () banked
  4022  00069A  6FF5               	movwf	drawtext@cursor_y& (0+255),b
  4023                           
  4024                           ; BSR set to: 0
  4025                           ;ST7735_TFT.c: 484: if(cursor_y > 160) cursor_y = 160;
  4026  00069C  0EA0               	movlw	160
  4027  00069E  0100               	movlb	0	; () banked
  4028  0006A0  65F5               	cpfsgt	drawtext@cursor_y& (0+255),b
  4029  0006A2  D004               	goto	l4069
  4030                           
  4031                           ; BSR set to: 0
  4032  0006A4  0EA0               	movlw	160
  4033  0006A6  0100               	movlb	0	; () banked
  4034  0006A8  6FF5               	movwf	drawtext@cursor_y& (0+255),b
  4035  0006AA  D000               	goto	l4069
  4036  0006AC                     l4069:
  4037                           
  4038                           ; BSR set to: 0
  4039                           ;ST7735_TFT.c: 485: if(_text[i] == 0x20) goto _skip; }
  4040  0006AC  0100               	movlb	0	; () banked
  4041  0006AE  51F3               	movf	drawtext@i& (0+255),w,b
  4042  0006B0  0100               	movlb	0	; () banked
  4043  0006B2  25E9               	addwf	drawtext@_text& (0+255),w,b
  4044  0006B4  6ED9               	movwf	fsr2l,c
  4045  0006B6  0100               	movlb	0	; () banked
  4046  0006B8  51F4               	movf	(drawtext@i+1)& (0+255),w,b
  4047  0006BA  0100               	movlb	0	; () banked
  4048  0006BC  21EA               	addwfc	(drawtext@_text+1)& (0+255),w,b
  4049  0006BE  6EDA               	movwf	fsr2h,c
  4050  0006C0  0E20               	movlw	32
  4051  0006C2  18DE               	xorwf	postinc2,w,c
  4052  0006C4  B4D8               	btfsc	status,2,c
  4053  0006C6  D02F               	goto	l4081
  4054  0006C8  D002               	goto	l4073
  4055                           
  4056                           ; BSR set to: 0
  4057  0006CA  D02D               	goto	l4081
  4058                           
  4059                           ; BSR set to: 0
  4060  0006CC  D000               	goto	l4073
  4061  0006CE                     l4073:
  4062                           
  4063                           ; BSR set to: 0
  4064                           ;ST7735_TFT.c: 486: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
  4065  0006CE  C0F5  F02E         	movff	drawtext@cursor_y,drawChar@y
  4066  0006D2  0100               	movlb	0	; () banked
  4067  0006D4  51F3               	movf	drawtext@i& (0+255),w,b
  4068  0006D6  0100               	movlb	0	; () banked
  4069  0006D8  25E9               	addwf	drawtext@_text& (0+255),w,b
  4070  0006DA  6ED9               	movwf	fsr2l,c
  4071  0006DC  0100               	movlb	0	; () banked
  4072  0006DE  51F4               	movf	(drawtext@i+1)& (0+255),w,b
  4073  0006E0  0100               	movlb	0	; () banked
  4074  0006E2  21EA               	addwfc	(drawtext@_text+1)& (0+255),w,b
  4075  0006E4  6EDA               	movwf	fsr2h,c
  4076  0006E6  50DF               	movf	indf2,w,c
  4077  0006E8  6E2F               	movwf	drawChar@c,c
  4078  0006EA  C0EB  F030         	movff	drawtext@color,drawChar@color
  4079  0006EE  C0EC  F031         	movff	drawtext@color+1,drawChar@color+1
  4080  0006F2  C0ED  F032         	movff	drawtext@bg,drawChar@bg
  4081  0006F6  C0EE  F033         	movff	drawtext@bg+1,drawChar@bg+1
  4082  0006FA  C0EF  F034         	movff	drawtext@size,drawChar@size
  4083  0006FE  0100               	movlb	0	; () banked
  4084  000700  51F6               	movf	drawtext@cursor_x& (0+255),w,b
  4085  000702  EC6B  F002         	call	_drawChar
  4086                           
  4087                           ;ST7735_TFT.c: 487: cursor_x = cursor_x + size * 6;
  4088  000706  0100               	movlb	0	; () banked
  4089  000708  51EF               	movf	drawtext@size& (0+255),w,b
  4090  00070A  0D06               	mullw	6
  4091  00070C  50F3               	movf	prodl,w,c
  4092  00070E  0100               	movlb	0	; () banked
  4093  000710  25F6               	addwf	drawtext@cursor_x& (0+255),w,b
  4094  000712  0100               	movlb	0	; () banked
  4095  000714  6FF6               	movwf	drawtext@cursor_x& (0+255),b
  4096                           
  4097                           ; BSR set to: 0
  4098                           ;ST7735_TFT.c: 488: if(cursor_x > 128) cursor_x = 128;
  4099  000716  0E80               	movlw	128
  4100  000718  0100               	movlb	0	; () banked
  4101  00071A  65F6               	cpfsgt	drawtext@cursor_x& (0+255),b
  4102  00071C  D004               	goto	l4081
  4103                           
  4104                           ; BSR set to: 0
  4105  00071E  0E80               	movlw	128
  4106  000720  0100               	movlb	0	; () banked
  4107  000722  6FF6               	movwf	drawtext@cursor_x& (0+255),b
  4108                           
  4109                           ; BSR set to: 0
  4110  000724  D000               	goto	l4081
  4111  000726                     l4081:
  4112                           
  4113                           ; BSR set to: 0
  4114  000726  0100               	movlb	0	; () banked
  4115  000728  4BF3               	infsnz	drawtext@i& (0+255),f,b
  4116  00072A  2BF4               	incf	(drawtext@i+1)& (0+255),f,b
  4117  00072C  D000               	goto	l4083
  4118  00072E                     l4083:
  4119                           
  4120                           ; BSR set to: 0
  4121  00072E  0100               	movlb	0	; () banked
  4122  000730  51F1               	movf	drawtext@textsize& (0+255),w,b
  4123  000732  0100               	movlb	0	; () banked
  4124  000734  5DF3               	subwf	drawtext@i& (0+255),w,b
  4125  000736  0100               	movlb	0	; () banked
  4126  000738  51F2               	movf	(drawtext@textsize+1)& (0+255),w,b
  4127  00073A  0100               	movlb	0	; () banked
  4128  00073C  59F4               	subwfb	(drawtext@i+1)& (0+255),w,b
  4129  00073E  A0D8               	btfss	status,0,c
  4130  000740  D78B               	goto	l4057
  4131                           
  4132                           ; BSR set to: 0
  4133                           
  4134                           ; BSR set to: 0
  4135  000742  0012               	return		;funcret
  4136  000744                     __end_of_drawtext:
  4137                           	opt stack 0
  4138                           tblptru	equ	0xFF8
  4139                           tblptrh	equ	0xFF7
  4140                           tblptrl	equ	0xFF6
  4141                           tablat	equ	0xFF5
  4142                           prodh	equ	0xFF4
  4143                           prodl	equ	0xFF3
  4144                           intcon	equ	0xFF2
  4145                           intcon2	equ	0xFF1
  4146                           postinc0	equ	0xFEE
  4147                           wreg	equ	0xFE8
  4148                           postdec1	equ	0xFE5
  4149                           fsr1l	equ	0xFE1
  4150                           indf2	equ	0xFDF
  4151                           postinc2	equ	0xFDE
  4152                           postdec2	equ	0xFDD
  4153                           fsr2h	equ	0xFDA
  4154                           fsr2l	equ	0xFD9
  4155                           status	equ	0xFD8
  4156                           
  4157 ;; *************** function _strlen *****************
  4158 ;; Defined at:
  4159 ;;		line 4 in file "E:\XC8\sources\common\strlen.c"
  4160 ;; Parameters:    Size  Location     Type
  4161 ;;  s               2   16[COMRAM] PTR const unsigned char 
  4162 ;;		 -> NULL(0), buffer(31), 
  4163 ;; Auto vars:     Size  Location     Type
  4164 ;;  cp              2   20[COMRAM] PTR const unsigned char 
  4165 ;;		 -> NULL(0), buffer(31), 
  4166 ;; Return value:  Size  Location     Type
  4167 ;;                  2   16[COMRAM] unsigned int 
  4168 ;; Registers used:
  4169 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4170 ;; Tracked objects:
  4171 ;;		On entry : 0/0
  4172 ;;		On exit  : 0/0
  4173 ;;		Unchanged: 0/0
  4174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4175 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4176 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4177 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4178 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4179 ;;Total ram usage:        6 bytes
  4180 ;; Hardware stack levels used:    1
  4181 ;; Hardware stack levels required when called:    3
  4182 ;; This function calls:
  4183 ;;		Nothing
  4184 ;; This function is called by:
  4185 ;;		_drawtext
  4186 ;; This function uses a non-reentrant model
  4187 ;;
  4188                           
  4189                           	psect	text16
  4190  00118C                     __ptext16:
  4191                           	opt stack 0
  4192  00118C                     _strlen:
  4193                           	opt stack 24
  4194                           
  4195                           ; BSR set to: 0
  4196                           ;incstack = 0
  4197  00118C  C011  F015         	movff	strlen@s,strlen@cp
  4198  001190  C012  F016         	movff	strlen@s+1,strlen@cp+1
  4199  001194  D003               	goto	l3997
  4200  001196                     l3995:
  4201  001196  4A15               	infsnz	strlen@cp,f,c
  4202  001198  2A16               	incf	strlen@cp+1,f,c
  4203  00119A  D000               	goto	l3997
  4204  00119C                     l3997:
  4205  00119C  C015  FFD9         	movff	strlen@cp,fsr2l
  4206  0011A0  C016  FFDA         	movff	strlen@cp+1,fsr2h
  4207  0011A4  50DF               	movf	indf2,w,c
  4208  0011A6  A4D8               	btfss	status,2,c
  4209  0011A8  D7F6               	goto	l3995
  4210  0011AA  C011  F013         	movff	strlen@s,??_strlen
  4211  0011AE  C012  F014         	movff	strlen@s+1,??_strlen+1
  4212  0011B2  1E13               	comf	??_strlen,f,c
  4213  0011B4  1E14               	comf	??_strlen+1,f,c
  4214  0011B6  4A13               	infsnz	??_strlen,f,c
  4215  0011B8  2A14               	incf	??_strlen+1,f,c
  4216  0011BA  5015               	movf	strlen@cp,w,c
  4217  0011BC  2413               	addwf	??_strlen,w,c
  4218  0011BE  6E11               	movwf	?_strlen,c
  4219  0011C0  5016               	movf	strlen@cp+1,w,c
  4220  0011C2  2014               	addwfc	??_strlen+1,w,c
  4221  0011C4  6E12               	movwf	?_strlen+1,c
  4222  0011C6  D000               	goto	l1225
  4223  0011C8                     l1225:
  4224  0011C8  0012               	return		;funcret
  4225  0011CA                     __end_of_strlen:
  4226                           	opt stack 0
  4227                           tblptru	equ	0xFF8
  4228                           tblptrh	equ	0xFF7
  4229                           tblptrl	equ	0xFF6
  4230                           tablat	equ	0xFF5
  4231                           prodh	equ	0xFF4
  4232                           prodl	equ	0xFF3
  4233                           intcon	equ	0xFF2
  4234                           intcon2	equ	0xFF1
  4235                           postinc0	equ	0xFEE
  4236                           wreg	equ	0xFE8
  4237                           postdec1	equ	0xFE5
  4238                           fsr1l	equ	0xFE1
  4239                           indf2	equ	0xFDF
  4240                           postinc2	equ	0xFDE
  4241                           postdec2	equ	0xFDD
  4242                           fsr2h	equ	0xFDA
  4243                           fsr2l	equ	0xFD9
  4244                           status	equ	0xFD8
  4245                           
  4246 ;; *************** function _drawChar *****************
  4247 ;; Defined at:
  4248 ;;		line 447 in file "ST7735_TFT.c"
  4249 ;; Parameters:    Size  Location     Type
  4250 ;;  x               1    wreg     unsigned char 
  4251 ;;  y               1   45[COMRAM] unsigned char 
  4252 ;;  c               1   46[COMRAM] unsigned char 
  4253 ;;  color           2   47[COMRAM] unsigned int 
  4254 ;;  bg              2   49[COMRAM] unsigned int 
  4255 ;;  size            1   51[COMRAM] unsigned char 
  4256 ;; Auto vars:     Size  Location     Type
  4257 ;;  x               1   53[COMRAM] unsigned char 
  4258 ;;  line            1   52[COMRAM] unsigned char 
  4259 ;;  i               1   55[COMRAM] unsigned char 
  4260 ;;  j               1   54[COMRAM] unsigned char 
  4261 ;; Return value:  Size  Location     Type
  4262 ;;		None               void
  4263 ;; Registers used:
  4264 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4265 ;; Tracked objects:
  4266 ;;		On entry : 0/0
  4267 ;;		On exit  : 0/0
  4268 ;;		Unchanged: 0/0
  4269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4270 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4271 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4272 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4273 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4274 ;;Total ram usage:       11 bytes
  4275 ;; Hardware stack levels used:    1
  4276 ;; Hardware stack levels required when called:    8
  4277 ;; This function calls:
  4278 ;;		___wmul
  4279 ;;		_drawPixel
  4280 ;;		_fillRect
  4281 ;; This function is called by:
  4282 ;;		_drawtext
  4283 ;; This function uses a non-reentrant model
  4284 ;;
  4285                           
  4286                           	psect	text17
  4287  0004D6                     __ptext17:
  4288                           	opt stack 0
  4289  0004D6                     _drawChar:
  4290                           	opt stack 19
  4291                           
  4292                           ;incstack = 0
  4293                           ;drawChar@x stored from wreg
  4294  0004D6  6E36               	movwf	drawChar@x,c
  4295                           
  4296                           ;ST7735_TFT.c: 449: char i, j;
  4297                           ;ST7735_TFT.c: 450: if((x >= 128) || (y >= 160))
  4298  0004D8  0E80               	movlw	128
  4299  0004DA  6036               	cpfslt	drawChar@x,c
  4300  0004DC  D0A6               	goto	l335
  4301  0004DE  0E9F               	movlw	159
  4302  0004E0  642E               	cpfsgt	drawChar@y,c
  4303  0004E2  D001               	goto	l3943
  4304                           
  4305                           ;ST7735_TFT.c: 451: return;
  4306  0004E4  D0A2               	goto	l335
  4307  0004E6                     l3943:
  4308                           
  4309                           ;ST7735_TFT.c: 452: if(size < 1) size = 1;
  4310  0004E6  5034               	movf	drawChar@size,w,c
  4311  0004E8  A4D8               	btfss	status,2,c
  4312  0004EA  D003               	goto	l3947
  4313  0004EC  0E01               	movlw	1
  4314  0004EE  6E34               	movwf	drawChar@size,c
  4315  0004F0  D000               	goto	l3947
  4316  0004F2                     l3947:
  4317                           
  4318                           ;ST7735_TFT.c: 453: if((c < ' ') || (c > '~'))
  4319  0004F2  0E1F               	movlw	31
  4320  0004F4  642F               	cpfsgt	drawChar@c,c
  4321  0004F6  D004               	goto	l3951
  4322  0004F8  0E7E               	movlw	126
  4323  0004FA  642F               	cpfsgt	drawChar@c,c
  4324  0004FC  D003               	goto	l337
  4325  0004FE  D000               	goto	l3951
  4326  000500                     l3951:
  4327                           
  4328                           ;ST7735_TFT.c: 454: c = '?';
  4329  000500  0E3F               	movlw	63
  4330  000502  6E2F               	movwf	drawChar@c,c
  4331  000504                     l337:
  4332                           
  4333                           ;ST7735_TFT.c: 455: for(i=0; i<5; i++ ) {
  4334  000504  0E00               	movlw	0
  4335  000506  6E38               	movwf	drawChar@i,c
  4336  000508                     l3953:
  4337  000508  0E04               	movlw	4
  4338  00050A  6438               	cpfsgt	drawChar@i,c
  4339  00050C  D001               	goto	l3957
  4340  00050E  D08D               	goto	l335
  4341  000510                     l3957:
  4342                           
  4343                           ;ST7735_TFT.c: 456: unsigned char line;
  4344                           ;ST7735_TFT.c: 457: if(c < 'S')
  4345  000510  0E53               	movlw	83
  4346  000512  602F               	cpfslt	drawChar@c,c
  4347  000514  D015               	goto	l3961
  4348                           
  4349                           ;ST7735_TFT.c: 458: line = font[(c - 32)*5 + i];
  4350  000516  0EE0               	movlw	224
  4351  000518  242F               	addwf	drawChar@c,w,c
  4352  00051A  6E11               	movwf	___wmul@multiplier,c
  4353  00051C  6A12               	clrf	___wmul@multiplier+1,c
  4354  00051E  0EFF               	movlw	255
  4355  000520  2212               	addwfc	___wmul@multiplier+1,f,c
  4356  000522  0E00               	movlw	0
  4357  000524  6E14               	movwf	___wmul@multiplicand+1,c
  4358  000526  0E05               	movlw	5
  4359  000528  6E13               	movwf	___wmul@multiplicand,c
  4360  00052A  EC9F  F009         	call	___wmul	;wreg free
  4361  00052E  5038               	movf	drawChar@i,w,c
  4362  000530  2611               	addwf	?___wmul,f,c
  4363  000532  0E00               	movlw	0
  4364  000534  2212               	addwfc	?___wmul+1,f,c
  4365  000536  0E9B               	movlw	low _font
  4366  000538  2411               	addwf	?___wmul,w,c
  4367  00053A  6EF6               	movwf	tblptrl,c
  4368  00053C  0EFD               	movlw	high _font
  4369  00053E  D014               	goto	L1
  4370  000540                     l3961:
  4371                           
  4372                           ;ST7735_TFT.c: 459: else
  4373                           ;ST7735_TFT.c: 460: line = font2[(c - 'S')*5 + i];
  4374  000540  0EAD               	movlw	173
  4375  000542  242F               	addwf	drawChar@c,w,c
  4376  000544  6E11               	movwf	___wmul@multiplier,c
  4377  000546  6A12               	clrf	___wmul@multiplier+1,c
  4378  000548  0EFF               	movlw	255
  4379  00054A  2212               	addwfc	___wmul@multiplier+1,f,c
  4380  00054C  0E00               	movlw	0
  4381  00054E  6E14               	movwf	___wmul@multiplicand+1,c
  4382  000550  0E05               	movlw	5
  4383  000552  6E13               	movwf	___wmul@multiplicand,c
  4384  000554  EC9F  F009         	call	___wmul	;wreg free
  4385  000558  5038               	movf	drawChar@i,w,c
  4386  00055A  2611               	addwf	?___wmul,f,c
  4387  00055C  0E00               	movlw	0
  4388  00055E  2212               	addwfc	?___wmul+1,f,c
  4389  000560  0E9A               	movlw	low _font2
  4390  000562  2411               	addwf	?___wmul,w,c
  4391  000564  6EF6               	movwf	tblptrl,c
  4392  000566  0EFE               	movlw	high _font2
  4393  000568                     L1:
  4394  000568  2012               	addwfc	?___wmul+1,w,c
  4395  00056A  6EF7               	movwf	tblptrh,c
  4396  00056C                     	if	0	;There are less than 3 active tblptr bytes
  4397  00056C                     	endif
  4398  00056C  0008               	tblrd		*
  4399  00056E  CFF5 F035          	movff	tablat,drawChar@line
  4400  000572  D000               	goto	l3963
  4401  000574                     l3963:
  4402                           
  4403                           ;ST7735_TFT.c: 461: for(j=0; j<7; j++, line >>= 1) {
  4404  000574  0E00               	movlw	0
  4405  000576  6E37               	movwf	drawChar@j,c
  4406  000578                     l3965:
  4407  000578  0E06               	movlw	6
  4408  00057A  6437               	cpfsgt	drawChar@j,c
  4409  00057C  D001               	goto	l344
  4410  00057E  D053               	goto	l3989
  4411  000580                     l344:
  4412                           
  4413                           ;ST7735_TFT.c: 462: if(line & 0x01) {
  4414  000580  A035               	btfss	drawChar@line,0,c
  4415  000582  D023               	goto	l3975
  4416                           
  4417                           ;ST7735_TFT.c: 463: if(size == 1) drawPixel(x+i, y+j, color);
  4418  000584  0434               	decf	drawChar@size,w,c
  4419  000586  A4D8               	btfss	status,2,c
  4420  000588  D00C               	goto	l3973
  4421  00058A  502E               	movf	drawChar@y,w,c
  4422  00058C  2437               	addwf	drawChar@j,w,c
  4423  00058E  6E18               	movwf	drawPixel@y,c
  4424  000590  C030  F019         	movff	drawChar@color,drawPixel@color
  4425  000594  C031  F01A         	movff	drawChar@color+1,drawPixel@color+1
  4426  000598  5036               	movf	drawChar@x,w,c
  4427  00059A  2438               	addwf	drawChar@i,w,c
  4428  00059C  EC72  F009         	call	_drawPixel
  4429  0005A0  D03E               	goto	l3983
  4430  0005A2                     l3973:
  4431                           
  4432                           ;ST7735_TFT.c: 464: else fillRect(x+(i*size), y+(j*size), size, size, color);
  4433  0005A2  5037               	movf	drawChar@j,w,c
  4434  0005A4  0234               	mulwf	drawChar@size,c
  4435  0005A6  50F3               	movf	prodl,w,c
  4436  0005A8  242E               	addwf	drawChar@y,w,c
  4437  0005AA  6E23               	movwf	fillRect@y,c
  4438  0005AC  C034  F024         	movff	drawChar@size,fillRect@w
  4439  0005B0  C034  F025         	movff	drawChar@size,fillRect@h
  4440  0005B4  C030  F026         	movff	drawChar@color,fillRect@color
  4441  0005B8  C031  F027         	movff	drawChar@color+1,fillRect@color+1
  4442  0005BC  5038               	movf	drawChar@i,w,c
  4443  0005BE  0234               	mulwf	drawChar@size,c
  4444  0005C0  50F3               	movf	prodl,w,c
  4445  0005C2  2436               	addwf	drawChar@x,w,c
  4446  0005C4  EC36  F008         	call	_fillRect
  4447                           
  4448                           ;ST7735_TFT.c: 465: }
  4449  0005C8  D02A               	goto	l3983
  4450  0005CA                     l3975:
  4451                           
  4452                           ;ST7735_TFT.c: 466: else if(bg != color) {
  4453  0005CA  5030               	movf	drawChar@color,w,c
  4454  0005CC  1832               	xorwf	drawChar@bg,w,c
  4455  0005CE  E104               	bnz	u2620
  4456  0005D0  5031               	movf	drawChar@color+1,w,c
  4457  0005D2  1833               	xorwf	drawChar@bg+1,w,c
  4458  0005D4  B4D8               	btfsc	status,2,c
  4459  0005D6  D023               	goto	l3983
  4460  0005D8                     u2620:
  4461                           
  4462                           ;ST7735_TFT.c: 467: if(size == 1) drawPixel(x+i, y+j, bg);
  4463  0005D8  0434               	decf	drawChar@size,w,c
  4464  0005DA  A4D8               	btfss	status,2,c
  4465  0005DC  D00C               	goto	l3981
  4466  0005DE  502E               	movf	drawChar@y,w,c
  4467  0005E0  2437               	addwf	drawChar@j,w,c
  4468  0005E2  6E18               	movwf	drawPixel@y,c
  4469  0005E4  C032  F019         	movff	drawChar@bg,drawPixel@color
  4470  0005E8  C033  F01A         	movff	drawChar@bg+1,drawPixel@color+1
  4471  0005EC  5036               	movf	drawChar@x,w,c
  4472  0005EE  2438               	addwf	drawChar@i,w,c
  4473  0005F0  EC72  F009         	call	_drawPixel
  4474  0005F4  D014               	goto	l3983
  4475  0005F6                     l3981:
  4476                           
  4477                           ;ST7735_TFT.c: 468: else fillRect(x+i*size, y+j*size, size, size, bg);
  4478  0005F6  5037               	movf	drawChar@j,w,c
  4479  0005F8  0234               	mulwf	drawChar@size,c
  4480  0005FA  50F3               	movf	prodl,w,c
  4481  0005FC  242E               	addwf	drawChar@y,w,c
  4482  0005FE  6E23               	movwf	fillRect@y,c
  4483  000600  C034  F024         	movff	drawChar@size,fillRect@w
  4484  000604  C034  F025         	movff	drawChar@size,fillRect@h
  4485  000608  C032  F026         	movff	drawChar@bg,fillRect@color
  4486  00060C  C033  F027         	movff	drawChar@bg+1,fillRect@color+1
  4487  000610  5038               	movf	drawChar@i,w,c
  4488  000612  0234               	mulwf	drawChar@size,c
  4489  000614  50F3               	movf	prodl,w,c
  4490  000616  2436               	addwf	drawChar@x,w,c
  4491  000618  EC36  F008         	call	_fillRect
  4492  00061C  D000               	goto	l3983
  4493  00061E                     l3983:
  4494  00061E  2A37               	incf	drawChar@j,f,c
  4495  000620  90D8               	bcf	status,0,c
  4496  000622  3235               	rrcf	drawChar@line,f,c
  4497  000624  D7A9               	goto	l3965
  4498  000626                     l3989:
  4499  000626  2A38               	incf	drawChar@i,f,c
  4500  000628  D76F               	goto	l3953
  4501  00062A                     l335:
  4502  00062A  0012               	return		;funcret
  4503  00062C                     __end_of_drawChar:
  4504                           	opt stack 0
  4505                           tblptru	equ	0xFF8
  4506                           tblptrh	equ	0xFF7
  4507                           tblptrl	equ	0xFF6
  4508                           tablat	equ	0xFF5
  4509                           prodh	equ	0xFF4
  4510                           prodl	equ	0xFF3
  4511                           intcon	equ	0xFF2
  4512                           intcon2	equ	0xFF1
  4513                           postinc0	equ	0xFEE
  4514                           wreg	equ	0xFE8
  4515                           postdec1	equ	0xFE5
  4516                           fsr1l	equ	0xFE1
  4517                           indf2	equ	0xFDF
  4518                           postinc2	equ	0xFDE
  4519                           postdec2	equ	0xFDD
  4520                           fsr2h	equ	0xFDA
  4521                           fsr2l	equ	0xFD9
  4522                           status	equ	0xFD8
  4523                           
  4524 ;; *************** function _fillRect *****************
  4525 ;; Defined at:
  4526 ;;		line 437 in file "ST7735_TFT.c"
  4527 ;; Parameters:    Size  Location     Type
  4528 ;;  x               1    wreg     unsigned char 
  4529 ;;  y               1   34[COMRAM] unsigned char 
  4530 ;;  w               1   35[COMRAM] unsigned char 
  4531 ;;  h               1   36[COMRAM] unsigned char 
  4532 ;;  color           2   37[COMRAM] unsigned int 
  4533 ;; Auto vars:     Size  Location     Type
  4534 ;;  x               1   42[COMRAM] unsigned char 
  4535 ;;  i               2   43[COMRAM] int 
  4536 ;; Return value:  Size  Location     Type
  4537 ;;		None               void
  4538 ;; Registers used:
  4539 ;;		wreg, status,2, status,0, cstack
  4540 ;; Tracked objects:
  4541 ;;		On entry : 0/0
  4542 ;;		On exit  : 0/0
  4543 ;;		Unchanged: 0/0
  4544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4545 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4546 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4547 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4548 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4549 ;;Total ram usage:       11 bytes
  4550 ;; Hardware stack levels used:    1
  4551 ;; Hardware stack levels required when called:    7
  4552 ;; This function calls:
  4553 ;;		_drawFastVLine
  4554 ;; This function is called by:
  4555 ;;		_drawChar
  4556 ;; This function uses a non-reentrant model
  4557 ;;
  4558                           
  4559                           	psect	text18
  4560  00106C                     __ptext18:
  4561                           	opt stack 0
  4562  00106C                     _fillRect:
  4563                           	opt stack 19
  4564                           
  4565                           ;incstack = 0
  4566                           ;fillRect@x stored from wreg
  4567  00106C  6E2B               	movwf	fillRect@x,c
  4568                           
  4569                           ;ST7735_TFT.c: 439: signed int i;
  4570                           ;ST7735_TFT.c: 441: for (i = x; i < x + w; i++)
  4571  00106E  C02B  F02C         	movff	fillRect@x,fillRect@i
  4572  001072  6A2D               	clrf	fillRect@i+1,c
  4573  001074  D00E               	goto	l3845
  4574  001076                     l3841:
  4575                           
  4576                           ;ST7735_TFT.c: 442: {
  4577                           ;ST7735_TFT.c: 443: drawFastVLine(i, y, h, color);
  4578  001076  C023  F018         	movff	fillRect@y,drawFastVLine@y
  4579  00107A  C025  F019         	movff	fillRect@h,drawFastVLine@h
  4580  00107E  C026  F01A         	movff	fillRect@color,drawFastVLine@color
  4581  001082  C027  F01B         	movff	fillRect@color+1,drawFastVLine@color+1
  4582  001086  502C               	movf	fillRect@i,w,c
  4583  001088  EC0C  F006         	call	_drawFastVLine
  4584  00108C  4A2C               	infsnz	fillRect@i,f,c
  4585  00108E  2A2D               	incf	fillRect@i+1,f,c
  4586  001090  D000               	goto	l3845
  4587  001092                     l3845:
  4588  001092  5024               	movf	fillRect@w,w,c
  4589  001094  C02B  F028         	movff	fillRect@x,??_fillRect
  4590  001098  6A29               	clrf	(??_fillRect+1)& (0+255),c
  4591  00109A  2628               	addwf	??_fillRect,f,c
  4592  00109C  0E00               	movlw	0
  4593  00109E  2229               	addwfc	??_fillRect+1,f,c
  4594  0010A0  5028               	movf	??_fillRect,w,c
  4595  0010A2  5C2C               	subwf	fillRect@i,w,c
  4596  0010A4  502D               	movf	fillRect@i+1,w,c
  4597  0010A6  0A80               	xorlw	128
  4598  0010A8  6E2A               	movwf	(??_fillRect+2)& (0+255),c
  4599  0010AA  5029               	movf	??_fillRect+1,w,c
  4600  0010AC  0A80               	xorlw	128
  4601  0010AE  582A               	subwfb	(??_fillRect+2)& (0+255),w,c
  4602  0010B0  A0D8               	btfss	status,0,c
  4603  0010B2  D7E1               	goto	l3841
  4604  0010B4  0012               	return		;funcret
  4605  0010B6                     __end_of_fillRect:
  4606                           	opt stack 0
  4607                           tblptru	equ	0xFF8
  4608                           tblptrh	equ	0xFF7
  4609                           tblptrl	equ	0xFF6
  4610                           tablat	equ	0xFF5
  4611                           prodh	equ	0xFF4
  4612                           prodl	equ	0xFF3
  4613                           intcon	equ	0xFF2
  4614                           intcon2	equ	0xFF1
  4615                           postinc0	equ	0xFEE
  4616                           wreg	equ	0xFE8
  4617                           postdec1	equ	0xFE5
  4618                           fsr1l	equ	0xFE1
  4619                           indf2	equ	0xFDF
  4620                           postinc2	equ	0xFDE
  4621                           postdec2	equ	0xFDD
  4622                           fsr2h	equ	0xFDA
  4623                           fsr2l	equ	0xFD9
  4624                           status	equ	0xFD8
  4625                           
  4626 ;; *************** function _drawFastVLine *****************
  4627 ;; Defined at:
  4628 ;;		line 416 in file "ST7735_TFT.c"
  4629 ;; Parameters:    Size  Location     Type
  4630 ;;  x               1    wreg     unsigned char 
  4631 ;;  y               1   23[COMRAM] unsigned char 
  4632 ;;  h               1   24[COMRAM] unsigned char 
  4633 ;;  color           2   25[COMRAM] unsigned int 
  4634 ;; Auto vars:     Size  Location     Type
  4635 ;;  x               1   33[COMRAM] unsigned char 
  4636 ;;  lo              1   32[COMRAM] unsigned char 
  4637 ;;  hi              1   31[COMRAM] unsigned char 
  4638 ;; Return value:  Size  Location     Type
  4639 ;;		None               void
  4640 ;; Registers used:
  4641 ;;		wreg, status,2, status,0, cstack
  4642 ;; Tracked objects:
  4643 ;;		On entry : 0/0
  4644 ;;		On exit  : 0/0
  4645 ;;		Unchanged: 0/0
  4646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4647 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4648 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4649 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4650 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4651 ;;Total ram usage:       11 bytes
  4652 ;; Hardware stack levels used:    1
  4653 ;; Hardware stack levels required when called:    6
  4654 ;; This function calls:
  4655 ;;		_setAddrWindow
  4656 ;;		_spiwrite
  4657 ;; This function is called by:
  4658 ;;		_fillRect
  4659 ;;		_fillCircleHelper
  4660 ;;		_fillCircle
  4661 ;;		_drawRect
  4662 ;; This function uses a non-reentrant model
  4663 ;;
  4664                           
  4665                           	psect	text19
  4666  000C18                     __ptext19:
  4667                           	opt stack 0
  4668  000C18                     _drawFastVLine:
  4669                           	opt stack 19
  4670                           
  4671                           ;incstack = 0
  4672                           ;drawFastVLine@x stored from wreg
  4673  000C18  6E22               	movwf	drawFastVLine@x,c
  4674                           
  4675                           ;ST7735_TFT.c: 418: unsigned char hi, lo;
  4676                           ;ST7735_TFT.c: 419: if((x >= 128) || (y >= 160))
  4677  000C1A  0E80               	movlw	128
  4678  000C1C  6022               	cpfslt	drawFastVLine@x,c
  4679  000C1E  D03F               	goto	l319
  4680  000C20  0E9F               	movlw	159
  4681  000C22  6418               	cpfsgt	drawFastVLine@y,c
  4682  000C24  D001               	goto	l3791
  4683                           
  4684                           ;ST7735_TFT.c: 420: return;
  4685  000C26  D03B               	goto	l319
  4686  000C28                     l3791:
  4687                           
  4688                           ;ST7735_TFT.c: 421: if((y + h - 1) >= 160)
  4689  000C28  0EFF               	movlw	255
  4690  000C2A  6E1C               	movwf	??_drawFastVLine& (0+255),c
  4691  000C2C  0EFF               	movlw	255
  4692  000C2E  6E1D               	movwf	(??_drawFastVLine+1)& (0+255),c
  4693  000C30  5019               	movf	drawFastVLine@h,w,c
  4694  000C32  C018  F01E         	movff	drawFastVLine@y,??_drawFastVLine+2
  4695  000C36  6A1F               	clrf	(??_drawFastVLine+3)& (0+255),c
  4696  000C38  261E               	addwf	??_drawFastVLine+2,f,c
  4697  000C3A  0E00               	movlw	0
  4698  000C3C  221F               	addwfc	??_drawFastVLine+3,f,c
  4699  000C3E  501C               	movf	??_drawFastVLine,w,c
  4700  000C40  261E               	addwf	??_drawFastVLine+2,f,c
  4701  000C42  501D               	movf	??_drawFastVLine+1,w,c
  4702  000C44  221F               	addwfc	??_drawFastVLine+3,f,c
  4703  000C46  BE1F               	btfsc	??_drawFastVLine+3,7,c
  4704  000C48  D00B               	goto	l3795
  4705  000C4A  501F               	movf	??_drawFastVLine+3,w,c
  4706  000C4C  E104               	bnz	u2460
  4707  000C4E  0EA0               	movlw	160
  4708  000C50  5C1E               	subwf	??_drawFastVLine+2,w,c
  4709  000C52  A0D8               	btfss	status,0,c
  4710  000C54  D005               	goto	l3795
  4711  000C56                     u2460:
  4712                           
  4713                           ;ST7735_TFT.c: 422: h = 160 - y;
  4714  000C56  5018               	movf	drawFastVLine@y,w,c
  4715  000C58  0800               	sublw	0
  4716  000C5A  0FA0               	addlw	160
  4717  000C5C  6E19               	movwf	drawFastVLine@h,c
  4718  000C5E  D000               	goto	l3795
  4719  000C60                     l3795:
  4720                           
  4721                           ;ST7735_TFT.c: 423: hi = color >> 8; lo = color;
  4722  000C60  501B               	movf	drawFastVLine@color+1,w,c
  4723  000C62  6E20               	movwf	drawFastVLine@hi,c
  4724  000C64  C01A  F021         	movff	drawFastVLine@color,drawFastVLine@lo
  4725                           
  4726                           ;ST7735_TFT.c: 424: setAddrWindow(x, y, x, y + h - 1);
  4727  000C68  C018  F014         	movff	drawFastVLine@y,setAddrWindow@y0
  4728  000C6C  C022  F015         	movff	drawFastVLine@x,setAddrWindow@x1
  4729  000C70  5018               	movf	drawFastVLine@y,w,c
  4730  000C72  2419               	addwf	drawFastVLine@h,w,c
  4731  000C74  6E1C               	movwf	??_drawFastVLine& (0+255),c
  4732  000C76  041C               	decf	??_drawFastVLine,w,c
  4733  000C78  6E16               	movwf	setAddrWindow@y1,c
  4734  000C7A  5022               	movf	drawFastVLine@x,w,c
  4735  000C7C  ECE9  F007         	call	_setAddrWindow
  4736                           
  4737                           ;ST7735_TFT.c: 425: PORTDbits.RD0 = 1;
  4738  000C80  8083               	bsf	3971,0,c	;volatile
  4739                           
  4740                           ;ST7735_TFT.c: 426: PORTDbits.RD1 = 0;
  4741  000C82  9283               	bcf	3971,1,c	;volatile
  4742                           
  4743                           ;ST7735_TFT.c: 428: while (h--) {
  4744  000C84  D007               	goto	l3807
  4745  000C86                     l3805:
  4746                           
  4747                           ;ST7735_TFT.c: 429: spiwrite(hi);
  4748  000C86  5020               	movf	drawFastVLine@hi,w,c
  4749  000C88  EC13  F00A         	call	_spiwrite
  4750                           
  4751                           ;ST7735_TFT.c: 430: spiwrite(lo);
  4752  000C8C  5021               	movf	drawFastVLine@lo,w,c
  4753  000C8E  EC13  F00A         	call	_spiwrite
  4754  000C92  D000               	goto	l3807
  4755  000C94                     l3807:
  4756  000C94  0619               	decf	drawFastVLine@h,f,c
  4757  000C96  2819               	incf	drawFastVLine@h,w,c
  4758  000C98  A4D8               	btfss	status,2,c
  4759  000C9A  D7F5               	goto	l3805
  4760                           
  4761                           ;ST7735_TFT.c: 431: }
  4762                           ;ST7735_TFT.c: 432: PORTDbits.RD1 = 1;
  4763  000C9C  8283               	bsf	3971,1,c	;volatile
  4764  000C9E                     l319:
  4765  000C9E  0012               	return		;funcret
  4766  000CA0                     __end_of_drawFastVLine:
  4767                           	opt stack 0
  4768                           tblptru	equ	0xFF8
  4769                           tblptrh	equ	0xFF7
  4770                           tblptrl	equ	0xFF6
  4771                           tablat	equ	0xFF5
  4772                           prodh	equ	0xFF4
  4773                           prodl	equ	0xFF3
  4774                           intcon	equ	0xFF2
  4775                           intcon2	equ	0xFF1
  4776                           postinc0	equ	0xFEE
  4777                           wreg	equ	0xFE8
  4778                           postdec1	equ	0xFE5
  4779                           fsr1l	equ	0xFE1
  4780                           indf2	equ	0xFDF
  4781                           postinc2	equ	0xFDE
  4782                           postdec2	equ	0xFDD
  4783                           fsr2h	equ	0xFDA
  4784                           fsr2l	equ	0xFD9
  4785                           status	equ	0xFD8
  4786                           
  4787 ;; *************** function _drawPixel *****************
  4788 ;; Defined at:
  4789 ;;		line 407 in file "ST7735_TFT.c"
  4790 ;; Parameters:    Size  Location     Type
  4791 ;;  x               1    wreg     unsigned char 
  4792 ;;  y               1   23[COMRAM] unsigned char 
  4793 ;;  color           2   24[COMRAM] unsigned int 
  4794 ;; Auto vars:     Size  Location     Type
  4795 ;;  x               1   26[COMRAM] unsigned char 
  4796 ;; Return value:  Size  Location     Type
  4797 ;;		None               void
  4798 ;; Registers used:
  4799 ;;		wreg, status,2, status,0, cstack
  4800 ;; Tracked objects:
  4801 ;;		On entry : 0/0
  4802 ;;		On exit  : 0/0
  4803 ;;		Unchanged: 0/0
  4804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4805 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4806 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4807 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4808 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4809 ;;Total ram usage:        4 bytes
  4810 ;; Hardware stack levels used:    1
  4811 ;; Hardware stack levels required when called:    6
  4812 ;; This function calls:
  4813 ;;		_setAddrWindow
  4814 ;;		_write_data
  4815 ;; This function is called by:
  4816 ;;		_drawChar
  4817 ;;		_drawCircle
  4818 ;;		_drawCircleHelper
  4819 ;; This function uses a non-reentrant model
  4820 ;;
  4821                           
  4822                           	psect	text20
  4823  0012E4                     __ptext20:
  4824                           	opt stack 0
  4825  0012E4                     _drawPixel:
  4826                           	opt stack 20
  4827                           
  4828                           ;incstack = 0
  4829                           ;drawPixel@x stored from wreg
  4830  0012E4  6E1B               	movwf	drawPixel@x,c
  4831                           
  4832                           ;ST7735_TFT.c: 409: if((x >= 128) || (y >= 160))
  4833  0012E6  0E80               	movlw	128
  4834  0012E8  601B               	cpfslt	drawPixel@x,c
  4835  0012EA  D013               	goto	l313
  4836  0012EC  0E9F               	movlw	159
  4837  0012EE  6418               	cpfsgt	drawPixel@y,c
  4838  0012F0  D001               	goto	l3833
  4839                           
  4840                           ;ST7735_TFT.c: 410: return;
  4841  0012F2  D00F               	goto	l313
  4842  0012F4                     l3833:
  4843                           
  4844                           ;ST7735_TFT.c: 411: setAddrWindow(x,y,x+1,y+1);
  4845  0012F4  C018  F014         	movff	drawPixel@y,setAddrWindow@y0
  4846  0012F8  281B               	incf	drawPixel@x,w,c
  4847  0012FA  6E15               	movwf	setAddrWindow@x1,c
  4848  0012FC  2818               	incf	drawPixel@y,w,c
  4849  0012FE  6E16               	movwf	setAddrWindow@y1,c
  4850  001300  501B               	movf	drawPixel@x,w,c
  4851  001302  ECE9  F007         	call	_setAddrWindow
  4852                           
  4853                           ;ST7735_TFT.c: 412: write_data(color >> 8);
  4854  001306  501A               	movf	drawPixel@color+1,w,c
  4855  001308  EC41  F00A         	call	_write_data
  4856                           
  4857                           ;ST7735_TFT.c: 413: write_data(color & 0xFF);
  4858  00130C  5019               	movf	drawPixel@color,w,c
  4859  00130E  EC41  F00A         	call	_write_data
  4860  001312                     l313:
  4861  001312  0012               	return		;funcret
  4862  001314                     __end_of_drawPixel:
  4863                           	opt stack 0
  4864                           tblptru	equ	0xFF8
  4865                           tblptrh	equ	0xFF7
  4866                           tblptrl	equ	0xFF6
  4867                           tablat	equ	0xFF5
  4868                           prodh	equ	0xFF4
  4869                           prodl	equ	0xFF3
  4870                           intcon	equ	0xFF2
  4871                           intcon2	equ	0xFF1
  4872                           postinc0	equ	0xFEE
  4873                           wreg	equ	0xFE8
  4874                           postdec1	equ	0xFE5
  4875                           fsr1l	equ	0xFE1
  4876                           indf2	equ	0xFDF
  4877                           postinc2	equ	0xFDE
  4878                           postdec2	equ	0xFDD
  4879                           fsr2h	equ	0xFDA
  4880                           fsr2l	equ	0xFD9
  4881                           status	equ	0xFD8
  4882                           
  4883 ;; *************** function _setAddrWindow *****************
  4884 ;; Defined at:
  4885 ;;		line 392 in file "ST7735_TFT.c"
  4886 ;; Parameters:    Size  Location     Type
  4887 ;;  x0              1    wreg     unsigned char 
  4888 ;;  y0              1   19[COMRAM] unsigned char 
  4889 ;;  x1              1   20[COMRAM] unsigned char 
  4890 ;;  y1              1   21[COMRAM] unsigned char 
  4891 ;; Auto vars:     Size  Location     Type
  4892 ;;  x0              1   22[COMRAM] unsigned char 
  4893 ;; Return value:  Size  Location     Type
  4894 ;;		None               void
  4895 ;; Registers used:
  4896 ;;		wreg, status,2, status,0, cstack
  4897 ;; Tracked objects:
  4898 ;;		On entry : 0/0
  4899 ;;		On exit  : 0/0
  4900 ;;		Unchanged: 0/0
  4901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4902 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4903 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4904 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4905 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4906 ;;Total ram usage:        4 bytes
  4907 ;; Hardware stack levels used:    1
  4908 ;; Hardware stack levels required when called:    5
  4909 ;; This function calls:
  4910 ;;		_write_command
  4911 ;;		_write_data
  4912 ;; This function is called by:
  4913 ;;		_drawPixel
  4914 ;;		_drawFastVLine
  4915 ;;		_fillRectangle
  4916 ;;		_drawFastHLine
  4917 ;; This function uses a non-reentrant model
  4918 ;;
  4919                           
  4920                           	psect	text21
  4921  000FD2                     __ptext21:
  4922                           	opt stack 0
  4923  000FD2                     _setAddrWindow:
  4924                           	opt stack 21
  4925                           
  4926                           ;incstack = 0
  4927                           ;setAddrWindow@x0 stored from wreg
  4928  000FD2  6E17               	movwf	setAddrWindow@x0,c
  4929                           
  4930                           ;ST7735_TFT.c: 394: write_command(0x2A);
  4931  000FD4  0E2A               	movlw	42
  4932  000FD6  EC49  F00A         	call	_write_command
  4933                           
  4934                           ;ST7735_TFT.c: 395: write_data(0);
  4935  000FDA  0E00               	movlw	0
  4936  000FDC  EC41  F00A         	call	_write_data
  4937                           
  4938                           ;ST7735_TFT.c: 396: write_data(x0 + colstart);
  4939  000FE0  5017               	movf	setAddrWindow@x0,w,c
  4940  000FE2  2456               	addwf	_colstart,w,c
  4941  000FE4  EC41  F00A         	call	_write_data
  4942                           
  4943                           ;ST7735_TFT.c: 397: write_data(0);
  4944  000FE8  0E00               	movlw	0
  4945  000FEA  EC41  F00A         	call	_write_data
  4946                           
  4947                           ;ST7735_TFT.c: 398: write_data(x1 + colstart);
  4948  000FEE  5015               	movf	setAddrWindow@x1,w,c
  4949  000FF0  2456               	addwf	_colstart,w,c
  4950  000FF2  EC41  F00A         	call	_write_data
  4951                           
  4952                           ;ST7735_TFT.c: 399: write_command(0x2B);
  4953  000FF6  0E2B               	movlw	43
  4954  000FF8  EC49  F00A         	call	_write_command
  4955                           
  4956                           ;ST7735_TFT.c: 400: write_data(0);
  4957  000FFC  0E00               	movlw	0
  4958  000FFE  EC41  F00A         	call	_write_data
  4959                           
  4960                           ;ST7735_TFT.c: 401: write_data(y0 + rowstart);
  4961  001002  5014               	movf	setAddrWindow@y0,w,c
  4962  001004  245F               	addwf	_rowstart,w,c
  4963  001006  EC41  F00A         	call	_write_data
  4964                           
  4965                           ;ST7735_TFT.c: 402: write_data(0);
  4966  00100A  0E00               	movlw	0
  4967  00100C  EC41  F00A         	call	_write_data
  4968                           
  4969                           ;ST7735_TFT.c: 403: write_data(y1 + rowstart);
  4970  001010  5016               	movf	setAddrWindow@y1,w,c
  4971  001012  245F               	addwf	_rowstart,w,c
  4972  001014  EC41  F00A         	call	_write_data
  4973                           
  4974                           ;ST7735_TFT.c: 404: write_command(0x2C);
  4975  001018  0E2C               	movlw	44
  4976  00101A  EC49  F00A         	call	_write_command
  4977  00101E  0012               	return		;funcret
  4978  001020                     __end_of_setAddrWindow:
  4979                           	opt stack 0
  4980                           tblptru	equ	0xFF8
  4981                           tblptrh	equ	0xFF7
  4982                           tblptrl	equ	0xFF6
  4983                           tablat	equ	0xFF5
  4984                           prodh	equ	0xFF4
  4985                           prodl	equ	0xFF3
  4986                           intcon	equ	0xFF2
  4987                           intcon2	equ	0xFF1
  4988                           postinc0	equ	0xFEE
  4989                           wreg	equ	0xFE8
  4990                           postdec1	equ	0xFE5
  4991                           fsr1l	equ	0xFE1
  4992                           indf2	equ	0xFDF
  4993                           postinc2	equ	0xFDE
  4994                           postdec2	equ	0xFDD
  4995                           fsr2h	equ	0xFDA
  4996                           fsr2l	equ	0xFD9
  4997                           status	equ	0xFD8
  4998                           
  4999 ;; *************** function _TFT_GreenTab_Initialize *****************
  5000 ;; Defined at:
  5001 ;;		line 644 in file "ST7735_TFT.c"
  5002 ;; Parameters:    Size  Location     Type
  5003 ;;		None
  5004 ;; Auto vars:     Size  Location     Type
  5005 ;;		None
  5006 ;; Return value:  Size  Location     Type
  5007 ;;		None               void
  5008 ;; Registers used:
  5009 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5010 ;; Tracked objects:
  5011 ;;		On entry : 0/0
  5012 ;;		On exit  : 0/0
  5013 ;;		Unchanged: 0/0
  5014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5015 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5016 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5017 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5018 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5019 ;;Total ram usage:        0 bytes
  5020 ;; Hardware stack levels used:    1
  5021 ;; Hardware stack levels required when called:    6
  5022 ;; This function calls:
  5023 ;;		_Rcmd1
  5024 ;;		_Rcmd2red
  5025 ;;		_Rcmd3
  5026 ;;		_write_command
  5027 ;;		_write_data
  5028 ;; This function is called by:
  5029 ;;		_Initialize_Screen
  5030 ;; This function uses a non-reentrant model
  5031 ;;
  5032                           
  5033                           	psect	text22
  5034  001314                     __ptext22:
  5035                           	opt stack 0
  5036  001314                     _TFT_GreenTab_Initialize:
  5037                           	opt stack 22
  5038                           
  5039                           ;ST7735_TFT.c: 646: PORTDbits.RD1 = 1;
  5040                           
  5041                           ;incstack = 0
  5042  001314  8283               	bsf	3971,1,c	;volatile
  5043                           
  5044                           ;ST7735_TFT.c: 647: PORTDbits.RD0 = 0;
  5045  001316  9083               	bcf	3971,0,c	;volatile
  5046                           
  5047                           ;ST7735_TFT.c: 649: SSPSTAT=0x80;
  5048  001318  0E80               	movlw	128
  5049  00131A  6EC7               	movwf	4039,c	;volatile
  5050                           
  5051                           ;ST7735_TFT.c: 650: SSPCON1=0x30;
  5052  00131C  0E30               	movlw	48
  5053  00131E  6EC6               	movwf	4038,c	;volatile
  5054                           
  5055                           ;ST7735_TFT.c: 653: Rcmd1();
  5056  001320  ECA2  F003         	call	_Rcmd1	;wreg free
  5057                           
  5058                           ;ST7735_TFT.c: 654: Rcmd2red();
  5059  001324  ECE5  F008         	call	_Rcmd2red	;wreg free
  5060                           
  5061                           ;ST7735_TFT.c: 655: Rcmd3();
  5062  001328  EC2A  F004         	call	_Rcmd3	;wreg free
  5063                           
  5064                           ;ST7735_TFT.c: 656: write_command(0x36);
  5065  00132C  0E36               	movlw	54
  5066  00132E  EC49  F00A         	call	_write_command
  5067                           
  5068                           ;ST7735_TFT.c: 657: write_data(0xC0);
  5069  001332  0EC0               	movlw	192
  5070  001334  EC41  F00A         	call	_write_data
  5071                           
  5072                           ;ST7735_TFT.c: 658: _tft_type = 1;
  5073  001338  0E01               	movlw	1
  5074  00133A  6E50               	movwf	__tft_type,c
  5075  00133C  0012               	return		;funcret
  5076  00133E                     __end_of_TFT_GreenTab_Initialize:
  5077                           	opt stack 0
  5078                           tblptru	equ	0xFF8
  5079                           tblptrh	equ	0xFF7
  5080                           tblptrl	equ	0xFF6
  5081                           tablat	equ	0xFF5
  5082                           prodh	equ	0xFF4
  5083                           prodl	equ	0xFF3
  5084                           intcon	equ	0xFF2
  5085                           intcon2	equ	0xFF1
  5086                           postinc0	equ	0xFEE
  5087                           wreg	equ	0xFE8
  5088                           postdec1	equ	0xFE5
  5089                           fsr1l	equ	0xFE1
  5090                           indf2	equ	0xFDF
  5091                           postinc2	equ	0xFDE
  5092                           postdec2	equ	0xFDD
  5093                           fsr2h	equ	0xFDA
  5094                           fsr2l	equ	0xFD9
  5095                           status	equ	0xFD8
  5096                           
  5097 ;; *************** function _Rcmd3 *****************
  5098 ;; Defined at:
  5099 ;;		line 338 in file "ST7735_TFT.c"
  5100 ;; Parameters:    Size  Location     Type
  5101 ;;		None
  5102 ;; Auto vars:     Size  Location     Type
  5103 ;;		None
  5104 ;; Return value:  Size  Location     Type
  5105 ;;		None               void
  5106 ;; Registers used:
  5107 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5108 ;; Tracked objects:
  5109 ;;		On entry : 0/0
  5110 ;;		On exit  : 0/0
  5111 ;;		Unchanged: 0/0
  5112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5113 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5114 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5115 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5116 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5117 ;;Total ram usage:        0 bytes
  5118 ;; Hardware stack levels used:    1
  5119 ;; Hardware stack levels required when called:    5
  5120 ;; This function calls:
  5121 ;;		_delay_ms
  5122 ;;		_write_command
  5123 ;;		_write_data
  5124 ;; This function is called by:
  5125 ;;		_TFT_GreenTab_Initialize
  5126 ;;		_TFT_BlackTab_Initialize
  5127 ;; This function uses a non-reentrant model
  5128 ;;
  5129                           
  5130                           	psect	text23
  5131  000854                     __ptext23:
  5132                           	opt stack 0
  5133  000854                     _Rcmd3:
  5134                           	opt stack 22
  5135                           
  5136                           ;ST7735_TFT.c: 340: write_command(0xE0);
  5137                           
  5138                           ;incstack = 0
  5139  000854  0EE0               	movlw	224
  5140  000856  EC49  F00A         	call	_write_command
  5141                           
  5142                           ;ST7735_TFT.c: 341: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
  5143  00085A  0E02               	movlw	2
  5144  00085C  EC41  F00A         	call	_write_data
  5145  000860  0E1C               	movlw	28
  5146  000862  EC41  F00A         	call	_write_data
  5147  000866  0E07               	movlw	7
  5148  000868  EC41  F00A         	call	_write_data
  5149  00086C  0E12               	movlw	18
  5150  00086E  EC41  F00A         	call	_write_data
  5151                           
  5152                           ;ST7735_TFT.c: 342: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
  5153  000872  0E37               	movlw	55
  5154  000874  EC41  F00A         	call	_write_data
  5155  000878  0E32               	movlw	50
  5156  00087A  EC41  F00A         	call	_write_data
  5157  00087E  0E29               	movlw	41
  5158  000880  EC41  F00A         	call	_write_data
  5159  000884  0E2D               	movlw	45
  5160  000886  EC41  F00A         	call	_write_data
  5161                           
  5162                           ;ST7735_TFT.c: 343: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
  5163  00088A  0E29               	movlw	41
  5164  00088C  EC41  F00A         	call	_write_data
  5165  000890  0E25               	movlw	37
  5166  000892  EC41  F00A         	call	_write_data
  5167  000896  0E2B               	movlw	43
  5168  000898  EC41  F00A         	call	_write_data
  5169  00089C  0E39               	movlw	57
  5170  00089E  EC41  F00A         	call	_write_data
  5171                           
  5172                           ;ST7735_TFT.c: 344: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
  5173  0008A2  0E00               	movlw	0
  5174  0008A4  EC41  F00A         	call	_write_data
  5175  0008A8  0E01               	movlw	1
  5176  0008AA  EC41  F00A         	call	_write_data
  5177  0008AE  0E03               	movlw	3
  5178  0008B0  EC41  F00A         	call	_write_data
  5179  0008B4  0E10               	movlw	16
  5180  0008B6  EC41  F00A         	call	_write_data
  5181                           
  5182                           ;ST7735_TFT.c: 345: write_command(0xE1);
  5183  0008BA  0EE1               	movlw	225
  5184  0008BC  EC49  F00A         	call	_write_command
  5185                           
  5186                           ;ST7735_TFT.c: 346: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
  5187  0008C0  0E03               	movlw	3
  5188  0008C2  EC41  F00A         	call	_write_data
  5189  0008C6  0E1D               	movlw	29
  5190  0008C8  EC41  F00A         	call	_write_data
  5191  0008CC  0E07               	movlw	7
  5192  0008CE  EC41  F00A         	call	_write_data
  5193  0008D2  0E06               	movlw	6
  5194  0008D4  EC41  F00A         	call	_write_data
  5195                           
  5196                           ;ST7735_TFT.c: 347: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
  5197  0008D8  0E2E               	movlw	46
  5198  0008DA  EC41  F00A         	call	_write_data
  5199  0008DE  0E2C               	movlw	44
  5200  0008E0  EC41  F00A         	call	_write_data
  5201  0008E4  0E29               	movlw	41
  5202  0008E6  EC41  F00A         	call	_write_data
  5203  0008EA  0E2D               	movlw	45
  5204  0008EC  EC41  F00A         	call	_write_data
  5205                           
  5206                           ;ST7735_TFT.c: 348: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
  5207  0008F0  0E2E               	movlw	46
  5208  0008F2  EC41  F00A         	call	_write_data
  5209  0008F6  0E2E               	movlw	46
  5210  0008F8  EC41  F00A         	call	_write_data
  5211  0008FC  0E37               	movlw	55
  5212  0008FE  EC41  F00A         	call	_write_data
  5213  000902  0E3F               	movlw	63
  5214  000904  EC41  F00A         	call	_write_data
  5215                           
  5216                           ;ST7735_TFT.c: 349: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
  5217  000908  0E00               	movlw	0
  5218  00090A  EC41  F00A         	call	_write_data
  5219  00090E  0E00               	movlw	0
  5220  000910  EC41  F00A         	call	_write_data
  5221  000914  0E02               	movlw	2
  5222  000916  EC41  F00A         	call	_write_data
  5223  00091A  0E10               	movlw	16
  5224  00091C  EC41  F00A         	call	_write_data
  5225                           
  5226                           ;ST7735_TFT.c: 350: write_command(0x13);
  5227  000920  0E13               	movlw	19
  5228  000922  EC49  F00A         	call	_write_command
  5229                           
  5230                           ;ST7735_TFT.c: 351: delay_ms(10);
  5231  000926  0E00               	movlw	0
  5232  000928  6E18               	movwf	delay_ms@ms+1,c
  5233  00092A  0E0A               	movlw	10
  5234  00092C  6E17               	movwf	delay_ms@ms,c
  5235  00092E  ECC0  F007         	call	_delay_ms	;wreg free
  5236                           
  5237                           ;ST7735_TFT.c: 352: write_command(0x29);
  5238  000932  0E29               	movlw	41
  5239  000934  EC49  F00A         	call	_write_command
  5240                           
  5241                           ;ST7735_TFT.c: 353: delay_ms(100);
  5242  000938  0E00               	movlw	0
  5243  00093A  6E18               	movwf	delay_ms@ms+1,c
  5244  00093C  0E64               	movlw	100
  5245  00093E  6E17               	movwf	delay_ms@ms,c
  5246  000940  ECC0  F007         	call	_delay_ms	;wreg free
  5247  000944  0012               	return		;funcret
  5248  000946                     __end_of_Rcmd3:
  5249                           	opt stack 0
  5250                           tblptru	equ	0xFF8
  5251                           tblptrh	equ	0xFF7
  5252                           tblptrl	equ	0xFF6
  5253                           tablat	equ	0xFF5
  5254                           prodh	equ	0xFF4
  5255                           prodl	equ	0xFF3
  5256                           intcon	equ	0xFF2
  5257                           intcon2	equ	0xFF1
  5258                           postinc0	equ	0xFEE
  5259                           wreg	equ	0xFE8
  5260                           postdec1	equ	0xFE5
  5261                           fsr1l	equ	0xFE1
  5262                           indf2	equ	0xFDF
  5263                           postinc2	equ	0xFDE
  5264                           postdec2	equ	0xFDD
  5265                           fsr2h	equ	0xFDA
  5266                           fsr2l	equ	0xFD9
  5267                           status	equ	0xFD8
  5268                           
  5269 ;; *************** function _Rcmd2red *****************
  5270 ;; Defined at:
  5271 ;;		line 328 in file "ST7735_TFT.c"
  5272 ;; Parameters:    Size  Location     Type
  5273 ;;		None
  5274 ;; Auto vars:     Size  Location     Type
  5275 ;;		None
  5276 ;; Return value:  Size  Location     Type
  5277 ;;		None               void
  5278 ;; Registers used:
  5279 ;;		wreg, status,2, cstack
  5280 ;; Tracked objects:
  5281 ;;		On entry : 0/0
  5282 ;;		On exit  : 0/0
  5283 ;;		Unchanged: 0/0
  5284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5285 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5286 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5287 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5288 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5289 ;;Total ram usage:        0 bytes
  5290 ;; Hardware stack levels used:    1
  5291 ;; Hardware stack levels required when called:    5
  5292 ;; This function calls:
  5293 ;;		_write_command
  5294 ;;		_write_data
  5295 ;; This function is called by:
  5296 ;;		_TFT_GreenTab_Initialize
  5297 ;; This function uses a non-reentrant model
  5298 ;;
  5299                           
  5300                           	psect	text24
  5301  0011CA                     __ptext24:
  5302                           	opt stack 0
  5303  0011CA                     _Rcmd2red:
  5304                           	opt stack 22
  5305                           
  5306                           ;ST7735_TFT.c: 330: write_command(0x2A);
  5307                           
  5308                           ;incstack = 0
  5309  0011CA  0E2A               	movlw	42
  5310  0011CC  EC49  F00A         	call	_write_command
  5311                           
  5312                           ;ST7735_TFT.c: 331: write_data(0x00); write_data(0x00);
  5313  0011D0  0E00               	movlw	0
  5314  0011D2  EC41  F00A         	call	_write_data
  5315  0011D6  0E00               	movlw	0
  5316  0011D8  EC41  F00A         	call	_write_data
  5317                           
  5318                           ;ST7735_TFT.c: 332: write_data(0x00); write_data(0x7F);
  5319  0011DC  0E00               	movlw	0
  5320  0011DE  EC41  F00A         	call	_write_data
  5321  0011E2  0E7F               	movlw	127
  5322  0011E4  EC41  F00A         	call	_write_data
  5323                           
  5324                           ;ST7735_TFT.c: 333: write_command(0x2B);
  5325  0011E8  0E2B               	movlw	43
  5326  0011EA  EC49  F00A         	call	_write_command
  5327                           
  5328                           ;ST7735_TFT.c: 334: write_data(0x00); write_data(0x00);
  5329  0011EE  0E00               	movlw	0
  5330  0011F0  EC41  F00A         	call	_write_data
  5331  0011F4  0E00               	movlw	0
  5332  0011F6  EC41  F00A         	call	_write_data
  5333                           
  5334                           ;ST7735_TFT.c: 335: write_data(0x00); write_data(0x9F);
  5335  0011FA  0E00               	movlw	0
  5336  0011FC  EC41  F00A         	call	_write_data
  5337  001200  0E9F               	movlw	159
  5338  001202  EC41  F00A         	call	_write_data
  5339  001206  0012               	return		;funcret
  5340  001208                     __end_of_Rcmd2red:
  5341                           	opt stack 0
  5342                           tblptru	equ	0xFF8
  5343                           tblptrh	equ	0xFF7
  5344                           tblptrl	equ	0xFF6
  5345                           tablat	equ	0xFF5
  5346                           prodh	equ	0xFF4
  5347                           prodl	equ	0xFF3
  5348                           intcon	equ	0xFF2
  5349                           intcon2	equ	0xFF1
  5350                           postinc0	equ	0xFEE
  5351                           wreg	equ	0xFE8
  5352                           postdec1	equ	0xFE5
  5353                           fsr1l	equ	0xFE1
  5354                           indf2	equ	0xFDF
  5355                           postinc2	equ	0xFDE
  5356                           postdec2	equ	0xFDD
  5357                           fsr2h	equ	0xFDA
  5358                           fsr2l	equ	0xFD9
  5359                           status	equ	0xFD8
  5360                           
  5361 ;; *************** function _Rcmd1 *****************
  5362 ;; Defined at:
  5363 ;;		line 281 in file "ST7735_TFT.c"
  5364 ;; Parameters:    Size  Location     Type
  5365 ;;		None
  5366 ;; Auto vars:     Size  Location     Type
  5367 ;;		None
  5368 ;; Return value:  Size  Location     Type
  5369 ;;		None               void
  5370 ;; Registers used:
  5371 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5372 ;; Tracked objects:
  5373 ;;		On entry : 0/0
  5374 ;;		On exit  : 0/0
  5375 ;;		Unchanged: 0/0
  5376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5377 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5378 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5379 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5380 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5381 ;;Total ram usage:        0 bytes
  5382 ;; Hardware stack levels used:    1
  5383 ;; Hardware stack levels required when called:    5
  5384 ;; This function calls:
  5385 ;;		_delay_ms
  5386 ;;		_write_command
  5387 ;;		_write_data
  5388 ;; This function is called by:
  5389 ;;		_TFT_GreenTab_Initialize
  5390 ;;		_TFT_BlackTab_Initialize
  5391 ;; This function uses a non-reentrant model
  5392 ;;
  5393                           
  5394                           	psect	text25
  5395  000744                     __ptext25:
  5396                           	opt stack 0
  5397  000744                     _Rcmd1:
  5398                           	opt stack 22
  5399                           
  5400                           ;ST7735_TFT.c: 283: write_command(0x01);
  5401                           
  5402                           ;incstack = 0
  5403  000744  0E01               	movlw	1
  5404  000746  EC49  F00A         	call	_write_command
  5405                           
  5406                           ;ST7735_TFT.c: 284: delay_ms(150);
  5407  00074A  0E00               	movlw	0
  5408  00074C  6E18               	movwf	delay_ms@ms+1,c
  5409  00074E  0E96               	movlw	150
  5410  000750  6E17               	movwf	delay_ms@ms,c
  5411  000752  ECC0  F007         	call	_delay_ms	;wreg free
  5412                           
  5413                           ;ST7735_TFT.c: 285: write_command(0x11);
  5414  000756  0E11               	movlw	17
  5415  000758  EC49  F00A         	call	_write_command
  5416                           
  5417                           ;ST7735_TFT.c: 286: delay_ms(500);
  5418  00075C  0E01               	movlw	1
  5419  00075E  6E18               	movwf	delay_ms@ms+1,c
  5420  000760  0EF4               	movlw	244
  5421  000762  6E17               	movwf	delay_ms@ms,c
  5422  000764  ECC0  F007         	call	_delay_ms	;wreg free
  5423                           
  5424                           ;ST7735_TFT.c: 287: write_command(0xB1);
  5425  000768  0EB1               	movlw	177
  5426  00076A  EC49  F00A         	call	_write_command
  5427                           
  5428                           ;ST7735_TFT.c: 288: write_data(0x01);
  5429  00076E  0E01               	movlw	1
  5430  000770  EC41  F00A         	call	_write_data
  5431                           
  5432                           ;ST7735_TFT.c: 289: write_data(0x2C);
  5433  000774  0E2C               	movlw	44
  5434  000776  EC41  F00A         	call	_write_data
  5435                           
  5436                           ;ST7735_TFT.c: 290: write_data(0x2D);
  5437  00077A  0E2D               	movlw	45
  5438  00077C  EC41  F00A         	call	_write_data
  5439                           
  5440                           ;ST7735_TFT.c: 291: write_command(0xB2);
  5441  000780  0EB2               	movlw	178
  5442  000782  EC49  F00A         	call	_write_command
  5443                           
  5444                           ;ST7735_TFT.c: 292: write_data(0x01);
  5445  000786  0E01               	movlw	1
  5446  000788  EC41  F00A         	call	_write_data
  5447                           
  5448                           ;ST7735_TFT.c: 293: write_data(0x2C);
  5449  00078C  0E2C               	movlw	44
  5450  00078E  EC41  F00A         	call	_write_data
  5451                           
  5452                           ;ST7735_TFT.c: 294: write_data(0x2D);
  5453  000792  0E2D               	movlw	45
  5454  000794  EC41  F00A         	call	_write_data
  5455                           
  5456                           ;ST7735_TFT.c: 295: write_command(0xB3);
  5457  000798  0EB3               	movlw	179
  5458  00079A  EC49  F00A         	call	_write_command
  5459                           
  5460                           ;ST7735_TFT.c: 296: write_data(0x01);
  5461  00079E  0E01               	movlw	1
  5462  0007A0  EC41  F00A         	call	_write_data
  5463                           
  5464                           ;ST7735_TFT.c: 297: write_data(0x2C);
  5465  0007A4  0E2C               	movlw	44
  5466  0007A6  EC41  F00A         	call	_write_data
  5467                           
  5468                           ;ST7735_TFT.c: 298: write_data(0x2D);
  5469  0007AA  0E2D               	movlw	45
  5470  0007AC  EC41  F00A         	call	_write_data
  5471                           
  5472                           ;ST7735_TFT.c: 299: write_data(0x01);
  5473  0007B0  0E01               	movlw	1
  5474  0007B2  EC41  F00A         	call	_write_data
  5475                           
  5476                           ;ST7735_TFT.c: 300: write_data(0x2C);
  5477  0007B6  0E2C               	movlw	44
  5478  0007B8  EC41  F00A         	call	_write_data
  5479                           
  5480                           ;ST7735_TFT.c: 301: write_data(0x2D);
  5481  0007BC  0E2D               	movlw	45
  5482  0007BE  EC41  F00A         	call	_write_data
  5483                           
  5484                           ;ST7735_TFT.c: 302: write_command(0xB4);
  5485  0007C2  0EB4               	movlw	180
  5486  0007C4  EC49  F00A         	call	_write_command
  5487                           
  5488                           ;ST7735_TFT.c: 303: write_data(0x07);
  5489  0007C8  0E07               	movlw	7
  5490  0007CA  EC41  F00A         	call	_write_data
  5491                           
  5492                           ;ST7735_TFT.c: 304: write_command(0xC0);
  5493  0007CE  0EC0               	movlw	192
  5494  0007D0  EC49  F00A         	call	_write_command
  5495                           
  5496                           ;ST7735_TFT.c: 305: write_data(0xA2);
  5497  0007D4  0EA2               	movlw	162
  5498  0007D6  EC41  F00A         	call	_write_data
  5499                           
  5500                           ;ST7735_TFT.c: 306: write_data(0x02);
  5501  0007DA  0E02               	movlw	2
  5502  0007DC  EC41  F00A         	call	_write_data
  5503                           
  5504                           ;ST7735_TFT.c: 307: write_data(0x84);
  5505  0007E0  0E84               	movlw	132
  5506  0007E2  EC41  F00A         	call	_write_data
  5507                           
  5508                           ;ST7735_TFT.c: 308: write_command(0xC1);
  5509  0007E6  0EC1               	movlw	193
  5510  0007E8  EC49  F00A         	call	_write_command
  5511                           
  5512                           ;ST7735_TFT.c: 309: write_data(0xC5);
  5513  0007EC  0EC5               	movlw	197
  5514  0007EE  EC41  F00A         	call	_write_data
  5515                           
  5516                           ;ST7735_TFT.c: 310: write_command(0xC2);
  5517  0007F2  0EC2               	movlw	194
  5518  0007F4  EC49  F00A         	call	_write_command
  5519                           
  5520                           ;ST7735_TFT.c: 311: write_data(0x0A);
  5521  0007F8  0E0A               	movlw	10
  5522  0007FA  EC41  F00A         	call	_write_data
  5523                           
  5524                           ;ST7735_TFT.c: 312: write_data(0x00);
  5525  0007FE  0E00               	movlw	0
  5526  000800  EC41  F00A         	call	_write_data
  5527                           
  5528                           ;ST7735_TFT.c: 313: write_command(0xC3);
  5529  000804  0EC3               	movlw	195
  5530  000806  EC49  F00A         	call	_write_command
  5531                           
  5532                           ;ST7735_TFT.c: 314: write_data(0x8A);
  5533  00080A  0E8A               	movlw	138
  5534  00080C  EC41  F00A         	call	_write_data
  5535                           
  5536                           ;ST7735_TFT.c: 315: write_data(0x2A);
  5537  000810  0E2A               	movlw	42
  5538  000812  EC41  F00A         	call	_write_data
  5539                           
  5540                           ;ST7735_TFT.c: 316: write_command(0xC4);
  5541  000816  0EC4               	movlw	196
  5542  000818  EC49  F00A         	call	_write_command
  5543                           
  5544                           ;ST7735_TFT.c: 317: write_data(0x8A);
  5545  00081C  0E8A               	movlw	138
  5546  00081E  EC41  F00A         	call	_write_data
  5547                           
  5548                           ;ST7735_TFT.c: 318: write_data(0xEE);
  5549  000822  0EEE               	movlw	238
  5550  000824  EC41  F00A         	call	_write_data
  5551                           
  5552                           ;ST7735_TFT.c: 319: write_command(0xC5);
  5553  000828  0EC5               	movlw	197
  5554  00082A  EC49  F00A         	call	_write_command
  5555                           
  5556                           ;ST7735_TFT.c: 320: write_data(0x0E);
  5557  00082E  0E0E               	movlw	14
  5558  000830  EC41  F00A         	call	_write_data
  5559                           
  5560                           ;ST7735_TFT.c: 321: write_command(0x20);
  5561  000834  0E20               	movlw	32
  5562  000836  EC49  F00A         	call	_write_command
  5563                           
  5564                           ;ST7735_TFT.c: 322: write_command(0x36);
  5565  00083A  0E36               	movlw	54
  5566  00083C  EC49  F00A         	call	_write_command
  5567                           
  5568                           ;ST7735_TFT.c: 323: write_data(0xC8);
  5569  000840  0EC8               	movlw	200
  5570  000842  EC41  F00A         	call	_write_data
  5571                           
  5572                           ;ST7735_TFT.c: 324: write_command(0x3A);
  5573  000846  0E3A               	movlw	58
  5574  000848  EC49  F00A         	call	_write_command
  5575                           
  5576                           ;ST7735_TFT.c: 325: write_data(0x05);
  5577  00084C  0E05               	movlw	5
  5578  00084E  EC41  F00A         	call	_write_data
  5579  000852  0012               	return		;funcret
  5580  000854                     __end_of_Rcmd1:
  5581                           	opt stack 0
  5582                           tblptru	equ	0xFF8
  5583                           tblptrh	equ	0xFF7
  5584                           tblptrl	equ	0xFF6
  5585                           tablat	equ	0xFF5
  5586                           prodh	equ	0xFF4
  5587                           prodl	equ	0xFF3
  5588                           intcon	equ	0xFF2
  5589                           intcon2	equ	0xFF1
  5590                           postinc0	equ	0xFEE
  5591                           wreg	equ	0xFE8
  5592                           postdec1	equ	0xFE5
  5593                           fsr1l	equ	0xFE1
  5594                           indf2	equ	0xFDF
  5595                           postinc2	equ	0xFDE
  5596                           postdec2	equ	0xFDD
  5597                           fsr2h	equ	0xFDA
  5598                           fsr2l	equ	0xFD9
  5599                           status	equ	0xFD8
  5600                           
  5601 ;; *************** function _write_data *****************
  5602 ;; Defined at:
  5603 ;;		line 209 in file "ST7735_TFT.c"
  5604 ;; Parameters:    Size  Location     Type
  5605 ;;  data_           1    wreg     unsigned char 
  5606 ;; Auto vars:     Size  Location     Type
  5607 ;;  data_           1   18[COMRAM] unsigned char 
  5608 ;; Return value:  Size  Location     Type
  5609 ;;		None               void
  5610 ;; Registers used:
  5611 ;;		wreg, status,2, cstack
  5612 ;; Tracked objects:
  5613 ;;		On entry : 0/0
  5614 ;;		On exit  : 0/0
  5615 ;;		Unchanged: 0/0
  5616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5617 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5618 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5619 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5620 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5621 ;;Total ram usage:        1 bytes
  5622 ;; Hardware stack levels used:    1
  5623 ;; Hardware stack levels required when called:    4
  5624 ;; This function calls:
  5625 ;;		_spiwrite
  5626 ;; This function is called by:
  5627 ;;		_Rcmd1
  5628 ;;		_Rcmd2red
  5629 ;;		_Rcmd3
  5630 ;;		_setAddrWindow
  5631 ;;		_drawPixel
  5632 ;;		_TFT_GreenTab_Initialize
  5633 ;;		_Bcmd
  5634 ;;		_setScrollDefinition
  5635 ;;		_Rcmd2green
  5636 ;;		_VerticalScroll
  5637 ;; This function uses a non-reentrant model
  5638 ;;
  5639                           
  5640                           	psect	text26
  5641  001482                     __ptext26:
  5642                           	opt stack 0
  5643  001482                     _write_data:
  5644                           	opt stack 21
  5645                           
  5646                           ;incstack = 0
  5647                           ;write_data@data_ stored from wreg
  5648  001482  6E13               	movwf	write_data@data_,c
  5649                           
  5650                           ;ST7735_TFT.c: 211: PORTDbits.RD1 = 0;
  5651  001484  9283               	bcf	3971,1,c	;volatile
  5652                           
  5653                           ;ST7735_TFT.c: 212: PORTDbits.RD0 = 1;
  5654  001486  8083               	bsf	3971,0,c	;volatile
  5655                           
  5656                           ;ST7735_TFT.c: 213: spiwrite(data_);
  5657  001488  5013               	movf	write_data@data_,w,c
  5658  00148A  EC13  F00A         	call	_spiwrite
  5659                           
  5660                           ;ST7735_TFT.c: 214: PORTDbits.RD1 = 1;
  5661  00148E  8283               	bsf	3971,1,c	;volatile
  5662  001490  0012               	return		;funcret
  5663  001492                     __end_of_write_data:
  5664                           	opt stack 0
  5665                           tblptru	equ	0xFF8
  5666                           tblptrh	equ	0xFF7
  5667                           tblptrl	equ	0xFF6
  5668                           tablat	equ	0xFF5
  5669                           prodh	equ	0xFF4
  5670                           prodl	equ	0xFF3
  5671                           intcon	equ	0xFF2
  5672                           intcon2	equ	0xFF1
  5673                           postinc0	equ	0xFEE
  5674                           wreg	equ	0xFE8
  5675                           postdec1	equ	0xFE5
  5676                           fsr1l	equ	0xFE1
  5677                           indf2	equ	0xFDF
  5678                           postinc2	equ	0xFDE
  5679                           postdec2	equ	0xFDD
  5680                           fsr2h	equ	0xFDA
  5681                           fsr2l	equ	0xFD9
  5682                           status	equ	0xFD8
  5683                           
  5684 ;; *************** function _write_command *****************
  5685 ;; Defined at:
  5686 ;;		line 198 in file "ST7735_TFT.c"
  5687 ;; Parameters:    Size  Location     Type
  5688 ;;  cmd_            1    wreg     unsigned char 
  5689 ;; Auto vars:     Size  Location     Type
  5690 ;;  cmd_            1   18[COMRAM] unsigned char 
  5691 ;; Return value:  Size  Location     Type
  5692 ;;		None               void
  5693 ;; Registers used:
  5694 ;;		wreg, status,2, cstack
  5695 ;; Tracked objects:
  5696 ;;		On entry : 0/0
  5697 ;;		On exit  : 0/0
  5698 ;;		Unchanged: 0/0
  5699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5700 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5701 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5702 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5703 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5704 ;;Total ram usage:        1 bytes
  5705 ;; Hardware stack levels used:    1
  5706 ;; Hardware stack levels required when called:    4
  5707 ;; This function calls:
  5708 ;;		_spiwrite
  5709 ;; This function is called by:
  5710 ;;		_Rcmd1
  5711 ;;		_Rcmd2red
  5712 ;;		_Rcmd3
  5713 ;;		_setAddrWindow
  5714 ;;		_TFT_GreenTab_Initialize
  5715 ;;		_Bcmd
  5716 ;;		_setScrollDefinition
  5717 ;;		_Rcmd2green
  5718 ;;		_VerticalScroll
  5719 ;; This function uses a non-reentrant model
  5720 ;;
  5721                           
  5722                           	psect	text27
  5723  001492                     __ptext27:
  5724                           	opt stack 0
  5725  001492                     _write_command:
  5726                           	opt stack 21
  5727                           
  5728                           ;incstack = 0
  5729                           ;write_command@cmd_ stored from wreg
  5730  001492  6E13               	movwf	write_command@cmd_,c
  5731                           
  5732                           ;ST7735_TFT.c: 200: PORTDbits.RD1 = 0;
  5733  001494  9283               	bcf	3971,1,c	;volatile
  5734                           
  5735                           ;ST7735_TFT.c: 202: PORTDbits.RD0 = 0;
  5736  001496  9083               	bcf	3971,0,c	;volatile
  5737                           
  5738                           ;ST7735_TFT.c: 203: spiwrite(cmd_);
  5739  001498  5013               	movf	write_command@cmd_,w,c
  5740  00149A  EC13  F00A         	call	_spiwrite
  5741                           
  5742                           ;ST7735_TFT.c: 205: PORTDbits.RD1 = 1;
  5743  00149E  8283               	bsf	3971,1,c	;volatile
  5744  0014A0  0012               	return		;funcret
  5745  0014A2                     __end_of_write_command:
  5746                           	opt stack 0
  5747                           tblptru	equ	0xFF8
  5748                           tblptrh	equ	0xFF7
  5749                           tblptrl	equ	0xFF6
  5750                           tablat	equ	0xFF5
  5751                           prodh	equ	0xFF4
  5752                           prodl	equ	0xFF3
  5753                           intcon	equ	0xFF2
  5754                           intcon2	equ	0xFF1
  5755                           postinc0	equ	0xFEE
  5756                           wreg	equ	0xFE8
  5757                           postdec1	equ	0xFE5
  5758                           fsr1l	equ	0xFE1
  5759                           indf2	equ	0xFDF
  5760                           postinc2	equ	0xFDE
  5761                           postdec2	equ	0xFDD
  5762                           fsr2h	equ	0xFDA
  5763                           fsr2l	equ	0xFD9
  5764                           status	equ	0xFD8
  5765                           
  5766 ;; *************** function _spiwrite *****************
  5767 ;; Defined at:
  5768 ;;		line 189 in file "ST7735_TFT.c"
  5769 ;; Parameters:    Size  Location     Type
  5770 ;;  spidata         1    wreg     unsigned char 
  5771 ;; Auto vars:     Size  Location     Type
  5772 ;;  spidata         1   17[COMRAM] unsigned char 
  5773 ;;  x               1   16[COMRAM] unsigned char 
  5774 ;; Return value:  Size  Location     Type
  5775 ;;		None               void
  5776 ;; Registers used:
  5777 ;;		wreg
  5778 ;; Tracked objects:
  5779 ;;		On entry : 0/0
  5780 ;;		On exit  : 0/0
  5781 ;;		Unchanged: 0/0
  5782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5783 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5784 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5785 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5786 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5787 ;;Total ram usage:        2 bytes
  5788 ;; Hardware stack levels used:    1
  5789 ;; Hardware stack levels required when called:    3
  5790 ;; This function calls:
  5791 ;;		Nothing
  5792 ;; This function is called by:
  5793 ;;		_write_command
  5794 ;;		_write_data
  5795 ;;		_drawFastVLine
  5796 ;;		_fillRectangle
  5797 ;;		_drawFastHLine
  5798 ;; This function uses a non-reentrant model
  5799 ;;
  5800                           
  5801                           	psect	text28
  5802  001426                     __ptext28:
  5803                           	opt stack 0
  5804  001426                     _spiwrite:
  5805                           	opt stack 23
  5806                           
  5807                           ;incstack = 0
  5808                           ;spiwrite@spidata stored from wreg
  5809  001426  6E12               	movwf	spiwrite@spidata,c
  5810                           
  5811                           ;ST7735_TFT.c: 191: char x;
  5812                           ;ST7735_TFT.c: 192: PIR1bits.SSPIF = 0;
  5813  001428  969E               	bcf	3998,3,c	;volatile
  5814                           
  5815                           ;ST7735_TFT.c: 193: x = SSPBUF;
  5816  00142A  CFC9 F011          	movff	4041,spiwrite@x	;volatile
  5817                           
  5818                           ;ST7735_TFT.c: 194: SSPBUF = spidata;
  5819  00142E  C012  FFC9         	movff	spiwrite@spidata,4041	;volatile
  5820                           
  5821                           ;ST7735_TFT.c: 195: while (!SSPSTATbits.BF);
  5822  001432  D000               	goto	l269
  5823  001434                     l269:
  5824  001434  A0C7               	btfss	4039,0,c	;volatile
  5825  001436  D7FE               	goto	l269
  5826  001438  0012               	return		;funcret
  5827  00143A                     __end_of_spiwrite:
  5828                           	opt stack 0
  5829                           tblptru	equ	0xFF8
  5830                           tblptrh	equ	0xFF7
  5831                           tblptrl	equ	0xFF6
  5832                           tablat	equ	0xFF5
  5833                           prodh	equ	0xFF4
  5834                           prodl	equ	0xFF3
  5835                           intcon	equ	0xFF2
  5836                           intcon2	equ	0xFF1
  5837                           postinc0	equ	0xFEE
  5838                           wreg	equ	0xFE8
  5839                           postdec1	equ	0xFE5
  5840                           fsr1l	equ	0xFE1
  5841                           indf2	equ	0xFDF
  5842                           postinc2	equ	0xFDE
  5843                           postdec2	equ	0xFDD
  5844                           fsr2h	equ	0xFDA
  5845                           fsr2l	equ	0xFD9
  5846                           status	equ	0xFD8
  5847                           
  5848 ;; *************** function _LCD_Reset *****************
  5849 ;; Defined at:
  5850 ;;		line 217 in file "ST7735_TFT.c"
  5851 ;; Parameters:    Size  Location     Type
  5852 ;;		None
  5853 ;; Auto vars:     Size  Location     Type
  5854 ;;		None
  5855 ;; Return value:  Size  Location     Type
  5856 ;;		None               void
  5857 ;; Registers used:
  5858 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5859 ;; Tracked objects:
  5860 ;;		On entry : 0/0
  5861 ;;		On exit  : 0/0
  5862 ;;		Unchanged: 0/0
  5863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5864 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5865 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5866 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5867 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5868 ;;Total ram usage:        0 bytes
  5869 ;; Hardware stack levels used:    1
  5870 ;; Hardware stack levels required when called:    5
  5871 ;; This function calls:
  5872 ;;		_delay_ms
  5873 ;; This function is called by:
  5874 ;;		_Initialize_Screen
  5875 ;; This function uses a non-reentrant model
  5876 ;;
  5877                           
  5878                           	psect	text29
  5879  00143A                     __ptext29:
  5880                           	opt stack 0
  5881  00143A                     _LCD_Reset:
  5882                           	opt stack 23
  5883                           
  5884                           ;ST7735_TFT.c: 219: PORTDbits.RD2 = 0;
  5885                           
  5886                           ;incstack = 0
  5887  00143A  9483               	bcf	3971,2,c	;volatile
  5888                           
  5889                           ;ST7735_TFT.c: 220: delay_ms(100);
  5890  00143C  0E00               	movlw	0
  5891  00143E  6E18               	movwf	delay_ms@ms+1,c
  5892  001440  0E64               	movlw	100
  5893  001442  6E17               	movwf	delay_ms@ms,c
  5894  001444  ECC0  F007         	call	_delay_ms	;wreg free
  5895                           
  5896                           ;ST7735_TFT.c: 221: PORTDbits.RD2 = 1;
  5897  001448  8483               	bsf	3971,2,c	;volatile
  5898  00144A  0012               	return		;funcret
  5899  00144C                     __end_of_LCD_Reset:
  5900                           	opt stack 0
  5901                           tblptru	equ	0xFF8
  5902                           tblptrh	equ	0xFF7
  5903                           tblptrl	equ	0xFF6
  5904                           tablat	equ	0xFF5
  5905                           prodh	equ	0xFF4
  5906                           prodl	equ	0xFF3
  5907                           intcon	equ	0xFF2
  5908                           intcon2	equ	0xFF1
  5909                           postinc0	equ	0xFEE
  5910                           wreg	equ	0xFE8
  5911                           postdec1	equ	0xFE5
  5912                           fsr1l	equ	0xFE1
  5913                           indf2	equ	0xFDF
  5914                           postinc2	equ	0xFDE
  5915                           postdec2	equ	0xFDD
  5916                           fsr2h	equ	0xFDA
  5917                           fsr2l	equ	0xFD9
  5918                           status	equ	0xFD8
  5919                           
  5920 ;; *************** function _delay_ms *****************
  5921 ;; Defined at:
  5922 ;;		line 64 in file "ST7735_TFT.c"
  5923 ;; Parameters:    Size  Location     Type
  5924 ;;  ms              2   22[COMRAM] int 
  5925 ;; Auto vars:     Size  Location     Type
  5926 ;;  count           2   26[COMRAM] int 
  5927 ;; Return value:  Size  Location     Type
  5928 ;;		None               void
  5929 ;; Registers used:
  5930 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5931 ;; Tracked objects:
  5932 ;;		On entry : 0/0
  5933 ;;		On exit  : 0/0
  5934 ;;		Unchanged: 0/0
  5935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5936 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5937 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5938 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5939 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5940 ;;Total ram usage:        6 bytes
  5941 ;; Hardware stack levels used:    1
  5942 ;; Hardware stack levels required when called:    4
  5943 ;; This function calls:
  5944 ;;		___wmul
  5945 ;; This function is called by:
  5946 ;;		_LCD_Reset
  5947 ;;		_Rcmd1
  5948 ;;		_Rcmd3
  5949 ;;		_Bcmd
  5950 ;; This function uses a non-reentrant model
  5951 ;;
  5952                           
  5953                           	psect	text30
  5954  000F80                     __ptext30:
  5955                           	opt stack 0
  5956  000F80                     _delay_ms:
  5957                           	opt stack 22
  5958                           
  5959                           ;ST7735_TFT.c: 70: int count;
  5960                           ;ST7735_TFT.c: 71: count = 8000000/4000/8 * ms;
  5961                           
  5962                           ;incstack = 0
  5963  000F80  C017  F011         	movff	delay_ms@ms,___wmul@multiplier
  5964  000F84  C018  F012         	movff	delay_ms@ms+1,___wmul@multiplier+1
  5965  000F88  0E00               	movlw	0
  5966  000F8A  6E14               	movwf	___wmul@multiplicand+1,c
  5967  000F8C  0EFA               	movlw	250
  5968  000F8E  6E13               	movwf	___wmul@multiplicand,c
  5969  000F90  EC9F  F009         	call	___wmul	;wreg free
  5970  000F94  C011  F01B         	movff	?___wmul,delay_ms@count
  5971  000F98  C012  F01C         	movff	?___wmul+1,delay_ms@count+1
  5972                           
  5973                           ;ST7735_TFT.c: 72: count = (0xffff - count);
  5974  000F9C  C01B  F019         	movff	delay_ms@count,??_delay_ms
  5975  000FA0  C01C  F01A         	movff	delay_ms@count+1,??_delay_ms+1
  5976  000FA4  1E19               	comf	??_delay_ms,f,c
  5977  000FA6  1E1A               	comf	??_delay_ms+1,f,c
  5978  000FA8  4A19               	infsnz	??_delay_ms,f,c
  5979  000FAA  2A1A               	incf	??_delay_ms+1,f,c
  5980  000FAC  0EFF               	movlw	255
  5981  000FAE  2419               	addwf	??_delay_ms,w,c
  5982  000FB0  6E1B               	movwf	delay_ms@count,c
  5983  000FB2  0EFF               	movlw	255
  5984  000FB4  201A               	addwfc	??_delay_ms+1,w,c
  5985  000FB6  6E1C               	movwf	delay_ms@count+1,c
  5986                           
  5987                           ;ST7735_TFT.c: 74: T3CON = 0xb8;
  5988  000FB8  0EB8               	movlw	184
  5989  000FBA  6EB1               	movwf	4017,c	;volatile
  5990                           
  5991                           ;ST7735_TFT.c: 76: TMR3L = count & 0x00ff;
  5992  000FBC  C01B  FFB2         	movff	delay_ms@count,4018	;volatile
  5993                           
  5994                           ;ST7735_TFT.c: 77: TMR3H = count >> 8;
  5995  000FC0  501C               	movf	delay_ms@count+1,w,c
  5996  000FC2  6EB3               	movwf	4019,c	;volatile
  5997                           
  5998                           ;ST7735_TFT.c: 79: PIR2bits.TMR3IF = 0;
  5999  000FC4  92A1               	bcf	4001,1,c	;volatile
  6000                           
  6001                           ;ST7735_TFT.c: 80: T3CONbits.TMR3ON = 1;
  6002  000FC6  80B1               	bsf	4017,0,c	;volatile
  6003                           
  6004                           ;ST7735_TFT.c: 82: while (PIR2bits.TMR3IF == 0);
  6005  000FC8  D000               	goto	l259
  6006  000FCA                     l259:
  6007  000FCA  A2A1               	btfss	4001,1,c	;volatile
  6008  000FCC  D7FE               	goto	l259
  6009                           
  6010                           ;ST7735_TFT.c: 83: T3CONbits.TMR3ON = 0;
  6011  000FCE  90B1               	bcf	4017,0,c	;volatile
  6012  000FD0  0012               	return		;funcret
  6013  000FD2                     __end_of_delay_ms:
  6014                           	opt stack 0
  6015                           tblptru	equ	0xFF8
  6016                           tblptrh	equ	0xFF7
  6017                           tblptrl	equ	0xFF6
  6018                           tablat	equ	0xFF5
  6019                           prodh	equ	0xFF4
  6020                           prodl	equ	0xFF3
  6021                           intcon	equ	0xFF2
  6022                           intcon2	equ	0xFF1
  6023                           postinc0	equ	0xFEE
  6024                           wreg	equ	0xFE8
  6025                           postdec1	equ	0xFE5
  6026                           fsr1l	equ	0xFE1
  6027                           indf2	equ	0xFDF
  6028                           postinc2	equ	0xFDE
  6029                           postdec2	equ	0xFDD
  6030                           fsr2h	equ	0xFDA
  6031                           fsr2l	equ	0xFD9
  6032                           status	equ	0xFD8
  6033                           
  6034 ;; *************** function ___wmul *****************
  6035 ;; Defined at:
  6036 ;;		line 15 in file "E:\XC8\sources\common\Umul16.c"
  6037 ;; Parameters:    Size  Location     Type
  6038 ;;  multiplier      2   16[COMRAM] unsigned int 
  6039 ;;  multiplicand    2   18[COMRAM] unsigned int 
  6040 ;; Auto vars:     Size  Location     Type
  6041 ;;  product         2   20[COMRAM] unsigned int 
  6042 ;; Return value:  Size  Location     Type
  6043 ;;                  2   16[COMRAM] unsigned int 
  6044 ;; Registers used:
  6045 ;;		wreg, status,2, status,0, prodl, prodh
  6046 ;; Tracked objects:
  6047 ;;		On entry : 0/0
  6048 ;;		On exit  : 0/0
  6049 ;;		Unchanged: 0/0
  6050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6051 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6052 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6053 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6054 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6055 ;;Total ram usage:        6 bytes
  6056 ;; Hardware stack levels used:    1
  6057 ;; Hardware stack levels required when called:    3
  6058 ;; This function calls:
  6059 ;;		Nothing
  6060 ;; This function is called by:
  6061 ;;		_delay_ms
  6062 ;;		_drawChar
  6063 ;;		_main
  6064 ;;		_printf
  6065 ;; This function uses a non-reentrant model
  6066 ;;
  6067                           
  6068                           	psect	text31
  6069  00133E                     __ptext31:
  6070                           	opt stack 0
  6071  00133E                     ___wmul:
  6072                           	opt stack 26
  6073                           
  6074                           ;incstack = 0
  6075  00133E  5011               	movf	___wmul@multiplier,w,c
  6076  001340  0213               	mulwf	___wmul@multiplicand,c
  6077  001342  CFF3 F015          	movff	prodl,___wmul@product
  6078  001346  CFF4 F016          	movff	prodh,___wmul@product+1
  6079  00134A  5011               	movf	___wmul@multiplier,w,c
  6080  00134C  0214               	mulwf	___wmul@multiplicand+1,c
  6081  00134E  50F3               	movf	prodl,w,c
  6082  001350  2616               	addwf	___wmul@product+1,f,c
  6083  001352  5012               	movf	___wmul@multiplier+1,w,c
  6084  001354  0213               	mulwf	___wmul@multiplicand,c
  6085  001356  50F3               	movf	prodl,w,c
  6086  001358  2616               	addwf	___wmul@product+1,f,c
  6087  00135A  C015  F011         	movff	___wmul@product,?___wmul
  6088  00135E  C016  F012         	movff	___wmul@product+1,?___wmul+1
  6089  001362  D000               	goto	l663
  6090  001364                     l663:
  6091  001364  0012               	return		;funcret
  6092  001366                     __end_of___wmul:
  6093                           	opt stack 0
  6094                           tblptru	equ	0xFF8
  6095                           tblptrh	equ	0xFF7
  6096                           tblptrl	equ	0xFF6
  6097                           tablat	equ	0xFF5
  6098                           prodh	equ	0xFF4
  6099                           prodl	equ	0xFF3
  6100                           intcon	equ	0xFF2
  6101                           intcon2	equ	0xFF1
  6102                           postinc0	equ	0xFEE
  6103                           wreg	equ	0xFE8
  6104                           postdec1	equ	0xFE5
  6105                           fsr1l	equ	0xFE1
  6106                           indf2	equ	0xFDF
  6107                           postinc2	equ	0xFDE
  6108                           postdec2	equ	0xFDD
  6109                           fsr2h	equ	0xFDA
  6110                           fsr2l	equ	0xFD9
  6111                           status	equ	0xFD8
  6112                           
  6113 ;; *************** function _I2C_Init *****************
  6114 ;; Defined at:
  6115 ;;		line 14 in file "I2C.c"
  6116 ;; Parameters:    Size  Location     Type
  6117 ;;  c               4   16[COMRAM] unsigned long 
  6118 ;; Auto vars:     Size  Location     Type
  6119 ;;		None
  6120 ;; Return value:  Size  Location     Type
  6121 ;;		None               void
  6122 ;; Registers used:
  6123 ;;		wreg, cstack
  6124 ;; Tracked objects:
  6125 ;;		On entry : 0/0
  6126 ;;		On exit  : 0/0
  6127 ;;		Unchanged: 0/0
  6128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6129 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6130 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6131 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6132 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6133 ;;Total ram usage:        4 bytes
  6134 ;; Hardware stack levels used:    1
  6135 ;; Hardware stack levels required when called:    4
  6136 ;; This function calls:
  6137 ;;		_i2cHighScl
  6138 ;;		_i2cHighSda
  6139 ;; This function is called by:
  6140 ;;		_Do_Init
  6141 ;; This function uses a non-reentrant model
  6142 ;;
  6143                           
  6144                           	psect	text32
  6145  0014C8                     __ptext32:
  6146                           	opt stack 0
  6147  0014C8                     _I2C_Init:
  6148                           	opt stack 25
  6149                           
  6150                           ;I2C.c: 16: i2cHighScl();
  6151                           
  6152                           ;incstack = 0
  6153  0014C8  EC58  F00A         	call	_i2cHighScl	;wreg free
  6154                           
  6155                           ;I2C.c: 17: i2cHighSda();
  6156  0014CC  EC77  F00A         	call	_i2cHighSda	;wreg free
  6157  0014D0  0012               	return		;funcret
  6158  0014D2                     __end_of_I2C_Init:
  6159                           	opt stack 0
  6160                           tblptru	equ	0xFF8
  6161                           tblptrh	equ	0xFF7
  6162                           tblptrl	equ	0xFF6
  6163                           tablat	equ	0xFF5
  6164                           prodh	equ	0xFF4
  6165                           prodl	equ	0xFF3
  6166                           intcon	equ	0xFF2
  6167                           intcon2	equ	0xFF1
  6168                           postinc0	equ	0xFEE
  6169                           wreg	equ	0xFE8
  6170                           postdec1	equ	0xFE5
  6171                           fsr1l	equ	0xFE1
  6172                           indf2	equ	0xFDF
  6173                           postinc2	equ	0xFDE
  6174                           postdec2	equ	0xFDD
  6175                           fsr2h	equ	0xFDA
  6176                           fsr2l	equ	0xFD9
  6177                           status	equ	0xFD8
  6178                           
  6179 ;; *************** function _DS1621_Init *****************
  6180 ;; Defined at:
  6181 ;;		line 21 in file "I2C_Support.c"
  6182 ;; Parameters:    Size  Location     Type
  6183 ;;		None
  6184 ;; Auto vars:     Size  Location     Type
  6185 ;;  Device          1   21[COMRAM] unsigned char 
  6186 ;; Return value:  Size  Location     Type
  6187 ;;		None               void
  6188 ;; Registers used:
  6189 ;;		wreg, status,2, status,0, cstack
  6190 ;; Tracked objects:
  6191 ;;		On entry : 0/0
  6192 ;;		On exit  : 0/0
  6193 ;;		Unchanged: 0/0
  6194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6195 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6196 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6197 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6198 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6199 ;;Total ram usage:        1 bytes
  6200 ;; Hardware stack levels used:    1
  6201 ;; Hardware stack levels required when called:    6
  6202 ;; This function calls:
  6203 ;;		_I2C_Write_Cmd_Only
  6204 ;;		_I2C_Write_Cmd_Write_Data
  6205 ;; This function is called by:
  6206 ;;		_Do_Init
  6207 ;; This function uses a non-reentrant model
  6208 ;;
  6209                           
  6210                           	psect	text33
  6211  0013A8                     __ptext33:
  6212                           	opt stack 0
  6213  0013A8                     _DS1621_Init:
  6214                           	opt stack 23
  6215                           
  6216                           ;I2C_Support.c: 23: char Device = 0x48;
  6217                           
  6218                           ;incstack = 0
  6219  0013A8  0E48               	movlw	72
  6220  0013AA  6E16               	movwf	DS1621_Init@Device,c
  6221                           
  6222                           ;I2C_Support.c: 24: I2C_Write_Cmd_Write_Data (Device, 0xAC, 0x02);
  6223  0013AC  0EAC               	movlw	172
  6224  0013AE  6E13               	movwf	I2C_Write_Cmd_Write_Data@Cmd,c
  6225  0013B0  0E02               	movlw	2
  6226  0013B2  6E14               	movwf	I2C_Write_Cmd_Write_Data@Data_Out,c
  6227  0013B4  5016               	movf	DS1621_Init@Device,w,c
  6228  0013B6  ECC4  F009         	call	_I2C_Write_Cmd_Write_Data
  6229                           
  6230                           ;I2C_Support.c: 25: I2C_Write_Cmd_Only(Device, 0xEE);
  6231  0013BA  0EEE               	movlw	238
  6232  0013BC  6E13               	movwf	I2C_Write_Cmd_Only@Cmd,c
  6233  0013BE  5016               	movf	DS1621_Init@Device,w,c
  6234  0013C0  ECF1  F009         	call	_I2C_Write_Cmd_Only
  6235  0013C4  0012               	return		;funcret
  6236  0013C6                     __end_of_DS1621_Init:
  6237                           	opt stack 0
  6238                           tblptru	equ	0xFF8
  6239                           tblptrh	equ	0xFF7
  6240                           tblptrl	equ	0xFF6
  6241                           tablat	equ	0xFF5
  6242                           prodh	equ	0xFF4
  6243                           prodl	equ	0xFF3
  6244                           intcon	equ	0xFF2
  6245                           intcon2	equ	0xFF1
  6246                           postinc0	equ	0xFEE
  6247                           wreg	equ	0xFE8
  6248                           postdec1	equ	0xFE5
  6249                           fsr1l	equ	0xFE1
  6250                           indf2	equ	0xFDF
  6251                           postinc2	equ	0xFDE
  6252                           postdec2	equ	0xFDD
  6253                           fsr2h	equ	0xFDA
  6254                           fsr2l	equ	0xFD9
  6255                           status	equ	0xFD8
  6256                           
  6257 ;; *************** function _I2C_Write_Cmd_Write_Data *****************
  6258 ;; Defined at:
  6259 ;;		line 152 in file "I2C.c"
  6260 ;; Parameters:    Size  Location     Type
  6261 ;;  Device          1    wreg     unsigned char 
  6262 ;;  Cmd             1   18[COMRAM] unsigned char 
  6263 ;;  Data_Out        1   19[COMRAM] unsigned char 
  6264 ;; Auto vars:     Size  Location     Type
  6265 ;;  Device          1   20[COMRAM] unsigned char 
  6266 ;; Return value:  Size  Location     Type
  6267 ;;		None               void
  6268 ;; Registers used:
  6269 ;;		wreg, status,2, status,0, cstack
  6270 ;; Tracked objects:
  6271 ;;		On entry : 0/0
  6272 ;;		On exit  : 0/0
  6273 ;;		Unchanged: 0/0
  6274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6275 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6276 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6277 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6278 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6279 ;;Total ram usage:        3 bytes
  6280 ;; Hardware stack levels used:    1
  6281 ;; Hardware stack levels required when called:    5
  6282 ;; This function calls:
  6283 ;;		_I2C_Start
  6284 ;;		_I2C_Stop
  6285 ;;		_I2C_Write
  6286 ;; This function is called by:
  6287 ;;		_DS1621_Init
  6288 ;; This function uses a non-reentrant model
  6289 ;;
  6290                           
  6291                           	psect	text34
  6292  001388                     __ptext34:
  6293                           	opt stack 0
  6294  001388                     _I2C_Write_Cmd_Write_Data:
  6295                           	opt stack 23
  6296                           
  6297                           ;incstack = 0
  6298                           ;I2C_Write_Cmd_Write_Data@Device stored from wreg
  6299  001388  6E15               	movwf	I2C_Write_Cmd_Write_Data@Device,c
  6300                           
  6301                           ;I2C.c: 154: I2C_Start();
  6302  00138A  EC2F  F00A         	call	_I2C_Start	;wreg free
  6303                           
  6304                           ;I2C.c: 155: I2C_Write((Device << 1) | 0);
  6305  00138E  5015               	movf	I2C_Write_Cmd_Write_Data@Device,w,c
  6306  001390  2415               	addwf	I2C_Write_Cmd_Write_Data@Device,w,c
  6307  001392  EC04  F009         	call	_I2C_Write
  6308                           
  6309                           ;I2C.c: 156: I2C_Write(Cmd);
  6310  001396  5013               	movf	I2C_Write_Cmd_Write_Data@Cmd,w,c
  6311  001398  EC04  F009         	call	_I2C_Write
  6312                           
  6313                           ;I2C.c: 157: I2C_Write(Data_Out);
  6314  00139C  5014               	movf	I2C_Write_Cmd_Write_Data@Data_Out,w,c
  6315  00139E  EC04  F009         	call	_I2C_Write
  6316                           
  6317                           ;I2C.c: 158: I2C_Stop();
  6318  0013A2  EC26  F00A         	call	_I2C_Stop	;wreg free
  6319  0013A6  0012               	return		;funcret
  6320  0013A8                     __end_of_I2C_Write_Cmd_Write_Data:
  6321                           	opt stack 0
  6322                           tblptru	equ	0xFF8
  6323                           tblptrh	equ	0xFF7
  6324                           tblptrl	equ	0xFF6
  6325                           tablat	equ	0xFF5
  6326                           prodh	equ	0xFF4
  6327                           prodl	equ	0xFF3
  6328                           intcon	equ	0xFF2
  6329                           intcon2	equ	0xFF1
  6330                           postinc0	equ	0xFEE
  6331                           wreg	equ	0xFE8
  6332                           postdec1	equ	0xFE5
  6333                           fsr1l	equ	0xFE1
  6334                           indf2	equ	0xFDF
  6335                           postinc2	equ	0xFDE
  6336                           postdec2	equ	0xFDD
  6337                           fsr2h	equ	0xFDA
  6338                           fsr2l	equ	0xFD9
  6339                           status	equ	0xFD8
  6340                           
  6341 ;; *************** function _I2C_Write_Cmd_Only *****************
  6342 ;; Defined at:
  6343 ;;		line 144 in file "I2C.c"
  6344 ;; Parameters:    Size  Location     Type
  6345 ;;  Device          1    wreg     unsigned char 
  6346 ;;  Cmd             1   18[COMRAM] unsigned char 
  6347 ;; Auto vars:     Size  Location     Type
  6348 ;;  Device          1   19[COMRAM] unsigned char 
  6349 ;; Return value:  Size  Location     Type
  6350 ;;		None               void
  6351 ;; Registers used:
  6352 ;;		wreg, status,2, status,0, cstack
  6353 ;; Tracked objects:
  6354 ;;		On entry : 0/0
  6355 ;;		On exit  : 0/0
  6356 ;;		Unchanged: 0/0
  6357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6358 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6359 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6360 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6361 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6362 ;;Total ram usage:        2 bytes
  6363 ;; Hardware stack levels used:    1
  6364 ;; Hardware stack levels required when called:    5
  6365 ;; This function calls:
  6366 ;;		_I2C_Start
  6367 ;;		_I2C_Stop
  6368 ;;		_I2C_Write
  6369 ;; This function is called by:
  6370 ;;		_DS1621_Init
  6371 ;; This function uses a non-reentrant model
  6372 ;;
  6373                           
  6374                           	psect	text35
  6375  0013E2                     __ptext35:
  6376                           	opt stack 0
  6377  0013E2                     _I2C_Write_Cmd_Only:
  6378                           	opt stack 23
  6379                           
  6380                           ;incstack = 0
  6381                           ;I2C_Write_Cmd_Only@Device stored from wreg
  6382  0013E2  6E14               	movwf	I2C_Write_Cmd_Only@Device,c
  6383                           
  6384                           ;I2C.c: 146: I2C_Start();
  6385  0013E4  EC2F  F00A         	call	_I2C_Start	;wreg free
  6386                           
  6387                           ;I2C.c: 147: I2C_Write((Device << 1) | 0);
  6388  0013E8  5014               	movf	I2C_Write_Cmd_Only@Device,w,c
  6389  0013EA  2414               	addwf	I2C_Write_Cmd_Only@Device,w,c
  6390  0013EC  EC04  F009         	call	_I2C_Write
  6391                           
  6392                           ;I2C.c: 148: I2C_Write(Cmd);
  6393  0013F0  5013               	movf	I2C_Write_Cmd_Only@Cmd,w,c
  6394  0013F2  EC04  F009         	call	_I2C_Write
  6395                           
  6396                           ;I2C.c: 149: I2C_Stop();
  6397  0013F6  EC26  F00A         	call	_I2C_Stop	;wreg free
  6398  0013FA  0012               	return		;funcret
  6399  0013FC                     __end_of_I2C_Write_Cmd_Only:
  6400                           	opt stack 0
  6401                           tblptru	equ	0xFF8
  6402                           tblptrh	equ	0xFF7
  6403                           tblptrl	equ	0xFF6
  6404                           tablat	equ	0xFF5
  6405                           prodh	equ	0xFF4
  6406                           prodl	equ	0xFF3
  6407                           intcon	equ	0xFF2
  6408                           intcon2	equ	0xFF1
  6409                           postinc0	equ	0xFEE
  6410                           wreg	equ	0xFE8
  6411                           postdec1	equ	0xFE5
  6412                           fsr1l	equ	0xFE1
  6413                           indf2	equ	0xFDF
  6414                           postinc2	equ	0xFDE
  6415                           postdec2	equ	0xFDD
  6416                           fsr2h	equ	0xFDA
  6417                           fsr2l	equ	0xFD9
  6418                           status	equ	0xFD8
  6419                           
  6420 ;; *************** function _DS3231_Setup_Time *****************
  6421 ;; Defined at:
  6422 ;;		line 67 in file "I2C_Support.c"
  6423 ;; Parameters:    Size  Location     Type
  6424 ;;		None
  6425 ;; Auto vars:     Size  Location     Type
  6426 ;;  Address         1   19[COMRAM] unsigned char 
  6427 ;;  Device          1   18[COMRAM] unsigned char 
  6428 ;; Return value:  Size  Location     Type
  6429 ;;		None               void
  6430 ;; Registers used:
  6431 ;;		wreg, status,2, status,0, cstack
  6432 ;; Tracked objects:
  6433 ;;		On entry : 0/0
  6434 ;;		On exit  : 0/0
  6435 ;;		Unchanged: 0/0
  6436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6438 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6439 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6440 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6441 ;;Total ram usage:        2 bytes
  6442 ;; Hardware stack levels used:    1
  6443 ;; Hardware stack levels required when called:    5
  6444 ;; This function calls:
  6445 ;;		_I2C_Start
  6446 ;;		_I2C_Stop
  6447 ;;		_I2C_Write
  6448 ;; This function is called by:
  6449 ;;		_main
  6450 ;; This function uses a non-reentrant model
  6451 ;;
  6452                           
  6453                           	psect	text36
  6454  000E06                     __ptext36:
  6455                           	opt stack 0
  6456  000E06                     _DS3231_Setup_Time:
  6457                           	opt stack 25
  6458                           
  6459                           ;I2C_Support.c: 70: char Device = 0x68;
  6460                           
  6461                           ;incstack = 0
  6462  000E06  0E68               	movlw	104
  6463  000E08  6E13               	movwf	DS3231_Setup_Time@Device,c
  6464                           
  6465                           ;I2C_Support.c: 71: char Address = 0x00;
  6466  000E0A  0E00               	movlw	0
  6467  000E0C  6E14               	movwf	DS3231_Setup_Time@Address,c
  6468                           
  6469                           ;I2C_Support.c: 73: second = 0x00;
  6470  000E0E  0E00               	movlw	0
  6471  000E10  6E60               	movwf	_second,c
  6472                           
  6473                           ;I2C_Support.c: 74: minute = 0x00;
  6474  000E12  0E00               	movlw	0
  6475  000E14  6E5C               	movwf	_minute,c
  6476                           
  6477                           ;I2C_Support.c: 75: hour = 0x09;
  6478  000E16  0E09               	movlw	9
  6479  000E18  6E5A               	movwf	_hour,c
  6480                           
  6481                           ;I2C_Support.c: 76: dow = 0x00;
  6482  000E1A  0E00               	movlw	0
  6483  000E1C  6E58               	movwf	_dow,c
  6484                           
  6485                           ;I2C_Support.c: 77: day = 0x28;
  6486  000E1E  0E28               	movlw	40
  6487  000E20  6E57               	movwf	_day,c
  6488                           
  6489                           ;I2C_Support.c: 78: month = 0x10;
  6490  000E22  0E10               	movlw	16
  6491  000E24  6E5D               	movwf	_month,c
  6492                           
  6493                           ;I2C_Support.c: 79: year = 0x21;
  6494  000E26  0E21               	movlw	33
  6495  000E28  6E6C               	movwf	_year,c
  6496                           
  6497                           ;I2C_Support.c: 81: I2C_Start();
  6498  000E2A  EC2F  F00A         	call	_I2C_Start	;wreg free
  6499                           
  6500                           ;I2C_Support.c: 82: I2C_Write((Device << 1) | 0);
  6501  000E2E  5013               	movf	DS3231_Setup_Time@Device,w,c
  6502  000E30  2413               	addwf	DS3231_Setup_Time@Device,w,c
  6503  000E32  EC04  F009         	call	_I2C_Write
  6504                           
  6505                           ;I2C_Support.c: 83: I2C_Write(Address);
  6506  000E36  5014               	movf	DS3231_Setup_Time@Address,w,c
  6507  000E38  EC04  F009         	call	_I2C_Write
  6508                           
  6509                           ;I2C_Support.c: 84: I2C_Write(second);
  6510  000E3C  5060               	movf	_second,w,c
  6511  000E3E  EC04  F009         	call	_I2C_Write
  6512                           
  6513                           ;I2C_Support.c: 85: I2C_Write(minute);
  6514  000E42  505C               	movf	_minute,w,c
  6515  000E44  EC04  F009         	call	_I2C_Write
  6516                           
  6517                           ;I2C_Support.c: 86: I2C_Write(hour);
  6518  000E48  505A               	movf	_hour,w,c
  6519  000E4A  EC04  F009         	call	_I2C_Write
  6520                           
  6521                           ;I2C_Support.c: 87: I2C_Write(dow);
  6522  000E4E  5058               	movf	_dow,w,c
  6523  000E50  EC04  F009         	call	_I2C_Write
  6524                           
  6525                           ;I2C_Support.c: 88: I2C_Write(day);
  6526  000E54  5057               	movf	_day,w,c
  6527  000E56  EC04  F009         	call	_I2C_Write
  6528                           
  6529                           ;I2C_Support.c: 89: I2C_Write(month);
  6530  000E5A  505D               	movf	_month,w,c
  6531  000E5C  EC04  F009         	call	_I2C_Write
  6532                           
  6533                           ;I2C_Support.c: 90: I2C_Write(year);
  6534  000E60  506C               	movf	_year,w,c
  6535  000E62  EC04  F009         	call	_I2C_Write
  6536                           
  6537                           ;I2C_Support.c: 91: I2C_Stop();
  6538  000E66  EC26  F00A         	call	_I2C_Stop	;wreg free
  6539  000E6A  0012               	return		;funcret
  6540  000E6C                     __end_of_DS3231_Setup_Time:
  6541                           	opt stack 0
  6542                           tblptru	equ	0xFF8
  6543                           tblptrh	equ	0xFF7
  6544                           tblptrl	equ	0xFF6
  6545                           tablat	equ	0xFF5
  6546                           prodh	equ	0xFF4
  6547                           prodl	equ	0xFF3
  6548                           intcon	equ	0xFF2
  6549                           intcon2	equ	0xFF1
  6550                           postinc0	equ	0xFEE
  6551                           wreg	equ	0xFE8
  6552                           postdec1	equ	0xFE5
  6553                           fsr1l	equ	0xFE1
  6554                           indf2	equ	0xFDF
  6555                           postinc2	equ	0xFDE
  6556                           postdec2	equ	0xFDD
  6557                           fsr2h	equ	0xFDA
  6558                           fsr2l	equ	0xFD9
  6559                           status	equ	0xFD8
  6560                           
  6561 ;; *************** function _DS3231_Read_Time *****************
  6562 ;; Defined at:
  6563 ;;		line 45 in file "I2C_Support.c"
  6564 ;; Parameters:    Size  Location     Type
  6565 ;;		None
  6566 ;; Auto vars:     Size  Location     Type
  6567 ;;  Device          1   20[COMRAM] unsigned char 
  6568 ;;  Address         1   19[COMRAM] unsigned char 
  6569 ;;  Data_Ret        1    0        unsigned char 
  6570 ;; Return value:  Size  Location     Type
  6571 ;;		None               void
  6572 ;; Registers used:
  6573 ;;		wreg, status,2, status,0, cstack
  6574 ;; Tracked objects:
  6575 ;;		On entry : 0/0
  6576 ;;		On exit  : 0/0
  6577 ;;		Unchanged: 0/0
  6578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6579 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6580 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6581 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6582 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6583 ;;Total ram usage:        2 bytes
  6584 ;; Hardware stack levels used:    1
  6585 ;; Hardware stack levels required when called:    6
  6586 ;; This function calls:
  6587 ;;		_I2C_ReStart
  6588 ;;		_I2C_Read
  6589 ;;		_I2C_Start
  6590 ;;		_I2C_Stop
  6591 ;;		_I2C_Write
  6592 ;; This function is called by:
  6593 ;;		_main
  6594 ;; This function uses a non-reentrant model
  6595 ;;
  6596                           
  6597                           	psect	text37
  6598  000E6C                     __ptext37:
  6599                           	opt stack 0
  6600  000E6C                     _DS3231_Read_Time:
  6601                           	opt stack 24
  6602                           
  6603                           ;I2C_Support.c: 47: char Device = 0x68;
  6604                           
  6605                           ;incstack = 0
  6606  000E6C  0E68               	movlw	104
  6607  000E6E  6E15               	movwf	DS3231_Read_Time@Device,c
  6608                           
  6609                           ;I2C_Support.c: 48: char Address = 0x00;
  6610  000E70  0E00               	movlw	0
  6611  000E72  6E14               	movwf	DS3231_Read_Time@Address,c
  6612                           
  6613                           ;I2C_Support.c: 49: char Data_Ret;
  6614                           ;I2C_Support.c: 50: I2C_Start();
  6615  000E74  EC2F  F00A         	call	_I2C_Start	;wreg free
  6616                           
  6617                           ;I2C_Support.c: 51: I2C_Write((Device << 1) | 0);
  6618  000E78  5015               	movf	DS3231_Read_Time@Device,w,c
  6619  000E7A  2415               	addwf	DS3231_Read_Time@Device,w,c
  6620  000E7C  EC04  F009         	call	_I2C_Write
  6621                           
  6622                           ;I2C_Support.c: 52: I2C_Write(Address);
  6623  000E80  5014               	movf	DS3231_Read_Time@Address,w,c
  6624  000E82  EC04  F009         	call	_I2C_Write
  6625                           
  6626                           ;I2C_Support.c: 53: I2C_ReStart();
  6627  000E86  ECFE  F009         	call	_I2C_ReStart	;wreg free
  6628                           
  6629                           ;I2C_Support.c: 54: I2C_Write((Device << 1) | 1);
  6630  000E8A  80D8               	bsf	status,0,c
  6631  000E8C  3415               	rlcf	DS3231_Read_Time@Device,w,c
  6632  000E8E  EC04  F009         	call	_I2C_Write
  6633                           
  6634                           ;I2C_Support.c: 56: second = I2C_Read(1);
  6635  000E92  0E01               	movlw	1
  6636  000E94  EC80  F008         	call	_I2C_Read
  6637  000E98  6E60               	movwf	_second,c
  6638                           
  6639                           ;I2C_Support.c: 57: minute = I2C_Read(1);
  6640  000E9A  0E01               	movlw	1
  6641  000E9C  EC80  F008         	call	_I2C_Read
  6642  000EA0  6E5C               	movwf	_minute,c
  6643                           
  6644                           ;I2C_Support.c: 58: hour = I2C_Read(1);
  6645  000EA2  0E01               	movlw	1
  6646  000EA4  EC80  F008         	call	_I2C_Read
  6647  000EA8  6E5A               	movwf	_hour,c
  6648                           
  6649                           ;I2C_Support.c: 59: dow = I2C_Read(1);
  6650  000EAA  0E01               	movlw	1
  6651  000EAC  EC80  F008         	call	_I2C_Read
  6652  000EB0  6E58               	movwf	_dow,c
  6653                           
  6654                           ;I2C_Support.c: 60: day = I2C_Read(1);
  6655  000EB2  0E01               	movlw	1
  6656  000EB4  EC80  F008         	call	_I2C_Read
  6657  000EB8  6E57               	movwf	_day,c
  6658                           
  6659                           ;I2C_Support.c: 61: month = I2C_Read(1);
  6660  000EBA  0E01               	movlw	1
  6661  000EBC  EC80  F008         	call	_I2C_Read
  6662  000EC0  6E5D               	movwf	_month,c
  6663                           
  6664                           ;I2C_Support.c: 62: year = I2C_Read(0);
  6665  000EC2  0E00               	movlw	0
  6666  000EC4  EC80  F008         	call	_I2C_Read
  6667  000EC8  6E6C               	movwf	_year,c
  6668                           
  6669                           ;I2C_Support.c: 64: I2C_Stop();
  6670  000ECA  EC26  F00A         	call	_I2C_Stop	;wreg free
  6671  000ECE  0012               	return		;funcret
  6672  000ED0                     __end_of_DS3231_Read_Time:
  6673                           	opt stack 0
  6674                           tblptru	equ	0xFF8
  6675                           tblptrh	equ	0xFF7
  6676                           tblptrl	equ	0xFF6
  6677                           tablat	equ	0xFF5
  6678                           prodh	equ	0xFF4
  6679                           prodl	equ	0xFF3
  6680                           intcon	equ	0xFF2
  6681                           intcon2	equ	0xFF1
  6682                           postinc0	equ	0xFEE
  6683                           wreg	equ	0xFE8
  6684                           postdec1	equ	0xFE5
  6685                           fsr1l	equ	0xFE1
  6686                           indf2	equ	0xFDF
  6687                           postinc2	equ	0xFDE
  6688                           postdec2	equ	0xFDD
  6689                           fsr2h	equ	0xFDA
  6690                           fsr2l	equ	0xFD9
  6691                           status	equ	0xFD8
  6692                           
  6693 ;; *************** function _DS1621_Read_Temp *****************
  6694 ;; Defined at:
  6695 ;;		line 29 in file "I2C_Support.c"
  6696 ;; Parameters:    Size  Location     Type
  6697 ;;		None
  6698 ;; Auto vars:     Size  Location     Type
  6699 ;;  Device          1   23[COMRAM] unsigned char 
  6700 ;;  Data_Ret        1   22[COMRAM] unsigned char 
  6701 ;;  Cmd             1   21[COMRAM] unsigned char 
  6702 ;; Return value:  Size  Location     Type
  6703 ;;                  2   19[COMRAM] int 
  6704 ;; Registers used:
  6705 ;;		wreg, status,2, status,0, cstack
  6706 ;; Tracked objects:
  6707 ;;		On entry : 0/0
  6708 ;;		On exit  : 0/0
  6709 ;;		Unchanged: 0/0
  6710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6711 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6712 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6713 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6714 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6715 ;;Total ram usage:        5 bytes
  6716 ;; Hardware stack levels used:    1
  6717 ;; Hardware stack levels required when called:    6
  6718 ;; This function calls:
  6719 ;;		_I2C_ReStart
  6720 ;;		_I2C_Read
  6721 ;;		_I2C_Start
  6722 ;;		_I2C_Stop
  6723 ;;		_I2C_Write
  6724 ;; This function is called by:
  6725 ;;		_main
  6726 ;; This function uses a non-reentrant model
  6727 ;;
  6728                           
  6729                           	psect	text38
  6730  001246                     __ptext38:
  6731                           	opt stack 0
  6732  001246                     _DS1621_Read_Temp:
  6733                           	opt stack 24
  6734                           
  6735                           ;I2C_Support.c: 31: char Device = 0x48;
  6736                           
  6737                           ;incstack = 0
  6738  001246  0E48               	movlw	72
  6739  001248  6E18               	movwf	DS1621_Read_Temp@Device,c
  6740                           
  6741                           ;I2C_Support.c: 32: char Cmd = 0xAA;
  6742  00124A  0EAA               	movlw	170
  6743  00124C  6E16               	movwf	DS1621_Read_Temp@Cmd,c
  6744                           
  6745                           ;I2C_Support.c: 34: char Data_Ret;
  6746                           ;I2C_Support.c: 35: I2C_Start();
  6747  00124E  EC2F  F00A         	call	_I2C_Start	;wreg free
  6748                           
  6749                           ;I2C_Support.c: 36: I2C_Write((Device << 1) | 0);
  6750  001252  5018               	movf	DS1621_Read_Temp@Device,w,c
  6751  001254  2418               	addwf	DS1621_Read_Temp@Device,w,c
  6752  001256  EC04  F009         	call	_I2C_Write
  6753                           
  6754                           ;I2C_Support.c: 37: I2C_Write(Cmd);
  6755  00125A  5016               	movf	DS1621_Read_Temp@Cmd,w,c
  6756  00125C  EC04  F009         	call	_I2C_Write
  6757                           
  6758                           ;I2C_Support.c: 38: I2C_ReStart();
  6759  001260  ECFE  F009         	call	_I2C_ReStart	;wreg free
  6760                           
  6761                           ;I2C_Support.c: 39: I2C_Write((Device << 1) | 1);
  6762  001264  80D8               	bsf	status,0,c
  6763  001266  3418               	rlcf	DS1621_Read_Temp@Device,w,c
  6764  001268  EC04  F009         	call	_I2C_Write
  6765                           
  6766                           ;I2C_Support.c: 40: Data_Ret = I2C_Read(0);
  6767  00126C  0E00               	movlw	0
  6768  00126E  EC80  F008         	call	_I2C_Read
  6769  001272  6E17               	movwf	DS1621_Read_Temp@Data_Ret,c
  6770                           
  6771                           ;I2C_Support.c: 41: I2C_Stop();
  6772  001274  EC26  F00A         	call	_I2C_Stop	;wreg free
  6773                           
  6774                           ;I2C_Support.c: 42: return Data_Ret;
  6775  001278  C017  F014         	movff	DS1621_Read_Temp@Data_Ret,?_DS1621_Read_Temp
  6776  00127C  6A15               	clrf	?_DS1621_Read_Temp+1,c
  6777  00127E  D000               	goto	l203
  6778  001280                     l203:
  6779  001280  0012               	return		;funcret
  6780  001282                     __end_of_DS1621_Read_Temp:
  6781                           	opt stack 0
  6782                           tblptru	equ	0xFF8
  6783                           tblptrh	equ	0xFF7
  6784                           tblptrl	equ	0xFF6
  6785                           tablat	equ	0xFF5
  6786                           prodh	equ	0xFF4
  6787                           prodl	equ	0xFF3
  6788                           intcon	equ	0xFF2
  6789                           intcon2	equ	0xFF1
  6790                           postinc0	equ	0xFEE
  6791                           wreg	equ	0xFE8
  6792                           postdec1	equ	0xFE5
  6793                           fsr1l	equ	0xFE1
  6794                           indf2	equ	0xFDF
  6795                           postinc2	equ	0xFDE
  6796                           postdec2	equ	0xFDD
  6797                           fsr2h	equ	0xFDA
  6798                           fsr2l	equ	0xFD9
  6799                           status	equ	0xFD8
  6800                           
  6801 ;; *************** function _I2C_Write *****************
  6802 ;; Defined at:
  6803 ;;		line 41 in file "I2C.c"
  6804 ;; Parameters:    Size  Location     Type
  6805 ;;  outByte         1    wreg     unsigned char 
  6806 ;; Auto vars:     Size  Location     Type
  6807 ;;  outByte         1   16[COMRAM] unsigned char 
  6808 ;;  n               1   17[COMRAM] unsigned char 
  6809 ;; Return value:  Size  Location     Type
  6810 ;;		None               void
  6811 ;; Registers used:
  6812 ;;		wreg, status,2, status,0, cstack
  6813 ;; Tracked objects:
  6814 ;;		On entry : 0/0
  6815 ;;		On exit  : 0/0
  6816 ;;		Unchanged: 0/0
  6817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6818 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6819 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6820 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6821 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6822 ;;Total ram usage:        2 bytes
  6823 ;; Hardware stack levels used:    1
  6824 ;; Hardware stack levels required when called:    4
  6825 ;; This function calls:
  6826 ;;		_i2cHighScl
  6827 ;;		_i2cHighSda
  6828 ;;		_i2cLowScl
  6829 ;;		_i2cLowSda
  6830 ;; This function is called by:
  6831 ;;		_I2C_Write_Cmd_Only
  6832 ;;		_I2C_Write_Cmd_Write_Data
  6833 ;;		_DS1621_Read_Temp
  6834 ;;		_DS3231_Read_Time
  6835 ;;		_DS3231_Setup_Time
  6836 ;;		_I2C_Write_Address_Read_One_Byte
  6837 ;;		_I2C_Write_Address_Write_One_Byte
  6838 ;;		_I2C_Write_Cmd_Read_One_Byte
  6839 ;; This function uses a non-reentrant model
  6840 ;;
  6841                           
  6842                           	psect	text39
  6843  001208                     __ptext39:
  6844                           	opt stack 0
  6845  001208                     _I2C_Write:
  6846                           	opt stack 23
  6847                           
  6848                           ;incstack = 0
  6849                           ;I2C_Write@outByte stored from wreg
  6850  001208  6E11               	movwf	I2C_Write@outByte,c
  6851                           
  6852                           ;I2C.c: 43: unsigned char n;
  6853                           ;I2C.c: 44: for(n=0; n<8; n++)
  6854  00120A  0E00               	movlw	0
  6855  00120C  6E12               	movwf	I2C_Write@n,c
  6856  00120E                     l1369:
  6857  00120E  0E07               	movlw	7
  6858  001210  6412               	cpfsgt	I2C_Write@n,c
  6859  001212  D001               	goto	l151
  6860  001214  D011               	goto	l1387
  6861  001216                     l151:
  6862                           
  6863                           ;I2C.c: 45: {
  6864                           ;I2C.c: 46: if(outByte&0x80) i2cHighSda();
  6865  001216  AE11               	btfss	I2C_Write@outByte,7,c
  6866  001218  D003               	goto	l1375
  6867  00121A  EC77  F00A         	call	_i2cHighSda	;wreg free
  6868  00121E  D003               	goto	l1377
  6869  001220                     l1375:
  6870                           
  6871                           ;I2C.c: 47: else i2cLowSda();
  6872  001220  EC6E  F00A         	call	_i2cLowSda	;wreg free
  6873  001224  D000               	goto	l1377
  6874  001226                     l1377:
  6875                           
  6876                           ;I2C.c: 48: i2cHighScl();
  6877  001226  EC58  F00A         	call	_i2cHighScl	;wreg free
  6878                           
  6879                           ;I2C.c: 49: i2cLowScl();
  6880  00122A  EC73  F00A         	call	_i2cLowScl	;wreg free
  6881                           
  6882                           ;I2C.c: 50: outByte = outByte << 1;
  6883  00122E  5011               	movf	I2C_Write@outByte,w,c
  6884  001230  2411               	addwf	I2C_Write@outByte,w,c
  6885  001232  6E11               	movwf	I2C_Write@outByte,c
  6886  001234  2A12               	incf	I2C_Write@n,f,c
  6887  001236  D7EB               	goto	l1369
  6888  001238                     l1387:
  6889                           
  6890                           ;I2C.c: 51: }
  6891                           ;I2C.c: 52: i2cHighSda();
  6892  001238  EC77  F00A         	call	_i2cHighSda	;wreg free
  6893                           
  6894                           ;I2C.c: 53: i2cHighScl();
  6895  00123C  EC58  F00A         	call	_i2cHighScl	;wreg free
  6896                           
  6897                           ;I2C.c: 54: i2cLowScl();
  6898  001240  EC73  F00A         	call	_i2cLowScl	;wreg free
  6899  001244  0012               	return		;funcret
  6900  001246                     __end_of_I2C_Write:
  6901                           	opt stack 0
  6902                           tblptru	equ	0xFF8
  6903                           tblptrh	equ	0xFF7
  6904                           tblptrl	equ	0xFF6
  6905                           tablat	equ	0xFF5
  6906                           prodh	equ	0xFF4
  6907                           prodl	equ	0xFF3
  6908                           intcon	equ	0xFF2
  6909                           intcon2	equ	0xFF1
  6910                           postinc0	equ	0xFEE
  6911                           wreg	equ	0xFE8
  6912                           postdec1	equ	0xFE5
  6913                           fsr1l	equ	0xFE1
  6914                           indf2	equ	0xFDF
  6915                           postinc2	equ	0xFDE
  6916                           postdec2	equ	0xFDD
  6917                           fsr2h	equ	0xFDA
  6918                           fsr2l	equ	0xFD9
  6919                           status	equ	0xFD8
  6920                           
  6921 ;; *************** function _I2C_Stop *****************
  6922 ;; Defined at:
  6923 ;;		line 88 in file "I2C.c"
  6924 ;; Parameters:    Size  Location     Type
  6925 ;;		None
  6926 ;; Auto vars:     Size  Location     Type
  6927 ;;		None
  6928 ;; Return value:  Size  Location     Type
  6929 ;;		None               void
  6930 ;; Registers used:
  6931 ;;		wreg, cstack
  6932 ;; Tracked objects:
  6933 ;;		On entry : 0/0
  6934 ;;		On exit  : 0/0
  6935 ;;		Unchanged: 0/0
  6936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6937 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6938 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6939 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6940 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6941 ;;Total ram usage:        0 bytes
  6942 ;; Hardware stack levels used:    1
  6943 ;; Hardware stack levels required when called:    4
  6944 ;; This function calls:
  6945 ;;		_i2cHighScl
  6946 ;;		_i2cHighSda
  6947 ;;		_i2cLowScl
  6948 ;;		_i2cLowSda
  6949 ;; This function is called by:
  6950 ;;		_I2C_Write_Cmd_Only
  6951 ;;		_I2C_Write_Cmd_Write_Data
  6952 ;;		_DS1621_Read_Temp
  6953 ;;		_DS3231_Read_Time
  6954 ;;		_DS3231_Setup_Time
  6955 ;;		_I2C_Write_Address_Read_One_Byte
  6956 ;;		_I2C_Write_Address_Write_One_Byte
  6957 ;;		_I2C_Write_Cmd_Read_One_Byte
  6958 ;; This function uses a non-reentrant model
  6959 ;;
  6960                           
  6961                           	psect	text40
  6962  00144C                     __ptext40:
  6963                           	opt stack 0
  6964  00144C                     _I2C_Stop:
  6965                           	opt stack 23
  6966                           
  6967                           ;I2C.c: 90: i2cLowScl();
  6968                           
  6969                           ;incstack = 0
  6970  00144C  EC73  F00A         	call	_i2cLowScl	;wreg free
  6971                           
  6972                           ;I2C.c: 91: i2cLowSda();
  6973  001450  EC6E  F00A         	call	_i2cLowSda	;wreg free
  6974                           
  6975                           ;I2C.c: 92: i2cHighScl();
  6976  001454  EC58  F00A         	call	_i2cHighScl	;wreg free
  6977                           
  6978                           ;I2C.c: 93: i2cHighSda();
  6979  001458  EC77  F00A         	call	_i2cHighSda	;wreg free
  6980  00145C  0012               	return		;funcret
  6981  00145E                     __end_of_I2C_Stop:
  6982                           	opt stack 0
  6983                           tblptru	equ	0xFF8
  6984                           tblptrh	equ	0xFF7
  6985                           tblptrl	equ	0xFF6
  6986                           tablat	equ	0xFF5
  6987                           prodh	equ	0xFF4
  6988                           prodl	equ	0xFF3
  6989                           intcon	equ	0xFF2
  6990                           intcon2	equ	0xFF1
  6991                           postinc0	equ	0xFEE
  6992                           wreg	equ	0xFE8
  6993                           postdec1	equ	0xFE5
  6994                           fsr1l	equ	0xFE1
  6995                           indf2	equ	0xFDF
  6996                           postinc2	equ	0xFDE
  6997                           postdec2	equ	0xFDD
  6998                           fsr2h	equ	0xFDA
  6999                           fsr2l	equ	0xFD9
  7000                           status	equ	0xFD8
  7001                           
  7002 ;; *************** function _I2C_Start *****************
  7003 ;; Defined at:
  7004 ;;		line 71 in file "I2C.c"
  7005 ;; Parameters:    Size  Location     Type
  7006 ;;		None
  7007 ;; Auto vars:     Size  Location     Type
  7008 ;;		None
  7009 ;; Return value:  Size  Location     Type
  7010 ;;		None               void
  7011 ;; Registers used:
  7012 ;;		wreg, cstack
  7013 ;; Tracked objects:
  7014 ;;		On entry : 0/0
  7015 ;;		On exit  : 0/0
  7016 ;;		Unchanged: 0/0
  7017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7018 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7019 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7020 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7021 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7022 ;;Total ram usage:        0 bytes
  7023 ;; Hardware stack levels used:    1
  7024 ;; Hardware stack levels required when called:    4
  7025 ;; This function calls:
  7026 ;;		_i2cHighScl
  7027 ;;		_i2cHighSda
  7028 ;;		_i2cLowScl
  7029 ;;		_i2cLowSda
  7030 ;; This function is called by:
  7031 ;;		_I2C_Write_Cmd_Only
  7032 ;;		_I2C_Write_Cmd_Write_Data
  7033 ;;		_DS1621_Read_Temp
  7034 ;;		_DS3231_Read_Time
  7035 ;;		_DS3231_Setup_Time
  7036 ;;		_I2C_Write_Address_Read_One_Byte
  7037 ;;		_I2C_Write_Address_Write_One_Byte
  7038 ;;		_I2C_Write_Cmd_Read_One_Byte
  7039 ;; This function uses a non-reentrant model
  7040 ;;
  7041                           
  7042                           	psect	text41
  7043  00145E                     __ptext41:
  7044                           	opt stack 0
  7045  00145E                     _I2C_Start:
  7046                           	opt stack 23
  7047                           
  7048                           ;I2C.c: 73: i2cHighSda();
  7049                           
  7050                           ;incstack = 0
  7051  00145E  EC77  F00A         	call	_i2cHighSda	;wreg free
  7052                           
  7053                           ;I2C.c: 74: i2cHighScl();
  7054  001462  EC58  F00A         	call	_i2cHighScl	;wreg free
  7055                           
  7056                           ;I2C.c: 75: i2cLowSda();
  7057  001466  EC6E  F00A         	call	_i2cLowSda	;wreg free
  7058                           
  7059                           ;I2C.c: 76: i2cLowScl();
  7060  00146A  EC73  F00A         	call	_i2cLowScl	;wreg free
  7061  00146E  0012               	return		;funcret
  7062  001470                     __end_of_I2C_Start:
  7063                           	opt stack 0
  7064                           tblptru	equ	0xFF8
  7065                           tblptrh	equ	0xFF7
  7066                           tblptrl	equ	0xFF6
  7067                           tablat	equ	0xFF5
  7068                           prodh	equ	0xFF4
  7069                           prodl	equ	0xFF3
  7070                           intcon	equ	0xFF2
  7071                           intcon2	equ	0xFF1
  7072                           postinc0	equ	0xFEE
  7073                           wreg	equ	0xFE8
  7074                           postdec1	equ	0xFE5
  7075                           fsr1l	equ	0xFE1
  7076                           indf2	equ	0xFDF
  7077                           postinc2	equ	0xFDE
  7078                           postdec2	equ	0xFDD
  7079                           fsr2h	equ	0xFDA
  7080                           fsr2l	equ	0xFD9
  7081                           status	equ	0xFD8
  7082                           
  7083 ;; *************** function _I2C_Read *****************
  7084 ;; Defined at:
  7085 ;;		line 20 in file "I2C.c"
  7086 ;; Parameters:    Size  Location     Type
  7087 ;;  ack             1    wreg     unsigned char 
  7088 ;; Auto vars:     Size  Location     Type
  7089 ;;  ack             1   16[COMRAM] unsigned char 
  7090 ;;  inByte          1   18[COMRAM] unsigned char 
  7091 ;;  n               1   17[COMRAM] unsigned char 
  7092 ;; Return value:  Size  Location     Type
  7093 ;;                  1    wreg      unsigned char 
  7094 ;; Registers used:
  7095 ;;		wreg, status,2, status,0, cstack
  7096 ;; Tracked objects:
  7097 ;;		On entry : 0/0
  7098 ;;		On exit  : 0/0
  7099 ;;		Unchanged: 0/0
  7100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7101 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7102 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7103 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7104 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7105 ;;Total ram usage:        3 bytes
  7106 ;; Hardware stack levels used:    1
  7107 ;; Hardware stack levels required when called:    5
  7108 ;; This function calls:
  7109 ;;		_i2cAck
  7110 ;;		_i2cHighScl
  7111 ;;		_i2cHighSda
  7112 ;;		_i2cLowScl
  7113 ;;		_i2cNack
  7114 ;; This function is called by:
  7115 ;;		_DS1621_Read_Temp
  7116 ;;		_DS3231_Read_Time
  7117 ;;		_I2C_Write_Address_Read_One_Byte
  7118 ;;		_I2C_Write_Cmd_Read_One_Byte
  7119 ;; This function uses a non-reentrant model
  7120 ;;
  7121                           
  7122                           	psect	text42
  7123  001100                     __ptext42:
  7124                           	opt stack 0
  7125  001100                     _I2C_Read:
  7126                           	opt stack 24
  7127                           
  7128                           ;incstack = 0
  7129                           ;I2C_Read@ack stored from wreg
  7130  001100  6E11               	movwf	I2C_Read@ack,c
  7131                           
  7132                           ;I2C.c: 22: unsigned char inByte, n;
  7133                           ;I2C.c: 23: i2cHighSda();
  7134  001102  EC77  F00A         	call	_i2cHighSda	;wreg free
  7135                           
  7136                           ;I2C.c: 24: for (n=0; n<8; n++)
  7137  001106  0E00               	movlw	0
  7138  001108  6E12               	movwf	I2C_Read@n,c
  7139  00110A                     l1755:
  7140  00110A  0E07               	movlw	7
  7141  00110C  6412               	cpfsgt	I2C_Read@n,c
  7142  00110E  D001               	goto	l1759
  7143  001110  D00F               	goto	l1773
  7144  001112                     l1759:
  7145                           
  7146                           ;I2C.c: 25: {
  7147                           ;I2C.c: 26: i2cHighScl();
  7148  001112  EC58  F00A         	call	_i2cHighScl	;wreg free
  7149                           
  7150                           ;I2C.c: 28: if (PORTCbits.RC1)
  7151  001116  A282               	btfss	3970,1,c	;volatile
  7152  001118  D003               	goto	l1765
  7153                           
  7154                           ;I2C.c: 29: inByte = (inByte << 1) | 0x01;
  7155  00111A  80D8               	bsf	status,0,c
  7156  00111C  3613               	rlcf	I2C_Read@inByte,f,c
  7157  00111E  D004               	goto	l1767
  7158  001120                     l1765:
  7159                           
  7160                           ;I2C.c: 30: else
  7161                           ;I2C.c: 31: inByte = inByte << 1;
  7162  001120  5013               	movf	I2C_Read@inByte,w,c
  7163  001122  2413               	addwf	I2C_Read@inByte,w,c
  7164  001124  6E13               	movwf	I2C_Read@inByte,c
  7165  001126  D000               	goto	l1767
  7166  001128                     l1767:
  7167                           
  7168                           ;I2C.c: 32: i2cLowScl();
  7169  001128  EC73  F00A         	call	_i2cLowScl	;wreg free
  7170  00112C  2A12               	incf	I2C_Read@n,f,c
  7171  00112E  D7ED               	goto	l1755
  7172  001130                     l1773:
  7173                           
  7174                           ;I2C.c: 33: }
  7175                           ;I2C.c: 34: if (ack) i2cAck();
  7176  001130  5011               	movf	I2C_Read@ack,w,c
  7177  001132  B4D8               	btfsc	status,2,c
  7178  001134  D003               	goto	l1777
  7179  001136  EC38  F00A         	call	_i2cAck	;wreg free
  7180  00113A  D003               	goto	l1779
  7181  00113C                     l1777:
  7182                           
  7183                           ;I2C.c: 35: else i2cNack();
  7184  00113C  EC69  F00A         	call	_i2cNack	;wreg free
  7185  001140  D000               	goto	l1779
  7186  001142                     l1779:
  7187                           
  7188                           ;I2C.c: 38: return(inByte);
  7189  001142  5013               	movf	I2C_Read@inByte,w,c
  7190  001144  D000               	goto	l148
  7191  001146                     l148:
  7192  001146  0012               	return		;funcret
  7193  001148                     __end_of_I2C_Read:
  7194                           	opt stack 0
  7195                           tblptru	equ	0xFF8
  7196                           tblptrh	equ	0xFF7
  7197                           tblptrl	equ	0xFF6
  7198                           tablat	equ	0xFF5
  7199                           prodh	equ	0xFF4
  7200                           prodl	equ	0xFF3
  7201                           intcon	equ	0xFF2
  7202                           intcon2	equ	0xFF1
  7203                           postinc0	equ	0xFEE
  7204                           wreg	equ	0xFE8
  7205                           postdec1	equ	0xFE5
  7206                           fsr1l	equ	0xFE1
  7207                           indf2	equ	0xFDF
  7208                           postinc2	equ	0xFDE
  7209                           postdec2	equ	0xFDD
  7210                           fsr2h	equ	0xFDA
  7211                           fsr2l	equ	0xFD9
  7212                           status	equ	0xFD8
  7213                           
  7214 ;; *************** function _i2cNack *****************
  7215 ;; Defined at:
  7216 ;;		line 57 in file "I2C.c"
  7217 ;; Parameters:    Size  Location     Type
  7218 ;;		None
  7219 ;; Auto vars:     Size  Location     Type
  7220 ;;		None
  7221 ;; Return value:  Size  Location     Type
  7222 ;;		None               void
  7223 ;; Registers used:
  7224 ;;		wreg, cstack
  7225 ;; Tracked objects:
  7226 ;;		On entry : 0/0
  7227 ;;		On exit  : 0/0
  7228 ;;		Unchanged: 0/0
  7229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7230 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7231 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7232 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7233 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7234 ;;Total ram usage:        0 bytes
  7235 ;; Hardware stack levels used:    1
  7236 ;; Hardware stack levels required when called:    4
  7237 ;; This function calls:
  7238 ;;		_i2cHighScl
  7239 ;;		_i2cLowScl
  7240 ;; This function is called by:
  7241 ;;		_I2C_Read
  7242 ;; This function uses a non-reentrant model
  7243 ;;
  7244                           
  7245                           	psect	text43
  7246  0014D2                     __ptext43:
  7247                           	opt stack 0
  7248  0014D2                     _i2cNack:
  7249                           	opt stack 24
  7250                           
  7251                           ;I2C.c: 59: i2cHighScl();
  7252                           
  7253                           ;incstack = 0
  7254  0014D2  EC58  F00A         	call	_i2cHighScl	;wreg free
  7255                           
  7256                           ;I2C.c: 60: i2cLowScl();
  7257  0014D6  EC73  F00A         	call	_i2cLowScl	;wreg free
  7258  0014DA  0012               	return		;funcret
  7259  0014DC                     __end_of_i2cNack:
  7260                           	opt stack 0
  7261                           tblptru	equ	0xFF8
  7262                           tblptrh	equ	0xFF7
  7263                           tblptrl	equ	0xFF6
  7264                           tablat	equ	0xFF5
  7265                           prodh	equ	0xFF4
  7266                           prodl	equ	0xFF3
  7267                           intcon	equ	0xFF2
  7268                           intcon2	equ	0xFF1
  7269                           postinc0	equ	0xFEE
  7270                           wreg	equ	0xFE8
  7271                           postdec1	equ	0xFE5
  7272                           fsr1l	equ	0xFE1
  7273                           indf2	equ	0xFDF
  7274                           postinc2	equ	0xFDE
  7275                           postdec2	equ	0xFDD
  7276                           fsr2h	equ	0xFDA
  7277                           fsr2l	equ	0xFD9
  7278                           status	equ	0xFD8
  7279                           
  7280 ;; *************** function _i2cAck *****************
  7281 ;; Defined at:
  7282 ;;		line 63 in file "I2C.c"
  7283 ;; Parameters:    Size  Location     Type
  7284 ;;		None
  7285 ;; Auto vars:     Size  Location     Type
  7286 ;;		None
  7287 ;; Return value:  Size  Location     Type
  7288 ;;		None               void
  7289 ;; Registers used:
  7290 ;;		wreg, cstack
  7291 ;; Tracked objects:
  7292 ;;		On entry : 0/0
  7293 ;;		On exit  : 0/0
  7294 ;;		Unchanged: 0/0
  7295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7296 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7297 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7298 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7299 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7300 ;;Total ram usage:        0 bytes
  7301 ;; Hardware stack levels used:    1
  7302 ;; Hardware stack levels required when called:    4
  7303 ;; This function calls:
  7304 ;;		_i2cHighScl
  7305 ;;		_i2cHighSda
  7306 ;;		_i2cLowScl
  7307 ;;		_i2cLowSda
  7308 ;; This function is called by:
  7309 ;;		_I2C_Read
  7310 ;; This function uses a non-reentrant model
  7311 ;;
  7312                           
  7313                           	psect	text44
  7314  001470                     __ptext44:
  7315                           	opt stack 0
  7316  001470                     _i2cAck:
  7317                           	opt stack 24
  7318                           
  7319                           ;I2C.c: 65: i2cLowSda();
  7320                           
  7321                           ;incstack = 0
  7322  001470  EC6E  F00A         	call	_i2cLowSda	;wreg free
  7323                           
  7324                           ;I2C.c: 66: i2cHighScl();
  7325  001474  EC58  F00A         	call	_i2cHighScl	;wreg free
  7326                           
  7327                           ;I2C.c: 67: i2cLowScl();
  7328  001478  EC73  F00A         	call	_i2cLowScl	;wreg free
  7329                           
  7330                           ;I2C.c: 68: i2cHighSda();
  7331  00147C  EC77  F00A         	call	_i2cHighSda	;wreg free
  7332  001480  0012               	return		;funcret
  7333  001482                     __end_of_i2cAck:
  7334                           	opt stack 0
  7335                           tblptru	equ	0xFF8
  7336                           tblptrh	equ	0xFF7
  7337                           tblptrl	equ	0xFF6
  7338                           tablat	equ	0xFF5
  7339                           prodh	equ	0xFF4
  7340                           prodl	equ	0xFF3
  7341                           intcon	equ	0xFF2
  7342                           intcon2	equ	0xFF1
  7343                           postinc0	equ	0xFEE
  7344                           wreg	equ	0xFE8
  7345                           postdec1	equ	0xFE5
  7346                           fsr1l	equ	0xFE1
  7347                           indf2	equ	0xFDF
  7348                           postinc2	equ	0xFDE
  7349                           postdec2	equ	0xFDD
  7350                           fsr2h	equ	0xFDA
  7351                           fsr2l	equ	0xFD9
  7352                           status	equ	0xFD8
  7353                           
  7354 ;; *************** function _I2C_ReStart *****************
  7355 ;; Defined at:
  7356 ;;		line 79 in file "I2C.c"
  7357 ;; Parameters:    Size  Location     Type
  7358 ;;		None
  7359 ;; Auto vars:     Size  Location     Type
  7360 ;;		None
  7361 ;; Return value:  Size  Location     Type
  7362 ;;		None               void
  7363 ;; Registers used:
  7364 ;;		wreg, cstack
  7365 ;; Tracked objects:
  7366 ;;		On entry : 0/0
  7367 ;;		On exit  : 0/0
  7368 ;;		Unchanged: 0/0
  7369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7370 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7371 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7372 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7373 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7374 ;;Total ram usage:        0 bytes
  7375 ;; Hardware stack levels used:    1
  7376 ;; Hardware stack levels required when called:    4
  7377 ;; This function calls:
  7378 ;;		_i2cHighScl
  7379 ;;		_i2cHighSda
  7380 ;;		_i2cLowScl
  7381 ;;		_i2cLowSda
  7382 ;; This function is called by:
  7383 ;;		_DS1621_Read_Temp
  7384 ;;		_DS3231_Read_Time
  7385 ;;		_I2C_Write_Address_Read_One_Byte
  7386 ;;		_I2C_Write_Cmd_Read_One_Byte
  7387 ;; This function uses a non-reentrant model
  7388 ;;
  7389                           
  7390                           	psect	text45
  7391  0013FC                     __ptext45:
  7392                           	opt stack 0
  7393  0013FC                     _I2C_ReStart:
  7394                           	opt stack 25
  7395                           
  7396                           ;I2C.c: 81: i2cLowScl();
  7397                           
  7398                           ;incstack = 0
  7399  0013FC  EC73  F00A         	call	_i2cLowScl	;wreg free
  7400                           
  7401                           ;I2C.c: 82: i2cHighSda();
  7402  001400  EC77  F00A         	call	_i2cHighSda	;wreg free
  7403                           
  7404                           ;I2C.c: 83: i2cHighScl();
  7405  001404  EC58  F00A         	call	_i2cHighScl	;wreg free
  7406                           
  7407                           ;I2C.c: 84: i2cLowSda();
  7408  001408  EC6E  F00A         	call	_i2cLowSda	;wreg free
  7409                           
  7410                           ;I2C.c: 85: i2cLowScl();
  7411  00140C  EC73  F00A         	call	_i2cLowScl	;wreg free
  7412  001410  0012               	return		;funcret
  7413  001412                     __end_of_I2C_ReStart:
  7414                           	opt stack 0
  7415                           tblptru	equ	0xFF8
  7416                           tblptrh	equ	0xFF7
  7417                           tblptrl	equ	0xFF6
  7418                           tablat	equ	0xFF5
  7419                           prodh	equ	0xFF4
  7420                           prodl	equ	0xFF3
  7421                           intcon	equ	0xFF2
  7422                           intcon2	equ	0xFF1
  7423                           postinc0	equ	0xFEE
  7424                           wreg	equ	0xFE8
  7425                           postdec1	equ	0xFE5
  7426                           fsr1l	equ	0xFE1
  7427                           indf2	equ	0xFDF
  7428                           postinc2	equ	0xFDE
  7429                           postdec2	equ	0xFDD
  7430                           fsr2h	equ	0xFDA
  7431                           fsr2l	equ	0xFD9
  7432                           status	equ	0xFD8
  7433                           
  7434 ;; *************** function _i2cLowSda *****************
  7435 ;; Defined at:
  7436 ;;		line 102 in file "I2C.c"
  7437 ;; Parameters:    Size  Location     Type
  7438 ;;		None
  7439 ;; Auto vars:     Size  Location     Type
  7440 ;;		None
  7441 ;; Return value:  Size  Location     Type
  7442 ;;		None               void
  7443 ;; Registers used:
  7444 ;;		None
  7445 ;; Tracked objects:
  7446 ;;		On entry : 0/0
  7447 ;;		On exit  : 0/0
  7448 ;;		Unchanged: 0/0
  7449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7450 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7451 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7452 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7453 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7454 ;;Total ram usage:        0 bytes
  7455 ;; Hardware stack levels used:    1
  7456 ;; Hardware stack levels required when called:    3
  7457 ;; This function calls:
  7458 ;;		Nothing
  7459 ;; This function is called by:
  7460 ;;		_I2C_Write
  7461 ;;		_i2cAck
  7462 ;;		_I2C_Start
  7463 ;;		_I2C_ReStart
  7464 ;;		_I2C_Stop
  7465 ;; This function uses a non-reentrant model
  7466 ;;
  7467                           
  7468                           	psect	text46
  7469  0014DC                     __ptext46:
  7470                           	opt stack 0
  7471  0014DC                     _i2cLowSda:
  7472                           	opt stack 23
  7473                           
  7474                           ;I2C.c: 104: PORTCbits.RC1 = 0;
  7475                           
  7476                           ;incstack = 0
  7477  0014DC  9282               	bcf	3970,1,c	;volatile
  7478                           
  7479                           ;I2C.c: 105: TRISCbits.RC1 = 0;
  7480  0014DE  9294               	bcf	3988,1,c	;volatile
  7481                           
  7482                           ;I2C.c: 106: _delay((unsigned long)((2)*(8000000/4000000.0)));
  7483  0014E0  D000               	nop2		;2 cycle nop
  7484  0014E2  D000               	nop2		;2 cycle nop
  7485  0014E4  0012               	return		;funcret
  7486  0014E6                     __end_of_i2cLowSda:
  7487                           	opt stack 0
  7488                           tblptru	equ	0xFF8
  7489                           tblptrh	equ	0xFF7
  7490                           tblptrl	equ	0xFF6
  7491                           tablat	equ	0xFF5
  7492                           prodh	equ	0xFF4
  7493                           prodl	equ	0xFF3
  7494                           intcon	equ	0xFF2
  7495                           intcon2	equ	0xFF1
  7496                           postinc0	equ	0xFEE
  7497                           wreg	equ	0xFE8
  7498                           postdec1	equ	0xFE5
  7499                           fsr1l	equ	0xFE1
  7500                           indf2	equ	0xFDF
  7501                           postinc2	equ	0xFDE
  7502                           postdec2	equ	0xFDD
  7503                           fsr2h	equ	0xFDA
  7504                           fsr2l	equ	0xFD9
  7505                           status	equ	0xFD8
  7506                           
  7507 ;; *************** function _i2cLowScl *****************
  7508 ;; Defined at:
  7509 ;;		line 115 in file "I2C.c"
  7510 ;; Parameters:    Size  Location     Type
  7511 ;;		None
  7512 ;; Auto vars:     Size  Location     Type
  7513 ;;		None
  7514 ;; Return value:  Size  Location     Type
  7515 ;;		None               void
  7516 ;; Registers used:
  7517 ;;		None
  7518 ;; Tracked objects:
  7519 ;;		On entry : 0/0
  7520 ;;		On exit  : 0/0
  7521 ;;		Unchanged: 0/0
  7522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7523 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7524 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7525 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7526 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7527 ;;Total ram usage:        0 bytes
  7528 ;; Hardware stack levels used:    1
  7529 ;; Hardware stack levels required when called:    3
  7530 ;; This function calls:
  7531 ;;		Nothing
  7532 ;; This function is called by:
  7533 ;;		_I2C_Read
  7534 ;;		_I2C_Write
  7535 ;;		_i2cNack
  7536 ;;		_i2cAck
  7537 ;;		_I2C_Start
  7538 ;;		_I2C_ReStart
  7539 ;;		_I2C_Stop
  7540 ;; This function uses a non-reentrant model
  7541 ;;
  7542                           
  7543                           	psect	text47
  7544  0014E6                     __ptext47:
  7545                           	opt stack 0
  7546  0014E6                     _i2cLowScl:
  7547                           	opt stack 23
  7548                           
  7549                           ;I2C.c: 117: PORTCbits.RC2 = 0;
  7550                           
  7551                           ;incstack = 0
  7552  0014E6  9482               	bcf	3970,2,c	;volatile
  7553                           
  7554                           ;I2C.c: 118: TRISCbits.RC2 = 0;
  7555  0014E8  9494               	bcf	3988,2,c	;volatile
  7556                           
  7557                           ;I2C.c: 119: _delay((unsigned long)((1)*(8000000/4000000.0)));
  7558  0014EA  D000               	nop2		;2 cycle nop
  7559  0014EC  0012               	return		;funcret
  7560  0014EE                     __end_of_i2cLowScl:
  7561                           	opt stack 0
  7562                           tblptru	equ	0xFF8
  7563                           tblptrh	equ	0xFF7
  7564                           tblptrl	equ	0xFF6
  7565                           tablat	equ	0xFF5
  7566                           prodh	equ	0xFF4
  7567                           prodl	equ	0xFF3
  7568                           intcon	equ	0xFF2
  7569                           intcon2	equ	0xFF1
  7570                           postinc0	equ	0xFEE
  7571                           wreg	equ	0xFE8
  7572                           postdec1	equ	0xFE5
  7573                           fsr1l	equ	0xFE1
  7574                           indf2	equ	0xFDF
  7575                           postinc2	equ	0xFDE
  7576                           postdec2	equ	0xFDD
  7577                           fsr2h	equ	0xFDA
  7578                           fsr2l	equ	0xFD9
  7579                           status	equ	0xFD8
  7580                           
  7581 ;; *************** function _i2cHighSda *****************
  7582 ;; Defined at:
  7583 ;;		line 96 in file "I2C.c"
  7584 ;; Parameters:    Size  Location     Type
  7585 ;;		None
  7586 ;; Auto vars:     Size  Location     Type
  7587 ;;		None
  7588 ;; Return value:  Size  Location     Type
  7589 ;;		None               void
  7590 ;; Registers used:
  7591 ;;		None
  7592 ;; Tracked objects:
  7593 ;;		On entry : 0/0
  7594 ;;		On exit  : 0/0
  7595 ;;		Unchanged: 0/0
  7596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7597 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7598 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7599 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7600 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7601 ;;Total ram usage:        0 bytes
  7602 ;; Hardware stack levels used:    1
  7603 ;; Hardware stack levels required when called:    3
  7604 ;; This function calls:
  7605 ;;		Nothing
  7606 ;; This function is called by:
  7607 ;;		_I2C_Init
  7608 ;;		_I2C_Read
  7609 ;;		_I2C_Write
  7610 ;;		_i2cAck
  7611 ;;		_I2C_Start
  7612 ;;		_I2C_ReStart
  7613 ;;		_I2C_Stop
  7614 ;; This function uses a non-reentrant model
  7615 ;;
  7616                           
  7617                           	psect	text48
  7618  0014EE                     __ptext48:
  7619                           	opt stack 0
  7620  0014EE                     _i2cHighSda:
  7621                           	opt stack 25
  7622                           
  7623                           ;I2C.c: 98: TRISCbits.RC1 = 1;
  7624                           
  7625                           ;incstack = 0
  7626  0014EE  8294               	bsf	3988,1,c	;volatile
  7627                           
  7628                           ;I2C.c: 99: _delay((unsigned long)((2)*(8000000/4000000.0)));
  7629  0014F0  D000               	nop2		;2 cycle nop
  7630  0014F2  D000               	nop2		;2 cycle nop
  7631  0014F4  0012               	return		;funcret
  7632  0014F6                     __end_of_i2cHighSda:
  7633                           	opt stack 0
  7634                           tblptru	equ	0xFF8
  7635                           tblptrh	equ	0xFF7
  7636                           tblptrl	equ	0xFF6
  7637                           tablat	equ	0xFF5
  7638                           prodh	equ	0xFF4
  7639                           prodl	equ	0xFF3
  7640                           intcon	equ	0xFF2
  7641                           intcon2	equ	0xFF1
  7642                           postinc0	equ	0xFEE
  7643                           wreg	equ	0xFE8
  7644                           postdec1	equ	0xFE5
  7645                           fsr1l	equ	0xFE1
  7646                           indf2	equ	0xFDF
  7647                           postinc2	equ	0xFDE
  7648                           postdec2	equ	0xFDD
  7649                           fsr2h	equ	0xFDA
  7650                           fsr2l	equ	0xFD9
  7651                           status	equ	0xFD8
  7652                           
  7653 ;; *************** function _i2cHighScl *****************
  7654 ;; Defined at:
  7655 ;;		line 109 in file "I2C.c"
  7656 ;; Parameters:    Size  Location     Type
  7657 ;;		None
  7658 ;; Auto vars:     Size  Location     Type
  7659 ;;		None
  7660 ;; Return value:  Size  Location     Type
  7661 ;;		None               void
  7662 ;; Registers used:
  7663 ;;		wreg
  7664 ;; Tracked objects:
  7665 ;;		On entry : 0/0
  7666 ;;		On exit  : 0/0
  7667 ;;		Unchanged: 0/0
  7668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7669 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7670 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7671 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7672 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7673 ;;Total ram usage:        0 bytes
  7674 ;; Hardware stack levels used:    1
  7675 ;; Hardware stack levels required when called:    3
  7676 ;; This function calls:
  7677 ;;		Nothing
  7678 ;; This function is called by:
  7679 ;;		_I2C_Init
  7680 ;;		_I2C_Read
  7681 ;;		_I2C_Write
  7682 ;;		_i2cNack
  7683 ;;		_i2cAck
  7684 ;;		_I2C_Start
  7685 ;;		_I2C_ReStart
  7686 ;;		_I2C_Stop
  7687 ;; This function uses a non-reentrant model
  7688 ;;
  7689                           
  7690                           	psect	text49
  7691  0014B0                     __ptext49:
  7692                           	opt stack 0
  7693  0014B0                     _i2cHighScl:
  7694                           	opt stack 25
  7695                           
  7696                           ;I2C.c: 111: TRISCbits.RC2 = 1;
  7697                           
  7698                           ;incstack = 0
  7699  0014B0  8494               	bsf	3988,2,c	;volatile
  7700                           
  7701                           ;I2C.c: 112: _delay((unsigned long)((10)*(8000000/4000000.0)));
  7702  0014B2  0E06               	movlw	6
  7703  0014B4                     u3287:
  7704  0014B4  2EE8               	decfsz	wreg,f,c
  7705  0014B6  D7FE               	goto	u3287
  7706  0014B8  D000               	nop2		;nop
  7707  0014BA  0012               	return		;funcret
  7708  0014BC                     __end_of_i2cHighScl:
  7709                           	opt stack 0
  7710                           tblptru	equ	0xFF8
  7711                           tblptrh	equ	0xFF7
  7712                           tblptrl	equ	0xFF6
  7713                           tablat	equ	0xFF5
  7714                           prodh	equ	0xFF4
  7715                           prodl	equ	0xFF3
  7716                           intcon	equ	0xFF2
  7717                           intcon2	equ	0xFF1
  7718                           postinc0	equ	0xFEE
  7719                           wreg	equ	0xFE8
  7720                           postdec1	equ	0xFE5
  7721                           fsr1l	equ	0xFE1
  7722                           indf2	equ	0xFDF
  7723                           postinc2	equ	0xFDE
  7724                           postdec2	equ	0xFDD
  7725                           fsr2h	equ	0xFDA
  7726                           fsr2l	equ	0xFD9
  7727                           status	equ	0xFD8
  7728                           
  7729 ;; *************** function _chkisr *****************
  7730 ;; Defined at:
  7731 ;;		line 28 in file "Interrupt.c"
  7732 ;; Parameters:    Size  Location     Type
  7733 ;;		None
  7734 ;; Auto vars:     Size  Location     Type
  7735 ;;		None
  7736 ;; Return value:  Size  Location     Type
  7737 ;;		None               void
  7738 ;; Registers used:
  7739 ;;		wreg, status,2, status,0, cstack
  7740 ;; Tracked objects:
  7741 ;;		On entry : 0/0
  7742 ;;		On exit  : 0/0
  7743 ;;		Unchanged: 0/0
  7744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7745 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7746 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7747 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7748 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7749 ;;Total ram usage:       14 bytes
  7750 ;; Hardware stack levels used:    1
  7751 ;; Hardware stack levels required when called:    2
  7752 ;; This function calls:
  7753 ;;		_INT0_isr
  7754 ;;		_TIMER1_isr
  7755 ;; This function is called by:
  7756 ;;		Interrupt level 2
  7757 ;; This function uses a non-reentrant model
  7758 ;;
  7759                           
  7760                           	psect	intcode
  7761  000008                     __pintcode:
  7762                           	opt stack 0
  7763  000008                     _chkisr:
  7764                           	opt stack 19
  7765                           
  7766                           ;incstack = 0
  7767  000008  CFFA F003          	movff	pclath,??_chkisr
  7768  00000C  CFFB F004          	movff	pclatu,??_chkisr+1
  7769  000010  CFE9 F005          	movff	fsr0l,??_chkisr+2
  7770  000014  ED50  F006         	call	int_func,f	;refresh shadow registers
  7771                           pclatu	equ	0xFFB
  7772                           pclath	equ	0xFFA
  7773                           tblptru	equ	0xFF8
  7774                           tblptrh	equ	0xFF7
  7775                           tblptrl	equ	0xFF6
  7776                           tablat	equ	0xFF5
  7777                           prodh	equ	0xFF4
  7778                           prodl	equ	0xFF3
  7779                           intcon	equ	0xFF2
  7780                           intcon2	equ	0xFF1
  7781                           postinc0	equ	0xFEE
  7782                           fsr0l	equ	0xFE9
  7783                           wreg	equ	0xFE8
  7784                           postdec1	equ	0xFE5
  7785                           fsr1l	equ	0xFE1
  7786                           indf2	equ	0xFDF
  7787                           postinc2	equ	0xFDE
  7788                           postdec2	equ	0xFDD
  7789                           fsr2h	equ	0xFDA
  7790                           fsr2l	equ	0xFD9
  7791                           status	equ	0xFD8
  7792                           
  7793                           	psect	intcode_body
  7794  000CA0                     __pintcode_body:
  7795                           	opt stack 19
  7796  000CA0                     int_func:
  7797                           	opt stack 19
  7798  000CA0  0006               	pop		; remove dummy address from shadow register refresh
  7799  000CA2  CFEA F006          	movff	fsr0h,??_chkisr+3
  7800  000CA6  CFE1 F007          	movff	fsr1l,??_chkisr+4
  7801  000CAA  CFE2 F008          	movff	fsr1h,??_chkisr+5
  7802  000CAE  CFD9 F009          	movff	fsr2l,??_chkisr+6
  7803  000CB2  CFDA F00A          	movff	fsr2h,??_chkisr+7
  7804  000CB6  CFF3 F00B          	movff	prodl,??_chkisr+8
  7805  000CBA  CFF4 F00C          	movff	prodh,??_chkisr+9
  7806  000CBE  CFF6 F00D          	movff	tblptrl,??_chkisr+10
  7807  000CC2  CFF7 F00E          	movff	tblptrh,??_chkisr+11
  7808  000CC6  CFF8 F00F          	movff	tblptru,??_chkisr+12
  7809  000CCA  CFF5 F010          	movff	tablat,??_chkisr+13
  7810                           
  7811                           ;Interrupt.c: 30: if (PIR1bits.TMR1IF == 1) TIMER1_isr();
  7812  000CCE  A09E               	btfss	3998,0,c	;volatile
  7813  000CD0  D003               	goto	i2l2343
  7814  000CD2  EC5E  F00A         	call	_TIMER1_isr	;wreg free
  7815  000CD6  D000               	goto	i2l2343
  7816  000CD8                     i2l2343:
  7817                           
  7818                           ;Interrupt.c: 31: if (INTCONbits.INT0IF == 1) INT0_isr();
  7819  000CD8  A2F2               	btfss	intcon,1,c	;volatile
  7820  000CDA  D003               	goto	i2l221
  7821  000CDC  ECBB  F001         	call	_INT0_isr	;wreg free
  7822  000CE0  D000               	goto	i2l221
  7823  000CE2                     i2l221:
  7824  000CE2  C010  FFF5         	movff	??_chkisr+13,tablat
  7825  000CE6  C00F  FFF8         	movff	??_chkisr+12,tblptru
  7826  000CEA  C00E  FFF7         	movff	??_chkisr+11,tblptrh
  7827  000CEE  C00D  FFF6         	movff	??_chkisr+10,tblptrl
  7828  000CF2  C00C  FFF4         	movff	??_chkisr+9,prodh
  7829  000CF6  C00B  FFF3         	movff	??_chkisr+8,prodl
  7830  000CFA  C00A  FFDA         	movff	??_chkisr+7,fsr2h
  7831  000CFE  C009  FFD9         	movff	??_chkisr+6,fsr2l
  7832  000D02  C008  FFE2         	movff	??_chkisr+5,fsr1h
  7833  000D06  C007  FFE1         	movff	??_chkisr+4,fsr1l
  7834  000D0A  C006  FFEA         	movff	??_chkisr+3,fsr0h
  7835  000D0E  C005  FFE9         	movff	??_chkisr+2,fsr0l
  7836  000D12  C004  FFFB         	movff	??_chkisr+1,pclatu
  7837  000D16  C003  FFFA         	movff	??_chkisr,pclath
  7838  000D1A  0011               	retfie		f
  7839  000D1C                     __end_of_chkisr:
  7840                           	opt stack 0
  7841                           pclatu	equ	0xFFB
  7842                           pclath	equ	0xFFA
  7843                           tblptru	equ	0xFF8
  7844                           tblptrh	equ	0xFF7
  7845                           tblptrl	equ	0xFF6
  7846                           tablat	equ	0xFF5
  7847                           prodh	equ	0xFF4
  7848                           prodl	equ	0xFF3
  7849                           intcon	equ	0xFF2
  7850                           intcon2	equ	0xFF1
  7851                           postinc0	equ	0xFEE
  7852                           fsr0h	equ	0xFEA
  7853                           fsr0l	equ	0xFE9
  7854                           wreg	equ	0xFE8
  7855                           postdec1	equ	0xFE5
  7856                           fsr1h	equ	0xFE2
  7857                           fsr1l	equ	0xFE1
  7858                           indf2	equ	0xFDF
  7859                           postinc2	equ	0xFDE
  7860                           postdec2	equ	0xFDD
  7861                           fsr2h	equ	0xFDA
  7862                           fsr2l	equ	0xFD9
  7863                           status	equ	0xFD8
  7864                           
  7865 ;; *************** function _TIMER1_isr *****************
  7866 ;; Defined at:
  7867 ;;		line 34 in file "Interrupt.c"
  7868 ;; Parameters:    Size  Location     Type
  7869 ;;		None
  7870 ;; Auto vars:     Size  Location     Type
  7871 ;;		None
  7872 ;; Return value:  Size  Location     Type
  7873 ;;		None               void
  7874 ;; Registers used:
  7875 ;;		wreg, status,2
  7876 ;; Tracked objects:
  7877 ;;		On entry : 0/0
  7878 ;;		On exit  : 0/0
  7879 ;;		Unchanged: 0/0
  7880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7881 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7882 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7883 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7884 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7885 ;;Total ram usage:        0 bytes
  7886 ;; Hardware stack levels used:    1
  7887 ;; This function calls:
  7888 ;;		Nothing
  7889 ;; This function is called by:
  7890 ;;		_chkisr
  7891 ;; This function uses a non-reentrant model
  7892 ;;
  7893                           
  7894                           	psect	text51
  7895  0014BC                     __ptext51:
  7896                           	opt stack 0
  7897  0014BC                     _TIMER1_isr:
  7898                           	opt stack 20
  7899                           
  7900                           ;Interrupt.c: 36: Nec_state = 0;
  7901                           
  7902                           ;incstack = 0
  7903  0014BC  0E00               	movlw	0
  7904  0014BE  6E4E               	movwf	_Nec_state,c
  7905                           
  7906                           ;Interrupt.c: 37: INTCON2bits.INTEDG0 = 0;
  7907  0014C0  9CF1               	bcf	intcon2,6,c	;volatile
  7908                           
  7909                           ;Interrupt.c: 38: T1CONbits.TMR1ON = 0;
  7910  0014C2  90CD               	bcf	4045,0,c	;volatile
  7911                           
  7912                           ;Interrupt.c: 39: PIR1bits.TMR1IF = 0;
  7913  0014C4  909E               	bcf	3998,0,c	;volatile
  7914  0014C6  0012               	return		;funcret
  7915  0014C8                     __end_of_TIMER1_isr:
  7916                           	opt stack 0
  7917                           pclatu	equ	0xFFB
  7918                           pclath	equ	0xFFA
  7919                           tblptru	equ	0xFF8
  7920                           tblptrh	equ	0xFF7
  7921                           tblptrl	equ	0xFF6
  7922                           tablat	equ	0xFF5
  7923                           prodh	equ	0xFF4
  7924                           prodl	equ	0xFF3
  7925                           intcon	equ	0xFF2
  7926                           intcon2	equ	0xFF1
  7927                           postinc0	equ	0xFEE
  7928                           fsr0h	equ	0xFEA
  7929                           fsr0l	equ	0xFE9
  7930                           wreg	equ	0xFE8
  7931                           postdec1	equ	0xFE5
  7932                           fsr1h	equ	0xFE2
  7933                           fsr1l	equ	0xFE1
  7934                           indf2	equ	0xFDF
  7935                           postinc2	equ	0xFDE
  7936                           postdec2	equ	0xFDD
  7937                           fsr2h	equ	0xFDA
  7938                           fsr2l	equ	0xFD9
  7939                           status	equ	0xFD8
  7940                           
  7941 ;; *************** function _INT0_isr *****************
  7942 ;; Defined at:
  7943 ;;		line 48 in file "Interrupt.c"
  7944 ;; Parameters:    Size  Location     Type
  7945 ;;		None
  7946 ;; Auto vars:     Size  Location     Type
  7947 ;;		None
  7948 ;; Return value:  Size  Location     Type
  7949 ;;		None               void
  7950 ;; Registers used:
  7951 ;;		wreg, status,2, status,0, cstack
  7952 ;; Tracked objects:
  7953 ;;		On entry : 0/0
  7954 ;;		On exit  : 0/0
  7955 ;;		Unchanged: 0/0
  7956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7957 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7958 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7959 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7960 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7961 ;;Total ram usage:        2 bytes
  7962 ;; Hardware stack levels used:    1
  7963 ;; Hardware stack levels required when called:    1
  7964 ;; This function calls:
  7965 ;;		_force_nec_state0
  7966 ;; This function is called by:
  7967 ;;		_chkisr
  7968 ;; This function uses a non-reentrant model
  7969 ;;
  7970                           
  7971                           	psect	text52
  7972  000376                     __ptext52:
  7973                           	opt stack 0
  7974  000376                     _INT0_isr:
  7975                           	opt stack 19
  7976                           
  7977                           ;Interrupt.c: 51: INTCONbits.INT0IF = 0;
  7978                           
  7979                           ;incstack = 0
  7980  000376  92F2               	bcf	intcon,1,c	;volatile
  7981                           
  7982                           ;Interrupt.c: 52: if (Nec_state != 0)
  7983  000378  504E               	movf	_Nec_state,w,c
  7984  00037A  B4D8               	btfsc	status,2,c
  7985  00037C  D09A               	goto	i2l2041
  7986                           
  7987                           ;Interrupt.c: 53: {
  7988                           ;Interrupt.c: 54: Time_Elapsed = (TMR1H << 8) | TMR1L;
  7989  00037E  50CE               	movf	4046,w,c	;volatile
  7990  000380  CFCF F001          	movff	4047,??_INT0_isr	;volatile
  7991  000384  6A02               	clrf	(??_INT0_isr+1)& (0+255),c
  7992  000386  C001  F002         	movff	??_INT0_isr,??_INT0_isr+1
  7993  00038A  6A01               	clrf	??_INT0_isr,c
  7994  00038C  1001               	iorwf	??_INT0_isr,w,c
  7995  00038E  6E42               	movwf	_Time_Elapsed,c
  7996  000390  5002               	movf	??_INT0_isr+1,w,c
  7997  000392  6E43               	movwf	_Time_Elapsed+1,c
  7998                           
  7999                           ;Interrupt.c: 55: TMR1H = 0;
  8000  000394  0E00               	movlw	0
  8001  000396  6ECF               	movwf	4047,c	;volatile
  8002                           
  8003                           ;Interrupt.c: 56: TMR1L = 0;
  8004  000398  0E00               	movlw	0
  8005  00039A  6ECE               	movwf	4046,c	;volatile
  8006                           
  8007                           ;Interrupt.c: 57: }
  8008                           ;Interrupt.c: 59: switch(Nec_state)
  8009  00039C  D08A               	goto	i2l2041
  8010  00039E                     i2l1975:
  8011                           
  8012                           ;Interrupt.c: 62: {
  8013                           ;Interrupt.c: 63: TMR1H = 0;
  8014  00039E  0E00               	movlw	0
  8015  0003A0  6ECF               	movwf	4047,c	;volatile
  8016                           
  8017                           ;Interrupt.c: 64: TMR1L = 0;
  8018  0003A2  0E00               	movlw	0
  8019  0003A4  6ECE               	movwf	4046,c	;volatile
  8020                           
  8021                           ;Interrupt.c: 65: PIR1bits.TMR1IF = 0;
  8022  0003A6  909E               	bcf	3998,0,c	;volatile
  8023                           
  8024                           ;Interrupt.c: 66: T1CON= 0x90;
  8025  0003A8  0E90               	movlw	144
  8026  0003AA  6ECD               	movwf	4045,c	;volatile
  8027                           
  8028                           ;Interrupt.c: 67: T1CONbits.TMR1ON = 1;
  8029  0003AC  80CD               	bsf	4045,0,c	;volatile
  8030                           
  8031                           ;Interrupt.c: 68: bit_count = 0;
  8032  0003AE  0E00               	movlw	0
  8033  0003B0  6E55               	movwf	_bit_count,c
  8034                           
  8035                           ;Interrupt.c: 69: Nec_code = 0;
  8036  0003B2  0E00               	movlw	0
  8037  0003B4  6E3E               	movwf	_Nec_code,c
  8038  0003B6  0E00               	movlw	0
  8039  0003B8  6E3F               	movwf	_Nec_code+1,c
  8040  0003BA  0E00               	movlw	0
  8041  0003BC  6E40               	movwf	_Nec_code+2,c
  8042  0003BE  0E00               	movlw	0
  8043  0003C0  6E41               	movwf	_Nec_code+3,c
  8044                           
  8045                           ;Interrupt.c: 70: Nec_state = 1;
  8046  0003C2  0E01               	movlw	1
  8047  0003C4  6E4E               	movwf	_Nec_state,c
  8048  0003C6  D073               	goto	i2l2035
  8049                           
  8050                           ;Interrupt.c: 72: return;
  8051                           
  8052                           ;Interrupt.c: 71: INTCON2bits.INTEDG0 = 1;
  8053  0003C8  D085               	goto	i2l233
  8054  0003CA                     i2l1985:
  8055                           
  8056                           ;Interrupt.c: 76: {
  8057                           ;Interrupt.c: 77: if (Time_Elapsed > 8500 && Time_Elapsed < 9500)
  8058  0003CA  0E35               	movlw	53
  8059  0003CC  5C42               	subwf	_Time_Elapsed,w,c
  8060  0003CE  0E21               	movlw	33
  8061  0003D0  5843               	subwfb	_Time_Elapsed+1,w,c
  8062  0003D2  A0D8               	btfss	status,0,c
  8063  0003D4  D009               	goto	i2l1991
  8064  0003D6  0E1C               	movlw	28
  8065  0003D8  5C42               	subwf	_Time_Elapsed,w,c
  8066  0003DA  0E25               	movlw	37
  8067  0003DC  5843               	subwfb	_Time_Elapsed+1,w,c
  8068  0003DE  B0D8               	btfsc	status,0,c
  8069  0003E0  D003               	goto	i2l1991
  8070                           
  8071                           ;Interrupt.c: 78: {
  8072                           ;Interrupt.c: 79: Nec_state = 2;
  8073  0003E2  0E02               	movlw	2
  8074  0003E4  6E4E               	movwf	_Nec_state,c
  8075                           
  8076                           ;Interrupt.c: 80: }
  8077  0003E6  D02A               	goto	i2l2017
  8078  0003E8                     i2l1991:
  8079                           
  8080                           ;Interrupt.c: 81: else
  8081                           ;Interrupt.c: 82: {
  8082                           ;Interrupt.c: 83: force_nec_state0();
  8083  0003E8  EC7B  F00A         	call	_force_nec_state0	;wreg free
  8084  0003EC  D027               	goto	i2l2017
  8085  0003EE  D026               	goto	i2l2017
  8086                           
  8087                           ;Interrupt.c: 86: return;
  8088                           
  8089                           ;Interrupt.c: 84: }
  8090                           ;Interrupt.c: 85: INTCON2bits.INTEDG0 = 0;
  8091  0003F0  D071               	goto	i2l233
  8092  0003F2                     i2l1997:
  8093                           
  8094                           ;Interrupt.c: 90: {
  8095                           ;Interrupt.c: 91: if (Time_Elapsed > 4000 && Time_Elapsed < 5000 )
  8096  0003F2  0EA1               	movlw	161
  8097  0003F4  5C42               	subwf	_Time_Elapsed,w,c
  8098  0003F6  0E0F               	movlw	15
  8099  0003F8  5843               	subwfb	_Time_Elapsed+1,w,c
  8100  0003FA  A0D8               	btfss	status,0,c
  8101  0003FC  D009               	goto	i2l2003
  8102  0003FE  0E88               	movlw	136
  8103  000400  5C42               	subwf	_Time_Elapsed,w,c
  8104  000402  0E13               	movlw	19
  8105  000404  5843               	subwfb	_Time_Elapsed+1,w,c
  8106  000406  B0D8               	btfsc	status,0,c
  8107  000408  D003               	goto	i2l2003
  8108  00040A                     
  8109                           ;Interrupt.c: 92: {
  8110                           ;Interrupt.c: 93: Nec_state = 3;
  8111  00040A  0E03               	movlw	3
  8112  00040C  6E4E               	movwf	_Nec_state,c
  8113                           
  8114                           ;Interrupt.c: 94: }
  8115  00040E  D04F               	goto	i2l2035
  8116  000410                     i2l2003:
  8117                           
  8118                           ;Interrupt.c: 95: else
  8119                           ;Interrupt.c: 96: {
  8120                           ;Interrupt.c: 97: force_nec_state0();
  8121  000410  EC7B  F00A         	call	_force_nec_state0	;wreg free
  8122  000414  D04C               	goto	i2l2035
  8123  000416  D04B               	goto	i2l2035
  8124                           
  8125                           ;Interrupt.c: 100: return;
  8126                           
  8127                           ;Interrupt.c: 98: }
  8128                           ;Interrupt.c: 99: INTCON2bits.INTEDG0 = 1;
  8129  000418  D05D               	goto	i2l233
  8130  00041A                     i2l2009:
  8131                           
  8132                           ;Interrupt.c: 104: {
  8133                           ;Interrupt.c: 105: if (Time_Elapsed > 400 && Time_Elapsed < 700)
  8134  00041A  0E91               	movlw	145
  8135  00041C  5C42               	subwf	_Time_Elapsed,w,c
  8136  00041E  0E01               	movlw	1
  8137  000420  5843               	subwfb	_Time_Elapsed+1,w,c
  8138  000422  A0D8               	btfss	status,0,c
  8139  000424  D008               	goto	i2l2015
  8140  000426  0EBC               	movlw	188
  8141  000428  5C42               	subwf	_Time_Elapsed,w,c
  8142  00042A  0E02               	movlw	2
  8143  00042C  5843               	subwfb	_Time_Elapsed+1,w,c
  8144  00042E  B0D8               	btfsc	status,0,c
  8145  000430  D002               	goto	i2l2015
  8146                           
  8147                           ;Interrupt.c: 106: {
  8148                           ;Interrupt.c: 107: Nec_state = 4;
  8149  000432  0E04               	movlw	4
  8150  000434  D7D7               	goto	L2
  8151  000436                     i2l2015:
  8152                           
  8153                           ;Interrupt.c: 109: else
  8154                           ;Interrupt.c: 110: {
  8155                           ;Interrupt.c: 111: force_nec_state0();
  8156  000436  EC7B  F00A         	call	_force_nec_state0	;wreg free
  8157  00043A  D000               	goto	i2l2017
  8158  00043C                     i2l2017:
  8159                           
  8160                           ;Interrupt.c: 112: }
  8161                           ;Interrupt.c: 113: INTCON2bits.INTEDG0 = 0;
  8162  00043C  9CF1               	bcf	intcon2,6,c	;volatile
  8163                           
  8164                           ;Interrupt.c: 114: return;
  8165  00043E  D04A               	goto	i2l233
  8166  000440                     i2l2021:
  8167                           
  8168                           ;Interrupt.c: 118: {
  8169                           ;Interrupt.c: 119: if (Time_Elapsed > 400 && Time_Elapsed < 1800)
  8170  000440  0E91               	movlw	145
  8171  000442  5C42               	subwf	_Time_Elapsed,w,c
  8172  000444  0E01               	movlw	1
  8173  000446  5843               	subwfb	_Time_Elapsed+1,w,c
  8174  000448  A0D8               	btfss	status,0,c
  8175  00044A  D02E               	goto	i2l2033
  8176  00044C  0E08               	movlw	8
  8177  00044E  5C42               	subwf	_Time_Elapsed,w,c
  8178  000450  0E07               	movlw	7
  8179  000452  5843               	subwfb	_Time_Elapsed+1,w,c
  8180  000454  B0D8               	btfsc	status,0,c
  8181  000456  D028               	goto	i2l2033
  8182                           
  8183                           ;Interrupt.c: 120: {
  8184                           ;Interrupt.c: 121: Nec_code = Nec_code << 1;
  8185  000458  90D8               	bcf	status,0,c
  8186  00045A  343E               	rlcf	_Nec_code,w,c
  8187  00045C  6E3E               	movwf	_Nec_code,c
  8188  00045E  343F               	rlcf	_Nec_code+1,w,c
  8189  000460  6E3F               	movwf	_Nec_code+1,c
  8190  000462  3440               	rlcf	_Nec_code+2,w,c
  8191  000464  6E40               	movwf	_Nec_code+2,c
  8192  000466  3441               	rlcf	_Nec_code+3,w,c
  8193  000468  6E41               	movwf	_Nec_code+3,c
  8194                           
  8195                           ;Interrupt.c: 122: if (Time_Elapsed > 1000)
  8196  00046A  0EE9               	movlw	233
  8197  00046C  5C42               	subwf	_Time_Elapsed,w,c
  8198  00046E  0E03               	movlw	3
  8199  000470  5843               	subwfb	_Time_Elapsed+1,w,c
  8200  000472  A0D8               	btfss	status,0,c
  8201  000474  D00C               	goto	i2l245
  8202                           
  8203                           ;Interrupt.c: 123: {
  8204                           ;Interrupt.c: 124: Nec_code = Nec_code + 1;
  8205  000476  0E01               	movlw	1
  8206  000478  243E               	addwf	_Nec_code,w,c
  8207  00047A  6E3E               	movwf	_Nec_code,c
  8208  00047C  0E00               	movlw	0
  8209  00047E  203F               	addwfc	_Nec_code+1,w,c
  8210  000480  6E3F               	movwf	_Nec_code+1,c
  8211  000482  0E00               	movlw	0
  8212  000484  2040               	addwfc	_Nec_code+2,w,c
  8213  000486  6E40               	movwf	_Nec_code+2,c
  8214  000488  0E00               	movlw	0
  8215  00048A  2041               	addwfc	_Nec_code+3,w,c
  8216  00048C  6E41               	movwf	_Nec_code+3,c
  8217  00048E                     i2l245:
  8218                           
  8219                           ;Interrupt.c: 125: }
  8220                           ;Interrupt.c: 126: bit_count = bit_count + 1;
  8221  00048E  2855               	incf	_bit_count,w,c
  8222  000490  6E55               	movwf	_bit_count,c
  8223                           
  8224                           ;Interrupt.c: 127: if (bit_count > 31)
  8225  000492  0E1F               	movlw	31
  8226  000494  6455               	cpfsgt	_bit_count,c
  8227  000496  D7B9               	goto	L3
  8228                           
  8229                           ;Interrupt.c: 128: {
  8230                           ;Interrupt.c: 129: nec_ok = 1;
  8231  000498  0E00               	movlw	0
  8232  00049A  6E47               	movwf	_nec_ok+1,c
  8233  00049C  0E01               	movlw	1
  8234  00049E  6E46               	movwf	_nec_ok,c
  8235                           
  8236                           ;Interrupt.c: 130: INTCONbits.INT0IE = 0;
  8237  0004A0  98F2               	bcf	intcon,4,c	;volatile
  8238                           
  8239                           ;Interrupt.c: 131: Nec_state = 0;
  8240  0004A2  0E00               	movlw	0
  8241  0004A4  6E4E               	movwf	_Nec_state,c
  8242  0004A6  D7B1               	goto	L3
  8243  0004A8                     i2l2033:
  8244                           
  8245                           ;Interrupt.c: 135: else
  8246                           ;Interrupt.c: 136: {
  8247                           ;Interrupt.c: 137: force_nec_state0();
  8248  0004A8  EC7B  F00A         	call	_force_nec_state0	;wreg free
  8249  0004AC  D000               	goto	i2l2035
  8250  0004AE                     i2l2035:
  8251                           
  8252                           ;Interrupt.c: 138: }
  8253                           ;Interrupt.c: 139: INTCON2bits.INTEDG0 = 1;
  8254  0004AE  8CF1               	bsf	intcon2,6,c	;volatile
  8255                           
  8256                           ;Interrupt.c: 141: }
  8257                           ;Interrupt.c: 142: }
  8258                           
  8259                           ;Interrupt.c: 140: return;
  8260  0004B0  D011               	goto	i2l233
  8261  0004B2                     i2l2041:
  8262  0004B2  504E               	movf	_Nec_state,w,c
  8263                           
  8264                           ; Switch size 1, requested type "space"
  8265                           ; Number of cases is 5, Range of values is 0 to 4
  8266                           ; switch strategies available:
  8267                           ; Name         Instructions Cycles
  8268                           ; simple_byte           16     9 (average)
  8269                           ;	Chosen strategy is simple_byte
  8270  0004B4  0A00               	xorlw	0	; case 0
  8271  0004B6  B4D8               	btfsc	status,2,c
  8272  0004B8  D772               	goto	i2l1975
  8273  0004BA  0A01               	xorlw	1	; case 1
  8274  0004BC  B4D8               	btfsc	status,2,c
  8275  0004BE  D785               	goto	i2l1985
  8276  0004C0  0A03               	xorlw	3	; case 2
  8277  0004C2  B4D8               	btfsc	status,2,c
  8278  0004C4  D796               	goto	i2l1997
  8279  0004C6  0A01               	xorlw	1	; case 3
  8280  0004C8  B4D8               	btfsc	status,2,c
  8281  0004CA  D7A7               	goto	i2l2009
  8282  0004CC  0A07               	xorlw	7	; case 4
  8283  0004CE  B4D8               	btfsc	status,2,c
  8284  0004D0  D7B7               	goto	i2l2021
  8285  0004D2  D000               	goto	i2l233
  8286  0004D4                     i2l233:
  8287  0004D4  0012               	return		;funcret
  8288  0004D6                     __end_of_INT0_isr:
  8289                           	opt stack 0
  8290                           pclatu	equ	0xFFB
  8291                           pclath	equ	0xFFA
  8292                           tblptru	equ	0xFF8
  8293                           tblptrh	equ	0xFF7
  8294                           tblptrl	equ	0xFF6
  8295                           tablat	equ	0xFF5
  8296                           prodh	equ	0xFF4
  8297                           prodl	equ	0xFF3
  8298                           intcon	equ	0xFF2
  8299                           intcon2	equ	0xFF1
  8300                           postinc0	equ	0xFEE
  8301                           fsr0h	equ	0xFEA
  8302                           fsr0l	equ	0xFE9
  8303                           wreg	equ	0xFE8
  8304                           postdec1	equ	0xFE5
  8305                           fsr1h	equ	0xFE2
  8306                           fsr1l	equ	0xFE1
  8307                           indf2	equ	0xFDF
  8308                           postinc2	equ	0xFDE
  8309                           postdec2	equ	0xFDD
  8310                           fsr2h	equ	0xFDA
  8311                           fsr2l	equ	0xFD9
  8312                           status	equ	0xFD8
  8313                           
  8314 ;; *************** function _force_nec_state0 *****************
  8315 ;; Defined at:
  8316 ;;		line 42 in file "Interrupt.c"
  8317 ;; Parameters:    Size  Location     Type
  8318 ;;		None
  8319 ;; Auto vars:     Size  Location     Type
  8320 ;;		None
  8321 ;; Return value:  Size  Location     Type
  8322 ;;		None               void
  8323 ;; Registers used:
  8324 ;;		wreg, status,2
  8325 ;; Tracked objects:
  8326 ;;		On entry : 0/0
  8327 ;;		On exit  : 0/0
  8328 ;;		Unchanged: 0/0
  8329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8330 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8331 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8332 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8333 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8334 ;;Total ram usage:        0 bytes
  8335 ;; Hardware stack levels used:    1
  8336 ;; This function calls:
  8337 ;;		Nothing
  8338 ;; This function is called by:
  8339 ;;		_INT0_isr
  8340 ;; This function uses a non-reentrant model
  8341 ;;
  8342                           
  8343                           	psect	text53
  8344  0014F6                     __ptext53:
  8345                           	opt stack 0
  8346  0014F6                     _force_nec_state0:
  8347                           	opt stack 19
  8348                           
  8349                           ;Interrupt.c: 44: Nec_state=0;
  8350                           
  8351                           ;incstack = 0
  8352  0014F6  0E00               	movlw	0
  8353  0014F8  6E4E               	movwf	_Nec_state,c
  8354                           
  8355                           ;Interrupt.c: 45: T1CONbits.TMR1ON = 0;
  8356  0014FA  90CD               	bcf	4045,0,c	;volatile
  8357  0014FC  0012               	return		;funcret
  8358  0014FE                     __end_of_force_nec_state0:
  8359                           	opt stack 0
  8360                           pclatu	equ	0xFFB
  8361                           pclath	equ	0xFFA
  8362                           tblptru	equ	0xFF8
  8363                           tblptrh	equ	0xFF7
  8364                           tblptrl	equ	0xFF6
  8365                           tablat	equ	0xFF5
  8366                           prodh	equ	0xFF4
  8367                           prodl	equ	0xFF3
  8368                           intcon	equ	0xFF2
  8369                           intcon2	equ	0xFF1
  8370                           postinc0	equ	0xFEE
  8371                           fsr0h	equ	0xFEA
  8372                           fsr0l	equ	0xFE9
  8373                           wreg	equ	0xFE8
  8374                           postdec1	equ	0xFE5
  8375                           fsr1h	equ	0xFE2
  8376                           fsr1l	equ	0xFE1
  8377                           indf2	equ	0xFDF
  8378                           postinc2	equ	0xFDE
  8379                           postdec2	equ	0xFDD
  8380                           fsr2h	equ	0xFDA
  8381                           fsr2l	equ	0xFD9
  8382                           status	equ	0xFD8
  8383                           pclatu	equ	0xFFB
  8384                           pclath	equ	0xFFA
  8385                           tblptru	equ	0xFF8
  8386                           tblptrh	equ	0xFF7
  8387                           tblptrl	equ	0xFF6
  8388                           tablat	equ	0xFF5
  8389                           prodh	equ	0xFF4
  8390                           prodl	equ	0xFF3
  8391                           intcon	equ	0xFF2
  8392                           intcon2	equ	0xFF1
  8393                           postinc0	equ	0xFEE
  8394                           fsr0h	equ	0xFEA
  8395                           fsr0l	equ	0xFE9
  8396                           wreg	equ	0xFE8
  8397                           postdec1	equ	0xFE5
  8398                           fsr1h	equ	0xFE2
  8399                           fsr1l	equ	0xFE1
  8400                           indf2	equ	0xFDF
  8401                           postinc2	equ	0xFDE
  8402                           postdec2	equ	0xFDD
  8403                           fsr2h	equ	0xFDA
  8404                           fsr2l	equ	0xFD9
  8405                           status	equ	0xFD8
  8406                           
  8407                           	psect	rparam
  8408  0000                     pclatu	equ	0xFFB
  8409                           pclath	equ	0xFFA
  8410                           tblptru	equ	0xFF8
  8411                           tblptrh	equ	0xFF7
  8412                           tblptrl	equ	0xFF6
  8413                           tablat	equ	0xFF5
  8414                           prodh	equ	0xFF4
  8415                           prodl	equ	0xFF3
  8416                           intcon	equ	0xFF2
  8417                           intcon2	equ	0xFF1
  8418                           postinc0	equ	0xFEE
  8419                           fsr0h	equ	0xFEA
  8420                           fsr0l	equ	0xFE9
  8421                           wreg	equ	0xFE8
  8422                           postdec1	equ	0xFE5
  8423                           fsr1h	equ	0xFE2
  8424                           fsr1l	equ	0xFE1
  8425                           indf2	equ	0xFDF
  8426                           postinc2	equ	0xFDE
  8427                           postdec2	equ	0xFDD
  8428                           fsr2h	equ	0xFDA
  8429                           fsr2l	equ	0xFD9
  8430                           status	equ	0xFD8


Data Sizes:
    Strings     118
    Constant    493
    Data        159
    BSS         78
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     61     110
    BANK0           128     15     119
    BANK1           256      0      84
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_4(CODE[8]), STR_3(CODE[20]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 43
		 -> STR_2(CODE[43]), STR_1(CODE[30]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    txt	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 


Critical Paths under _main in COMRAM

    _printf->___lwmod
    ___lwmod->___lwdiv
    ___awdiv->___wmul
    _init_UART->_OpenUSART
    _Initialize_Screen->_drawtext
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _write_data->_spiwrite
    _write_command->_spiwrite
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul
    _DS1621_Init->_I2C_Write_Cmd_Write_Data
    _I2C_Write_Cmd_Write_Data->_I2C_Write
    _I2C_Write_Cmd_Only->_I2C_Write
    _DS3231_Setup_Time->_I2C_Write
    _DS3231_Read_Time->_I2C_Read
    _DS1621_Read_Temp->_I2C_Read

Critical Paths under _chkisr in COMRAM

    _chkisr->_INT0_isr

Critical Paths under _main in BANK0

    _Initialize_Screen->_drawtext

Critical Paths under _chkisr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _chkisr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _chkisr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _chkisr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _chkisr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _chkisr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _chkisr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _chkisr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _chkisr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _chkisr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _chkisr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _chkisr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _chkisr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _chkisr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _chkisr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _chkisr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   27094
                                             58 COMRAM     3     3      0
                   _DS1621_Read_Temp
                   _DS3231_Read_Time
                  _DS3231_Setup_Time
                            _Do_Init
                            ___awdiv
                             ___wmul
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              37    23     14    3185
                                             28 COMRAM    28    14     14
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      15
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             16 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     265
                                             23 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     374
                                             16 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              8     4      4     512
                                             22 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Do_Init                                              0     0      0   21856
                        _DS1621_Init
                           _I2C_Init
                  _Initialize_Screen
                     _init_INTERRUPT
                          _init_UART
 ---------------------------------------------------------------------------------
 (2) _init_UART                                            0     0      0     273
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (3) _OpenUSART                                            3     1      2     273
                                             16 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _init_INTERRUPT                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Initialize_Screen                                    0     0      0   21096
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                           _drawtext
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _strcpy                                               6     2      4     287
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _fillScreen                                           2     0      2    2192
                                             35 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (4) _fillRectangle                                       12     7      5    2096
                                             23 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (3) _drawtext                                            17     9      8   12331
                                             56 COMRAM     2     2      0
                                              0 BANK0     15     7      8
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (4) _strlen                                               6     4      2     195
                                             16 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (4) _drawChar                                            11     4      7   10774
                                             45 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (5) _fillRect                                            11     6      5    3876
                                             34 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (6) _drawFastVLine                                       11     7      4    3102
                                             23 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (5) _drawPixel                                            4     1      3    4207
                                             23 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (5) _setAddrWindow                                        4     1      3    1034
                                             19 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _TFT_GreenTab_Initialize                              0     0      0    4364
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (4) _Rcmd3                                                0     0      0    2052
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (4) _Rcmd2red                                             0     0      0     130
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (4) _Rcmd1                                                0     0      0    2052
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (6) _write_data                                           1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (6) _write_command                                        1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (5) _spiwrite                                             2     2      0      34
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _LCD_Reset                                            0     0      0    1922
                           _delay_ms
 ---------------------------------------------------------------------------------
 (5) _delay_ms                                             6     4      2    1922
                                             22 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     882
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _I2C_Init                                             4     0      4      53
                                             16 COMRAM     4     0      4
                         _i2cHighScl
                         _i2cHighSda
 ---------------------------------------------------------------------------------
 (2) _DS1621_Init                                          1     1      0     434
                                             21 COMRAM     1     1      0
                 _I2C_Write_Cmd_Only
           _I2C_Write_Cmd_Write_Data
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Write_Data                             3     1      2     232
                                             18 COMRAM     3     1      2
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Only                                   2     1      1     157
                                             18 COMRAM     2     1      1
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DS3231_Setup_Time                                    2     2      0      90
                                             18 COMRAM     2     2      0
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DS3231_Read_Time                                     3     3      0     195
                                             19 COMRAM     2     2      0
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DS1621_Read_Temp                                     5     3      2     241
                                             19 COMRAM     5     3      2
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Write                                            2     2      0      60
                                             16 COMRAM     2     2      0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Stop                                             0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Start                                            0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (2) _I2C_Read                                             3     3      0      90
                                             16 COMRAM     3     3      0
                             _i2cAck
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                            _i2cNack
 ---------------------------------------------------------------------------------
 (3) _i2cNack                                              0     0      0       0
                         _i2cHighScl
                          _i2cLowScl
 ---------------------------------------------------------------------------------
 (3) _i2cAck                                               0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (2) _I2C_ReStart                                          0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (5) _i2cLowSda                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2cLowScl                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2cHighSda                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2cHighScl                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _chkisr                                             14    14      0       0
                                              2 COMRAM    14    14      0
                           _INT0_isr
                         _TIMER1_isr
 ---------------------------------------------------------------------------------
 (11) _TIMER1_isr                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _INT0_isr                                            2     2      0       0
                                              0 COMRAM     2     2      0
                   _force_nec_state0
 ---------------------------------------------------------------------------------
 (12) _force_nec_state0                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DS1621_Read_Temp
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Read_Time
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Setup_Time
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _Do_Init
     _DS1621_Init
       _I2C_Write_Cmd_Only
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Cmd_Write_Data
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _I2C_Init
       _i2cHighScl
       _i2cHighSda
     _Initialize_Screen
       _LCD_Reset
         _delay_ms
           ___wmul
       _TFT_GreenTab_Initialize
         _Rcmd1
           _delay_ms
             ___wmul
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _Rcmd2red
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _Rcmd3
           _delay_ms
             ___wmul
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
       _fillScreen
         _fillRectangle
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _strcpy
     _init_INTERRUPT
     _init_UART
       _OpenUSART
   ___awdiv
     ___wmul (ARG)
   ___wmul
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch

 _chkisr (ROOT)
   _INT0_isr
     _force_nec_state0
   _TIMER1_isr

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      54       7       32.8%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      F      77       5       93.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     3D      6E       1       86.6%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     139      34        0.0%
DATA                 0      0     139       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Sat Oct 30 00:35:46 2021

                                _i 005B                 __size_of_I2C_Start 0012  
                      _SSPSTATbits 000FC7                 __size_of_I2C_Write 003E  
                     ___awdiv@sign 001C                ___wmul@multiplicand 0013  
                              l203 1280                                l151 1216  
                              l313 1312                                l148 1146  
                              l319 0C9E                                l335 062A  
                              l344 0580                                l337 0504  
                              l259 0FCA                                l372 0A20  
                              l269 1434                                l373 098C  
                              l518 14A6                                l375 09FC  
                              l376 0A1E                                l651 0DC2  
                              l627 0374                                l660 0E04  
                              l590 011C                                l663 1364  
                              l655 0DDC                                l656 0DDE  
                              l657 0DE8                                l658 0DEA  
                              l856 0C16                                _PR2 000FCB  
                              _Cmd 004B                                _day 0057  
             __size_of_I2C_ReStart 0016                                _dow 0058  
                              _nbr 0044                                _txt 0048  
                              wreg 000FE8                    ??_fillRectangle 001D  
                     __CFG_LVP$OFF 000000            _TFT_GreenTab_Initialize 1314  
                     __CFG_WDT$OFF 000000                     drawFastVLine@h 0019  
                             l1225 11C8                               l1094 1386  
                             l1186 0F22                               l3051 0DBA  
                             l3043 0DA8                               l1196 1062  
                   drawFastVLine@x 0022                               l4013 09C4  
                             l3141 0EF0                     drawFastVLine@y 0018  
                             l1375 1220                               l4007 0956  
                             l3063 0DD4                               l3055 0DC6  
                             l3047 0DB2                               l3151 0F16  
                             l3143 0EF8                               l1377 1226  
                             l1369 120E                               l4033 0A0A  
                             l4025 09F2                               l3161 1038  
                             l3129 137E                               l4201 0026  
                             l1387 1238                               l3091 1296  
                             l3411 0B98                               l3139 0EE6  
                             l3163 1040                               l4211 004E  
                             l4029 0A00                               l4301 026C  
                             l4213 0064                               l4205 0036  
                             l4039 0A1A                               l3423 0BC0  
                             l3167 1056                               l3159 102E  
                             l4303 0274                               l4311 02A0  
                             l4207 0044                               l4081 0726  
                             l4073 06CE                               l4057 0658  
                             l3089 128C                               l3425 0BCA  
                             l3417 0BAA                               l4313 02A8  
                             l4321 0332                               l4241 014A  
                             l4225 00E6                               l4217 0082  
                             l1755 110A                               l4083 072E  
                             l3443 0C0C                               l3435 0BF0  
                             l3427 0BD2                               l4315 02EC  
                             l4323 0344                               l4307 028C  
                             l4251 0174                               l1765 1120  
                             l1773 1130                               l4069 06AC  
                             l4325 034C                               l4261 01A2  
                             l4245 0164                               l4229 00EE  
                             l1767 1128                               l1759 1112  
                             l3439 0BFC                               l4255 0198  
                             l4247 0168                               l4327 0358  
                             l1777 113C                               l4265 01AE  
                             l1779 1142                               l4283 0206  
                             l4259 019E                               l4275 01D8  
                             l3805 0C86                               l4269 01D2  
                             l4277 01EA                               l4621 0A2C  
                             l3807 0C94                               l4295 024C  
                             l4287 022A                               l3833 12F4  
                             l3841 1076                               l4297 0254  
                             l4289 0234                               l3845 1092  
   I2C_Write_Cmd_Write_Data@Device 0015                               l3791 0C28  
                             l3951 0500                               l3943 04E6  
                             l3961 0540                               l3953 0508  
                             l3795 0C60                               l3963 0574  
                             l3947 04F2                               l3981 05F6  
                             l3973 05A2                               l3965 0578  
                             l3957 0510                               l3983 061E  
                             l3975 05CA                               l3995 1196  
                             l3989 0626                               l3997 119C  
                             STR_1 FFB3                               STR_2 FF88  
                             STR_3 FFD1                               STR_4 FFF6  
                             STR_5 FFE5                               u2460 0C56  
                             u2620 05D8                               u2700 09BA  
                             u3287 14B4                               u2760 0684  
                             u2690 0984                               _RBPU 007F8F  
                             _TRMT 007D61                               _main 0A22  
                             _font FD9B                               _hour 005A  
                 __end_of_I2C_Init 14D2                   __end_of_I2C_Read 1148  
                             _year 006C                               fsr0h 000FEA  
                             _txt1 0100                               fsr1h 000FE2  
                             fsr0l 000FE9                               fsr2h 000FDA  
                             fsr1l 000FE1                               indf2 000FDF  
                             fsr2l 000FD9                               _wrap 006E  
                 __end_of_I2C_Stop 145E                               pclat 000FFA  
               __size_of_LCD_Reset 0012                               prodh 000FF4  
                             prodl 000FF3                               start 0018  
      __size_of_I2C_Write_Cmd_Only 001A                    __end_of_Do_Init 118C  
                  ??_drawFastVLine 001C                    __end_of_i2cNack 14DC  
                     ___param_bank 000010                        ?_TIMER1_isr 0001  
                 __end_of_INT0_isr 04D6                    drawFastVLine@hi 0020  
                  drawFastVLine@lo 0021                              ?_main 0001  
                  __end_of___awdiv 0C18                              _T0CON 000FD5  
                  ___awdiv@divisor 0019                              _T1CON 000FCD  
                            _T2CON 000FCA                              _T3CON 000FB1  
                  __end_of___lwdiv 0F2C                    __end_of___lwmod 106C  
                            i2l221 0CE2                              i2l233 04D4  
                            i2l245 048E                    ___awdiv@counter 001B  
                            _RCSTA 000FAB                              _TMR0H 000FD7  
                            _TMR1H 000FCF                              _TMR0L 000FD6  
                            _TMR3H 000FB3                              _TMR1L 000FCE  
                            _TMR3L 000FB2                              _SPBRG 000FAF  
                            _PORTA 000F80                              _TRISA 000F92  
                            _TRISB 000F93                              _TRISC 000F94  
                            _TRISD 000F95                              _TRISE 000F96  
                            _TXREG 000FAD                              _TXSTA 000FAC  
                            _Rcmd1 0744                              _Rcmd3 0854  
                       _Display_D1 00BF                         _i2cHighSda 14EE  
                       _i2cHighScl 14B0                    __end_of_dpowers FF80  
                            _color 0080                              _font2 FE9A  
                            _found 0059                    __end_of_isdigit 1388  
                            _tempC 006A                              _tempF 006B  
                            _month 005D                              main@U 003B  
                            _putch 14A2                  __end_of_I2C_Start 1470  
                __end_of_I2C_Write 1246                     __CFG_BOREN$OFF 000000  
                            tablat 000FF5                              status 000FD8  
                ?_DS1621_Read_Temp 0014                    write_data@data_ 0013  
               ??_DS1621_Read_Temp 0016                    __initialization 0D1C  
                     __end_of_main 0AE4                       __end_of_font FE9A  
                 __end_of_Rcmd2red 1208                             ??_main 003B  
                    __activetblptr 000002                  ?_DS3231_Read_Time 0001  
                __end_of_LCD_Reset 144C          ??_TFT_GreenTab_Initialize 001D  
               ??_DS3231_Read_Time 0014                             ?_Rcmd1 0001  
                           ?_Rcmd3 0001            __size_of_init_INTERRUPT 0030  
                        I2C_Init@c 0011                          I2C_Read@n 0012  
                           _ADCON1 000FC1                DS1621_Read_Temp@Cmd 0016  
                           _CCPR2L 000FBB                   ___awdiv@dividend 0017  
               __size_of_i2cLowSda 000A                 __size_of_i2cLowScl 0008  
                           ?_putch 0001                             i2l2003 0410  
                           i2l2021 0440                             i2l2015 0436  
                           i2l2033 04A8                             i2l2017 043C  
                           i2l2009 041A                             i2l2041 04B2  
                           i2l2035 04AE                             i2l2343 0CD8  
                        ??_Do_Init 003B                             i2l1991 03E8  
                           i2l1975 039E                             i2l1985 03CA  
                           i2l1997 03F2                             _OSCCON 000FD3  
              __size_of_TIMER1_isr 000C                             _SPBRGH 000FB0  
                           _SSPBUF 000FC9                          ??_i2cNack 0011  
                 _force_nec_state0 14F6                             _Device 004C  
                 __end_of_delay_ms 0FD2                             _i2cAck 1470  
                       _TempSecond 004F                   __end_of_fillRect 10B6  
                 __end_of_drawChar 062C                 __size_of_OpenUSART 0070  
                           ___wmul 133E                          ??___awdiv 001B  
                 __end_of_drawtext 0744                             _chkisr 0008  
                        ??___lwdiv 0015                             _array1 00AA  
                        ??___lwmod 001C                             _buffer 00C9  
                           _nec_ok 0046                             clear_0 0D22  
                           clear_1 0D2E                   ___awdiv@quotient 001D  
                           _minute 005C                             _second 0060  
          DS3231_Setup_Time@Device 0013                             _printf 001C  
                     drawtext@size 00EF                             _strcpy 1282  
                           _strlen 118C                       __pdataCOMRAM 006D  
                        ??_isdigit 0011                          ?_I2C_Init 0011  
                        ?_I2C_Read 0001                          ?_I2C_Stop 0001  
                     __mediumconst FD9A                             tblptrh 000FF7  
                           tblptrl 000FF6                             tblptru 000FF8  
 __end_of_I2C_Write_Cmd_Write_Data 13A8                        ?_i2cHighSda 0001  
                      ?_i2cHighScl 0001                             putch@c 0011  
                 __end_of_spiwrite 143A                         __accesstop 0080  
          __end_of__initialization 0D8C                          ?_INT0_isr 0001  
               _setup_alarm_minute 0062                 _setup_alarm_second 0063  
                    ___rparam_used 000001                      __end_of_Rcmd1 0854  
                    __end_of_Rcmd3 0946                     __pcstackCOMRAM 0001  
                     __pidataBANK0 10B6                       __pidataBANK1 0F2C  
                    __end_of_font2 FF76                  __end_of_i2cLowSda 14E6  
                __end_of_i2cLowScl 14EE                      __end_of_putch 14B0  
                   drawPixel@color 0019             __size_of_write_command 0010  
                       ??_I2C_Init 0015                         ??_I2C_Read 0011  
                     _alarm_minute 0053                       _alarm_second 0054  
                       ??_I2C_Stop 0011                            ??_Rcmd1 001D  
                          ??_Rcmd3 001D                 __size_of_drawPixel 0030  
                __end_of_OpenUSART 0E06                            ??_putch 0011  
                       __pbssBANK0 00C9                   _setup_alarm_hour 0061  
                    ??_DS1621_Init 0016                          ?_Rcmd2red 0001  
               __size_of_init_UART 0014                    spiwrite@spidata 0012  
                       _alarm_date 0051                         ??_INT0_isr 0001  
                       _alarm_hour 0052                            ?_i2cAck 0001  
               __CFG_CCP2MX$PORTBE 000000                     I2C_Read@inByte 0013  
                          ?___wmul 0011                __size_of_i2cHighSda 0008  
              __size_of_i2cHighScl 000C                            ?_chkisr 0001  
           __size_of_setAddrWindow 004E   I2C_Write_Cmd_Write_Data@Data_Out 0014  
                          _CCP2CON 000FBA                       ??_TIMER1_isr 0001  
                    ??_I2C_ReStart 0011                         I2C_Write@n 0012  
                          ?_printf 001D                            ?_strcpy 0011  
                          ?_strlen 0011                         _fillScreen 13C6  
                   _init_INTERRUPT 12B4                          ?_delay_ms 0017  
                        ?_fillRect 0023                          ?_drawChar 002E  
                          _SSPCON1 000FC6                            _SSPSTAT 000FC7  
                          _Address 004A              __end_of_fillRectangle 0A22  
                        ?_drawtext 00E8                  _DS3231_Setup_Time 0E06  
                          _Do_Init 1148           _I2C_Write_Cmd_Write_Data 1388  
       __end_of_I2C_Write_Cmd_Only 13FC                         ??_Rcmd2red 0014  
           DS1621_Read_Temp@Device 0018                            _i2cNack 14D2  
               __end_of_TIMER1_isr 14C8                 ?_DS3231_Setup_Time 0001  
                    _write_command 1492                          _I2C_Start 145E  
                        _I2C_Write 1208                    __size_of_i2cAck 0012  
                          __Hparam 0000                            __Lparam 0000  
              __end_of_DS1621_Init 13C6                  __end_of_drawPixel 1314  
              ??_DS3231_Setup_Time 0013              __end_of_drawFastVLine 0CA0  
                          ___awdiv 0B82                    __size_of___wmul 0028  
                          ___lwdiv 0ED0                            ___lwmod 1020  
                  __size_of_chkisr 0D14                          ?_spiwrite 0001  
                          __pcinit 0D1C                            __ramtop 1000  
                          __ptext0 0A22                            __ptext1 001C  
                          __ptext2 14A2                            __ptext3 1366  
                          __ptext4 1020                            __ptext5 0ED0  
        __size_of_DS1621_Read_Temp 003C                            __ptext6 0B82  
                          __ptext7 1148                            __ptext8 1412  
                          __ptext9 0D96                    __size_of_printf 035A  
                __end_of_init_UART 1426             __end_of_init_INTERRUPT 12E4  
                        _T0CONbits 000FD5                    __size_of_strcpy 0032  
                  __size_of_strlen 003E                  __end_of_hexpowers FF88  
         __end_of_force_nec_state0 14FE                          _T1CONbits 000FCD  
         DS3231_Setup_Time@Address 0014                            _dpowers FF76  
                          _isdigit 1366                          _T3CONbits 000FB1  
                       ??_delay_ms 0019                __end_of_I2C_ReStart 1412  
                    drawtext@_text 00E9                      drawtext@color 00EB  
                       ??_fillRect 0028          __end_of_DS3231_Setup_Time 0E6C  
                       ??_drawChar 0035                          _LCD_Reset 143A  
                    _setAddrWindow 0FD2                     __pintcode_body 0CA0  
                       delay_ms@ms 0017               end_of_initialization 0D8C  
                       ??_drawtext 0039                     ?_write_command 0001  
                    __Lmediumconst FD9A          __size_of_DS3231_Read_Time 0064  
                          int_func 0CA0            DS3231_Read_Time@Address 0014  
                       ?_I2C_Start 0001                         ?_I2C_Write 0001  
                       _tempSecond 006D                          _RCSTAbits 000FAB  
                          printf@c 0038                            printf@f 001D  
                          postdec1 000FE5                            postdec2 000FDD  
                          postinc0 000FEE                            postinc2 000FDE  
                       ??_spiwrite 0011                            strlen@s 0011  
      I2C_Write_Cmd_Write_Data@Cmd 0013                   drawtext@cursor_x 00F6  
                 drawtext@cursor_y 00F5                          _PORTBbits 000F81  
                        _PORTCbits 000F82                          _PORTDbits 000F83  
                        _PORTEbits 000F84                   I2C_Write@outByte 0011  
                  ?_init_INTERRUPT 0001                        ?_fillScreen 0024  
                       _setup_hour 0065                         _setup_year 0069  
                       drawChar@bg 0032                          _TRISCbits 000F94  
                     ??_i2cHighSda 0011                       ??_i2cHighScl 0011  
                __size_of_I2C_Init 000A                  __size_of_I2C_Read 0048  
                __size_of_I2C_Stop 0012                     ?_setAddrWindow 0014  
                       ?_LCD_Reset 0001                   drawtext@textsize 00F1  
                       drawPixel@x 001B                         drawPixel@y 0018  
                      _DS1621_Init 13A8                        printf@width 0036  
                        _TXSTAbits 000FAC                  __size_of_INT0_isr 0160  
                   __end_of_i2cAck 1482           DS1621_Read_Temp@Data_Ret 0017  
               __end_of_i2cHighSda 14F6                 __end_of_i2cHighScl 14BC  
                   __end_of___wmul 1366                      delay_ms@count 001B  
                       _write_data 1482                      __pidataCOMRAM 14FE  
                   __end_of_chkisr 0D1C           ?_TFT_GreenTab_Initialize 0001  
                      _I2C_ReStart 13FC                         drawtext@bg 00ED  
                        _Nec_code1 004D                          _i2cLowSda 14DC  
                        _i2cLowScl 14E6                     __end_of_printf 0376  
                   __end_of_strcpy 12B4                     __end_of_strlen 11CA  
                        _Nec_state 004E                start_initialization 0D1C  
       __size_of_DS3231_Setup_Time 0066                    ??_write_command 0013  
                        _OpenUSART 0D96                   __CFG_OSC$INTIO67 000000  
                      ??_I2C_Start 0011                        ??_I2C_Write 0011  
                         ??_i2cAck 0011                  __size_of_Rcmd2red 003E  
              __size_of_fillScreen 001C                           ??___wmul 0015  
                         ??_chkisr 0003                        __pdataBANK0 0080  
                      __pdataBANK1 0100                    setAddrWindow@x0 0017  
                  setAddrWindow@x1 0015                    setAddrWindow@y0 0014  
                  setAddrWindow@y1 0016                           ??_printf 002B  
                 _DS1621_Read_Temp 1246                           ??_strcpy 0015  
                         ??_strlen 0013                         ?_i2cLowSda 0001  
                       ?_i2cLowScl 0001                        __pbssCOMRAM 003E  
       ??_I2C_Write_Cmd_Write_Data 0015                    ??_setAddrWindow 0017  
                    __pcstackBANK0 00E8                        ??_LCD_Reset 001D  
                     _isdigit$2054 0012                  __size_of_delay_ms 0052  
                         ?_Do_Init 0001                  __size_of_fillRect 004A  
                __size_of_drawChar 0156                         ?_OpenUSART 0011  
                 _DS3231_Read_Time 0E6C                           ?_i2cNack 0001  
                __size_of_drawtext 0118                   ___lwdiv@dividend 0011  
                      I2C_Read@ack 0011                          _bit_count 0055  
                        __pintcode 0008    __end_of_TFT_GreenTab_Initialize 133E  
                    __pmediumconst FD9A                           ?___awdiv 0017  
                        __tft_type 0050                           ?___lwdiv 0011  
               _I2C_Write_Cmd_Only 13E2                           ?___lwmod 0018  
               drawFastVLine@color 001A                        ?_write_data 0001  
                        _drawPixel 12E4                  __size_of_spiwrite 0014  
              ?_I2C_Write_Cmd_Only 0013                  ?_force_nec_state0 0001  
                         ?_isdigit 0001                           _I2C_Init 14C8  
                         _I2C_Read 1100                           _I2C_Stop 144C  
                _Initialize_Screen 0AE4                     __size_of_Rcmd1 0110  
                   __size_of_Rcmd3 00F2                          _init_UART 1412  
               ??_force_nec_state0 0001           I2C_Write_Cmd_Only@Device 0014  
                        _hexpowers FF80                 ?_Initialize_Screen 0001  
                 ___lwdiv@quotient 0015                     __size_of_putch 000E  
                   ___wmul@product 0015                ??_Initialize_Screen 003B  
                         _INT0_isr 0376               ??_I2C_Write_Cmd_Only 0014  
                         _PIE1bits 000F9D             DS3231_Read_Time@Device 0015  
                         _PIR1bits 000F9E                           _PIR2bits 000FA1  
                 ??_init_INTERRUPT 0011                          _setup_day 0064  
                DS1621_Init@Device 0016                          fillRect@h 0025  
                        fillRect@i 002C                          fillRect@w 0024  
                        fillRect@x 002B                          fillRect@y 0023  
                        drawChar@c 002F                          drawChar@i 0038  
                        drawChar@j 0037                          drawChar@x 0036  
                        drawChar@y 002E                         ?_drawPixel 0018  
           __size_of_fillRectangle 00DC                  ___wmul@multiplier 0011  
        __end_of_Initialize_Screen 0B82                        ??_i2cLowSda 0011  
                      ??_i2cLowScl 0011                       ??_fillScreen 0026  
                       printf@flag 0035                         printf@prec 0032  
                        main@tempC 003C                          main@tempF 003D  
                       ?_init_UART 0001                        _INTCON2bits 000FF1  
                        copy_data0 0D48                          copy_data1 0D68  
                        drawtext@i 00F3             __size_of_drawFastVLine 0088  
                        drawtext@x 00F0                          drawtext@y 00E8  
                         _Nec_code 003E                  write_command@cmd_ 0013  
                      ??_OpenUSART 0013                       ?_DS1621_Init 0001  
                         _Rcmd2red 11CA                   __size_of_Do_Init 0044  
              __size_of_write_data 0010                    OpenUSART@config 0013  
                     _Time_Elapsed 0042                   __size_of_i2cNack 000A  
                         __Hrparam 0000                 __end_of_fillScreen 13E2  
                         __Lrparam 0000                   __size_of___awdiv 0096  
                 __size_of___lwdiv 005C                   __size_of___lwmod 004C  
                     ?_I2C_ReStart 0001                   __size_of_isdigit 0022  
                         _delay_ms 0F80                    ___lwdiv@divisor 0013  
                  ___lwdiv@counter 0017                           __ptext10 12B4  
                         __ptext11 0AE4                           __ptext20 12E4  
                         __ptext12 1282                           __ptext21 0FD2  
                         __ptext13 13C6                           __ptext30 0F80  
                         __ptext22 1314                           __ptext14 0946  
                         __ptext31 133E                           __ptext23 0854  
                         __ptext15 062C                           __ptext40 144C  
                         __ptext32 14C8                           __ptext24 11CA  
                         __ptext16 118C                           __ptext41 145E  
                         __ptext33 13A8                           __ptext25 0744  
                         __ptext17 04D6                           __ptext42 1100  
                         __ptext34 1388                           __ptext26 1482  
                         __ptext18 106C                           __ptext51 14BC  
                         __ptext43 14D2                           __ptext35 13E2  
                         __ptext27 1492                           __ptext19 0C18  
                         __ptext52 0376                           __ptext44 1470  
                         __ptext36 0E06                           __ptext28 1426  
                         __ptext53 14F6                           __ptext45 13FC  
                         __ptext37 0E6C                           __ptext29 143A  
                         __ptext46 14DC                           __ptext38 1246  
                         __ptext47 14E6                           __ptext39 1208  
                         __ptext48 14EE                           __ptext49 14B0  
                         _fillRect 106C                           _drawChar 04D6  
 __size_of_TFT_GreenTab_Initialize 002A                           _colstart 0056  
                         _drawtext 062C                         strcpy@from 0013  
                    _fillRectangle 0946           __end_of_DS1621_Read_Temp 1282  
                    __size_of_main 00C2                    fillRectangle@hi 0021  
                  fillRectangle@lo 0022                      _drawFastVLine 0C18  
                        printf@idx 002F                           _spiwrite 1426  
                        printf@val 0033                        ??_drawPixel 001B  
                         _rowstart 005F           __end_of_DS3231_Read_Time 0ED0  
       __size_of_Initialize_Screen 009E                         _INTCONbits 000FF2  
                   OpenUSART@spbrg 0011                        ??_init_UART 0014  
                         isdigit@c 0013                          spiwrite@x 0011  
                         intlevel2 0000                     ?_fillRectangle 0018  
                 ___lwmod@dividend 0018              __end_of_write_command 14A2  
                  fillScreen@color 0024                     fillRectangle@h 001A  
                   fillRectangle@w 0019                     fillRectangle@x 0023  
                   fillRectangle@y 0018                     ?_drawFastVLine 0018  
                         printf@ap 0030                       ??_write_data 0013  
                       _TIMER1_isr 14BC                      fillRect@color 0026  
                  ___lwmod@divisor 001A                           strcpy@cp 0015  
                         strlen@cp 0015                           strcpy@to 0011  
            I2C_Write_Cmd_Only@Cmd 0013                    ___lwmod@counter 001C  
                     _setup_minute 0066                       _setup_second 0068  
                      _prev_second 005E              __end_of_setAddrWindow 1020  
               fillRectangle@color 001B                      drawChar@color 0030  
                      _setup_month 0067                 __end_of_write_data 1492  
        __size_of_force_nec_state0 0008                       drawChar@line 0035  
                     drawChar@size 0034  __size_of_I2C_Write_Cmd_Write_Data 0020  
             __size_of_DS1621_Init 001E          ?_I2C_Write_Cmd_Write_Data 0013  
