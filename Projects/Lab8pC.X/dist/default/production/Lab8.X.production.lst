

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Wed Oct 13 23:47:42 2021

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    71                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    72                           	psect	text56,global,reloc=2,class=CODE,delta=1
    73                           	psect	text57,global,reloc=2,class=CODE,delta=1
    74                           	psect	text58,global,reloc=2,class=CODE,delta=1
    75                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    76                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    77  0000                     
    78                           	psect	idataCOMRAM
    79  002470                     __pidataCOMRAM:
    80                           	opt stack 0
    81                           
    82                           ;initializer for _wrap
    83  002470  01                 	db	1
    84                           
    85                           ;initializer for _EWLT_Count
    86  002471  30                 	db	48
    87  002472  30                 	db	48
    88  002473  00                 	db	0
    89                           
    90                           ;initializer for _EW_Count
    91  002474  30                 	db	48
    92  002475  30                 	db	48
    93  002476  00                 	db	0
    94                           
    95                           ;initializer for _NS_Count
    96  002477  30                 	db	48
    97  002478  30                 	db	48
    98  002479  00                 	db	0
    99                           
   100                           ;initializer for _Act_Mode_Txt
   101  00247A  44                 	db	68
   102  00247B  00                 	db	0
   103                           
   104                           ;initializer for _FlashingR_Txt
   105  00247C  30                 	db	48
   106  00247D  00                 	db	0
   107                           
   108                           ;initializer for _FlashingS_Txt
   109  00247E  30                 	db	48
   110  00247F  00                 	db	0
   111                           
   112                           ;initializer for _SW_EWLT_Txt
   113  002480  30                 	db	48
   114  002481  00                 	db	0
   115                           
   116                           ;initializer for _SW_EWPED_Txt
   117  002482  30                 	db	48
   118  002483  00                 	db	0
   119                           
   120                           ;initializer for _SW_MODE_Txt
   121  002484  44                 	db	68
   122  002485  00                 	db	0
   123                           
   124                           ;initializer for _SW_NSLT_Txt
   125  002486  30                 	db	48
   126  002487  00                 	db	0
   127                           
   128                           ;initializer for _SW_NSPED_Txt
   129  002488  30                 	db	48
   130  002489  00                 	db	0
   131                           
   132                           	psect	idataBANK0
   133  002570                     __pidataBANK0:
   134                           	opt stack 0
   135                           
   136                           ;initializer for _NSLT_Count
   137  002570  30                 	db	48
   138  002571  30                 	db	48
   139  002572  00                 	db	0
   140                           
   141                           ;initializer for _PED_EW_Count
   142  002573  30                 	db	48
   143  002574  30                 	db	48
   144  002575  00                 	db	0
   145                           
   146                           ;initializer for _PED_NS_Count
   147  002576  30                 	db	48
   148  002577  30                 	db	48
   149  002578  00                 	db	0
   150                           
   151                           	psect	mediumconst
   152  00FDBC                     __pmediumconst:
   153                           	opt stack 0
   154  00FDBC  00                 	db	0
   155  00FDBD                     _font:
   156                           	opt stack 0
   157  00FDBD  00                 	db	0
   158  00FDBE  00                 	db	0
   159  00FDBF  00                 	db	0
   160  00FDC0  00                 	db	0
   161  00FDC1  00                 	db	0
   162  00FDC2  00                 	db	0
   163  00FDC3  00                 	db	0
   164  00FDC4  5F                 	db	95
   165  00FDC5  00                 	db	0
   166  00FDC6  00                 	db	0
   167  00FDC7  00                 	db	0
   168  00FDC8  07                 	db	7
   169  00FDC9  00                 	db	0
   170  00FDCA  07                 	db	7
   171  00FDCB  00                 	db	0
   172  00FDCC  14                 	db	20
   173  00FDCD  7F                 	db	127
   174  00FDCE  14                 	db	20
   175  00FDCF  7F                 	db	127
   176  00FDD0  14                 	db	20
   177  00FDD1  24                 	db	36
   178  00FDD2  2A                 	db	42
   179  00FDD3  7F                 	db	127
   180  00FDD4  2A                 	db	42
   181  00FDD5  12                 	db	18
   182  00FDD6  23                 	db	35
   183  00FDD7  13                 	db	19
   184  00FDD8  08                 	db	8
   185  00FDD9  64                 	db	100
   186  00FDDA  62                 	db	98
   187  00FDDB  36                 	db	54
   188  00FDDC  49                 	db	73
   189  00FDDD  56                 	db	86
   190  00FDDE  20                 	db	32
   191  00FDDF  50                 	db	80
   192  00FDE0  00                 	db	0
   193  00FDE1  08                 	db	8
   194  00FDE2  07                 	db	7
   195  00FDE3  03                 	db	3
   196  00FDE4  00                 	db	0
   197  00FDE5  00                 	db	0
   198  00FDE6  1C                 	db	28
   199  00FDE7  22                 	db	34
   200  00FDE8  41                 	db	65
   201  00FDE9  00                 	db	0
   202  00FDEA  00                 	db	0
   203  00FDEB  41                 	db	65
   204  00FDEC  22                 	db	34
   205  00FDED  1C                 	db	28
   206  00FDEE  00                 	db	0
   207  00FDEF  2A                 	db	42
   208  00FDF0  1C                 	db	28
   209  00FDF1  7F                 	db	127
   210  00FDF2  1C                 	db	28
   211  00FDF3  2A                 	db	42
   212  00FDF4  08                 	db	8
   213  00FDF5  08                 	db	8
   214  00FDF6  3E                 	db	62
   215  00FDF7  08                 	db	8
   216  00FDF8  08                 	db	8
   217  00FDF9  00                 	db	0
   218  00FDFA  80                 	db	128
   219  00FDFB  70                 	db	112
   220  00FDFC  30                 	db	48
   221  00FDFD  00                 	db	0
   222  00FDFE  08                 	db	8
   223  00FDFF  08                 	db	8
   224  00FE00  08                 	db	8
   225  00FE01  08                 	db	8
   226  00FE02  08                 	db	8
   227  00FE03  00                 	db	0
   228  00FE04  00                 	db	0
   229  00FE05  60                 	db	96
   230  00FE06  60                 	db	96
   231  00FE07  00                 	db	0
   232  00FE08  20                 	db	32
   233  00FE09  10                 	db	16
   234  00FE0A  08                 	db	8
   235  00FE0B  04                 	db	4
   236  00FE0C  02                 	db	2
   237  00FE0D  3E                 	db	62
   238  00FE0E  51                 	db	81
   239  00FE0F  49                 	db	73
   240  00FE10  45                 	db	69
   241  00FE11  3E                 	db	62
   242  00FE12  00                 	db	0
   243  00FE13  42                 	db	66
   244  00FE14  7F                 	db	127
   245  00FE15  40                 	db	64
   246  00FE16  00                 	db	0
   247  00FE17  72                 	db	114
   248  00FE18  49                 	db	73
   249  00FE19  49                 	db	73
   250  00FE1A  49                 	db	73
   251  00FE1B  46                 	db	70
   252  00FE1C  21                 	db	33
   253  00FE1D  41                 	db	65
   254  00FE1E  49                 	db	73
   255  00FE1F  4D                 	db	77
   256  00FE20  33                 	db	51
   257  00FE21  18                 	db	24
   258  00FE22  14                 	db	20
   259  00FE23  12                 	db	18
   260  00FE24  7F                 	db	127
   261  00FE25  10                 	db	16
   262  00FE26  27                 	db	39
   263  00FE27  45                 	db	69
   264  00FE28  45                 	db	69
   265  00FE29  45                 	db	69
   266  00FE2A  39                 	db	57
   267  00FE2B  3C                 	db	60
   268  00FE2C  4A                 	db	74
   269  00FE2D  49                 	db	73
   270  00FE2E  49                 	db	73
   271  00FE2F  31                 	db	49
   272  00FE30  41                 	db	65
   273  00FE31  21                 	db	33
   274  00FE32  11                 	db	17
   275  00FE33  09                 	db	9
   276  00FE34  07                 	db	7
   277  00FE35  36                 	db	54
   278  00FE36  49                 	db	73
   279  00FE37  49                 	db	73
   280  00FE38  49                 	db	73
   281  00FE39  36                 	db	54
   282  00FE3A  46                 	db	70
   283  00FE3B  49                 	db	73
   284  00FE3C  49                 	db	73
   285  00FE3D  29                 	db	41
   286  00FE3E  1E                 	db	30
   287  00FE3F  00                 	db	0
   288  00FE40  00                 	db	0
   289  00FE41  14                 	db	20
   290  00FE42  00                 	db	0
   291  00FE43  00                 	db	0
   292  00FE44  00                 	db	0
   293  00FE45  40                 	db	64
   294  00FE46  34                 	db	52
   295  00FE47  00                 	db	0
   296  00FE48  00                 	db	0
   297  00FE49  00                 	db	0
   298  00FE4A  08                 	db	8
   299  00FE4B  14                 	db	20
   300  00FE4C  22                 	db	34
   301  00FE4D  41                 	db	65
   302  00FE4E  14                 	db	20
   303  00FE4F  14                 	db	20
   304  00FE50  14                 	db	20
   305  00FE51  14                 	db	20
   306  00FE52  14                 	db	20
   307  00FE53  00                 	db	0
   308  00FE54  41                 	db	65
   309  00FE55  22                 	db	34
   310  00FE56  14                 	db	20
   311  00FE57  08                 	db	8
   312  00FE58  02                 	db	2
   313  00FE59  01                 	db	1
   314  00FE5A  59                 	db	89
   315  00FE5B  09                 	db	9
   316  00FE5C  06                 	db	6
   317  00FE5D  3E                 	db	62
   318  00FE5E  41                 	db	65
   319  00FE5F  5D                 	db	93
   320  00FE60  59                 	db	89
   321  00FE61  4E                 	db	78
   322  00FE62  7C                 	db	124
   323  00FE63  12                 	db	18
   324  00FE64  11                 	db	17
   325  00FE65  12                 	db	18
   326  00FE66  7C                 	db	124
   327  00FE67  7F                 	db	127
   328  00FE68  49                 	db	73
   329  00FE69  49                 	db	73
   330  00FE6A  49                 	db	73
   331  00FE6B  36                 	db	54
   332  00FE6C  3E                 	db	62
   333  00FE6D  41                 	db	65
   334  00FE6E  41                 	db	65
   335  00FE6F  41                 	db	65
   336  00FE70  22                 	db	34
   337  00FE71  7F                 	db	127
   338  00FE72  41                 	db	65
   339  00FE73  41                 	db	65
   340  00FE74  41                 	db	65
   341  00FE75  3E                 	db	62
   342  00FE76  7F                 	db	127
   343  00FE77  49                 	db	73
   344  00FE78  49                 	db	73
   345  00FE79  49                 	db	73
   346  00FE7A  41                 	db	65
   347  00FE7B  7F                 	db	127
   348  00FE7C  09                 	db	9
   349  00FE7D  09                 	db	9
   350  00FE7E  09                 	db	9
   351  00FE7F  01                 	db	1
   352  00FE80  3E                 	db	62
   353  00FE81  41                 	db	65
   354  00FE82  41                 	db	65
   355  00FE83  51                 	db	81
   356  00FE84  73                 	db	115
   357  00FE85  7F                 	db	127
   358  00FE86  08                 	db	8
   359  00FE87  08                 	db	8
   360  00FE88  08                 	db	8
   361  00FE89  7F                 	db	127
   362  00FE8A  00                 	db	0
   363  00FE8B  41                 	db	65
   364  00FE8C  7F                 	db	127
   365  00FE8D  41                 	db	65
   366  00FE8E  00                 	db	0
   367  00FE8F  20                 	db	32
   368  00FE90  40                 	db	64
   369  00FE91  41                 	db	65
   370  00FE92  3F                 	db	63
   371  00FE93  01                 	db	1
   372  00FE94  7F                 	db	127
   373  00FE95  08                 	db	8
   374  00FE96  14                 	db	20
   375  00FE97  22                 	db	34
   376  00FE98  41                 	db	65
   377  00FE99  7F                 	db	127
   378  00FE9A  40                 	db	64
   379  00FE9B  40                 	db	64
   380  00FE9C  40                 	db	64
   381  00FE9D  40                 	db	64
   382  00FE9E  7F                 	db	127
   383  00FE9F  02                 	db	2
   384  00FEA0  1C                 	db	28
   385  00FEA1  02                 	db	2
   386  00FEA2  7F                 	db	127
   387  00FEA3  7F                 	db	127
   388  00FEA4  04                 	db	4
   389  00FEA5  08                 	db	8
   390  00FEA6  10                 	db	16
   391  00FEA7  7F                 	db	127
   392  00FEA8  3E                 	db	62
   393  00FEA9  41                 	db	65
   394  00FEAA  41                 	db	65
   395  00FEAB  41                 	db	65
   396  00FEAC  3E                 	db	62
   397  00FEAD  7F                 	db	127
   398  00FEAE  09                 	db	9
   399  00FEAF  09                 	db	9
   400  00FEB0  09                 	db	9
   401  00FEB1  06                 	db	6
   402  00FEB2  3E                 	db	62
   403  00FEB3  41                 	db	65
   404  00FEB4  51                 	db	81
   405  00FEB5  21                 	db	33
   406  00FEB6  5E                 	db	94
   407  00FEB7  7F                 	db	127
   408  00FEB8  09                 	db	9
   409  00FEB9  19                 	db	25
   410  00FEBA  29                 	db	41
   411  00FEBB  46                 	db	70
   412  00FEBC                     __end_of_font:
   413                           	opt stack 0
   414  00FEBC                     _font2:
   415                           	opt stack 0
   416  00FEBC  26                 	db	38
   417  00FEBD  49                 	db	73
   418  00FEBE  49                 	db	73
   419  00FEBF  49                 	db	73
   420  00FEC0  32                 	db	50
   421  00FEC1  03                 	db	3
   422  00FEC2  01                 	db	1
   423  00FEC3  7F                 	db	127
   424  00FEC4  01                 	db	1
   425  00FEC5  03                 	db	3
   426  00FEC6  3F                 	db	63
   427  00FEC7  40                 	db	64
   428  00FEC8  40                 	db	64
   429  00FEC9  40                 	db	64
   430  00FECA  3F                 	db	63
   431  00FECB  1F                 	db	31
   432  00FECC  20                 	db	32
   433  00FECD  40                 	db	64
   434  00FECE  20                 	db	32
   435  00FECF  1F                 	db	31
   436  00FED0  3F                 	db	63
   437  00FED1  40                 	db	64
   438  00FED2  38                 	db	56
   439  00FED3  40                 	db	64
   440  00FED4  3F                 	db	63
   441  00FED5  63                 	db	99
   442  00FED6  14                 	db	20
   443  00FED7  08                 	db	8
   444  00FED8  14                 	db	20
   445  00FED9  63                 	db	99
   446  00FEDA  03                 	db	3
   447  00FEDB  04                 	db	4
   448  00FEDC  78                 	db	120
   449  00FEDD  04                 	db	4
   450  00FEDE  03                 	db	3
   451  00FEDF  61                 	db	97
   452  00FEE0  59                 	db	89
   453  00FEE1  49                 	db	73
   454  00FEE2  4D                 	db	77
   455  00FEE3  43                 	db	67
   456  00FEE4  00                 	db	0
   457  00FEE5  7F                 	db	127
   458  00FEE6  41                 	db	65
   459  00FEE7  41                 	db	65
   460  00FEE8  41                 	db	65
   461  00FEE9  02                 	db	2
   462  00FEEA  04                 	db	4
   463  00FEEB  08                 	db	8
   464  00FEEC  10                 	db	16
   465  00FEED  20                 	db	32
   466  00FEEE  00                 	db	0
   467  00FEEF  41                 	db	65
   468  00FEF0  41                 	db	65
   469  00FEF1  41                 	db	65
   470  00FEF2  7F                 	db	127
   471  00FEF3  04                 	db	4
   472  00FEF4  02                 	db	2
   473  00FEF5  01                 	db	1
   474  00FEF6  02                 	db	2
   475  00FEF7  04                 	db	4
   476  00FEF8  40                 	db	64
   477  00FEF9  40                 	db	64
   478  00FEFA  40                 	db	64
   479  00FEFB  40                 	db	64
   480  00FEFC  40                 	db	64
   481  00FEFD  00                 	db	0
   482  00FEFE  03                 	db	3
   483  00FEFF  07                 	db	7
   484  00FF00  08                 	db	8
   485  00FF01  00                 	db	0
   486  00FF02  20                 	db	32
   487  00FF03  54                 	db	84
   488  00FF04  54                 	db	84
   489  00FF05  78                 	db	120
   490  00FF06  40                 	db	64
   491  00FF07  7F                 	db	127
   492  00FF08  28                 	db	40
   493  00FF09  44                 	db	68
   494  00FF0A  44                 	db	68
   495  00FF0B  38                 	db	56
   496  00FF0C  38                 	db	56
   497  00FF0D  44                 	db	68
   498  00FF0E  44                 	db	68
   499  00FF0F  44                 	db	68
   500  00FF10  28                 	db	40
   501  00FF11  38                 	db	56
   502  00FF12  44                 	db	68
   503  00FF13  44                 	db	68
   504  00FF14  28                 	db	40
   505  00FF15  7F                 	db	127
   506  00FF16  38                 	db	56
   507  00FF17  54                 	db	84
   508  00FF18  54                 	db	84
   509  00FF19  54                 	db	84
   510  00FF1A  18                 	db	24
   511  00FF1B  00                 	db	0
   512  00FF1C  08                 	db	8
   513  00FF1D  7E                 	db	126
   514  00FF1E  09                 	db	9
   515  00FF1F  02                 	db	2
   516  00FF20  18                 	db	24
   517  00FF21  A4                 	db	164
   518  00FF22  A4                 	db	164
   519  00FF23  9C                 	db	156
   520  00FF24  78                 	db	120
   521  00FF25  7F                 	db	127
   522  00FF26  08                 	db	8
   523  00FF27  04                 	db	4
   524  00FF28  04                 	db	4
   525  00FF29  78                 	db	120
   526  00FF2A  00                 	db	0
   527  00FF2B  44                 	db	68
   528  00FF2C  7D                 	db	125
   529  00FF2D  40                 	db	64
   530  00FF2E  00                 	db	0
   531  00FF2F  20                 	db	32
   532  00FF30  40                 	db	64
   533  00FF31  40                 	db	64
   534  00FF32  3D                 	db	61
   535  00FF33  00                 	db	0
   536  00FF34  7F                 	db	127
   537  00FF35  10                 	db	16
   538  00FF36  28                 	db	40
   539  00FF37  44                 	db	68
   540  00FF38  00                 	db	0
   541  00FF39  00                 	db	0
   542  00FF3A  41                 	db	65
   543  00FF3B  7F                 	db	127
   544  00FF3C  40                 	db	64
   545  00FF3D  00                 	db	0
   546  00FF3E  7C                 	db	124
   547  00FF3F  04                 	db	4
   548  00FF40  78                 	db	120
   549  00FF41  04                 	db	4
   550  00FF42  78                 	db	120
   551  00FF43  7C                 	db	124
   552  00FF44  08                 	db	8
   553  00FF45  04                 	db	4
   554  00FF46  04                 	db	4
   555  00FF47  78                 	db	120
   556  00FF48  38                 	db	56
   557  00FF49  44                 	db	68
   558  00FF4A  44                 	db	68
   559  00FF4B  44                 	db	68
   560  00FF4C  38                 	db	56
   561  00FF4D  FC                 	db	252
   562  00FF4E  18                 	db	24
   563  00FF4F  24                 	db	36
   564  00FF50  24                 	db	36
   565  00FF51  18                 	db	24
   566  00FF52  18                 	db	24
   567  00FF53  24                 	db	36
   568  00FF54  24                 	db	36
   569  00FF55  18                 	db	24
   570  00FF56  FC                 	db	252
   571  00FF57  7C                 	db	124
   572  00FF58  08                 	db	8
   573  00FF59  04                 	db	4
   574  00FF5A  04                 	db	4
   575  00FF5B  08                 	db	8
   576  00FF5C  48                 	db	72
   577  00FF5D  54                 	db	84
   578  00FF5E  54                 	db	84
   579  00FF5F  54                 	db	84
   580  00FF60  24                 	db	36
   581  00FF61  04                 	db	4
   582  00FF62  04                 	db	4
   583  00FF63  3F                 	db	63
   584  00FF64  44                 	db	68
   585  00FF65  24                 	db	36
   586  00FF66  3C                 	db	60
   587  00FF67  40                 	db	64
   588  00FF68  40                 	db	64
   589  00FF69  20                 	db	32
   590  00FF6A  7C                 	db	124
   591  00FF6B  1C                 	db	28
   592  00FF6C  20                 	db	32
   593  00FF6D  40                 	db	64
   594  00FF6E  20                 	db	32
   595  00FF6F  1C                 	db	28
   596  00FF70  3C                 	db	60
   597  00FF71  40                 	db	64
   598  00FF72  30                 	db	48
   599  00FF73  40                 	db	64
   600  00FF74  3C                 	db	60
   601  00FF75  44                 	db	68
   602  00FF76  28                 	db	40
   603  00FF77  10                 	db	16
   604  00FF78  28                 	db	40
   605  00FF79  44                 	db	68
   606  00FF7A  4C                 	db	76
   607  00FF7B  90                 	db	144
   608  00FF7C  90                 	db	144
   609  00FF7D  90                 	db	144
   610  00FF7E  7C                 	db	124
   611  00FF7F  44                 	db	68
   612  00FF80  64                 	db	100
   613  00FF81  54                 	db	84
   614  00FF82  4C                 	db	76
   615  00FF83  44                 	db	68
   616  00FF84  00                 	db	0
   617  00FF85  08                 	db	8
   618  00FF86  36                 	db	54
   619  00FF87  41                 	db	65
   620  00FF88  00                 	db	0
   621  00FF89  00                 	db	0
   622  00FF8A  00                 	db	0
   623  00FF8B  77                 	db	119
   624  00FF8C  00                 	db	0
   625  00FF8D  00                 	db	0
   626  00FF8E  00                 	db	0
   627  00FF8F  41                 	db	65
   628  00FF90  36                 	db	54
   629  00FF91  08                 	db	8
   630  00FF92  00                 	db	0
   631  00FF93  02                 	db	2
   632  00FF94  01                 	db	1
   633  00FF95  02                 	db	2
   634  00FF96  04                 	db	4
   635  00FF97  02                 	db	2
   636  00FF98                     __end_of_font2:
   637                           	opt stack 0
   638  0000                     _ADCON0	set	4034
   639  0000                     _ADCON0bits	set	4034
   640  0000                     _ADCON1	set	4033
   641  0000                     _ADCON2	set	4032
   642  0000                     _ADRESH	set	4036
   643  0000                     _ADRESL	set	4035
   644  0000                     _CCP2CON	set	4026
   645  0000                     _CCPR2L	set	4027
   646  0000                     _INTCON2bits	set	4081
   647  0000                     _INTCON3bits	set	4080
   648  0000                     _INTCONbits	set	4082
   649  0000                     _OSCCON	set	4051
   650  0000                     _PIE1bits	set	3997
   651  0000                     _PIR1bits	set	3998
   652  0000                     _PIR2bits	set	4001
   653  0000                     _PORTAbits	set	3968
   654  0000                     _PORTBbits	set	3969
   655  0000                     _PORTDbits	set	3971
   656  0000                     _PORTEbits	set	3972
   657  0000                     _PR2	set	4043
   658  0000                     _RCSTA	set	4011
   659  0000                     _RCSTAbits	set	4011
   660  0000                     _SPBRG	set	4015
   661  0000                     _SPBRGH	set	4016
   662  0000                     _SSPBUF	set	4041
   663  0000                     _SSPCON1	set	4038
   664  0000                     _SSPSTAT	set	4039
   665  0000                     _SSPSTATbits	set	4039
   666  0000                     _T0CON	set	4053
   667  0000                     _T0CONbits	set	4053
   668  0000                     _T2CON	set	4042
   669  0000                     _T3CON	set	4017
   670  0000                     _T3CONbits	set	4017
   671  0000                     _TMR0H	set	4055
   672  0000                     _TMR0L	set	4054
   673  0000                     _TRISA	set	3986
   674  0000                     _TRISB	set	3987
   675  0000                     _TRISC	set	3988
   676  0000                     _TRISCbits	set	3988
   677  0000                     _TRISD	set	3989
   678  0000                     _TRISE	set	3990
   679  0000                     _TXREG	set	4013
   680  0000                     _TXSTA	set	4012
   681  0000                     _TXSTAbits	set	4012
   682  0000                     _RBPU	set	32655
   683  0000                     _TRMT	set	32097
   684  00FF98                     STR_12:
   685  00FF98  45                 	db	69	;'E'
   686  00FF99  57                 	db	87	;'W'
   687  00FF9A  50                 	db	80	;'P'
   688  00FF9B  20                 	db	32
   689  00FF9C  45                 	db	69	;'E'
   690  00FF9D  57                 	db	87	;'W'
   691  00FF9E  4C                 	db	76	;'L'
   692  00FF9F  54                 	db	84	;'T'
   693  00FFA0  20                 	db	32
   694  00FFA1  4E                 	db	78	;'N'
   695  00FFA2  53                 	db	83	;'S'
   696  00FFA3  50                 	db	80	;'P'
   697  00FFA4  20                 	db	32
   698  00FFA5  4E                 	db	78	;'N'
   699  00FFA6  53                 	db	83	;'S'
   700  00FFA7  4C                 	db	76	;'L'
   701  00FFA8  54                 	db	84	;'T'
   702  00FFA9  20                 	db	32
   703  00FFAA  4D                 	db	77	;'M'
   704  00FFAB  52                 	db	82	;'R'
   705  00FFAC  00                 	db	0
   706  00FFAD                     STR_1:
   707  00FFAD  45                 	db	69	;'E'
   708  00FFAE  43                 	db	67	;'C'
   709  00FFAF  45                 	db	69	;'E'
   710  00FFB0  33                 	db	51	;'3'
   711  00FFB1  33                 	db	51	;'3'
   712  00FFB2  30                 	db	48	;'0'
   713  00FFB3  31                 	db	49	;'1'
   714  00FFB4  4C                 	db	76	;'L'
   715  00FFB5  20                 	db	32
   716  00FFB6  46                 	db	70	;'F'
   717  00FFB7  61                 	db	97	;'a'
   718  00FFB8  6C                 	db	108	;'l'
   719  00FFB9  6C                 	db	108	;'l'
   720  00FFBA  20                 	db	32
   721  00FFBB  32                 	db	50	;'2'
   722  00FFBC  31                 	db	49	;'1'
   723  00FFBD  2D                 	db	45
   724  00FFBE  53                 	db	83	;'S'
   725  00FFBF  34                 	db	52	;'4'
   726  00FFC0  00                 	db	0
   727  00FFC1                     STR_8:
   728  00FFC1  4E                 	db	78	;'N'
   729  00FFC2  4F                 	db	79	;'O'
   730  00FFC3  52                 	db	82	;'R'
   731  00FFC4  54                 	db	84	;'T'
   732  00FFC5  48                 	db	72	;'H'
   733  00FFC6  2F                 	db	47
   734  00FFC7  53                 	db	83	;'S'
   735  00FFC8  4F                 	db	79	;'O'
   736  00FFC9  55                 	db	85	;'U'
   737  00FFCA  54                 	db	84	;'T'
   738  00FFCB  48                 	db	72	;'H'
   739  00FFCC  00                 	db	0
   740  00FFCD                     STR_6:
   741  00FFCD  45                 	db	69	;'E'
   742  00FFCE  41                 	db	65	;'A'
   743  00FFCF  53                 	db	83	;'S'
   744  00FFD0  54                 	db	84	;'T'
   745  00FFD1  2F                 	db	47
   746  00FFD2  57                 	db	87	;'W'
   747  00FFD3  45                 	db	69	;'E'
   748  00FFD4  53                 	db	83	;'S'
   749  00FFD5  54                 	db	84	;'T'
   750  00FFD6  00                 	db	0
   751  00FFD7                     STR_9:
   752  00FFD7  4E                 	db	78	;'N'
   753  00FFD8  2F                 	db	47
   754  00FFD9  53                 	db	83	;'S'
   755  00FFDA  20                 	db	32
   756  00FFDB  4C                 	db	76	;'L'
   757  00FFDC  54                 	db	84	;'T'
   758  00FFDD  00                 	db	0
   759  00FFDE                     STR_7:
   760  00FFDE  45                 	db	69	;'E'
   761  00FFDF  2F                 	db	47
   762  00FFE0  57                 	db	87	;'W'
   763  00FFE1  20                 	db	32
   764  00FFE2  4C                 	db	76	;'L'
   765  00FFE3  54                 	db	84	;'T'
   766  00FFE4  00                 	db	0
   767  00FFE5                     STR_2:
   768  00FFE5  4D                 	db	77	;'M'
   769  00FFE6  6F                 	db	111	;'o'
   770  00FFE7  64                 	db	100	;'d'
   771  00FFE8  65                 	db	101	;'e'
   772  00FFE9  3A                 	db	58	;':'
   773  00FFEA  00                 	db	0
   774  00FFEB                     STR_3:
   775  00FFEB  46                 	db	70	;'F'
   776  00FFEC  52                 	db	82	;'R'
   777  00FFED  3A                 	db	58	;':'
   778  00FFEE  00                 	db	0
   779  00FFEF                     STR_4:
   780  00FFEF  46                 	db	70	;'F'
   781  00FFF0  53                 	db	83	;'S'
   782  00FFF1  3A                 	db	58	;':'
   783  00FFF2  00                 	db	0
   784  00FFF3                     STR_11:
   785  00FFF3  50                 	db	80	;'P'
   786  00FFF4  4E                 	db	78	;'N'
   787  00FFF5  53                 	db	83	;'S'
   788  00FFF6  00                 	db	0
   789  00FFF7                     STR_10:
   790  00FFF7  50                 	db	80	;'P'
   791  00FFF8  45                 	db	69	;'E'
   792  00FFF9  57                 	db	87	;'W'
   793  00FFFA  00                 	db	0
   794  00FFFB                     STR_14:
   795  00FFFB  20                 	db	32
   796  00FFFC  00                 	db	0
   797  00FFFD                     STR_5:
   798  00FFFD  2A                 	db	42
   799  00FFFE  00                 	db	0
   800  0000                     
   801                           ; #config settings
   802  00FFFF  00                 	db	0	; dummy byte at the end
   803  0000                     
   804                           	psect	cinit
   805  001F48                     __pcinit:
   806                           	opt stack 0
   807  001F48                     start_initialization:
   808                           	opt stack 0
   809  001F48                     __initialization:
   810                           	opt stack 0
   811                           
   812                           ; Clear objects allocated to BANK0 (39 bytes)
   813  001F48  EE00  F080         	lfsr	0,__pbssBANK0
   814  001F4C  0E27               	movlw	39
   815  001F4E                     clear_0:
   816  001F4E  6AEE               	clrf	postinc0,c
   817  001F50  06E8               	decf	wreg,f,c
   818  001F52  E1FD               	bnz	clear_0
   819                           
   820                           ; Clear objects allocated to COMRAM (23 bytes)
   821  001F54  EE00  F05B         	lfsr	0,__pbssCOMRAM
   822  001F58  0E17               	movlw	23
   823  001F5A                     clear_1:
   824  001F5A  6AEE               	clrf	postinc0,c
   825  001F5C  06E8               	decf	wreg,f,c
   826  001F5E  E1FD               	bnz	clear_1
   827                           
   828                           ; Initialize objects allocated to BANK0 (9 bytes)
   829                           ; load TBLPTR registers with __pidataBANK0
   830  001F60  0E70               	movlw	low __pidataBANK0
   831  001F62  6EF6               	movwf	tblptrl,c
   832  001F64  0E25               	movlw	high __pidataBANK0
   833  001F66  6EF7               	movwf	tblptrh,c
   834  001F68  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   835  001F6A  6EF8               	movwf	tblptru,c
   836  001F6C  EE00  F0B5         	lfsr	0,__pdataBANK0
   837  001F70  EE10 F009          	lfsr	1,9
   838  001F74                     copy_data0:
   839  001F74  0009               	tblrd		*+
   840  001F76  CFF5 FFEE          	movff	tablat,postinc0
   841  001F7A  50E5               	movf	postdec1,w,c
   842  001F7C  50E1               	movf	fsr1l,w,c
   843  001F7E  E1FA               	bnz	copy_data0
   844                           
   845                           ; Initialize objects allocated to COMRAM (26 bytes)
   846                           ; load TBLPTR registers with __pidataCOMRAM
   847  001F80  0E70               	movlw	low __pidataCOMRAM
   848  001F82  6EF6               	movwf	tblptrl,c
   849  001F84  0E24               	movlw	high __pidataCOMRAM
   850  001F86  6EF7               	movwf	tblptrh,c
   851  001F88  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   852  001F8A  6EF8               	movwf	tblptru,c
   853  001F8C  EE00  F041         	lfsr	0,__pdataCOMRAM
   854  001F90  EE10 F01A          	lfsr	1,26
   855  001F94                     copy_data1:
   856  001F94  0009               	tblrd		*+
   857  001F96  CFF5 FFEE          	movff	tablat,postinc0
   858  001F9A  50E5               	movf	postdec1,w,c
   859  001F9C  50E1               	movf	fsr1l,w,c
   860  001F9E  E1FA               	bnz	copy_data1
   861  001FA0                     end_of_initialization:
   862                           	opt stack 0
   863  001FA0                     __end_of__initialization:
   864                           	opt stack 0
   865  001FA0  0E00               	movlw	low (__Lmediumconst shr (0+16))
   866  001FA2  6EF8               	movwf	tblptru,c
   867  001FA4  0100               	movlb	0
   868  001FA6  EF01  F00D         	goto	_main	;jump to C main() function
   869                           tblptru	equ	0xFF8
   870                           tblptrh	equ	0xFF7
   871                           tblptrl	equ	0xFF6
   872                           tablat	equ	0xFF5
   873                           postinc0	equ	0xFEE
   874                           wreg	equ	0xFE8
   875                           postdec1	equ	0xFE5
   876                           fsr1l	equ	0xFE1
   877                           
   878                           	psect	bssCOMRAM
   879  00005B                     __pbssCOMRAM:
   880                           	opt stack 0
   881  00005B                     _volt:
   882                           	opt stack 0
   883  00005B                     	ds	3
   884  00005E                     _MODE:
   885                           	opt stack 0
   886  00005E                     	ds	2
   887  000060                     _txt:
   888                           	opt stack 0
   889  000060                     	ds	2
   890  000062                     _Count:
   891                           	opt stack 0
   892  000062                     	ds	1
   893  000063                     _EW_PED_SW:
   894                           	opt stack 0
   895  000063                     	ds	1
   896  000064                     _FLASHING:
   897                           	opt stack 0
   898  000064                     	ds	1
   899  000065                     _FLASHING_REQUEST:
   900                           	opt stack 0
   901  000065                     	ds	1
   902  000066                     _NS_PED_SW:
   903                           	opt stack 0
   904  000066                     	ds	1
   905  000067                     _PED_Count:
   906                           	opt stack 0
   907  000067                     	ds	1
   908  000068                     _SW_EWLT:
   909                           	opt stack 0
   910  000068                     	ds	1
   911  000069                     _SW_EWPED:
   912                           	opt stack 0
   913  000069                     	ds	1
   914  00006A                     _SW_MODE:
   915                           	opt stack 0
   916  00006A                     	ds	1
   917  00006B                     _SW_NSLT:
   918                           	opt stack 0
   919  00006B                     	ds	1
   920  00006C                     _SW_NSPED:
   921                           	opt stack 0
   922  00006C                     	ds	1
   923  00006D                     __tft_type:
   924                           	opt stack 0
   925  00006D                     	ds	1
   926  00006E                     _colstart:
   927                           	opt stack 0
   928  00006E                     	ds	1
   929  00006F                     _dir:
   930                           	opt stack 0
   931  00006F                     	ds	1
   932  000070                     _direction:
   933                           	opt stack 0
   934  000070                     	ds	1
   935  000071                     _rowstart:
   936                           	opt stack 0
   937  000071                     	ds	1
   938                           tblptru	equ	0xFF8
   939                           tblptrh	equ	0xFF7
   940                           tblptrl	equ	0xFF6
   941                           tablat	equ	0xFF5
   942                           postinc0	equ	0xFEE
   943                           wreg	equ	0xFE8
   944                           postdec1	equ	0xFE5
   945                           fsr1l	equ	0xFE1
   946                           
   947                           	psect	dataCOMRAM
   948  000041                     __pdataCOMRAM:
   949                           	opt stack 0
   950  000041                     _wrap:
   951                           	opt stack 0
   952  000041                     	ds	1
   953  000042                     _EWLT_Count:
   954                           	opt stack 0
   955  000042                     	ds	3
   956  000045                     _EW_Count:
   957                           	opt stack 0
   958  000045                     	ds	3
   959  000048                     _NS_Count:
   960                           	opt stack 0
   961  000048                     	ds	3
   962  00004B                     _Act_Mode_Txt:
   963                           	opt stack 0
   964  00004B                     	ds	2
   965  00004D                     _FlashingR_Txt:
   966                           	opt stack 0
   967  00004D                     	ds	2
   968  00004F                     _FlashingS_Txt:
   969                           	opt stack 0
   970  00004F                     	ds	2
   971  000051                     _SW_EWLT_Txt:
   972                           	opt stack 0
   973  000051                     	ds	2
   974  000053                     _SW_EWPED_Txt:
   975                           	opt stack 0
   976  000053                     	ds	2
   977  000055                     _SW_MODE_Txt:
   978                           	opt stack 0
   979  000055                     	ds	2
   980  000057                     _SW_NSLT_Txt:
   981                           	opt stack 0
   982  000057                     	ds	2
   983  000059                     _SW_NSPED_Txt:
   984                           	opt stack 0
   985  000059                     	ds	2
   986                           tblptru	equ	0xFF8
   987                           tblptrh	equ	0xFF7
   988                           tblptrl	equ	0xFF6
   989                           tablat	equ	0xFF5
   990                           postinc0	equ	0xFEE
   991                           wreg	equ	0xFE8
   992                           postdec1	equ	0xFE5
   993                           fsr1l	equ	0xFE1
   994                           
   995                           	psect	bssBANK0
   996  000080                     __pbssBANK0:
   997                           	opt stack 0
   998  000080                     _INT0_flag:
   999                           	opt stack 0
  1000  000080                     	ds	2
  1001  000082                     _INT1_flag:
  1002                           	opt stack 0
  1003  000082                     	ds	2
  1004  000084                     _INT2_flag:
  1005                           	opt stack 0
  1006  000084                     	ds	2
  1007  000086                     _nbr:
  1008                           	opt stack 0
  1009  000086                     	ds	2
  1010  000088                     _buffer:
  1011                           	opt stack 0
  1012  000088                     	ds	31
  1013                           tblptru	equ	0xFF8
  1014                           tblptrh	equ	0xFF7
  1015                           tblptrl	equ	0xFF6
  1016                           tablat	equ	0xFF5
  1017                           postinc0	equ	0xFEE
  1018                           wreg	equ	0xFE8
  1019                           postdec1	equ	0xFE5
  1020                           fsr1l	equ	0xFE1
  1021                           
  1022                           	psect	dataBANK0
  1023  0000B5                     __pdataBANK0:
  1024                           	opt stack 0
  1025  0000B5                     _NSLT_Count:
  1026                           	opt stack 0
  1027  0000B5                     	ds	3
  1028  0000B8                     _PED_EW_Count:
  1029                           	opt stack 0
  1030  0000B8                     	ds	3
  1031  0000BB                     _PED_NS_Count:
  1032                           	opt stack 0
  1033  0000BB                     	ds	3
  1034                           tblptru	equ	0xFF8
  1035                           tblptrh	equ	0xFF7
  1036                           tblptrl	equ	0xFF6
  1037                           tablat	equ	0xFF5
  1038                           postinc0	equ	0xFEE
  1039                           wreg	equ	0xFE8
  1040                           postdec1	equ	0xFE5
  1041                           fsr1l	equ	0xFE1
  1042                           
  1043                           	psect	cstackBANK0
  1044  0000A7                     __pcstackBANK0:
  1045                           	opt stack 0
  1046  0000A7                     drawtext@x:
  1047                           	opt stack 0
  1048  0000A7                     update_LCD_color@color:
  1049                           	opt stack 0
  1050                           
  1051                           ; 1 bytes @ 0x0
  1052  0000A7                     	ds	1
  1053  0000A8                     update_LCD_color@direction:
  1054                           	opt stack 0
  1055  0000A8                     drawtext@textsize:
  1056                           	opt stack 0
  1057                           
  1058                           ; 2 bytes @ 0x1
  1059  0000A8                     	ds	1
  1060  0000A9                     update_LCD_color@Circle_Y:
  1061                           	opt stack 0
  1062                           
  1063                           ; 1 bytes @ 0x2
  1064  0000A9                     	ds	1
  1065  0000AA                     Set_NS@color:
  1066                           	opt stack 0
  1067  0000AA                     Set_NS_LT@color:
  1068                           	opt stack 0
  1069  0000AA                     Set_EW@color:
  1070                           	opt stack 0
  1071  0000AA                     Set_EW_LT@color:
  1072                           	opt stack 0
  1073  0000AA                     drawtext@i:
  1074                           	opt stack 0
  1075                           
  1076                           ; 2 bytes @ 0x3
  1077  0000AA                     	ds	2
  1078  0000AC                     drawtext@cursor_y:
  1079                           	opt stack 0
  1080                           
  1081                           ; 1 bytes @ 0x5
  1082  0000AC                     	ds	1
  1083  0000AD                     drawtext@cursor_x:
  1084                           	opt stack 0
  1085                           
  1086                           ; 1 bytes @ 0x6
  1087  0000AD                     	ds	1
  1088  0000AE                     update_LCD_count@count:
  1089                           	opt stack 0
  1090  0000AE                     update_LCD_PED_Count@count:
  1091                           	opt stack 0
  1092  0000AE                     update_LCD_misc@nStep:
  1093                           	opt stack 0
  1094                           
  1095                           ; 2 bytes @ 0x7
  1096  0000AE                     	ds	1
  1097  0000AF                     update_LCD_count@direction:
  1098                           	opt stack 0
  1099  0000AF                     update_LCD_PED_Count@direction:
  1100                           	opt stack 0
  1101                           
  1102                           ; 1 bytes @ 0x8
  1103  0000AF                     	ds	1
  1104  0000B0                     PED_Control@Num_Sec:
  1105                           	opt stack 0
  1106  0000B0                     Wait_N_Seconds@seconds:
  1107                           	opt stack 0
  1108                           
  1109                           ; 1 bytes @ 0x9
  1110  0000B0                     	ds	1
  1111  0000B1                     PED_Control@direction:
  1112                           	opt stack 0
  1113  0000B1                     Wait_N_Seconds@I:
  1114                           	opt stack 0
  1115                           
  1116                           ; 1 bytes @ 0xA
  1117  0000B1                     	ds	1
  1118  0000B2                     PED_Control@i:
  1119                           	opt stack 0
  1120                           
  1121                           ; 1 bytes @ 0xB
  1122  0000B2                     	ds	1
  1123  0000B3                     main@nStep:
  1124                           	opt stack 0
  1125                           
  1126                           ; 2 bytes @ 0xC
  1127  0000B3                     	ds	2
  1128                           tblptru	equ	0xFF8
  1129                           tblptrh	equ	0xFF7
  1130                           tblptrl	equ	0xFF6
  1131                           tablat	equ	0xFF5
  1132                           postinc0	equ	0xFEE
  1133                           wreg	equ	0xFE8
  1134                           postdec1	equ	0xFE5
  1135                           fsr1l	equ	0xFE1
  1136                           
  1137                           	psect	cstackCOMRAM
  1138  000001                     __pcstackCOMRAM:
  1139                           	opt stack 0
  1140  000001                     ??_chkisr:
  1141  000001                     
  1142                           ; 0 bytes @ 0x0
  1143  000001                     	ds	14
  1144  00000F                     ?_strlen:
  1145                           	opt stack 0
  1146  00000F                     ?_get_full_ADC:
  1147                           	opt stack 0
  1148  00000F                     ?___wmul:
  1149                           	opt stack 0
  1150  00000F                     ?___awdiv:
  1151                           	opt stack 0
  1152  00000F                     ?___awmod:
  1153                           	opt stack 0
  1154  00000F                     ?___ftpack:
  1155                           	opt stack 0
  1156  00000F                     spiwrite@x:
  1157                           	opt stack 0
  1158  00000F                     OpenUSART@spbrg:
  1159                           	opt stack 0
  1160  00000F                     ___wmul@multiplier:
  1161                           	opt stack 0
  1162  00000F                     ___awdiv@dividend:
  1163                           	opt stack 0
  1164  00000F                     ___awmod@dividend:
  1165                           	opt stack 0
  1166  00000F                     strcpy@to:
  1167                           	opt stack 0
  1168  00000F                     strlen@s:
  1169                           	opt stack 0
  1170  00000F                     ___ftpack@arg:
  1171                           	opt stack 0
  1172  00000F                     ___ftge@ff1:
  1173                           	opt stack 0
  1174                           
  1175                           ; 3 bytes @ 0xE
  1176  00000F                     	ds	1
  1177  000010                     spiwrite@spidata:
  1178                           	opt stack 0
  1179                           
  1180                           ; 1 bytes @ 0xF
  1181  000010                     	ds	1
  1182  000011                     ??_strlen:
  1183  000011                     ??_get_full_ADC:
  1184  000011                     write_command@cmd_:
  1185                           	opt stack 0
  1186  000011                     write_data@data_:
  1187                           	opt stack 0
  1188  000011                     OpenUSART@config:
  1189                           	opt stack 0
  1190  000011                     ___wmul@multiplicand:
  1191                           	opt stack 0
  1192  000011                     ___awdiv@divisor:
  1193                           	opt stack 0
  1194  000011                     ___awmod@divisor:
  1195                           	opt stack 0
  1196  000011                     strcpy@from:
  1197                           	opt stack 0
  1198                           
  1199                           ; 2 bytes @ 0x10
  1200  000011                     	ds	1
  1201  000012                     setAddrWindow@y0:
  1202                           	opt stack 0
  1203  000012                     ___ftpack@exp:
  1204                           	opt stack 0
  1205  000012                     ___ftge@ff2:
  1206                           	opt stack 0
  1207                           
  1208                           ; 3 bytes @ 0x11
  1209  000012                     	ds	1
  1210  000013                     setAddrWindow@x1:
  1211                           	opt stack 0
  1212  000013                     ___awdiv@counter:
  1213                           	opt stack 0
  1214  000013                     ___awmod@counter:
  1215                           	opt stack 0
  1216  000013                     ___ftpack@sign:
  1217                           	opt stack 0
  1218  000013                     get_full_ADC@result:
  1219                           	opt stack 0
  1220  000013                     ___wmul@product:
  1221                           	opt stack 0
  1222  000013                     strcpy@cp:
  1223                           	opt stack 0
  1224  000013                     strlen@cp:
  1225                           	opt stack 0
  1226                           
  1227                           ; 2 bytes @ 0x12
  1228  000013                     	ds	1
  1229  000014                     ??___ftpack:
  1230  000014                     setAddrWindow@y1:
  1231                           	opt stack 0
  1232  000014                     ___awdiv@sign:
  1233                           	opt stack 0
  1234  000014                     ___awmod@sign:
  1235                           	opt stack 0
  1236                           
  1237                           ; 1 bytes @ 0x13
  1238  000014                     	ds	1
  1239  000015                     ??___ftge:
  1240  000015                     setAddrWindow@x0:
  1241                           	opt stack 0
  1242  000015                     delay_ms@ms:
  1243                           	opt stack 0
  1244  000015                     ___awdiv@quotient:
  1245                           	opt stack 0
  1246                           
  1247                           ; 2 bytes @ 0x14
  1248  000015                     	ds	1
  1249  000016                     drawPixel@y:
  1250                           	opt stack 0
  1251  000016                     drawFastVLine@y:
  1252                           	opt stack 0
  1253  000016                     fillRectangle@y:
  1254                           	opt stack 0
  1255  000016                     drawFastHLine@y:
  1256                           	opt stack 0
  1257                           
  1258                           ; 1 bytes @ 0x15
  1259  000016                     	ds	1
  1260  000017                     ??_delay_ms:
  1261  000017                     ?___awtoft:
  1262                           	opt stack 0
  1263  000017                     drawFastVLine@h:
  1264                           	opt stack 0
  1265  000017                     fillRectangle@w:
  1266                           	opt stack 0
  1267  000017                     drawFastHLine@w:
  1268                           	opt stack 0
  1269  000017                     drawPixel@color:
  1270                           	opt stack 0
  1271  000017                     ___awtoft@c:
  1272                           	opt stack 0
  1273                           
  1274                           ; 2 bytes @ 0x16
  1275  000017                     	ds	1
  1276  000018                     fillRectangle@h:
  1277                           	opt stack 0
  1278  000018                     drawFastVLine@color:
  1279                           	opt stack 0
  1280  000018                     drawFastHLine@color:
  1281                           	opt stack 0
  1282                           
  1283                           ; 2 bytes @ 0x17
  1284  000018                     	ds	1
  1285  000019                     drawPixel@x:
  1286                           	opt stack 0
  1287  000019                     delay_ms@count:
  1288                           	opt stack 0
  1289  000019                     fillRectangle@color:
  1290                           	opt stack 0
  1291                           
  1292                           ; 2 bytes @ 0x18
  1293  000019                     	ds	1
  1294  00001A                     ??_drawFastVLine:
  1295  00001A                     ??_drawFastHLine:
  1296  00001A                     ___awtoft@sign:
  1297                           	opt stack 0
  1298  00001A                     drawCircle@x0:
  1299                           	opt stack 0
  1300                           
  1301                           ; 2 bytes @ 0x19
  1302  00001A                     	ds	1
  1303  00001B                     ??_fillRectangle:
  1304  00001B                     ?___ftdiv:
  1305                           	opt stack 0
  1306  00001B                     ___ftdiv@f1:
  1307                           	opt stack 0
  1308                           
  1309                           ; 3 bytes @ 0x1A
  1310  00001B                     	ds	1
  1311  00001C                     drawCircle@y0:
  1312                           	opt stack 0
  1313                           
  1314                           ; 2 bytes @ 0x1B
  1315  00001C                     	ds	2
  1316  00001E                     drawFastVLine@hi:
  1317                           	opt stack 0
  1318  00001E                     drawFastHLine@hi:
  1319                           	opt stack 0
  1320  00001E                     drawCircle@r:
  1321                           	opt stack 0
  1322  00001E                     ___ftdiv@f2:
  1323                           	opt stack 0
  1324                           
  1325                           ; 3 bytes @ 0x1D
  1326  00001E                     	ds	1
  1327  00001F                     drawFastVLine@lo:
  1328                           	opt stack 0
  1329  00001F                     fillRectangle@hi:
  1330                           	opt stack 0
  1331  00001F                     drawFastHLine@lo:
  1332                           	opt stack 0
  1333                           
  1334                           ; 1 bytes @ 0x1E
  1335  00001F                     	ds	1
  1336  000020                     drawFastVLine@x:
  1337                           	opt stack 0
  1338  000020                     fillRectangle@lo:
  1339                           	opt stack 0
  1340  000020                     drawFastHLine@x:
  1341                           	opt stack 0
  1342  000020                     drawCircle@color:
  1343                           	opt stack 0
  1344                           
  1345                           ; 2 bytes @ 0x1F
  1346  000020                     	ds	1
  1347  000021                     ??___ftdiv:
  1348  000021                     fillRect@y:
  1349                           	opt stack 0
  1350  000021                     fillRectangle@x:
  1351                           	opt stack 0
  1352  000021                     fillCircleHelper@x0:
  1353                           	opt stack 0
  1354  000021                     drawRect@x:
  1355                           	opt stack 0
  1356                           
  1357                           ; 2 bytes @ 0x20
  1358  000021                     	ds	1
  1359  000022                     ??_drawCircle:
  1360  000022                     fillRect@w:
  1361                           	opt stack 0
  1362  000022                     fillScreen@color:
  1363                           	opt stack 0
  1364                           
  1365                           ; 2 bytes @ 0x21
  1366  000022                     	ds	1
  1367  000023                     fillRect@h:
  1368                           	opt stack 0
  1369  000023                     fillCircleHelper@y0:
  1370                           	opt stack 0
  1371  000023                     drawRect@y:
  1372                           	opt stack 0
  1373                           
  1374                           ; 2 bytes @ 0x22
  1375  000023                     	ds	1
  1376  000024                     ___ftdiv@cntr:
  1377                           	opt stack 0
  1378  000024                     fillRect@color:
  1379                           	opt stack 0
  1380  000024                     drawCircle@ddF_x:
  1381                           	opt stack 0
  1382                           
  1383                           ; 2 bytes @ 0x23
  1384  000024                     	ds	1
  1385  000025                     fillCircleHelper@r:
  1386                           	opt stack 0
  1387  000025                     drawRect@w:
  1388                           	opt stack 0
  1389  000025                     ___ftdiv@f3:
  1390                           	opt stack 0
  1391                           
  1392                           ; 3 bytes @ 0x24
  1393  000025                     	ds	1
  1394  000026                     ??_fillRect:
  1395  000026                     drawCircle@ddF_y:
  1396                           	opt stack 0
  1397                           
  1398                           ; 2 bytes @ 0x25
  1399  000026                     	ds	1
  1400  000027                     fillCircleHelper@cornername:
  1401                           	opt stack 0
  1402  000027                     drawRect@h:
  1403                           	opt stack 0
  1404                           
  1405                           ; 2 bytes @ 0x26
  1406  000027                     	ds	1
  1407  000028                     ___ftdiv@exp:
  1408                           	opt stack 0
  1409  000028                     drawCircle@f:
  1410                           	opt stack 0
  1411                           
  1412                           ; 2 bytes @ 0x27
  1413  000028                     	ds	1
  1414  000029                     fillRect@x:
  1415                           	opt stack 0
  1416  000029                     ___ftdiv@sign:
  1417                           	opt stack 0
  1418  000029                     fillCircleHelper@delta:
  1419                           	opt stack 0
  1420  000029                     drawRect@color:
  1421                           	opt stack 0
  1422                           
  1423                           ; 2 bytes @ 0x28
  1424  000029                     	ds	1
  1425  00002A                     fillRect@i:
  1426                           	opt stack 0
  1427  00002A                     drawCircle@x:
  1428                           	opt stack 0
  1429                           
  1430                           ; 2 bytes @ 0x29
  1431  00002A                     	ds	1
  1432  00002B                     ??_drawRect:
  1433  00002B                     fillCircleHelper@color:
  1434                           	opt stack 0
  1435                           
  1436                           ; 2 bytes @ 0x2A
  1437  00002B                     	ds	1
  1438  00002C                     drawChar@y:
  1439                           	opt stack 0
  1440  00002C                     drawCircle@y:
  1441                           	opt stack 0
  1442                           
  1443                           ; 2 bytes @ 0x2B
  1444  00002C                     	ds	1
  1445  00002D                     ??_fillCircleHelper:
  1446  00002D                     drawChar@c:
  1447                           	opt stack 0
  1448                           
  1449                           ; 1 bytes @ 0x2C
  1450  00002D                     	ds	1
  1451  00002E                     drawChar@color:
  1452                           	opt stack 0
  1453                           
  1454                           ; 2 bytes @ 0x2D
  1455  00002E                     	ds	1
  1456  00002F                     fillCircleHelper@ddF_x:
  1457                           	opt stack 0
  1458                           
  1459                           ; 2 bytes @ 0x2E
  1460  00002F                     	ds	1
  1461  000030                     drawChar@bg:
  1462                           	opt stack 0
  1463                           
  1464                           ; 2 bytes @ 0x2F
  1465  000030                     	ds	1
  1466  000031                     fillCircleHelper@ddF_y:
  1467                           	opt stack 0
  1468                           
  1469                           ; 2 bytes @ 0x30
  1470  000031                     	ds	1
  1471  000032                     drawChar@size:
  1472                           	opt stack 0
  1473                           
  1474                           ; 1 bytes @ 0x31
  1475  000032                     	ds	1
  1476  000033                     drawChar@line:
  1477                           	opt stack 0
  1478  000033                     fillCircleHelper@f:
  1479                           	opt stack 0
  1480                           
  1481                           ; 2 bytes @ 0x32
  1482  000033                     	ds	1
  1483  000034                     drawChar@x:
  1484                           	opt stack 0
  1485                           
  1486                           ; 1 bytes @ 0x33
  1487  000034                     	ds	1
  1488  000035                     drawChar@j:
  1489                           	opt stack 0
  1490  000035                     fillCircleHelper@x:
  1491                           	opt stack 0
  1492                           
  1493                           ; 2 bytes @ 0x34
  1494  000035                     	ds	1
  1495  000036                     drawChar@i:
  1496                           	opt stack 0
  1497                           
  1498                           ; 1 bytes @ 0x35
  1499  000036                     	ds	1
  1500  000037                     drawtext@y:
  1501                           	opt stack 0
  1502  000037                     fillCircleHelper@y:
  1503                           	opt stack 0
  1504                           
  1505                           ; 2 bytes @ 0x36
  1506  000037                     	ds	1
  1507  000038                     drawtext@_text:
  1508                           	opt stack 0
  1509                           
  1510                           ; 2 bytes @ 0x37
  1511  000038                     	ds	1
  1512  000039                     fillCircle@x0:
  1513                           	opt stack 0
  1514                           
  1515                           ; 2 bytes @ 0x38
  1516  000039                     	ds	1
  1517  00003A                     drawtext@color:
  1518                           	opt stack 0
  1519                           
  1520                           ; 2 bytes @ 0x39
  1521  00003A                     	ds	1
  1522  00003B                     fillCircle@y0:
  1523                           	opt stack 0
  1524                           
  1525                           ; 2 bytes @ 0x3A
  1526  00003B                     	ds	1
  1527  00003C                     drawtext@bg:
  1528                           	opt stack 0
  1529                           
  1530                           ; 2 bytes @ 0x3B
  1531  00003C                     	ds	1
  1532  00003D                     fillCircle@r:
  1533                           	opt stack 0
  1534                           
  1535                           ; 2 bytes @ 0x3C
  1536  00003D                     	ds	1
  1537  00003E                     drawtext@size:
  1538                           	opt stack 0
  1539                           
  1540                           ; 1 bytes @ 0x3D
  1541  00003E                     	ds	1
  1542  00003F                     ??_drawtext:
  1543  00003F                     fillCircle@color:
  1544                           	opt stack 0
  1545                           
  1546                           ; 2 bytes @ 0x3E
  1547  00003F                     	ds	2
  1548  000041                     tblptru	equ	0xFF8
  1549                           tblptrh	equ	0xFF7
  1550                           tblptrl	equ	0xFF6
  1551                           tablat	equ	0xFF5
  1552                           postinc0	equ	0xFEE
  1553                           wreg	equ	0xFE8
  1554                           postdec1	equ	0xFE5
  1555                           fsr1l	equ	0xFE1
  1556                           
  1557                           ; 0 bytes @ 0x40
  1558 ;;
  1559 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1560 ;;
  1561 ;; *************** function _main *****************
  1562 ;; Defined at:
  1563 ;;		line 293 in file "Lab8.c"
  1564 ;; Parameters:    Size  Location     Type
  1565 ;;		None
  1566 ;; Auto vars:     Size  Location     Type
  1567 ;;  nStep           2   12[BANK0 ] int 
  1568 ;; Return value:  Size  Location     Type
  1569 ;;		None               void
  1570 ;; Registers used:
  1571 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1572 ;; Tracked objects:
  1573 ;;		On entry : 0/0
  1574 ;;		On exit  : 0/0
  1575 ;;		Unchanged: 0/0
  1576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1577 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1578 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1579 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1580 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1581 ;;Total ram usage:        2 bytes
  1582 ;; Hardware stack levels required when called:   13
  1583 ;; This function calls:
  1584 ;;		_Day_Mode
  1585 ;;		_Init_ADC
  1586 ;;		_Initialize_Screen
  1587 ;;		_Night_Mode
  1588 ;;		___awtoft
  1589 ;;		___ftdiv
  1590 ;;		___ftge
  1591 ;;		___wmul
  1592 ;;		_get_full_ADC
  1593 ;;		_init_IO
  1594 ;;		_init_UART
  1595 ;; This function is called by:
  1596 ;;		Startup code after reset
  1597 ;; This function uses a non-reentrant model
  1598 ;;
  1599                           
  1600                           	psect	text0
  1601  001A02                     __ptext0:
  1602                           	opt stack 0
  1603  001A02                     _main:
  1604                           	opt stack 18
  1605                           
  1606                           ;Lab8.c: 295: init_IO();
  1607                           
  1608                           ;incstack = 0
  1609  001A02  ECD9  F011         	call	_init_IO	;wreg free
  1610                           
  1611                           ;Lab8.c: 296: Init_ADC();
  1612  001A06  ECB1  F012         	call	_Init_ADC	;wreg free
  1613                           
  1614                           ;Lab8.c: 297: init_UART();
  1615  001A0A  EC69  F012         	call	_init_UART	;wreg free
  1616                           
  1617                           ;Lab8.c: 298: OSCCON = 0x70;
  1618  001A0E  0E70               	movlw	112
  1619  001A10  6ED3               	movwf	4051,c	;volatile
  1620                           
  1621                           ;Lab8.c: 299: RBPU = 0;
  1622  001A12  9EF1               	bcf	intcon2,7,c	;volatile
  1623                           
  1624                           ;Lab8.c: 301: Initialize_Screen();
  1625  001A14  EC0E  F000         	call	_Initialize_Screen	;wreg free
  1626                           
  1627                           ;Lab8.c: 304: int nStep = get_full_ADC();
  1628  001A18  EC17  F012         	call	_get_full_ADC	;wreg free
  1629  001A1C  C00F  F0B3         	movff	?_get_full_ADC,main@nStep
  1630  001A20  C010  F0B4         	movff	?_get_full_ADC+1,main@nStep+1
  1631                           
  1632                           ;Lab8.c: 305: volt = nStep * 5 /1024.0;
  1633  001A24  C0B3  F00F         	movff	main@nStep,___wmul@multiplier
  1634  001A28  C0B4  F010         	movff	main@nStep+1,___wmul@multiplier+1
  1635  001A2C  0E00               	movlw	0
  1636  001A2E  6E12               	movwf	___wmul@multiplicand+1,c
  1637  001A30  0E05               	movlw	5
  1638  001A32  6E11               	movwf	___wmul@multiplicand,c
  1639  001A34  EC03  F012         	call	___wmul	;wreg free
  1640  001A38  C00F  F017         	movff	?___wmul,___awtoft@c
  1641  001A3C  C010  F018         	movff	?___wmul+1,___awtoft@c+1
  1642  001A40  EC6E  F011         	call	___awtoft	;wreg free
  1643  001A44  C017  F01B         	movff	?___awtoft,___ftdiv@f1
  1644  001A48  C018  F01C         	movff	?___awtoft+1,___ftdiv@f1+1
  1645  001A4C  C019  F01D         	movff	?___awtoft+2,___ftdiv@f1+2
  1646  001A50  0E00               	movlw	0
  1647  001A52  6E1E               	movwf	___ftdiv@f2,c
  1648  001A54  0E80               	movlw	128
  1649  001A56  6E1F               	movwf	___ftdiv@f2+1,c
  1650  001A58  0E44               	movlw	68
  1651  001A5A  6E20               	movwf	___ftdiv@f2+2,c
  1652  001A5C  EC98  F00A         	call	___ftdiv	;wreg free
  1653  001A60  C01B  F05B         	movff	?___ftdiv,_volt
  1654  001A64  C01C  F05C         	movff	?___ftdiv+1,_volt+1
  1655  001A68  C01D  F05D         	movff	?___ftdiv+2,_volt+2
  1656                           
  1657                           ;Lab8.c: 306: SW_MODE = volt < 2.5 ? 1:0;
  1658  001A6C  C05B  F00F         	movff	_volt,___ftge@ff1
  1659  001A70  C05C  F010         	movff	_volt+1,___ftge@ff1+1
  1660  001A74  C05D  F011         	movff	_volt+2,___ftge@ff1+2
  1661  001A78  0E00               	movlw	0
  1662  001A7A  6E12               	movwf	___ftge@ff2,c
  1663  001A7C  0E20               	movlw	32
  1664  001A7E  6E13               	movwf	___ftge@ff2+1,c
  1665  001A80  0E40               	movlw	64
  1666  001A82  6E14               	movwf	___ftge@ff2+2,c
  1667  001A84  EC56  F00D         	call	___ftge	;wreg free
  1668  001A88  B0D8               	btfsc	status,0,c
  1669  001A8A  D002               	goto	u3920
  1670  001A8C  0E01               	movlw	1
  1671  001A8E  D001               	goto	u3930
  1672  001A90                     u3920:
  1673  001A90  0E00               	movlw	0
  1674  001A92                     u3930:
  1675  001A92  6E6A               	movwf	_SW_MODE,c
  1676  001A94  D000               	goto	l5429
  1677  001A96                     l5429:
  1678                           
  1679                           ;Lab8.c: 309: {
  1680                           ;Lab8.c: 310: if (SW_MODE)
  1681  001A96  506A               	movf	_SW_MODE,w,c
  1682  001A98  B4D8               	btfsc	status,2,c
  1683  001A9A  D003               	goto	l5433
  1684                           
  1685                           ;Lab8.c: 311: {
  1686                           ;Lab8.c: 312: Day_Mode();
  1687  001A9C  ECDF  F00B         	call	_Day_Mode	;wreg free
  1688                           
  1689                           ;Lab8.c: 313: }
  1690  001AA0  D7FA               	goto	l5429
  1691  001AA2                     l5433:
  1692                           
  1693                           ;Lab8.c: 314: else
  1694                           ;Lab8.c: 315: {
  1695                           ;Lab8.c: 316: Night_Mode();
  1696  001AA2  ECA9  F00C         	call	_Night_Mode	;wreg free
  1697  001AA6  D7F7               	goto	l5429
  1698  001AA8  EF0C  F000         	goto	start
  1699  001AAC                     __end_of_main:
  1700                           	opt stack 0
  1701                           tblptru	equ	0xFF8
  1702                           tblptrh	equ	0xFF7
  1703                           tblptrl	equ	0xFF6
  1704                           tablat	equ	0xFF5
  1705                           intcon2	equ	0xFF1
  1706                           postinc0	equ	0xFEE
  1707                           wreg	equ	0xFE8
  1708                           postdec1	equ	0xFE5
  1709                           fsr1l	equ	0xFE1
  1710                           status	equ	0xFD8
  1711                           
  1712 ;; *************** function _init_UART *****************
  1713 ;; Defined at:
  1714 ;;		line 279 in file "Lab8.c"
  1715 ;; Parameters:    Size  Location     Type
  1716 ;;		None
  1717 ;; Auto vars:     Size  Location     Type
  1718 ;;		None
  1719 ;; Return value:  Size  Location     Type
  1720 ;;		None               void
  1721 ;; Registers used:
  1722 ;;		wreg, status,2, cstack
  1723 ;; Tracked objects:
  1724 ;;		On entry : 0/0
  1725 ;;		On exit  : 0/0
  1726 ;;		Unchanged: 0/0
  1727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1728 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1729 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1730 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1731 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1732 ;;Total ram usage:        0 bytes
  1733 ;; Hardware stack levels used:    1
  1734 ;; Hardware stack levels required when called:    3
  1735 ;; This function calls:
  1736 ;;		_OpenUSART
  1737 ;; This function is called by:
  1738 ;;		_main
  1739 ;; This function uses a non-reentrant model
  1740 ;;
  1741                           
  1742                           	psect	text1
  1743  0024D2                     __ptext1:
  1744                           	opt stack 0
  1745  0024D2                     _init_UART:
  1746                           	opt stack 27
  1747                           
  1748                           ;Lab8.c: 281: OpenUSART (0b01111111 & 0b10111111 &
  1749                           ;Lab8.c: 282: 0b11111110 & 0b11111101 & 0b11111111 &
  1750                           ;Lab8.c: 283: 0b11111111, 25);
  1751                           
  1752                           ;incstack = 0
  1753  0024D2  0E00               	movlw	0
  1754  0024D4  6E10               	movwf	OpenUSART@spbrg+1,c
  1755  0024D6  0E19               	movlw	25
  1756  0024D8  6E0F               	movwf	OpenUSART@spbrg,c
  1757  0024DA  0E3C               	movlw	60
  1758  0024DC  EC39  F00F         	call	_OpenUSART
  1759                           
  1760                           ;Lab8.c: 284: OSCCON = 0x60;
  1761  0024E0  0E60               	movlw	96
  1762  0024E2  6ED3               	movwf	4051,c	;volatile
  1763  0024E4  0012               	return		;funcret
  1764  0024E6                     __end_of_init_UART:
  1765                           	opt stack 0
  1766                           tblptru	equ	0xFF8
  1767                           tblptrh	equ	0xFF7
  1768                           tblptrl	equ	0xFF6
  1769                           tablat	equ	0xFF5
  1770                           intcon2	equ	0xFF1
  1771                           postinc0	equ	0xFEE
  1772                           wreg	equ	0xFE8
  1773                           postdec1	equ	0xFE5
  1774                           fsr1l	equ	0xFE1
  1775                           status	equ	0xFD8
  1776                           
  1777 ;; *************** function _OpenUSART *****************
  1778 ;; Defined at:
  1779 ;;		line 73 in file "E:\XC8\sources\pic18\plib\USART\uopen.c"
  1780 ;; Parameters:    Size  Location     Type
  1781 ;;  config          1    wreg     unsigned char 
  1782 ;;  spbrg           2   14[COMRAM] unsigned int 
  1783 ;; Auto vars:     Size  Location     Type
  1784 ;;  config          1   16[COMRAM] unsigned char 
  1785 ;; Return value:  Size  Location     Type
  1786 ;;		None               void
  1787 ;; Registers used:
  1788 ;;		wreg, status,2
  1789 ;; Tracked objects:
  1790 ;;		On entry : 0/0
  1791 ;;		On exit  : 0/0
  1792 ;;		Unchanged: 0/0
  1793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1794 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1795 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1796 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1797 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1798 ;;Total ram usage:        3 bytes
  1799 ;; Hardware stack levels used:    1
  1800 ;; Hardware stack levels required when called:    2
  1801 ;; This function calls:
  1802 ;;		Nothing
  1803 ;; This function is called by:
  1804 ;;		_init_UART
  1805 ;; This function uses a non-reentrant model
  1806 ;;
  1807                           
  1808                           	psect	text2
  1809  001E72                     __ptext2:
  1810                           	opt stack 0
  1811  001E72                     _OpenUSART:
  1812                           	opt stack 27
  1813                           
  1814                           ;incstack = 0
  1815                           ;OpenUSART@config stored from wreg
  1816  001E72  6E11               	movwf	OpenUSART@config,c
  1817  001E74  0E00               	movlw	0
  1818  001E76  6EAC               	movwf	4012,c	;volatile
  1819  001E78  0E00               	movlw	0
  1820  001E7A  6EAB               	movwf	4011,c	;volatile
  1821  001E7C  A011               	btfss	OpenUSART@config,0,c
  1822  001E7E  D002               	goto	l4825
  1823  001E80  88AC               	bsf	4012,4,c	;volatile
  1824  001E82  D000               	goto	l4825
  1825  001E84                     l4825:
  1826  001E84  A211               	btfss	OpenUSART@config,1,c
  1827  001E86  D003               	goto	l4829
  1828  001E88  8CAC               	bsf	4012,6,c	;volatile
  1829  001E8A  8CAB               	bsf	4011,6,c	;volatile
  1830  001E8C  D000               	goto	l4829
  1831  001E8E                     l4829:
  1832  001E8E  A411               	btfss	OpenUSART@config,2,c
  1833  001E90  D002               	goto	l4833
  1834  001E92  8EAC               	bsf	4012,7,c	;volatile
  1835  001E94  D000               	goto	l4833
  1836  001E96                     l4833:
  1837  001E96  A611               	btfss	OpenUSART@config,3,c
  1838  001E98  D002               	goto	l558
  1839  001E9A  88AB               	bsf	4011,4,c	;volatile
  1840  001E9C  D002               	goto	l4837
  1841  001E9E                     l558:
  1842  001E9E  8AAB               	bsf	4011,5,c	;volatile
  1843  001EA0  D000               	goto	l4837
  1844  001EA2                     l4837:
  1845  001EA2  B811               	btfsc	OpenUSART@config,4,c
  1846  001EA4  84AC               	bsf	4012,2,c	;volatile
  1847  001EA6  989E               	bcf	3998,4,c	;volatile
  1848  001EA8  AA11               	btfss	OpenUSART@config,5,c
  1849  001EAA  D002               	goto	l4845
  1850  001EAC  86AB               	bsf	4011,3,c	;volatile
  1851  001EAE  D000               	goto	l4845
  1852  001EB0                     l4845:
  1853  001EB0  AC11               	btfss	OpenUSART@config,6,c
  1854  001EB2  D002               	goto	l562
  1855  001EB4  8A9D               	bsf	3997,5,c	;volatile
  1856  001EB6  D001               	goto	l563
  1857  001EB8                     l562:
  1858  001EB8  9A9D               	bcf	3997,5,c	;volatile
  1859  001EBA                     l563:
  1860  001EBA  9A9E               	bcf	3998,5,c	;volatile
  1861  001EBC  AE11               	btfss	OpenUSART@config,7,c
  1862  001EBE  D002               	goto	l564
  1863  001EC0  889D               	bsf	3997,4,c	;volatile
  1864  001EC2  D001               	goto	l565
  1865  001EC4                     l564:
  1866  001EC4  989D               	bcf	3997,4,c	;volatile
  1867  001EC6                     l565:
  1868  001EC6  C00F  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  1869  001ECA  5010               	movf	OpenUSART@spbrg+1,w,c
  1870  001ECC  6EB0               	movwf	4016,c	;volatile
  1871  001ECE  8AAC               	bsf	4012,5,c	;volatile
  1872  001ED0  8EAB               	bsf	4011,7,c	;volatile
  1873  001ED2  9C94               	bcf	3988,6,c	;volatile
  1874  001ED4  8E94               	bsf	3988,7,c	;volatile
  1875  001ED6  B8AC               	btfsc	4012,4,c	;volatile
  1876  001ED8  BEAC               	btfsc	4012,7,c	;volatile
  1877  001EDA  D002               	goto	l567
  1878  001EDC  8C94               	bsf	3988,6,c	;volatile
  1879  001EDE  D000               	goto	l567
  1880  001EE0                     l567:
  1881  001EE0  0012               	return		;funcret
  1882  001EE2                     __end_of_OpenUSART:
  1883                           	opt stack 0
  1884                           tblptru	equ	0xFF8
  1885                           tblptrh	equ	0xFF7
  1886                           tblptrl	equ	0xFF6
  1887                           tablat	equ	0xFF5
  1888                           intcon2	equ	0xFF1
  1889                           postinc0	equ	0xFEE
  1890                           wreg	equ	0xFE8
  1891                           postdec1	equ	0xFE5
  1892                           fsr1l	equ	0xFE1
  1893                           status	equ	0xFD8
  1894                           
  1895 ;; *************** function _init_IO *****************
  1896 ;; Defined at:
  1897 ;;		line 322 in file "Lab8.c"
  1898 ;; Parameters:    Size  Location     Type
  1899 ;;		None
  1900 ;; Auto vars:     Size  Location     Type
  1901 ;;		None
  1902 ;; Return value:  Size  Location     Type
  1903 ;;		None               void
  1904 ;; Registers used:
  1905 ;;		wreg, status,2
  1906 ;; Tracked objects:
  1907 ;;		On entry : 0/0
  1908 ;;		On exit  : 0/0
  1909 ;;		Unchanged: 0/0
  1910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1911 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1912 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1913 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1914 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1915 ;;Total ram usage:        0 bytes
  1916 ;; Hardware stack levels used:    1
  1917 ;; Hardware stack levels required when called:    2
  1918 ;; This function calls:
  1919 ;;		Nothing
  1920 ;; This function is called by:
  1921 ;;		_main
  1922 ;; This function uses a non-reentrant model
  1923 ;;
  1924                           
  1925                           	psect	text3
  1926  0023B2                     __ptext3:
  1927                           	opt stack 0
  1928  0023B2                     _init_IO:
  1929                           	opt stack 28
  1930                           
  1931                           ;Lab8.c: 324: TRISA = 0x31;
  1932                           
  1933                           ;incstack = 0
  1934  0023B2  0E31               	movlw	49
  1935  0023B4  6E92               	movwf	3986,c	;volatile
  1936                           
  1937                           ;Lab8.c: 325: TRISB = 0x07;
  1938  0023B6  0E07               	movlw	7
  1939  0023B8  6E93               	movwf	3987,c	;volatile
  1940                           
  1941                           ;Lab8.c: 326: TRISC = 0x00;
  1942  0023BA  0E00               	movlw	0
  1943  0023BC  6E94               	movwf	3988,c	;volatile
  1944                           
  1945                           ;Lab8.c: 327: TRISD = 0x00;
  1946  0023BE  0E00               	movlw	0
  1947  0023C0  6E95               	movwf	3989,c	;volatile
  1948                           
  1949                           ;Lab8.c: 328: TRISE = 0x00;
  1950  0023C2  0E00               	movlw	0
  1951  0023C4  6E96               	movwf	3990,c	;volatile
  1952                           
  1953                           ;Lab8.c: 330: INTCONbits.INT0IF = 0 ;
  1954  0023C6  92F2               	bcf	intcon,1,c	;volatile
  1955                           
  1956                           ;Lab8.c: 331: INTCON3bits.INT1IF = 0;
  1957  0023C8  90F0               	bcf	intcon3,0,c	;volatile
  1958                           
  1959                           ;Lab8.c: 332: INTCON3bits.INT2IF =0;
  1960  0023CA  92F0               	bcf	intcon3,1,c	;volatile
  1961                           
  1962                           ;Lab8.c: 333: INTCON2bits.INTEDG0=0 ;
  1963  0023CC  9CF1               	bcf	intcon2,6,c	;volatile
  1964                           
  1965                           ;Lab8.c: 334: INTCON2bits.INTEDG1=0;
  1966  0023CE  9AF1               	bcf	intcon2,5,c	;volatile
  1967                           
  1968                           ;Lab8.c: 335: INTCON2bits.INTEDG2=1;
  1969  0023D0  88F1               	bsf	intcon2,4,c	;volatile
  1970                           
  1971                           ;Lab8.c: 336: INTCONbits.INT0IE =1;
  1972  0023D2  88F2               	bsf	intcon,4,c	;volatile
  1973                           
  1974                           ;Lab8.c: 337: INTCON3bits.INT1IE=1;
  1975  0023D4  86F0               	bsf	intcon3,3,c	;volatile
  1976                           
  1977                           ;Lab8.c: 338: INTCON3bits.INT2IE=1;
  1978  0023D6  88F0               	bsf	intcon3,4,c	;volatile
  1979                           
  1980                           ;Lab8.c: 339: INTCONbits.GIE=1;
  1981  0023D8  8EF2               	bsf	intcon,7,c	;volatile
  1982  0023DA  0012               	return		;funcret
  1983  0023DC                     __end_of_init_IO:
  1984                           	opt stack 0
  1985                           tblptru	equ	0xFF8
  1986                           tblptrh	equ	0xFF7
  1987                           tblptrl	equ	0xFF6
  1988                           tablat	equ	0xFF5
  1989                           intcon	equ	0xFF2
  1990                           intcon2	equ	0xFF1
  1991                           intcon3	equ	0xFF0
  1992                           postinc0	equ	0xFEE
  1993                           wreg	equ	0xFE8
  1994                           postdec1	equ	0xFE5
  1995                           fsr1l	equ	0xFE1
  1996                           status	equ	0xFD8
  1997                           
  1998 ;; *************** function _Night_Mode *****************
  1999 ;; Defined at:
  2000 ;;		line 492 in file "Lab8.c"
  2001 ;; Parameters:    Size  Location     Type
  2002 ;;		None
  2003 ;; Auto vars:     Size  Location     Type
  2004 ;;		None
  2005 ;; Return value:  Size  Location     Type
  2006 ;;		None               void
  2007 ;; Registers used:
  2008 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2009 ;; Tracked objects:
  2010 ;;		On entry : 0/0
  2011 ;;		On exit  : 0/0
  2012 ;;		Unchanged: 0/0
  2013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2014 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2015 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2016 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2017 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2018 ;;Total ram usage:        0 bytes
  2019 ;; Hardware stack levels used:    1
  2020 ;; Hardware stack levels required when called:   12
  2021 ;; This function calls:
  2022 ;;		_Set_EW
  2023 ;;		_Set_EW_LT
  2024 ;;		_Set_NS
  2025 ;;		_Set_NS_LT
  2026 ;;		_Wait_N_Seconds
  2027 ;; This function is called by:
  2028 ;;		_main
  2029 ;; This function uses a non-reentrant model
  2030 ;;
  2031                           
  2032                           	psect	text4
  2033  001952                     __ptext4:
  2034                           	opt stack 0
  2035  001952                     _Night_Mode:
  2036                           	opt stack 18
  2037                           
  2038                           ;Lab8.c: 494: MODE = 0;
  2039                           
  2040                           ;incstack = 0
  2041  001952  0E00               	movlw	0
  2042  001954  6E5F               	movwf	_MODE+1,c
  2043  001956  0E00               	movlw	0
  2044  001958  6E5E               	movwf	_MODE,c
  2045                           
  2046                           ;Lab8.c: 495: PORTEbits.RE1 = 0;
  2047  00195A  9284               	bcf	3972,1,c	;volatile
  2048                           
  2049                           ;Lab8.c: 496: Act_Mode_Txt[0] = 'N';
  2050  00195C  0E4E               	movlw	78
  2051  00195E  6E4B               	movwf	_Act_Mode_Txt,c
  2052  001960                     l473:
  2053                           
  2054                           ;Lab8.c: 499: {
  2055                           ;Lab8.c: 500: NS_PED_SW=0;
  2056  001960  0E00               	movlw	0
  2057  001962  6E66               	movwf	_NS_PED_SW,c
  2058                           
  2059                           ;Lab8.c: 501: EW_PED_SW=0;
  2060  001964  0E00               	movlw	0
  2061  001966  6E63               	movwf	_EW_PED_SW,c
  2062                           
  2063                           ;Lab8.c: 502: Set_EW(1);
  2064  001968  0E01               	movlw	1
  2065  00196A  EC0C  F011         	call	_Set_EW
  2066                           
  2067                           ;Lab8.c: 503: Set_EW_LT(1);
  2068  00196E  0E01               	movlw	1
  2069  001970  ECE8  F010         	call	_Set_EW_LT
  2070                           
  2071                           ;Lab8.c: 504: Set_NS_LT(1);
  2072  001974  0E01               	movlw	1
  2073  001976  ECA0  F010         	call	_Set_NS_LT
  2074                           
  2075                           ;Lab8.c: 505: Set_NS(2);
  2076  00197A  0E02               	movlw	2
  2077  00197C  ECC4  F010         	call	_Set_NS
  2078                           
  2079                           ;Lab8.c: 506: Wait_N_Seconds(9);
  2080  001980  0E09               	movlw	9
  2081  001982  EC8C  F011         	call	_Wait_N_Seconds
  2082                           
  2083                           ;Lab8.c: 507: Set_NS(3);
  2084  001986  0E03               	movlw	3
  2085  001988  ECC4  F010         	call	_Set_NS
  2086                           
  2087                           ;Lab8.c: 508: Wait_N_Seconds(3);
  2088  00198C  0E03               	movlw	3
  2089  00198E  EC8C  F011         	call	_Wait_N_Seconds
  2090                           
  2091                           ;Lab8.c: 509: Set_NS(1);
  2092  001992  0E01               	movlw	1
  2093  001994  ECC4  F010         	call	_Set_NS
  2094                           
  2095                           ;Lab8.c: 510: if (PORTAbits.RA4==1)
  2096  001998  A880               	btfss	3968,4,c	;volatile
  2097  00199A  D010               	goto	l5163
  2098                           
  2099                           ;Lab8.c: 511: {
  2100                           ;Lab8.c: 512: Set_EW_LT(2);
  2101  00199C  0E02               	movlw	2
  2102  00199E  ECE8  F010         	call	_Set_EW_LT
  2103                           
  2104                           ;Lab8.c: 513: Wait_N_Seconds(7);
  2105  0019A2  0E07               	movlw	7
  2106  0019A4  EC8C  F011         	call	_Wait_N_Seconds
  2107                           
  2108                           ;Lab8.c: 514: Set_EW_LT(3);
  2109  0019A8  0E03               	movlw	3
  2110  0019AA  ECE8  F010         	call	_Set_EW_LT
  2111                           
  2112                           ;Lab8.c: 515: Wait_N_Seconds(3);
  2113  0019AE  0E03               	movlw	3
  2114  0019B0  EC8C  F011         	call	_Wait_N_Seconds
  2115                           
  2116                           ;Lab8.c: 516: Set_EW_LT(1);
  2117  0019B4  0E01               	movlw	1
  2118  0019B6  ECE8  F010         	call	_Set_EW_LT
  2119  0019BA  D000               	goto	l5163
  2120  0019BC                     l5163:
  2121                           
  2122                           ;Lab8.c: 517: }
  2123                           ;Lab8.c: 518: Set_EW(2);
  2124  0019BC  0E02               	movlw	2
  2125  0019BE  EC0C  F011         	call	_Set_EW
  2126                           
  2127                           ;Lab8.c: 519: Wait_N_Seconds(9);
  2128  0019C2  0E09               	movlw	9
  2129  0019C4  EC8C  F011         	call	_Wait_N_Seconds
  2130                           
  2131                           ;Lab8.c: 520: Set_EW(3);
  2132  0019C8  0E03               	movlw	3
  2133  0019CA  EC0C  F011         	call	_Set_EW
  2134                           
  2135                           ;Lab8.c: 521: Wait_N_Seconds(3);
  2136  0019CE  0E03               	movlw	3
  2137  0019D0  EC8C  F011         	call	_Wait_N_Seconds
  2138                           
  2139                           ;Lab8.c: 522: Set_EW(1);
  2140  0019D4  0E01               	movlw	1
  2141  0019D6  EC0C  F011         	call	_Set_EW
  2142                           
  2143                           ;Lab8.c: 523: if(PORTAbits.RA5==1)
  2144  0019DA  AA80               	btfss	3968,5,c	;volatile
  2145  0019DC  D011               	goto	l478
  2146                           
  2147                           ;Lab8.c: 524: {
  2148                           ;Lab8.c: 525: Set_NS_LT(2);
  2149  0019DE  0E02               	movlw	2
  2150  0019E0  ECA0  F010         	call	_Set_NS_LT
  2151                           
  2152                           ;Lab8.c: 526: Wait_N_Seconds(7);
  2153  0019E4  0E07               	movlw	7
  2154  0019E6  EC8C  F011         	call	_Wait_N_Seconds
  2155                           
  2156                           ;Lab8.c: 527: Set_NS_LT(3);
  2157  0019EA  0E03               	movlw	3
  2158  0019EC  ECA0  F010         	call	_Set_NS_LT
  2159                           
  2160                           ;Lab8.c: 528: Wait_N_Seconds(3);
  2161  0019F0  0E03               	movlw	3
  2162  0019F2  EC8C  F011         	call	_Wait_N_Seconds
  2163                           
  2164                           ;Lab8.c: 529: Set_NS_LT(1);
  2165  0019F6  0E01               	movlw	1
  2166  0019F8  ECA0  F010         	call	_Set_NS_LT
  2167                           
  2168                           ;Lab8.c: 530: }
  2169                           ;Lab8.c: 531: break;
  2170  0019FC  D001               	goto	l478
  2171  0019FE  D7B0               	goto	l473
  2172  001A00                     l478:
  2173  001A00  0012               	return		;funcret
  2174  001A02                     __end_of_Night_Mode:
  2175                           	opt stack 0
  2176                           tblptru	equ	0xFF8
  2177                           tblptrh	equ	0xFF7
  2178                           tblptrl	equ	0xFF6
  2179                           tablat	equ	0xFF5
  2180                           intcon	equ	0xFF2
  2181                           intcon2	equ	0xFF1
  2182                           intcon3	equ	0xFF0
  2183                           postinc0	equ	0xFEE
  2184                           wreg	equ	0xFE8
  2185                           postdec1	equ	0xFE5
  2186                           fsr1l	equ	0xFE1
  2187                           status	equ	0xFD8
  2188                           
  2189 ;; *************** function _Initialize_Screen *****************
  2190 ;; Defined at:
  2191 ;;		line 165 in file "Lab8.c"
  2192 ;; Parameters:    Size  Location     Type
  2193 ;;		None
  2194 ;; Auto vars:     Size  Location     Type
  2195 ;;		None
  2196 ;; Return value:  Size  Location     Type
  2197 ;;		None               void
  2198 ;; Registers used:
  2199 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2200 ;; Tracked objects:
  2201 ;;		On entry : 0/0
  2202 ;;		On exit  : 0/0
  2203 ;;		Unchanged: 0/0
  2204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2205 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2206 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2207 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2208 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2209 ;;Total ram usage:        0 bytes
  2210 ;; Hardware stack levels used:    1
  2211 ;; Hardware stack levels required when called:    9
  2212 ;; This function calls:
  2213 ;;		_LCD_Reset
  2214 ;;		_TFT_GreenTab_Initialize
  2215 ;;		_drawCircle
  2216 ;;		_drawRect
  2217 ;;		_drawtext
  2218 ;;		_fillCircle
  2219 ;;		_fillScreen
  2220 ;;		_strcpy
  2221 ;; This function is called by:
  2222 ;;		_main
  2223 ;; This function uses a non-reentrant model
  2224 ;;
  2225                           
  2226                           	psect	text5
  2227  00001C                     __ptext5:
  2228                           	opt stack 0
  2229  00001C                     _Initialize_Screen:
  2230                           	opt stack 21
  2231                           
  2232                           ;Lab8.c: 167: LCD_Reset();
  2233                           
  2234                           ;incstack = 0
  2235  00001C  EC7D  F012         	call	_LCD_Reset	;wreg free
  2236                           
  2237                           ;Lab8.c: 168: TFT_GreenTab_Initialize();
  2238  000020  ECEE  F011         	call	_TFT_GreenTab_Initialize	;wreg free
  2239                           
  2240                           ;Lab8.c: 169: fillScreen(0x0000);
  2241  000024  0E00               	movlw	0
  2242  000026  6E23               	movwf	fillScreen@color+1,c
  2243  000028  0E00               	movlw	0
  2244  00002A  6E22               	movwf	fillScreen@color,c
  2245  00002C  EC2A  F012         	call	_fillScreen	;wreg free
  2246                           
  2247                           ;Lab8.c: 172: txt = buffer;
  2248  000030  0E88               	movlw	low _buffer
  2249  000032  6E60               	movwf	_txt,c
  2250  000034  0E00               	movlw	high _buffer
  2251  000036  6E61               	movwf	_txt+1,c
  2252                           
  2253                           ;Lab8.c: 173: strcpy(txt, "ECE3301L Fall 21-S4");
  2254  000038  C060  F00F         	movff	_txt,strcpy@to
  2255  00003C  C061  F010         	movff	_txt+1,strcpy@to+1
  2256  000040  0EAD               	movlw	low STR_1
  2257  000042  6E11               	movwf	strcpy@from,c
  2258  000044  0EFF               	movlw	high STR_1
  2259  000046  6E12               	movwf	strcpy@from+1,c
  2260  000048  ECA8  F011         	call	_strcpy	;wreg free
  2261                           
  2262                           ;Lab8.c: 174: drawtext(2, 2, txt, 0xFFFF, 0x0000, 1);
  2263  00004C  0E02               	movlw	2
  2264  00004E  6E37               	movwf	drawtext@y,c
  2265  000050  C060  F038         	movff	_txt,drawtext@_text
  2266  000054  C061  F039         	movff	_txt+1,drawtext@_text+1
  2267  000058  0EFF               	movlw	255
  2268  00005A  6E3B               	movwf	drawtext@color+1,c
  2269  00005C  683A               	setf	drawtext@color,c
  2270  00005E  0E00               	movlw	0
  2271  000060  6E3D               	movwf	drawtext@bg+1,c
  2272  000062  0E00               	movlw	0
  2273  000064  6E3C               	movwf	drawtext@bg,c
  2274  000066  0E01               	movlw	1
  2275  000068  6E3E               	movwf	drawtext@size,c
  2276  00006A  0E02               	movlw	2
  2277  00006C  EC9A  F009         	call	_drawtext
  2278                           
  2279                           ;Lab8.c: 177: strcpy(txt, "Mode:");
  2280  000070  C060  F00F         	movff	_txt,strcpy@to
  2281  000074  C061  F010         	movff	_txt+1,strcpy@to+1
  2282  000078  0EE5               	movlw	low STR_2
  2283  00007A  6E11               	movwf	strcpy@from,c
  2284  00007C  0EFF               	movlw	high STR_2
  2285  00007E  6E12               	movwf	strcpy@from+1,c
  2286  000080  ECA8  F011         	call	_strcpy	;wreg free
  2287                           
  2288                           ;Lab8.c: 178: drawtext(2, 10, txt, 0xFFFF, 0x0000, 1);
  2289  000084  0E0A               	movlw	10
  2290  000086  6E37               	movwf	drawtext@y,c
  2291  000088  C060  F038         	movff	_txt,drawtext@_text
  2292  00008C  C061  F039         	movff	_txt+1,drawtext@_text+1
  2293  000090  0EFF               	movlw	255
  2294  000092  6E3B               	movwf	drawtext@color+1,c
  2295  000094  683A               	setf	drawtext@color,c
  2296  000096  0E00               	movlw	0
  2297  000098  6E3D               	movwf	drawtext@bg+1,c
  2298  00009A  0E00               	movlw	0
  2299  00009C  6E3C               	movwf	drawtext@bg,c
  2300  00009E  0E01               	movlw	1
  2301  0000A0  6E3E               	movwf	drawtext@size,c
  2302  0000A2  0E02               	movlw	2
  2303  0000A4  EC9A  F009         	call	_drawtext
  2304                           
  2305                           ;Lab8.c: 179: drawtext(35,10, Act_Mode_Txt, 0xFFFF, 0x0000, 1);
  2306  0000A8  0E0A               	movlw	10
  2307  0000AA  6E37               	movwf	drawtext@y,c
  2308  0000AC  0E4B               	movlw	low _Act_Mode_Txt
  2309  0000AE  6E38               	movwf	drawtext@_text,c
  2310  0000B0  0E00               	movlw	high _Act_Mode_Txt
  2311  0000B2  6E39               	movwf	drawtext@_text+1,c
  2312  0000B4  0EFF               	movlw	255
  2313  0000B6  6E3B               	movwf	drawtext@color+1,c
  2314  0000B8  683A               	setf	drawtext@color,c
  2315  0000BA  0E00               	movlw	0
  2316  0000BC  6E3D               	movwf	drawtext@bg+1,c
  2317  0000BE  0E00               	movlw	0
  2318  0000C0  6E3C               	movwf	drawtext@bg,c
  2319  0000C2  0E01               	movlw	1
  2320  0000C4  6E3E               	movwf	drawtext@size,c
  2321  0000C6  0E23               	movlw	35
  2322  0000C8  EC9A  F009         	call	_drawtext
  2323                           
  2324                           ;Lab8.c: 182: strcpy(txt, "FR:");
  2325  0000CC  C060  F00F         	movff	_txt,strcpy@to
  2326  0000D0  C061  F010         	movff	_txt+1,strcpy@to+1
  2327  0000D4  0EEB               	movlw	low STR_3
  2328  0000D6  6E11               	movwf	strcpy@from,c
  2329  0000D8  0EFF               	movlw	high STR_3
  2330  0000DA  6E12               	movwf	strcpy@from+1,c
  2331  0000DC  ECA8  F011         	call	_strcpy	;wreg free
  2332                           
  2333                           ;Lab8.c: 183: drawtext(50, 10, txt, 0xFFFF, 0x0000, 1);
  2334  0000E0  0E0A               	movlw	10
  2335  0000E2  6E37               	movwf	drawtext@y,c
  2336  0000E4  C060  F038         	movff	_txt,drawtext@_text
  2337  0000E8  C061  F039         	movff	_txt+1,drawtext@_text+1
  2338  0000EC  0EFF               	movlw	255
  2339  0000EE  6E3B               	movwf	drawtext@color+1,c
  2340  0000F0  683A               	setf	drawtext@color,c
  2341  0000F2  0E00               	movlw	0
  2342  0000F4  6E3D               	movwf	drawtext@bg+1,c
  2343  0000F6  0E00               	movlw	0
  2344  0000F8  6E3C               	movwf	drawtext@bg,c
  2345  0000FA  0E01               	movlw	1
  2346  0000FC  6E3E               	movwf	drawtext@size,c
  2347  0000FE  0E32               	movlw	50
  2348  000100  EC9A  F009         	call	_drawtext
  2349                           
  2350                           ;Lab8.c: 184: drawtext(70, 10, FlashingR_Txt, 0xFFFF, 0x0000, 1);
  2351  000104  0E0A               	movlw	10
  2352  000106  6E37               	movwf	drawtext@y,c
  2353  000108  0E4D               	movlw	low _FlashingR_Txt
  2354  00010A  6E38               	movwf	drawtext@_text,c
  2355  00010C  0E00               	movlw	high _FlashingR_Txt
  2356  00010E  6E39               	movwf	drawtext@_text+1,c
  2357  000110  0EFF               	movlw	255
  2358  000112  6E3B               	movwf	drawtext@color+1,c
  2359  000114  683A               	setf	drawtext@color,c
  2360  000116  0E00               	movlw	0
  2361  000118  6E3D               	movwf	drawtext@bg+1,c
  2362  00011A  0E00               	movlw	0
  2363  00011C  6E3C               	movwf	drawtext@bg,c
  2364  00011E  0E01               	movlw	1
  2365  000120  6E3E               	movwf	drawtext@size,c
  2366  000122  0E46               	movlw	70
  2367  000124  EC9A  F009         	call	_drawtext
  2368                           
  2369                           ;Lab8.c: 187: strcpy(txt, "FS:");
  2370  000128  C060  F00F         	movff	_txt,strcpy@to
  2371  00012C  C061  F010         	movff	_txt+1,strcpy@to+1
  2372  000130  0EEF               	movlw	low STR_4
  2373  000132  6E11               	movwf	strcpy@from,c
  2374  000134  0EFF               	movlw	high STR_4
  2375  000136  6E12               	movwf	strcpy@from+1,c
  2376  000138  ECA8  F011         	call	_strcpy	;wreg free
  2377                           
  2378                           ;Lab8.c: 188: drawtext(80, 10, txt, 0xFFFF, 0x0000, 1);
  2379  00013C  0E0A               	movlw	10
  2380  00013E  6E37               	movwf	drawtext@y,c
  2381  000140  C060  F038         	movff	_txt,drawtext@_text
  2382  000144  C061  F039         	movff	_txt+1,drawtext@_text+1
  2383  000148  0EFF               	movlw	255
  2384  00014A  6E3B               	movwf	drawtext@color+1,c
  2385  00014C  683A               	setf	drawtext@color,c
  2386  00014E  0E00               	movlw	0
  2387  000150  6E3D               	movwf	drawtext@bg+1,c
  2388  000152  0E00               	movlw	0
  2389  000154  6E3C               	movwf	drawtext@bg,c
  2390  000156  0E01               	movlw	1
  2391  000158  6E3E               	movwf	drawtext@size,c
  2392  00015A  0E50               	movlw	80
  2393  00015C  EC9A  F009         	call	_drawtext
  2394                           
  2395                           ;Lab8.c: 189: drawtext(100, 10, FlashingS_Txt, 0xFFFF, 0x0000, 1);
  2396  000160  0E0A               	movlw	10
  2397  000162  6E37               	movwf	drawtext@y,c
  2398  000164  0E4F               	movlw	low _FlashingS_Txt
  2399  000166  6E38               	movwf	drawtext@_text,c
  2400  000168  0E00               	movlw	high _FlashingS_Txt
  2401  00016A  6E39               	movwf	drawtext@_text+1,c
  2402  00016C  0EFF               	movlw	255
  2403  00016E  6E3B               	movwf	drawtext@color+1,c
  2404  000170  683A               	setf	drawtext@color,c
  2405  000172  0E00               	movlw	0
  2406  000174  6E3D               	movwf	drawtext@bg+1,c
  2407  000176  0E00               	movlw	0
  2408  000178  6E3C               	movwf	drawtext@bg,c
  2409  00017A  0E01               	movlw	1
  2410  00017C  6E3E               	movwf	drawtext@size,c
  2411  00017E  0E64               	movlw	100
  2412  000180  EC9A  F009         	call	_drawtext
  2413                           
  2414                           ;Lab8.c: 192: strcpy(txt, "*");
  2415  000184  C060  F00F         	movff	_txt,strcpy@to
  2416  000188  C061  F010         	movff	_txt+1,strcpy@to+1
  2417  00018C  0EFD               	movlw	low STR_5
  2418  00018E  6E11               	movwf	strcpy@from,c
  2419  000190  0EFF               	movlw	high STR_5
  2420  000192  6E12               	movwf	strcpy@from+1,c
  2421  000194  ECA8  F011         	call	_strcpy	;wreg free
  2422                           
  2423                           ;Lab8.c: 193: drawtext(120, 10, txt, 0xFFFF, 0x0000, 1);
  2424  000198  0E0A               	movlw	10
  2425  00019A  6E37               	movwf	drawtext@y,c
  2426  00019C  C060  F038         	movff	_txt,drawtext@_text
  2427  0001A0  C061  F039         	movff	_txt+1,drawtext@_text+1
  2428  0001A4  0EFF               	movlw	255
  2429  0001A6  6E3B               	movwf	drawtext@color+1,c
  2430  0001A8  683A               	setf	drawtext@color,c
  2431  0001AA  0E00               	movlw	0
  2432  0001AC  6E3D               	movwf	drawtext@bg+1,c
  2433  0001AE  0E00               	movlw	0
  2434  0001B0  6E3C               	movwf	drawtext@bg,c
  2435  0001B2  0E01               	movlw	1
  2436  0001B4  6E3E               	movwf	drawtext@size,c
  2437  0001B6  0E78               	movlw	120
  2438  0001B8  EC9A  F009         	call	_drawtext
  2439                           
  2440                           ;Lab8.c: 196: strcpy(txt, "EAST/WEST");
  2441  0001BC  C060  F00F         	movff	_txt,strcpy@to
  2442  0001C0  C061  F010         	movff	_txt+1,strcpy@to+1
  2443  0001C4  0ECD               	movlw	low STR_6
  2444  0001C6  6E11               	movwf	strcpy@from,c
  2445  0001C8  0EFF               	movlw	high STR_6
  2446  0001CA  6E12               	movwf	strcpy@from+1,c
  2447  0001CC  ECA8  F011         	call	_strcpy	;wreg free
  2448                           
  2449                           ;Lab8.c: 197: drawtext (30, 20, txt, 0x07FF, 0x0000, 1);
  2450  0001D0  0E14               	movlw	20
  2451  0001D2  6E37               	movwf	drawtext@y,c
  2452  0001D4  C060  F038         	movff	_txt,drawtext@_text
  2453  0001D8  C061  F039         	movff	_txt+1,drawtext@_text+1
  2454  0001DC  0E07               	movlw	7
  2455  0001DE  6E3B               	movwf	drawtext@color+1,c
  2456  0001E0  683A               	setf	drawtext@color,c
  2457  0001E2  0E00               	movlw	0
  2458  0001E4  6E3D               	movwf	drawtext@bg+1,c
  2459  0001E6  0E00               	movlw	0
  2460  0001E8  6E3C               	movwf	drawtext@bg,c
  2461  0001EA  0E01               	movlw	1
  2462  0001EC  6E3E               	movwf	drawtext@size,c
  2463  0001EE  0E1E               	movlw	30
  2464  0001F0  EC9A  F009         	call	_drawtext
  2465                           
  2466                           ;Lab8.c: 198: drawRect (30, 20 + 15-8, 60, 18, 0x07FF);
  2467  0001F4  0E00               	movlw	0
  2468  0001F6  6E22               	movwf	drawRect@x+1,c
  2469  0001F8  0E1E               	movlw	30
  2470  0001FA  6E21               	movwf	drawRect@x,c
  2471  0001FC  0E00               	movlw	0
  2472  0001FE  6E24               	movwf	drawRect@y+1,c
  2473  000200  0E1B               	movlw	27
  2474  000202  6E23               	movwf	drawRect@y,c
  2475  000204  0E00               	movlw	0
  2476  000206  6E26               	movwf	drawRect@w+1,c
  2477  000208  0E3C               	movlw	60
  2478  00020A  6E25               	movwf	drawRect@w,c
  2479  00020C  0E00               	movlw	0
  2480  00020E  6E28               	movwf	drawRect@h+1,c
  2481  000210  0E12               	movlw	18
  2482  000212  6E27               	movwf	drawRect@h,c
  2483  000214  0E07               	movlw	7
  2484  000216  6E2A               	movwf	drawRect@color+1,c
  2485  000218  6829               	setf	drawRect@color,c
  2486  00021A  EC71  F00F         	call	_drawRect	;wreg free
  2487                           
  2488                           ;Lab8.c: 199: drawCircle(40, 20 + 15, 7, 0xF800);
  2489  00021E  0E00               	movlw	0
  2490  000220  6E1B               	movwf	drawCircle@x0+1,c
  2491  000222  0E28               	movlw	40
  2492  000224  6E1A               	movwf	drawCircle@x0,c
  2493  000226  0E00               	movlw	0
  2494  000228  6E1D               	movwf	drawCircle@y0+1,c
  2495  00022A  0E23               	movlw	35
  2496  00022C  6E1C               	movwf	drawCircle@y0,c
  2497  00022E  0E00               	movlw	0
  2498  000230  6E1F               	movwf	drawCircle@r+1,c
  2499  000232  0E07               	movlw	7
  2500  000234  6E1E               	movwf	drawCircle@r,c
  2501  000236  0EF8               	movlw	248
  2502  000238  6E21               	movwf	drawCircle@color+1,c
  2503  00023A  0E00               	movlw	0
  2504  00023C  6E20               	movwf	drawCircle@color,c
  2505  00023E  EC31  F006         	call	_drawCircle	;wreg free
  2506                           
  2507                           ;Lab8.c: 200: drawCircle(60, 20 + 15, 7, 0xFFE0);
  2508  000242  0E00               	movlw	0
  2509  000244  6E1B               	movwf	drawCircle@x0+1,c
  2510  000246  0E3C               	movlw	60
  2511  000248  6E1A               	movwf	drawCircle@x0,c
  2512  00024A  0E00               	movlw	0
  2513  00024C  6E1D               	movwf	drawCircle@y0+1,c
  2514  00024E  0E23               	movlw	35
  2515  000250  6E1C               	movwf	drawCircle@y0,c
  2516  000252  0E00               	movlw	0
  2517  000254  6E1F               	movwf	drawCircle@r+1,c
  2518  000256  0E07               	movlw	7
  2519  000258  6E1E               	movwf	drawCircle@r,c
  2520  00025A  0EFF               	movlw	255
  2521  00025C  6E21               	movwf	drawCircle@color+1,c
  2522  00025E  0EE0               	movlw	224
  2523  000260  6E20               	movwf	drawCircle@color,c
  2524  000262  EC31  F006         	call	_drawCircle	;wreg free
  2525                           
  2526                           ;Lab8.c: 201: fillCircle(80, 20 + 15, 7, 0x07E0);
  2527  000266  0E00               	movlw	0
  2528  000268  6E3A               	movwf	fillCircle@x0+1,c
  2529  00026A  0E50               	movlw	80
  2530  00026C  6E39               	movwf	fillCircle@x0,c
  2531  00026E  0E00               	movlw	0
  2532  000270  6E3C               	movwf	fillCircle@y0+1,c
  2533  000272  0E23               	movlw	35
  2534  000274  6E3B               	movwf	fillCircle@y0,c
  2535  000276  0E00               	movlw	0
  2536  000278  6E3E               	movwf	fillCircle@r+1,c
  2537  00027A  0E07               	movlw	7
  2538  00027C  6E3D               	movwf	fillCircle@r,c
  2539  00027E  0E07               	movlw	7
  2540  000280  6E40               	movwf	fillCircle@color+1,c
  2541  000282  0EE0               	movlw	224
  2542  000284  6E3F               	movwf	fillCircle@color,c
  2543  000286  EC2B  F010         	call	_fillCircle	;wreg free
  2544                           
  2545                           ;Lab8.c: 202: drawtext (100, 20 + 10, EW_Count, 0x07FF, 0x0000, 2);
  2546  00028A  0E1E               	movlw	30
  2547  00028C  6E37               	movwf	drawtext@y,c
  2548  00028E  0E45               	movlw	low _EW_Count
  2549  000290  6E38               	movwf	drawtext@_text,c
  2550  000292  0E00               	movlw	high _EW_Count
  2551  000294  6E39               	movwf	drawtext@_text+1,c
  2552  000296  0E07               	movlw	7
  2553  000298  6E3B               	movwf	drawtext@color+1,c
  2554  00029A  683A               	setf	drawtext@color,c
  2555  00029C  0E00               	movlw	0
  2556  00029E  6E3D               	movwf	drawtext@bg+1,c
  2557  0002A0  0E00               	movlw	0
  2558  0002A2  6E3C               	movwf	drawtext@bg,c
  2559  0002A4  0E02               	movlw	2
  2560  0002A6  6E3E               	movwf	drawtext@size,c
  2561  0002A8  0E64               	movlw	100
  2562  0002AA  EC9A  F009         	call	_drawtext
  2563                           
  2564                           ;Lab8.c: 206: strcpy(txt, "E/W LT");
  2565  0002AE  C060  F00F         	movff	_txt,strcpy@to
  2566  0002B2  C061  F010         	movff	_txt+1,strcpy@to+1
  2567  0002B6  0EDE               	movlw	low STR_7
  2568  0002B8  6E11               	movwf	strcpy@from,c
  2569  0002BA  0EFF               	movlw	high STR_7
  2570  0002BC  6E12               	movwf	strcpy@from+1,c
  2571  0002BE  ECA8  F011         	call	_strcpy	;wreg free
  2572                           
  2573                           ;Lab8.c: 207: drawtext (30, 50, txt, 0xFFFF, 0x0000, 1);
  2574  0002C2  0E32               	movlw	50
  2575  0002C4  6E37               	movwf	drawtext@y,c
  2576  0002C6  C060  F038         	movff	_txt,drawtext@_text
  2577  0002CA  C061  F039         	movff	_txt+1,drawtext@_text+1
  2578  0002CE  0EFF               	movlw	255
  2579  0002D0  6E3B               	movwf	drawtext@color+1,c
  2580  0002D2  683A               	setf	drawtext@color,c
  2581  0002D4  0E00               	movlw	0
  2582  0002D6  6E3D               	movwf	drawtext@bg+1,c
  2583  0002D8  0E00               	movlw	0
  2584  0002DA  6E3C               	movwf	drawtext@bg,c
  2585  0002DC  0E01               	movlw	1
  2586  0002DE  6E3E               	movwf	drawtext@size,c
  2587  0002E0  0E1E               	movlw	30
  2588  0002E2  EC9A  F009         	call	_drawtext
  2589                           
  2590                           ;Lab8.c: 208: drawRect (30, 50 + 15-8, 60, 18, 0xFFFF);
  2591  0002E6  0E00               	movlw	0
  2592  0002E8  6E22               	movwf	drawRect@x+1,c
  2593  0002EA  0E1E               	movlw	30
  2594  0002EC  6E21               	movwf	drawRect@x,c
  2595  0002EE  0E00               	movlw	0
  2596  0002F0  6E24               	movwf	drawRect@y+1,c
  2597  0002F2  0E39               	movlw	57
  2598  0002F4  6E23               	movwf	drawRect@y,c
  2599  0002F6  0E00               	movlw	0
  2600  0002F8  6E26               	movwf	drawRect@w+1,c
  2601  0002FA  0E3C               	movlw	60
  2602  0002FC  6E25               	movwf	drawRect@w,c
  2603  0002FE  0E00               	movlw	0
  2604  000300  6E28               	movwf	drawRect@h+1,c
  2605  000302  0E12               	movlw	18
  2606  000304  6E27               	movwf	drawRect@h,c
  2607  000306  0EFF               	movlw	255
  2608  000308  6E2A               	movwf	drawRect@color+1,c
  2609  00030A  6829               	setf	drawRect@color,c
  2610  00030C  EC71  F00F         	call	_drawRect	;wreg free
  2611                           
  2612                           ;Lab8.c: 209: fillCircle(40, 50 + 15, 7, 0xF800);
  2613  000310  0E00               	movlw	0
  2614  000312  6E3A               	movwf	fillCircle@x0+1,c
  2615  000314  0E28               	movlw	40
  2616  000316  6E39               	movwf	fillCircle@x0,c
  2617  000318  0E00               	movlw	0
  2618  00031A  6E3C               	movwf	fillCircle@y0+1,c
  2619  00031C  0E41               	movlw	65
  2620  00031E  6E3B               	movwf	fillCircle@y0,c
  2621  000320  0E00               	movlw	0
  2622  000322  6E3E               	movwf	fillCircle@r+1,c
  2623  000324  0E07               	movlw	7
  2624  000326  6E3D               	movwf	fillCircle@r,c
  2625  000328  0EF8               	movlw	248
  2626  00032A  6E40               	movwf	fillCircle@color+1,c
  2627  00032C  0E00               	movlw	0
  2628  00032E  6E3F               	movwf	fillCircle@color,c
  2629  000330  EC2B  F010         	call	_fillCircle	;wreg free
  2630                           
  2631                           ;Lab8.c: 210: drawCircle(60, 50 + 15, 7, 0xFFE0);
  2632  000334  0E00               	movlw	0
  2633  000336  6E1B               	movwf	drawCircle@x0+1,c
  2634  000338  0E3C               	movlw	60
  2635  00033A  6E1A               	movwf	drawCircle@x0,c
  2636  00033C  0E00               	movlw	0
  2637  00033E  6E1D               	movwf	drawCircle@y0+1,c
  2638  000340  0E41               	movlw	65
  2639  000342  6E1C               	movwf	drawCircle@y0,c
  2640  000344  0E00               	movlw	0
  2641  000346  6E1F               	movwf	drawCircle@r+1,c
  2642  000348  0E07               	movlw	7
  2643  00034A  6E1E               	movwf	drawCircle@r,c
  2644  00034C  0EFF               	movlw	255
  2645  00034E  6E21               	movwf	drawCircle@color+1,c
  2646  000350  0EE0               	movlw	224
  2647  000352  6E20               	movwf	drawCircle@color,c
  2648  000354  EC31  F006         	call	_drawCircle	;wreg free
  2649                           
  2650                           ;Lab8.c: 211: drawCircle(80, 50 + 15, 7, 0x07E0);
  2651  000358  0E00               	movlw	0
  2652  00035A  6E1B               	movwf	drawCircle@x0+1,c
  2653  00035C  0E50               	movlw	80
  2654  00035E  6E1A               	movwf	drawCircle@x0,c
  2655  000360  0E00               	movlw	0
  2656  000362  6E1D               	movwf	drawCircle@y0+1,c
  2657  000364  0E41               	movlw	65
  2658  000366  6E1C               	movwf	drawCircle@y0,c
  2659  000368  0E00               	movlw	0
  2660  00036A  6E1F               	movwf	drawCircle@r+1,c
  2661  00036C  0E07               	movlw	7
  2662  00036E  6E1E               	movwf	drawCircle@r,c
  2663  000370  0E07               	movlw	7
  2664  000372  6E21               	movwf	drawCircle@color+1,c
  2665  000374  0EE0               	movlw	224
  2666  000376  6E20               	movwf	drawCircle@color,c
  2667  000378  EC31  F006         	call	_drawCircle	;wreg free
  2668                           
  2669                           ;Lab8.c: 212: drawtext (100, 50 + 10, EWLT_Count, 0xFFFF, 0x0000, 2);
  2670  00037C  0E3C               	movlw	60
  2671  00037E  6E37               	movwf	drawtext@y,c
  2672  000380  0E42               	movlw	low _EWLT_Count
  2673  000382  6E38               	movwf	drawtext@_text,c
  2674  000384  0E00               	movlw	high _EWLT_Count
  2675  000386  6E39               	movwf	drawtext@_text+1,c
  2676  000388  0EFF               	movlw	255
  2677  00038A  6E3B               	movwf	drawtext@color+1,c
  2678  00038C  683A               	setf	drawtext@color,c
  2679  00038E  0E00               	movlw	0
  2680  000390  6E3D               	movwf	drawtext@bg+1,c
  2681  000392  0E00               	movlw	0
  2682  000394  6E3C               	movwf	drawtext@bg,c
  2683  000396  0E02               	movlw	2
  2684  000398  6E3E               	movwf	drawtext@size,c
  2685  00039A  0E64               	movlw	100
  2686  00039C  EC9A  F009         	call	_drawtext
  2687                           
  2688                           ;Lab8.c: 215: strcpy(txt, "NORTH/SOUTH");
  2689  0003A0  C060  F00F         	movff	_txt,strcpy@to
  2690  0003A4  C061  F010         	movff	_txt+1,strcpy@to+1
  2691  0003A8  0EC1               	movlw	low STR_8
  2692  0003AA  6E11               	movwf	strcpy@from,c
  2693  0003AC  0EFF               	movlw	high STR_8
  2694  0003AE  6E12               	movwf	strcpy@from+1,c
  2695  0003B0  ECA8  F011         	call	_strcpy	;wreg free
  2696                           
  2697                           ;Lab8.c: 216: drawtext (30, 80 , txt, 0x001F, 0x0000, 1);
  2698  0003B4  0E50               	movlw	80
  2699  0003B6  6E37               	movwf	drawtext@y,c
  2700  0003B8  C060  F038         	movff	_txt,drawtext@_text
  2701  0003BC  C061  F039         	movff	_txt+1,drawtext@_text+1
  2702  0003C0  0E00               	movlw	0
  2703  0003C2  6E3B               	movwf	drawtext@color+1,c
  2704  0003C4  0E1F               	movlw	31
  2705  0003C6  6E3A               	movwf	drawtext@color,c
  2706  0003C8  0E00               	movlw	0
  2707  0003CA  6E3D               	movwf	drawtext@bg+1,c
  2708  0003CC  0E00               	movlw	0
  2709  0003CE  6E3C               	movwf	drawtext@bg,c
  2710  0003D0  0E01               	movlw	1
  2711  0003D2  6E3E               	movwf	drawtext@size,c
  2712  0003D4  0E1E               	movlw	30
  2713  0003D6  EC9A  F009         	call	_drawtext
  2714                           
  2715                           ;Lab8.c: 217: drawRect (30, 80 + 15-8, 60, 18, 0x001F);
  2716  0003DA  0E00               	movlw	0
  2717  0003DC  6E22               	movwf	drawRect@x+1,c
  2718  0003DE  0E1E               	movlw	30
  2719  0003E0  6E21               	movwf	drawRect@x,c
  2720  0003E2  0E00               	movlw	0
  2721  0003E4  6E24               	movwf	drawRect@y+1,c
  2722  0003E6  0E57               	movlw	87
  2723  0003E8  6E23               	movwf	drawRect@y,c
  2724  0003EA  0E00               	movlw	0
  2725  0003EC  6E26               	movwf	drawRect@w+1,c
  2726  0003EE  0E3C               	movlw	60
  2727  0003F0  6E25               	movwf	drawRect@w,c
  2728  0003F2  0E00               	movlw	0
  2729  0003F4  6E28               	movwf	drawRect@h+1,c
  2730  0003F6  0E12               	movlw	18
  2731  0003F8  6E27               	movwf	drawRect@h,c
  2732  0003FA  0E00               	movlw	0
  2733  0003FC  6E2A               	movwf	drawRect@color+1,c
  2734  0003FE  0E1F               	movlw	31
  2735  000400  6E29               	movwf	drawRect@color,c
  2736  000402  EC71  F00F         	call	_drawRect	;wreg free
  2737                           
  2738                           ;Lab8.c: 218: fillCircle(40, 80 + 15 , 7, 0xF800);
  2739  000406  0E00               	movlw	0
  2740  000408  6E3A               	movwf	fillCircle@x0+1,c
  2741  00040A  0E28               	movlw	40
  2742  00040C  6E39               	movwf	fillCircle@x0,c
  2743  00040E  0E00               	movlw	0
  2744  000410  6E3C               	movwf	fillCircle@y0+1,c
  2745  000412  0E5F               	movlw	95
  2746  000414  6E3B               	movwf	fillCircle@y0,c
  2747  000416  0E00               	movlw	0
  2748  000418  6E3E               	movwf	fillCircle@r+1,c
  2749  00041A  0E07               	movlw	7
  2750  00041C  6E3D               	movwf	fillCircle@r,c
  2751  00041E  0EF8               	movlw	248
  2752  000420  6E40               	movwf	fillCircle@color+1,c
  2753  000422  0E00               	movlw	0
  2754  000424  6E3F               	movwf	fillCircle@color,c
  2755  000426  EC2B  F010         	call	_fillCircle	;wreg free
  2756                           
  2757                           ;Lab8.c: 219: drawCircle(60, 80 + 15 , 7, 0xFFE0);
  2758  00042A  0E00               	movlw	0
  2759  00042C  6E1B               	movwf	drawCircle@x0+1,c
  2760  00042E  0E3C               	movlw	60
  2761  000430  6E1A               	movwf	drawCircle@x0,c
  2762  000432  0E00               	movlw	0
  2763  000434  6E1D               	movwf	drawCircle@y0+1,c
  2764  000436  0E5F               	movlw	95
  2765  000438  6E1C               	movwf	drawCircle@y0,c
  2766  00043A  0E00               	movlw	0
  2767  00043C  6E1F               	movwf	drawCircle@r+1,c
  2768  00043E  0E07               	movlw	7
  2769  000440  6E1E               	movwf	drawCircle@r,c
  2770  000442  0EFF               	movlw	255
  2771  000444  6E21               	movwf	drawCircle@color+1,c
  2772  000446  0EE0               	movlw	224
  2773  000448  6E20               	movwf	drawCircle@color,c
  2774  00044A  EC31  F006         	call	_drawCircle	;wreg free
  2775                           
  2776                           ;Lab8.c: 220: drawCircle(80, 80 + 15 , 7, 0x07E0);
  2777  00044E  0E00               	movlw	0
  2778  000450  6E1B               	movwf	drawCircle@x0+1,c
  2779  000452  0E50               	movlw	80
  2780  000454  6E1A               	movwf	drawCircle@x0,c
  2781  000456  0E00               	movlw	0
  2782  000458  6E1D               	movwf	drawCircle@y0+1,c
  2783  00045A  0E5F               	movlw	95
  2784  00045C  6E1C               	movwf	drawCircle@y0,c
  2785  00045E  0E00               	movlw	0
  2786  000460  6E1F               	movwf	drawCircle@r+1,c
  2787  000462  0E07               	movlw	7
  2788  000464  6E1E               	movwf	drawCircle@r,c
  2789  000466  0E07               	movlw	7
  2790  000468  6E21               	movwf	drawCircle@color+1,c
  2791  00046A  0EE0               	movlw	224
  2792  00046C  6E20               	movwf	drawCircle@color,c
  2793  00046E  EC31  F006         	call	_drawCircle	;wreg free
  2794                           
  2795                           ;Lab8.c: 221: drawtext (100, 80 + 10, NS_Count, 0x001F, 0x0000, 2);
  2796  000472  0E5A               	movlw	90
  2797  000474  6E37               	movwf	drawtext@y,c
  2798  000476  0E48               	movlw	low _NS_Count
  2799  000478  6E38               	movwf	drawtext@_text,c
  2800  00047A  0E00               	movlw	high _NS_Count
  2801  00047C  6E39               	movwf	drawtext@_text+1,c
  2802  00047E  0E00               	movlw	0
  2803  000480  6E3B               	movwf	drawtext@color+1,c
  2804  000482  0E1F               	movlw	31
  2805  000484  6E3A               	movwf	drawtext@color,c
  2806  000486  0E00               	movlw	0
  2807  000488  6E3D               	movwf	drawtext@bg+1,c
  2808  00048A  0E00               	movlw	0
  2809  00048C  6E3C               	movwf	drawtext@bg,c
  2810  00048E  0E02               	movlw	2
  2811  000490  6E3E               	movwf	drawtext@size,c
  2812  000492  0E64               	movlw	100
  2813  000494  EC9A  F009         	call	_drawtext
  2814                           
  2815                           ;Lab8.c: 224: strcpy(txt, "N/S LT");
  2816  000498  C060  F00F         	movff	_txt,strcpy@to
  2817  00049C  C061  F010         	movff	_txt+1,strcpy@to+1
  2818  0004A0  0ED7               	movlw	low STR_9
  2819  0004A2  6E11               	movwf	strcpy@from,c
  2820  0004A4  0EFF               	movlw	high STR_9
  2821  0004A6  6E12               	movwf	strcpy@from+1,c
  2822  0004A8  ECA8  F011         	call	_strcpy	;wreg free
  2823                           
  2824                           ;Lab8.c: 225: drawtext (30, 110, txt, 0xF81F, 0x0000, 1);
  2825  0004AC  0E6E               	movlw	110
  2826  0004AE  6E37               	movwf	drawtext@y,c
  2827  0004B0  C060  F038         	movff	_txt,drawtext@_text
  2828  0004B4  C061  F039         	movff	_txt+1,drawtext@_text+1
  2829  0004B8  0EF8               	movlw	248
  2830  0004BA  6E3B               	movwf	drawtext@color+1,c
  2831  0004BC  0E1F               	movlw	31
  2832  0004BE  6E3A               	movwf	drawtext@color,c
  2833  0004C0  0E00               	movlw	0
  2834  0004C2  6E3D               	movwf	drawtext@bg+1,c
  2835  0004C4  0E00               	movlw	0
  2836  0004C6  6E3C               	movwf	drawtext@bg,c
  2837  0004C8  0E01               	movlw	1
  2838  0004CA  6E3E               	movwf	drawtext@size,c
  2839  0004CC  0E1E               	movlw	30
  2840  0004CE  EC9A  F009         	call	_drawtext
  2841                           
  2842                           ;Lab8.c: 226: drawRect (30, 110 + 15-8, 60, 18, 0xF81F);
  2843  0004D2  0E00               	movlw	0
  2844  0004D4  6E22               	movwf	drawRect@x+1,c
  2845  0004D6  0E1E               	movlw	30
  2846  0004D8  6E21               	movwf	drawRect@x,c
  2847  0004DA  0E00               	movlw	0
  2848  0004DC  6E24               	movwf	drawRect@y+1,c
  2849  0004DE  0E75               	movlw	117
  2850  0004E0  6E23               	movwf	drawRect@y,c
  2851  0004E2  0E00               	movlw	0
  2852  0004E4  6E26               	movwf	drawRect@w+1,c
  2853  0004E6  0E3C               	movlw	60
  2854  0004E8  6E25               	movwf	drawRect@w,c
  2855  0004EA  0E00               	movlw	0
  2856  0004EC  6E28               	movwf	drawRect@h+1,c
  2857  0004EE  0E12               	movlw	18
  2858  0004F0  6E27               	movwf	drawRect@h,c
  2859  0004F2  0EF8               	movlw	248
  2860  0004F4  6E2A               	movwf	drawRect@color+1,c
  2861  0004F6  0E1F               	movlw	31
  2862  0004F8  6E29               	movwf	drawRect@color,c
  2863  0004FA  EC71  F00F         	call	_drawRect	;wreg free
  2864                           
  2865                           ;Lab8.c: 227: fillCircle(40, 110 + 15, 7, 0xF800);
  2866  0004FE  0E00               	movlw	0
  2867  000500  6E3A               	movwf	fillCircle@x0+1,c
  2868  000502  0E28               	movlw	40
  2869  000504  6E39               	movwf	fillCircle@x0,c
  2870  000506  0E00               	movlw	0
  2871  000508  6E3C               	movwf	fillCircle@y0+1,c
  2872  00050A  0E7D               	movlw	125
  2873  00050C  6E3B               	movwf	fillCircle@y0,c
  2874  00050E  0E00               	movlw	0
  2875  000510  6E3E               	movwf	fillCircle@r+1,c
  2876  000512  0E07               	movlw	7
  2877  000514  6E3D               	movwf	fillCircle@r,c
  2878  000516  0EF8               	movlw	248
  2879  000518  6E40               	movwf	fillCircle@color+1,c
  2880  00051A  0E00               	movlw	0
  2881  00051C  6E3F               	movwf	fillCircle@color,c
  2882  00051E  EC2B  F010         	call	_fillCircle	;wreg free
  2883                           
  2884                           ;Lab8.c: 228: drawCircle(60, 110 + 15, 7, 0xFFE0);
  2885  000522  0E00               	movlw	0
  2886  000524  6E1B               	movwf	drawCircle@x0+1,c
  2887  000526  0E3C               	movlw	60
  2888  000528  6E1A               	movwf	drawCircle@x0,c
  2889  00052A  0E00               	movlw	0
  2890  00052C  6E1D               	movwf	drawCircle@y0+1,c
  2891  00052E  0E7D               	movlw	125
  2892  000530  6E1C               	movwf	drawCircle@y0,c
  2893  000532  0E00               	movlw	0
  2894  000534  6E1F               	movwf	drawCircle@r+1,c
  2895  000536  0E07               	movlw	7
  2896  000538  6E1E               	movwf	drawCircle@r,c
  2897  00053A  0EFF               	movlw	255
  2898  00053C  6E21               	movwf	drawCircle@color+1,c
  2899  00053E  0EE0               	movlw	224
  2900  000540  6E20               	movwf	drawCircle@color,c
  2901  000542  EC31  F006         	call	_drawCircle	;wreg free
  2902                           
  2903                           ;Lab8.c: 229: drawCircle(80, 110 + 15, 7, 0x07E0);
  2904  000546  0E00               	movlw	0
  2905  000548  6E1B               	movwf	drawCircle@x0+1,c
  2906  00054A  0E50               	movlw	80
  2907  00054C  6E1A               	movwf	drawCircle@x0,c
  2908  00054E  0E00               	movlw	0
  2909  000550  6E1D               	movwf	drawCircle@y0+1,c
  2910  000552  0E7D               	movlw	125
  2911  000554  6E1C               	movwf	drawCircle@y0,c
  2912  000556  0E00               	movlw	0
  2913  000558  6E1F               	movwf	drawCircle@r+1,c
  2914  00055A  0E07               	movlw	7
  2915  00055C  6E1E               	movwf	drawCircle@r,c
  2916  00055E  0E07               	movlw	7
  2917  000560  6E21               	movwf	drawCircle@color+1,c
  2918  000562  0EE0               	movlw	224
  2919  000564  6E20               	movwf	drawCircle@color,c
  2920  000566  EC31  F006         	call	_drawCircle	;wreg free
  2921                           
  2922                           ;Lab8.c: 230: drawtext (100, 110 + 10, NSLT_Count, 0xF81F, 0x0000, 2);
  2923  00056A  0E78               	movlw	120
  2924  00056C  6E37               	movwf	drawtext@y,c
  2925  00056E  0EB5               	movlw	low _NSLT_Count
  2926  000570  6E38               	movwf	drawtext@_text,c
  2927  000572  0E00               	movlw	high _NSLT_Count
  2928  000574  6E39               	movwf	drawtext@_text+1,c
  2929  000576  0EF8               	movlw	248
  2930  000578  6E3B               	movwf	drawtext@color+1,c
  2931  00057A  0E1F               	movlw	31
  2932  00057C  6E3A               	movwf	drawtext@color,c
  2933  00057E  0E00               	movlw	0
  2934  000580  6E3D               	movwf	drawtext@bg+1,c
  2935  000582  0E00               	movlw	0
  2936  000584  6E3C               	movwf	drawtext@bg,c
  2937  000586  0E02               	movlw	2
  2938  000588  6E3E               	movwf	drawtext@size,c
  2939  00058A  0E64               	movlw	100
  2940  00058C  EC9A  F009         	call	_drawtext
  2941                           
  2942                           ;Lab8.c: 233: drawtext(2, 30, PED_EW_Count, 0x07FF, 0x0000, 2);
  2943  000590  0E1E               	movlw	30
  2944  000592  6E37               	movwf	drawtext@y,c
  2945  000594  0EB8               	movlw	low _PED_EW_Count
  2946  000596  6E38               	movwf	drawtext@_text,c
  2947  000598  0E00               	movlw	high _PED_EW_Count
  2948  00059A  6E39               	movwf	drawtext@_text+1,c
  2949  00059C  0E07               	movlw	7
  2950  00059E  6E3B               	movwf	drawtext@color+1,c
  2951  0005A0  683A               	setf	drawtext@color,c
  2952  0005A2  0E00               	movlw	0
  2953  0005A4  6E3D               	movwf	drawtext@bg+1,c
  2954  0005A6  0E00               	movlw	0
  2955  0005A8  6E3C               	movwf	drawtext@bg,c
  2956  0005AA  0E02               	movlw	2
  2957  0005AC  6E3E               	movwf	drawtext@size,c
  2958  0005AE  0E02               	movlw	2
  2959  0005B0  EC9A  F009         	call	_drawtext
  2960                           
  2961                           ;Lab8.c: 234: strcpy(txt, "PEW");
  2962  0005B4  C060  F00F         	movff	_txt,strcpy@to
  2963  0005B8  C061  F010         	movff	_txt+1,strcpy@to+1
  2964  0005BC  0EF7               	movlw	low STR_10
  2965  0005BE  6E11               	movwf	strcpy@from,c
  2966  0005C0  0EFF               	movlw	high STR_10
  2967  0005C2  6E12               	movwf	strcpy@from+1,c
  2968  0005C4  ECA8  F011         	call	_strcpy	;wreg free
  2969                           
  2970                           ;Lab8.c: 235: drawtext(3, 20, txt, 0x07FF, 0x0000, 1);
  2971  0005C8  0E14               	movlw	20
  2972  0005CA  6E37               	movwf	drawtext@y,c
  2973  0005CC  C060  F038         	movff	_txt,drawtext@_text
  2974  0005D0  C061  F039         	movff	_txt+1,drawtext@_text+1
  2975  0005D4  0E07               	movlw	7
  2976  0005D6  6E3B               	movwf	drawtext@color+1,c
  2977  0005D8  683A               	setf	drawtext@color,c
  2978  0005DA  0E00               	movlw	0
  2979  0005DC  6E3D               	movwf	drawtext@bg+1,c
  2980  0005DE  0E00               	movlw	0
  2981  0005E0  6E3C               	movwf	drawtext@bg,c
  2982  0005E2  0E01               	movlw	1
  2983  0005E4  6E3E               	movwf	drawtext@size,c
  2984  0005E6  0E03               	movlw	3
  2985  0005E8  EC9A  F009         	call	_drawtext
  2986                           
  2987                           ;Lab8.c: 238: strcpy(txt, "PNS");
  2988  0005EC  C060  F00F         	movff	_txt,strcpy@to
  2989  0005F0  C061  F010         	movff	_txt+1,strcpy@to+1
  2990  0005F4  0EF3               	movlw	low STR_11
  2991  0005F6  6E11               	movwf	strcpy@from,c
  2992  0005F8  0EFF               	movlw	high STR_11
  2993  0005FA  6E12               	movwf	strcpy@from+1,c
  2994  0005FC  ECA8  F011         	call	_strcpy	;wreg free
  2995                           
  2996                           ;Lab8.c: 239: drawtext(3, 80, txt, 0x001F, 0x0000, 1);
  2997  000600  0E50               	movlw	80
  2998  000602  6E37               	movwf	drawtext@y,c
  2999  000604  C060  F038         	movff	_txt,drawtext@_text
  3000  000608  C061  F039         	movff	_txt+1,drawtext@_text+1
  3001  00060C  0E00               	movlw	0
  3002  00060E  6E3B               	movwf	drawtext@color+1,c
  3003  000610  0E1F               	movlw	31
  3004  000612  6E3A               	movwf	drawtext@color,c
  3005  000614  0E00               	movlw	0
  3006  000616  6E3D               	movwf	drawtext@bg+1,c
  3007  000618  0E00               	movlw	0
  3008  00061A  6E3C               	movwf	drawtext@bg,c
  3009  00061C  0E01               	movlw	1
  3010  00061E  6E3E               	movwf	drawtext@size,c
  3011  000620  0E03               	movlw	3
  3012  000622  EC9A  F009         	call	_drawtext
  3013                           
  3014                           ;Lab8.c: 240: drawtext(2, 90, PED_NS_Count, 0x001F, 0x0000, 2);
  3015  000626  0E5A               	movlw	90
  3016  000628  6E37               	movwf	drawtext@y,c
  3017  00062A  0EBB               	movlw	low _PED_NS_Count
  3018  00062C  6E38               	movwf	drawtext@_text,c
  3019  00062E  0E00               	movlw	high _PED_NS_Count
  3020  000630  6E39               	movwf	drawtext@_text+1,c
  3021  000632  0E00               	movlw	0
  3022  000634  6E3B               	movwf	drawtext@color+1,c
  3023  000636  0E1F               	movlw	31
  3024  000638  6E3A               	movwf	drawtext@color,c
  3025  00063A  0E00               	movlw	0
  3026  00063C  6E3D               	movwf	drawtext@bg+1,c
  3027  00063E  0E00               	movlw	0
  3028  000640  6E3C               	movwf	drawtext@bg,c
  3029  000642  0E02               	movlw	2
  3030  000644  6E3E               	movwf	drawtext@size,c
  3031  000646  0E02               	movlw	2
  3032  000648  EC9A  F009         	call	_drawtext
  3033                           
  3034                           ;Lab8.c: 243: strcpy(txt, "EWP EWLT NSP NSLT MR");
  3035  00064C  C060  F00F         	movff	_txt,strcpy@to
  3036  000650  C061  F010         	movff	_txt+1,strcpy@to+1
  3037  000654  0E98               	movlw	low STR_12
  3038  000656  6E11               	movwf	strcpy@from,c
  3039  000658  0EFF               	movlw	high STR_12
  3040  00065A  6E12               	movwf	strcpy@from+1,c
  3041  00065C  ECA8  F011         	call	_strcpy	;wreg free
  3042                           
  3043                           ;Lab8.c: 244: drawtext(1, 140, txt, 0xFFFF, 0x0000, 1);
  3044  000660  0E8C               	movlw	140
  3045  000662  6E37               	movwf	drawtext@y,c
  3046  000664  C060  F038         	movff	_txt,drawtext@_text
  3047  000668  C061  F039         	movff	_txt+1,drawtext@_text+1
  3048  00066C  0EFF               	movlw	255
  3049  00066E  6E3B               	movwf	drawtext@color+1,c
  3050  000670  683A               	setf	drawtext@color,c
  3051  000672  0E00               	movlw	0
  3052  000674  6E3D               	movwf	drawtext@bg+1,c
  3053  000676  0E00               	movlw	0
  3054  000678  6E3C               	movwf	drawtext@bg,c
  3055  00067A  0E01               	movlw	1
  3056  00067C  6E3E               	movwf	drawtext@size,c
  3057  00067E  0E01               	movlw	1
  3058  000680  EC9A  F009         	call	_drawtext
  3059                           
  3060                           ;Lab8.c: 245: drawtext(6, 140+9, SW_EWPED_Txt, 0xFFFF, 0x0000, 1);
  3061  000684  0E95               	movlw	149
  3062  000686  6E37               	movwf	drawtext@y,c
  3063  000688  0E53               	movlw	low _SW_EWPED_Txt
  3064  00068A  6E38               	movwf	drawtext@_text,c
  3065  00068C  0E00               	movlw	high _SW_EWPED_Txt
  3066  00068E  6E39               	movwf	drawtext@_text+1,c
  3067  000690  0EFF               	movlw	255
  3068  000692  6E3B               	movwf	drawtext@color+1,c
  3069  000694  683A               	setf	drawtext@color,c
  3070  000696  0E00               	movlw	0
  3071  000698  6E3D               	movwf	drawtext@bg+1,c
  3072  00069A  0E00               	movlw	0
  3073  00069C  6E3C               	movwf	drawtext@bg,c
  3074  00069E  0E01               	movlw	1
  3075  0006A0  6E3E               	movwf	drawtext@size,c
  3076  0006A2  0E06               	movlw	6
  3077  0006A4  EC9A  F009         	call	_drawtext
  3078                           
  3079                           ;Lab8.c: 246: drawtext(32, 140+9, SW_EWLT_Txt, 0xFFFF, 0x0000, 1);
  3080  0006A8  0E95               	movlw	149
  3081  0006AA  6E37               	movwf	drawtext@y,c
  3082  0006AC  0E51               	movlw	low _SW_EWLT_Txt
  3083  0006AE  6E38               	movwf	drawtext@_text,c
  3084  0006B0  0E00               	movlw	high _SW_EWLT_Txt
  3085  0006B2  6E39               	movwf	drawtext@_text+1,c
  3086  0006B4  0EFF               	movlw	255
  3087  0006B6  6E3B               	movwf	drawtext@color+1,c
  3088  0006B8  683A               	setf	drawtext@color,c
  3089  0006BA  0E00               	movlw	0
  3090  0006BC  6E3D               	movwf	drawtext@bg+1,c
  3091  0006BE  0E00               	movlw	0
  3092  0006C0  6E3C               	movwf	drawtext@bg,c
  3093  0006C2  0E01               	movlw	1
  3094  0006C4  6E3E               	movwf	drawtext@size,c
  3095  0006C6  0E20               	movlw	32
  3096  0006C8  EC9A  F009         	call	_drawtext
  3097                           
  3098                           ;Lab8.c: 247: drawtext(58, 140+9, SW_NSPED_Txt, 0xFFFF, 0x0000, 1);
  3099  0006CC  0E95               	movlw	149
  3100  0006CE  6E37               	movwf	drawtext@y,c
  3101  0006D0  0E59               	movlw	low _SW_NSPED_Txt
  3102  0006D2  6E38               	movwf	drawtext@_text,c
  3103  0006D4  0E00               	movlw	high _SW_NSPED_Txt
  3104  0006D6  6E39               	movwf	drawtext@_text+1,c
  3105  0006D8  0EFF               	movlw	255
  3106  0006DA  6E3B               	movwf	drawtext@color+1,c
  3107  0006DC  683A               	setf	drawtext@color,c
  3108  0006DE  0E00               	movlw	0
  3109  0006E0  6E3D               	movwf	drawtext@bg+1,c
  3110  0006E2  0E00               	movlw	0
  3111  0006E4  6E3C               	movwf	drawtext@bg,c
  3112  0006E6  0E01               	movlw	1
  3113  0006E8  6E3E               	movwf	drawtext@size,c
  3114  0006EA  0E3A               	movlw	58
  3115  0006EC  EC9A  F009         	call	_drawtext
  3116                           
  3117                           ;Lab8.c: 248: drawtext(87, 140+9, SW_NSLT_Txt, 0xFFFF, 0x0000, 1);
  3118  0006F0  0E95               	movlw	149
  3119  0006F2  6E37               	movwf	drawtext@y,c
  3120  0006F4  0E57               	movlw	low _SW_NSLT_Txt
  3121  0006F6  6E38               	movwf	drawtext@_text,c
  3122  0006F8  0E00               	movlw	high _SW_NSLT_Txt
  3123  0006FA  6E39               	movwf	drawtext@_text+1,c
  3124  0006FC  0EFF               	movlw	255
  3125  0006FE  6E3B               	movwf	drawtext@color+1,c
  3126  000700  683A               	setf	drawtext@color,c
  3127  000702  0E00               	movlw	0
  3128  000704  6E3D               	movwf	drawtext@bg+1,c
  3129  000706  0E00               	movlw	0
  3130  000708  6E3C               	movwf	drawtext@bg,c
  3131  00070A  0E01               	movlw	1
  3132  00070C  6E3E               	movwf	drawtext@size,c
  3133  00070E  0E57               	movlw	87
  3134  000710  EC9A  F009         	call	_drawtext
  3135                           
  3136                           ;Lab8.c: 250: drawtext(112,140+9, SW_MODE_Txt, 0xFFFF, 0x0000, 1);
  3137  000714  0E95               	movlw	149
  3138  000716  6E37               	movwf	drawtext@y,c
  3139  000718  0E55               	movlw	low _SW_MODE_Txt
  3140  00071A  6E38               	movwf	drawtext@_text,c
  3141  00071C  0E00               	movlw	high _SW_MODE_Txt
  3142  00071E  6E39               	movwf	drawtext@_text+1,c
  3143  000720  0EFF               	movlw	255
  3144  000722  6E3B               	movwf	drawtext@color+1,c
  3145  000724  683A               	setf	drawtext@color,c
  3146  000726  0E00               	movlw	0
  3147  000728  6E3D               	movwf	drawtext@bg+1,c
  3148  00072A  0E00               	movlw	0
  3149  00072C  6E3C               	movwf	drawtext@bg,c
  3150  00072E  0E01               	movlw	1
  3151  000730  6E3E               	movwf	drawtext@size,c
  3152  000732  0E70               	movlw	112
  3153  000734  EC9A  F009         	call	_drawtext
  3154  000738  0012               	return		;funcret
  3155  00073A                     __end_of_Initialize_Screen:
  3156                           	opt stack 0
  3157                           tblptru	equ	0xFF8
  3158                           tblptrh	equ	0xFF7
  3159                           tblptrl	equ	0xFF6
  3160                           tablat	equ	0xFF5
  3161                           intcon	equ	0xFF2
  3162                           intcon2	equ	0xFF1
  3163                           intcon3	equ	0xFF0
  3164                           postinc0	equ	0xFEE
  3165                           wreg	equ	0xFE8
  3166                           postdec1	equ	0xFE5
  3167                           fsr1l	equ	0xFE1
  3168                           status	equ	0xFD8
  3169                           
  3170 ;; *************** function _fillScreen *****************
  3171 ;; Defined at:
  3172 ;;		line 652 in file "ST7735_TFT.c"
  3173 ;; Parameters:    Size  Location     Type
  3174 ;;  color           2   33[COMRAM] unsigned int 
  3175 ;; Auto vars:     Size  Location     Type
  3176 ;;		None
  3177 ;; Return value:  Size  Location     Type
  3178 ;;		None               void
  3179 ;; Registers used:
  3180 ;;		wreg, status,2, status,0, cstack
  3181 ;; Tracked objects:
  3182 ;;		On entry : 0/0
  3183 ;;		On exit  : 0/0
  3184 ;;		Unchanged: 0/0
  3185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3186 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3187 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3188 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3189 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3190 ;;Total ram usage:        2 bytes
  3191 ;; Hardware stack levels used:    1
  3192 ;; Hardware stack levels required when called:    6
  3193 ;; This function calls:
  3194 ;;		_fillRectangle
  3195 ;; This function is called by:
  3196 ;;		_Initialize_Screen
  3197 ;; This function uses a non-reentrant model
  3198 ;;
  3199                           
  3200                           	psect	text6
  3201  002454                     __ptext6:
  3202                           	opt stack 0
  3203  002454                     _fillScreen:
  3204                           	opt stack 23
  3205                           
  3206                           ;ST7735_TFT.c: 654: fillRectangle(0, 0, 128, 160, color);
  3207                           
  3208                           ;incstack = 0
  3209  002454  0E00               	movlw	0
  3210  002456  6E16               	movwf	fillRectangle@y,c
  3211  002458  0E80               	movlw	128
  3212  00245A  6E17               	movwf	fillRectangle@w,c
  3213  00245C  0EA0               	movlw	160
  3214  00245E  6E18               	movwf	fillRectangle@h,c
  3215  002460  C022  F019         	movff	fillScreen@color,fillRectangle@color
  3216  002464  C023  F01A         	movff	fillScreen@color+1,fillRectangle@color+1
  3217  002468  0E00               	movlw	0
  3218  00246A  EC09  F00B         	call	_fillRectangle
  3219  00246E  0012               	return		;funcret
  3220  002470                     __end_of_fillScreen:
  3221                           	opt stack 0
  3222                           tblptru	equ	0xFF8
  3223                           tblptrh	equ	0xFF7
  3224                           tblptrl	equ	0xFF6
  3225                           tablat	equ	0xFF5
  3226                           intcon	equ	0xFF2
  3227                           intcon2	equ	0xFF1
  3228                           intcon3	equ	0xFF0
  3229                           postinc0	equ	0xFEE
  3230                           wreg	equ	0xFE8
  3231                           postdec1	equ	0xFE5
  3232                           fsr1l	equ	0xFE1
  3233                           status	equ	0xFD8
  3234                           
  3235 ;; *************** function _fillRectangle *****************
  3236 ;; Defined at:
  3237 ;;		line 536 in file "ST7735_TFT.c"
  3238 ;; Parameters:    Size  Location     Type
  3239 ;;  x               1    wreg     unsigned char 
  3240 ;;  y               1   21[COMRAM] unsigned char 
  3241 ;;  w               1   22[COMRAM] unsigned char 
  3242 ;;  h               1   23[COMRAM] unsigned char 
  3243 ;;  color           2   24[COMRAM] unsigned int 
  3244 ;; Auto vars:     Size  Location     Type
  3245 ;;  x               1   32[COMRAM] unsigned char 
  3246 ;;  lo              1   31[COMRAM] unsigned char 
  3247 ;;  hi              1   30[COMRAM] unsigned char 
  3248 ;; Return value:  Size  Location     Type
  3249 ;;		None               void
  3250 ;; Registers used:
  3251 ;;		wreg, status,2, status,0, cstack
  3252 ;; Tracked objects:
  3253 ;;		On entry : 0/0
  3254 ;;		On exit  : 0/0
  3255 ;;		Unchanged: 0/0
  3256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3257 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3258 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3259 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3260 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3261 ;;Total ram usage:       12 bytes
  3262 ;; Hardware stack levels used:    1
  3263 ;; Hardware stack levels required when called:    5
  3264 ;; This function calls:
  3265 ;;		_setAddrWindow
  3266 ;;		_spiwrite
  3267 ;; This function is called by:
  3268 ;;		_fillScreen
  3269 ;; This function uses a non-reentrant model
  3270 ;;
  3271                           
  3272                           	psect	text7
  3273  001612                     __ptext7:
  3274                           	opt stack 0
  3275  001612                     _fillRectangle:
  3276                           	opt stack 23
  3277                           
  3278                           ;incstack = 0
  3279                           ;fillRectangle@x stored from wreg
  3280  001612  6E21               	movwf	fillRectangle@x,c
  3281                           
  3282                           ;ST7735_TFT.c: 538: unsigned char hi, lo;
  3283                           ;ST7735_TFT.c: 539: if((x >= 128) || (y >= 160))
  3284  001614  0E80               	movlw	128
  3285  001616  6021               	cpfslt	fillRectangle@x,c
  3286  001618  D069               	goto	l230
  3287  00161A  0E9F               	movlw	159
  3288  00161C  6416               	cpfsgt	fillRectangle@y,c
  3289  00161E  D001               	goto	l4659
  3290                           
  3291                           ;ST7735_TFT.c: 540: return;
  3292  001620  D065               	goto	l230
  3293  001622                     l4659:
  3294                           
  3295                           ;ST7735_TFT.c: 541: if((x + w - 1) >= 128)
  3296  001622  0EFF               	movlw	255
  3297  001624  6E1B               	movwf	??_fillRectangle& (0+255),c
  3298  001626  0EFF               	movlw	255
  3299  001628  6E1C               	movwf	(??_fillRectangle+1)& (0+255),c
  3300  00162A  5017               	movf	fillRectangle@w,w,c
  3301  00162C  C021  F01D         	movff	fillRectangle@x,??_fillRectangle+2
  3302  001630  6A1E               	clrf	(??_fillRectangle+3)& (0+255),c
  3303  001632  261D               	addwf	??_fillRectangle+2,f,c
  3304  001634  0E00               	movlw	0
  3305  001636  221E               	addwfc	??_fillRectangle+3,f,c
  3306  001638  501B               	movf	??_fillRectangle,w,c
  3307  00163A  261D               	addwf	??_fillRectangle+2,f,c
  3308  00163C  501C               	movf	??_fillRectangle+1,w,c
  3309  00163E  221E               	addwfc	??_fillRectangle+3,f,c
  3310  001640  BE1E               	btfsc	??_fillRectangle+3,7,c
  3311  001642  D00A               	goto	l231
  3312  001644  501E               	movf	??_fillRectangle+3,w,c
  3313  001646  E104               	bnz	u3440
  3314  001648  0E80               	movlw	128
  3315  00164A  5C1D               	subwf	??_fillRectangle+2,w,c
  3316  00164C  A0D8               	btfss	status,0,c
  3317  00164E  D004               	goto	l231
  3318  001650                     u3440:
  3319                           
  3320                           ;ST7735_TFT.c: 542: w = 128 - x;
  3321  001650  5021               	movf	fillRectangle@x,w,c
  3322  001652  0800               	sublw	0
  3323  001654  0F80               	addlw	128
  3324  001656  6E17               	movwf	fillRectangle@w,c
  3325  001658                     l231:
  3326                           
  3327                           ;ST7735_TFT.c: 543: if((y + h - 1) >= 160)
  3328  001658  0EFF               	movlw	255
  3329  00165A  6E1B               	movwf	??_fillRectangle& (0+255),c
  3330  00165C  0EFF               	movlw	255
  3331  00165E  6E1C               	movwf	(??_fillRectangle+1)& (0+255),c
  3332  001660  5018               	movf	fillRectangle@h,w,c
  3333  001662  C016  F01D         	movff	fillRectangle@y,??_fillRectangle+2
  3334  001666  6A1E               	clrf	(??_fillRectangle+3)& (0+255),c
  3335  001668  261D               	addwf	??_fillRectangle+2,f,c
  3336  00166A  0E00               	movlw	0
  3337  00166C  221E               	addwfc	??_fillRectangle+3,f,c
  3338  00166E  501B               	movf	??_fillRectangle,w,c
  3339  001670  261D               	addwf	??_fillRectangle+2,f,c
  3340  001672  501C               	movf	??_fillRectangle+1,w,c
  3341  001674  221E               	addwfc	??_fillRectangle+3,f,c
  3342  001676  BE1E               	btfsc	??_fillRectangle+3,7,c
  3343  001678  D00B               	goto	l4665
  3344  00167A  501E               	movf	??_fillRectangle+3,w,c
  3345  00167C  E104               	bnz	u3450
  3346  00167E  0EA0               	movlw	160
  3347  001680  5C1D               	subwf	??_fillRectangle+2,w,c
  3348  001682  A0D8               	btfss	status,0,c
  3349  001684  D005               	goto	l4665
  3350  001686                     u3450:
  3351                           
  3352                           ;ST7735_TFT.c: 544: h = 160 - y;
  3353  001686  5016               	movf	fillRectangle@y,w,c
  3354  001688  0800               	sublw	0
  3355  00168A  0FA0               	addlw	160
  3356  00168C  6E18               	movwf	fillRectangle@h,c
  3357  00168E  D000               	goto	l4665
  3358  001690                     l4665:
  3359                           
  3360                           ;ST7735_TFT.c: 545: setAddrWindow(x, y, x+w-1, y+h-1);
  3361  001690  C016  F012         	movff	fillRectangle@y,setAddrWindow@y0
  3362  001694  5021               	movf	fillRectangle@x,w,c
  3363  001696  2417               	addwf	fillRectangle@w,w,c
  3364  001698  6E1B               	movwf	??_fillRectangle& (0+255),c
  3365  00169A  041B               	decf	??_fillRectangle,w,c
  3366  00169C  6E13               	movwf	setAddrWindow@x1,c
  3367  00169E  5016               	movf	fillRectangle@y,w,c
  3368  0016A0  2418               	addwf	fillRectangle@h,w,c
  3369  0016A2  6E1C               	movwf	(??_fillRectangle+1)& (0+255),c
  3370  0016A4  041C               	decf	??_fillRectangle+1,w,c
  3371  0016A6  6E14               	movwf	setAddrWindow@y1,c
  3372  0016A8  5021               	movf	fillRectangle@x,w,c
  3373  0016AA  EC54  F010         	call	_setAddrWindow
  3374                           
  3375                           ;ST7735_TFT.c: 546: hi = color >> 8; lo = color;
  3376  0016AE  501A               	movf	fillRectangle@color+1,w,c
  3377  0016B0  6E1F               	movwf	fillRectangle@hi,c
  3378  0016B2  C019  F020         	movff	fillRectangle@color,fillRectangle@lo
  3379                           
  3380                           ;ST7735_TFT.c: 547: PORTDbits.RD0 = 1;
  3381  0016B6  8083               	bsf	3971,0,c	;volatile
  3382                           
  3383                           ;ST7735_TFT.c: 548: PORTDbits.RD1 = 0;
  3384  0016B8  9283               	bcf	3971,1,c	;volatile
  3385                           
  3386                           ;ST7735_TFT.c: 550: for(y=h; y>0; y--) {
  3387  0016BA  C018  F016         	movff	fillRectangle@h,fillRectangle@y
  3388  0016BE                     l4677:
  3389  0016BE  5016               	movf	fillRectangle@y,w,c
  3390  0016C0  B4D8               	btfsc	status,2,c
  3391  0016C2  D013               	goto	l234
  3392  0016C4  D001               	goto	l233
  3393  0016C6  D011               	goto	l234
  3394  0016C8                     l233:
  3395                           
  3396                           ;ST7735_TFT.c: 551: for(x = w; x > 0; x--) {
  3397  0016C8  C017  F021         	movff	fillRectangle@w,fillRectangle@x
  3398  0016CC                     l4681:
  3399  0016CC  5021               	movf	fillRectangle@x,w,c
  3400  0016CE  B4D8               	btfsc	status,2,c
  3401  0016D0  D00A               	goto	l4691
  3402  0016D2  D001               	goto	l4685
  3403  0016D4  D008               	goto	l4691
  3404  0016D6                     l4685:
  3405                           
  3406                           ;ST7735_TFT.c: 552: spiwrite(hi);
  3407  0016D6  501F               	movf	fillRectangle@hi,w,c
  3408  0016D8  EC73  F012         	call	_spiwrite
  3409                           
  3410                           ;ST7735_TFT.c: 553: spiwrite(lo);
  3411  0016DC  5020               	movf	fillRectangle@lo,w,c
  3412  0016DE  EC73  F012         	call	_spiwrite
  3413  0016E2  0621               	decf	fillRectangle@x,f,c
  3414  0016E4  D7F3               	goto	l4681
  3415  0016E6                     l4691:
  3416  0016E6  0616               	decf	fillRectangle@y,f,c
  3417  0016E8  D7EA               	goto	l4677
  3418  0016EA                     l234:
  3419                           
  3420                           ;ST7735_TFT.c: 554: }
  3421                           ;ST7735_TFT.c: 555: }
  3422                           ;ST7735_TFT.c: 556: PORTDbits.RD1 = 1;
  3423  0016EA  8283               	bsf	3971,1,c	;volatile
  3424  0016EC                     l230:
  3425  0016EC  0012               	return		;funcret
  3426  0016EE                     __end_of_fillRectangle:
  3427                           	opt stack 0
  3428                           tblptru	equ	0xFF8
  3429                           tblptrh	equ	0xFF7
  3430                           tblptrl	equ	0xFF6
  3431                           tablat	equ	0xFF5
  3432                           intcon	equ	0xFF2
  3433                           intcon2	equ	0xFF1
  3434                           intcon3	equ	0xFF0
  3435                           postinc0	equ	0xFEE
  3436                           wreg	equ	0xFE8
  3437                           postdec1	equ	0xFE5
  3438                           fsr1l	equ	0xFE1
  3439                           status	equ	0xFD8
  3440                           
  3441 ;; *************** function _drawRect *****************
  3442 ;; Defined at:
  3443 ;;		line 718 in file "ST7735_TFT.c"
  3444 ;; Parameters:    Size  Location     Type
  3445 ;;  x               2   32[COMRAM] unsigned int 
  3446 ;;  y               2   34[COMRAM] unsigned int 
  3447 ;;  w               2   36[COMRAM] unsigned int 
  3448 ;;  h               2   38[COMRAM] unsigned int 
  3449 ;;  color           2   40[COMRAM] unsigned int 
  3450 ;; Auto vars:     Size  Location     Type
  3451 ;;		None
  3452 ;; Return value:  Size  Location     Type
  3453 ;;		None               void
  3454 ;; Registers used:
  3455 ;;		wreg, status,2, status,0, cstack
  3456 ;; Tracked objects:
  3457 ;;		On entry : 0/0
  3458 ;;		On exit  : 0/0
  3459 ;;		Unchanged: 0/0
  3460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3461 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3462 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3463 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3464 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3465 ;;Total ram usage:       11 bytes
  3466 ;; Hardware stack levels used:    1
  3467 ;; Hardware stack levels required when called:    6
  3468 ;; This function calls:
  3469 ;;		_drawFastHLine
  3470 ;;		_drawFastVLine
  3471 ;; This function is called by:
  3472 ;;		_Initialize_Screen
  3473 ;; This function uses a non-reentrant model
  3474 ;;
  3475                           
  3476                           	psect	text8
  3477  001EE2                     __ptext8:
  3478                           	opt stack 0
  3479  001EE2                     _drawRect:
  3480                           	opt stack 23
  3481                           
  3482                           ;ST7735_TFT.c: 720: drawFastHLine(x, y, w, color);
  3483                           
  3484                           ;incstack = 0
  3485  001EE2  C023  F016         	movff	drawRect@y,drawFastHLine@y
  3486  001EE6  C025  F017         	movff	drawRect@w,drawFastHLine@w
  3487  001EEA  C029  F018         	movff	drawRect@color,drawFastHLine@color
  3488  001EEE  C02A  F019         	movff	drawRect@color+1,drawFastHLine@color+1
  3489  001EF2  5021               	movf	drawRect@x,w,c
  3490  001EF4  ECEC  F00D         	call	_drawFastHLine
  3491                           
  3492                           ;ST7735_TFT.c: 721: drawFastHLine(x, y + h - 1, w, color);
  3493  001EF8  5023               	movf	drawRect@y,w,c
  3494  001EFA  2427               	addwf	drawRect@h,w,c
  3495  001EFC  6E2B               	movwf	??_drawRect& (0+255),c
  3496  001EFE  042B               	decf	??_drawRect,w,c
  3497  001F00  6E16               	movwf	drawFastHLine@y,c
  3498  001F02  C025  F017         	movff	drawRect@w,drawFastHLine@w
  3499  001F06  C029  F018         	movff	drawRect@color,drawFastHLine@color
  3500  001F0A  C02A  F019         	movff	drawRect@color+1,drawFastHLine@color+1
  3501  001F0E  5021               	movf	drawRect@x,w,c
  3502  001F10  ECEC  F00D         	call	_drawFastHLine
  3503                           
  3504                           ;ST7735_TFT.c: 722: drawFastVLine(x, y, h, color);
  3505  001F14  C023  F016         	movff	drawRect@y,drawFastVLine@y
  3506  001F18  C027  F017         	movff	drawRect@h,drawFastVLine@h
  3507  001F1C  C029  F018         	movff	drawRect@color,drawFastVLine@color
  3508  001F20  C02A  F019         	movff	drawRect@color+1,drawFastVLine@color+1
  3509  001F24  5021               	movf	drawRect@x,w,c
  3510  001F26  EC30  F00E         	call	_drawFastVLine
  3511                           
  3512                           ;ST7735_TFT.c: 723: drawFastVLine(x + w - 1, y, h, color);
  3513  001F2A  C023  F016         	movff	drawRect@y,drawFastVLine@y
  3514  001F2E  C027  F017         	movff	drawRect@h,drawFastVLine@h
  3515  001F32  C029  F018         	movff	drawRect@color,drawFastVLine@color
  3516  001F36  C02A  F019         	movff	drawRect@color+1,drawFastVLine@color+1
  3517  001F3A  5021               	movf	drawRect@x,w,c
  3518  001F3C  2425               	addwf	drawRect@w,w,c
  3519  001F3E  6E2B               	movwf	??_drawRect& (0+255),c
  3520  001F40  042B               	decf	??_drawRect,w,c
  3521  001F42  EC30  F00E         	call	_drawFastVLine
  3522  001F46  0012               	return		;funcret
  3523  001F48                     __end_of_drawRect:
  3524                           	opt stack 0
  3525                           tblptru	equ	0xFF8
  3526                           tblptrh	equ	0xFF7
  3527                           tblptrl	equ	0xFF6
  3528                           tablat	equ	0xFF5
  3529                           intcon	equ	0xFF2
  3530                           intcon2	equ	0xFF1
  3531                           intcon3	equ	0xFF0
  3532                           postinc0	equ	0xFEE
  3533                           wreg	equ	0xFE8
  3534                           postdec1	equ	0xFE5
  3535                           fsr1l	equ	0xFE1
  3536                           status	equ	0xFD8
  3537                           
  3538 ;; *************** function _drawFastHLine *****************
  3539 ;; Defined at:
  3540 ;;		line 657 in file "ST7735_TFT.c"
  3541 ;; Parameters:    Size  Location     Type
  3542 ;;  x               1    wreg     unsigned char 
  3543 ;;  y               1   21[COMRAM] unsigned char 
  3544 ;;  w               1   22[COMRAM] unsigned char 
  3545 ;;  color           2   23[COMRAM] unsigned int 
  3546 ;; Auto vars:     Size  Location     Type
  3547 ;;  x               1   31[COMRAM] unsigned char 
  3548 ;;  lo              1   30[COMRAM] unsigned char 
  3549 ;;  hi              1   29[COMRAM] unsigned char 
  3550 ;; Return value:  Size  Location     Type
  3551 ;;		None               void
  3552 ;; Registers used:
  3553 ;;		wreg, status,2, status,0, cstack
  3554 ;; Tracked objects:
  3555 ;;		On entry : 0/0
  3556 ;;		On exit  : 0/0
  3557 ;;		Unchanged: 0/0
  3558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3559 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3560 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3561 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3562 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3563 ;;Total ram usage:       11 bytes
  3564 ;; Hardware stack levels used:    1
  3565 ;; Hardware stack levels required when called:    5
  3566 ;; This function calls:
  3567 ;;		_setAddrWindow
  3568 ;;		_spiwrite
  3569 ;; This function is called by:
  3570 ;;		_drawRect
  3571 ;; This function uses a non-reentrant model
  3572 ;;
  3573                           
  3574                           	psect	text9
  3575  001BD8                     __ptext9:
  3576                           	opt stack 0
  3577  001BD8                     _drawFastHLine:
  3578                           	opt stack 23
  3579                           
  3580                           ;incstack = 0
  3581                           ;drawFastHLine@x stored from wreg
  3582  001BD8  6E20               	movwf	drawFastHLine@x,c
  3583                           
  3584                           ;ST7735_TFT.c: 659: unsigned char hi, lo;
  3585                           ;ST7735_TFT.c: 660: if((x >= 128) || (y >= 160))
  3586  001BDA  0E80               	movlw	128
  3587  001BDC  6020               	cpfslt	drawFastHLine@x,c
  3588  001BDE  D03F               	goto	l275
  3589  001BE0  0E9F               	movlw	159
  3590  001BE2  6416               	cpfsgt	drawFastHLine@y,c
  3591  001BE4  D001               	goto	l4699
  3592                           
  3593                           ;ST7735_TFT.c: 661: return;
  3594  001BE6  D03B               	goto	l275
  3595  001BE8                     l4699:
  3596                           
  3597                           ;ST7735_TFT.c: 662: if((x + w - 1) >= 128)
  3598  001BE8  0EFF               	movlw	255
  3599  001BEA  6E1A               	movwf	??_drawFastHLine& (0+255),c
  3600  001BEC  0EFF               	movlw	255
  3601  001BEE  6E1B               	movwf	(??_drawFastHLine+1)& (0+255),c
  3602  001BF0  5017               	movf	drawFastHLine@w,w,c
  3603  001BF2  C020  F01C         	movff	drawFastHLine@x,??_drawFastHLine+2
  3604  001BF6  6A1D               	clrf	(??_drawFastHLine+3)& (0+255),c
  3605  001BF8  261C               	addwf	??_drawFastHLine+2,f,c
  3606  001BFA  0E00               	movlw	0
  3607  001BFC  221D               	addwfc	??_drawFastHLine+3,f,c
  3608  001BFE  501A               	movf	??_drawFastHLine,w,c
  3609  001C00  261C               	addwf	??_drawFastHLine+2,f,c
  3610  001C02  501B               	movf	??_drawFastHLine+1,w,c
  3611  001C04  221D               	addwfc	??_drawFastHLine+3,f,c
  3612  001C06  BE1D               	btfsc	??_drawFastHLine+3,7,c
  3613  001C08  D00B               	goto	l4703
  3614  001C0A  501D               	movf	??_drawFastHLine+3,w,c
  3615  001C0C  E104               	bnz	u3520
  3616  001C0E  0E80               	movlw	128
  3617  001C10  5C1C               	subwf	??_drawFastHLine+2,w,c
  3618  001C12  A0D8               	btfss	status,0,c
  3619  001C14  D005               	goto	l4703
  3620  001C16                     u3520:
  3621                           
  3622                           ;ST7735_TFT.c: 663: w = 128 - x;
  3623  001C16  5020               	movf	drawFastHLine@x,w,c
  3624  001C18  0800               	sublw	0
  3625  001C1A  0F80               	addlw	128
  3626  001C1C  6E17               	movwf	drawFastHLine@w,c
  3627  001C1E  D000               	goto	l4703
  3628  001C20                     l4703:
  3629                           
  3630                           ;ST7735_TFT.c: 664: hi = color >> 8; lo = color;
  3631  001C20  5019               	movf	drawFastHLine@color+1,w,c
  3632  001C22  6E1E               	movwf	drawFastHLine@hi,c
  3633  001C24  C018  F01F         	movff	drawFastHLine@color,drawFastHLine@lo
  3634                           
  3635                           ;ST7735_TFT.c: 665: setAddrWindow(x, y, x + w - 1, y);
  3636  001C28  C016  F012         	movff	drawFastHLine@y,setAddrWindow@y0
  3637  001C2C  5020               	movf	drawFastHLine@x,w,c
  3638  001C2E  2417               	addwf	drawFastHLine@w,w,c
  3639  001C30  6E1A               	movwf	??_drawFastHLine& (0+255),c
  3640  001C32  041A               	decf	??_drawFastHLine,w,c
  3641  001C34  6E13               	movwf	setAddrWindow@x1,c
  3642  001C36  C016  F014         	movff	drawFastHLine@y,setAddrWindow@y1
  3643  001C3A  5020               	movf	drawFastHLine@x,w,c
  3644  001C3C  EC54  F010         	call	_setAddrWindow
  3645                           
  3646                           ;ST7735_TFT.c: 666: PORTDbits.RD0 = 1;
  3647  001C40  8083               	bsf	3971,0,c	;volatile
  3648                           
  3649                           ;ST7735_TFT.c: 667: PORTDbits.RD1 = 0;
  3650  001C42  9283               	bcf	3971,1,c	;volatile
  3651                           
  3652                           ;ST7735_TFT.c: 669: while (w--) {
  3653  001C44  D007               	goto	l4715
  3654  001C46                     l4713:
  3655                           
  3656                           ;ST7735_TFT.c: 670: spiwrite(hi);
  3657  001C46  501E               	movf	drawFastHLine@hi,w,c
  3658  001C48  EC73  F012         	call	_spiwrite
  3659                           
  3660                           ;ST7735_TFT.c: 671: spiwrite(lo);
  3661  001C4C  501F               	movf	drawFastHLine@lo,w,c
  3662  001C4E  EC73  F012         	call	_spiwrite
  3663  001C52  D000               	goto	l4715
  3664  001C54                     l4715:
  3665  001C54  0617               	decf	drawFastHLine@w,f,c
  3666  001C56  2817               	incf	drawFastHLine@w,w,c
  3667  001C58  A4D8               	btfss	status,2,c
  3668  001C5A  D7F5               	goto	l4713
  3669                           
  3670                           ;ST7735_TFT.c: 672: }
  3671                           ;ST7735_TFT.c: 673: PORTDbits.RD1 = 1;
  3672  001C5C  8283               	bsf	3971,1,c	;volatile
  3673  001C5E                     l275:
  3674  001C5E  0012               	return		;funcret
  3675  001C60                     __end_of_drawFastHLine:
  3676                           	opt stack 0
  3677                           tblptru	equ	0xFF8
  3678                           tblptrh	equ	0xFF7
  3679                           tblptrl	equ	0xFF6
  3680                           tablat	equ	0xFF5
  3681                           intcon	equ	0xFF2
  3682                           intcon2	equ	0xFF1
  3683                           intcon3	equ	0xFF0
  3684                           postinc0	equ	0xFEE
  3685                           wreg	equ	0xFE8
  3686                           postdec1	equ	0xFE5
  3687                           fsr1l	equ	0xFE1
  3688                           status	equ	0xFD8
  3689                           
  3690 ;; *************** function _TFT_GreenTab_Initialize *****************
  3691 ;; Defined at:
  3692 ;;		line 677 in file "ST7735_TFT.c"
  3693 ;; Parameters:    Size  Location     Type
  3694 ;;		None
  3695 ;; Auto vars:     Size  Location     Type
  3696 ;;		None
  3697 ;; Return value:  Size  Location     Type
  3698 ;;		None               void
  3699 ;; Registers used:
  3700 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3701 ;; Tracked objects:
  3702 ;;		On entry : 0/0
  3703 ;;		On exit  : 0/0
  3704 ;;		Unchanged: 0/0
  3705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3706 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3707 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3708 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3709 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3710 ;;Total ram usage:        0 bytes
  3711 ;; Hardware stack levels used:    1
  3712 ;; Hardware stack levels required when called:    5
  3713 ;; This function calls:
  3714 ;;		_Rcmd1
  3715 ;;		_Rcmd2red
  3716 ;;		_Rcmd3
  3717 ;;		_write_command
  3718 ;;		_write_data
  3719 ;; This function is called by:
  3720 ;;		_Initialize_Screen
  3721 ;; This function uses a non-reentrant model
  3722 ;;
  3723                           
  3724                           	psect	text10
  3725  0023DC                     __ptext10:
  3726                           	opt stack 0
  3727  0023DC                     _TFT_GreenTab_Initialize:
  3728                           	opt stack 24
  3729                           
  3730                           ;ST7735_TFT.c: 679: PORTDbits.RD1 = 1;
  3731                           
  3732                           ;incstack = 0
  3733  0023DC  8283               	bsf	3971,1,c	;volatile
  3734                           
  3735                           ;ST7735_TFT.c: 680: PORTDbits.RD0 = 0;
  3736  0023DE  9083               	bcf	3971,0,c	;volatile
  3737                           
  3738                           ;ST7735_TFT.c: 682: SSPSTAT=0x80;
  3739  0023E0  0E80               	movlw	128
  3740  0023E2  6EC7               	movwf	4039,c	;volatile
  3741                           
  3742                           ;ST7735_TFT.c: 683: SSPCON1=0x30;
  3743  0023E4  0E30               	movlw	48
  3744  0023E6  6EC6               	movwf	4038,c	;volatile
  3745                           
  3746                           ;ST7735_TFT.c: 686: Rcmd1();
  3747  0023E8  EC12  F009         	call	_Rcmd1	;wreg free
  3748                           
  3749                           ;ST7735_TFT.c: 687: Rcmd2red();
  3750  0023EC  EC30  F011         	call	_Rcmd2red	;wreg free
  3751                           
  3752                           ;ST7735_TFT.c: 688: Rcmd3();
  3753  0023F0  EC1F  F00A         	call	_Rcmd3	;wreg free
  3754                           
  3755                           ;ST7735_TFT.c: 689: write_command(0x36);
  3756  0023F4  0E36               	movlw	54
  3757  0023F6  ECA9  F012         	call	_write_command
  3758                           
  3759                           ;ST7735_TFT.c: 690: write_data(0xC0);
  3760  0023FA  0EC0               	movlw	192
  3761  0023FC  ECA1  F012         	call	_write_data
  3762                           
  3763                           ;ST7735_TFT.c: 691: _tft_type = 1;
  3764  002400  0E01               	movlw	1
  3765  002402  6E6D               	movwf	__tft_type,c
  3766  002404  0012               	return		;funcret
  3767  002406                     __end_of_TFT_GreenTab_Initialize:
  3768                           	opt stack 0
  3769                           tblptru	equ	0xFF8
  3770                           tblptrh	equ	0xFF7
  3771                           tblptrl	equ	0xFF6
  3772                           tablat	equ	0xFF5
  3773                           intcon	equ	0xFF2
  3774                           intcon2	equ	0xFF1
  3775                           intcon3	equ	0xFF0
  3776                           postinc0	equ	0xFEE
  3777                           wreg	equ	0xFE8
  3778                           postdec1	equ	0xFE5
  3779                           fsr1l	equ	0xFE1
  3780                           status	equ	0xFD8
  3781                           
  3782 ;; *************** function _Rcmd3 *****************
  3783 ;; Defined at:
  3784 ;;		line 371 in file "ST7735_TFT.c"
  3785 ;; Parameters:    Size  Location     Type
  3786 ;;		None
  3787 ;; Auto vars:     Size  Location     Type
  3788 ;;		None
  3789 ;; Return value:  Size  Location     Type
  3790 ;;		None               void
  3791 ;; Registers used:
  3792 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3793 ;; Tracked objects:
  3794 ;;		On entry : 0/0
  3795 ;;		On exit  : 0/0
  3796 ;;		Unchanged: 0/0
  3797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3798 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3799 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3800 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3801 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3802 ;;Total ram usage:        0 bytes
  3803 ;; Hardware stack levels used:    1
  3804 ;; Hardware stack levels required when called:    4
  3805 ;; This function calls:
  3806 ;;		_delay_ms
  3807 ;;		_write_command
  3808 ;;		_write_data
  3809 ;; This function is called by:
  3810 ;;		_TFT_GreenTab_Initialize
  3811 ;;		_TFT_BlackTab_Initialize
  3812 ;; This function uses a non-reentrant model
  3813 ;;
  3814                           
  3815                           	psect	text11
  3816  00143E                     __ptext11:
  3817                           	opt stack 0
  3818  00143E                     _Rcmd3:
  3819                           	opt stack 24
  3820                           
  3821                           ;ST7735_TFT.c: 373: write_command(0xE0);
  3822                           
  3823                           ;incstack = 0
  3824  00143E  0EE0               	movlw	224
  3825  001440  ECA9  F012         	call	_write_command
  3826                           
  3827                           ;ST7735_TFT.c: 374: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
  3828  001444  0E02               	movlw	2
  3829  001446  ECA1  F012         	call	_write_data
  3830  00144A  0E1C               	movlw	28
  3831  00144C  ECA1  F012         	call	_write_data
  3832  001450  0E07               	movlw	7
  3833  001452  ECA1  F012         	call	_write_data
  3834  001456  0E12               	movlw	18
  3835  001458  ECA1  F012         	call	_write_data
  3836                           
  3837                           ;ST7735_TFT.c: 375: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
  3838  00145C  0E37               	movlw	55
  3839  00145E  ECA1  F012         	call	_write_data
  3840  001462  0E32               	movlw	50
  3841  001464  ECA1  F012         	call	_write_data
  3842  001468  0E29               	movlw	41
  3843  00146A  ECA1  F012         	call	_write_data
  3844  00146E  0E2D               	movlw	45
  3845  001470  ECA1  F012         	call	_write_data
  3846                           
  3847                           ;ST7735_TFT.c: 376: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
  3848  001474  0E29               	movlw	41
  3849  001476  ECA1  F012         	call	_write_data
  3850  00147A  0E25               	movlw	37
  3851  00147C  ECA1  F012         	call	_write_data
  3852  001480  0E2B               	movlw	43
  3853  001482  ECA1  F012         	call	_write_data
  3854  001486  0E39               	movlw	57
  3855  001488  ECA1  F012         	call	_write_data
  3856                           
  3857                           ;ST7735_TFT.c: 377: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
  3858  00148C  0E00               	movlw	0
  3859  00148E  ECA1  F012         	call	_write_data
  3860  001492  0E01               	movlw	1
  3861  001494  ECA1  F012         	call	_write_data
  3862  001498  0E03               	movlw	3
  3863  00149A  ECA1  F012         	call	_write_data
  3864  00149E  0E10               	movlw	16
  3865  0014A0  ECA1  F012         	call	_write_data
  3866                           
  3867                           ;ST7735_TFT.c: 378: write_command(0xE1);
  3868  0014A4  0EE1               	movlw	225
  3869  0014A6  ECA9  F012         	call	_write_command
  3870                           
  3871                           ;ST7735_TFT.c: 379: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
  3872  0014AA  0E03               	movlw	3
  3873  0014AC  ECA1  F012         	call	_write_data
  3874  0014B0  0E1D               	movlw	29
  3875  0014B2  ECA1  F012         	call	_write_data
  3876  0014B6  0E07               	movlw	7
  3877  0014B8  ECA1  F012         	call	_write_data
  3878  0014BC  0E06               	movlw	6
  3879  0014BE  ECA1  F012         	call	_write_data
  3880                           
  3881                           ;ST7735_TFT.c: 380: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
  3882  0014C2  0E2E               	movlw	46
  3883  0014C4  ECA1  F012         	call	_write_data
  3884  0014C8  0E2C               	movlw	44
  3885  0014CA  ECA1  F012         	call	_write_data
  3886  0014CE  0E29               	movlw	41
  3887  0014D0  ECA1  F012         	call	_write_data
  3888  0014D4  0E2D               	movlw	45
  3889  0014D6  ECA1  F012         	call	_write_data
  3890                           
  3891                           ;ST7735_TFT.c: 381: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
  3892  0014DA  0E2E               	movlw	46
  3893  0014DC  ECA1  F012         	call	_write_data
  3894  0014E0  0E2E               	movlw	46
  3895  0014E2  ECA1  F012         	call	_write_data
  3896  0014E6  0E37               	movlw	55
  3897  0014E8  ECA1  F012         	call	_write_data
  3898  0014EC  0E3F               	movlw	63
  3899  0014EE  ECA1  F012         	call	_write_data
  3900                           
  3901                           ;ST7735_TFT.c: 382: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
  3902  0014F2  0E00               	movlw	0
  3903  0014F4  ECA1  F012         	call	_write_data
  3904  0014F8  0E00               	movlw	0
  3905  0014FA  ECA1  F012         	call	_write_data
  3906  0014FE  0E02               	movlw	2
  3907  001500  ECA1  F012         	call	_write_data
  3908  001504  0E10               	movlw	16
  3909  001506  ECA1  F012         	call	_write_data
  3910                           
  3911                           ;ST7735_TFT.c: 383: write_command(0x13);
  3912  00150A  0E13               	movlw	19
  3913  00150C  ECA9  F012         	call	_write_command
  3914                           
  3915                           ;ST7735_TFT.c: 384: delay_ms(10);
  3916  001510  0E00               	movlw	0
  3917  001512  6E16               	movwf	delay_ms@ms+1,c
  3918  001514  0E0A               	movlw	10
  3919  001516  6E15               	movwf	delay_ms@ms,c
  3920  001518  EC02  F010         	call	_delay_ms	;wreg free
  3921                           
  3922                           ;ST7735_TFT.c: 385: write_command(0x29);
  3923  00151C  0E29               	movlw	41
  3924  00151E  ECA9  F012         	call	_write_command
  3925                           
  3926                           ;ST7735_TFT.c: 386: delay_ms(100);
  3927  001522  0E00               	movlw	0
  3928  001524  6E16               	movwf	delay_ms@ms+1,c
  3929  001526  0E64               	movlw	100
  3930  001528  6E15               	movwf	delay_ms@ms,c
  3931  00152A  EC02  F010         	call	_delay_ms	;wreg free
  3932  00152E  0012               	return		;funcret
  3933  001530                     __end_of_Rcmd3:
  3934                           	opt stack 0
  3935                           tblptru	equ	0xFF8
  3936                           tblptrh	equ	0xFF7
  3937                           tblptrl	equ	0xFF6
  3938                           tablat	equ	0xFF5
  3939                           intcon	equ	0xFF2
  3940                           intcon2	equ	0xFF1
  3941                           intcon3	equ	0xFF0
  3942                           postinc0	equ	0xFEE
  3943                           wreg	equ	0xFE8
  3944                           postdec1	equ	0xFE5
  3945                           fsr1l	equ	0xFE1
  3946                           status	equ	0xFD8
  3947                           
  3948 ;; *************** function _Rcmd2red *****************
  3949 ;; Defined at:
  3950 ;;		line 361 in file "ST7735_TFT.c"
  3951 ;; Parameters:    Size  Location     Type
  3952 ;;		None
  3953 ;; Auto vars:     Size  Location     Type
  3954 ;;		None
  3955 ;; Return value:  Size  Location     Type
  3956 ;;		None               void
  3957 ;; Registers used:
  3958 ;;		wreg, status,2, cstack
  3959 ;; Tracked objects:
  3960 ;;		On entry : 0/0
  3961 ;;		On exit  : 0/0
  3962 ;;		Unchanged: 0/0
  3963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3964 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3965 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3966 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3967 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3968 ;;Total ram usage:        0 bytes
  3969 ;; Hardware stack levels used:    1
  3970 ;; Hardware stack levels required when called:    4
  3971 ;; This function calls:
  3972 ;;		_write_command
  3973 ;;		_write_data
  3974 ;; This function is called by:
  3975 ;;		_TFT_GreenTab_Initialize
  3976 ;; This function uses a non-reentrant model
  3977 ;;
  3978                           
  3979                           	psect	text12
  3980  002260                     __ptext12:
  3981                           	opt stack 0
  3982  002260                     _Rcmd2red:
  3983                           	opt stack 24
  3984                           
  3985                           ;ST7735_TFT.c: 363: write_command(0x2A);
  3986                           
  3987                           ;incstack = 0
  3988  002260  0E2A               	movlw	42
  3989  002262  ECA9  F012         	call	_write_command
  3990                           
  3991                           ;ST7735_TFT.c: 364: write_data(0x00); write_data(0x00);
  3992  002266  0E00               	movlw	0
  3993  002268  ECA1  F012         	call	_write_data
  3994  00226C  0E00               	movlw	0
  3995  00226E  ECA1  F012         	call	_write_data
  3996                           
  3997                           ;ST7735_TFT.c: 365: write_data(0x00); write_data(0x7F);
  3998  002272  0E00               	movlw	0
  3999  002274  ECA1  F012         	call	_write_data
  4000  002278  0E7F               	movlw	127
  4001  00227A  ECA1  F012         	call	_write_data
  4002                           
  4003                           ;ST7735_TFT.c: 366: write_command(0x2B);
  4004  00227E  0E2B               	movlw	43
  4005  002280  ECA9  F012         	call	_write_command
  4006                           
  4007                           ;ST7735_TFT.c: 367: write_data(0x00); write_data(0x00);
  4008  002284  0E00               	movlw	0
  4009  002286  ECA1  F012         	call	_write_data
  4010  00228A  0E00               	movlw	0
  4011  00228C  ECA1  F012         	call	_write_data
  4012                           
  4013                           ;ST7735_TFT.c: 368: write_data(0x00); write_data(0x9F);
  4014  002290  0E00               	movlw	0
  4015  002292  ECA1  F012         	call	_write_data
  4016  002296  0E9F               	movlw	159
  4017  002298  ECA1  F012         	call	_write_data
  4018  00229C  0012               	return		;funcret
  4019  00229E                     __end_of_Rcmd2red:
  4020                           	opt stack 0
  4021                           tblptru	equ	0xFF8
  4022                           tblptrh	equ	0xFF7
  4023                           tblptrl	equ	0xFF6
  4024                           tablat	equ	0xFF5
  4025                           intcon	equ	0xFF2
  4026                           intcon2	equ	0xFF1
  4027                           intcon3	equ	0xFF0
  4028                           postinc0	equ	0xFEE
  4029                           wreg	equ	0xFE8
  4030                           postdec1	equ	0xFE5
  4031                           fsr1l	equ	0xFE1
  4032                           status	equ	0xFD8
  4033                           
  4034 ;; *************** function _Rcmd1 *****************
  4035 ;; Defined at:
  4036 ;;		line 314 in file "ST7735_TFT.c"
  4037 ;; Parameters:    Size  Location     Type
  4038 ;;		None
  4039 ;; Auto vars:     Size  Location     Type
  4040 ;;		None
  4041 ;; Return value:  Size  Location     Type
  4042 ;;		None               void
  4043 ;; Registers used:
  4044 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4045 ;; Tracked objects:
  4046 ;;		On entry : 0/0
  4047 ;;		On exit  : 0/0
  4048 ;;		Unchanged: 0/0
  4049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4050 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4051 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4052 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4053 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4054 ;;Total ram usage:        0 bytes
  4055 ;; Hardware stack levels used:    1
  4056 ;; Hardware stack levels required when called:    4
  4057 ;; This function calls:
  4058 ;;		_delay_ms
  4059 ;;		_write_command
  4060 ;;		_write_data
  4061 ;; This function is called by:
  4062 ;;		_TFT_GreenTab_Initialize
  4063 ;;		_TFT_BlackTab_Initialize
  4064 ;; This function uses a non-reentrant model
  4065 ;;
  4066                           
  4067                           	psect	text13
  4068  001224                     __ptext13:
  4069                           	opt stack 0
  4070  001224                     _Rcmd1:
  4071                           	opt stack 24
  4072                           
  4073                           ;ST7735_TFT.c: 316: write_command(0x01);
  4074                           
  4075                           ;incstack = 0
  4076  001224  0E01               	movlw	1
  4077  001226  ECA9  F012         	call	_write_command
  4078                           
  4079                           ;ST7735_TFT.c: 317: delay_ms(150);
  4080  00122A  0E00               	movlw	0
  4081  00122C  6E16               	movwf	delay_ms@ms+1,c
  4082  00122E  0E96               	movlw	150
  4083  001230  6E15               	movwf	delay_ms@ms,c
  4084  001232  EC02  F010         	call	_delay_ms	;wreg free
  4085                           
  4086                           ;ST7735_TFT.c: 318: write_command(0x11);
  4087  001236  0E11               	movlw	17
  4088  001238  ECA9  F012         	call	_write_command
  4089                           
  4090                           ;ST7735_TFT.c: 319: delay_ms(500);
  4091  00123C  0E01               	movlw	1
  4092  00123E  6E16               	movwf	delay_ms@ms+1,c
  4093  001240  0EF4               	movlw	244
  4094  001242  6E15               	movwf	delay_ms@ms,c
  4095  001244  EC02  F010         	call	_delay_ms	;wreg free
  4096                           
  4097                           ;ST7735_TFT.c: 320: write_command(0xB1);
  4098  001248  0EB1               	movlw	177
  4099  00124A  ECA9  F012         	call	_write_command
  4100                           
  4101                           ;ST7735_TFT.c: 321: write_data(0x01);
  4102  00124E  0E01               	movlw	1
  4103  001250  ECA1  F012         	call	_write_data
  4104                           
  4105                           ;ST7735_TFT.c: 322: write_data(0x2C);
  4106  001254  0E2C               	movlw	44
  4107  001256  ECA1  F012         	call	_write_data
  4108                           
  4109                           ;ST7735_TFT.c: 323: write_data(0x2D);
  4110  00125A  0E2D               	movlw	45
  4111  00125C  ECA1  F012         	call	_write_data
  4112                           
  4113                           ;ST7735_TFT.c: 324: write_command(0xB2);
  4114  001260  0EB2               	movlw	178
  4115  001262  ECA9  F012         	call	_write_command
  4116                           
  4117                           ;ST7735_TFT.c: 325: write_data(0x01);
  4118  001266  0E01               	movlw	1
  4119  001268  ECA1  F012         	call	_write_data
  4120                           
  4121                           ;ST7735_TFT.c: 326: write_data(0x2C);
  4122  00126C  0E2C               	movlw	44
  4123  00126E  ECA1  F012         	call	_write_data
  4124                           
  4125                           ;ST7735_TFT.c: 327: write_data(0x2D);
  4126  001272  0E2D               	movlw	45
  4127  001274  ECA1  F012         	call	_write_data
  4128                           
  4129                           ;ST7735_TFT.c: 328: write_command(0xB3);
  4130  001278  0EB3               	movlw	179
  4131  00127A  ECA9  F012         	call	_write_command
  4132                           
  4133                           ;ST7735_TFT.c: 329: write_data(0x01);
  4134  00127E  0E01               	movlw	1
  4135  001280  ECA1  F012         	call	_write_data
  4136                           
  4137                           ;ST7735_TFT.c: 330: write_data(0x2C);
  4138  001284  0E2C               	movlw	44
  4139  001286  ECA1  F012         	call	_write_data
  4140                           
  4141                           ;ST7735_TFT.c: 331: write_data(0x2D);
  4142  00128A  0E2D               	movlw	45
  4143  00128C  ECA1  F012         	call	_write_data
  4144                           
  4145                           ;ST7735_TFT.c: 332: write_data(0x01);
  4146  001290  0E01               	movlw	1
  4147  001292  ECA1  F012         	call	_write_data
  4148                           
  4149                           ;ST7735_TFT.c: 333: write_data(0x2C);
  4150  001296  0E2C               	movlw	44
  4151  001298  ECA1  F012         	call	_write_data
  4152                           
  4153                           ;ST7735_TFT.c: 334: write_data(0x2D);
  4154  00129C  0E2D               	movlw	45
  4155  00129E  ECA1  F012         	call	_write_data
  4156                           
  4157                           ;ST7735_TFT.c: 335: write_command(0xB4);
  4158  0012A2  0EB4               	movlw	180
  4159  0012A4  ECA9  F012         	call	_write_command
  4160                           
  4161                           ;ST7735_TFT.c: 336: write_data(0x07);
  4162  0012A8  0E07               	movlw	7
  4163  0012AA  ECA1  F012         	call	_write_data
  4164                           
  4165                           ;ST7735_TFT.c: 337: write_command(0xC0);
  4166  0012AE  0EC0               	movlw	192
  4167  0012B0  ECA9  F012         	call	_write_command
  4168                           
  4169                           ;ST7735_TFT.c: 338: write_data(0xA2);
  4170  0012B4  0EA2               	movlw	162
  4171  0012B6  ECA1  F012         	call	_write_data
  4172                           
  4173                           ;ST7735_TFT.c: 339: write_data(0x02);
  4174  0012BA  0E02               	movlw	2
  4175  0012BC  ECA1  F012         	call	_write_data
  4176                           
  4177                           ;ST7735_TFT.c: 340: write_data(0x84);
  4178  0012C0  0E84               	movlw	132
  4179  0012C2  ECA1  F012         	call	_write_data
  4180                           
  4181                           ;ST7735_TFT.c: 341: write_command(0xC1);
  4182  0012C6  0EC1               	movlw	193
  4183  0012C8  ECA9  F012         	call	_write_command
  4184                           
  4185                           ;ST7735_TFT.c: 342: write_data(0xC5);
  4186  0012CC  0EC5               	movlw	197
  4187  0012CE  ECA1  F012         	call	_write_data
  4188                           
  4189                           ;ST7735_TFT.c: 343: write_command(0xC2);
  4190  0012D2  0EC2               	movlw	194
  4191  0012D4  ECA9  F012         	call	_write_command
  4192                           
  4193                           ;ST7735_TFT.c: 344: write_data(0x0A);
  4194  0012D8  0E0A               	movlw	10
  4195  0012DA  ECA1  F012         	call	_write_data
  4196                           
  4197                           ;ST7735_TFT.c: 345: write_data(0x00);
  4198  0012DE  0E00               	movlw	0
  4199  0012E0  ECA1  F012         	call	_write_data
  4200                           
  4201                           ;ST7735_TFT.c: 346: write_command(0xC3);
  4202  0012E4  0EC3               	movlw	195
  4203  0012E6  ECA9  F012         	call	_write_command
  4204                           
  4205                           ;ST7735_TFT.c: 347: write_data(0x8A);
  4206  0012EA  0E8A               	movlw	138
  4207  0012EC  ECA1  F012         	call	_write_data
  4208                           
  4209                           ;ST7735_TFT.c: 348: write_data(0x2A);
  4210  0012F0  0E2A               	movlw	42
  4211  0012F2  ECA1  F012         	call	_write_data
  4212                           
  4213                           ;ST7735_TFT.c: 349: write_command(0xC4);
  4214  0012F6  0EC4               	movlw	196
  4215  0012F8  ECA9  F012         	call	_write_command
  4216                           
  4217                           ;ST7735_TFT.c: 350: write_data(0x8A);
  4218  0012FC  0E8A               	movlw	138
  4219  0012FE  ECA1  F012         	call	_write_data
  4220                           
  4221                           ;ST7735_TFT.c: 351: write_data(0xEE);
  4222  001302  0EEE               	movlw	238
  4223  001304  ECA1  F012         	call	_write_data
  4224                           
  4225                           ;ST7735_TFT.c: 352: write_command(0xC5);
  4226  001308  0EC5               	movlw	197
  4227  00130A  ECA9  F012         	call	_write_command
  4228                           
  4229                           ;ST7735_TFT.c: 353: write_data(0x0E);
  4230  00130E  0E0E               	movlw	14
  4231  001310  ECA1  F012         	call	_write_data
  4232                           
  4233                           ;ST7735_TFT.c: 354: write_command(0x20);
  4234  001314  0E20               	movlw	32
  4235  001316  ECA9  F012         	call	_write_command
  4236                           
  4237                           ;ST7735_TFT.c: 355: write_command(0x36);
  4238  00131A  0E36               	movlw	54
  4239  00131C  ECA9  F012         	call	_write_command
  4240                           
  4241                           ;ST7735_TFT.c: 356: write_data(0xC8);
  4242  001320  0EC8               	movlw	200
  4243  001322  ECA1  F012         	call	_write_data
  4244                           
  4245                           ;ST7735_TFT.c: 357: write_command(0x3A);
  4246  001326  0E3A               	movlw	58
  4247  001328  ECA9  F012         	call	_write_command
  4248                           
  4249                           ;ST7735_TFT.c: 358: write_data(0x05);
  4250  00132C  0E05               	movlw	5
  4251  00132E  ECA1  F012         	call	_write_data
  4252  001332  0012               	return		;funcret
  4253  001334                     __end_of_Rcmd1:
  4254                           	opt stack 0
  4255                           tblptru	equ	0xFF8
  4256                           tblptrh	equ	0xFF7
  4257                           tblptrl	equ	0xFF6
  4258                           tablat	equ	0xFF5
  4259                           intcon	equ	0xFF2
  4260                           intcon2	equ	0xFF1
  4261                           intcon3	equ	0xFF0
  4262                           postinc0	equ	0xFEE
  4263                           wreg	equ	0xFE8
  4264                           postdec1	equ	0xFE5
  4265                           fsr1l	equ	0xFE1
  4266                           status	equ	0xFD8
  4267                           
  4268 ;; *************** function _LCD_Reset *****************
  4269 ;; Defined at:
  4270 ;;		line 250 in file "ST7735_TFT.c"
  4271 ;; Parameters:    Size  Location     Type
  4272 ;;		None
  4273 ;; Auto vars:     Size  Location     Type
  4274 ;;		None
  4275 ;; Return value:  Size  Location     Type
  4276 ;;		None               void
  4277 ;; Registers used:
  4278 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4279 ;; Tracked objects:
  4280 ;;		On entry : 0/0
  4281 ;;		On exit  : 0/0
  4282 ;;		Unchanged: 0/0
  4283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4284 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4285 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4286 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4287 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4288 ;;Total ram usage:        0 bytes
  4289 ;; Hardware stack levels used:    1
  4290 ;; Hardware stack levels required when called:    4
  4291 ;; This function calls:
  4292 ;;		_delay_ms
  4293 ;; This function is called by:
  4294 ;;		_Initialize_Screen
  4295 ;; This function uses a non-reentrant model
  4296 ;;
  4297                           
  4298                           	psect	text14
  4299  0024FA                     __ptext14:
  4300                           	opt stack 0
  4301  0024FA                     _LCD_Reset:
  4302                           	opt stack 25
  4303                           
  4304                           ;ST7735_TFT.c: 252: PORTDbits.RD2 = 0;
  4305                           
  4306                           ;incstack = 0
  4307  0024FA  9483               	bcf	3971,2,c	;volatile
  4308                           
  4309                           ;ST7735_TFT.c: 253: delay_ms(100);
  4310  0024FC  0E00               	movlw	0
  4311  0024FE  6E16               	movwf	delay_ms@ms+1,c
  4312  002500  0E64               	movlw	100
  4313  002502  6E15               	movwf	delay_ms@ms,c
  4314  002504  EC02  F010         	call	_delay_ms	;wreg free
  4315                           
  4316                           ;ST7735_TFT.c: 254: PORTDbits.RD2 = 1;
  4317  002508  8483               	bsf	3971,2,c	;volatile
  4318  00250A  0012               	return		;funcret
  4319  00250C                     __end_of_LCD_Reset:
  4320                           	opt stack 0
  4321                           tblptru	equ	0xFF8
  4322                           tblptrh	equ	0xFF7
  4323                           tblptrl	equ	0xFF6
  4324                           tablat	equ	0xFF5
  4325                           intcon	equ	0xFF2
  4326                           intcon2	equ	0xFF1
  4327                           intcon3	equ	0xFF0
  4328                           postinc0	equ	0xFEE
  4329                           wreg	equ	0xFE8
  4330                           postdec1	equ	0xFE5
  4331                           fsr1l	equ	0xFE1
  4332                           status	equ	0xFD8
  4333                           
  4334 ;; *************** function _delay_ms *****************
  4335 ;; Defined at:
  4336 ;;		line 97 in file "ST7735_TFT.c"
  4337 ;; Parameters:    Size  Location     Type
  4338 ;;  ms              2   20[COMRAM] int 
  4339 ;; Auto vars:     Size  Location     Type
  4340 ;;  count           2   24[COMRAM] int 
  4341 ;; Return value:  Size  Location     Type
  4342 ;;		None               void
  4343 ;; Registers used:
  4344 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4345 ;; Tracked objects:
  4346 ;;		On entry : 0/0
  4347 ;;		On exit  : 0/0
  4348 ;;		Unchanged: 0/0
  4349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4350 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4351 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4352 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4353 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4354 ;;Total ram usage:        6 bytes
  4355 ;; Hardware stack levels used:    1
  4356 ;; Hardware stack levels required when called:    3
  4357 ;; This function calls:
  4358 ;;		___wmul
  4359 ;; This function is called by:
  4360 ;;		_LCD_Reset
  4361 ;;		_Rcmd1
  4362 ;;		_Rcmd3
  4363 ;;		_Bcmd
  4364 ;; This function uses a non-reentrant model
  4365 ;;
  4366                           
  4367                           	psect	text15
  4368  002004                     __ptext15:
  4369                           	opt stack 0
  4370  002004                     _delay_ms:
  4371                           	opt stack 24
  4372                           
  4373                           ;ST7735_TFT.c: 103: int count;
  4374                           ;ST7735_TFT.c: 104: count = 8000000/4000/8 * ms;
  4375                           
  4376                           ;incstack = 0
  4377  002004  C015  F00F         	movff	delay_ms@ms,___wmul@multiplier
  4378  002008  C016  F010         	movff	delay_ms@ms+1,___wmul@multiplier+1
  4379  00200C  0E00               	movlw	0
  4380  00200E  6E12               	movwf	___wmul@multiplicand+1,c
  4381  002010  0EFA               	movlw	250
  4382  002012  6E11               	movwf	___wmul@multiplicand,c
  4383  002014  EC03  F012         	call	___wmul	;wreg free
  4384  002018  C00F  F019         	movff	?___wmul,delay_ms@count
  4385  00201C  C010  F01A         	movff	?___wmul+1,delay_ms@count+1
  4386                           
  4387                           ;ST7735_TFT.c: 105: count = (0xffff - count);
  4388  002020  C019  F017         	movff	delay_ms@count,??_delay_ms
  4389  002024  C01A  F018         	movff	delay_ms@count+1,??_delay_ms+1
  4390  002028  1E17               	comf	??_delay_ms,f,c
  4391  00202A  1E18               	comf	??_delay_ms+1,f,c
  4392  00202C  4A17               	infsnz	??_delay_ms,f,c
  4393  00202E  2A18               	incf	??_delay_ms+1,f,c
  4394  002030  0EFF               	movlw	255
  4395  002032  2417               	addwf	??_delay_ms,w,c
  4396  002034  6E19               	movwf	delay_ms@count,c
  4397  002036  0EFF               	movlw	255
  4398  002038  2018               	addwfc	??_delay_ms+1,w,c
  4399  00203A  6E1A               	movwf	delay_ms@count+1,c
  4400                           
  4401                           ;ST7735_TFT.c: 107: T3CON = 0xb8;
  4402  00203C  0EB8               	movlw	184
  4403  00203E  6EB1               	movwf	4017,c	;volatile
  4404                           
  4405                           ;ST7735_TFT.c: 109: TMR0L = count & 0x00ff;
  4406  002040  C019  FFD6         	movff	delay_ms@count,4054	;volatile
  4407                           
  4408                           ;ST7735_TFT.c: 110: TMR0H = count >> 8;
  4409  002044  501A               	movf	delay_ms@count+1,w,c
  4410  002046  6ED7               	movwf	4055,c	;volatile
  4411                           
  4412                           ;ST7735_TFT.c: 112: PIR2bits.TMR3IF = 0;
  4413  002048  92A1               	bcf	4001,1,c	;volatile
  4414                           
  4415                           ;ST7735_TFT.c: 113: T3CONbits.TMR3ON = 1;
  4416  00204A  80B1               	bsf	4017,0,c	;volatile
  4417                           
  4418                           ;ST7735_TFT.c: 115: while (PIR2bits.TMR3IF == 0);
  4419  00204C  D000               	goto	l117
  4420  00204E                     l117:
  4421  00204E  A2A1               	btfss	4001,1,c	;volatile
  4422  002050  D7FE               	goto	l117
  4423                           
  4424                           ;ST7735_TFT.c: 116: T3CONbits.TMR3ON = 0;
  4425  002052  90B1               	bcf	4017,0,c	;volatile
  4426  002054  0012               	return		;funcret
  4427  002056                     __end_of_delay_ms:
  4428                           	opt stack 0
  4429                           tblptru	equ	0xFF8
  4430                           tblptrh	equ	0xFF7
  4431                           tblptrl	equ	0xFF6
  4432                           tablat	equ	0xFF5
  4433                           intcon	equ	0xFF2
  4434                           intcon2	equ	0xFF1
  4435                           intcon3	equ	0xFF0
  4436                           postinc0	equ	0xFEE
  4437                           wreg	equ	0xFE8
  4438                           postdec1	equ	0xFE5
  4439                           fsr1l	equ	0xFE1
  4440                           status	equ	0xFD8
  4441                           
  4442 ;; *************** function _Init_ADC *****************
  4443 ;; Defined at:
  4444 ;;		line 343 in file "Lab8.c"
  4445 ;; Parameters:    Size  Location     Type
  4446 ;;		None
  4447 ;; Auto vars:     Size  Location     Type
  4448 ;;		None
  4449 ;; Return value:  Size  Location     Type
  4450 ;;		None               void
  4451 ;; Registers used:
  4452 ;;		wreg, status,2
  4453 ;; Tracked objects:
  4454 ;;		On entry : 0/0
  4455 ;;		On exit  : 0/0
  4456 ;;		Unchanged: 0/0
  4457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4458 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4459 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4460 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4461 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4462 ;;Total ram usage:        0 bytes
  4463 ;; Hardware stack levels used:    1
  4464 ;; Hardware stack levels required when called:    2
  4465 ;; This function calls:
  4466 ;;		Nothing
  4467 ;; This function is called by:
  4468 ;;		_main
  4469 ;; This function uses a non-reentrant model
  4470 ;;
  4471                           
  4472                           	psect	text16
  4473  002562                     __ptext16:
  4474                           	opt stack 0
  4475  002562                     _Init_ADC:
  4476                           	opt stack 28
  4477                           
  4478                           ;Lab8.c: 345: ADCON0 = 0x01;
  4479                           
  4480                           ;incstack = 0
  4481  002562  0E01               	movlw	1
  4482  002564  6EC2               	movwf	4034,c	;volatile
  4483                           
  4484                           ;Lab8.c: 346: ADCON1= 0x0E;
  4485  002566  0E0E               	movlw	14
  4486  002568  6EC1               	movwf	4033,c	;volatile
  4487                           
  4488                           ;Lab8.c: 347: ADCON2= 0xA9;
  4489  00256A  0EA9               	movlw	169
  4490  00256C  6EC0               	movwf	4032,c	;volatile
  4491  00256E  0012               	return		;funcret
  4492  002570                     __end_of_Init_ADC:
  4493                           	opt stack 0
  4494                           tblptru	equ	0xFF8
  4495                           tblptrh	equ	0xFF7
  4496                           tblptrl	equ	0xFF6
  4497                           tablat	equ	0xFF5
  4498                           intcon	equ	0xFF2
  4499                           intcon2	equ	0xFF1
  4500                           intcon3	equ	0xFF0
  4501                           postinc0	equ	0xFEE
  4502                           wreg	equ	0xFE8
  4503                           postdec1	equ	0xFE5
  4504                           fsr1l	equ	0xFE1
  4505                           status	equ	0xFD8
  4506                           
  4507 ;; *************** function _Day_Mode *****************
  4508 ;; Defined at:
  4509 ;;		line 443 in file "Lab8.c"
  4510 ;; Parameters:    Size  Location     Type
  4511 ;;		None
  4512 ;; Auto vars:     Size  Location     Type
  4513 ;;		None
  4514 ;; Return value:  Size  Location     Type
  4515 ;;		None               void
  4516 ;; Registers used:
  4517 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4518 ;; Tracked objects:
  4519 ;;		On entry : 0/0
  4520 ;;		On exit  : 0/0
  4521 ;;		Unchanged: 0/0
  4522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4523 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4524 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4525 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4526 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4527 ;;Total ram usage:        0 bytes
  4528 ;; Hardware stack levels used:    1
  4529 ;; Hardware stack levels required when called:   12
  4530 ;; This function calls:
  4531 ;;		_PED_Control
  4532 ;;		_Set_EW
  4533 ;;		_Set_EW_LT
  4534 ;;		_Set_NS
  4535 ;;		_Set_NS_LT
  4536 ;;		_Wait_N_Seconds
  4537 ;; This function is called by:
  4538 ;;		_main
  4539 ;; This function uses a non-reentrant model
  4540 ;;
  4541                           
  4542                           	psect	text17
  4543  0017BE                     __ptext17:
  4544                           	opt stack 0
  4545  0017BE                     _Day_Mode:
  4546                           	opt stack 18
  4547                           
  4548                           ;Lab8.c: 445: MODE = 1;
  4549                           
  4550                           ;incstack = 0
  4551  0017BE  0E00               	movlw	0
  4552  0017C0  6E5F               	movwf	_MODE+1,c
  4553  0017C2  0E01               	movlw	1
  4554  0017C4  6E5E               	movwf	_MODE,c
  4555                           
  4556                           ;Lab8.c: 446: PORTEbits.RE1 = 1;
  4557  0017C6  8284               	bsf	3972,1,c	;volatile
  4558                           
  4559                           ;Lab8.c: 447: Act_Mode_Txt[0] = 'D';
  4560  0017C8  0E44               	movlw	68
  4561  0017CA  6E4B               	movwf	_Act_Mode_Txt,c
  4562  0017CC  D000               	goto	l5087
  4563  0017CE                     l5087:
  4564                           
  4565                           ;Lab8.c: 450: {
  4566                           ;Lab8.c: 452: Set_EW(1);
  4567  0017CE  0E01               	movlw	1
  4568  0017D0  EC0C  F011         	call	_Set_EW
  4569                           
  4570                           ;Lab8.c: 453: Set_EW_LT(1);
  4571  0017D4  0E01               	movlw	1
  4572  0017D6  ECE8  F010         	call	_Set_EW_LT
  4573                           
  4574                           ;Lab8.c: 454: Set_NS_LT(1);
  4575  0017DA  0E01               	movlw	1
  4576  0017DC  ECA0  F010         	call	_Set_NS_LT
  4577                           
  4578                           ;Lab8.c: 455: Set_NS(2);
  4579  0017E0  0E02               	movlw	2
  4580  0017E2  ECC4  F010         	call	_Set_NS
  4581                           
  4582                           ;Lab8.c: 456: if(NS_PED_SW==1)
  4583  0017E6  0466               	decf	_NS_PED_SW,w,c
  4584  0017E8  A4D8               	btfss	status,2,c
  4585  0017EA  D006               	goto	l464
  4586                           
  4587                           ;Lab8.c: 457: {
  4588                           ;Lab8.c: 458: PED_Control(2,7);
  4589  0017EC  0E07               	movlw	7
  4590  0017EE  0100               	movlb	0	; () banked
  4591  0017F0  6FB0               	movwf	PED_Control@Num_Sec& (0+255),b
  4592  0017F2  0E02               	movlw	2
  4593  0017F4  ECD5  F00F         	call	_PED_Control
  4594  0017F8                     l464:
  4595                           
  4596                           ;Lab8.c: 459: }
  4597                           ;Lab8.c: 460: Wait_N_Seconds(9);
  4598  0017F8  0E09               	movlw	9
  4599  0017FA  EC8C  F011         	call	_Wait_N_Seconds
  4600                           
  4601                           ;Lab8.c: 461: Set_NS(3);
  4602  0017FE  0E03               	movlw	3
  4603  001800  ECC4  F010         	call	_Set_NS
  4604                           
  4605                           ;Lab8.c: 462: Wait_N_Seconds(3);
  4606  001804  0E03               	movlw	3
  4607  001806  EC8C  F011         	call	_Wait_N_Seconds
  4608                           
  4609                           ;Lab8.c: 463: Set_NS(1);
  4610  00180A  0E01               	movlw	1
  4611  00180C  ECC4  F010         	call	_Set_NS
  4612                           
  4613                           ;Lab8.c: 464: if(PORTAbits.RA4==1)
  4614  001810  A880               	btfss	3968,4,c	;volatile
  4615  001812  D010               	goto	l5113
  4616                           
  4617                           ;Lab8.c: 465: {
  4618                           ;Lab8.c: 466: Set_EW_LT(2);
  4619  001814  0E02               	movlw	2
  4620  001816  ECE8  F010         	call	_Set_EW_LT
  4621                           
  4622                           ;Lab8.c: 467: Wait_N_Seconds(7);
  4623  00181A  0E07               	movlw	7
  4624  00181C  EC8C  F011         	call	_Wait_N_Seconds
  4625                           
  4626                           ;Lab8.c: 468: Set_EW_LT(3);
  4627  001820  0E03               	movlw	3
  4628  001822  ECE8  F010         	call	_Set_EW_LT
  4629                           
  4630                           ;Lab8.c: 469: Wait_N_Seconds(3);
  4631  001826  0E03               	movlw	3
  4632  001828  EC8C  F011         	call	_Wait_N_Seconds
  4633                           
  4634                           ;Lab8.c: 470: Set_EW_LT(1);
  4635  00182C  0E01               	movlw	1
  4636  00182E  ECE8  F010         	call	_Set_EW_LT
  4637  001832  D000               	goto	l5113
  4638  001834                     l5113:
  4639                           
  4640                           ;Lab8.c: 471: }
  4641                           ;Lab8.c: 472: Set_EW(2);
  4642  001834  0E02               	movlw	2
  4643  001836  EC0C  F011         	call	_Set_EW
  4644                           
  4645                           ;Lab8.c: 473: if (EW_PED_SW==1)
  4646  00183A  0463               	decf	_EW_PED_SW,w,c
  4647  00183C  A4D8               	btfss	status,2,c
  4648  00183E  D006               	goto	l466
  4649                           
  4650                           ;Lab8.c: 474: {
  4651                           ;Lab8.c: 475: PED_Control(0,9);
  4652  001840  0E09               	movlw	9
  4653  001842  0100               	movlb	0	; () banked
  4654  001844  6FB0               	movwf	PED_Control@Num_Sec& (0+255),b
  4655  001846  0E00               	movlw	0
  4656  001848  ECD5  F00F         	call	_PED_Control
  4657  00184C                     l466:
  4658                           
  4659                           ;Lab8.c: 476: }
  4660                           ;Lab8.c: 477: Wait_N_Seconds(8);
  4661  00184C  0E08               	movlw	8
  4662  00184E  EC8C  F011         	call	_Wait_N_Seconds
  4663                           
  4664                           ;Lab8.c: 478: Set_EW(3);
  4665  001852  0E03               	movlw	3
  4666  001854  EC0C  F011         	call	_Set_EW
  4667                           
  4668                           ;Lab8.c: 479: Wait_N_Seconds(3);
  4669  001858  0E03               	movlw	3
  4670  00185A  EC8C  F011         	call	_Wait_N_Seconds
  4671                           
  4672                           ;Lab8.c: 480: Set_EW(1);
  4673  00185E  0E01               	movlw	1
  4674  001860  EC0C  F011         	call	_Set_EW
  4675                           
  4676                           ;Lab8.c: 481: if(PORTAbits.RA5==1)
  4677  001864  AA80               	btfss	3968,5,c	;volatile
  4678  001866  D011               	goto	l470
  4679                           
  4680                           ;Lab8.c: 482: {
  4681                           ;Lab8.c: 483: Set_NS_LT(2);
  4682  001868  0E02               	movlw	2
  4683  00186A  ECA0  F010         	call	_Set_NS_LT
  4684                           
  4685                           ;Lab8.c: 484: Wait_N_Seconds(7);
  4686  00186E  0E07               	movlw	7
  4687  001870  EC8C  F011         	call	_Wait_N_Seconds
  4688                           
  4689                           ;Lab8.c: 485: Set_NS_LT(3);
  4690  001874  0E03               	movlw	3
  4691  001876  ECA0  F010         	call	_Set_NS_LT
  4692                           
  4693                           ;Lab8.c: 486: Wait_N_Seconds(3);
  4694  00187A  0E03               	movlw	3
  4695  00187C  EC8C  F011         	call	_Wait_N_Seconds
  4696                           
  4697                           ;Lab8.c: 487: Set_NS_LT(1);
  4698  001880  0E01               	movlw	1
  4699  001882  ECA0  F010         	call	_Set_NS_LT
  4700                           
  4701                           ;Lab8.c: 488: }
  4702                           ;Lab8.c: 489: break;
  4703  001886  D001               	goto	l470
  4704  001888  D7A2               	goto	l5087
  4705  00188A                     l470:
  4706  00188A  0012               	return		;funcret
  4707  00188C                     __end_of_Day_Mode:
  4708                           	opt stack 0
  4709                           tblptru	equ	0xFF8
  4710                           tblptrh	equ	0xFF7
  4711                           tblptrl	equ	0xFF6
  4712                           tablat	equ	0xFF5
  4713                           intcon	equ	0xFF2
  4714                           intcon2	equ	0xFF1
  4715                           intcon3	equ	0xFF0
  4716                           postinc0	equ	0xFEE
  4717                           wreg	equ	0xFE8
  4718                           postdec1	equ	0xFE5
  4719                           fsr1l	equ	0xFE1
  4720                           status	equ	0xFD8
  4721                           
  4722 ;; *************** function _Wait_N_Seconds *****************
  4723 ;; Defined at:
  4724 ;;		line 580 in file "Lab8.c"
  4725 ;; Parameters:    Size  Location     Type
  4726 ;;  seconds         1    wreg     unsigned char 
  4727 ;; Auto vars:     Size  Location     Type
  4728 ;;  seconds         1    9[BANK0 ] unsigned char 
  4729 ;;  I               1   10[BANK0 ] unsigned char 
  4730 ;; Return value:  Size  Location     Type
  4731 ;;		None               void
  4732 ;; Registers used:
  4733 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4734 ;; Tracked objects:
  4735 ;;		On entry : 0/0
  4736 ;;		On exit  : 0/0
  4737 ;;		Unchanged: 0/0
  4738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4739 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4740 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4741 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4742 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4743 ;;Total ram usage:        2 bytes
  4744 ;; Hardware stack levels used:    1
  4745 ;; Hardware stack levels required when called:   11
  4746 ;; This function calls:
  4747 ;;		_Wait_One_Second
  4748 ;;		_update_LCD_count
  4749 ;; This function is called by:
  4750 ;;		_Day_Mode
  4751 ;;		_Night_Mode
  4752 ;; This function uses a non-reentrant model
  4753 ;;
  4754                           
  4755                           	psect	text18
  4756  002318                     __ptext18:
  4757                           	opt stack 0
  4758  002318                     _Wait_N_Seconds:
  4759                           	opt stack 18
  4760                           
  4761                           ;incstack = 0
  4762                           ;Wait_N_Seconds@seconds stored from wreg
  4763  002318  0100               	movlb	0	; () banked
  4764  00231A  6FB0               	movwf	Wait_N_Seconds@seconds& (0+255),b
  4765                           
  4766                           ; BSR set to: 0
  4767                           ;Lab8.c: 582: char I;
  4768                           ;Lab8.c: 583: for (I = seconds; I> 0; I--)
  4769  00231C  C0B0  F0B1         	movff	Wait_N_Seconds@seconds,Wait_N_Seconds@I
  4770  002320                     l4927:
  4771                           
  4772                           ; BSR set to: 0
  4773  002320  0100               	movlb	0	; () banked
  4774  002322  51B1               	movf	Wait_N_Seconds@I& (0+255),w,b
  4775  002324  0100               	movlb	0	; () banked
  4776  002326  B4D8               	btfsc	status,2,c
  4777  002328  D00C               	goto	l4937
  4778  00232A  D001               	goto	l4931
  4779                           
  4780                           ; BSR set to: 0
  4781  00232C  D00A               	goto	l4937
  4782  00232E                     l4931:
  4783                           
  4784                           ; BSR set to: 0
  4785                           ;Lab8.c: 584: {
  4786                           ;Lab8.c: 586: update_LCD_count(direction, I);
  4787  00232E  C0B1  F0AE         	movff	Wait_N_Seconds@I,update_LCD_count@count
  4788  002332  5070               	movf	_direction,w,c
  4789  002334  EC08  F007         	call	_update_LCD_count
  4790                           
  4791                           ;Lab8.c: 587: Wait_One_Second();
  4792  002338  ECB7  F00E         	call	_Wait_One_Second	;wreg free
  4793  00233C  0100               	movlb	0	; () banked
  4794  00233E  07B1               	decf	Wait_N_Seconds@I& (0+255),f,b
  4795  002340  D7EF               	goto	l4927
  4796  002342                     l4937:
  4797                           
  4798                           ; BSR set to: 0
  4799                           ;Lab8.c: 588: }
  4800                           ;Lab8.c: 589: update_LCD_count(direction, 0);
  4801  002342  0E00               	movlw	0
  4802  002344  0100               	movlb	0	; () banked
  4803  002346  6FAE               	movwf	update_LCD_count@count& (0+255),b
  4804  002348  5070               	movf	_direction,w,c
  4805  00234A  EC08  F007         	call	_update_LCD_count
  4806  00234E  0012               	return		;funcret
  4807  002350                     __end_of_Wait_N_Seconds:
  4808                           	opt stack 0
  4809                           tblptru	equ	0xFF8
  4810                           tblptrh	equ	0xFF7
  4811                           tblptrl	equ	0xFF6
  4812                           tablat	equ	0xFF5
  4813                           intcon	equ	0xFF2
  4814                           intcon2	equ	0xFF1
  4815                           intcon3	equ	0xFF0
  4816                           postinc0	equ	0xFEE
  4817                           wreg	equ	0xFE8
  4818                           postdec1	equ	0xFE5
  4819                           fsr1l	equ	0xFE1
  4820                           status	equ	0xFD8
  4821                           
  4822 ;; *************** function _update_LCD_count *****************
  4823 ;; Defined at:
  4824 ;;		line 635 in file "Lab8.c"
  4825 ;; Parameters:    Size  Location     Type
  4826 ;;  direction       1    wreg     unsigned char 
  4827 ;;  count           1    7[BANK0 ] unsigned char 
  4828 ;; Auto vars:     Size  Location     Type
  4829 ;;  direction       1    8[BANK0 ] unsigned char 
  4830 ;; Return value:  Size  Location     Type
  4831 ;;		None               void
  4832 ;; Registers used:
  4833 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4834 ;; Tracked objects:
  4835 ;;		On entry : 0/0
  4836 ;;		On exit  : 0/0
  4837 ;;		Unchanged: 0/0
  4838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4839 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4840 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4841 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4842 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4843 ;;Total ram usage:        2 bytes
  4844 ;; Hardware stack levels used:    1
  4845 ;; Hardware stack levels required when called:    9
  4846 ;; This function calls:
  4847 ;;		___awdiv
  4848 ;;		___awmod
  4849 ;;		_drawtext
  4850 ;; This function is called by:
  4851 ;;		_Wait_N_Seconds
  4852 ;; This function uses a non-reentrant model
  4853 ;;
  4854                           
  4855                           	psect	text19
  4856  000E10                     __ptext19:
  4857                           	opt stack 0
  4858  000E10                     _update_LCD_count:
  4859                           	opt stack 19
  4860                           
  4861                           ;incstack = 0
  4862                           ;update_LCD_count@direction stored from wreg
  4863  000E10  0100               	movlb	0	; () banked
  4864  000E12  6FAF               	movwf	update_LCD_count@direction& (0+255),b
  4865                           
  4866                           ; BSR set to: 0
  4867                           ;Lab8.c: 637: switch (direction)
  4868  000E14  D0B0               	goto	l4791
  4869  000E16                     l4773:
  4870                           
  4871                           ; BSR set to: 0
  4872                           ;Lab8.c: 640: EW_Count[0] = count/10 + '0';
  4873  000E16  C0AE  F00F         	movff	update_LCD_count@count,___awdiv@dividend
  4874  000E1A  6A10               	clrf	___awdiv@dividend+1,c
  4875  000E1C  0E00               	movlw	0
  4876  000E1E  6E12               	movwf	___awdiv@divisor+1,c
  4877  000E20  0E0A               	movlw	10
  4878  000E22  6E11               	movwf	___awdiv@divisor,c
  4879  000E24  ECA1  F00D         	call	___awdiv	;wreg free
  4880  000E28  500F               	movf	?___awdiv,w,c
  4881  000E2A  0F30               	addlw	48
  4882  000E2C  6E45               	movwf	_EW_Count,c
  4883                           
  4884                           ;Lab8.c: 641: EW_Count[1] = count%10 + '0';
  4885  000E2E  C0AE  F00F         	movff	update_LCD_count@count,___awmod@dividend
  4886  000E32  6A10               	clrf	___awmod@dividend+1,c
  4887  000E34  0E00               	movlw	0
  4888  000E36  6E12               	movwf	___awmod@divisor+1,c
  4889  000E38  0E0A               	movlw	10
  4890  000E3A  6E11               	movwf	___awmod@divisor,c
  4891  000E3C  ECF8  F00E         	call	___awmod	;wreg free
  4892  000E40  500F               	movf	?___awmod,w,c
  4893  000E42  0F30               	addlw	48
  4894  000E44  6E46               	movwf	_EW_Count+1,c
  4895                           
  4896                           ;Lab8.c: 642: drawtext(100, 20 + 10, EW_Count, 0x07FF, 0x0000, 2);
  4897  000E46  0E1E               	movlw	30
  4898  000E48  6E37               	movwf	drawtext@y,c
  4899  000E4A  0E45               	movlw	low _EW_Count
  4900  000E4C  6E38               	movwf	drawtext@_text,c
  4901  000E4E  0E00               	movlw	high _EW_Count
  4902  000E50  6E39               	movwf	drawtext@_text+1,c
  4903  000E52  0E07               	movlw	7
  4904  000E54  6E3B               	movwf	drawtext@color+1,c
  4905  000E56  683A               	setf	drawtext@color,c
  4906  000E58  0E00               	movlw	0
  4907  000E5A  6E3D               	movwf	drawtext@bg+1,c
  4908  000E5C  0E00               	movlw	0
  4909  000E5E  6E3C               	movwf	drawtext@bg,c
  4910  000E60  0E02               	movlw	2
  4911  000E62  6E3E               	movwf	drawtext@size,c
  4912  000E64  0E64               	movlw	100
  4913  000E66  EC9A  F009         	call	_drawtext
  4914                           
  4915                           ;Lab8.c: 643: break;
  4916  000E6A  D094               	goto	l514
  4917  000E6C                     l4777:
  4918                           
  4919                           ;Lab8.c: 646: NSLT_Count[0] = count/10 + '0';
  4920  000E6C  C0AE  F00F         	movff	update_LCD_count@count,___awdiv@dividend
  4921  000E70  6A10               	clrf	___awdiv@dividend+1,c
  4922  000E72  0E00               	movlw	0
  4923  000E74  6E12               	movwf	___awdiv@divisor+1,c
  4924  000E76  0E0A               	movlw	10
  4925  000E78  6E11               	movwf	___awdiv@divisor,c
  4926  000E7A  ECA1  F00D         	call	___awdiv	;wreg free
  4927  000E7E  500F               	movf	?___awdiv,w,c
  4928  000E80  0F30               	addlw	48
  4929  000E82  0100               	movlb	0	; () banked
  4930  000E84  6FB5               	movwf	_NSLT_Count& (0+255),b
  4931                           
  4932                           ;Lab8.c: 647: NSLT_Count[1] = count%10 + '0';
  4933  000E86  C0AE  F00F         	movff	update_LCD_count@count,___awmod@dividend
  4934  000E8A  6A10               	clrf	___awmod@dividend+1,c
  4935  000E8C  0E00               	movlw	0
  4936  000E8E  6E12               	movwf	___awmod@divisor+1,c
  4937  000E90  0E0A               	movlw	10
  4938  000E92  6E11               	movwf	___awmod@divisor,c
  4939  000E94  ECF8  F00E         	call	___awmod	;wreg free
  4940  000E98  500F               	movf	?___awmod,w,c
  4941  000E9A  0F30               	addlw	48
  4942  000E9C  0100               	movlb	0	; () banked
  4943  000E9E  6FB6               	movwf	(_NSLT_Count+1)& (0+255),b
  4944                           
  4945                           ; BSR set to: 0
  4946                           ;Lab8.c: 648: drawtext(100, 110 + 10, NSLT_Count,
  4947                           ;Lab8.c: 649: 0xF81F, 0x0000, 2);
  4948  000EA0  0E78               	movlw	120
  4949  000EA2  6E37               	movwf	drawtext@y,c
  4950  000EA4  0EB5               	movlw	low _NSLT_Count
  4951  000EA6  6E38               	movwf	drawtext@_text,c
  4952  000EA8  0E00               	movlw	high _NSLT_Count
  4953  000EAA  6E39               	movwf	drawtext@_text+1,c
  4954  000EAC  0EF8               	movlw	248
  4955  000EAE  6E3B               	movwf	drawtext@color+1,c
  4956  000EB0  0E1F               	movlw	31
  4957  000EB2  6E3A               	movwf	drawtext@color,c
  4958  000EB4  0E00               	movlw	0
  4959  000EB6  6E3D               	movwf	drawtext@bg+1,c
  4960  000EB8  0E00               	movlw	0
  4961  000EBA  6E3C               	movwf	drawtext@bg,c
  4962  000EBC  0E02               	movlw	2
  4963  000EBE  6E3E               	movwf	drawtext@size,c
  4964  000EC0  0E64               	movlw	100
  4965  000EC2  EC9A  F009         	call	_drawtext
  4966                           
  4967                           ;Lab8.c: 650: break;
  4968  000EC6  D066               	goto	l514
  4969  000EC8                     l4781:
  4970                           
  4971                           ;Lab8.c: 652: NS_Count[0] = count/10 + '0';
  4972  000EC8  C0AE  F00F         	movff	update_LCD_count@count,___awdiv@dividend
  4973  000ECC  6A10               	clrf	___awdiv@dividend+1,c
  4974  000ECE  0E00               	movlw	0
  4975  000ED0  6E12               	movwf	___awdiv@divisor+1,c
  4976  000ED2  0E0A               	movlw	10
  4977  000ED4  6E11               	movwf	___awdiv@divisor,c
  4978  000ED6  ECA1  F00D         	call	___awdiv	;wreg free
  4979  000EDA  500F               	movf	?___awdiv,w,c
  4980  000EDC  0F30               	addlw	48
  4981  000EDE  6E48               	movwf	_NS_Count,c
  4982                           
  4983                           ;Lab8.c: 653: NS_Count[1] = count%10 + '0';
  4984  000EE0  C0AE  F00F         	movff	update_LCD_count@count,___awmod@dividend
  4985  000EE4  6A10               	clrf	___awmod@dividend+1,c
  4986  000EE6  0E00               	movlw	0
  4987  000EE8  6E12               	movwf	___awmod@divisor+1,c
  4988  000EEA  0E0A               	movlw	10
  4989  000EEC  6E11               	movwf	___awmod@divisor,c
  4990  000EEE  ECF8  F00E         	call	___awmod	;wreg free
  4991  000EF2  500F               	movf	?___awmod,w,c
  4992  000EF4  0F30               	addlw	48
  4993  000EF6  6E49               	movwf	_NS_Count+1,c
  4994                           
  4995                           ;Lab8.c: 654: drawtext(100, 80 + 10, NS_Count, 0x001F, 0x0000, 2);
  4996  000EF8  0E5A               	movlw	90
  4997  000EFA  6E37               	movwf	drawtext@y,c
  4998  000EFC  0E48               	movlw	low _NS_Count
  4999  000EFE  6E38               	movwf	drawtext@_text,c
  5000  000F00  0E00               	movlw	high _NS_Count
  5001  000F02  6E39               	movwf	drawtext@_text+1,c
  5002  000F04  0E00               	movlw	0
  5003  000F06  6E3B               	movwf	drawtext@color+1,c
  5004  000F08  0E1F               	movlw	31
  5005  000F0A  6E3A               	movwf	drawtext@color,c
  5006  000F0C  0E00               	movlw	0
  5007  000F0E  6E3D               	movwf	drawtext@bg+1,c
  5008  000F10  0E00               	movlw	0
  5009  000F12  6E3C               	movwf	drawtext@bg,c
  5010  000F14  0E02               	movlw	2
  5011  000F16  6E3E               	movwf	drawtext@size,c
  5012  000F18  0E64               	movlw	100
  5013  000F1A  EC9A  F009         	call	_drawtext
  5014                           
  5015                           ;Lab8.c: 655: break;
  5016  000F1E  D03A               	goto	l514
  5017  000F20                     l4785:
  5018                           
  5019                           ;Lab8.c: 657: EWLT_Count[0] = count/10 + '0';
  5020  000F20  C0AE  F00F         	movff	update_LCD_count@count,___awdiv@dividend
  5021  000F24  6A10               	clrf	___awdiv@dividend+1,c
  5022  000F26  0E00               	movlw	0
  5023  000F28  6E12               	movwf	___awdiv@divisor+1,c
  5024  000F2A  0E0A               	movlw	10
  5025  000F2C  6E11               	movwf	___awdiv@divisor,c
  5026  000F2E  ECA1  F00D         	call	___awdiv	;wreg free
  5027  000F32  500F               	movf	?___awdiv,w,c
  5028  000F34  0F30               	addlw	48
  5029  000F36  6E42               	movwf	_EWLT_Count,c
  5030                           
  5031                           ;Lab8.c: 658: EWLT_Count[1] = count%10 + '0';
  5032  000F38  C0AE  F00F         	movff	update_LCD_count@count,___awmod@dividend
  5033  000F3C  6A10               	clrf	___awmod@dividend+1,c
  5034  000F3E  0E00               	movlw	0
  5035  000F40  6E12               	movwf	___awmod@divisor+1,c
  5036  000F42  0E0A               	movlw	10
  5037  000F44  6E11               	movwf	___awmod@divisor,c
  5038  000F46  ECF8  F00E         	call	___awmod	;wreg free
  5039  000F4A  500F               	movf	?___awmod,w,c
  5040  000F4C  0F30               	addlw	48
  5041  000F4E  6E43               	movwf	_EWLT_Count+1,c
  5042                           
  5043                           ;Lab8.c: 659: drawtext(100, 50 + 10, EWLT_Count,
  5044                           ;Lab8.c: 660: 0xFFFF, 0x0000, 2);
  5045  000F50  0E3C               	movlw	60
  5046  000F52  6E37               	movwf	drawtext@y,c
  5047  000F54  0E42               	movlw	low _EWLT_Count
  5048  000F56  6E38               	movwf	drawtext@_text,c
  5049  000F58  0E00               	movlw	high _EWLT_Count
  5050  000F5A  6E39               	movwf	drawtext@_text+1,c
  5051  000F5C  0EFF               	movlw	255
  5052  000F5E  6E3B               	movwf	drawtext@color+1,c
  5053  000F60  683A               	setf	drawtext@color,c
  5054  000F62  0E00               	movlw	0
  5055  000F64  6E3D               	movwf	drawtext@bg+1,c
  5056  000F66  0E00               	movlw	0
  5057  000F68  6E3C               	movwf	drawtext@bg,c
  5058  000F6A  0E02               	movlw	2
  5059  000F6C  6E3E               	movwf	drawtext@size,c
  5060  000F6E  0E64               	movlw	100
  5061  000F70  EC9A  F009         	call	_drawtext
  5062                           
  5063                           ;Lab8.c: 662: }
  5064                           
  5065                           ;Lab8.c: 661: break;
  5066  000F74  D00F               	goto	l514
  5067  000F76                     l4791:
  5068  000F76  0100               	movlb	0	; () banked
  5069  000F78  51AF               	movf	update_LCD_count@direction& (0+255),w,b
  5070                           
  5071                           ; Switch size 1, requested type "space"
  5072                           ; Number of cases is 4, Range of values is 0 to 3
  5073                           ; switch strategies available:
  5074                           ; Name         Instructions Cycles
  5075                           ; simple_byte           13     7 (average)
  5076                           ;	Chosen strategy is simple_byte
  5077  000F7A  0A00               	xorlw	0	; case 0
  5078  000F7C  B4D8               	btfsc	status,2,c
  5079  000F7E  D74B               	goto	l4773
  5080  000F80  0A01               	xorlw	1	; case 1
  5081  000F82  B4D8               	btfsc	status,2,c
  5082  000F84  D7CD               	goto	l4785
  5083  000F86  0A03               	xorlw	3	; case 2
  5084  000F88  B4D8               	btfsc	status,2,c
  5085  000F8A  D79E               	goto	l4781
  5086  000F8C  0A01               	xorlw	1	; case 3
  5087  000F8E  B4D8               	btfsc	status,2,c
  5088  000F90  D76D               	goto	l4777
  5089  000F92  D000               	goto	l514
  5090  000F94                     l514:
  5091  000F94  0012               	return		;funcret
  5092  000F96                     __end_of_update_LCD_count:
  5093                           	opt stack 0
  5094                           tblptru	equ	0xFF8
  5095                           tblptrh	equ	0xFF7
  5096                           tblptrl	equ	0xFF6
  5097                           tablat	equ	0xFF5
  5098                           intcon	equ	0xFF2
  5099                           intcon2	equ	0xFF1
  5100                           intcon3	equ	0xFF0
  5101                           postinc0	equ	0xFEE
  5102                           wreg	equ	0xFE8
  5103                           postdec1	equ	0xFE5
  5104                           fsr1l	equ	0xFE1
  5105                           status	equ	0xFD8
  5106                           
  5107 ;; *************** function _Wait_One_Second *****************
  5108 ;; Defined at:
  5109 ;;		line 545 in file "Lab8.c"
  5110 ;; Parameters:    Size  Location     Type
  5111 ;;		None
  5112 ;; Auto vars:     Size  Location     Type
  5113 ;;		None
  5114 ;; Return value:  Size  Location     Type
  5115 ;;		None               void
  5116 ;; Registers used:
  5117 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5118 ;; Tracked objects:
  5119 ;;		On entry : 0/0
  5120 ;;		On exit  : 0/0
  5121 ;;		Unchanged: 0/0
  5122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5123 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5124 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5125 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5126 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5127 ;;Total ram usage:        0 bytes
  5128 ;; Hardware stack levels used:    1
  5129 ;; Hardware stack levels required when called:   10
  5130 ;; This function calls:
  5131 ;;		_Wait_Half_Second
  5132 ;;		_drawtext
  5133 ;;		_strcpy
  5134 ;;		_update_LCD_misc
  5135 ;; This function is called by:
  5136 ;;		_Wait_N_Seconds
  5137 ;; This function uses a non-reentrant model
  5138 ;;
  5139                           
  5140                           	psect	text20
  5141  001D6E                     __ptext20:
  5142                           	opt stack 0
  5143  001D6E                     _Wait_One_Second:
  5144                           	opt stack 18
  5145                           
  5146                           ;Lab8.c: 547: PORTDbits.RD7 = 1;
  5147                           
  5148                           ;incstack = 0
  5149  001D6E  8E83               	bsf	3971,7,c	;volatile
  5150                           
  5151                           ;Lab8.c: 548: strcpy(txt,"*");
  5152  001D70  C060  F00F         	movff	_txt,strcpy@to
  5153  001D74  C061  F010         	movff	_txt+1,strcpy@to+1
  5154  001D78  0EFD               	movlw	low STR_5
  5155  001D7A  6E11               	movwf	strcpy@from,c
  5156  001D7C  0EFF               	movlw	high STR_5
  5157  001D7E  6E12               	movwf	strcpy@from+1,c
  5158  001D80  ECA8  F011         	call	_strcpy	;wreg free
  5159                           
  5160                           ;Lab8.c: 549: drawtext(120,10,txt,0xFFFF,0x0000,1);
  5161  001D84  0E0A               	movlw	10
  5162  001D86  6E37               	movwf	drawtext@y,c
  5163  001D88  C060  F038         	movff	_txt,drawtext@_text
  5164  001D8C  C061  F039         	movff	_txt+1,drawtext@_text+1
  5165  001D90  0EFF               	movlw	255
  5166  001D92  6E3B               	movwf	drawtext@color+1,c
  5167  001D94  683A               	setf	drawtext@color,c
  5168  001D96  0E00               	movlw	0
  5169  001D98  6E3D               	movwf	drawtext@bg+1,c
  5170  001D9A  0E00               	movlw	0
  5171  001D9C  6E3C               	movwf	drawtext@bg,c
  5172  001D9E  0E01               	movlw	1
  5173  001DA0  6E3E               	movwf	drawtext@size,c
  5174  001DA2  0E78               	movlw	120
  5175  001DA4  EC9A  F009         	call	_drawtext
  5176                           
  5177                           ;Lab8.c: 550: Wait_Half_Second();
  5178  001DA8  EC45  F012         	call	_Wait_Half_Second	;wreg free
  5179                           
  5180                           ;Lab8.c: 552: PORTDbits.RD7 = 0;
  5181  001DAC  9E83               	bcf	3971,7,c	;volatile
  5182                           
  5183                           ;Lab8.c: 553: strcpy(txt," ");
  5184  001DAE  C060  F00F         	movff	_txt,strcpy@to
  5185  001DB2  C061  F010         	movff	_txt+1,strcpy@to+1
  5186  001DB6  0EFB               	movlw	low STR_14
  5187  001DB8  6E11               	movwf	strcpy@from,c
  5188  001DBA  0EFF               	movlw	high STR_14
  5189  001DBC  6E12               	movwf	strcpy@from+1,c
  5190  001DBE  ECA8  F011         	call	_strcpy	;wreg free
  5191                           
  5192                           ;Lab8.c: 554: drawtext(120,10,txt,0xFFFF,0x0000,1);
  5193  001DC2  0E0A               	movlw	10
  5194  001DC4  6E37               	movwf	drawtext@y,c
  5195  001DC6  C060  F038         	movff	_txt,drawtext@_text
  5196  001DCA  C061  F039         	movff	_txt+1,drawtext@_text+1
  5197  001DCE  0EFF               	movlw	255
  5198  001DD0  6E3B               	movwf	drawtext@color+1,c
  5199  001DD2  683A               	setf	drawtext@color,c
  5200  001DD4  0E00               	movlw	0
  5201  001DD6  6E3D               	movwf	drawtext@bg+1,c
  5202  001DD8  0E00               	movlw	0
  5203  001DDA  6E3C               	movwf	drawtext@bg,c
  5204  001DDC  0E01               	movlw	1
  5205  001DDE  6E3E               	movwf	drawtext@size,c
  5206  001DE0  0E78               	movlw	120
  5207  001DE2  EC9A  F009         	call	_drawtext
  5208                           
  5209                           ;Lab8.c: 555: Wait_Half_Second();
  5210  001DE6  EC45  F012         	call	_Wait_Half_Second	;wreg free
  5211                           
  5212                           ;Lab8.c: 556: update_LCD_misc();
  5213  001DEA  EC56  F005         	call	_update_LCD_misc	;wreg free
  5214  001DEE  0012               	return		;funcret
  5215  001DF0                     __end_of_Wait_One_Second:
  5216                           	opt stack 0
  5217                           tblptru	equ	0xFF8
  5218                           tblptrh	equ	0xFF7
  5219                           tblptrl	equ	0xFF6
  5220                           tablat	equ	0xFF5
  5221                           intcon	equ	0xFF2
  5222                           intcon2	equ	0xFF1
  5223                           intcon3	equ	0xFF0
  5224                           postinc0	equ	0xFEE
  5225                           wreg	equ	0xFE8
  5226                           postdec1	equ	0xFE5
  5227                           fsr1l	equ	0xFE1
  5228                           status	equ	0xFD8
  5229                           
  5230 ;; *************** function _update_LCD_misc *****************
  5231 ;; Defined at:
  5232 ;;		line 685 in file "Lab8.c"
  5233 ;; Parameters:    Size  Location     Type
  5234 ;;		None
  5235 ;; Auto vars:     Size  Location     Type
  5236 ;;  nStep           2    7[BANK0 ] int 
  5237 ;; Return value:  Size  Location     Type
  5238 ;;		None               void
  5239 ;; Registers used:
  5240 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5241 ;; Tracked objects:
  5242 ;;		On entry : 0/0
  5243 ;;		On exit  : 0/0
  5244 ;;		Unchanged: 0/0
  5245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5246 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5247 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5248 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5249 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5250 ;;Total ram usage:        2 bytes
  5251 ;; Hardware stack levels used:    1
  5252 ;; Hardware stack levels required when called:    9
  5253 ;; This function calls:
  5254 ;;		___awtoft
  5255 ;;		___ftdiv
  5256 ;;		___ftge
  5257 ;;		___wmul
  5258 ;;		_drawtext
  5259 ;;		_get_full_ADC
  5260 ;; This function is called by:
  5261 ;;		_Wait_One_Second
  5262 ;; This function uses a non-reentrant model
  5263 ;;
  5264                           
  5265                           	psect	text21
  5266  000AAC                     __ptext21:
  5267                           	opt stack 0
  5268  000AAC                     _update_LCD_misc:
  5269                           	opt stack 18
  5270                           
  5271                           ;Lab8.c: 687: int nStep = get_full_ADC();
  5272                           
  5273                           ;incstack = 0
  5274  000AAC  EC17  F012         	call	_get_full_ADC	;wreg free
  5275  000AB0  C00F  F0AE         	movff	?_get_full_ADC,update_LCD_misc@nStep
  5276  000AB4  C010  F0AF         	movff	?_get_full_ADC+1,update_LCD_misc@nStep+1
  5277                           
  5278                           ;Lab8.c: 688: volt = nStep * 5 /1024.0;
  5279  000AB8  C0AE  F00F         	movff	update_LCD_misc@nStep,___wmul@multiplier
  5280  000ABC  C0AF  F010         	movff	update_LCD_misc@nStep+1,___wmul@multiplier+1
  5281  000AC0  0E00               	movlw	0
  5282  000AC2  6E12               	movwf	___wmul@multiplicand+1,c
  5283  000AC4  0E05               	movlw	5
  5284  000AC6  6E11               	movwf	___wmul@multiplicand,c
  5285  000AC8  EC03  F012         	call	___wmul	;wreg free
  5286  000ACC  C00F  F017         	movff	?___wmul,___awtoft@c
  5287  000AD0  C010  F018         	movff	?___wmul+1,___awtoft@c+1
  5288  000AD4  EC6E  F011         	call	___awtoft	;wreg free
  5289  000AD8  C017  F01B         	movff	?___awtoft,___ftdiv@f1
  5290  000ADC  C018  F01C         	movff	?___awtoft+1,___ftdiv@f1+1
  5291  000AE0  C019  F01D         	movff	?___awtoft+2,___ftdiv@f1+2
  5292  000AE4  0E00               	movlw	0
  5293  000AE6  6E1E               	movwf	___ftdiv@f2,c
  5294  000AE8  0E80               	movlw	128
  5295  000AEA  6E1F               	movwf	___ftdiv@f2+1,c
  5296  000AEC  0E44               	movlw	68
  5297  000AEE  6E20               	movwf	___ftdiv@f2+2,c
  5298  000AF0  EC98  F00A         	call	___ftdiv	;wreg free
  5299  000AF4  C01B  F05B         	movff	?___ftdiv,_volt
  5300  000AF8  C01C  F05C         	movff	?___ftdiv+1,_volt+1
  5301  000AFC  C01D  F05D         	movff	?___ftdiv+2,_volt+2
  5302                           
  5303                           ;Lab8.c: 689: SW_MODE = volt < 2.5 ? 1:0;
  5304  000B00  C05B  F00F         	movff	_volt,___ftge@ff1
  5305  000B04  C05C  F010         	movff	_volt+1,___ftge@ff1+1
  5306  000B08  C05D  F011         	movff	_volt+2,___ftge@ff1+2
  5307  000B0C  0E00               	movlw	0
  5308  000B0E  6E12               	movwf	___ftge@ff2,c
  5309  000B10  0E20               	movlw	32
  5310  000B12  6E13               	movwf	___ftge@ff2+1,c
  5311  000B14  0E40               	movlw	64
  5312  000B16  6E14               	movwf	___ftge@ff2+2,c
  5313  000B18  EC56  F00D         	call	___ftge	;wreg free
  5314  000B1C  B0D8               	btfsc	status,0,c
  5315  000B1E  D002               	goto	u3230
  5316  000B20  0E01               	movlw	1
  5317  000B22  D001               	goto	u3240
  5318  000B24                     u3230:
  5319  000B24  0E00               	movlw	0
  5320  000B26                     u3240:
  5321  000B26  6E6A               	movwf	_SW_MODE,c
  5322                           
  5323                           ;Lab8.c: 691: SW_EWPED = EW_PED_SW;
  5324  000B28  C063  F069         	movff	_EW_PED_SW,_SW_EWPED
  5325                           
  5326                           ;Lab8.c: 692: SW_EWLT = PORTAbits.RA4;
  5327  000B2C  0E00               	movlw	0
  5328  000B2E  B880               	btfsc	3968,4,c	;volatile
  5329  000B30  0E01               	movlw	1
  5330  000B32  6E68               	movwf	_SW_EWLT,c
  5331                           
  5332                           ;Lab8.c: 693: SW_NSPED = NS_PED_SW;
  5333  000B34  C066  F06C         	movff	_NS_PED_SW,_SW_NSPED
  5334                           
  5335                           ;Lab8.c: 694: SW_NSLT = PORTAbits.RA5;
  5336  000B38  0E00               	movlw	0
  5337  000B3A  BA80               	btfsc	3968,5,c	;volatile
  5338  000B3C  0E01               	movlw	1
  5339  000B3E  6E6B               	movwf	_SW_NSLT,c
  5340                           
  5341                           ;Lab8.c: 696: if (SW_MODE == 0) SW_MODE_Txt[0]= 'N'; else SW_MODE_Txt[0] = 'D';
  5342  000B40  506A               	movf	_SW_MODE,w,c
  5343  000B42  A4D8               	btfss	status,2,c
  5344  000B44  D002               	goto	l4453
  5345  000B46  0E4E               	movlw	78
  5346  000B48  D001               	goto	L1
  5347  000B4A                     l4453:
  5348  000B4A  0E44               	movlw	68
  5349  000B4C                     L1:
  5350  000B4C  6E55               	movwf	_SW_MODE_Txt,c
  5351                           
  5352                           ;Lab8.c: 697: if (SW_NSPED == 0) SW_NSPED_Txt[0] = '0'; else SW_NSPED_Txt[0] = '1';
  5353  000B4E  506C               	movf	_SW_NSPED,w,c
  5354  000B50  A4D8               	btfss	status,2,c
  5355  000B52  D002               	goto	l4457
  5356  000B54  0E30               	movlw	48
  5357  000B56  D001               	goto	L2
  5358  000B58                     l4457:
  5359  000B58  0E31               	movlw	49
  5360  000B5A                     L2:
  5361  000B5A  6E59               	movwf	_SW_NSPED_Txt,c
  5362                           
  5363                           ;Lab8.c: 698: if (SW_NSLT == 0) SW_NSLT_Txt[0] = '0'; else SW_NSLT_Txt[0] = '1';
  5364  000B5C  506B               	movf	_SW_NSLT,w,c
  5365  000B5E  A4D8               	btfss	status,2,c
  5366  000B60  D002               	goto	l4461
  5367  000B62  0E30               	movlw	48
  5368  000B64  D001               	goto	L3
  5369  000B66                     l4461:
  5370  000B66  0E31               	movlw	49
  5371  000B68                     L3:
  5372  000B68  6E57               	movwf	_SW_NSLT_Txt,c
  5373                           
  5374                           ;Lab8.c: 699: if (SW_EWPED == 0) SW_EWPED_Txt[0] = '0'; else SW_EWPED_Txt[0] = '1';
  5375  000B6A  5069               	movf	_SW_EWPED,w,c
  5376  000B6C  A4D8               	btfss	status,2,c
  5377  000B6E  D002               	goto	l4465
  5378  000B70  0E30               	movlw	48
  5379  000B72  D001               	goto	L4
  5380  000B74                     l4465:
  5381  000B74  0E31               	movlw	49
  5382  000B76                     L4:
  5383  000B76  6E53               	movwf	_SW_EWPED_Txt,c
  5384                           
  5385                           ;Lab8.c: 700: if (SW_EWLT == 0) SW_EWLT_Txt[0] = '0'; else SW_EWLT_Txt[0] = '1';
  5386  000B78  5068               	movf	_SW_EWLT,w,c
  5387  000B7A  A4D8               	btfss	status,2,c
  5388  000B7C  D002               	goto	l4469
  5389  000B7E  0E30               	movlw	48
  5390  000B80  D001               	goto	L5
  5391  000B82                     l4469:
  5392  000B82  0E31               	movlw	49
  5393  000B84                     L5:
  5394  000B84  6E51               	movwf	_SW_EWLT_Txt,c
  5395  000B86  D000               	goto	l4471
  5396  000B88                     l4471:
  5397                           
  5398                           ;Lab8.c: 704: drawtext(35,10, Act_Mode_Txt, 0xFFFF, 0x0000, 1);
  5399  000B88  0E0A               	movlw	10
  5400  000B8A  6E37               	movwf	drawtext@y,c
  5401  000B8C  0E4B               	movlw	low _Act_Mode_Txt
  5402  000B8E  6E38               	movwf	drawtext@_text,c
  5403  000B90  0E00               	movlw	high _Act_Mode_Txt
  5404  000B92  6E39               	movwf	drawtext@_text+1,c
  5405  000B94  0EFF               	movlw	255
  5406  000B96  6E3B               	movwf	drawtext@color+1,c
  5407  000B98  683A               	setf	drawtext@color,c
  5408  000B9A  0E00               	movlw	0
  5409  000B9C  6E3D               	movwf	drawtext@bg+1,c
  5410  000B9E  0E00               	movlw	0
  5411  000BA0  6E3C               	movwf	drawtext@bg,c
  5412  000BA2  0E01               	movlw	1
  5413  000BA4  6E3E               	movwf	drawtext@size,c
  5414  000BA6  0E23               	movlw	35
  5415  000BA8  EC9A  F009         	call	_drawtext
  5416                           
  5417                           ;Lab8.c: 705: drawtext(6, 140+9, SW_EWPED_Txt, 0xFFFF, 0x0000, 1);
  5418  000BAC  0E95               	movlw	149
  5419  000BAE  6E37               	movwf	drawtext@y,c
  5420  000BB0  0E53               	movlw	low _SW_EWPED_Txt
  5421  000BB2  6E38               	movwf	drawtext@_text,c
  5422  000BB4  0E00               	movlw	high _SW_EWPED_Txt
  5423  000BB6  6E39               	movwf	drawtext@_text+1,c
  5424  000BB8  0EFF               	movlw	255
  5425  000BBA  6E3B               	movwf	drawtext@color+1,c
  5426  000BBC  683A               	setf	drawtext@color,c
  5427  000BBE  0E00               	movlw	0
  5428  000BC0  6E3D               	movwf	drawtext@bg+1,c
  5429  000BC2  0E00               	movlw	0
  5430  000BC4  6E3C               	movwf	drawtext@bg,c
  5431  000BC6  0E01               	movlw	1
  5432  000BC8  6E3E               	movwf	drawtext@size,c
  5433  000BCA  0E06               	movlw	6
  5434  000BCC  EC9A  F009         	call	_drawtext
  5435                           
  5436                           ;Lab8.c: 706: drawtext(32, 140+9, SW_EWLT_Txt, 0xFFFF, 0x0000, 1);
  5437  000BD0  0E95               	movlw	149
  5438  000BD2  6E37               	movwf	drawtext@y,c
  5439  000BD4  0E51               	movlw	low _SW_EWLT_Txt
  5440  000BD6  6E38               	movwf	drawtext@_text,c
  5441  000BD8  0E00               	movlw	high _SW_EWLT_Txt
  5442  000BDA  6E39               	movwf	drawtext@_text+1,c
  5443  000BDC  0EFF               	movlw	255
  5444  000BDE  6E3B               	movwf	drawtext@color+1,c
  5445  000BE0  683A               	setf	drawtext@color,c
  5446  000BE2  0E00               	movlw	0
  5447  000BE4  6E3D               	movwf	drawtext@bg+1,c
  5448  000BE6  0E00               	movlw	0
  5449  000BE8  6E3C               	movwf	drawtext@bg,c
  5450  000BEA  0E01               	movlw	1
  5451  000BEC  6E3E               	movwf	drawtext@size,c
  5452  000BEE  0E20               	movlw	32
  5453  000BF0  EC9A  F009         	call	_drawtext
  5454                           
  5455                           ;Lab8.c: 707: drawtext(58, 140+9, SW_NSPED_Txt, 0xFFFF, 0x0000, 1);
  5456  000BF4  0E95               	movlw	149
  5457  000BF6  6E37               	movwf	drawtext@y,c
  5458  000BF8  0E59               	movlw	low _SW_NSPED_Txt
  5459  000BFA  6E38               	movwf	drawtext@_text,c
  5460  000BFC  0E00               	movlw	high _SW_NSPED_Txt
  5461  000BFE  6E39               	movwf	drawtext@_text+1,c
  5462  000C00  0EFF               	movlw	255
  5463  000C02  6E3B               	movwf	drawtext@color+1,c
  5464  000C04  683A               	setf	drawtext@color,c
  5465  000C06  0E00               	movlw	0
  5466  000C08  6E3D               	movwf	drawtext@bg+1,c
  5467  000C0A  0E00               	movlw	0
  5468  000C0C  6E3C               	movwf	drawtext@bg,c
  5469  000C0E  0E01               	movlw	1
  5470  000C10  6E3E               	movwf	drawtext@size,c
  5471  000C12  0E3A               	movlw	58
  5472  000C14  EC9A  F009         	call	_drawtext
  5473                           
  5474                           ;Lab8.c: 708: drawtext(87, 140+9, SW_NSLT_Txt, 0xFFFF, 0x0000, 1);
  5475  000C18  0E95               	movlw	149
  5476  000C1A  6E37               	movwf	drawtext@y,c
  5477  000C1C  0E57               	movlw	low _SW_NSLT_Txt
  5478  000C1E  6E38               	movwf	drawtext@_text,c
  5479  000C20  0E00               	movlw	high _SW_NSLT_Txt
  5480  000C22  6E39               	movwf	drawtext@_text+1,c
  5481  000C24  0EFF               	movlw	255
  5482  000C26  6E3B               	movwf	drawtext@color+1,c
  5483  000C28  683A               	setf	drawtext@color,c
  5484  000C2A  0E00               	movlw	0
  5485  000C2C  6E3D               	movwf	drawtext@bg+1,c
  5486  000C2E  0E00               	movlw	0
  5487  000C30  6E3C               	movwf	drawtext@bg,c
  5488  000C32  0E01               	movlw	1
  5489  000C34  6E3E               	movwf	drawtext@size,c
  5490  000C36  0E57               	movlw	87
  5491  000C38  EC9A  F009         	call	_drawtext
  5492                           
  5493                           ;Lab8.c: 709: drawtext(112, 140+9, SW_MODE_Txt, 0xFFFF, 0x0000, 1);
  5494  000C3C  0E95               	movlw	149
  5495  000C3E  6E37               	movwf	drawtext@y,c
  5496  000C40  0E55               	movlw	low _SW_MODE_Txt
  5497  000C42  6E38               	movwf	drawtext@_text,c
  5498  000C44  0E00               	movlw	high _SW_MODE_Txt
  5499  000C46  6E39               	movwf	drawtext@_text+1,c
  5500  000C48  0EFF               	movlw	255
  5501  000C4A  6E3B               	movwf	drawtext@color+1,c
  5502  000C4C  683A               	setf	drawtext@color,c
  5503  000C4E  0E00               	movlw	0
  5504  000C50  6E3D               	movwf	drawtext@bg+1,c
  5505  000C52  0E00               	movlw	0
  5506  000C54  6E3C               	movwf	drawtext@bg,c
  5507  000C56  0E01               	movlw	1
  5508  000C58  6E3E               	movwf	drawtext@size,c
  5509  000C5A  0E70               	movlw	112
  5510  000C5C  EC9A  F009         	call	_drawtext
  5511  000C60  0012               	return		;funcret
  5512  000C62                     __end_of_update_LCD_misc:
  5513                           	opt stack 0
  5514                           tblptru	equ	0xFF8
  5515                           tblptrh	equ	0xFF7
  5516                           tblptrl	equ	0xFF6
  5517                           tablat	equ	0xFF5
  5518                           intcon	equ	0xFF2
  5519                           intcon2	equ	0xFF1
  5520                           intcon3	equ	0xFF0
  5521                           postinc0	equ	0xFEE
  5522                           wreg	equ	0xFE8
  5523                           postdec1	equ	0xFE5
  5524                           fsr1l	equ	0xFE1
  5525                           status	equ	0xFD8
  5526                           
  5527 ;; *************** function _get_full_ADC *****************
  5528 ;; Defined at:
  5529 ;;		line 350 in file "Lab8.c"
  5530 ;; Parameters:    Size  Location     Type
  5531 ;;		None
  5532 ;; Auto vars:     Size  Location     Type
  5533 ;;  result          2   18[COMRAM] unsigned int 
  5534 ;; Return value:  Size  Location     Type
  5535 ;;                  2   14[COMRAM] unsigned int 
  5536 ;; Registers used:
  5537 ;;		wreg, status,2, status,0
  5538 ;; Tracked objects:
  5539 ;;		On entry : 0/0
  5540 ;;		On exit  : 0/0
  5541 ;;		Unchanged: 0/0
  5542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5543 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5544 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5545 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5546 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5547 ;;Total ram usage:        6 bytes
  5548 ;; Hardware stack levels used:    1
  5549 ;; Hardware stack levels required when called:    2
  5550 ;; This function calls:
  5551 ;;		Nothing
  5552 ;; This function is called by:
  5553 ;;		_main
  5554 ;;		_update_LCD_misc
  5555 ;; This function uses a non-reentrant model
  5556 ;;
  5557                           
  5558                           	psect	text22
  5559  00242E                     __ptext22:
  5560                           	opt stack 0
  5561  00242E                     _get_full_ADC:
  5562                           	opt stack 28
  5563                           
  5564                           ;Lab8.c: 352: unsigned int result;
  5565                           ;Lab8.c: 353: ADCON0bits.GO=1;
  5566                           
  5567                           ;incstack = 0
  5568  00242E  82C2               	bsf	4034,1,c	;volatile
  5569                           
  5570                           ;Lab8.c: 354: while(ADCON0bits.DONE==1);
  5571  002430  D000               	goto	l408
  5572  002432                     l408:
  5573  002432  B2C2               	btfsc	4034,1,c	;volatile
  5574  002434  D7FE               	goto	l408
  5575                           
  5576                           ;Lab8.c: 355: result = (ADRESH * 0x100) + ADRESL;
  5577  002436  50C4               	movf	4036,w,c	;volatile
  5578  002438  6E12               	movwf	(??_get_full_ADC+1)& (0+255),c
  5579  00243A  6A11               	clrf	??_get_full_ADC& (0+255),c
  5580  00243C  50C3               	movf	4035,w,c	;volatile
  5581  00243E  2411               	addwf	??_get_full_ADC,w,c
  5582  002440  6E13               	movwf	get_full_ADC@result,c
  5583  002442  0E00               	movlw	0
  5584  002444  2012               	addwfc	??_get_full_ADC+1,w,c
  5585  002446  6E14               	movwf	get_full_ADC@result+1,c
  5586                           
  5587                           ;Lab8.c: 357: return result;
  5588  002448  C013  F00F         	movff	get_full_ADC@result,?_get_full_ADC
  5589  00244C  C014  F010         	movff	get_full_ADC@result+1,?_get_full_ADC+1
  5590  002450  D000               	goto	l411
  5591  002452                     l411:
  5592  002452  0012               	return		;funcret
  5593  002454                     __end_of_get_full_ADC:
  5594                           	opt stack 0
  5595                           tblptru	equ	0xFF8
  5596                           tblptrh	equ	0xFF7
  5597                           tblptrl	equ	0xFF6
  5598                           tablat	equ	0xFF5
  5599                           intcon	equ	0xFF2
  5600                           intcon2	equ	0xFF1
  5601                           intcon3	equ	0xFF0
  5602                           postinc0	equ	0xFEE
  5603                           wreg	equ	0xFE8
  5604                           postdec1	equ	0xFE5
  5605                           fsr1l	equ	0xFE1
  5606                           status	equ	0xFD8
  5607                           
  5608 ;; *************** function ___ftge *****************
  5609 ;; Defined at:
  5610 ;;		line 4 in file "E:\XC8\sources\common\ftge.c"
  5611 ;; Parameters:    Size  Location     Type
  5612 ;;  ff1             3   14[COMRAM] float 
  5613 ;;  ff2             3   17[COMRAM] float 
  5614 ;; Auto vars:     Size  Location     Type
  5615 ;;		None
  5616 ;; Return value:  Size  Location     Type
  5617 ;;		None               void
  5618 ;; Registers used:
  5619 ;;		wreg, status,2, status,0
  5620 ;; Tracked objects:
  5621 ;;		On entry : 0/0
  5622 ;;		On exit  : 0/0
  5623 ;;		Unchanged: 0/0
  5624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5625 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5626 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5627 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5628 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5629 ;;Total ram usage:        9 bytes
  5630 ;; Hardware stack levels used:    1
  5631 ;; Hardware stack levels required when called:    2
  5632 ;; This function calls:
  5633 ;;		Nothing
  5634 ;; This function is called by:
  5635 ;;		_main
  5636 ;;		_update_LCD_misc
  5637 ;; This function uses a non-reentrant model
  5638 ;;
  5639                           
  5640                           	psect	text23
  5641  001AAC                     __ptext23:
  5642                           	opt stack 0
  5643  001AAC                     ___ftge:
  5644                           	opt stack 28
  5645                           
  5646                           ;incstack = 0
  5647  001AAC  AE11               	btfss	___ftge@ff1+2,7,c
  5648  001AAE  D017               	goto	l4339
  5649  001AB0  C00F  F015         	movff	___ftge@ff1,??___ftge
  5650  001AB4  C010  F016         	movff	___ftge@ff1+1,??___ftge+1
  5651  001AB8  C011  F017         	movff	___ftge@ff1+2,??___ftge+2
  5652  001ABC  1E15               	comf	??___ftge,f,c
  5653  001ABE  1E16               	comf	??___ftge+1,f,c
  5654  001AC0  1E17               	comf	??___ftge+2,f,c
  5655  001AC2  2A15               	incf	??___ftge,f,c
  5656  001AC4  0E00               	movlw	0
  5657  001AC6  2216               	addwfc	??___ftge+1,f,c
  5658  001AC8  2217               	addwfc	??___ftge+2,f,c
  5659  001ACA  0E00               	movlw	0
  5660  001ACC  2415               	addwf	??___ftge,w,c
  5661  001ACE  6E0F               	movwf	___ftge@ff1,c
  5662  001AD0  0E00               	movlw	0
  5663  001AD2  2016               	addwfc	??___ftge+1,w,c
  5664  001AD4  6E10               	movwf	___ftge@ff1+1,c
  5665  001AD6  0E80               	movlw	128
  5666  001AD8  2017               	addwfc	??___ftge+2,w,c
  5667  001ADA  6E11               	movwf	___ftge@ff1+2,c
  5668  001ADC  D000               	goto	l4339
  5669  001ADE                     l4339:
  5670  001ADE  AE14               	btfss	___ftge@ff2+2,7,c
  5671  001AE0  D017               	goto	l4343
  5672  001AE2  C012  F015         	movff	___ftge@ff2,??___ftge
  5673  001AE6  C013  F016         	movff	___ftge@ff2+1,??___ftge+1
  5674  001AEA  C014  F017         	movff	___ftge@ff2+2,??___ftge+2
  5675  001AEE  1E15               	comf	??___ftge,f,c
  5676  001AF0  1E16               	comf	??___ftge+1,f,c
  5677  001AF2  1E17               	comf	??___ftge+2,f,c
  5678  001AF4  2A15               	incf	??___ftge,f,c
  5679  001AF6  0E00               	movlw	0
  5680  001AF8  2216               	addwfc	??___ftge+1,f,c
  5681  001AFA  2217               	addwfc	??___ftge+2,f,c
  5682  001AFC  0E00               	movlw	0
  5683  001AFE  2415               	addwf	??___ftge,w,c
  5684  001B00  6E12               	movwf	___ftge@ff2,c
  5685  001B02  0E00               	movlw	0
  5686  001B04  2016               	addwfc	??___ftge+1,w,c
  5687  001B06  6E13               	movwf	___ftge@ff2+1,c
  5688  001B08  0E80               	movlw	128
  5689  001B0A  2017               	addwfc	??___ftge+2,w,c
  5690  001B0C  6E14               	movwf	___ftge@ff2+2,c
  5691  001B0E  D000               	goto	l4343
  5692  001B10                     l4343:
  5693  001B10  0E00               	movlw	0
  5694  001B12  1A0F               	xorwf	___ftge@ff1,f,c
  5695  001B14  0E00               	movlw	0
  5696  001B16  1A10               	xorwf	___ftge@ff1+1,f,c
  5697  001B18  0E80               	movlw	128
  5698  001B1A  1A11               	xorwf	___ftge@ff1+2,f,c
  5699  001B1C  0E00               	movlw	0
  5700  001B1E  1A12               	xorwf	___ftge@ff2,f,c
  5701  001B20  0E00               	movlw	0
  5702  001B22  1A13               	xorwf	___ftge@ff2+1,f,c
  5703  001B24  0E80               	movlw	128
  5704  001B26  1A14               	xorwf	___ftge@ff2+2,f,c
  5705  001B28  5012               	movf	___ftge@ff2,w,c
  5706  001B2A  5C0F               	subwf	___ftge@ff1,w,c
  5707  001B2C  5013               	movf	___ftge@ff2+1,w,c
  5708  001B2E  5810               	subwfb	___ftge@ff1+1,w,c
  5709  001B30  5014               	movf	___ftge@ff2+2,w,c
  5710  001B32  5811               	subwfb	___ftge@ff1+2,w,c
  5711  001B34  B0D8               	btfsc	status,0,c
  5712  001B36  D002               	goto	l4349
  5713  001B38  90D8               	bcf	status,0,c
  5714  001B3A  D002               	goto	l959
  5715  001B3C                     l4349:
  5716  001B3C  80D8               	bsf	status,0,c
  5717  001B3E  D000               	goto	l959
  5718  001B40                     l959:
  5719  001B40  0012               	return		;funcret
  5720  001B42                     __end_of___ftge:
  5721                           	opt stack 0
  5722                           tblptru	equ	0xFF8
  5723                           tblptrh	equ	0xFF7
  5724                           tblptrl	equ	0xFF6
  5725                           tablat	equ	0xFF5
  5726                           intcon	equ	0xFF2
  5727                           intcon2	equ	0xFF1
  5728                           intcon3	equ	0xFF0
  5729                           postinc0	equ	0xFEE
  5730                           wreg	equ	0xFE8
  5731                           postdec1	equ	0xFE5
  5732                           fsr1l	equ	0xFE1
  5733                           status	equ	0xFD8
  5734                           
  5735 ;; *************** function ___ftdiv *****************
  5736 ;; Defined at:
  5737 ;;		line 54 in file "E:\XC8\sources\common\ftdiv.c"
  5738 ;; Parameters:    Size  Location     Type
  5739 ;;  f1              3   26[COMRAM] float 
  5740 ;;  f2              3   29[COMRAM] float 
  5741 ;; Auto vars:     Size  Location     Type
  5742 ;;  f3              3   36[COMRAM] float 
  5743 ;;  sign            1   40[COMRAM] unsigned char 
  5744 ;;  exp             1   39[COMRAM] unsigned char 
  5745 ;;  cntr            1   35[COMRAM] unsigned char 
  5746 ;; Return value:  Size  Location     Type
  5747 ;;                  3   26[COMRAM] float 
  5748 ;; Registers used:
  5749 ;;		wreg, status,2, status,0, cstack
  5750 ;; Tracked objects:
  5751 ;;		On entry : 0/0
  5752 ;;		On exit  : 0/0
  5753 ;;		Unchanged: 0/0
  5754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5755 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5756 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5757 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5758 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5759 ;;Total ram usage:       15 bytes
  5760 ;; Hardware stack levels used:    1
  5761 ;; Hardware stack levels required when called:    3
  5762 ;; This function calls:
  5763 ;;		___ftpack
  5764 ;; This function is called by:
  5765 ;;		_main
  5766 ;;		_update_LCD_misc
  5767 ;; This function uses a non-reentrant model
  5768 ;;
  5769                           
  5770                           	psect	text24
  5771  001530                     __ptext24:
  5772                           	opt stack 0
  5773  001530                     ___ftdiv:
  5774                           	opt stack 27
  5775                           
  5776                           ;incstack = 0
  5777  001530  C01D  F021         	movff	___ftdiv@f1+2,??___ftdiv
  5778  001534  6A22               	clrf	(??___ftdiv+1)& (0+255),c
  5779  001536  6A23               	clrf	(??___ftdiv+2)& (0+255),c
  5780  001538  341C               	rlcf	___ftdiv@f1+1,w,c
  5781  00153A  3621               	rlcf	??___ftdiv& (0+255),f,c
  5782  00153C  E301               	bnc	u3091
  5783  00153E  8022               	bsf	(??___ftdiv+1)& (0+255),0,c
  5784  001540                     u3091:
  5785  001540  5021               	movf	??___ftdiv,w,c
  5786  001542  6E28               	movwf	___ftdiv@exp,c
  5787  001544  5028               	movf	___ftdiv@exp,w,c
  5788  001546  A4D8               	btfss	status,2,c
  5789  001548  D002               	goto	l4283
  5790  00154A  D00E               	goto	l4285
  5791  00154C  D061               	goto	l950
  5792  00154E                     l4283:
  5793  00154E  C020  F021         	movff	___ftdiv@f2+2,??___ftdiv
  5794  001552  6A22               	clrf	(??___ftdiv+1)& (0+255),c
  5795  001554  6A23               	clrf	(??___ftdiv+2)& (0+255),c
  5796  001556  341F               	rlcf	___ftdiv@f2+1,w,c
  5797  001558  3621               	rlcf	??___ftdiv& (0+255),f,c
  5798  00155A  E301               	bnc	u3111
  5799  00155C  8022               	bsf	(??___ftdiv+1)& (0+255),0,c
  5800  00155E                     u3111:
  5801  00155E  5021               	movf	??___ftdiv,w,c
  5802  001560  6E29               	movwf	___ftdiv@sign,c
  5803  001562  5029               	movf	___ftdiv@sign,w,c
  5804  001564  A4D8               	btfss	status,2,c
  5805  001566  D007               	goto	l4289
  5806  001568                     l4285:
  5807  001568  0E00               	movlw	0
  5808  00156A  6E1B               	movwf	?___ftdiv,c
  5809  00156C  0E00               	movlw	0
  5810  00156E  6E1C               	movwf	?___ftdiv+1,c
  5811  001570  0E00               	movlw	0
  5812  001572  6E1D               	movwf	?___ftdiv+2,c
  5813  001574  D04D               	goto	l950
  5814  001576                     l4289:
  5815  001576  0E00               	movlw	0
  5816  001578  6E25               	movwf	___ftdiv@f3,c
  5817  00157A  0E00               	movlw	0
  5818  00157C  6E26               	movwf	___ftdiv@f3+1,c
  5819  00157E  0E00               	movlw	0
  5820  001580  6E27               	movwf	___ftdiv@f3+2,c
  5821  001582  5029               	movf	___ftdiv@sign,w,c
  5822  001584  0F89               	addlw	137
  5823  001586  5E28               	subwf	___ftdiv@exp,f,c
  5824  001588  C01D  F029         	movff	___ftdiv@f1+2,___ftdiv@sign
  5825  00158C  5020               	movf	___ftdiv@f2+2,w,c
  5826  00158E  1A29               	xorwf	___ftdiv@sign,f,c
  5827  001590  0E80               	movlw	128
  5828  001592  1629               	andwf	___ftdiv@sign,f,c
  5829  001594  8E1C               	bsf	___ftdiv@f1+1,7,c
  5830  001596  0EFF               	movlw	255
  5831  001598  161B               	andwf	___ftdiv@f1,f,c
  5832  00159A  0EFF               	movlw	255
  5833  00159C  161C               	andwf	___ftdiv@f1+1,f,c
  5834  00159E  0E00               	movlw	0
  5835  0015A0  161D               	andwf	___ftdiv@f1+2,f,c
  5836  0015A2  8E1F               	bsf	___ftdiv@f2+1,7,c
  5837  0015A4  0EFF               	movlw	255
  5838  0015A6  161E               	andwf	___ftdiv@f2,f,c
  5839  0015A8  0EFF               	movlw	255
  5840  0015AA  161F               	andwf	___ftdiv@f2+1,f,c
  5841  0015AC  0E00               	movlw	0
  5842  0015AE  1620               	andwf	___ftdiv@f2+2,f,c
  5843  0015B0  0E18               	movlw	24
  5844  0015B2  6E24               	movwf	___ftdiv@cntr,c
  5845  0015B4  D000               	goto	l4309
  5846  0015B6                     l4309:
  5847  0015B6  90D8               	bcf	status,0,c
  5848  0015B8  3625               	rlcf	___ftdiv@f3,f,c
  5849  0015BA  3626               	rlcf	___ftdiv@f3+1,f,c
  5850  0015BC  3627               	rlcf	___ftdiv@f3+2,f,c
  5851  0015BE  501E               	movf	___ftdiv@f2,w,c
  5852  0015C0  5C1B               	subwf	___ftdiv@f1,w,c
  5853  0015C2  501F               	movf	___ftdiv@f2+1,w,c
  5854  0015C4  581C               	subwfb	___ftdiv@f1+1,w,c
  5855  0015C6  5020               	movf	___ftdiv@f2+2,w,c
  5856  0015C8  581D               	subwfb	___ftdiv@f1+2,w,c
  5857  0015CA  A0D8               	btfss	status,0,c
  5858  0015CC  D007               	goto	l953
  5859  0015CE  501E               	movf	___ftdiv@f2,w,c
  5860  0015D0  5E1B               	subwf	___ftdiv@f1,f,c
  5861  0015D2  501F               	movf	___ftdiv@f2+1,w,c
  5862  0015D4  5A1C               	subwfb	___ftdiv@f1+1,f,c
  5863  0015D6  5020               	movf	___ftdiv@f2+2,w,c
  5864  0015D8  5A1D               	subwfb	___ftdiv@f1+2,f,c
  5865  0015DA  8025               	bsf	___ftdiv@f3,0,c
  5866  0015DC                     l953:
  5867  0015DC  90D8               	bcf	status,0,c
  5868  0015DE  361B               	rlcf	___ftdiv@f1,f,c
  5869  0015E0  361C               	rlcf	___ftdiv@f1+1,f,c
  5870  0015E2  361D               	rlcf	___ftdiv@f1+2,f,c
  5871  0015E4  2E24               	decfsz	___ftdiv@cntr,f,c
  5872  0015E6  D7E7               	goto	l4309
  5873  0015E8  D000               	goto	l4319
  5874  0015EA                     l4319:
  5875  0015EA  C025  F00F         	movff	___ftdiv@f3,___ftpack@arg
  5876  0015EE  C026  F010         	movff	___ftdiv@f3+1,___ftpack@arg+1
  5877  0015F2  C027  F011         	movff	___ftdiv@f3+2,___ftpack@arg+2
  5878  0015F6  C028  F012         	movff	___ftdiv@exp,___ftpack@exp
  5879  0015FA  C029  F013         	movff	___ftdiv@sign,___ftpack@sign
  5880  0015FE  EC46  F00C         	call	___ftpack	;wreg free
  5881  001602  C00F  F01B         	movff	?___ftpack,?___ftdiv
  5882  001606  C010  F01C         	movff	?___ftpack+1,?___ftdiv+1
  5883  00160A  C011  F01D         	movff	?___ftpack+2,?___ftdiv+2
  5884  00160E  D000               	goto	l950
  5885  001610                     l950:
  5886  001610  0012               	return		;funcret
  5887  001612                     __end_of___ftdiv:
  5888                           	opt stack 0
  5889                           tblptru	equ	0xFF8
  5890                           tblptrh	equ	0xFF7
  5891                           tblptrl	equ	0xFF6
  5892                           tablat	equ	0xFF5
  5893                           intcon	equ	0xFF2
  5894                           intcon2	equ	0xFF1
  5895                           intcon3	equ	0xFF0
  5896                           postinc0	equ	0xFEE
  5897                           wreg	equ	0xFE8
  5898                           postdec1	equ	0xFE5
  5899                           fsr1l	equ	0xFE1
  5900                           status	equ	0xFD8
  5901                           
  5902 ;; *************** function ___awtoft *****************
  5903 ;; Defined at:
  5904 ;;		line 32 in file "E:\XC8\sources\common\awtoft.c"
  5905 ;; Parameters:    Size  Location     Type
  5906 ;;  c               2   22[COMRAM] int 
  5907 ;; Auto vars:     Size  Location     Type
  5908 ;;  sign            1   25[COMRAM] unsigned char 
  5909 ;; Return value:  Size  Location     Type
  5910 ;;                  3   22[COMRAM] float 
  5911 ;; Registers used:
  5912 ;;		wreg, status,2, status,0, cstack
  5913 ;; Tracked objects:
  5914 ;;		On entry : 0/0
  5915 ;;		On exit  : 0/0
  5916 ;;		Unchanged: 0/0
  5917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5918 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5919 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5920 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5921 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5922 ;;Total ram usage:        4 bytes
  5923 ;; Hardware stack levels used:    1
  5924 ;; Hardware stack levels required when called:    3
  5925 ;; This function calls:
  5926 ;;		___ftpack
  5927 ;; This function is called by:
  5928 ;;		_main
  5929 ;;		_update_LCD_misc
  5930 ;; This function uses a non-reentrant model
  5931 ;;
  5932                           
  5933                           	psect	text25
  5934  0022DC                     __ptext25:
  5935                           	opt stack 0
  5936  0022DC                     ___awtoft:
  5937                           	opt stack 27
  5938                           
  5939                           ;incstack = 0
  5940  0022DC  0E00               	movlw	0
  5941  0022DE  6E1A               	movwf	___awtoft@sign,c
  5942  0022E0  AE18               	btfss	___awtoft@c+1,7,c
  5943  0022E2  D007               	goto	l4331
  5944  0022E4  6C17               	negf	___awtoft@c,c
  5945  0022E6  1E18               	comf	___awtoft@c+1,f,c
  5946  0022E8  B0D8               	btfsc	status,0,c
  5947  0022EA  2A18               	incf	___awtoft@c+1,f,c
  5948  0022EC  0E01               	movlw	1
  5949  0022EE  6E1A               	movwf	___awtoft@sign,c
  5950  0022F0  D000               	goto	l4331
  5951  0022F2                     l4331:
  5952  0022F2  C017  F00F         	movff	___awtoft@c,___ftpack@arg
  5953  0022F6  C018  F010         	movff	___awtoft@c+1,___ftpack@arg+1
  5954  0022FA  6A11               	clrf	___ftpack@arg+2,c
  5955  0022FC  0E8E               	movlw	142
  5956  0022FE  6E12               	movwf	___ftpack@exp,c
  5957  002300  C01A  F013         	movff	___awtoft@sign,___ftpack@sign
  5958  002304  EC46  F00C         	call	___ftpack	;wreg free
  5959  002308  C00F  F017         	movff	?___ftpack,?___awtoft
  5960  00230C  C010  F018         	movff	?___ftpack+1,?___awtoft+1
  5961  002310  C011  F019         	movff	?___ftpack+2,?___awtoft+2
  5962  002314  D000               	goto	l788
  5963  002316                     l788:
  5964  002316  0012               	return		;funcret
  5965  002318                     __end_of___awtoft:
  5966                           	opt stack 0
  5967                           tblptru	equ	0xFF8
  5968                           tblptrh	equ	0xFF7
  5969                           tblptrl	equ	0xFF6
  5970                           tablat	equ	0xFF5
  5971                           intcon	equ	0xFF2
  5972                           intcon2	equ	0xFF1
  5973                           intcon3	equ	0xFF0
  5974                           postinc0	equ	0xFEE
  5975                           wreg	equ	0xFE8
  5976                           postdec1	equ	0xFE5
  5977                           fsr1l	equ	0xFE1
  5978                           status	equ	0xFD8
  5979                           
  5980 ;; *************** function ___ftpack *****************
  5981 ;; Defined at:
  5982 ;;		line 62 in file "E:\XC8\sources\common\float.c"
  5983 ;; Parameters:    Size  Location     Type
  5984 ;;  arg             3   14[COMRAM] unsigned um
  5985 ;;  exp             1   17[COMRAM] unsigned char 
  5986 ;;  sign            1   18[COMRAM] unsigned char 
  5987 ;; Auto vars:     Size  Location     Type
  5988 ;;		None
  5989 ;; Return value:  Size  Location     Type
  5990 ;;                  3   14[COMRAM] float 
  5991 ;; Registers used:
  5992 ;;		wreg, status,2, status,0
  5993 ;; Tracked objects:
  5994 ;;		On entry : 0/0
  5995 ;;		On exit  : 0/0
  5996 ;;		Unchanged: 0/0
  5997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5998 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5999 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6000 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6001 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6002 ;;Total ram usage:        8 bytes
  6003 ;; Hardware stack levels used:    1
  6004 ;; Hardware stack levels required when called:    2
  6005 ;; This function calls:
  6006 ;;		Nothing
  6007 ;; This function is called by:
  6008 ;;		___awtoft
  6009 ;;		___ftdiv
  6010 ;; This function uses a non-reentrant model
  6011 ;;
  6012                           
  6013                           	psect	text26
  6014  00188C                     __ptext26:
  6015                           	opt stack 0
  6016  00188C                     ___ftpack:
  6017                           	opt stack 27
  6018                           
  6019                           ;incstack = 0
  6020  00188C  5012               	movf	___ftpack@exp,w,c
  6021  00188E  B4D8               	btfsc	status,2,c
  6022  001890  D005               	goto	l4169
  6023  001892  500F               	movf	___ftpack@arg,w,c
  6024  001894  1010               	iorwf	___ftpack@arg+1,w,c
  6025  001896  1011               	iorwf	___ftpack@arg+2,w,c
  6026  001898  A4D8               	btfss	status,2,c
  6027  00189A  D00E               	goto	l4175
  6028  00189C                     l4169:
  6029  00189C  0E00               	movlw	0
  6030  00189E  6E0F               	movwf	?___ftpack,c
  6031  0018A0  0E00               	movlw	0
  6032  0018A2  6E10               	movwf	?___ftpack+1,c
  6033  0018A4  0E00               	movlw	0
  6034  0018A6  6E11               	movwf	?___ftpack+2,c
  6035  0018A8  D053               	goto	l878
  6036  0018AA  D006               	goto	l4175
  6037  0018AC                     l4173:
  6038  0018AC  2A12               	incf	___ftpack@exp,f,c
  6039  0018AE  90D8               	bcf	status,0,c
  6040  0018B0  3211               	rrcf	___ftpack@arg+2,f,c
  6041  0018B2  3210               	rrcf	___ftpack@arg+1,f,c
  6042  0018B4  320F               	rrcf	___ftpack@arg,f,c
  6043  0018B6  D000               	goto	l4175
  6044  0018B8                     l4175:
  6045  0018B8  0E00               	movlw	0
  6046  0018BA  140F               	andwf	___ftpack@arg,w,c
  6047  0018BC  6E14               	movwf	??___ftpack& (0+255),c
  6048  0018BE  0E00               	movlw	0
  6049  0018C0  1410               	andwf	___ftpack@arg+1,w,c
  6050  0018C2  6E15               	movwf	(??___ftpack+1)& (0+255),c
  6051  0018C4  0EFE               	movlw	254
  6052  0018C6  1411               	andwf	___ftpack@arg+2,w,c
  6053  0018C8  6E16               	movwf	(??___ftpack+2)& (0+255),c
  6054  0018CA  5014               	movf	??___ftpack,w,c
  6055  0018CC  1015               	iorwf	??___ftpack+1,w,c
  6056  0018CE  1016               	iorwf	??___ftpack+2,w,c
  6057  0018D0  B4D8               	btfsc	status,2,c
  6058  0018D2  D00E               	goto	l4181
  6059  0018D4  D7EB               	goto	l4173
  6060  0018D6  D00C               	goto	l4181
  6061  0018D8                     l4177:
  6062  0018D8  2A12               	incf	___ftpack@exp,f,c
  6063  0018DA  0E01               	movlw	1
  6064  0018DC  260F               	addwf	___ftpack@arg,f,c
  6065  0018DE  0E00               	movlw	0
  6066  0018E0  2210               	addwfc	___ftpack@arg+1,f,c
  6067  0018E2  0E00               	movlw	0
  6068  0018E4  2211               	addwfc	___ftpack@arg+2,f,c
  6069  0018E6  90D8               	bcf	status,0,c
  6070  0018E8  3211               	rrcf	___ftpack@arg+2,f,c
  6071  0018EA  3210               	rrcf	___ftpack@arg+1,f,c
  6072  0018EC  320F               	rrcf	___ftpack@arg,f,c
  6073  0018EE  D000               	goto	l4181
  6074  0018F0                     l4181:
  6075  0018F0  0E00               	movlw	0
  6076  0018F2  140F               	andwf	___ftpack@arg,w,c
  6077  0018F4  6E14               	movwf	??___ftpack& (0+255),c
  6078  0018F6  0E00               	movlw	0
  6079  0018F8  1410               	andwf	___ftpack@arg+1,w,c
  6080  0018FA  6E15               	movwf	(??___ftpack+1)& (0+255),c
  6081  0018FC  0EFF               	movlw	255
  6082  0018FE  1411               	andwf	___ftpack@arg+2,w,c
  6083  001900  6E16               	movwf	(??___ftpack+2)& (0+255),c
  6084  001902  5014               	movf	??___ftpack,w,c
  6085  001904  1015               	iorwf	??___ftpack+1,w,c
  6086  001906  1016               	iorwf	??___ftpack+2,w,c
  6087  001908  B4D8               	btfsc	status,2,c
  6088  00190A  D008               	goto	l4185
  6089  00190C  D7E5               	goto	l4177
  6090  00190E  D006               	goto	l4185
  6091  001910                     l4183:
  6092  001910  0612               	decf	___ftpack@exp,f,c
  6093  001912  90D8               	bcf	status,0,c
  6094  001914  360F               	rlcf	___ftpack@arg,f,c
  6095  001916  3610               	rlcf	___ftpack@arg+1,f,c
  6096  001918  3611               	rlcf	___ftpack@arg+2,f,c
  6097  00191A  D000               	goto	l4185
  6098  00191C                     l4185:
  6099  00191C  BE10               	btfsc	___ftpack@arg+1,7,c
  6100  00191E  D004               	goto	l889
  6101  001920  0E02               	movlw	2
  6102  001922  6012               	cpfslt	___ftpack@exp,c
  6103  001924  D7F5               	goto	l4183
  6104  001926  D000               	goto	l889
  6105  001928                     l889:
  6106  001928  B012               	btfsc	___ftpack@exp,0,c
  6107  00192A  D002               	goto	l4191
  6108  00192C  9E10               	bcf	___ftpack@arg+1,7,c
  6109  00192E  D000               	goto	l4191
  6110  001930                     l4191:
  6111  001930  90D8               	bcf	status,0,c
  6112  001932  3212               	rrcf	___ftpack@exp,f,c
  6113  001934  5012               	movf	___ftpack@exp,w,c
  6114  001936  1211               	iorwf	___ftpack@arg+2,f,c
  6115  001938  5013               	movf	___ftpack@sign,w,c
  6116  00193A  B4D8               	btfsc	status,2,c
  6117  00193C  D002               	goto	l4197
  6118  00193E  8E11               	bsf	___ftpack@arg+2,7,c
  6119  001940  D000               	goto	l4197
  6120  001942                     l4197:
  6121  001942  C00F  F00F         	movff	___ftpack@arg,?___ftpack
  6122  001946  C010  F010         	movff	___ftpack@arg+1,?___ftpack+1
  6123  00194A  C011  F011         	movff	___ftpack@arg+2,?___ftpack+2
  6124  00194E  D000               	goto	l878
  6125  001950                     l878:
  6126  001950  0012               	return		;funcret
  6127  001952                     __end_of___ftpack:
  6128                           	opt stack 0
  6129                           tblptru	equ	0xFF8
  6130                           tblptrh	equ	0xFF7
  6131                           tblptrl	equ	0xFF6
  6132                           tablat	equ	0xFF5
  6133                           intcon	equ	0xFF2
  6134                           intcon2	equ	0xFF1
  6135                           intcon3	equ	0xFF0
  6136                           postinc0	equ	0xFEE
  6137                           wreg	equ	0xFE8
  6138                           postdec1	equ	0xFE5
  6139                           fsr1l	equ	0xFE1
  6140                           status	equ	0xFD8
  6141                           
  6142 ;; *************** function _strcpy *****************
  6143 ;; Defined at:
  6144 ;;		line 8 in file "E:\XC8\sources\common\strcpy.c"
  6145 ;; Parameters:    Size  Location     Type
  6146 ;;  to              2   14[COMRAM] PTR unsigned char 
  6147 ;;		 -> NULL(0), buffer(31), 
  6148 ;;  from            2   16[COMRAM] PTR const unsigned char 
  6149 ;;		 -> STR_14(2), STR_13(2), STR_12(21), STR_11(4), 
  6150 ;;		 -> STR_10(4), STR_9(7), STR_8(12), STR_7(7), 
  6151 ;;		 -> STR_6(10), STR_5(2), STR_4(4), STR_3(4), 
  6152 ;;		 -> STR_2(6), STR_1(20), 
  6153 ;; Auto vars:     Size  Location     Type
  6154 ;;  cp              2   18[COMRAM] PTR unsigned char 
  6155 ;;		 -> NULL(0), buffer(31), 
  6156 ;; Return value:  Size  Location     Type
  6157 ;;                  2   14[COMRAM] PTR unsigned char 
  6158 ;; Registers used:
  6159 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  6160 ;; Tracked objects:
  6161 ;;		On entry : 0/0
  6162 ;;		On exit  : 0/0
  6163 ;;		Unchanged: 0/0
  6164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6165 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6166 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6167 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6168 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6169 ;;Total ram usage:        6 bytes
  6170 ;; Hardware stack levels used:    1
  6171 ;; Hardware stack levels required when called:    2
  6172 ;; This function calls:
  6173 ;;		Nothing
  6174 ;; This function is called by:
  6175 ;;		_Initialize_Screen
  6176 ;;		_Wait_One_Second
  6177 ;; This function uses a non-reentrant model
  6178 ;;
  6179                           
  6180                           	psect	text27
  6181  002350                     __ptext27:
  6182                           	opt stack 0
  6183  002350                     _strcpy:
  6184                           	opt stack 25
  6185                           
  6186                           ;incstack = 0
  6187  002350  C00F  F013         	movff	strcpy@to,strcpy@cp
  6188  002354  C010  F014         	movff	strcpy@to+1,strcpy@cp+1
  6189  002358  D005               	goto	l4421
  6190  00235A                     l4419:
  6191  00235A  4A13               	infsnz	strcpy@cp,f,c
  6192  00235C  2A14               	incf	strcpy@cp+1,f,c
  6193  00235E  4A11               	infsnz	strcpy@from,f,c
  6194  002360  2A12               	incf	strcpy@from+1,f,c
  6195  002362  D000               	goto	l4421
  6196  002364                     l4421:
  6197  002364  C011  FFF6         	movff	strcpy@from,tblptrl
  6198  002368  C012  FFF7         	movff	strcpy@from+1,tblptrh
  6199  00236C                     	if	0	;tblptru may be non-zero
  6200  00236C                     	endif
  6201  00236C                     	if	0	;tblptru may be non-zero
  6202  00236C                     	endif
  6203  00236C  C013  FFD9         	movff	strcpy@cp,fsr2l
  6204  002370  C014  FFDA         	movff	strcpy@cp+1,fsr2h
  6205  002374  0008               	tblrd		*
  6206  002376  CFF5 FFDF          	movff	tablat,indf2
  6207  00237A  50DF               	movf	indf2,w,c
  6208  00237C  A4D8               	btfss	status,2,c
  6209  00237E  D7ED               	goto	l4419
  6210                           
  6211                           ;	Return value of _strcpy is never used
  6212  002380  0012               	return		;funcret
  6213  002382                     __end_of_strcpy:
  6214                           	opt stack 0
  6215                           tblptru	equ	0xFF8
  6216                           tblptrh	equ	0xFF7
  6217                           tblptrl	equ	0xFF6
  6218                           tablat	equ	0xFF5
  6219                           intcon	equ	0xFF2
  6220                           intcon2	equ	0xFF1
  6221                           intcon3	equ	0xFF0
  6222                           postinc0	equ	0xFEE
  6223                           wreg	equ	0xFE8
  6224                           postdec1	equ	0xFE5
  6225                           fsr1l	equ	0xFE1
  6226                           indf2	equ	0xFDF
  6227                           fsr2h	equ	0xFDA
  6228                           fsr2l	equ	0xFD9
  6229                           status	equ	0xFD8
  6230                           
  6231 ;; *************** function _Set_NS_LT *****************
  6232 ;; Defined at:
  6233 ;;		line 374 in file "Lab8.c"
  6234 ;; Parameters:    Size  Location     Type
  6235 ;;  color           1    wreg     unsigned char 
  6236 ;; Auto vars:     Size  Location     Type
  6237 ;;  color           1    3[BANK0 ] unsigned char 
  6238 ;; Return value:  Size  Location     Type
  6239 ;;		None               void
  6240 ;; Registers used:
  6241 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6242 ;; Tracked objects:
  6243 ;;		On entry : 0/0
  6244 ;;		On exit  : 0/0
  6245 ;;		Unchanged: 0/0
  6246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6247 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6248 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6249 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6250 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6251 ;;Total ram usage:        1 bytes
  6252 ;; Hardware stack levels used:    1
  6253 ;; Hardware stack levels required when called:    9
  6254 ;; This function calls:
  6255 ;;		_update_LCD_color
  6256 ;; This function is called by:
  6257 ;;		_Day_Mode
  6258 ;;		_Night_Mode
  6259 ;; This function uses a non-reentrant model
  6260 ;;
  6261                           
  6262                           	psect	text28
  6263  002140                     __ptext28:
  6264                           	opt stack 0
  6265  002140                     _Set_NS_LT:
  6266                           	opt stack 20
  6267                           
  6268                           ;incstack = 0
  6269                           ;Set_NS_LT@color stored from wreg
  6270  002140  0100               	movlb	0	; () banked
  6271  002142  6FAA               	movwf	Set_NS_LT@color& (0+255),b
  6272                           
  6273                           ; BSR set to: 0
  6274                           ;Lab8.c: 376: direction = 3;
  6275  002144  0E03               	movlw	3
  6276  002146  6E70               	movwf	_direction,c
  6277                           
  6278                           ; BSR set to: 0
  6279                           ;Lab8.c: 377: update_LCD_color(direction, color);
  6280  002148  C0AA  F0A7         	movff	Set_NS_LT@color,update_LCD_color@color
  6281  00214C  5070               	movf	_direction,w,c
  6282  00214E  EC9D  F003         	call	_update_LCD_color
  6283                           
  6284                           ;Lab8.c: 378: switch (color)
  6285  002152  D00A               	goto	l4883
  6286  002154                     l424:
  6287                           
  6288                           ; BSR set to: 0
  6289  002154  9881               	bcf	3969,4,c	;volatile
  6290  002156  D001               	goto	L6
  6291  002158                     l426:
  6292                           
  6293                           ; BSR set to: 0
  6294  002158  8881               	bsf	3969,4,c	;volatile
  6295  00215A                     L6:
  6296  00215A  9A81               	bcf	3969,5,c	;volatile
  6297  00215C  D014               	goto	l429
  6298  00215E                     l427:
  6299                           
  6300                           ; BSR set to: 0
  6301  00215E  9881               	bcf	3969,4,c	;volatile
  6302  002160  D001               	goto	L7
  6303  002162                     l428:
  6304                           
  6305                           ; BSR set to: 0
  6306  002162  8881               	bsf	3969,4,c	;volatile
  6307  002164                     L7:
  6308  002164  8A81               	bsf	3969,5,c	;volatile
  6309                           
  6310                           ; BSR set to: 0
  6311                           ;Lab8.c: 384: }
  6312  002166  D00F               	goto	l429
  6313  002168                     l4883:
  6314  002168  0100               	movlb	0	; () banked
  6315  00216A  51AA               	movf	Set_NS_LT@color& (0+255),w,b
  6316                           
  6317                           ; Switch size 1, requested type "space"
  6318                           ; Number of cases is 4, Range of values is 0 to 3
  6319                           ; switch strategies available:
  6320                           ; Name         Instructions Cycles
  6321                           ; simple_byte           13     7 (average)
  6322                           ;	Chosen strategy is simple_byte
  6323  00216C  0A00               	xorlw	0	; case 0
  6324  00216E  B4D8               	btfsc	status,2,c
  6325  002170  D7F1               	goto	l424
  6326  002172  0A01               	xorlw	1	; case 1
  6327  002174  B4D8               	btfsc	status,2,c
  6328  002176  D7F0               	goto	l426
  6329  002178  0A03               	xorlw	3	; case 2
  6330  00217A  B4D8               	btfsc	status,2,c
  6331  00217C  D7F0               	goto	l427
  6332  00217E  0A01               	xorlw	1	; case 3
  6333  002180  B4D8               	btfsc	status,2,c
  6334  002182  D7EF               	goto	l428
  6335  002184  D000               	goto	l429
  6336  002186                     l429:
  6337                           
  6338                           ; BSR set to: 0
  6339  002186  0012               	return		;funcret
  6340  002188                     __end_of_Set_NS_LT:
  6341                           	opt stack 0
  6342                           tblptru	equ	0xFF8
  6343                           tblptrh	equ	0xFF7
  6344                           tblptrl	equ	0xFF6
  6345                           tablat	equ	0xFF5
  6346                           intcon	equ	0xFF2
  6347                           intcon2	equ	0xFF1
  6348                           intcon3	equ	0xFF0
  6349                           postinc0	equ	0xFEE
  6350                           wreg	equ	0xFE8
  6351                           postdec1	equ	0xFE5
  6352                           fsr1l	equ	0xFE1
  6353                           indf2	equ	0xFDF
  6354                           fsr2h	equ	0xFDA
  6355                           fsr2l	equ	0xFD9
  6356                           status	equ	0xFD8
  6357                           
  6358 ;; *************** function _Set_NS *****************
  6359 ;; Defined at:
  6360 ;;		line 360 in file "Lab8.c"
  6361 ;; Parameters:    Size  Location     Type
  6362 ;;  color           1    wreg     unsigned char 
  6363 ;; Auto vars:     Size  Location     Type
  6364 ;;  color           1    3[BANK0 ] unsigned char 
  6365 ;; Return value:  Size  Location     Type
  6366 ;;		None               void
  6367 ;; Registers used:
  6368 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6369 ;; Tracked objects:
  6370 ;;		On entry : 0/0
  6371 ;;		On exit  : 0/0
  6372 ;;		Unchanged: 0/0
  6373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6374 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6375 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6376 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6377 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6378 ;;Total ram usage:        1 bytes
  6379 ;; Hardware stack levels used:    1
  6380 ;; Hardware stack levels required when called:    9
  6381 ;; This function calls:
  6382 ;;		_update_LCD_color
  6383 ;; This function is called by:
  6384 ;;		_Day_Mode
  6385 ;;		_Night_Mode
  6386 ;; This function uses a non-reentrant model
  6387 ;;
  6388                           
  6389                           	psect	text29
  6390  002188                     __ptext29:
  6391                           	opt stack 0
  6392  002188                     _Set_NS:
  6393                           	opt stack 20
  6394                           
  6395                           ; BSR set to: 0
  6396                           ;incstack = 0
  6397                           ;Set_NS@color stored from wreg
  6398  002188  0100               	movlb	0	; () banked
  6399  00218A  6FAA               	movwf	Set_NS@color& (0+255),b
  6400                           
  6401                           ; BSR set to: 0
  6402                           ;Lab8.c: 362: direction = 2;
  6403  00218C  0E02               	movlw	2
  6404  00218E  6E70               	movwf	_direction,c
  6405                           
  6406                           ; BSR set to: 0
  6407                           ;Lab8.c: 363: update_LCD_color(direction, color);
  6408  002190  C0AA  F0A7         	movff	Set_NS@color,update_LCD_color@color
  6409  002194  5070               	movf	_direction,w,c
  6410  002196  EC9D  F003         	call	_update_LCD_color
  6411                           
  6412                           ;Lab8.c: 365: switch (color)
  6413  00219A  D00A               	goto	l4875
  6414  00219C                     l415:
  6415                           
  6416                           ; BSR set to: 0
  6417  00219C  9280               	bcf	3968,1,c	;volatile
  6418  00219E  D001               	goto	L8
  6419  0021A0                     l417:
  6420                           
  6421                           ; BSR set to: 0
  6422  0021A0  8280               	bsf	3968,1,c	;volatile
  6423  0021A2                     L8:
  6424  0021A2  9480               	bcf	3968,2,c	;volatile
  6425  0021A4  D014               	goto	l420
  6426  0021A6                     l418:
  6427                           
  6428                           ; BSR set to: 0
  6429  0021A6  9280               	bcf	3968,1,c	;volatile
  6430  0021A8  D001               	goto	L9
  6431  0021AA                     l419:
  6432                           
  6433                           ; BSR set to: 0
  6434  0021AA  8280               	bsf	3968,1,c	;volatile
  6435  0021AC                     L9:
  6436  0021AC  8480               	bsf	3968,2,c	;volatile
  6437                           
  6438                           ; BSR set to: 0
  6439                           ;Lab8.c: 371: }
  6440  0021AE  D00F               	goto	l420
  6441  0021B0                     l4875:
  6442  0021B0  0100               	movlb	0	; () banked
  6443  0021B2  51AA               	movf	Set_NS@color& (0+255),w,b
  6444                           
  6445                           ; Switch size 1, requested type "space"
  6446                           ; Number of cases is 4, Range of values is 0 to 3
  6447                           ; switch strategies available:
  6448                           ; Name         Instructions Cycles
  6449                           ; simple_byte           13     7 (average)
  6450                           ;	Chosen strategy is simple_byte
  6451  0021B4  0A00               	xorlw	0	; case 0
  6452  0021B6  B4D8               	btfsc	status,2,c
  6453  0021B8  D7F1               	goto	l415
  6454  0021BA  0A01               	xorlw	1	; case 1
  6455  0021BC  B4D8               	btfsc	status,2,c
  6456  0021BE  D7F0               	goto	l417
  6457  0021C0  0A03               	xorlw	3	; case 2
  6458  0021C2  B4D8               	btfsc	status,2,c
  6459  0021C4  D7F0               	goto	l418
  6460  0021C6  0A01               	xorlw	1	; case 3
  6461  0021C8  B4D8               	btfsc	status,2,c
  6462  0021CA  D7EF               	goto	l419
  6463  0021CC  D000               	goto	l420
  6464  0021CE                     l420:
  6465                           
  6466                           ; BSR set to: 0
  6467  0021CE  0012               	return		;funcret
  6468  0021D0                     __end_of_Set_NS:
  6469                           	opt stack 0
  6470                           tblptru	equ	0xFF8
  6471                           tblptrh	equ	0xFF7
  6472                           tblptrl	equ	0xFF6
  6473                           tablat	equ	0xFF5
  6474                           intcon	equ	0xFF2
  6475                           intcon2	equ	0xFF1
  6476                           intcon3	equ	0xFF0
  6477                           postinc0	equ	0xFEE
  6478                           wreg	equ	0xFE8
  6479                           postdec1	equ	0xFE5
  6480                           fsr1l	equ	0xFE1
  6481                           indf2	equ	0xFDF
  6482                           fsr2h	equ	0xFDA
  6483                           fsr2l	equ	0xFD9
  6484                           status	equ	0xFD8
  6485                           
  6486 ;; *************** function _Set_EW_LT *****************
  6487 ;; Defined at:
  6488 ;;		line 400 in file "Lab8.c"
  6489 ;; Parameters:    Size  Location     Type
  6490 ;;  color           1    wreg     unsigned char 
  6491 ;; Auto vars:     Size  Location     Type
  6492 ;;  color           1    3[BANK0 ] unsigned char 
  6493 ;; Return value:  Size  Location     Type
  6494 ;;		None               void
  6495 ;; Registers used:
  6496 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6497 ;; Tracked objects:
  6498 ;;		On entry : 0/0
  6499 ;;		On exit  : 0/0
  6500 ;;		Unchanged: 0/0
  6501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6502 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6503 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6504 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6505 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6506 ;;Total ram usage:        1 bytes
  6507 ;; Hardware stack levels used:    1
  6508 ;; Hardware stack levels required when called:    9
  6509 ;; This function calls:
  6510 ;;		_update_LCD_color
  6511 ;; This function is called by:
  6512 ;;		_Day_Mode
  6513 ;;		_Night_Mode
  6514 ;; This function uses a non-reentrant model
  6515 ;;
  6516                           
  6517                           	psect	text30
  6518  0021D0                     __ptext30:
  6519                           	opt stack 0
  6520  0021D0                     _Set_EW_LT:
  6521                           	opt stack 20
  6522                           
  6523                           ; BSR set to: 0
  6524                           ;incstack = 0
  6525                           ;Set_EW_LT@color stored from wreg
  6526  0021D0  0100               	movlb	0	; () banked
  6527  0021D2  6FAA               	movwf	Set_EW_LT@color& (0+255),b
  6528                           
  6529                           ; BSR set to: 0
  6530                           ;Lab8.c: 402: direction = 1;
  6531  0021D4  0E01               	movlw	1
  6532  0021D6  6E70               	movwf	_direction,c
  6533                           
  6534                           ; BSR set to: 0
  6535                           ;Lab8.c: 403: update_LCD_color(direction, color);
  6536  0021D8  C0AA  F0A7         	movff	Set_EW_LT@color,update_LCD_color@color
  6537  0021DC  5070               	movf	_direction,w,c
  6538  0021DE  EC9D  F003         	call	_update_LCD_color
  6539                           
  6540                           ;Lab8.c: 404: switch (color)
  6541  0021E2  D00A               	goto	l4899
  6542  0021E4                     l442:
  6543                           
  6544                           ; BSR set to: 0
  6545  0021E4  9084               	bcf	3972,0,c	;volatile
  6546  0021E6  D001               	goto	L10
  6547  0021E8                     l444:
  6548                           
  6549                           ; BSR set to: 0
  6550  0021E8  8084               	bsf	3972,0,c	;volatile
  6551  0021EA                     L10:
  6552  0021EA  9484               	bcf	3972,2,c	;volatile
  6553  0021EC  D014               	goto	l447
  6554  0021EE                     l445:
  6555                           
  6556                           ; BSR set to: 0
  6557  0021EE  9084               	bcf	3972,0,c	;volatile
  6558  0021F0  D001               	goto	L11
  6559  0021F2                     l446:
  6560                           
  6561                           ; BSR set to: 0
  6562  0021F2  8084               	bsf	3972,0,c	;volatile
  6563  0021F4                     L11:
  6564  0021F4  8484               	bsf	3972,2,c	;volatile
  6565                           
  6566                           ; BSR set to: 0
  6567                           ;Lab8.c: 410: }
  6568  0021F6  D00F               	goto	l447
  6569  0021F8                     l4899:
  6570  0021F8  0100               	movlb	0	; () banked
  6571  0021FA  51AA               	movf	Set_EW_LT@color& (0+255),w,b
  6572                           
  6573                           ; Switch size 1, requested type "space"
  6574                           ; Number of cases is 4, Range of values is 0 to 3
  6575                           ; switch strategies available:
  6576                           ; Name         Instructions Cycles
  6577                           ; simple_byte           13     7 (average)
  6578                           ;	Chosen strategy is simple_byte
  6579  0021FC  0A00               	xorlw	0	; case 0
  6580  0021FE  B4D8               	btfsc	status,2,c
  6581  002200  D7F1               	goto	l442
  6582  002202  0A01               	xorlw	1	; case 1
  6583  002204  B4D8               	btfsc	status,2,c
  6584  002206  D7F0               	goto	l444
  6585  002208  0A03               	xorlw	3	; case 2
  6586  00220A  B4D8               	btfsc	status,2,c
  6587  00220C  D7F0               	goto	l445
  6588  00220E  0A01               	xorlw	1	; case 3
  6589  002210  B4D8               	btfsc	status,2,c
  6590  002212  D7EF               	goto	l446
  6591  002214  D000               	goto	l447
  6592  002216                     l447:
  6593                           
  6594                           ; BSR set to: 0
  6595  002216  0012               	return		;funcret
  6596  002218                     __end_of_Set_EW_LT:
  6597                           	opt stack 0
  6598                           tblptru	equ	0xFF8
  6599                           tblptrh	equ	0xFF7
  6600                           tblptrl	equ	0xFF6
  6601                           tablat	equ	0xFF5
  6602                           intcon	equ	0xFF2
  6603                           intcon2	equ	0xFF1
  6604                           intcon3	equ	0xFF0
  6605                           postinc0	equ	0xFEE
  6606                           wreg	equ	0xFE8
  6607                           postdec1	equ	0xFE5
  6608                           fsr1l	equ	0xFE1
  6609                           indf2	equ	0xFDF
  6610                           fsr2h	equ	0xFDA
  6611                           fsr2l	equ	0xFD9
  6612                           status	equ	0xFD8
  6613                           
  6614 ;; *************** function _Set_EW *****************
  6615 ;; Defined at:
  6616 ;;		line 387 in file "Lab8.c"
  6617 ;; Parameters:    Size  Location     Type
  6618 ;;  color           1    wreg     unsigned char 
  6619 ;; Auto vars:     Size  Location     Type
  6620 ;;  color           1    3[BANK0 ] unsigned char 
  6621 ;; Return value:  Size  Location     Type
  6622 ;;		None               void
  6623 ;; Registers used:
  6624 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6625 ;; Tracked objects:
  6626 ;;		On entry : 0/0
  6627 ;;		On exit  : 0/0
  6628 ;;		Unchanged: 0/0
  6629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6630 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6631 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6632 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6633 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6634 ;;Total ram usage:        1 bytes
  6635 ;; Hardware stack levels used:    1
  6636 ;; Hardware stack levels required when called:    9
  6637 ;; This function calls:
  6638 ;;		_update_LCD_color
  6639 ;; This function is called by:
  6640 ;;		_Day_Mode
  6641 ;;		_Night_Mode
  6642 ;; This function uses a non-reentrant model
  6643 ;;
  6644                           
  6645                           	psect	text31
  6646  002218                     __ptext31:
  6647                           	opt stack 0
  6648  002218                     _Set_EW:
  6649                           	opt stack 20
  6650                           
  6651                           ; BSR set to: 0
  6652                           ;incstack = 0
  6653                           ;Set_EW@color stored from wreg
  6654  002218  0100               	movlb	0	; () banked
  6655  00221A  6FAA               	movwf	Set_EW@color& (0+255),b
  6656                           
  6657                           ; BSR set to: 0
  6658                           ;Lab8.c: 389: direction = 0;
  6659  00221C  0E00               	movlw	0
  6660  00221E  6E70               	movwf	_direction,c
  6661                           
  6662                           ; BSR set to: 0
  6663                           ;Lab8.c: 390: update_LCD_color(direction, color);
  6664  002220  C0AA  F0A7         	movff	Set_EW@color,update_LCD_color@color
  6665  002224  5070               	movf	_direction,w,c
  6666  002226  EC9D  F003         	call	_update_LCD_color
  6667                           
  6668                           ;Lab8.c: 391: switch (color)
  6669  00222A  D00A               	goto	l4891
  6670  00222C                     l433:
  6671                           
  6672                           ; BSR set to: 0
  6673  00222C  9C81               	bcf	3969,6,c	;volatile
  6674  00222E  D001               	goto	L12
  6675  002230                     l435:
  6676                           
  6677                           ; BSR set to: 0
  6678  002230  8C81               	bsf	3969,6,c	;volatile
  6679  002232                     L12:
  6680  002232  9E81               	bcf	3969,7,c	;volatile
  6681  002234  D014               	goto	l438
  6682  002236                     l436:
  6683                           
  6684                           ; BSR set to: 0
  6685  002236  9C81               	bcf	3969,6,c	;volatile
  6686  002238  D001               	goto	L13
  6687  00223A                     l437:
  6688                           
  6689                           ; BSR set to: 0
  6690  00223A  8C81               	bsf	3969,6,c	;volatile
  6691  00223C                     L13:
  6692  00223C  8E81               	bsf	3969,7,c	;volatile
  6693                           
  6694                           ; BSR set to: 0
  6695                           ;Lab8.c: 397: }
  6696  00223E  D00F               	goto	l438
  6697  002240                     l4891:
  6698  002240  0100               	movlb	0	; () banked
  6699  002242  51AA               	movf	Set_EW@color& (0+255),w,b
  6700                           
  6701                           ; Switch size 1, requested type "space"
  6702                           ; Number of cases is 4, Range of values is 0 to 3
  6703                           ; switch strategies available:
  6704                           ; Name         Instructions Cycles
  6705                           ; simple_byte           13     7 (average)
  6706                           ;	Chosen strategy is simple_byte
  6707  002244  0A00               	xorlw	0	; case 0
  6708  002246  B4D8               	btfsc	status,2,c
  6709  002248  D7F1               	goto	l433
  6710  00224A  0A01               	xorlw	1	; case 1
  6711  00224C  B4D8               	btfsc	status,2,c
  6712  00224E  D7F0               	goto	l435
  6713  002250  0A03               	xorlw	3	; case 2
  6714  002252  B4D8               	btfsc	status,2,c
  6715  002254  D7F0               	goto	l436
  6716  002256  0A01               	xorlw	1	; case 3
  6717  002258  B4D8               	btfsc	status,2,c
  6718  00225A  D7EF               	goto	l437
  6719  00225C  D000               	goto	l438
  6720  00225E                     l438:
  6721                           
  6722                           ; BSR set to: 0
  6723  00225E  0012               	return		;funcret
  6724  002260                     __end_of_Set_EW:
  6725                           	opt stack 0
  6726                           tblptru	equ	0xFF8
  6727                           tblptrh	equ	0xFF7
  6728                           tblptrl	equ	0xFF6
  6729                           tablat	equ	0xFF5
  6730                           intcon	equ	0xFF2
  6731                           intcon2	equ	0xFF1
  6732                           intcon3	equ	0xFF0
  6733                           postinc0	equ	0xFEE
  6734                           wreg	equ	0xFE8
  6735                           postdec1	equ	0xFE5
  6736                           fsr1l	equ	0xFE1
  6737                           indf2	equ	0xFDF
  6738                           fsr2h	equ	0xFDA
  6739                           fsr2l	equ	0xFD9
  6740                           status	equ	0xFD8
  6741                           
  6742 ;; *************** function _update_LCD_color *****************
  6743 ;; Defined at:
  6744 ;;		line 592 in file "Lab8.c"
  6745 ;; Parameters:    Size  Location     Type
  6746 ;;  direction       1    wreg     unsigned char 
  6747 ;;  color           1    0[BANK0 ] unsigned char 
  6748 ;; Auto vars:     Size  Location     Type
  6749 ;;  direction       1    1[BANK0 ] unsigned char 
  6750 ;;  Circle_Y        1    2[BANK0 ] unsigned char 
  6751 ;; Return value:  Size  Location     Type
  6752 ;;		None               void
  6753 ;; Registers used:
  6754 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6755 ;; Tracked objects:
  6756 ;;		On entry : 0/0
  6757 ;;		On exit  : 0/0
  6758 ;;		Unchanged: 0/0
  6759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6760 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6761 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6762 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6763 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6764 ;;Total ram usage:        3 bytes
  6765 ;; Hardware stack levels used:    1
  6766 ;; Hardware stack levels required when called:    8
  6767 ;; This function calls:
  6768 ;;		_drawCircle
  6769 ;;		_fillCircle
  6770 ;; This function is called by:
  6771 ;;		_Set_NS
  6772 ;;		_Set_NS_LT
  6773 ;;		_Set_EW
  6774 ;;		_Set_EW_LT
  6775 ;; This function uses a non-reentrant model
  6776 ;;
  6777                           
  6778                           	psect	text32
  6779  00073A                     __ptext32:
  6780                           	opt stack 0
  6781  00073A                     _update_LCD_color:
  6782                           	opt stack 20
  6783                           
  6784                           ; BSR set to: 0
  6785                           ;incstack = 0
  6786                           ;update_LCD_color@direction stored from wreg
  6787  00073A  0100               	movlb	0	; () banked
  6788  00073C  6FA8               	movwf	update_LCD_color@direction& (0+255),b
  6789                           
  6790                           ; BSR set to: 0
  6791                           ;Lab8.c: 594: char Circle_Y;
  6792                           ;Lab8.c: 595: Circle_Y = 20 + 15 + direction * 30;
  6793  00073E  0100               	movlb	0	; () banked
  6794  000740  51A8               	movf	update_LCD_color@direction& (0+255),w,b
  6795  000742  0D1E               	mullw	30
  6796  000744  50F3               	movf	prodl,w,c
  6797  000746  0F23               	addlw	35
  6798  000748  0100               	movlb	0	; () banked
  6799  00074A  6FA9               	movwf	update_LCD_color@Circle_Y& (0+255),b
  6800                           
  6801                           ; BSR set to: 0
  6802                           ;Lab8.c: 597: if (color == 0)
  6803  00074C  0100               	movlb	0	; () banked
  6804  00074E  51A7               	movf	update_LCD_color@color& (0+255),w,b
  6805  000750  0100               	movlb	0	; () banked
  6806  000752  A4D8               	btfss	status,2,c
  6807  000754  D067               	goto	l4723
  6808                           
  6809                           ; BSR set to: 0
  6810                           ;Lab8.c: 598: {
  6811                           ;Lab8.c: 599: fillCircle(40, Circle_Y, 7, 0x0000);
  6812  000756  0E00               	movlw	0
  6813  000758  6E3A               	movwf	fillCircle@x0+1,c
  6814  00075A  0E28               	movlw	40
  6815  00075C  6E39               	movwf	fillCircle@x0,c
  6816  00075E  C0A9  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6817  000762  6A3C               	clrf	fillCircle@y0+1,c
  6818  000764  0E00               	movlw	0
  6819  000766  6E3E               	movwf	fillCircle@r+1,c
  6820  000768  0E07               	movlw	7
  6821  00076A  6E3D               	movwf	fillCircle@r,c
  6822  00076C  0E00               	movlw	0
  6823  00076E  6E40               	movwf	fillCircle@color+1,c
  6824  000770  0E00               	movlw	0
  6825  000772  6E3F               	movwf	fillCircle@color,c
  6826  000774  EC2B  F010         	call	_fillCircle	;wreg free
  6827                           
  6828                           ;Lab8.c: 600: fillCircle(60, Circle_Y, 7, 0x0000);
  6829  000778  0E00               	movlw	0
  6830  00077A  6E3A               	movwf	fillCircle@x0+1,c
  6831  00077C  0E3C               	movlw	60
  6832  00077E  6E39               	movwf	fillCircle@x0,c
  6833  000780  C0A9  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6834  000784  6A3C               	clrf	fillCircle@y0+1,c
  6835  000786  0E00               	movlw	0
  6836  000788  6E3E               	movwf	fillCircle@r+1,c
  6837  00078A  0E07               	movlw	7
  6838  00078C  6E3D               	movwf	fillCircle@r,c
  6839  00078E  0E00               	movlw	0
  6840  000790  6E40               	movwf	fillCircle@color+1,c
  6841  000792  0E00               	movlw	0
  6842  000794  6E3F               	movwf	fillCircle@color,c
  6843  000796  EC2B  F010         	call	_fillCircle	;wreg free
  6844                           
  6845                           ;Lab8.c: 601: fillCircle(80, Circle_Y, 7, 0x0000);
  6846  00079A  0E00               	movlw	0
  6847  00079C  6E3A               	movwf	fillCircle@x0+1,c
  6848  00079E  0E50               	movlw	80
  6849  0007A0  6E39               	movwf	fillCircle@x0,c
  6850  0007A2  C0A9  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6851  0007A6  6A3C               	clrf	fillCircle@y0+1,c
  6852  0007A8  0E00               	movlw	0
  6853  0007AA  6E3E               	movwf	fillCircle@r+1,c
  6854  0007AC  0E07               	movlw	7
  6855  0007AE  6E3D               	movwf	fillCircle@r,c
  6856  0007B0  0E00               	movlw	0
  6857  0007B2  6E40               	movwf	fillCircle@color+1,c
  6858  0007B4  0E00               	movlw	0
  6859  0007B6  6E3F               	movwf	fillCircle@color,c
  6860  0007B8  EC2B  F010         	call	_fillCircle	;wreg free
  6861                           
  6862                           ;Lab8.c: 602: drawCircle(40, Circle_Y, 7, 0xF800);
  6863  0007BC  0E00               	movlw	0
  6864  0007BE  6E1B               	movwf	drawCircle@x0+1,c
  6865  0007C0  0E28               	movlw	40
  6866  0007C2  6E1A               	movwf	drawCircle@x0,c
  6867  0007C4  C0A9  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6868  0007C8  6A1D               	clrf	drawCircle@y0+1,c
  6869  0007CA  0E00               	movlw	0
  6870  0007CC  6E1F               	movwf	drawCircle@r+1,c
  6871  0007CE  0E07               	movlw	7
  6872  0007D0  6E1E               	movwf	drawCircle@r,c
  6873  0007D2  0EF8               	movlw	248
  6874  0007D4  6E21               	movwf	drawCircle@color+1,c
  6875  0007D6  0E00               	movlw	0
  6876  0007D8  6E20               	movwf	drawCircle@color,c
  6877  0007DA  EC31  F006         	call	_drawCircle	;wreg free
  6878                           
  6879                           ;Lab8.c: 603: drawCircle(60, Circle_Y, 7, 0xFFE0);
  6880  0007DE  0E00               	movlw	0
  6881  0007E0  6E1B               	movwf	drawCircle@x0+1,c
  6882  0007E2  0E3C               	movlw	60
  6883  0007E4  6E1A               	movwf	drawCircle@x0,c
  6884  0007E6  C0A9  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6885  0007EA  6A1D               	clrf	drawCircle@y0+1,c
  6886  0007EC  0E00               	movlw	0
  6887  0007EE  6E1F               	movwf	drawCircle@r+1,c
  6888  0007F0  0E07               	movlw	7
  6889  0007F2  6E1E               	movwf	drawCircle@r,c
  6890  0007F4  0EFF               	movlw	255
  6891  0007F6  6E21               	movwf	drawCircle@color+1,c
  6892  0007F8  0EE0               	movlw	224
  6893  0007FA  6E20               	movwf	drawCircle@color,c
  6894  0007FC  EC31  F006         	call	_drawCircle	;wreg free
  6895                           
  6896                           ;Lab8.c: 604: drawCircle(80, Circle_Y, 7, 0x07E0);
  6897  000800  0E00               	movlw	0
  6898  000802  6E1B               	movwf	drawCircle@x0+1,c
  6899  000804  0E50               	movlw	80
  6900  000806  6E1A               	movwf	drawCircle@x0,c
  6901  000808  C0A9  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6902  00080C  6A1D               	clrf	drawCircle@y0+1,c
  6903  00080E  0E00               	movlw	0
  6904  000810  6E1F               	movwf	drawCircle@r+1,c
  6905  000812  0E07               	movlw	7
  6906  000814  6E1E               	movwf	drawCircle@r,c
  6907  000816  0E07               	movlw	7
  6908  000818  6E21               	movwf	drawCircle@color+1,c
  6909  00081A  0EE0               	movlw	224
  6910  00081C  6E20               	movwf	drawCircle@color,c
  6911  00081E  EC31  F006         	call	_drawCircle	;wreg free
  6912  000822  D000               	goto	l4723
  6913  000824                     l4723:
  6914                           
  6915                           ;Lab8.c: 605: }
  6916                           ;Lab8.c: 606: if (color == 1)
  6917  000824  0100               	movlb	0	; () banked
  6918  000826  05A7               	decf	update_LCD_color@color& (0+255),w,b
  6919  000828  A4D8               	btfss	status,2,c
  6920  00082A  D067               	goto	l4727
  6921                           
  6922                           ; BSR set to: 0
  6923                           ;Lab8.c: 607: {
  6924                           ;Lab8.c: 608: fillCircle(40, Circle_Y, 7, 0xF800);
  6925  00082C  0E00               	movlw	0
  6926  00082E  6E3A               	movwf	fillCircle@x0+1,c
  6927  000830  0E28               	movlw	40
  6928  000832  6E39               	movwf	fillCircle@x0,c
  6929  000834  C0A9  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6930  000838  6A3C               	clrf	fillCircle@y0+1,c
  6931  00083A  0E00               	movlw	0
  6932  00083C  6E3E               	movwf	fillCircle@r+1,c
  6933  00083E  0E07               	movlw	7
  6934  000840  6E3D               	movwf	fillCircle@r,c
  6935  000842  0EF8               	movlw	248
  6936  000844  6E40               	movwf	fillCircle@color+1,c
  6937  000846  0E00               	movlw	0
  6938  000848  6E3F               	movwf	fillCircle@color,c
  6939  00084A  EC2B  F010         	call	_fillCircle	;wreg free
  6940                           
  6941                           ;Lab8.c: 609: fillCircle(60, Circle_Y, 7, 0x0000);
  6942  00084E  0E00               	movlw	0
  6943  000850  6E3A               	movwf	fillCircle@x0+1,c
  6944  000852  0E3C               	movlw	60
  6945  000854  6E39               	movwf	fillCircle@x0,c
  6946  000856  C0A9  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6947  00085A  6A3C               	clrf	fillCircle@y0+1,c
  6948  00085C  0E00               	movlw	0
  6949  00085E  6E3E               	movwf	fillCircle@r+1,c
  6950  000860  0E07               	movlw	7
  6951  000862  6E3D               	movwf	fillCircle@r,c
  6952  000864  0E00               	movlw	0
  6953  000866  6E40               	movwf	fillCircle@color+1,c
  6954  000868  0E00               	movlw	0
  6955  00086A  6E3F               	movwf	fillCircle@color,c
  6956  00086C  EC2B  F010         	call	_fillCircle	;wreg free
  6957                           
  6958                           ;Lab8.c: 610: fillCircle(80, Circle_Y, 7, 0x0000);
  6959  000870  0E00               	movlw	0
  6960  000872  6E3A               	movwf	fillCircle@x0+1,c
  6961  000874  0E50               	movlw	80
  6962  000876  6E39               	movwf	fillCircle@x0,c
  6963  000878  C0A9  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6964  00087C  6A3C               	clrf	fillCircle@y0+1,c
  6965  00087E  0E00               	movlw	0
  6966  000880  6E3E               	movwf	fillCircle@r+1,c
  6967  000882  0E07               	movlw	7
  6968  000884  6E3D               	movwf	fillCircle@r,c
  6969  000886  0E00               	movlw	0
  6970  000888  6E40               	movwf	fillCircle@color+1,c
  6971  00088A  0E00               	movlw	0
  6972  00088C  6E3F               	movwf	fillCircle@color,c
  6973  00088E  EC2B  F010         	call	_fillCircle	;wreg free
  6974                           
  6975                           ;Lab8.c: 611: drawCircle(40, Circle_Y, 7, 0xF800);
  6976  000892  0E00               	movlw	0
  6977  000894  6E1B               	movwf	drawCircle@x0+1,c
  6978  000896  0E28               	movlw	40
  6979  000898  6E1A               	movwf	drawCircle@x0,c
  6980  00089A  C0A9  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6981  00089E  6A1D               	clrf	drawCircle@y0+1,c
  6982  0008A0  0E00               	movlw	0
  6983  0008A2  6E1F               	movwf	drawCircle@r+1,c
  6984  0008A4  0E07               	movlw	7
  6985  0008A6  6E1E               	movwf	drawCircle@r,c
  6986  0008A8  0EF8               	movlw	248
  6987  0008AA  6E21               	movwf	drawCircle@color+1,c
  6988  0008AC  0E00               	movlw	0
  6989  0008AE  6E20               	movwf	drawCircle@color,c
  6990  0008B0  EC31  F006         	call	_drawCircle	;wreg free
  6991                           
  6992                           ;Lab8.c: 612: drawCircle(60, Circle_Y, 7, 0xFFE0);
  6993  0008B4  0E00               	movlw	0
  6994  0008B6  6E1B               	movwf	drawCircle@x0+1,c
  6995  0008B8  0E3C               	movlw	60
  6996  0008BA  6E1A               	movwf	drawCircle@x0,c
  6997  0008BC  C0A9  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6998  0008C0  6A1D               	clrf	drawCircle@y0+1,c
  6999  0008C2  0E00               	movlw	0
  7000  0008C4  6E1F               	movwf	drawCircle@r+1,c
  7001  0008C6  0E07               	movlw	7
  7002  0008C8  6E1E               	movwf	drawCircle@r,c
  7003  0008CA  0EFF               	movlw	255
  7004  0008CC  6E21               	movwf	drawCircle@color+1,c
  7005  0008CE  0EE0               	movlw	224
  7006  0008D0  6E20               	movwf	drawCircle@color,c
  7007  0008D2  EC31  F006         	call	_drawCircle	;wreg free
  7008                           
  7009                           ;Lab8.c: 613: drawCircle(80, Circle_Y, 7, 0x07E0);
  7010  0008D6  0E00               	movlw	0
  7011  0008D8  6E1B               	movwf	drawCircle@x0+1,c
  7012  0008DA  0E50               	movlw	80
  7013  0008DC  6E1A               	movwf	drawCircle@x0,c
  7014  0008DE  C0A9  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  7015  0008E2  6A1D               	clrf	drawCircle@y0+1,c
  7016  0008E4  0E00               	movlw	0
  7017  0008E6  6E1F               	movwf	drawCircle@r+1,c
  7018  0008E8  0E07               	movlw	7
  7019  0008EA  6E1E               	movwf	drawCircle@r,c
  7020  0008EC  0E07               	movlw	7
  7021  0008EE  6E21               	movwf	drawCircle@color+1,c
  7022  0008F0  0EE0               	movlw	224
  7023  0008F2  6E20               	movwf	drawCircle@color,c
  7024  0008F4  EC31  F006         	call	_drawCircle	;wreg free
  7025  0008F8  D000               	goto	l4727
  7026  0008FA                     l4727:
  7027                           
  7028                           ;Lab8.c: 614: }
  7029                           ;Lab8.c: 615: if (color == 3)
  7030  0008FA  0E03               	movlw	3
  7031  0008FC  0100               	movlb	0	; () banked
  7032  0008FE  19A7               	xorwf	update_LCD_color@color& (0+255),w,b
  7033  000900  A4D8               	btfss	status,2,c
  7034  000902  D067               	goto	l4731
  7035                           
  7036                           ; BSR set to: 0
  7037                           ;Lab8.c: 616: {
  7038                           ;Lab8.c: 617: fillCircle(40, Circle_Y, 7, 0x0000);
  7039  000904  0E00               	movlw	0
  7040  000906  6E3A               	movwf	fillCircle@x0+1,c
  7041  000908  0E28               	movlw	40
  7042  00090A  6E39               	movwf	fillCircle@x0,c
  7043  00090C  C0A9  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  7044  000910  6A3C               	clrf	fillCircle@y0+1,c
  7045  000912  0E00               	movlw	0
  7046  000914  6E3E               	movwf	fillCircle@r+1,c
  7047  000916  0E07               	movlw	7
  7048  000918  6E3D               	movwf	fillCircle@r,c
  7049  00091A  0E00               	movlw	0
  7050  00091C  6E40               	movwf	fillCircle@color+1,c
  7051  00091E  0E00               	movlw	0
  7052  000920  6E3F               	movwf	fillCircle@color,c
  7053  000922  EC2B  F010         	call	_fillCircle	;wreg free
  7054                           
  7055                           ;Lab8.c: 618: fillCircle(60, Circle_Y, 7, 0xFFE0);
  7056  000926  0E00               	movlw	0
  7057  000928  6E3A               	movwf	fillCircle@x0+1,c
  7058  00092A  0E3C               	movlw	60
  7059  00092C  6E39               	movwf	fillCircle@x0,c
  7060  00092E  C0A9  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  7061  000932  6A3C               	clrf	fillCircle@y0+1,c
  7062  000934  0E00               	movlw	0
  7063  000936  6E3E               	movwf	fillCircle@r+1,c
  7064  000938  0E07               	movlw	7
  7065  00093A  6E3D               	movwf	fillCircle@r,c
  7066  00093C  0EFF               	movlw	255
  7067  00093E  6E40               	movwf	fillCircle@color+1,c
  7068  000940  0EE0               	movlw	224
  7069  000942  6E3F               	movwf	fillCircle@color,c
  7070  000944  EC2B  F010         	call	_fillCircle	;wreg free
  7071                           
  7072                           ;Lab8.c: 619: fillCircle(80, Circle_Y, 7, 0x0000);
  7073  000948  0E00               	movlw	0
  7074  00094A  6E3A               	movwf	fillCircle@x0+1,c
  7075  00094C  0E50               	movlw	80
  7076  00094E  6E39               	movwf	fillCircle@x0,c
  7077  000950  C0A9  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  7078  000954  6A3C               	clrf	fillCircle@y0+1,c
  7079  000956  0E00               	movlw	0
  7080  000958  6E3E               	movwf	fillCircle@r+1,c
  7081  00095A  0E07               	movlw	7
  7082  00095C  6E3D               	movwf	fillCircle@r,c
  7083  00095E  0E00               	movlw	0
  7084  000960  6E40               	movwf	fillCircle@color+1,c
  7085  000962  0E00               	movlw	0
  7086  000964  6E3F               	movwf	fillCircle@color,c
  7087  000966  EC2B  F010         	call	_fillCircle	;wreg free
  7088                           
  7089                           ;Lab8.c: 620: drawCircle(40, Circle_Y, 7, 0xF800);
  7090  00096A  0E00               	movlw	0
  7091  00096C  6E1B               	movwf	drawCircle@x0+1,c
  7092  00096E  0E28               	movlw	40
  7093  000970  6E1A               	movwf	drawCircle@x0,c
  7094  000972  C0A9  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  7095  000976  6A1D               	clrf	drawCircle@y0+1,c
  7096  000978  0E00               	movlw	0
  7097  00097A  6E1F               	movwf	drawCircle@r+1,c
  7098  00097C  0E07               	movlw	7
  7099  00097E  6E1E               	movwf	drawCircle@r,c
  7100  000980  0EF8               	movlw	248
  7101  000982  6E21               	movwf	drawCircle@color+1,c
  7102  000984  0E00               	movlw	0
  7103  000986  6E20               	movwf	drawCircle@color,c
  7104  000988  EC31  F006         	call	_drawCircle	;wreg free
  7105                           
  7106                           ;Lab8.c: 621: drawCircle(60, Circle_Y, 7, 0xFFE0);
  7107  00098C  0E00               	movlw	0
  7108  00098E  6E1B               	movwf	drawCircle@x0+1,c
  7109  000990  0E3C               	movlw	60
  7110  000992  6E1A               	movwf	drawCircle@x0,c
  7111  000994  C0A9  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  7112  000998  6A1D               	clrf	drawCircle@y0+1,c
  7113  00099A  0E00               	movlw	0
  7114  00099C  6E1F               	movwf	drawCircle@r+1,c
  7115  00099E  0E07               	movlw	7
  7116  0009A0  6E1E               	movwf	drawCircle@r,c
  7117  0009A2  0EFF               	movlw	255
  7118  0009A4  6E21               	movwf	drawCircle@color+1,c
  7119  0009A6  0EE0               	movlw	224
  7120  0009A8  6E20               	movwf	drawCircle@color,c
  7121  0009AA  EC31  F006         	call	_drawCircle	;wreg free
  7122                           
  7123                           ;Lab8.c: 622: drawCircle(80, Circle_Y, 7, 0x07E0);
  7124  0009AE  0E00               	movlw	0
  7125  0009B0  6E1B               	movwf	drawCircle@x0+1,c
  7126  0009B2  0E50               	movlw	80
  7127  0009B4  6E1A               	movwf	drawCircle@x0,c
  7128  0009B6  C0A9  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  7129  0009BA  6A1D               	clrf	drawCircle@y0+1,c
  7130  0009BC  0E00               	movlw	0
  7131  0009BE  6E1F               	movwf	drawCircle@r+1,c
  7132  0009C0  0E07               	movlw	7
  7133  0009C2  6E1E               	movwf	drawCircle@r,c
  7134  0009C4  0E07               	movlw	7
  7135  0009C6  6E21               	movwf	drawCircle@color+1,c
  7136  0009C8  0EE0               	movlw	224
  7137  0009CA  6E20               	movwf	drawCircle@color,c
  7138  0009CC  EC31  F006         	call	_drawCircle	;wreg free
  7139  0009D0  D000               	goto	l4731
  7140  0009D2                     l4731:
  7141                           
  7142                           ;Lab8.c: 623: }
  7143                           ;Lab8.c: 624: if (color == 2)
  7144  0009D2  0E02               	movlw	2
  7145  0009D4  0100               	movlb	0	; () banked
  7146  0009D6  19A7               	xorwf	update_LCD_color@color& (0+255),w,b
  7147  0009D8  A4D8               	btfss	status,2,c
  7148  0009DA  D067               	goto	l505
  7149                           
  7150                           ; BSR set to: 0
  7151                           ;Lab8.c: 625: {
  7152                           ;Lab8.c: 626: fillCircle(40, Circle_Y, 7, 0x0000);
  7153  0009DC  0E00               	movlw	0
  7154  0009DE  6E3A               	movwf	fillCircle@x0+1,c
  7155  0009E0  0E28               	movlw	40
  7156  0009E2  6E39               	movwf	fillCircle@x0,c
  7157  0009E4  C0A9  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  7158  0009E8  6A3C               	clrf	fillCircle@y0+1,c
  7159  0009EA  0E00               	movlw	0
  7160  0009EC  6E3E               	movwf	fillCircle@r+1,c
  7161  0009EE  0E07               	movlw	7
  7162  0009F0  6E3D               	movwf	fillCircle@r,c
  7163  0009F2  0E00               	movlw	0
  7164  0009F4  6E40               	movwf	fillCircle@color+1,c
  7165  0009F6  0E00               	movlw	0
  7166  0009F8  6E3F               	movwf	fillCircle@color,c
  7167  0009FA  EC2B  F010         	call	_fillCircle	;wreg free
  7168                           
  7169                           ;Lab8.c: 627: fillCircle(60, Circle_Y, 7, 0x0000);
  7170  0009FE  0E00               	movlw	0
  7171  000A00  6E3A               	movwf	fillCircle@x0+1,c
  7172  000A02  0E3C               	movlw	60
  7173  000A04  6E39               	movwf	fillCircle@x0,c
  7174  000A06  C0A9  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  7175  000A0A  6A3C               	clrf	fillCircle@y0+1,c
  7176  000A0C  0E00               	movlw	0
  7177  000A0E  6E3E               	movwf	fillCircle@r+1,c
  7178  000A10  0E07               	movlw	7
  7179  000A12  6E3D               	movwf	fillCircle@r,c
  7180  000A14  0E00               	movlw	0
  7181  000A16  6E40               	movwf	fillCircle@color+1,c
  7182  000A18  0E00               	movlw	0
  7183  000A1A  6E3F               	movwf	fillCircle@color,c
  7184  000A1C  EC2B  F010         	call	_fillCircle	;wreg free
  7185                           
  7186                           ;Lab8.c: 628: fillCircle(80, Circle_Y, 7, 0x07E0);
  7187  000A20  0E00               	movlw	0
  7188  000A22  6E3A               	movwf	fillCircle@x0+1,c
  7189  000A24  0E50               	movlw	80
  7190  000A26  6E39               	movwf	fillCircle@x0,c
  7191  000A28  C0A9  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  7192  000A2C  6A3C               	clrf	fillCircle@y0+1,c
  7193  000A2E  0E00               	movlw	0
  7194  000A30  6E3E               	movwf	fillCircle@r+1,c
  7195  000A32  0E07               	movlw	7
  7196  000A34  6E3D               	movwf	fillCircle@r,c
  7197  000A36  0E07               	movlw	7
  7198  000A38  6E40               	movwf	fillCircle@color+1,c
  7199  000A3A  0EE0               	movlw	224
  7200  000A3C  6E3F               	movwf	fillCircle@color,c
  7201  000A3E  EC2B  F010         	call	_fillCircle	;wreg free
  7202                           
  7203                           ;Lab8.c: 629: drawCircle(40, Circle_Y, 7, 0xF800);
  7204  000A42  0E00               	movlw	0
  7205  000A44  6E1B               	movwf	drawCircle@x0+1,c
  7206  000A46  0E28               	movlw	40
  7207  000A48  6E1A               	movwf	drawCircle@x0,c
  7208  000A4A  C0A9  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  7209  000A4E  6A1D               	clrf	drawCircle@y0+1,c
  7210  000A50  0E00               	movlw	0
  7211  000A52  6E1F               	movwf	drawCircle@r+1,c
  7212  000A54  0E07               	movlw	7
  7213  000A56  6E1E               	movwf	drawCircle@r,c
  7214  000A58  0EF8               	movlw	248
  7215  000A5A  6E21               	movwf	drawCircle@color+1,c
  7216  000A5C  0E00               	movlw	0
  7217  000A5E  6E20               	movwf	drawCircle@color,c
  7218  000A60  EC31  F006         	call	_drawCircle	;wreg free
  7219                           
  7220                           ;Lab8.c: 630: drawCircle(60, Circle_Y, 7, 0xFFE0);
  7221  000A64  0E00               	movlw	0
  7222  000A66  6E1B               	movwf	drawCircle@x0+1,c
  7223  000A68  0E3C               	movlw	60
  7224  000A6A  6E1A               	movwf	drawCircle@x0,c
  7225  000A6C  C0A9  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  7226  000A70  6A1D               	clrf	drawCircle@y0+1,c
  7227  000A72  0E00               	movlw	0
  7228  000A74  6E1F               	movwf	drawCircle@r+1,c
  7229  000A76  0E07               	movlw	7
  7230  000A78  6E1E               	movwf	drawCircle@r,c
  7231  000A7A  0EFF               	movlw	255
  7232  000A7C  6E21               	movwf	drawCircle@color+1,c
  7233  000A7E  0EE0               	movlw	224
  7234  000A80  6E20               	movwf	drawCircle@color,c
  7235  000A82  EC31  F006         	call	_drawCircle	;wreg free
  7236                           
  7237                           ;Lab8.c: 631: drawCircle(80, Circle_Y, 7, 0x07E0);
  7238  000A86  0E00               	movlw	0
  7239  000A88  6E1B               	movwf	drawCircle@x0+1,c
  7240  000A8A  0E50               	movlw	80
  7241  000A8C  6E1A               	movwf	drawCircle@x0,c
  7242  000A8E  C0A9  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  7243  000A92  6A1D               	clrf	drawCircle@y0+1,c
  7244  000A94  0E00               	movlw	0
  7245  000A96  6E1F               	movwf	drawCircle@r+1,c
  7246  000A98  0E07               	movlw	7
  7247  000A9A  6E1E               	movwf	drawCircle@r,c
  7248  000A9C  0E07               	movlw	7
  7249  000A9E  6E21               	movwf	drawCircle@color+1,c
  7250  000AA0  0EE0               	movlw	224
  7251  000AA2  6E20               	movwf	drawCircle@color,c
  7252  000AA4  EC31  F006         	call	_drawCircle	;wreg free
  7253  000AA8  D000               	goto	l505
  7254  000AAA                     l505:
  7255  000AAA  0012               	return		;funcret
  7256  000AAC                     __end_of_update_LCD_color:
  7257                           	opt stack 0
  7258                           tblptru	equ	0xFF8
  7259                           tblptrh	equ	0xFF7
  7260                           tblptrl	equ	0xFF6
  7261                           tablat	equ	0xFF5
  7262                           prodl	equ	0xFF3
  7263                           intcon	equ	0xFF2
  7264                           intcon2	equ	0xFF1
  7265                           intcon3	equ	0xFF0
  7266                           postinc0	equ	0xFEE
  7267                           wreg	equ	0xFE8
  7268                           postdec1	equ	0xFE5
  7269                           fsr1l	equ	0xFE1
  7270                           indf2	equ	0xFDF
  7271                           fsr2h	equ	0xFDA
  7272                           fsr2l	equ	0xFD9
  7273                           status	equ	0xFD8
  7274                           
  7275 ;; *************** function _fillCircle *****************
  7276 ;; Defined at:
  7277 ;;		line 647 in file "ST7735_TFT.c"
  7278 ;; Parameters:    Size  Location     Type
  7279 ;;  x0              2   56[COMRAM] int 
  7280 ;;  y0              2   58[COMRAM] int 
  7281 ;;  r               2   60[COMRAM] int 
  7282 ;;  color           2   62[COMRAM] unsigned int 
  7283 ;; Auto vars:     Size  Location     Type
  7284 ;;		None
  7285 ;; Return value:  Size  Location     Type
  7286 ;;		None               void
  7287 ;; Registers used:
  7288 ;;		wreg, status,2, status,0, cstack
  7289 ;; Tracked objects:
  7290 ;;		On entry : 0/0
  7291 ;;		On exit  : 0/0
  7292 ;;		Unchanged: 0/0
  7293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7294 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7295 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7296 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7297 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7298 ;;Total ram usage:        8 bytes
  7299 ;; Hardware stack levels used:    1
  7300 ;; Hardware stack levels required when called:    7
  7301 ;; This function calls:
  7302 ;;		_drawFastVLine
  7303 ;;		_fillCircleHelper
  7304 ;; This function is called by:
  7305 ;;		_Initialize_Screen
  7306 ;;		_update_LCD_color
  7307 ;; This function uses a non-reentrant model
  7308 ;;
  7309                           
  7310                           	psect	text33
  7311  002056                     __ptext33:
  7312                           	opt stack 0
  7313  002056                     _fillCircle:
  7314                           	opt stack 20
  7315                           
  7316                           ;ST7735_TFT.c: 649: drawFastVLine(x0, y0 - r, 2 * r + 1, color);
  7317                           
  7318                           ;incstack = 0
  7319  002056  503D               	movf	fillCircle@r,w,c
  7320  002058  0800               	sublw	0
  7321  00205A  243B               	addwf	fillCircle@y0,w,c
  7322  00205C  6E16               	movwf	drawFastVLine@y,c
  7323  00205E  80D8               	bsf	status,0,c
  7324  002060  343D               	rlcf	fillCircle@r,w,c
  7325  002062  6E17               	movwf	drawFastVLine@h,c
  7326  002064  C03F  F018         	movff	fillCircle@color,drawFastVLine@color
  7327  002068  C040  F019         	movff	fillCircle@color+1,drawFastVLine@color+1
  7328  00206C  5039               	movf	fillCircle@x0,w,c
  7329  00206E  EC30  F00E         	call	_drawFastVLine
  7330                           
  7331                           ;ST7735_TFT.c: 650: fillCircleHelper(x0, y0, r, 3, 0, color);
  7332  002072  C039  F021         	movff	fillCircle@x0,fillCircleHelper@x0
  7333  002076  C03A  F022         	movff	fillCircle@x0+1,fillCircleHelper@x0+1
  7334  00207A  C03B  F023         	movff	fillCircle@y0,fillCircleHelper@y0
  7335  00207E  C03C  F024         	movff	fillCircle@y0+1,fillCircleHelper@y0+1
  7336  002082  C03D  F025         	movff	fillCircle@r,fillCircleHelper@r
  7337  002086  C03E  F026         	movff	fillCircle@r+1,fillCircleHelper@r+1
  7338  00208A  0E00               	movlw	0
  7339  00208C  6E28               	movwf	fillCircleHelper@cornername+1,c
  7340  00208E  0E03               	movlw	3
  7341  002090  6E27               	movwf	fillCircleHelper@cornername,c
  7342  002092  0E00               	movlw	0
  7343  002094  6E2A               	movwf	fillCircleHelper@delta+1,c
  7344  002096  0E00               	movlw	0
  7345  002098  6E29               	movwf	fillCircleHelper@delta,c
  7346  00209A  C03F  F02B         	movff	fillCircle@color,fillCircleHelper@color
  7347  00209E  C040  F02C         	movff	fillCircle@color+1,fillCircleHelper@color+1
  7348  0020A2  EC76  F008         	call	_fillCircleHelper	;wreg free
  7349  0020A6  0012               	return		;funcret
  7350  0020A8                     __end_of_fillCircle:
  7351                           	opt stack 0
  7352                           tblptru	equ	0xFF8
  7353                           tblptrh	equ	0xFF7
  7354                           tblptrl	equ	0xFF6
  7355                           tablat	equ	0xFF5
  7356                           prodl	equ	0xFF3
  7357                           intcon	equ	0xFF2
  7358                           intcon2	equ	0xFF1
  7359                           intcon3	equ	0xFF0
  7360                           postinc0	equ	0xFEE
  7361                           wreg	equ	0xFE8
  7362                           postdec1	equ	0xFE5
  7363                           fsr1l	equ	0xFE1
  7364                           indf2	equ	0xFDF
  7365                           fsr2h	equ	0xFDA
  7366                           fsr2l	equ	0xFD9
  7367                           status	equ	0xFD8
  7368                           
  7369 ;; *************** function _fillCircleHelper *****************
  7370 ;; Defined at:
  7371 ;;		line 622 in file "ST7735_TFT.c"
  7372 ;; Parameters:    Size  Location     Type
  7373 ;;  x0              2   32[COMRAM] int 
  7374 ;;  y0              2   34[COMRAM] int 
  7375 ;;  r               2   36[COMRAM] int 
  7376 ;;  cornername      2   38[COMRAM] unsigned int 
  7377 ;;  delta           2   40[COMRAM] int 
  7378 ;;  color           2   42[COMRAM] unsigned int 
  7379 ;; Auto vars:     Size  Location     Type
  7380 ;;  y               2   54[COMRAM] int 
  7381 ;;  x               2   52[COMRAM] int 
  7382 ;;  f               2   50[COMRAM] int 
  7383 ;;  ddF_y           2   48[COMRAM] int 
  7384 ;;  ddF_x           2   46[COMRAM] int 
  7385 ;; Return value:  Size  Location     Type
  7386 ;;		None               void
  7387 ;; Registers used:
  7388 ;;		wreg, status,2, status,0, cstack
  7389 ;; Tracked objects:
  7390 ;;		On entry : 0/0
  7391 ;;		On exit  : 0/0
  7392 ;;		Unchanged: 0/0
  7393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7394 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7395 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7396 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7397 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7398 ;;Total ram usage:       24 bytes
  7399 ;; Hardware stack levels used:    1
  7400 ;; Hardware stack levels required when called:    6
  7401 ;; This function calls:
  7402 ;;		_drawFastVLine
  7403 ;; This function is called by:
  7404 ;;		_fillCircle
  7405 ;; This function uses a non-reentrant model
  7406 ;;
  7407                           
  7408                           	psect	text34
  7409  0010EC                     __ptext34:
  7410                           	opt stack 0
  7411  0010EC                     _fillCircleHelper:
  7412                           	opt stack 20
  7413                           
  7414                           ;ST7735_TFT.c: 624: signed int f, ddF_x, ddF_y, x, y;
  7415                           ;ST7735_TFT.c: 625: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  7416                           
  7417                           ;incstack = 0
  7418  0010EC  C025  F02D         	movff	fillCircleHelper@r,??_fillCircleHelper
  7419  0010F0  C026  F02E         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  7420  0010F4  1E2D               	comf	??_fillCircleHelper,f,c
  7421  0010F6  1E2E               	comf	??_fillCircleHelper+1,f,c
  7422  0010F8  4A2D               	infsnz	??_fillCircleHelper,f,c
  7423  0010FA  2A2E               	incf	??_fillCircleHelper+1,f,c
  7424  0010FC  0E01               	movlw	1
  7425  0010FE  242D               	addwf	??_fillCircleHelper,w,c
  7426  001100  6E33               	movwf	fillCircleHelper@f,c
  7427  001102  0E00               	movlw	0
  7428  001104  202E               	addwfc	??_fillCircleHelper+1,w,c
  7429  001106  6E34               	movwf	fillCircleHelper@f+1,c
  7430  001108  0E00               	movlw	0
  7431  00110A  6E30               	movwf	fillCircleHelper@ddF_x+1,c
  7432  00110C  0E01               	movlw	1
  7433  00110E  6E2F               	movwf	fillCircleHelper@ddF_x,c
  7434  001110  C025  F02D         	movff	fillCircleHelper@r,??_fillCircleHelper
  7435  001114  C026  F02E         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  7436  001118  90D8               	bcf	status,0,c
  7437  00111A  362D               	rlcf	??_fillCircleHelper,f,c
  7438  00111C  362E               	rlcf	??_fillCircleHelper+1,f,c
  7439  00111E  1E2D               	comf	??_fillCircleHelper,f,c
  7440  001120  1E2E               	comf	??_fillCircleHelper+1,f,c
  7441  001122  4A2D               	infsnz	??_fillCircleHelper,f,c
  7442  001124  2A2E               	incf	??_fillCircleHelper+1,f,c
  7443  001126  C02D  F031         	movff	??_fillCircleHelper,fillCircleHelper@ddF_y
  7444  00112A  C02E  F032         	movff	??_fillCircleHelper+1,fillCircleHelper@ddF_y+1
  7445  00112E  0E00               	movlw	0
  7446  001130  6E36               	movwf	fillCircleHelper@x+1,c
  7447  001132  0E00               	movlw	0
  7448  001134  6E35               	movwf	fillCircleHelper@x,c
  7449  001136  C025  F037         	movff	fillCircleHelper@r,fillCircleHelper@y
  7450  00113A  C026  F038         	movff	fillCircleHelper@r+1,fillCircleHelper@y+1
  7451                           
  7452                           ;ST7735_TFT.c: 626: while (x<y) {
  7453  00113E  D067               	goto	l4267
  7454  001140                     l4247:
  7455                           
  7456                           ;ST7735_TFT.c: 627: if (f >= 0) {
  7457  001140  BE34               	btfsc	fillCircleHelper@f+1,7,c
  7458  001142  D00B               	goto	l259
  7459                           
  7460                           ;ST7735_TFT.c: 628: y--;
  7461  001144  0637               	decf	fillCircleHelper@y,f,c
  7462  001146  A0D8               	btfss	status,0,c
  7463  001148  0638               	decf	fillCircleHelper@y+1,f,c
  7464                           
  7465                           ;ST7735_TFT.c: 629: ddF_y += 2;
  7466  00114A  0E02               	movlw	2
  7467  00114C  2631               	addwf	fillCircleHelper@ddF_y,f,c
  7468  00114E  0E00               	movlw	0
  7469  001150  2232               	addwfc	fillCircleHelper@ddF_y+1,f,c
  7470                           
  7471                           ;ST7735_TFT.c: 630: f += ddF_y;
  7472  001152  5031               	movf	fillCircleHelper@ddF_y,w,c
  7473  001154  2633               	addwf	fillCircleHelper@f,f,c
  7474  001156  5032               	movf	fillCircleHelper@ddF_y+1,w,c
  7475  001158  2234               	addwfc	fillCircleHelper@f+1,f,c
  7476  00115A                     l259:
  7477                           
  7478                           ;ST7735_TFT.c: 631: }
  7479                           ;ST7735_TFT.c: 632: x++;
  7480  00115A  4A35               	infsnz	fillCircleHelper@x,f,c
  7481  00115C  2A36               	incf	fillCircleHelper@x+1,f,c
  7482                           
  7483                           ;ST7735_TFT.c: 633: ddF_x += 2;
  7484  00115E  0E02               	movlw	2
  7485  001160  262F               	addwf	fillCircleHelper@ddF_x,f,c
  7486  001162  0E00               	movlw	0
  7487  001164  2230               	addwfc	fillCircleHelper@ddF_x+1,f,c
  7488                           
  7489                           ;ST7735_TFT.c: 634: f += ddF_x;
  7490  001166  502F               	movf	fillCircleHelper@ddF_x,w,c
  7491  001168  2633               	addwf	fillCircleHelper@f,f,c
  7492  00116A  5030               	movf	fillCircleHelper@ddF_x+1,w,c
  7493  00116C  2234               	addwfc	fillCircleHelper@f+1,f,c
  7494                           
  7495                           ;ST7735_TFT.c: 636: if (cornername & 0x1) {
  7496  00116E  A027               	btfss	fillCircleHelper@cornername,0,c
  7497  001170  D025               	goto	l4263
  7498                           
  7499                           ;ST7735_TFT.c: 637: drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
  7500  001172  5037               	movf	fillCircleHelper@y,w,c
  7501  001174  0800               	sublw	0
  7502  001176  2423               	addwf	fillCircleHelper@y0,w,c
  7503  001178  6E16               	movwf	drawFastVLine@y,c
  7504  00117A  5037               	movf	fillCircleHelper@y,w,c
  7505  00117C  2437               	addwf	fillCircleHelper@y,w,c
  7506  00117E  2429               	addwf	fillCircleHelper@delta,w,c
  7507  001180  6E2D               	movwf	??_fillCircleHelper& (0+255),c
  7508  001182  282D               	incf	??_fillCircleHelper,w,c
  7509  001184  6E17               	movwf	drawFastVLine@h,c
  7510  001186  C02B  F018         	movff	fillCircleHelper@color,drawFastVLine@color
  7511  00118A  C02C  F019         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  7512  00118E  5021               	movf	fillCircleHelper@x0,w,c
  7513  001190  2435               	addwf	fillCircleHelper@x,w,c
  7514  001192  EC30  F00E         	call	_drawFastVLine
  7515                           
  7516                           ;ST7735_TFT.c: 638: drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
  7517  001196  5035               	movf	fillCircleHelper@x,w,c
  7518  001198  0800               	sublw	0
  7519  00119A  2423               	addwf	fillCircleHelper@y0,w,c
  7520  00119C  6E16               	movwf	drawFastVLine@y,c
  7521  00119E  5035               	movf	fillCircleHelper@x,w,c
  7522  0011A0  2435               	addwf	fillCircleHelper@x,w,c
  7523  0011A2  2429               	addwf	fillCircleHelper@delta,w,c
  7524  0011A4  6E2D               	movwf	??_fillCircleHelper& (0+255),c
  7525  0011A6  282D               	incf	??_fillCircleHelper,w,c
  7526  0011A8  6E17               	movwf	drawFastVLine@h,c
  7527  0011AA  C02B  F018         	movff	fillCircleHelper@color,drawFastVLine@color
  7528  0011AE  C02C  F019         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  7529  0011B2  5021               	movf	fillCircleHelper@x0,w,c
  7530  0011B4  2437               	addwf	fillCircleHelper@y,w,c
  7531  0011B6  EC30  F00E         	call	_drawFastVLine
  7532  0011BA  D000               	goto	l4263
  7533  0011BC                     l4263:
  7534                           
  7535                           ;ST7735_TFT.c: 639: }
  7536                           ;ST7735_TFT.c: 640: if (cornername & 0x2) {
  7537  0011BC  A227               	btfss	fillCircleHelper@cornername,1,c
  7538  0011BE  D027               	goto	l4267
  7539                           
  7540                           ;ST7735_TFT.c: 641: drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
  7541  0011C0  5037               	movf	fillCircleHelper@y,w,c
  7542  0011C2  0800               	sublw	0
  7543  0011C4  2423               	addwf	fillCircleHelper@y0,w,c
  7544  0011C6  6E16               	movwf	drawFastVLine@y,c
  7545  0011C8  5037               	movf	fillCircleHelper@y,w,c
  7546  0011CA  2437               	addwf	fillCircleHelper@y,w,c
  7547  0011CC  2429               	addwf	fillCircleHelper@delta,w,c
  7548  0011CE  6E2D               	movwf	??_fillCircleHelper& (0+255),c
  7549  0011D0  282D               	incf	??_fillCircleHelper,w,c
  7550  0011D2  6E17               	movwf	drawFastVLine@h,c
  7551  0011D4  C02B  F018         	movff	fillCircleHelper@color,drawFastVLine@color
  7552  0011D8  C02C  F019         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  7553  0011DC  5035               	movf	fillCircleHelper@x,w,c
  7554  0011DE  0800               	sublw	0
  7555  0011E0  2421               	addwf	fillCircleHelper@x0,w,c
  7556  0011E2  EC30  F00E         	call	_drawFastVLine
  7557                           
  7558                           ;ST7735_TFT.c: 642: drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
  7559  0011E6  5035               	movf	fillCircleHelper@x,w,c
  7560  0011E8  0800               	sublw	0
  7561  0011EA  2423               	addwf	fillCircleHelper@y0,w,c
  7562  0011EC  6E16               	movwf	drawFastVLine@y,c
  7563  0011EE  5035               	movf	fillCircleHelper@x,w,c
  7564  0011F0  2435               	addwf	fillCircleHelper@x,w,c
  7565  0011F2  2429               	addwf	fillCircleHelper@delta,w,c
  7566  0011F4  6E2D               	movwf	??_fillCircleHelper& (0+255),c
  7567  0011F6  282D               	incf	??_fillCircleHelper,w,c
  7568  0011F8  6E17               	movwf	drawFastVLine@h,c
  7569  0011FA  C02B  F018         	movff	fillCircleHelper@color,drawFastVLine@color
  7570  0011FE  C02C  F019         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  7571  001202  5037               	movf	fillCircleHelper@y,w,c
  7572  001204  0800               	sublw	0
  7573  001206  2421               	addwf	fillCircleHelper@x0,w,c
  7574  001208  EC30  F00E         	call	_drawFastVLine
  7575  00120C  D000               	goto	l4267
  7576  00120E                     l4267:
  7577  00120E  5037               	movf	fillCircleHelper@y,w,c
  7578  001210  5C35               	subwf	fillCircleHelper@x,w,c
  7579  001212  5036               	movf	fillCircleHelper@x+1,w,c
  7580  001214  0A80               	xorlw	128
  7581  001216  6E2D               	movwf	??_fillCircleHelper& (0+255),c
  7582  001218  5038               	movf	fillCircleHelper@y+1,w,c
  7583  00121A  0A80               	xorlw	128
  7584  00121C  582D               	subwfb	??_fillCircleHelper& (0+255),w,c
  7585  00121E  A0D8               	btfss	status,0,c
  7586  001220  D78F               	goto	l4247
  7587  001222  0012               	return		;funcret
  7588  001224                     __end_of_fillCircleHelper:
  7589                           	opt stack 0
  7590                           tblptru	equ	0xFF8
  7591                           tblptrh	equ	0xFF7
  7592                           tblptrl	equ	0xFF6
  7593                           tablat	equ	0xFF5
  7594                           prodl	equ	0xFF3
  7595                           intcon	equ	0xFF2
  7596                           intcon2	equ	0xFF1
  7597                           intcon3	equ	0xFF0
  7598                           postinc0	equ	0xFEE
  7599                           wreg	equ	0xFE8
  7600                           postdec1	equ	0xFE5
  7601                           fsr1l	equ	0xFE1
  7602                           indf2	equ	0xFDF
  7603                           fsr2h	equ	0xFDA
  7604                           fsr2l	equ	0xFD9
  7605                           status	equ	0xFD8
  7606                           
  7607 ;; *************** function _drawCircle *****************
  7608 ;; Defined at:
  7609 ;;		line 561 in file "ST7735_TFT.c"
  7610 ;; Parameters:    Size  Location     Type
  7611 ;;  x0              2   25[COMRAM] int 
  7612 ;;  y0              2   27[COMRAM] int 
  7613 ;;  r               2   29[COMRAM] int 
  7614 ;;  color           2   31[COMRAM] unsigned int 
  7615 ;; Auto vars:     Size  Location     Type
  7616 ;;  y               2   43[COMRAM] int 
  7617 ;;  x               2   41[COMRAM] int 
  7618 ;;  f               2   39[COMRAM] int 
  7619 ;;  ddF_y           2   37[COMRAM] int 
  7620 ;;  ddF_x           2   35[COMRAM] int 
  7621 ;; Return value:  Size  Location     Type
  7622 ;;		None               void
  7623 ;; Registers used:
  7624 ;;		wreg, status,2, status,0, cstack
  7625 ;; Tracked objects:
  7626 ;;		On entry : 0/0
  7627 ;;		On exit  : 0/0
  7628 ;;		Unchanged: 0/0
  7629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7630 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7631 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7632 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7633 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7634 ;;Total ram usage:       20 bytes
  7635 ;; Hardware stack levels used:    1
  7636 ;; Hardware stack levels required when called:    6
  7637 ;; This function calls:
  7638 ;;		_drawPixel
  7639 ;; This function is called by:
  7640 ;;		_Initialize_Screen
  7641 ;;		_update_LCD_color
  7642 ;; This function uses a non-reentrant model
  7643 ;;
  7644                           
  7645                           	psect	text35
  7646  000C62                     __ptext35:
  7647                           	opt stack 0
  7648  000C62                     _drawCircle:
  7649                           	opt stack 21
  7650                           
  7651                           ;ST7735_TFT.c: 563: signed int f, ddF_x, ddF_y, x, y;
  7652                           ;ST7735_TFT.c: 564: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  7653                           
  7654                           ;incstack = 0
  7655  000C62  C01E  F022         	movff	drawCircle@r,??_drawCircle
  7656  000C66  C01F  F023         	movff	drawCircle@r+1,??_drawCircle+1
  7657  000C6A  1E22               	comf	??_drawCircle,f,c
  7658  000C6C  1E23               	comf	??_drawCircle+1,f,c
  7659  000C6E  4A22               	infsnz	??_drawCircle,f,c
  7660  000C70  2A23               	incf	??_drawCircle+1,f,c
  7661  000C72  0E01               	movlw	1
  7662  000C74  2422               	addwf	??_drawCircle,w,c
  7663  000C76  6E28               	movwf	drawCircle@f,c
  7664  000C78  0E00               	movlw	0
  7665  000C7A  2023               	addwfc	??_drawCircle+1,w,c
  7666  000C7C  6E29               	movwf	drawCircle@f+1,c
  7667  000C7E  0E00               	movlw	0
  7668  000C80  6E25               	movwf	drawCircle@ddF_x+1,c
  7669  000C82  0E01               	movlw	1
  7670  000C84  6E24               	movwf	drawCircle@ddF_x,c
  7671  000C86  C01E  F022         	movff	drawCircle@r,??_drawCircle
  7672  000C8A  C01F  F023         	movff	drawCircle@r+1,??_drawCircle+1
  7673  000C8E  90D8               	bcf	status,0,c
  7674  000C90  3622               	rlcf	??_drawCircle,f,c
  7675  000C92  3623               	rlcf	??_drawCircle+1,f,c
  7676  000C94  1E22               	comf	??_drawCircle,f,c
  7677  000C96  1E23               	comf	??_drawCircle+1,f,c
  7678  000C98  4A22               	infsnz	??_drawCircle,f,c
  7679  000C9A  2A23               	incf	??_drawCircle+1,f,c
  7680  000C9C  C022  F026         	movff	??_drawCircle,drawCircle@ddF_y
  7681  000CA0  C023  F027         	movff	??_drawCircle+1,drawCircle@ddF_y+1
  7682  000CA4  0E00               	movlw	0
  7683  000CA6  6E2B               	movwf	drawCircle@x+1,c
  7684  000CA8  0E00               	movlw	0
  7685  000CAA  6E2A               	movwf	drawCircle@x,c
  7686  000CAC  C01E  F02C         	movff	drawCircle@r,drawCircle@y
  7687  000CB0  C01F  F02D         	movff	drawCircle@r+1,drawCircle@y+1
  7688                           
  7689                           ;ST7735_TFT.c: 565: drawPixel(x0 , y0 + r, color);
  7690  000CB4  501C               	movf	drawCircle@y0,w,c
  7691  000CB6  241E               	addwf	drawCircle@r,w,c
  7692  000CB8  6E16               	movwf	drawPixel@y,c
  7693  000CBA  C020  F017         	movff	drawCircle@color,drawPixel@color
  7694  000CBE  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  7695  000CC2  501A               	movf	drawCircle@x0,w,c
  7696  000CC4  ECC1  F011         	call	_drawPixel
  7697                           
  7698                           ;ST7735_TFT.c: 566: drawPixel(x0 , y0 - r, color);
  7699  000CC8  501E               	movf	drawCircle@r,w,c
  7700  000CCA  0800               	sublw	0
  7701  000CCC  241C               	addwf	drawCircle@y0,w,c
  7702  000CCE  6E16               	movwf	drawPixel@y,c
  7703  000CD0  C020  F017         	movff	drawCircle@color,drawPixel@color
  7704  000CD4  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  7705  000CD8  501A               	movf	drawCircle@x0,w,c
  7706  000CDA  ECC1  F011         	call	_drawPixel
  7707                           
  7708                           ;ST7735_TFT.c: 567: drawPixel(x0+r, y0 , color);
  7709  000CDE  C01C  F016         	movff	drawCircle@y0,drawPixel@y
  7710  000CE2  C020  F017         	movff	drawCircle@color,drawPixel@color
  7711  000CE6  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  7712  000CEA  501A               	movf	drawCircle@x0,w,c
  7713  000CEC  241E               	addwf	drawCircle@r,w,c
  7714  000CEE  ECC1  F011         	call	_drawPixel
  7715                           
  7716                           ;ST7735_TFT.c: 568: drawPixel(x0-r, y0 , color);
  7717  000CF2  C01C  F016         	movff	drawCircle@y0,drawPixel@y
  7718  000CF6  C020  F017         	movff	drawCircle@color,drawPixel@color
  7719  000CFA  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  7720  000CFE  501E               	movf	drawCircle@r,w,c
  7721  000D00  0800               	sublw	0
  7722  000D02  241A               	addwf	drawCircle@x0,w,c
  7723  000D04  ECC1  F011         	call	_drawPixel
  7724                           
  7725                           ;ST7735_TFT.c: 569: while (x < y) {
  7726  000D08  D078               	goto	l4413
  7727  000D0A                     l4385:
  7728                           
  7729                           ;ST7735_TFT.c: 570: if (f >= 0) {
  7730  000D0A  BE29               	btfsc	drawCircle@f+1,7,c
  7731  000D0C  D00B               	goto	l241
  7732                           
  7733                           ;ST7735_TFT.c: 571: y--;
  7734  000D0E  062C               	decf	drawCircle@y,f,c
  7735  000D10  A0D8               	btfss	status,0,c
  7736  000D12  062D               	decf	drawCircle@y+1,f,c
  7737                           
  7738                           ;ST7735_TFT.c: 572: ddF_y += 2;
  7739  000D14  0E02               	movlw	2
  7740  000D16  2626               	addwf	drawCircle@ddF_y,f,c
  7741  000D18  0E00               	movlw	0
  7742  000D1A  2227               	addwfc	drawCircle@ddF_y+1,f,c
  7743                           
  7744                           ;ST7735_TFT.c: 573: f += ddF_y;
  7745  000D1C  5026               	movf	drawCircle@ddF_y,w,c
  7746  000D1E  2628               	addwf	drawCircle@f,f,c
  7747  000D20  5027               	movf	drawCircle@ddF_y+1,w,c
  7748  000D22  2229               	addwfc	drawCircle@f+1,f,c
  7749  000D24                     l241:
  7750                           
  7751                           ;ST7735_TFT.c: 574: }
  7752                           ;ST7735_TFT.c: 575: x++;
  7753  000D24  4A2A               	infsnz	drawCircle@x,f,c
  7754  000D26  2A2B               	incf	drawCircle@x+1,f,c
  7755                           
  7756                           ;ST7735_TFT.c: 576: ddF_x += 2;
  7757  000D28  0E02               	movlw	2
  7758  000D2A  2624               	addwf	drawCircle@ddF_x,f,c
  7759  000D2C  0E00               	movlw	0
  7760  000D2E  2225               	addwfc	drawCircle@ddF_x+1,f,c
  7761                           
  7762                           ;ST7735_TFT.c: 577: f += ddF_x;
  7763  000D30  5024               	movf	drawCircle@ddF_x,w,c
  7764  000D32  2628               	addwf	drawCircle@f,f,c
  7765  000D34  5025               	movf	drawCircle@ddF_x+1,w,c
  7766  000D36  2229               	addwfc	drawCircle@f+1,f,c
  7767                           
  7768                           ;ST7735_TFT.c: 578: drawPixel(x0 + x, y0 + y, color);
  7769  000D38  501C               	movf	drawCircle@y0,w,c
  7770  000D3A  242C               	addwf	drawCircle@y,w,c
  7771  000D3C  6E16               	movwf	drawPixel@y,c
  7772  000D3E  C020  F017         	movff	drawCircle@color,drawPixel@color
  7773  000D42  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  7774  000D46  501A               	movf	drawCircle@x0,w,c
  7775  000D48  242A               	addwf	drawCircle@x,w,c
  7776  000D4A  ECC1  F011         	call	_drawPixel
  7777                           
  7778                           ;ST7735_TFT.c: 579: drawPixel(x0 - x, y0 + y, color);
  7779  000D4E  501C               	movf	drawCircle@y0,w,c
  7780  000D50  242C               	addwf	drawCircle@y,w,c
  7781  000D52  6E16               	movwf	drawPixel@y,c
  7782  000D54  C020  F017         	movff	drawCircle@color,drawPixel@color
  7783  000D58  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  7784  000D5C  502A               	movf	drawCircle@x,w,c
  7785  000D5E  0800               	sublw	0
  7786  000D60  241A               	addwf	drawCircle@x0,w,c
  7787  000D62  ECC1  F011         	call	_drawPixel
  7788                           
  7789                           ;ST7735_TFT.c: 580: drawPixel(x0 + x, y0 - y, color);
  7790  000D66  502C               	movf	drawCircle@y,w,c
  7791  000D68  0800               	sublw	0
  7792  000D6A  241C               	addwf	drawCircle@y0,w,c
  7793  000D6C  6E16               	movwf	drawPixel@y,c
  7794  000D6E  C020  F017         	movff	drawCircle@color,drawPixel@color
  7795  000D72  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  7796  000D76  501A               	movf	drawCircle@x0,w,c
  7797  000D78  242A               	addwf	drawCircle@x,w,c
  7798  000D7A  ECC1  F011         	call	_drawPixel
  7799                           
  7800                           ;ST7735_TFT.c: 581: drawPixel(x0 - x, y0 - y, color);
  7801  000D7E  502C               	movf	drawCircle@y,w,c
  7802  000D80  0800               	sublw	0
  7803  000D82  241C               	addwf	drawCircle@y0,w,c
  7804  000D84  6E16               	movwf	drawPixel@y,c
  7805  000D86  C020  F017         	movff	drawCircle@color,drawPixel@color
  7806  000D8A  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  7807  000D8E  502A               	movf	drawCircle@x,w,c
  7808  000D90  0800               	sublw	0
  7809  000D92  241A               	addwf	drawCircle@x0,w,c
  7810  000D94  ECC1  F011         	call	_drawPixel
  7811                           
  7812                           ;ST7735_TFT.c: 582: drawPixel(x0 + y, y0 + x, color);
  7813  000D98  501C               	movf	drawCircle@y0,w,c
  7814  000D9A  242A               	addwf	drawCircle@x,w,c
  7815  000D9C  6E16               	movwf	drawPixel@y,c
  7816  000D9E  C020  F017         	movff	drawCircle@color,drawPixel@color
  7817  000DA2  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  7818  000DA6  501A               	movf	drawCircle@x0,w,c
  7819  000DA8  242C               	addwf	drawCircle@y,w,c
  7820  000DAA  ECC1  F011         	call	_drawPixel
  7821                           
  7822                           ;ST7735_TFT.c: 583: drawPixel(x0 - y, y0 + x, color);
  7823  000DAE  501C               	movf	drawCircle@y0,w,c
  7824  000DB0  242A               	addwf	drawCircle@x,w,c
  7825  000DB2  6E16               	movwf	drawPixel@y,c
  7826  000DB4  C020  F017         	movff	drawCircle@color,drawPixel@color
  7827  000DB8  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  7828  000DBC  502C               	movf	drawCircle@y,w,c
  7829  000DBE  0800               	sublw	0
  7830  000DC0  241A               	addwf	drawCircle@x0,w,c
  7831  000DC2  ECC1  F011         	call	_drawPixel
  7832                           
  7833                           ;ST7735_TFT.c: 584: drawPixel(x0 + y, y0 - x, color);
  7834  000DC6  502A               	movf	drawCircle@x,w,c
  7835  000DC8  0800               	sublw	0
  7836  000DCA  241C               	addwf	drawCircle@y0,w,c
  7837  000DCC  6E16               	movwf	drawPixel@y,c
  7838  000DCE  C020  F017         	movff	drawCircle@color,drawPixel@color
  7839  000DD2  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  7840  000DD6  501A               	movf	drawCircle@x0,w,c
  7841  000DD8  242C               	addwf	drawCircle@y,w,c
  7842  000DDA  ECC1  F011         	call	_drawPixel
  7843                           
  7844                           ;ST7735_TFT.c: 585: drawPixel(x0 - y, y0 - x, color);
  7845  000DDE  502A               	movf	drawCircle@x,w,c
  7846  000DE0  0800               	sublw	0
  7847  000DE2  241C               	addwf	drawCircle@y0,w,c
  7848  000DE4  6E16               	movwf	drawPixel@y,c
  7849  000DE6  C020  F017         	movff	drawCircle@color,drawPixel@color
  7850  000DEA  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  7851  000DEE  502C               	movf	drawCircle@y,w,c
  7852  000DF0  0800               	sublw	0
  7853  000DF2  241A               	addwf	drawCircle@x0,w,c
  7854  000DF4  ECC1  F011         	call	_drawPixel
  7855  000DF8  D000               	goto	l4413
  7856  000DFA                     l4413:
  7857  000DFA  502C               	movf	drawCircle@y,w,c
  7858  000DFC  5C2A               	subwf	drawCircle@x,w,c
  7859  000DFE  502B               	movf	drawCircle@x+1,w,c
  7860  000E00  0A80               	xorlw	128
  7861  000E02  6E22               	movwf	??_drawCircle& (0+255),c
  7862  000E04  502D               	movf	drawCircle@y+1,w,c
  7863  000E06  0A80               	xorlw	128
  7864  000E08  5822               	subwfb	??_drawCircle& (0+255),w,c
  7865  000E0A  A0D8               	btfss	status,0,c
  7866  000E0C  D77E               	goto	l4385
  7867  000E0E  0012               	return		;funcret
  7868  000E10                     __end_of_drawCircle:
  7869                           	opt stack 0
  7870                           tblptru	equ	0xFF8
  7871                           tblptrh	equ	0xFF7
  7872                           tblptrl	equ	0xFF6
  7873                           tablat	equ	0xFF5
  7874                           prodl	equ	0xFF3
  7875                           intcon	equ	0xFF2
  7876                           intcon2	equ	0xFF1
  7877                           intcon3	equ	0xFF0
  7878                           postinc0	equ	0xFEE
  7879                           wreg	equ	0xFE8
  7880                           postdec1	equ	0xFE5
  7881                           fsr1l	equ	0xFE1
  7882                           indf2	equ	0xFDF
  7883                           fsr2h	equ	0xFDA
  7884                           fsr2l	equ	0xFD9
  7885                           status	equ	0xFD8
  7886                           
  7887 ;; *************** function _PED_Control *****************
  7888 ;; Defined at:
  7889 ;;		line 427 in file "Lab8.c"
  7890 ;; Parameters:    Size  Location     Type
  7891 ;;  direction       1    wreg     unsigned char 
  7892 ;;  Num_Sec         1    9[BANK0 ] unsigned char 
  7893 ;; Auto vars:     Size  Location     Type
  7894 ;;  direction       1   10[BANK0 ] unsigned char 
  7895 ;;  i               1   11[BANK0 ] unsigned char 
  7896 ;; Return value:  Size  Location     Type
  7897 ;;		None               void
  7898 ;; Registers used:
  7899 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7900 ;; Tracked objects:
  7901 ;;		On entry : 0/0
  7902 ;;		On exit  : 0/0
  7903 ;;		Unchanged: 0/0
  7904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7905 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7906 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7907 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7908 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7909 ;;Total ram usage:        3 bytes
  7910 ;; Hardware stack levels used:    1
  7911 ;; Hardware stack levels required when called:   10
  7912 ;; This function calls:
  7913 ;;		_Wait_One_Second_With_Beep
  7914 ;;		_update_LCD_PED_Count
  7915 ;; This function is called by:
  7916 ;;		_Day_Mode
  7917 ;; This function uses a non-reentrant model
  7918 ;;
  7919                           
  7920                           	psect	text36
  7921  001FAA                     __ptext36:
  7922                           	opt stack 0
  7923  001FAA                     _PED_Control:
  7924                           	opt stack 19
  7925                           
  7926                           ;incstack = 0
  7927                           ;PED_Control@direction stored from wreg
  7928  001FAA  0100               	movlb	0	; () banked
  7929  001FAC  6FB1               	movwf	PED_Control@direction& (0+255),b
  7930                           
  7931                           ; BSR set to: 0
  7932                           ;Lab8.c: 429: for(char i = Num_Sec-1;i>0; i--)
  7933  001FAE  0100               	movlb	0	; () banked
  7934  001FB0  05B0               	decf	PED_Control@Num_Sec& (0+255),w,b
  7935  001FB2  0100               	movlb	0	; () banked
  7936  001FB4  6FB2               	movwf	PED_Control@i& (0+255),b
  7937  001FB6                     l4903:
  7938                           
  7939                           ; BSR set to: 0
  7940  001FB6  0100               	movlb	0	; () banked
  7941  001FB8  51B2               	movf	PED_Control@i& (0+255),w,b
  7942  001FBA  0100               	movlb	0	; () banked
  7943  001FBC  B4D8               	btfsc	status,2,c
  7944  001FBE  D00D               	goto	l4915
  7945  001FC0  D001               	goto	l4907
  7946                           
  7947                           ; BSR set to: 0
  7948  001FC2  D00B               	goto	l4915
  7949  001FC4                     l4907:
  7950                           
  7951                           ; BSR set to: 0
  7952                           ;Lab8.c: 430: {
  7953                           ;Lab8.c: 431: update_LCD_PED_Count(direction, i);
  7954  001FC4  C0B2  F0AE         	movff	PED_Control@i,update_LCD_PED_Count@count
  7955  001FC8  0100               	movlb	0	; () banked
  7956  001FCA  51B1               	movf	PED_Control@direction& (0+255),w,b
  7957  001FCC  EC77  F00B         	call	_update_LCD_PED_Count
  7958                           
  7959                           ;Lab8.c: 432: Wait_One_Second_With_Beep();
  7960  001FD0  EC5E  F012         	call	_Wait_One_Second_With_Beep	;wreg free
  7961  001FD4  0100               	movlb	0	; () banked
  7962  001FD6  07B2               	decf	PED_Control@i& (0+255),f,b
  7963  001FD8  D7EE               	goto	l4903
  7964  001FDA                     l4915:
  7965                           
  7966                           ; BSR set to: 0
  7967                           ;Lab8.c: 433: }
  7968                           ;Lab8.c: 435: update_LCD_PED_Count(direction, 0);
  7969  001FDA  0E00               	movlw	0
  7970  001FDC  0100               	movlb	0	; () banked
  7971  001FDE  6FAE               	movwf	update_LCD_PED_Count@count& (0+255),b
  7972  001FE0  0100               	movlb	0	; () banked
  7973  001FE2  51B1               	movf	PED_Control@direction& (0+255),w,b
  7974  001FE4  EC77  F00B         	call	_update_LCD_PED_Count
  7975                           
  7976                           ;Lab8.c: 436: Wait_One_Second_With_Beep();
  7977  001FE8  EC5E  F012         	call	_Wait_One_Second_With_Beep	;wreg free
  7978                           
  7979                           ;Lab8.c: 437: if (direction ==2)
  7980  001FEC  0E02               	movlw	2
  7981  001FEE  0100               	movlb	0	; () banked
  7982  001FF0  19B1               	xorwf	PED_Control@direction& (0+255),w,b
  7983  001FF2  A4D8               	btfss	status,2,c
  7984  001FF4  D003               	goto	l4923
  7985                           
  7986                           ; BSR set to: 0
  7987                           ;Lab8.c: 438: NS_PED_SW=0;
  7988  001FF6  0E00               	movlw	0
  7989  001FF8  6E66               	movwf	_NS_PED_SW,c
  7990  001FFA  D003               	goto	l460
  7991  001FFC                     l4923:
  7992                           
  7993                           ; BSR set to: 0
  7994                           ;Lab8.c: 439: else
  7995                           ;Lab8.c: 440: EW_PED_SW=0;
  7996  001FFC  0E00               	movlw	0
  7997  001FFE  6E63               	movwf	_EW_PED_SW,c
  7998  002000  D000               	goto	l460
  7999  002002                     l460:
  8000                           
  8001                           ; BSR set to: 0
  8002  002002  0012               	return		;funcret
  8003  002004                     __end_of_PED_Control:
  8004                           	opt stack 0
  8005                           tblptru	equ	0xFF8
  8006                           tblptrh	equ	0xFF7
  8007                           tblptrl	equ	0xFF6
  8008                           tablat	equ	0xFF5
  8009                           prodl	equ	0xFF3
  8010                           intcon	equ	0xFF2
  8011                           intcon2	equ	0xFF1
  8012                           intcon3	equ	0xFF0
  8013                           postinc0	equ	0xFEE
  8014                           wreg	equ	0xFE8
  8015                           postdec1	equ	0xFE5
  8016                           fsr1l	equ	0xFE1
  8017                           indf2	equ	0xFDF
  8018                           fsr2h	equ	0xFDA
  8019                           fsr2l	equ	0xFD9
  8020                           status	equ	0xFD8
  8021                           
  8022 ;; *************** function _update_LCD_PED_Count *****************
  8023 ;; Defined at:
  8024 ;;		line 665 in file "Lab8.c"
  8025 ;; Parameters:    Size  Location     Type
  8026 ;;  direction       1    wreg     unsigned char 
  8027 ;;  count           1    7[BANK0 ] unsigned char 
  8028 ;; Auto vars:     Size  Location     Type
  8029 ;;  direction       1    8[BANK0 ] unsigned char 
  8030 ;; Return value:  Size  Location     Type
  8031 ;;		None               void
  8032 ;; Registers used:
  8033 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8034 ;; Tracked objects:
  8035 ;;		On entry : 0/0
  8036 ;;		On exit  : 0/0
  8037 ;;		Unchanged: 0/0
  8038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8039 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8040 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8041 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8042 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8043 ;;Total ram usage:        2 bytes
  8044 ;; Hardware stack levels used:    1
  8045 ;; Hardware stack levels required when called:    9
  8046 ;; This function calls:
  8047 ;;		___awdiv
  8048 ;;		___awmod
  8049 ;;		_drawtext
  8050 ;; This function is called by:
  8051 ;;		_PED_Control
  8052 ;; This function uses a non-reentrant model
  8053 ;;
  8054                           
  8055                           	psect	text37
  8056  0016EE                     __ptext37:
  8057                           	opt stack 0
  8058  0016EE                     _update_LCD_PED_Count:
  8059                           	opt stack 19
  8060                           
  8061                           ; BSR set to: 0
  8062                           ;incstack = 0
  8063                           ;update_LCD_PED_Count@direction stored from wreg
  8064  0016EE  0100               	movlb	0	; () banked
  8065  0016F0  6FAF               	movwf	update_LCD_PED_Count@direction& (0+255),b
  8066                           
  8067                           ; BSR set to: 0
  8068                           ;Lab8.c: 667: switch (direction)
  8069  0016F2  D05B               	goto	l4747
  8070  0016F4                     l4737:
  8071                           
  8072                           ; BSR set to: 0
  8073                           ;Lab8.c: 670: PED_EW_Count[0] = count/10 + '0';
  8074  0016F4  C0AE  F00F         	movff	update_LCD_PED_Count@count,___awdiv@dividend
  8075  0016F8  6A10               	clrf	___awdiv@dividend+1,c
  8076  0016FA  0E00               	movlw	0
  8077  0016FC  6E12               	movwf	___awdiv@divisor+1,c
  8078  0016FE  0E0A               	movlw	10
  8079  001700  6E11               	movwf	___awdiv@divisor,c
  8080  001702  ECA1  F00D         	call	___awdiv	;wreg free
  8081  001706  500F               	movf	?___awdiv,w,c
  8082  001708  0F30               	addlw	48
  8083  00170A  0100               	movlb	0	; () banked
  8084  00170C  6FB8               	movwf	_PED_EW_Count& (0+255),b
  8085                           
  8086                           ;Lab8.c: 671: PED_EW_Count[1] = count%10 + '0';
  8087  00170E  C0AE  F00F         	movff	update_LCD_PED_Count@count,___awmod@dividend
  8088  001712  6A10               	clrf	___awmod@dividend+1,c
  8089  001714  0E00               	movlw	0
  8090  001716  6E12               	movwf	___awmod@divisor+1,c
  8091  001718  0E0A               	movlw	10
  8092  00171A  6E11               	movwf	___awmod@divisor,c
  8093  00171C  ECF8  F00E         	call	___awmod	;wreg free
  8094  001720  500F               	movf	?___awmod,w,c
  8095  001722  0F30               	addlw	48
  8096  001724  0100               	movlb	0	; () banked
  8097  001726  6FB9               	movwf	(_PED_EW_Count+1)& (0+255),b
  8098                           
  8099                           ; BSR set to: 0
  8100                           ;Lab8.c: 672: drawtext(2, 30, PED_EW_Count, 0x07FF, 0x0000, 2);
  8101  001728  0E1E               	movlw	30
  8102  00172A  6E37               	movwf	drawtext@y,c
  8103  00172C  0EB8               	movlw	low _PED_EW_Count
  8104  00172E  6E38               	movwf	drawtext@_text,c
  8105  001730  0E00               	movlw	high _PED_EW_Count
  8106  001732  6E39               	movwf	drawtext@_text+1,c
  8107  001734  0E07               	movlw	7
  8108  001736  6E3B               	movwf	drawtext@color+1,c
  8109  001738  683A               	setf	drawtext@color,c
  8110  00173A  0E00               	movlw	0
  8111  00173C  6E3D               	movwf	drawtext@bg+1,c
  8112  00173E  0E00               	movlw	0
  8113  001740  6E3C               	movwf	drawtext@bg,c
  8114  001742  0E02               	movlw	2
  8115  001744  6E3E               	movwf	drawtext@size,c
  8116  001746  0E02               	movlw	2
  8117  001748  EC9A  F009         	call	_drawtext
  8118                           
  8119                           ;Lab8.c: 673: break;
  8120  00174C  D037               	goto	l521
  8121  00174E                     l4741:
  8122                           
  8123                           ;Lab8.c: 675: PED_NS_Count[0] = count/10 + '0';
  8124  00174E  C0AE  F00F         	movff	update_LCD_PED_Count@count,___awdiv@dividend
  8125  001752  6A10               	clrf	___awdiv@dividend+1,c
  8126  001754  0E00               	movlw	0
  8127  001756  6E12               	movwf	___awdiv@divisor+1,c
  8128  001758  0E0A               	movlw	10
  8129  00175A  6E11               	movwf	___awdiv@divisor,c
  8130  00175C  ECA1  F00D         	call	___awdiv	;wreg free
  8131  001760  500F               	movf	?___awdiv,w,c
  8132  001762  0F30               	addlw	48
  8133  001764  0100               	movlb	0	; () banked
  8134  001766  6FBB               	movwf	_PED_NS_Count& (0+255),b
  8135                           
  8136                           ;Lab8.c: 676: PED_NS_Count[1] = count%10 + '0';
  8137  001768  C0AE  F00F         	movff	update_LCD_PED_Count@count,___awmod@dividend
  8138  00176C  6A10               	clrf	___awmod@dividend+1,c
  8139  00176E  0E00               	movlw	0
  8140  001770  6E12               	movwf	___awmod@divisor+1,c
  8141  001772  0E0A               	movlw	10
  8142  001774  6E11               	movwf	___awmod@divisor,c
  8143  001776  ECF8  F00E         	call	___awmod	;wreg free
  8144  00177A  500F               	movf	?___awmod,w,c
  8145  00177C  0F30               	addlw	48
  8146  00177E  0100               	movlb	0	; () banked
  8147  001780  6FBC               	movwf	(_PED_NS_Count+1)& (0+255),b
  8148                           
  8149                           ; BSR set to: 0
  8150                           ;Lab8.c: 677: drawtext(2, 90, PED_NS_Count,0x001F, 0x0000, 2);
  8151  001782  0E5A               	movlw	90
  8152  001784  6E37               	movwf	drawtext@y,c
  8153  001786  0EBB               	movlw	low _PED_NS_Count
  8154  001788  6E38               	movwf	drawtext@_text,c
  8155  00178A  0E00               	movlw	high _PED_NS_Count
  8156  00178C  6E39               	movwf	drawtext@_text+1,c
  8157  00178E  0E00               	movlw	0
  8158  001790  6E3B               	movwf	drawtext@color+1,c
  8159  001792  0E1F               	movlw	31
  8160  001794  6E3A               	movwf	drawtext@color,c
  8161  001796  0E00               	movlw	0
  8162  001798  6E3D               	movwf	drawtext@bg+1,c
  8163  00179A  0E00               	movlw	0
  8164  00179C  6E3C               	movwf	drawtext@bg,c
  8165  00179E  0E02               	movlw	2
  8166  0017A0  6E3E               	movwf	drawtext@size,c
  8167  0017A2  0E02               	movlw	2
  8168  0017A4  EC9A  F009         	call	_drawtext
  8169                           
  8170                           ;Lab8.c: 681: }
  8171                           
  8172                           ;Lab8.c: 678: break;
  8173  0017A8  D009               	goto	l521
  8174  0017AA                     l4747:
  8175  0017AA  0100               	movlb	0	; () banked
  8176  0017AC  51AF               	movf	update_LCD_PED_Count@direction& (0+255),w,b
  8177                           
  8178                           ; Switch size 1, requested type "space"
  8179                           ; Number of cases is 2, Range of values is 0 to 2
  8180                           ; switch strategies available:
  8181                           ; Name         Instructions Cycles
  8182                           ; simple_byte            7     4 (average)
  8183                           ;	Chosen strategy is simple_byte
  8184  0017AE  0A00               	xorlw	0	; case 0
  8185  0017B0  B4D8               	btfsc	status,2,c
  8186  0017B2  D7A0               	goto	l4737
  8187  0017B4  0A02               	xorlw	2	; case 2
  8188  0017B6  B4D8               	btfsc	status,2,c
  8189  0017B8  D7CA               	goto	l4741
  8190  0017BA  D000               	goto	l521
  8191  0017BC                     l521:
  8192  0017BC  0012               	return		;funcret
  8193  0017BE                     __end_of_update_LCD_PED_Count:
  8194                           	opt stack 0
  8195                           tblptru	equ	0xFF8
  8196                           tblptrh	equ	0xFF7
  8197                           tblptrl	equ	0xFF6
  8198                           tablat	equ	0xFF5
  8199                           prodl	equ	0xFF3
  8200                           intcon	equ	0xFF2
  8201                           intcon2	equ	0xFF1
  8202                           intcon3	equ	0xFF0
  8203                           postinc0	equ	0xFEE
  8204                           wreg	equ	0xFE8
  8205                           postdec1	equ	0xFE5
  8206                           fsr1l	equ	0xFE1
  8207                           indf2	equ	0xFDF
  8208                           fsr2h	equ	0xFDA
  8209                           fsr2l	equ	0xFD9
  8210                           status	equ	0xFD8
  8211                           
  8212 ;; *************** function _drawtext *****************
  8213 ;; Defined at:
  8214 ;;		line 507 in file "ST7735_TFT.c"
  8215 ;; Parameters:    Size  Location     Type
  8216 ;;  x               1    wreg     unsigned char 
  8217 ;;  y               1   54[COMRAM] unsigned char 
  8218 ;;  _text           2   55[COMRAM] PTR unsigned char 
  8219 ;;		 -> NULL(0), SW_MODE_Txt(2), SW_NSLT_Txt(2), SW_NSPED_Txt(2), 
  8220 ;;		 -> SW_EWLT_Txt(2), SW_EWPED_Txt(2), PED_NS_Count(3), PED_EW_Count(3), 
  8221 ;;		 -> NSLT_Count(3), NS_Count(3), EWLT_Count(3), EW_Count(3), 
  8222 ;;		 -> FlashingS_Txt(2), FlashingR_Txt(2), Act_Mode_Txt(2), buffer(31), 
  8223 ;;  color           2   57[COMRAM] unsigned int 
  8224 ;;  bg              2   59[COMRAM] unsigned int 
  8225 ;;  size            1   61[COMRAM] unsigned char 
  8226 ;; Auto vars:     Size  Location     Type
  8227 ;;  x               1    0[BANK0 ] unsigned char 
  8228 ;;  i               2    3[BANK0 ] unsigned int 
  8229 ;;  textsize        2    1[BANK0 ] unsigned int 
  8230 ;;  cursor_x        1    6[BANK0 ] unsigned char 
  8231 ;;  cursor_y        1    5[BANK0 ] unsigned char 
  8232 ;; Return value:  Size  Location     Type
  8233 ;;		None               void
  8234 ;; Registers used:
  8235 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8236 ;; Tracked objects:
  8237 ;;		On entry : 0/0
  8238 ;;		On exit  : 0/0
  8239 ;;		Unchanged: 0/0
  8240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8241 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8242 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8243 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8244 ;;      Totals:        10       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8245 ;;Total ram usage:       17 bytes
  8246 ;; Hardware stack levels used:    1
  8247 ;; Hardware stack levels required when called:    8
  8248 ;; This function calls:
  8249 ;;		_drawChar
  8250 ;;		_strlen
  8251 ;; This function is called by:
  8252 ;;		_Initialize_Screen
  8253 ;;		_Wait_One_Second
  8254 ;;		_update_LCD_count
  8255 ;;		_update_LCD_PED_Count
  8256 ;;		_update_LCD_misc
  8257 ;; This function uses a non-reentrant model
  8258 ;;
  8259                           
  8260                           	psect	text38
  8261  001334                     __ptext38:
  8262                           	opt stack 0
  8263  001334                     _drawtext:
  8264                           	opt stack 19
  8265                           
  8266                           ;incstack = 0
  8267                           ;drawtext@x stored from wreg
  8268  001334  0100               	movlb	0	; () banked
  8269  001336  6FA7               	movwf	drawtext@x& (0+255),b
  8270                           
  8271                           ; BSR set to: 0
  8272                           ;ST7735_TFT.c: 509: unsigned char cursor_x, cursor_y;
  8273                           ;ST7735_TFT.c: 510: unsigned int textsize, i;
  8274                           ;ST7735_TFT.c: 511: cursor_x = x, cursor_y = y;
  8275  001338  C0A7  F0AD         	movff	drawtext@x,drawtext@cursor_x
  8276                           
  8277                           ; BSR set to: 0
  8278  00133C  C037  F0AC         	movff	drawtext@y,drawtext@cursor_y
  8279                           
  8280                           ; BSR set to: 0
  8281                           ;ST7735_TFT.c: 512: textsize = strlen(_text);
  8282  001340  C038  F00F         	movff	drawtext@_text,strlen@s
  8283  001344  C039  F010         	movff	drawtext@_text+1,strlen@s+1
  8284  001348  EC4F  F011         	call	_strlen	;wreg free
  8285  00134C  C00F  F0A8         	movff	?_strlen,drawtext@textsize
  8286  001350  C010  F0A9         	movff	?_strlen+1,drawtext@textsize+1
  8287                           
  8288                           ;ST7735_TFT.c: 513: for(i = 0; i < textsize; i++){
  8289  001354  0E00               	movlw	0
  8290  001356  0100               	movlb	0	; () banked
  8291  001358  6FAB               	movwf	(drawtext@i+1)& (0+255),b
  8292  00135A  0E00               	movlw	0
  8293  00135C  6FAA               	movwf	drawtext@i& (0+255),b
  8294  00135E  D064               	goto	l4235
  8295  001360                     l4209:
  8296                           
  8297                           ; BSR set to: 0
  8298                           ;ST7735_TFT.c: 514: if(wrap && ((cursor_x + size * 5) > 128)){
  8299  001360  5041               	movf	_wrap,w,c
  8300  001362  B4D8               	btfsc	status,2,c
  8301  001364  D034               	goto	l4225
  8302                           
  8303                           ; BSR set to: 0
  8304  001366  503E               	movf	drawtext@size,w,c
  8305  001368  0D05               	mullw	5
  8306  00136A  0100               	movlb	0	; () banked
  8307  00136C  51AD               	movf	drawtext@cursor_x& (0+255),w,b
  8308  00136E  6E3F               	movwf	??_drawtext& (0+255),c
  8309  001370  6A40               	clrf	(??_drawtext+1)& (0+255),c
  8310  001372  50F3               	movf	prodl,w,c
  8311  001374  263F               	addwf	??_drawtext,f,c
  8312  001376  50F4               	movf	prodh,w,c
  8313  001378  2240               	addwfc	??_drawtext+1,f,c
  8314  00137A  BE40               	btfsc	??_drawtext+1,7,c
  8315  00137C  D028               	goto	l4225
  8316  00137E  5040               	movf	??_drawtext+1,w,c
  8317  001380  E104               	bnz	u2990
  8318  001382  0E81               	movlw	129
  8319  001384  5C3F               	subwf	??_drawtext,w,c
  8320  001386  A0D8               	btfss	status,0,c
  8321  001388  D022               	goto	l4225
  8322  00138A                     u2990:
  8323                           
  8324                           ; BSR set to: 0
  8325                           ;ST7735_TFT.c: 515: cursor_x = 0;
  8326  00138A  0E00               	movlw	0
  8327  00138C  0100               	movlb	0	; () banked
  8328  00138E  6FAD               	movwf	drawtext@cursor_x& (0+255),b
  8329                           
  8330                           ; BSR set to: 0
  8331                           ;ST7735_TFT.c: 516: cursor_y = cursor_y + size * 7 + 3 ;
  8332  001390  503E               	movf	drawtext@size,w,c
  8333  001392  0D07               	mullw	7
  8334  001394  50F3               	movf	prodl,w,c
  8335  001396  0100               	movlb	0	; () banked
  8336  001398  25AC               	addwf	drawtext@cursor_y& (0+255),w,b
  8337  00139A  0F03               	addlw	3
  8338  00139C  0100               	movlb	0	; () banked
  8339  00139E  6FAC               	movwf	drawtext@cursor_y& (0+255),b
  8340                           
  8341                           ; BSR set to: 0
  8342                           ;ST7735_TFT.c: 517: if(cursor_y > 160) cursor_y = 160;
  8343  0013A0  0EA0               	movlw	160
  8344  0013A2  0100               	movlb	0	; () banked
  8345  0013A4  65AC               	cpfsgt	drawtext@cursor_y& (0+255),b
  8346  0013A6  D004               	goto	l4221
  8347                           
  8348                           ; BSR set to: 0
  8349  0013A8  0EA0               	movlw	160
  8350  0013AA  0100               	movlb	0	; () banked
  8351  0013AC  6FAC               	movwf	drawtext@cursor_y& (0+255),b
  8352  0013AE  D000               	goto	l4221
  8353  0013B0                     l4221:
  8354                           
  8355                           ; BSR set to: 0
  8356                           ;ST7735_TFT.c: 518: if(_text[i] == 0x20) goto _skip; }
  8357  0013B0  0100               	movlb	0	; () banked
  8358  0013B2  51AA               	movf	drawtext@i& (0+255),w,b
  8359  0013B4  2438               	addwf	drawtext@_text,w,c
  8360  0013B6  6ED9               	movwf	fsr2l,c
  8361  0013B8  0100               	movlb	0	; () banked
  8362  0013BA  51AB               	movf	(drawtext@i+1)& (0+255),w,b
  8363  0013BC  2039               	addwfc	drawtext@_text+1,w,c
  8364  0013BE  6EDA               	movwf	fsr2h,c
  8365  0013C0  0E20               	movlw	32
  8366  0013C2  18DE               	xorwf	postinc2,w,c
  8367  0013C4  B4D8               	btfsc	status,2,c
  8368  0013C6  D02C               	goto	l4233
  8369  0013C8  D002               	goto	l4225
  8370                           
  8371                           ; BSR set to: 0
  8372  0013CA  D02A               	goto	l4233
  8373                           
  8374                           ; BSR set to: 0
  8375  0013CC  D000               	goto	l4225
  8376  0013CE                     l4225:
  8377                           
  8378                           ; BSR set to: 0
  8379                           ;ST7735_TFT.c: 519: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
  8380  0013CE  C0AC  F02C         	movff	drawtext@cursor_y,drawChar@y
  8381  0013D2  0100               	movlb	0	; () banked
  8382  0013D4  51AA               	movf	drawtext@i& (0+255),w,b
  8383  0013D6  2438               	addwf	drawtext@_text,w,c
  8384  0013D8  6ED9               	movwf	fsr2l,c
  8385  0013DA  0100               	movlb	0	; () banked
  8386  0013DC  51AB               	movf	(drawtext@i+1)& (0+255),w,b
  8387  0013DE  2039               	addwfc	drawtext@_text+1,w,c
  8388  0013E0  6EDA               	movwf	fsr2h,c
  8389  0013E2  50DF               	movf	indf2,w,c
  8390  0013E4  6E2D               	movwf	drawChar@c,c
  8391  0013E6  C03A  F02E         	movff	drawtext@color,drawChar@color
  8392  0013EA  C03B  F02F         	movff	drawtext@color+1,drawChar@color+1
  8393  0013EE  C03C  F030         	movff	drawtext@bg,drawChar@bg
  8394  0013F2  C03D  F031         	movff	drawtext@bg+1,drawChar@bg+1
  8395  0013F6  C03E  F032         	movff	drawtext@size,drawChar@size
  8396  0013FA  0100               	movlb	0	; () banked
  8397  0013FC  51AD               	movf	drawtext@cursor_x& (0+255),w,b
  8398  0013FE  ECCB  F007         	call	_drawChar
  8399                           
  8400                           ;ST7735_TFT.c: 520: cursor_x = cursor_x + size * 6;
  8401  001402  503E               	movf	drawtext@size,w,c
  8402  001404  0D06               	mullw	6
  8403  001406  50F3               	movf	prodl,w,c
  8404  001408  0100               	movlb	0	; () banked
  8405  00140A  25AD               	addwf	drawtext@cursor_x& (0+255),w,b
  8406  00140C  0100               	movlb	0	; () banked
  8407  00140E  6FAD               	movwf	drawtext@cursor_x& (0+255),b
  8408                           
  8409                           ; BSR set to: 0
  8410                           ;ST7735_TFT.c: 521: if(cursor_x > 128) cursor_x = 128;
  8411  001410  0E80               	movlw	128
  8412  001412  0100               	movlb	0	; () banked
  8413  001414  65AD               	cpfsgt	drawtext@cursor_x& (0+255),b
  8414  001416  D004               	goto	l4233
  8415                           
  8416                           ; BSR set to: 0
  8417  001418  0E80               	movlw	128
  8418  00141A  0100               	movlb	0	; () banked
  8419  00141C  6FAD               	movwf	drawtext@cursor_x& (0+255),b
  8420                           
  8421                           ; BSR set to: 0
  8422  00141E  D000               	goto	l4233
  8423  001420                     l4233:
  8424                           
  8425                           ; BSR set to: 0
  8426  001420  0100               	movlb	0	; () banked
  8427  001422  4BAA               	infsnz	drawtext@i& (0+255),f,b
  8428  001424  2BAB               	incf	(drawtext@i+1)& (0+255),f,b
  8429  001426  D000               	goto	l4235
  8430  001428                     l4235:
  8431                           
  8432                           ; BSR set to: 0
  8433  001428  0100               	movlb	0	; () banked
  8434  00142A  51A8               	movf	drawtext@textsize& (0+255),w,b
  8435  00142C  0100               	movlb	0	; () banked
  8436  00142E  5DAA               	subwf	drawtext@i& (0+255),w,b
  8437  001430  0100               	movlb	0	; () banked
  8438  001432  51A9               	movf	(drawtext@textsize+1)& (0+255),w,b
  8439  001434  0100               	movlb	0	; () banked
  8440  001436  59AB               	subwfb	(drawtext@i+1)& (0+255),w,b
  8441  001438  A0D8               	btfss	status,0,c
  8442  00143A  D792               	goto	l4209
  8443                           
  8444                           ; BSR set to: 0
  8445                           
  8446                           ; BSR set to: 0
  8447  00143C  0012               	return		;funcret
  8448  00143E                     __end_of_drawtext:
  8449                           	opt stack 0
  8450                           tblptru	equ	0xFF8
  8451                           tblptrh	equ	0xFF7
  8452                           tblptrl	equ	0xFF6
  8453                           tablat	equ	0xFF5
  8454                           prodh	equ	0xFF4
  8455                           prodl	equ	0xFF3
  8456                           intcon	equ	0xFF2
  8457                           intcon2	equ	0xFF1
  8458                           intcon3	equ	0xFF0
  8459                           postinc0	equ	0xFEE
  8460                           wreg	equ	0xFE8
  8461                           postdec1	equ	0xFE5
  8462                           fsr1l	equ	0xFE1
  8463                           indf2	equ	0xFDF
  8464                           postinc2	equ	0xFDE
  8465                           fsr2h	equ	0xFDA
  8466                           fsr2l	equ	0xFD9
  8467                           status	equ	0xFD8
  8468                           
  8469 ;; *************** function _strlen *****************
  8470 ;; Defined at:
  8471 ;;		line 4 in file "E:\XC8\sources\common\strlen.c"
  8472 ;; Parameters:    Size  Location     Type
  8473 ;;  s               2   14[COMRAM] PTR const unsigned char 
  8474 ;;		 -> NULL(0), SW_MODE_Txt(2), SW_NSLT_Txt(2), SW_NSPED_Txt(2), 
  8475 ;;		 -> SW_EWLT_Txt(2), SW_EWPED_Txt(2), PED_NS_Count(3), PED_EW_Count(3), 
  8476 ;;		 -> NSLT_Count(3), NS_Count(3), EWLT_Count(3), EW_Count(3), 
  8477 ;;		 -> FlashingS_Txt(2), FlashingR_Txt(2), Act_Mode_Txt(2), buffer(31), 
  8478 ;; Auto vars:     Size  Location     Type
  8479 ;;  cp              2   18[COMRAM] PTR const unsigned char 
  8480 ;;		 -> NULL(0), SW_MODE_Txt(2), SW_NSLT_Txt(2), SW_NSPED_Txt(2), 
  8481 ;;		 -> SW_EWLT_Txt(2), SW_EWPED_Txt(2), PED_NS_Count(3), PED_EW_Count(3), 
  8482 ;;		 -> NSLT_Count(3), NS_Count(3), EWLT_Count(3), EW_Count(3), 
  8483 ;;		 -> FlashingS_Txt(2), FlashingR_Txt(2), Act_Mode_Txt(2), buffer(31), 
  8484 ;; Return value:  Size  Location     Type
  8485 ;;                  2   14[COMRAM] unsigned int 
  8486 ;; Registers used:
  8487 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8488 ;; Tracked objects:
  8489 ;;		On entry : 0/0
  8490 ;;		On exit  : 0/0
  8491 ;;		Unchanged: 0/0
  8492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8493 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8494 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8495 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8496 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8497 ;;Total ram usage:        6 bytes
  8498 ;; Hardware stack levels used:    1
  8499 ;; Hardware stack levels required when called:    2
  8500 ;; This function calls:
  8501 ;;		Nothing
  8502 ;; This function is called by:
  8503 ;;		_drawtext
  8504 ;; This function uses a non-reentrant model
  8505 ;;
  8506                           
  8507                           	psect	text39
  8508  00229E                     __ptext39:
  8509                           	opt stack 0
  8510  00229E                     _strlen:
  8511                           	opt stack 24
  8512                           
  8513                           ; BSR set to: 0
  8514                           ;incstack = 0
  8515  00229E  C00F  F013         	movff	strlen@s,strlen@cp
  8516  0022A2  C010  F014         	movff	strlen@s+1,strlen@cp+1
  8517  0022A6  D003               	goto	l4159
  8518  0022A8                     l4157:
  8519  0022A8  4A13               	infsnz	strlen@cp,f,c
  8520  0022AA  2A14               	incf	strlen@cp+1,f,c
  8521  0022AC  D000               	goto	l4159
  8522  0022AE                     l4159:
  8523  0022AE  C013  FFD9         	movff	strlen@cp,fsr2l
  8524  0022B2  C014  FFDA         	movff	strlen@cp+1,fsr2h
  8525  0022B6  50DF               	movf	indf2,w,c
  8526  0022B8  A4D8               	btfss	status,2,c
  8527  0022BA  D7F6               	goto	l4157
  8528  0022BC  C00F  F011         	movff	strlen@s,??_strlen
  8529  0022C0  C010  F012         	movff	strlen@s+1,??_strlen+1
  8530  0022C4  1E11               	comf	??_strlen,f,c
  8531  0022C6  1E12               	comf	??_strlen+1,f,c
  8532  0022C8  4A11               	infsnz	??_strlen,f,c
  8533  0022CA  2A12               	incf	??_strlen+1,f,c
  8534  0022CC  5013               	movf	strlen@cp,w,c
  8535  0022CE  2411               	addwf	??_strlen,w,c
  8536  0022D0  6E0F               	movwf	?_strlen,c
  8537  0022D2  5014               	movf	strlen@cp+1,w,c
  8538  0022D4  2012               	addwfc	??_strlen+1,w,c
  8539  0022D6  6E10               	movwf	?_strlen+1,c
  8540  0022D8  D000               	goto	l1127
  8541  0022DA                     l1127:
  8542  0022DA  0012               	return		;funcret
  8543  0022DC                     __end_of_strlen:
  8544                           	opt stack 0
  8545                           tblptru	equ	0xFF8
  8546                           tblptrh	equ	0xFF7
  8547                           tblptrl	equ	0xFF6
  8548                           tablat	equ	0xFF5
  8549                           prodh	equ	0xFF4
  8550                           prodl	equ	0xFF3
  8551                           intcon	equ	0xFF2
  8552                           intcon2	equ	0xFF1
  8553                           intcon3	equ	0xFF0
  8554                           postinc0	equ	0xFEE
  8555                           wreg	equ	0xFE8
  8556                           postdec1	equ	0xFE5
  8557                           fsr1l	equ	0xFE1
  8558                           indf2	equ	0xFDF
  8559                           postinc2	equ	0xFDE
  8560                           fsr2h	equ	0xFDA
  8561                           fsr2l	equ	0xFD9
  8562                           status	equ	0xFD8
  8563                           
  8564 ;; *************** function _drawChar *****************
  8565 ;; Defined at:
  8566 ;;		line 480 in file "ST7735_TFT.c"
  8567 ;; Parameters:    Size  Location     Type
  8568 ;;  x               1    wreg     unsigned char 
  8569 ;;  y               1   43[COMRAM] unsigned char 
  8570 ;;  c               1   44[COMRAM] unsigned char 
  8571 ;;  color           2   45[COMRAM] unsigned int 
  8572 ;;  bg              2   47[COMRAM] unsigned int 
  8573 ;;  size            1   49[COMRAM] unsigned char 
  8574 ;; Auto vars:     Size  Location     Type
  8575 ;;  x               1   51[COMRAM] unsigned char 
  8576 ;;  line            1   50[COMRAM] unsigned char 
  8577 ;;  i               1   53[COMRAM] unsigned char 
  8578 ;;  j               1   52[COMRAM] unsigned char 
  8579 ;; Return value:  Size  Location     Type
  8580 ;;		None               void
  8581 ;; Registers used:
  8582 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8583 ;; Tracked objects:
  8584 ;;		On entry : 0/0
  8585 ;;		On exit  : 0/0
  8586 ;;		Unchanged: 0/0
  8587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8588 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8589 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8590 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8591 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8592 ;;Total ram usage:       11 bytes
  8593 ;; Hardware stack levels used:    1
  8594 ;; Hardware stack levels required when called:    7
  8595 ;; This function calls:
  8596 ;;		___wmul
  8597 ;;		_drawPixel
  8598 ;;		_fillRect
  8599 ;; This function is called by:
  8600 ;;		_drawtext
  8601 ;; This function uses a non-reentrant model
  8602 ;;
  8603                           
  8604                           	psect	text40
  8605  000F96                     __ptext40:
  8606                           	opt stack 0
  8607  000F96                     _drawChar:
  8608                           	opt stack 19
  8609                           
  8610                           ;incstack = 0
  8611                           ;drawChar@x stored from wreg
  8612  000F96  6E34               	movwf	drawChar@x,c
  8613                           
  8614                           ;ST7735_TFT.c: 482: char i, j;
  8615                           ;ST7735_TFT.c: 483: if((x >= 128) || (y >= 160))
  8616  000F98  0E80               	movlw	128
  8617  000F9A  6034               	cpfslt	drawChar@x,c
  8618  000F9C  D0A6               	goto	l193
  8619  000F9E  0E9F               	movlw	159
  8620  000FA0  642C               	cpfsgt	drawChar@y,c
  8621  000FA2  D001               	goto	l4105
  8622                           
  8623                           ;ST7735_TFT.c: 484: return;
  8624  000FA4  D0A2               	goto	l193
  8625  000FA6                     l4105:
  8626                           
  8627                           ;ST7735_TFT.c: 485: if(size < 1) size = 1;
  8628  000FA6  5032               	movf	drawChar@size,w,c
  8629  000FA8  A4D8               	btfss	status,2,c
  8630  000FAA  D003               	goto	l4109
  8631  000FAC  0E01               	movlw	1
  8632  000FAE  6E32               	movwf	drawChar@size,c
  8633  000FB0  D000               	goto	l4109
  8634  000FB2                     l4109:
  8635                           
  8636                           ;ST7735_TFT.c: 486: if((c < ' ') || (c > '~'))
  8637  000FB2  0E1F               	movlw	31
  8638  000FB4  642D               	cpfsgt	drawChar@c,c
  8639  000FB6  D004               	goto	l4113
  8640  000FB8  0E7E               	movlw	126
  8641  000FBA  642D               	cpfsgt	drawChar@c,c
  8642  000FBC  D003               	goto	l195
  8643  000FBE  D000               	goto	l4113
  8644  000FC0                     l4113:
  8645                           
  8646                           ;ST7735_TFT.c: 487: c = '?';
  8647  000FC0  0E3F               	movlw	63
  8648  000FC2  6E2D               	movwf	drawChar@c,c
  8649  000FC4                     l195:
  8650                           
  8651                           ;ST7735_TFT.c: 488: for(i=0; i<5; i++ ) {
  8652  000FC4  0E00               	movlw	0
  8653  000FC6  6E36               	movwf	drawChar@i,c
  8654  000FC8                     l4115:
  8655  000FC8  0E04               	movlw	4
  8656  000FCA  6436               	cpfsgt	drawChar@i,c
  8657  000FCC  D001               	goto	l4119
  8658  000FCE  D08D               	goto	l193
  8659  000FD0                     l4119:
  8660                           
  8661                           ;ST7735_TFT.c: 489: unsigned char line;
  8662                           ;ST7735_TFT.c: 490: if(c < 'S')
  8663  000FD0  0E53               	movlw	83
  8664  000FD2  602D               	cpfslt	drawChar@c,c
  8665  000FD4  D015               	goto	l4123
  8666                           
  8667                           ;ST7735_TFT.c: 491: line = font[(c - 32)*5 + i];
  8668  000FD6  0EE0               	movlw	224
  8669  000FD8  242D               	addwf	drawChar@c,w,c
  8670  000FDA  6E0F               	movwf	___wmul@multiplier,c
  8671  000FDC  6A10               	clrf	___wmul@multiplier+1,c
  8672  000FDE  0EFF               	movlw	255
  8673  000FE0  2210               	addwfc	___wmul@multiplier+1,f,c
  8674  000FE2  0E00               	movlw	0
  8675  000FE4  6E12               	movwf	___wmul@multiplicand+1,c
  8676  000FE6  0E05               	movlw	5
  8677  000FE8  6E11               	movwf	___wmul@multiplicand,c
  8678  000FEA  EC03  F012         	call	___wmul	;wreg free
  8679  000FEE  5036               	movf	drawChar@i,w,c
  8680  000FF0  260F               	addwf	?___wmul,f,c
  8681  000FF2  0E00               	movlw	0
  8682  000FF4  2210               	addwfc	?___wmul+1,f,c
  8683  000FF6  0EBD               	movlw	low _font
  8684  000FF8  240F               	addwf	?___wmul,w,c
  8685  000FFA  6EF6               	movwf	tblptrl,c
  8686  000FFC  0EFD               	movlw	high _font
  8687  000FFE  D014               	goto	L14
  8688  001000                     l4123:
  8689                           
  8690                           ;ST7735_TFT.c: 492: else
  8691                           ;ST7735_TFT.c: 493: line = font2[(c - 'S')*5 + i];
  8692  001000  0EAD               	movlw	173
  8693  001002  242D               	addwf	drawChar@c,w,c
  8694  001004  6E0F               	movwf	___wmul@multiplier,c
  8695  001006  6A10               	clrf	___wmul@multiplier+1,c
  8696  001008  0EFF               	movlw	255
  8697  00100A  2210               	addwfc	___wmul@multiplier+1,f,c
  8698  00100C  0E00               	movlw	0
  8699  00100E  6E12               	movwf	___wmul@multiplicand+1,c
  8700  001010  0E05               	movlw	5
  8701  001012  6E11               	movwf	___wmul@multiplicand,c
  8702  001014  EC03  F012         	call	___wmul	;wreg free
  8703  001018  5036               	movf	drawChar@i,w,c
  8704  00101A  260F               	addwf	?___wmul,f,c
  8705  00101C  0E00               	movlw	0
  8706  00101E  2210               	addwfc	?___wmul+1,f,c
  8707  001020  0EBC               	movlw	low _font2
  8708  001022  240F               	addwf	?___wmul,w,c
  8709  001024  6EF6               	movwf	tblptrl,c
  8710  001026  0EFE               	movlw	high _font2
  8711  001028                     L14:
  8712  001028  2010               	addwfc	?___wmul+1,w,c
  8713  00102A  6EF7               	movwf	tblptrh,c
  8714  00102C                     	if	0	;There are less than 3 active tblptr bytes
  8715  00102C                     	endif
  8716  00102C  0008               	tblrd		*
  8717  00102E  CFF5 F033          	movff	tablat,drawChar@line
  8718  001032  D000               	goto	l4125
  8719  001034                     l4125:
  8720                           
  8721                           ;ST7735_TFT.c: 494: for(j=0; j<7; j++, line >>= 1) {
  8722  001034  0E00               	movlw	0
  8723  001036  6E35               	movwf	drawChar@j,c
  8724  001038                     l4127:
  8725  001038  0E06               	movlw	6
  8726  00103A  6435               	cpfsgt	drawChar@j,c
  8727  00103C  D001               	goto	l202
  8728  00103E  D053               	goto	l4151
  8729  001040                     l202:
  8730                           
  8731                           ;ST7735_TFT.c: 495: if(line & 0x01) {
  8732  001040  A033               	btfss	drawChar@line,0,c
  8733  001042  D023               	goto	l4137
  8734                           
  8735                           ;ST7735_TFT.c: 496: if(size == 1) drawPixel(x+i, y+j, color);
  8736  001044  0432               	decf	drawChar@size,w,c
  8737  001046  A4D8               	btfss	status,2,c
  8738  001048  D00C               	goto	l4135
  8739  00104A  502C               	movf	drawChar@y,w,c
  8740  00104C  2435               	addwf	drawChar@j,w,c
  8741  00104E  6E16               	movwf	drawPixel@y,c
  8742  001050  C02E  F017         	movff	drawChar@color,drawPixel@color
  8743  001054  C02F  F018         	movff	drawChar@color+1,drawPixel@color+1
  8744  001058  5034               	movf	drawChar@x,w,c
  8745  00105A  2436               	addwf	drawChar@i,w,c
  8746  00105C  ECC1  F011         	call	_drawPixel
  8747  001060  D03E               	goto	l4145
  8748  001062                     l4135:
  8749                           
  8750                           ;ST7735_TFT.c: 497: else fillRect(x+(i*size), y+(j*size), size, size, color);
  8751  001062  5035               	movf	drawChar@j,w,c
  8752  001064  0232               	mulwf	drawChar@size,c
  8753  001066  50F3               	movf	prodl,w,c
  8754  001068  242C               	addwf	drawChar@y,w,c
  8755  00106A  6E21               	movwf	fillRect@y,c
  8756  00106C  C032  F022         	movff	drawChar@size,fillRect@w
  8757  001070  C032  F023         	movff	drawChar@size,fillRect@h
  8758  001074  C02E  F024         	movff	drawChar@color,fillRect@color
  8759  001078  C02F  F025         	movff	drawChar@color+1,fillRect@color+1
  8760  00107C  5036               	movf	drawChar@i,w,c
  8761  00107E  0232               	mulwf	drawChar@size,c
  8762  001080  50F3               	movf	prodl,w,c
  8763  001082  2434               	addwf	drawChar@x,w,c
  8764  001084  EC7B  F010         	call	_fillRect
  8765                           
  8766                           ;ST7735_TFT.c: 498: }
  8767  001088  D02A               	goto	l4145
  8768  00108A                     l4137:
  8769                           
  8770                           ;ST7735_TFT.c: 499: else if(bg != color) {
  8771  00108A  502E               	movf	drawChar@color,w,c
  8772  00108C  1830               	xorwf	drawChar@bg,w,c
  8773  00108E  E104               	bnz	u2850
  8774  001090  502F               	movf	drawChar@color+1,w,c
  8775  001092  1831               	xorwf	drawChar@bg+1,w,c
  8776  001094  B4D8               	btfsc	status,2,c
  8777  001096  D023               	goto	l4145
  8778  001098                     u2850:
  8779                           
  8780                           ;ST7735_TFT.c: 500: if(size == 1) drawPixel(x+i, y+j, bg);
  8781  001098  0432               	decf	drawChar@size,w,c
  8782  00109A  A4D8               	btfss	status,2,c
  8783  00109C  D00C               	goto	l4143
  8784  00109E  502C               	movf	drawChar@y,w,c
  8785  0010A0  2435               	addwf	drawChar@j,w,c
  8786  0010A2  6E16               	movwf	drawPixel@y,c
  8787  0010A4  C030  F017         	movff	drawChar@bg,drawPixel@color
  8788  0010A8  C031  F018         	movff	drawChar@bg+1,drawPixel@color+1
  8789  0010AC  5034               	movf	drawChar@x,w,c
  8790  0010AE  2436               	addwf	drawChar@i,w,c
  8791  0010B0  ECC1  F011         	call	_drawPixel
  8792  0010B4  D014               	goto	l4145
  8793  0010B6                     l4143:
  8794                           
  8795                           ;ST7735_TFT.c: 501: else fillRect(x+i*size, y+j*size, size, size, bg);
  8796  0010B6  5035               	movf	drawChar@j,w,c
  8797  0010B8  0232               	mulwf	drawChar@size,c
  8798  0010BA  50F3               	movf	prodl,w,c
  8799  0010BC  242C               	addwf	drawChar@y,w,c
  8800  0010BE  6E21               	movwf	fillRect@y,c
  8801  0010C0  C032  F022         	movff	drawChar@size,fillRect@w
  8802  0010C4  C032  F023         	movff	drawChar@size,fillRect@h
  8803  0010C8  C030  F024         	movff	drawChar@bg,fillRect@color
  8804  0010CC  C031  F025         	movff	drawChar@bg+1,fillRect@color+1
  8805  0010D0  5036               	movf	drawChar@i,w,c
  8806  0010D2  0232               	mulwf	drawChar@size,c
  8807  0010D4  50F3               	movf	prodl,w,c
  8808  0010D6  2434               	addwf	drawChar@x,w,c
  8809  0010D8  EC7B  F010         	call	_fillRect
  8810  0010DC  D000               	goto	l4145
  8811  0010DE                     l4145:
  8812  0010DE  2A35               	incf	drawChar@j,f,c
  8813  0010E0  90D8               	bcf	status,0,c
  8814  0010E2  3233               	rrcf	drawChar@line,f,c
  8815  0010E4  D7A9               	goto	l4127
  8816  0010E6                     l4151:
  8817  0010E6  2A36               	incf	drawChar@i,f,c
  8818  0010E8  D76F               	goto	l4115
  8819  0010EA                     l193:
  8820  0010EA  0012               	return		;funcret
  8821  0010EC                     __end_of_drawChar:
  8822                           	opt stack 0
  8823                           tblptru	equ	0xFF8
  8824                           tblptrh	equ	0xFF7
  8825                           tblptrl	equ	0xFF6
  8826                           tablat	equ	0xFF5
  8827                           prodh	equ	0xFF4
  8828                           prodl	equ	0xFF3
  8829                           intcon	equ	0xFF2
  8830                           intcon2	equ	0xFF1
  8831                           intcon3	equ	0xFF0
  8832                           postinc0	equ	0xFEE
  8833                           wreg	equ	0xFE8
  8834                           postdec1	equ	0xFE5
  8835                           fsr1l	equ	0xFE1
  8836                           indf2	equ	0xFDF
  8837                           postinc2	equ	0xFDE
  8838                           fsr2h	equ	0xFDA
  8839                           fsr2l	equ	0xFD9
  8840                           status	equ	0xFD8
  8841                           
  8842 ;; *************** function _fillRect *****************
  8843 ;; Defined at:
  8844 ;;		line 470 in file "ST7735_TFT.c"
  8845 ;; Parameters:    Size  Location     Type
  8846 ;;  x               1    wreg     unsigned char 
  8847 ;;  y               1   32[COMRAM] unsigned char 
  8848 ;;  w               1   33[COMRAM] unsigned char 
  8849 ;;  h               1   34[COMRAM] unsigned char 
  8850 ;;  color           2   35[COMRAM] unsigned int 
  8851 ;; Auto vars:     Size  Location     Type
  8852 ;;  x               1   40[COMRAM] unsigned char 
  8853 ;;  i               2   41[COMRAM] int 
  8854 ;; Return value:  Size  Location     Type
  8855 ;;		None               void
  8856 ;; Registers used:
  8857 ;;		wreg, status,2, status,0, cstack
  8858 ;; Tracked objects:
  8859 ;;		On entry : 0/0
  8860 ;;		On exit  : 0/0
  8861 ;;		Unchanged: 0/0
  8862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8863 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8864 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8865 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8866 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8867 ;;Total ram usage:       11 bytes
  8868 ;; Hardware stack levels used:    1
  8869 ;; Hardware stack levels required when called:    6
  8870 ;; This function calls:
  8871 ;;		_drawFastVLine
  8872 ;; This function is called by:
  8873 ;;		_drawChar
  8874 ;; This function uses a non-reentrant model
  8875 ;;
  8876                           
  8877                           	psect	text41
  8878  0020F6                     __ptext41:
  8879                           	opt stack 0
  8880  0020F6                     _fillRect:
  8881                           	opt stack 19
  8882                           
  8883                           ;incstack = 0
  8884                           ;fillRect@x stored from wreg
  8885  0020F6  6E29               	movwf	fillRect@x,c
  8886                           
  8887                           ;ST7735_TFT.c: 472: signed int i;
  8888                           ;ST7735_TFT.c: 474: for (i = x; i < x + w; i++)
  8889  0020F8  C029  F02A         	movff	fillRect@x,fillRect@i
  8890  0020FC  6A2B               	clrf	fillRect@i+1,c
  8891  0020FE  D00E               	goto	l4093
  8892  002100                     l4089:
  8893                           
  8894                           ;ST7735_TFT.c: 475: {
  8895                           ;ST7735_TFT.c: 476: drawFastVLine(i, y, h, color);
  8896  002100  C021  F016         	movff	fillRect@y,drawFastVLine@y
  8897  002104  C023  F017         	movff	fillRect@h,drawFastVLine@h
  8898  002108  C024  F018         	movff	fillRect@color,drawFastVLine@color
  8899  00210C  C025  F019         	movff	fillRect@color+1,drawFastVLine@color+1
  8900  002110  502A               	movf	fillRect@i,w,c
  8901  002112  EC30  F00E         	call	_drawFastVLine
  8902  002116  4A2A               	infsnz	fillRect@i,f,c
  8903  002118  2A2B               	incf	fillRect@i+1,f,c
  8904  00211A  D000               	goto	l4093
  8905  00211C                     l4093:
  8906  00211C  5022               	movf	fillRect@w,w,c
  8907  00211E  C029  F026         	movff	fillRect@x,??_fillRect
  8908  002122  6A27               	clrf	(??_fillRect+1)& (0+255),c
  8909  002124  2626               	addwf	??_fillRect,f,c
  8910  002126  0E00               	movlw	0
  8911  002128  2227               	addwfc	??_fillRect+1,f,c
  8912  00212A  5026               	movf	??_fillRect,w,c
  8913  00212C  5C2A               	subwf	fillRect@i,w,c
  8914  00212E  502B               	movf	fillRect@i+1,w,c
  8915  002130  0A80               	xorlw	128
  8916  002132  6E28               	movwf	(??_fillRect+2)& (0+255),c
  8917  002134  5027               	movf	??_fillRect+1,w,c
  8918  002136  0A80               	xorlw	128
  8919  002138  5828               	subwfb	(??_fillRect+2)& (0+255),w,c
  8920  00213A  A0D8               	btfss	status,0,c
  8921  00213C  D7E1               	goto	l4089
  8922  00213E  0012               	return		;funcret
  8923  002140                     __end_of_fillRect:
  8924                           	opt stack 0
  8925                           tblptru	equ	0xFF8
  8926                           tblptrh	equ	0xFF7
  8927                           tblptrl	equ	0xFF6
  8928                           tablat	equ	0xFF5
  8929                           prodh	equ	0xFF4
  8930                           prodl	equ	0xFF3
  8931                           intcon	equ	0xFF2
  8932                           intcon2	equ	0xFF1
  8933                           intcon3	equ	0xFF0
  8934                           postinc0	equ	0xFEE
  8935                           wreg	equ	0xFE8
  8936                           postdec1	equ	0xFE5
  8937                           fsr1l	equ	0xFE1
  8938                           indf2	equ	0xFDF
  8939                           postinc2	equ	0xFDE
  8940                           fsr2h	equ	0xFDA
  8941                           fsr2l	equ	0xFD9
  8942                           status	equ	0xFD8
  8943                           
  8944 ;; *************** function _drawFastVLine *****************
  8945 ;; Defined at:
  8946 ;;		line 449 in file "ST7735_TFT.c"
  8947 ;; Parameters:    Size  Location     Type
  8948 ;;  x               1    wreg     unsigned char 
  8949 ;;  y               1   21[COMRAM] unsigned char 
  8950 ;;  h               1   22[COMRAM] unsigned char 
  8951 ;;  color           2   23[COMRAM] unsigned int 
  8952 ;; Auto vars:     Size  Location     Type
  8953 ;;  x               1   31[COMRAM] unsigned char 
  8954 ;;  lo              1   30[COMRAM] unsigned char 
  8955 ;;  hi              1   29[COMRAM] unsigned char 
  8956 ;; Return value:  Size  Location     Type
  8957 ;;		None               void
  8958 ;; Registers used:
  8959 ;;		wreg, status,2, status,0, cstack
  8960 ;; Tracked objects:
  8961 ;;		On entry : 0/0
  8962 ;;		On exit  : 0/0
  8963 ;;		Unchanged: 0/0
  8964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8965 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8966 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8967 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8968 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8969 ;;Total ram usage:       11 bytes
  8970 ;; Hardware stack levels used:    1
  8971 ;; Hardware stack levels required when called:    5
  8972 ;; This function calls:
  8973 ;;		_setAddrWindow
  8974 ;;		_spiwrite
  8975 ;; This function is called by:
  8976 ;;		_fillRect
  8977 ;;		_fillCircleHelper
  8978 ;;		_fillCircle
  8979 ;;		_drawRect
  8980 ;; This function uses a non-reentrant model
  8981 ;;
  8982                           
  8983                           	psect	text42
  8984  001C60                     __ptext42:
  8985                           	opt stack 0
  8986  001C60                     _drawFastVLine:
  8987                           	opt stack 19
  8988                           
  8989                           ;incstack = 0
  8990                           ;drawFastVLine@x stored from wreg
  8991  001C60  6E20               	movwf	drawFastVLine@x,c
  8992                           
  8993                           ;ST7735_TFT.c: 451: unsigned char hi, lo;
  8994                           ;ST7735_TFT.c: 452: if((x >= 128) || (y >= 160))
  8995  001C62  0E80               	movlw	128
  8996  001C64  6020               	cpfslt	drawFastVLine@x,c
  8997  001C66  D03F               	goto	l177
  8998  001C68  0E9F               	movlw	159
  8999  001C6A  6416               	cpfsgt	drawFastVLine@y,c
  9000  001C6C  D001               	goto	l4059
  9001                           
  9002                           ;ST7735_TFT.c: 453: return;
  9003  001C6E  D03B               	goto	l177
  9004  001C70                     l4059:
  9005                           
  9006                           ;ST7735_TFT.c: 454: if((y + h - 1) >= 160)
  9007  001C70  0EFF               	movlw	255
  9008  001C72  6E1A               	movwf	??_drawFastVLine& (0+255),c
  9009  001C74  0EFF               	movlw	255
  9010  001C76  6E1B               	movwf	(??_drawFastVLine+1)& (0+255),c
  9011  001C78  5017               	movf	drawFastVLine@h,w,c
  9012  001C7A  C016  F01C         	movff	drawFastVLine@y,??_drawFastVLine+2
  9013  001C7E  6A1D               	clrf	(??_drawFastVLine+3)& (0+255),c
  9014  001C80  261C               	addwf	??_drawFastVLine+2,f,c
  9015  001C82  0E00               	movlw	0
  9016  001C84  221D               	addwfc	??_drawFastVLine+3,f,c
  9017  001C86  501A               	movf	??_drawFastVLine,w,c
  9018  001C88  261C               	addwf	??_drawFastVLine+2,f,c
  9019  001C8A  501B               	movf	??_drawFastVLine+1,w,c
  9020  001C8C  221D               	addwfc	??_drawFastVLine+3,f,c
  9021  001C8E  BE1D               	btfsc	??_drawFastVLine+3,7,c
  9022  001C90  D00B               	goto	l4063
  9023  001C92  501D               	movf	??_drawFastVLine+3,w,c
  9024  001C94  E104               	bnz	u2700
  9025  001C96  0EA0               	movlw	160
  9026  001C98  5C1C               	subwf	??_drawFastVLine+2,w,c
  9027  001C9A  A0D8               	btfss	status,0,c
  9028  001C9C  D005               	goto	l4063
  9029  001C9E                     u2700:
  9030                           
  9031                           ;ST7735_TFT.c: 455: h = 160 - y;
  9032  001C9E  5016               	movf	drawFastVLine@y,w,c
  9033  001CA0  0800               	sublw	0
  9034  001CA2  0FA0               	addlw	160
  9035  001CA4  6E17               	movwf	drawFastVLine@h,c
  9036  001CA6  D000               	goto	l4063
  9037  001CA8                     l4063:
  9038                           
  9039                           ;ST7735_TFT.c: 456: hi = color >> 8; lo = color;
  9040  001CA8  5019               	movf	drawFastVLine@color+1,w,c
  9041  001CAA  6E1E               	movwf	drawFastVLine@hi,c
  9042  001CAC  C018  F01F         	movff	drawFastVLine@color,drawFastVLine@lo
  9043                           
  9044                           ;ST7735_TFT.c: 457: setAddrWindow(x, y, x, y + h - 1);
  9045  001CB0  C016  F012         	movff	drawFastVLine@y,setAddrWindow@y0
  9046  001CB4  C020  F013         	movff	drawFastVLine@x,setAddrWindow@x1
  9047  001CB8  5016               	movf	drawFastVLine@y,w,c
  9048  001CBA  2417               	addwf	drawFastVLine@h,w,c
  9049  001CBC  6E1A               	movwf	??_drawFastVLine& (0+255),c
  9050  001CBE  041A               	decf	??_drawFastVLine,w,c
  9051  001CC0  6E14               	movwf	setAddrWindow@y1,c
  9052  001CC2  5020               	movf	drawFastVLine@x,w,c
  9053  001CC4  EC54  F010         	call	_setAddrWindow
  9054                           
  9055                           ;ST7735_TFT.c: 458: PORTDbits.RD0 = 1;
  9056  001CC8  8083               	bsf	3971,0,c	;volatile
  9057                           
  9058                           ;ST7735_TFT.c: 459: PORTDbits.RD1 = 0;
  9059  001CCA  9283               	bcf	3971,1,c	;volatile
  9060                           
  9061                           ;ST7735_TFT.c: 461: while (h--) {
  9062  001CCC  D007               	goto	l4075
  9063  001CCE                     l4073:
  9064                           
  9065                           ;ST7735_TFT.c: 462: spiwrite(hi);
  9066  001CCE  501E               	movf	drawFastVLine@hi,w,c
  9067  001CD0  EC73  F012         	call	_spiwrite
  9068                           
  9069                           ;ST7735_TFT.c: 463: spiwrite(lo);
  9070  001CD4  501F               	movf	drawFastVLine@lo,w,c
  9071  001CD6  EC73  F012         	call	_spiwrite
  9072  001CDA  D000               	goto	l4075
  9073  001CDC                     l4075:
  9074  001CDC  0617               	decf	drawFastVLine@h,f,c
  9075  001CDE  2817               	incf	drawFastVLine@h,w,c
  9076  001CE0  A4D8               	btfss	status,2,c
  9077  001CE2  D7F5               	goto	l4073
  9078                           
  9079                           ;ST7735_TFT.c: 464: }
  9080                           ;ST7735_TFT.c: 465: PORTDbits.RD1 = 1;
  9081  001CE4  8283               	bsf	3971,1,c	;volatile
  9082  001CE6                     l177:
  9083  001CE6  0012               	return		;funcret
  9084  001CE8                     __end_of_drawFastVLine:
  9085                           	opt stack 0
  9086                           tblptru	equ	0xFF8
  9087                           tblptrh	equ	0xFF7
  9088                           tblptrl	equ	0xFF6
  9089                           tablat	equ	0xFF5
  9090                           prodh	equ	0xFF4
  9091                           prodl	equ	0xFF3
  9092                           intcon	equ	0xFF2
  9093                           intcon2	equ	0xFF1
  9094                           intcon3	equ	0xFF0
  9095                           postinc0	equ	0xFEE
  9096                           wreg	equ	0xFE8
  9097                           postdec1	equ	0xFE5
  9098                           fsr1l	equ	0xFE1
  9099                           indf2	equ	0xFDF
  9100                           postinc2	equ	0xFDE
  9101                           fsr2h	equ	0xFDA
  9102                           fsr2l	equ	0xFD9
  9103                           status	equ	0xFD8
  9104                           
  9105 ;; *************** function _drawPixel *****************
  9106 ;; Defined at:
  9107 ;;		line 440 in file "ST7735_TFT.c"
  9108 ;; Parameters:    Size  Location     Type
  9109 ;;  x               1    wreg     unsigned char 
  9110 ;;  y               1   21[COMRAM] unsigned char 
  9111 ;;  color           2   22[COMRAM] unsigned int 
  9112 ;; Auto vars:     Size  Location     Type
  9113 ;;  x               1   24[COMRAM] unsigned char 
  9114 ;; Return value:  Size  Location     Type
  9115 ;;		None               void
  9116 ;; Registers used:
  9117 ;;		wreg, status,2, status,0, cstack
  9118 ;; Tracked objects:
  9119 ;;		On entry : 0/0
  9120 ;;		On exit  : 0/0
  9121 ;;		Unchanged: 0/0
  9122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9123 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9124 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9125 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9126 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9127 ;;Total ram usage:        4 bytes
  9128 ;; Hardware stack levels used:    1
  9129 ;; Hardware stack levels required when called:    5
  9130 ;; This function calls:
  9131 ;;		_setAddrWindow
  9132 ;;		_write_data
  9133 ;; This function is called by:
  9134 ;;		_drawChar
  9135 ;;		_drawCircle
  9136 ;;		_drawCircleHelper
  9137 ;; This function uses a non-reentrant model
  9138 ;;
  9139                           
  9140                           	psect	text43
  9141  002382                     __ptext43:
  9142                           	opt stack 0
  9143  002382                     _drawPixel:
  9144                           	opt stack 20
  9145                           
  9146                           ;incstack = 0
  9147                           ;drawPixel@x stored from wreg
  9148  002382  6E19               	movwf	drawPixel@x,c
  9149                           
  9150                           ;ST7735_TFT.c: 442: if((x >= 128) || (y >= 160))
  9151  002384  0E80               	movlw	128
  9152  002386  6019               	cpfslt	drawPixel@x,c
  9153  002388  D013               	goto	l171
  9154  00238A  0E9F               	movlw	159
  9155  00238C  6416               	cpfsgt	drawPixel@y,c
  9156  00238E  D001               	goto	l4081
  9157                           
  9158                           ;ST7735_TFT.c: 443: return;
  9159  002390  D00F               	goto	l171
  9160  002392                     l4081:
  9161                           
  9162                           ;ST7735_TFT.c: 444: setAddrWindow(x,y,x+1,y+1);
  9163  002392  C016  F012         	movff	drawPixel@y,setAddrWindow@y0
  9164  002396  2819               	incf	drawPixel@x,w,c
  9165  002398  6E13               	movwf	setAddrWindow@x1,c
  9166  00239A  2816               	incf	drawPixel@y,w,c
  9167  00239C  6E14               	movwf	setAddrWindow@y1,c
  9168  00239E  5019               	movf	drawPixel@x,w,c
  9169  0023A0  EC54  F010         	call	_setAddrWindow
  9170                           
  9171                           ;ST7735_TFT.c: 445: write_data(color >> 8);
  9172  0023A4  5018               	movf	drawPixel@color+1,w,c
  9173  0023A6  ECA1  F012         	call	_write_data
  9174                           
  9175                           ;ST7735_TFT.c: 446: write_data(color & 0xFF);
  9176  0023AA  5017               	movf	drawPixel@color,w,c
  9177  0023AC  ECA1  F012         	call	_write_data
  9178  0023B0                     l171:
  9179  0023B0  0012               	return		;funcret
  9180  0023B2                     __end_of_drawPixel:
  9181                           	opt stack 0
  9182                           tblptru	equ	0xFF8
  9183                           tblptrh	equ	0xFF7
  9184                           tblptrl	equ	0xFF6
  9185                           tablat	equ	0xFF5
  9186                           prodh	equ	0xFF4
  9187                           prodl	equ	0xFF3
  9188                           intcon	equ	0xFF2
  9189                           intcon2	equ	0xFF1
  9190                           intcon3	equ	0xFF0
  9191                           postinc0	equ	0xFEE
  9192                           wreg	equ	0xFE8
  9193                           postdec1	equ	0xFE5
  9194                           fsr1l	equ	0xFE1
  9195                           indf2	equ	0xFDF
  9196                           postinc2	equ	0xFDE
  9197                           fsr2h	equ	0xFDA
  9198                           fsr2l	equ	0xFD9
  9199                           status	equ	0xFD8
  9200                           
  9201 ;; *************** function _setAddrWindow *****************
  9202 ;; Defined at:
  9203 ;;		line 425 in file "ST7735_TFT.c"
  9204 ;; Parameters:    Size  Location     Type
  9205 ;;  x0              1    wreg     unsigned char 
  9206 ;;  y0              1   17[COMRAM] unsigned char 
  9207 ;;  x1              1   18[COMRAM] unsigned char 
  9208 ;;  y1              1   19[COMRAM] unsigned char 
  9209 ;; Auto vars:     Size  Location     Type
  9210 ;;  x0              1   20[COMRAM] unsigned char 
  9211 ;; Return value:  Size  Location     Type
  9212 ;;		None               void
  9213 ;; Registers used:
  9214 ;;		wreg, status,2, status,0, cstack
  9215 ;; Tracked objects:
  9216 ;;		On entry : 0/0
  9217 ;;		On exit  : 0/0
  9218 ;;		Unchanged: 0/0
  9219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9220 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9221 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9222 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9223 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9224 ;;Total ram usage:        4 bytes
  9225 ;; Hardware stack levels used:    1
  9226 ;; Hardware stack levels required when called:    4
  9227 ;; This function calls:
  9228 ;;		_write_command
  9229 ;;		_write_data
  9230 ;; This function is called by:
  9231 ;;		_drawPixel
  9232 ;;		_drawFastVLine
  9233 ;;		_fillRectangle
  9234 ;;		_drawFastHLine
  9235 ;; This function uses a non-reentrant model
  9236 ;;
  9237                           
  9238                           	psect	text44
  9239  0020A8                     __ptext44:
  9240                           	opt stack 0
  9241  0020A8                     _setAddrWindow:
  9242                           	opt stack 19
  9243                           
  9244                           ;incstack = 0
  9245                           ;setAddrWindow@x0 stored from wreg
  9246  0020A8  6E15               	movwf	setAddrWindow@x0,c
  9247                           
  9248                           ;ST7735_TFT.c: 427: write_command(0x2A);
  9249  0020AA  0E2A               	movlw	42
  9250  0020AC  ECA9  F012         	call	_write_command
  9251                           
  9252                           ;ST7735_TFT.c: 428: write_data(0);
  9253  0020B0  0E00               	movlw	0
  9254  0020B2  ECA1  F012         	call	_write_data
  9255                           
  9256                           ;ST7735_TFT.c: 429: write_data(x0 + colstart);
  9257  0020B6  5015               	movf	setAddrWindow@x0,w,c
  9258  0020B8  246E               	addwf	_colstart,w,c
  9259  0020BA  ECA1  F012         	call	_write_data
  9260                           
  9261                           ;ST7735_TFT.c: 430: write_data(0);
  9262  0020BE  0E00               	movlw	0
  9263  0020C0  ECA1  F012         	call	_write_data
  9264                           
  9265                           ;ST7735_TFT.c: 431: write_data(x1 + colstart);
  9266  0020C4  5013               	movf	setAddrWindow@x1,w,c
  9267  0020C6  246E               	addwf	_colstart,w,c
  9268  0020C8  ECA1  F012         	call	_write_data
  9269                           
  9270                           ;ST7735_TFT.c: 432: write_command(0x2B);
  9271  0020CC  0E2B               	movlw	43
  9272  0020CE  ECA9  F012         	call	_write_command
  9273                           
  9274                           ;ST7735_TFT.c: 433: write_data(0);
  9275  0020D2  0E00               	movlw	0
  9276  0020D4  ECA1  F012         	call	_write_data
  9277                           
  9278                           ;ST7735_TFT.c: 434: write_data(y0 + rowstart);
  9279  0020D8  5012               	movf	setAddrWindow@y0,w,c
  9280  0020DA  2471               	addwf	_rowstart,w,c
  9281  0020DC  ECA1  F012         	call	_write_data
  9282                           
  9283                           ;ST7735_TFT.c: 435: write_data(0);
  9284  0020E0  0E00               	movlw	0
  9285  0020E2  ECA1  F012         	call	_write_data
  9286                           
  9287                           ;ST7735_TFT.c: 436: write_data(y1 + rowstart);
  9288  0020E6  5014               	movf	setAddrWindow@y1,w,c
  9289  0020E8  2471               	addwf	_rowstart,w,c
  9290  0020EA  ECA1  F012         	call	_write_data
  9291                           
  9292                           ;ST7735_TFT.c: 437: write_command(0x2C);
  9293  0020EE  0E2C               	movlw	44
  9294  0020F0  ECA9  F012         	call	_write_command
  9295  0020F4  0012               	return		;funcret
  9296  0020F6                     __end_of_setAddrWindow:
  9297                           	opt stack 0
  9298                           tblptru	equ	0xFF8
  9299                           tblptrh	equ	0xFF7
  9300                           tblptrl	equ	0xFF6
  9301                           tablat	equ	0xFF5
  9302                           prodh	equ	0xFF4
  9303                           prodl	equ	0xFF3
  9304                           intcon	equ	0xFF2
  9305                           intcon2	equ	0xFF1
  9306                           intcon3	equ	0xFF0
  9307                           postinc0	equ	0xFEE
  9308                           wreg	equ	0xFE8
  9309                           postdec1	equ	0xFE5
  9310                           fsr1l	equ	0xFE1
  9311                           indf2	equ	0xFDF
  9312                           postinc2	equ	0xFDE
  9313                           fsr2h	equ	0xFDA
  9314                           fsr2l	equ	0xFD9
  9315                           status	equ	0xFD8
  9316                           
  9317 ;; *************** function _write_data *****************
  9318 ;; Defined at:
  9319 ;;		line 242 in file "ST7735_TFT.c"
  9320 ;; Parameters:    Size  Location     Type
  9321 ;;  data_           1    wreg     unsigned char 
  9322 ;; Auto vars:     Size  Location     Type
  9323 ;;  data_           1   16[COMRAM] unsigned char 
  9324 ;; Return value:  Size  Location     Type
  9325 ;;		None               void
  9326 ;; Registers used:
  9327 ;;		wreg, status,2, cstack
  9328 ;; Tracked objects:
  9329 ;;		On entry : 0/0
  9330 ;;		On exit  : 0/0
  9331 ;;		Unchanged: 0/0
  9332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9333 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9334 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9335 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9336 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9337 ;;Total ram usage:        1 bytes
  9338 ;; Hardware stack levels used:    1
  9339 ;; Hardware stack levels required when called:    3
  9340 ;; This function calls:
  9341 ;;		_spiwrite
  9342 ;; This function is called by:
  9343 ;;		_Rcmd1
  9344 ;;		_Rcmd2red
  9345 ;;		_Rcmd3
  9346 ;;		_setAddrWindow
  9347 ;;		_drawPixel
  9348 ;;		_TFT_GreenTab_Initialize
  9349 ;;		_Bcmd
  9350 ;;		_setScrollDefinition
  9351 ;;		_Rcmd2green
  9352 ;;		_VerticalScroll
  9353 ;; This function uses a non-reentrant model
  9354 ;;
  9355                           
  9356                           	psect	text45
  9357  002542                     __ptext45:
  9358                           	opt stack 0
  9359  002542                     _write_data:
  9360                           	opt stack 19
  9361                           
  9362                           ;incstack = 0
  9363                           ;write_data@data_ stored from wreg
  9364  002542  6E11               	movwf	write_data@data_,c
  9365                           
  9366                           ;ST7735_TFT.c: 244: PORTDbits.RD1 = 0;
  9367  002544  9283               	bcf	3971,1,c	;volatile
  9368                           
  9369                           ;ST7735_TFT.c: 245: PORTDbits.RD0 = 1;
  9370  002546  8083               	bsf	3971,0,c	;volatile
  9371                           
  9372                           ;ST7735_TFT.c: 246: spiwrite(data_);
  9373  002548  5011               	movf	write_data@data_,w,c
  9374  00254A  EC73  F012         	call	_spiwrite
  9375                           
  9376                           ;ST7735_TFT.c: 247: PORTDbits.RD1 = 1;
  9377  00254E  8283               	bsf	3971,1,c	;volatile
  9378  002550  0012               	return		;funcret
  9379  002552                     __end_of_write_data:
  9380                           	opt stack 0
  9381                           tblptru	equ	0xFF8
  9382                           tblptrh	equ	0xFF7
  9383                           tblptrl	equ	0xFF6
  9384                           tablat	equ	0xFF5
  9385                           prodh	equ	0xFF4
  9386                           prodl	equ	0xFF3
  9387                           intcon	equ	0xFF2
  9388                           intcon2	equ	0xFF1
  9389                           intcon3	equ	0xFF0
  9390                           postinc0	equ	0xFEE
  9391                           wreg	equ	0xFE8
  9392                           postdec1	equ	0xFE5
  9393                           fsr1l	equ	0xFE1
  9394                           indf2	equ	0xFDF
  9395                           postinc2	equ	0xFDE
  9396                           fsr2h	equ	0xFDA
  9397                           fsr2l	equ	0xFD9
  9398                           status	equ	0xFD8
  9399                           
  9400 ;; *************** function _write_command *****************
  9401 ;; Defined at:
  9402 ;;		line 231 in file "ST7735_TFT.c"
  9403 ;; Parameters:    Size  Location     Type
  9404 ;;  cmd_            1    wreg     unsigned char 
  9405 ;; Auto vars:     Size  Location     Type
  9406 ;;  cmd_            1   16[COMRAM] unsigned char 
  9407 ;; Return value:  Size  Location     Type
  9408 ;;		None               void
  9409 ;; Registers used:
  9410 ;;		wreg, status,2, cstack
  9411 ;; Tracked objects:
  9412 ;;		On entry : 0/0
  9413 ;;		On exit  : 0/0
  9414 ;;		Unchanged: 0/0
  9415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9416 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9417 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9418 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9419 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9420 ;;Total ram usage:        1 bytes
  9421 ;; Hardware stack levels used:    1
  9422 ;; Hardware stack levels required when called:    3
  9423 ;; This function calls:
  9424 ;;		_spiwrite
  9425 ;; This function is called by:
  9426 ;;		_Rcmd1
  9427 ;;		_Rcmd2red
  9428 ;;		_Rcmd3
  9429 ;;		_setAddrWindow
  9430 ;;		_TFT_GreenTab_Initialize
  9431 ;;		_Bcmd
  9432 ;;		_setScrollDefinition
  9433 ;;		_Rcmd2green
  9434 ;;		_VerticalScroll
  9435 ;; This function uses a non-reentrant model
  9436 ;;
  9437                           
  9438                           	psect	text46
  9439  002552                     __ptext46:
  9440                           	opt stack 0
  9441  002552                     _write_command:
  9442                           	opt stack 19
  9443                           
  9444                           ;incstack = 0
  9445                           ;write_command@cmd_ stored from wreg
  9446  002552  6E11               	movwf	write_command@cmd_,c
  9447                           
  9448                           ;ST7735_TFT.c: 233: PORTDbits.RD1 = 0;
  9449  002554  9283               	bcf	3971,1,c	;volatile
  9450                           
  9451                           ;ST7735_TFT.c: 235: PORTDbits.RD0 = 0;
  9452  002556  9083               	bcf	3971,0,c	;volatile
  9453                           
  9454                           ;ST7735_TFT.c: 236: spiwrite(cmd_);
  9455  002558  5011               	movf	write_command@cmd_,w,c
  9456  00255A  EC73  F012         	call	_spiwrite
  9457                           
  9458                           ;ST7735_TFT.c: 238: PORTDbits.RD1 = 1;
  9459  00255E  8283               	bsf	3971,1,c	;volatile
  9460  002560  0012               	return		;funcret
  9461  002562                     __end_of_write_command:
  9462                           	opt stack 0
  9463                           tblptru	equ	0xFF8
  9464                           tblptrh	equ	0xFF7
  9465                           tblptrl	equ	0xFF6
  9466                           tablat	equ	0xFF5
  9467                           prodh	equ	0xFF4
  9468                           prodl	equ	0xFF3
  9469                           intcon	equ	0xFF2
  9470                           intcon2	equ	0xFF1
  9471                           intcon3	equ	0xFF0
  9472                           postinc0	equ	0xFEE
  9473                           wreg	equ	0xFE8
  9474                           postdec1	equ	0xFE5
  9475                           fsr1l	equ	0xFE1
  9476                           indf2	equ	0xFDF
  9477                           postinc2	equ	0xFDE
  9478                           fsr2h	equ	0xFDA
  9479                           fsr2l	equ	0xFD9
  9480                           status	equ	0xFD8
  9481                           
  9482 ;; *************** function _spiwrite *****************
  9483 ;; Defined at:
  9484 ;;		line 222 in file "ST7735_TFT.c"
  9485 ;; Parameters:    Size  Location     Type
  9486 ;;  spidata         1    wreg     unsigned char 
  9487 ;; Auto vars:     Size  Location     Type
  9488 ;;  spidata         1   15[COMRAM] unsigned char 
  9489 ;;  x               1   14[COMRAM] unsigned char 
  9490 ;; Return value:  Size  Location     Type
  9491 ;;		None               void
  9492 ;; Registers used:
  9493 ;;		wreg
  9494 ;; Tracked objects:
  9495 ;;		On entry : 0/0
  9496 ;;		On exit  : 0/0
  9497 ;;		Unchanged: 0/0
  9498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9499 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9500 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9501 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9502 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9503 ;;Total ram usage:        2 bytes
  9504 ;; Hardware stack levels used:    1
  9505 ;; Hardware stack levels required when called:    2
  9506 ;; This function calls:
  9507 ;;		Nothing
  9508 ;; This function is called by:
  9509 ;;		_write_command
  9510 ;;		_write_data
  9511 ;;		_drawFastVLine
  9512 ;;		_fillRectangle
  9513 ;;		_drawFastHLine
  9514 ;; This function uses a non-reentrant model
  9515 ;;
  9516                           
  9517                           	psect	text47
  9518  0024E6                     __ptext47:
  9519                           	opt stack 0
  9520  0024E6                     _spiwrite:
  9521                           	opt stack 21
  9522                           
  9523                           ;incstack = 0
  9524                           ;spiwrite@spidata stored from wreg
  9525  0024E6  6E10               	movwf	spiwrite@spidata,c
  9526                           
  9527                           ;ST7735_TFT.c: 224: char x;
  9528                           ;ST7735_TFT.c: 225: PIR1bits.SSPIF = 0;
  9529  0024E8  969E               	bcf	3998,3,c	;volatile
  9530                           
  9531                           ;ST7735_TFT.c: 226: x = SSPBUF;
  9532  0024EA  CFC9 F00F          	movff	4041,spiwrite@x	;volatile
  9533                           
  9534                           ;ST7735_TFT.c: 227: SSPBUF = spidata;
  9535  0024EE  C010  FFC9         	movff	spiwrite@spidata,4041	;volatile
  9536                           
  9537                           ;ST7735_TFT.c: 228: while (!SSPSTATbits.BF);
  9538  0024F2  D000               	goto	l127
  9539  0024F4                     l127:
  9540  0024F4  A0C7               	btfss	4039,0,c	;volatile
  9541  0024F6  D7FE               	goto	l127
  9542  0024F8  0012               	return		;funcret
  9543  0024FA                     __end_of_spiwrite:
  9544                           	opt stack 0
  9545                           tblptru	equ	0xFF8
  9546                           tblptrh	equ	0xFF7
  9547                           tblptrl	equ	0xFF6
  9548                           tablat	equ	0xFF5
  9549                           prodh	equ	0xFF4
  9550                           prodl	equ	0xFF3
  9551                           intcon	equ	0xFF2
  9552                           intcon2	equ	0xFF1
  9553                           intcon3	equ	0xFF0
  9554                           postinc0	equ	0xFEE
  9555                           wreg	equ	0xFE8
  9556                           postdec1	equ	0xFE5
  9557                           fsr1l	equ	0xFE1
  9558                           indf2	equ	0xFDF
  9559                           postinc2	equ	0xFDE
  9560                           fsr2h	equ	0xFDA
  9561                           fsr2l	equ	0xFD9
  9562                           status	equ	0xFD8
  9563                           
  9564 ;; *************** function ___wmul *****************
  9565 ;; Defined at:
  9566 ;;		line 15 in file "E:\XC8\sources\common\Umul16.c"
  9567 ;; Parameters:    Size  Location     Type
  9568 ;;  multiplier      2   14[COMRAM] unsigned int 
  9569 ;;  multiplicand    2   16[COMRAM] unsigned int 
  9570 ;; Auto vars:     Size  Location     Type
  9571 ;;  product         2   18[COMRAM] unsigned int 
  9572 ;; Return value:  Size  Location     Type
  9573 ;;                  2   14[COMRAM] unsigned int 
  9574 ;; Registers used:
  9575 ;;		wreg, status,2, status,0, prodl, prodh
  9576 ;; Tracked objects:
  9577 ;;		On entry : 0/0
  9578 ;;		On exit  : 0/0
  9579 ;;		Unchanged: 0/0
  9580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9581 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9582 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9583 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9584 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9585 ;;Total ram usage:        6 bytes
  9586 ;; Hardware stack levels used:    1
  9587 ;; Hardware stack levels required when called:    2
  9588 ;; This function calls:
  9589 ;;		Nothing
  9590 ;; This function is called by:
  9591 ;;		_delay_ms
  9592 ;;		_drawChar
  9593 ;;		_main
  9594 ;;		_update_LCD_misc
  9595 ;; This function uses a non-reentrant model
  9596 ;;
  9597                           
  9598                           	psect	text48
  9599  002406                     __ptext48:
  9600                           	opt stack 0
  9601  002406                     ___wmul:
  9602                           	opt stack 28
  9603                           
  9604                           ;incstack = 0
  9605  002406  500F               	movf	___wmul@multiplier,w,c
  9606  002408  0211               	mulwf	___wmul@multiplicand,c
  9607  00240A  CFF3 F013          	movff	prodl,___wmul@product
  9608  00240E  CFF4 F014          	movff	prodh,___wmul@product+1
  9609  002412  500F               	movf	___wmul@multiplier,w,c
  9610  002414  0212               	mulwf	___wmul@multiplicand+1,c
  9611  002416  50F3               	movf	prodl,w,c
  9612  002418  2614               	addwf	___wmul@product+1,f,c
  9613  00241A  5010               	movf	___wmul@multiplier+1,w,c
  9614  00241C  0211               	mulwf	___wmul@multiplicand,c
  9615  00241E  50F3               	movf	prodl,w,c
  9616  002420  2614               	addwf	___wmul@product+1,f,c
  9617  002422  C013  F00F         	movff	___wmul@product,?___wmul
  9618  002426  C014  F010         	movff	___wmul@product+1,?___wmul+1
  9619  00242A  D000               	goto	l570
  9620  00242C                     l570:
  9621  00242C  0012               	return		;funcret
  9622  00242E                     __end_of___wmul:
  9623                           	opt stack 0
  9624                           tblptru	equ	0xFF8
  9625                           tblptrh	equ	0xFF7
  9626                           tblptrl	equ	0xFF6
  9627                           tablat	equ	0xFF5
  9628                           prodh	equ	0xFF4
  9629                           prodl	equ	0xFF3
  9630                           intcon	equ	0xFF2
  9631                           intcon2	equ	0xFF1
  9632                           intcon3	equ	0xFF0
  9633                           postinc0	equ	0xFEE
  9634                           wreg	equ	0xFE8
  9635                           postdec1	equ	0xFE5
  9636                           fsr1l	equ	0xFE1
  9637                           indf2	equ	0xFDF
  9638                           postinc2	equ	0xFDE
  9639                           fsr2h	equ	0xFDA
  9640                           fsr2l	equ	0xFD9
  9641                           status	equ	0xFD8
  9642                           
  9643 ;; *************** function ___awmod *****************
  9644 ;; Defined at:
  9645 ;;		line 8 in file "E:\XC8\sources\common\awmod.c"
  9646 ;; Parameters:    Size  Location     Type
  9647 ;;  dividend        2   14[COMRAM] int 
  9648 ;;  divisor         2   16[COMRAM] int 
  9649 ;; Auto vars:     Size  Location     Type
  9650 ;;  sign            1   19[COMRAM] unsigned char 
  9651 ;;  counter         1   18[COMRAM] unsigned char 
  9652 ;; Return value:  Size  Location     Type
  9653 ;;                  2   14[COMRAM] int 
  9654 ;; Registers used:
  9655 ;;		wreg, status,2, status,0
  9656 ;; Tracked objects:
  9657 ;;		On entry : 0/0
  9658 ;;		On exit  : 0/0
  9659 ;;		Unchanged: 0/0
  9660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9661 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9662 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9663 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9664 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9665 ;;Total ram usage:        6 bytes
  9666 ;; Hardware stack levels used:    1
  9667 ;; Hardware stack levels required when called:    2
  9668 ;; This function calls:
  9669 ;;		Nothing
  9670 ;; This function is called by:
  9671 ;;		_update_LCD_count
  9672 ;;		_update_LCD_PED_Count
  9673 ;; This function uses a non-reentrant model
  9674 ;;
  9675                           
  9676                           	psect	text49
  9677  001DF0                     __ptext49:
  9678                           	opt stack 0
  9679  001DF0                     ___awmod:
  9680                           	opt stack 25
  9681                           
  9682                           ;incstack = 0
  9683  001DF0  0E00               	movlw	0
  9684  001DF2  6E14               	movwf	___awmod@sign,c
  9685  001DF4  AE10               	btfss	___awmod@dividend+1,7,c
  9686  001DF6  D007               	goto	l4535
  9687  001DF8  6C0F               	negf	___awmod@dividend,c
  9688  001DFA  1E10               	comf	___awmod@dividend+1,f,c
  9689  001DFC  B0D8               	btfsc	status,0,c
  9690  001DFE  2A10               	incf	___awmod@dividend+1,f,c
  9691  001E00  0E01               	movlw	1
  9692  001E02  6E14               	movwf	___awmod@sign,c
  9693  001E04  D000               	goto	l4535
  9694  001E06                     l4535:
  9695  001E06  AE12               	btfss	___awmod@divisor+1,7,c
  9696  001E08  D005               	goto	l4539
  9697  001E0A  6C11               	negf	___awmod@divisor,c
  9698  001E0C  1E12               	comf	___awmod@divisor+1,f,c
  9699  001E0E  B0D8               	btfsc	status,0,c
  9700  001E10  2A12               	incf	___awmod@divisor+1,f,c
  9701  001E12  D000               	goto	l4539
  9702  001E14                     l4539:
  9703  001E14  5011               	movf	___awmod@divisor,w,c
  9704  001E16  1012               	iorwf	___awmod@divisor+1,w,c
  9705  001E18  B4D8               	btfsc	status,2,c
  9706  001E1A  D01D               	goto	l4555
  9707  001E1C  0E01               	movlw	1
  9708  001E1E  6E13               	movwf	___awmod@counter,c
  9709  001E20  D005               	goto	l4545
  9710  001E22                     l4543:
  9711  001E22  90D8               	bcf	status,0,c
  9712  001E24  3611               	rlcf	___awmod@divisor,f,c
  9713  001E26  3612               	rlcf	___awmod@divisor+1,f,c
  9714  001E28  2A13               	incf	___awmod@counter,f,c
  9715  001E2A  D000               	goto	l4545
  9716  001E2C                     l4545:
  9717  001E2C  BE12               	btfsc	___awmod@divisor+1,7,c
  9718  001E2E  D002               	goto	l4547
  9719  001E30  D7F8               	goto	l4543
  9720  001E32  D000               	goto	l4547
  9721  001E34                     l4547:
  9722  001E34  5011               	movf	___awmod@divisor,w,c
  9723  001E36  5C0F               	subwf	___awmod@dividend,w,c
  9724  001E38  5012               	movf	___awmod@divisor+1,w,c
  9725  001E3A  5810               	subwfb	___awmod@dividend+1,w,c
  9726  001E3C  A0D8               	btfss	status,0,c
  9727  001E3E  D005               	goto	l4551
  9728  001E40  5011               	movf	___awmod@divisor,w,c
  9729  001E42  5E0F               	subwf	___awmod@dividend,f,c
  9730  001E44  5012               	movf	___awmod@divisor+1,w,c
  9731  001E46  5A10               	subwfb	___awmod@dividend+1,f,c
  9732  001E48  D000               	goto	l4551
  9733  001E4A                     l4551:
  9734  001E4A  90D8               	bcf	status,0,c
  9735  001E4C  3212               	rrcf	___awmod@divisor+1,f,c
  9736  001E4E  3211               	rrcf	___awmod@divisor,f,c
  9737  001E50  2E13               	decfsz	___awmod@counter,f,c
  9738  001E52  D7F0               	goto	l4547
  9739  001E54  D000               	goto	l4555
  9740  001E56                     l4555:
  9741  001E56  5014               	movf	___awmod@sign,w,c
  9742  001E58  B4D8               	btfsc	status,2,c
  9743  001E5A  D005               	goto	l4559
  9744  001E5C  6C0F               	negf	___awmod@dividend,c
  9745  001E5E  1E10               	comf	___awmod@dividend+1,f,c
  9746  001E60  B0D8               	btfsc	status,0,c
  9747  001E62  2A10               	incf	___awmod@dividend+1,f,c
  9748  001E64  D000               	goto	l4559
  9749  001E66                     l4559:
  9750  001E66  C00F  F00F         	movff	___awmod@dividend,?___awmod
  9751  001E6A  C010  F010         	movff	___awmod@dividend+1,?___awmod+1
  9752  001E6E  D000               	goto	l776
  9753  001E70                     l776:
  9754  001E70  0012               	return		;funcret
  9755  001E72                     __end_of___awmod:
  9756                           	opt stack 0
  9757                           tblptru	equ	0xFF8
  9758                           tblptrh	equ	0xFF7
  9759                           tblptrl	equ	0xFF6
  9760                           tablat	equ	0xFF5
  9761                           prodh	equ	0xFF4
  9762                           prodl	equ	0xFF3
  9763                           intcon	equ	0xFF2
  9764                           intcon2	equ	0xFF1
  9765                           intcon3	equ	0xFF0
  9766                           postinc0	equ	0xFEE
  9767                           wreg	equ	0xFE8
  9768                           postdec1	equ	0xFE5
  9769                           fsr1l	equ	0xFE1
  9770                           indf2	equ	0xFDF
  9771                           postinc2	equ	0xFDE
  9772                           fsr2h	equ	0xFDA
  9773                           fsr2l	equ	0xFD9
  9774                           status	equ	0xFD8
  9775                           
  9776 ;; *************** function ___awdiv *****************
  9777 ;; Defined at:
  9778 ;;		line 8 in file "E:\XC8\sources\common\awdiv.c"
  9779 ;; Parameters:    Size  Location     Type
  9780 ;;  dividend        2   14[COMRAM] int 
  9781 ;;  divisor         2   16[COMRAM] int 
  9782 ;; Auto vars:     Size  Location     Type
  9783 ;;  quotient        2   20[COMRAM] int 
  9784 ;;  sign            1   19[COMRAM] unsigned char 
  9785 ;;  counter         1   18[COMRAM] unsigned char 
  9786 ;; Return value:  Size  Location     Type
  9787 ;;                  2   14[COMRAM] int 
  9788 ;; Registers used:
  9789 ;;		wreg, status,2, status,0
  9790 ;; Tracked objects:
  9791 ;;		On entry : 0/0
  9792 ;;		On exit  : 0/0
  9793 ;;		Unchanged: 0/0
  9794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9795 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9796 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9797 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9798 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9799 ;;Total ram usage:        8 bytes
  9800 ;; Hardware stack levels used:    1
  9801 ;; Hardware stack levels required when called:    2
  9802 ;; This function calls:
  9803 ;;		Nothing
  9804 ;; This function is called by:
  9805 ;;		_update_LCD_count
  9806 ;;		_update_LCD_PED_Count
  9807 ;; This function uses a non-reentrant model
  9808 ;;
  9809                           
  9810                           	psect	text50
  9811  001B42                     __ptext50:
  9812                           	opt stack 0
  9813  001B42                     ___awdiv:
  9814                           	opt stack 25
  9815                           
  9816                           ;incstack = 0
  9817  001B42  0E00               	movlw	0
  9818  001B44  6E14               	movwf	___awdiv@sign,c
  9819  001B46  AE12               	btfss	___awdiv@divisor+1,7,c
  9820  001B48  D007               	goto	l4491
  9821  001B4A  6C11               	negf	___awdiv@divisor,c
  9822  001B4C  1E12               	comf	___awdiv@divisor+1,f,c
  9823  001B4E  B0D8               	btfsc	status,0,c
  9824  001B50  2A12               	incf	___awdiv@divisor+1,f,c
  9825  001B52  0E01               	movlw	1
  9826  001B54  6E14               	movwf	___awdiv@sign,c
  9827  001B56  D000               	goto	l4491
  9828  001B58                     l4491:
  9829  001B58  AE10               	btfss	___awdiv@dividend+1,7,c
  9830  001B5A  D007               	goto	l4497
  9831  001B5C  6C0F               	negf	___awdiv@dividend,c
  9832  001B5E  1E10               	comf	___awdiv@dividend+1,f,c
  9833  001B60  B0D8               	btfsc	status,0,c
  9834  001B62  2A10               	incf	___awdiv@dividend+1,f,c
  9835  001B64  0E01               	movlw	1
  9836  001B66  1A14               	xorwf	___awdiv@sign,f,c
  9837  001B68  D000               	goto	l4497
  9838  001B6A                     l4497:
  9839  001B6A  0E00               	movlw	0
  9840  001B6C  6E16               	movwf	___awdiv@quotient+1,c
  9841  001B6E  0E00               	movlw	0
  9842  001B70  6E15               	movwf	___awdiv@quotient,c
  9843  001B72  5011               	movf	___awdiv@divisor,w,c
  9844  001B74  1012               	iorwf	___awdiv@divisor+1,w,c
  9845  001B76  B4D8               	btfsc	status,2,c
  9846  001B78  D021               	goto	l4519
  9847  001B7A  0E01               	movlw	1
  9848  001B7C  6E13               	movwf	___awdiv@counter,c
  9849  001B7E  D005               	goto	l4505
  9850  001B80                     l4503:
  9851  001B80  90D8               	bcf	status,0,c
  9852  001B82  3611               	rlcf	___awdiv@divisor,f,c
  9853  001B84  3612               	rlcf	___awdiv@divisor+1,f,c
  9854  001B86  2A13               	incf	___awdiv@counter,f,c
  9855  001B88  D000               	goto	l4505
  9856  001B8A                     l4505:
  9857  001B8A  BE12               	btfsc	___awdiv@divisor+1,7,c
  9858  001B8C  D002               	goto	l4507
  9859  001B8E  D7F8               	goto	l4503
  9860  001B90  D000               	goto	l4507
  9861  001B92                     l4507:
  9862  001B92  90D8               	bcf	status,0,c
  9863  001B94  3615               	rlcf	___awdiv@quotient,f,c
  9864  001B96  3616               	rlcf	___awdiv@quotient+1,f,c
  9865  001B98  5011               	movf	___awdiv@divisor,w,c
  9866  001B9A  5C0F               	subwf	___awdiv@dividend,w,c
  9867  001B9C  5012               	movf	___awdiv@divisor+1,w,c
  9868  001B9E  5810               	subwfb	___awdiv@dividend+1,w,c
  9869  001BA0  A0D8               	btfss	status,0,c
  9870  001BA2  D006               	goto	l4515
  9871  001BA4  5011               	movf	___awdiv@divisor,w,c
  9872  001BA6  5E0F               	subwf	___awdiv@dividend,f,c
  9873  001BA8  5012               	movf	___awdiv@divisor+1,w,c
  9874  001BAA  5A10               	subwfb	___awdiv@dividend+1,f,c
  9875  001BAC  8015               	bsf	___awdiv@quotient,0,c
  9876  001BAE  D000               	goto	l4515
  9877  001BB0                     l4515:
  9878  001BB0  90D8               	bcf	status,0,c
  9879  001BB2  3212               	rrcf	___awdiv@divisor+1,f,c
  9880  001BB4  3211               	rrcf	___awdiv@divisor,f,c
  9881  001BB6  2E13               	decfsz	___awdiv@counter,f,c
  9882  001BB8  D7EC               	goto	l4507
  9883  001BBA  D000               	goto	l4519
  9884  001BBC                     l4519:
  9885  001BBC  5014               	movf	___awdiv@sign,w,c
  9886  001BBE  B4D8               	btfsc	status,2,c
  9887  001BC0  D005               	goto	l4523
  9888  001BC2  6C15               	negf	___awdiv@quotient,c
  9889  001BC4  1E16               	comf	___awdiv@quotient+1,f,c
  9890  001BC6  B0D8               	btfsc	status,0,c
  9891  001BC8  2A16               	incf	___awdiv@quotient+1,f,c
  9892  001BCA  D000               	goto	l4523
  9893  001BCC                     l4523:
  9894  001BCC  C015  F00F         	movff	___awdiv@quotient,?___awdiv
  9895  001BD0  C016  F010         	movff	___awdiv@quotient+1,?___awdiv+1
  9896  001BD4  D000               	goto	l763
  9897  001BD6                     l763:
  9898  001BD6  0012               	return		;funcret
  9899  001BD8                     __end_of___awdiv:
  9900                           	opt stack 0
  9901                           tblptru	equ	0xFF8
  9902                           tblptrh	equ	0xFF7
  9903                           tblptrl	equ	0xFF6
  9904                           tablat	equ	0xFF5
  9905                           prodh	equ	0xFF4
  9906                           prodl	equ	0xFF3
  9907                           intcon	equ	0xFF2
  9908                           intcon2	equ	0xFF1
  9909                           intcon3	equ	0xFF0
  9910                           postinc0	equ	0xFEE
  9911                           wreg	equ	0xFE8
  9912                           postdec1	equ	0xFE5
  9913                           fsr1l	equ	0xFE1
  9914                           indf2	equ	0xFDF
  9915                           postinc2	equ	0xFDE
  9916                           fsr2h	equ	0xFDA
  9917                           fsr2l	equ	0xFD9
  9918                           status	equ	0xFD8
  9919                           
  9920 ;; *************** function _Wait_One_Second_With_Beep *****************
  9921 ;; Defined at:
  9922 ;;		line 559 in file "Lab8.c"
  9923 ;; Parameters:    Size  Location     Type
  9924 ;;		None
  9925 ;; Auto vars:     Size  Location     Type
  9926 ;;		None
  9927 ;; Return value:  Size  Location     Type
  9928 ;;		None               void
  9929 ;; Registers used:
  9930 ;;		wreg, status,2, cstack
  9931 ;; Tracked objects:
  9932 ;;		On entry : 0/0
  9933 ;;		On exit  : 0/0
  9934 ;;		Unchanged: 0/0
  9935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9936 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9937 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9938 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9939 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9940 ;;Total ram usage:        0 bytes
  9941 ;; Hardware stack levels used:    1
  9942 ;; Hardware stack levels required when called:    3
  9943 ;; This function calls:
  9944 ;;		_Activate_Buzzer
  9945 ;;		_Deactivate_Buzzer
  9946 ;;		_Wait_Half_Second
  9947 ;; This function is called by:
  9948 ;;		_PED_Control
  9949 ;; This function uses a non-reentrant model
  9950 ;;
  9951                           
  9952                           	psect	text51
  9953  0024BC                     __ptext51:
  9954                           	opt stack 0
  9955  0024BC                     _Wait_One_Second_With_Beep:
  9956                           	opt stack 25
  9957                           
  9958                           ;Lab8.c: 561: PORTDbits.RD7 = 1;
  9959                           
  9960                           ;incstack = 0
  9961  0024BC  8E83               	bsf	3971,7,c	;volatile
  9962                           
  9963                           ;Lab8.c: 562: Activate_Buzzer();
  9964  0024BE  EC86  F012         	call	_Activate_Buzzer	;wreg free
  9965                           
  9966                           ;Lab8.c: 563: Wait_Half_Second();
  9967  0024C2  EC45  F012         	call	_Wait_Half_Second	;wreg free
  9968                           
  9969                           ;Lab8.c: 564: PORTDbits.RD7 = 0;
  9970  0024C6  9E83               	bcf	3971,7,c	;volatile
  9971                           
  9972                           ;Lab8.c: 565: Deactivate_Buzzer ();
  9973  0024C8  ECBD  F012         	call	_Deactivate_Buzzer	;wreg free
  9974                           
  9975                           ;Lab8.c: 566: Wait_Half_Second();
  9976  0024CC  EC45  F012         	call	_Wait_Half_Second	;wreg free
  9977  0024D0  0012               	return		;funcret
  9978  0024D2                     __end_of_Wait_One_Second_With_Beep:
  9979                           	opt stack 0
  9980                           tblptru	equ	0xFF8
  9981                           tblptrh	equ	0xFF7
  9982                           tblptrl	equ	0xFF6
  9983                           tablat	equ	0xFF5
  9984                           prodh	equ	0xFF4
  9985                           prodl	equ	0xFF3
  9986                           intcon	equ	0xFF2
  9987                           intcon2	equ	0xFF1
  9988                           intcon3	equ	0xFF0
  9989                           postinc0	equ	0xFEE
  9990                           wreg	equ	0xFE8
  9991                           postdec1	equ	0xFE5
  9992                           fsr1l	equ	0xFE1
  9993                           indf2	equ	0xFDF
  9994                           postinc2	equ	0xFDE
  9995                           fsr2h	equ	0xFDA
  9996                           fsr2l	equ	0xFD9
  9997                           status	equ	0xFD8
  9998                           
  9999 ;; *************** function _Wait_Half_Second *****************
 10000 ;; Defined at:
 10001 ;;		line 569 in file "Lab8.c"
 10002 ;; Parameters:    Size  Location     Type
 10003 ;;		None
 10004 ;; Auto vars:     Size  Location     Type
 10005 ;;		None
 10006 ;; Return value:  Size  Location     Type
 10007 ;;		None               void
 10008 ;; Registers used:
 10009 ;;		wreg, status,2
 10010 ;; Tracked objects:
 10011 ;;		On entry : 0/0
 10012 ;;		On exit  : 0/0
 10013 ;;		Unchanged: 0/0
 10014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10015 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10016 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10017 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10018 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10019 ;;Total ram usage:        0 bytes
 10020 ;; Hardware stack levels used:    1
 10021 ;; Hardware stack levels required when called:    2
 10022 ;; This function calls:
 10023 ;;		Nothing
 10024 ;; This function is called by:
 10025 ;;		_Wait_One_Second
 10026 ;;		_Wait_One_Second_With_Beep
 10027 ;;		_Old_Wait_One_Second
 10028 ;; This function uses a non-reentrant model
 10029 ;;
 10030                           
 10031                           	psect	text52
 10032  00248A                     __ptext52:
 10033                           	opt stack 0
 10034  00248A                     _Wait_Half_Second:
 10035                           	opt stack 25
 10036                           
 10037                           ;Lab8.c: 571: T0CON = 0x03;
 10038                           
 10039                           ;incstack = 0
 10040  00248A  0E03               	movlw	3
 10041  00248C  6ED5               	movwf	4053,c	;volatile
 10042                           
 10043                           ;Lab8.c: 572: TMR0L = 0xDB;
 10044  00248E  0EDB               	movlw	219
 10045  002490  6ED6               	movwf	4054,c	;volatile
 10046                           
 10047                           ;Lab8.c: 573: TMR0H = 0x0B;
 10048  002492  0E0B               	movlw	11
 10049  002494  6ED7               	movwf	4055,c	;volatile
 10050                           
 10051                           ;Lab8.c: 574: INTCONbits.TMR0IF = 0;
 10052  002496  94F2               	bcf	intcon,2,c	;volatile
 10053                           
 10054                           ;Lab8.c: 575: T0CONbits.TMR0ON = 1;
 10055  002498  8ED5               	bsf	4053,7,c	;volatile
 10056                           
 10057                           ;Lab8.c: 576: while (INTCONbits.TMR0IF == 0);
 10058  00249A  D000               	goto	l490
 10059  00249C                     l490:
 10060  00249C  A4F2               	btfss	intcon,2,c	;volatile
 10061  00249E  D7FE               	goto	l490
 10062                           
 10063                           ;Lab8.c: 577: T0CONbits.TMR0ON = 0;
 10064  0024A0  9ED5               	bcf	4053,7,c	;volatile
 10065  0024A2  0012               	return		;funcret
 10066  0024A4                     __end_of_Wait_Half_Second:
 10067                           	opt stack 0
 10068                           tblptru	equ	0xFF8
 10069                           tblptrh	equ	0xFF7
 10070                           tblptrl	equ	0xFF6
 10071                           tablat	equ	0xFF5
 10072                           prodh	equ	0xFF4
 10073                           prodl	equ	0xFF3
 10074                           intcon	equ	0xFF2
 10075                           intcon2	equ	0xFF1
 10076                           intcon3	equ	0xFF0
 10077                           postinc0	equ	0xFEE
 10078                           wreg	equ	0xFE8
 10079                           postdec1	equ	0xFE5
 10080                           fsr1l	equ	0xFE1
 10081                           indf2	equ	0xFDF
 10082                           postinc2	equ	0xFDE
 10083                           fsr2h	equ	0xFDA
 10084                           fsr2l	equ	0xFD9
 10085                           status	equ	0xFD8
 10086                           
 10087 ;; *************** function _Deactivate_Buzzer *****************
 10088 ;; Defined at:
 10089 ;;		line 421 in file "Lab8.c"
 10090 ;; Parameters:    Size  Location     Type
 10091 ;;		None
 10092 ;; Auto vars:     Size  Location     Type
 10093 ;;		None
 10094 ;; Return value:  Size  Location     Type
 10095 ;;		None               void
 10096 ;; Registers used:
 10097 ;;		wreg, status,2
 10098 ;; Tracked objects:
 10099 ;;		On entry : 0/0
 10100 ;;		On exit  : 0/0
 10101 ;;		Unchanged: 0/0
 10102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10103 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10104 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10105 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10106 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10107 ;;Total ram usage:        0 bytes
 10108 ;; Hardware stack levels used:    1
 10109 ;; Hardware stack levels required when called:    2
 10110 ;; This function calls:
 10111 ;;		Nothing
 10112 ;; This function is called by:
 10113 ;;		_Wait_One_Second_With_Beep
 10114 ;; This function uses a non-reentrant model
 10115 ;;
 10116                           
 10117                           	psect	text53
 10118  00257A                     __ptext53:
 10119                           	opt stack 0
 10120  00257A                     _Deactivate_Buzzer:
 10121                           	opt stack 25
 10122                           
 10123                           ;Lab8.c: 423: CCP2CON = 0x0;
 10124                           
 10125                           ;incstack = 0
 10126  00257A  0E00               	movlw	0
 10127  00257C  6EBA               	movwf	4026,c	;volatile
 10128                           
 10129                           ;Lab8.c: 424: PORTBbits.RB3 = 0;
 10130  00257E  9681               	bcf	3969,3,c	;volatile
 10131  002580  0012               	return		;funcret
 10132  002582                     __end_of_Deactivate_Buzzer:
 10133                           	opt stack 0
 10134                           tblptru	equ	0xFF8
 10135                           tblptrh	equ	0xFF7
 10136                           tblptrl	equ	0xFF6
 10137                           tablat	equ	0xFF5
 10138                           prodh	equ	0xFF4
 10139                           prodl	equ	0xFF3
 10140                           intcon	equ	0xFF2
 10141                           intcon2	equ	0xFF1
 10142                           intcon3	equ	0xFF0
 10143                           postinc0	equ	0xFEE
 10144                           wreg	equ	0xFE8
 10145                           postdec1	equ	0xFE5
 10146                           fsr1l	equ	0xFE1
 10147                           indf2	equ	0xFDF
 10148                           postinc2	equ	0xFDE
 10149                           fsr2h	equ	0xFDA
 10150                           fsr2l	equ	0xFD9
 10151                           status	equ	0xFD8
 10152                           
 10153 ;; *************** function _Activate_Buzzer *****************
 10154 ;; Defined at:
 10155 ;;		line 413 in file "Lab8.c"
 10156 ;; Parameters:    Size  Location     Type
 10157 ;;		None
 10158 ;; Auto vars:     Size  Location     Type
 10159 ;;		None
 10160 ;; Return value:  Size  Location     Type
 10161 ;;		None               void
 10162 ;; Registers used:
 10163 ;;		wreg, status,2
 10164 ;; Tracked objects:
 10165 ;;		On entry : 0/0
 10166 ;;		On exit  : 0/0
 10167 ;;		Unchanged: 0/0
 10168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10169 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10170 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10171 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10172 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10173 ;;Total ram usage:        0 bytes
 10174 ;; Hardware stack levels used:    1
 10175 ;; Hardware stack levels required when called:    2
 10176 ;; This function calls:
 10177 ;;		Nothing
 10178 ;; This function is called by:
 10179 ;;		_Wait_One_Second_With_Beep
 10180 ;; This function uses a non-reentrant model
 10181 ;;
 10182                           
 10183                           	psect	text54
 10184  00250C                     __ptext54:
 10185                           	opt stack 0
 10186  00250C                     _Activate_Buzzer:
 10187                           	opt stack 25
 10188                           
 10189                           ;Lab8.c: 415: PR2 = 0b11111001 ;
 10190                           
 10191                           ;incstack = 0
 10192  00250C  0EF9               	movlw	249
 10193  00250E  6ECB               	movwf	4043,c	;volatile
 10194                           
 10195                           ;Lab8.c: 416: T2CON = 0b00000101 ;
 10196  002510  0E05               	movlw	5
 10197  002512  6ECA               	movwf	4042,c	;volatile
 10198                           
 10199                           ;Lab8.c: 417: CCPR2L = 0b01001010 ;
 10200  002514  0E4A               	movlw	74
 10201  002516  6EBB               	movwf	4027,c	;volatile
 10202                           
 10203                           ;Lab8.c: 418: CCP2CON = 0b00111100 ;
 10204  002518  0E3C               	movlw	60
 10205  00251A  6EBA               	movwf	4026,c	;volatile
 10206  00251C  0012               	return		;funcret
 10207  00251E                     __end_of_Activate_Buzzer:
 10208                           	opt stack 0
 10209                           tblptru	equ	0xFF8
 10210                           tblptrh	equ	0xFF7
 10211                           tblptrl	equ	0xFF6
 10212                           tablat	equ	0xFF5
 10213                           prodh	equ	0xFF4
 10214                           prodl	equ	0xFF3
 10215                           intcon	equ	0xFF2
 10216                           intcon2	equ	0xFF1
 10217                           intcon3	equ	0xFF0
 10218                           postinc0	equ	0xFEE
 10219                           wreg	equ	0xFE8
 10220                           postdec1	equ	0xFE5
 10221                           fsr1l	equ	0xFE1
 10222                           indf2	equ	0xFDF
 10223                           postinc2	equ	0xFDE
 10224                           fsr2h	equ	0xFDA
 10225                           fsr2l	equ	0xFD9
 10226                           status	equ	0xFD8
 10227                           
 10228 ;; *************** function _chkisr *****************
 10229 ;; Defined at:
 10230 ;;		line 271 in file "Lab8.c"
 10231 ;; Parameters:    Size  Location     Type
 10232 ;;		None
 10233 ;; Auto vars:     Size  Location     Type
 10234 ;;		None
 10235 ;; Return value:  Size  Location     Type
 10236 ;;		None               void
 10237 ;; Registers used:
 10238 ;;		wreg, status,2, status,0, cstack
 10239 ;; Tracked objects:
 10240 ;;		On entry : 0/0
 10241 ;;		On exit  : 0/0
 10242 ;;		Unchanged: 0/0
 10243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10244 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10245 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10246 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10247 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10248 ;;Total ram usage:       14 bytes
 10249 ;; Hardware stack levels used:    1
 10250 ;; Hardware stack levels required when called:    1
 10251 ;; This function calls:
 10252 ;;		_INT0_ISR
 10253 ;;		_INT1_ISR
 10254 ;;		_INT2_ISR
 10255 ;; This function is called by:
 10256 ;;		Interrupt level 2
 10257 ;; This function uses a non-reentrant model
 10258 ;;
 10259                           
 10260                           	psect	intcode
 10261  000008                     __pintcode:
 10262                           	opt stack 0
 10263  000008                     _chkisr:
 10264                           	opt stack 18
 10265                           
 10266                           ;incstack = 0
 10267  000008  CFFA F001          	movff	pclath,??_chkisr
 10268  00000C  CFFB F002          	movff	pclatu,??_chkisr+1
 10269  000010  CFE9 F003          	movff	fsr0l,??_chkisr+2
 10270  000014  ED74  F00E         	call	int_func,f	;refresh shadow registers
 10271                           pclatu	equ	0xFFB
 10272                           pclath	equ	0xFFA
 10273                           tblptru	equ	0xFF8
 10274                           tblptrh	equ	0xFF7
 10275                           tblptrl	equ	0xFF6
 10276                           tablat	equ	0xFF5
 10277                           prodh	equ	0xFF4
 10278                           prodl	equ	0xFF3
 10279                           intcon	equ	0xFF2
 10280                           intcon2	equ	0xFF1
 10281                           intcon3	equ	0xFF0
 10282                           postinc0	equ	0xFEE
 10283                           fsr0l	equ	0xFE9
 10284                           wreg	equ	0xFE8
 10285                           postdec1	equ	0xFE5
 10286                           fsr1l	equ	0xFE1
 10287                           indf2	equ	0xFDF
 10288                           postinc2	equ	0xFDE
 10289                           fsr2h	equ	0xFDA
 10290                           fsr2l	equ	0xFD9
 10291                           status	equ	0xFD8
 10292                           
 10293                           	psect	intcode_body
 10294  001CE8                     __pintcode_body:
 10295                           	opt stack 18
 10296  001CE8                     int_func:
 10297                           	opt stack 18
 10298  001CE8  0006               	pop		; remove dummy address from shadow register refresh
 10299  001CEA  CFEA F004          	movff	fsr0h,??_chkisr+3
 10300  001CEE  CFE1 F005          	movff	fsr1l,??_chkisr+4
 10301  001CF2  CFE2 F006          	movff	fsr1h,??_chkisr+5
 10302  001CF6  CFD9 F007          	movff	fsr2l,??_chkisr+6
 10303  001CFA  CFDA F008          	movff	fsr2h,??_chkisr+7
 10304  001CFE  CFF3 F009          	movff	prodl,??_chkisr+8
 10305  001D02  CFF4 F00A          	movff	prodh,??_chkisr+9
 10306  001D06  CFF6 F00B          	movff	tblptrl,??_chkisr+10
 10307  001D0A  CFF7 F00C          	movff	tblptrh,??_chkisr+11
 10308  001D0E  CFF8 F00D          	movff	tblptru,??_chkisr+12
 10309  001D12  CFF5 F00E          	movff	tablat,??_chkisr+13
 10310                           
 10311                           ;Lab8.c: 273: if (INTCONbits.INT0IF == 1) INT0_ISR();
 10312  001D16  A2F2               	btfss	intcon,1,c	;volatile
 10313  001D18  D003               	goto	i2l3993
 10314  001D1A  EC98  F012         	call	_INT0_ISR	;wreg free
 10315  001D1E  D000               	goto	i2l3993
 10316  001D20                     i2l3993:
 10317                           
 10318                           ;Lab8.c: 275: if (INTCON3bits.INT1IF == 1) INT1_ISR();
 10319  001D20  A0F0               	btfss	intcon3,0,c	;volatile
 10320  001D22  D003               	goto	i2l3997
 10321  001D24  EC8F  F012         	call	_INT1_ISR	;wreg free
 10322  001D28  D000               	goto	i2l3997
 10323  001D2A                     i2l3997:
 10324                           
 10325                           ;Lab8.c: 276: if (INTCON3bits.INT2IF == 1) INT2_ISR();
 10326  001D2A  A2F0               	btfss	intcon3,1,c	;volatile
 10327  001D2C  D003               	goto	i2l382
 10328  001D2E  EC52  F012         	call	_INT2_ISR	;wreg free
 10329  001D32  D000               	goto	i2l382
 10330  001D34                     i2l382:
 10331  001D34  C00E  FFF5         	movff	??_chkisr+13,tablat
 10332  001D38  C00D  FFF8         	movff	??_chkisr+12,tblptru
 10333  001D3C  C00C  FFF7         	movff	??_chkisr+11,tblptrh
 10334  001D40  C00B  FFF6         	movff	??_chkisr+10,tblptrl
 10335  001D44  C00A  FFF4         	movff	??_chkisr+9,prodh
 10336  001D48  C009  FFF3         	movff	??_chkisr+8,prodl
 10337  001D4C  C008  FFDA         	movff	??_chkisr+7,fsr2h
 10338  001D50  C007  FFD9         	movff	??_chkisr+6,fsr2l
 10339  001D54  C006  FFE2         	movff	??_chkisr+5,fsr1h
 10340  001D58  C005  FFE1         	movff	??_chkisr+4,fsr1l
 10341  001D5C  C004  FFEA         	movff	??_chkisr+3,fsr0h
 10342  001D60  C003  FFE9         	movff	??_chkisr+2,fsr0l
 10343  001D64  C002  FFFB         	movff	??_chkisr+1,pclatu
 10344  001D68  C001  FFFA         	movff	??_chkisr,pclath
 10345  001D6C  0011               	retfie		f
 10346  001D6E                     __end_of_chkisr:
 10347                           	opt stack 0
 10348                           pclatu	equ	0xFFB
 10349                           pclath	equ	0xFFA
 10350                           tblptru	equ	0xFF8
 10351                           tblptrh	equ	0xFF7
 10352                           tblptrl	equ	0xFF6
 10353                           tablat	equ	0xFF5
 10354                           prodh	equ	0xFF4
 10355                           prodl	equ	0xFF3
 10356                           intcon	equ	0xFF2
 10357                           intcon2	equ	0xFF1
 10358                           intcon3	equ	0xFF0
 10359                           postinc0	equ	0xFEE
 10360                           fsr0h	equ	0xFEA
 10361                           fsr0l	equ	0xFE9
 10362                           wreg	equ	0xFE8
 10363                           postdec1	equ	0xFE5
 10364                           fsr1h	equ	0xFE2
 10365                           fsr1l	equ	0xFE1
 10366                           indf2	equ	0xFDF
 10367                           postinc2	equ	0xFDE
 10368                           fsr2h	equ	0xFDA
 10369                           fsr2l	equ	0xFD9
 10370                           status	equ	0xFD8
 10371                           
 10372 ;; *************** function _INT2_ISR *****************
 10373 ;; Defined at:
 10374 ;;		line 264 in file "Lab8.c"
 10375 ;; Parameters:    Size  Location     Type
 10376 ;;		None
 10377 ;; Auto vars:     Size  Location     Type
 10378 ;;		None
 10379 ;; Return value:  Size  Location     Type
 10380 ;;		None               void
 10381 ;; Registers used:
 10382 ;;		wreg, status,2, status,0
 10383 ;; Tracked objects:
 10384 ;;		On entry : 0/0
 10385 ;;		On exit  : 0/0
 10386 ;;		Unchanged: 0/0
 10387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10388 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10389 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10390 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10391 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10392 ;;Total ram usage:        0 bytes
 10393 ;; Hardware stack levels used:    1
 10394 ;; This function calls:
 10395 ;;		Nothing
 10396 ;; This function is called by:
 10397 ;;		_chkisr
 10398 ;; This function uses a non-reentrant model
 10399 ;;
 10400                           
 10401                           	psect	text56
 10402  0024A4                     __ptext56:
 10403                           	opt stack 0
 10404  0024A4                     _INT2_ISR:
 10405                           	opt stack 18
 10406                           
 10407                           ;Lab8.c: 266: INTCON3bits.INT2IF=0;
 10408                           
 10409                           ;incstack = 0
 10410  0024A4  92F0               	bcf	intcon3,1,c	;volatile
 10411                           
 10412                           ;Lab8.c: 267: if(MODE==1)
 10413  0024A6  045E               	decf	_MODE,w,c
 10414  0024A8  105F               	iorwf	_MODE+1,w,c
 10415  0024AA  A4D8               	btfss	status,2,c
 10416  0024AC  D006               	goto	i2l376
 10417                           
 10418                           ;Lab8.c: 268: INT2_flag = 1;
 10419  0024AE  0E00               	movlw	0
 10420  0024B0  0100               	movlb	0	; () banked
 10421  0024B2  6F85               	movwf	(_INT2_flag+1)& (0+255),b
 10422  0024B4  0E01               	movlw	1
 10423  0024B6  6F84               	movwf	_INT2_flag& (0+255),b
 10424  0024B8  D000               	goto	i2l376
 10425  0024BA                     i2l376:
 10426  0024BA  0012               	return		;funcret
 10427  0024BC                     __end_of_INT2_ISR:
 10428                           	opt stack 0
 10429                           pclatu	equ	0xFFB
 10430                           pclath	equ	0xFFA
 10431                           tblptru	equ	0xFF8
 10432                           tblptrh	equ	0xFF7
 10433                           tblptrl	equ	0xFF6
 10434                           tablat	equ	0xFF5
 10435                           prodh	equ	0xFF4
 10436                           prodl	equ	0xFF3
 10437                           intcon	equ	0xFF2
 10438                           intcon2	equ	0xFF1
 10439                           intcon3	equ	0xFF0
 10440                           postinc0	equ	0xFEE
 10441                           fsr0h	equ	0xFEA
 10442                           fsr0l	equ	0xFE9
 10443                           wreg	equ	0xFE8
 10444                           postdec1	equ	0xFE5
 10445                           fsr1h	equ	0xFE2
 10446                           fsr1l	equ	0xFE1
 10447                           indf2	equ	0xFDF
 10448                           postinc2	equ	0xFDE
 10449                           fsr2h	equ	0xFDA
 10450                           fsr2l	equ	0xFD9
 10451                           status	equ	0xFD8
 10452                           
 10453 ;; *************** function _INT1_ISR *****************
 10454 ;; Defined at:
 10455 ;;		line 258 in file "Lab8.c"
 10456 ;; Parameters:    Size  Location     Type
 10457 ;;		None
 10458 ;; Auto vars:     Size  Location     Type
 10459 ;;		None
 10460 ;; Return value:  Size  Location     Type
 10461 ;;		None               void
 10462 ;; Registers used:
 10463 ;;		wreg, status,2, status,0
 10464 ;; Tracked objects:
 10465 ;;		On entry : 0/0
 10466 ;;		On exit  : 0/0
 10467 ;;		Unchanged: 0/0
 10468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10469 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10470 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10472 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10473 ;;Total ram usage:        0 bytes
 10474 ;; Hardware stack levels used:    1
 10475 ;; This function calls:
 10476 ;;		Nothing
 10477 ;; This function is called by:
 10478 ;;		_chkisr
 10479 ;; This function uses a non-reentrant model
 10480 ;;
 10481                           
 10482                           	psect	text57
 10483  00251E                     __ptext57:
 10484                           	opt stack 0
 10485  00251E                     _INT1_ISR:
 10486                           	opt stack 18
 10487                           
 10488                           ;Lab8.c: 260: INTCON3bits.INT1IF=0;
 10489                           
 10490                           ;incstack = 0
 10491  00251E  90F0               	bcf	intcon3,0,c	;volatile
 10492                           
 10493                           ;Lab8.c: 261: if(MODE==1)
 10494  002520  045E               	decf	_MODE,w,c
 10495  002522  105F               	iorwf	_MODE+1,w,c
 10496  002524  A4D8               	btfss	status,2,c
 10497  002526  D003               	goto	i2l372
 10498                           
 10499                           ;Lab8.c: 262: EW_PED_SW = 1;
 10500  002528  0E01               	movlw	1
 10501  00252A  6E63               	movwf	_EW_PED_SW,c
 10502  00252C  D000               	goto	i2l372
 10503  00252E                     i2l372:
 10504  00252E  0012               	return		;funcret
 10505  002530                     __end_of_INT1_ISR:
 10506                           	opt stack 0
 10507                           pclatu	equ	0xFFB
 10508                           pclath	equ	0xFFA
 10509                           tblptru	equ	0xFF8
 10510                           tblptrh	equ	0xFF7
 10511                           tblptrl	equ	0xFF6
 10512                           tablat	equ	0xFF5
 10513                           prodh	equ	0xFF4
 10514                           prodl	equ	0xFF3
 10515                           intcon	equ	0xFF2
 10516                           intcon2	equ	0xFF1
 10517                           intcon3	equ	0xFF0
 10518                           postinc0	equ	0xFEE
 10519                           fsr0h	equ	0xFEA
 10520                           fsr0l	equ	0xFE9
 10521                           wreg	equ	0xFE8
 10522                           postdec1	equ	0xFE5
 10523                           fsr1h	equ	0xFE2
 10524                           fsr1l	equ	0xFE1
 10525                           indf2	equ	0xFDF
 10526                           postinc2	equ	0xFDE
 10527                           fsr2h	equ	0xFDA
 10528                           fsr2l	equ	0xFD9
 10529                           status	equ	0xFD8
 10530                           
 10531 ;; *************** function _INT0_ISR *****************
 10532 ;; Defined at:
 10533 ;;		line 252 in file "Lab8.c"
 10534 ;; Parameters:    Size  Location     Type
 10535 ;;		None
 10536 ;; Auto vars:     Size  Location     Type
 10537 ;;		None
 10538 ;; Return value:  Size  Location     Type
 10539 ;;		None               void
 10540 ;; Registers used:
 10541 ;;		wreg, status,2, status,0
 10542 ;; Tracked objects:
 10543 ;;		On entry : 0/0
 10544 ;;		On exit  : 0/0
 10545 ;;		Unchanged: 0/0
 10546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10547 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10548 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10549 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10550 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10551 ;;Total ram usage:        0 bytes
 10552 ;; Hardware stack levels used:    1
 10553 ;; This function calls:
 10554 ;;		Nothing
 10555 ;; This function is called by:
 10556 ;;		_chkisr
 10557 ;; This function uses a non-reentrant model
 10558 ;;
 10559                           
 10560                           	psect	text58
 10561  002530                     __ptext58:
 10562                           	opt stack 0
 10563  002530                     _INT0_ISR:
 10564                           	opt stack 18
 10565                           
 10566                           ;Lab8.c: 254: INTCONbits.INT0IF=0;
 10567                           
 10568                           ;incstack = 0
 10569  002530  92F2               	bcf	intcon,1,c	;volatile
 10570                           
 10571                           ;Lab8.c: 255: if(MODE==1)
 10572  002532  045E               	decf	_MODE,w,c
 10573  002534  105F               	iorwf	_MODE+1,w,c
 10574  002536  A4D8               	btfss	status,2,c
 10575  002538  D003               	goto	i2l368
 10576                           
 10577                           ;Lab8.c: 256: NS_PED_SW = 1;
 10578  00253A  0E01               	movlw	1
 10579  00253C  6E66               	movwf	_NS_PED_SW,c
 10580  00253E  D000               	goto	i2l368
 10581  002540                     i2l368:
 10582  002540  0012               	return		;funcret
 10583  002542                     __end_of_INT0_ISR:
 10584                           	opt stack 0
 10585                           pclatu	equ	0xFFB
 10586                           pclath	equ	0xFFA
 10587                           tblptru	equ	0xFF8
 10588                           tblptrh	equ	0xFF7
 10589                           tblptrl	equ	0xFF6
 10590                           tablat	equ	0xFF5
 10591                           prodh	equ	0xFF4
 10592                           prodl	equ	0xFF3
 10593                           intcon	equ	0xFF2
 10594                           intcon2	equ	0xFF1
 10595                           intcon3	equ	0xFF0
 10596                           postinc0	equ	0xFEE
 10597                           fsr0h	equ	0xFEA
 10598                           fsr0l	equ	0xFE9
 10599                           wreg	equ	0xFE8
 10600                           postdec1	equ	0xFE5
 10601                           fsr1h	equ	0xFE2
 10602                           fsr1l	equ	0xFE1
 10603                           indf2	equ	0xFDF
 10604                           postinc2	equ	0xFDE
 10605                           fsr2h	equ	0xFDA
 10606                           fsr2l	equ	0xFD9
 10607                           status	equ	0xFD8
 10608                           pclatu	equ	0xFFB
 10609                           pclath	equ	0xFFA
 10610                           tblptru	equ	0xFF8
 10611                           tblptrh	equ	0xFF7
 10612                           tblptrl	equ	0xFF6
 10613                           tablat	equ	0xFF5
 10614                           prodh	equ	0xFF4
 10615                           prodl	equ	0xFF3
 10616                           intcon	equ	0xFF2
 10617                           intcon2	equ	0xFF1
 10618                           intcon3	equ	0xFF0
 10619                           postinc0	equ	0xFEE
 10620                           fsr0h	equ	0xFEA
 10621                           fsr0l	equ	0xFE9
 10622                           wreg	equ	0xFE8
 10623                           postdec1	equ	0xFE5
 10624                           fsr1h	equ	0xFE2
 10625                           fsr1l	equ	0xFE1
 10626                           indf2	equ	0xFDF
 10627                           postinc2	equ	0xFDE
 10628                           fsr2h	equ	0xFDA
 10629                           fsr2l	equ	0xFD9
 10630                           status	equ	0xFD8
 10631                           
 10632                           	psect	rparam
 10633  0000                     pclatu	equ	0xFFB
 10634                           pclath	equ	0xFFA
 10635                           tblptru	equ	0xFF8
 10636                           tblptrh	equ	0xFF7
 10637                           tblptrl	equ	0xFF6
 10638                           tablat	equ	0xFF5
 10639                           prodh	equ	0xFF4
 10640                           prodl	equ	0xFF3
 10641                           intcon	equ	0xFF2
 10642                           intcon2	equ	0xFF1
 10643                           intcon3	equ	0xFF0
 10644                           postinc0	equ	0xFEE
 10645                           fsr0h	equ	0xFEA
 10646                           fsr0l	equ	0xFE9
 10647                           wreg	equ	0xFE8
 10648                           postdec1	equ	0xFE5
 10649                           fsr1h	equ	0xFE2
 10650                           fsr1l	equ	0xFE1
 10651                           indf2	equ	0xFDF
 10652                           postinc2	equ	0xFDE
 10653                           fsr2h	equ	0xFDA
 10654                           fsr2l	equ	0xFD9
 10655                           status	equ	0xFD8


Data Sizes:
    Strings     103
    Constant    475
    Data        35
    BSS         62
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     64     113
    BANK0           128     14      62
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), SW_MODE_Txt(COMRAM[2]), SW_NSLT_Txt(COMRAM[2]), SW_NSPED_Txt(COMRAM[2]), 
		 -> SW_EWLT_Txt(COMRAM[2]), SW_EWPED_Txt(COMRAM[2]), PED_NS_Count(BANK0[3]), PED_EW_Count(BANK0[3]), 
		 -> NSLT_Count(BANK0[3]), NS_Count(COMRAM[3]), EWLT_Count(COMRAM[3]), EW_Count(COMRAM[3]), 
		 -> FlashingS_Txt(COMRAM[2]), FlashingR_Txt(COMRAM[2]), Act_Mode_Txt(COMRAM[2]), buffer(BANK0[31]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), SW_MODE_Txt(COMRAM[2]), SW_NSLT_Txt(COMRAM[2]), SW_NSPED_Txt(COMRAM[2]), 
		 -> SW_EWLT_Txt(COMRAM[2]), SW_EWPED_Txt(COMRAM[2]), PED_NS_Count(BANK0[3]), PED_EW_Count(BANK0[3]), 
		 -> NSLT_Count(BANK0[3]), NS_Count(COMRAM[3]), EWLT_Count(COMRAM[3]), EW_Count(COMRAM[3]), 
		 -> FlashingS_Txt(COMRAM[2]), FlashingR_Txt(COMRAM[2]), Act_Mode_Txt(COMRAM[2]), buffer(BANK0[31]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_14(CODE[2]), STR_13(CODE[2]), STR_12(CODE[21]), STR_11(CODE[4]), 
		 -> STR_10(CODE[4]), STR_9(CODE[7]), STR_8(CODE[12]), STR_7(CODE[7]), 
		 -> STR_6(CODE[10]), STR_5(CODE[2]), STR_4(CODE[4]), STR_3(CODE[4]), 
		 -> STR_2(CODE[6]), STR_1(CODE[20]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    txt	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), SW_MODE_Txt(COMRAM[2]), SW_NSLT_Txt(COMRAM[2]), SW_NSPED_Txt(COMRAM[2]), 
		 -> SW_EWLT_Txt(COMRAM[2]), SW_EWPED_Txt(COMRAM[2]), PED_NS_Count(BANK0[3]), PED_EW_Count(BANK0[3]), 
		 -> NSLT_Count(BANK0[3]), NS_Count(COMRAM[3]), EWLT_Count(COMRAM[3]), EW_Count(COMRAM[3]), 
		 -> FlashingS_Txt(COMRAM[2]), FlashingR_Txt(COMRAM[2]), Act_Mode_Txt(COMRAM[2]), buffer(BANK0[31]), 


Critical Paths under _main in COMRAM

    _init_UART->_OpenUSART
    _Initialize_Screen->_drawtext
    _Initialize_Screen->_fillCircle
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawRect->_drawFastHLine
    _drawRect->_drawFastVLine
    _drawFastHLine->_setAddrWindow
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul
    _update_LCD_count->_drawtext
    _Wait_One_Second->_drawtext
    _update_LCD_misc->_drawtext
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _update_LCD_color->_fillCircle
    _fillCircle->_fillCircleHelper
    _fillCircleHelper->_drawFastVLine
    _drawCircle->_drawPixel
    _update_LCD_PED_Count->_drawtext
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _write_data->_spiwrite
    _write_command->_spiwrite

Critical Paths under _chkisr in COMRAM

    None.

Critical Paths under _main in BANK0

    _Night_Mode->_Wait_N_Seconds
    _Initialize_Screen->_drawtext
    _Day_Mode->_PED_Control
    _Wait_N_Seconds->_update_LCD_count
    _update_LCD_count->_drawtext
    _Wait_One_Second->_update_LCD_misc
    _update_LCD_misc->_drawtext
    _Set_NS_LT->_update_LCD_color
    _Set_NS->_update_LCD_color
    _Set_EW_LT->_update_LCD_color
    _Set_EW->_update_LCD_color
    _PED_Control->_update_LCD_PED_Count
    _update_LCD_PED_Count->_drawtext

Critical Paths under _chkisr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _chkisr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _chkisr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _chkisr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _chkisr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _chkisr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _chkisr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _chkisr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _chkisr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _chkisr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _chkisr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _chkisr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _chkisr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _chkisr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _chkisr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _chkisr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  469825
                                             12 BANK0      2     2      0
                           _Day_Mode
                           _Init_ADC
                  _Initialize_Screen
                         _Night_Mode
                           ___awtoft
                            ___ftdiv
                             ___ftge
                             ___wmul
                       _get_full_ADC
                            _init_IO
                          _init_UART
 ---------------------------------------------------------------------------------
 (1) _init_UART                                            0     0      0     375
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            3     1      2     375
                                             14 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _init_IO                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Night_Mode                                           0     0      0  184854
                             _Set_EW
                          _Set_EW_LT
                             _Set_NS
                          _Set_NS_LT
                     _Wait_N_Seconds
 ---------------------------------------------------------------------------------
 (1) _Initialize_Screen                                    0     0      0   65648
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                         _drawCircle
                           _drawRect
                           _drawtext
                         _fillCircle
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _fillScreen                                           2     0      2    2192
                                             33 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (3) _fillRectangle                                       12     7      5    2096
                                             21 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _drawRect                                            11     1     10    6892
                                             32 COMRAM    11     1     10
                      _drawFastHLine
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (3) _drawFastHLine                                       11     7      4    1932
                                             21 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _TFT_GreenTab_Initialize                              0     0      0    4364
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd3                                                0     0      0    2052
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd2red                                             0     0      0     130
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd1                                                0     0      0    2052
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _LCD_Reset                                            0     0      0    1922
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             6     4      2    1922
                                             20 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Init_ADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Day_Mode                                             0     0      0  212611
                        _PED_Control
                             _Set_EW
                          _Set_EW_LT
                             _Set_NS
                          _Set_NS_LT
                     _Wait_N_Seconds
 ---------------------------------------------------------------------------------
 (2) _Wait_N_Seconds                                       2     2      0   85286
                                              9 BANK0      2     2      0
                    _Wait_One_Second
                   _update_LCD_count
 ---------------------------------------------------------------------------------
 (3) _update_LCD_count                                     2     1      1   27528
                                              7 BANK0      2     1      1
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (3) _Wait_One_Second                                      0     0      0   57628
                   _Wait_Half_Second
                           _drawtext
                             _strcpy
                    _update_LCD_misc
 ---------------------------------------------------------------------------------
 (4) _update_LCD_misc                                      2     2      0   31018
                                              7 BANK0      2     2      0
                           ___awtoft
                            ___ftdiv
                             ___ftge
                             ___wmul
                           _drawtext
                       _get_full_ADC
 ---------------------------------------------------------------------------------
 (1) _get_full_ADC                                         6     4      2      34
                                             14 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) ___ftge                                               9     3      6     458
                                             14 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             15     9      6    2718
                                             26 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) ___awtoft                                             4     1      3    2211
                                             22 COMRAM     4     1      3
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftpack                                             8     3      5    1948
                                             14 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    1929
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _Set_NS_LT                                            1     1      0   24892
                                              3 BANK0      1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (2) _Set_NS                                               1     1      0   24892
                                              3 BANK0      1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (2) _Set_EW_LT                                            1     1      0   24892
                                              3 BANK0      1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (2) _Set_EW                                               1     1      0   24892
                                              3 BANK0      1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (3) _update_LCD_color                                     3     2      1   24830
                                              0 BANK0      3     2      1
                         _drawCircle
                         _fillCircle
 ---------------------------------------------------------------------------------
 (4) _fillCircle                                           8     0      8   12244
                                             56 COMRAM     8     0      8
                      _drawFastVLine
                   _fillCircleHelper
 ---------------------------------------------------------------------------------
 (5) _fillCircleHelper                                    24    12     12    4703
                                             32 COMRAM    24    12     12
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (4) _drawCircle                                          20    12      8   11424
                                             25 COMRAM    20    12      8
                          _drawPixel
 ---------------------------------------------------------------------------------
 (2) _PED_Control                                          3     2      1   27757
                                              9 BANK0      3     2      1
          _Wait_One_Second_With_Beep
               _update_LCD_PED_Count
 ---------------------------------------------------------------------------------
 (3) _update_LCD_PED_Count                                 2     1      1   27404
                                              7 BANK0      2     1      1
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (4) _drawtext                                            17     9      8   24681
                                             54 COMRAM    10     2      8
                                              0 BANK0      7     7      0
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (5) _strlen                                               6     4      2     195
                                             14 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (5) _drawChar                                            11     4      7   10774
                                             43 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (6) _fillRect                                            11     6      5    3876
                                             32 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (7) _drawFastVLine                                       11     7      4    3102
                                             21 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (6) _drawPixel                                            4     1      3    4207
                                             21 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (8) _setAddrWindow                                        4     1      3    1034
                                             17 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (9) _write_data                                           1     1      0      65
                                             16 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (9) _write_command                                        1     1      0      65
                                             16 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (8) _spiwrite                                             2     2      0      34
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     882
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    1213
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1225
                                             14 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _Wait_One_Second_With_Beep                            0     0      0       0
                    _Activate_Buzzer
                  _Deactivate_Buzzer
                   _Wait_Half_Second
 ---------------------------------------------------------------------------------
 (4) _Wait_Half_Second                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Deactivate_Buzzer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Activate_Buzzer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _chkisr                                             14    14      0       0
                                              0 COMRAM    14    14      0
                           _INT0_ISR
                           _INT1_ISR
                           _INT2_ISR
 ---------------------------------------------------------------------------------
 (13) _INT2_ISR                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _INT1_ISR                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _INT0_ISR                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Day_Mode
     _PED_Control
       _Wait_One_Second_With_Beep
         _Activate_Buzzer
         _Deactivate_Buzzer
         _Wait_Half_Second
       _update_LCD_PED_Count
         ___awdiv
         ___awmod
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Set_EW
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_EW_LT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS_LT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Wait_N_Seconds
       _Wait_One_Second
         _Wait_Half_Second
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _strcpy
         _update_LCD_misc
           ___awtoft
             ___ftpack
             ___wmul (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftge
           ___wmul
           _drawtext
             _drawChar
               ___wmul
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _get_full_ADC
       _update_LCD_count
         ___awdiv
         ___awmod
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
   _Init_ADC
   _Initialize_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawCircle
       _drawPixel
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_data
           _spiwrite
     _drawRect
       _drawFastHLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
       _drawFastVLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillCircle
       _drawFastVLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
       _fillCircleHelper
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   _Night_Mode
     _Set_EW
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_EW_LT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS_LT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Wait_N_Seconds
       _Wait_One_Second
         _Wait_Half_Second
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _strcpy
         _update_LCD_misc
           ___awtoft
             ___ftpack
             ___wmul (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftge
           ___wmul
           _drawtext
             _drawChar
               ___wmul
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _get_full_ADC
       _update_LCD_count
         ___awdiv
         ___awmod
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
   ___awtoft
     ___ftpack
     ___wmul (ARG)
   ___ftdiv
     ___awtoft (ARG)
       ___ftpack
       ___wmul (ARG)
     ___ftpack (ARG)
     ___wmul (ARG)
   ___ftge
   ___wmul
   _get_full_ADC
   _init_IO
   _init_UART
     _OpenUSART

 _chkisr (ROOT)
   _INT0_ISR
   _INT1_ISR
   _INT2_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      E      3E       5       48.4%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     40      71       1       89.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      AF      34        0.0%
DATA                 0      0      AF       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Wed Oct 13 23:47:42 2021

                       drawCircle@f 0028                         drawCircle@r 001E  
                       drawCircle@x 002A                         drawCircle@y 002C  
         _Wait_One_Second_With_Beep 24BC                         _SSPSTATbits 000FC7  
                      drawCircle@x0 001A                        drawCircle@y0 001C  
                      ___awdiv@sign 0014                 ___wmul@multiplicand 0011  
          update_LCD_color@Circle_Y 00A9                                 l202 1040  
                               l117 204E                                 l230 16EC  
                               l127 24F4                                 l231 1658  
                               l241 0D24                                 l233 16C8  
                               l234 16EA                                 l171 23B0  
                               l411 2452                                 l420 21CE  
                               l415 219C                                 l424 2154  
                               l408 2432                                 l177 1CE6  
                               l193 10EA                                 l521 17BC  
                               l505 0AAA                                 l433 222C  
                               l417 21A0                                 l442 21E4  
                               l418 21A6                                 l426 2158  
                               l514 0F94                                 l195 0FC4  
                               l259 115A                                 l435 2230  
                               l419 21AA                                 l427 215E  
                               l275 1C5E                                 l460 2002  
                               l436 2236                                 l444 21E8  
                               l428 2162                                 l437 223A  
                               l445 21EE                                 l429 2186  
                               l438 225E                                 l446 21F2  
                               l470 188A                                 l447 2216  
                               l464 17F8                                 l473 1960  
                               l490 249C                                 l570 242C  
                               l466 184C                                 l562 1EB8  
                               l563 1EBA                                 l564 1EC4  
                               l565 1EC6                                 l478 1A00  
                               l558 1E9E                                 l567 1EE0  
                               l763 1BD6                                 l950 1610  
                               l776 1E70                                 l953 15DC  
                               l788 2316                                 l878 1950  
                               l959 1B40                                 l889 1928  
                 ?_Wait_Half_Second 0001       update_LCD_PED_Count@direction 00AF  
                               _PR2 000FCB                   _Deactivate_Buzzer 257A  
                               _dir 006F                                 _nbr 0086  
                               _txt 0060                      drawFastHLine@w 0017  
                    drawFastHLine@x 0020                      drawFastHLine@y 0016  
                      ___awmod@sign 0014             __end_of_update_LCD_misc 0C62  
                               wreg 000FE8                  ??_Wait_Half_Second 000F  
                ?_Deactivate_Buzzer 0001                     ??_fillRectangle 001B  
                      __CFG_LVP$OFF 000000             _TFT_GreenTab_Initialize 23DC  
                      ___ftdiv@cntr 0024                        ___ftdiv@sign 0029  
                      __CFG_WDT$OFF 000000                      drawFastVLine@h 0017  
                              l1127 22DA                      drawFastVLine@x 0020  
                    drawFastVLine@y 0016                                l4113 0FC0  
                              l4105 0FA6                                l4123 1000  
                              l4115 0FC8                                l4125 1034  
                              l4109 0FB2                                l4221 13B0  
                              l4063 1CA8                                l4143 10B6  
                              l4135 1062                                l4151 10E6  
                              l4127 1038                                l4119 0FD0  
                              l4081 2392                                l4073 1CCE  
                              l4145 10DE                                l4137 108A  
                              l4233 1420                                l4225 13CE  
                              l4209 1360                                l5113 1834  
                              l4075 1CDC                                l4059 1C70  
                              l4235 1428                                l4331 22F2  
                              l4093 211C                                l4157 22A8  
                              l4413 0DFA                                l4421 2364  
                              l4181 18F0                                l4173 18AC  
                              l4309 15B6                                l4503 1B80  
                              l4159 22AE                                l4263 11BC  
                              l4247 1140                                l4191 1930  
                              l4183 1910                                l4175 18B8  
                              l4319 15EA                                l4343 1B10  
                              l4505 1B8A                                l4089 2100  
                              l4185 191C                                l4177 18D8  
                              l4169 189C                                l4523 1BCC  
                              l4515 1BB0                                l4507 1B92  
                              l4267 120E                                l4419 235A  
                              l4283 154E                                l4339 1ADE  
                              l5163 19BC                                l4197 1942  
                              l4285 1568                                l4349 1B3C  
                              l4461 0B66                                l4453 0B4A  
                              l4519 1BBC                                l4551 1E4A  
                              l4543 1E22                                l4535 1E06  
                              l4471 0B88                                l5087 17CE  
                              l4703 1C20                                l4545 1E2C  
                              l4385 0D0A                                l4289 1576  
                              l4465 0B74                                l4457 0B58  
                              l4713 1C46                                l5433 1AA2  
                              l4491 1B58                                l4547 1E34  
                              l4555 1E56                                l4539 1E14  
                              l4731 09D2                                l4723 0824  
                              l4715 1C54                                l4741 174E  
                              l4469 0B82                                l5429 1A96  
                              l4559 1E66                                l4903 1FB6  
                              l4727 08FA                                l4497 1B6A  
                              l4737 16F4                                l4681 16CC  
                              l4665 1690                                l4833 1E96  
                              l4825 1E84                                l4747 17AA  
                              l4923 1FFC                                l4915 1FDA  
                              l4907 1FC4                                l4931 232E  
                              l4691 16E6                                l4659 1622  
                              l4781 0EC8                                l4773 0E16  
                              l4685 16D6                                l4677 16BE  
                              l4845 1EB0                                l4837 1EA2  
                              l4829 1E8E                                l4791 0F76  
                              l4927 2320                                l4785 0F20  
                              l4777 0E6C                                l4937 2342  
                              l4891 2240                                l4875 21B0  
                              l4883 2168                                l4699 1BE8  
                              l4899 21F8                                STR_1 FFAD  
                              STR_2 FFE5                                STR_3 FFEB  
                              STR_4 FFEF                                STR_5 FFFD  
                              STR_6 FFCD                                STR_7 FFDE  
                              STR_8 FFC1                                STR_9 FFD7  
                              u3111 155E                                u3230 0B24  
                              u3240 0B26                                u3091 1540  
                              u2700 1C9E                                u3520 1C16  
                              u3440 1650                                u3450 1686  
                              u2850 1098                                u3920 1A90  
                              _MODE 005E                                u3930 1A92  
                              u2990 138A                                _RBPU 007F8F  
                              _TRMT 007D61                 ??_Deactivate_Buzzer 000F  
                              _main 1A02                                _font FDBD  
                      ___ftpack@arg 000F                        ___ftpack@exp 0012  
                              fsr0h 000FEA                                fsr1h 000FE2  
                    ??_get_full_ADC 0011                                fsr0l 000FE9  
                              fsr2h 000FDA                                fsr1l 000FE1  
                              indf2 000FDF                                fsr2l 000FD9  
                              _wrap 0041                                _volt 005B  
                   drawFastHLine@hi 001E                     drawFastHLine@lo 001F  
          __end_of_update_LCD_color 0AAC                                pclat 000FFA  
          __end_of_update_LCD_count 0F96                  __size_of_LCD_Reset 0012  
                              prodh 000FF4                                prodl 000FF3  
                              start 0018                     ??_drawFastHLine 001A  
                   ??_drawFastVLine 001A                        ___param_bank 000010  
                      _Act_Mode_Txt 004B                    __end_of_INT0_ISR 2542  
                  __end_of_INT1_ISR 2530                    __end_of_INT2_ISR 24BC  
         __end_of_Deactivate_Buzzer 2582                     drawFastVLine@hi 001E  
                   drawFastVLine@lo 001F                         _SW_EWLT_Txt 0051  
                       _SW_MODE_Txt 0055                               ?_main 0001  
                   __end_of___awdiv 1BD8                     drawCircle@ddF_x 0024  
                             STR_10 FFF7                     drawCircle@ddF_y 0026  
                             STR_11 FFF3                               STR_12 FF98  
                             STR_13 FFFD                               STR_14 FFFB  
                   __end_of___awmod 1E72                     __end_of___ftdiv 1612  
                             _T0CON 000FD5                     ___awdiv@divisor 0011  
                             _T2CON 000FCA                               _T3CON 000FB1  
                             i2l372 252E                               i2l382 1D34  
                             i2l368 2540                               i2l376 24BA  
                   ___awdiv@counter 0013                     drawCircle@color 0020  
                             _RCSTA 000FAB                               _TMR0H 000FD7  
                             _TMR0L 000FD6                               _SPBRG 000FAF  
                             _TRISA 000F92                               _TRISB 000F93  
                             _TRISC 000F94                               _TRISD 000F95  
                             _TRISE 000F96                               _TXREG 000FAD  
                             _TXSTA 000FAC                               _Count 0062  
                      ?_PED_Control 00B0                               _Rcmd1 1224  
                             _Rcmd3 143E                         _SW_NSLT_Txt 0057  
                     drawRect@color 0029                       ___awtoft@sign 001A  
                   __end_of_init_IO 23DC                               _font2 FEBC  
             fillCircleHelper@ddF_x 002F               fillCircleHelper@ddF_y 0031  
                 ??_Wait_One_Second 0041                       ___ftpack@sign 0013  
             fillCircleHelper@delta 0029               fillCircleHelper@color 002B  
                    __CFG_BOREN$OFF 000000                               tablat 000FF5  
                             status 000FD8              ??_update_LCD_PED_Count 0041  
                  __end_of_Day_Mode 188C                      _Wait_N_Seconds 2318  
                   write_data@data_ 0011                     __initialization 1F48  
                      __end_of_main 1AAC                        __end_of_font FEBC  
                  __end_of_Init_ADC 2570                    __end_of_Rcmd2red 229E  
                        _Night_Mode 1952                              ??_main 0041  
                     __activetblptr 000002               Wait_N_Seconds@seconds 00B0  
                 __end_of_LCD_Reset 250C                        _SW_EWPED_Txt 0053  
         ??_TFT_GreenTab_Initialize 001B                    ?_update_LCD_misc 0001  
                            ?_Rcmd1 0001                              ?_Rcmd3 0001  
                            _ADCON0 000FC2                              _ADCON1 000FC1  
                            _ADCON2 000FC0                              _ADRESH 000FC4  
                            _ADRESL 000FC3                              _CCPR2L 000FBB  
              PED_Control@direction 00B1                    ___awdiv@dividend 000F  
                  __end_of___awtoft 2318                    __end_of___ftpack 1952  
                            i2l3993 1D20                              i2l3997 1D2A  
                            _OSCCON 000FD3                              _SPBRGH 000FB0  
                            _SSPBUF 000FC9              __end_of_Wait_N_Seconds 2350  
                      _SW_NSPED_Txt 0059                    __end_of_delay_ms 2056  
                            _Set_EW 2218                              _Set_NS 2188  
                  __end_of_fillRect 2140                    __end_of_drawChar 10EC  
                  __end_of_drawRect 1F48                  __size_of_Set_EW_LT 0048  
                __size_of_OpenUSART 0070                              ___ftge 1AAC  
                __size_of_Set_NS_LT 0048            __size_of_Activate_Buzzer 0012  
                            ___wmul 2406                           ??___awdiv 0013  
         __size_of_fillCircleHelper 0138                    __end_of_drawtext 143E  
                         ??___awmod 0013                           ??___ftdiv 0021  
                            _chkisr 0008                              _buffer 0088  
                            clear_0 1F4E                              clear_1 1F5A  
                  ___awdiv@quotient 0015                     ___awmod@divisor 0011  
        __size_of_Deactivate_Buzzer 0008                     ___awmod@counter 0013  
                      drawtext@size 003E                              _strcpy 2350  
                            _strlen 229E                __end_of_get_full_ADC 2454  
                         ??_init_IO 000F                        __pdataCOMRAM 0041  
__size_of_Wait_One_Second_With_Beep 0016                         Set_EW@color 00AA  
                      __mediumconst FDBC                              tblptrh 000FF7  
                            tblptrl 000FF6                              tblptru 000FF8  
                  __end_of_spiwrite 24FA                         Set_NS@color 00AA  
                        __accesstop 0080             __end_of__initialization 1FA0  
                         ?_INT0_ISR 0001                           ?_INT1_ISR 0001  
                         ?_INT2_ISR 0001                          ___ftge@ff1 000F  
                        ___ftge@ff2 0012                     ?_Wait_N_Seconds 0001  
                     ___rparam_used 000001                          ___ftdiv@f1 001B  
                        ___ftdiv@f2 001E                          ___ftdiv@f3 0025  
                        ___awtoft@c 0017                       __end_of_Rcmd1 1334  
                     __end_of_Rcmd3 1530                      __pcstackCOMRAM 0001  
                      __pidataBANK0 2570                       __end_of_font2 FF98  
                       ?_Night_Mode 0001                      drawPixel@color 0017  
            __size_of_write_command 0010                           ?_Day_Mode 0001  
        fillCircleHelper@cornername 0027                             ??_Rcmd1 001B  
                           ??_Rcmd3 001B                  __size_of_drawPixel 0030  
                 __end_of_Set_EW_LT 2218                   __end_of_OpenUSART 1EE2  
                 __end_of_Set_NS_LT 2188                __size_of_PED_Control 005A  
                        __pbssBANK0 0080                           ?_Init_ADC 0001  
                         ?_Rcmd2red 0001                  __size_of_init_UART 0014  
                        ??_INT0_ISR 0001                          ??_INT1_ISR 0001  
         __size_of_Wait_Half_Second 001A                          ??_INT2_ISR 0001  
                   spiwrite@spidata 0010                   ?_update_LCD_color 00A7  
                 ?_update_LCD_count 00AE                             ?_Set_EW 0001  
                           ?_Set_NS 0001                  __CFG_CCP2MX$PORTBE 000000  
                ??_update_LCD_color 0041                  ??_update_LCD_count 0041  
                           ?___ftge 000F                             ?___wmul 000F  
                           ?_chkisr 0001              __size_of_setAddrWindow 004E  
                           _CCP2CON 000FBA           update_LCD_PED_Count@count 00AE  
                         ?___awtoft 0017                           ?___ftpack 000F  
                   _Wait_One_Second 1D6E                          _fillCircle 2056  
                           ?_strcpy 000F                             ?_strlen 000F  
                 ??_Activate_Buzzer 000F                          _fillScreen 2454  
                        _drawCircle 0C62                          ??_Day_Mode 0041  
                         ?_delay_ms 0015                           ?_fillRect 0021  
         update_LCD_count@direction 00AF                           ?_drawChar 002C  
                           _SSPCON1 000FC6                           ?_drawRect 0021  
                           _SSPSTAT 000FC7               __end_of_fillRectangle 16EE  
                         ?_drawtext 0037                             _SW_EWLT 0068  
                           _SW_MODE 006A                          ??_Init_ADC 000F  
                           _SW_NSLT 006B                          ??_Rcmd2red 0012  
               __size_of_Night_Mode 00B0                       _write_command 2552  
                           __Hparam 0000                             __Lparam 0000  
                   __size_of_Set_EW 0048                     __size_of_Set_NS 0048  
             __end_of_drawFastHLine 1C60                   __end_of_drawPixel 23B2  
             __end_of_drawFastVLine 1CE8                    _fillCircleHelper 10EC  
                   __size_of___ftge 0096                             ___awdiv 1B42  
                           ___awmod 1DF0                             ___ftdiv 1530  
                   __size_of___wmul 0028               __size_of_get_full_ADC 0026  
                   __size_of_chkisr 1D66                           ?_spiwrite 0001  
                           __pcinit 1F48                          ??___awtoft 001A  
                        ??___ftpack 0014                             __ramtop 1000  
                           __ptext0 1A02                             __ptext1 24D2  
                           __ptext2 1E72                             __ptext3 23B2  
                           __ptext4 1952                             __ptext5 001C  
                           __ptext6 2454                             __ptext7 1612  
                           __ptext8 1EE2                             __ptext9 1BD8  
                 __end_of_init_UART 24E6                           _T0CONbits 000FD5  
                   __size_of_strcpy 0032                     __size_of_strlen 003E  
                           _init_IO 23B2                           _T3CONbits 000FB1  
                  ___awmod@dividend 000F                          ??_delay_ms 0017  
                     drawtext@_text 0038                       drawtext@color 003A  
                        ??_fillRect 0026                          ??_drawChar 0033  
                         _LCD_Reset 24FA                          ??_drawRect 002B  
                     _setAddrWindow 20A8                      __pintcode_body 1CE8  
                drawFastHLine@color 0018                          delay_ms@ms 0015  
              end_of_initialization 1FA0                           _INT0_flag 0080  
                         _INT1_flag 0082                           _INT2_flag 0084  
                        ??_drawtext 003F                      ?_write_command 0001  
                     __Lmediumconst FDBC                             int_func 1CE8  
                         _PED_Count 0067                        _get_full_ADC 242E  
                      PED_Control@i 00B2                           _EW_PED_SW 0063  
     __size_of_update_LCD_PED_Count 00D0             __end_of_Wait_One_Second 1DF0  
                         _RCSTAbits 000FAB                             postdec1 000FE5  
                           postinc0 000FEE                             postinc2 000FDE  
                        ??_spiwrite 000F                             strlen@s 000F  
                   fillCircle@color 003F                         ?_fillCircle 0039  
                         _PORTAbits 000F80                    drawtext@cursor_x 00AD  
                  drawtext@cursor_y 00AC                           _PORTBbits 000F81  
                         _PORTDbits 000F83                           _PORTEbits 000F84  
                       ?_fillScreen 0022                           _NS_PED_SW 0066  
                       ?_drawCircle 001A                          drawChar@bg 0030  
                         _TRISCbits 000F94                      ?_setAddrWindow 0012  
                        ?_LCD_Reset 0001                    ??_Wait_N_Seconds 0041  
                  drawtext@textsize 00A8            __size_of_update_LCD_misc 01B6  
                        drawPixel@x 0019                          drawPixel@y 0016  
                  _Wait_Half_Second 248A                         ___ftdiv@exp 0028  
                         _TXSTAbits 000FAC                  PED_Control@Num_Sec 00B0  
                get_full_ADC@result 0013                   __size_of_INT0_ISR 0012  
                 __size_of_INT1_ISR 0012                   __size_of_INT2_ISR 0018  
                    __end_of_Set_EW 2260                      __end_of_Set_NS 21D0  
                    __end_of___ftge 1B42                      __end_of___wmul 242E  
                     delay_ms@count 0019                          _write_data 2542  
                     __pidataCOMRAM 2470                      __end_of_chkisr 1D6E  
                      ??_Night_Mode 0041            ?_TFT_GreenTab_Initialize 0001  
                        drawtext@bg 003C                      __end_of_strcpy 2382  
                    __end_of_strlen 22DC                 start_initialization 1F48  
                 __size_of_Day_Mode 00CE                     ??_write_command 0011  
                         _Set_EW_LT 21D0                           _OpenUSART 1E72  
                         _Set_NS_LT 2140                 __size_of_fillCircle 0052  
                  __CFG_OSC$INTIO67 000000                   __size_of_Init_ADC 000E  
                __end_of_Night_Mode 1A02                   __size_of_Rcmd2red 003E  
               __size_of_fillScreen 001C                     Wait_N_Seconds@I 00B1  
               __size_of_drawCircle 01AE                            ??_Set_EW 0041  
                          ??_Set_NS 0041                     _Activate_Buzzer 250C  
                  ?_Wait_One_Second 0001                            ??___ftge 0015  
                          ??___wmul 0013                            ??_chkisr 0001  
                       __pdataBANK0 00B5                     setAddrWindow@x0 0015  
                   setAddrWindow@x1 0013                     setAddrWindow@y0 0012  
                   setAddrWindow@y1 0014                            ??_strcpy 0013  
                          ??_strlen 0011                        _PED_EW_Count 00B8  
         __size_of_update_LCD_color 0372           __size_of_update_LCD_count 0186  
                 __size_of___awtoft 003C                   __size_of___ftpack 00C6  
                       __pbssCOMRAM 005B                       ??_PED_Control 0041  
                   ??_setAddrWindow 0015                       __pcstackBANK0 00A7  
                      _PED_NS_Count 00BB                         ??_LCD_Reset 001B  
          __end_of_fillCircleHelper 1224                   __size_of_delay_ms 0052  
        ?_Wait_One_Second_With_Beep 0001                   __size_of_fillRect 004A  
                 __size_of_drawChar 0156                          ?_Set_EW_LT 0001  
                        ?_OpenUSART 000F                   __size_of_drawRect 0066  
                        ?_Set_NS_LT 0001                   __size_of_drawtext 010A  
                 ??_update_LCD_misc 0041                           __pintcode 0008  
   __end_of_TFT_GreenTab_Initialize 2406                       __pmediumconst FDBC  
                          ?___awdiv 000F                            ?___awmod 000F  
                          ?___ftdiv 001B                           __tft_type 006D  
                         _direction 0070                  drawFastVLine@color 0018  
                       ?_write_data 0001                           _drawPixel 2382  
                 __size_of_spiwrite 0014                            ?_init_IO 0001  
                 _Initialize_Screen 001C                      __size_of_Rcmd1 0110  
                    __size_of_Rcmd3 00F2                           _init_UART 24D2  
                ?_Initialize_Screen 0001                            _FLASHING 0064  
 __end_of_Wait_One_Second_With_Beep 24D2                 __end_of_PED_Control 2004  
           __end_of_Activate_Buzzer 251E                            _INT0_ISR 2530  
                          _INT1_ISR 251E                            _INT2_ISR 24A4  
                    ___wmul@product 0013                 ??_Initialize_Screen 0041  
                          _PIE1bits 000F9D                            _PIR1bits 000F9E  
                          _PIR2bits 000FA1                            _EW_Count 0045  
                         fillRect@h 0023                           fillRect@i 002A  
                         fillRect@w 0022                           fillRect@x 0029  
                         fillRect@y 0021                           drawChar@c 002D  
                         drawChar@i 0036                           drawChar@j 0035  
                      ??_fillCircle 0041                           drawChar@x 0034  
                         drawChar@y 002C                          ?_drawPixel 0016  
            __size_of_fillRectangle 00DC                            _NS_Count 0048  
                        _ADCON0bits 000FC2            __end_of_Wait_Half_Second 24A4  
                 ___wmul@multiplier 000F           __end_of_Initialize_Screen 073A  
                      ??_fillScreen 0024                           drawRect@h 0027  
                         drawRect@w 0025                           drawRect@x 0021  
                         drawRect@y 0023                       _FlashingR_Txt 004D  
                     _FlashingS_Txt 004F                        ??_drawCircle 0022  
      __end_of_update_LCD_PED_Count 17BE                           main@nStep 00B3  
                          _SW_EWPED 0069               update_LCD_color@color 00A7  
                          _Day_Mode 17BE                            _SW_NSPED 006C  
         update_LCD_color@direction 00A8                          ?_init_UART 0001  
            __size_of_drawFastHLine 0088                         _INTCON2bits 000FF1  
                       _INTCON3bits 000FF0                           copy_data0 1F74  
                         copy_data1 1F94                           drawtext@i 00AA  
            __size_of_drawFastVLine 0088                           drawtext@x 00A7  
                         drawtext@y 0037                            _Init_ADC 2562  
                 write_command@cmd_ 0011                         ??_Set_EW_LT 0041  
                       ??_OpenUSART 0011                         ??_Set_NS_LT 0041  
                          _Rcmd2red 2260                 __size_of_write_data 0010  
                   OpenUSART@config 0011                  __end_of_fillCircle 20A8  
                          __Hrparam 0000                  __end_of_fillScreen 2470  
             update_LCD_count@count 00AE                            __Lrparam 0000  
                __end_of_drawCircle 0E10                    __size_of___awdiv 0096  
                  __size_of___awmod 0082                    __size_of___ftdiv 00E2  
                          ___awtoft 22DC                            ___ftpack 188C  
                  _update_LCD_color 073A                    _update_LCD_count 0E10  
                  __size_of_init_IO 002A                         _PED_Control 1FAA  
                          _delay_ms 2004                            __ptext10 23DC  
                          __ptext11 143E                            __ptext20 1D6E  
                          __ptext12 2260                            __ptext21 0AAC  
                          __ptext13 1224                            __ptext30 21D0  
                          __ptext22 242E                            __ptext14 24FA  
                          __ptext31 2218                            __ptext23 1AAC  
                          __ptext15 2004                            __ptext40 0F96  
                          __ptext32 073A                            __ptext24 1530  
                          __ptext16 2562                            __ptext41 20F6  
                          __ptext33 2056                            __ptext25 22DC  
                          __ptext17 17BE                            __ptext50 1B42  
                          __ptext42 1C60                            __ptext34 10EC  
                          __ptext26 188C                            __ptext18 2318  
                          __ptext51 24BC                            __ptext43 2382  
                          __ptext35 0C62                            __ptext27 2350  
                          __ptext19 0E10                            __ptext52 248A  
                          __ptext44 20A8                            __ptext36 1FAA  
                          __ptext28 2140                            __ptext53 257A  
                          __ptext45 2542                            __ptext37 16EE  
                          __ptext29 2188                            __ptext54 250C  
                          __ptext46 2552                            __ptext38 1334  
                          __ptext47 24E6                            __ptext39 229E  
                          __ptext56 24A4                            __ptext48 2406  
                          __ptext57 251E                            __ptext49 1DF0  
                          __ptext58 2530                            _fillRect 20F6  
                          _drawChar 0F96                            _drawRect 1EE2  
  __size_of_TFT_GreenTab_Initialize 002A                    _FLASHING_REQUEST 0065  
                          _colstart 006E                            _drawtext 1334  
                        strcpy@from 0011                       _fillRectangle 1612  
                  ?_Activate_Buzzer 0001                       __size_of_main 00AA  
                   fillRectangle@hi 001F                     fillRectangle@lo 0020  
                     _drawFastHLine 1BD8                      Set_EW_LT@color 00AA  
                     _drawFastVLine 1C60                            _spiwrite 24E6  
                       ??_drawPixel 0019                            _rowstart 0071  
                fillCircleHelper@x0 0021                  fillCircleHelper@y0 0023  
        __size_of_Initialize_Screen 071E                          _INTCONbits 000FF2  
                    OpenUSART@spbrg 000F                         ??_init_UART 0012  
                        _EWLT_Count 0042                   ?_fillCircleHelper 0021  
                         spiwrite@x 000F         ??_Wait_One_Second_With_Beep 000F  
                          intlevel2 0000                     _update_LCD_misc 0AAC  
                    ?_fillRectangle 0016                  ??_fillCircleHelper 002D  
             __end_of_write_command 2562                     fillScreen@color 0022  
              update_LCD_misc@nStep 00AE                _update_LCD_PED_Count 16EE  
           __size_of_Wait_N_Seconds 0038                        fillCircle@x0 0039  
                      fillCircle@y0 003B                      ?_drawFastHLine 0016  
                    fillRectangle@h 0018                      fillRectangle@w 0017  
                    fillRectangle@x 0021                      fillRectangle@y 0016  
                    ?_drawFastVLine 0016                   fillCircleHelper@f 0033  
                 fillCircleHelper@r 0025                   fillCircleHelper@x 0035  
                 fillCircleHelper@y 0037                        ??_write_data 0011  
                     fillRect@color 0024            __size_of_Wait_One_Second 0082  
                          strcpy@cp 0013                            strlen@cp 0013  
                          strcpy@to 000F                          _NSLT_Count 00B5  
                       fillCircle@r 003D               __end_of_setAddrWindow 20F6  
                fillRectangle@color 0019                       drawChar@color 002E  
                __end_of_write_data 2552                        drawChar@line 0033  
                    Set_NS_LT@color 00AA                       ?_get_full_ADC 000F  
                      drawChar@size 0032               ?_update_LCD_PED_Count 00AE  
