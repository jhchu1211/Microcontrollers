

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Wed Nov 10 11:13:49 2021

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1
    71                           	psect	text55,global,reloc=2,class=CODE,delta=1
    72                           	psect	text56,global,reloc=2,class=CODE,delta=1
    73                           	psect	text57,global,reloc=2,class=CODE,delta=1
    74                           	psect	text58,global,reloc=2,class=CODE,delta=1
    75                           	psect	text59,global,reloc=2,class=CODE,delta=1
    76                           	psect	text60,global,reloc=2,class=CODE,delta=1
    77                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    78                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    79                           	psect	text62,global,reloc=2,class=CODE,delta=1
    80                           	psect	text63,global,reloc=2,class=CODE,delta=1
    81                           	psect	text64,global,reloc=2,class=CODE,delta=1
    82                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    83                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    84  0000                     
    85                           	psect	idataCOMRAM
    86  0000'                    __pidataCOMRAM:
    87                           	opt stack 0
    88                           
    89                           ;initializer for _setup_fan_temp
    90  0000' 4B                 	db	75
    91                           
    92                           ;initializer for _tempSecond
    93  0001' FF                 	db	255
    94                           
    95                           ;initializer for _wrap
    96  0002' 01                 	db	1
    97                           
    98                           	psect	idataBANK0
    99  0000'                    __pidataBANK0:
   100                           	opt stack 0
   101                           
   102                           ;initializer for _array1
   103  0000' A2                 	db	162
   104  0001' 62                 	db	98
   105  0002' E2                 	db	226
   106  0003' 22                 	db	34
   107  0004' 02                 	db	2
   108  0005' C2                 	db	194
   109  0006' E0                 	db	224
   110  0007' A8                 	db	168
   111  0008' 90                 	db	144
   112  0009' 68                 	db	104
   113  000A' 98                 	db	152
   114  000B' B0                 	db	176
   115  000C' 30                 	db	48
   116  000D' 18                 	db	24
   117  000E' 7A                 	db	122
   118  000F' 10                 	db	16
   119  0010' 38                 	db	56
   120  0011' 5A                 	db	90
   121  0012' 42                 	db	66
   122  0013' 4A                 	db	74
   123  0014' 52                 	db	82
   124                           
   125                           ;initializer for _alarm_time
   126  0015' 30                 	db	48
   127  0016' 30                 	db	48
   128  0017' 3A                 	db	58
   129  0018' 30                 	db	48
   130  0019' 30                 	db	48
   131  001A' 3A                 	db	58
   132  001B' 30                 	db	48
   133  001C' 30                 	db	48
   134  001D' 00                 	db	0
   135                           
   136                           ;initializer for _setup_alarm_time
   137  001E' 30                 	db	48
   138  001F' 30                 	db	48
   139  0020' 3A                 	db	58
   140  0021' 30                 	db	48
   141  0022' 30                 	db	48
   142  0023' 3A                 	db	58
   143  0024' 30                 	db	48
   144  0025' 30                 	db	48
   145  0026' 00                 	db	0
   146                           
   147                           ;initializer for _setup_date
   148  0027' 30                 	db	48
   149  0028' 31                 	db	49
   150  0029' 2F                 	db	47
   151  002A' 30                 	db	48
   152  002B' 31                 	db	49
   153  002C' 2F                 	db	47
   154  002D' 30                 	db	48
   155  002E' 30                 	db	48
   156  002F' 00                 	db	0
   157                           
   158                           ;initializer for _setup_time
   159  0030' 30                 	db	48
   160  0031' 30                 	db	48
   161  0032' 3A                 	db	58
   162  0033' 30                 	db	48
   163  0034' 30                 	db	48
   164  0035' 3A                 	db	58
   165  0036' 30                 	db	48
   166  0037' 30                 	db	48
   167  0038' 00                 	db	0
   168                           
   169                           ;initializer for _setup_fan_text
   170  0039' 30                 	db	48
   171  003A' 37                 	db	55
   172  003B' 35                 	db	53
   173  003C' 46                 	db	70
   174  003D' 00                 	db	0
   175                           
   176                           ;initializer for _Alarm_SW_Txt
   177  003E' 4F                 	db	79
   178  003F' 46                 	db	70
   179  0040' 46                 	db	70
   180  0041' 00                 	db	0
   181                           
   182                           ;initializer for _RTC_ALARM_Txt
   183  0042' 30                 	db	48
   184  0043' 00                 	db	0
   185                           
   186                           ;initializer for _date
   187  0044' 30                 	db	48
   188  0045' 30                 	db	48
   189  0046' 2F                 	db	47
   190  0047' 30                 	db	48
   191  0048' 30                 	db	48
   192  0049' 2F                 	db	47
   193  004A' 30                 	db	48
   194  004B' 30                 	db	48
   195  004C' 00                 	db	0
   196                           
   197                           ;initializer for _time
   198  004D' 30                 	db	48
   199  004E' 30                 	db	48
   200  004F' 3A                 	db	58
   201  0050' 30                 	db	48
   202  0051' 30                 	db	48
   203  0052' 3A                 	db	58
   204  0053' 30                 	db	48
   205  0054' 30                 	db	48
   206  0055' 00                 	db	0
   207                           
   208                           ;initializer for _RPM_Txt
   209  0056' 30                 	db	48
   210  0057' 30                 	db	48
   211  0058' 30                 	db	48
   212  0059' 30                 	db	48
   213  005A' 00                 	db	0
   214                           
   215                           ;initializer for _DC_Txt
   216  005B' 30                 	db	48
   217  005C' 30                 	db	48
   218  005D' 30                 	db	48
   219  005E' 00                 	db	0
   220                           
   221                           ;initializer for _Fan_SW_Txt
   222  005F' 4F                 	db	79
   223  0060' 46                 	db	70
   224  0061' 46                 	db	70
   225  0062' 00                 	db	0
   226                           
   227                           ;initializer for _tempC
   228  0063' 2B                 	db	43
   229  0064' 32                 	db	50
   230  0065' 35                 	db	53
   231  0066' 00                 	db	0
   232                           
   233                           ;initializer for _tempF
   234  0067' 2B                 	db	43
   235  0068' 37                 	db	55
   236  0069' 37                 	db	55
   237  006A' 00                 	db	0
   238                           
   239                           	psect	mediumconst
   240  0000'                    __pmediumconst:
   241                           	opt stack 0
   242  0000' 00                 	db	0
   243  0001'                    _font:
   244                           	opt stack 0
   245  0001' 00                 	db	0
   246  0002' 00                 	db	0
   247  0003' 00                 	db	0
   248  0004' 00                 	db	0
   249  0005' 00                 	db	0
   250  0006' 00                 	db	0
   251  0007' 00                 	db	0
   252  0008' 5F                 	db	95
   253  0009' 00                 	db	0
   254  000A' 00                 	db	0
   255  000B' 00                 	db	0
   256  000C' 07                 	db	7
   257  000D' 00                 	db	0
   258  000E' 07                 	db	7
   259  000F' 00                 	db	0
   260  0010' 14                 	db	20
   261  0011' 7F                 	db	127
   262  0012' 14                 	db	20
   263  0013' 7F                 	db	127
   264  0014' 14                 	db	20
   265  0015' 24                 	db	36
   266  0016' 2A                 	db	42
   267  0017' 7F                 	db	127
   268  0018' 2A                 	db	42
   269  0019' 12                 	db	18
   270  001A' 23                 	db	35
   271  001B' 13                 	db	19
   272  001C' 08                 	db	8
   273  001D' 64                 	db	100
   274  001E' 62                 	db	98
   275  001F' 36                 	db	54
   276  0020' 49                 	db	73
   277  0021' 56                 	db	86
   278  0022' 20                 	db	32
   279  0023' 50                 	db	80
   280  0024' 00                 	db	0
   281  0025' 08                 	db	8
   282  0026' 07                 	db	7
   283  0027' 03                 	db	3
   284  0028' 00                 	db	0
   285  0029' 00                 	db	0
   286  002A' 1C                 	db	28
   287  002B' 22                 	db	34
   288  002C' 41                 	db	65
   289  002D' 00                 	db	0
   290  002E' 00                 	db	0
   291  002F' 41                 	db	65
   292  0030' 22                 	db	34
   293  0031' 1C                 	db	28
   294  0032' 00                 	db	0
   295  0033' 2A                 	db	42
   296  0034' 1C                 	db	28
   297  0035' 7F                 	db	127
   298  0036' 1C                 	db	28
   299  0037' 2A                 	db	42
   300  0038' 08                 	db	8
   301  0039' 08                 	db	8
   302  003A' 3E                 	db	62
   303  003B' 08                 	db	8
   304  003C' 08                 	db	8
   305  003D' 00                 	db	0
   306  003E' 80                 	db	128
   307  003F' 70                 	db	112
   308  0040' 30                 	db	48
   309  0041' 00                 	db	0
   310  0042' 08                 	db	8
   311  0043' 08                 	db	8
   312  0044' 08                 	db	8
   313  0045' 08                 	db	8
   314  0046' 08                 	db	8
   315  0047' 00                 	db	0
   316  0048' 00                 	db	0
   317  0049' 60                 	db	96
   318  004A' 60                 	db	96
   319  004B' 00                 	db	0
   320  004C' 20                 	db	32
   321  004D' 10                 	db	16
   322  004E' 08                 	db	8
   323  004F' 04                 	db	4
   324  0050' 02                 	db	2
   325  0051' 3E                 	db	62
   326  0052' 51                 	db	81
   327  0053' 49                 	db	73
   328  0054' 45                 	db	69
   329  0055' 3E                 	db	62
   330  0056' 00                 	db	0
   331  0057' 42                 	db	66
   332  0058' 7F                 	db	127
   333  0059' 40                 	db	64
   334  005A' 00                 	db	0
   335  005B' 72                 	db	114
   336  005C' 49                 	db	73
   337  005D' 49                 	db	73
   338  005E' 49                 	db	73
   339  005F' 46                 	db	70
   340  0060' 21                 	db	33
   341  0061' 41                 	db	65
   342  0062' 49                 	db	73
   343  0063' 4D                 	db	77
   344  0064' 33                 	db	51
   345  0065' 18                 	db	24
   346  0066' 14                 	db	20
   347  0067' 12                 	db	18
   348  0068' 7F                 	db	127
   349  0069' 10                 	db	16
   350  006A' 27                 	db	39
   351  006B' 45                 	db	69
   352  006C' 45                 	db	69
   353  006D' 45                 	db	69
   354  006E' 39                 	db	57
   355  006F' 3C                 	db	60
   356  0070' 4A                 	db	74
   357  0071' 49                 	db	73
   358  0072' 49                 	db	73
   359  0073' 31                 	db	49
   360  0074' 41                 	db	65
   361  0075' 21                 	db	33
   362  0076' 11                 	db	17
   363  0077' 09                 	db	9
   364  0078' 07                 	db	7
   365  0079' 36                 	db	54
   366  007A' 49                 	db	73
   367  007B' 49                 	db	73
   368  007C' 49                 	db	73
   369  007D' 36                 	db	54
   370  007E' 46                 	db	70
   371  007F' 49                 	db	73
   372  0080' 49                 	db	73
   373  0081' 29                 	db	41
   374  0082' 1E                 	db	30
   375  0083' 00                 	db	0
   376  0084' 00                 	db	0
   377  0085' 14                 	db	20
   378  0086' 00                 	db	0
   379  0087' 00                 	db	0
   380  0088' 00                 	db	0
   381  0089' 40                 	db	64
   382  008A' 34                 	db	52
   383  008B' 00                 	db	0
   384  008C' 00                 	db	0
   385  008D' 00                 	db	0
   386  008E' 08                 	db	8
   387  008F' 14                 	db	20
   388  0090' 22                 	db	34
   389  0091' 41                 	db	65
   390  0092' 14                 	db	20
   391  0093' 14                 	db	20
   392  0094' 14                 	db	20
   393  0095' 14                 	db	20
   394  0096' 14                 	db	20
   395  0097' 00                 	db	0
   396  0098' 41                 	db	65
   397  0099' 22                 	db	34
   398  009A' 14                 	db	20
   399  009B' 08                 	db	8
   400  009C' 02                 	db	2
   401  009D' 01                 	db	1
   402  009E' 59                 	db	89
   403  009F' 09                 	db	9
   404  00A0' 06                 	db	6
   405  00A1' 3E                 	db	62
   406  00A2' 41                 	db	65
   407  00A3' 5D                 	db	93
   408  00A4' 59                 	db	89
   409  00A5' 4E                 	db	78
   410  00A6' 7C                 	db	124
   411  00A7' 12                 	db	18
   412  00A8' 11                 	db	17
   413  00A9' 12                 	db	18
   414  00AA' 7C                 	db	124
   415  00AB' 7F                 	db	127
   416  00AC' 49                 	db	73
   417  00AD' 49                 	db	73
   418  00AE' 49                 	db	73
   419  00AF' 36                 	db	54
   420  00B0' 3E                 	db	62
   421  00B1' 41                 	db	65
   422  00B2' 41                 	db	65
   423  00B3' 41                 	db	65
   424  00B4' 22                 	db	34
   425  00B5' 7F                 	db	127
   426  00B6' 41                 	db	65
   427  00B7' 41                 	db	65
   428  00B8' 41                 	db	65
   429  00B9' 3E                 	db	62
   430  00BA' 7F                 	db	127
   431  00BB' 49                 	db	73
   432  00BC' 49                 	db	73
   433  00BD' 49                 	db	73
   434  00BE' 41                 	db	65
   435  00BF' 7F                 	db	127
   436  00C0' 09                 	db	9
   437  00C1' 09                 	db	9
   438  00C2' 09                 	db	9
   439  00C3' 01                 	db	1
   440  00C4' 3E                 	db	62
   441  00C5' 41                 	db	65
   442  00C6' 41                 	db	65
   443  00C7' 51                 	db	81
   444  00C8' 73                 	db	115
   445  00C9' 7F                 	db	127
   446  00CA' 08                 	db	8
   447  00CB' 08                 	db	8
   448  00CC' 08                 	db	8
   449  00CD' 7F                 	db	127
   450  00CE' 00                 	db	0
   451  00CF' 41                 	db	65
   452  00D0' 7F                 	db	127
   453  00D1' 41                 	db	65
   454  00D2' 00                 	db	0
   455  00D3' 20                 	db	32
   456  00D4' 40                 	db	64
   457  00D5' 41                 	db	65
   458  00D6' 3F                 	db	63
   459  00D7' 01                 	db	1
   460  00D8' 7F                 	db	127
   461  00D9' 08                 	db	8
   462  00DA' 14                 	db	20
   463  00DB' 22                 	db	34
   464  00DC' 41                 	db	65
   465  00DD' 7F                 	db	127
   466  00DE' 40                 	db	64
   467  00DF' 40                 	db	64
   468  00E0' 40                 	db	64
   469  00E1' 40                 	db	64
   470  00E2' 7F                 	db	127
   471  00E3' 02                 	db	2
   472  00E4' 1C                 	db	28
   473  00E5' 02                 	db	2
   474  00E6' 7F                 	db	127
   475  00E7' 7F                 	db	127
   476  00E8' 04                 	db	4
   477  00E9' 08                 	db	8
   478  00EA' 10                 	db	16
   479  00EB' 7F                 	db	127
   480  00EC' 3E                 	db	62
   481  00ED' 41                 	db	65
   482  00EE' 41                 	db	65
   483  00EF' 41                 	db	65
   484  00F0' 3E                 	db	62
   485  00F1' 7F                 	db	127
   486  00F2' 09                 	db	9
   487  00F3' 09                 	db	9
   488  00F4' 09                 	db	9
   489  00F5' 06                 	db	6
   490  00F6' 3E                 	db	62
   491  00F7' 41                 	db	65
   492  00F8' 51                 	db	81
   493  00F9' 21                 	db	33
   494  00FA' 5E                 	db	94
   495  00FB' 7F                 	db	127
   496  00FC' 09                 	db	9
   497  00FD' 19                 	db	25
   498  00FE' 29                 	db	41
   499  00FF' 46                 	db	70
   500  0100'                    __end_of_font:
   501                           	opt stack 0
   502  0100'                    _font2:
   503                           	opt stack 0
   504  0100' 26                 	db	38
   505  0101' 49                 	db	73
   506  0102' 49                 	db	73
   507  0103' 49                 	db	73
   508  0104' 32                 	db	50
   509  0105' 03                 	db	3
   510  0106' 01                 	db	1
   511  0107' 7F                 	db	127
   512  0108' 01                 	db	1
   513  0109' 03                 	db	3
   514  010A' 3F                 	db	63
   515  010B' 40                 	db	64
   516  010C' 40                 	db	64
   517  010D' 40                 	db	64
   518  010E' 3F                 	db	63
   519  010F' 1F                 	db	31
   520  0110' 20                 	db	32
   521  0111' 40                 	db	64
   522  0112' 20                 	db	32
   523  0113' 1F                 	db	31
   524  0114' 3F                 	db	63
   525  0115' 40                 	db	64
   526  0116' 38                 	db	56
   527  0117' 40                 	db	64
   528  0118' 3F                 	db	63
   529  0119' 63                 	db	99
   530  011A' 14                 	db	20
   531  011B' 08                 	db	8
   532  011C' 14                 	db	20
   533  011D' 63                 	db	99
   534  011E' 03                 	db	3
   535  011F' 04                 	db	4
   536  0120' 78                 	db	120
   537  0121' 04                 	db	4
   538  0122' 03                 	db	3
   539  0123' 61                 	db	97
   540  0124' 59                 	db	89
   541  0125' 49                 	db	73
   542  0126' 4D                 	db	77
   543  0127' 43                 	db	67
   544  0128' 00                 	db	0
   545  0129' 7F                 	db	127
   546  012A' 41                 	db	65
   547  012B' 41                 	db	65
   548  012C' 41                 	db	65
   549  012D' 02                 	db	2
   550  012E' 04                 	db	4
   551  012F' 08                 	db	8
   552  0130' 10                 	db	16
   553  0131' 20                 	db	32
   554  0132' 00                 	db	0
   555  0133' 41                 	db	65
   556  0134' 41                 	db	65
   557  0135' 41                 	db	65
   558  0136' 7F                 	db	127
   559  0137' 04                 	db	4
   560  0138' 02                 	db	2
   561  0139' 01                 	db	1
   562  013A' 02                 	db	2
   563  013B' 04                 	db	4
   564  013C' 40                 	db	64
   565  013D' 40                 	db	64
   566  013E' 40                 	db	64
   567  013F' 40                 	db	64
   568  0140' 40                 	db	64
   569  0141' 00                 	db	0
   570  0142' 03                 	db	3
   571  0143' 07                 	db	7
   572  0144' 08                 	db	8
   573  0145' 00                 	db	0
   574  0146' 20                 	db	32
   575  0147' 54                 	db	84
   576  0148' 54                 	db	84
   577  0149' 78                 	db	120
   578  014A' 40                 	db	64
   579  014B' 7F                 	db	127
   580  014C' 28                 	db	40
   581  014D' 44                 	db	68
   582  014E' 44                 	db	68
   583  014F' 38                 	db	56
   584  0150' 38                 	db	56
   585  0151' 44                 	db	68
   586  0152' 44                 	db	68
   587  0153' 44                 	db	68
   588  0154' 28                 	db	40
   589  0155' 38                 	db	56
   590  0156' 44                 	db	68
   591  0157' 44                 	db	68
   592  0158' 28                 	db	40
   593  0159' 7F                 	db	127
   594  015A' 38                 	db	56
   595  015B' 54                 	db	84
   596  015C' 54                 	db	84
   597  015D' 54                 	db	84
   598  015E' 18                 	db	24
   599  015F' 00                 	db	0
   600  0160' 08                 	db	8
   601  0161' 7E                 	db	126
   602  0162' 09                 	db	9
   603  0163' 02                 	db	2
   604  0164' 18                 	db	24
   605  0165' A4                 	db	164
   606  0166' A4                 	db	164
   607  0167' 9C                 	db	156
   608  0168' 78                 	db	120
   609  0169' 7F                 	db	127
   610  016A' 08                 	db	8
   611  016B' 04                 	db	4
   612  016C' 04                 	db	4
   613  016D' 78                 	db	120
   614  016E' 00                 	db	0
   615  016F' 44                 	db	68
   616  0170' 7D                 	db	125
   617  0171' 40                 	db	64
   618  0172' 00                 	db	0
   619  0173' 20                 	db	32
   620  0174' 40                 	db	64
   621  0175' 40                 	db	64
   622  0176' 3D                 	db	61
   623  0177' 00                 	db	0
   624  0178' 7F                 	db	127
   625  0179' 10                 	db	16
   626  017A' 28                 	db	40
   627  017B' 44                 	db	68
   628  017C' 00                 	db	0
   629  017D' 00                 	db	0
   630  017E' 41                 	db	65
   631  017F' 7F                 	db	127
   632  0180' 40                 	db	64
   633  0181' 00                 	db	0
   634  0182' 7C                 	db	124
   635  0183' 04                 	db	4
   636  0184' 78                 	db	120
   637  0185' 04                 	db	4
   638  0186' 78                 	db	120
   639  0187' 7C                 	db	124
   640  0188' 08                 	db	8
   641  0189' 04                 	db	4
   642  018A' 04                 	db	4
   643  018B' 78                 	db	120
   644  018C' 38                 	db	56
   645  018D' 44                 	db	68
   646  018E' 44                 	db	68
   647  018F' 44                 	db	68
   648  0190' 38                 	db	56
   649  0191' FC                 	db	252
   650  0192' 18                 	db	24
   651  0193' 24                 	db	36
   652  0194' 24                 	db	36
   653  0195' 18                 	db	24
   654  0196' 18                 	db	24
   655  0197' 24                 	db	36
   656  0198' 24                 	db	36
   657  0199' 18                 	db	24
   658  019A' FC                 	db	252
   659  019B' 7C                 	db	124
   660  019C' 08                 	db	8
   661  019D' 04                 	db	4
   662  019E' 04                 	db	4
   663  019F' 08                 	db	8
   664  01A0' 48                 	db	72
   665  01A1' 54                 	db	84
   666  01A2' 54                 	db	84
   667  01A3' 54                 	db	84
   668  01A4' 24                 	db	36
   669  01A5' 04                 	db	4
   670  01A6' 04                 	db	4
   671  01A7' 3F                 	db	63
   672  01A8' 44                 	db	68
   673  01A9' 24                 	db	36
   674  01AA' 3C                 	db	60
   675  01AB' 40                 	db	64
   676  01AC' 40                 	db	64
   677  01AD' 20                 	db	32
   678  01AE' 7C                 	db	124
   679  01AF' 1C                 	db	28
   680  01B0' 20                 	db	32
   681  01B1' 40                 	db	64
   682  01B2' 20                 	db	32
   683  01B3' 1C                 	db	28
   684  01B4' 3C                 	db	60
   685  01B5' 40                 	db	64
   686  01B6' 30                 	db	48
   687  01B7' 40                 	db	64
   688  01B8' 3C                 	db	60
   689  01B9' 44                 	db	68
   690  01BA' 28                 	db	40
   691  01BB' 10                 	db	16
   692  01BC' 28                 	db	40
   693  01BD' 44                 	db	68
   694  01BE' 4C                 	db	76
   695  01BF' 90                 	db	144
   696  01C0' 90                 	db	144
   697  01C1' 90                 	db	144
   698  01C2' 7C                 	db	124
   699  01C3' 44                 	db	68
   700  01C4' 64                 	db	100
   701  01C5' 54                 	db	84
   702  01C6' 4C                 	db	76
   703  01C7' 44                 	db	68
   704  01C8' 00                 	db	0
   705  01C9' 08                 	db	8
   706  01CA' 36                 	db	54
   707  01CB' 41                 	db	65
   708  01CC' 00                 	db	0
   709  01CD' 00                 	db	0
   710  01CE' 00                 	db	0
   711  01CF' 77                 	db	119
   712  01D0' 00                 	db	0
   713  01D1' 00                 	db	0
   714  01D2' 00                 	db	0
   715  01D3' 41                 	db	65
   716  01D4' 36                 	db	54
   717  01D5' 08                 	db	8
   718  01D6' 00                 	db	0
   719  01D7' 02                 	db	2
   720  01D8' 01                 	db	1
   721  01D9' 02                 	db	2
   722  01DA' 04                 	db	4
   723  01DB' 02                 	db	2
   724  01DC'                    __end_of_font2:
   725                           	opt stack 0
   726  01DC'                    _dpowers:
   727                           	opt stack 0
   728  01DC' 0001               	dw	1
   729  01DE' 000A               	dw	10
   730  01E0' 0064               	dw	100
   731  01E2' 03E8               	dw	1000
   732  01E4' 2710               	dw	10000
   733  01E6'                    __end_of_dpowers:
   734                           	opt stack 0
   735  01E6'                    _hexpowers:
   736                           	opt stack 0
   737  01E6' 0001               	dw	1
   738  01E8' 0010               	dw	16
   739  01EA' 0100               	dw	256
   740  01EC' 1000               	dw	4096
   741  01EE'                    __end_of_hexpowers:
   742                           	opt stack 0
   743  0000                     _ADCON1	set	4033
   744  0000                     _CCP1CON	set	4029
   745  0000                     _CCPR1L	set	4030
   746  0000                     _INTCON2bits	set	4081
   747  0000                     _INTCONbits	set	4082
   748  0000                     _OSCCON	set	4051
   749  0000                     _PIE1bits	set	3997
   750  0000                     _PIR1bits	set	3998
   751  0000                     _PORTAbits	set	3968
   752  0000                     _PORTBbits	set	3969
   753  0000                     _PORTDbits	set	3971
   754  0000                     _PORTEbits	set	3972
   755  0000                     _PR2	set	4043
   756  0000                     _RCSTA	set	4011
   757  0000                     _RCSTAbits	set	4011
   758  0000                     _SPBRG	set	4015
   759  0000                     _SPBRGH	set	4016
   760  0000                     _SSPBUF	set	4041
   761  0000                     _SSPCON1	set	4038
   762  0000                     _SSPSTAT	set	4039
   763  0000                     _SSPSTATbits	set	4039
   764  0000                     _T0CON	set	4053
   765  0000                     _T0CONbits	set	4053
   766  0000                     _T1CON	set	4045
   767  0000                     _T1CONbits	set	4045
   768  0000                     _T2CON	set	4042
   769  0000                     _T3CON	set	4017
   770  0000                     _TMR0H	set	4055
   771  0000                     _TMR0L	set	4054
   772  0000                     _TMR1H	set	4047
   773  0000                     _TMR1L	set	4046
   774  0000                     _TMR3L	set	4018
   775  0000                     _TRISA	set	3986
   776  0000                     _TRISB	set	3987
   777  0000                     _TRISBbits	set	3987
   778  0000                     _TRISC	set	3988
   779  0000                     _TRISCbits	set	3988
   780  0000                     _TRISD	set	3989
   781  0000                     _TXREG	set	4013
   782  0000                     _TXSTA	set	4012
   783  0000                     _TXSTAbits	set	4012
   784  0000                     _RBPU	set	32655
   785  0000                     _TRMT	set	32097
   786  01EE'                    STR_12:
   787  01EE' 25                 	db	37
   788  01EF' 30                 	db	48	;'0'
   789  01F0' 32                 	db	50	;'2'
   790  01F1' 78                 	db	120	;'x'
   791  01F2' 3A                 	db	58	;':'
   792  01F3' 25                 	db	37
   793  01F4' 30                 	db	48	;'0'
   794  01F5' 32                 	db	50	;'2'
   795  01F6' 78                 	db	120	;'x'
   796  01F7' 3A                 	db	58	;':'
   797  01F8' 25                 	db	37
   798  01F9' 30                 	db	48	;'0'
   799  01FA' 32                 	db	50	;'2'
   800  01FB' 78                 	db	120	;'x'
   801  01FC' 20                 	db	32
   802  01FD' 25                 	db	37
   803  01FE' 30                 	db	48	;'0'
   804  01FF' 32                 	db	50	;'2'
   805  0200' 78                 	db	120	;'x'
   806  0201' 2F                 	db	47
   807  0202' 25                 	db	37
   808  0203' 30                 	db	48	;'0'
   809  0204' 32                 	db	50	;'2'
   810  0205' 78                 	db	120	;'x'
   811  0206' 2F                 	db	47
   812  0207' 25                 	db	37
   813  0208' 30                 	db	48	;'0'
   814  0209' 32                 	db	50	;'2'
   815  020A' 78                 	db	120	;'x'
   816  020B' 00                 	db	0
   817  020C'                    STR_16:
   818  020C' 43                 	db	67	;'C'
   819  020D' 61                 	db	97	;'a'
   820  020E' 6E                 	db	110	;'n'
   821  020F' 6E                 	db	110	;'n'
   822  0210' 6F                 	db	111	;'o'
   823  0211' 74                 	db	116	;'t'
   824  0212' 20                 	db	32
   825  0213' 66                 	db	102	;'f'
   826  0214' 69                 	db	105	;'i'
   827  0215' 6E                 	db	110	;'n'
   828  0216' 64                 	db	100	;'d'
   829  0217' 20                 	db	32
   830  0218' 62                 	db	98	;'b'
   831  0219' 75                 	db	117	;'u'
   832  021A' 74                 	db	116	;'t'
   833  021B' 74                 	db	116	;'t'
   834  021C' 6F                 	db	111	;'o'
   835  021D' 6E                 	db	110	;'n'
   836  021E' 20                 	db	32
   837  021F' 0D                 	db	13
   838  0220' 0A                 	db	10
   839  0221' 00                 	db	0
   840  0222'                    STR_1:
   841  0222' 45                 	db	69	;'E'
   842  0223' 43                 	db	67	;'C'
   843  0224' 45                 	db	69	;'E'
   844  0225' 33                 	db	51	;'3'
   845  0226' 33                 	db	51	;'3'
   846  0227' 30                 	db	48	;'0'
   847  0228' 31                 	db	49	;'1'
   848  0229' 4C                 	db	76	;'L'
   849  022A' 20                 	db	32
   850  022B' 53                 	db	83	;'S'
   851  022C' 70                 	db	112	;'p'
   852  022D' 72                 	db	114	;'r'
   853  022E' 69                 	db	105	;'i'
   854  022F' 6E                 	db	110	;'n'
   855  0230' 67                 	db	103	;'g'
   856  0231' 20                 	db	32
   857  0232' 32                 	db	50	;'2'
   858  0233' 31                 	db	49	;'1'
   859  0234' 2D                 	db	45
   860  0235' 53                 	db	83	;'S'
   861  0236' 31                 	db	49	;'1'
   862  0237' 00                 	db	0
   863  0238'                    STR_13:
   864  0238' 20                 	db	32
   865  0239' 54                 	db	84	;'T'
   866  023A' 65                 	db	101	;'e'
   867  023B' 6D                 	db	109	;'m'
   868  023C' 70                 	db	112	;'p'
   869  023D' 20                 	db	32
   870  023E' 3D                 	db	61	;'='
   871  023F' 20                 	db	32
   872  0240' 25                 	db	37
   873  0241' 64                 	db	100	;'d'
   874  0242' 20                 	db	32
   875  0243' 43                 	db	67	;'C'
   876  0244' 20                 	db	32
   877  0245' 3D                 	db	61	;'='
   878  0246' 20                 	db	32
   879  0247' 25                 	db	37
   880  0248' 64                 	db	100	;'d'
   881  0249' 20                 	db	32
   882  024A' 46                 	db	70	;'F'
   883  024B' 20                 	db	32
   884  024C' 00                 	db	0
   885  024D'                    STR_14:
   886  024D' 52                 	db	82	;'R'
   887  024E' 50                 	db	80	;'P'
   888  024F' 4D                 	db	77	;'M'
   889  0250' 20                 	db	32
   890  0251' 3D                 	db	61	;'='
   891  0252' 20                 	db	32
   892  0253' 25                 	db	37
   893  0254' 64                 	db	100	;'d'
   894  0255' 20                 	db	32
   895  0256' 20                 	db	32
   896  0257' 64                 	db	100	;'d'
   897  0258' 63                 	db	99	;'c'
   898  0259' 20                 	db	32
   899  025A' 3D                 	db	61	;'='
   900  025B' 20                 	db	32
   901  025C' 25                 	db	37
   902  025D' 64                 	db	100	;'d'
   903  025E' 0D                 	db	13
   904  025F' 0A                 	db	10
   905  0260' 00                 	db	0
   906  0261'                    STR_18:
   907  0261' 30                 	db	48	;'0'
   908  0262' 31                 	db	49	;'1'
   909  0263' 32                 	db	50	;'2'
   910  0264' 33                 	db	51	;'3'
   911  0265' 34                 	db	52	;'4'
   912  0266' 35                 	db	53	;'5'
   913  0267' 36                 	db	54	;'6'
   914  0268' 37                 	db	55	;'7'
   915  0269' 38                 	db	56	;'8'
   916  026A' 39                 	db	57	;'9'
   917  026B' 61                 	db	97	;'a'
   918  026C' 62                 	db	98	;'b'
   919  026D' 63                 	db	99	;'c'
   920  026E' 64                 	db	100	;'d'
   921  026F' 65                 	db	101	;'e'
   922  0270' 66                 	db	102	;'f'
   923  0271' 00                 	db	0
   924  0272'                    STR_15:
   925  0272' 4E                 	db	78	;'N'
   926  0273' 45                 	db	69	;'E'
   927  0274' 43                 	db	67	;'C'
   928  0275' 5F                 	db	95	;'_'
   929  0276' 43                 	db	67	;'C'
   930  0277' 6F                 	db	111	;'o'
   931  0278' 64                 	db	100	;'d'
   932  0279' 65                 	db	101	;'e'
   933  027A' 20                 	db	32
   934  027B' 3D                 	db	61	;'='
   935  027C' 20                 	db	32
   936  027D' 25                 	db	37
   937  027E' 78                 	db	120	;'x'
   938  027F' 0D                 	db	13
   939  0280' 0A                 	db	10
   940  0281' 00                 	db	0
   941  0282'                    STR_17:
   942  0282' 62                 	db	98	;'b'
   943  0283' 75                 	db	117	;'u'
   944  0284' 74                 	db	116	;'t'
   945  0285' 74                 	db	116	;'t'
   946  0286' 6F                 	db	111	;'o'
   947  0287' 6E                 	db	110	;'n'
   948  0288' 20                 	db	32
   949  0289' 3D                 	db	61	;'='
   950  028A' 20                 	db	32
   951  028B' 25                 	db	37
   952  028C' 64                 	db	100	;'d'
   953  028D' 20                 	db	32
   954  028E' 0D                 	db	13
   955  028F' 0A                 	db	10
   956  0290' 00                 	db	0
   957  0291'                    STR_2:
   958  0291' 54                 	db	84	;'T'
   959  0292' 65                 	db	101	;'e'
   960  0293' 6D                 	db	109	;'m'
   961  0294' 70                 	db	112	;'p'
   962  0295' 65                 	db	101	;'e'
   963  0296' 72                 	db	114	;'r'
   964  0297' 61                 	db	97	;'a'
   965  0298' 74                 	db	116	;'t'
   966  0299' 75                 	db	117	;'u'
   967  029A' 72                 	db	114	;'r'
   968  029B' 65                 	db	101	;'e'
   969  029C' 3A                 	db	58	;':'
   970  029D' 00                 	db	0
   971  029E'                    STR_7:
   972  029E' 20                 	db	32
   973  029F' 20                 	db	32
   974  02A0' 46                 	db	70	;'F'
   975  02A1' 41                 	db	65	;'A'
   976  02A2' 4E                 	db	78	;'N'
   977  02A3' 00                 	db	0
   978  02A4'                    STR_5:
   979  02A4' 54                 	db	84	;'T'
   980  02A5' 69                 	db	105	;'i'
   981  02A6' 6D                 	db	109	;'m'
   982  02A7' 65                 	db	101	;'e'
   983  02A8' 00                 	db	0
   984  02A9'                    STR_6:
   985  02A9' 44                 	db	68	;'D'
   986  02AA' 61                 	db	97	;'a'
   987  02AB' 74                 	db	116	;'t'
   988  02AC' 65                 	db	101	;'e'
   989  02AD' 00                 	db	0
   990  02AE'                    STR_10:
   991  02AE' 4F                 	db	79	;'O'
   992  02AF' 4E                 	db	78	;'N'
   993  02B0' 20                 	db	32
   994  02B1' 00                 	db	0
   995  02B2'                    STR_11:
   996  02B2' 4F                 	db	79	;'O'
   997  02B3' 46                 	db	70	;'F'
   998  02B4' 46                 	db	70	;'F'
   999  02B5' 00                 	db	0
  1000  02B6'                    STR_9:
  1001  02B6' 52                 	db	82	;'R'
  1002  02B7' 50                 	db	80	;'P'
  1003  02B8' 4D                 	db	77	;'M'
  1004  02B9' 00                 	db	0
  1005  02BA'                    STR_3:
  1006  02BA' 43                 	db	67	;'C'
  1007  02BB' 2F                 	db	47
  1008  02BC' 00                 	db	0
  1009  02BD'                    STR_8:
  1010  02BD' 44                 	db	68	;'D'
  1011  02BE' 43                 	db	67	;'C'
  1012  02BF' 00                 	db	0
  1013  0000                     
  1014                           ; #config settings
  1015  02C0' 00                 	db	0	; dummy byte at the end
  1016  0000                     
  1017                           	psect	cinit
  1018  0000'                    __pcinit:
  1019                           	opt stack 0
  1020  0000'                    start_initialization:
  1021                           	opt stack 0
  1022  0000'                    __initialization:
  1023                           	opt stack 0
  1024                           
  1025                           ; Clear objects allocated to BANK0 (8 bytes)
  1026  0000' EE00' F000'        	lfsr	0,__pbssBANK0
  1027  0004' 0E08               	movlw	8
  1028  0006'                    clear_0:
  1029  0006' 6AEE               	clrf	postinc0,c
  1030  0008' 06E8               	decf	wreg,f,c
  1031  000A' E1FD               	bnz	clear_0
  1032                           
  1033                           ; Clear objects allocated to COMRAM (43 bytes)
  1034  000C' EE00' F000'        	lfsr	0,__pbssCOMRAM
  1035  0010' 0E2B               	movlw	43
  1036  0012'                    clear_1:
  1037  0012' 6AEE               	clrf	postinc0,c
  1038  0014' 06E8               	decf	wreg,f,c
  1039  0016' E1FD               	bnz	clear_1
  1040                           
  1041                           ; Initialize objects allocated to BANK0 (107 bytes)
  1042                           ; load TBLPTR registers with __pidataBANK0
  1043  0018' 0E00'              	movlw	low __pidataBANK0
  1044  001A' 6EF6               	movwf	tblptrl,c
  1045  001C' 0E00'              	movlw	high __pidataBANK0
  1046  001E' 6EF7               	movwf	tblptrh,c
  1047  0020' 0E00'              	movlw	low (__pidataBANK0 shr (0+16))
  1048  0022' 6EF8               	movwf	tblptru,c
  1049  0024' EE00' F000'        	lfsr	0,__pdataBANK0
  1050  0028' EE10 F06B          	lfsr	1,107
  1051  002C'                    copy_data0:
  1052  002C' 0009               	tblrd		*+
  1053  002E' CFF5 FFEE          	movff	tablat,postinc0
  1054  0032' 50E5               	movf	postdec1,w,c
  1055  0034' 50E1               	movf	fsr1l,w,c
  1056  0036' E1FA               	bnz	copy_data0
  1057                           
  1058                           ; Initialize objects allocated to COMRAM (3 bytes)
  1059                           ; load TBLPTR registers with __pidataCOMRAM
  1060  0038' 0E00'              	movlw	low __pidataCOMRAM
  1061  003A' 6EF6               	movwf	tblptrl,c
  1062  003C' 0E00'              	movlw	high __pidataCOMRAM
  1063  003E' 6EF7               	movwf	tblptrh,c
  1064  0040' 0E00'              	movlw	low (__pidataCOMRAM shr (0+16))
  1065  0042' 6EF8               	movwf	tblptru,c
  1066  0044' 0009               	tblrd		*+	;fetch initializer
  1067  0046' CFF5 F000'         	movff	tablat,__pdataCOMRAM
  1068  004A' 0009               	tblrd		*+	;fetch initializer
  1069  004C' CFF5 F001'         	movff	tablat,__pdataCOMRAM+1
  1070  0050' 0009               	tblrd		*+	;fetch initializer
  1071  0052' CFF5 F002'         	movff	tablat,__pdataCOMRAM+2
  1072  0056'                    end_of_initialization:
  1073                           	opt stack 0
  1074  0056'                    __end_of__initialization:
  1075                           	opt stack 0
  1076  0056' 0E00'              	movlw	low (__Lmediumconst shr (0+16))
  1077  0058' 6EF8               	movwf	tblptru,c
  1078  005A' 0100               	movlb	0
  1079  005C' EF00' F000'        	goto	_main	;jump to C main() function
  1080                           tblptru	equ	0xFF8
  1081                           tblptrh	equ	0xFF7
  1082                           tblptrl	equ	0xFF6
  1083                           tablat	equ	0xFF5
  1084                           postinc0	equ	0xFEE
  1085                           wreg	equ	0xFE8
  1086                           postdec1	equ	0xFE5
  1087                           fsr1l	equ	0xFE1
  1088                           
  1089                           	psect	bssCOMRAM
  1090  0000'                    __pbssCOMRAM:
  1091                           	opt stack 0
  1092  0000'                    _DS1621_tempC:
  1093                           	opt stack 0
  1094  0000'                    	ds	2
  1095  0002'                    _DS1621_tempF:
  1096                           	opt stack 0
  1097  0002'                    	ds	2
  1098  0004'                    _Time_Elapsed:
  1099                           	opt stack 0
  1100  0004'                    	ds	2
  1101  0006'                    _nec_ok:
  1102                           	opt stack 0
  1103  0006'                    	ds	2
  1104  0008'                    _rpm:
  1105                           	opt stack 0
  1106  0008'                    	ds	2
  1107  000A'                    _rps:
  1108                           	opt stack 0
  1109  000A'                    	ds	2
  1110  000C'                    _txt:
  1111                           	opt stack 0
  1112  000C'                    	ds	2
  1113  000E'                    _FAN:
  1114                           	opt stack 0
  1115  000E'                    	ds	1
  1116  000F'                    _Nec_code1:
  1117                           	opt stack 0
  1118  000F'                    	ds	1
  1119  0010'                    _Nec_state:
  1120                           	opt stack 0
  1121  0010'                    	ds	1
  1122  0011'                    __tft_type:
  1123                           	opt stack 0
  1124  0011'                    	ds	1
  1125  0012'                    _alarm_date:
  1126                           	opt stack 0
  1127  0012'                    	ds	1
  1128  0013'                    _alarm_hour:
  1129                           	opt stack 0
  1130  0013'                    	ds	1
  1131  0014'                    _alarm_minute:
  1132                           	opt stack 0
  1133  0014'                    	ds	1
  1134  0015'                    _alarm_second:
  1135                           	opt stack 0
  1136  0015'                    	ds	1
  1137  0016'                    _bit_count:
  1138                           	opt stack 0
  1139  0016'                    	ds	1
  1140  0017'                    _colstart:
  1141                           	opt stack 0
  1142  0017'                    	ds	1
  1143  0018'                    _day:
  1144                           	opt stack 0
  1145  0018'                    	ds	1
  1146  0019'                    _dow:
  1147                           	opt stack 0
  1148  0019'                    	ds	1
  1149  001A'                    _duty_cycle:
  1150                           	opt stack 0
  1151  001A'                    	ds	1
  1152  001B'                    _found:
  1153                           	opt stack 0
  1154  001B'                    	ds	1
  1155  001C'                    _hour:
  1156                           	opt stack 0
  1157  001C'                    	ds	1
  1158  001D'                    _minute:
  1159                           	opt stack 0
  1160  001D'                    	ds	1
  1161  001E'                    _month:
  1162                           	opt stack 0
  1163  001E'                    	ds	1
  1164  001F'                    _rowstart:
  1165                           	opt stack 0
  1166  001F'                    	ds	1
  1167  0020'                    _second:
  1168                           	opt stack 0
  1169  0020'                    	ds	1
  1170  0021'                    _setup_alarm_hour:
  1171                           	opt stack 0
  1172  0021'                    	ds	1
  1173  0022'                    _setup_alarm_minute:
  1174                           	opt stack 0
  1175  0022'                    	ds	1
  1176  0023'                    _setup_alarm_second:
  1177                           	opt stack 0
  1178  0023'                    	ds	1
  1179  0024'                    _setup_day:
  1180                           	opt stack 0
  1181  0024'                    	ds	1
  1182  0025'                    _setup_hour:
  1183                           	opt stack 0
  1184  0025'                    	ds	1
  1185  0026'                    _setup_minute:
  1186                           	opt stack 0
  1187  0026'                    	ds	1
  1188  0027'                    _setup_month:
  1189                           	opt stack 0
  1190  0027'                    	ds	1
  1191  0028'                    _setup_second:
  1192                           	opt stack 0
  1193  0028'                    	ds	1
  1194  0029'                    _setup_year:
  1195                           	opt stack 0
  1196  0029'                    	ds	1
  1197  002A'                    _year:
  1198                           	opt stack 0
  1199  002A'                    	ds	1
  1200                           tblptru	equ	0xFF8
  1201                           tblptrh	equ	0xFF7
  1202                           tblptrl	equ	0xFF6
  1203                           tablat	equ	0xFF5
  1204                           postinc0	equ	0xFEE
  1205                           wreg	equ	0xFE8
  1206                           postdec1	equ	0xFE5
  1207                           fsr1l	equ	0xFE1
  1208                           
  1209                           	psect	dataCOMRAM
  1210  0000'                    __pdataCOMRAM:
  1211                           	opt stack 0
  1212  0000'                    _setup_fan_temp:
  1213                           	opt stack 0
  1214  0000'                    	ds	1
  1215  0001'                    _tempSecond:
  1216                           	opt stack 0
  1217  0001'                    	ds	1
  1218  0002'                    _wrap:
  1219                           	opt stack 0
  1220  0002'                    	ds	1
  1221                           tblptru	equ	0xFF8
  1222                           tblptrh	equ	0xFF7
  1223                           tblptrl	equ	0xFF6
  1224                           tablat	equ	0xFF5
  1225                           postinc0	equ	0xFEE
  1226                           wreg	equ	0xFE8
  1227                           postdec1	equ	0xFE5
  1228                           fsr1l	equ	0xFE1
  1229                           
  1230                           	psect	bssBANK0
  1231  0000'                    __pbssBANK0:
  1232                           	opt stack 0
  1233  0000'                    _Nec_code:
  1234                           	opt stack 0
  1235  0000'                    	ds	4
  1236  0004'                    _ALARMEN:
  1237                           	opt stack 0
  1238  0004'                    	ds	2
  1239  0006'                    _nbr:
  1240                           	opt stack 0
  1241  0006'                    	ds	2
  1242                           tblptru	equ	0xFF8
  1243                           tblptrh	equ	0xFF7
  1244                           tblptrl	equ	0xFF6
  1245                           tablat	equ	0xFF5
  1246                           postinc0	equ	0xFEE
  1247                           wreg	equ	0xFE8
  1248                           postdec1	equ	0xFE5
  1249                           fsr1l	equ	0xFE1
  1250                           
  1251                           	psect	dataBANK0
  1252  0000'                    __pdataBANK0:
  1253                           	opt stack 0
  1254  0000'                    _array1:
  1255                           	opt stack 0
  1256  0000'                    	ds	21
  1257  0015'                    _alarm_time:
  1258                           	opt stack 0
  1259  0015'                    	ds	9
  1260  001E'                    _setup_alarm_time:
  1261                           	opt stack 0
  1262  001E'                    	ds	9
  1263  0027'                    _setup_date:
  1264                           	opt stack 0
  1265  0027'                    	ds	9
  1266  0030'                    _setup_time:
  1267                           	opt stack 0
  1268  0030'                    	ds	9
  1269  0039'                    _setup_fan_text:
  1270                           	opt stack 0
  1271  0039'                    	ds	5
  1272  003E'                    _Alarm_SW_Txt:
  1273                           	opt stack 0
  1274  003E'                    	ds	4
  1275  0042'                    _RTC_ALARM_Txt:
  1276                           	opt stack 0
  1277  0042'                    	ds	2
  1278  0044'                    _date:
  1279                           	opt stack 0
  1280  0044'                    	ds	9
  1281  004D'                    _time:
  1282                           	opt stack 0
  1283  004D'                    	ds	9
  1284  0056'                    _RPM_Txt:
  1285                           	opt stack 0
  1286  0056'                    	ds	5
  1287  005B'                    _DC_Txt:
  1288                           	opt stack 0
  1289  005B'                    	ds	4
  1290  005F'                    _Fan_SW_Txt:
  1291                           	opt stack 0
  1292  005F'                    	ds	4
  1293  0063'                    _tempC:
  1294                           	opt stack 0
  1295  0063'                    	ds	4
  1296  0067'                    _tempF:
  1297                           	opt stack 0
  1298  0067'                    	ds	4
  1299                           tblptru	equ	0xFF8
  1300                           tblptrh	equ	0xFF7
  1301                           tblptrl	equ	0xFF6
  1302                           tablat	equ	0xFF5
  1303                           postinc0	equ	0xFEE
  1304                           wreg	equ	0xFE8
  1305                           postdec1	equ	0xFE5
  1306                           fsr1l	equ	0xFE1
  1307                           
  1308                           	psect	cstackBANK1
  1309  0000'                    __pcstackBANK1:
  1310                           	opt stack 0
  1311  0000'                    main@j:
  1312                           	opt stack 0
  1313                           
  1314                           ; 2 bytes @ 0x0
  1315  0000'                    	ds	2
  1316                           tblptru	equ	0xFF8
  1317                           tblptrh	equ	0xFF7
  1318                           tblptrl	equ	0xFF6
  1319                           tablat	equ	0xFF5
  1320                           postinc0	equ	0xFEE
  1321                           wreg	equ	0xFE8
  1322                           postdec1	equ	0xFE5
  1323                           fsr1l	equ	0xFE1
  1324                           
  1325                           	psect	cstackBANK0
  1326  0000'                    __pcstackBANK0:
  1327                           	opt stack 0
  1328  0000'                    ??_drawtext:
  1329  0000'                    do_update_pwm@dc_f:
  1330                           	opt stack 0
  1331                           
  1332                           ; 3 bytes @ 0x0
  1333  0000'                    	ds	2
  1334  0002'                    drawtext@x:
  1335                           	opt stack 0
  1336                           
  1337                           ; 1 bytes @ 0x2
  1338  0002'                    	ds	1
  1339  0003'                    do_update_pwm@duty_cycle:
  1340                           	opt stack 0
  1341  0003'                    drawtext@textsize:
  1342                           	opt stack 0
  1343                           
  1344                           ; 2 bytes @ 0x3
  1345  0003'                    	ds	1
  1346  0004'                    do_update_pwm@dc_I:
  1347                           	opt stack 0
  1348                           
  1349                           ; 2 bytes @ 0x4
  1350  0004'                    	ds	1
  1351  0005'                    drawtext@i:
  1352                           	opt stack 0
  1353                           
  1354                           ; 2 bytes @ 0x5
  1355  0005'                    	ds	2
  1356  0007'                    drawtext@cursor_y:
  1357                           	opt stack 0
  1358                           
  1359                           ; 1 bytes @ 0x7
  1360  0007'                    	ds	1
  1361  0008'                    drawtext@cursor_x:
  1362                           	opt stack 0
  1363                           
  1364                           ; 1 bytes @ 0x8
  1365  0008'                    	ds	1
  1366  0009'                    ??_Update_Screen:
  1367                           
  1368                           ; 0 bytes @ 0x9
  1369  0009'                    	ds	2
  1370  000B'                    Update_Screen@neg_tempF:
  1371                           	opt stack 0
  1372                           
  1373                           ; 2 bytes @ 0xB
  1374  000B'                    	ds	2
  1375                           tblptru	equ	0xFF8
  1376                           tblptrh	equ	0xFF7
  1377                           tblptrl	equ	0xFF6
  1378                           tablat	equ	0xFF5
  1379                           postinc0	equ	0xFEE
  1380                           wreg	equ	0xFE8
  1381                           postdec1	equ	0xFE5
  1382                           fsr1l	equ	0xFE1
  1383                           
  1384                           	psect	cstackCOMRAM
  1385  0000'                    __pcstackCOMRAM:
  1386                           	opt stack 0
  1387  0000'                    ??_INT0_isr:
  1388  0000'                    
  1389                           ; 2 bytes @ 0x0
  1390  0000'                    	ds	2
  1391  0002'                    ??_chkisr:
  1392                           
  1393                           ; 0 bytes @ 0x2
  1394  0002'                    	ds	14
  1395  0010'                    ??_isdigit:
  1396  0010'                    ?_strlen:
  1397                           	opt stack 0
  1398  0010'                    ?___wmul:
  1399                           	opt stack 0
  1400  0010'                    ?___awmod:
  1401                           	opt stack 0
  1402  0010'                    ?___lwdiv:
  1403                           	opt stack 0
  1404  0010'                    ?___ftpack:
  1405                           	opt stack 0
  1406  0010'                    ?___fttol:
  1407                           	opt stack 0
  1408  0010'                    I2C_Read@ack:
  1409                           	opt stack 0
  1410  0010'                    I2C_Write@outByte:
  1411                           	opt stack 0
  1412  0010'                    spiwrite@x:
  1413                           	opt stack 0
  1414  0010'                    putch@c:
  1415                           	opt stack 0
  1416  0010'                    OpenUSART@spbrg:
  1417                           	opt stack 0
  1418  0010'                    ___wmul@multiplier:
  1419                           	opt stack 0
  1420  0010'                    ___awmod@dividend:
  1421                           	opt stack 0
  1422  0010'                    ___lwdiv@dividend:
  1423                           	opt stack 0
  1424  0010'                    strcpy@to:
  1425                           	opt stack 0
  1426  0010'                    strlen@s:
  1427                           	opt stack 0
  1428  0010'                    ___ftpack@arg:
  1429                           	opt stack 0
  1430  0010'                    ___fttol@f1:
  1431                           	opt stack 0
  1432  0010'                    I2C_Init@c:
  1433                           	opt stack 0
  1434                           
  1435                           ; 4 bytes @ 0x10
  1436  0010'                    	ds	1
  1437  0011'                    I2C_Read@n:
  1438                           	opt stack 0
  1439  0011'                    I2C_Write@n:
  1440                           	opt stack 0
  1441  0011'                    spiwrite@spidata:
  1442                           	opt stack 0
  1443  0011'                    _isdigit$2012:
  1444                           	opt stack 0
  1445                           
  1446                           ; 1 bytes @ 0x11
  1447  0011'                    	ds	1
  1448  0012'                    ??_strlen:
  1449  0012'                    I2C_Read@inByte:
  1450                           	opt stack 0
  1451  0012'                    I2C_Write_Cmd_Only@Cmd:
  1452                           	opt stack 0
  1453  0012'                    I2C_Write_Cmd_Write_Data@Cmd:
  1454                           	opt stack 0
  1455  0012'                    write_command@cmd_:
  1456                           	opt stack 0
  1457  0012'                    write_data@data_:
  1458                           	opt stack 0
  1459  0012'                    OpenUSART@config:
  1460                           	opt stack 0
  1461  0012'                    isdigit@c:
  1462                           	opt stack 0
  1463  0012'                    ___wmul@multiplicand:
  1464                           	opt stack 0
  1465  0012'                    ___awmod@divisor:
  1466                           	opt stack 0
  1467  0012'                    ___lwdiv@divisor:
  1468                           	opt stack 0
  1469  0012'                    strcpy@from:
  1470                           	opt stack 0
  1471                           
  1472                           ; 2 bytes @ 0x12
  1473  0012'                    	ds	1
  1474  0013'                    ?_DS1621_Read_Temp:
  1475                           	opt stack 0
  1476  0013'                    I2C_Write_Cmd_Only@Device:
  1477                           	opt stack 0
  1478  0013'                    I2C_Write_Cmd_Write_Data@Data_Out:
  1479                           	opt stack 0
  1480  0013'                    DS3231_Read_Time@Address:
  1481                           	opt stack 0
  1482  0013'                    setAddrWindow@y0:
  1483                           	opt stack 0
  1484  0013'                    ___ftpack@exp:
  1485                           	opt stack 0
  1486                           
  1487                           ; 1 bytes @ 0x13
  1488  0013'                    	ds	1
  1489  0014'                    ??___fttol:
  1490  0014'                    I2C_Write_Cmd_Write_Data@Device:
  1491                           	opt stack 0
  1492  0014'                    DS3231_Read_Time@Device:
  1493                           	opt stack 0
  1494  0014'                    setAddrWindow@x1:
  1495                           	opt stack 0
  1496  0014'                    ___awmod@counter:
  1497                           	opt stack 0
  1498  0014'                    ___ftpack@sign:
  1499                           	opt stack 0
  1500  0014'                    ___lwdiv@counter:
  1501                           	opt stack 0
  1502  0014'                    ___wmul@product:
  1503                           	opt stack 0
  1504  0014'                    strcpy@cp:
  1505                           	opt stack 0
  1506  0014'                    strlen@cp:
  1507                           	opt stack 0
  1508                           
  1509                           ; 2 bytes @ 0x14
  1510  0014'                    	ds	1
  1511  0015'                    ??___ftpack:
  1512  0015'                    DS1621_Init@Device:
  1513                           	opt stack 0
  1514  0015'                    DS1621_Read_Temp@Cmd:
  1515                           	opt stack 0
  1516  0015'                    setAddrWindow@y1:
  1517                           	opt stack 0
  1518  0015'                    ___awmod@sign:
  1519                           	opt stack 0
  1520  0015'                    ___lwdiv@quotient:
  1521                           	opt stack 0
  1522                           
  1523                           ; 2 bytes @ 0x15
  1524  0015'                    	ds	1
  1525  0016'                    ?___awdiv:
  1526                           	opt stack 0
  1527  0016'                    DS1621_Read_Temp@Data_Ret:
  1528                           	opt stack 0
  1529  0016'                    setAddrWindow@x0:
  1530                           	opt stack 0
  1531  0016'                    delay_ms@ms:
  1532                           	opt stack 0
  1533  0016'                    ___awdiv@dividend:
  1534                           	opt stack 0
  1535                           
  1536                           ; 2 bytes @ 0x16
  1537  0016'                    	ds	1
  1538  0017'                    ?___lwmod:
  1539                           	opt stack 0
  1540  0017'                    DS1621_Read_Temp@Device:
  1541                           	opt stack 0
  1542  0017'                    drawPixel@y:
  1543                           	opt stack 0
  1544  0017'                    drawFastVLine@y:
  1545                           	opt stack 0
  1546  0017'                    fillRectangle@y:
  1547                           	opt stack 0
  1548  0017'                    ___lwmod@dividend:
  1549                           	opt stack 0
  1550                           
  1551                           ; 2 bytes @ 0x17
  1552  0017'                    	ds	1
  1553  0018'                    ??_delay_ms:
  1554  0018'                    ?___lbtoft:
  1555                           	opt stack 0
  1556  0018'                    drawFastVLine@h:
  1557                           	opt stack 0
  1558  0018'                    fillRectangle@w:
  1559                           	opt stack 0
  1560  0018'                    drawPixel@color:
  1561                           	opt stack 0
  1562  0018'                    ___awdiv@divisor:
  1563                           	opt stack 0
  1564                           
  1565                           ; 2 bytes @ 0x18
  1566  0018'                    	ds	1
  1567  0019'                    fillRectangle@h:
  1568                           	opt stack 0
  1569  0019'                    ___fttol@sign1:
  1570                           	opt stack 0
  1571  0019'                    drawFastVLine@color:
  1572                           	opt stack 0
  1573  0019'                    ___lwmod@divisor:
  1574                           	opt stack 0
  1575                           
  1576                           ; 2 bytes @ 0x19
  1577  0019'                    	ds	1
  1578  001A'                    drawPixel@x:
  1579                           	opt stack 0
  1580  001A'                    ___awdiv@counter:
  1581                           	opt stack 0
  1582  001A'                    delay_ms@count:
  1583                           	opt stack 0
  1584  001A'                    fillRectangle@color:
  1585                           	opt stack 0
  1586  001A'                    ___fttol@lval:
  1587                           	opt stack 0
  1588                           
  1589                           ; 4 bytes @ 0x1A
  1590  001A'                    	ds	1
  1591  001B'                    ??_drawFastVLine:
  1592  001B'                    ___awdiv@sign:
  1593                           	opt stack 0
  1594  001B'                    ___lbtoft@c:
  1595                           	opt stack 0
  1596  001B'                    ___lwmod@counter:
  1597                           	opt stack 0
  1598  001B'                    drawCircle@x0:
  1599                           	opt stack 0
  1600                           
  1601                           ; 2 bytes @ 0x1B
  1602  001B'                    	ds	1
  1603  001C'                    ??_fillRectangle:
  1604  001C'                    ?_printf:
  1605                           	opt stack 0
  1606  001C'                    ?___ftmul:
  1607                           	opt stack 0
  1608  001C'                    printf@f:
  1609                           	opt stack 0
  1610  001C'                    ___awdiv@quotient:
  1611                           	opt stack 0
  1612  001C'                    ___ftmul@f1:
  1613                           	opt stack 0
  1614                           
  1615                           ; 3 bytes @ 0x1C
  1616  001C'                    	ds	1
  1617  001D'                    drawCircle@y0:
  1618                           	opt stack 0
  1619                           
  1620                           ; 2 bytes @ 0x1D
  1621  001D'                    	ds	1
  1622  001E'                    ?_get_RPM:
  1623                           	opt stack 0
  1624  001E'                    ___fttol@exp1:
  1625                           	opt stack 0
  1626                           
  1627                           ; 1 bytes @ 0x1E
  1628  001E'                    	ds	1
  1629  001F'                    drawFastVLine@hi:
  1630                           	opt stack 0
  1631  001F'                    drawCircle@r:
  1632                           	opt stack 0
  1633  001F'                    ___ftmul@f2:
  1634                           	opt stack 0
  1635                           
  1636                           ; 3 bytes @ 0x1F
  1637  001F'                    	ds	1
  1638  0020'                    drawFastVLine@lo:
  1639                           	opt stack 0
  1640  0020'                    fillRectangle@hi:
  1641                           	opt stack 0
  1642  0020'                    get_RPM@RPS:
  1643                           	opt stack 0
  1644                           
  1645                           ; 2 bytes @ 0x20
  1646  0020'                    	ds	1
  1647  0021'                    drawFastVLine@x:
  1648                           	opt stack 0
  1649  0021'                    fillRectangle@lo:
  1650                           	opt stack 0
  1651  0021'                    drawCircle@color:
  1652                           	opt stack 0
  1653                           
  1654                           ; 2 bytes @ 0x21
  1655  0021'                    	ds	1
  1656  0022'                    ??___ftmul:
  1657  0022'                    fillRect@y:
  1658                           	opt stack 0
  1659  0022'                    fillRectangle@x:
  1660                           	opt stack 0
  1661                           
  1662                           ; 1 bytes @ 0x22
  1663  0022'                    	ds	1
  1664  0023'                    ??_drawCircle:
  1665  0023'                    fillRect@w:
  1666                           	opt stack 0
  1667  0023'                    fillScreen@color:
  1668                           	opt stack 0
  1669                           
  1670                           ; 2 bytes @ 0x23
  1671  0023'                    	ds	1
  1672  0024'                    fillRect@h:
  1673                           	opt stack 0
  1674                           
  1675                           ; 1 bytes @ 0x24
  1676  0024'                    	ds	1
  1677  0025'                    ___ftmul@exp:
  1678                           	opt stack 0
  1679  0025'                    fillRect@color:
  1680                           	opt stack 0
  1681  0025'                    drawCircle@ddF_x:
  1682                           	opt stack 0
  1683                           
  1684                           ; 2 bytes @ 0x25
  1685  0025'                    	ds	1
  1686  0026'                    ___ftmul@f3_as_product:
  1687                           	opt stack 0
  1688                           
  1689                           ; 3 bytes @ 0x26
  1690  0026'                    	ds	1
  1691  0027'                    ??_fillRect:
  1692  0027'                    drawCircle@ddF_y:
  1693                           	opt stack 0
  1694                           
  1695                           ; 2 bytes @ 0x27
  1696  0027'                    	ds	2
  1697  0029'                    ___ftmul@cntr:
  1698                           	opt stack 0
  1699  0029'                    drawCircle@f:
  1700                           	opt stack 0
  1701                           
  1702                           ; 2 bytes @ 0x29
  1703  0029'                    	ds	1
  1704  002A'                    ??_printf:
  1705  002A'                    fillRect@x:
  1706                           	opt stack 0
  1707  002A'                    ___ftmul@sign:
  1708                           	opt stack 0
  1709                           
  1710                           ; 1 bytes @ 0x2A
  1711  002A'                    	ds	1
  1712  002B'                    ?___ftdiv:
  1713                           	opt stack 0
  1714  002B'                    fillRect@i:
  1715                           	opt stack 0
  1716  002B'                    drawCircle@x:
  1717                           	opt stack 0
  1718  002B'                    ___ftdiv@f1:
  1719                           	opt stack 0
  1720                           
  1721                           ; 3 bytes @ 0x2B
  1722  002B'                    	ds	2
  1723  002D'                    drawChar@y:
  1724                           	opt stack 0
  1725  002D'                    drawCircle@y:
  1726                           	opt stack 0
  1727                           
  1728                           ; 2 bytes @ 0x2D
  1729  002D'                    	ds	1
  1730  002E'                    drawChar@c:
  1731                           	opt stack 0
  1732  002E'                    printf@idx:
  1733                           	opt stack 0
  1734  002E'                    ___ftdiv@f2:
  1735                           	opt stack 0
  1736                           
  1737                           ; 3 bytes @ 0x2E
  1738  002E'                    	ds	1
  1739  002F'                    drawChar@color:
  1740                           	opt stack 0
  1741  002F'                    printf@ap:
  1742                           	opt stack 0
  1743                           
  1744                           ; 2 bytes @ 0x2F
  1745  002F'                    	ds	2
  1746  0031'                    ??___ftdiv:
  1747  0031'                    printf@prec:
  1748                           	opt stack 0
  1749  0031'                    drawChar@bg:
  1750                           	opt stack 0
  1751                           
  1752                           ; 2 bytes @ 0x31
  1753  0031'                    	ds	1
  1754  0032'                    printf@val:
  1755                           	opt stack 0
  1756                           
  1757                           ; 2 bytes @ 0x32
  1758  0032'                    	ds	1
  1759  0033'                    drawChar@size:
  1760                           	opt stack 0
  1761                           
  1762                           ; 1 bytes @ 0x33
  1763  0033'                    	ds	1
  1764  0034'                    drawChar@line:
  1765                           	opt stack 0
  1766  0034'                    printf@flag:
  1767                           	opt stack 0
  1768  0034'                    ___ftdiv@cntr:
  1769                           	opt stack 0
  1770                           
  1771                           ; 1 bytes @ 0x34
  1772  0034'                    	ds	1
  1773  0035'                    drawChar@x:
  1774                           	opt stack 0
  1775  0035'                    printf@width:
  1776                           	opt stack 0
  1777  0035'                    ___ftdiv@f3:
  1778                           	opt stack 0
  1779                           
  1780                           ; 3 bytes @ 0x35
  1781  0035'                    	ds	1
  1782  0036'                    drawChar@j:
  1783                           	opt stack 0
  1784                           
  1785                           ; 1 bytes @ 0x36
  1786  0036'                    	ds	1
  1787  0037'                    drawChar@i:
  1788                           	opt stack 0
  1789  0037'                    printf@c:
  1790                           	opt stack 0
  1791                           
  1792                           ; 1 bytes @ 0x37
  1793  0037'                    	ds	1
  1794  0038'                    drawtext@y:
  1795                           	opt stack 0
  1796  0038'                    ___ftdiv@exp:
  1797                           	opt stack 0
  1798                           
  1799                           ; 1 bytes @ 0x38
  1800  0038'                    	ds	1
  1801  0039'                    ___ftdiv@sign:
  1802                           	opt stack 0
  1803  0039'                    drawtext@_text:
  1804                           	opt stack 0
  1805                           
  1806                           ; 2 bytes @ 0x39
  1807  0039'                    	ds	1
  1808  003A'                    ??_do_update_pwm:
  1809                           
  1810                           ; 0 bytes @ 0x3A
  1811  003A'                    	ds	1
  1812  003B'                    drawtext@color:
  1813                           	opt stack 0
  1814                           
  1815                           ; 2 bytes @ 0x3B
  1816  003B'                    	ds	2
  1817  003D'                    drawtext@bg:
  1818                           	opt stack 0
  1819                           
  1820                           ; 2 bytes @ 0x3D
  1821  003D'                    	ds	2
  1822  003F'                    drawtext@size:
  1823                           	opt stack 0
  1824                           
  1825                           ; 1 bytes @ 0x3F
  1826  003F'                    	ds	1
  1827  0040'                    
  1828                           ; 0 bytes @ 0x40
  1829  0040'                    	ds	1
  1830                           tblptru	equ	0xFF8
  1831                           tblptrh	equ	0xFF7
  1832                           tblptrl	equ	0xFF6
  1833                           tablat	equ	0xFF5
  1834                           postinc0	equ	0xFEE
  1835                           wreg	equ	0xFE8
  1836                           postdec1	equ	0xFE5
  1837                           fsr1l	equ	0xFE1
  1838                           
  1839 ;;
  1840 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1841 ;;
  1842 ;; *************** function _main *****************
  1843 ;; Defined at:
  1844 ;;		line 119 in file "Lab11pAnew.c"
  1845 ;; Parameters:    Size  Location     Type
  1846 ;;		None
  1847 ;; Auto vars:     Size  Location     Type
  1848 ;;  j               2    0[BANK1 ] int 
  1849 ;; Return value:  Size  Location     Type
  1850 ;;		None               void
  1851 ;; Registers used:
  1852 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, structret, tblptrl, tblptrh, tblp
      +tru, prodl, prodh, bsr, cstack
  1853 ;; Tracked objects:
  1854 ;;		On entry : 0/0
  1855 ;;		On exit  : 0/0
  1856 ;;		Unchanged: 0/0
  1857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1858 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1859 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1860 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1861 ;;      Totals:         1       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1862 ;;Total ram usage:        3 bytes
  1863 ;; Hardware stack levels required when called:   11
  1864 ;; This function calls:
  1865 ;;		_DS1621_Read_Temp
  1866 ;;		_DS3231_Read_Time
  1867 ;;		_Do_Beep
  1868 ;;		_Do_Init
  1869 ;;		_Initialize_Screen
  1870 ;;		_Turn_On_Fan
  1871 ;;		_Update_Screen
  1872 ;;		___awdiv
  1873 ;;		___wmul
  1874 ;;		_do_update_pwm
  1875 ;;		_get_RPM
  1876 ;;		_printf
  1877 ;; This function is called by:
  1878 ;;		Startup code after reset
  1879 ;; This function uses a non-reentrant model
  1880 ;;
  1881                           
  1882                           	psect	text0
  1883  0000'                    __ptext0:
  1884                           	opt stack 0
  1885  0000'                    _main:
  1886                           	opt stack 20
  1887                           
  1888                           ;Lab11pAnew.c: 121: Do_Init();
  1889                           
  1890                           ;incstack = 0
  1891  0000' EC00' F000'        	call	_Do_Init	;wreg free
  1892                           
  1893                           ;Lab11pAnew.c: 122: Initialize_Screen();
  1894  0004' EC00' F000'        	call	_Initialize_Screen	;wreg free
  1895                           
  1896                           ;Lab11pAnew.c: 124: Turn_On_Fan();
  1897  0008' EC00' F000'        	call	_Turn_On_Fan	;wreg free
  1898                           
  1899                           ;Lab11pAnew.c: 125: duty_cycle=50;
  1900  000C' 0E32               	movlw	50
  1901  000E' 6E1A'              	movwf	_duty_cycle,c
  1902                           
  1903                           ;Lab11pAnew.c: 126: do_update_pwm(duty_cycle);
  1904  0010' 501A'              	movf	_duty_cycle,w,c
  1905  0012' EC00' F000'        	call	_do_update_pwm
  1906  0016' D000               	goto	l6687
  1907  0018'                    l6687:
  1908                           
  1909                           ;Lab11pAnew.c: 128: {
  1910                           ;Lab11pAnew.c: 131: DS3231_Read_Time();
  1911  0018' EC00' F000'        	call	_DS3231_Read_Time	;wreg free
  1912                           
  1913                           ;Lab11pAnew.c: 133: if(tempSecond != second)
  1914  001C' 5020'              	movf	_second,w,c
  1915  001E' 1801'              	xorwf	_tempSecond,w,c
  1916  0020' B4D8               	btfsc	status,2,c
  1917  0022' D05E               	goto	l6707
  1918                           
  1919                           ;Lab11pAnew.c: 134: {
  1920                           ;Lab11pAnew.c: 135: tempSecond = second;
  1921  0024' C020' F001'        	movff	_second,_tempSecond
  1922                           
  1923                           ;Lab11pAnew.c: 136: DS1621_tempC = DS1621_Read_Temp();
  1924  0028' EC00' F000'        	call	_DS1621_Read_Temp	;wreg free
  1925  002C' C013' F000'        	movff	?_DS1621_Read_Temp,_DS1621_tempC
  1926  0030' C014' F001'        	movff	?_DS1621_Read_Temp+1,_DS1621_tempC+1
  1927                           
  1928                           ;Lab11pAnew.c: 137: DS1621_tempF = (DS1621_tempC * 9 / 5) + 32;
  1929  0034' C000' F010'        	movff	_DS1621_tempC,___wmul@multiplier
  1930  0038' C001' F011'        	movff	_DS1621_tempC+1,___wmul@multiplier+1
  1931  003C' 0E00               	movlw	0
  1932  003E' 6E13'              	movwf	___wmul@multiplicand+1,c
  1933  0040' 0E09               	movlw	9
  1934  0042' 6E12'              	movwf	___wmul@multiplicand,c
  1935  0044' EC00' F000'        	call	___wmul	;wreg free
  1936  0048' C010' F016'        	movff	?___wmul,___awdiv@dividend
  1937  004C' C011' F017'        	movff	?___wmul+1,___awdiv@dividend+1
  1938  0050' 0E00               	movlw	0
  1939  0052' 6E19'              	movwf	___awdiv@divisor+1,c
  1940  0054' 0E05               	movlw	5
  1941  0056' 6E18'              	movwf	___awdiv@divisor,c
  1942  0058' EC00' F000'        	call	___awdiv	;wreg free
  1943  005C' 0E20               	movlw	32
  1944  005E' 2416'              	addwf	?___awdiv,w,c
  1945  0060' 6E02'              	movwf	_DS1621_tempF,c
  1946  0062' 0E00               	movlw	0
  1947  0064' 2017'              	addwfc	?___awdiv+1,w,c
  1948  0066' 6E03'              	movwf	_DS1621_tempF+1,c
  1949                           
  1950                           ;Lab11pAnew.c: 138: rpm = get_RPM();
  1951  0068' EC00' F000'        	call	_get_RPM	;wreg free
  1952  006C' C01E' F008'        	movff	?_get_RPM,_rpm
  1953  0070' C01F' F009'        	movff	?_get_RPM+1,_rpm+1
  1954                           
  1955                           ;Lab11pAnew.c: 139: printf ("%02x:%02x:%02x %02x/%02x/%02x",hour,minute,second,month,day
      +                          ,year);
  1956  0074' 0E00'              	movlw	low STR_12
  1957  0076' 6E1C'              	movwf	printf@f,c
  1958  0078' 0E00'              	movlw	high STR_12
  1959  007A' 6E1D'              	movwf	printf@f+1,c
  1960  007C' C01C' F01E'        	movff	_hour,?_printf+2
  1961  0080' 6A1F'              	clrf	?_printf+3,c
  1962  0082' C01D' F020'        	movff	_minute,?_printf+4
  1963  0086' 6A21'              	clrf	?_printf+5,c
  1964  0088' C020' F022'        	movff	_second,?_printf+6
  1965  008C' 6A23'              	clrf	?_printf+7,c
  1966  008E' C01E' F024'        	movff	_month,?_printf+8
  1967  0092' 6A25'              	clrf	?_printf+9,c
  1968  0094' C018' F026'        	movff	_day,?_printf+10
  1969  0098' 6A27'              	clrf	?_printf+11,c
  1970  009A' C02A' F028'        	movff	_year,?_printf+12
  1971  009E' 6A29'              	clrf	?_printf+13,c
  1972  00A0' EC00' F000'        	call	_printf	;wreg free
  1973                           
  1974                           ;Lab11pAnew.c: 140: printf (" Temp = %d C = %d F ", DS1621_tempC, DS1621_tempF);
  1975  00A4' 0E00'              	movlw	low STR_13
  1976  00A6' 6E1C'              	movwf	printf@f,c
  1977  00A8' 0E00'              	movlw	high STR_13
  1978  00AA' 6E1D'              	movwf	printf@f+1,c
  1979  00AC' C000' F01E'        	movff	_DS1621_tempC,?_printf+2
  1980  00B0' C001' F01F'        	movff	_DS1621_tempC+1,?_printf+3
  1981  00B4' C002' F020'        	movff	_DS1621_tempF,?_printf+4
  1982  00B8' C003' F021'        	movff	_DS1621_tempF+1,?_printf+5
  1983  00BC' EC00' F000'        	call	_printf	;wreg free
  1984                           
  1985                           ;Lab11pAnew.c: 141: printf ("RPM = %d  dc = %d\r\n", rpm, duty_cycle);
  1986  00C0' 0E00'              	movlw	low STR_14
  1987  00C2' 6E1C'              	movwf	printf@f,c
  1988  00C4' 0E00'              	movlw	high STR_14
  1989  00C6' 6E1D'              	movwf	printf@f+1,c
  1990  00C8' C008' F01E'        	movff	_rpm,?_printf+2
  1991  00CC' C009' F01F'        	movff	_rpm+1,?_printf+3
  1992  00D0' C01A' F020'        	movff	_duty_cycle,?_printf+4
  1993  00D4' 6A21'              	clrf	?_printf+5,c
  1994  00D6' EC00' F000'        	call	_printf	;wreg free
  1995                           
  1996                           ;Lab11pAnew.c: 142: Update_Screen();
  1997  00DA' EC00' F000'        	call	_Update_Screen	;wreg free
  1998  00DE' D000               	goto	l6707
  1999  00E0'                    l6707:
  2000                           
  2001                           ;Lab11pAnew.c: 143: }
  2002                           ;Lab11pAnew.c: 145: if (nec_ok == 1)
  2003  00E0' 0406'              	decf	_nec_ok,w,c
  2004  00E2' 1007'              	iorwf	_nec_ok+1,w,c
  2005  00E4' A4D8               	btfss	status,2,c
  2006  00E6' D798               	goto	l6687
  2007                           
  2008                           ;Lab11pAnew.c: 146: {
  2009                           ;Lab11pAnew.c: 147: nec_ok = 0;
  2010  00E8' 0E00               	movlw	0
  2011  00EA' 6E07'              	movwf	_nec_ok+1,c
  2012  00EC' 0E00               	movlw	0
  2013  00EE' 6E06'              	movwf	_nec_ok,c
  2014                           
  2015                           ;Lab11pAnew.c: 149: printf ("NEC_Code = %x\r\n", Nec_code1);
  2016  00F0' 0E00'              	movlw	low STR_15
  2017  00F2' 6E1C'              	movwf	printf@f,c
  2018  00F4' 0E00'              	movlw	high STR_15
  2019  00F6' 6E1D'              	movwf	printf@f+1,c
  2020  00F8' C00F' F01E'        	movff	_Nec_code1,?_printf+2
  2021  00FC' 6A1F'              	clrf	?_printf+3,c
  2022  00FE' EC00' F000'        	call	_printf	;wreg free
  2023                           
  2024                           ;Lab11pAnew.c: 151: INTCONbits.INT0IE = 1;
  2025  0102' 88F2               	bsf	intcon,4,c	;volatile
  2026                           
  2027                           ;Lab11pAnew.c: 152: INTCON2bits.INTEDG0 = 0;
  2028  0104' 9CF1               	bcf	intcon2,6,c	;volatile
  2029                           
  2030                           ;Lab11pAnew.c: 154: found = 0xff;
  2031  0106' 681B'              	setf	_found,c
  2032                           
  2033                           ;Lab11pAnew.c: 155: for (int j=0; j< 21; j++)
  2034  0108' 0E00               	movlw	0
  2035  010A' 0101               	movlb	1	; () banked
  2036  010C' 6F00'              	movwf	(main@j+1)& (0+255),b
  2037  010E' 0E00               	movlw	0
  2038  0110' 6F00'              	movwf	main@j& (0+255),b
  2039  0112'                    l6721:
  2040                           
  2041                           ; BSR set to: 1
  2042  0112' 0101               	movlb	1	; () banked
  2043  0114' BF00'              	btfsc	(main@j+1)& (0+255),7,b
  2044  0116' D00A               	goto	l6725
  2045  0118' 0101               	movlb	1	; () banked
  2046  011A' 5100'              	movf	(main@j+1)& (0+255),w,b
  2047  011C' E120               	bnz	l6735
  2048  011E' 0E15               	movlw	21
  2049  0120' 0101               	movlb	1	; () banked
  2050  0122' 5D00'              	subwf	main@j& (0+255),w,b
  2051  0124' B0D8               	btfsc	status,0,c
  2052  0126' D01B               	goto	l6735
  2053  0128' D001               	goto	l6725
  2054                           
  2055                           ; BSR set to: 1
  2056  012A' D019               	goto	l6735
  2057  012C'                    l6725:
  2058                           
  2059                           ; BSR set to: 1
  2060                           ;Lab11pAnew.c: 156: {
  2061                           ;Lab11pAnew.c: 157: if (Nec_code1 == array1[j])
  2062  012C' 0E00'              	movlw	low _array1
  2063  012E' 0101               	movlb	1	; () banked
  2064  0130' 2500'              	addwf	main@j& (0+255),w,b
  2065  0132' 6ED9               	movwf	fsr2l,c
  2066  0134' 0E00'              	movlw	high _array1
  2067  0136' 0101               	movlb	1	; () banked
  2068  0138' 2100'              	addwfc	(main@j+1)& (0+255),w,b
  2069  013A' 6EDA               	movwf	fsr2h,c
  2070  013C' 500F'              	movf	_Nec_code1,w,c
  2071  013E' 18DE               	xorwf	postinc2,w,c
  2072  0140' A4D8               	btfss	status,2,c
  2073  0142' D008               	goto	l6731
  2074                           
  2075                           ; BSR set to: 1
  2076                           ;Lab11pAnew.c: 158: {
  2077                           ;Lab11pAnew.c: 159: found = j;
  2078  0144' C000' F01B'        	movff	main@j,_found
  2079                           
  2080                           ; BSR set to: 1
  2081                           ;Lab11pAnew.c: 160: j = 21;
  2082  0148' 0E00               	movlw	0
  2083  014A' 0101               	movlb	1	; () banked
  2084  014C' 6F00'              	movwf	(main@j+1)& (0+255),b
  2085  014E' 0E15               	movlw	21
  2086  0150' 6F00'              	movwf	main@j& (0+255),b
  2087  0152' D000               	goto	l6731
  2088  0154'                    l6731:
  2089                           
  2090                           ; BSR set to: 1
  2091  0154' 0101               	movlb	1	; () banked
  2092  0156' 4B00'              	infsnz	main@j& (0+255),f,b
  2093  0158' 2B00'              	incf	(main@j+1)& (0+255),f,b
  2094  015A' D7DB               	goto	l6721
  2095                           
  2096                           ; BSR set to: 1
  2097  015C' D000               	goto	l6735
  2098  015E'                    l6735:
  2099                           
  2100                           ; BSR set to: 1
  2101                           ;Lab11pAnew.c: 161: }
  2102                           ;Lab11pAnew.c: 162: }
  2103                           ;Lab11pAnew.c: 164: if (found == 0xff)
  2104  015E' 281B'              	incf	_found,w,c
  2105  0160' A4D8               	btfss	status,2,c
  2106  0162' D007               	goto	l6739
  2107                           
  2108                           ; BSR set to: 1
  2109                           ;Lab11pAnew.c: 165: {
  2110                           ;Lab11pAnew.c: 166: printf ("Cannot find button \r\n");
  2111  0164' 0E00'              	movlw	low STR_16
  2112  0166' 6E1C'              	movwf	printf@f,c
  2113  0168' 0E00'              	movlw	high STR_16
  2114  016A' 6E1D'              	movwf	printf@f+1,c
  2115  016C' EC00' F000'        	call	_printf	;wreg free
  2116                           
  2117                           ;Lab11pAnew.c: 167: }
  2118  0170' D753               	goto	l6687
  2119  0172'                    l6739:
  2120                           
  2121                           ;Lab11pAnew.c: 168: else
  2122                           ;Lab11pAnew.c: 169: {
  2123                           ;Lab11pAnew.c: 170: Do_Beep();
  2124  0172' EC00' F000'        	call	_Do_Beep	;wreg free
  2125                           
  2126                           ;Lab11pAnew.c: 171: printf ("button = %d \r\n", found);
  2127  0176' 0E00'              	movlw	low STR_17
  2128  0178' 6E1C'              	movwf	printf@f,c
  2129  017A' 0E00'              	movlw	high STR_17
  2130  017C' 6E1D'              	movwf	printf@f+1,c
  2131  017E' C01B' F01E'        	movff	_found,?_printf+2
  2132  0182' 6A1F'              	clrf	?_printf+3,c
  2133  0184' EC00' F000'        	call	_printf	;wreg free
  2134  0188' D747               	goto	l6687
  2135  018A' EF00' F000'        	goto	start
  2136  018E'                    __end_of_main:
  2137                           	opt stack 0
  2138                           tblptru	equ	0xFF8
  2139                           tblptrh	equ	0xFF7
  2140                           tblptrl	equ	0xFF6
  2141                           tablat	equ	0xFF5
  2142                           intcon	equ	0xFF2
  2143                           intcon2	equ	0xFF1
  2144                           postinc0	equ	0xFEE
  2145                           wreg	equ	0xFE8
  2146                           postdec1	equ	0xFE5
  2147                           fsr1l	equ	0xFE1
  2148                           postinc2	equ	0xFDE
  2149                           fsr2h	equ	0xFDA
  2150                           fsr2l	equ	0xFD9
  2151                           status	equ	0xFD8
  2152                           
  2153 ;; *************** function _printf *****************
  2154 ;; Defined at:
  2155 ;;		line 464 in file "E:\XC8\sources\common\doprnt.c"
  2156 ;; Parameters:    Size  Location     Type
  2157 ;;  f               2   28[COMRAM] PTR const unsigned char 
  2158 ;;		 -> STR_17(15), STR_16(22), STR_15(16), STR_14(20), 
  2159 ;;		 -> STR_13(21), STR_12(30), 
  2160 ;; Auto vars:     Size  Location     Type
  2161 ;;  idx             1   46[COMRAM] unsigned char 
  2162 ;;  tmpval          4    0        struct .
  2163 ;;  cp              3    0        PTR const unsigned char 
  2164 ;;  width           2   53[COMRAM] int 
  2165 ;;  val             2   50[COMRAM] unsigned int 
  2166 ;;  ap              2   47[COMRAM] PTR void [1]
  2167 ;;		 -> ?_printf(2), 
  2168 ;;  len             2    0        unsigned int 
  2169 ;;  c               1   55[COMRAM] char 
  2170 ;;  flag            1   52[COMRAM] unsigned char 
  2171 ;;  prec            1   49[COMRAM] char 
  2172 ;; Return value:  Size  Location     Type
  2173 ;;                  2   28[COMRAM] int 
  2174 ;; Registers used:
  2175 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2176 ;; Tracked objects:
  2177 ;;		On entry : 0/0
  2178 ;;		On exit  : 0/0
  2179 ;;		Unchanged: 0/0
  2180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2181 ;;      Params:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2182 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2183 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2184 ;;      Totals:        28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2185 ;;Total ram usage:       28 bytes
  2186 ;; Hardware stack levels used:    1
  2187 ;; Hardware stack levels required when called:    4
  2188 ;; This function calls:
  2189 ;;		___lwdiv
  2190 ;;		___lwmod
  2191 ;;		___wmul
  2192 ;;		_isdigit
  2193 ;;		_putch
  2194 ;; This function is called by:
  2195 ;;		_main
  2196 ;; This function uses a non-reentrant model
  2197 ;;
  2198                           
  2199                           	psect	text1
  2200  0000'                    __ptext1:
  2201                           	opt stack 0
  2202  0000'                    _printf:
  2203                           	opt stack 26
  2204                           
  2205                           ;doprnt.c: 466: va_list ap;
  2206                           ;doprnt.c: 499: signed char c;
  2207                           ;doprnt.c: 501: int width;
  2208                           ;doprnt.c: 506: signed char prec;
  2209                           ;doprnt.c: 508: unsigned char flag;
  2210                           ;doprnt.c: 523: union {
  2211                           ;doprnt.c: 524: unsigned long vd;
  2212                           ;doprnt.c: 525: double integ;
  2213                           ;doprnt.c: 526: } tmpval;
  2214                           ;doprnt.c: 528: unsigned int val;
  2215                           ;doprnt.c: 529: unsigned len;
  2216                           ;doprnt.c: 530: const char * cp;
  2217                           ;doprnt.c: 533: *ap = __va_start();
  2218                           
  2219                           ;incstack = 0
  2220  0000' 0E00'              	movlw	low (?_printf+2)
  2221  0002' 6E2F'              	movwf	printf@ap,c
  2222  0004' 0E00'              	movlw	high (?_printf+2)
  2223  0006' 6E30'              	movwf	printf@ap+1,c
  2224                           
  2225                           ;doprnt.c: 536: while(c = *f++) {
  2226  0008' D199               	goto	l6351
  2227  000A'                    l6225:
  2228                           
  2229                           ;doprnt.c: 538: if(c != '%')
  2230  000A' 0E25               	movlw	37
  2231  000C' 1837'              	xorwf	printf@c,w,c
  2232  000E' B4D8               	btfsc	status,2,c
  2233  0010' D004               	goto	l6229
  2234                           
  2235                           ;doprnt.c: 540: {
  2236                           ;doprnt.c: 541: (putch(c) );
  2237  0012' 5037'              	movf	printf@c,w,c
  2238  0014' EC00' F000'        	call	_putch
  2239                           
  2240                           ;doprnt.c: 542: continue;
  2241  0018' D191               	goto	l6351
  2242  001A'                    l6229:
  2243                           
  2244                           ;doprnt.c: 543: }
  2245                           ;doprnt.c: 546: width = 0;
  2246  001A' 0E00               	movlw	0
  2247  001C' 6E36'              	movwf	printf@width+1,c
  2248  001E' 0E00               	movlw	0
  2249  0020' 6E35'              	movwf	printf@width,c
  2250                           
  2251                           ;doprnt.c: 548: flag = 0;
  2252  0022' 0E00               	movlw	0
  2253  0024' 6E34'              	movwf	printf@flag,c
  2254                           
  2255                           ;doprnt.c: 551: switch(*f) {
  2256                           
  2257                           ;doprnt.c: 550: for(;;) {
  2258  0026' D005               	goto	l6235
  2259  0028'                    l6231:
  2260                           
  2261                           ;doprnt.c: 580: flag |= 0x04;
  2262  0028' 8434'              	bsf	printf@flag,2,c
  2263                           
  2264                           ;doprnt.c: 581: f++;
  2265  002A' 4A1C'              	infsnz	printf@f,f,c
  2266  002C' 2A1D'              	incf	printf@f+1,f,c
  2267                           
  2268                           ;doprnt.c: 582: continue;
  2269  002E' D001               	goto	l6235
  2270                           
  2271                           ;doprnt.c: 584: }
  2272  0030' D00B               	goto	l6237
  2273  0032'                    l6235:
  2274  0032' C01C' FFF6         	movff	printf@f,tblptrl
  2275  0036' C01D' FFF7         	movff	printf@f+1,tblptrh
  2276  003A'                    	if	0	;tblptru may be non-zero
  2277  003A'                    	endif
  2278  003A'                    	if	0	;tblptru may be non-zero
  2279  003A'                    	endif
  2280  003A' 0008               	tblrd		*
  2281  003C' 50F5               	movf	tablat,w,c
  2282                           
  2283                           ; Switch size 1, requested type "space"
  2284                           ; Number of cases is 1, Range of values is 48 to 48
  2285                           ; switch strategies available:
  2286                           ; Name         Instructions Cycles
  2287                           ; simple_byte            4     3 (average)
  2288                           ;	Chosen strategy is simple_byte
  2289  003E' 0A30               	xorlw	48	; case 48
  2290  0040' B4D8               	btfsc	status,2,c
  2291  0042' D7F2               	goto	l6231
  2292                           
  2293                           ;doprnt.c: 585: break;
  2294  0044' D001               	goto	l6237
  2295                           
  2296                           ;doprnt.c: 586: }
  2297  0046' D7F5               	goto	l6235
  2298  0048'                    l6237:
  2299                           
  2300                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2301  0048' C01C' FFF6         	movff	printf@f,tblptrl
  2302  004C' C01D' FFF7         	movff	printf@f+1,tblptrh
  2303  0050'                    	if	0	;tblptru may be non-zero
  2304  0050'                    	endif
  2305  0050'                    	if	0	;tblptru may be non-zero
  2306  0050'                    	endif
  2307  0050' 0008               	tblrd		*
  2308  0052' 50F5               	movf	tablat,w,c
  2309  0054' EC00' F000'        	call	_isdigit
  2310  0058' A0D8               	btfss	status,0,c
  2311  005A' D03B               	goto	l6253
  2312                           
  2313                           ;doprnt.c: 598: width = 0;
  2314  005C' 0E00               	movlw	0
  2315  005E' 6E36'              	movwf	printf@width+1,c
  2316  0060' 0E00               	movlw	0
  2317  0062' 6E35'              	movwf	printf@width,c
  2318  0064' D000               	goto	l6241
  2319  0066'                    l6241:
  2320                           
  2321                           ;doprnt.c: 600: width *= 10;
  2322  0066' C035' F010'        	movff	printf@width,___wmul@multiplier
  2323  006A' C036' F011'        	movff	printf@width+1,___wmul@multiplier+1
  2324  006E' 0E00               	movlw	0
  2325  0070' 6E13'              	movwf	___wmul@multiplicand+1,c
  2326  0072' 0E0A               	movlw	10
  2327  0074' 6E12'              	movwf	___wmul@multiplicand,c
  2328  0076' EC00' F000'        	call	___wmul	;wreg free
  2329  007A' C010' F035'        	movff	?___wmul,printf@width
  2330  007E' C011' F036'        	movff	?___wmul+1,printf@width+1
  2331                           
  2332                           ;doprnt.c: 601: width += *f++ - '0';
  2333  0082' 0ED0               	movlw	208
  2334  0084' 6E00'              	movwf	??_printf& (0+255),c
  2335  0086' 0EFF               	movlw	255
  2336  0088' 6E00'              	movwf	(??_printf+1)& (0+255),c
  2337  008A' C01C' FFF6         	movff	printf@f,tblptrl
  2338  008E' C01D' FFF7         	movff	printf@f+1,tblptrh
  2339  0092'                    	if	0	;tblptru may be non-zero
  2340  0092'                    	endif
  2341  0092'                    	if	0	;tblptru may be non-zero
  2342  0092'                    	endif
  2343  0092' 0008               	tblrd		*
  2344  0094' 50F5               	movf	tablat,w,c
  2345  0096' 6E00'              	movwf	(??_printf+2)& (0+255),c
  2346  0098' 6A00'              	clrf	(??_printf+3)& (0+255),c
  2347  009A' 502A'              	movf	??_printf,w,c
  2348  009C' 262C'              	addwf	??_printf+2,f,c
  2349  009E' 502B'              	movf	??_printf+1,w,c
  2350  00A0' 222D'              	addwfc	??_printf+3,f,c
  2351  00A2' 502C'              	movf	??_printf+2,w,c
  2352  00A4' 2635'              	addwf	printf@width,f,c
  2353  00A6' 502D'              	movf	??_printf+3,w,c
  2354  00A8' 2236'              	addwfc	printf@width+1,f,c
  2355  00AA' 4A1C'              	infsnz	printf@f,f,c
  2356  00AC' 2A1D'              	incf	printf@f+1,f,c
  2357                           
  2358                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2359  00AE' C01C' FFF6         	movff	printf@f,tblptrl
  2360  00B2' C01D' FFF7         	movff	printf@f+1,tblptrh
  2361  00B6'                    	if	0	;tblptru may be non-zero
  2362  00B6'                    	endif
  2363  00B6'                    	if	0	;tblptru may be non-zero
  2364  00B6'                    	endif
  2365  00B6' 0008               	tblrd		*
  2366  00B8' 50F5               	movf	tablat,w,c
  2367  00BA' EC00' F000'        	call	_isdigit
  2368  00BE' A0D8               	btfss	status,0,c
  2369  00C0' D008               	goto	l6253
  2370  00C2' D7D1               	goto	l6241
  2371                           
  2372                           ;doprnt.c: 608: }
  2373                           ;doprnt.c: 635: switch(c = *f++) {
  2374  00C4' D006               	goto	l6253
  2375                           
  2376                           ;doprnt.c: 638: goto alldone;
  2377                           
  2378                           ;doprnt.c: 637: case 0:
  2379  00C6' D148               	goto	l713
  2380                           
  2381                           ;doprnt.c: 698: case 'i':
  2382                           ;doprnt.c: 699: break;
  2383                           
  2384                           ;doprnt.c: 697: case 'd':
  2385  00C8' D01B               	goto	l676
  2386  00CA'                    l6249:
  2387                           
  2388                           ;doprnt.c: 721: flag |= 0x80;
  2389  00CA' 8E34'              	bsf	printf@flag,7,c
  2390                           
  2391                           ;doprnt.c: 723: break;
  2392  00CC' D019               	goto	l676
  2393                           
  2394                           ;doprnt.c: 813: continue;
  2395                           
  2396                           ;doprnt.c: 802: default:
  2397  00CE' D136               	goto	l6351
  2398                           
  2399                           ;doprnt.c: 822: }
  2400  00D0' D017               	goto	l676
  2401  00D2'                    l6253:
  2402  00D2' C01C' FFF6         	movff	printf@f,tblptrl
  2403  00D6' C01D' FFF7         	movff	printf@f+1,tblptrh
  2404  00DA' 4A1C'              	infsnz	printf@f,f,c
  2405  00DC' 2A1D'              	incf	printf@f+1,f,c
  2406  00DE'                    	if	0	;tblptru may be non-zero
  2407  00DE'                    	endif
  2408  00DE'                    	if	0	;tblptru may be non-zero
  2409  00DE'                    	endif
  2410  00DE' 0008               	tblrd		*
  2411  00E0' CFF5 F037'         	movff	tablat,printf@c
  2412  00E4' 5037'              	movf	printf@c,w,c
  2413                           
  2414                           ; Switch size 1, requested type "space"
  2415                           ; Number of cases is 4, Range of values is 0 to 120
  2416                           ; switch strategies available:
  2417                           ; Name         Instructions Cycles
  2418                           ; simple_byte           13     7 (average)
  2419                           ;	Chosen strategy is simple_byte
  2420  00E6' 0A00               	xorlw	0	; case 0
  2421  00E8' B4D8               	btfsc	status,2,c
  2422  00EA' D136               	goto	l713
  2423  00EC' 0A64               	xorlw	100	; case 100
  2424  00EE' B4D8               	btfsc	status,2,c
  2425  00F0' D007               	goto	l676
  2426  00F2' 0A0D               	xorlw	13	; case 105
  2427  00F4' B4D8               	btfsc	status,2,c
  2428  00F6' D004               	goto	l676
  2429  00F8' 0A11               	xorlw	17	; case 120
  2430  00FA' B4D8               	btfsc	status,2,c
  2431  00FC' D7E6               	goto	l6249
  2432  00FE' D11E               	goto	l6351
  2433  0100'                    l676:
  2434                           
  2435                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  2436  0100' BE34'              	btfsc	printf@flag,7,c
  2437  0102' D015               	goto	l6265
  2438                           
  2439                           ;doprnt.c: 1253: {
  2440                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2441  0104' C02F' FFD9         	movff	printf@ap,fsr2l
  2442  0108' C030' FFDA         	movff	printf@ap+1,fsr2h
  2443  010C' CFDE F032'         	movff	postinc2,printf@val
  2444  0110' CFDD F033'         	movff	postdec2,printf@val+1
  2445  0114' 0E02               	movlw	2
  2446  0116' 262F'              	addwf	printf@ap,f,c
  2447  0118' 0E00               	movlw	0
  2448  011A' 2230'              	addwfc	printf@ap+1,f,c
  2449                           
  2450                           ;doprnt.c: 1261: if((int)val < 0) {
  2451  011C' AE33'              	btfss	printf@val+1,7,c
  2452  011E' D04E               	goto	l6299
  2453                           
  2454                           ;doprnt.c: 1262: flag |= 0x03;
  2455  0120' 0E03               	movlw	3
  2456  0122' 1234'              	iorwf	printf@flag,f,c
  2457                           
  2458                           ;doprnt.c: 1263: val = -val;
  2459  0124' 6C32'              	negf	printf@val,c
  2460  0126' 1E33'              	comf	printf@val+1,f,c
  2461  0128' B0D8               	btfsc	status,0,c
  2462  012A' 2A33'              	incf	printf@val+1,f,c
  2463                           
  2464                           ;doprnt.c: 1264: }
  2465                           ;doprnt.c: 1266: }
  2466  012C' D047               	goto	l6299
  2467  012E'                    l6265:
  2468                           
  2469                           ;doprnt.c: 1268: else
  2470                           ;doprnt.c: 1273: {
  2471                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2472  012E' C02F' FFD9         	movff	printf@ap,fsr2l
  2473  0132' C030' FFDA         	movff	printf@ap+1,fsr2h
  2474  0136' CFDE F032'         	movff	postinc2,printf@val
  2475  013A' CFDD F033'         	movff	postdec2,printf@val+1
  2476  013E' 0E02               	movlw	2
  2477  0140' 262F'              	addwf	printf@ap,f,c
  2478  0142' 0E00               	movlw	0
  2479  0144' 2230'              	addwfc	printf@ap+1,f,c
  2480                           
  2481                           ;doprnt.c: 1287: }
  2482                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  2483  0146' D03A               	goto	l6299
  2484  0148'                    l6269:
  2485                           
  2486                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2487  0148' 0E01               	movlw	1
  2488  014A' 6E37'              	movwf	printf@c,c
  2489  014C'                    l6271:
  2490  014C' 0E05               	movlw	5
  2491  014E' 1837'              	xorwf	printf@c,w,c
  2492  0150' B4D8               	btfsc	status,2,c
  2493  0152' D03D               	goto	l6301
  2494  0154' D001               	goto	l6275
  2495  0156' D03B               	goto	l6301
  2496  0158'                    l6275:
  2497                           
  2498                           ;doprnt.c: 1306: if(val < dpowers[c])
  2499  0158' 5037'              	movf	printf@c,w,c
  2500  015A' 0D02               	mullw	2
  2501  015C' 0E00'              	movlw	low _dpowers
  2502  015E' 24F3               	addwf	prodl,w,c
  2503  0160' 6EF6               	movwf	tblptrl,c
  2504  0162' 0E00'              	movlw	high _dpowers
  2505  0164' 20F4               	addwfc	prodh,w,c
  2506  0166' 6EF7               	movwf	tblptrh,c
  2507  0168'                    	if	0	;There are less than 3 active tblptr bytes
  2508  0168'                    	endif
  2509  0168' 0009               	tblrd		*+
  2510  016A' 50F5               	movf	tablat,w,c
  2511  016C' 5C32'              	subwf	printf@val,w,c
  2512  016E' 0009               	tblrd		*+
  2513  0170' 50F5               	movf	tablat,w,c
  2514  0172' 5833'              	subwfb	printf@val+1,w,c
  2515  0174' A0D8               	btfss	status,0,c
  2516  0176' D02B               	goto	l6301
  2517  0178' D001               	goto	l6279
  2518                           
  2519                           ;doprnt.c: 1307: break;
  2520  017A' D029               	goto	l6301
  2521  017C'                    l6279:
  2522  017C' 2A37'              	incf	printf@c,f,c
  2523  017E' D7E6               	goto	l6271
  2524                           
  2525                           ;doprnt.c: 1309: break;
  2526  0180' D026               	goto	l6301
  2527  0182'                    l6283:
  2528                           
  2529                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2530  0182' 0E01               	movlw	1
  2531  0184' 6E37'              	movwf	printf@c,c
  2532  0186'                    l6285:
  2533  0186' 0E04               	movlw	4
  2534  0188' 1837'              	xorwf	printf@c,w,c
  2535  018A' B4D8               	btfsc	status,2,c
  2536  018C' D020               	goto	l6301
  2537  018E' D001               	goto	l6289
  2538  0190' D01E               	goto	l6301
  2539  0192'                    l6289:
  2540                           
  2541                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2542  0192' 5037'              	movf	printf@c,w,c
  2543  0194' 0D02               	mullw	2
  2544  0196' 0E00'              	movlw	low _hexpowers
  2545  0198' 24F3               	addwf	prodl,w,c
  2546  019A' 6EF6               	movwf	tblptrl,c
  2547  019C' 0E00'              	movlw	high _hexpowers
  2548  019E' 20F4               	addwfc	prodh,w,c
  2549  01A0' 6EF7               	movwf	tblptrh,c
  2550  01A2'                    	if	0	;There are less than 3 active tblptr bytes
  2551  01A2'                    	endif
  2552  01A2' 0009               	tblrd		*+
  2553  01A4' 50F5               	movf	tablat,w,c
  2554  01A6' 5C32'              	subwf	printf@val,w,c
  2555  01A8' 0009               	tblrd		*+
  2556  01AA' 50F5               	movf	tablat,w,c
  2557  01AC' 5833'              	subwfb	printf@val+1,w,c
  2558  01AE' A0D8               	btfss	status,0,c
  2559  01B0' D00E               	goto	l6301
  2560  01B2' D001               	goto	l6293
  2561                           
  2562                           ;doprnt.c: 1318: break;
  2563  01B4' D00C               	goto	l6301
  2564  01B6'                    l6293:
  2565  01B6' 2A37'              	incf	printf@c,f,c
  2566  01B8' D7E6               	goto	l6285
  2567                           
  2568                           ;doprnt.c: 1336: }
  2569                           
  2570                           ;doprnt.c: 1320: break;
  2571  01BA' D009               	goto	l6301
  2572  01BC'                    l6299:
  2573  01BC' 5034'              	movf	printf@flag,w,c
  2574  01BE' 0B80               	andlw	128
  2575                           
  2576                           ; Switch size 1, requested type "space"
  2577                           ; Number of cases is 2, Range of values is 0 to 128
  2578                           ; switch strategies available:
  2579                           ; Name         Instructions Cycles
  2580                           ; simple_byte            7     4 (average)
  2581                           ;	Chosen strategy is simple_byte
  2582  01C0' 0A00               	xorlw	0	; case 0
  2583  01C2' B4D8               	btfsc	status,2,c
  2584  01C4' D7C1               	goto	l6269
  2585  01C6' 0A80               	xorlw	128	; case 128
  2586  01C8' B4D8               	btfsc	status,2,c
  2587  01CA' D7DB               	goto	l6283
  2588  01CC' D000               	goto	l6301
  2589  01CE'                    l6301:
  2590                           
  2591                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2592  01CE' 5035'              	movf	printf@width,w,c
  2593  01D0' 1036'              	iorwf	printf@width+1,w,c
  2594  01D2' B4D8               	btfsc	status,2,c
  2595  01D4' D00A               	goto	l6307
  2596  01D6' C034' F02A'        	movff	printf@flag,??_printf
  2597  01DA' 0E03               	movlw	3
  2598  01DC' 162A'              	andwf	??_printf,f,c
  2599  01DE' B4D8               	btfsc	status,2,c
  2600  01E0' D004               	goto	l6307
  2601                           
  2602                           ;doprnt.c: 1346: width--;
  2603  01E2' 0635'              	decf	printf@width,f,c
  2604  01E4' A0D8               	btfss	status,0,c
  2605  01E6' 0636'              	decf	printf@width+1,f,c
  2606  01E8' D000               	goto	l6307
  2607  01EA'                    l6307:
  2608                           
  2609                           ;doprnt.c: 1381: if(width > c)
  2610  01EA' 0E80               	movlw	128
  2611  01EC' BE37'              	btfsc	printf@c,7,c
  2612  01EE' 0E7F               	movlw	127
  2613  01F0' 6E00'              	movwf	??_printf& (0+255),c
  2614  01F2' 5035'              	movf	printf@width,w,c
  2615  01F4' 5C37'              	subwf	printf@c,w,c
  2616  01F6' 5036'              	movf	printf@width+1,w,c
  2617  01F8' 0A80               	xorlw	128
  2618  01FA' 5800'              	subwfb	??_printf& (0+255),w,c
  2619  01FC' B0D8               	btfsc	status,0,c
  2620  01FE' D007               	goto	l6311
  2621                           
  2622                           ;doprnt.c: 1382: width -= c;
  2623  0200' 5037'              	movf	printf@c,w,c
  2624  0202' 5E35'              	subwf	printf@width,f,c
  2625  0204' 0E00               	movlw	0
  2626  0206' BE37'              	btfsc	printf@c,7,c
  2627  0208' 0EFF               	movlw	255
  2628  020A' 5A36'              	subwfb	printf@width+1,f,c
  2629  020C' D005               	goto	l6313
  2630  020E'                    l6311:
  2631                           
  2632                           ;doprnt.c: 1383: else
  2633                           ;doprnt.c: 1384: width = 0;
  2634  020E' 0E00               	movlw	0
  2635  0210' 6E36'              	movwf	printf@width+1,c
  2636  0212' 0E00               	movlw	0
  2637  0214' 6E35'              	movwf	printf@width,c
  2638  0216' D000               	goto	l6313
  2639  0218'                    l6313:
  2640                           
  2641                           ;doprnt.c: 1387: if(flag & 0x04) {
  2642  0218' A434'              	btfss	printf@flag,2,c
  2643  021A' D01A               	goto	l6325
  2644                           
  2645                           ;doprnt.c: 1392: if(flag & 0x03)
  2646  021C' C034' F02A'        	movff	printf@flag,??_printf
  2647  0220' 0E03               	movlw	3
  2648  0222' 162A'              	andwf	??_printf,f,c
  2649  0224' B4D8               	btfsc	status,2,c
  2650  0226' D004               	goto	l6319
  2651                           
  2652                           ;doprnt.c: 1393: (putch('-') );
  2653  0228' 0E2D               	movlw	45
  2654  022A' EC00' F000'        	call	_putch
  2655  022E' D000               	goto	l6319
  2656  0230'                    l6319:
  2657                           
  2658                           ;doprnt.c: 1415: if(width)
  2659  0230' 5035'              	movf	printf@width,w,c
  2660  0232' 1036'              	iorwf	printf@width+1,w,c
  2661  0234' B4D8               	btfsc	status,2,c
  2662  0236' D026               	goto	l6335
  2663  0238'                    l6321:
  2664                           
  2665                           ;doprnt.c: 1417: (putch('0') );
  2666  0238' 0E30               	movlw	48
  2667  023A' EC00' F000'        	call	_putch
  2668                           
  2669                           ;doprnt.c: 1418: while(--width);
  2670  023E' 0635'              	decf	printf@width,f,c
  2671  0240' A0D8               	btfss	status,0,c
  2672  0242' 0636'              	decf	printf@width+1,f,c
  2673  0244' 5035'              	movf	printf@width,w,c
  2674  0246' 1036'              	iorwf	printf@width+1,w,c
  2675  0248' B4D8               	btfsc	status,2,c
  2676  024A' D01C               	goto	l6335
  2677  024C' D7F5               	goto	l6321
  2678                           
  2679                           ;doprnt.c: 1420: } else
  2680  024E' D01A               	goto	l6335
  2681  0250'                    l6325:
  2682                           
  2683                           ;doprnt.c: 1422: {
  2684                           ;doprnt.c: 1424: if(width
  2685                           ;doprnt.c: 1428: )
  2686  0250' 5035'              	movf	printf@width,w,c
  2687  0252' 1036'              	iorwf	printf@width+1,w,c
  2688  0254' B4D8               	btfsc	status,2,c
  2689  0256' D00C               	goto	l6331
  2690  0258'                    l6327:
  2691                           
  2692                           ;doprnt.c: 1430: (putch(' ') );
  2693  0258' 0E20               	movlw	32
  2694  025A' EC00' F000'        	call	_putch
  2695                           
  2696                           ;doprnt.c: 1431: while(--width);
  2697  025E' 0635'              	decf	printf@width,f,c
  2698  0260' A0D8               	btfss	status,0,c
  2699  0262' 0636'              	decf	printf@width+1,f,c
  2700  0264' 5035'              	movf	printf@width,w,c
  2701  0266' 1036'              	iorwf	printf@width+1,w,c
  2702  0268' B4D8               	btfsc	status,2,c
  2703  026A' D002               	goto	l6331
  2704  026C' D7F5               	goto	l6327
  2705  026E' D000               	goto	l6331
  2706  0270'                    l6331:
  2707                           
  2708                           ;doprnt.c: 1438: if(flag & 0x03)
  2709  0270' C034' F02A'        	movff	printf@flag,??_printf
  2710  0274' 0E03               	movlw	3
  2711  0276' 162A'              	andwf	??_printf,f,c
  2712  0278' B4D8               	btfsc	status,2,c
  2713  027A' D004               	goto	l6335
  2714                           
  2715                           ;doprnt.c: 1439: (putch('-') );
  2716  027C' 0E2D               	movlw	45
  2717  027E' EC00' F000'        	call	_putch
  2718  0282' D000               	goto	l6335
  2719  0284'                    l6335:
  2720                           
  2721                           ;doprnt.c: 1469: }
  2722                           ;doprnt.c: 1472: prec = c;
  2723  0284' C037' F031'        	movff	printf@c,printf@prec
  2724                           
  2725                           ;doprnt.c: 1474: while(prec--) {
  2726  0288' D053               	goto	l6349
  2727                           
  2728                           ;doprnt.c: 1476: switch((unsigned char)(flag & 0x80))
  2729  028A' D045               	goto	l6345
  2730  028C'                    l6337:
  2731                           
  2732                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2733  028C' 5031'              	movf	printf@prec,w,c
  2734  028E' 0D02               	mullw	2
  2735  0290' 0E00'              	movlw	low _dpowers
  2736  0292' 24F3               	addwf	prodl,w,c
  2737  0294' 6EF6               	movwf	tblptrl,c
  2738  0296' 0E00'              	movlw	high _dpowers
  2739  0298' 20F4               	addwfc	prodh,w,c
  2740  029A' 6EF7               	movwf	tblptrh,c
  2741  029C'                    	if	0	;There are less than 3 active tblptr bytes
  2742  029C'                    	endif
  2743  029C' 0009               	tblrd		*+
  2744  029E' CFF5 F012'         	movff	tablat,___lwdiv@divisor
  2745  02A2' 000A               	tblrd		*-
  2746  02A4' CFF5 F013'         	movff	tablat,___lwdiv@divisor+1
  2747  02A8' C032' F010'        	movff	printf@val,___lwdiv@dividend
  2748  02AC' C033' F011'        	movff	printf@val+1,___lwdiv@dividend+1
  2749  02B0' EC00' F000'        	call	___lwdiv	;wreg free
  2750  02B4' C010' F017'        	movff	?___lwdiv,___lwmod@dividend
  2751  02B8' C011' F018'        	movff	?___lwdiv+1,___lwmod@dividend+1
  2752  02BC' 0E00               	movlw	0
  2753  02BE' 6E1A'              	movwf	___lwmod@divisor+1,c
  2754  02C0' 0E0A               	movlw	10
  2755  02C2' 6E19'              	movwf	___lwmod@divisor,c
  2756  02C4' EC00' F000'        	call	___lwmod	;wreg free
  2757  02C8' 5017'              	movf	?___lwmod,w,c
  2758  02CA' 0F30               	addlw	48
  2759  02CC' 6E37'              	movwf	printf@c,c
  2760                           
  2761                           ;doprnt.c: 1491: break;
  2762  02CE' D02C               	goto	l6347
  2763  02D0'                    l6339:
  2764                           
  2765                           ;doprnt.c: 1499: {
  2766                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  2767  02D0' C032' F010'        	movff	printf@val,___lwdiv@dividend
  2768  02D4' C033' F011'        	movff	printf@val+1,___lwdiv@dividend+1
  2769  02D8' 5031'              	movf	printf@prec,w,c
  2770  02DA' 0D02               	mullw	2
  2771  02DC' 0E00'              	movlw	low _hexpowers
  2772  02DE' 24F3               	addwf	prodl,w,c
  2773  02E0' 6EF6               	movwf	tblptrl,c
  2774  02E2' 0E00'              	movlw	high _hexpowers
  2775  02E4' 20F4               	addwfc	prodh,w,c
  2776  02E6' 6EF7               	movwf	tblptrh,c
  2777  02E8'                    	if	0	;There are less than 3 active tblptr bytes
  2778  02E8'                    	endif
  2779  02E8' 0009               	tblrd		*+
  2780  02EA' CFF5 F012'         	movff	tablat,___lwdiv@divisor
  2781  02EE' 000A               	tblrd		*-
  2782  02F0' CFF5 F013'         	movff	tablat,___lwdiv@divisor+1
  2783  02F4' EC00' F000'        	call	___lwdiv	;wreg free
  2784  02F8' 5010'              	movf	?___lwdiv,w,c
  2785  02FA' 0B0F               	andlw	15
  2786  02FC' 6E2E'              	movwf	printf@idx,c
  2787                           
  2788                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  2789  02FE' 502E'              	movf	printf@idx,w,c
  2790  0300' 0D01               	mullw	1
  2791  0302' 0E00'              	movlw	low STR_18
  2792  0304' 24F3               	addwf	prodl,w,c
  2793  0306' 6EF6               	movwf	tblptrl,c
  2794  0308' 0E00'              	movlw	high STR_18
  2795  030A' 20F4               	addwfc	prodh,w,c
  2796  030C' 6EF7               	movwf	tblptrh,c
  2797  030E'                    	if	0	;There are less than 3 active tblptr bytes
  2798  030E'                    	endif
  2799  030E' 0008               	tblrd		*
  2800  0310' CFF5 F037'         	movff	tablat,printf@c
  2801                           
  2802                           ;doprnt.c: 1523: }
  2803                           
  2804                           ;doprnt.c: 1508: }
  2805                           ;doprnt.c: 1510: break;
  2806  0314' D009               	goto	l6347
  2807  0316'                    l6345:
  2808  0316' 5034'              	movf	printf@flag,w,c
  2809  0318' 0B80               	andlw	128
  2810                           
  2811                           ; Switch size 1, requested type "space"
  2812                           ; Number of cases is 2, Range of values is 0 to 128
  2813                           ; switch strategies available:
  2814                           ; Name         Instructions Cycles
  2815                           ; simple_byte            7     4 (average)
  2816                           ;	Chosen strategy is simple_byte
  2817  031A' 0A00               	xorlw	0	; case 0
  2818  031C' B4D8               	btfsc	status,2,c
  2819  031E' D7B6               	goto	l6337
  2820  0320' 0A80               	xorlw	128	; case 128
  2821  0322' B4D8               	btfsc	status,2,c
  2822  0324' D7D5               	goto	l6339
  2823  0326' D000               	goto	l6347
  2824  0328'                    l6347:
  2825                           
  2826                           ;doprnt.c: 1524: (putch(c) );
  2827  0328' 5037'              	movf	printf@c,w,c
  2828  032A' EC00' F000'        	call	_putch
  2829  032E' D000               	goto	l6349
  2830  0330'                    l6349:
  2831  0330' 0631'              	decf	printf@prec,f,c
  2832  0332' 2831'              	incf	printf@prec,w,c
  2833  0334' B4D8               	btfsc	status,2,c
  2834  0336' D002               	goto	l6351
  2835  0338' D7EE               	goto	l6345
  2836  033A' D000               	goto	l6351
  2837  033C'                    l6351:
  2838  033C' C01C' FFF6         	movff	printf@f,tblptrl
  2839  0340' C01D' FFF7         	movff	printf@f+1,tblptrh
  2840  0344' 4A1C'              	infsnz	printf@f,f,c
  2841  0346' 2A1D'              	incf	printf@f+1,f,c
  2842  0348'                    	if	0	;tblptru may be non-zero
  2843  0348'                    	endif
  2844  0348'                    	if	0	;tblptru may be non-zero
  2845  0348'                    	endif
  2846  0348' 0008               	tblrd		*
  2847  034A' CFF5 F037'         	movff	tablat,printf@c
  2848  034E' 5037'              	movf	printf@c,w,c
  2849  0350' B4D8               	btfsc	status,2,c
  2850  0352' D002               	goto	l713
  2851  0354' D65A               	goto	l6225
  2852  0356' D000               	goto	l713
  2853  0358'                    l713:
  2854  0358' 0012               	return		;funcret
  2855  035A'                    __end_of_printf:
  2856                           	opt stack 0
  2857                           tblptru	equ	0xFF8
  2858                           tblptrh	equ	0xFF7
  2859                           tblptrl	equ	0xFF6
  2860                           tablat	equ	0xFF5
  2861                           prodh	equ	0xFF4
  2862                           prodl	equ	0xFF3
  2863                           intcon	equ	0xFF2
  2864                           intcon2	equ	0xFF1
  2865                           postinc0	equ	0xFEE
  2866                           wreg	equ	0xFE8
  2867                           postdec1	equ	0xFE5
  2868                           fsr1l	equ	0xFE1
  2869                           postinc2	equ	0xFDE
  2870                           postdec2	equ	0xFDD
  2871                           fsr2h	equ	0xFDA
  2872                           fsr2l	equ	0xFD9
  2873                           status	equ	0xFD8
  2874                           
  2875 ;; *************** function _putch *****************
  2876 ;; Defined at:
  2877 ;;		line 81 in file "Lab11pAnew.c"
  2878 ;; Parameters:    Size  Location     Type
  2879 ;;  c               1    wreg     unsigned char 
  2880 ;; Auto vars:     Size  Location     Type
  2881 ;;  c               1   16[COMRAM] unsigned char 
  2882 ;; Return value:  Size  Location     Type
  2883 ;;		None               void
  2884 ;; Registers used:
  2885 ;;		wreg
  2886 ;; Tracked objects:
  2887 ;;		On entry : 0/0
  2888 ;;		On exit  : 0/0
  2889 ;;		Unchanged: 0/0
  2890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2891 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2892 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2893 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2894 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2895 ;;Total ram usage:        1 bytes
  2896 ;; Hardware stack levels used:    1
  2897 ;; Hardware stack levels required when called:    3
  2898 ;; This function calls:
  2899 ;;		Nothing
  2900 ;; This function is called by:
  2901 ;;		_printf
  2902 ;; This function uses a non-reentrant model
  2903 ;;
  2904                           
  2905                           	psect	text2
  2906  0000'                    __ptext2:
  2907                           	opt stack 0
  2908  0000'                    _putch:
  2909                           	opt stack 26
  2910                           
  2911                           ;incstack = 0
  2912                           ;putch@c stored from wreg
  2913  0000' 6E10'              	movwf	putch@c,c
  2914                           
  2915                           ;Lab11pAnew.c: 83: while (!TRMT);
  2916  0002' D000               	goto	l622
  2917  0004'                    l622:
  2918  0004' A2AC               	btfss	4012,1,c	;volatile
  2919  0006' D7FE               	goto	l622
  2920                           
  2921                           ;Lab11pAnew.c: 84: TXREG = c;
  2922  0008' C010' FFAD         	movff	putch@c,4013	;volatile
  2923  000C' 0012               	return		;funcret
  2924  000E'                    __end_of_putch:
  2925                           	opt stack 0
  2926                           tblptru	equ	0xFF8
  2927                           tblptrh	equ	0xFF7
  2928                           tblptrl	equ	0xFF6
  2929                           tablat	equ	0xFF5
  2930                           prodh	equ	0xFF4
  2931                           prodl	equ	0xFF3
  2932                           intcon	equ	0xFF2
  2933                           intcon2	equ	0xFF1
  2934                           postinc0	equ	0xFEE
  2935                           wreg	equ	0xFE8
  2936                           postdec1	equ	0xFE5
  2937                           fsr1l	equ	0xFE1
  2938                           postinc2	equ	0xFDE
  2939                           postdec2	equ	0xFDD
  2940                           fsr2h	equ	0xFDA
  2941                           fsr2l	equ	0xFD9
  2942                           status	equ	0xFD8
  2943                           
  2944 ;; *************** function _isdigit *****************
  2945 ;; Defined at:
  2946 ;;		line 8 in file "E:\XC8\sources\common\isdigit.c"
  2947 ;; Parameters:    Size  Location     Type
  2948 ;;  c               1    wreg     unsigned char 
  2949 ;; Auto vars:     Size  Location     Type
  2950 ;;  c               1   18[COMRAM] unsigned char 
  2951 ;; Return value:  Size  Location     Type
  2952 ;;		None               void
  2953 ;; Registers used:
  2954 ;;		wreg, status,2, status,0
  2955 ;; Tracked objects:
  2956 ;;		On entry : 0/0
  2957 ;;		On exit  : 0/0
  2958 ;;		Unchanged: 0/0
  2959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2960 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2961 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2962 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2963 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2964 ;;Total ram usage:        3 bytes
  2965 ;; Hardware stack levels used:    1
  2966 ;; Hardware stack levels required when called:    3
  2967 ;; This function calls:
  2968 ;;		Nothing
  2969 ;; This function is called by:
  2970 ;;		_printf
  2971 ;; This function uses a non-reentrant model
  2972 ;;
  2973                           
  2974                           	psect	text3
  2975  0000'                    __ptext3:
  2976                           	opt stack 0
  2977  0000'                    _isdigit:
  2978                           	opt stack 26
  2979                           
  2980                           ;incstack = 0
  2981                           ;isdigit@c stored from wreg
  2982  0000' 6E12'              	movwf	isdigit@c,c
  2983  0002' 0E00               	movlw	0
  2984  0004' 6E11'              	movwf	_isdigit$2012,c
  2985  0006' 0E3A               	movlw	58
  2986  0008' 6012'              	cpfslt	isdigit@c,c
  2987  000A' D006               	goto	l5837
  2988  000C' 0E2F               	movlw	47
  2989  000E' 6412'              	cpfsgt	isdigit@c,c
  2990  0010' D003               	goto	l5837
  2991  0012' 0E01               	movlw	1
  2992  0014' 6E11'              	movwf	_isdigit$2012,c
  2993  0016' D000               	goto	l5837
  2994  0018'                    l5837:
  2995  0018' C011' F010'        	movff	_isdigit$2012,??_isdigit
  2996  001C' 3010'              	rrcf	??_isdigit,w,c
  2997  001E' D000               	goto	l1180
  2998  0020'                    l1180:
  2999  0020' 0012               	return		;funcret
  3000  0022'                    __end_of_isdigit:
  3001                           	opt stack 0
  3002                           tblptru	equ	0xFF8
  3003                           tblptrh	equ	0xFF7
  3004                           tblptrl	equ	0xFF6
  3005                           tablat	equ	0xFF5
  3006                           prodh	equ	0xFF4
  3007                           prodl	equ	0xFF3
  3008                           intcon	equ	0xFF2
  3009                           intcon2	equ	0xFF1
  3010                           postinc0	equ	0xFEE
  3011                           wreg	equ	0xFE8
  3012                           postdec1	equ	0xFE5
  3013                           fsr1l	equ	0xFE1
  3014                           postinc2	equ	0xFDE
  3015                           postdec2	equ	0xFDD
  3016                           fsr2h	equ	0xFDA
  3017                           fsr2l	equ	0xFD9
  3018                           status	equ	0xFD8
  3019                           
  3020 ;; *************** function ___lwmod *****************
  3021 ;; Defined at:
  3022 ;;		line 8 in file "E:\XC8\sources\common\lwmod.c"
  3023 ;; Parameters:    Size  Location     Type
  3024 ;;  dividend        2   23[COMRAM] unsigned int 
  3025 ;;  divisor         2   25[COMRAM] unsigned int 
  3026 ;; Auto vars:     Size  Location     Type
  3027 ;;  counter         1   27[COMRAM] unsigned char 
  3028 ;; Return value:  Size  Location     Type
  3029 ;;                  2   23[COMRAM] unsigned int 
  3030 ;; Registers used:
  3031 ;;		wreg, status,2, status,0
  3032 ;; Tracked objects:
  3033 ;;		On entry : 0/0
  3034 ;;		On exit  : 0/0
  3035 ;;		Unchanged: 0/0
  3036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3037 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3038 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3039 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3040 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3041 ;;Total ram usage:        5 bytes
  3042 ;; Hardware stack levels used:    1
  3043 ;; Hardware stack levels required when called:    3
  3044 ;; This function calls:
  3045 ;;		Nothing
  3046 ;; This function is called by:
  3047 ;;		_printf
  3048 ;; This function uses a non-reentrant model
  3049 ;;
  3050                           
  3051                           	psect	text4
  3052  0000'                    __ptext4:
  3053                           	opt stack 0
  3054  0000'                    ___lwmod:
  3055                           	opt stack 26
  3056                           
  3057                           ;incstack = 0
  3058  0000' 5019'              	movf	___lwmod@divisor,w,c
  3059  0002' 101A'              	iorwf	___lwmod@divisor+1,w,c
  3060  0004' B4D8               	btfsc	status,2,c
  3061  0006' D01D               	goto	l1282
  3062  0008' 0E01               	movlw	1
  3063  000A' 6E1B'              	movwf	___lwmod@counter,c
  3064  000C' D005               	goto	l5949
  3065  000E'                    l5947:
  3066  000E' 90D8               	bcf	status,0,c
  3067  0010' 3619'              	rlcf	___lwmod@divisor,f,c
  3068  0012' 361A'              	rlcf	___lwmod@divisor+1,f,c
  3069  0014' 2A1B'              	incf	___lwmod@counter,f,c
  3070  0016' D000               	goto	l5949
  3071  0018'                    l5949:
  3072  0018' BE1A'              	btfsc	___lwmod@divisor+1,7,c
  3073  001A' D002               	goto	l5951
  3074  001C' D7F8               	goto	l5947
  3075  001E' D000               	goto	l5951
  3076  0020'                    l5951:
  3077  0020' 5019'              	movf	___lwmod@divisor,w,c
  3078  0022' 5C17'              	subwf	___lwmod@dividend,w,c
  3079  0024' 501A'              	movf	___lwmod@divisor+1,w,c
  3080  0026' 5818'              	subwfb	___lwmod@dividend+1,w,c
  3081  0028' A0D8               	btfss	status,0,c
  3082  002A' D005               	goto	l5955
  3083  002C' 5019'              	movf	___lwmod@divisor,w,c
  3084  002E' 5E17'              	subwf	___lwmod@dividend,f,c
  3085  0030' 501A'              	movf	___lwmod@divisor+1,w,c
  3086  0032' 5A18'              	subwfb	___lwmod@dividend+1,f,c
  3087  0034' D000               	goto	l5955
  3088  0036'                    l5955:
  3089  0036' 90D8               	bcf	status,0,c
  3090  0038' 321A'              	rrcf	___lwmod@divisor+1,f,c
  3091  003A' 3219'              	rrcf	___lwmod@divisor,f,c
  3092  003C' 2E1B'              	decfsz	___lwmod@counter,f,c
  3093  003E' D7F0               	goto	l5951
  3094  0040' D000               	goto	l1282
  3095  0042'                    l1282:
  3096  0042' C017' F017'        	movff	___lwmod@dividend,?___lwmod
  3097  0046' C018' F018'        	movff	___lwmod@dividend+1,?___lwmod+1
  3098  004A' 0012               	return		;funcret
  3099  004C'                    __end_of___lwmod:
  3100                           	opt stack 0
  3101                           tblptru	equ	0xFF8
  3102                           tblptrh	equ	0xFF7
  3103                           tblptrl	equ	0xFF6
  3104                           tablat	equ	0xFF5
  3105                           prodh	equ	0xFF4
  3106                           prodl	equ	0xFF3
  3107                           intcon	equ	0xFF2
  3108                           intcon2	equ	0xFF1
  3109                           postinc0	equ	0xFEE
  3110                           wreg	equ	0xFE8
  3111                           postdec1	equ	0xFE5
  3112                           fsr1l	equ	0xFE1
  3113                           postinc2	equ	0xFDE
  3114                           postdec2	equ	0xFDD
  3115                           fsr2h	equ	0xFDA
  3116                           fsr2l	equ	0xFD9
  3117                           status	equ	0xFD8
  3118                           
  3119 ;; *************** function ___lwdiv *****************
  3120 ;; Defined at:
  3121 ;;		line 8 in file "E:\XC8\sources\common\lwdiv.c"
  3122 ;; Parameters:    Size  Location     Type
  3123 ;;  dividend        2   16[COMRAM] unsigned int 
  3124 ;;  divisor         2   18[COMRAM] unsigned int 
  3125 ;; Auto vars:     Size  Location     Type
  3126 ;;  quotient        2   21[COMRAM] unsigned int 
  3127 ;;  counter         1   20[COMRAM] unsigned char 
  3128 ;; Return value:  Size  Location     Type
  3129 ;;                  2   16[COMRAM] unsigned int 
  3130 ;; Registers used:
  3131 ;;		wreg, status,2, status,0
  3132 ;; Tracked objects:
  3133 ;;		On entry : 0/0
  3134 ;;		On exit  : 0/0
  3135 ;;		Unchanged: 0/0
  3136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3137 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3138 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3139 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3140 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3141 ;;Total ram usage:        7 bytes
  3142 ;; Hardware stack levels used:    1
  3143 ;; Hardware stack levels required when called:    3
  3144 ;; This function calls:
  3145 ;;		Nothing
  3146 ;; This function is called by:
  3147 ;;		_printf
  3148 ;; This function uses a non-reentrant model
  3149 ;;
  3150                           
  3151                           	psect	text5
  3152  0000'                    __ptext5:
  3153                           	opt stack 0
  3154  0000'                    ___lwdiv:
  3155                           	opt stack 26
  3156                           
  3157                           ;incstack = 0
  3158  0000' 0E00               	movlw	0
  3159  0002' 6E16'              	movwf	___lwdiv@quotient+1,c
  3160  0004' 0E00               	movlw	0
  3161  0006' 6E15'              	movwf	___lwdiv@quotient,c
  3162  0008' 5012'              	movf	___lwdiv@divisor,w,c
  3163  000A' 1013'              	iorwf	___lwdiv@divisor+1,w,c
  3164  000C' B4D8               	btfsc	status,2,c
  3165  000E' D021               	goto	l1272
  3166  0010' 0E01               	movlw	1
  3167  0012' 6E14'              	movwf	___lwdiv@counter,c
  3168  0014' D005               	goto	l5929
  3169  0016'                    l5927:
  3170  0016' 90D8               	bcf	status,0,c
  3171  0018' 3612'              	rlcf	___lwdiv@divisor,f,c
  3172  001A' 3613'              	rlcf	___lwdiv@divisor+1,f,c
  3173  001C' 2A14'              	incf	___lwdiv@counter,f,c
  3174  001E' D000               	goto	l5929
  3175  0020'                    l5929:
  3176  0020' BE13'              	btfsc	___lwdiv@divisor+1,7,c
  3177  0022' D002               	goto	l5931
  3178  0024' D7F8               	goto	l5927
  3179  0026' D000               	goto	l5931
  3180  0028'                    l5931:
  3181  0028' 90D8               	bcf	status,0,c
  3182  002A' 3615'              	rlcf	___lwdiv@quotient,f,c
  3183  002C' 3616'              	rlcf	___lwdiv@quotient+1,f,c
  3184  002E' 5012'              	movf	___lwdiv@divisor,w,c
  3185  0030' 5C10'              	subwf	___lwdiv@dividend,w,c
  3186  0032' 5013'              	movf	___lwdiv@divisor+1,w,c
  3187  0034' 5811'              	subwfb	___lwdiv@dividend+1,w,c
  3188  0036' A0D8               	btfss	status,0,c
  3189  0038' D006               	goto	l5939
  3190  003A' 5012'              	movf	___lwdiv@divisor,w,c
  3191  003C' 5E10'              	subwf	___lwdiv@dividend,f,c
  3192  003E' 5013'              	movf	___lwdiv@divisor+1,w,c
  3193  0040' 5A11'              	subwfb	___lwdiv@dividend+1,f,c
  3194  0042' 8015'              	bsf	___lwdiv@quotient,0,c
  3195  0044' D000               	goto	l5939
  3196  0046'                    l5939:
  3197  0046' 90D8               	bcf	status,0,c
  3198  0048' 3213'              	rrcf	___lwdiv@divisor+1,f,c
  3199  004A' 3212'              	rrcf	___lwdiv@divisor,f,c
  3200  004C' 2E14'              	decfsz	___lwdiv@counter,f,c
  3201  004E' D7EC               	goto	l5931
  3202  0050' D000               	goto	l1272
  3203  0052'                    l1272:
  3204  0052' C015' F010'        	movff	___lwdiv@quotient,?___lwdiv
  3205  0056' C016' F011'        	movff	___lwdiv@quotient+1,?___lwdiv+1
  3206  005A' 0012               	return		;funcret
  3207  005C'                    __end_of___lwdiv:
  3208                           	opt stack 0
  3209                           tblptru	equ	0xFF8
  3210                           tblptrh	equ	0xFF7
  3211                           tblptrl	equ	0xFF6
  3212                           tablat	equ	0xFF5
  3213                           prodh	equ	0xFF4
  3214                           prodl	equ	0xFF3
  3215                           intcon	equ	0xFF2
  3216                           intcon2	equ	0xFF1
  3217                           postinc0	equ	0xFEE
  3218                           wreg	equ	0xFE8
  3219                           postdec1	equ	0xFE5
  3220                           fsr1l	equ	0xFE1
  3221                           postinc2	equ	0xFDE
  3222                           postdec2	equ	0xFDD
  3223                           fsr2h	equ	0xFDA
  3224                           fsr2l	equ	0xFD9
  3225                           status	equ	0xFD8
  3226                           
  3227 ;; *************** function _get_RPM *****************
  3228 ;; Defined at:
  3229 ;;		line 18 in file "Fan_Support.c"
  3230 ;; Parameters:    Size  Location     Type
  3231 ;;		None
  3232 ;; Auto vars:     Size  Location     Type
  3233 ;;  RPS             2   32[COMRAM] int 
  3234 ;; Return value:  Size  Location     Type
  3235 ;;                  2   30[COMRAM] int 
  3236 ;; Registers used:
  3237 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3238 ;; Tracked objects:
  3239 ;;		On entry : 0/0
  3240 ;;		On exit  : 0/0
  3241 ;;		Unchanged: 0/0
  3242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3243 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3244 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3245 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3246 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3247 ;;Total ram usage:        4 bytes
  3248 ;; Hardware stack levels used:    1
  3249 ;; Hardware stack levels required when called:    4
  3250 ;; This function calls:
  3251 ;;		___awdiv
  3252 ;;		___wmul
  3253 ;; This function is called by:
  3254 ;;		_main
  3255 ;; This function uses a non-reentrant model
  3256 ;;
  3257                           
  3258                           	psect	text6
  3259  0000'                    __ptext6:
  3260                           	opt stack 0
  3261  0000'                    _get_RPM:
  3262                           	opt stack 26
  3263                           
  3264                           ;Fan_Support.c: 20: int RPS = TMR3L / 2;
  3265                           
  3266                           ;incstack = 0
  3267  0000' CFB2 F016'         	movff	4018,___awdiv@dividend	;volatile
  3268  0004' 6A17'              	clrf	___awdiv@dividend+1,c
  3269  0006' 0E00               	movlw	0
  3270  0008' 6E19'              	movwf	___awdiv@divisor+1,c
  3271  000A' 0E02               	movlw	2
  3272  000C' 6E18'              	movwf	___awdiv@divisor,c
  3273  000E' EC00' F000'        	call	___awdiv	;wreg free
  3274  0012' C016' F020'        	movff	?___awdiv,get_RPM@RPS
  3275  0016' C017' F021'        	movff	?___awdiv+1,get_RPM@RPS+1
  3276                           
  3277                           ;Fan_Support.c: 22: TMR3L = 0;
  3278  001A' 0E00               	movlw	0
  3279  001C' 6EB2               	movwf	4018,c	;volatile
  3280                           
  3281                           ;Fan_Support.c: 23: return (RPS * 60);
  3282  001E' C020' F010'        	movff	get_RPM@RPS,___wmul@multiplier
  3283  0022' C021' F011'        	movff	get_RPM@RPS+1,___wmul@multiplier+1
  3284  0026' 0E00               	movlw	0
  3285  0028' 6E13'              	movwf	___wmul@multiplicand+1,c
  3286  002A' 0E3C               	movlw	60
  3287  002C' 6E12'              	movwf	___wmul@multiplicand,c
  3288  002E' EC00' F000'        	call	___wmul	;wreg free
  3289  0032' C010' F01E'        	movff	?___wmul,?_get_RPM
  3290  0036' C011' F01F'        	movff	?___wmul+1,?_get_RPM+1
  3291  003A' D000               	goto	l466
  3292  003C'                    l466:
  3293  003C' 0012               	return		;funcret
  3294  003E'                    __end_of_get_RPM:
  3295                           	opt stack 0
  3296                           tblptru	equ	0xFF8
  3297                           tblptrh	equ	0xFF7
  3298                           tblptrl	equ	0xFF6
  3299                           tablat	equ	0xFF5
  3300                           prodh	equ	0xFF4
  3301                           prodl	equ	0xFF3
  3302                           intcon	equ	0xFF2
  3303                           intcon2	equ	0xFF1
  3304                           postinc0	equ	0xFEE
  3305                           wreg	equ	0xFE8
  3306                           postdec1	equ	0xFE5
  3307                           fsr1l	equ	0xFE1
  3308                           postinc2	equ	0xFDE
  3309                           postdec2	equ	0xFDD
  3310                           fsr2h	equ	0xFDA
  3311                           fsr2l	equ	0xFD9
  3312                           status	equ	0xFD8
  3313                           
  3314 ;; *************** function _Update_Screen *****************
  3315 ;; Defined at:
  3316 ;;		line 69 in file "Main_Screen.c"
  3317 ;; Parameters:    Size  Location     Type
  3318 ;;		None
  3319 ;; Auto vars:     Size  Location     Type
  3320 ;;  neg_tempF       2   11[BANK0 ] int 
  3321 ;; Return value:  Size  Location     Type
  3322 ;;		None               void
  3323 ;; Registers used:
  3324 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3325 ;; Tracked objects:
  3326 ;;		On entry : 0/0
  3327 ;;		On exit  : 0/0
  3328 ;;		Unchanged: 0/0
  3329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3330 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3331 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3332 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3333 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3334 ;;Total ram usage:        4 bytes
  3335 ;; Hardware stack levels used:    1
  3336 ;; Hardware stack levels required when called:   10
  3337 ;; This function calls:
  3338 ;;		___awdiv
  3339 ;;		___awmod
  3340 ;;		_drawtext
  3341 ;;		_strcpy
  3342 ;; This function is called by:
  3343 ;;		_main
  3344 ;; This function uses a non-reentrant model
  3345 ;;
  3346                           
  3347                           	psect	text7
  3348  0000'                    __ptext7:
  3349                           	opt stack 0
  3350  0000'                    _Update_Screen:
  3351                           	opt stack 20
  3352                           
  3353                           ;Main_Screen.c: 71: if ((DS1621_tempC & 0x80) == 0x80)
  3354                           
  3355                           ;incstack = 0
  3356  0000' AE00'              	btfss	_DS1621_tempC,7,c
  3357  0002' D01C               	goto	l6117
  3358                           
  3359                           ;Main_Screen.c: 72: {
  3360                           ;Main_Screen.c: 73: tempC[0] = '-';
  3361  0004' 0E2D               	movlw	45
  3362  0006' 0100               	movlb	0	; () banked
  3363  0008' 6F00'              	movwf	_tempC& (0+255),b
  3364                           
  3365                           ; BSR set to: 0
  3366                           ;Main_Screen.c: 74: tempC[1] = (DS1621_tempC & 0x7f)/10 + '0';
  3367  000A' 0E7F               	movlw	127
  3368  000C' 1400'              	andwf	_DS1621_tempC,w,c
  3369  000E' 6E16'              	movwf	___awdiv@dividend,c
  3370  0010' 6A17'              	clrf	___awdiv@dividend+1,c
  3371  0012' 0E00               	movlw	0
  3372  0014' 6E19'              	movwf	___awdiv@divisor+1,c
  3373  0016' 0E0A               	movlw	10
  3374  0018' 6E18'              	movwf	___awdiv@divisor,c
  3375  001A' EC00' F000'        	call	___awdiv	;wreg free
  3376  001E' 5016'              	movf	?___awdiv,w,c
  3377  0020' 0F30               	addlw	48
  3378  0022' 0100               	movlb	0	; () banked
  3379  0024' 6F00'              	movwf	(_tempC+1)& (0+255),b
  3380                           
  3381                           ; BSR set to: 0
  3382                           ;Main_Screen.c: 75: tempC[2] = (DS1621_tempC & 0x7f)%10 + '0';
  3383  0026' 0E7F               	movlw	127
  3384  0028' 1400'              	andwf	_DS1621_tempC,w,c
  3385  002A' 6E10'              	movwf	___awmod@dividend,c
  3386  002C' 6A11'              	clrf	___awmod@dividend+1,c
  3387  002E' 0E00               	movlw	0
  3388  0030' 6E13'              	movwf	___awmod@divisor+1,c
  3389  0032' 0E0A               	movlw	10
  3390  0034' 6E12'              	movwf	___awmod@divisor,c
  3391  0036' EC00' F000'        	call	___awmod	;wreg free
  3392  003A' D01B               	goto	L1
  3393  003C'                    l6117:
  3394                           
  3395                           ;Main_Screen.c: 77: else
  3396                           ;Main_Screen.c: 78: {
  3397                           ;Main_Screen.c: 79: tempC[0] = '+';
  3398  003C' 0E2B               	movlw	43
  3399  003E' 0100               	movlb	0	; () banked
  3400  0040' 6F00'              	movwf	_tempC& (0+255),b
  3401                           
  3402                           ; BSR set to: 0
  3403                           ;Main_Screen.c: 80: tempC[1] = DS1621_tempC/10 + '0';
  3404  0042' C000' F016'        	movff	_DS1621_tempC,___awdiv@dividend
  3405  0046' C001' F017'        	movff	_DS1621_tempC+1,___awdiv@dividend+1
  3406  004A' 0E00               	movlw	0
  3407  004C' 6E19'              	movwf	___awdiv@divisor+1,c
  3408  004E' 0E0A               	movlw	10
  3409  0050' 6E18'              	movwf	___awdiv@divisor,c
  3410  0052' EC00' F000'        	call	___awdiv	;wreg free
  3411  0056' 5016'              	movf	?___awdiv,w,c
  3412  0058' 0F30               	addlw	48
  3413  005A' 0100               	movlb	0	; () banked
  3414  005C' 6F00'              	movwf	(_tempC+1)& (0+255),b
  3415                           
  3416                           ; BSR set to: 0
  3417                           ;Main_Screen.c: 81: tempC[2] = DS1621_tempC%10 + '0';
  3418  005E' C000' F010'        	movff	_DS1621_tempC,___awmod@dividend
  3419  0062' C001' F011'        	movff	_DS1621_tempC+1,___awmod@dividend+1
  3420  0066' 0E00               	movlw	0
  3421  0068' 6E13'              	movwf	___awmod@divisor+1,c
  3422  006A' 0E0A               	movlw	10
  3423  006C' 6E12'              	movwf	___awmod@divisor,c
  3424  006E' EC00' F000'        	call	___awmod	;wreg free
  3425  0072'                    L1:
  3426  0072' 5010'              	movf	?___awmod,w,c
  3427  0074' 0F30               	addlw	48
  3428  0076' 0100               	movlb	0	; () banked
  3429  0078' 6F00'              	movwf	(_tempC+2)& (0+255),b
  3430  007A' D000               	goto	l6123
  3431  007C'                    l6123:
  3432                           
  3433                           ; BSR set to: 0
  3434                           ;Main_Screen.c: 82: }
  3435                           ;Main_Screen.c: 84: if (DS1621_tempF < 0)
  3436  007C' AE03'              	btfss	_DS1621_tempF+1,7,c
  3437  007E' D029               	goto	l6133
  3438                           
  3439                           ; BSR set to: 0
  3440                           ;Main_Screen.c: 85: {
  3441                           ;Main_Screen.c: 86: tempF[0] = '-';
  3442  0080' 0E2D               	movlw	45
  3443  0082' 0100               	movlb	0	; () banked
  3444  0084' 6F00'              	movwf	_tempF& (0+255),b
  3445                           
  3446                           ; BSR set to: 0
  3447                           ;Main_Screen.c: 87: int neg_tempF = -DS1621_tempF;
  3448  0086' C002' F009'        	movff	_DS1621_tempF,??_Update_Screen
  3449  008A' C003' F00A'        	movff	_DS1621_tempF+1,??_Update_Screen+1
  3450  008E' 0100               	movlb	0	; () banked
  3451  0090' 1F00'              	comf	??_Update_Screen& (0+255),f,b
  3452  0092' 1F00'              	comf	(??_Update_Screen+1)& (0+255),f,b
  3453  0094' 4B00'              	infsnz	??_Update_Screen& (0+255),f,b
  3454  0096' 2B00'              	incf	(??_Update_Screen+1)& (0+255),f,b
  3455  0098' C009' F00B'        	movff	??_Update_Screen,Update_Screen@neg_tempF
  3456  009C' C00A' F00C'        	movff	??_Update_Screen+1,Update_Screen@neg_tempF+1
  3457                           
  3458                           ; BSR set to: 0
  3459                           ;Main_Screen.c: 88: tempF[1] = neg_tempF/10 + '0';
  3460  00A0' C00B' F016'        	movff	Update_Screen@neg_tempF,___awdiv@dividend
  3461  00A4' C00C' F017'        	movff	Update_Screen@neg_tempF+1,___awdiv@dividend+1
  3462  00A8' 0E00               	movlw	0
  3463  00AA' 6E19'              	movwf	___awdiv@divisor+1,c
  3464  00AC' 0E0A               	movlw	10
  3465  00AE' 6E18'              	movwf	___awdiv@divisor,c
  3466  00B0' EC00' F000'        	call	___awdiv	;wreg free
  3467  00B4' 5016'              	movf	?___awdiv,w,c
  3468  00B6' 0F30               	addlw	48
  3469  00B8' 0100               	movlb	0	; () banked
  3470  00BA' 6F00'              	movwf	(_tempF+1)& (0+255),b
  3471                           
  3472                           ; BSR set to: 0
  3473                           ;Main_Screen.c: 89: tempF[2] = neg_tempF%10 + '0';
  3474  00BC' C00B' F010'        	movff	Update_Screen@neg_tempF,___awmod@dividend
  3475  00C0' C00C' F011'        	movff	Update_Screen@neg_tempF+1,___awmod@dividend+1
  3476  00C4' 0E00               	movlw	0
  3477  00C6' 6E13'              	movwf	___awmod@divisor+1,c
  3478  00C8' 0E0A               	movlw	10
  3479  00CA' 6E12'              	movwf	___awmod@divisor,c
  3480  00CC' EC00' F000'        	call	___awmod	;wreg free
  3481  00D0' D01B               	goto	L2
  3482  00D2'                    l6133:
  3483                           
  3484                           ; BSR set to: 0
  3485                           ;Main_Screen.c: 91: else
  3486                           ;Main_Screen.c: 92: {
  3487                           ;Main_Screen.c: 93: tempF[0] = '+';
  3488  00D2' 0E2B               	movlw	43
  3489  00D4' 0100               	movlb	0	; () banked
  3490  00D6' 6F00'              	movwf	_tempF& (0+255),b
  3491                           
  3492                           ; BSR set to: 0
  3493                           ;Main_Screen.c: 94: tempF[1] = DS1621_tempF/10 + '0';
  3494  00D8' C002' F016'        	movff	_DS1621_tempF,___awdiv@dividend
  3495  00DC' C003' F017'        	movff	_DS1621_tempF+1,___awdiv@dividend+1
  3496  00E0' 0E00               	movlw	0
  3497  00E2' 6E19'              	movwf	___awdiv@divisor+1,c
  3498  00E4' 0E0A               	movlw	10
  3499  00E6' 6E18'              	movwf	___awdiv@divisor,c
  3500  00E8' EC00' F000'        	call	___awdiv	;wreg free
  3501  00EC' 5016'              	movf	?___awdiv,w,c
  3502  00EE' 0F30               	addlw	48
  3503  00F0' 0100               	movlb	0	; () banked
  3504  00F2' 6F00'              	movwf	(_tempF+1)& (0+255),b
  3505                           
  3506                           ; BSR set to: 0
  3507                           ;Main_Screen.c: 95: tempF[2] = DS1621_tempF%10 + '0';
  3508  00F4' C002' F010'        	movff	_DS1621_tempF,___awmod@dividend
  3509  00F8' C003' F011'        	movff	_DS1621_tempF+1,___awmod@dividend+1
  3510  00FC' 0E00               	movlw	0
  3511  00FE' 6E13'              	movwf	___awmod@divisor+1,c
  3512  0100' 0E0A               	movlw	10
  3513  0102' 6E12'              	movwf	___awmod@divisor,c
  3514  0104' EC00' F000'        	call	___awmod	;wreg free
  3515  0108'                    L2:
  3516  0108' 5010'              	movf	?___awmod,w,c
  3517  010A' 0F30               	addlw	48
  3518  010C' 0100               	movlb	0	; () banked
  3519  010E' 6F00'              	movwf	(_tempF+2)& (0+255),b
  3520  0110' D000               	goto	l6139
  3521  0112'                    l6139:
  3522                           
  3523                           ; BSR set to: 0
  3524                           ;Main_Screen.c: 96: }
  3525                           ;Main_Screen.c: 97: time[0] = (hour>>4) + '0';
  3526  0112' 381C'              	swapf	_hour,w,c
  3527  0114' 0B0F               	andlw	15
  3528  0116' 0F30               	addlw	48
  3529  0118' 0100               	movlb	0	; () banked
  3530  011A' 6F00'              	movwf	_time& (0+255),b
  3531                           
  3532                           ; BSR set to: 0
  3533                           ;Main_Screen.c: 98: time[1] = (hour & 0x0f)+ '0';
  3534  011C' 501C'              	movf	_hour,w,c
  3535  011E' 0B0F               	andlw	15
  3536  0120' 0F30               	addlw	48
  3537  0122' 0100               	movlb	0	; () banked
  3538  0124' 6F00'              	movwf	(_time+1)& (0+255),b
  3539                           
  3540                           ;Main_Screen.c: 101: time[3] = '0';
  3541  0126' 0E30               	movlw	48
  3542  0128' 0100               	movlb	0	; () banked
  3543  012A' 6F00'              	movwf	(_time+3)& (0+255),b
  3544                           
  3545                           ;Main_Screen.c: 102: time[4] = '0';
  3546  012C' 0E30               	movlw	48
  3547  012E' 0100               	movlb	0	; () banked
  3548  0130' 6F00'              	movwf	(_time+4)& (0+255),b
  3549                           
  3550                           ;Main_Screen.c: 104: time[6] = '0';
  3551  0132' 0E30               	movlw	48
  3552  0134' 0100               	movlb	0	; () banked
  3553  0136' 6F00'              	movwf	(_time+6)& (0+255),b
  3554                           
  3555                           ;Main_Screen.c: 105: time[7] = '0';
  3556  0138' 0E30               	movlw	48
  3557  013A' 0100               	movlb	0	; () banked
  3558  013C' 6F00'              	movwf	(_time+7)& (0+255),b
  3559                           
  3560                           ;Main_Screen.c: 107: date[0] = '0';
  3561  013E' 0E30               	movlw	48
  3562  0140' 0100               	movlb	0	; () banked
  3563  0142' 6F00'              	movwf	_date& (0+255),b
  3564                           
  3565                           ;Main_Screen.c: 108: date[1] = '0';
  3566  0144' 0E30               	movlw	48
  3567  0146' 0100               	movlb	0	; () banked
  3568  0148' 6F00'              	movwf	(_date+1)& (0+255),b
  3569                           
  3570                           ;Main_Screen.c: 109: date[3] = '0';
  3571  014A' 0E30               	movlw	48
  3572  014C' 0100               	movlb	0	; () banked
  3573  014E' 6F00'              	movwf	(_date+3)& (0+255),b
  3574                           
  3575                           ;Main_Screen.c: 110: date[4] = '0';
  3576  0150' 0E30               	movlw	48
  3577  0152' 0100               	movlb	0	; () banked
  3578  0154' 6F00'              	movwf	(_date+4)& (0+255),b
  3579                           
  3580                           ;Main_Screen.c: 111: date[6] = '0';
  3581  0156' 0E30               	movlw	48
  3582  0158' 0100               	movlb	0	; () banked
  3583  015A' 6F00'              	movwf	(_date+6)& (0+255),b
  3584                           
  3585                           ;Main_Screen.c: 112: date[7] = '0';
  3586  015C' 0E30               	movlw	48
  3587  015E' 0100               	movlb	0	; () banked
  3588  0160' 6F00'              	movwf	(_date+7)& (0+255),b
  3589                           
  3590                           ; BSR set to: 0
  3591                           ;Main_Screen.c: 115: if (FAN == 1) strcpy(Fan_SW_Txt, "ON ");
  3592  0162' 040E'              	decf	_FAN,w,c
  3593  0164' A4D8               	btfss	status,2,c
  3594  0166' D00B               	goto	l6147
  3595                           
  3596                           ; BSR set to: 0
  3597  0168' 0E00'              	movlw	low _Fan_SW_Txt
  3598  016A' 6E10'              	movwf	strcpy@to,c
  3599  016C' 0E00'              	movlw	high _Fan_SW_Txt
  3600  016E' 6E11'              	movwf	strcpy@to+1,c
  3601  0170' 0E00'              	movlw	low STR_10
  3602  0172' 6E12'              	movwf	strcpy@from,c
  3603  0174' 0E00'              	movlw	high STR_10
  3604  0176' 6E13'              	movwf	strcpy@from+1,c
  3605  0178' EC00' F000'        	call	_strcpy	;wreg free
  3606  017C' D00B               	goto	l6149
  3607  017E'                    l6147:
  3608                           
  3609                           ;Main_Screen.c: 116: else strcpy(Fan_SW_Txt, "OFF");
  3610  017E' 0E00'              	movlw	low _Fan_SW_Txt
  3611  0180' 6E10'              	movwf	strcpy@to,c
  3612  0182' 0E00'              	movlw	high _Fan_SW_Txt
  3613  0184' 6E11'              	movwf	strcpy@to+1,c
  3614  0186' 0E00'              	movlw	low STR_11
  3615  0188' 6E12'              	movwf	strcpy@from,c
  3616  018A' 0E00'              	movlw	high STR_11
  3617  018C' 6E13'              	movwf	strcpy@from+1,c
  3618  018E' EC00' F000'        	call	_strcpy	;wreg free
  3619  0192' D000               	goto	l6149
  3620  0194'                    l6149:
  3621                           
  3622                           ;Main_Screen.c: 119: DC_Txt[0] = duty_cycle/100 + '0';
  3623  0194' C01A' F016'        	movff	_duty_cycle,___awdiv@dividend
  3624  0198' 6A17'              	clrf	___awdiv@dividend+1,c
  3625  019A' 0E00               	movlw	0
  3626  019C' 6E19'              	movwf	___awdiv@divisor+1,c
  3627  019E' 0E64               	movlw	100
  3628  01A0' 6E18'              	movwf	___awdiv@divisor,c
  3629  01A2' EC00' F000'        	call	___awdiv	;wreg free
  3630  01A6' 5016'              	movf	?___awdiv,w,c
  3631  01A8' 0F30               	addlw	48
  3632  01AA' 0100               	movlb	0	; () banked
  3633  01AC' 6F00'              	movwf	_DC_Txt& (0+255),b
  3634                           
  3635                           ; BSR set to: 0
  3636                           ;Main_Screen.c: 121: DC_Txt[1] = '0';
  3637  01AE' 0E30               	movlw	48
  3638  01B0' 0100               	movlb	0	; () banked
  3639  01B2' 6F00'              	movwf	(_DC_Txt+1)& (0+255),b
  3640                           
  3641                           ; BSR set to: 0
  3642                           ;Main_Screen.c: 122: DC_Txt[2] = '0';
  3643  01B4' 0E30               	movlw	48
  3644  01B6' 0100               	movlb	0	; () banked
  3645  01B8' 6F00'              	movwf	(_DC_Txt+2)& (0+255),b
  3646                           
  3647                           ; BSR set to: 0
  3648                           ;Main_Screen.c: 125: RPM_Txt[0] = rpm/1000 + '0';
  3649  01BA' C008' F016'        	movff	_rpm,___awdiv@dividend
  3650  01BE' C009' F017'        	movff	_rpm+1,___awdiv@dividend+1
  3651  01C2' 0E03               	movlw	3
  3652  01C4' 6E19'              	movwf	___awdiv@divisor+1,c
  3653  01C6' 0EE8               	movlw	232
  3654  01C8' 6E18'              	movwf	___awdiv@divisor,c
  3655  01CA' EC00' F000'        	call	___awdiv	;wreg free
  3656  01CE' 5016'              	movf	?___awdiv,w,c
  3657  01D0' 0F30               	addlw	48
  3658  01D2' 0100               	movlb	0	; () banked
  3659  01D4' 6F00'              	movwf	_RPM_Txt& (0+255),b
  3660                           
  3661                           ; BSR set to: 0
  3662                           ;Main_Screen.c: 127: RPM_Txt[1] = '0';
  3663  01D6' 0E30               	movlw	48
  3664  01D8' 0100               	movlb	0	; () banked
  3665  01DA' 6F00'              	movwf	(_RPM_Txt+1)& (0+255),b
  3666                           
  3667                           ; BSR set to: 0
  3668                           ;Main_Screen.c: 128: RPM_Txt[2] = '0';
  3669  01DC' 0E30               	movlw	48
  3670  01DE' 0100               	movlb	0	; () banked
  3671  01E0' 6F00'              	movwf	(_RPM_Txt+2)& (0+255),b
  3672                           
  3673                           ; BSR set to: 0
  3674                           ;Main_Screen.c: 129: RPM_Txt[3] = '0';
  3675  01E2' 0E30               	movlw	48
  3676  01E4' 0100               	movlb	0	; () banked
  3677  01E6' 6F00'              	movwf	(_RPM_Txt+3)& (0+255),b
  3678                           
  3679                           ; BSR set to: 0
  3680                           ;Main_Screen.c: 131: drawtext(1, 23, tempC , 0xFFE0 , 0x0000 , 2);
  3681  01E8' 0E17               	movlw	23
  3682  01EA' 6E38'              	movwf	drawtext@y,c
  3683  01EC' 0E00'              	movlw	low _tempC
  3684  01EE' 6E39'              	movwf	drawtext@_text,c
  3685  01F0' 0E00'              	movlw	high _tempC
  3686  01F2' 6E3A'              	movwf	drawtext@_text+1,c
  3687  01F4' 0EFF               	movlw	255
  3688  01F6' 6E3C'              	movwf	drawtext@color+1,c
  3689  01F8' 0EE0               	movlw	224
  3690  01FA' 6E3B'              	movwf	drawtext@color,c
  3691  01FC' 0E00               	movlw	0
  3692  01FE' 6E3E'              	movwf	drawtext@bg+1,c
  3693  0200' 0E00               	movlw	0
  3694  0202' 6E3D'              	movwf	drawtext@bg,c
  3695  0204' 0E02               	movlw	2
  3696  0206' 6E3F'              	movwf	drawtext@size,c
  3697  0208' 0E01               	movlw	1
  3698  020A' EC00' F000'        	call	_drawtext
  3699                           
  3700                           ;Main_Screen.c: 132: drawtext(70, 23, tempF , 0xFFE0 , 0x0000 , 2);
  3701  020E' 0E17               	movlw	23
  3702  0210' 6E38'              	movwf	drawtext@y,c
  3703  0212' 0E00'              	movlw	low _tempF
  3704  0214' 6E39'              	movwf	drawtext@_text,c
  3705  0216' 0E00'              	movlw	high _tempF
  3706  0218' 6E3A'              	movwf	drawtext@_text+1,c
  3707  021A' 0EFF               	movlw	255
  3708  021C' 6E3C'              	movwf	drawtext@color+1,c
  3709  021E' 0EE0               	movlw	224
  3710  0220' 6E3B'              	movwf	drawtext@color,c
  3711  0222' 0E00               	movlw	0
  3712  0224' 6E3E'              	movwf	drawtext@bg+1,c
  3713  0226' 0E00               	movlw	0
  3714  0228' 6E3D'              	movwf	drawtext@bg,c
  3715  022A' 0E02               	movlw	2
  3716  022C' 6E3F'              	movwf	drawtext@size,c
  3717  022E' 0E46               	movlw	70
  3718  0230' EC00' F000'        	call	_drawtext
  3719                           
  3720                           ;Main_Screen.c: 133: drawtext(15 , 52 , time , 0x07FF , 0x0000 , 2);
  3721  0234' 0E34               	movlw	52
  3722  0236' 6E38'              	movwf	drawtext@y,c
  3723  0238' 0E00'              	movlw	low _time
  3724  023A' 6E39'              	movwf	drawtext@_text,c
  3725  023C' 0E00'              	movlw	high _time
  3726  023E' 6E3A'              	movwf	drawtext@_text+1,c
  3727  0240' 0E07               	movlw	7
  3728  0242' 6E3C'              	movwf	drawtext@color+1,c
  3729  0244' 683B'              	setf	drawtext@color,c
  3730  0246' 0E00               	movlw	0
  3731  0248' 6E3E'              	movwf	drawtext@bg+1,c
  3732  024A' 0E00               	movlw	0
  3733  024C' 6E3D'              	movwf	drawtext@bg,c
  3734  024E' 0E02               	movlw	2
  3735  0250' 6E3F'              	movwf	drawtext@size,c
  3736  0252' 0E0F               	movlw	15
  3737  0254' EC00' F000'        	call	_drawtext
  3738                           
  3739                           ;Main_Screen.c: 134: drawtext(15 , 82 , date , 0x07E0 , 0x0000 , 2);
  3740  0258' 0E52               	movlw	82
  3741  025A' 6E38'              	movwf	drawtext@y,c
  3742  025C' 0E00'              	movlw	low _date
  3743  025E' 6E39'              	movwf	drawtext@_text,c
  3744  0260' 0E00'              	movlw	high _date
  3745  0262' 6E3A'              	movwf	drawtext@_text+1,c
  3746  0264' 0E07               	movlw	7
  3747  0266' 6E3C'              	movwf	drawtext@color+1,c
  3748  0268' 0EE0               	movlw	224
  3749  026A' 6E3B'              	movwf	drawtext@color,c
  3750  026C' 0E00               	movlw	0
  3751  026E' 6E3E'              	movwf	drawtext@bg+1,c
  3752  0270' 0E00               	movlw	0
  3753  0272' 6E3D'              	movwf	drawtext@bg,c
  3754  0274' 0E02               	movlw	2
  3755  0276' 6E3F'              	movwf	drawtext@size,c
  3756  0278' 0E0F               	movlw	15
  3757  027A' EC00' F000'        	call	_drawtext
  3758                           
  3759                           ;Main_Screen.c: 136: drawtext(95, 130, Fan_SW_Txt, 0xF800 , 0x0000 , 1);
  3760  027E' 0E82               	movlw	130
  3761  0280' 6E38'              	movwf	drawtext@y,c
  3762  0282' 0E00'              	movlw	low _Fan_SW_Txt
  3763  0284' 6E39'              	movwf	drawtext@_text,c
  3764  0286' 0E00'              	movlw	high _Fan_SW_Txt
  3765  0288' 6E3A'              	movwf	drawtext@_text+1,c
  3766  028A' 0EF8               	movlw	248
  3767  028C' 6E3C'              	movwf	drawtext@color+1,c
  3768  028E' 0E00               	movlw	0
  3769  0290' 6E3B'              	movwf	drawtext@color,c
  3770  0292' 0E00               	movlw	0
  3771  0294' 6E3E'              	movwf	drawtext@bg+1,c
  3772  0296' 0E00               	movlw	0
  3773  0298' 6E3D'              	movwf	drawtext@bg,c
  3774  029A' 0E01               	movlw	1
  3775  029C' 6E3F'              	movwf	drawtext@size,c
  3776  029E' 0E5F               	movlw	95
  3777  02A0' EC00' F000'        	call	_drawtext
  3778                           
  3779                           ;Main_Screen.c: 137: drawtext(10, 150, DC_Txt, 0x07E0, 0x0000, 1);
  3780  02A4' 0E96               	movlw	150
  3781  02A6' 6E38'              	movwf	drawtext@y,c
  3782  02A8' 0E00'              	movlw	low _DC_Txt
  3783  02AA' 6E39'              	movwf	drawtext@_text,c
  3784  02AC' 0E00'              	movlw	high _DC_Txt
  3785  02AE' 6E3A'              	movwf	drawtext@_text+1,c
  3786  02B0' 0E07               	movlw	7
  3787  02B2' 6E3C'              	movwf	drawtext@color+1,c
  3788  02B4' 0EE0               	movlw	224
  3789  02B6' 6E3B'              	movwf	drawtext@color,c
  3790  02B8' 0E00               	movlw	0
  3791  02BA' 6E3E'              	movwf	drawtext@bg+1,c
  3792  02BC' 0E00               	movlw	0
  3793  02BE' 6E3D'              	movwf	drawtext@bg,c
  3794  02C0' 0E01               	movlw	1
  3795  02C2' 6E3F'              	movwf	drawtext@size,c
  3796  02C4' 0E0A               	movlw	10
  3797  02C6' EC00' F000'        	call	_drawtext
  3798                           
  3799                           ;Main_Screen.c: 138: drawtext(93, 150, RPM_Txt, 0x07E0, 0x0000, 1);
  3800  02CA' 0E96               	movlw	150
  3801  02CC' 6E38'              	movwf	drawtext@y,c
  3802  02CE' 0E00'              	movlw	low _RPM_Txt
  3803  02D0' 6E39'              	movwf	drawtext@_text,c
  3804  02D2' 0E00'              	movlw	high _RPM_Txt
  3805  02D4' 6E3A'              	movwf	drawtext@_text+1,c
  3806  02D6' 0E07               	movlw	7
  3807  02D8' 6E3C'              	movwf	drawtext@color+1,c
  3808  02DA' 0EE0               	movlw	224
  3809  02DC' 6E3B'              	movwf	drawtext@color,c
  3810  02DE' 0E00               	movlw	0
  3811  02E0' 6E3E'              	movwf	drawtext@bg+1,c
  3812  02E2' 0E00               	movlw	0
  3813  02E4' 6E3D'              	movwf	drawtext@bg,c
  3814  02E6' 0E01               	movlw	1
  3815  02E8' 6E3F'              	movwf	drawtext@size,c
  3816  02EA' 0E5D               	movlw	93
  3817  02EC' EC00' F000'        	call	_drawtext
  3818  02F0' 0012               	return		;funcret
  3819  02F2'                    __end_of_Update_Screen:
  3820                           	opt stack 0
  3821                           tblptru	equ	0xFF8
  3822                           tblptrh	equ	0xFF7
  3823                           tblptrl	equ	0xFF6
  3824                           tablat	equ	0xFF5
  3825                           prodh	equ	0xFF4
  3826                           prodl	equ	0xFF3
  3827                           intcon	equ	0xFF2
  3828                           intcon2	equ	0xFF1
  3829                           postinc0	equ	0xFEE
  3830                           wreg	equ	0xFE8
  3831                           postdec1	equ	0xFE5
  3832                           fsr1l	equ	0xFE1
  3833                           postinc2	equ	0xFDE
  3834                           postdec2	equ	0xFDD
  3835                           fsr2h	equ	0xFDA
  3836                           fsr2l	equ	0xFD9
  3837                           status	equ	0xFD8
  3838                           
  3839 ;; *************** function ___awmod *****************
  3840 ;; Defined at:
  3841 ;;		line 8 in file "E:\XC8\sources\common\awmod.c"
  3842 ;; Parameters:    Size  Location     Type
  3843 ;;  dividend        2   16[COMRAM] int 
  3844 ;;  divisor         2   18[COMRAM] int 
  3845 ;; Auto vars:     Size  Location     Type
  3846 ;;  sign            1   21[COMRAM] unsigned char 
  3847 ;;  counter         1   20[COMRAM] unsigned char 
  3848 ;; Return value:  Size  Location     Type
  3849 ;;                  2   16[COMRAM] int 
  3850 ;; Registers used:
  3851 ;;		wreg, status,2, status,0
  3852 ;; Tracked objects:
  3853 ;;		On entry : 0/0
  3854 ;;		On exit  : 0/0
  3855 ;;		Unchanged: 0/0
  3856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3857 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3858 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3859 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3860 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3861 ;;Total ram usage:        6 bytes
  3862 ;; Hardware stack levels used:    1
  3863 ;; Hardware stack levels required when called:    3
  3864 ;; This function calls:
  3865 ;;		Nothing
  3866 ;; This function is called by:
  3867 ;;		_Update_Screen
  3868 ;; This function uses a non-reentrant model
  3869 ;;
  3870                           
  3871                           	psect	text8
  3872  0000'                    __ptext8:
  3873                           	opt stack 0
  3874  0000'                    ___awmod:
  3875                           	opt stack 26
  3876                           
  3877                           ;incstack = 0
  3878  0000' 0E00               	movlw	0
  3879  0002' 6E15'              	movwf	___awmod@sign,c
  3880  0004' AE11'              	btfss	___awmod@dividend+1,7,c
  3881  0006' D007               	goto	l5893
  3882  0008' 6C10'              	negf	___awmod@dividend,c
  3883  000A' 1E11'              	comf	___awmod@dividend+1,f,c
  3884  000C' B0D8               	btfsc	status,0,c
  3885  000E' 2A11'              	incf	___awmod@dividend+1,f,c
  3886  0010' 0E01               	movlw	1
  3887  0012' 6E15'              	movwf	___awmod@sign,c
  3888  0014' D000               	goto	l5893
  3889  0016'                    l5893:
  3890  0016' AE13'              	btfss	___awmod@divisor+1,7,c
  3891  0018' D005               	goto	l5897
  3892  001A' 6C12'              	negf	___awmod@divisor,c
  3893  001C' 1E13'              	comf	___awmod@divisor+1,f,c
  3894  001E' B0D8               	btfsc	status,0,c
  3895  0020' 2A13'              	incf	___awmod@divisor+1,f,c
  3896  0022' D000               	goto	l5897
  3897  0024'                    l5897:
  3898  0024' 5012'              	movf	___awmod@divisor,w,c
  3899  0026' 1013'              	iorwf	___awmod@divisor+1,w,c
  3900  0028' B4D8               	btfsc	status,2,c
  3901  002A' D01D               	goto	l5913
  3902  002C' 0E01               	movlw	1
  3903  002E' 6E14'              	movwf	___awmod@counter,c
  3904  0030' D005               	goto	l5903
  3905  0032'                    l5901:
  3906  0032' 90D8               	bcf	status,0,c
  3907  0034' 3612'              	rlcf	___awmod@divisor,f,c
  3908  0036' 3613'              	rlcf	___awmod@divisor+1,f,c
  3909  0038' 2A14'              	incf	___awmod@counter,f,c
  3910  003A' D000               	goto	l5903
  3911  003C'                    l5903:
  3912  003C' BE13'              	btfsc	___awmod@divisor+1,7,c
  3913  003E' D002               	goto	l5905
  3914  0040' D7F8               	goto	l5901
  3915  0042' D000               	goto	l5905
  3916  0044'                    l5905:
  3917  0044' 5012'              	movf	___awmod@divisor,w,c
  3918  0046' 5C10'              	subwf	___awmod@dividend,w,c
  3919  0048' 5013'              	movf	___awmod@divisor+1,w,c
  3920  004A' 5811'              	subwfb	___awmod@dividend+1,w,c
  3921  004C' A0D8               	btfss	status,0,c
  3922  004E' D005               	goto	l5909
  3923  0050' 5012'              	movf	___awmod@divisor,w,c
  3924  0052' 5E10'              	subwf	___awmod@dividend,f,c
  3925  0054' 5013'              	movf	___awmod@divisor+1,w,c
  3926  0056' 5A11'              	subwfb	___awmod@dividend+1,f,c
  3927  0058' D000               	goto	l5909
  3928  005A'                    l5909:
  3929  005A' 90D8               	bcf	status,0,c
  3930  005C' 3213'              	rrcf	___awmod@divisor+1,f,c
  3931  005E' 3212'              	rrcf	___awmod@divisor,f,c
  3932  0060' 2E14'              	decfsz	___awmod@counter,f,c
  3933  0062' D7F0               	goto	l5905
  3934  0064' D000               	goto	l5913
  3935  0066'                    l5913:
  3936  0066' 5015'              	movf	___awmod@sign,w,c
  3937  0068' B4D8               	btfsc	status,2,c
  3938  006A' D005               	goto	l5917
  3939  006C' 6C10'              	negf	___awmod@dividend,c
  3940  006E' 1E11'              	comf	___awmod@dividend+1,f,c
  3941  0070' B0D8               	btfsc	status,0,c
  3942  0072' 2A11'              	incf	___awmod@dividend+1,f,c
  3943  0074' D000               	goto	l5917
  3944  0076'                    l5917:
  3945  0076' C010' F010'        	movff	___awmod@dividend,?___awmod
  3946  007A' C011' F011'        	movff	___awmod@dividend+1,?___awmod+1
  3947  007E' D000               	goto	l955
  3948  0080'                    l955:
  3949  0080' 0012               	return		;funcret
  3950  0082'                    __end_of___awmod:
  3951                           	opt stack 0
  3952                           tblptru	equ	0xFF8
  3953                           tblptrh	equ	0xFF7
  3954                           tblptrl	equ	0xFF6
  3955                           tablat	equ	0xFF5
  3956                           prodh	equ	0xFF4
  3957                           prodl	equ	0xFF3
  3958                           intcon	equ	0xFF2
  3959                           intcon2	equ	0xFF1
  3960                           postinc0	equ	0xFEE
  3961                           wreg	equ	0xFE8
  3962                           postdec1	equ	0xFE5
  3963                           fsr1l	equ	0xFE1
  3964                           postinc2	equ	0xFDE
  3965                           postdec2	equ	0xFDD
  3966                           fsr2h	equ	0xFDA
  3967                           fsr2l	equ	0xFD9
  3968                           status	equ	0xFD8
  3969                           
  3970 ;; *************** function ___awdiv *****************
  3971 ;; Defined at:
  3972 ;;		line 8 in file "E:\XC8\sources\common\awdiv.c"
  3973 ;; Parameters:    Size  Location     Type
  3974 ;;  dividend        2   22[COMRAM] int 
  3975 ;;  divisor         2   24[COMRAM] int 
  3976 ;; Auto vars:     Size  Location     Type
  3977 ;;  quotient        2   28[COMRAM] int 
  3978 ;;  sign            1   27[COMRAM] unsigned char 
  3979 ;;  counter         1   26[COMRAM] unsigned char 
  3980 ;; Return value:  Size  Location     Type
  3981 ;;                  2   22[COMRAM] int 
  3982 ;; Registers used:
  3983 ;;		wreg, status,2, status,0
  3984 ;; Tracked objects:
  3985 ;;		On entry : 0/0
  3986 ;;		On exit  : 0/0
  3987 ;;		Unchanged: 0/0
  3988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3989 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3990 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3991 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3992 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3993 ;;Total ram usage:        8 bytes
  3994 ;; Hardware stack levels used:    1
  3995 ;; Hardware stack levels required when called:    3
  3996 ;; This function calls:
  3997 ;;		Nothing
  3998 ;; This function is called by:
  3999 ;;		_Update_Screen
  4000 ;;		_get_RPM
  4001 ;;		_main
  4002 ;; This function uses a non-reentrant model
  4003 ;;
  4004                           
  4005                           	psect	text9
  4006  0000'                    __ptext9:
  4007                           	opt stack 0
  4008  0000'                    ___awdiv:
  4009                           	opt stack 26
  4010                           
  4011                           ;incstack = 0
  4012  0000' 0E00               	movlw	0
  4013  0002' 6E1B'              	movwf	___awdiv@sign,c
  4014  0004' AE19'              	btfss	___awdiv@divisor+1,7,c
  4015  0006' D007               	goto	l5849
  4016  0008' 6C18'              	negf	___awdiv@divisor,c
  4017  000A' 1E19'              	comf	___awdiv@divisor+1,f,c
  4018  000C' B0D8               	btfsc	status,0,c
  4019  000E' 2A19'              	incf	___awdiv@divisor+1,f,c
  4020  0010' 0E01               	movlw	1
  4021  0012' 6E1B'              	movwf	___awdiv@sign,c
  4022  0014' D000               	goto	l5849
  4023  0016'                    l5849:
  4024  0016' AE17'              	btfss	___awdiv@dividend+1,7,c
  4025  0018' D007               	goto	l5855
  4026  001A' 6C16'              	negf	___awdiv@dividend,c
  4027  001C' 1E17'              	comf	___awdiv@dividend+1,f,c
  4028  001E' B0D8               	btfsc	status,0,c
  4029  0020' 2A17'              	incf	___awdiv@dividend+1,f,c
  4030  0022' 0E01               	movlw	1
  4031  0024' 1A1B'              	xorwf	___awdiv@sign,f,c
  4032  0026' D000               	goto	l5855
  4033  0028'                    l5855:
  4034  0028' 0E00               	movlw	0
  4035  002A' 6E1D'              	movwf	___awdiv@quotient+1,c
  4036  002C' 0E00               	movlw	0
  4037  002E' 6E1C'              	movwf	___awdiv@quotient,c
  4038  0030' 5018'              	movf	___awdiv@divisor,w,c
  4039  0032' 1019'              	iorwf	___awdiv@divisor+1,w,c
  4040  0034' B4D8               	btfsc	status,2,c
  4041  0036' D021               	goto	l5877
  4042  0038' 0E01               	movlw	1
  4043  003A' 6E1A'              	movwf	___awdiv@counter,c
  4044  003C' D005               	goto	l5863
  4045  003E'                    l5861:
  4046  003E' 90D8               	bcf	status,0,c
  4047  0040' 3618'              	rlcf	___awdiv@divisor,f,c
  4048  0042' 3619'              	rlcf	___awdiv@divisor+1,f,c
  4049  0044' 2A1A'              	incf	___awdiv@counter,f,c
  4050  0046' D000               	goto	l5863
  4051  0048'                    l5863:
  4052  0048' BE19'              	btfsc	___awdiv@divisor+1,7,c
  4053  004A' D002               	goto	l5865
  4054  004C' D7F8               	goto	l5861
  4055  004E' D000               	goto	l5865
  4056  0050'                    l5865:
  4057  0050' 90D8               	bcf	status,0,c
  4058  0052' 361C'              	rlcf	___awdiv@quotient,f,c
  4059  0054' 361D'              	rlcf	___awdiv@quotient+1,f,c
  4060  0056' 5018'              	movf	___awdiv@divisor,w,c
  4061  0058' 5C16'              	subwf	___awdiv@dividend,w,c
  4062  005A' 5019'              	movf	___awdiv@divisor+1,w,c
  4063  005C' 5817'              	subwfb	___awdiv@dividend+1,w,c
  4064  005E' A0D8               	btfss	status,0,c
  4065  0060' D006               	goto	l5873
  4066  0062' 5018'              	movf	___awdiv@divisor,w,c
  4067  0064' 5E16'              	subwf	___awdiv@dividend,f,c
  4068  0066' 5019'              	movf	___awdiv@divisor+1,w,c
  4069  0068' 5A17'              	subwfb	___awdiv@dividend+1,f,c
  4070  006A' 801C'              	bsf	___awdiv@quotient,0,c
  4071  006C' D000               	goto	l5873
  4072  006E'                    l5873:
  4073  006E' 90D8               	bcf	status,0,c
  4074  0070' 3219'              	rrcf	___awdiv@divisor+1,f,c
  4075  0072' 3218'              	rrcf	___awdiv@divisor,f,c
  4076  0074' 2E1A'              	decfsz	___awdiv@counter,f,c
  4077  0076' D7EC               	goto	l5865
  4078  0078' D000               	goto	l5877
  4079  007A'                    l5877:
  4080  007A' 501B'              	movf	___awdiv@sign,w,c
  4081  007C' B4D8               	btfsc	status,2,c
  4082  007E' D005               	goto	l5881
  4083  0080' 6C1C'              	negf	___awdiv@quotient,c
  4084  0082' 1E1D'              	comf	___awdiv@quotient+1,f,c
  4085  0084' B0D8               	btfsc	status,0,c
  4086  0086' 2A1D'              	incf	___awdiv@quotient+1,f,c
  4087  0088' D000               	goto	l5881
  4088  008A'                    l5881:
  4089  008A' C01C' F016'        	movff	___awdiv@quotient,?___awdiv
  4090  008E' C01D' F017'        	movff	___awdiv@quotient+1,?___awdiv+1
  4091  0092' D000               	goto	l942
  4092  0094'                    l942:
  4093  0094' 0012               	return		;funcret
  4094  0096'                    __end_of___awdiv:
  4095                           	opt stack 0
  4096                           tblptru	equ	0xFF8
  4097                           tblptrh	equ	0xFF7
  4098                           tblptrl	equ	0xFF6
  4099                           tablat	equ	0xFF5
  4100                           prodh	equ	0xFF4
  4101                           prodl	equ	0xFF3
  4102                           intcon	equ	0xFF2
  4103                           intcon2	equ	0xFF1
  4104                           postinc0	equ	0xFEE
  4105                           wreg	equ	0xFE8
  4106                           postdec1	equ	0xFE5
  4107                           fsr1l	equ	0xFE1
  4108                           postinc2	equ	0xFDE
  4109                           postdec2	equ	0xFDD
  4110                           fsr2h	equ	0xFDA
  4111                           fsr2l	equ	0xFD9
  4112                           status	equ	0xFD8
  4113                           
  4114 ;; *************** function _Turn_On_Fan *****************
  4115 ;; Defined at:
  4116 ;;		line 43 in file "Fan_Support.c"
  4117 ;; Parameters:    Size  Location     Type
  4118 ;;		None
  4119 ;; Auto vars:     Size  Location     Type
  4120 ;;		None
  4121 ;; Return value:  Size  Location     Type
  4122 ;;		None               void
  4123 ;; Registers used:
  4124 ;;		wreg, status,2, status,0, cstack
  4125 ;; Tracked objects:
  4126 ;;		On entry : 0/0
  4127 ;;		On exit  : 0/0
  4128 ;;		Unchanged: 0/0
  4129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4130 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4131 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4132 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4133 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4134 ;;Total ram usage:        0 bytes
  4135 ;; Hardware stack levels used:    1
  4136 ;; Hardware stack levels required when called:    6
  4137 ;; This function calls:
  4138 ;;		_do_update_pwm
  4139 ;; This function is called by:
  4140 ;;		_main
  4141 ;;		_Toggle_Fan
  4142 ;; This function uses a non-reentrant model
  4143 ;;
  4144                           
  4145                           	psect	text10
  4146  0000'                    __ptext10:
  4147                           	opt stack 0
  4148  0000'                    _Turn_On_Fan:
  4149                           	opt stack 24
  4150                           
  4151                           ;Fan_Support.c: 46: FAN=1;
  4152                           
  4153                           ;incstack = 0
  4154  0000' 0E01               	movlw	1
  4155  0002' 6E0E'              	movwf	_FAN,c
  4156                           
  4157                           ;Fan_Support.c: 47: do_update_pwm(duty_cycle);
  4158  0004' 501A'              	movf	_duty_cycle,w,c
  4159  0006' EC00' F000'        	call	_do_update_pwm
  4160                           
  4161                           ;Fan_Support.c: 48: PORTAbits.RA5=1;
  4162  000A' 8A80               	bsf	3968,5,c	;volatile
  4163                           
  4164                           ;Fan_Support.c: 49: PORTEbits.RE2=1;
  4165  000C' 8484               	bsf	3972,2,c	;volatile
  4166  000E' 0012               	return		;funcret
  4167  0010'                    __end_of_Turn_On_Fan:
  4168                           	opt stack 0
  4169                           tblptru	equ	0xFF8
  4170                           tblptrh	equ	0xFF7
  4171                           tblptrl	equ	0xFF6
  4172                           tablat	equ	0xFF5
  4173                           prodh	equ	0xFF4
  4174                           prodl	equ	0xFF3
  4175                           intcon	equ	0xFF2
  4176                           intcon2	equ	0xFF1
  4177                           postinc0	equ	0xFEE
  4178                           wreg	equ	0xFE8
  4179                           postdec1	equ	0xFE5
  4180                           fsr1l	equ	0xFE1
  4181                           postinc2	equ	0xFDE
  4182                           postdec2	equ	0xFDD
  4183                           fsr2h	equ	0xFDA
  4184                           fsr2l	equ	0xFD9
  4185                           status	equ	0xFD8
  4186                           
  4187 ;; *************** function _do_update_pwm *****************
  4188 ;; Defined at:
  4189 ;;		line 84 in file "Fan_Support.c"
  4190 ;; Parameters:    Size  Location     Type
  4191 ;;  duty_cycle      1    wreg     unsigned char 
  4192 ;; Auto vars:     Size  Location     Type
  4193 ;;  duty_cycle      1    3[BANK0 ] unsigned char 
  4194 ;;  dc_f            3    0[BANK0 ] float 
  4195 ;;  dc_I            2    4[BANK0 ] int 
  4196 ;; Return value:  Size  Location     Type
  4197 ;;		None               void
  4198 ;; Registers used:
  4199 ;;		wreg, status,2, status,0, cstack
  4200 ;; Tracked objects:
  4201 ;;		On entry : 0/0
  4202 ;;		On exit  : 0/0
  4203 ;;		Unchanged: 0/0
  4204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4205 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4206 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4207 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4208 ;;      Totals:         3       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4209 ;;Total ram usage:        9 bytes
  4210 ;; Hardware stack levels used:    1
  4211 ;; Hardware stack levels required when called:    5
  4212 ;; This function calls:
  4213 ;;		___ftdiv
  4214 ;;		___ftmul
  4215 ;;		___fttol
  4216 ;;		___lbtoft
  4217 ;; This function is called by:
  4218 ;;		_Turn_On_Fan
  4219 ;;		_main
  4220 ;;		_Increase_Speed
  4221 ;;		_Decrease_Speed
  4222 ;; This function uses a non-reentrant model
  4223 ;;
  4224                           
  4225                           	psect	text11
  4226  0000'                    __ptext11:
  4227                           	opt stack 0
  4228  0000'                    _do_update_pwm:
  4229                           	opt stack 25
  4230                           
  4231                           ;incstack = 0
  4232                           ;do_update_pwm@duty_cycle stored from wreg
  4233  0000' 0100               	movlb	0	; () banked
  4234  0002' 6F00'              	movwf	do_update_pwm@duty_cycle& (0+255),b
  4235                           
  4236                           ; BSR set to: 0
  4237                           ;Fan_Support.c: 86: float dc_f;
  4238                           ;Fan_Support.c: 87: int dc_I;
  4239                           ;Fan_Support.c: 88: PR2 = 0b00000100 ;
  4240  0004' 0E04               	movlw	4
  4241  0006' 6ECB               	movwf	4043,c	;volatile
  4242                           
  4243                           ;Fan_Support.c: 89: T2CON = 0b00000111 ;
  4244  0008' 0E07               	movlw	7
  4245  000A' 6ECA               	movwf	4042,c	;volatile
  4246                           
  4247                           ; BSR set to: 0
  4248                           ;Fan_Support.c: 90: dc_f = ( 4.0 * duty_cycle / 20.0) ;
  4249  000C' 0E00               	movlw	0
  4250  000E' 6E1F'              	movwf	___ftmul@f2,c
  4251  0010' 0E80               	movlw	128
  4252  0012' 6E20'              	movwf	___ftmul@f2+1,c
  4253  0014' 0E40               	movlw	64
  4254  0016' 6E21'              	movwf	___ftmul@f2+2,c
  4255  0018' 0100               	movlb	0	; () banked
  4256  001A' 5100'              	movf	do_update_pwm@duty_cycle& (0+255),w,b
  4257  001C' EC00' F000'        	call	___lbtoft
  4258  0020' C018' F01C'        	movff	?___lbtoft,___ftmul@f1
  4259  0024' C019' F01D'        	movff	?___lbtoft+1,___ftmul@f1+1
  4260  0028' C01A' F01E'        	movff	?___lbtoft+2,___ftmul@f1+2
  4261  002C' EC00' F000'        	call	___ftmul	;wreg free
  4262  0030' C01C' F02B'        	movff	?___ftmul,___ftdiv@f1
  4263  0034' C01D' F02C'        	movff	?___ftmul+1,___ftdiv@f1+1
  4264  0038' C01E' F02D'        	movff	?___ftmul+2,___ftdiv@f1+2
  4265  003C' 0E00               	movlw	0
  4266  003E' 6E2E'              	movwf	___ftdiv@f2,c
  4267  0040' 0EA0               	movlw	160
  4268  0042' 6E2F'              	movwf	___ftdiv@f2+1,c
  4269  0044' 0E41               	movlw	65
  4270  0046' 6E30'              	movwf	___ftdiv@f2+2,c
  4271  0048' EC00' F000'        	call	___ftdiv	;wreg free
  4272  004C' C02B' F000'        	movff	?___ftdiv,do_update_pwm@dc_f
  4273  0050' C02C' F001'        	movff	?___ftdiv+1,do_update_pwm@dc_f+1
  4274  0054' C02D' F002'        	movff	?___ftdiv+2,do_update_pwm@dc_f+2
  4275                           
  4276                           ;Fan_Support.c: 92: dc_I = (int) dc_f;
  4277  0058' C000' F010'        	movff	do_update_pwm@dc_f,___fttol@f1
  4278  005C' C001' F011'        	movff	do_update_pwm@dc_f+1,___fttol@f1+1
  4279  0060' C002' F012'        	movff	do_update_pwm@dc_f+2,___fttol@f1+2
  4280  0064' EC00' F000'        	call	___fttol	;wreg free
  4281  0068' C010' F004'        	movff	?___fttol,do_update_pwm@dc_I
  4282  006C' C011' F005'        	movff	?___fttol+1,do_update_pwm@dc_I+1
  4283                           
  4284                           ;Fan_Support.c: 93: if (dc_I > duty_cycle) dc_I++;
  4285  0070' 0100               	movlb	0	; () banked
  4286  0072' 5100'              	movf	do_update_pwm@duty_cycle& (0+255),w,b
  4287  0074' 6E00'              	movwf	??_do_update_pwm& (0+255),c
  4288  0076' 6A00'              	clrf	(??_do_update_pwm+1)& (0+255),c
  4289  0078' 0100               	movlb	0	; () banked
  4290  007A' 5100'              	movf	do_update_pwm@dc_I& (0+255),w,b
  4291  007C' 5C3A'              	subwf	??_do_update_pwm,w,c
  4292  007E' 503B'              	movf	??_do_update_pwm+1,w,c
  4293  0080' 0A80               	xorlw	128
  4294  0082' 6E00'              	movwf	(??_do_update_pwm+2)& (0+255),c
  4295  0084' 0100               	movlb	0	; () banked
  4296  0086' 5100'              	movf	(do_update_pwm@dc_I+1)& (0+255),w,b
  4297  0088' 0A80               	xorlw	128
  4298  008A' 5800'              	subwfb	(??_do_update_pwm+2)& (0+255),w,c
  4299  008C' B0D8               	btfsc	status,0,c
  4300  008E' D004               	goto	l5817
  4301                           
  4302                           ; BSR set to: 0
  4303  0090' 0100               	movlb	0	; () banked
  4304  0092' 4B00'              	infsnz	do_update_pwm@dc_I& (0+255),f,b
  4305  0094' 2B00'              	incf	(do_update_pwm@dc_I+1)& (0+255),f,b
  4306  0096' D000               	goto	l5817
  4307  0098'                    l5817:
  4308                           
  4309                           ; BSR set to: 0
  4310                           ;Fan_Support.c: 94: CCP1CON = ((dc_I & 0x03) << 4) | 0b00001100;
  4311  0098' C004' F03A'        	movff	do_update_pwm@dc_I,??_do_update_pwm
  4312  009C' 0E03               	movlw	3
  4313  009E' 163A'              	andwf	??_do_update_pwm,f,c
  4314  00A0' 383A'              	swapf	??_do_update_pwm,w,c
  4315  00A2' 0BF0               	andlw	240
  4316  00A4' 090C               	iorlw	12
  4317  00A6' 6EBD               	movwf	4029,c	;volatile
  4318                           
  4319                           ; BSR set to: 0
  4320                           ;Fan_Support.c: 95: CCPR1L = (dc_I) >> 2;
  4321  00A8' C004' F03A'        	movff	do_update_pwm@dc_I,??_do_update_pwm
  4322  00AC' C005' F03B'        	movff	do_update_pwm@dc_I+1,??_do_update_pwm+1
  4323  00B0' 343B'              	rlcf	??_do_update_pwm+1,w,c
  4324  00B2' 323B'              	rrcf	??_do_update_pwm+1,f,c
  4325  00B4' 323A'              	rrcf	??_do_update_pwm,f,c
  4326  00B6' 343B'              	rlcf	??_do_update_pwm+1,w,c
  4327  00B8' 323B'              	rrcf	??_do_update_pwm+1,f,c
  4328  00BA' 323A'              	rrcf	??_do_update_pwm,f,c
  4329  00BC' 503A'              	movf	??_do_update_pwm,w,c
  4330  00BE' 6EBE               	movwf	4030,c	;volatile
  4331                           
  4332                           ; BSR set to: 0
  4333  00C0' 0012               	return		;funcret
  4334  00C2'                    __end_of_do_update_pwm:
  4335                           	opt stack 0
  4336                           tblptru	equ	0xFF8
  4337                           tblptrh	equ	0xFF7
  4338                           tblptrl	equ	0xFF6
  4339                           tablat	equ	0xFF5
  4340                           prodh	equ	0xFF4
  4341                           prodl	equ	0xFF3
  4342                           intcon	equ	0xFF2
  4343                           intcon2	equ	0xFF1
  4344                           postinc0	equ	0xFEE
  4345                           wreg	equ	0xFE8
  4346                           postdec1	equ	0xFE5
  4347                           fsr1l	equ	0xFE1
  4348                           postinc2	equ	0xFDE
  4349                           postdec2	equ	0xFDD
  4350                           fsr2h	equ	0xFDA
  4351                           fsr2l	equ	0xFD9
  4352                           status	equ	0xFD8
  4353                           
  4354 ;; *************** function ___lbtoft *****************
  4355 ;; Defined at:
  4356 ;;		line 27 in file "E:\XC8\sources\common\lbtoft.c"
  4357 ;; Parameters:    Size  Location     Type
  4358 ;;  c               1    wreg     unsigned char 
  4359 ;; Auto vars:     Size  Location     Type
  4360 ;;  c               1   27[COMRAM] unsigned char 
  4361 ;; Return value:  Size  Location     Type
  4362 ;;                  3   24[COMRAM] float 
  4363 ;; Registers used:
  4364 ;;		wreg, status,2, status,0, cstack
  4365 ;; Tracked objects:
  4366 ;;		On entry : 0/0
  4367 ;;		On exit  : 0/0
  4368 ;;		Unchanged: 0/0
  4369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4370 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4371 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4372 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4373 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4374 ;;Total ram usage:        4 bytes
  4375 ;; Hardware stack levels used:    1
  4376 ;; Hardware stack levels required when called:    4
  4377 ;; This function calls:
  4378 ;;		___ftpack
  4379 ;; This function is called by:
  4380 ;;		_do_update_pwm
  4381 ;; This function uses a non-reentrant model
  4382 ;;
  4383                           
  4384                           	psect	text12
  4385  0000'                    __ptext12:
  4386                           	opt stack 0
  4387  0000'                    ___lbtoft:
  4388                           	opt stack 25
  4389                           
  4390                           ; BSR set to: 0
  4391                           ;incstack = 0
  4392                           ;___lbtoft@c stored from wreg
  4393  0000' 6E1B'              	movwf	___lbtoft@c,c
  4394  0002' 501B'              	movf	___lbtoft@c,w,c
  4395  0004' 6E10'              	movwf	___ftpack@arg,c
  4396  0006' 6A11'              	clrf	___ftpack@arg+1,c
  4397  0008' 6A12'              	clrf	___ftpack@arg+2,c
  4398  000A' 0E8E               	movlw	142
  4399  000C' 6E13'              	movwf	___ftpack@exp,c
  4400  000E' 0E00               	movlw	0
  4401  0010' 6E14'              	movwf	___ftpack@sign,c
  4402  0012' EC00' F000'        	call	___ftpack	;wreg free
  4403  0016' C010' F018'        	movff	?___ftpack,?___lbtoft
  4404  001A' C011' F019'        	movff	?___ftpack+1,?___lbtoft+1
  4405  001E' C012' F01A'        	movff	?___ftpack+2,?___lbtoft+2
  4406  0022' D000               	goto	l1206
  4407  0024'                    l1206:
  4408  0024' 0012               	return		;funcret
  4409  0026'                    __end_of___lbtoft:
  4410                           	opt stack 0
  4411                           tblptru	equ	0xFF8
  4412                           tblptrh	equ	0xFF7
  4413                           tblptrl	equ	0xFF6
  4414                           tablat	equ	0xFF5
  4415                           prodh	equ	0xFF4
  4416                           prodl	equ	0xFF3
  4417                           intcon	equ	0xFF2
  4418                           intcon2	equ	0xFF1
  4419                           postinc0	equ	0xFEE
  4420                           wreg	equ	0xFE8
  4421                           postdec1	equ	0xFE5
  4422                           fsr1l	equ	0xFE1
  4423                           postinc2	equ	0xFDE
  4424                           postdec2	equ	0xFDD
  4425                           fsr2h	equ	0xFDA
  4426                           fsr2l	equ	0xFD9
  4427                           status	equ	0xFD8
  4428                           
  4429 ;; *************** function ___fttol *****************
  4430 ;; Defined at:
  4431 ;;		line 44 in file "E:\XC8\sources\common\fttol.c"
  4432 ;; Parameters:    Size  Location     Type
  4433 ;;  f1              3   16[COMRAM] float 
  4434 ;; Auto vars:     Size  Location     Type
  4435 ;;  lval            4   26[COMRAM] unsigned long 
  4436 ;;  exp1            1   30[COMRAM] unsigned char 
  4437 ;;  sign1           1   25[COMRAM] unsigned char 
  4438 ;; Return value:  Size  Location     Type
  4439 ;;                  4   16[COMRAM] long 
  4440 ;; Registers used:
  4441 ;;		wreg, status,2, status,0
  4442 ;; Tracked objects:
  4443 ;;		On entry : 0/0
  4444 ;;		On exit  : 0/0
  4445 ;;		Unchanged: 0/0
  4446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4447 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4448 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4449 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4450 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4451 ;;Total ram usage:       15 bytes
  4452 ;; Hardware stack levels used:    1
  4453 ;; Hardware stack levels required when called:    3
  4454 ;; This function calls:
  4455 ;;		Nothing
  4456 ;; This function is called by:
  4457 ;;		_do_update_pwm
  4458 ;; This function uses a non-reentrant model
  4459 ;;
  4460                           
  4461                           	psect	text13
  4462  0000'                    __ptext13:
  4463                           	opt stack 0
  4464  0000'                    ___fttol:
  4465                           	opt stack 26
  4466                           
  4467                           ;incstack = 0
  4468  0000' C012' F014'        	movff	___fttol@f1+2,??___fttol
  4469  0004' 6A00'              	clrf	(??___fttol+1)& (0+255),c
  4470  0006' 6A00'              	clrf	(??___fttol+2)& (0+255),c
  4471  0008' 3411'              	rlcf	___fttol@f1+1,w,c
  4472  000A' 3600'              	rlcf	??___fttol& (0+255),f,c
  4473  000C' E301               	bnc	u4381
  4474  000E' 8000'              	bsf	(??___fttol+1)& (0+255),0,c
  4475  0010'                    u4381:
  4476  0010' 5014'              	movf	??___fttol,w,c
  4477  0012' 6E1E'              	movwf	___fttol@exp1,c
  4478  0014' 501E'              	movf	___fttol@exp1,w,c
  4479  0016' A4D8               	btfss	status,2,c
  4480  0018' D002               	goto	l5581
  4481  001A' D039               	goto	l5605
  4482  001C' D063               	goto	l1165
  4483  001E'                    l5581:
  4484  001E' 0E17               	movlw	23
  4485  0020' 6E00'              	movwf	??___fttol& (0+255),c
  4486  0022' C010' F015'        	movff	___fttol@f1,??___fttol+1
  4487  0026' C011' F016'        	movff	___fttol@f1+1,??___fttol+2
  4488  002A' C012' F017'        	movff	___fttol@f1+2,??___fttol+3
  4489  002E' 2814'              	incf	??___fttol,w,c
  4490  0030' 6E00'              	movwf	(??___fttol+4)& (0+255),c
  4491  0032' D004               	goto	u4400
  4492  0034'                    u4405:
  4493  0034' 90D8               	bcf	status,0,c
  4494  0036' 3217'              	rrcf	??___fttol+3,f,c
  4495  0038' 3216'              	rrcf	??___fttol+2,f,c
  4496  003A' 3215'              	rrcf	??___fttol+1,f,c
  4497  003C'                    u4400:
  4498  003C' 2E00'              	decfsz	(??___fttol+4)& (0+255),f,c
  4499  003E' D7FA               	goto	u4405
  4500  0040' 5015'              	movf	??___fttol+1,w,c
  4501  0042' 6E19'              	movwf	___fttol@sign1,c
  4502  0044' 8E11'              	bsf	___fttol@f1+1,7,c
  4503  0046' 0EFF               	movlw	255
  4504  0048' 1610'              	andwf	___fttol@f1,f,c
  4505  004A' 0EFF               	movlw	255
  4506  004C' 1611'              	andwf	___fttol@f1+1,f,c
  4507  004E' 0E00               	movlw	0
  4508  0050' 1612'              	andwf	___fttol@f1+2,f,c
  4509  0052' 5010'              	movf	___fttol@f1,w,c
  4510  0054' 6E1A'              	movwf	___fttol@lval,c
  4511  0056' 5011'              	movf	___fttol@f1+1,w,c
  4512  0058' 6E1B'              	movwf	___fttol@lval+1,c
  4513  005A' 5012'              	movf	___fttol@f1+2,w,c
  4514  005C' 6E1C'              	movwf	___fttol@lval+2,c
  4515  005E' 6A1D'              	clrf	___fttol@lval+3,c
  4516  0060' 0E8E               	movlw	142
  4517  0062' 5E1E'              	subwf	___fttol@exp1,f,c
  4518  0064' AE1E'              	btfss	___fttol@exp1,7,c
  4519  0066' D010               	goto	l5603
  4520  0068' 501E'              	movf	___fttol@exp1,w,c
  4521  006A' 0A80               	xorlw	128
  4522  006C' 0F8F               	addlw	143
  4523  006E' B0D8               	btfsc	status,0,c
  4524  0070' D003               	goto	l5599
  4525  0072' D00D               	goto	l5605
  4526  0074' D037               	goto	l1165
  4527  0076' D000               	goto	l5599
  4528  0078'                    l5599:
  4529  0078' 90D8               	bcf	status,0,c
  4530  007A' 321D'              	rrcf	___fttol@lval+3,f,c
  4531  007C' 321C'              	rrcf	___fttol@lval+2,f,c
  4532  007E' 321B'              	rrcf	___fttol@lval+1,f,c
  4533  0080' 321A'              	rrcf	___fttol@lval,f,c
  4534  0082' 3E1E'              	incfsz	___fttol@exp1,f,c
  4535  0084' D7F9               	goto	l5599
  4536  0086' D019               	goto	l5613
  4537  0088'                    l5603:
  4538  0088' 0E17               	movlw	23
  4539  008A' 641E'              	cpfsgt	___fttol@exp1,c
  4540  008C' D011               	goto	l5611
  4541  008E'                    l5605:
  4542  008E' 0E00               	movlw	0
  4543  0090' 6E10'              	movwf	?___fttol,c
  4544  0092' 0E00               	movlw	0
  4545  0094' 6E11'              	movwf	?___fttol+1,c
  4546  0096' 0E00               	movlw	0
  4547  0098' 6E12'              	movwf	?___fttol+2,c
  4548  009A' 0E00               	movlw	0
  4549  009C' 6E13'              	movwf	?___fttol+3,c
  4550  009E' D022               	goto	l1165
  4551  00A0' D007               	goto	l5611
  4552  00A2'                    l5609:
  4553  00A2' 90D8               	bcf	status,0,c
  4554  00A4' 361A'              	rlcf	___fttol@lval,f,c
  4555  00A6' 361B'              	rlcf	___fttol@lval+1,f,c
  4556  00A8' 361C'              	rlcf	___fttol@lval+2,f,c
  4557  00AA' 361D'              	rlcf	___fttol@lval+3,f,c
  4558  00AC' 061E'              	decf	___fttol@exp1,f,c
  4559  00AE' D000               	goto	l5611
  4560  00B0'                    l5611:
  4561  00B0' 501E'              	movf	___fttol@exp1,w,c
  4562  00B2' B4D8               	btfsc	status,2,c
  4563  00B4' D002               	goto	l5613
  4564  00B6' D7F5               	goto	l5609
  4565  00B8' D000               	goto	l5613
  4566  00BA'                    l5613:
  4567  00BA' 5019'              	movf	___fttol@sign1,w,c
  4568  00BC' B4D8               	btfsc	status,2,c
  4569  00BE' D009               	goto	l5617
  4570  00C0' 1E1D'              	comf	___fttol@lval+3,f,c
  4571  00C2' 1E1C'              	comf	___fttol@lval+2,f,c
  4572  00C4' 1E1B'              	comf	___fttol@lval+1,f,c
  4573  00C6' 6C1A'              	negf	___fttol@lval,c
  4574  00C8' 0E00               	movlw	0
  4575  00CA' 221B'              	addwfc	___fttol@lval+1,f,c
  4576  00CC' 221C'              	addwfc	___fttol@lval+2,f,c
  4577  00CE' 221D'              	addwfc	___fttol@lval+3,f,c
  4578  00D0' D000               	goto	l5617
  4579  00D2'                    l5617:
  4580  00D2' C01A' F010'        	movff	___fttol@lval,?___fttol
  4581  00D6' C01B' F011'        	movff	___fttol@lval+1,?___fttol+1
  4582  00DA' C01C' F012'        	movff	___fttol@lval+2,?___fttol+2
  4583  00DE' C01D' F013'        	movff	___fttol@lval+3,?___fttol+3
  4584  00E2' D000               	goto	l1165
  4585  00E4'                    l1165:
  4586  00E4' 0012               	return		;funcret
  4587  00E6'                    __end_of___fttol:
  4588                           	opt stack 0
  4589                           tblptru	equ	0xFF8
  4590                           tblptrh	equ	0xFF7
  4591                           tblptrl	equ	0xFF6
  4592                           tablat	equ	0xFF5
  4593                           prodh	equ	0xFF4
  4594                           prodl	equ	0xFF3
  4595                           intcon	equ	0xFF2
  4596                           intcon2	equ	0xFF1
  4597                           postinc0	equ	0xFEE
  4598                           wreg	equ	0xFE8
  4599                           postdec1	equ	0xFE5
  4600                           fsr1l	equ	0xFE1
  4601                           postinc2	equ	0xFDE
  4602                           postdec2	equ	0xFDD
  4603                           fsr2h	equ	0xFDA
  4604                           fsr2l	equ	0xFD9
  4605                           status	equ	0xFD8
  4606                           
  4607 ;; *************** function ___ftmul *****************
  4608 ;; Defined at:
  4609 ;;		line 62 in file "E:\XC8\sources\common\ftmul.c"
  4610 ;; Parameters:    Size  Location     Type
  4611 ;;  f1              3   28[COMRAM] float 
  4612 ;;  f2              3   31[COMRAM] float 
  4613 ;; Auto vars:     Size  Location     Type
  4614 ;;  f3_as_produc    3   38[COMRAM] unsigned um
  4615 ;;  sign            1   42[COMRAM] unsigned char 
  4616 ;;  cntr            1   41[COMRAM] unsigned char 
  4617 ;;  exp             1   37[COMRAM] unsigned char 
  4618 ;; Return value:  Size  Location     Type
  4619 ;;                  3   28[COMRAM] float 
  4620 ;; Registers used:
  4621 ;;		wreg, status,2, status,0, cstack
  4622 ;; Tracked objects:
  4623 ;;		On entry : 0/0
  4624 ;;		On exit  : 0/0
  4625 ;;		Unchanged: 0/0
  4626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4627 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4628 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4629 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4630 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4631 ;;Total ram usage:       15 bytes
  4632 ;; Hardware stack levels used:    1
  4633 ;; Hardware stack levels required when called:    4
  4634 ;; This function calls:
  4635 ;;		___ftpack
  4636 ;; This function is called by:
  4637 ;;		_do_update_pwm
  4638 ;; This function uses a non-reentrant model
  4639 ;;
  4640                           
  4641                           	psect	text14
  4642  0000'                    __ptext14:
  4643                           	opt stack 0
  4644  0000'                    ___ftmul:
  4645                           	opt stack 25
  4646                           
  4647                           ;incstack = 0
  4648  0000' C01E' F022'        	movff	___ftmul@f1+2,??___ftmul
  4649  0004' 6A00'              	clrf	(??___ftmul+1)& (0+255),c
  4650  0006' 6A00'              	clrf	(??___ftmul+2)& (0+255),c
  4651  0008' 341D'              	rlcf	___ftmul@f1+1,w,c
  4652  000A' 3600'              	rlcf	??___ftmul& (0+255),f,c
  4653  000C' E301               	bnc	u4321
  4654  000E' 8000'              	bsf	(??___ftmul+1)& (0+255),0,c
  4655  0010'                    u4321:
  4656  0010' 5022'              	movf	??___ftmul,w,c
  4657  0012' 6E25'              	movwf	___ftmul@exp,c
  4658  0014' 5025'              	movf	___ftmul@exp,w,c
  4659  0016' A4D8               	btfss	status,2,c
  4660  0018' D002               	goto	l5533
  4661  001A' D00E               	goto	l5535
  4662  001C' D06C               	goto	l1144
  4663  001E'                    l5533:
  4664  001E' C021' F022'        	movff	___ftmul@f2+2,??___ftmul
  4665  0022' 6A00'              	clrf	(??___ftmul+1)& (0+255),c
  4666  0024' 6A00'              	clrf	(??___ftmul+2)& (0+255),c
  4667  0026' 3420'              	rlcf	___ftmul@f2+1,w,c
  4668  0028' 3600'              	rlcf	??___ftmul& (0+255),f,c
  4669  002A' E301               	bnc	u4341
  4670  002C' 8000'              	bsf	(??___ftmul+1)& (0+255),0,c
  4671  002E'                    u4341:
  4672  002E' 5022'              	movf	??___ftmul,w,c
  4673  0030' 6E2A'              	movwf	___ftmul@sign,c
  4674  0032' 502A'              	movf	___ftmul@sign,w,c
  4675  0034' A4D8               	btfss	status,2,c
  4676  0036' D007               	goto	l5539
  4677  0038'                    l5535:
  4678  0038' 0E00               	movlw	0
  4679  003A' 6E1C'              	movwf	?___ftmul,c
  4680  003C' 0E00               	movlw	0
  4681  003E' 6E1D'              	movwf	?___ftmul+1,c
  4682  0040' 0E00               	movlw	0
  4683  0042' 6E1E'              	movwf	?___ftmul+2,c
  4684  0044' D058               	goto	l1144
  4685  0046'                    l5539:
  4686  0046' 502A'              	movf	___ftmul@sign,w,c
  4687  0048' 0F7B               	addlw	123
  4688  004A' 2625'              	addwf	___ftmul@exp,f,c
  4689  004C' C01E' F02A'        	movff	___ftmul@f1+2,___ftmul@sign
  4690  0050' 5021'              	movf	___ftmul@f2+2,w,c
  4691  0052' 1A2A'              	xorwf	___ftmul@sign,f,c
  4692  0054' 0E80               	movlw	128
  4693  0056' 162A'              	andwf	___ftmul@sign,f,c
  4694  0058' 8E1D'              	bsf	___ftmul@f1+1,7,c
  4695  005A' 8E20'              	bsf	___ftmul@f2+1,7,c
  4696  005C' 0EFF               	movlw	255
  4697  005E' 161F'              	andwf	___ftmul@f2,f,c
  4698  0060' 0EFF               	movlw	255
  4699  0062' 1620'              	andwf	___ftmul@f2+1,f,c
  4700  0064' 0E00               	movlw	0
  4701  0066' 1621'              	andwf	___ftmul@f2+2,f,c
  4702  0068' 0E00               	movlw	0
  4703  006A' 6E26'              	movwf	___ftmul@f3_as_product,c
  4704  006C' 0E00               	movlw	0
  4705  006E' 6E27'              	movwf	___ftmul@f3_as_product+1,c
  4706  0070' 0E00               	movlw	0
  4707  0072' 6E28'              	movwf	___ftmul@f3_as_product+2,c
  4708  0074' 0E07               	movlw	7
  4709  0076' 6E29'              	movwf	___ftmul@cntr,c
  4710  0078' D000               	goto	l5553
  4711  007A'                    l5553:
  4712  007A' A01C'              	btfss	___ftmul@f1,0,c
  4713  007C' D007               	goto	l5557
  4714  007E' 501F'              	movf	___ftmul@f2,w,c
  4715  0080' 2626'              	addwf	___ftmul@f3_as_product,f,c
  4716  0082' 5020'              	movf	___ftmul@f2+1,w,c
  4717  0084' 2227'              	addwfc	___ftmul@f3_as_product+1,f,c
  4718  0086' 5021'              	movf	___ftmul@f2+2,w,c
  4719  0088' 2228'              	addwfc	___ftmul@f3_as_product+2,f,c
  4720  008A' D000               	goto	l5557
  4721  008C'                    l5557:
  4722  008C' 90D8               	bcf	status,0,c
  4723  008E' 321E'              	rrcf	___ftmul@f1+2,f,c
  4724  0090' 321D'              	rrcf	___ftmul@f1+1,f,c
  4725  0092' 321C'              	rrcf	___ftmul@f1,f,c
  4726  0094' 90D8               	bcf	status,0,c
  4727  0096' 361F'              	rlcf	___ftmul@f2,f,c
  4728  0098' 3620'              	rlcf	___ftmul@f2+1,f,c
  4729  009A' 3621'              	rlcf	___ftmul@f2+2,f,c
  4730  009C' 2E29'              	decfsz	___ftmul@cntr,f,c
  4731  009E' D7ED               	goto	l5553
  4732  00A0' D000               	goto	l5561
  4733  00A2'                    l5561:
  4734  00A2' 0E09               	movlw	9
  4735  00A4' 6E29'              	movwf	___ftmul@cntr,c
  4736  00A6' D000               	goto	l5563
  4737  00A8'                    l5563:
  4738  00A8' A01C'              	btfss	___ftmul@f1,0,c
  4739  00AA' D007               	goto	l5567
  4740  00AC' 501F'              	movf	___ftmul@f2,w,c
  4741  00AE' 2626'              	addwf	___ftmul@f3_as_product,f,c
  4742  00B0' 5020'              	movf	___ftmul@f2+1,w,c
  4743  00B2' 2227'              	addwfc	___ftmul@f3_as_product+1,f,c
  4744  00B4' 5021'              	movf	___ftmul@f2+2,w,c
  4745  00B6' 2228'              	addwfc	___ftmul@f3_as_product+2,f,c
  4746  00B8' D000               	goto	l5567
  4747  00BA'                    l5567:
  4748  00BA' 90D8               	bcf	status,0,c
  4749  00BC' 321E'              	rrcf	___ftmul@f1+2,f,c
  4750  00BE' 321D'              	rrcf	___ftmul@f1+1,f,c
  4751  00C0' 321C'              	rrcf	___ftmul@f1,f,c
  4752  00C2' 90D8               	bcf	status,0,c
  4753  00C4' 3228'              	rrcf	___ftmul@f3_as_product+2,f,c
  4754  00C6' 3227'              	rrcf	___ftmul@f3_as_product+1,f,c
  4755  00C8' 3226'              	rrcf	___ftmul@f3_as_product,f,c
  4756  00CA' 2E29'              	decfsz	___ftmul@cntr,f,c
  4757  00CC' D7ED               	goto	l5563
  4758  00CE' D000               	goto	l5571
  4759  00D0'                    l5571:
  4760  00D0' C026' F010'        	movff	___ftmul@f3_as_product,___ftpack@arg
  4761  00D4' C027' F011'        	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  4762  00D8' C028' F012'        	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  4763  00DC' C025' F013'        	movff	___ftmul@exp,___ftpack@exp
  4764  00E0' C02A' F014'        	movff	___ftmul@sign,___ftpack@sign
  4765  00E4' EC00' F000'        	call	___ftpack	;wreg free
  4766  00E8' C010' F01C'        	movff	?___ftpack,?___ftmul
  4767  00EC' C011' F01D'        	movff	?___ftpack+1,?___ftmul+1
  4768  00F0' C012' F01E'        	movff	?___ftpack+2,?___ftmul+2
  4769  00F4' D000               	goto	l1144
  4770  00F6'                    l1144:
  4771  00F6' 0012               	return		;funcret
  4772  00F8'                    __end_of___ftmul:
  4773                           	opt stack 0
  4774                           tblptru	equ	0xFF8
  4775                           tblptrh	equ	0xFF7
  4776                           tblptrl	equ	0xFF6
  4777                           tablat	equ	0xFF5
  4778                           prodh	equ	0xFF4
  4779                           prodl	equ	0xFF3
  4780                           intcon	equ	0xFF2
  4781                           intcon2	equ	0xFF1
  4782                           postinc0	equ	0xFEE
  4783                           wreg	equ	0xFE8
  4784                           postdec1	equ	0xFE5
  4785                           fsr1l	equ	0xFE1
  4786                           postinc2	equ	0xFDE
  4787                           postdec2	equ	0xFDD
  4788                           fsr2h	equ	0xFDA
  4789                           fsr2l	equ	0xFD9
  4790                           status	equ	0xFD8
  4791                           
  4792 ;; *************** function ___ftdiv *****************
  4793 ;; Defined at:
  4794 ;;		line 54 in file "E:\XC8\sources\common\ftdiv.c"
  4795 ;; Parameters:    Size  Location     Type
  4796 ;;  f1              3   43[COMRAM] float 
  4797 ;;  f2              3   46[COMRAM] float 
  4798 ;; Auto vars:     Size  Location     Type
  4799 ;;  f3              3   53[COMRAM] float 
  4800 ;;  sign            1   57[COMRAM] unsigned char 
  4801 ;;  exp             1   56[COMRAM] unsigned char 
  4802 ;;  cntr            1   52[COMRAM] unsigned char 
  4803 ;; Return value:  Size  Location     Type
  4804 ;;                  3   43[COMRAM] float 
  4805 ;; Registers used:
  4806 ;;		wreg, status,2, status,0, cstack
  4807 ;; Tracked objects:
  4808 ;;		On entry : 0/0
  4809 ;;		On exit  : 0/0
  4810 ;;		Unchanged: 0/0
  4811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4812 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4813 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4814 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4815 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4816 ;;Total ram usage:       15 bytes
  4817 ;; Hardware stack levels used:    1
  4818 ;; Hardware stack levels required when called:    4
  4819 ;; This function calls:
  4820 ;;		___ftpack
  4821 ;; This function is called by:
  4822 ;;		_do_update_pwm
  4823 ;; This function uses a non-reentrant model
  4824 ;;
  4825                           
  4826                           	psect	text15
  4827  0000'                    __ptext15:
  4828                           	opt stack 0
  4829  0000'                    ___ftdiv:
  4830                           	opt stack 25
  4831                           
  4832                           ;incstack = 0
  4833  0000' C02D' F031'        	movff	___ftdiv@f1+2,??___ftdiv
  4834  0004' 6A00'              	clrf	(??___ftdiv+1)& (0+255),c
  4835  0006' 6A00'              	clrf	(??___ftdiv+2)& (0+255),c
  4836  0008' 342C'              	rlcf	___ftdiv@f1+1,w,c
  4837  000A' 3600'              	rlcf	??___ftdiv& (0+255),f,c
  4838  000C' E301               	bnc	u4271
  4839  000E' 8000'              	bsf	(??___ftdiv+1)& (0+255),0,c
  4840  0010'                    u4271:
  4841  0010' 5031'              	movf	??___ftdiv,w,c
  4842  0012' 6E38'              	movwf	___ftdiv@exp,c
  4843  0014' 5038'              	movf	___ftdiv@exp,w,c
  4844  0016' A4D8               	btfss	status,2,c
  4845  0018' D002               	goto	l5487
  4846  001A' D00E               	goto	l5489
  4847  001C' D061               	goto	l1129
  4848  001E'                    l5487:
  4849  001E' C030' F031'        	movff	___ftdiv@f2+2,??___ftdiv
  4850  0022' 6A00'              	clrf	(??___ftdiv+1)& (0+255),c
  4851  0024' 6A00'              	clrf	(??___ftdiv+2)& (0+255),c
  4852  0026' 342F'              	rlcf	___ftdiv@f2+1,w,c
  4853  0028' 3600'              	rlcf	??___ftdiv& (0+255),f,c
  4854  002A' E301               	bnc	u4291
  4855  002C' 8000'              	bsf	(??___ftdiv+1)& (0+255),0,c
  4856  002E'                    u4291:
  4857  002E' 5031'              	movf	??___ftdiv,w,c
  4858  0030' 6E39'              	movwf	___ftdiv@sign,c
  4859  0032' 5039'              	movf	___ftdiv@sign,w,c
  4860  0034' A4D8               	btfss	status,2,c
  4861  0036' D007               	goto	l5493
  4862  0038'                    l5489:
  4863  0038' 0E00               	movlw	0
  4864  003A' 6E2B'              	movwf	?___ftdiv,c
  4865  003C' 0E00               	movlw	0
  4866  003E' 6E2C'              	movwf	?___ftdiv+1,c
  4867  0040' 0E00               	movlw	0
  4868  0042' 6E2D'              	movwf	?___ftdiv+2,c
  4869  0044' D04D               	goto	l1129
  4870  0046'                    l5493:
  4871  0046' 0E00               	movlw	0
  4872  0048' 6E35'              	movwf	___ftdiv@f3,c
  4873  004A' 0E00               	movlw	0
  4874  004C' 6E36'              	movwf	___ftdiv@f3+1,c
  4875  004E' 0E00               	movlw	0
  4876  0050' 6E37'              	movwf	___ftdiv@f3+2,c
  4877  0052' 5039'              	movf	___ftdiv@sign,w,c
  4878  0054' 0F89               	addlw	137
  4879  0056' 5E38'              	subwf	___ftdiv@exp,f,c
  4880  0058' C02D' F039'        	movff	___ftdiv@f1+2,___ftdiv@sign
  4881  005C' 5030'              	movf	___ftdiv@f2+2,w,c
  4882  005E' 1A39'              	xorwf	___ftdiv@sign,f,c
  4883  0060' 0E80               	movlw	128
  4884  0062' 1639'              	andwf	___ftdiv@sign,f,c
  4885  0064' 8E2C'              	bsf	___ftdiv@f1+1,7,c
  4886  0066' 0EFF               	movlw	255
  4887  0068' 162B'              	andwf	___ftdiv@f1,f,c
  4888  006A' 0EFF               	movlw	255
  4889  006C' 162C'              	andwf	___ftdiv@f1+1,f,c
  4890  006E' 0E00               	movlw	0
  4891  0070' 162D'              	andwf	___ftdiv@f1+2,f,c
  4892  0072' 8E2F'              	bsf	___ftdiv@f2+1,7,c
  4893  0074' 0EFF               	movlw	255
  4894  0076' 162E'              	andwf	___ftdiv@f2,f,c
  4895  0078' 0EFF               	movlw	255
  4896  007A' 162F'              	andwf	___ftdiv@f2+1,f,c
  4897  007C' 0E00               	movlw	0
  4898  007E' 1630'              	andwf	___ftdiv@f2+2,f,c
  4899  0080' 0E18               	movlw	24
  4900  0082' 6E34'              	movwf	___ftdiv@cntr,c
  4901  0084' D000               	goto	l5513
  4902  0086'                    l5513:
  4903  0086' 90D8               	bcf	status,0,c
  4904  0088' 3635'              	rlcf	___ftdiv@f3,f,c
  4905  008A' 3636'              	rlcf	___ftdiv@f3+1,f,c
  4906  008C' 3637'              	rlcf	___ftdiv@f3+2,f,c
  4907  008E' 502E'              	movf	___ftdiv@f2,w,c
  4908  0090' 5C2B'              	subwf	___ftdiv@f1,w,c
  4909  0092' 502F'              	movf	___ftdiv@f2+1,w,c
  4910  0094' 582C'              	subwfb	___ftdiv@f1+1,w,c
  4911  0096' 5030'              	movf	___ftdiv@f2+2,w,c
  4912  0098' 582D'              	subwfb	___ftdiv@f1+2,w,c
  4913  009A' A0D8               	btfss	status,0,c
  4914  009C' D007               	goto	l1132
  4915  009E' 502E'              	movf	___ftdiv@f2,w,c
  4916  00A0' 5E2B'              	subwf	___ftdiv@f1,f,c
  4917  00A2' 502F'              	movf	___ftdiv@f2+1,w,c
  4918  00A4' 5A2C'              	subwfb	___ftdiv@f1+1,f,c
  4919  00A6' 5030'              	movf	___ftdiv@f2+2,w,c
  4920  00A8' 5A2D'              	subwfb	___ftdiv@f1+2,f,c
  4921  00AA' 8035'              	bsf	___ftdiv@f3,0,c
  4922  00AC'                    l1132:
  4923  00AC' 90D8               	bcf	status,0,c
  4924  00AE' 362B'              	rlcf	___ftdiv@f1,f,c
  4925  00B0' 362C'              	rlcf	___ftdiv@f1+1,f,c
  4926  00B2' 362D'              	rlcf	___ftdiv@f1+2,f,c
  4927  00B4' 2E34'              	decfsz	___ftdiv@cntr,f,c
  4928  00B6' D7E7               	goto	l5513
  4929  00B8' D000               	goto	l5523
  4930  00BA'                    l5523:
  4931  00BA' C035' F010'        	movff	___ftdiv@f3,___ftpack@arg
  4932  00BE' C036' F011'        	movff	___ftdiv@f3+1,___ftpack@arg+1
  4933  00C2' C037' F012'        	movff	___ftdiv@f3+2,___ftpack@arg+2
  4934  00C6' C038' F013'        	movff	___ftdiv@exp,___ftpack@exp
  4935  00CA' C039' F014'        	movff	___ftdiv@sign,___ftpack@sign
  4936  00CE' EC00' F000'        	call	___ftpack	;wreg free
  4937  00D2' C010' F02B'        	movff	?___ftpack,?___ftdiv
  4938  00D6' C011' F02C'        	movff	?___ftpack+1,?___ftdiv+1
  4939  00DA' C012' F02D'        	movff	?___ftpack+2,?___ftdiv+2
  4940  00DE' D000               	goto	l1129
  4941  00E0'                    l1129:
  4942  00E0' 0012               	return		;funcret
  4943  00E2'                    __end_of___ftdiv:
  4944                           	opt stack 0
  4945                           tblptru	equ	0xFF8
  4946                           tblptrh	equ	0xFF7
  4947                           tblptrl	equ	0xFF6
  4948                           tablat	equ	0xFF5
  4949                           prodh	equ	0xFF4
  4950                           prodl	equ	0xFF3
  4951                           intcon	equ	0xFF2
  4952                           intcon2	equ	0xFF1
  4953                           postinc0	equ	0xFEE
  4954                           wreg	equ	0xFE8
  4955                           postdec1	equ	0xFE5
  4956                           fsr1l	equ	0xFE1
  4957                           postinc2	equ	0xFDE
  4958                           postdec2	equ	0xFDD
  4959                           fsr2h	equ	0xFDA
  4960                           fsr2l	equ	0xFD9
  4961                           status	equ	0xFD8
  4962                           
  4963 ;; *************** function ___ftpack *****************
  4964 ;; Defined at:
  4965 ;;		line 62 in file "E:\XC8\sources\common\float.c"
  4966 ;; Parameters:    Size  Location     Type
  4967 ;;  arg             3   16[COMRAM] unsigned um
  4968 ;;  exp             1   19[COMRAM] unsigned char 
  4969 ;;  sign            1   20[COMRAM] unsigned char 
  4970 ;; Auto vars:     Size  Location     Type
  4971 ;;		None
  4972 ;; Return value:  Size  Location     Type
  4973 ;;                  3   16[COMRAM] float 
  4974 ;; Registers used:
  4975 ;;		wreg, status,2, status,0
  4976 ;; Tracked objects:
  4977 ;;		On entry : 0/0
  4978 ;;		On exit  : 0/0
  4979 ;;		Unchanged: 0/0
  4980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4981 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4982 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4983 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4984 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4985 ;;Total ram usage:        8 bytes
  4986 ;; Hardware stack levels used:    1
  4987 ;; Hardware stack levels required when called:    3
  4988 ;; This function calls:
  4989 ;;		Nothing
  4990 ;; This function is called by:
  4991 ;;		___ftdiv
  4992 ;;		___ftmul
  4993 ;;		___lbtoft
  4994 ;; This function uses a non-reentrant model
  4995 ;;
  4996                           
  4997                           	psect	text16
  4998  0000'                    __ptext16:
  4999                           	opt stack 0
  5000  0000'                    ___ftpack:
  5001                           	opt stack 25
  5002                           
  5003                           ;incstack = 0
  5004  0000' 5013'              	movf	___ftpack@exp,w,c
  5005  0002' B4D8               	btfsc	status,2,c
  5006  0004' D005               	goto	l5175
  5007  0006' 5010'              	movf	___ftpack@arg,w,c
  5008  0008' 1011'              	iorwf	___ftpack@arg+1,w,c
  5009  000A' 1012'              	iorwf	___ftpack@arg+2,w,c
  5010  000C' A4D8               	btfss	status,2,c
  5011  000E' D00E               	goto	l5181
  5012  0010'                    l5175:
  5013  0010' 0E00               	movlw	0
  5014  0012' 6E10'              	movwf	?___ftpack,c
  5015  0014' 0E00               	movlw	0
  5016  0016' 6E11'              	movwf	?___ftpack+1,c
  5017  0018' 0E00               	movlw	0
  5018  001A' 6E12'              	movwf	?___ftpack+2,c
  5019  001C' D053               	goto	l1057
  5020  001E' D006               	goto	l5181
  5021  0020'                    l5179:
  5022  0020' 2A13'              	incf	___ftpack@exp,f,c
  5023  0022' 90D8               	bcf	status,0,c
  5024  0024' 3212'              	rrcf	___ftpack@arg+2,f,c
  5025  0026' 3211'              	rrcf	___ftpack@arg+1,f,c
  5026  0028' 3210'              	rrcf	___ftpack@arg,f,c
  5027  002A' D000               	goto	l5181
  5028  002C'                    l5181:
  5029  002C' 0E00               	movlw	0
  5030  002E' 1410'              	andwf	___ftpack@arg,w,c
  5031  0030' 6E00'              	movwf	??___ftpack& (0+255),c
  5032  0032' 0E00               	movlw	0
  5033  0034' 1411'              	andwf	___ftpack@arg+1,w,c
  5034  0036' 6E00'              	movwf	(??___ftpack+1)& (0+255),c
  5035  0038' 0EFE               	movlw	254
  5036  003A' 1412'              	andwf	___ftpack@arg+2,w,c
  5037  003C' 6E00'              	movwf	(??___ftpack+2)& (0+255),c
  5038  003E' 5015'              	movf	??___ftpack,w,c
  5039  0040' 1016'              	iorwf	??___ftpack+1,w,c
  5040  0042' 1017'              	iorwf	??___ftpack+2,w,c
  5041  0044' B4D8               	btfsc	status,2,c
  5042  0046' D00E               	goto	l5187
  5043  0048' D7EB               	goto	l5179
  5044  004A' D00C               	goto	l5187
  5045  004C'                    l5183:
  5046  004C' 2A13'              	incf	___ftpack@exp,f,c
  5047  004E' 0E01               	movlw	1
  5048  0050' 2610'              	addwf	___ftpack@arg,f,c
  5049  0052' 0E00               	movlw	0
  5050  0054' 2211'              	addwfc	___ftpack@arg+1,f,c
  5051  0056' 0E00               	movlw	0
  5052  0058' 2212'              	addwfc	___ftpack@arg+2,f,c
  5053  005A' 90D8               	bcf	status,0,c
  5054  005C' 3212'              	rrcf	___ftpack@arg+2,f,c
  5055  005E' 3211'              	rrcf	___ftpack@arg+1,f,c
  5056  0060' 3210'              	rrcf	___ftpack@arg,f,c
  5057  0062' D000               	goto	l5187
  5058  0064'                    l5187:
  5059  0064' 0E00               	movlw	0
  5060  0066' 1410'              	andwf	___ftpack@arg,w,c
  5061  0068' 6E00'              	movwf	??___ftpack& (0+255),c
  5062  006A' 0E00               	movlw	0
  5063  006C' 1411'              	andwf	___ftpack@arg+1,w,c
  5064  006E' 6E00'              	movwf	(??___ftpack+1)& (0+255),c
  5065  0070' 0EFF               	movlw	255
  5066  0072' 1412'              	andwf	___ftpack@arg+2,w,c
  5067  0074' 6E00'              	movwf	(??___ftpack+2)& (0+255),c
  5068  0076' 5015'              	movf	??___ftpack,w,c
  5069  0078' 1016'              	iorwf	??___ftpack+1,w,c
  5070  007A' 1017'              	iorwf	??___ftpack+2,w,c
  5071  007C' B4D8               	btfsc	status,2,c
  5072  007E' D008               	goto	l5191
  5073  0080' D7E5               	goto	l5183
  5074  0082' D006               	goto	l5191
  5075  0084'                    l5189:
  5076  0084' 0613'              	decf	___ftpack@exp,f,c
  5077  0086' 90D8               	bcf	status,0,c
  5078  0088' 3610'              	rlcf	___ftpack@arg,f,c
  5079  008A' 3611'              	rlcf	___ftpack@arg+1,f,c
  5080  008C' 3612'              	rlcf	___ftpack@arg+2,f,c
  5081  008E' D000               	goto	l5191
  5082  0090'                    l5191:
  5083  0090' BE11'              	btfsc	___ftpack@arg+1,7,c
  5084  0092' D004               	goto	l1068
  5085  0094' 0E02               	movlw	2
  5086  0096' 6013'              	cpfslt	___ftpack@exp,c
  5087  0098' D7F5               	goto	l5189
  5088  009A' D000               	goto	l1068
  5089  009C'                    l1068:
  5090  009C' B013'              	btfsc	___ftpack@exp,0,c
  5091  009E' D002               	goto	l5197
  5092  00A0' 9E11'              	bcf	___ftpack@arg+1,7,c
  5093  00A2' D000               	goto	l5197
  5094  00A4'                    l5197:
  5095  00A4' 90D8               	bcf	status,0,c
  5096  00A6' 3213'              	rrcf	___ftpack@exp,f,c
  5097  00A8' 5013'              	movf	___ftpack@exp,w,c
  5098  00AA' 1212'              	iorwf	___ftpack@arg+2,f,c
  5099  00AC' 5014'              	movf	___ftpack@sign,w,c
  5100  00AE' B4D8               	btfsc	status,2,c
  5101  00B0' D002               	goto	l5203
  5102  00B2' 8E12'              	bsf	___ftpack@arg+2,7,c
  5103  00B4' D000               	goto	l5203
  5104  00B6'                    l5203:
  5105  00B6' C010' F010'        	movff	___ftpack@arg,?___ftpack
  5106  00BA' C011' F011'        	movff	___ftpack@arg+1,?___ftpack+1
  5107  00BE' C012' F012'        	movff	___ftpack@arg+2,?___ftpack+2
  5108  00C2' D000               	goto	l1057
  5109  00C4'                    l1057:
  5110  00C4' 0012               	return		;funcret
  5111  00C6'                    __end_of___ftpack:
  5112                           	opt stack 0
  5113                           tblptru	equ	0xFF8
  5114                           tblptrh	equ	0xFF7
  5115                           tblptrl	equ	0xFF6
  5116                           tablat	equ	0xFF5
  5117                           prodh	equ	0xFF4
  5118                           prodl	equ	0xFF3
  5119                           intcon	equ	0xFF2
  5120                           intcon2	equ	0xFF1
  5121                           postinc0	equ	0xFEE
  5122                           wreg	equ	0xFE8
  5123                           postdec1	equ	0xFE5
  5124                           fsr1l	equ	0xFE1
  5125                           postinc2	equ	0xFDE
  5126                           postdec2	equ	0xFDD
  5127                           fsr2h	equ	0xFDA
  5128                           fsr2l	equ	0xFD9
  5129                           status	equ	0xFD8
  5130                           
  5131 ;; *************** function _Initialize_Screen *****************
  5132 ;; Defined at:
  5133 ;;		line 34 in file "Main_Screen.c"
  5134 ;; Parameters:    Size  Location     Type
  5135 ;;		None
  5136 ;; Auto vars:     Size  Location     Type
  5137 ;;		None
  5138 ;; Return value:  Size  Location     Type
  5139 ;;		None               void
  5140 ;; Registers used:
  5141 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5142 ;; Tracked objects:
  5143 ;;		On entry : 0/0
  5144 ;;		On exit  : 0/0
  5145 ;;		Unchanged: 0/0
  5146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5147 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5148 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5149 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5150 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5151 ;;Total ram usage:        0 bytes
  5152 ;; Hardware stack levels used:    1
  5153 ;; Hardware stack levels required when called:   10
  5154 ;; This function calls:
  5155 ;;		_LCD_Reset
  5156 ;;		_TFT_GreenTab_Initialize
  5157 ;;		_drawCircle
  5158 ;;		_drawtext
  5159 ;;		_fillScreen
  5160 ;;		_strcpy
  5161 ;; This function is called by:
  5162 ;;		_main
  5163 ;; This function uses a non-reentrant model
  5164 ;;
  5165                           
  5166                           	psect	text17
  5167  0000'                    __ptext17:
  5168                           	opt stack 0
  5169  0000'                    _Initialize_Screen:
  5170                           	opt stack 20
  5171                           
  5172                           ;Main_Screen.c: 36: LCD_Reset();
  5173                           
  5174                           ;incstack = 0
  5175  0000' EC00' F000'        	call	_LCD_Reset	;wreg free
  5176                           
  5177                           ;Main_Screen.c: 37: TFT_GreenTab_Initialize();
  5178  0004' EC00' F000'        	call	_TFT_GreenTab_Initialize	;wreg free
  5179                           
  5180                           ;Main_Screen.c: 38: fillScreen(0x0000);
  5181  0008' 0E00               	movlw	0
  5182  000A' 6E24'              	movwf	fillScreen@color+1,c
  5183  000C' 0E00               	movlw	0
  5184  000E' 6E23'              	movwf	fillScreen@color,c
  5185  0010' EC00' F000'        	call	_fillScreen	;wreg free
  5186                           
  5187                           ;Main_Screen.c: 39: txt = buffer;
  5188  0014' 0E00'              	movlw	low _buffer
  5189  0016' 6E0C'              	movwf	_txt,c
  5190  0018' 0E00'              	movlw	high _buffer
  5191  001A' 6E0D'              	movwf	_txt+1,c
  5192                           
  5193                           ;Main_Screen.c: 40: strcpy(txt, "ECE3301L Spring 21-S1");
  5194  001C' C00C' F010'        	movff	_txt,strcpy@to
  5195  0020' C00D' F011'        	movff	_txt+1,strcpy@to+1
  5196  0024' 0E00'              	movlw	low STR_1
  5197  0026' 6E12'              	movwf	strcpy@from,c
  5198  0028' 0E00'              	movlw	high STR_1
  5199  002A' 6E13'              	movwf	strcpy@from+1,c
  5200  002C' EC00' F000'        	call	_strcpy	;wreg free
  5201                           
  5202                           ;Main_Screen.c: 42: drawtext(1 , 1, txt, 0xFFFF , 0x0000, 1);
  5203  0030' 0E01               	movlw	1
  5204  0032' 6E38'              	movwf	drawtext@y,c
  5205  0034' C00C' F039'        	movff	_txt,drawtext@_text
  5206  0038' C00D' F03A'        	movff	_txt+1,drawtext@_text+1
  5207  003C' 0EFF               	movlw	255
  5208  003E' 6E3C'              	movwf	drawtext@color+1,c
  5209  0040' 683B'              	setf	drawtext@color,c
  5210  0042' 0E00               	movlw	0
  5211  0044' 6E3E'              	movwf	drawtext@bg+1,c
  5212  0046' 0E00               	movlw	0
  5213  0048' 6E3D'              	movwf	drawtext@bg,c
  5214  004A' 0E01               	movlw	1
  5215  004C' 6E3F'              	movwf	drawtext@size,c
  5216  004E' 0E01               	movlw	1
  5217  0050' EC00' F000'        	call	_drawtext
  5218                           
  5219                           ;Main_Screen.c: 44: strcpy(txt, "Temperature:");
  5220  0054' C00C' F010'        	movff	_txt,strcpy@to
  5221  0058' C00D' F011'        	movff	_txt+1,strcpy@to+1
  5222  005C' 0E00'              	movlw	low STR_2
  5223  005E' 6E12'              	movwf	strcpy@from,c
  5224  0060' 0E00'              	movlw	high STR_2
  5225  0062' 6E13'              	movwf	strcpy@from+1,c
  5226  0064' EC00' F000'        	call	_strcpy	;wreg free
  5227                           
  5228                           ;Main_Screen.c: 45: drawtext(24 , 11 , txt, 0xF81F, 0x0000, 1);
  5229  0068' 0E0B               	movlw	11
  5230  006A' 6E38'              	movwf	drawtext@y,c
  5231  006C' C00C' F039'        	movff	_txt,drawtext@_text
  5232  0070' C00D' F03A'        	movff	_txt+1,drawtext@_text+1
  5233  0074' 0EF8               	movlw	248
  5234  0076' 6E3C'              	movwf	drawtext@color+1,c
  5235  0078' 0E1F               	movlw	31
  5236  007A' 6E3B'              	movwf	drawtext@color,c
  5237  007C' 0E00               	movlw	0
  5238  007E' 6E3E'              	movwf	drawtext@bg+1,c
  5239  0080' 0E00               	movlw	0
  5240  0082' 6E3D'              	movwf	drawtext@bg,c
  5241  0084' 0E01               	movlw	1
  5242  0086' 6E3F'              	movwf	drawtext@size,c
  5243  0088' 0E18               	movlw	24
  5244  008A' EC00' F000'        	call	_drawtext
  5245                           
  5246                           ;Main_Screen.c: 46: drawCircle(40, 23 , 2 , 0xFFE0);
  5247  008E' 0E00               	movlw	0
  5248  0090' 6E1C'              	movwf	drawCircle@x0+1,c
  5249  0092' 0E28               	movlw	40
  5250  0094' 6E1B'              	movwf	drawCircle@x0,c
  5251  0096' 0E00               	movlw	0
  5252  0098' 6E1E'              	movwf	drawCircle@y0+1,c
  5253  009A' 0E17               	movlw	23
  5254  009C' 6E1D'              	movwf	drawCircle@y0,c
  5255  009E' 0E00               	movlw	0
  5256  00A0' 6E20'              	movwf	drawCircle@r+1,c
  5257  00A2' 0E02               	movlw	2
  5258  00A4' 6E1F'              	movwf	drawCircle@r,c
  5259  00A6' 0EFF               	movlw	255
  5260  00A8' 6E22'              	movwf	drawCircle@color+1,c
  5261  00AA' 0EE0               	movlw	224
  5262  00AC' 6E21'              	movwf	drawCircle@color,c
  5263  00AE' EC00' F000'        	call	_drawCircle	;wreg free
  5264                           
  5265                           ;Main_Screen.c: 47: strcpy(txt, "C/");
  5266  00B2' C00C' F010'        	movff	_txt,strcpy@to
  5267  00B6' C00D' F011'        	movff	_txt+1,strcpy@to+1
  5268  00BA' 0E00'              	movlw	low STR_3
  5269  00BC' 6E12'              	movwf	strcpy@from,c
  5270  00BE' 0E00'              	movlw	high STR_3
  5271  00C0' 6E13'              	movwf	strcpy@from+1,c
  5272  00C2' EC00' F000'        	call	_strcpy	;wreg free
  5273                           
  5274                           ;Main_Screen.c: 48: drawtext(45 , 23, txt, 0xFFE0 , 0x0000, 2);
  5275  00C6' 0E17               	movlw	23
  5276  00C8' 6E38'              	movwf	drawtext@y,c
  5277  00CA' C00C' F039'        	movff	_txt,drawtext@_text
  5278  00CE' C00D' F03A'        	movff	_txt+1,drawtext@_text+1
  5279  00D2' 0EFF               	movlw	255
  5280  00D4' 6E3C'              	movwf	drawtext@color+1,c
  5281  00D6' 0EE0               	movlw	224
  5282  00D8' 6E3B'              	movwf	drawtext@color,c
  5283  00DA' 0E00               	movlw	0
  5284  00DC' 6E3E'              	movwf	drawtext@bg+1,c
  5285  00DE' 0E00               	movlw	0
  5286  00E0' 6E3D'              	movwf	drawtext@bg,c
  5287  00E2' 0E02               	movlw	2
  5288  00E4' 6E3F'              	movwf	drawtext@size,c
  5289  00E6' 0E2D               	movlw	45
  5290  00E8' EC00' F000'        	call	_drawtext
  5291                           
  5292                           ;Main_Screen.c: 49: strcpy(txt, "F");
  5293  00EC' C00C' F010'        	movff	_txt,strcpy@to
  5294  00F0' C00D' F011'        	movff	_txt+1,strcpy@to+1
  5295  00F4' 0E00'              	movlw	low (STR_11+2)
  5296  00F6' 6E12'              	movwf	strcpy@from,c
  5297  00F8' 0E00'              	movlw	high (STR_11+2)
  5298  00FA' 6E13'              	movwf	strcpy@from+1,c
  5299  00FC' EC00' F000'        	call	_strcpy	;wreg free
  5300                           
  5301                           ;Main_Screen.c: 50: drawCircle(110, 23 , 2 , 0xFFE0);
  5302  0100' 0E00               	movlw	0
  5303  0102' 6E1C'              	movwf	drawCircle@x0+1,c
  5304  0104' 0E6E               	movlw	110
  5305  0106' 6E1B'              	movwf	drawCircle@x0,c
  5306  0108' 0E00               	movlw	0
  5307  010A' 6E1E'              	movwf	drawCircle@y0+1,c
  5308  010C' 0E17               	movlw	23
  5309  010E' 6E1D'              	movwf	drawCircle@y0,c
  5310  0110' 0E00               	movlw	0
  5311  0112' 6E20'              	movwf	drawCircle@r+1,c
  5312  0114' 0E02               	movlw	2
  5313  0116' 6E1F'              	movwf	drawCircle@r,c
  5314  0118' 0EFF               	movlw	255
  5315  011A' 6E22'              	movwf	drawCircle@color+1,c
  5316  011C' 0EE0               	movlw	224
  5317  011E' 6E21'              	movwf	drawCircle@color,c
  5318  0120' EC00' F000'        	call	_drawCircle	;wreg free
  5319                           
  5320                           ;Main_Screen.c: 51: drawtext(115 , 23, txt, 0xFFE0 , 0x0000, 2);
  5321  0124' 0E17               	movlw	23
  5322  0126' 6E38'              	movwf	drawtext@y,c
  5323  0128' C00C' F039'        	movff	_txt,drawtext@_text
  5324  012C' C00D' F03A'        	movff	_txt+1,drawtext@_text+1
  5325  0130' 0EFF               	movlw	255
  5326  0132' 6E3C'              	movwf	drawtext@color+1,c
  5327  0134' 0EE0               	movlw	224
  5328  0136' 6E3B'              	movwf	drawtext@color,c
  5329  0138' 0E00               	movlw	0
  5330  013A' 6E3E'              	movwf	drawtext@bg+1,c
  5331  013C' 0E00               	movlw	0
  5332  013E' 6E3D'              	movwf	drawtext@bg,c
  5333  0140' 0E02               	movlw	2
  5334  0142' 6E3F'              	movwf	drawtext@size,c
  5335  0144' 0E73               	movlw	115
  5336  0146' EC00' F000'        	call	_drawtext
  5337                           
  5338                           ;Main_Screen.c: 52: strcpy(txt, "Time");
  5339  014A' C00C' F010'        	movff	_txt,strcpy@to
  5340  014E' C00D' F011'        	movff	_txt+1,strcpy@to+1
  5341  0152' 0E00'              	movlw	low STR_5
  5342  0154' 6E12'              	movwf	strcpy@from,c
  5343  0156' 0E00'              	movlw	high STR_5
  5344  0158' 6E13'              	movwf	strcpy@from+1,c
  5345  015A' EC00' F000'        	call	_strcpy	;wreg free
  5346                           
  5347                           ;Main_Screen.c: 53: drawtext(50 , 40 , txt, 0x001F , 0x0000, 1);
  5348  015E' 0E28               	movlw	40
  5349  0160' 6E38'              	movwf	drawtext@y,c
  5350  0162' C00C' F039'        	movff	_txt,drawtext@_text
  5351  0166' C00D' F03A'        	movff	_txt+1,drawtext@_text+1
  5352  016A' 0E00               	movlw	0
  5353  016C' 6E3C'              	movwf	drawtext@color+1,c
  5354  016E' 0E1F               	movlw	31
  5355  0170' 6E3B'              	movwf	drawtext@color,c
  5356  0172' 0E00               	movlw	0
  5357  0174' 6E3E'              	movwf	drawtext@bg+1,c
  5358  0176' 0E00               	movlw	0
  5359  0178' 6E3D'              	movwf	drawtext@bg,c
  5360  017A' 0E01               	movlw	1
  5361  017C' 6E3F'              	movwf	drawtext@size,c
  5362  017E' 0E32               	movlw	50
  5363  0180' EC00' F000'        	call	_drawtext
  5364                           
  5365                           ;Main_Screen.c: 54: strcpy(txt, "Date");
  5366  0184' C00C' F010'        	movff	_txt,strcpy@to
  5367  0188' C00D' F011'        	movff	_txt+1,strcpy@to+1
  5368  018C' 0E00'              	movlw	low STR_6
  5369  018E' 6E12'              	movwf	strcpy@from,c
  5370  0190' 0E00'              	movlw	high STR_6
  5371  0192' 6E13'              	movwf	strcpy@from+1,c
  5372  0194' EC00' F000'        	call	_strcpy	;wreg free
  5373                           
  5374                           ;Main_Screen.c: 55: drawtext(50 , 71 , txt, 0xF800 , 0x0000, 1);
  5375  0198' 0E47               	movlw	71
  5376  019A' 6E38'              	movwf	drawtext@y,c
  5377  019C' C00C' F039'        	movff	_txt,drawtext@_text
  5378  01A0' C00D' F03A'        	movff	_txt+1,drawtext@_text+1
  5379  01A4' 0EF8               	movlw	248
  5380  01A6' 6E3C'              	movwf	drawtext@color+1,c
  5381  01A8' 0E00               	movlw	0
  5382  01AA' 6E3B'              	movwf	drawtext@color,c
  5383  01AC' 0E00               	movlw	0
  5384  01AE' 6E3E'              	movwf	drawtext@bg+1,c
  5385  01B0' 0E00               	movlw	0
  5386  01B2' 6E3D'              	movwf	drawtext@bg,c
  5387  01B4' 0E01               	movlw	1
  5388  01B6' 6E3F'              	movwf	drawtext@size,c
  5389  01B8' 0E32               	movlw	50
  5390  01BA' EC00' F000'        	call	_drawtext
  5391                           
  5392                           ;Main_Screen.c: 58: strcpy(txt, "  FAN");
  5393  01BE' C00C' F010'        	movff	_txt,strcpy@to
  5394  01C2' C00D' F011'        	movff	_txt+1,strcpy@to+1
  5395  01C6' 0E00'              	movlw	low STR_7
  5396  01C8' 6E12'              	movwf	strcpy@from,c
  5397  01CA' 0E00'              	movlw	high STR_7
  5398  01CC' 6E13'              	movwf	strcpy@from+1,c
  5399  01CE' EC00' F000'        	call	_strcpy	;wreg free
  5400                           
  5401                           ;Main_Screen.c: 59: drawtext(85, 120, txt, 0x001F , 0x0000, 1);
  5402  01D2' 0E78               	movlw	120
  5403  01D4' 6E38'              	movwf	drawtext@y,c
  5404  01D6' C00C' F039'        	movff	_txt,drawtext@_text
  5405  01DA' C00D' F03A'        	movff	_txt+1,drawtext@_text+1
  5406  01DE' 0E00               	movlw	0
  5407  01E0' 6E3C'              	movwf	drawtext@color+1,c
  5408  01E2' 0E1F               	movlw	31
  5409  01E4' 6E3B'              	movwf	drawtext@color,c
  5410  01E6' 0E00               	movlw	0
  5411  01E8' 6E3E'              	movwf	drawtext@bg+1,c
  5412  01EA' 0E00               	movlw	0
  5413  01EC' 6E3D'              	movwf	drawtext@bg,c
  5414  01EE' 0E01               	movlw	1
  5415  01F0' 6E3F'              	movwf	drawtext@size,c
  5416  01F2' 0E55               	movlw	85
  5417  01F4' EC00' F000'        	call	_drawtext
  5418                           
  5419                           ;Main_Screen.c: 61: strcpy(txt, "DC");
  5420  01F8' C00C' F010'        	movff	_txt,strcpy@to
  5421  01FC' C00D' F011'        	movff	_txt+1,strcpy@to+1
  5422  0200' 0E00'              	movlw	low STR_8
  5423  0202' 6E12'              	movwf	strcpy@from,c
  5424  0204' 0E00'              	movlw	high STR_8
  5425  0206' 6E13'              	movwf	strcpy@from+1,c
  5426  0208' EC00' F000'        	call	_strcpy	;wreg free
  5427                           
  5428                           ;Main_Screen.c: 62: drawtext(12, 140, txt, 0xFFFF , 0x0000, 1);
  5429  020C' 0E8C               	movlw	140
  5430  020E' 6E38'              	movwf	drawtext@y,c
  5431  0210' C00C' F039'        	movff	_txt,drawtext@_text
  5432  0214' C00D' F03A'        	movff	_txt+1,drawtext@_text+1
  5433  0218' 0EFF               	movlw	255
  5434  021A' 6E3C'              	movwf	drawtext@color+1,c
  5435  021C' 683B'              	setf	drawtext@color,c
  5436  021E' 0E00               	movlw	0
  5437  0220' 6E3E'              	movwf	drawtext@bg+1,c
  5438  0222' 0E00               	movlw	0
  5439  0224' 6E3D'              	movwf	drawtext@bg,c
  5440  0226' 0E01               	movlw	1
  5441  0228' 6E3F'              	movwf	drawtext@size,c
  5442  022A' 0E0C               	movlw	12
  5443  022C' EC00' F000'        	call	_drawtext
  5444                           
  5445                           ;Main_Screen.c: 64: strcpy(txt, "RPM");
  5446  0230' C00C' F010'        	movff	_txt,strcpy@to
  5447  0234' C00D' F011'        	movff	_txt+1,strcpy@to+1
  5448  0238' 0E00'              	movlw	low STR_9
  5449  023A' 6E12'              	movwf	strcpy@from,c
  5450  023C' 0E00'              	movlw	high STR_9
  5451  023E' 6E13'              	movwf	strcpy@from+1,c
  5452  0240' EC00' F000'        	call	_strcpy	;wreg free
  5453                           
  5454                           ;Main_Screen.c: 65: drawtext(95, 140, txt, 0xFFFF , 0x0000 , 1);
  5455  0244' 0E8C               	movlw	140
  5456  0246' 6E38'              	movwf	drawtext@y,c
  5457  0248' C00C' F039'        	movff	_txt,drawtext@_text
  5458  024C' C00D' F03A'        	movff	_txt+1,drawtext@_text+1
  5459  0250' 0EFF               	movlw	255
  5460  0252' 6E3C'              	movwf	drawtext@color+1,c
  5461  0254' 683B'              	setf	drawtext@color,c
  5462  0256' 0E00               	movlw	0
  5463  0258' 6E3E'              	movwf	drawtext@bg+1,c
  5464  025A' 0E00               	movlw	0
  5465  025C' 6E3D'              	movwf	drawtext@bg,c
  5466  025E' 0E01               	movlw	1
  5467  0260' 6E3F'              	movwf	drawtext@size,c
  5468  0262' 0E5F               	movlw	95
  5469  0264' EC00' F000'        	call	_drawtext
  5470  0268' 0012               	return		;funcret
  5471  026A'                    __end_of_Initialize_Screen:
  5472                           	opt stack 0
  5473                           tblptru	equ	0xFF8
  5474                           tblptrh	equ	0xFF7
  5475                           tblptrl	equ	0xFF6
  5476                           tablat	equ	0xFF5
  5477                           prodh	equ	0xFF4
  5478                           prodl	equ	0xFF3
  5479                           intcon	equ	0xFF2
  5480                           intcon2	equ	0xFF1
  5481                           postinc0	equ	0xFEE
  5482                           wreg	equ	0xFE8
  5483                           postdec1	equ	0xFE5
  5484                           fsr1l	equ	0xFE1
  5485                           postinc2	equ	0xFDE
  5486                           postdec2	equ	0xFDD
  5487                           fsr2h	equ	0xFDA
  5488                           fsr2l	equ	0xFD9
  5489                           status	equ	0xFD8
  5490                           
  5491 ;; *************** function _strcpy *****************
  5492 ;; Defined at:
  5493 ;;		line 8 in file "E:\XC8\sources\common\strcpy.c"
  5494 ;; Parameters:    Size  Location     Type
  5495 ;;  to              2   16[COMRAM] PTR unsigned char 
  5496 ;;		 -> NULL(0), Fan_SW_Txt(4), buffer(0), 
  5497 ;;  from            2   18[COMRAM] PTR const unsigned char 
  5498 ;;		 -> STR_11(4), STR_10(4), STR_9(4), STR_8(3), 
  5499 ;;		 -> STR_7(6), STR_6(5), STR_5(5), STR_4(2), 
  5500 ;;		 -> STR_3(3), STR_2(13), STR_1(22), 
  5501 ;; Auto vars:     Size  Location     Type
  5502 ;;  cp              2   20[COMRAM] PTR unsigned char 
  5503 ;;		 -> NULL(0), Fan_SW_Txt(4), buffer(0), 
  5504 ;; Return value:  Size  Location     Type
  5505 ;;                  2   16[COMRAM] PTR unsigned char 
  5506 ;; Registers used:
  5507 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  5508 ;; Tracked objects:
  5509 ;;		On entry : 0/0
  5510 ;;		On exit  : 0/0
  5511 ;;		Unchanged: 0/0
  5512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5513 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5514 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5515 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5516 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5517 ;;Total ram usage:        6 bytes
  5518 ;; Hardware stack levels used:    1
  5519 ;; Hardware stack levels required when called:    3
  5520 ;; This function calls:
  5521 ;;		Nothing
  5522 ;; This function is called by:
  5523 ;;		_Initialize_Screen
  5524 ;;		_Update_Screen
  5525 ;; This function uses a non-reentrant model
  5526 ;;
  5527                           
  5528                           	psect	text18
  5529  0000'                    __ptext18:
  5530                           	opt stack 0
  5531  0000'                    _strcpy:
  5532                           	opt stack 26
  5533                           
  5534                           ;incstack = 0
  5535  0000' C010' F014'        	movff	strcpy@to,strcpy@cp
  5536  0004' C011' F015'        	movff	strcpy@to+1,strcpy@cp+1
  5537  0008' D005               	goto	l5799
  5538  000A'                    l5797:
  5539  000A' 4A14'              	infsnz	strcpy@cp,f,c
  5540  000C' 2A15'              	incf	strcpy@cp+1,f,c
  5541  000E' 4A12'              	infsnz	strcpy@from,f,c
  5542  0010' 2A13'              	incf	strcpy@from+1,f,c
  5543  0012' D000               	goto	l5799
  5544  0014'                    l5799:
  5545  0014' C012' FFF6         	movff	strcpy@from,tblptrl
  5546  0018' C013' FFF7         	movff	strcpy@from+1,tblptrh
  5547  001C'                    	if	0	;tblptru may be non-zero
  5548  001C'                    	endif
  5549  001C'                    	if	0	;tblptru may be non-zero
  5550  001C'                    	endif
  5551  001C' C014' FFD9         	movff	strcpy@cp,fsr2l
  5552  0020' C015' FFDA         	movff	strcpy@cp+1,fsr2h
  5553  0024' 0008               	tblrd		*
  5554  0026' CFF5 FFDF          	movff	tablat,indf2
  5555  002A' 50DF               	movf	indf2,w,c
  5556  002C' A4D8               	btfss	status,2,c
  5557  002E' D7ED               	goto	l5797
  5558                           
  5559                           ;	Return value of _strcpy is never used
  5560  0030' 0012               	return		;funcret
  5561  0032'                    __end_of_strcpy:
  5562                           	opt stack 0
  5563                           tblptru	equ	0xFF8
  5564                           tblptrh	equ	0xFF7
  5565                           tblptrl	equ	0xFF6
  5566                           tablat	equ	0xFF5
  5567                           prodh	equ	0xFF4
  5568                           prodl	equ	0xFF3
  5569                           intcon	equ	0xFF2
  5570                           intcon2	equ	0xFF1
  5571                           postinc0	equ	0xFEE
  5572                           wreg	equ	0xFE8
  5573                           postdec1	equ	0xFE5
  5574                           fsr1l	equ	0xFE1
  5575                           indf2	equ	0xFDF
  5576                           postinc2	equ	0xFDE
  5577                           postdec2	equ	0xFDD
  5578                           fsr2h	equ	0xFDA
  5579                           fsr2l	equ	0xFD9
  5580                           status	equ	0xFD8
  5581                           
  5582 ;; *************** function _fillScreen *****************
  5583 ;; Defined at:
  5584 ;;		line 619 in file "ST7735_TFT.c"
  5585 ;; Parameters:    Size  Location     Type
  5586 ;;  color           2   35[COMRAM] unsigned int 
  5587 ;; Auto vars:     Size  Location     Type
  5588 ;;		None
  5589 ;; Return value:  Size  Location     Type
  5590 ;;		None               void
  5591 ;; Registers used:
  5592 ;;		wreg, status,2, status,0, cstack
  5593 ;; Tracked objects:
  5594 ;;		On entry : 0/0
  5595 ;;		On exit  : 0/0
  5596 ;;		Unchanged: 0/0
  5597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5598 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5599 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5600 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5601 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5602 ;;Total ram usage:        2 bytes
  5603 ;; Hardware stack levels used:    1
  5604 ;; Hardware stack levels required when called:    7
  5605 ;; This function calls:
  5606 ;;		_fillRectangle
  5607 ;; This function is called by:
  5608 ;;		_Initialize_Screen
  5609 ;; This function uses a non-reentrant model
  5610 ;;
  5611                           
  5612                           	psect	text19
  5613  0000'                    __ptext19:
  5614                           	opt stack 0
  5615  0000'                    _fillScreen:
  5616                           	opt stack 22
  5617                           
  5618                           ;ST7735_TFT.c: 621: fillRectangle(0, 0, 128, 160, color);
  5619                           
  5620                           ;incstack = 0
  5621  0000' 0E00               	movlw	0
  5622  0002' 6E17'              	movwf	fillRectangle@y,c
  5623  0004' 0E80               	movlw	128
  5624  0006' 6E18'              	movwf	fillRectangle@w,c
  5625  0008' 0EA0               	movlw	160
  5626  000A' 6E19'              	movwf	fillRectangle@h,c
  5627  000C' C023' F01A'        	movff	fillScreen@color,fillRectangle@color
  5628  0010' C024' F01B'        	movff	fillScreen@color+1,fillRectangle@color+1
  5629  0014' 0E00               	movlw	0
  5630  0016' EC00' F000'        	call	_fillRectangle
  5631  001A' 0012               	return		;funcret
  5632  001C'                    __end_of_fillScreen:
  5633                           	opt stack 0
  5634                           tblptru	equ	0xFF8
  5635                           tblptrh	equ	0xFF7
  5636                           tblptrl	equ	0xFF6
  5637                           tablat	equ	0xFF5
  5638                           prodh	equ	0xFF4
  5639                           prodl	equ	0xFF3
  5640                           intcon	equ	0xFF2
  5641                           intcon2	equ	0xFF1
  5642                           postinc0	equ	0xFEE
  5643                           wreg	equ	0xFE8
  5644                           postdec1	equ	0xFE5
  5645                           fsr1l	equ	0xFE1
  5646                           indf2	equ	0xFDF
  5647                           postinc2	equ	0xFDE
  5648                           postdec2	equ	0xFDD
  5649                           fsr2h	equ	0xFDA
  5650                           fsr2l	equ	0xFD9
  5651                           status	equ	0xFD8
  5652                           
  5653 ;; *************** function _fillRectangle *****************
  5654 ;; Defined at:
  5655 ;;		line 503 in file "ST7735_TFT.c"
  5656 ;; Parameters:    Size  Location     Type
  5657 ;;  x               1    wreg     unsigned char 
  5658 ;;  y               1   23[COMRAM] unsigned char 
  5659 ;;  w               1   24[COMRAM] unsigned char 
  5660 ;;  h               1   25[COMRAM] unsigned char 
  5661 ;;  color           2   26[COMRAM] unsigned int 
  5662 ;; Auto vars:     Size  Location     Type
  5663 ;;  x               1   34[COMRAM] unsigned char 
  5664 ;;  lo              1   33[COMRAM] unsigned char 
  5665 ;;  hi              1   32[COMRAM] unsigned char 
  5666 ;; Return value:  Size  Location     Type
  5667 ;;		None               void
  5668 ;; Registers used:
  5669 ;;		wreg, status,2, status,0, cstack
  5670 ;; Tracked objects:
  5671 ;;		On entry : 0/0
  5672 ;;		On exit  : 0/0
  5673 ;;		Unchanged: 0/0
  5674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5675 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5676 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5677 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5678 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5679 ;;Total ram usage:       12 bytes
  5680 ;; Hardware stack levels used:    1
  5681 ;; Hardware stack levels required when called:    6
  5682 ;; This function calls:
  5683 ;;		_setAddrWindow
  5684 ;;		_spiwrite
  5685 ;; This function is called by:
  5686 ;;		_fillScreen
  5687 ;; This function uses a non-reentrant model
  5688 ;;
  5689                           
  5690                           	psect	text20
  5691  0000'                    __ptext20:
  5692                           	opt stack 0
  5693  0000'                    _fillRectangle:
  5694                           	opt stack 22
  5695                           
  5696                           ;incstack = 0
  5697                           ;fillRectangle@x stored from wreg
  5698  0000' 6E22'              	movwf	fillRectangle@x,c
  5699                           
  5700                           ;ST7735_TFT.c: 505: unsigned char hi, lo;
  5701                           ;ST7735_TFT.c: 506: if((x >= 128) || (y >= 160))
  5702  0002' 0E80               	movlw	128
  5703  0004' 6022'              	cpfslt	fillRectangle@x,c
  5704  0006' D069               	goto	l390
  5705  0008' 0E9F               	movlw	159
  5706  000A' 6417'              	cpfsgt	fillRectangle@y,c
  5707  000C' D001               	goto	l5395
  5708                           
  5709                           ;ST7735_TFT.c: 507: return;
  5710  000E' D065               	goto	l390
  5711  0010'                    l5395:
  5712                           
  5713                           ;ST7735_TFT.c: 508: if((x + w - 1) >= 128)
  5714  0010' 0EFF               	movlw	255
  5715  0012' 6E00'              	movwf	??_fillRectangle& (0+255),c
  5716  0014' 0EFF               	movlw	255
  5717  0016' 6E00'              	movwf	(??_fillRectangle+1)& (0+255),c
  5718  0018' 5018'              	movf	fillRectangle@w,w,c
  5719  001A' C022' F01E'        	movff	fillRectangle@x,??_fillRectangle+2
  5720  001E' 6A00'              	clrf	(??_fillRectangle+3)& (0+255),c
  5721  0020' 261E'              	addwf	??_fillRectangle+2,f,c
  5722  0022' 0E00               	movlw	0
  5723  0024' 221F'              	addwfc	??_fillRectangle+3,f,c
  5724  0026' 501C'              	movf	??_fillRectangle,w,c
  5725  0028' 261E'              	addwf	??_fillRectangle+2,f,c
  5726  002A' 501D'              	movf	??_fillRectangle+1,w,c
  5727  002C' 221F'              	addwfc	??_fillRectangle+3,f,c
  5728  002E' BE1F'              	btfsc	??_fillRectangle+3,7,c
  5729  0030' D00A               	goto	l391
  5730  0032' 501F'              	movf	??_fillRectangle+3,w,c
  5731  0034' E104               	bnz	u4110
  5732  0036' 0E80               	movlw	128
  5733  0038' 5C1E'              	subwf	??_fillRectangle+2,w,c
  5734  003A' A0D8               	btfss	status,0,c
  5735  003C' D004               	goto	l391
  5736  003E'                    u4110:
  5737                           
  5738                           ;ST7735_TFT.c: 509: w = 128 - x;
  5739  003E' 5022'              	movf	fillRectangle@x,w,c
  5740  0040' 0800               	sublw	0
  5741  0042' 0F80               	addlw	128
  5742  0044' 6E18'              	movwf	fillRectangle@w,c
  5743  0046'                    l391:
  5744                           
  5745                           ;ST7735_TFT.c: 510: if((y + h - 1) >= 160)
  5746  0046' 0EFF               	movlw	255
  5747  0048' 6E00'              	movwf	??_fillRectangle& (0+255),c
  5748  004A' 0EFF               	movlw	255
  5749  004C' 6E00'              	movwf	(??_fillRectangle+1)& (0+255),c
  5750  004E' 5019'              	movf	fillRectangle@h,w,c
  5751  0050' C017' F01E'        	movff	fillRectangle@y,??_fillRectangle+2
  5752  0054' 6A00'              	clrf	(??_fillRectangle+3)& (0+255),c
  5753  0056' 261E'              	addwf	??_fillRectangle+2,f,c
  5754  0058' 0E00               	movlw	0
  5755  005A' 221F'              	addwfc	??_fillRectangle+3,f,c
  5756  005C' 501C'              	movf	??_fillRectangle,w,c
  5757  005E' 261E'              	addwf	??_fillRectangle+2,f,c
  5758  0060' 501D'              	movf	??_fillRectangle+1,w,c
  5759  0062' 221F'              	addwfc	??_fillRectangle+3,f,c
  5760  0064' BE1F'              	btfsc	??_fillRectangle+3,7,c
  5761  0066' D00B               	goto	l5401
  5762  0068' 501F'              	movf	??_fillRectangle+3,w,c
  5763  006A' E104               	bnz	u4120
  5764  006C' 0EA0               	movlw	160
  5765  006E' 5C1E'              	subwf	??_fillRectangle+2,w,c
  5766  0070' A0D8               	btfss	status,0,c
  5767  0072' D005               	goto	l5401
  5768  0074'                    u4120:
  5769                           
  5770                           ;ST7735_TFT.c: 511: h = 160 - y;
  5771  0074' 5017'              	movf	fillRectangle@y,w,c
  5772  0076' 0800               	sublw	0
  5773  0078' 0FA0               	addlw	160
  5774  007A' 6E19'              	movwf	fillRectangle@h,c
  5775  007C' D000               	goto	l5401
  5776  007E'                    l5401:
  5777                           
  5778                           ;ST7735_TFT.c: 512: setAddrWindow(x, y, x+w-1, y+h-1);
  5779  007E' C017' F013'        	movff	fillRectangle@y,setAddrWindow@y0
  5780  0082' 5022'              	movf	fillRectangle@x,w,c
  5781  0084' 2418'              	addwf	fillRectangle@w,w,c
  5782  0086' 6E00'              	movwf	??_fillRectangle& (0+255),c
  5783  0088' 041C'              	decf	??_fillRectangle,w,c
  5784  008A' 6E14'              	movwf	setAddrWindow@x1,c
  5785  008C' 5017'              	movf	fillRectangle@y,w,c
  5786  008E' 2419'              	addwf	fillRectangle@h,w,c
  5787  0090' 6E00'              	movwf	(??_fillRectangle+1)& (0+255),c
  5788  0092' 041D'              	decf	??_fillRectangle+1,w,c
  5789  0094' 6E15'              	movwf	setAddrWindow@y1,c
  5790  0096' 5022'              	movf	fillRectangle@x,w,c
  5791  0098' EC00' F000'        	call	_setAddrWindow
  5792                           
  5793                           ;ST7735_TFT.c: 513: hi = color >> 8; lo = color;
  5794  009C' 501B'              	movf	fillRectangle@color+1,w,c
  5795  009E' 6E20'              	movwf	fillRectangle@hi,c
  5796  00A0' C01A' F021'        	movff	fillRectangle@color,fillRectangle@lo
  5797                           
  5798                           ;ST7735_TFT.c: 514: PORTDbits.RD0 = 1;
  5799  00A4' 8083               	bsf	3971,0,c	;volatile
  5800                           
  5801                           ;ST7735_TFT.c: 515: PORTDbits.RD1 = 0;
  5802  00A6' 9283               	bcf	3971,1,c	;volatile
  5803                           
  5804                           ;ST7735_TFT.c: 517: for(y=h; y>0; y--) {
  5805  00A8' C019' F017'        	movff	fillRectangle@h,fillRectangle@y
  5806  00AC'                    l5413:
  5807  00AC' 5017'              	movf	fillRectangle@y,w,c
  5808  00AE' B4D8               	btfsc	status,2,c
  5809  00B0' D013               	goto	l394
  5810  00B2' D001               	goto	l393
  5811  00B4' D011               	goto	l394
  5812  00B6'                    l393:
  5813                           
  5814                           ;ST7735_TFT.c: 518: for(x = w; x > 0; x--) {
  5815  00B6' C018' F022'        	movff	fillRectangle@w,fillRectangle@x
  5816  00BA'                    l5417:
  5817  00BA' 5022'              	movf	fillRectangle@x,w,c
  5818  00BC' B4D8               	btfsc	status,2,c
  5819  00BE' D00A               	goto	l5427
  5820  00C0' D001               	goto	l5421
  5821  00C2' D008               	goto	l5427
  5822  00C4'                    l5421:
  5823                           
  5824                           ;ST7735_TFT.c: 519: spiwrite(hi);
  5825  00C4' 5020'              	movf	fillRectangle@hi,w,c
  5826  00C6' EC00' F000'        	call	_spiwrite
  5827                           
  5828                           ;ST7735_TFT.c: 520: spiwrite(lo);
  5829  00CA' 5021'              	movf	fillRectangle@lo,w,c
  5830  00CC' EC00' F000'        	call	_spiwrite
  5831  00D0' 0622'              	decf	fillRectangle@x,f,c
  5832  00D2' D7F3               	goto	l5417
  5833  00D4'                    l5427:
  5834  00D4' 0617'              	decf	fillRectangle@y,f,c
  5835  00D6' D7EA               	goto	l5413
  5836  00D8'                    l394:
  5837                           
  5838                           ;ST7735_TFT.c: 521: }
  5839                           ;ST7735_TFT.c: 522: }
  5840                           ;ST7735_TFT.c: 523: PORTDbits.RD1 = 1;
  5841  00D8' 8283               	bsf	3971,1,c	;volatile
  5842  00DA'                    l390:
  5843  00DA' 0012               	return		;funcret
  5844  00DC'                    __end_of_fillRectangle:
  5845                           	opt stack 0
  5846                           tblptru	equ	0xFF8
  5847                           tblptrh	equ	0xFF7
  5848                           tblptrl	equ	0xFF6
  5849                           tablat	equ	0xFF5
  5850                           prodh	equ	0xFF4
  5851                           prodl	equ	0xFF3
  5852                           intcon	equ	0xFF2
  5853                           intcon2	equ	0xFF1
  5854                           postinc0	equ	0xFEE
  5855                           wreg	equ	0xFE8
  5856                           postdec1	equ	0xFE5
  5857                           fsr1l	equ	0xFE1
  5858                           indf2	equ	0xFDF
  5859                           postinc2	equ	0xFDE
  5860                           postdec2	equ	0xFDD
  5861                           fsr2h	equ	0xFDA
  5862                           fsr2l	equ	0xFD9
  5863                           status	equ	0xFD8
  5864                           
  5865 ;; *************** function _drawtext *****************
  5866 ;; Defined at:
  5867 ;;		line 474 in file "ST7735_TFT.c"
  5868 ;; Parameters:    Size  Location     Type
  5869 ;;  x               1    wreg     unsigned char 
  5870 ;;  y               1   56[COMRAM] unsigned char 
  5871 ;;  _text           2   57[COMRAM] PTR unsigned char 
  5872 ;;		 -> NULL(0), RPM_Txt(5), DC_Txt(4), Fan_SW_Txt(4), 
  5873 ;;		 -> date(9), time(9), tempF(4), tempC(4), 
  5874 ;;		 -> buffer(0), 
  5875 ;;  color           2   59[COMRAM] unsigned int 
  5876 ;;  bg              2   61[COMRAM] unsigned int 
  5877 ;;  size            1   63[COMRAM] unsigned char 
  5878 ;; Auto vars:     Size  Location     Type
  5879 ;;  x               1    2[BANK0 ] unsigned char 
  5880 ;;  i               2    5[BANK0 ] unsigned int 
  5881 ;;  textsize        2    3[BANK0 ] unsigned int 
  5882 ;;  cursor_x        1    8[BANK0 ] unsigned char 
  5883 ;;  cursor_y        1    7[BANK0 ] unsigned char 
  5884 ;; Return value:  Size  Location     Type
  5885 ;;		None               void
  5886 ;; Registers used:
  5887 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5888 ;; Tracked objects:
  5889 ;;		On entry : 0/0
  5890 ;;		On exit  : 0/0
  5891 ;;		Unchanged: 0/0
  5892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5893 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5894 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5895 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5896 ;;      Totals:         8       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5897 ;;Total ram usage:       17 bytes
  5898 ;; Hardware stack levels used:    1
  5899 ;; Hardware stack levels required when called:    9
  5900 ;; This function calls:
  5901 ;;		_drawChar
  5902 ;;		_strlen
  5903 ;; This function is called by:
  5904 ;;		_Initialize_Screen
  5905 ;;		_Update_Screen
  5906 ;; This function uses a non-reentrant model
  5907 ;;
  5908                           
  5909                           	psect	text21
  5910  0000'                    __ptext21:
  5911                           	opt stack 0
  5912  0000'                    _drawtext:
  5913                           	opt stack 20
  5914                           
  5915                           ;incstack = 0
  5916                           ;drawtext@x stored from wreg
  5917  0000' 0100               	movlb	0	; () banked
  5918  0002' 6F00'              	movwf	drawtext@x& (0+255),b
  5919                           
  5920                           ; BSR set to: 0
  5921                           ;ST7735_TFT.c: 476: unsigned char cursor_x, cursor_y;
  5922                           ;ST7735_TFT.c: 477: unsigned int textsize, i;
  5923                           ;ST7735_TFT.c: 478: cursor_x = x, cursor_y = y;
  5924  0004' C002' F008'        	movff	drawtext@x,drawtext@cursor_x
  5925                           
  5926                           ; BSR set to: 0
  5927  0008' C038' F007'        	movff	drawtext@y,drawtext@cursor_y
  5928                           
  5929                           ; BSR set to: 0
  5930                           ;ST7735_TFT.c: 479: textsize = strlen(_text);
  5931  000C' C039' F010'        	movff	drawtext@_text,strlen@s
  5932  0010' C03A' F011'        	movff	drawtext@_text+1,strlen@s+1
  5933  0014' EC00' F000'        	call	_strlen	;wreg free
  5934  0018' C010' F003'        	movff	?_strlen,drawtext@textsize
  5935  001C' C011' F004'        	movff	?_strlen+1,drawtext@textsize+1
  5936                           
  5937                           ;ST7735_TFT.c: 480: for(i = 0; i < textsize; i++){
  5938  0020' 0E00               	movlw	0
  5939  0022' 0100               	movlb	0	; () banked
  5940  0024' 6F00'              	movwf	(drawtext@i+1)& (0+255),b
  5941  0026' 0E00               	movlw	0
  5942  0028' 6F00'              	movwf	drawtext@i& (0+255),b
  5943  002A' D06A               	goto	l5727
  5944  002C'                    l5701:
  5945                           
  5946                           ; BSR set to: 0
  5947                           ;ST7735_TFT.c: 481: if(wrap && ((cursor_x + size * 5) > 128)){
  5948  002C' 5002'              	movf	_wrap,w,c
  5949  002E' B4D8               	btfsc	status,2,c
  5950  0030' D03A               	goto	l5717
  5951                           
  5952                           ; BSR set to: 0
  5953  0032' 503F'              	movf	drawtext@size,w,c
  5954  0034' 0D05               	mullw	5
  5955  0036' 0100               	movlb	0	; () banked
  5956  0038' 5100'              	movf	drawtext@cursor_x& (0+255),w,b
  5957  003A' 0100               	movlb	0	; () banked
  5958  003C' 6F00'              	movwf	??_drawtext& (0+255),b
  5959  003E' 6B00'              	clrf	(??_drawtext+1)& (0+255),b
  5960  0040' 50F3               	movf	prodl,w,c
  5961  0042' 0100               	movlb	0	; () banked
  5962  0044' 2700'              	addwf	??_drawtext& (0+255),f,b
  5963  0046' 50F4               	movf	prodh,w,c
  5964  0048' 0100               	movlb	0	; () banked
  5965  004A' 2300'              	addwfc	(??_drawtext+1)& (0+255),f,b
  5966  004C' 0100               	movlb	0	; () banked
  5967  004E' BF00'              	btfsc	(??_drawtext+1)& (0+255),7,b
  5968  0050' D02A               	goto	l5717
  5969  0052' 0100               	movlb	0	; () banked
  5970  0054' 5100'              	movf	(??_drawtext+1)& (0+255),w,b
  5971  0056' E105               	bnz	u4510
  5972  0058' 0E81               	movlw	129
  5973  005A' 0100               	movlb	0	; () banked
  5974  005C' 5D00'              	subwf	??_drawtext& (0+255),w,b
  5975  005E' A0D8               	btfss	status,0,c
  5976  0060' D022               	goto	l5717
  5977  0062'                    u4510:
  5978                           
  5979                           ; BSR set to: 0
  5980                           ;ST7735_TFT.c: 482: cursor_x = 0;
  5981  0062' 0E00               	movlw	0
  5982  0064' 0100               	movlb	0	; () banked
  5983  0066' 6F00'              	movwf	drawtext@cursor_x& (0+255),b
  5984                           
  5985                           ; BSR set to: 0
  5986                           ;ST7735_TFT.c: 483: cursor_y = cursor_y + size * 7 + 3 ;
  5987  0068' 503F'              	movf	drawtext@size,w,c
  5988  006A' 0D07               	mullw	7
  5989  006C' 50F3               	movf	prodl,w,c
  5990  006E' 0100               	movlb	0	; () banked
  5991  0070' 2500'              	addwf	drawtext@cursor_y& (0+255),w,b
  5992  0072' 0F03               	addlw	3
  5993  0074' 0100               	movlb	0	; () banked
  5994  0076' 6F00'              	movwf	drawtext@cursor_y& (0+255),b
  5995                           
  5996                           ; BSR set to: 0
  5997                           ;ST7735_TFT.c: 484: if(cursor_y > 160) cursor_y = 160;
  5998  0078' 0EA0               	movlw	160
  5999  007A' 0100               	movlb	0	; () banked
  6000  007C' 6500'              	cpfsgt	drawtext@cursor_y& (0+255),b
  6001  007E' D004               	goto	l5713
  6002                           
  6003                           ; BSR set to: 0
  6004  0080' 0EA0               	movlw	160
  6005  0082' 0100               	movlb	0	; () banked
  6006  0084' 6F00'              	movwf	drawtext@cursor_y& (0+255),b
  6007  0086' D000               	goto	l5713
  6008  0088'                    l5713:
  6009                           
  6010                           ; BSR set to: 0
  6011                           ;ST7735_TFT.c: 485: if(_text[i] == 0x20) goto _skip; }
  6012  0088' 0100               	movlb	0	; () banked
  6013  008A' 5100'              	movf	drawtext@i& (0+255),w,b
  6014  008C' 2439'              	addwf	drawtext@_text,w,c
  6015  008E' 6ED9               	movwf	fsr2l,c
  6016  0090' 0100               	movlb	0	; () banked
  6017  0092' 5100'              	movf	(drawtext@i+1)& (0+255),w,b
  6018  0094' 203A'              	addwfc	drawtext@_text+1,w,c
  6019  0096' 6EDA               	movwf	fsr2h,c
  6020  0098' 0E20               	movlw	32
  6021  009A' 18DE               	xorwf	postinc2,w,c
  6022  009C' B4D8               	btfsc	status,2,c
  6023  009E' D02C               	goto	l5725
  6024  00A0' D002               	goto	l5717
  6025                           
  6026                           ; BSR set to: 0
  6027  00A2' D02A               	goto	l5725
  6028                           
  6029                           ; BSR set to: 0
  6030  00A4' D000               	goto	l5717
  6031  00A6'                    l5717:
  6032                           
  6033                           ; BSR set to: 0
  6034                           ;ST7735_TFT.c: 486: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
  6035  00A6' C007' F02D'        	movff	drawtext@cursor_y,drawChar@y
  6036  00AA' 0100               	movlb	0	; () banked
  6037  00AC' 5100'              	movf	drawtext@i& (0+255),w,b
  6038  00AE' 2439'              	addwf	drawtext@_text,w,c
  6039  00B0' 6ED9               	movwf	fsr2l,c
  6040  00B2' 0100               	movlb	0	; () banked
  6041  00B4' 5100'              	movf	(drawtext@i+1)& (0+255),w,b
  6042  00B6' 203A'              	addwfc	drawtext@_text+1,w,c
  6043  00B8' 6EDA               	movwf	fsr2h,c
  6044  00BA' 50DF               	movf	indf2,w,c
  6045  00BC' 6E2E'              	movwf	drawChar@c,c
  6046  00BE' C03B' F02F'        	movff	drawtext@color,drawChar@color
  6047  00C2' C03C' F030'        	movff	drawtext@color+1,drawChar@color+1
  6048  00C6' C03D' F031'        	movff	drawtext@bg,drawChar@bg
  6049  00CA' C03E' F032'        	movff	drawtext@bg+1,drawChar@bg+1
  6050  00CE' C03F' F033'        	movff	drawtext@size,drawChar@size
  6051  00D2' 0100               	movlb	0	; () banked
  6052  00D4' 5100'              	movf	drawtext@cursor_x& (0+255),w,b
  6053  00D6' EC00' F000'        	call	_drawChar
  6054                           
  6055                           ;ST7735_TFT.c: 487: cursor_x = cursor_x + size * 6;
  6056  00DA' 503F'              	movf	drawtext@size,w,c
  6057  00DC' 0D06               	mullw	6
  6058  00DE' 50F3               	movf	prodl,w,c
  6059  00E0' 0100               	movlb	0	; () banked
  6060  00E2' 2500'              	addwf	drawtext@cursor_x& (0+255),w,b
  6061  00E4' 0100               	movlb	0	; () banked
  6062  00E6' 6F00'              	movwf	drawtext@cursor_x& (0+255),b
  6063                           
  6064                           ; BSR set to: 0
  6065                           ;ST7735_TFT.c: 488: if(cursor_x > 128) cursor_x = 128;
  6066  00E8' 0E80               	movlw	128
  6067  00EA' 0100               	movlb	0	; () banked
  6068  00EC' 6500'              	cpfsgt	drawtext@cursor_x& (0+255),b
  6069  00EE' D004               	goto	l5725
  6070                           
  6071                           ; BSR set to: 0
  6072  00F0' 0E80               	movlw	128
  6073  00F2' 0100               	movlb	0	; () banked
  6074  00F4' 6F00'              	movwf	drawtext@cursor_x& (0+255),b
  6075                           
  6076                           ; BSR set to: 0
  6077  00F6' D000               	goto	l5725
  6078  00F8'                    l5725:
  6079                           
  6080                           ; BSR set to: 0
  6081  00F8' 0100               	movlb	0	; () banked
  6082  00FA' 4B00'              	infsnz	drawtext@i& (0+255),f,b
  6083  00FC' 2B00'              	incf	(drawtext@i+1)& (0+255),f,b
  6084  00FE' D000               	goto	l5727
  6085  0100'                    l5727:
  6086                           
  6087                           ; BSR set to: 0
  6088  0100' 0100               	movlb	0	; () banked
  6089  0102' 5100'              	movf	drawtext@textsize& (0+255),w,b
  6090  0104' 0100               	movlb	0	; () banked
  6091  0106' 5D00'              	subwf	drawtext@i& (0+255),w,b
  6092  0108' 0100               	movlb	0	; () banked
  6093  010A' 5100'              	movf	(drawtext@textsize+1)& (0+255),w,b
  6094  010C' 0100               	movlb	0	; () banked
  6095  010E' 5900'              	subwfb	(drawtext@i+1)& (0+255),w,b
  6096  0110' A0D8               	btfss	status,0,c
  6097  0112' D78C               	goto	l5701
  6098                           
  6099                           ; BSR set to: 0
  6100                           
  6101                           ; BSR set to: 0
  6102  0114' 0012               	return		;funcret
  6103  0116'                    __end_of_drawtext:
  6104                           	opt stack 0
  6105                           tblptru	equ	0xFF8
  6106                           tblptrh	equ	0xFF7
  6107                           tblptrl	equ	0xFF6
  6108                           tablat	equ	0xFF5
  6109                           prodh	equ	0xFF4
  6110                           prodl	equ	0xFF3
  6111                           intcon	equ	0xFF2
  6112                           intcon2	equ	0xFF1
  6113                           postinc0	equ	0xFEE
  6114                           wreg	equ	0xFE8
  6115                           postdec1	equ	0xFE5
  6116                           fsr1l	equ	0xFE1
  6117                           indf2	equ	0xFDF
  6118                           postinc2	equ	0xFDE
  6119                           postdec2	equ	0xFDD
  6120                           fsr2h	equ	0xFDA
  6121                           fsr2l	equ	0xFD9
  6122                           status	equ	0xFD8
  6123                           
  6124 ;; *************** function _strlen *****************
  6125 ;; Defined at:
  6126 ;;		line 4 in file "E:\XC8\sources\common\strlen.c"
  6127 ;; Parameters:    Size  Location     Type
  6128 ;;  s               2   16[COMRAM] PTR const unsigned char 
  6129 ;;		 -> NULL(0), RPM_Txt(5), DC_Txt(4), Fan_SW_Txt(4), 
  6130 ;;		 -> date(9), time(9), tempF(4), tempC(4), 
  6131 ;;		 -> buffer(0), 
  6132 ;; Auto vars:     Size  Location     Type
  6133 ;;  cp              2   20[COMRAM] PTR const unsigned char 
  6134 ;;		 -> NULL(0), RPM_Txt(5), DC_Txt(4), Fan_SW_Txt(4), 
  6135 ;;		 -> date(9), time(9), tempF(4), tempC(4), 
  6136 ;;		 -> buffer(0), 
  6137 ;; Return value:  Size  Location     Type
  6138 ;;                  2   16[COMRAM] unsigned int 
  6139 ;; Registers used:
  6140 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6141 ;; Tracked objects:
  6142 ;;		On entry : 0/0
  6143 ;;		On exit  : 0/0
  6144 ;;		Unchanged: 0/0
  6145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6146 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6147 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6148 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6149 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6150 ;;Total ram usage:        6 bytes
  6151 ;; Hardware stack levels used:    1
  6152 ;; Hardware stack levels required when called:    3
  6153 ;; This function calls:
  6154 ;;		Nothing
  6155 ;; This function is called by:
  6156 ;;		_drawtext
  6157 ;; This function uses a non-reentrant model
  6158 ;;
  6159                           
  6160                           	psect	text22
  6161  0000'                    __ptext22:
  6162                           	opt stack 0
  6163  0000'                    _strlen:
  6164                           	opt stack 25
  6165                           
  6166                           ; BSR set to: 0
  6167                           ;incstack = 0
  6168  0000' C010' F014'        	movff	strlen@s,strlen@cp
  6169  0004' C011' F015'        	movff	strlen@s+1,strlen@cp+1
  6170  0008' D003               	goto	l5385
  6171  000A'                    l5383:
  6172  000A' 4A14'              	infsnz	strlen@cp,f,c
  6173  000C' 2A15'              	incf	strlen@cp+1,f,c
  6174  000E' D000               	goto	l5385
  6175  0010'                    l5385:
  6176  0010' C014' FFD9         	movff	strlen@cp,fsr2l
  6177  0014' C015' FFDA         	movff	strlen@cp+1,fsr2h
  6178  0018' 50DF               	movf	indf2,w,c
  6179  001A' A4D8               	btfss	status,2,c
  6180  001C' D7F6               	goto	l5383
  6181  001E' C010' F012'        	movff	strlen@s,??_strlen
  6182  0022' C011' F013'        	movff	strlen@s+1,??_strlen+1
  6183  0026' 1E12'              	comf	??_strlen,f,c
  6184  0028' 1E13'              	comf	??_strlen+1,f,c
  6185  002A' 4A12'              	infsnz	??_strlen,f,c
  6186  002C' 2A13'              	incf	??_strlen+1,f,c
  6187  002E' 5014'              	movf	strlen@cp,w,c
  6188  0030' 2412'              	addwf	??_strlen,w,c
  6189  0032' 6E10'              	movwf	?_strlen,c
  6190  0034' 5015'              	movf	strlen@cp+1,w,c
  6191  0036' 2013'              	addwfc	??_strlen+1,w,c
  6192  0038' 6E11'              	movwf	?_strlen+1,c
  6193  003A' D000               	goto	l1311
  6194  003C'                    l1311:
  6195  003C' 0012               	return		;funcret
  6196  003E'                    __end_of_strlen:
  6197                           	opt stack 0
  6198                           tblptru	equ	0xFF8
  6199                           tblptrh	equ	0xFF7
  6200                           tblptrl	equ	0xFF6
  6201                           tablat	equ	0xFF5
  6202                           prodh	equ	0xFF4
  6203                           prodl	equ	0xFF3
  6204                           intcon	equ	0xFF2
  6205                           intcon2	equ	0xFF1
  6206                           postinc0	equ	0xFEE
  6207                           wreg	equ	0xFE8
  6208                           postdec1	equ	0xFE5
  6209                           fsr1l	equ	0xFE1
  6210                           indf2	equ	0xFDF
  6211                           postinc2	equ	0xFDE
  6212                           postdec2	equ	0xFDD
  6213                           fsr2h	equ	0xFDA
  6214                           fsr2l	equ	0xFD9
  6215                           status	equ	0xFD8
  6216                           
  6217 ;; *************** function _drawChar *****************
  6218 ;; Defined at:
  6219 ;;		line 447 in file "ST7735_TFT.c"
  6220 ;; Parameters:    Size  Location     Type
  6221 ;;  x               1    wreg     unsigned char 
  6222 ;;  y               1   45[COMRAM] unsigned char 
  6223 ;;  c               1   46[COMRAM] unsigned char 
  6224 ;;  color           2   47[COMRAM] unsigned int 
  6225 ;;  bg              2   49[COMRAM] unsigned int 
  6226 ;;  size            1   51[COMRAM] unsigned char 
  6227 ;; Auto vars:     Size  Location     Type
  6228 ;;  x               1   53[COMRAM] unsigned char 
  6229 ;;  line            1   52[COMRAM] unsigned char 
  6230 ;;  i               1   55[COMRAM] unsigned char 
  6231 ;;  j               1   54[COMRAM] unsigned char 
  6232 ;; Return value:  Size  Location     Type
  6233 ;;		None               void
  6234 ;; Registers used:
  6235 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6236 ;; Tracked objects:
  6237 ;;		On entry : 0/0
  6238 ;;		On exit  : 0/0
  6239 ;;		Unchanged: 0/0
  6240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6241 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6242 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6243 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6244 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6245 ;;Total ram usage:       11 bytes
  6246 ;; Hardware stack levels used:    1
  6247 ;; Hardware stack levels required when called:    8
  6248 ;; This function calls:
  6249 ;;		___wmul
  6250 ;;		_drawPixel
  6251 ;;		_fillRect
  6252 ;; This function is called by:
  6253 ;;		_drawtext
  6254 ;; This function uses a non-reentrant model
  6255 ;;
  6256                           
  6257                           	psect	text23
  6258  0000'                    __ptext23:
  6259                           	opt stack 0
  6260  0000'                    _drawChar:
  6261                           	opt stack 20
  6262                           
  6263                           ;incstack = 0
  6264                           ;drawChar@x stored from wreg
  6265  0000' 6E35'              	movwf	drawChar@x,c
  6266                           
  6267                           ;ST7735_TFT.c: 449: char i, j;
  6268                           ;ST7735_TFT.c: 450: if((x >= 128) || (y >= 160))
  6269  0002' 0E80               	movlw	128
  6270  0004' 6035'              	cpfslt	drawChar@x,c
  6271  0006' D0A6               	goto	l353
  6272  0008' 0E9F               	movlw	159
  6273  000A' 642D'              	cpfsgt	drawChar@y,c
  6274  000C' D001               	goto	l5331
  6275                           
  6276                           ;ST7735_TFT.c: 451: return;
  6277  000E' D0A2               	goto	l353
  6278  0010'                    l5331:
  6279                           
  6280                           ;ST7735_TFT.c: 452: if(size < 1) size = 1;
  6281  0010' 5033'              	movf	drawChar@size,w,c
  6282  0012' A4D8               	btfss	status,2,c
  6283  0014' D003               	goto	l5335
  6284  0016' 0E01               	movlw	1
  6285  0018' 6E33'              	movwf	drawChar@size,c
  6286  001A' D000               	goto	l5335
  6287  001C'                    l5335:
  6288                           
  6289                           ;ST7735_TFT.c: 453: if((c < ' ') || (c > '~'))
  6290  001C' 0E1F               	movlw	31
  6291  001E' 642E'              	cpfsgt	drawChar@c,c
  6292  0020' D004               	goto	l5339
  6293  0022' 0E7E               	movlw	126
  6294  0024' 642E'              	cpfsgt	drawChar@c,c
  6295  0026' D003               	goto	l355
  6296  0028' D000               	goto	l5339
  6297  002A'                    l5339:
  6298                           
  6299                           ;ST7735_TFT.c: 454: c = '?';
  6300  002A' 0E3F               	movlw	63
  6301  002C' 6E2E'              	movwf	drawChar@c,c
  6302  002E'                    l355:
  6303                           
  6304                           ;ST7735_TFT.c: 455: for(i=0; i<5; i++ ) {
  6305  002E' 0E00               	movlw	0
  6306  0030' 6E37'              	movwf	drawChar@i,c
  6307  0032'                    l5341:
  6308  0032' 0E04               	movlw	4
  6309  0034' 6437'              	cpfsgt	drawChar@i,c
  6310  0036' D001               	goto	l5345
  6311  0038' D08D               	goto	l353
  6312  003A'                    l5345:
  6313                           
  6314                           ;ST7735_TFT.c: 456: unsigned char line;
  6315                           ;ST7735_TFT.c: 457: if(c < 'S')
  6316  003A' 0E53               	movlw	83
  6317  003C' 602E'              	cpfslt	drawChar@c,c
  6318  003E' D015               	goto	l5349
  6319                           
  6320                           ;ST7735_TFT.c: 458: line = font[(c - 32)*5 + i];
  6321  0040' 0EE0               	movlw	224
  6322  0042' 242E'              	addwf	drawChar@c,w,c
  6323  0044' 6E10'              	movwf	___wmul@multiplier,c
  6324  0046' 6A11'              	clrf	___wmul@multiplier+1,c
  6325  0048' 0EFF               	movlw	255
  6326  004A' 2211'              	addwfc	___wmul@multiplier+1,f,c
  6327  004C' 0E00               	movlw	0
  6328  004E' 6E13'              	movwf	___wmul@multiplicand+1,c
  6329  0050' 0E05               	movlw	5
  6330  0052' 6E12'              	movwf	___wmul@multiplicand,c
  6331  0054' EC00' F000'        	call	___wmul	;wreg free
  6332  0058' 5037'              	movf	drawChar@i,w,c
  6333  005A' 2610'              	addwf	?___wmul,f,c
  6334  005C' 0E00               	movlw	0
  6335  005E' 2211'              	addwfc	?___wmul+1,f,c
  6336  0060' 0E00'              	movlw	low _font
  6337  0062' 2410'              	addwf	?___wmul,w,c
  6338  0064' 6EF6               	movwf	tblptrl,c
  6339  0066' 0E00'              	movlw	high _font
  6340  0068' D014               	goto	L3
  6341  006A'                    l5349:
  6342                           
  6343                           ;ST7735_TFT.c: 459: else
  6344                           ;ST7735_TFT.c: 460: line = font2[(c - 'S')*5 + i];
  6345  006A' 0EAD               	movlw	173
  6346  006C' 242E'              	addwf	drawChar@c,w,c
  6347  006E' 6E10'              	movwf	___wmul@multiplier,c
  6348  0070' 6A11'              	clrf	___wmul@multiplier+1,c
  6349  0072' 0EFF               	movlw	255
  6350  0074' 2211'              	addwfc	___wmul@multiplier+1,f,c
  6351  0076' 0E00               	movlw	0
  6352  0078' 6E13'              	movwf	___wmul@multiplicand+1,c
  6353  007A' 0E05               	movlw	5
  6354  007C' 6E12'              	movwf	___wmul@multiplicand,c
  6355  007E' EC00' F000'        	call	___wmul	;wreg free
  6356  0082' 5037'              	movf	drawChar@i,w,c
  6357  0084' 2610'              	addwf	?___wmul,f,c
  6358  0086' 0E00               	movlw	0
  6359  0088' 2211'              	addwfc	?___wmul+1,f,c
  6360  008A' 0E00'              	movlw	low _font2
  6361  008C' 2410'              	addwf	?___wmul,w,c
  6362  008E' 6EF6               	movwf	tblptrl,c
  6363  0090' 0E00'              	movlw	high _font2
  6364  0092'                    L3:
  6365  0092' 2011'              	addwfc	?___wmul+1,w,c
  6366  0094' 6EF7               	movwf	tblptrh,c
  6367  0096'                    	if	0	;There are less than 3 active tblptr bytes
  6368  0096'                    	endif
  6369  0096' 0008               	tblrd		*
  6370  0098' CFF5 F034'         	movff	tablat,drawChar@line
  6371  009C' D000               	goto	l5351
  6372  009E'                    l5351:
  6373                           
  6374                           ;ST7735_TFT.c: 461: for(j=0; j<7; j++, line >>= 1) {
  6375  009E' 0E00               	movlw	0
  6376  00A0' 6E36'              	movwf	drawChar@j,c
  6377  00A2'                    l5353:
  6378  00A2' 0E06               	movlw	6
  6379  00A4' 6436'              	cpfsgt	drawChar@j,c
  6380  00A6' D001               	goto	l362
  6381  00A8' D053               	goto	l5377
  6382  00AA'                    l362:
  6383                           
  6384                           ;ST7735_TFT.c: 462: if(line & 0x01) {
  6385  00AA' A034'              	btfss	drawChar@line,0,c
  6386  00AC' D023               	goto	l5363
  6387                           
  6388                           ;ST7735_TFT.c: 463: if(size == 1) drawPixel(x+i, y+j, color);
  6389  00AE' 0433'              	decf	drawChar@size,w,c
  6390  00B0' A4D8               	btfss	status,2,c
  6391  00B2' D00C               	goto	l5361
  6392  00B4' 502D'              	movf	drawChar@y,w,c
  6393  00B6' 2436'              	addwf	drawChar@j,w,c
  6394  00B8' 6E17'              	movwf	drawPixel@y,c
  6395  00BA' C02F' F018'        	movff	drawChar@color,drawPixel@color
  6396  00BE' C030' F019'        	movff	drawChar@color+1,drawPixel@color+1
  6397  00C2' 5035'              	movf	drawChar@x,w,c
  6398  00C4' 2437'              	addwf	drawChar@i,w,c
  6399  00C6' EC00' F000'        	call	_drawPixel
  6400  00CA' D03E               	goto	l5371
  6401  00CC'                    l5361:
  6402                           
  6403                           ;ST7735_TFT.c: 464: else fillRect(x+(i*size), y+(j*size), size, size, color);
  6404  00CC' 5036'              	movf	drawChar@j,w,c
  6405  00CE' 0233'              	mulwf	drawChar@size,c
  6406  00D0' 50F3               	movf	prodl,w,c
  6407  00D2' 242D'              	addwf	drawChar@y,w,c
  6408  00D4' 6E22'              	movwf	fillRect@y,c
  6409  00D6' C033' F023'        	movff	drawChar@size,fillRect@w
  6410  00DA' C033' F024'        	movff	drawChar@size,fillRect@h
  6411  00DE' C02F' F025'        	movff	drawChar@color,fillRect@color
  6412  00E2' C030' F026'        	movff	drawChar@color+1,fillRect@color+1
  6413  00E6' 5037'              	movf	drawChar@i,w,c
  6414  00E8' 0233'              	mulwf	drawChar@size,c
  6415  00EA' 50F3               	movf	prodl,w,c
  6416  00EC' 2435'              	addwf	drawChar@x,w,c
  6417  00EE' EC00' F000'        	call	_fillRect
  6418                           
  6419                           ;ST7735_TFT.c: 465: }
  6420  00F2' D02A               	goto	l5371
  6421  00F4'                    l5363:
  6422                           
  6423                           ;ST7735_TFT.c: 466: else if(bg != color) {
  6424  00F4' 502F'              	movf	drawChar@color,w,c
  6425  00F6' 1831'              	xorwf	drawChar@bg,w,c
  6426  00F8' E104               	bnz	u4040
  6427  00FA' 5030'              	movf	drawChar@color+1,w,c
  6428  00FC' 1832'              	xorwf	drawChar@bg+1,w,c
  6429  00FE' B4D8               	btfsc	status,2,c
  6430  0100' D023               	goto	l5371
  6431  0102'                    u4040:
  6432                           
  6433                           ;ST7735_TFT.c: 467: if(size == 1) drawPixel(x+i, y+j, bg);
  6434  0102' 0433'              	decf	drawChar@size,w,c
  6435  0104' A4D8               	btfss	status,2,c
  6436  0106' D00C               	goto	l5369
  6437  0108' 502D'              	movf	drawChar@y,w,c
  6438  010A' 2436'              	addwf	drawChar@j,w,c
  6439  010C' 6E17'              	movwf	drawPixel@y,c
  6440  010E' C031' F018'        	movff	drawChar@bg,drawPixel@color
  6441  0112' C032' F019'        	movff	drawChar@bg+1,drawPixel@color+1
  6442  0116' 5035'              	movf	drawChar@x,w,c
  6443  0118' 2437'              	addwf	drawChar@i,w,c
  6444  011A' EC00' F000'        	call	_drawPixel
  6445  011E' D014               	goto	l5371
  6446  0120'                    l5369:
  6447                           
  6448                           ;ST7735_TFT.c: 468: else fillRect(x+i*size, y+j*size, size, size, bg);
  6449  0120' 5036'              	movf	drawChar@j,w,c
  6450  0122' 0233'              	mulwf	drawChar@size,c
  6451  0124' 50F3               	movf	prodl,w,c
  6452  0126' 242D'              	addwf	drawChar@y,w,c
  6453  0128' 6E22'              	movwf	fillRect@y,c
  6454  012A' C033' F023'        	movff	drawChar@size,fillRect@w
  6455  012E' C033' F024'        	movff	drawChar@size,fillRect@h
  6456  0132' C031' F025'        	movff	drawChar@bg,fillRect@color
  6457  0136' C032' F026'        	movff	drawChar@bg+1,fillRect@color+1
  6458  013A' 5037'              	movf	drawChar@i,w,c
  6459  013C' 0233'              	mulwf	drawChar@size,c
  6460  013E' 50F3               	movf	prodl,w,c
  6461  0140' 2435'              	addwf	drawChar@x,w,c
  6462  0142' EC00' F000'        	call	_fillRect
  6463  0146' D000               	goto	l5371
  6464  0148'                    l5371:
  6465  0148' 2A36'              	incf	drawChar@j,f,c
  6466  014A' 90D8               	bcf	status,0,c
  6467  014C' 3234'              	rrcf	drawChar@line,f,c
  6468  014E' D7A9               	goto	l5353
  6469  0150'                    l5377:
  6470  0150' 2A37'              	incf	drawChar@i,f,c
  6471  0152' D76F               	goto	l5341
  6472  0154'                    l353:
  6473  0154' 0012               	return		;funcret
  6474  0156'                    __end_of_drawChar:
  6475                           	opt stack 0
  6476                           tblptru	equ	0xFF8
  6477                           tblptrh	equ	0xFF7
  6478                           tblptrl	equ	0xFF6
  6479                           tablat	equ	0xFF5
  6480                           prodh	equ	0xFF4
  6481                           prodl	equ	0xFF3
  6482                           intcon	equ	0xFF2
  6483                           intcon2	equ	0xFF1
  6484                           postinc0	equ	0xFEE
  6485                           wreg	equ	0xFE8
  6486                           postdec1	equ	0xFE5
  6487                           fsr1l	equ	0xFE1
  6488                           indf2	equ	0xFDF
  6489                           postinc2	equ	0xFDE
  6490                           postdec2	equ	0xFDD
  6491                           fsr2h	equ	0xFDA
  6492                           fsr2l	equ	0xFD9
  6493                           status	equ	0xFD8
  6494                           
  6495 ;; *************** function _fillRect *****************
  6496 ;; Defined at:
  6497 ;;		line 437 in file "ST7735_TFT.c"
  6498 ;; Parameters:    Size  Location     Type
  6499 ;;  x               1    wreg     unsigned char 
  6500 ;;  y               1   34[COMRAM] unsigned char 
  6501 ;;  w               1   35[COMRAM] unsigned char 
  6502 ;;  h               1   36[COMRAM] unsigned char 
  6503 ;;  color           2   37[COMRAM] unsigned int 
  6504 ;; Auto vars:     Size  Location     Type
  6505 ;;  x               1   42[COMRAM] unsigned char 
  6506 ;;  i               2   43[COMRAM] int 
  6507 ;; Return value:  Size  Location     Type
  6508 ;;		None               void
  6509 ;; Registers used:
  6510 ;;		wreg, status,2, status,0, cstack
  6511 ;; Tracked objects:
  6512 ;;		On entry : 0/0
  6513 ;;		On exit  : 0/0
  6514 ;;		Unchanged: 0/0
  6515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6516 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6517 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6518 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6519 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6520 ;;Total ram usage:       11 bytes
  6521 ;; Hardware stack levels used:    1
  6522 ;; Hardware stack levels required when called:    7
  6523 ;; This function calls:
  6524 ;;		_drawFastVLine
  6525 ;; This function is called by:
  6526 ;;		_drawChar
  6527 ;; This function uses a non-reentrant model
  6528 ;;
  6529                           
  6530                           	psect	text24
  6531  0000'                    __ptext24:
  6532                           	opt stack 0
  6533  0000'                    _fillRect:
  6534                           	opt stack 20
  6535                           
  6536                           ;incstack = 0
  6537                           ;fillRect@x stored from wreg
  6538  0000' 6E2A'              	movwf	fillRect@x,c
  6539                           
  6540                           ;ST7735_TFT.c: 439: signed int i;
  6541                           ;ST7735_TFT.c: 441: for (i = x; i < x + w; i++)
  6542  0002' C02A' F02B'        	movff	fillRect@x,fillRect@i
  6543  0006' 6A2C'              	clrf	fillRect@i+1,c
  6544  0008' D00E               	goto	l5169
  6545  000A'                    l5165:
  6546                           
  6547                           ;ST7735_TFT.c: 442: {
  6548                           ;ST7735_TFT.c: 443: drawFastVLine(i, y, h, color);
  6549  000A' C022' F017'        	movff	fillRect@y,drawFastVLine@y
  6550  000E' C024' F018'        	movff	fillRect@h,drawFastVLine@h
  6551  0012' C025' F019'        	movff	fillRect@color,drawFastVLine@color
  6552  0016' C026' F01A'        	movff	fillRect@color+1,drawFastVLine@color+1
  6553  001A' 502B'              	movf	fillRect@i,w,c
  6554  001C' EC00' F000'        	call	_drawFastVLine
  6555  0020' 4A2B'              	infsnz	fillRect@i,f,c
  6556  0022' 2A2C'              	incf	fillRect@i+1,f,c
  6557  0024' D000               	goto	l5169
  6558  0026'                    l5169:
  6559  0026' 5023'              	movf	fillRect@w,w,c
  6560  0028' C02A' F027'        	movff	fillRect@x,??_fillRect
  6561  002C' 6A00'              	clrf	(??_fillRect+1)& (0+255),c
  6562  002E' 2627'              	addwf	??_fillRect,f,c
  6563  0030' 0E00               	movlw	0
  6564  0032' 2228'              	addwfc	??_fillRect+1,f,c
  6565  0034' 5027'              	movf	??_fillRect,w,c
  6566  0036' 5C2B'              	subwf	fillRect@i,w,c
  6567  0038' 502C'              	movf	fillRect@i+1,w,c
  6568  003A' 0A80               	xorlw	128
  6569  003C' 6E00'              	movwf	(??_fillRect+2)& (0+255),c
  6570  003E' 5028'              	movf	??_fillRect+1,w,c
  6571  0040' 0A80               	xorlw	128
  6572  0042' 5800'              	subwfb	(??_fillRect+2)& (0+255),w,c
  6573  0044' A0D8               	btfss	status,0,c
  6574  0046' D7E1               	goto	l5165
  6575  0048' 0012               	return		;funcret
  6576  004A'                    __end_of_fillRect:
  6577                           	opt stack 0
  6578                           tblptru	equ	0xFF8
  6579                           tblptrh	equ	0xFF7
  6580                           tblptrl	equ	0xFF6
  6581                           tablat	equ	0xFF5
  6582                           prodh	equ	0xFF4
  6583                           prodl	equ	0xFF3
  6584                           intcon	equ	0xFF2
  6585                           intcon2	equ	0xFF1
  6586                           postinc0	equ	0xFEE
  6587                           wreg	equ	0xFE8
  6588                           postdec1	equ	0xFE5
  6589                           fsr1l	equ	0xFE1
  6590                           indf2	equ	0xFDF
  6591                           postinc2	equ	0xFDE
  6592                           postdec2	equ	0xFDD
  6593                           fsr2h	equ	0xFDA
  6594                           fsr2l	equ	0xFD9
  6595                           status	equ	0xFD8
  6596                           
  6597 ;; *************** function _drawFastVLine *****************
  6598 ;; Defined at:
  6599 ;;		line 416 in file "ST7735_TFT.c"
  6600 ;; Parameters:    Size  Location     Type
  6601 ;;  x               1    wreg     unsigned char 
  6602 ;;  y               1   23[COMRAM] unsigned char 
  6603 ;;  h               1   24[COMRAM] unsigned char 
  6604 ;;  color           2   25[COMRAM] unsigned int 
  6605 ;; Auto vars:     Size  Location     Type
  6606 ;;  x               1   33[COMRAM] unsigned char 
  6607 ;;  lo              1   32[COMRAM] unsigned char 
  6608 ;;  hi              1   31[COMRAM] unsigned char 
  6609 ;; Return value:  Size  Location     Type
  6610 ;;		None               void
  6611 ;; Registers used:
  6612 ;;		wreg, status,2, status,0, cstack
  6613 ;; Tracked objects:
  6614 ;;		On entry : 0/0
  6615 ;;		On exit  : 0/0
  6616 ;;		Unchanged: 0/0
  6617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6618 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6619 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6620 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6621 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6622 ;;Total ram usage:       11 bytes
  6623 ;; Hardware stack levels used:    1
  6624 ;; Hardware stack levels required when called:    6
  6625 ;; This function calls:
  6626 ;;		_setAddrWindow
  6627 ;;		_spiwrite
  6628 ;; This function is called by:
  6629 ;;		_fillRect
  6630 ;;		_fillCircleHelper
  6631 ;;		_fillCircle
  6632 ;;		_drawRect
  6633 ;; This function uses a non-reentrant model
  6634 ;;
  6635                           
  6636                           	psect	text25
  6637  0000'                    __ptext25:
  6638                           	opt stack 0
  6639  0000'                    _drawFastVLine:
  6640                           	opt stack 20
  6641                           
  6642                           ;incstack = 0
  6643                           ;drawFastVLine@x stored from wreg
  6644  0000' 6E21'              	movwf	drawFastVLine@x,c
  6645                           
  6646                           ;ST7735_TFT.c: 418: unsigned char hi, lo;
  6647                           ;ST7735_TFT.c: 419: if((x >= 128) || (y >= 160))
  6648  0002' 0E80               	movlw	128
  6649  0004' 6021'              	cpfslt	drawFastVLine@x,c
  6650  0006' D03F               	goto	l337
  6651  0008' 0E9F               	movlw	159
  6652  000A' 6417'              	cpfsgt	drawFastVLine@y,c
  6653  000C' D001               	goto	l5075
  6654                           
  6655                           ;ST7735_TFT.c: 420: return;
  6656  000E' D03B               	goto	l337
  6657  0010'                    l5075:
  6658                           
  6659                           ;ST7735_TFT.c: 421: if((y + h - 1) >= 160)
  6660  0010' 0EFF               	movlw	255
  6661  0012' 6E00'              	movwf	??_drawFastVLine& (0+255),c
  6662  0014' 0EFF               	movlw	255
  6663  0016' 6E00'              	movwf	(??_drawFastVLine+1)& (0+255),c
  6664  0018' 5018'              	movf	drawFastVLine@h,w,c
  6665  001A' C017' F01D'        	movff	drawFastVLine@y,??_drawFastVLine+2
  6666  001E' 6A00'              	clrf	(??_drawFastVLine+3)& (0+255),c
  6667  0020' 261D'              	addwf	??_drawFastVLine+2,f,c
  6668  0022' 0E00               	movlw	0
  6669  0024' 221E'              	addwfc	??_drawFastVLine+3,f,c
  6670  0026' 501B'              	movf	??_drawFastVLine,w,c
  6671  0028' 261D'              	addwf	??_drawFastVLine+2,f,c
  6672  002A' 501C'              	movf	??_drawFastVLine+1,w,c
  6673  002C' 221E'              	addwfc	??_drawFastVLine+3,f,c
  6674  002E' BE1E'              	btfsc	??_drawFastVLine+3,7,c
  6675  0030' D00B               	goto	l5079
  6676  0032' 501E'              	movf	??_drawFastVLine+3,w,c
  6677  0034' E104               	bnz	u3770
  6678  0036' 0EA0               	movlw	160
  6679  0038' 5C1D'              	subwf	??_drawFastVLine+2,w,c
  6680  003A' A0D8               	btfss	status,0,c
  6681  003C' D005               	goto	l5079
  6682  003E'                    u3770:
  6683                           
  6684                           ;ST7735_TFT.c: 422: h = 160 - y;
  6685  003E' 5017'              	movf	drawFastVLine@y,w,c
  6686  0040' 0800               	sublw	0
  6687  0042' 0FA0               	addlw	160
  6688  0044' 6E18'              	movwf	drawFastVLine@h,c
  6689  0046' D000               	goto	l5079
  6690  0048'                    l5079:
  6691                           
  6692                           ;ST7735_TFT.c: 423: hi = color >> 8; lo = color;
  6693  0048' 501A'              	movf	drawFastVLine@color+1,w,c
  6694  004A' 6E1F'              	movwf	drawFastVLine@hi,c
  6695  004C' C019' F020'        	movff	drawFastVLine@color,drawFastVLine@lo
  6696                           
  6697                           ;ST7735_TFT.c: 424: setAddrWindow(x, y, x, y + h - 1);
  6698  0050' C017' F013'        	movff	drawFastVLine@y,setAddrWindow@y0
  6699  0054' C021' F014'        	movff	drawFastVLine@x,setAddrWindow@x1
  6700  0058' 5017'              	movf	drawFastVLine@y,w,c
  6701  005A' 2418'              	addwf	drawFastVLine@h,w,c
  6702  005C' 6E00'              	movwf	??_drawFastVLine& (0+255),c
  6703  005E' 041B'              	decf	??_drawFastVLine,w,c
  6704  0060' 6E15'              	movwf	setAddrWindow@y1,c
  6705  0062' 5021'              	movf	drawFastVLine@x,w,c
  6706  0064' EC00' F000'        	call	_setAddrWindow
  6707                           
  6708                           ;ST7735_TFT.c: 425: PORTDbits.RD0 = 1;
  6709  0068' 8083               	bsf	3971,0,c	;volatile
  6710                           
  6711                           ;ST7735_TFT.c: 426: PORTDbits.RD1 = 0;
  6712  006A' 9283               	bcf	3971,1,c	;volatile
  6713                           
  6714                           ;ST7735_TFT.c: 428: while (h--) {
  6715  006C' D007               	goto	l5091
  6716  006E'                    l5089:
  6717                           
  6718                           ;ST7735_TFT.c: 429: spiwrite(hi);
  6719  006E' 501F'              	movf	drawFastVLine@hi,w,c
  6720  0070' EC00' F000'        	call	_spiwrite
  6721                           
  6722                           ;ST7735_TFT.c: 430: spiwrite(lo);
  6723  0074' 5020'              	movf	drawFastVLine@lo,w,c
  6724  0076' EC00' F000'        	call	_spiwrite
  6725  007A' D000               	goto	l5091
  6726  007C'                    l5091:
  6727  007C' 0618'              	decf	drawFastVLine@h,f,c
  6728  007E' 2818'              	incf	drawFastVLine@h,w,c
  6729  0080' A4D8               	btfss	status,2,c
  6730  0082' D7F5               	goto	l5089
  6731                           
  6732                           ;ST7735_TFT.c: 431: }
  6733                           ;ST7735_TFT.c: 432: PORTDbits.RD1 = 1;
  6734  0084' 8283               	bsf	3971,1,c	;volatile
  6735  0086'                    l337:
  6736  0086' 0012               	return		;funcret
  6737  0088'                    __end_of_drawFastVLine:
  6738                           	opt stack 0
  6739                           tblptru	equ	0xFF8
  6740                           tblptrh	equ	0xFF7
  6741                           tblptrl	equ	0xFF6
  6742                           tablat	equ	0xFF5
  6743                           prodh	equ	0xFF4
  6744                           prodl	equ	0xFF3
  6745                           intcon	equ	0xFF2
  6746                           intcon2	equ	0xFF1
  6747                           postinc0	equ	0xFEE
  6748                           wreg	equ	0xFE8
  6749                           postdec1	equ	0xFE5
  6750                           fsr1l	equ	0xFE1
  6751                           indf2	equ	0xFDF
  6752                           postinc2	equ	0xFDE
  6753                           postdec2	equ	0xFDD
  6754                           fsr2h	equ	0xFDA
  6755                           fsr2l	equ	0xFD9
  6756                           status	equ	0xFD8
  6757                           
  6758 ;; *************** function _drawCircle *****************
  6759 ;; Defined at:
  6760 ;;		line 528 in file "ST7735_TFT.c"
  6761 ;; Parameters:    Size  Location     Type
  6762 ;;  x0              2   27[COMRAM] int 
  6763 ;;  y0              2   29[COMRAM] int 
  6764 ;;  r               2   31[COMRAM] int 
  6765 ;;  color           2   33[COMRAM] unsigned int 
  6766 ;; Auto vars:     Size  Location     Type
  6767 ;;  y               2   45[COMRAM] int 
  6768 ;;  x               2   43[COMRAM] int 
  6769 ;;  f               2   41[COMRAM] int 
  6770 ;;  ddF_y           2   39[COMRAM] int 
  6771 ;;  ddF_x           2   37[COMRAM] int 
  6772 ;; Return value:  Size  Location     Type
  6773 ;;		None               void
  6774 ;; Registers used:
  6775 ;;		wreg, status,2, status,0, cstack
  6776 ;; Tracked objects:
  6777 ;;		On entry : 0/0
  6778 ;;		On exit  : 0/0
  6779 ;;		Unchanged: 0/0
  6780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6781 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6782 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6783 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6784 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6785 ;;Total ram usage:       20 bytes
  6786 ;; Hardware stack levels used:    1
  6787 ;; Hardware stack levels required when called:    7
  6788 ;; This function calls:
  6789 ;;		_drawPixel
  6790 ;; This function is called by:
  6791 ;;		_Initialize_Screen
  6792 ;; This function uses a non-reentrant model
  6793 ;;
  6794                           
  6795                           	psect	text26
  6796  0000'                    __ptext26:
  6797                           	opt stack 0
  6798  0000'                    _drawCircle:
  6799                           	opt stack 22
  6800                           
  6801                           ;ST7735_TFT.c: 530: signed int f, ddF_x, ddF_y, x, y;
  6802                           ;ST7735_TFT.c: 531: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  6803                           
  6804                           ;incstack = 0
  6805  0000' C01F' F023'        	movff	drawCircle@r,??_drawCircle
  6806  0004' C020' F024'        	movff	drawCircle@r+1,??_drawCircle+1
  6807  0008' 1E23'              	comf	??_drawCircle,f,c
  6808  000A' 1E24'              	comf	??_drawCircle+1,f,c
  6809  000C' 4A23'              	infsnz	??_drawCircle,f,c
  6810  000E' 2A24'              	incf	??_drawCircle+1,f,c
  6811  0010' 0E01               	movlw	1
  6812  0012' 2423'              	addwf	??_drawCircle,w,c
  6813  0014' 6E29'              	movwf	drawCircle@f,c
  6814  0016' 0E00               	movlw	0
  6815  0018' 2024'              	addwfc	??_drawCircle+1,w,c
  6816  001A' 6E2A'              	movwf	drawCircle@f+1,c
  6817  001C' 0E00               	movlw	0
  6818  001E' 6E26'              	movwf	drawCircle@ddF_x+1,c
  6819  0020' 0E01               	movlw	1
  6820  0022' 6E25'              	movwf	drawCircle@ddF_x,c
  6821  0024' C01F' F023'        	movff	drawCircle@r,??_drawCircle
  6822  0028' C020' F024'        	movff	drawCircle@r+1,??_drawCircle+1
  6823  002C' 90D8               	bcf	status,0,c
  6824  002E' 3623'              	rlcf	??_drawCircle,f,c
  6825  0030' 3624'              	rlcf	??_drawCircle+1,f,c
  6826  0032' 1E23'              	comf	??_drawCircle,f,c
  6827  0034' 1E24'              	comf	??_drawCircle+1,f,c
  6828  0036' 4A23'              	infsnz	??_drawCircle,f,c
  6829  0038' 2A24'              	incf	??_drawCircle+1,f,c
  6830  003A' C023' F027'        	movff	??_drawCircle,drawCircle@ddF_y
  6831  003E' C024' F028'        	movff	??_drawCircle+1,drawCircle@ddF_y+1
  6832  0042' 0E00               	movlw	0
  6833  0044' 6E2C'              	movwf	drawCircle@x+1,c
  6834  0046' 0E00               	movlw	0
  6835  0048' 6E2B'              	movwf	drawCircle@x,c
  6836  004A' C01F' F02D'        	movff	drawCircle@r,drawCircle@y
  6837  004E' C020' F02E'        	movff	drawCircle@r+1,drawCircle@y+1
  6838                           
  6839                           ;ST7735_TFT.c: 532: drawPixel(x0 , y0 + r, color);
  6840  0052' 501D'              	movf	drawCircle@y0,w,c
  6841  0054' 241F'              	addwf	drawCircle@r,w,c
  6842  0056' 6E17'              	movwf	drawPixel@y,c
  6843  0058' C021' F018'        	movff	drawCircle@color,drawPixel@color
  6844  005C' C022' F019'        	movff	drawCircle@color+1,drawPixel@color+1
  6845  0060' 501B'              	movf	drawCircle@x0,w,c
  6846  0062' EC00' F000'        	call	_drawPixel
  6847                           
  6848                           ;ST7735_TFT.c: 533: drawPixel(x0 , y0 - r, color);
  6849  0066' 501F'              	movf	drawCircle@r,w,c
  6850  0068' 0800               	sublw	0
  6851  006A' 241D'              	addwf	drawCircle@y0,w,c
  6852  006C' 6E17'              	movwf	drawPixel@y,c
  6853  006E' C021' F018'        	movff	drawCircle@color,drawPixel@color
  6854  0072' C022' F019'        	movff	drawCircle@color+1,drawPixel@color+1
  6855  0076' 501B'              	movf	drawCircle@x0,w,c
  6856  0078' EC00' F000'        	call	_drawPixel
  6857                           
  6858                           ;ST7735_TFT.c: 534: drawPixel(x0+r, y0 , color);
  6859  007C' C01D' F017'        	movff	drawCircle@y0,drawPixel@y
  6860  0080' C021' F018'        	movff	drawCircle@color,drawPixel@color
  6861  0084' C022' F019'        	movff	drawCircle@color+1,drawPixel@color+1
  6862  0088' 501B'              	movf	drawCircle@x0,w,c
  6863  008A' 241F'              	addwf	drawCircle@r,w,c
  6864  008C' EC00' F000'        	call	_drawPixel
  6865                           
  6866                           ;ST7735_TFT.c: 535: drawPixel(x0-r, y0 , color);
  6867  0090' C01D' F017'        	movff	drawCircle@y0,drawPixel@y
  6868  0094' C021' F018'        	movff	drawCircle@color,drawPixel@color
  6869  0098' C022' F019'        	movff	drawCircle@color+1,drawPixel@color+1
  6870  009C' 501F'              	movf	drawCircle@r,w,c
  6871  009E' 0800               	sublw	0
  6872  00A0' 241B'              	addwf	drawCircle@x0,w,c
  6873  00A2' EC00' F000'        	call	_drawPixel
  6874                           
  6875                           ;ST7735_TFT.c: 536: while (x < y) {
  6876  00A6' D078               	goto	l5775
  6877  00A8'                    l5747:
  6878                           
  6879                           ;ST7735_TFT.c: 537: if (f >= 0) {
  6880  00A8' BE2A'              	btfsc	drawCircle@f+1,7,c
  6881  00AA' D00B               	goto	l401
  6882                           
  6883                           ;ST7735_TFT.c: 538: y--;
  6884  00AC' 062D'              	decf	drawCircle@y,f,c
  6885  00AE' A0D8               	btfss	status,0,c
  6886  00B0' 062E'              	decf	drawCircle@y+1,f,c
  6887                           
  6888                           ;ST7735_TFT.c: 539: ddF_y += 2;
  6889  00B2' 0E02               	movlw	2
  6890  00B4' 2627'              	addwf	drawCircle@ddF_y,f,c
  6891  00B6' 0E00               	movlw	0
  6892  00B8' 2228'              	addwfc	drawCircle@ddF_y+1,f,c
  6893                           
  6894                           ;ST7735_TFT.c: 540: f += ddF_y;
  6895  00BA' 5027'              	movf	drawCircle@ddF_y,w,c
  6896  00BC' 2629'              	addwf	drawCircle@f,f,c
  6897  00BE' 5028'              	movf	drawCircle@ddF_y+1,w,c
  6898  00C0' 222A'              	addwfc	drawCircle@f+1,f,c
  6899  00C2'                    l401:
  6900                           
  6901                           ;ST7735_TFT.c: 541: }
  6902                           ;ST7735_TFT.c: 542: x++;
  6903  00C2' 4A2B'              	infsnz	drawCircle@x,f,c
  6904  00C4' 2A2C'              	incf	drawCircle@x+1,f,c
  6905                           
  6906                           ;ST7735_TFT.c: 543: ddF_x += 2;
  6907  00C6' 0E02               	movlw	2
  6908  00C8' 2625'              	addwf	drawCircle@ddF_x,f,c
  6909  00CA' 0E00               	movlw	0
  6910  00CC' 2226'              	addwfc	drawCircle@ddF_x+1,f,c
  6911                           
  6912                           ;ST7735_TFT.c: 544: f += ddF_x;
  6913  00CE' 5025'              	movf	drawCircle@ddF_x,w,c
  6914  00D0' 2629'              	addwf	drawCircle@f,f,c
  6915  00D2' 5026'              	movf	drawCircle@ddF_x+1,w,c
  6916  00D4' 222A'              	addwfc	drawCircle@f+1,f,c
  6917                           
  6918                           ;ST7735_TFT.c: 545: drawPixel(x0 + x, y0 + y, color);
  6919  00D6' 501D'              	movf	drawCircle@y0,w,c
  6920  00D8' 242D'              	addwf	drawCircle@y,w,c
  6921  00DA' 6E17'              	movwf	drawPixel@y,c
  6922  00DC' C021' F018'        	movff	drawCircle@color,drawPixel@color
  6923  00E0' C022' F019'        	movff	drawCircle@color+1,drawPixel@color+1
  6924  00E4' 501B'              	movf	drawCircle@x0,w,c
  6925  00E6' 242B'              	addwf	drawCircle@x,w,c
  6926  00E8' EC00' F000'        	call	_drawPixel
  6927                           
  6928                           ;ST7735_TFT.c: 546: drawPixel(x0 - x, y0 + y, color);
  6929  00EC' 501D'              	movf	drawCircle@y0,w,c
  6930  00EE' 242D'              	addwf	drawCircle@y,w,c
  6931  00F0' 6E17'              	movwf	drawPixel@y,c
  6932  00F2' C021' F018'        	movff	drawCircle@color,drawPixel@color
  6933  00F6' C022' F019'        	movff	drawCircle@color+1,drawPixel@color+1
  6934  00FA' 502B'              	movf	drawCircle@x,w,c
  6935  00FC' 0800               	sublw	0
  6936  00FE' 241B'              	addwf	drawCircle@x0,w,c
  6937  0100' EC00' F000'        	call	_drawPixel
  6938                           
  6939                           ;ST7735_TFT.c: 547: drawPixel(x0 + x, y0 - y, color);
  6940  0104' 502D'              	movf	drawCircle@y,w,c
  6941  0106' 0800               	sublw	0
  6942  0108' 241D'              	addwf	drawCircle@y0,w,c
  6943  010A' 6E17'              	movwf	drawPixel@y,c
  6944  010C' C021' F018'        	movff	drawCircle@color,drawPixel@color
  6945  0110' C022' F019'        	movff	drawCircle@color+1,drawPixel@color+1
  6946  0114' 501B'              	movf	drawCircle@x0,w,c
  6947  0116' 242B'              	addwf	drawCircle@x,w,c
  6948  0118' EC00' F000'        	call	_drawPixel
  6949                           
  6950                           ;ST7735_TFT.c: 548: drawPixel(x0 - x, y0 - y, color);
  6951  011C' 502D'              	movf	drawCircle@y,w,c
  6952  011E' 0800               	sublw	0
  6953  0120' 241D'              	addwf	drawCircle@y0,w,c
  6954  0122' 6E17'              	movwf	drawPixel@y,c
  6955  0124' C021' F018'        	movff	drawCircle@color,drawPixel@color
  6956  0128' C022' F019'        	movff	drawCircle@color+1,drawPixel@color+1
  6957  012C' 502B'              	movf	drawCircle@x,w,c
  6958  012E' 0800               	sublw	0
  6959  0130' 241B'              	addwf	drawCircle@x0,w,c
  6960  0132' EC00' F000'        	call	_drawPixel
  6961                           
  6962                           ;ST7735_TFT.c: 549: drawPixel(x0 + y, y0 + x, color);
  6963  0136' 501D'              	movf	drawCircle@y0,w,c
  6964  0138' 242B'              	addwf	drawCircle@x,w,c
  6965  013A' 6E17'              	movwf	drawPixel@y,c
  6966  013C' C021' F018'        	movff	drawCircle@color,drawPixel@color
  6967  0140' C022' F019'        	movff	drawCircle@color+1,drawPixel@color+1
  6968  0144' 501B'              	movf	drawCircle@x0,w,c
  6969  0146' 242D'              	addwf	drawCircle@y,w,c
  6970  0148' EC00' F000'        	call	_drawPixel
  6971                           
  6972                           ;ST7735_TFT.c: 550: drawPixel(x0 - y, y0 + x, color);
  6973  014C' 501D'              	movf	drawCircle@y0,w,c
  6974  014E' 242B'              	addwf	drawCircle@x,w,c
  6975  0150' 6E17'              	movwf	drawPixel@y,c
  6976  0152' C021' F018'        	movff	drawCircle@color,drawPixel@color
  6977  0156' C022' F019'        	movff	drawCircle@color+1,drawPixel@color+1
  6978  015A' 502D'              	movf	drawCircle@y,w,c
  6979  015C' 0800               	sublw	0
  6980  015E' 241B'              	addwf	drawCircle@x0,w,c
  6981  0160' EC00' F000'        	call	_drawPixel
  6982                           
  6983                           ;ST7735_TFT.c: 551: drawPixel(x0 + y, y0 - x, color);
  6984  0164' 502B'              	movf	drawCircle@x,w,c
  6985  0166' 0800               	sublw	0
  6986  0168' 241D'              	addwf	drawCircle@y0,w,c
  6987  016A' 6E17'              	movwf	drawPixel@y,c
  6988  016C' C021' F018'        	movff	drawCircle@color,drawPixel@color
  6989  0170' C022' F019'        	movff	drawCircle@color+1,drawPixel@color+1
  6990  0174' 501B'              	movf	drawCircle@x0,w,c
  6991  0176' 242D'              	addwf	drawCircle@y,w,c
  6992  0178' EC00' F000'        	call	_drawPixel
  6993                           
  6994                           ;ST7735_TFT.c: 552: drawPixel(x0 - y, y0 - x, color);
  6995  017C' 502B'              	movf	drawCircle@x,w,c
  6996  017E' 0800               	sublw	0
  6997  0180' 241D'              	addwf	drawCircle@y0,w,c
  6998  0182' 6E17'              	movwf	drawPixel@y,c
  6999  0184' C021' F018'        	movff	drawCircle@color,drawPixel@color
  7000  0188' C022' F019'        	movff	drawCircle@color+1,drawPixel@color+1
  7001  018C' 502D'              	movf	drawCircle@y,w,c
  7002  018E' 0800               	sublw	0
  7003  0190' 241B'              	addwf	drawCircle@x0,w,c
  7004  0192' EC00' F000'        	call	_drawPixel
  7005  0196' D000               	goto	l5775
  7006  0198'                    l5775:
  7007  0198' 502D'              	movf	drawCircle@y,w,c
  7008  019A' 5C2B'              	subwf	drawCircle@x,w,c
  7009  019C' 502C'              	movf	drawCircle@x+1,w,c
  7010  019E' 0A80               	xorlw	128
  7011  01A0' 6E00'              	movwf	??_drawCircle& (0+255),c
  7012  01A2' 502E'              	movf	drawCircle@y+1,w,c
  7013  01A4' 0A80               	xorlw	128
  7014  01A6' 5800'              	subwfb	??_drawCircle& (0+255),w,c
  7015  01A8' A0D8               	btfss	status,0,c
  7016  01AA' D77E               	goto	l5747
  7017  01AC' 0012               	return		;funcret
  7018  01AE'                    __end_of_drawCircle:
  7019                           	opt stack 0
  7020                           tblptru	equ	0xFF8
  7021                           tblptrh	equ	0xFF7
  7022                           tblptrl	equ	0xFF6
  7023                           tablat	equ	0xFF5
  7024                           prodh	equ	0xFF4
  7025                           prodl	equ	0xFF3
  7026                           intcon	equ	0xFF2
  7027                           intcon2	equ	0xFF1
  7028                           postinc0	equ	0xFEE
  7029                           wreg	equ	0xFE8
  7030                           postdec1	equ	0xFE5
  7031                           fsr1l	equ	0xFE1
  7032                           indf2	equ	0xFDF
  7033                           postinc2	equ	0xFDE
  7034                           postdec2	equ	0xFDD
  7035                           fsr2h	equ	0xFDA
  7036                           fsr2l	equ	0xFD9
  7037                           status	equ	0xFD8
  7038                           
  7039 ;; *************** function _drawPixel *****************
  7040 ;; Defined at:
  7041 ;;		line 407 in file "ST7735_TFT.c"
  7042 ;; Parameters:    Size  Location     Type
  7043 ;;  x               1    wreg     unsigned char 
  7044 ;;  y               1   23[COMRAM] unsigned char 
  7045 ;;  color           2   24[COMRAM] unsigned int 
  7046 ;; Auto vars:     Size  Location     Type
  7047 ;;  x               1   26[COMRAM] unsigned char 
  7048 ;; Return value:  Size  Location     Type
  7049 ;;		None               void
  7050 ;; Registers used:
  7051 ;;		wreg, status,2, status,0, cstack
  7052 ;; Tracked objects:
  7053 ;;		On entry : 0/0
  7054 ;;		On exit  : 0/0
  7055 ;;		Unchanged: 0/0
  7056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7057 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7058 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7059 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7060 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7061 ;;Total ram usage:        4 bytes
  7062 ;; Hardware stack levels used:    1
  7063 ;; Hardware stack levels required when called:    6
  7064 ;; This function calls:
  7065 ;;		_setAddrWindow
  7066 ;;		_write_data
  7067 ;; This function is called by:
  7068 ;;		_drawChar
  7069 ;;		_drawCircle
  7070 ;;		_drawCircleHelper
  7071 ;; This function uses a non-reentrant model
  7072 ;;
  7073                           
  7074                           	psect	text27
  7075  0000'                    __ptext27:
  7076                           	opt stack 0
  7077  0000'                    _drawPixel:
  7078                           	opt stack 21
  7079                           
  7080                           ;incstack = 0
  7081                           ;drawPixel@x stored from wreg
  7082  0000' 6E1A'              	movwf	drawPixel@x,c
  7083                           
  7084                           ;ST7735_TFT.c: 409: if((x >= 128) || (y >= 160))
  7085  0002' 0E80               	movlw	128
  7086  0004' 601A'              	cpfslt	drawPixel@x,c
  7087  0006' D013               	goto	l331
  7088  0008' 0E9F               	movlw	159
  7089  000A' 6417'              	cpfsgt	drawPixel@y,c
  7090  000C' D001               	goto	l5157
  7091                           
  7092                           ;ST7735_TFT.c: 410: return;
  7093  000E' D00F               	goto	l331
  7094  0010'                    l5157:
  7095                           
  7096                           ;ST7735_TFT.c: 411: setAddrWindow(x,y,x+1,y+1);
  7097  0010' C017' F013'        	movff	drawPixel@y,setAddrWindow@y0
  7098  0014' 281A'              	incf	drawPixel@x,w,c
  7099  0016' 6E14'              	movwf	setAddrWindow@x1,c
  7100  0018' 2817'              	incf	drawPixel@y,w,c
  7101  001A' 6E15'              	movwf	setAddrWindow@y1,c
  7102  001C' 501A'              	movf	drawPixel@x,w,c
  7103  001E' EC00' F000'        	call	_setAddrWindow
  7104                           
  7105                           ;ST7735_TFT.c: 412: write_data(color >> 8);
  7106  0022' 5019'              	movf	drawPixel@color+1,w,c
  7107  0024' EC00' F000'        	call	_write_data
  7108                           
  7109                           ;ST7735_TFT.c: 413: write_data(color & 0xFF);
  7110  0028' 5018'              	movf	drawPixel@color,w,c
  7111  002A' EC00' F000'        	call	_write_data
  7112  002E'                    l331:
  7113  002E' 0012               	return		;funcret
  7114  0030'                    __end_of_drawPixel:
  7115                           	opt stack 0
  7116                           tblptru	equ	0xFF8
  7117                           tblptrh	equ	0xFF7
  7118                           tblptrl	equ	0xFF6
  7119                           tablat	equ	0xFF5
  7120                           prodh	equ	0xFF4
  7121                           prodl	equ	0xFF3
  7122                           intcon	equ	0xFF2
  7123                           intcon2	equ	0xFF1
  7124                           postinc0	equ	0xFEE
  7125                           wreg	equ	0xFE8
  7126                           postdec1	equ	0xFE5
  7127                           fsr1l	equ	0xFE1
  7128                           indf2	equ	0xFDF
  7129                           postinc2	equ	0xFDE
  7130                           postdec2	equ	0xFDD
  7131                           fsr2h	equ	0xFDA
  7132                           fsr2l	equ	0xFD9
  7133                           status	equ	0xFD8
  7134                           
  7135 ;; *************** function _setAddrWindow *****************
  7136 ;; Defined at:
  7137 ;;		line 392 in file "ST7735_TFT.c"
  7138 ;; Parameters:    Size  Location     Type
  7139 ;;  x0              1    wreg     unsigned char 
  7140 ;;  y0              1   19[COMRAM] unsigned char 
  7141 ;;  x1              1   20[COMRAM] unsigned char 
  7142 ;;  y1              1   21[COMRAM] unsigned char 
  7143 ;; Auto vars:     Size  Location     Type
  7144 ;;  x0              1   22[COMRAM] unsigned char 
  7145 ;; Return value:  Size  Location     Type
  7146 ;;		None               void
  7147 ;; Registers used:
  7148 ;;		wreg, status,2, status,0, cstack
  7149 ;; Tracked objects:
  7150 ;;		On entry : 0/0
  7151 ;;		On exit  : 0/0
  7152 ;;		Unchanged: 0/0
  7153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7154 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7155 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7156 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7157 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7158 ;;Total ram usage:        4 bytes
  7159 ;; Hardware stack levels used:    1
  7160 ;; Hardware stack levels required when called:    5
  7161 ;; This function calls:
  7162 ;;		_write_command
  7163 ;;		_write_data
  7164 ;; This function is called by:
  7165 ;;		_drawPixel
  7166 ;;		_drawFastVLine
  7167 ;;		_fillRectangle
  7168 ;;		_drawFastHLine
  7169 ;; This function uses a non-reentrant model
  7170 ;;
  7171                           
  7172                           	psect	text28
  7173  0000'                    __ptext28:
  7174                           	opt stack 0
  7175  0000'                    _setAddrWindow:
  7176                           	opt stack 20
  7177                           
  7178                           ;incstack = 0
  7179                           ;setAddrWindow@x0 stored from wreg
  7180  0000' 6E16'              	movwf	setAddrWindow@x0,c
  7181                           
  7182                           ;ST7735_TFT.c: 394: write_command(0x2A);
  7183  0002' 0E2A               	movlw	42
  7184  0004' EC00' F000'        	call	_write_command
  7185                           
  7186                           ;ST7735_TFT.c: 395: write_data(0);
  7187  0008' 0E00               	movlw	0
  7188  000A' EC00' F000'        	call	_write_data
  7189                           
  7190                           ;ST7735_TFT.c: 396: write_data(x0 + colstart);
  7191  000E' 5016'              	movf	setAddrWindow@x0,w,c
  7192  0010' 2417'              	addwf	_colstart,w,c
  7193  0012' EC00' F000'        	call	_write_data
  7194                           
  7195                           ;ST7735_TFT.c: 397: write_data(0);
  7196  0016' 0E00               	movlw	0
  7197  0018' EC00' F000'        	call	_write_data
  7198                           
  7199                           ;ST7735_TFT.c: 398: write_data(x1 + colstart);
  7200  001C' 5014'              	movf	setAddrWindow@x1,w,c
  7201  001E' 2417'              	addwf	_colstart,w,c
  7202  0020' EC00' F000'        	call	_write_data
  7203                           
  7204                           ;ST7735_TFT.c: 399: write_command(0x2B);
  7205  0024' 0E2B               	movlw	43
  7206  0026' EC00' F000'        	call	_write_command
  7207                           
  7208                           ;ST7735_TFT.c: 400: write_data(0);
  7209  002A' 0E00               	movlw	0
  7210  002C' EC00' F000'        	call	_write_data
  7211                           
  7212                           ;ST7735_TFT.c: 401: write_data(y0 + rowstart);
  7213  0030' 5013'              	movf	setAddrWindow@y0,w,c
  7214  0032' 241F'              	addwf	_rowstart,w,c
  7215  0034' EC00' F000'        	call	_write_data
  7216                           
  7217                           ;ST7735_TFT.c: 402: write_data(0);
  7218  0038' 0E00               	movlw	0
  7219  003A' EC00' F000'        	call	_write_data
  7220                           
  7221                           ;ST7735_TFT.c: 403: write_data(y1 + rowstart);
  7222  003E' 5015'              	movf	setAddrWindow@y1,w,c
  7223  0040' 241F'              	addwf	_rowstart,w,c
  7224  0042' EC00' F000'        	call	_write_data
  7225                           
  7226                           ;ST7735_TFT.c: 404: write_command(0x2C);
  7227  0046' 0E2C               	movlw	44
  7228  0048' EC00' F000'        	call	_write_command
  7229  004C' 0012               	return		;funcret
  7230  004E'                    __end_of_setAddrWindow:
  7231                           	opt stack 0
  7232                           tblptru	equ	0xFF8
  7233                           tblptrh	equ	0xFF7
  7234                           tblptrl	equ	0xFF6
  7235                           tablat	equ	0xFF5
  7236                           prodh	equ	0xFF4
  7237                           prodl	equ	0xFF3
  7238                           intcon	equ	0xFF2
  7239                           intcon2	equ	0xFF1
  7240                           postinc0	equ	0xFEE
  7241                           wreg	equ	0xFE8
  7242                           postdec1	equ	0xFE5
  7243                           fsr1l	equ	0xFE1
  7244                           indf2	equ	0xFDF
  7245                           postinc2	equ	0xFDE
  7246                           postdec2	equ	0xFDD
  7247                           fsr2h	equ	0xFDA
  7248                           fsr2l	equ	0xFD9
  7249                           status	equ	0xFD8
  7250                           
  7251 ;; *************** function _TFT_GreenTab_Initialize *****************
  7252 ;; Defined at:
  7253 ;;		line 644 in file "ST7735_TFT.c"
  7254 ;; Parameters:    Size  Location     Type
  7255 ;;		None
  7256 ;; Auto vars:     Size  Location     Type
  7257 ;;		None
  7258 ;; Return value:  Size  Location     Type
  7259 ;;		None               void
  7260 ;; Registers used:
  7261 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7262 ;; Tracked objects:
  7263 ;;		On entry : 0/0
  7264 ;;		On exit  : 0/0
  7265 ;;		Unchanged: 0/0
  7266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7268 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7269 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7270 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7271 ;;Total ram usage:        0 bytes
  7272 ;; Hardware stack levels used:    1
  7273 ;; Hardware stack levels required when called:    6
  7274 ;; This function calls:
  7275 ;;		_Rcmd1
  7276 ;;		_Rcmd2red
  7277 ;;		_Rcmd3
  7278 ;;		_write_command
  7279 ;;		_write_data
  7280 ;; This function is called by:
  7281 ;;		_Initialize_Screen
  7282 ;; This function uses a non-reentrant model
  7283 ;;
  7284                           
  7285                           	psect	text29
  7286  0000'                    __ptext29:
  7287                           	opt stack 0
  7288  0000'                    _TFT_GreenTab_Initialize:
  7289                           	opt stack 23
  7290                           
  7291                           ;ST7735_TFT.c: 646: PORTDbits.RD1 = 1;
  7292                           
  7293                           ;incstack = 0
  7294  0000' 8283               	bsf	3971,1,c	;volatile
  7295                           
  7296                           ;ST7735_TFT.c: 647: PORTDbits.RD0 = 0;
  7297  0002' 9083               	bcf	3971,0,c	;volatile
  7298                           
  7299                           ;ST7735_TFT.c: 649: SSPSTAT=0x80;
  7300  0004' 0E80               	movlw	128
  7301  0006' 6EC7               	movwf	4039,c	;volatile
  7302                           
  7303                           ;ST7735_TFT.c: 650: SSPCON1=0x30;
  7304  0008' 0E30               	movlw	48
  7305  000A' 6EC6               	movwf	4038,c	;volatile
  7306                           
  7307                           ;ST7735_TFT.c: 653: Rcmd1();
  7308  000C' EC00' F000'        	call	_Rcmd1	;wreg free
  7309                           
  7310                           ;ST7735_TFT.c: 654: Rcmd2red();
  7311  0010' EC00' F000'        	call	_Rcmd2red	;wreg free
  7312                           
  7313                           ;ST7735_TFT.c: 655: Rcmd3();
  7314  0014' EC00' F000'        	call	_Rcmd3	;wreg free
  7315                           
  7316                           ;ST7735_TFT.c: 656: write_command(0x36);
  7317  0018' 0E36               	movlw	54
  7318  001A' EC00' F000'        	call	_write_command
  7319                           
  7320                           ;ST7735_TFT.c: 657: write_data(0xC0);
  7321  001E' 0EC0               	movlw	192
  7322  0020' EC00' F000'        	call	_write_data
  7323                           
  7324                           ;ST7735_TFT.c: 658: _tft_type = 1;
  7325  0024' 0E01               	movlw	1
  7326  0026' 6E11'              	movwf	__tft_type,c
  7327  0028' 0012               	return		;funcret
  7328  002A'                    __end_of_TFT_GreenTab_Initialize:
  7329                           	opt stack 0
  7330                           tblptru	equ	0xFF8
  7331                           tblptrh	equ	0xFF7
  7332                           tblptrl	equ	0xFF6
  7333                           tablat	equ	0xFF5
  7334                           prodh	equ	0xFF4
  7335                           prodl	equ	0xFF3
  7336                           intcon	equ	0xFF2
  7337                           intcon2	equ	0xFF1
  7338                           postinc0	equ	0xFEE
  7339                           wreg	equ	0xFE8
  7340                           postdec1	equ	0xFE5
  7341                           fsr1l	equ	0xFE1
  7342                           indf2	equ	0xFDF
  7343                           postinc2	equ	0xFDE
  7344                           postdec2	equ	0xFDD
  7345                           fsr2h	equ	0xFDA
  7346                           fsr2l	equ	0xFD9
  7347                           status	equ	0xFD8
  7348                           
  7349 ;; *************** function _Rcmd3 *****************
  7350 ;; Defined at:
  7351 ;;		line 338 in file "ST7735_TFT.c"
  7352 ;; Parameters:    Size  Location     Type
  7353 ;;		None
  7354 ;; Auto vars:     Size  Location     Type
  7355 ;;		None
  7356 ;; Return value:  Size  Location     Type
  7357 ;;		None               void
  7358 ;; Registers used:
  7359 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7360 ;; Tracked objects:
  7361 ;;		On entry : 0/0
  7362 ;;		On exit  : 0/0
  7363 ;;		Unchanged: 0/0
  7364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7365 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7366 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7367 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7368 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7369 ;;Total ram usage:        0 bytes
  7370 ;; Hardware stack levels used:    1
  7371 ;; Hardware stack levels required when called:    5
  7372 ;; This function calls:
  7373 ;;		_delay_ms
  7374 ;;		_write_command
  7375 ;;		_write_data
  7376 ;; This function is called by:
  7377 ;;		_TFT_GreenTab_Initialize
  7378 ;;		_TFT_BlackTab_Initialize
  7379 ;; This function uses a non-reentrant model
  7380 ;;
  7381                           
  7382                           	psect	text30
  7383  0000'                    __ptext30:
  7384                           	opt stack 0
  7385  0000'                    _Rcmd3:
  7386                           	opt stack 23
  7387                           
  7388                           ;ST7735_TFT.c: 340: write_command(0xE0);
  7389                           
  7390                           ;incstack = 0
  7391  0000' 0EE0               	movlw	224
  7392  0002' EC00' F000'        	call	_write_command
  7393                           
  7394                           ;ST7735_TFT.c: 341: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
  7395  0006' 0E02               	movlw	2
  7396  0008' EC00' F000'        	call	_write_data
  7397  000C' 0E1C               	movlw	28
  7398  000E' EC00' F000'        	call	_write_data
  7399  0012' 0E07               	movlw	7
  7400  0014' EC00' F000'        	call	_write_data
  7401  0018' 0E12               	movlw	18
  7402  001A' EC00' F000'        	call	_write_data
  7403                           
  7404                           ;ST7735_TFT.c: 342: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
  7405  001E' 0E37               	movlw	55
  7406  0020' EC00' F000'        	call	_write_data
  7407  0024' 0E32               	movlw	50
  7408  0026' EC00' F000'        	call	_write_data
  7409  002A' 0E29               	movlw	41
  7410  002C' EC00' F000'        	call	_write_data
  7411  0030' 0E2D               	movlw	45
  7412  0032' EC00' F000'        	call	_write_data
  7413                           
  7414                           ;ST7735_TFT.c: 343: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
  7415  0036' 0E29               	movlw	41
  7416  0038' EC00' F000'        	call	_write_data
  7417  003C' 0E25               	movlw	37
  7418  003E' EC00' F000'        	call	_write_data
  7419  0042' 0E2B               	movlw	43
  7420  0044' EC00' F000'        	call	_write_data
  7421  0048' 0E39               	movlw	57
  7422  004A' EC00' F000'        	call	_write_data
  7423                           
  7424                           ;ST7735_TFT.c: 344: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
  7425  004E' 0E00               	movlw	0
  7426  0050' EC00' F000'        	call	_write_data
  7427  0054' 0E01               	movlw	1
  7428  0056' EC00' F000'        	call	_write_data
  7429  005A' 0E03               	movlw	3
  7430  005C' EC00' F000'        	call	_write_data
  7431  0060' 0E10               	movlw	16
  7432  0062' EC00' F000'        	call	_write_data
  7433                           
  7434                           ;ST7735_TFT.c: 345: write_command(0xE1);
  7435  0066' 0EE1               	movlw	225
  7436  0068' EC00' F000'        	call	_write_command
  7437                           
  7438                           ;ST7735_TFT.c: 346: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
  7439  006C' 0E03               	movlw	3
  7440  006E' EC00' F000'        	call	_write_data
  7441  0072' 0E1D               	movlw	29
  7442  0074' EC00' F000'        	call	_write_data
  7443  0078' 0E07               	movlw	7
  7444  007A' EC00' F000'        	call	_write_data
  7445  007E' 0E06               	movlw	6
  7446  0080' EC00' F000'        	call	_write_data
  7447                           
  7448                           ;ST7735_TFT.c: 347: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
  7449  0084' 0E2E               	movlw	46
  7450  0086' EC00' F000'        	call	_write_data
  7451  008A' 0E2C               	movlw	44
  7452  008C' EC00' F000'        	call	_write_data
  7453  0090' 0E29               	movlw	41
  7454  0092' EC00' F000'        	call	_write_data
  7455  0096' 0E2D               	movlw	45
  7456  0098' EC00' F000'        	call	_write_data
  7457                           
  7458                           ;ST7735_TFT.c: 348: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
  7459  009C' 0E2E               	movlw	46
  7460  009E' EC00' F000'        	call	_write_data
  7461  00A2' 0E2E               	movlw	46
  7462  00A4' EC00' F000'        	call	_write_data
  7463  00A8' 0E37               	movlw	55
  7464  00AA' EC00' F000'        	call	_write_data
  7465  00AE' 0E3F               	movlw	63
  7466  00B0' EC00' F000'        	call	_write_data
  7467                           
  7468                           ;ST7735_TFT.c: 349: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
  7469  00B4' 0E00               	movlw	0
  7470  00B6' EC00' F000'        	call	_write_data
  7471  00BA' 0E00               	movlw	0
  7472  00BC' EC00' F000'        	call	_write_data
  7473  00C0' 0E02               	movlw	2
  7474  00C2' EC00' F000'        	call	_write_data
  7475  00C6' 0E10               	movlw	16
  7476  00C8' EC00' F000'        	call	_write_data
  7477                           
  7478                           ;ST7735_TFT.c: 350: write_command(0x13);
  7479  00CC' 0E13               	movlw	19
  7480  00CE' EC00' F000'        	call	_write_command
  7481                           
  7482                           ;ST7735_TFT.c: 351: delay_ms(10);
  7483  00D2' 0E00               	movlw	0
  7484  00D4' 6E17'              	movwf	delay_ms@ms+1,c
  7485  00D6' 0E0A               	movlw	10
  7486  00D8' 6E16'              	movwf	delay_ms@ms,c
  7487  00DA' EC00' F000'        	call	_delay_ms	;wreg free
  7488                           
  7489                           ;ST7735_TFT.c: 352: write_command(0x29);
  7490  00DE' 0E29               	movlw	41
  7491  00E0' EC00' F000'        	call	_write_command
  7492                           
  7493                           ;ST7735_TFT.c: 353: delay_ms(100);
  7494  00E4' 0E00               	movlw	0
  7495  00E6' 6E17'              	movwf	delay_ms@ms+1,c
  7496  00E8' 0E64               	movlw	100
  7497  00EA' 6E16'              	movwf	delay_ms@ms,c
  7498  00EC' EC00' F000'        	call	_delay_ms	;wreg free
  7499  00F0' 0012               	return		;funcret
  7500  00F2'                    __end_of_Rcmd3:
  7501                           	opt stack 0
  7502                           tblptru	equ	0xFF8
  7503                           tblptrh	equ	0xFF7
  7504                           tblptrl	equ	0xFF6
  7505                           tablat	equ	0xFF5
  7506                           prodh	equ	0xFF4
  7507                           prodl	equ	0xFF3
  7508                           intcon	equ	0xFF2
  7509                           intcon2	equ	0xFF1
  7510                           postinc0	equ	0xFEE
  7511                           wreg	equ	0xFE8
  7512                           postdec1	equ	0xFE5
  7513                           fsr1l	equ	0xFE1
  7514                           indf2	equ	0xFDF
  7515                           postinc2	equ	0xFDE
  7516                           postdec2	equ	0xFDD
  7517                           fsr2h	equ	0xFDA
  7518                           fsr2l	equ	0xFD9
  7519                           status	equ	0xFD8
  7520                           
  7521 ;; *************** function _Rcmd2red *****************
  7522 ;; Defined at:
  7523 ;;		line 328 in file "ST7735_TFT.c"
  7524 ;; Parameters:    Size  Location     Type
  7525 ;;		None
  7526 ;; Auto vars:     Size  Location     Type
  7527 ;;		None
  7528 ;; Return value:  Size  Location     Type
  7529 ;;		None               void
  7530 ;; Registers used:
  7531 ;;		wreg, status,2, cstack
  7532 ;; Tracked objects:
  7533 ;;		On entry : 0/0
  7534 ;;		On exit  : 0/0
  7535 ;;		Unchanged: 0/0
  7536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7537 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7538 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7539 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7540 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7541 ;;Total ram usage:        0 bytes
  7542 ;; Hardware stack levels used:    1
  7543 ;; Hardware stack levels required when called:    5
  7544 ;; This function calls:
  7545 ;;		_write_command
  7546 ;;		_write_data
  7547 ;; This function is called by:
  7548 ;;		_TFT_GreenTab_Initialize
  7549 ;; This function uses a non-reentrant model
  7550 ;;
  7551                           
  7552                           	psect	text31
  7553  0000'                    __ptext31:
  7554                           	opt stack 0
  7555  0000'                    _Rcmd2red:
  7556                           	opt stack 23
  7557                           
  7558                           ;ST7735_TFT.c: 330: write_command(0x2A);
  7559                           
  7560                           ;incstack = 0
  7561  0000' 0E2A               	movlw	42
  7562  0002' EC00' F000'        	call	_write_command
  7563                           
  7564                           ;ST7735_TFT.c: 331: write_data(0x00); write_data(0x00);
  7565  0006' 0E00               	movlw	0
  7566  0008' EC00' F000'        	call	_write_data
  7567  000C' 0E00               	movlw	0
  7568  000E' EC00' F000'        	call	_write_data
  7569                           
  7570                           ;ST7735_TFT.c: 332: write_data(0x00); write_data(0x7F);
  7571  0012' 0E00               	movlw	0
  7572  0014' EC00' F000'        	call	_write_data
  7573  0018' 0E7F               	movlw	127
  7574  001A' EC00' F000'        	call	_write_data
  7575                           
  7576                           ;ST7735_TFT.c: 333: write_command(0x2B);
  7577  001E' 0E2B               	movlw	43
  7578  0020' EC00' F000'        	call	_write_command
  7579                           
  7580                           ;ST7735_TFT.c: 334: write_data(0x00); write_data(0x00);
  7581  0024' 0E00               	movlw	0
  7582  0026' EC00' F000'        	call	_write_data
  7583  002A' 0E00               	movlw	0
  7584  002C' EC00' F000'        	call	_write_data
  7585                           
  7586                           ;ST7735_TFT.c: 335: write_data(0x00); write_data(0x9F);
  7587  0030' 0E00               	movlw	0
  7588  0032' EC00' F000'        	call	_write_data
  7589  0036' 0E9F               	movlw	159
  7590  0038' EC00' F000'        	call	_write_data
  7591  003C' 0012               	return		;funcret
  7592  003E'                    __end_of_Rcmd2red:
  7593                           	opt stack 0
  7594                           tblptru	equ	0xFF8
  7595                           tblptrh	equ	0xFF7
  7596                           tblptrl	equ	0xFF6
  7597                           tablat	equ	0xFF5
  7598                           prodh	equ	0xFF4
  7599                           prodl	equ	0xFF3
  7600                           intcon	equ	0xFF2
  7601                           intcon2	equ	0xFF1
  7602                           postinc0	equ	0xFEE
  7603                           wreg	equ	0xFE8
  7604                           postdec1	equ	0xFE5
  7605                           fsr1l	equ	0xFE1
  7606                           indf2	equ	0xFDF
  7607                           postinc2	equ	0xFDE
  7608                           postdec2	equ	0xFDD
  7609                           fsr2h	equ	0xFDA
  7610                           fsr2l	equ	0xFD9
  7611                           status	equ	0xFD8
  7612                           
  7613 ;; *************** function _Rcmd1 *****************
  7614 ;; Defined at:
  7615 ;;		line 281 in file "ST7735_TFT.c"
  7616 ;; Parameters:    Size  Location     Type
  7617 ;;		None
  7618 ;; Auto vars:     Size  Location     Type
  7619 ;;		None
  7620 ;; Return value:  Size  Location     Type
  7621 ;;		None               void
  7622 ;; Registers used:
  7623 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7624 ;; Tracked objects:
  7625 ;;		On entry : 0/0
  7626 ;;		On exit  : 0/0
  7627 ;;		Unchanged: 0/0
  7628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7629 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7630 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7631 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7632 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7633 ;;Total ram usage:        0 bytes
  7634 ;; Hardware stack levels used:    1
  7635 ;; Hardware stack levels required when called:    5
  7636 ;; This function calls:
  7637 ;;		_delay_ms
  7638 ;;		_write_command
  7639 ;;		_write_data
  7640 ;; This function is called by:
  7641 ;;		_TFT_GreenTab_Initialize
  7642 ;;		_TFT_BlackTab_Initialize
  7643 ;; This function uses a non-reentrant model
  7644 ;;
  7645                           
  7646                           	psect	text32
  7647  0000'                    __ptext32:
  7648                           	opt stack 0
  7649  0000'                    _Rcmd1:
  7650                           	opt stack 23
  7651                           
  7652                           ;ST7735_TFT.c: 283: write_command(0x01);
  7653                           
  7654                           ;incstack = 0
  7655  0000' 0E01               	movlw	1
  7656  0002' EC00' F000'        	call	_write_command
  7657                           
  7658                           ;ST7735_TFT.c: 284: delay_ms(150);
  7659  0006' 0E00               	movlw	0
  7660  0008' 6E17'              	movwf	delay_ms@ms+1,c
  7661  000A' 0E96               	movlw	150
  7662  000C' 6E16'              	movwf	delay_ms@ms,c
  7663  000E' EC00' F000'        	call	_delay_ms	;wreg free
  7664                           
  7665                           ;ST7735_TFT.c: 285: write_command(0x11);
  7666  0012' 0E11               	movlw	17
  7667  0014' EC00' F000'        	call	_write_command
  7668                           
  7669                           ;ST7735_TFT.c: 286: delay_ms(500);
  7670  0018' 0E01               	movlw	1
  7671  001A' 6E17'              	movwf	delay_ms@ms+1,c
  7672  001C' 0EF4               	movlw	244
  7673  001E' 6E16'              	movwf	delay_ms@ms,c
  7674  0020' EC00' F000'        	call	_delay_ms	;wreg free
  7675                           
  7676                           ;ST7735_TFT.c: 287: write_command(0xB1);
  7677  0024' 0EB1               	movlw	177
  7678  0026' EC00' F000'        	call	_write_command
  7679                           
  7680                           ;ST7735_TFT.c: 288: write_data(0x01);
  7681  002A' 0E01               	movlw	1
  7682  002C' EC00' F000'        	call	_write_data
  7683                           
  7684                           ;ST7735_TFT.c: 289: write_data(0x2C);
  7685  0030' 0E2C               	movlw	44
  7686  0032' EC00' F000'        	call	_write_data
  7687                           
  7688                           ;ST7735_TFT.c: 290: write_data(0x2D);
  7689  0036' 0E2D               	movlw	45
  7690  0038' EC00' F000'        	call	_write_data
  7691                           
  7692                           ;ST7735_TFT.c: 291: write_command(0xB2);
  7693  003C' 0EB2               	movlw	178
  7694  003E' EC00' F000'        	call	_write_command
  7695                           
  7696                           ;ST7735_TFT.c: 292: write_data(0x01);
  7697  0042' 0E01               	movlw	1
  7698  0044' EC00' F000'        	call	_write_data
  7699                           
  7700                           ;ST7735_TFT.c: 293: write_data(0x2C);
  7701  0048' 0E2C               	movlw	44
  7702  004A' EC00' F000'        	call	_write_data
  7703                           
  7704                           ;ST7735_TFT.c: 294: write_data(0x2D);
  7705  004E' 0E2D               	movlw	45
  7706  0050' EC00' F000'        	call	_write_data
  7707                           
  7708                           ;ST7735_TFT.c: 295: write_command(0xB3);
  7709  0054' 0EB3               	movlw	179
  7710  0056' EC00' F000'        	call	_write_command
  7711                           
  7712                           ;ST7735_TFT.c: 296: write_data(0x01);
  7713  005A' 0E01               	movlw	1
  7714  005C' EC00' F000'        	call	_write_data
  7715                           
  7716                           ;ST7735_TFT.c: 297: write_data(0x2C);
  7717  0060' 0E2C               	movlw	44
  7718  0062' EC00' F000'        	call	_write_data
  7719                           
  7720                           ;ST7735_TFT.c: 298: write_data(0x2D);
  7721  0066' 0E2D               	movlw	45
  7722  0068' EC00' F000'        	call	_write_data
  7723                           
  7724                           ;ST7735_TFT.c: 299: write_data(0x01);
  7725  006C' 0E01               	movlw	1
  7726  006E' EC00' F000'        	call	_write_data
  7727                           
  7728                           ;ST7735_TFT.c: 300: write_data(0x2C);
  7729  0072' 0E2C               	movlw	44
  7730  0074' EC00' F000'        	call	_write_data
  7731                           
  7732                           ;ST7735_TFT.c: 301: write_data(0x2D);
  7733  0078' 0E2D               	movlw	45
  7734  007A' EC00' F000'        	call	_write_data
  7735                           
  7736                           ;ST7735_TFT.c: 302: write_command(0xB4);
  7737  007E' 0EB4               	movlw	180
  7738  0080' EC00' F000'        	call	_write_command
  7739                           
  7740                           ;ST7735_TFT.c: 303: write_data(0x07);
  7741  0084' 0E07               	movlw	7
  7742  0086' EC00' F000'        	call	_write_data
  7743                           
  7744                           ;ST7735_TFT.c: 304: write_command(0xC0);
  7745  008A' 0EC0               	movlw	192
  7746  008C' EC00' F000'        	call	_write_command
  7747                           
  7748                           ;ST7735_TFT.c: 305: write_data(0xA2);
  7749  0090' 0EA2               	movlw	162
  7750  0092' EC00' F000'        	call	_write_data
  7751                           
  7752                           ;ST7735_TFT.c: 306: write_data(0x02);
  7753  0096' 0E02               	movlw	2
  7754  0098' EC00' F000'        	call	_write_data
  7755                           
  7756                           ;ST7735_TFT.c: 307: write_data(0x84);
  7757  009C' 0E84               	movlw	132
  7758  009E' EC00' F000'        	call	_write_data
  7759                           
  7760                           ;ST7735_TFT.c: 308: write_command(0xC1);
  7761  00A2' 0EC1               	movlw	193
  7762  00A4' EC00' F000'        	call	_write_command
  7763                           
  7764                           ;ST7735_TFT.c: 309: write_data(0xC5);
  7765  00A8' 0EC5               	movlw	197
  7766  00AA' EC00' F000'        	call	_write_data
  7767                           
  7768                           ;ST7735_TFT.c: 310: write_command(0xC2);
  7769  00AE' 0EC2               	movlw	194
  7770  00B0' EC00' F000'        	call	_write_command
  7771                           
  7772                           ;ST7735_TFT.c: 311: write_data(0x0A);
  7773  00B4' 0E0A               	movlw	10
  7774  00B6' EC00' F000'        	call	_write_data
  7775                           
  7776                           ;ST7735_TFT.c: 312: write_data(0x00);
  7777  00BA' 0E00               	movlw	0
  7778  00BC' EC00' F000'        	call	_write_data
  7779                           
  7780                           ;ST7735_TFT.c: 313: write_command(0xC3);
  7781  00C0' 0EC3               	movlw	195
  7782  00C2' EC00' F000'        	call	_write_command
  7783                           
  7784                           ;ST7735_TFT.c: 314: write_data(0x8A);
  7785  00C6' 0E8A               	movlw	138
  7786  00C8' EC00' F000'        	call	_write_data
  7787                           
  7788                           ;ST7735_TFT.c: 315: write_data(0x2A);
  7789  00CC' 0E2A               	movlw	42
  7790  00CE' EC00' F000'        	call	_write_data
  7791                           
  7792                           ;ST7735_TFT.c: 316: write_command(0xC4);
  7793  00D2' 0EC4               	movlw	196
  7794  00D4' EC00' F000'        	call	_write_command
  7795                           
  7796                           ;ST7735_TFT.c: 317: write_data(0x8A);
  7797  00D8' 0E8A               	movlw	138
  7798  00DA' EC00' F000'        	call	_write_data
  7799                           
  7800                           ;ST7735_TFT.c: 318: write_data(0xEE);
  7801  00DE' 0EEE               	movlw	238
  7802  00E0' EC00' F000'        	call	_write_data
  7803                           
  7804                           ;ST7735_TFT.c: 319: write_command(0xC5);
  7805  00E4' 0EC5               	movlw	197
  7806  00E6' EC00' F000'        	call	_write_command
  7807                           
  7808                           ;ST7735_TFT.c: 320: write_data(0x0E);
  7809  00EA' 0E0E               	movlw	14
  7810  00EC' EC00' F000'        	call	_write_data
  7811                           
  7812                           ;ST7735_TFT.c: 321: write_command(0x20);
  7813  00F0' 0E20               	movlw	32
  7814  00F2' EC00' F000'        	call	_write_command
  7815                           
  7816                           ;ST7735_TFT.c: 322: write_command(0x36);
  7817  00F6' 0E36               	movlw	54
  7818  00F8' EC00' F000'        	call	_write_command
  7819                           
  7820                           ;ST7735_TFT.c: 323: write_data(0xC8);
  7821  00FC' 0EC8               	movlw	200
  7822  00FE' EC00' F000'        	call	_write_data
  7823                           
  7824                           ;ST7735_TFT.c: 324: write_command(0x3A);
  7825  0102' 0E3A               	movlw	58
  7826  0104' EC00' F000'        	call	_write_command
  7827                           
  7828                           ;ST7735_TFT.c: 325: write_data(0x05);
  7829  0108' 0E05               	movlw	5
  7830  010A' EC00' F000'        	call	_write_data
  7831  010E' 0012               	return		;funcret
  7832  0110'                    __end_of_Rcmd1:
  7833                           	opt stack 0
  7834                           tblptru	equ	0xFF8
  7835                           tblptrh	equ	0xFF7
  7836                           tblptrl	equ	0xFF6
  7837                           tablat	equ	0xFF5
  7838                           prodh	equ	0xFF4
  7839                           prodl	equ	0xFF3
  7840                           intcon	equ	0xFF2
  7841                           intcon2	equ	0xFF1
  7842                           postinc0	equ	0xFEE
  7843                           wreg	equ	0xFE8
  7844                           postdec1	equ	0xFE5
  7845                           fsr1l	equ	0xFE1
  7846                           indf2	equ	0xFDF
  7847                           postinc2	equ	0xFDE
  7848                           postdec2	equ	0xFDD
  7849                           fsr2h	equ	0xFDA
  7850                           fsr2l	equ	0xFD9
  7851                           status	equ	0xFD8
  7852                           
  7853 ;; *************** function _write_data *****************
  7854 ;; Defined at:
  7855 ;;		line 209 in file "ST7735_TFT.c"
  7856 ;; Parameters:    Size  Location     Type
  7857 ;;  data_           1    wreg     unsigned char 
  7858 ;; Auto vars:     Size  Location     Type
  7859 ;;  data_           1   18[COMRAM] unsigned char 
  7860 ;; Return value:  Size  Location     Type
  7861 ;;		None               void
  7862 ;; Registers used:
  7863 ;;		wreg, status,2, cstack
  7864 ;; Tracked objects:
  7865 ;;		On entry : 0/0
  7866 ;;		On exit  : 0/0
  7867 ;;		Unchanged: 0/0
  7868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7869 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7870 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7871 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7872 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7873 ;;Total ram usage:        1 bytes
  7874 ;; Hardware stack levels used:    1
  7875 ;; Hardware stack levels required when called:    4
  7876 ;; This function calls:
  7877 ;;		_spiwrite
  7878 ;; This function is called by:
  7879 ;;		_Rcmd1
  7880 ;;		_Rcmd2red
  7881 ;;		_Rcmd3
  7882 ;;		_setAddrWindow
  7883 ;;		_drawPixel
  7884 ;;		_TFT_GreenTab_Initialize
  7885 ;;		_Bcmd
  7886 ;;		_setScrollDefinition
  7887 ;;		_Rcmd2green
  7888 ;;		_VerticalScroll
  7889 ;; This function uses a non-reentrant model
  7890 ;;
  7891                           
  7892                           	psect	text33
  7893  0000'                    __ptext33:
  7894                           	opt stack 0
  7895  0000'                    _write_data:
  7896                           	opt stack 20
  7897                           
  7898                           ;incstack = 0
  7899                           ;write_data@data_ stored from wreg
  7900  0000' 6E12'              	movwf	write_data@data_,c
  7901                           
  7902                           ;ST7735_TFT.c: 211: PORTDbits.RD1 = 0;
  7903  0002' 9283               	bcf	3971,1,c	;volatile
  7904                           
  7905                           ;ST7735_TFT.c: 212: PORTDbits.RD0 = 1;
  7906  0004' 8083               	bsf	3971,0,c	;volatile
  7907                           
  7908                           ;ST7735_TFT.c: 213: spiwrite(data_);
  7909  0006' 5012'              	movf	write_data@data_,w,c
  7910  0008' EC00' F000'        	call	_spiwrite
  7911                           
  7912                           ;ST7735_TFT.c: 214: PORTDbits.RD1 = 1;
  7913  000C' 8283               	bsf	3971,1,c	;volatile
  7914  000E' 0012               	return		;funcret
  7915  0010'                    __end_of_write_data:
  7916                           	opt stack 0
  7917                           tblptru	equ	0xFF8
  7918                           tblptrh	equ	0xFF7
  7919                           tblptrl	equ	0xFF6
  7920                           tablat	equ	0xFF5
  7921                           prodh	equ	0xFF4
  7922                           prodl	equ	0xFF3
  7923                           intcon	equ	0xFF2
  7924                           intcon2	equ	0xFF1
  7925                           postinc0	equ	0xFEE
  7926                           wreg	equ	0xFE8
  7927                           postdec1	equ	0xFE5
  7928                           fsr1l	equ	0xFE1
  7929                           indf2	equ	0xFDF
  7930                           postinc2	equ	0xFDE
  7931                           postdec2	equ	0xFDD
  7932                           fsr2h	equ	0xFDA
  7933                           fsr2l	equ	0xFD9
  7934                           status	equ	0xFD8
  7935                           
  7936 ;; *************** function _write_command *****************
  7937 ;; Defined at:
  7938 ;;		line 198 in file "ST7735_TFT.c"
  7939 ;; Parameters:    Size  Location     Type
  7940 ;;  cmd_            1    wreg     unsigned char 
  7941 ;; Auto vars:     Size  Location     Type
  7942 ;;  cmd_            1   18[COMRAM] unsigned char 
  7943 ;; Return value:  Size  Location     Type
  7944 ;;		None               void
  7945 ;; Registers used:
  7946 ;;		wreg, status,2, cstack
  7947 ;; Tracked objects:
  7948 ;;		On entry : 0/0
  7949 ;;		On exit  : 0/0
  7950 ;;		Unchanged: 0/0
  7951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7952 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7953 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7954 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7955 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7956 ;;Total ram usage:        1 bytes
  7957 ;; Hardware stack levels used:    1
  7958 ;; Hardware stack levels required when called:    4
  7959 ;; This function calls:
  7960 ;;		_spiwrite
  7961 ;; This function is called by:
  7962 ;;		_Rcmd1
  7963 ;;		_Rcmd2red
  7964 ;;		_Rcmd3
  7965 ;;		_setAddrWindow
  7966 ;;		_TFT_GreenTab_Initialize
  7967 ;;		_Bcmd
  7968 ;;		_setScrollDefinition
  7969 ;;		_Rcmd2green
  7970 ;;		_VerticalScroll
  7971 ;; This function uses a non-reentrant model
  7972 ;;
  7973                           
  7974                           	psect	text34
  7975  0000'                    __ptext34:
  7976                           	opt stack 0
  7977  0000'                    _write_command:
  7978                           	opt stack 20
  7979                           
  7980                           ;incstack = 0
  7981                           ;write_command@cmd_ stored from wreg
  7982  0000' 6E12'              	movwf	write_command@cmd_,c
  7983                           
  7984                           ;ST7735_TFT.c: 200: PORTDbits.RD1 = 0;
  7985  0002' 9283               	bcf	3971,1,c	;volatile
  7986                           
  7987                           ;ST7735_TFT.c: 202: PORTDbits.RD0 = 0;
  7988  0004' 9083               	bcf	3971,0,c	;volatile
  7989                           
  7990                           ;ST7735_TFT.c: 203: spiwrite(cmd_);
  7991  0006' 5012'              	movf	write_command@cmd_,w,c
  7992  0008' EC00' F000'        	call	_spiwrite
  7993                           
  7994                           ;ST7735_TFT.c: 205: PORTDbits.RD1 = 1;
  7995  000C' 8283               	bsf	3971,1,c	;volatile
  7996  000E' 0012               	return		;funcret
  7997  0010'                    __end_of_write_command:
  7998                           	opt stack 0
  7999                           tblptru	equ	0xFF8
  8000                           tblptrh	equ	0xFF7
  8001                           tblptrl	equ	0xFF6
  8002                           tablat	equ	0xFF5
  8003                           prodh	equ	0xFF4
  8004                           prodl	equ	0xFF3
  8005                           intcon	equ	0xFF2
  8006                           intcon2	equ	0xFF1
  8007                           postinc0	equ	0xFEE
  8008                           wreg	equ	0xFE8
  8009                           postdec1	equ	0xFE5
  8010                           fsr1l	equ	0xFE1
  8011                           indf2	equ	0xFDF
  8012                           postinc2	equ	0xFDE
  8013                           postdec2	equ	0xFDD
  8014                           fsr2h	equ	0xFDA
  8015                           fsr2l	equ	0xFD9
  8016                           status	equ	0xFD8
  8017                           
  8018 ;; *************** function _spiwrite *****************
  8019 ;; Defined at:
  8020 ;;		line 189 in file "ST7735_TFT.c"
  8021 ;; Parameters:    Size  Location     Type
  8022 ;;  spidata         1    wreg     unsigned char 
  8023 ;; Auto vars:     Size  Location     Type
  8024 ;;  spidata         1   17[COMRAM] unsigned char 
  8025 ;;  x               1   16[COMRAM] unsigned char 
  8026 ;; Return value:  Size  Location     Type
  8027 ;;		None               void
  8028 ;; Registers used:
  8029 ;;		wreg
  8030 ;; Tracked objects:
  8031 ;;		On entry : 0/0
  8032 ;;		On exit  : 0/0
  8033 ;;		Unchanged: 0/0
  8034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8035 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8036 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8037 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8038 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8039 ;;Total ram usage:        2 bytes
  8040 ;; Hardware stack levels used:    1
  8041 ;; Hardware stack levels required when called:    3
  8042 ;; This function calls:
  8043 ;;		Nothing
  8044 ;; This function is called by:
  8045 ;;		_write_command
  8046 ;;		_write_data
  8047 ;;		_drawFastVLine
  8048 ;;		_fillRectangle
  8049 ;;		_drawFastHLine
  8050 ;; This function uses a non-reentrant model
  8051 ;;
  8052                           
  8053                           	psect	text35
  8054  0000'                    __ptext35:
  8055                           	opt stack 0
  8056  0000'                    _spiwrite:
  8057                           	opt stack 22
  8058                           
  8059                           ;incstack = 0
  8060                           ;spiwrite@spidata stored from wreg
  8061  0000' 6E11'              	movwf	spiwrite@spidata,c
  8062                           
  8063                           ;ST7735_TFT.c: 191: char x;
  8064                           ;ST7735_TFT.c: 192: PIR1bits.SSPIF = 0;
  8065  0002' 969E               	bcf	3998,3,c	;volatile
  8066                           
  8067                           ;ST7735_TFT.c: 193: x = SSPBUF;
  8068  0004' CFC9 F010'         	movff	4041,spiwrite@x	;volatile
  8069                           
  8070                           ;ST7735_TFT.c: 194: SSPBUF = spidata;
  8071  0008' C011' FFC9         	movff	spiwrite@spidata,4041	;volatile
  8072                           
  8073                           ;ST7735_TFT.c: 195: while (!SSPSTATbits.BF);
  8074  000C' D000               	goto	l287
  8075  000E'                    l287:
  8076  000E' A0C7               	btfss	4039,0,c	;volatile
  8077  0010' D7FE               	goto	l287
  8078  0012' 0012               	return		;funcret
  8079  0014'                    __end_of_spiwrite:
  8080                           	opt stack 0
  8081                           tblptru	equ	0xFF8
  8082                           tblptrh	equ	0xFF7
  8083                           tblptrl	equ	0xFF6
  8084                           tablat	equ	0xFF5
  8085                           prodh	equ	0xFF4
  8086                           prodl	equ	0xFF3
  8087                           intcon	equ	0xFF2
  8088                           intcon2	equ	0xFF1
  8089                           postinc0	equ	0xFEE
  8090                           wreg	equ	0xFE8
  8091                           postdec1	equ	0xFE5
  8092                           fsr1l	equ	0xFE1
  8093                           indf2	equ	0xFDF
  8094                           postinc2	equ	0xFDE
  8095                           postdec2	equ	0xFDD
  8096                           fsr2h	equ	0xFDA
  8097                           fsr2l	equ	0xFD9
  8098                           status	equ	0xFD8
  8099                           
  8100 ;; *************** function _LCD_Reset *****************
  8101 ;; Defined at:
  8102 ;;		line 217 in file "ST7735_TFT.c"
  8103 ;; Parameters:    Size  Location     Type
  8104 ;;		None
  8105 ;; Auto vars:     Size  Location     Type
  8106 ;;		None
  8107 ;; Return value:  Size  Location     Type
  8108 ;;		None               void
  8109 ;; Registers used:
  8110 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8111 ;; Tracked objects:
  8112 ;;		On entry : 0/0
  8113 ;;		On exit  : 0/0
  8114 ;;		Unchanged: 0/0
  8115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8116 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8117 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8118 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8119 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8120 ;;Total ram usage:        0 bytes
  8121 ;; Hardware stack levels used:    1
  8122 ;; Hardware stack levels required when called:    5
  8123 ;; This function calls:
  8124 ;;		_delay_ms
  8125 ;; This function is called by:
  8126 ;;		_Initialize_Screen
  8127 ;; This function uses a non-reentrant model
  8128 ;;
  8129                           
  8130                           	psect	text36
  8131  0000'                    __ptext36:
  8132                           	opt stack 0
  8133  0000'                    _LCD_Reset:
  8134                           	opt stack 24
  8135                           
  8136                           ;ST7735_TFT.c: 219: PORTDbits.RD2 = 0;
  8137                           
  8138                           ;incstack = 0
  8139  0000' 9483               	bcf	3971,2,c	;volatile
  8140                           
  8141                           ;ST7735_TFT.c: 220: delay_ms(100);
  8142  0002' 0E00               	movlw	0
  8143  0004' 6E17'              	movwf	delay_ms@ms+1,c
  8144  0006' 0E64               	movlw	100
  8145  0008' 6E16'              	movwf	delay_ms@ms,c
  8146  000A' EC00' F000'        	call	_delay_ms	;wreg free
  8147                           
  8148                           ;ST7735_TFT.c: 221: PORTDbits.RD2 = 1;
  8149  000E' 8483               	bsf	3971,2,c	;volatile
  8150  0010' 0012               	return		;funcret
  8151  0012'                    __end_of_LCD_Reset:
  8152                           	opt stack 0
  8153                           tblptru	equ	0xFF8
  8154                           tblptrh	equ	0xFF7
  8155                           tblptrl	equ	0xFF6
  8156                           tablat	equ	0xFF5
  8157                           prodh	equ	0xFF4
  8158                           prodl	equ	0xFF3
  8159                           intcon	equ	0xFF2
  8160                           intcon2	equ	0xFF1
  8161                           postinc0	equ	0xFEE
  8162                           wreg	equ	0xFE8
  8163                           postdec1	equ	0xFE5
  8164                           fsr1l	equ	0xFE1
  8165                           indf2	equ	0xFDF
  8166                           postinc2	equ	0xFDE
  8167                           postdec2	equ	0xFDD
  8168                           fsr2h	equ	0xFDA
  8169                           fsr2l	equ	0xFD9
  8170                           status	equ	0xFD8
  8171                           
  8172 ;; *************** function _delay_ms *****************
  8173 ;; Defined at:
  8174 ;;		line 64 in file "ST7735_TFT.c"
  8175 ;; Parameters:    Size  Location     Type
  8176 ;;  ms              2   22[COMRAM] int 
  8177 ;; Auto vars:     Size  Location     Type
  8178 ;;  count           2   26[COMRAM] int 
  8179 ;; Return value:  Size  Location     Type
  8180 ;;		None               void
  8181 ;; Registers used:
  8182 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8183 ;; Tracked objects:
  8184 ;;		On entry : 0/0
  8185 ;;		On exit  : 0/0
  8186 ;;		Unchanged: 0/0
  8187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8188 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8189 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8190 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8191 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8192 ;;Total ram usage:        6 bytes
  8193 ;; Hardware stack levels used:    1
  8194 ;; Hardware stack levels required when called:    4
  8195 ;; This function calls:
  8196 ;;		___wmul
  8197 ;; This function is called by:
  8198 ;;		_LCD_Reset
  8199 ;;		_Rcmd1
  8200 ;;		_Rcmd3
  8201 ;;		_Bcmd
  8202 ;; This function uses a non-reentrant model
  8203 ;;
  8204                           
  8205                           	psect	text37
  8206  0000'                    __ptext37:
  8207                           	opt stack 0
  8208  0000'                    _delay_ms:
  8209                           	opt stack 23
  8210                           
  8211                           ;ST7735_TFT.c: 70: int count;
  8212                           ;ST7735_TFT.c: 71: count = 8000000/4000/16 * ms;
  8213                           
  8214                           ;incstack = 0
  8215  0000' C016' F010'        	movff	delay_ms@ms,___wmul@multiplier
  8216  0004' C017' F011'        	movff	delay_ms@ms+1,___wmul@multiplier+1
  8217  0008' 0E00               	movlw	0
  8218  000A' 6E13'              	movwf	___wmul@multiplicand+1,c
  8219  000C' 0E7D               	movlw	125
  8220  000E' 6E12'              	movwf	___wmul@multiplicand,c
  8221  0010' EC00' F000'        	call	___wmul	;wreg free
  8222  0014' C010' F01A'        	movff	?___wmul,delay_ms@count
  8223  0018' C011' F01B'        	movff	?___wmul+1,delay_ms@count+1
  8224                           
  8225                           ;ST7735_TFT.c: 72: count = (0xffff - count);
  8226  001C' C01A' F018'        	movff	delay_ms@count,??_delay_ms
  8227  0020' C01B' F019'        	movff	delay_ms@count+1,??_delay_ms+1
  8228  0024' 1E18'              	comf	??_delay_ms,f,c
  8229  0026' 1E19'              	comf	??_delay_ms+1,f,c
  8230  0028' 4A18'              	infsnz	??_delay_ms,f,c
  8231  002A' 2A19'              	incf	??_delay_ms+1,f,c
  8232  002C' 0EFF               	movlw	255
  8233  002E' 2418'              	addwf	??_delay_ms,w,c
  8234  0030' 6E1A'              	movwf	delay_ms@count,c
  8235  0032' 0EFF               	movlw	255
  8236  0034' 2019'              	addwfc	??_delay_ms+1,w,c
  8237  0036' 6E1B'              	movwf	delay_ms@count+1,c
  8238                           
  8239                           ;ST7735_TFT.c: 74: T0CON = 0x03;
  8240  0038' 0E03               	movlw	3
  8241  003A' 6ED5               	movwf	4053,c	;volatile
  8242                           
  8243                           ;ST7735_TFT.c: 76: TMR0L = count & 0x00ff;
  8244  003C' C01A' FFD6         	movff	delay_ms@count,4054	;volatile
  8245                           
  8246                           ;ST7735_TFT.c: 77: TMR0H = count >> 8;
  8247  0040' 501B'              	movf	delay_ms@count+1,w,c
  8248  0042' 6ED7               	movwf	4055,c	;volatile
  8249                           
  8250                           ;ST7735_TFT.c: 79: INTCONbits.TMR0IF = 0;
  8251  0044' 94F2               	bcf	intcon,2,c	;volatile
  8252                           
  8253                           ;ST7735_TFT.c: 80: T0CONbits.TMR0ON = 1;
  8254  0046' 8ED5               	bsf	4053,7,c	;volatile
  8255                           
  8256                           ;ST7735_TFT.c: 82: while (INTCONbits.TMR0IF == 0);
  8257  0048' D000               	goto	l277
  8258  004A'                    l277:
  8259  004A' A4F2               	btfss	intcon,2,c	;volatile
  8260  004C' D7FE               	goto	l277
  8261                           
  8262                           ;ST7735_TFT.c: 83: T0CONbits.TMR0ON = 0;
  8263  004E' 9ED5               	bcf	4053,7,c	;volatile
  8264  0050' 0012               	return		;funcret
  8265  0052'                    __end_of_delay_ms:
  8266                           	opt stack 0
  8267                           tblptru	equ	0xFF8
  8268                           tblptrh	equ	0xFF7
  8269                           tblptrl	equ	0xFF6
  8270                           tablat	equ	0xFF5
  8271                           prodh	equ	0xFF4
  8272                           prodl	equ	0xFF3
  8273                           intcon	equ	0xFF2
  8274                           intcon2	equ	0xFF1
  8275                           postinc0	equ	0xFEE
  8276                           wreg	equ	0xFE8
  8277                           postdec1	equ	0xFE5
  8278                           fsr1l	equ	0xFE1
  8279                           indf2	equ	0xFDF
  8280                           postinc2	equ	0xFDE
  8281                           postdec2	equ	0xFDD
  8282                           fsr2h	equ	0xFDA
  8283                           fsr2l	equ	0xFD9
  8284                           status	equ	0xFD8
  8285                           
  8286 ;; *************** function ___wmul *****************
  8287 ;; Defined at:
  8288 ;;		line 15 in file "E:\XC8\sources\common\Umul16.c"
  8289 ;; Parameters:    Size  Location     Type
  8290 ;;  multiplier      2   16[COMRAM] unsigned int 
  8291 ;;  multiplicand    2   18[COMRAM] unsigned int 
  8292 ;; Auto vars:     Size  Location     Type
  8293 ;;  product         2   20[COMRAM] unsigned int 
  8294 ;; Return value:  Size  Location     Type
  8295 ;;                  2   16[COMRAM] unsigned int 
  8296 ;; Registers used:
  8297 ;;		wreg, status,2, status,0, prodl, prodh
  8298 ;; Tracked objects:
  8299 ;;		On entry : 0/0
  8300 ;;		On exit  : 0/0
  8301 ;;		Unchanged: 0/0
  8302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8303 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8304 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8305 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8306 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8307 ;;Total ram usage:        6 bytes
  8308 ;; Hardware stack levels used:    1
  8309 ;; Hardware stack levels required when called:    3
  8310 ;; This function calls:
  8311 ;;		Nothing
  8312 ;; This function is called by:
  8313 ;;		_delay_ms
  8314 ;;		_drawChar
  8315 ;;		_get_RPM
  8316 ;;		_main
  8317 ;;		_printf
  8318 ;; This function uses a non-reentrant model
  8319 ;;
  8320                           
  8321                           	psect	text38
  8322  0000'                    __ptext38:
  8323                           	opt stack 0
  8324  0000'                    ___wmul:
  8325                           	opt stack 26
  8326                           
  8327                           ;incstack = 0
  8328  0000' 5010'              	movf	___wmul@multiplier,w,c
  8329  0002' 0212'              	mulwf	___wmul@multiplicand,c
  8330  0004' CFF3 F014'         	movff	prodl,___wmul@product
  8331  0008' CFF4 F015'         	movff	prodh,___wmul@product+1
  8332  000C' 5010'              	movf	___wmul@multiplier,w,c
  8333  000E' 0213'              	mulwf	___wmul@multiplicand+1,c
  8334  0010' 50F3               	movf	prodl,w,c
  8335  0012' 2615'              	addwf	___wmul@product+1,f,c
  8336  0014' 5011'              	movf	___wmul@multiplier+1,w,c
  8337  0016' 0212'              	mulwf	___wmul@multiplicand,c
  8338  0018' 50F3               	movf	prodl,w,c
  8339  001A' 2615'              	addwf	___wmul@product+1,f,c
  8340  001C' C014' F010'        	movff	___wmul@product,?___wmul
  8341  0020' C015' F011'        	movff	___wmul@product+1,?___wmul+1
  8342  0024' D000               	goto	l749
  8343  0026'                    l749:
  8344  0026' 0012               	return		;funcret
  8345  0028'                    __end_of___wmul:
  8346                           	opt stack 0
  8347                           tblptru	equ	0xFF8
  8348                           tblptrh	equ	0xFF7
  8349                           tblptrl	equ	0xFF6
  8350                           tablat	equ	0xFF5
  8351                           prodh	equ	0xFF4
  8352                           prodl	equ	0xFF3
  8353                           intcon	equ	0xFF2
  8354                           intcon2	equ	0xFF1
  8355                           postinc0	equ	0xFEE
  8356                           wreg	equ	0xFE8
  8357                           postdec1	equ	0xFE5
  8358                           fsr1l	equ	0xFE1
  8359                           indf2	equ	0xFDF
  8360                           postinc2	equ	0xFDE
  8361                           postdec2	equ	0xFDD
  8362                           fsr2h	equ	0xFDA
  8363                           fsr2l	equ	0xFD9
  8364                           status	equ	0xFD8
  8365                           
  8366 ;; *************** function _Do_Init *****************
  8367 ;; Defined at:
  8368 ;;		line 96 in file "Lab11pAnew.c"
  8369 ;; Parameters:    Size  Location     Type
  8370 ;;		None
  8371 ;; Auto vars:     Size  Location     Type
  8372 ;;		None
  8373 ;; Return value:  Size  Location     Type
  8374 ;;		None               void
  8375 ;; Registers used:
  8376 ;;		wreg, status,2, status,0, cstack
  8377 ;; Tracked objects:
  8378 ;;		On entry : 0/0
  8379 ;;		On exit  : 0/0
  8380 ;;		Unchanged: 0/0
  8381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8382 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8383 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8384 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8385 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8386 ;;Total ram usage:        0 bytes
  8387 ;; Hardware stack levels used:    1
  8388 ;; Hardware stack levels required when called:    7
  8389 ;; This function calls:
  8390 ;;		_DS1621_Init
  8391 ;;		_I2C_Init
  8392 ;;		_Turn_Off_Fan
  8393 ;;		_init_INTERRUPT
  8394 ;;		_init_UART
  8395 ;; This function is called by:
  8396 ;;		_main
  8397 ;; This function uses a non-reentrant model
  8398 ;;
  8399                           
  8400                           	psect	text39
  8401  0000'                    __ptext39:
  8402                           	opt stack 0
  8403  0000'                    _Do_Init:
  8404                           	opt stack 23
  8405                           
  8406                           ;Lab11pAnew.c: 98: init_UART();
  8407                           
  8408                           ;incstack = 0
  8409  0000' EC00' F000'        	call	_init_UART	;wreg free
  8410                           
  8411                           ;Lab11pAnew.c: 99: OSCCON=0x70;
  8412  0004' 0E70               	movlw	112
  8413  0006' 6ED3               	movwf	4051,c	;volatile
  8414                           
  8415                           ;Lab11pAnew.c: 101: ADCON1=0x0F;
  8416  0008' 0E0F               	movlw	15
  8417  000A' 6EC1               	movwf	4033,c	;volatile
  8418                           
  8419                           ;Lab11pAnew.c: 102: TRISA = 0x00;
  8420  000C' 0E00               	movlw	0
  8421  000E' 6E92               	movwf	3986,c	;volatile
  8422                           
  8423                           ;Lab11pAnew.c: 103: TRISB = 0x01;
  8424  0010' 0E01               	movlw	1
  8425  0012' 6E93               	movwf	3987,c	;volatile
  8426                           
  8427                           ;Lab11pAnew.c: 104: TRISC = 0x01;
  8428  0014' 0E01               	movlw	1
  8429  0016' 6E94               	movwf	3988,c	;volatile
  8430                           
  8431                           ;Lab11pAnew.c: 105: TRISD = 0x00;
  8432  0018' 0E00               	movlw	0
  8433  001A' 6E95               	movwf	3989,c	;volatile
  8434                           
  8435                           ;Lab11pAnew.c: 107: FAN=0;
  8436  001C' 0E00               	movlw	0
  8437  001E' 6E0E'              	movwf	_FAN,c
  8438                           
  8439                           ;Lab11pAnew.c: 108: RBPU=0;
  8440  0020' 9EF1               	bcf	intcon2,7,c	;volatile
  8441                           
  8442                           ;Lab11pAnew.c: 109: TMR3L = 0x00;
  8443  0022' 0E00               	movlw	0
  8444  0024' 6EB2               	movwf	4018,c	;volatile
  8445                           
  8446                           ;Lab11pAnew.c: 110: T3CON = 0x03;
  8447  0026' 0E03               	movlw	3
  8448  0028' 6EB1               	movwf	4017,c	;volatile
  8449                           
  8450                           ;Lab11pAnew.c: 111: I2C_Init(100000);
  8451  002A' 0EA0               	movlw	160
  8452  002C' 6E10'              	movwf	I2C_Init@c,c
  8453  002E' 0E86               	movlw	134
  8454  0030' 6E11'              	movwf	I2C_Init@c+1,c
  8455  0032' 0E01               	movlw	1
  8456  0034' 6E12'              	movwf	I2C_Init@c+2,c
  8457  0036' 0E00               	movlw	0
  8458  0038' 6E13'              	movwf	I2C_Init@c+3,c
  8459  003A' EC00' F000'        	call	_I2C_Init	;wreg free
  8460                           
  8461                           ;Lab11pAnew.c: 113: DS1621_Init();
  8462  003E' EC00' F000'        	call	_DS1621_Init	;wreg free
  8463                           
  8464                           ;Lab11pAnew.c: 114: init_INTERRUPT();
  8465  0042' EC00' F000'        	call	_init_INTERRUPT	;wreg free
  8466                           
  8467                           ;Lab11pAnew.c: 115: Turn_Off_Fan();
  8468  0046' EC00' F000'        	call	_Turn_Off_Fan	;wreg free
  8469  004A' 0012               	return		;funcret
  8470  004C'                    __end_of_Do_Init:
  8471                           	opt stack 0
  8472                           tblptru	equ	0xFF8
  8473                           tblptrh	equ	0xFF7
  8474                           tblptrl	equ	0xFF6
  8475                           tablat	equ	0xFF5
  8476                           prodh	equ	0xFF4
  8477                           prodl	equ	0xFF3
  8478                           intcon	equ	0xFF2
  8479                           intcon2	equ	0xFF1
  8480                           postinc0	equ	0xFEE
  8481                           wreg	equ	0xFE8
  8482                           postdec1	equ	0xFE5
  8483                           fsr1l	equ	0xFE1
  8484                           indf2	equ	0xFDF
  8485                           postinc2	equ	0xFDE
  8486                           postdec2	equ	0xFDD
  8487                           fsr2h	equ	0xFDA
  8488                           fsr2l	equ	0xFD9
  8489                           status	equ	0xFD8
  8490                           
  8491 ;; *************** function _init_UART *****************
  8492 ;; Defined at:
  8493 ;;		line 87 in file "Lab11pAnew.c"
  8494 ;; Parameters:    Size  Location     Type
  8495 ;;		None
  8496 ;; Auto vars:     Size  Location     Type
  8497 ;;		None
  8498 ;; Return value:  Size  Location     Type
  8499 ;;		None               void
  8500 ;; Registers used:
  8501 ;;		wreg, status,2, cstack
  8502 ;; Tracked objects:
  8503 ;;		On entry : 0/0
  8504 ;;		On exit  : 0/0
  8505 ;;		Unchanged: 0/0
  8506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8507 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8508 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8509 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8510 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8511 ;;Total ram usage:        0 bytes
  8512 ;; Hardware stack levels used:    1
  8513 ;; Hardware stack levels required when called:    4
  8514 ;; This function calls:
  8515 ;;		_OpenUSART
  8516 ;; This function is called by:
  8517 ;;		_Do_Init
  8518 ;; This function uses a non-reentrant model
  8519 ;;
  8520                           
  8521                           	psect	text40
  8522  0000'                    __ptext40:
  8523                           	opt stack 0
  8524  0000'                    _init_UART:
  8525                           	opt stack 25
  8526                           
  8527                           ;Lab11pAnew.c: 89: OpenUSART (0b01111111 & 0b10111111 &
  8528                           ;Lab11pAnew.c: 90: 0b11111110 & 0b11111101 & 0b11111111 &
  8529                           ;Lab11pAnew.c: 91: 0b11111111, 25);
  8530                           
  8531                           ;incstack = 0
  8532  0000' 0E00               	movlw	0
  8533  0002' 6E11'              	movwf	OpenUSART@spbrg+1,c
  8534  0004' 0E19               	movlw	25
  8535  0006' 6E10'              	movwf	OpenUSART@spbrg,c
  8536  0008' 0E3C               	movlw	60
  8537  000A' EC00' F000'        	call	_OpenUSART
  8538                           
  8539                           ;Lab11pAnew.c: 92: OSCCON = 0x70;
  8540  000E' 0E70               	movlw	112
  8541  0010' 6ED3               	movwf	4051,c	;volatile
  8542  0012' 0012               	return		;funcret
  8543  0014'                    __end_of_init_UART:
  8544                           	opt stack 0
  8545                           tblptru	equ	0xFF8
  8546                           tblptrh	equ	0xFF7
  8547                           tblptrl	equ	0xFF6
  8548                           tablat	equ	0xFF5
  8549                           prodh	equ	0xFF4
  8550                           prodl	equ	0xFF3
  8551                           intcon	equ	0xFF2
  8552                           intcon2	equ	0xFF1
  8553                           postinc0	equ	0xFEE
  8554                           wreg	equ	0xFE8
  8555                           postdec1	equ	0xFE5
  8556                           fsr1l	equ	0xFE1
  8557                           indf2	equ	0xFDF
  8558                           postinc2	equ	0xFDE
  8559                           postdec2	equ	0xFDD
  8560                           fsr2h	equ	0xFDA
  8561                           fsr2l	equ	0xFD9
  8562                           status	equ	0xFD8
  8563                           
  8564 ;; *************** function _OpenUSART *****************
  8565 ;; Defined at:
  8566 ;;		line 73 in file "E:\XC8\sources\pic18\plib\USART\uopen.c"
  8567 ;; Parameters:    Size  Location     Type
  8568 ;;  config          1    wreg     unsigned char 
  8569 ;;  spbrg           2   16[COMRAM] unsigned int 
  8570 ;; Auto vars:     Size  Location     Type
  8571 ;;  config          1   18[COMRAM] unsigned char 
  8572 ;; Return value:  Size  Location     Type
  8573 ;;		None               void
  8574 ;; Registers used:
  8575 ;;		wreg, status,2
  8576 ;; Tracked objects:
  8577 ;;		On entry : 0/0
  8578 ;;		On exit  : 0/0
  8579 ;;		Unchanged: 0/0
  8580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8581 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8582 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8583 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8584 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8585 ;;Total ram usage:        3 bytes
  8586 ;; Hardware stack levels used:    1
  8587 ;; Hardware stack levels required when called:    3
  8588 ;; This function calls:
  8589 ;;		Nothing
  8590 ;; This function is called by:
  8591 ;;		_init_UART
  8592 ;; This function uses a non-reentrant model
  8593 ;;
  8594                           
  8595                           	psect	text41
  8596  0000'                    __ptext41:
  8597                           	opt stack 0
  8598  0000'                    _OpenUSART:
  8599                           	opt stack 25
  8600                           
  8601                           ;incstack = 0
  8602                           ;OpenUSART@config stored from wreg
  8603  0000' 6E12'              	movwf	OpenUSART@config,c
  8604  0002' 0E00               	movlw	0
  8605  0004' 6EAC               	movwf	4012,c	;volatile
  8606  0006' 0E00               	movlw	0
  8607  0008' 6EAB               	movwf	4011,c	;volatile
  8608  000A' A012'              	btfss	OpenUSART@config,0,c
  8609  000C' D002               	goto	l5437
  8610  000E' 88AC               	bsf	4012,4,c	;volatile
  8611  0010' D000               	goto	l5437
  8612  0012'                    l5437:
  8613  0012' A212'              	btfss	OpenUSART@config,1,c
  8614  0014' D003               	goto	l5441
  8615  0016' 8CAC               	bsf	4012,6,c	;volatile
  8616  0018' 8CAB               	bsf	4011,6,c	;volatile
  8617  001A' D000               	goto	l5441
  8618  001C'                    l5441:
  8619  001C' A412'              	btfss	OpenUSART@config,2,c
  8620  001E' D002               	goto	l5445
  8621  0020' 8EAC               	bsf	4012,7,c	;volatile
  8622  0022' D000               	goto	l5445
  8623  0024'                    l5445:
  8624  0024' A612'              	btfss	OpenUSART@config,3,c
  8625  0026' D002               	goto	l737
  8626  0028' 88AB               	bsf	4011,4,c	;volatile
  8627  002A' D002               	goto	l5449
  8628  002C'                    l737:
  8629  002C' 8AAB               	bsf	4011,5,c	;volatile
  8630  002E' D000               	goto	l5449
  8631  0030'                    l5449:
  8632  0030' B812'              	btfsc	OpenUSART@config,4,c
  8633  0032' 84AC               	bsf	4012,2,c	;volatile
  8634  0034' 989E               	bcf	3998,4,c	;volatile
  8635  0036' AA12'              	btfss	OpenUSART@config,5,c
  8636  0038' D002               	goto	l5457
  8637  003A' 86AB               	bsf	4011,3,c	;volatile
  8638  003C' D000               	goto	l5457
  8639  003E'                    l5457:
  8640  003E' AC12'              	btfss	OpenUSART@config,6,c
  8641  0040' D002               	goto	l741
  8642  0042' 8A9D               	bsf	3997,5,c	;volatile
  8643  0044' D001               	goto	l742
  8644  0046'                    l741:
  8645  0046' 9A9D               	bcf	3997,5,c	;volatile
  8646  0048'                    l742:
  8647  0048' 9A9E               	bcf	3998,5,c	;volatile
  8648  004A' AE12'              	btfss	OpenUSART@config,7,c
  8649  004C' D002               	goto	l743
  8650  004E' 889D               	bsf	3997,4,c	;volatile
  8651  0050' D001               	goto	l744
  8652  0052'                    l743:
  8653  0052' 989D               	bcf	3997,4,c	;volatile
  8654  0054'                    l744:
  8655  0054' C010' FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  8656  0058' 5011'              	movf	OpenUSART@spbrg+1,w,c
  8657  005A' 6EB0               	movwf	4016,c	;volatile
  8658  005C' 8AAC               	bsf	4012,5,c	;volatile
  8659  005E' 8EAB               	bsf	4011,7,c	;volatile
  8660  0060' 9C94               	bcf	3988,6,c	;volatile
  8661  0062' 8E94               	bsf	3988,7,c	;volatile
  8662  0064' B8AC               	btfsc	4012,4,c	;volatile
  8663  0066' BEAC               	btfsc	4012,7,c	;volatile
  8664  0068' D002               	goto	l746
  8665  006A' 8C94               	bsf	3988,6,c	;volatile
  8666  006C' D000               	goto	l746
  8667  006E'                    l746:
  8668  006E' 0012               	return		;funcret
  8669  0070'                    __end_of_OpenUSART:
  8670                           	opt stack 0
  8671                           tblptru	equ	0xFF8
  8672                           tblptrh	equ	0xFF7
  8673                           tblptrl	equ	0xFF6
  8674                           tablat	equ	0xFF5
  8675                           prodh	equ	0xFF4
  8676                           prodl	equ	0xFF3
  8677                           intcon	equ	0xFF2
  8678                           intcon2	equ	0xFF1
  8679                           postinc0	equ	0xFEE
  8680                           wreg	equ	0xFE8
  8681                           postdec1	equ	0xFE5
  8682                           fsr1l	equ	0xFE1
  8683                           indf2	equ	0xFDF
  8684                           postinc2	equ	0xFDE
  8685                           postdec2	equ	0xFDD
  8686                           fsr2h	equ	0xFDA
  8687                           fsr2l	equ	0xFD9
  8688                           status	equ	0xFD8
  8689                           
  8690 ;; *************** function _init_INTERRUPT *****************
  8691 ;; Defined at:
  8692 ;;		line 14 in file "Interrupt.c"
  8693 ;; Parameters:    Size  Location     Type
  8694 ;;		None
  8695 ;; Auto vars:     Size  Location     Type
  8696 ;;		None
  8697 ;; Return value:  Size  Location     Type
  8698 ;;		None               void
  8699 ;; Registers used:
  8700 ;;		wreg, status,2
  8701 ;; Tracked objects:
  8702 ;;		On entry : 0/0
  8703 ;;		On exit  : 0/0
  8704 ;;		Unchanged: 0/0
  8705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8706 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8707 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8708 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8709 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8710 ;;Total ram usage:        0 bytes
  8711 ;; Hardware stack levels used:    1
  8712 ;; Hardware stack levels required when called:    3
  8713 ;; This function calls:
  8714 ;;		Nothing
  8715 ;; This function is called by:
  8716 ;;		_Do_Init
  8717 ;; This function uses a non-reentrant model
  8718 ;;
  8719                           
  8720                           	psect	text42
  8721  0000'                    __ptext42:
  8722                           	opt stack 0
  8723  0000'                    _init_INTERRUPT:
  8724                           	opt stack 26
  8725                           
  8726                           ;Interrupt.c: 16: INTCONbits.INT0IF = 0;
  8727                           
  8728                           ;incstack = 0
  8729  0000' 92F2               	bcf	intcon,1,c	;volatile
  8730                           
  8731                           ;Interrupt.c: 17: INTCON2bits.INTEDG0 = 0;
  8732  0002' 9CF1               	bcf	intcon2,6,c	;volatile
  8733                           
  8734                           ;Interrupt.c: 18: INTCONbits.INT0IE = 1;
  8735  0004' 88F2               	bsf	intcon,4,c	;volatile
  8736                           
  8737                           ;Interrupt.c: 19: TMR1H = 0;
  8738  0006' 0E00               	movlw	0
  8739  0008' 6ECF               	movwf	4047,c	;volatile
  8740                           
  8741                           ;Interrupt.c: 20: TMR1L = 0;
  8742  000A' 0E00               	movlw	0
  8743  000C' 6ECE               	movwf	4046,c	;volatile
  8744                           
  8745                           ;Interrupt.c: 21: PIR1bits.TMR1IF = 0;
  8746  000E' 909E               	bcf	3998,0,c	;volatile
  8747                           
  8748                           ;Interrupt.c: 22: PIE1bits.TMR1IE = 1;
  8749  0010' 809D               	bsf	3997,0,c	;volatile
  8750                           
  8751                           ;Interrupt.c: 23: INTCONbits.PEIE = 1;
  8752  0012' 8CF2               	bsf	intcon,6,c	;volatile
  8753                           
  8754                           ;Interrupt.c: 24: INTCONbits.GIE = 1;
  8755  0014' 8EF2               	bsf	intcon,7,c	;volatile
  8756                           
  8757                           ;Interrupt.c: 25: nec_ok = 0;
  8758  0016' 0E00               	movlw	0
  8759  0018' 6E07'              	movwf	_nec_ok+1,c
  8760  001A' 0E00               	movlw	0
  8761  001C' 6E06'              	movwf	_nec_ok,c
  8762                           
  8763                           ;Interrupt.c: 26: Nec_code = 0x0;
  8764  001E' 0E00               	movlw	0
  8765  0020' 0100               	movlb	0	; () banked
  8766  0022' 6F00'              	movwf	_Nec_code& (0+255),b
  8767  0024' 0E00               	movlw	0
  8768  0026' 6F00'              	movwf	(_Nec_code+1)& (0+255),b
  8769  0028' 0E00               	movlw	0
  8770  002A' 6F00'              	movwf	(_Nec_code+2)& (0+255),b
  8771  002C' 0E00               	movlw	0
  8772  002E' 6F00'              	movwf	(_Nec_code+3)& (0+255),b
  8773                           
  8774                           ; BSR set to: 0
  8775  0030' 0012               	return		;funcret
  8776  0032'                    __end_of_init_INTERRUPT:
  8777                           	opt stack 0
  8778                           tblptru	equ	0xFF8
  8779                           tblptrh	equ	0xFF7
  8780                           tblptrl	equ	0xFF6
  8781                           tablat	equ	0xFF5
  8782                           prodh	equ	0xFF4
  8783                           prodl	equ	0xFF3
  8784                           intcon	equ	0xFF2
  8785                           intcon2	equ	0xFF1
  8786                           postinc0	equ	0xFEE
  8787                           wreg	equ	0xFE8
  8788                           postdec1	equ	0xFE5
  8789                           fsr1l	equ	0xFE1
  8790                           indf2	equ	0xFDF
  8791                           postinc2	equ	0xFDE
  8792                           postdec2	equ	0xFDD
  8793                           fsr2h	equ	0xFDA
  8794                           fsr2l	equ	0xFD9
  8795                           status	equ	0xFD8
  8796                           
  8797 ;; *************** function _Turn_Off_Fan *****************
  8798 ;; Defined at:
  8799 ;;		line 34 in file "Fan_Support.c"
  8800 ;; Parameters:    Size  Location     Type
  8801 ;;		None
  8802 ;; Auto vars:     Size  Location     Type
  8803 ;;		None
  8804 ;; Return value:  Size  Location     Type
  8805 ;;		None               void
  8806 ;; Registers used:
  8807 ;;		wreg, status,2
  8808 ;; Tracked objects:
  8809 ;;		On entry : 0/0
  8810 ;;		On exit  : 0/0
  8811 ;;		Unchanged: 0/0
  8812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8813 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8814 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8815 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8816 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8817 ;;Total ram usage:        0 bytes
  8818 ;; Hardware stack levels used:    1
  8819 ;; Hardware stack levels required when called:    3
  8820 ;; This function calls:
  8821 ;;		Nothing
  8822 ;; This function is called by:
  8823 ;;		_Do_Init
  8824 ;;		_Toggle_Fan
  8825 ;; This function uses a non-reentrant model
  8826 ;;
  8827                           
  8828                           	psect	text43
  8829  0000'                    __ptext43:
  8830                           	opt stack 0
  8831  0000'                    _Turn_Off_Fan:
  8832                           	opt stack 26
  8833                           
  8834                           ;Fan_Support.c: 37: FAN=0;
  8835                           
  8836                           ; BSR set to: 0
  8837                           ;incstack = 0
  8838  0000' 0E00               	movlw	0
  8839  0002' 6E0E'              	movwf	_FAN,c
  8840                           
  8841                           ;Fan_Support.c: 38: PORTAbits.RA5=0;
  8842  0004' 9A80               	bcf	3968,5,c	;volatile
  8843                           
  8844                           ;Fan_Support.c: 39: PORTEbits.RE2=0;
  8845  0006' 9484               	bcf	3972,2,c	;volatile
  8846  0008' 0012               	return		;funcret
  8847  000A'                    __end_of_Turn_Off_Fan:
  8848                           	opt stack 0
  8849                           tblptru	equ	0xFF8
  8850                           tblptrh	equ	0xFF7
  8851                           tblptrl	equ	0xFF6
  8852                           tablat	equ	0xFF5
  8853                           prodh	equ	0xFF4
  8854                           prodl	equ	0xFF3
  8855                           intcon	equ	0xFF2
  8856                           intcon2	equ	0xFF1
  8857                           postinc0	equ	0xFEE
  8858                           wreg	equ	0xFE8
  8859                           postdec1	equ	0xFE5
  8860                           fsr1l	equ	0xFE1
  8861                           indf2	equ	0xFDF
  8862                           postinc2	equ	0xFDE
  8863                           postdec2	equ	0xFDD
  8864                           fsr2h	equ	0xFDA
  8865                           fsr2l	equ	0xFD9
  8866                           status	equ	0xFD8
  8867                           
  8868 ;; *************** function _I2C_Init *****************
  8869 ;; Defined at:
  8870 ;;		line 13 in file "I2C.c"
  8871 ;; Parameters:    Size  Location     Type
  8872 ;;  c               4   16[COMRAM] unsigned long 
  8873 ;; Auto vars:     Size  Location     Type
  8874 ;;		None
  8875 ;; Return value:  Size  Location     Type
  8876 ;;		None               void
  8877 ;; Registers used:
  8878 ;;		wreg, cstack
  8879 ;; Tracked objects:
  8880 ;;		On entry : 0/0
  8881 ;;		On exit  : 0/0
  8882 ;;		Unchanged: 0/0
  8883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8884 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8885 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8886 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8887 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8888 ;;Total ram usage:        4 bytes
  8889 ;; Hardware stack levels used:    1
  8890 ;; Hardware stack levels required when called:    4
  8891 ;; This function calls:
  8892 ;;		_i2cHighScl
  8893 ;;		_i2cHighSda
  8894 ;; This function is called by:
  8895 ;;		_Do_Init
  8896 ;; This function uses a non-reentrant model
  8897 ;;
  8898                           
  8899                           	psect	text44
  8900  0000'                    __ptext44:
  8901                           	opt stack 0
  8902  0000'                    _I2C_Init:
  8903                           	opt stack 25
  8904                           
  8905                           ;I2C.c: 15: i2cHighScl();
  8906                           
  8907                           ;incstack = 0
  8908  0000' EC00' F000'        	call	_i2cHighScl	;wreg free
  8909                           
  8910                           ;I2C.c: 16: i2cHighSda();
  8911  0004' EC00' F000'        	call	_i2cHighSda	;wreg free
  8912  0008' 0012               	return		;funcret
  8913  000A'                    __end_of_I2C_Init:
  8914                           	opt stack 0
  8915                           tblptru	equ	0xFF8
  8916                           tblptrh	equ	0xFF7
  8917                           tblptrl	equ	0xFF6
  8918                           tablat	equ	0xFF5
  8919                           prodh	equ	0xFF4
  8920                           prodl	equ	0xFF3
  8921                           intcon	equ	0xFF2
  8922                           intcon2	equ	0xFF1
  8923                           postinc0	equ	0xFEE
  8924                           wreg	equ	0xFE8
  8925                           postdec1	equ	0xFE5
  8926                           fsr1l	equ	0xFE1
  8927                           indf2	equ	0xFDF
  8928                           postinc2	equ	0xFDE
  8929                           postdec2	equ	0xFDD
  8930                           fsr2h	equ	0xFDA
  8931                           fsr2l	equ	0xFD9
  8932                           status	equ	0xFD8
  8933                           
  8934 ;; *************** function _DS1621_Init *****************
  8935 ;; Defined at:
  8936 ;;		line 21 in file "I2C_Support.c"
  8937 ;; Parameters:    Size  Location     Type
  8938 ;;		None
  8939 ;; Auto vars:     Size  Location     Type
  8940 ;;  Device          1   21[COMRAM] unsigned char 
  8941 ;; Return value:  Size  Location     Type
  8942 ;;		None               void
  8943 ;; Registers used:
  8944 ;;		wreg, status,2, status,0, cstack
  8945 ;; Tracked objects:
  8946 ;;		On entry : 0/0
  8947 ;;		On exit  : 0/0
  8948 ;;		Unchanged: 0/0
  8949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8950 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8951 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8952 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8953 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8954 ;;Total ram usage:        1 bytes
  8955 ;; Hardware stack levels used:    1
  8956 ;; Hardware stack levels required when called:    6
  8957 ;; This function calls:
  8958 ;;		_I2C_Write_Cmd_Only
  8959 ;;		_I2C_Write_Cmd_Write_Data
  8960 ;; This function is called by:
  8961 ;;		_Do_Init
  8962 ;; This function uses a non-reentrant model
  8963 ;;
  8964                           
  8965                           	psect	text45
  8966  0000'                    __ptext45:
  8967                           	opt stack 0
  8968  0000'                    _DS1621_Init:
  8969                           	opt stack 23
  8970                           
  8971                           ;I2C_Support.c: 23: char Device = 0x48;
  8972                           
  8973                           ;incstack = 0
  8974  0000' 0E48               	movlw	72
  8975  0002' 6E15'              	movwf	DS1621_Init@Device,c
  8976                           
  8977                           ;I2C_Support.c: 24: I2C_Write_Cmd_Write_Data (Device, 0xAC, 0x02);
  8978  0004' 0EAC               	movlw	172
  8979  0006' 6E12'              	movwf	I2C_Write_Cmd_Write_Data@Cmd,c
  8980  0008' 0E02               	movlw	2
  8981  000A' 6E13'              	movwf	I2C_Write_Cmd_Write_Data@Data_Out,c
  8982  000C' 5015'              	movf	DS1621_Init@Device,w,c
  8983  000E' EC00' F000'        	call	_I2C_Write_Cmd_Write_Data
  8984                           
  8985                           ;I2C_Support.c: 25: I2C_Write_Cmd_Only(Device, 0xEE);
  8986  0012' 0EEE               	movlw	238
  8987  0014' 6E12'              	movwf	I2C_Write_Cmd_Only@Cmd,c
  8988  0016' 5015'              	movf	DS1621_Init@Device,w,c
  8989  0018' EC00' F000'        	call	_I2C_Write_Cmd_Only
  8990  001C' 0012               	return		;funcret
  8991  001E'                    __end_of_DS1621_Init:
  8992                           	opt stack 0
  8993                           tblptru	equ	0xFF8
  8994                           tblptrh	equ	0xFF7
  8995                           tblptrl	equ	0xFF6
  8996                           tablat	equ	0xFF5
  8997                           prodh	equ	0xFF4
  8998                           prodl	equ	0xFF3
  8999                           intcon	equ	0xFF2
  9000                           intcon2	equ	0xFF1
  9001                           postinc0	equ	0xFEE
  9002                           wreg	equ	0xFE8
  9003                           postdec1	equ	0xFE5
  9004                           fsr1l	equ	0xFE1
  9005                           indf2	equ	0xFDF
  9006                           postinc2	equ	0xFDE
  9007                           postdec2	equ	0xFDD
  9008                           fsr2h	equ	0xFDA
  9009                           fsr2l	equ	0xFD9
  9010                           status	equ	0xFD8
  9011                           
  9012 ;; *************** function _I2C_Write_Cmd_Write_Data *****************
  9013 ;; Defined at:
  9014 ;;		line 151 in file "I2C.c"
  9015 ;; Parameters:    Size  Location     Type
  9016 ;;  Device          1    wreg     unsigned char 
  9017 ;;  Cmd             1   18[COMRAM] unsigned char 
  9018 ;;  Data_Out        1   19[COMRAM] unsigned char 
  9019 ;; Auto vars:     Size  Location     Type
  9020 ;;  Device          1   20[COMRAM] unsigned char 
  9021 ;; Return value:  Size  Location     Type
  9022 ;;		None               void
  9023 ;; Registers used:
  9024 ;;		wreg, status,2, status,0, cstack
  9025 ;; Tracked objects:
  9026 ;;		On entry : 0/0
  9027 ;;		On exit  : 0/0
  9028 ;;		Unchanged: 0/0
  9029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9030 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9031 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9032 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9033 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9034 ;;Total ram usage:        3 bytes
  9035 ;; Hardware stack levels used:    1
  9036 ;; Hardware stack levels required when called:    5
  9037 ;; This function calls:
  9038 ;;		_I2C_Start
  9039 ;;		_I2C_Stop
  9040 ;;		_I2C_Write
  9041 ;; This function is called by:
  9042 ;;		_DS1621_Init
  9043 ;; This function uses a non-reentrant model
  9044 ;;
  9045                           
  9046                           	psect	text46
  9047  0000'                    __ptext46:
  9048                           	opt stack 0
  9049  0000'                    _I2C_Write_Cmd_Write_Data:
  9050                           	opt stack 23
  9051                           
  9052                           ;incstack = 0
  9053                           ;I2C_Write_Cmd_Write_Data@Device stored from wreg
  9054  0000' 6E14'              	movwf	I2C_Write_Cmd_Write_Data@Device,c
  9055                           
  9056                           ;I2C.c: 153: I2C_Start();
  9057  0002' EC00' F000'        	call	_I2C_Start	;wreg free
  9058                           
  9059                           ;I2C.c: 154: I2C_Write((Device << 1) | 0);
  9060  0006' 5014'              	movf	I2C_Write_Cmd_Write_Data@Device,w,c
  9061  0008' 2414'              	addwf	I2C_Write_Cmd_Write_Data@Device,w,c
  9062  000A' EC00' F000'        	call	_I2C_Write
  9063                           
  9064                           ;I2C.c: 155: I2C_Write(Cmd);
  9065  000E' 5012'              	movf	I2C_Write_Cmd_Write_Data@Cmd,w,c
  9066  0010' EC00' F000'        	call	_I2C_Write
  9067                           
  9068                           ;I2C.c: 156: I2C_Write(Data_Out);
  9069  0014' 5013'              	movf	I2C_Write_Cmd_Write_Data@Data_Out,w,c
  9070  0016' EC00' F000'        	call	_I2C_Write
  9071                           
  9072                           ;I2C.c: 157: I2C_Stop();
  9073  001A' EC00' F000'        	call	_I2C_Stop	;wreg free
  9074  001E' 0012               	return		;funcret
  9075  0020'                    __end_of_I2C_Write_Cmd_Write_Data:
  9076                           	opt stack 0
  9077                           tblptru	equ	0xFF8
  9078                           tblptrh	equ	0xFF7
  9079                           tblptrl	equ	0xFF6
  9080                           tablat	equ	0xFF5
  9081                           prodh	equ	0xFF4
  9082                           prodl	equ	0xFF3
  9083                           intcon	equ	0xFF2
  9084                           intcon2	equ	0xFF1
  9085                           postinc0	equ	0xFEE
  9086                           wreg	equ	0xFE8
  9087                           postdec1	equ	0xFE5
  9088                           fsr1l	equ	0xFE1
  9089                           indf2	equ	0xFDF
  9090                           postinc2	equ	0xFDE
  9091                           postdec2	equ	0xFDD
  9092                           fsr2h	equ	0xFDA
  9093                           fsr2l	equ	0xFD9
  9094                           status	equ	0xFD8
  9095                           
  9096 ;; *************** function _I2C_Write_Cmd_Only *****************
  9097 ;; Defined at:
  9098 ;;		line 143 in file "I2C.c"
  9099 ;; Parameters:    Size  Location     Type
  9100 ;;  Device          1    wreg     unsigned char 
  9101 ;;  Cmd             1   18[COMRAM] unsigned char 
  9102 ;; Auto vars:     Size  Location     Type
  9103 ;;  Device          1   19[COMRAM] unsigned char 
  9104 ;; Return value:  Size  Location     Type
  9105 ;;		None               void
  9106 ;; Registers used:
  9107 ;;		wreg, status,2, status,0, cstack
  9108 ;; Tracked objects:
  9109 ;;		On entry : 0/0
  9110 ;;		On exit  : 0/0
  9111 ;;		Unchanged: 0/0
  9112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9113 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9114 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9115 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9116 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9117 ;;Total ram usage:        2 bytes
  9118 ;; Hardware stack levels used:    1
  9119 ;; Hardware stack levels required when called:    5
  9120 ;; This function calls:
  9121 ;;		_I2C_Start
  9122 ;;		_I2C_Stop
  9123 ;;		_I2C_Write
  9124 ;; This function is called by:
  9125 ;;		_DS1621_Init
  9126 ;; This function uses a non-reentrant model
  9127 ;;
  9128                           
  9129                           	psect	text47
  9130  0000'                    __ptext47:
  9131                           	opt stack 0
  9132  0000'                    _I2C_Write_Cmd_Only:
  9133                           	opt stack 23
  9134                           
  9135                           ;incstack = 0
  9136                           ;I2C_Write_Cmd_Only@Device stored from wreg
  9137  0000' 6E13'              	movwf	I2C_Write_Cmd_Only@Device,c
  9138                           
  9139                           ;I2C.c: 145: I2C_Start();
  9140  0002' EC00' F000'        	call	_I2C_Start	;wreg free
  9141                           
  9142                           ;I2C.c: 146: I2C_Write((Device << 1) | 0);
  9143  0006' 5013'              	movf	I2C_Write_Cmd_Only@Device,w,c
  9144  0008' 2413'              	addwf	I2C_Write_Cmd_Only@Device,w,c
  9145  000A' EC00' F000'        	call	_I2C_Write
  9146                           
  9147                           ;I2C.c: 147: I2C_Write(Cmd);
  9148  000E' 5012'              	movf	I2C_Write_Cmd_Only@Cmd,w,c
  9149  0010' EC00' F000'        	call	_I2C_Write
  9150                           
  9151                           ;I2C.c: 148: I2C_Stop();
  9152  0014' EC00' F000'        	call	_I2C_Stop	;wreg free
  9153  0018' 0012               	return		;funcret
  9154  001A'                    __end_of_I2C_Write_Cmd_Only:
  9155                           	opt stack 0
  9156                           tblptru	equ	0xFF8
  9157                           tblptrh	equ	0xFF7
  9158                           tblptrl	equ	0xFF6
  9159                           tablat	equ	0xFF5
  9160                           prodh	equ	0xFF4
  9161                           prodl	equ	0xFF3
  9162                           intcon	equ	0xFF2
  9163                           intcon2	equ	0xFF1
  9164                           postinc0	equ	0xFEE
  9165                           wreg	equ	0xFE8
  9166                           postdec1	equ	0xFE5
  9167                           fsr1l	equ	0xFE1
  9168                           indf2	equ	0xFDF
  9169                           postinc2	equ	0xFDE
  9170                           postdec2	equ	0xFDD
  9171                           fsr2h	equ	0xFDA
  9172                           fsr2l	equ	0xFD9
  9173                           status	equ	0xFD8
  9174                           
  9175 ;; *************** function _DS3231_Read_Time *****************
  9176 ;; Defined at:
  9177 ;;		line 45 in file "I2C_Support.c"
  9178 ;; Parameters:    Size  Location     Type
  9179 ;;		None
  9180 ;; Auto vars:     Size  Location     Type
  9181 ;;  Device          1   20[COMRAM] unsigned char 
  9182 ;;  Address         1   19[COMRAM] unsigned char 
  9183 ;;  Data_Ret        1    0        unsigned char 
  9184 ;; Return value:  Size  Location     Type
  9185 ;;		None               void
  9186 ;; Registers used:
  9187 ;;		wreg, status,2, status,0, cstack
  9188 ;; Tracked objects:
  9189 ;;		On entry : 0/0
  9190 ;;		On exit  : 0/0
  9191 ;;		Unchanged: 0/0
  9192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9193 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9194 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9195 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9196 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9197 ;;Total ram usage:        2 bytes
  9198 ;; Hardware stack levels used:    1
  9199 ;; Hardware stack levels required when called:    6
  9200 ;; This function calls:
  9201 ;;		_I2C_ReStart
  9202 ;;		_I2C_Read
  9203 ;;		_I2C_Start
  9204 ;;		_I2C_Stop
  9205 ;;		_I2C_Write
  9206 ;; This function is called by:
  9207 ;;		_main
  9208 ;; This function uses a non-reentrant model
  9209 ;;
  9210                           
  9211                           	psect	text48
  9212  0000'                    __ptext48:
  9213                           	opt stack 0
  9214  0000'                    _DS3231_Read_Time:
  9215                           	opt stack 24
  9216                           
  9217                           ;I2C_Support.c: 47: char Device = 0x68;
  9218                           
  9219                           ;incstack = 0
  9220  0000' 0E68               	movlw	104
  9221  0002' 6E14'              	movwf	DS3231_Read_Time@Device,c
  9222                           
  9223                           ;I2C_Support.c: 48: char Address = 0x00;
  9224  0004' 0E00               	movlw	0
  9225  0006' 6E13'              	movwf	DS3231_Read_Time@Address,c
  9226                           
  9227                           ;I2C_Support.c: 49: char Data_Ret;
  9228                           ;I2C_Support.c: 50: I2C_Start();
  9229  0008' EC00' F000'        	call	_I2C_Start	;wreg free
  9230                           
  9231                           ;I2C_Support.c: 51: I2C_Write((Device << 1) | 0);
  9232  000C' 5014'              	movf	DS3231_Read_Time@Device,w,c
  9233  000E' 2414'              	addwf	DS3231_Read_Time@Device,w,c
  9234  0010' EC00' F000'        	call	_I2C_Write
  9235                           
  9236                           ;I2C_Support.c: 52: I2C_Write(Address);
  9237  0014' 5013'              	movf	DS3231_Read_Time@Address,w,c
  9238  0016' EC00' F000'        	call	_I2C_Write
  9239                           
  9240                           ;I2C_Support.c: 53: I2C_ReStart();
  9241  001A' EC00' F000'        	call	_I2C_ReStart	;wreg free
  9242                           
  9243                           ;I2C_Support.c: 54: I2C_Write((Device << 1) | 1);
  9244  001E' 80D8               	bsf	status,0,c
  9245  0020' 3414'              	rlcf	DS3231_Read_Time@Device,w,c
  9246  0022' EC00' F000'        	call	_I2C_Write
  9247                           
  9248                           ;I2C_Support.c: 56: second = I2C_Read(1);
  9249  0026' 0E01               	movlw	1
  9250  0028' EC00' F000'        	call	_I2C_Read
  9251  002C' 6E20'              	movwf	_second,c
  9252                           
  9253                           ;I2C_Support.c: 57: minute = I2C_Read(1);
  9254  002E' 0E01               	movlw	1
  9255  0030' EC00' F000'        	call	_I2C_Read
  9256  0034' 6E1D'              	movwf	_minute,c
  9257                           
  9258                           ;I2C_Support.c: 58: hour = I2C_Read(1);
  9259  0036' 0E01               	movlw	1
  9260  0038' EC00' F000'        	call	_I2C_Read
  9261  003C' 6E1C'              	movwf	_hour,c
  9262                           
  9263                           ;I2C_Support.c: 59: dow = I2C_Read(1);
  9264  003E' 0E01               	movlw	1
  9265  0040' EC00' F000'        	call	_I2C_Read
  9266  0044' 6E19'              	movwf	_dow,c
  9267                           
  9268                           ;I2C_Support.c: 60: day = I2C_Read(1);
  9269  0046' 0E01               	movlw	1
  9270  0048' EC00' F000'        	call	_I2C_Read
  9271  004C' 6E18'              	movwf	_day,c
  9272                           
  9273                           ;I2C_Support.c: 61: month = I2C_Read(1);
  9274  004E' 0E01               	movlw	1
  9275  0050' EC00' F000'        	call	_I2C_Read
  9276  0054' 6E1E'              	movwf	_month,c
  9277                           
  9278                           ;I2C_Support.c: 62: year = I2C_Read(0);
  9279  0056' 0E00               	movlw	0
  9280  0058' EC00' F000'        	call	_I2C_Read
  9281  005C' 6E2A'              	movwf	_year,c
  9282                           
  9283                           ;I2C_Support.c: 64: I2C_Stop();
  9284  005E' EC00' F000'        	call	_I2C_Stop	;wreg free
  9285  0062' 0012               	return		;funcret
  9286  0064'                    __end_of_DS3231_Read_Time:
  9287                           	opt stack 0
  9288                           tblptru	equ	0xFF8
  9289                           tblptrh	equ	0xFF7
  9290                           tblptrl	equ	0xFF6
  9291                           tablat	equ	0xFF5
  9292                           prodh	equ	0xFF4
  9293                           prodl	equ	0xFF3
  9294                           intcon	equ	0xFF2
  9295                           intcon2	equ	0xFF1
  9296                           postinc0	equ	0xFEE
  9297                           wreg	equ	0xFE8
  9298                           postdec1	equ	0xFE5
  9299                           fsr1l	equ	0xFE1
  9300                           indf2	equ	0xFDF
  9301                           postinc2	equ	0xFDE
  9302                           postdec2	equ	0xFDD
  9303                           fsr2h	equ	0xFDA
  9304                           fsr2l	equ	0xFD9
  9305                           status	equ	0xFD8
  9306                           
  9307 ;; *************** function _DS1621_Read_Temp *****************
  9308 ;; Defined at:
  9309 ;;		line 29 in file "I2C_Support.c"
  9310 ;; Parameters:    Size  Location     Type
  9311 ;;		None
  9312 ;; Auto vars:     Size  Location     Type
  9313 ;;  Device          1   23[COMRAM] unsigned char 
  9314 ;;  Data_Ret        1   22[COMRAM] unsigned char 
  9315 ;;  Cmd             1   21[COMRAM] unsigned char 
  9316 ;; Return value:  Size  Location     Type
  9317 ;;                  2   19[COMRAM] int 
  9318 ;; Registers used:
  9319 ;;		wreg, status,2, status,0, cstack
  9320 ;; Tracked objects:
  9321 ;;		On entry : 0/0
  9322 ;;		On exit  : 0/0
  9323 ;;		Unchanged: 0/0
  9324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9325 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9326 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9327 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9328 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9329 ;;Total ram usage:        5 bytes
  9330 ;; Hardware stack levels used:    1
  9331 ;; Hardware stack levels required when called:    6
  9332 ;; This function calls:
  9333 ;;		_I2C_ReStart
  9334 ;;		_I2C_Read
  9335 ;;		_I2C_Start
  9336 ;;		_I2C_Stop
  9337 ;;		_I2C_Write
  9338 ;; This function is called by:
  9339 ;;		_main
  9340 ;; This function uses a non-reentrant model
  9341 ;;
  9342                           
  9343                           	psect	text49
  9344  0000'                    __ptext49:
  9345                           	opt stack 0
  9346  0000'                    _DS1621_Read_Temp:
  9347                           	opt stack 24
  9348                           
  9349                           ;I2C_Support.c: 31: char Device = 0x48;
  9350                           
  9351                           ;incstack = 0
  9352  0000' 0E48               	movlw	72
  9353  0002' 6E17'              	movwf	DS1621_Read_Temp@Device,c
  9354                           
  9355                           ;I2C_Support.c: 32: char Cmd = 0xAA;
  9356  0004' 0EAA               	movlw	170
  9357  0006' 6E15'              	movwf	DS1621_Read_Temp@Cmd,c
  9358                           
  9359                           ;I2C_Support.c: 34: char Data_Ret;
  9360                           ;I2C_Support.c: 35: I2C_Start();
  9361  0008' EC00' F000'        	call	_I2C_Start	;wreg free
  9362                           
  9363                           ;I2C_Support.c: 36: I2C_Write((Device << 1) | 0);
  9364  000C' 5017'              	movf	DS1621_Read_Temp@Device,w,c
  9365  000E' 2417'              	addwf	DS1621_Read_Temp@Device,w,c
  9366  0010' EC00' F000'        	call	_I2C_Write
  9367                           
  9368                           ;I2C_Support.c: 37: I2C_Write(Cmd);
  9369  0014' 5015'              	movf	DS1621_Read_Temp@Cmd,w,c
  9370  0016' EC00' F000'        	call	_I2C_Write
  9371                           
  9372                           ;I2C_Support.c: 38: I2C_ReStart();
  9373  001A' EC00' F000'        	call	_I2C_ReStart	;wreg free
  9374                           
  9375                           ;I2C_Support.c: 39: I2C_Write((Device << 1) | 1);
  9376  001E' 80D8               	bsf	status,0,c
  9377  0020' 3417'              	rlcf	DS1621_Read_Temp@Device,w,c
  9378  0022' EC00' F000'        	call	_I2C_Write
  9379                           
  9380                           ;I2C_Support.c: 40: Data_Ret = I2C_Read(0);
  9381  0026' 0E00               	movlw	0
  9382  0028' EC00' F000'        	call	_I2C_Read
  9383  002C' 6E16'              	movwf	DS1621_Read_Temp@Data_Ret,c
  9384                           
  9385                           ;I2C_Support.c: 41: I2C_Stop();
  9386  002E' EC00' F000'        	call	_I2C_Stop	;wreg free
  9387                           
  9388                           ;I2C_Support.c: 42: return Data_Ret;
  9389  0032' C016' F013'        	movff	DS1621_Read_Temp@Data_Ret,?_DS1621_Read_Temp
  9390  0036' 6A14'              	clrf	?_DS1621_Read_Temp+1,c
  9391  0038' D000               	goto	l219
  9392  003A'                    l219:
  9393  003A' 0012               	return		;funcret
  9394  003C'                    __end_of_DS1621_Read_Temp:
  9395                           	opt stack 0
  9396                           tblptru	equ	0xFF8
  9397                           tblptrh	equ	0xFF7
  9398                           tblptrl	equ	0xFF6
  9399                           tablat	equ	0xFF5
  9400                           prodh	equ	0xFF4
  9401                           prodl	equ	0xFF3
  9402                           intcon	equ	0xFF2
  9403                           intcon2	equ	0xFF1
  9404                           postinc0	equ	0xFEE
  9405                           wreg	equ	0xFE8
  9406                           postdec1	equ	0xFE5
  9407                           fsr1l	equ	0xFE1
  9408                           indf2	equ	0xFDF
  9409                           postinc2	equ	0xFDE
  9410                           postdec2	equ	0xFDD
  9411                           fsr2h	equ	0xFDA
  9412                           fsr2l	equ	0xFD9
  9413                           status	equ	0xFD8
  9414                           
  9415 ;; *************** function _I2C_Write *****************
  9416 ;; Defined at:
  9417 ;;		line 40 in file "I2C.c"
  9418 ;; Parameters:    Size  Location     Type
  9419 ;;  outByte         1    wreg     unsigned char 
  9420 ;; Auto vars:     Size  Location     Type
  9421 ;;  outByte         1   16[COMRAM] unsigned char 
  9422 ;;  n               1   17[COMRAM] unsigned char 
  9423 ;; Return value:  Size  Location     Type
  9424 ;;		None               void
  9425 ;; Registers used:
  9426 ;;		wreg, status,2, status,0, cstack
  9427 ;; Tracked objects:
  9428 ;;		On entry : 0/0
  9429 ;;		On exit  : 0/0
  9430 ;;		Unchanged: 0/0
  9431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9432 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9433 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9434 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9435 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9436 ;;Total ram usage:        2 bytes
  9437 ;; Hardware stack levels used:    1
  9438 ;; Hardware stack levels required when called:    4
  9439 ;; This function calls:
  9440 ;;		_i2cHighScl
  9441 ;;		_i2cHighSda
  9442 ;;		_i2cLowScl
  9443 ;;		_i2cLowSda
  9444 ;; This function is called by:
  9445 ;;		_I2C_Write_Cmd_Only
  9446 ;;		_I2C_Write_Cmd_Write_Data
  9447 ;;		_DS1621_Read_Temp
  9448 ;;		_DS3231_Read_Time
  9449 ;;		_I2C_Write_Address_Read_One_Byte
  9450 ;;		_I2C_Write_Address_Write_One_Byte
  9451 ;;		_I2C_Write_Cmd_Read_One_Byte
  9452 ;;		_DS3231_Setup_Time
  9453 ;; This function uses a non-reentrant model
  9454 ;;
  9455                           
  9456                           	psect	text50
  9457  0000'                    __ptext50:
  9458                           	opt stack 0
  9459  0000'                    _I2C_Write:
  9460                           	opt stack 23
  9461                           
  9462                           ;incstack = 0
  9463                           ;I2C_Write@outByte stored from wreg
  9464  0000' 6E10'              	movwf	I2C_Write@outByte,c
  9465                           
  9466                           ;I2C.c: 42: unsigned char n;
  9467                           ;I2C.c: 43: for(n=0; n<8; n++)
  9468  0002' 0E00               	movlw	0
  9469  0004' 6E11'              	movwf	I2C_Write@n,c
  9470  0006'                    l5101:
  9471  0006' 0E07               	movlw	7
  9472  0008' 6411'              	cpfsgt	I2C_Write@n,c
  9473  000A' D001               	goto	l167
  9474  000C' D011               	goto	l5119
  9475  000E'                    l167:
  9476                           
  9477                           ;I2C.c: 44: {
  9478                           ;I2C.c: 45: if(outByte&0x80) i2cHighSda();
  9479  000E' AE10'              	btfss	I2C_Write@outByte,7,c
  9480  0010' D003               	goto	l5107
  9481  0012' EC00' F000'        	call	_i2cHighSda	;wreg free
  9482  0016' D003               	goto	l5109
  9483  0018'                    l5107:
  9484                           
  9485                           ;I2C.c: 46: else i2cLowSda();
  9486  0018' EC00' F000'        	call	_i2cLowSda	;wreg free
  9487  001C' D000               	goto	l5109
  9488  001E'                    l5109:
  9489                           
  9490                           ;I2C.c: 47: i2cHighScl();
  9491  001E' EC00' F000'        	call	_i2cHighScl	;wreg free
  9492                           
  9493                           ;I2C.c: 48: i2cLowScl();
  9494  0022' EC00' F000'        	call	_i2cLowScl	;wreg free
  9495                           
  9496                           ;I2C.c: 49: outByte = outByte << 1;
  9497  0026' 5010'              	movf	I2C_Write@outByte,w,c
  9498  0028' 2410'              	addwf	I2C_Write@outByte,w,c
  9499  002A' 6E10'              	movwf	I2C_Write@outByte,c
  9500  002C' 2A11'              	incf	I2C_Write@n,f,c
  9501  002E' D7EB               	goto	l5101
  9502  0030'                    l5119:
  9503                           
  9504                           ;I2C.c: 50: }
  9505                           ;I2C.c: 51: i2cHighSda();
  9506  0030' EC00' F000'        	call	_i2cHighSda	;wreg free
  9507                           
  9508                           ;I2C.c: 52: i2cHighScl();
  9509  0034' EC00' F000'        	call	_i2cHighScl	;wreg free
  9510                           
  9511                           ;I2C.c: 53: i2cLowScl();
  9512  0038' EC00' F000'        	call	_i2cLowScl	;wreg free
  9513  003C' 0012               	return		;funcret
  9514  003E'                    __end_of_I2C_Write:
  9515                           	opt stack 0
  9516                           tblptru	equ	0xFF8
  9517                           tblptrh	equ	0xFF7
  9518                           tblptrl	equ	0xFF6
  9519                           tablat	equ	0xFF5
  9520                           prodh	equ	0xFF4
  9521                           prodl	equ	0xFF3
  9522                           intcon	equ	0xFF2
  9523                           intcon2	equ	0xFF1
  9524                           postinc0	equ	0xFEE
  9525                           wreg	equ	0xFE8
  9526                           postdec1	equ	0xFE5
  9527                           fsr1l	equ	0xFE1
  9528                           indf2	equ	0xFDF
  9529                           postinc2	equ	0xFDE
  9530                           postdec2	equ	0xFDD
  9531                           fsr2h	equ	0xFDA
  9532                           fsr2l	equ	0xFD9
  9533                           status	equ	0xFD8
  9534                           
  9535 ;; *************** function _I2C_Stop *****************
  9536 ;; Defined at:
  9537 ;;		line 87 in file "I2C.c"
  9538 ;; Parameters:    Size  Location     Type
  9539 ;;		None
  9540 ;; Auto vars:     Size  Location     Type
  9541 ;;		None
  9542 ;; Return value:  Size  Location     Type
  9543 ;;		None               void
  9544 ;; Registers used:
  9545 ;;		wreg, cstack
  9546 ;; Tracked objects:
  9547 ;;		On entry : 0/0
  9548 ;;		On exit  : 0/0
  9549 ;;		Unchanged: 0/0
  9550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9551 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9552 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9553 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9554 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9555 ;;Total ram usage:        0 bytes
  9556 ;; Hardware stack levels used:    1
  9557 ;; Hardware stack levels required when called:    4
  9558 ;; This function calls:
  9559 ;;		_i2cHighScl
  9560 ;;		_i2cHighSda
  9561 ;;		_i2cLowScl
  9562 ;;		_i2cLowSda
  9563 ;; This function is called by:
  9564 ;;		_I2C_Write_Cmd_Only
  9565 ;;		_I2C_Write_Cmd_Write_Data
  9566 ;;		_DS1621_Read_Temp
  9567 ;;		_DS3231_Read_Time
  9568 ;;		_I2C_Write_Address_Read_One_Byte
  9569 ;;		_I2C_Write_Address_Write_One_Byte
  9570 ;;		_I2C_Write_Cmd_Read_One_Byte
  9571 ;;		_DS3231_Setup_Time
  9572 ;; This function uses a non-reentrant model
  9573 ;;
  9574                           
  9575                           	psect	text51
  9576  0000'                    __ptext51:
  9577                           	opt stack 0
  9578  0000'                    _I2C_Stop:
  9579                           	opt stack 23
  9580                           
  9581                           ;I2C.c: 89: i2cLowScl();
  9582                           
  9583                           ;incstack = 0
  9584  0000' EC00' F000'        	call	_i2cLowScl	;wreg free
  9585                           
  9586                           ;I2C.c: 90: i2cLowSda();
  9587  0004' EC00' F000'        	call	_i2cLowSda	;wreg free
  9588                           
  9589                           ;I2C.c: 91: i2cHighScl();
  9590  0008' EC00' F000'        	call	_i2cHighScl	;wreg free
  9591                           
  9592                           ;I2C.c: 92: i2cHighSda();
  9593  000C' EC00' F000'        	call	_i2cHighSda	;wreg free
  9594  0010' 0012               	return		;funcret
  9595  0012'                    __end_of_I2C_Stop:
  9596                           	opt stack 0
  9597                           tblptru	equ	0xFF8
  9598                           tblptrh	equ	0xFF7
  9599                           tblptrl	equ	0xFF6
  9600                           tablat	equ	0xFF5
  9601                           prodh	equ	0xFF4
  9602                           prodl	equ	0xFF3
  9603                           intcon	equ	0xFF2
  9604                           intcon2	equ	0xFF1
  9605                           postinc0	equ	0xFEE
  9606                           wreg	equ	0xFE8
  9607                           postdec1	equ	0xFE5
  9608                           fsr1l	equ	0xFE1
  9609                           indf2	equ	0xFDF
  9610                           postinc2	equ	0xFDE
  9611                           postdec2	equ	0xFDD
  9612                           fsr2h	equ	0xFDA
  9613                           fsr2l	equ	0xFD9
  9614                           status	equ	0xFD8
  9615                           
  9616 ;; *************** function _I2C_Start *****************
  9617 ;; Defined at:
  9618 ;;		line 70 in file "I2C.c"
  9619 ;; Parameters:    Size  Location     Type
  9620 ;;		None
  9621 ;; Auto vars:     Size  Location     Type
  9622 ;;		None
  9623 ;; Return value:  Size  Location     Type
  9624 ;;		None               void
  9625 ;; Registers used:
  9626 ;;		wreg, cstack
  9627 ;; Tracked objects:
  9628 ;;		On entry : 0/0
  9629 ;;		On exit  : 0/0
  9630 ;;		Unchanged: 0/0
  9631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9632 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9633 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9634 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9635 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9636 ;;Total ram usage:        0 bytes
  9637 ;; Hardware stack levels used:    1
  9638 ;; Hardware stack levels required when called:    4
  9639 ;; This function calls:
  9640 ;;		_i2cHighScl
  9641 ;;		_i2cHighSda
  9642 ;;		_i2cLowScl
  9643 ;;		_i2cLowSda
  9644 ;; This function is called by:
  9645 ;;		_I2C_Write_Cmd_Only
  9646 ;;		_I2C_Write_Cmd_Write_Data
  9647 ;;		_DS1621_Read_Temp
  9648 ;;		_DS3231_Read_Time
  9649 ;;		_I2C_Write_Address_Read_One_Byte
  9650 ;;		_I2C_Write_Address_Write_One_Byte
  9651 ;;		_I2C_Write_Cmd_Read_One_Byte
  9652 ;;		_DS3231_Setup_Time
  9653 ;; This function uses a non-reentrant model
  9654 ;;
  9655                           
  9656                           	psect	text52
  9657  0000'                    __ptext52:
  9658                           	opt stack 0
  9659  0000'                    _I2C_Start:
  9660                           	opt stack 23
  9661                           
  9662                           ;I2C.c: 72: i2cHighSda();
  9663                           
  9664                           ;incstack = 0
  9665  0000' EC00' F000'        	call	_i2cHighSda	;wreg free
  9666                           
  9667                           ;I2C.c: 73: i2cHighScl();
  9668  0004' EC00' F000'        	call	_i2cHighScl	;wreg free
  9669                           
  9670                           ;I2C.c: 74: i2cLowSda();
  9671  0008' EC00' F000'        	call	_i2cLowSda	;wreg free
  9672                           
  9673                           ;I2C.c: 75: i2cLowScl();
  9674  000C' EC00' F000'        	call	_i2cLowScl	;wreg free
  9675  0010' 0012               	return		;funcret
  9676  0012'                    __end_of_I2C_Start:
  9677                           	opt stack 0
  9678                           tblptru	equ	0xFF8
  9679                           tblptrh	equ	0xFF7
  9680                           tblptrl	equ	0xFF6
  9681                           tablat	equ	0xFF5
  9682                           prodh	equ	0xFF4
  9683                           prodl	equ	0xFF3
  9684                           intcon	equ	0xFF2
  9685                           intcon2	equ	0xFF1
  9686                           postinc0	equ	0xFEE
  9687                           wreg	equ	0xFE8
  9688                           postdec1	equ	0xFE5
  9689                           fsr1l	equ	0xFE1
  9690                           indf2	equ	0xFDF
  9691                           postinc2	equ	0xFDE
  9692                           postdec2	equ	0xFDD
  9693                           fsr2h	equ	0xFDA
  9694                           fsr2l	equ	0xFD9
  9695                           status	equ	0xFD8
  9696                           
  9697 ;; *************** function _I2C_Read *****************
  9698 ;; Defined at:
  9699 ;;		line 19 in file "I2C.c"
  9700 ;; Parameters:    Size  Location     Type
  9701 ;;  ack             1    wreg     unsigned char 
  9702 ;; Auto vars:     Size  Location     Type
  9703 ;;  ack             1   16[COMRAM] unsigned char 
  9704 ;;  inByte          1   18[COMRAM] unsigned char 
  9705 ;;  n               1   17[COMRAM] unsigned char 
  9706 ;; Return value:  Size  Location     Type
  9707 ;;                  1    wreg      unsigned char 
  9708 ;; Registers used:
  9709 ;;		wreg, status,2, status,0, cstack
  9710 ;; Tracked objects:
  9711 ;;		On entry : 0/0
  9712 ;;		On exit  : 0/0
  9713 ;;		Unchanged: 0/0
  9714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9716 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9717 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9718 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9719 ;;Total ram usage:        3 bytes
  9720 ;; Hardware stack levels used:    1
  9721 ;; Hardware stack levels required when called:    5
  9722 ;; This function calls:
  9723 ;;		_i2cAck
  9724 ;;		_i2cHighScl
  9725 ;;		_i2cHighSda
  9726 ;;		_i2cLowScl
  9727 ;;		_i2cNack
  9728 ;; This function is called by:
  9729 ;;		_DS1621_Read_Temp
  9730 ;;		_DS3231_Read_Time
  9731 ;;		_I2C_Write_Address_Read_One_Byte
  9732 ;;		_I2C_Write_Cmd_Read_One_Byte
  9733 ;; This function uses a non-reentrant model
  9734 ;;
  9735                           
  9736                           	psect	text53
  9737  0000'                    __ptext53:
  9738                           	opt stack 0
  9739  0000'                    _I2C_Read:
  9740                           	opt stack 24
  9741                           
  9742                           ;incstack = 0
  9743                           ;I2C_Read@ack stored from wreg
  9744  0000' 6E10'              	movwf	I2C_Read@ack,c
  9745                           
  9746                           ;I2C.c: 21: unsigned char inByte, n;
  9747                           ;I2C.c: 22: i2cHighSda();
  9748  0002' EC00' F000'        	call	_i2cHighSda	;wreg free
  9749                           
  9750                           ;I2C.c: 23: for (n=0; n<8; n++)
  9751  0006' 0E00               	movlw	0
  9752  0008' 6E11'              	movwf	I2C_Read@n,c
  9753  000A'                    l5633:
  9754  000A' 0E07               	movlw	7
  9755  000C' 6411'              	cpfsgt	I2C_Read@n,c
  9756  000E' D001               	goto	l5637
  9757  0010' D00F               	goto	l5651
  9758  0012'                    l5637:
  9759                           
  9760                           ;I2C.c: 24: {
  9761                           ;I2C.c: 25: i2cHighScl();
  9762  0012' EC00' F000'        	call	_i2cHighScl	;wreg free
  9763                           
  9764                           ;I2C.c: 27: if (PORTBbits.RB5)
  9765  0016' AA81               	btfss	3969,5,c	;volatile
  9766  0018' D003               	goto	l5643
  9767                           
  9768                           ;I2C.c: 28: inByte = (inByte << 1) | 0x01;
  9769  001A' 80D8               	bsf	status,0,c
  9770  001C' 3612'              	rlcf	I2C_Read@inByte,f,c
  9771  001E' D004               	goto	l5645
  9772  0020'                    l5643:
  9773                           
  9774                           ;I2C.c: 29: else
  9775                           ;I2C.c: 30: inByte = inByte << 1;
  9776  0020' 5012'              	movf	I2C_Read@inByte,w,c
  9777  0022' 2412'              	addwf	I2C_Read@inByte,w,c
  9778  0024' 6E12'              	movwf	I2C_Read@inByte,c
  9779  0026' D000               	goto	l5645
  9780  0028'                    l5645:
  9781                           
  9782                           ;I2C.c: 31: i2cLowScl();
  9783  0028' EC00' F000'        	call	_i2cLowScl	;wreg free
  9784  002C' 2A11'              	incf	I2C_Read@n,f,c
  9785  002E' D7ED               	goto	l5633
  9786  0030'                    l5651:
  9787                           
  9788                           ;I2C.c: 32: }
  9789                           ;I2C.c: 33: if (ack) i2cAck();
  9790  0030' 5010'              	movf	I2C_Read@ack,w,c
  9791  0032' B4D8               	btfsc	status,2,c
  9792  0034' D003               	goto	l5655
  9793  0036' EC00' F000'        	call	_i2cAck	;wreg free
  9794  003A' D003               	goto	l5657
  9795  003C'                    l5655:
  9796                           
  9797                           ;I2C.c: 34: else i2cNack();
  9798  003C' EC00' F000'        	call	_i2cNack	;wreg free
  9799  0040' D000               	goto	l5657
  9800  0042'                    l5657:
  9801                           
  9802                           ;I2C.c: 37: return(inByte);
  9803  0042' 5012'              	movf	I2C_Read@inByte,w,c
  9804  0044' D000               	goto	l164
  9805  0046'                    l164:
  9806  0046' 0012               	return		;funcret
  9807  0048'                    __end_of_I2C_Read:
  9808                           	opt stack 0
  9809                           tblptru	equ	0xFF8
  9810                           tblptrh	equ	0xFF7
  9811                           tblptrl	equ	0xFF6
  9812                           tablat	equ	0xFF5
  9813                           prodh	equ	0xFF4
  9814                           prodl	equ	0xFF3
  9815                           intcon	equ	0xFF2
  9816                           intcon2	equ	0xFF1
  9817                           postinc0	equ	0xFEE
  9818                           wreg	equ	0xFE8
  9819                           postdec1	equ	0xFE5
  9820                           fsr1l	equ	0xFE1
  9821                           indf2	equ	0xFDF
  9822                           postinc2	equ	0xFDE
  9823                           postdec2	equ	0xFDD
  9824                           fsr2h	equ	0xFDA
  9825                           fsr2l	equ	0xFD9
  9826                           status	equ	0xFD8
  9827                           
  9828 ;; *************** function _i2cNack *****************
  9829 ;; Defined at:
  9830 ;;		line 56 in file "I2C.c"
  9831 ;; Parameters:    Size  Location     Type
  9832 ;;		None
  9833 ;; Auto vars:     Size  Location     Type
  9834 ;;		None
  9835 ;; Return value:  Size  Location     Type
  9836 ;;		None               void
  9837 ;; Registers used:
  9838 ;;		wreg, cstack
  9839 ;; Tracked objects:
  9840 ;;		On entry : 0/0
  9841 ;;		On exit  : 0/0
  9842 ;;		Unchanged: 0/0
  9843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9844 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9845 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9846 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9847 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9848 ;;Total ram usage:        0 bytes
  9849 ;; Hardware stack levels used:    1
  9850 ;; Hardware stack levels required when called:    4
  9851 ;; This function calls:
  9852 ;;		_i2cHighScl
  9853 ;;		_i2cLowScl
  9854 ;; This function is called by:
  9855 ;;		_I2C_Read
  9856 ;; This function uses a non-reentrant model
  9857 ;;
  9858                           
  9859                           	psect	text54
  9860  0000'                    __ptext54:
  9861                           	opt stack 0
  9862  0000'                    _i2cNack:
  9863                           	opt stack 24
  9864                           
  9865                           ;I2C.c: 58: i2cHighScl();
  9866                           
  9867                           ;incstack = 0
  9868  0000' EC00' F000'        	call	_i2cHighScl	;wreg free
  9869                           
  9870                           ;I2C.c: 59: i2cLowScl();
  9871  0004' EC00' F000'        	call	_i2cLowScl	;wreg free
  9872  0008' 0012               	return		;funcret
  9873  000A'                    __end_of_i2cNack:
  9874                           	opt stack 0
  9875                           tblptru	equ	0xFF8
  9876                           tblptrh	equ	0xFF7
  9877                           tblptrl	equ	0xFF6
  9878                           tablat	equ	0xFF5
  9879                           prodh	equ	0xFF4
  9880                           prodl	equ	0xFF3
  9881                           intcon	equ	0xFF2
  9882                           intcon2	equ	0xFF1
  9883                           postinc0	equ	0xFEE
  9884                           wreg	equ	0xFE8
  9885                           postdec1	equ	0xFE5
  9886                           fsr1l	equ	0xFE1
  9887                           indf2	equ	0xFDF
  9888                           postinc2	equ	0xFDE
  9889                           postdec2	equ	0xFDD
  9890                           fsr2h	equ	0xFDA
  9891                           fsr2l	equ	0xFD9
  9892                           status	equ	0xFD8
  9893                           
  9894 ;; *************** function _i2cAck *****************
  9895 ;; Defined at:
  9896 ;;		line 62 in file "I2C.c"
  9897 ;; Parameters:    Size  Location     Type
  9898 ;;		None
  9899 ;; Auto vars:     Size  Location     Type
  9900 ;;		None
  9901 ;; Return value:  Size  Location     Type
  9902 ;;		None               void
  9903 ;; Registers used:
  9904 ;;		wreg, cstack
  9905 ;; Tracked objects:
  9906 ;;		On entry : 0/0
  9907 ;;		On exit  : 0/0
  9908 ;;		Unchanged: 0/0
  9909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9910 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9911 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9912 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9913 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9914 ;;Total ram usage:        0 bytes
  9915 ;; Hardware stack levels used:    1
  9916 ;; Hardware stack levels required when called:    4
  9917 ;; This function calls:
  9918 ;;		_i2cHighScl
  9919 ;;		_i2cHighSda
  9920 ;;		_i2cLowScl
  9921 ;;		_i2cLowSda
  9922 ;; This function is called by:
  9923 ;;		_I2C_Read
  9924 ;; This function uses a non-reentrant model
  9925 ;;
  9926                           
  9927                           	psect	text55
  9928  0000'                    __ptext55:
  9929                           	opt stack 0
  9930  0000'                    _i2cAck:
  9931                           	opt stack 24
  9932                           
  9933                           ;I2C.c: 64: i2cLowSda();
  9934                           
  9935                           ;incstack = 0
  9936  0000' EC00' F000'        	call	_i2cLowSda	;wreg free
  9937                           
  9938                           ;I2C.c: 65: i2cHighScl();
  9939  0004' EC00' F000'        	call	_i2cHighScl	;wreg free
  9940                           
  9941                           ;I2C.c: 66: i2cLowScl();
  9942  0008' EC00' F000'        	call	_i2cLowScl	;wreg free
  9943                           
  9944                           ;I2C.c: 67: i2cHighSda();
  9945  000C' EC00' F000'        	call	_i2cHighSda	;wreg free
  9946  0010' 0012               	return		;funcret
  9947  0012'                    __end_of_i2cAck:
  9948                           	opt stack 0
  9949                           tblptru	equ	0xFF8
  9950                           tblptrh	equ	0xFF7
  9951                           tblptrl	equ	0xFF6
  9952                           tablat	equ	0xFF5
  9953                           prodh	equ	0xFF4
  9954                           prodl	equ	0xFF3
  9955                           intcon	equ	0xFF2
  9956                           intcon2	equ	0xFF1
  9957                           postinc0	equ	0xFEE
  9958                           wreg	equ	0xFE8
  9959                           postdec1	equ	0xFE5
  9960                           fsr1l	equ	0xFE1
  9961                           indf2	equ	0xFDF
  9962                           postinc2	equ	0xFDE
  9963                           postdec2	equ	0xFDD
  9964                           fsr2h	equ	0xFDA
  9965                           fsr2l	equ	0xFD9
  9966                           status	equ	0xFD8
  9967                           
  9968 ;; *************** function _I2C_ReStart *****************
  9969 ;; Defined at:
  9970 ;;		line 78 in file "I2C.c"
  9971 ;; Parameters:    Size  Location     Type
  9972 ;;		None
  9973 ;; Auto vars:     Size  Location     Type
  9974 ;;		None
  9975 ;; Return value:  Size  Location     Type
  9976 ;;		None               void
  9977 ;; Registers used:
  9978 ;;		wreg, cstack
  9979 ;; Tracked objects:
  9980 ;;		On entry : 0/0
  9981 ;;		On exit  : 0/0
  9982 ;;		Unchanged: 0/0
  9983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9984 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9985 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9986 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9987 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9988 ;;Total ram usage:        0 bytes
  9989 ;; Hardware stack levels used:    1
  9990 ;; Hardware stack levels required when called:    4
  9991 ;; This function calls:
  9992 ;;		_i2cHighScl
  9993 ;;		_i2cHighSda
  9994 ;;		_i2cLowScl
  9995 ;;		_i2cLowSda
  9996 ;; This function is called by:
  9997 ;;		_DS1621_Read_Temp
  9998 ;;		_DS3231_Read_Time
  9999 ;;		_I2C_Write_Address_Read_One_Byte
 10000 ;;		_I2C_Write_Cmd_Read_One_Byte
 10001 ;; This function uses a non-reentrant model
 10002 ;;
 10003                           
 10004                           	psect	text56
 10005  0000'                    __ptext56:
 10006                           	opt stack 0
 10007  0000'                    _I2C_ReStart:
 10008                           	opt stack 25
 10009                           
 10010                           ;I2C.c: 80: i2cLowScl();
 10011                           
 10012                           ;incstack = 0
 10013  0000' EC00' F000'        	call	_i2cLowScl	;wreg free
 10014                           
 10015                           ;I2C.c: 81: i2cHighSda();
 10016  0004' EC00' F000'        	call	_i2cHighSda	;wreg free
 10017                           
 10018                           ;I2C.c: 82: i2cHighScl();
 10019  0008' EC00' F000'        	call	_i2cHighScl	;wreg free
 10020                           
 10021                           ;I2C.c: 83: i2cLowSda();
 10022  000C' EC00' F000'        	call	_i2cLowSda	;wreg free
 10023                           
 10024                           ;I2C.c: 84: i2cLowScl();
 10025  0010' EC00' F000'        	call	_i2cLowScl	;wreg free
 10026  0014' 0012               	return		;funcret
 10027  0016'                    __end_of_I2C_ReStart:
 10028                           	opt stack 0
 10029                           tblptru	equ	0xFF8
 10030                           tblptrh	equ	0xFF7
 10031                           tblptrl	equ	0xFF6
 10032                           tablat	equ	0xFF5
 10033                           prodh	equ	0xFF4
 10034                           prodl	equ	0xFF3
 10035                           intcon	equ	0xFF2
 10036                           intcon2	equ	0xFF1
 10037                           postinc0	equ	0xFEE
 10038                           wreg	equ	0xFE8
 10039                           postdec1	equ	0xFE5
 10040                           fsr1l	equ	0xFE1
 10041                           indf2	equ	0xFDF
 10042                           postinc2	equ	0xFDE
 10043                           postdec2	equ	0xFDD
 10044                           fsr2h	equ	0xFDA
 10045                           fsr2l	equ	0xFD9
 10046                           status	equ	0xFD8
 10047                           
 10048 ;; *************** function _i2cLowSda *****************
 10049 ;; Defined at:
 10050 ;;		line 101 in file "I2C.c"
 10051 ;; Parameters:    Size  Location     Type
 10052 ;;		None
 10053 ;; Auto vars:     Size  Location     Type
 10054 ;;		None
 10055 ;; Return value:  Size  Location     Type
 10056 ;;		None               void
 10057 ;; Registers used:
 10058 ;;		None
 10059 ;; Tracked objects:
 10060 ;;		On entry : 0/0
 10061 ;;		On exit  : 0/0
 10062 ;;		Unchanged: 0/0
 10063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10064 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10065 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10066 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10067 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10068 ;;Total ram usage:        0 bytes
 10069 ;; Hardware stack levels used:    1
 10070 ;; Hardware stack levels required when called:    3
 10071 ;; This function calls:
 10072 ;;		Nothing
 10073 ;; This function is called by:
 10074 ;;		_I2C_Write
 10075 ;;		_i2cAck
 10076 ;;		_I2C_Start
 10077 ;;		_I2C_ReStart
 10078 ;;		_I2C_Stop
 10079 ;; This function uses a non-reentrant model
 10080 ;;
 10081                           
 10082                           	psect	text57
 10083  0000'                    __ptext57:
 10084                           	opt stack 0
 10085  0000'                    _i2cLowSda:
 10086                           	opt stack 23
 10087                           
 10088                           ;I2C.c: 103: PORTBbits.RB5 = 0;
 10089                           
 10090                           ;incstack = 0
 10091  0000' 9A81               	bcf	3969,5,c	;volatile
 10092                           
 10093                           ;I2C.c: 104: TRISBbits.RB5 = 0;
 10094  0002' 9A93               	bcf	3987,5,c	;volatile
 10095                           
 10096                           ;I2C.c: 105: _delay((unsigned long)((2)*(8000000/4000000.0)));
 10097  0004' D000               	nop2		;2 cycle nop
 10098  0006' D000               	nop2		;2 cycle nop
 10099  0008' 0012               	return		;funcret
 10100  000A'                    __end_of_i2cLowSda:
 10101                           	opt stack 0
 10102                           tblptru	equ	0xFF8
 10103                           tblptrh	equ	0xFF7
 10104                           tblptrl	equ	0xFF6
 10105                           tablat	equ	0xFF5
 10106                           prodh	equ	0xFF4
 10107                           prodl	equ	0xFF3
 10108                           intcon	equ	0xFF2
 10109                           intcon2	equ	0xFF1
 10110                           postinc0	equ	0xFEE
 10111                           wreg	equ	0xFE8
 10112                           postdec1	equ	0xFE5
 10113                           fsr1l	equ	0xFE1
 10114                           indf2	equ	0xFDF
 10115                           postinc2	equ	0xFDE
 10116                           postdec2	equ	0xFDD
 10117                           fsr2h	equ	0xFDA
 10118                           fsr2l	equ	0xFD9
 10119                           status	equ	0xFD8
 10120                           
 10121 ;; *************** function _i2cLowScl *****************
 10122 ;; Defined at:
 10123 ;;		line 114 in file "I2C.c"
 10124 ;; Parameters:    Size  Location     Type
 10125 ;;		None
 10126 ;; Auto vars:     Size  Location     Type
 10127 ;;		None
 10128 ;; Return value:  Size  Location     Type
 10129 ;;		None               void
 10130 ;; Registers used:
 10131 ;;		None
 10132 ;; Tracked objects:
 10133 ;;		On entry : 0/0
 10134 ;;		On exit  : 0/0
 10135 ;;		Unchanged: 0/0
 10136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10137 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10138 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10139 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10140 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10141 ;;Total ram usage:        0 bytes
 10142 ;; Hardware stack levels used:    1
 10143 ;; Hardware stack levels required when called:    3
 10144 ;; This function calls:
 10145 ;;		Nothing
 10146 ;; This function is called by:
 10147 ;;		_I2C_Read
 10148 ;;		_I2C_Write
 10149 ;;		_i2cNack
 10150 ;;		_i2cAck
 10151 ;;		_I2C_Start
 10152 ;;		_I2C_ReStart
 10153 ;;		_I2C_Stop
 10154 ;; This function uses a non-reentrant model
 10155 ;;
 10156                           
 10157                           	psect	text58
 10158  0000'                    __ptext58:
 10159                           	opt stack 0
 10160  0000'                    _i2cLowScl:
 10161                           	opt stack 23
 10162                           
 10163                           ;I2C.c: 116: PORTBbits.RB4 = 0;
 10164                           
 10165                           ;incstack = 0
 10166  0000' 9881               	bcf	3969,4,c	;volatile
 10167                           
 10168                           ;I2C.c: 117: TRISBbits.RB4 = 0;
 10169  0002' 9893               	bcf	3987,4,c	;volatile
 10170                           
 10171                           ;I2C.c: 118: _delay((unsigned long)((1)*(8000000/4000000.0)));
 10172  0004' D000               	nop2		;2 cycle nop
 10173  0006' 0012               	return		;funcret
 10174  0008'                    __end_of_i2cLowScl:
 10175                           	opt stack 0
 10176                           tblptru	equ	0xFF8
 10177                           tblptrh	equ	0xFF7
 10178                           tblptrl	equ	0xFF6
 10179                           tablat	equ	0xFF5
 10180                           prodh	equ	0xFF4
 10181                           prodl	equ	0xFF3
 10182                           intcon	equ	0xFF2
 10183                           intcon2	equ	0xFF1
 10184                           postinc0	equ	0xFEE
 10185                           wreg	equ	0xFE8
 10186                           postdec1	equ	0xFE5
 10187                           fsr1l	equ	0xFE1
 10188                           indf2	equ	0xFDF
 10189                           postinc2	equ	0xFDE
 10190                           postdec2	equ	0xFDD
 10191                           fsr2h	equ	0xFDA
 10192                           fsr2l	equ	0xFD9
 10193                           status	equ	0xFD8
 10194                           
 10195 ;; *************** function _i2cHighSda *****************
 10196 ;; Defined at:
 10197 ;;		line 95 in file "I2C.c"
 10198 ;; Parameters:    Size  Location     Type
 10199 ;;		None
 10200 ;; Auto vars:     Size  Location     Type
 10201 ;;		None
 10202 ;; Return value:  Size  Location     Type
 10203 ;;		None               void
 10204 ;; Registers used:
 10205 ;;		None
 10206 ;; Tracked objects:
 10207 ;;		On entry : 0/0
 10208 ;;		On exit  : 0/0
 10209 ;;		Unchanged: 0/0
 10210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10211 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10212 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10213 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10214 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10215 ;;Total ram usage:        0 bytes
 10216 ;; Hardware stack levels used:    1
 10217 ;; Hardware stack levels required when called:    3
 10218 ;; This function calls:
 10219 ;;		Nothing
 10220 ;; This function is called by:
 10221 ;;		_I2C_Init
 10222 ;;		_I2C_Read
 10223 ;;		_I2C_Write
 10224 ;;		_i2cAck
 10225 ;;		_I2C_Start
 10226 ;;		_I2C_ReStart
 10227 ;;		_I2C_Stop
 10228 ;; This function uses a non-reentrant model
 10229 ;;
 10230                           
 10231                           	psect	text59
 10232  0000'                    __ptext59:
 10233                           	opt stack 0
 10234  0000'                    _i2cHighSda:
 10235                           	opt stack 25
 10236                           
 10237                           ;I2C.c: 97: TRISBbits.RB5 = 1;
 10238                           
 10239                           ;incstack = 0
 10240  0000' 8A93               	bsf	3987,5,c	;volatile
 10241                           
 10242                           ;I2C.c: 98: _delay((unsigned long)((2)*(8000000/4000000.0)));
 10243  0002' D000               	nop2		;2 cycle nop
 10244  0004' D000               	nop2		;2 cycle nop
 10245  0006' 0012               	return		;funcret
 10246  0008'                    __end_of_i2cHighSda:
 10247                           	opt stack 0
 10248                           tblptru	equ	0xFF8
 10249                           tblptrh	equ	0xFF7
 10250                           tblptrl	equ	0xFF6
 10251                           tablat	equ	0xFF5
 10252                           prodh	equ	0xFF4
 10253                           prodl	equ	0xFF3
 10254                           intcon	equ	0xFF2
 10255                           intcon2	equ	0xFF1
 10256                           postinc0	equ	0xFEE
 10257                           wreg	equ	0xFE8
 10258                           postdec1	equ	0xFE5
 10259                           fsr1l	equ	0xFE1
 10260                           indf2	equ	0xFDF
 10261                           postinc2	equ	0xFDE
 10262                           postdec2	equ	0xFDD
 10263                           fsr2h	equ	0xFDA
 10264                           fsr2l	equ	0xFD9
 10265                           status	equ	0xFD8
 10266                           
 10267 ;; *************** function _i2cHighScl *****************
 10268 ;; Defined at:
 10269 ;;		line 108 in file "I2C.c"
 10270 ;; Parameters:    Size  Location     Type
 10271 ;;		None
 10272 ;; Auto vars:     Size  Location     Type
 10273 ;;		None
 10274 ;; Return value:  Size  Location     Type
 10275 ;;		None               void
 10276 ;; Registers used:
 10277 ;;		wreg
 10278 ;; Tracked objects:
 10279 ;;		On entry : 0/0
 10280 ;;		On exit  : 0/0
 10281 ;;		Unchanged: 0/0
 10282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10283 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10284 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10285 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10286 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10287 ;;Total ram usage:        0 bytes
 10288 ;; Hardware stack levels used:    1
 10289 ;; Hardware stack levels required when called:    3
 10290 ;; This function calls:
 10291 ;;		Nothing
 10292 ;; This function is called by:
 10293 ;;		_I2C_Init
 10294 ;;		_I2C_Read
 10295 ;;		_I2C_Write
 10296 ;;		_i2cNack
 10297 ;;		_i2cAck
 10298 ;;		_I2C_Start
 10299 ;;		_I2C_ReStart
 10300 ;;		_I2C_Stop
 10301 ;; This function uses a non-reentrant model
 10302 ;;
 10303                           
 10304                           	psect	text60
 10305  0000'                    __ptext60:
 10306                           	opt stack 0
 10307  0000'                    _i2cHighScl:
 10308                           	opt stack 25
 10309                           
 10310                           ;I2C.c: 110: TRISBbits.RB4 = 1;
 10311                           
 10312                           ;incstack = 0
 10313  0000' 8893               	bsf	3987,4,c	;volatile
 10314                           
 10315                           ;I2C.c: 111: _delay((unsigned long)((10)*(8000000/4000000.0)));
 10316  0002' 0E06               	movlw	6
 10317  0004'                    u5377:
 10318  0004' 2EE8               	decfsz	wreg,f,c
 10319  0006' D7FE               	goto	u5377
 10320  0008' D000               	nop2		;nop
 10321  000A' 0012               	return		;funcret
 10322  000C'                    __end_of_i2cHighScl:
 10323                           	opt stack 0
 10324                           tblptru	equ	0xFF8
 10325                           tblptrh	equ	0xFF7
 10326                           tblptrl	equ	0xFF6
 10327                           tablat	equ	0xFF5
 10328                           prodh	equ	0xFF4
 10329                           prodl	equ	0xFF3
 10330                           intcon	equ	0xFF2
 10331                           intcon2	equ	0xFF1
 10332                           postinc0	equ	0xFEE
 10333                           wreg	equ	0xFE8
 10334                           postdec1	equ	0xFE5
 10335                           fsr1l	equ	0xFE1
 10336                           indf2	equ	0xFDF
 10337                           postinc2	equ	0xFDE
 10338                           postdec2	equ	0xFDD
 10339                           fsr2h	equ	0xFDA
 10340                           fsr2l	equ	0xFD9
 10341                           status	equ	0xFD8
 10342                           
 10343 ;; *************** function _chkisr *****************
 10344 ;; Defined at:
 10345 ;;		line 29 in file "Interrupt.c"
 10346 ;; Parameters:    Size  Location     Type
 10347 ;;		None
 10348 ;; Auto vars:     Size  Location     Type
 10349 ;;		None
 10350 ;; Return value:  Size  Location     Type
 10351 ;;		None               void
 10352 ;; Registers used:
 10353 ;;		wreg, status,2, status,0, cstack
 10354 ;; Tracked objects:
 10355 ;;		On entry : 0/0
 10356 ;;		On exit  : 0/0
 10357 ;;		Unchanged: 0/0
 10358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10359 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10360 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10361 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10362 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10363 ;;Total ram usage:       14 bytes
 10364 ;; Hardware stack levels used:    1
 10365 ;; Hardware stack levels required when called:    2
 10366 ;; This function calls:
 10367 ;;		_INT0_isr
 10368 ;;		_TIMER1_isr
 10369 ;; This function is called by:
 10370 ;;		Interrupt level 2
 10371 ;; This function uses a non-reentrant model
 10372 ;;
 10373                           
 10374                           	psect	intcode
 10375  0000'                    __pintcode:
 10376                           	opt stack 0
 10377  0000'                    _chkisr:
 10378                           	opt stack 20
 10379                           
 10380                           ;incstack = 0
 10381  0000' CFFA F002'         	movff	pclath,??_chkisr
 10382  0004' CFFB F003'         	movff	pclatu,??_chkisr+1
 10383  0008' CFE9 F004'         	movff	fsr0l,??_chkisr+2
 10384  000C' ED00' F000'        	call	int_func,f	;refresh shadow registers
 10385                           pclatu	equ	0xFFB
 10386                           pclath	equ	0xFFA
 10387                           tblptru	equ	0xFF8
 10388                           tblptrh	equ	0xFF7
 10389                           tblptrl	equ	0xFF6
 10390                           tablat	equ	0xFF5
 10391                           prodh	equ	0xFF4
 10392                           prodl	equ	0xFF3
 10393                           intcon	equ	0xFF2
 10394                           intcon2	equ	0xFF1
 10395                           postinc0	equ	0xFEE
 10396                           fsr0l	equ	0xFE9
 10397                           wreg	equ	0xFE8
 10398                           postdec1	equ	0xFE5
 10399                           fsr1l	equ	0xFE1
 10400                           indf2	equ	0xFDF
 10401                           postinc2	equ	0xFDE
 10402                           postdec2	equ	0xFDD
 10403                           fsr2h	equ	0xFDA
 10404                           fsr2l	equ	0xFD9
 10405                           status	equ	0xFD8
 10406                           
 10407                           	psect	intcode_body
 10408  0000'                    __pintcode_body:
 10409                           	opt stack 20
 10410  0000'                    int_func:
 10411                           	opt stack 20
 10412  0000' 0006               	pop		; remove dummy address from shadow register refresh
 10413  0002' CFEA F005'         	movff	fsr0h,??_chkisr+3
 10414  0006' CFE1 F006'         	movff	fsr1l,??_chkisr+4
 10415  000A' CFE2 F007'         	movff	fsr1h,??_chkisr+5
 10416  000E' CFD9 F008'         	movff	fsr2l,??_chkisr+6
 10417  0012' CFDA F009'         	movff	fsr2h,??_chkisr+7
 10418  0016' CFF3 F00A'         	movff	prodl,??_chkisr+8
 10419  001A' CFF4 F00B'         	movff	prodh,??_chkisr+9
 10420  001E' CFF6 F00C'         	movff	tblptrl,??_chkisr+10
 10421  0022' CFF7 F00D'         	movff	tblptrh,??_chkisr+11
 10422  0026' CFF8 F00E'         	movff	tblptru,??_chkisr+12
 10423  002A' CFF5 F00F'         	movff	tablat,??_chkisr+13
 10424                           
 10425                           ;Interrupt.c: 31: if (PIR1bits.TMR1IF == 1) TIMER1_isr();
 10426  002E' A09E               	btfss	3998,0,c	;volatile
 10427  0030' D003               	goto	i2l4695
 10428  0032' EC00' F000'        	call	_TIMER1_isr	;wreg free
 10429  0036' D000               	goto	i2l4695
 10430  0038'                    i2l4695:
 10431                           
 10432                           ;Interrupt.c: 32: if (INTCONbits.INT0IF == 1) INT0_isr();
 10433  0038' A2F2               	btfss	intcon,1,c	;volatile
 10434  003A' D003               	goto	i2l239
 10435  003C' EC00' F000'        	call	_INT0_isr	;wreg free
 10436  0040' D000               	goto	i2l239
 10437  0042'                    i2l239:
 10438  0042' C00F' FFF5         	movff	??_chkisr+13,tablat
 10439  0046' C00E' FFF8         	movff	??_chkisr+12,tblptru
 10440  004A' C00D' FFF7         	movff	??_chkisr+11,tblptrh
 10441  004E' C00C' FFF6         	movff	??_chkisr+10,tblptrl
 10442  0052' C00B' FFF4         	movff	??_chkisr+9,prodh
 10443  0056' C00A' FFF3         	movff	??_chkisr+8,prodl
 10444  005A' C009' FFDA         	movff	??_chkisr+7,fsr2h
 10445  005E' C008' FFD9         	movff	??_chkisr+6,fsr2l
 10446  0062' C007' FFE2         	movff	??_chkisr+5,fsr1h
 10447  0066' C006' FFE1         	movff	??_chkisr+4,fsr1l
 10448  006A' C005' FFEA         	movff	??_chkisr+3,fsr0h
 10449  006E' C004' FFE9         	movff	??_chkisr+2,fsr0l
 10450  0072' C003' FFFB         	movff	??_chkisr+1,pclatu
 10451  0076' C002' FFFA         	movff	??_chkisr,pclath
 10452  007A' 0011               	retfie		f
 10453  007C'                    __end_of_chkisr:
 10454                           	opt stack 0
 10455                           pclatu	equ	0xFFB
 10456                           pclath	equ	0xFFA
 10457                           tblptru	equ	0xFF8
 10458                           tblptrh	equ	0xFF7
 10459                           tblptrl	equ	0xFF6
 10460                           tablat	equ	0xFF5
 10461                           prodh	equ	0xFF4
 10462                           prodl	equ	0xFF3
 10463                           intcon	equ	0xFF2
 10464                           intcon2	equ	0xFF1
 10465                           postinc0	equ	0xFEE
 10466                           fsr0h	equ	0xFEA
 10467                           fsr0l	equ	0xFE9
 10468                           wreg	equ	0xFE8
 10469                           postdec1	equ	0xFE5
 10470                           fsr1h	equ	0xFE2
 10471                           fsr1l	equ	0xFE1
 10472                           indf2	equ	0xFDF
 10473                           postinc2	equ	0xFDE
 10474                           postdec2	equ	0xFDD
 10475                           fsr2h	equ	0xFDA
 10476                           fsr2l	equ	0xFD9
 10477                           status	equ	0xFD8
 10478                           
 10479 ;; *************** function _TIMER1_isr *****************
 10480 ;; Defined at:
 10481 ;;		line 35 in file "Interrupt.c"
 10482 ;; Parameters:    Size  Location     Type
 10483 ;;		None
 10484 ;; Auto vars:     Size  Location     Type
 10485 ;;		None
 10486 ;; Return value:  Size  Location     Type
 10487 ;;		None               void
 10488 ;; Registers used:
 10489 ;;		wreg, status,2
 10490 ;; Tracked objects:
 10491 ;;		On entry : 0/0
 10492 ;;		On exit  : 0/0
 10493 ;;		Unchanged: 0/0
 10494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10495 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10496 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10498 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10499 ;;Total ram usage:        0 bytes
 10500 ;; Hardware stack levels used:    1
 10501 ;; This function calls:
 10502 ;;		Nothing
 10503 ;; This function is called by:
 10504 ;;		_chkisr
 10505 ;; This function uses a non-reentrant model
 10506 ;;
 10507                           
 10508                           	psect	text62
 10509  0000'                    __ptext62:
 10510                           	opt stack 0
 10511  0000'                    _TIMER1_isr:
 10512                           	opt stack 21
 10513                           
 10514                           ;Interrupt.c: 37: Nec_state = 0;
 10515                           
 10516                           ;incstack = 0
 10517  0000' 0E00               	movlw	0
 10518  0002' 6E10'              	movwf	_Nec_state,c
 10519                           
 10520                           ;Interrupt.c: 38: INTCON2bits.INTEDG0 = 0;
 10521  0004' 9CF1               	bcf	intcon2,6,c	;volatile
 10522                           
 10523                           ;Interrupt.c: 39: T1CONbits.TMR1ON = 0;
 10524  0006' 90CD               	bcf	4045,0,c	;volatile
 10525                           
 10526                           ;Interrupt.c: 40: PIR1bits.TMR1IF = 0;
 10527  0008' 909E               	bcf	3998,0,c	;volatile
 10528  000A' 0012               	return		;funcret
 10529  000C'                    __end_of_TIMER1_isr:
 10530                           	opt stack 0
 10531                           pclatu	equ	0xFFB
 10532                           pclath	equ	0xFFA
 10533                           tblptru	equ	0xFF8
 10534                           tblptrh	equ	0xFF7
 10535                           tblptrl	equ	0xFF6
 10536                           tablat	equ	0xFF5
 10537                           prodh	equ	0xFF4
 10538                           prodl	equ	0xFF3
 10539                           intcon	equ	0xFF2
 10540                           intcon2	equ	0xFF1
 10541                           postinc0	equ	0xFEE
 10542                           fsr0h	equ	0xFEA
 10543                           fsr0l	equ	0xFE9
 10544                           wreg	equ	0xFE8
 10545                           postdec1	equ	0xFE5
 10546                           fsr1h	equ	0xFE2
 10547                           fsr1l	equ	0xFE1
 10548                           indf2	equ	0xFDF
 10549                           postinc2	equ	0xFDE
 10550                           postdec2	equ	0xFDD
 10551                           fsr2h	equ	0xFDA
 10552                           fsr2l	equ	0xFD9
 10553                           status	equ	0xFD8
 10554                           
 10555 ;; *************** function _INT0_isr *****************
 10556 ;; Defined at:
 10557 ;;		line 49 in file "Interrupt.c"
 10558 ;; Parameters:    Size  Location     Type
 10559 ;;		None
 10560 ;; Auto vars:     Size  Location     Type
 10561 ;;		None
 10562 ;; Return value:  Size  Location     Type
 10563 ;;		None               void
 10564 ;; Registers used:
 10565 ;;		wreg, status,2, status,0, cstack
 10566 ;; Tracked objects:
 10567 ;;		On entry : 0/0
 10568 ;;		On exit  : 0/0
 10569 ;;		Unchanged: 0/0
 10570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10571 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10572 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10573 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10574 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10575 ;;Total ram usage:        2 bytes
 10576 ;; Hardware stack levels used:    1
 10577 ;; Hardware stack levels required when called:    1
 10578 ;; This function calls:
 10579 ;;		_force_nec_state0
 10580 ;; This function is called by:
 10581 ;;		_chkisr
 10582 ;; This function uses a non-reentrant model
 10583 ;;
 10584                           
 10585                           	psect	text63
 10586  0000'                    __ptext63:
 10587                           	opt stack 0
 10588  0000'                    _INT0_isr:
 10589                           	opt stack 20
 10590                           
 10591                           ;Interrupt.c: 52: INTCONbits.INT0IF = 0;
 10592                           
 10593                           ;incstack = 0
 10594  0000' 92F2               	bcf	intcon,1,c	;volatile
 10595                           
 10596                           ;Interrupt.c: 53: if (Nec_state != 0)
 10597  0002' 5010'              	movf	_Nec_state,w,c
 10598  0004' B4D8               	btfsc	status,2,c
 10599  0006' D0AB               	goto	i2l4285
 10600                           
 10601                           ;Interrupt.c: 54: {
 10602                           ;Interrupt.c: 55: Time_Elapsed = (TMR1H << 8) | TMR1L;
 10603  0008' 50CE               	movf	4046,w,c	;volatile
 10604  000A' CFCF F000'         	movff	4047,??_INT0_isr	;volatile
 10605  000E' 6A00'              	clrf	(??_INT0_isr+1)& (0+255),c
 10606  0010' C000' F001'        	movff	??_INT0_isr,??_INT0_isr+1
 10607  0014' 6A00'              	clrf	??_INT0_isr,c
 10608  0016' 1000'              	iorwf	??_INT0_isr,w,c
 10609  0018' 6E04'              	movwf	_Time_Elapsed,c
 10610  001A' 5001'              	movf	??_INT0_isr+1,w,c
 10611  001C' 6E05'              	movwf	_Time_Elapsed+1,c
 10612                           
 10613                           ;Interrupt.c: 56: TMR1H = 0;
 10614  001E' 0E00               	movlw	0
 10615  0020' 6ECF               	movwf	4047,c	;volatile
 10616                           
 10617                           ;Interrupt.c: 57: TMR1L = 0;
 10618  0022' 0E00               	movlw	0
 10619  0024' 6ECE               	movwf	4046,c	;volatile
 10620                           
 10621                           ;Interrupt.c: 58: }
 10622                           ;Interrupt.c: 60: switch(Nec_state)
 10623  0026' D09B               	goto	i2l4285
 10624  0028'                    i2l4219:
 10625                           
 10626                           ;Interrupt.c: 63: {
 10627                           ;Interrupt.c: 64: TMR1H = 0;
 10628  0028' 0E00               	movlw	0
 10629  002A' 6ECF               	movwf	4047,c	;volatile
 10630                           
 10631                           ;Interrupt.c: 65: TMR1L = 0;
 10632  002C' 0E00               	movlw	0
 10633  002E' 6ECE               	movwf	4046,c	;volatile
 10634                           
 10635                           ;Interrupt.c: 66: PIR1bits.TMR1IF = 0;
 10636  0030' 909E               	bcf	3998,0,c	;volatile
 10637                           
 10638                           ;Interrupt.c: 67: T1CON= 0x90;
 10639  0032' 0E90               	movlw	144
 10640  0034' 6ECD               	movwf	4045,c	;volatile
 10641                           
 10642                           ;Interrupt.c: 68: T1CONbits.TMR1ON = 1;
 10643  0036' 80CD               	bsf	4045,0,c	;volatile
 10644                           
 10645                           ;Interrupt.c: 69: bit_count = 0;
 10646  0038' 0E00               	movlw	0
 10647  003A' 6E16'              	movwf	_bit_count,c
 10648                           
 10649                           ;Interrupt.c: 70: Nec_code = 0;
 10650  003C' 0E00               	movlw	0
 10651  003E' 0100               	movlb	0	; () banked
 10652  0040' 6F00'              	movwf	_Nec_code& (0+255),b
 10653  0042' 0E00               	movlw	0
 10654  0044' 6F00'              	movwf	(_Nec_code+1)& (0+255),b
 10655  0046' 0E00               	movlw	0
 10656  0048' 6F00'              	movwf	(_Nec_code+2)& (0+255),b
 10657  004A' 0E00               	movlw	0
 10658  004C' 6F00'              	movwf	(_Nec_code+3)& (0+255),b
 10659                           
 10660                           ;Interrupt.c: 71: Nec_state = 1;
 10661  004E' 0E01               	movlw	1
 10662  0050' 6E10'              	movwf	_Nec_state,c
 10663  0052' D083               	goto	i2l4279
 10664                           
 10665                           ; BSR set to: 0
 10666                           ;Interrupt.c: 73: return;
 10667                           
 10668                           ; BSR set to: 0
 10669                           ;Interrupt.c: 72: INTCON2bits.INTEDG0 = 1;
 10670  0054' D095               	goto	i2l251
 10671  0056'                    i2l4229:
 10672                           
 10673                           ;Interrupt.c: 77: {
 10674                           ;Interrupt.c: 78: if (Time_Elapsed > 8500 && Time_Elapsed < 9500)
 10675  0056' 0E35               	movlw	53
 10676  0058' 5C04'              	subwf	_Time_Elapsed,w,c
 10677  005A' 0E21               	movlw	33
 10678  005C' 5805'              	subwfb	_Time_Elapsed+1,w,c
 10679  005E' A0D8               	btfss	status,0,c
 10680  0060' D009               	goto	i2l4235
 10681  0062' 0E1C               	movlw	28
 10682  0064' 5C04'              	subwf	_Time_Elapsed,w,c
 10683  0066' 0E25               	movlw	37
 10684  0068' 5805'              	subwfb	_Time_Elapsed+1,w,c
 10685  006A' B0D8               	btfsc	status,0,c
 10686  006C' D003               	goto	i2l4235
 10687                           
 10688                           ;Interrupt.c: 79: {
 10689                           ;Interrupt.c: 80: Nec_state = 2;
 10690  006E' 0E02               	movlw	2
 10691  0070' 6E10'              	movwf	_Nec_state,c
 10692                           
 10693                           ;Interrupt.c: 81: }
 10694  0072' D02A               	goto	i2l4261
 10695  0074'                    i2l4235:
 10696                           
 10697                           ;Interrupt.c: 82: else
 10698                           ;Interrupt.c: 83: {
 10699                           ;Interrupt.c: 84: force_nec_state0();
 10700  0074' EC00' F000'        	call	_force_nec_state0	;wreg free
 10701  0078' D027               	goto	i2l4261
 10702  007A' D026               	goto	i2l4261
 10703                           
 10704                           ;Interrupt.c: 87: return;
 10705                           
 10706                           ;Interrupt.c: 85: }
 10707                           ;Interrupt.c: 86: INTCON2bits.INTEDG0 = 0;
 10708  007C' D081               	goto	i2l251
 10709  007E'                    i2l4241:
 10710                           
 10711                           ;Interrupt.c: 91: {
 10712                           ;Interrupt.c: 92: if (Time_Elapsed > 4000 && Time_Elapsed < 5000 )
 10713  007E' 0EA1               	movlw	161
 10714  0080' 5C04'              	subwf	_Time_Elapsed,w,c
 10715  0082' 0E0F               	movlw	15
 10716  0084' 5805'              	subwfb	_Time_Elapsed+1,w,c
 10717  0086' A0D8               	btfss	status,0,c
 10718  0088' D009               	goto	i2l4247
 10719  008A' 0E88               	movlw	136
 10720  008C' 5C04'              	subwf	_Time_Elapsed,w,c
 10721  008E' 0E13               	movlw	19
 10722  0090' 5805'              	subwfb	_Time_Elapsed+1,w,c
 10723  0092' B0D8               	btfsc	status,0,c
 10724  0094' D003               	goto	i2l4247
 10725  0096'                    
 10726                           ;Interrupt.c: 93: {
 10727                           ;Interrupt.c: 94: Nec_state = 3;
 10728  0096' 0E03               	movlw	3
 10729  0098' 6E10'              	movwf	_Nec_state,c
 10730                           
 10731                           ;Interrupt.c: 95: }
 10732  009A' D05F               	goto	i2l4279
 10733  009C'                    i2l4247:
 10734                           
 10735                           ;Interrupt.c: 96: else
 10736                           ;Interrupt.c: 97: {
 10737                           ;Interrupt.c: 98: force_nec_state0();
 10738  009C' EC00' F000'        	call	_force_nec_state0	;wreg free
 10739  00A0' D05C               	goto	i2l4279
 10740  00A2' D05B               	goto	i2l4279
 10741                           
 10742                           ;Interrupt.c: 101: return;
 10743                           
 10744                           ;Interrupt.c: 99: }
 10745                           ;Interrupt.c: 100: INTCON2bits.INTEDG0 = 1;
 10746  00A4' D06D               	goto	i2l251
 10747  00A6'                    i2l4253:
 10748                           
 10749                           ;Interrupt.c: 105: {
 10750                           ;Interrupt.c: 106: if (Time_Elapsed > 400 && Time_Elapsed < 700)
 10751  00A6' 0E91               	movlw	145
 10752  00A8' 5C04'              	subwf	_Time_Elapsed,w,c
 10753  00AA' 0E01               	movlw	1
 10754  00AC' 5805'              	subwfb	_Time_Elapsed+1,w,c
 10755  00AE' A0D8               	btfss	status,0,c
 10756  00B0' D008               	goto	i2l4259
 10757  00B2' 0EBC               	movlw	188
 10758  00B4' 5C04'              	subwf	_Time_Elapsed,w,c
 10759  00B6' 0E02               	movlw	2
 10760  00B8' 5805'              	subwfb	_Time_Elapsed+1,w,c
 10761  00BA' B0D8               	btfsc	status,0,c
 10762  00BC' D002               	goto	i2l4259
 10763                           
 10764                           ;Interrupt.c: 107: {
 10765                           ;Interrupt.c: 108: Nec_state = 4;
 10766  00BE' 0E04               	movlw	4
 10767  00C0' D7D7               	goto	L4
 10768  00C2'                    i2l4259:
 10769                           
 10770                           ;Interrupt.c: 110: else
 10771                           ;Interrupt.c: 111: {
 10772                           ;Interrupt.c: 112: force_nec_state0();
 10773  00C2' EC00' F000'        	call	_force_nec_state0	;wreg free
 10774  00C6' D000               	goto	i2l4261
 10775  00C8'                    i2l4261:
 10776                           
 10777                           ;Interrupt.c: 113: }
 10778                           ;Interrupt.c: 114: INTCON2bits.INTEDG0 = 0;
 10779  00C8' 9CF1               	bcf	intcon2,6,c	;volatile
 10780                           
 10781                           ;Interrupt.c: 115: return;
 10782  00CA' D05A               	goto	i2l251
 10783  00CC'                    i2l4265:
 10784                           
 10785                           ;Interrupt.c: 119: {
 10786                           ;Interrupt.c: 120: if (Time_Elapsed > 400 && Time_Elapsed < 1800)
 10787  00CC' 0E91               	movlw	145
 10788  00CE' 5C04'              	subwf	_Time_Elapsed,w,c
 10789  00D0' 0E01               	movlw	1
 10790  00D2' 5805'              	subwfb	_Time_Elapsed+1,w,c
 10791  00D4' A0D8               	btfss	status,0,c
 10792  00D6' D03E               	goto	i2l4277
 10793  00D8' 0E08               	movlw	8
 10794  00DA' 5C04'              	subwf	_Time_Elapsed,w,c
 10795  00DC' 0E07               	movlw	7
 10796  00DE' 5805'              	subwfb	_Time_Elapsed+1,w,c
 10797  00E0' B0D8               	btfsc	status,0,c
 10798  00E2' D038               	goto	i2l4277
 10799                           
 10800                           ;Interrupt.c: 121: {
 10801                           ;Interrupt.c: 122: Nec_code = Nec_code << 1;
 10802  00E4' 90D8               	bcf	status,0,c
 10803  00E6' 0100               	movlb	0	; () banked
 10804  00E8' 3500'              	rlcf	_Nec_code& (0+255),w,b
 10805  00EA' 0100               	movlb	0	; () banked
 10806  00EC' 6F00'              	movwf	_Nec_code& (0+255),b
 10807  00EE' 0100               	movlb	0	; () banked
 10808  00F0' 3500'              	rlcf	(_Nec_code+1)& (0+255),w,b
 10809  00F2' 0100               	movlb	0	; () banked
 10810  00F4' 6F00'              	movwf	(_Nec_code+1)& (0+255),b
 10811  00F6' 0100               	movlb	0	; () banked
 10812  00F8' 3500'              	rlcf	(_Nec_code+2)& (0+255),w,b
 10813  00FA' 0100               	movlb	0	; () banked
 10814  00FC' 6F00'              	movwf	(_Nec_code+2)& (0+255),b
 10815  00FE' 0100               	movlb	0	; () banked
 10816  0100' 3500'              	rlcf	(_Nec_code+3)& (0+255),w,b
 10817  0102' 0100               	movlb	0	; () banked
 10818  0104' 6F00'              	movwf	(_Nec_code+3)& (0+255),b
 10819                           
 10820                           ;Interrupt.c: 123: if (Time_Elapsed > 1000)
 10821  0106' 0EE9               	movlw	233
 10822  0108' 5C04'              	subwf	_Time_Elapsed,w,c
 10823  010A' 0E03               	movlw	3
 10824  010C' 5805'              	subwfb	_Time_Elapsed+1,w,c
 10825  010E' A0D8               	btfss	status,0,c
 10826  0110' D014               	goto	i2l263
 10827                           
 10828                           ; BSR set to: 0
 10829                           ;Interrupt.c: 124: {
 10830                           ;Interrupt.c: 125: Nec_code = Nec_code + 1;
 10831  0112' 0E01               	movlw	1
 10832  0114' 0100               	movlb	0	; () banked
 10833  0116' 2500'              	addwf	_Nec_code& (0+255),w,b
 10834  0118' 0100               	movlb	0	; () banked
 10835  011A' 6F00'              	movwf	_Nec_code& (0+255),b
 10836  011C' 0E00               	movlw	0
 10837  011E' 0100               	movlb	0	; () banked
 10838  0120' 2100'              	addwfc	(_Nec_code+1)& (0+255),w,b
 10839  0122' 0100               	movlb	0	; () banked
 10840  0124' 6F00'              	movwf	(_Nec_code+1)& (0+255),b
 10841  0126' 0E00               	movlw	0
 10842  0128' 0100               	movlb	0	; () banked
 10843  012A' 2100'              	addwfc	(_Nec_code+2)& (0+255),w,b
 10844  012C' 0100               	movlb	0	; () banked
 10845  012E' 6F00'              	movwf	(_Nec_code+2)& (0+255),b
 10846  0130' 0E00               	movlw	0
 10847  0132' 0100               	movlb	0	; () banked
 10848  0134' 2100'              	addwfc	(_Nec_code+3)& (0+255),w,b
 10849  0136' 0100               	movlb	0	; () banked
 10850  0138' 6F00'              	movwf	(_Nec_code+3)& (0+255),b
 10851  013A'                    i2l263:
 10852                           
 10853                           ; BSR set to: 0
 10854                           ;Interrupt.c: 126: }
 10855                           ;Interrupt.c: 127: bit_count = bit_count + 1;
 10856  013A' 2816'              	incf	_bit_count,w,c
 10857  013C' 6E16'              	movwf	_bit_count,c
 10858                           
 10859                           ;Interrupt.c: 128: if (bit_count > 31)
 10860  013E' 0E1F               	movlw	31
 10861  0140' 6416'              	cpfsgt	_bit_count,c
 10862  0142' D7A9               	goto	L5
 10863                           
 10864                           ; BSR set to: 0
 10865                           ;Interrupt.c: 129: {
 10866                           ;Interrupt.c: 130: nec_ok = 1;
 10867  0144' 0E00               	movlw	0
 10868  0146' 6E07'              	movwf	_nec_ok+1,c
 10869  0148' 0E01               	movlw	1
 10870  014A' 6E06'              	movwf	_nec_ok,c
 10871                           
 10872                           ; BSR set to: 0
 10873                           ;Interrupt.c: 131: INTCONbits.INT0IE = 0;
 10874  014C' 98F2               	bcf	intcon,4,c	;volatile
 10875                           
 10876                           ;Interrupt.c: 132: Nec_state = 0;
 10877  014E' 0E00               	movlw	0
 10878  0150' 6E10'              	movwf	_Nec_state,c
 10879  0152' D7A1               	goto	L5
 10880  0154'                    i2l4277:
 10881                           
 10882                           ;Interrupt.c: 136: else
 10883                           ;Interrupt.c: 137: {
 10884                           ;Interrupt.c: 138: force_nec_state0();
 10885  0154' EC00' F000'        	call	_force_nec_state0	;wreg free
 10886  0158' D000               	goto	i2l4279
 10887  015A'                    i2l4279:
 10888                           
 10889                           ;Interrupt.c: 139: }
 10890                           ;Interrupt.c: 140: INTCON2bits.INTEDG0 = 1;
 10891  015A' 8CF1               	bsf	intcon2,6,c	;volatile
 10892                           
 10893                           ;Interrupt.c: 142: }
 10894                           ;Interrupt.c: 143: }
 10895                           
 10896                           ;Interrupt.c: 141: return;
 10897  015C' D011               	goto	i2l251
 10898  015E'                    i2l4285:
 10899  015E' 5010'              	movf	_Nec_state,w,c
 10900                           
 10901                           ; Switch size 1, requested type "space"
 10902                           ; Number of cases is 5, Range of values is 0 to 4
 10903                           ; switch strategies available:
 10904                           ; Name         Instructions Cycles
 10905                           ; simple_byte           16     9 (average)
 10906                           ;	Chosen strategy is simple_byte
 10907  0160' 0A00               	xorlw	0	; case 0
 10908  0162' B4D8               	btfsc	status,2,c
 10909  0164' D761               	goto	i2l4219
 10910  0166' 0A01               	xorlw	1	; case 1
 10911  0168' B4D8               	btfsc	status,2,c
 10912  016A' D775               	goto	i2l4229
 10913  016C' 0A03               	xorlw	3	; case 2
 10914  016E' B4D8               	btfsc	status,2,c
 10915  0170' D786               	goto	i2l4241
 10916  0172' 0A01               	xorlw	1	; case 3
 10917  0174' B4D8               	btfsc	status,2,c
 10918  0176' D797               	goto	i2l4253
 10919  0178' 0A07               	xorlw	7	; case 4
 10920  017A' B4D8               	btfsc	status,2,c
 10921  017C' D7A7               	goto	i2l4265
 10922  017E' D000               	goto	i2l251
 10923  0180'                    i2l251:
 10924  0180' 0012               	return		;funcret
 10925  0182'                    __end_of_INT0_isr:
 10926                           	opt stack 0
 10927                           pclatu	equ	0xFFB
 10928                           pclath	equ	0xFFA
 10929                           tblptru	equ	0xFF8
 10930                           tblptrh	equ	0xFF7
 10931                           tblptrl	equ	0xFF6
 10932                           tablat	equ	0xFF5
 10933                           prodh	equ	0xFF4
 10934                           prodl	equ	0xFF3
 10935                           intcon	equ	0xFF2
 10936                           intcon2	equ	0xFF1
 10937                           postinc0	equ	0xFEE
 10938                           fsr0h	equ	0xFEA
 10939                           fsr0l	equ	0xFE9
 10940                           wreg	equ	0xFE8
 10941                           postdec1	equ	0xFE5
 10942                           fsr1h	equ	0xFE2
 10943                           fsr1l	equ	0xFE1
 10944                           indf2	equ	0xFDF
 10945                           postinc2	equ	0xFDE
 10946                           postdec2	equ	0xFDD
 10947                           fsr2h	equ	0xFDA
 10948                           fsr2l	equ	0xFD9
 10949                           status	equ	0xFD8
 10950                           
 10951 ;; *************** function _force_nec_state0 *****************
 10952 ;; Defined at:
 10953 ;;		line 43 in file "Interrupt.c"
 10954 ;; Parameters:    Size  Location     Type
 10955 ;;		None
 10956 ;; Auto vars:     Size  Location     Type
 10957 ;;		None
 10958 ;; Return value:  Size  Location     Type
 10959 ;;		None               void
 10960 ;; Registers used:
 10961 ;;		wreg, status,2
 10962 ;; Tracked objects:
 10963 ;;		On entry : 0/0
 10964 ;;		On exit  : 0/0
 10965 ;;		Unchanged: 0/0
 10966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10967 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10968 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10969 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10970 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10971 ;;Total ram usage:        0 bytes
 10972 ;; Hardware stack levels used:    1
 10973 ;; This function calls:
 10974 ;;		Nothing
 10975 ;; This function is called by:
 10976 ;;		_INT0_isr
 10977 ;; This function uses a non-reentrant model
 10978 ;;
 10979                           
 10980                           	psect	text64
 10981  0000'                    __ptext64:
 10982                           	opt stack 0
 10983  0000'                    _force_nec_state0:
 10984                           	opt stack 20
 10985                           
 10986                           ;Interrupt.c: 45: Nec_state=0;
 10987                           
 10988                           ;incstack = 0
 10989  0000' 0E00               	movlw	0
 10990  0002' 6E10'              	movwf	_Nec_state,c
 10991                           
 10992                           ;Interrupt.c: 46: T1CONbits.TMR1ON = 0;
 10993  0004' 90CD               	bcf	4045,0,c	;volatile
 10994  0006' 0012               	return		;funcret
 10995  0008'                    __end_of_force_nec_state0:
 10996                           	opt stack 0
 10997                           pclatu	equ	0xFFB
 10998                           pclath	equ	0xFFA
 10999                           tblptru	equ	0xFF8
 11000                           tblptrh	equ	0xFF7
 11001                           tblptrl	equ	0xFF6
 11002                           tablat	equ	0xFF5
 11003                           prodh	equ	0xFF4
 11004                           prodl	equ	0xFF3
 11005                           intcon	equ	0xFF2
 11006                           intcon2	equ	0xFF1
 11007                           postinc0	equ	0xFEE
 11008                           fsr0h	equ	0xFEA
 11009                           fsr0l	equ	0xFE9
 11010                           wreg	equ	0xFE8
 11011                           postdec1	equ	0xFE5
 11012                           fsr1h	equ	0xFE2
 11013                           fsr1l	equ	0xFE1
 11014                           indf2	equ	0xFDF
 11015                           postinc2	equ	0xFDE
 11016                           postdec2	equ	0xFDD
 11017                           fsr2h	equ	0xFDA
 11018                           fsr2l	equ	0xFD9
 11019                           status	equ	0xFD8
 11020                           pclatu	equ	0xFFB
 11021                           pclath	equ	0xFFA
 11022                           tblptru	equ	0xFF8
 11023                           tblptrh	equ	0xFF7
 11024                           tblptrl	equ	0xFF6
 11025                           tablat	equ	0xFF5
 11026                           prodh	equ	0xFF4
 11027                           prodl	equ	0xFF3
 11028                           intcon	equ	0xFF2
 11029                           intcon2	equ	0xFF1
 11030                           postinc0	equ	0xFEE
 11031                           fsr0h	equ	0xFEA
 11032                           fsr0l	equ	0xFE9
 11033                           wreg	equ	0xFE8
 11034                           postdec1	equ	0xFE5
 11035                           fsr1h	equ	0xFE2
 11036                           fsr1l	equ	0xFE1
 11037                           indf2	equ	0xFDF
 11038                           postinc2	equ	0xFDE
 11039                           postdec2	equ	0xFDD
 11040                           fsr2h	equ	0xFDA
 11041                           fsr2l	equ	0xFD9
 11042                           status	equ	0xFD8
 11043                           
 11044                           	psect	rparam
 11045  0000                     pclatu	equ	0xFFB
 11046                           pclath	equ	0xFFA
 11047                           tblptru	equ	0xFF8
 11048                           tblptrh	equ	0xFF7
 11049                           tblptrl	equ	0xFF6
 11050                           tablat	equ	0xFF5
 11051                           prodh	equ	0xFF4
 11052                           prodl	equ	0xFF3
 11053                           intcon	equ	0xFF2
 11054                           intcon2	equ	0xFF1
 11055                           postinc0	equ	0xFEE
 11056                           fsr0h	equ	0xFEA
 11057                           fsr0l	equ	0xFE9
 11058                           wreg	equ	0xFE8
 11059                           postdec1	equ	0xFE5
 11060                           fsr1h	equ	0xFE2
 11061                           fsr1l	equ	0xFE1
 11062                           indf2	equ	0xFDF
 11063                           postinc2	equ	0xFDE
 11064                           postdec2	equ	0xFDD
 11065                           fsr2h	equ	0xFDA
 11066                           fsr2l	equ	0xFD9
 11067                           status	equ	0xFD8


Data Sizes:
    Strings     210
    Constant    493
    Data        110
    BSS         51
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     65     111
    BANK0           128     13     128
    BANK1           256      2       2
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 9
		 -> NULL(NULL[0]), RPM_Txt(BANK0[5]), DC_Txt(BANK0[4]), Fan_SW_Txt(BANK0[4]), 
		 -> date(BANK0[9]), time(BANK0[9]), tempF(BANK0[4]), tempC(BANK0[4]), 
		 -> buffer(COMRAM[0]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 9
		 -> NULL(NULL[0]), RPM_Txt(BANK0[5]), DC_Txt(BANK0[4]), Fan_SW_Txt(BANK0[4]), 
		 -> date(BANK0[9]), time(BANK0[9]), tempF(BANK0[4]), tempC(BANK0[4]), 
		 -> buffer(COMRAM[0]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), STR_8(CODE[3]), 
		 -> STR_7(CODE[6]), STR_6(CODE[5]), STR_5(CODE[5]), STR_4(CODE[2]), 
		 -> STR_3(CODE[3]), STR_2(CODE[13]), STR_1(CODE[22]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> NULL(NULL[0]), Fan_SW_Txt(BANK0[4]), buffer(COMRAM[0]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> NULL(NULL[0]), Fan_SW_Txt(BANK0[4]), buffer(COMRAM[0]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 30
		 -> STR_17(CODE[15]), STR_16(CODE[22]), STR_15(CODE[16]), STR_14(CODE[20]), 
		 -> STR_13(CODE[21]), STR_12(CODE[30]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> NULL(NULL[0]), Fan_SW_Txt(BANK0[4]), buffer(COMRAM[0]), 

    txt	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), buffer(COMRAM[0]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 9
		 -> NULL(NULL[0]), RPM_Txt(BANK0[5]), DC_Txt(BANK0[4]), Fan_SW_Txt(BANK0[4]), 
		 -> date(BANK0[9]), time(BANK0[9]), tempF(BANK0[4]), tempC(BANK0[4]), 
		 -> buffer(COMRAM[0]), 


Critical Paths under _main in COMRAM

    _printf->___lwmod
    ___lwmod->___lwdiv
    _get_RPM->___awdiv
    _Update_Screen->_drawtext
    ___awdiv->___wmul
    _Turn_On_Fan->_do_update_pwm
    _do_update_pwm->___ftdiv
    ___lbtoft->___ftpack
    ___ftmul->___lbtoft
    ___ftdiv->___ftmul
    _Initialize_Screen->_drawtext
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawCircle->_drawPixel
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _write_data->_spiwrite
    _write_command->_spiwrite
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul
    _Do_Init->_DS1621_Init
    _init_UART->_OpenUSART
    _DS1621_Init->_I2C_Write_Cmd_Write_Data
    _I2C_Write_Cmd_Write_Data->_I2C_Write
    _I2C_Write_Cmd_Only->_I2C_Write
    _DS3231_Read_Time->_I2C_Read
    _DS1621_Read_Temp->_I2C_Read

Critical Paths under _chkisr in COMRAM

    _chkisr->_INT0_isr

Critical Paths under _main in BANK0

    _main->_Update_Screen
    _Update_Screen->_drawtext
    _Turn_On_Fan->_do_update_pwm
    _Initialize_Screen->_drawtext

Critical Paths under _chkisr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _chkisr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _chkisr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _chkisr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _chkisr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _chkisr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _chkisr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _chkisr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _chkisr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _chkisr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _chkisr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _chkisr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _chkisr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _chkisr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _chkisr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _chkisr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   82305
                                             64 COMRAM     1     1      0
                                              0 BANK1      2     2      0
                   _DS1621_Read_Temp
                   _DS3231_Read_Time
                            _Do_Beep
                            _Do_Init
                  _Initialize_Screen
                        _Turn_On_Fan
                      _Update_Screen
                            ___awdiv
                             ___wmul
                      _do_update_pwm
                            _get_RPM
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              37    23     14    3846
                                             28 COMRAM    28    14     14
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      31
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             16 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     362
                                             23 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     501
                                             16 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _get_RPM                                              4     2      2    2531
                                             30 COMRAM     4     2      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Update_Screen                                        4     4      0   21053
                                              9 BANK0      4     4      0
                            ___awdiv
                            ___awmod
                           _drawtext
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     953
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    1485
                                             22 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Turn_On_Fan                                          0     0      0    8034
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (1) _do_update_pwm                                        9     9      0    8034
                                             58 COMRAM     3     3      0
                                              0 BANK0      6     6      0
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (2) ___lbtoft                                             4     1      3    2039
                                             24 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     436
                                             16 COMRAM    15    11      4
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    2716
                                             28 COMRAM    15     9      6
                           ___ftpack
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    2648
                                             43 COMRAM    15     9      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2008
                                             16 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _Initialize_Screen                                    0     0      0   34162
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                         _drawCircle
                           _drawtext
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4    1539
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _fillScreen                                           2     0      2    2192
                                             35 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (3) _fillRectangle                                       12     7      5    2096
                                             23 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _drawtext                                            17     9      8   17011
                                             56 COMRAM     8     0      8
                                              0 BANK0      9     9      0
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _strlen                                               6     4      2     195
                                             16 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) _drawChar                                            11     4      7   10904
                                             45 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (4) _fillRect                                            11     6      5    3876
                                             34 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (5) _drawFastVLine                                       11     7      4    3102
                                             23 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _drawCircle                                          20    12      8    6744
                                             27 COMRAM    20    12      8
                          _drawPixel
 ---------------------------------------------------------------------------------
 (4) _drawPixel                                            4     1      3    4207
                                             23 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (6) _setAddrWindow                                        4     1      3    1034
                                             19 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _TFT_GreenTab_Initialize                              0     0      0    4624
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd3                                                0     0      0    2182
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd2red                                             0     0      0     130
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd1                                                0     0      0    2182
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (7) _write_data                                           1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (7) _write_command                                        1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (6) _spiwrite                                             2     2      0      34
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _LCD_Reset                                            0     0      0    2052
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             6     4      2    2052
                                             22 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1012
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _Do_Init                                              0     0      0    1121
                        _DS1621_Init
                           _I2C_Init
                       _Turn_Off_Fan
                     _init_INTERRUPT
                          _init_UART
 ---------------------------------------------------------------------------------
 (2) _init_UART                                            0     0      0     375
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (3) _OpenUSART                                            3     1      2     375
                                             16 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _init_INTERRUPT                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Turn_Off_Fan                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Init                                             4     0      4      65
                                             16 COMRAM     4     0      4
                         _i2cHighScl
                         _i2cHighSda
 ---------------------------------------------------------------------------------
 (2) _DS1621_Init                                          1     1      0     681
                                             21 COMRAM     1     1      0
                 _I2C_Write_Cmd_Only
           _I2C_Write_Cmd_Write_Data
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Write_Data                             3     1      2     356
                                             18 COMRAM     3     1      2
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Only                                   2     1      1     260
                                             18 COMRAM     2     1      1
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _Do_Beep                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DS3231_Read_Time                                     3     3      0     430
                                             19 COMRAM     2     2      0
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DS1621_Read_Temp                                     5     3      2     464
                                             19 COMRAM     5     3      2
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Write                                            2     2      0     133
                                             16 COMRAM     2     2      0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Stop                                             0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Start                                            0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (2) _I2C_Read                                             3     3      0     198
                                             16 COMRAM     3     3      0
                             _i2cAck
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                            _i2cNack
 ---------------------------------------------------------------------------------
 (3) _i2cNack                                              0     0      0       0
                         _i2cHighScl
                          _i2cLowScl
 ---------------------------------------------------------------------------------
 (3) _i2cAck                                               0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (2) _I2C_ReStart                                          0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (5) _i2cLowSda                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2cLowScl                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2cHighSda                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2cHighScl                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _chkisr                                              14    14      0       0
                                              2 COMRAM    14    14      0
                           _INT0_isr
                         _TIMER1_isr
 ---------------------------------------------------------------------------------
 (10) _TIMER1_isr                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _INT0_isr                                            2     2      0       0
                                              0 COMRAM     2     2      0
                   _force_nec_state0
 ---------------------------------------------------------------------------------
 (11) _force_nec_state0                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DS1621_Read_Temp
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Read_Time
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _Do_Beep
   _Do_Init
     _DS1621_Init
       _I2C_Write_Cmd_Only
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Cmd_Write_Data
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _I2C_Init
       _i2cHighScl
       _i2cHighSda
     _Turn_Off_Fan
     _init_INTERRUPT
     _init_UART
       _OpenUSART
   _Initialize_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawCircle
       _drawPixel
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_data
           _spiwrite
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   _Turn_On_Fan
     _do_update_pwm
       ___ftdiv
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___ftmul
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___fttol
       ___lbtoft
         ___ftpack
   _Update_Screen
     ___awdiv
       ___wmul (ARG)
     ___awmod
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _strcpy
   ___awdiv
     ___wmul (ARG)
   ___wmul
   _do_update_pwm
     ___ftdiv
       ___ftmul (ARG)
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
     ___ftmul
       ___ftpack
       ___lbtoft (ARG)
         ___ftpack
     ___fttol
     ___lbtoft
       ___ftpack
   _get_RPM
     ___awdiv
       ___wmul (ARG)
     ___wmul
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch

 _chkisr (ROOT)
   _INT0_isr
     _force_nec_state0
   _TIMER1_isr

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      2       2       7        0.8%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      D      80       5      100.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     41      6F       1       87.4%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      F1      34        0.0%
DATA                 0      0      F1       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Wed Nov 10 11:13:49 2021

                      drawCircle@f 000029                        drawCircle@r 00001F  
                      drawCircle@x 00002B                        drawCircle@y 00002D  
               __size_of_I2C_Start 000000                        _SSPSTATbits 000FC7  
               __size_of_I2C_Write 000000                       drawCircle@x0 00001B  
                     drawCircle@y0 00001D                       ___awdiv@sign 00001B  
             __size_of_Turn_On_Fan 000000                ___wmul@multiplicand 000012  
                  ??_Update_Screen 000009                                l401 0000C2  
                              l219 00003A                                l331 00002E  
                              l164 000046                                l167 00000E  
                              l337 000086                                l353 000154  
                              l362 0000AA                                l355 00002E  
                              l277 00004A                                l390 0000DA  
                              l622 000004                                l287 00000E  
                              l391 000046                                l393 0000B6  
                              l713 000358                                l394 0000D8  
                              l466 00003C                                l741 000046  
                              l742 000048                                l743 000052  
                              l744 000054                                l737 00002C  
                              l746 00006E                                l676 000100  
                              l749 000026                                l942 000094  
                              _FAN 00000E                                l955 000080  
                              _PR2 000FCB                                _day 000018  
             __size_of_I2C_ReStart 000000                                _dow 000019  
                              _nbr 000006                                _rpm 000008  
            __size_of_Turn_Off_Fan 000000                                _rps 00000A  
                              _txt 00000C                       ___awmod@sign 000015  
                              wreg 000FE8                         _Fan_SW_Txt 00005F  
                  ??_fillRectangle 00001C                       __CFG_LVP$OFF 000000  
          _TFT_GreenTab_Initialize 000000                       ___ftdiv@cntr 000034  
                     ___ftdiv@sign 000039                       __CFG_WDT$OFF 000000  
                             l1132 0000AC                     drawFastVLine@h 000018  
                             l1206 000024                               l1311 00003C  
                             l1144 0000F6                               l1057 0000C4  
                             l1129 0000E0                               l1068 00009C  
                             l1180 000020                               l1165 0000E4  
                             l1272 000052                               l1282 000042  
                   drawFastVLine@x 000021                     drawFastVLine@y 000017  
                             l5101 000006                               l5107 000018  
                             l5203 0000B6                               l5109 00001E  
                             l5119 000030                               l5401 00007E  
                             l5091 00007C                               l5075 000010  
                             l5331 000010                               l6123 00007C  
                             l5157 000010                               l5165 00000A  
                             l5341 000032                               l5421 0000C4  
                             l5413 0000AC                               l5181 00002C  
                             l6133 0000D2                               l6117 00003C  
                             l6301 0001CE                               l5079 000048  
                             l5351 00009E                               l5335 00001C  
                             l5191 000090                               l5183 00004C  
                             l5175 000010                               l6311 00020E  
                             l6231 000028                               l5441 00001C  
                             l5089 00006E                               l5169 000026  
                             l5361 0000CC                               l5353 0000A2  
                             l5345 00003A                               l5417 0000BA  
                             l5513 000086                               l6321 000238  
                             l6313 000218                               l6241 000066  
                             l6225 00000A                               l5371 000148  
                             l5363 0000F4                               l5339 00002A  
                             l5427 0000D4                               l5187 000064  
                             l5179 000020                               l5523 0000BA  
                             l5611 0000B0                               l5603 000088  
                             l6147 00017E                               l6139 000112  
                             l6331 000270                               l6307 0001EA  
                             l6235 000032                               l5445 000024  
                             l5437 000012                               l5349 00006A  
                             l5701 00002C                               l5197 0000A4  
                             l5189 000084                               l5533 00001E  
                             l5605 00008E                               l5613 0000BA  
                             l6149 000194                               l6325 000250  
                             l6253 0000D2                               l6237 000048  
                             l6229 00001A     I2C_Write_Cmd_Write_Data@Device 000014  
                             l5383 00000A                               l5535 000038  
                             l6327 000258                               l6335 000284  
                             l6319 000230                               l6271 00014C  
                             l6351 00033C                               l5633 00000A  
                             l5457 00003E                               l5449 000030  
                             l5369 000120                               l5377 000150  
                             l5385 000010                               l5713 000088  
                             l5561 0000A2                               l5553 00007A  
                             l5617 0000D2                               l5609 0000A2  
                             l6337 00028C                               l6345 000316  
                             l6265 00012E                               l6249 0000CA  
                             l5643 000020                               l5651 000030  
                             l5395 000010                               l5571 0000D0  
                             l5563 0000A8                               l5539 000046  
                             l6339 0002D0                               l6347 000328  
                             l6283 000182                               l6275 000158  
                             l5645 000028                               l5637 000012  
                             l5725 0000F8                               l5717 0000A6  
                             l5493 000046                               l5557 00008C  
                             l5581 00001E                               l5901 000032  
                             l6349 000330                               l6293 0001B6  
                             l6285 000186                               l6269 000148  
                             l5655 00003C                               l5727 000100  
                             l5487 00001E                               l5567 0000BA  
                             l5903 00003C                               l6279 00017C  
                             l5657 000042                               l5489 000038  
                             l5817 000098                               l5905 000044  
                             l5913 000066                               l6289 000192  
                             l6721 000112                               l5747 0000A8  
                             l5931 000028                               l6299 0001BC  
                             l6731 000154                               l6707 0000E0  
                             l5861 00003E                               l5917 000076  
                             l5909 00005A                               l5837 000018  
                             l6725 00012C                               l5775 000198  
                             l5599 000078                               l5863 000048  
                             l5855 000028                               l5927 000016  
                             l5951 000020                               l6735 00015E  
                             l5881 00008A                               l5873 00006E  
                             l5865 000050                               l5849 000016  
                             l5929 000020                               l5939 000046  
                             l5955 000036                               l5947 00000E  
                             l6739 000172                               l5797 00000A  
                             l5877 00007A                               l5893 000016  
                             l5949 000018                               l5799 000014  
                             l6687 000018                               l5897 000024  
                             STR_1 000222                               STR_2 000291  
                             STR_3 0002BA                               STR_4 000002  
                             STR_5 0002A4                               STR_6 0002A9  
                             STR_7 00029E                               STR_8 0002BD  
                             STR_9 0002B6                               u4110 00003E  
                             u4040 000102                               u4120 000074  
                             u4400 00003C                               u4321 000010  
                             u4341 00002E                               u4405 000034  
                             u4510 000062                               u4271 000010  
                             u4291 00002E                               u4381 000010  
                             u3770 00003E                               u5377 000004  
                             _RBPU 007F8F                               _TRMT 007D61  
                     _DS1621_tempC 000000                       _DS1621_tempF 000002  
                             _date 000044                               _main 000000  
                             _font 000001                       ___ftpack@arg 000010  
                             _hour 00001C                       ___ftpack@exp 000013  
                 __end_of_I2C_Init 00000A                   __end_of_I2C_Read 000048  
                             _time 00004D                               _year 00002A  
                             fsr0h 000FEA                               fsr1h 000FE2  
                             fsr0l 000FE9                               fsr2h 000FDA  
                             fsr1l 000FE1                               indf2 000FDF  
                             fsr2l 000FD9                               _wrap 000002  
                 __end_of_I2C_Stop 000012                               pclat 000FFA  
               __size_of_LCD_Reset 000000                               prodh 000FF4  
                             prodl 000FF3                               start 000000* 
      __size_of_I2C_Write_Cmd_Only 000000                    __end_of_Do_Init 00004C  
                  ??_drawFastVLine 00001B                       ___ftmul@cntr 000029  
                  __end_of_i2cNack 00000A                       ___param_bank 000010  
                     ___ftmul@sign 00002A                       ___fttol@exp1 00001E  
                     _Turn_Off_Fan 000000                       ___fttol@lval 00001A  
                      ?_TIMER1_isr 000000                   __end_of_INT0_isr 000182  
                  ??_do_update_pwm 00003A                    drawFastVLine@hi 00001F  
                  drawFastVLine@lo 000020                              ?_main 000000  
                  __end_of___awdiv 000096                    drawCircle@ddF_x 000025  
                            STR_10 0002AE                    drawCircle@ddF_y 000027  
                            STR_11 0002B2                              STR_12 0001EE  
                            STR_13 000238                              STR_14 00024D  
                            STR_15 000272                              STR_16 00020C  
                            STR_17 000282                              STR_18 000261  
                  __end_of___awmod 000082                    __end_of___ftdiv 0000E2  
                  __end_of___ftmul 0000F8                              _T0CON 000FD5  
                  ___awdiv@divisor 000018                              _T1CON 000FCD  
                  __end_of___fttol 0000E6                              _T2CON 000FCA  
                            _T3CON 000FB1                    __end_of___lwdiv 00005C  
                  __end_of___lwmod 00004C                              i2l251 000180  
                            i2l263 00013A                              i2l239 000042  
                  ___awdiv@counter 00001A                    drawCircle@color 000021  
                            _RCSTA 000FAB                              _TMR0H 000FD7  
                            _TMR1H 000FCF                              _TMR0L 000FD6  
                            _TMR1L 000FCE                              _TMR3L 000FB2  
                            _SPBRG 000FAF                              _TRISA 000F92  
                            _TRISB 000F93                              _TRISC 000F94  
                            _TRISD 000F95                              _TXREG 000FAD  
                            _TXSTA 000FAC                    __end_of_get_RPM 00003E  
                            _Rcmd1 000000                              _Rcmd3 000000  
                       _i2cHighSda 000000                         _i2cHighScl 000000  
                  __end_of_dpowers 0001E6                              _font2 000100  
                            _found 00001B                    __end_of_isdigit 000022  
                            _tempC 000063                              _tempF 000067  
                            _month 00001E                      ___ftpack@sign 000014  
                            _putch 000000                              main@j 000000  
                __end_of_I2C_Start 000012                  __end_of_I2C_Write 00003E  
                   __CFG_BOREN$OFF 000000                              tablat 000FF5  
                            status 000FD8                  ?_DS1621_Read_Temp 000013  
                  write_data@data_ 000012                 ??_DS1621_Read_Temp 000015  
                  __initialization 000000                       __end_of_main 00018E  
                     __end_of_font 000100                   __end_of_Rcmd2red 00003E  
                           ??_main 000040                      ___fttol@sign1 000019  
                    __activetblptr 000002                  ?_DS3231_Read_Time 000000  
                __end_of_LCD_Reset 000012          ??_TFT_GreenTab_Initialize 00001C  
               ??_DS3231_Read_Time 000013                             ?_Rcmd1 000000  
                           ?_Rcmd3 000000            __size_of_init_INTERRUPT 000000  
                        I2C_Init@c 000010                          I2C_Read@n 000011  
                           _ADCON1 000FC1                DS1621_Read_Temp@Cmd 000015  
                           _CCPR1L 000FBE                   ___awdiv@dividend 000016  
               __size_of_i2cLowSda 000000                 __size_of_i2cLowScl 000000  
                           ?_putch 000000                   __end_of___ftpack 0000C6  
                 __end_of___lbtoft 000026                          ??_Do_Beep 000010  
                           _DC_Txt 00005B                             i2l4241 00007E  
                           i2l4235 000074                             i2l4219 000028  
                           i2l4261 0000C8                             i2l4253 0000A6  
                           i2l4229 000056                             i2l4247 00009C  
                           i2l4265 0000CC                          ??_Do_Init 000016  
                           i2l4259 0000C2                             i2l4277 000154  
                           i2l4285 00015E                             i2l4279 00015A  
                           i2l4695 000038                             _OSCCON 000FD3  
              __size_of_TIMER1_isr 000000                             _SPBRGH 000FB0  
                           _SSPBUF 000FC9                          ??_i2cNack 000010  
                     _Alarm_SW_Txt 00003E                   _force_nec_state0 000000  
                 __end_of_delay_ms 000052                             _i2cAck 000000  
                 __end_of_fillRect 00004A                   __end_of_drawChar 000156  
               __size_of_OpenUSART 000000                             ___wmul 000000  
                        ??___awdiv 00001A                   __end_of_drawtext 000116  
                        ??___awmod 000014                          ??___ftdiv 000031  
                        ??___ftmul 000022                          ??___fttol 000014  
                           _chkisr 000000                          ??___lwdiv 000014  
                           _array1 000000                          ??___lwmod 00001B  
                           _buffer 000000*                            _nec_ok 000006  
                           clear_0 000006                             clear_1 000012  
                 ___awdiv@quotient 00001C                             _minute 00001D  
                           _second 000020                    ___awmod@divisor 000012  
                        ??_get_RPM 000020                    ___awmod@counter 000014  
                           _printf 000000                       drawtext@size 00003F  
                           _strcpy 000000                             _strlen 000000  
            ___ftmul@f3_as_product 000026                       __pdataCOMRAM 000000  
                        ??_isdigit 000010                          ?_I2C_Init 000010  
                        ?_I2C_Read 000000                          ?_I2C_Stop 000000  
                     __mediumconst 000000*                            tblptrh 000FF7  
                           tblptrl 000FF6                             tblptru 000FF8  
 __end_of_I2C_Write_Cmd_Write_Data 000020                        ?_i2cHighSda 000000  
                      ?_i2cHighScl 000000                             putch@c 000010  
                 __end_of_spiwrite 000014                         __accesstop 000000* 
          __end_of__initialization 000056                          ?_INT0_isr 000000  
               _setup_alarm_minute 000022                 _setup_alarm_second 000023  
                    ___rparam_used 000001                         ___ftdiv@f1 00002B  
                       ___ftdiv@f2 00002E                         ___ftdiv@f3 000035  
                       ___lbtoft@c 00001B                         ___ftmul@f1 00001C  
                       ___ftmul@f2 00001F                         ___fttol@f1 000010  
                    __end_of_Rcmd1 000110                      __end_of_Rcmd3 0000F2  
                   __pcstackCOMRAM 000000                       __pidataBANK0 000000  
                    __end_of_font2 0001DC                  __end_of_i2cLowSda 00000A  
                __end_of_i2cLowScl 000008                      __end_of_putch 00000E  
                   drawPixel@color 000018             __size_of_write_command 000000  
                       ??_I2C_Init 000014                         ??_I2C_Read 000010  
                     _alarm_minute 000014                       _alarm_second 000015  
                       ??_I2C_Stop 000010                            ??_Rcmd1 00001C  
                          ??_Rcmd3 00001C                 __size_of_drawPixel 000000  
                __end_of_OpenUSART 000070                            ??_putch 000010  
                       __pbssBANK0 000000                   _setup_alarm_hour 000021  
                 _setup_alarm_time 00001E                      ??_DS1621_Init 000015  
                        ?_Rcmd2red 000000                 __size_of_init_UART 000000  
                  spiwrite@spidata 000011                         _alarm_date 000012  
                       ??_INT0_isr 000000                         _alarm_hour 000013  
                       _alarm_time 000015                            ?_i2cAck 000000  
               __CFG_CCP2MX$PORTBE 000000                      ??_Turn_On_Fan 00003D  
                   I2C_Read@inByte 000012                            ?___wmul 000010  
              __size_of_i2cHighSda 000000                __size_of_i2cHighScl 000000  
                          ?_chkisr 000000             __size_of_setAddrWindow 000000  
                          _CCP1CON 000FBD   I2C_Write_Cmd_Write_Data@Data_Out 000013  
                     ??_TIMER1_isr 000000                      ??_I2C_ReStart 000010  
                          _ALARMEN 000004                          ?___ftpack 000010  
                        ?___lbtoft 000018                         I2C_Write@n 000011  
                          ?_printf 00001C                            ?_strcpy 000010  
                          ?_strlen 000010                         _fillScreen 000000  
            __end_of_Update_Screen 0002F2                         _drawCircle 000000  
                   _init_INTERRUPT 000000                          ?_delay_ms 000016  
                        ?_fillRect 000022                          ?_drawChar 00002D  
                          _SSPCON1 000FC6                            _SSPSTAT 000FC7  
                          _RPM_Txt 000056              __end_of_fillRectangle 0000DC  
                          _Do_Beep 000000*                         ?_drawtext 000038  
                          _Do_Init 000000           _I2C_Write_Cmd_Write_Data 000000  
       __end_of_I2C_Write_Cmd_Only 00001A                         ??_Rcmd2red 000013  
           DS1621_Read_Temp@Device 000017                            _i2cNack 000000  
               __end_of_TIMER1_isr 00000C                      _write_command 000000  
                        _I2C_Start 000000                          _I2C_Write 000000  
                  __size_of_i2cAck 000000                            __Hparam 000000  
                          __Lparam 000000                __end_of_DS1621_Init 00001E  
                __end_of_drawPixel 000030              __end_of_drawFastVLine 000088  
                          ___awdiv 000000                            ___awmod 000000  
                          ___ftdiv 000000                    __size_of___wmul 000000  
                          ___ftmul 000000                            ___fttol 000000  
                          ___lwdiv 000000                            ___lwmod 000000  
                  __size_of_chkisr 000000                          ?_spiwrite 000000  
                          __pcinit 000000                         ??___ftpack 000015  
                       ??___lbtoft 00001B                            __ramtop 000000* 
                          _get_RPM 000000                            __ptext0 000000  
                          __ptext1 000000                            __ptext2 000000  
                          __ptext3 000000                            __ptext4 000000  
                          __ptext5 000000          __size_of_DS1621_Read_Temp 000000  
                          __ptext6 000000                            __ptext7 000000  
                          __ptext8 000000                            __ptext9 000000  
                  __size_of_printf 000000                  __end_of_init_UART 000014  
              __end_of_Turn_On_Fan 000010             __end_of_init_INTERRUPT 000032  
                        _T0CONbits 000FD5                    __size_of_strcpy 000000  
                  __size_of_strlen 000000                  __end_of_hexpowers 0001EE  
         __end_of_force_nec_state0 000008                          _T1CONbits 000FCD  
                          _dpowers 0001DC              __end_of_do_update_pwm 0000C2  
                          _isdigit 000000                   ___awmod@dividend 000010  
                       _duty_cycle 00001A                         ??_delay_ms 000018  
              __end_of_I2C_ReStart 000016                      drawtext@_text 000039  
                    drawtext@color 00003B                         ??_fillRect 000027  
                       ??_drawChar 000034                          _LCD_Reset 000000  
                    _setAddrWindow 000000                     __pintcode_body 000000  
                       delay_ms@ms 000016               end_of_initialization 000056  
                       ??_drawtext 000000                     ?_write_command 000000  
                    __Lmediumconst 000000*         __size_of_DS3231_Read_Time 000000  
                          int_func 000000            DS3231_Read_Time@Address 000013  
                       ?_I2C_Start 000000                         ?_I2C_Write 000000  
                       get_RPM@RPS 000020                         _tempSecond 000001  
                        _RCSTAbits 000FAB                            printf@c 000037  
                          printf@f 00001C                            postdec1 000FE5  
                          postdec2 000FDD                            postinc0 000FEE  
                          postinc2 000FDE                         ??_spiwrite 000010  
                          strlen@s 000010        I2C_Write_Cmd_Write_Data@Cmd 000012  
                        _PORTAbits 000F80                   drawtext@cursor_x 000008  
                 drawtext@cursor_y 000007                          _PORTBbits 000F81  
                        _PORTDbits 000F83                          _PORTEbits 000F84  
                 I2C_Write@outByte 000010                    ?_init_INTERRUPT 000000  
                       _setup_date 000027                        ?_fillScreen 000023  
                       _setup_hour 000025                         _setup_time 000030  
                       _setup_year 000029                        ?_drawCircle 00001B  
                       drawChar@bg 000031                          _TRISBbits 000F93  
                        _TRISCbits 000F94                       ??_i2cHighSda 000010  
                     ??_i2cHighScl 000010                  __size_of_I2C_Init 000000  
                __size_of_I2C_Read 000000                  __size_of_I2C_Stop 000000  
                   ?_setAddrWindow 000013                         ?_LCD_Reset 000000  
                 drawtext@textsize 000003                         drawPixel@x 00001A  
                       drawPixel@y 000017                        _DS1621_Init 000000  
                      ___ftdiv@exp 000038                        printf@width 000035  
                        _TXSTAbits 000FAC                  __size_of_INT0_isr 000000  
                   __end_of_i2cAck 000012                        ___ftmul@exp 000025  
         DS1621_Read_Temp@Data_Ret 000016                        _Turn_On_Fan 000000  
               __end_of_i2cHighSda 000008                 __end_of_i2cHighScl 00000C  
                   __end_of___wmul 000028                      delay_ms@count 00001A  
                       _write_data 000000                      __pidataCOMRAM 000000  
                   __end_of_chkisr 00007C           ?_TFT_GreenTab_Initialize 000000  
                      _I2C_ReStart 000000                         drawtext@bg 00003D  
                        _Nec_code1 00000F                          _i2cLowSda 000000  
                        _i2cLowScl 000000                     __end_of_printf 00035A  
                   __end_of_strcpy 000032                     __end_of_strlen 00003E  
                        _Nec_state 000010                start_initialization 000000  
           Update_Screen@neg_tempF 00000B                    ??_write_command 000012  
                        _OpenUSART 000000                   __CFG_OSC$INTIO67 000000  
                      ??_I2C_Start 000010                        ??_I2C_Write 000010  
                         ??_i2cAck 000010                  __size_of_Rcmd2red 000000  
              __size_of_fillScreen 000000                __size_of_drawCircle 000000  
                         ??___wmul 000014                      ?_Turn_Off_Fan 000000  
                         ??_chkisr 000002                        __pdataBANK0 000000  
                  setAddrWindow@x0 000016                    setAddrWindow@x1 000014  
                  setAddrWindow@y0 000013                    setAddrWindow@y1 000015  
                         ??_printf 00002A                   _DS1621_Read_Temp 000000  
                         ??_strcpy 000014                           ??_strlen 000012  
                       ?_i2cLowSda 000000                         ?_i2cLowScl 000000  
                __size_of___ftpack 000000                  __size_of___lbtoft 000000  
                      __pbssCOMRAM 000000         ??_I2C_Write_Cmd_Write_Data 000014  
                  ??_setAddrWindow 000016                      __pcstackBANK0 000000  
                    __pcstackBANK1 000000                       _isdigit$2012 000011  
                      ??_LCD_Reset 00001C                  __size_of_delay_ms 000000  
                         ?_Do_Beep 000000                           ?_Do_Init 000000  
                __size_of_fillRect 000000                  __size_of_drawChar 000000  
                       ?_OpenUSART 000010                   _DS3231_Read_Time 000000  
                         ?_i2cNack 000000                  __size_of_drawtext 000000  
                 ___lwdiv@dividend 000010                        I2C_Read@ack 000010  
                        _bit_count 000016                          __pintcode 000000  
  __end_of_TFT_GreenTab_Initialize 00002A                     ??_Turn_Off_Fan 000010  
                    __pmediumconst 000000                           ?___awdiv 000016  
                         ?___awmod 000010                           ?___ftdiv 00002B  
                         ?___ftmul 00001C                           ?___fttol 000010  
                        __tft_type 000011                           ?___lwdiv 000010  
               _I2C_Write_Cmd_Only 000000                           ?___lwmod 000017  
               drawFastVLine@color 000019                        ?_write_data 000000  
                        _drawPixel 000000                           ?_get_RPM 00001E  
                __size_of_spiwrite 000000                ?_I2C_Write_Cmd_Only 000012  
                ?_force_nec_state0 000000                           ?_isdigit 000000  
                         _I2C_Init 000000                           _I2C_Read 000000  
                         _I2C_Stop 000000                  _Initialize_Screen 000000  
                   __size_of_Rcmd1 000000                     __size_of_Rcmd3 000000  
                        _init_UART 000000                 ??_force_nec_state0 000000  
         I2C_Write_Cmd_Only@Device 000013                          _hexpowers 0001E6  
               ?_Initialize_Screen 000000                   ___lwdiv@quotient 000015  
                   __size_of_putch 000000                     ___wmul@product 000014  
              ??_Initialize_Screen 000040                           _INT0_isr 000000  
             ??_I2C_Write_Cmd_Only 000013                           _PIE1bits 000F9D  
           __size_of_Update_Screen 000000             DS3231_Read_Time@Device 000014  
                         _PIR1bits 000F9E                   ??_init_INTERRUPT 000010  
                        _setup_day 000024                  DS1621_Init@Device 000015  
                        fillRect@h 000024                          fillRect@i 00002B  
                        fillRect@w 000023                          fillRect@x 00002A  
                        fillRect@y 000022                          drawChar@c 00002E  
                        drawChar@i 000037                          drawChar@j 000036  
                        drawChar@x 000035                          drawChar@y 00002D  
                       ?_drawPixel 000017             __size_of_fillRectangle 000000  
                ___wmul@multiplier 000010          __end_of_Initialize_Screen 00026A  
                      ??_i2cLowSda 000010                        ??_i2cLowScl 000010  
                     ??_fillScreen 000025                       ??_drawCircle 000023  
                       printf@flag 000034                         printf@prec 000031  
                       ?_init_UART 000000                        _INTCON2bits 000FF1  
                        copy_data0 00002C                          drawtext@i 000005  
           __size_of_drawFastVLine 000000                          drawtext@x 000002  
                        drawtext@y 000038                           _Nec_code 000000  
                write_command@cmd_ 000012                        ??_OpenUSART 000012  
                     ?_DS1621_Init 000000                           _Rcmd2red 000000  
                 __size_of_Do_Init 000000                __size_of_write_data 000000  
                  OpenUSART@config 000012                       _Time_Elapsed 000004  
                 __size_of_i2cNack 000000                      _RTC_ALARM_Txt 000042  
                         __Hrparam 000000*            __size_of_do_update_pwm 000000  
               __end_of_fillScreen 00001C                           __Lrparam 000000* 
               __end_of_drawCircle 0001AE                       ?_Turn_On_Fan 000000  
                 __size_of___awdiv 000000                   __size_of___awmod 000000  
                 __size_of___ftdiv 000000                   __size_of___ftmul 000000  
                 __size_of___fttol 000000                   __size_of___lwdiv 000000  
                 __size_of___lwmod 000000                           ___ftpack 000000  
                         ___lbtoft 000000                       ?_I2C_ReStart 000000  
                 __size_of_get_RPM 000000                      _Update_Screen 000000  
                   _setup_fan_temp 000000                     _setup_fan_text 000039  
                 __size_of_isdigit 000000                           _delay_ms 000000  
                  ___lwdiv@divisor 000012                    ___lwdiv@counter 000014  
                         __ptext10 000000                           __ptext11 000000  
                         __ptext20 000000                           __ptext12 000000  
                         __ptext21 000000                           __ptext13 000000  
                         __ptext30 000000                           __ptext22 000000  
                         __ptext14 000000                           __ptext31 000000  
                         __ptext23 000000                           __ptext15 000000  
                         __ptext40 000000                           __ptext32 000000  
                         __ptext24 000000                           __ptext16 000000  
                         __ptext41 000000                           __ptext33 000000  
                         __ptext25 000000                           __ptext17 000000  
                         __ptext50 000000                           __ptext42 000000  
                         __ptext34 000000                           __ptext26 000000  
                         __ptext18 000000                           __ptext51 000000  
                         __ptext43 000000                           __ptext35 000000  
                         __ptext27 000000                           __ptext19 000000  
                         __ptext60 000000                           __ptext52 000000  
                         __ptext44 000000                           __ptext36 000000  
                         __ptext28 000000                           __ptext53 000000  
                         __ptext45 000000                           __ptext37 000000  
                         __ptext29 000000                           __ptext62 000000  
                         __ptext54 000000                           __ptext46 000000  
                         __ptext38 000000                           __ptext63 000000  
                         __ptext55 000000                           __ptext47 000000  
                         __ptext39 000000                           __ptext64 000000  
                         __ptext56 000000                           __ptext48 000000  
                         __ptext57 000000                           __ptext49 000000  
                         __ptext58 000000                           __ptext59 000000  
                         _fillRect 000000                           _drawChar 000000  
             __end_of_Turn_Off_Fan 00000A   __size_of_TFT_GreenTab_Initialize 000000  
                         _colstart 000017                           _drawtext 000000  
                       strcpy@from 000012                      _fillRectangle 000000  
         __end_of_DS1621_Read_Temp 00003C                      __size_of_main 000000  
                  fillRectangle@hi 000020                    fillRectangle@lo 000021  
                    _drawFastVLine 000000                          printf@idx 00002E  
                         _spiwrite 000000                          printf@val 000032  
                      ??_drawPixel 00001A                           _rowstart 00001F  
         __end_of_DS3231_Read_Time 000064         __size_of_Initialize_Screen 000000  
                   ?_Update_Screen 000000                         _INTCONbits 000FF2  
                    _do_update_pwm 000000                     OpenUSART@spbrg 000010  
                      ??_init_UART 000013                           isdigit@c 000012  
                        spiwrite@x 000010                           intlevel2 000000* 
                   ?_fillRectangle 000017                   ___lwmod@dividend 000017  
            __end_of_write_command 000010                    fillScreen@color 000023  
          do_update_pwm@duty_cycle 000003                     fillRectangle@h 000019  
                   fillRectangle@w 000018                     fillRectangle@x 000022  
                   fillRectangle@y 000017                     ?_drawFastVLine 000017  
                         printf@ap 00002F                       ??_write_data 000012  
                       _TIMER1_isr 000000                      fillRect@color 000025  
                   ?_do_update_pwm 000000                    ___lwmod@divisor 000019  
                         strcpy@cp 000014                           strlen@cp 000014  
                         strcpy@to 000010              I2C_Write_Cmd_Only@Cmd 000012  
                  ___lwmod@counter 00001B                       _setup_minute 000026  
                     _setup_second 000028              __end_of_setAddrWindow 00004E  
               fillRectangle@color 00001A                  do_update_pwm@dc_I 000004  
                do_update_pwm@dc_f 000000                      drawChar@color 00002F  
                      _setup_month 000027                 __end_of_write_data 000010  
        __size_of_force_nec_state0 000000                       drawChar@line 000034  
                     drawChar@size 000033  __size_of_I2C_Write_Cmd_Write_Data 000000  
             __size_of_DS1621_Init 000000          ?_I2C_Write_Cmd_Write_Data 000012  
