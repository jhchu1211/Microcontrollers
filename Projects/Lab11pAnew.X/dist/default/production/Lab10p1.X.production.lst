

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Sat Oct 30 00:30:51 2021

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    67                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    72                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    73  0000                     
    74                           	psect	idataCOMRAM
    75  0011C4                     __pidataCOMRAM:
    76                           	opt stack 0
    77                           
    78                           ;initializer for _tempSecond
    79  0011C4  FF                 	db	255
    80                           
    81                           ;initializer for _wrap
    82  0011C5  01                 	db	1
    83                           
    84                           	psect	idataBANK0
    85  000D76                     __pidataBANK0:
    86                           	opt stack 0
    87                           
    88                           ;initializer for _color
    89  000D76  F800               	dw	63488
    90  000D78  F800               	dw	63488
    91  000D7A  F800               	dw	63488
    92  000D7C  07FF               	dw	2047
    93  000D7E  07FF               	dw	2047
    94  000D80  07E0               	dw	2016
    95  000D82  001F               	dw	31
    96  000D84  001F               	dw	31
    97  000D86  F81F               	dw	63519
    98  000D88  0000               	dw	0
    99  000D8A  0000               	dw	0
   100  000D8C  0000               	dw	0
   101  000D8E  0000               	dw	0
   102  000D90  0000               	dw	0
   103  000D92  0000               	dw	0
   104  000D94  0000               	dw	0
   105  000D96  0000               	dw	0
   106  000D98  0000               	dw	0
   107  000D9A  0000               	dw	0
   108  000D9C  0000               	dw	0
   109  000D9E  0000               	dw	0
   110                           
   111                           ;initializer for _array1
   112  000DA0  A2                 	db	162
   113  000DA1  62                 	db	98
   114  000DA2  E2                 	db	226
   115  000DA3  22                 	db	34
   116  000DA4  02                 	db	2
   117  000DA5  C2                 	db	194
   118  000DA6  E0                 	db	224
   119  000DA7  A8                 	db	168
   120  000DA8  90                 	db	144
   121  000DA9  68                 	db	104
   122  000DAA  98                 	db	152
   123  000DAB  B0                 	db	176
   124  000DAC  30                 	db	48
   125  000DAD  18                 	db	24
   126  000DAE  7A                 	db	122
   127  000DAF  10                 	db	16
   128  000DB0  38                 	db	56
   129  000DB1  5A                 	db	90
   130  000DB2  42                 	db	66
   131  000DB3  4A                 	db	74
   132  000DB4  52                 	db	82
   133                           
   134                           ;initializer for _Display_D1
   135  000DB5  00                 	db	0
   136  000DB6  02                 	db	2
   137  000DB7  04                 	db	4
   138  000DB8  06                 	db	6
   139  000DB9  10                 	db	16
   140  000DBA  12                 	db	18
   141  000DBB  14                 	db	20
   142  000DBC  16                 	db	22
   143  000DBD  16                 	db	22
   144  000DBE  16                 	db	22
   145                           
   146                           	psect	idataBANK1
   147  000BEC                     __pidataBANK1:
   148                           	opt stack 0
   149                           
   150                           ;initializer for _txt1
   151  000BEC  43                 	db	67
   152  000BED  48                 	db	72
   153  000BEE  2D                 	db	45
   154  000BEF  00                 	db	0
   155  000BF0  43                 	db	67
   156  000BF1  48                 	db	72
   157  000BF2  20                 	db	32
   158  000BF3  00                 	db	0
   159  000BF4  43                 	db	67
   160  000BF5  48                 	db	72
   161  000BF6  2B                 	db	43
   162  000BF7  00                 	db	0
   163  000BF8  50                 	db	80
   164  000BF9  52                 	db	82
   165  000BFA  56                 	db	86
   166  000BFB  00                 	db	0
   167  000BFC  4E                 	db	78
   168  000BFD  58                 	db	88
   169  000BFE  54                 	db	84
   170  000BFF  00                 	db	0
   171  000C00  50                 	db	80
   172  000C01  4C                 	db	76
   173  000C02  59                 	db	89
   174  000C03  00                 	db	0
   175  000C04  20                 	db	32
   176  000C05  2D                 	db	45
   177  000C06  20                 	db	32
   178  000C07  00                 	db	0
   179  000C08  20                 	db	32
   180  000C09  2B                 	db	43
   181  000C0A  20                 	db	32
   182  000C0B  00                 	db	0
   183  000C0C  20                 	db	32
   184  000C0D  45                 	db	69
   185  000C0E  51                 	db	81
   186  000C0F  00                 	db	0
   187  000C10  20                 	db	32
   188  000C11  30                 	db	48
   189  000C12  20                 	db	32
   190  000C13  00                 	db	0
   191  000C14  31                 	db	49
   192  000C15  30                 	db	48
   193  000C16  30                 	db	48
   194  000C17  00                 	db	0
   195  000C18  32                 	db	50
   196  000C19  30                 	db	48
   197  000C1A  30                 	db	48
   198  000C1B  00                 	db	0
   199  000C1C  20                 	db	32
   200  000C1D  31                 	db	49
   201  000C1E  20                 	db	32
   202  000C1F  00                 	db	0
   203  000C20  20                 	db	32
   204  000C21  32                 	db	50
   205  000C22  20                 	db	32
   206  000C23  00                 	db	0
   207  000C24  20                 	db	32
   208  000C25  33                 	db	51
   209  000C26  20                 	db	32
   210  000C27  00                 	db	0
   211  000C28  20                 	db	32
   212  000C29  34                 	db	52
   213  000C2A  20                 	db	32
   214  000C2B  00                 	db	0
   215  000C2C  20                 	db	32
   216  000C2D  35                 	db	53
   217  000C2E  20                 	db	32
   218  000C2F  00                 	db	0
   219  000C30  20                 	db	32
   220  000C31  36                 	db	54
   221  000C32  20                 	db	32
   222  000C33  00                 	db	0
   223  000C34  20                 	db	32
   224  000C35  37                 	db	55
   225  000C36  20                 	db	32
   226  000C37  00                 	db	0
   227  000C38  20                 	db	32
   228  000C39  38                 	db	56
   229  000C3A  20                 	db	32
   230  000C3B  00                 	db	0
   231  000C3C  20                 	db	32
   232  000C3D  39                 	db	57
   233  000C3E  20                 	db	32
   234  000C3F  00                 	db	0
   235                           
   236                           	psect	mediumconst
   237  00FDD2                     __pmediumconst:
   238                           	opt stack 0
   239  00FDD2  00                 	db	0
   240  00FDD3                     _font:
   241                           	opt stack 0
   242  00FDD3  00                 	db	0
   243  00FDD4  00                 	db	0
   244  00FDD5  00                 	db	0
   245  00FDD6  00                 	db	0
   246  00FDD7  00                 	db	0
   247  00FDD8  00                 	db	0
   248  00FDD9  00                 	db	0
   249  00FDDA  5F                 	db	95
   250  00FDDB  00                 	db	0
   251  00FDDC  00                 	db	0
   252  00FDDD  00                 	db	0
   253  00FDDE  07                 	db	7
   254  00FDDF  00                 	db	0
   255  00FDE0  07                 	db	7
   256  00FDE1  00                 	db	0
   257  00FDE2  14                 	db	20
   258  00FDE3  7F                 	db	127
   259  00FDE4  14                 	db	20
   260  00FDE5  7F                 	db	127
   261  00FDE6  14                 	db	20
   262  00FDE7  24                 	db	36
   263  00FDE8  2A                 	db	42
   264  00FDE9  7F                 	db	127
   265  00FDEA  2A                 	db	42
   266  00FDEB  12                 	db	18
   267  00FDEC  23                 	db	35
   268  00FDED  13                 	db	19
   269  00FDEE  08                 	db	8
   270  00FDEF  64                 	db	100
   271  00FDF0  62                 	db	98
   272  00FDF1  36                 	db	54
   273  00FDF2  49                 	db	73
   274  00FDF3  56                 	db	86
   275  00FDF4  20                 	db	32
   276  00FDF5  50                 	db	80
   277  00FDF6  00                 	db	0
   278  00FDF7  08                 	db	8
   279  00FDF8  07                 	db	7
   280  00FDF9  03                 	db	3
   281  00FDFA  00                 	db	0
   282  00FDFB  00                 	db	0
   283  00FDFC  1C                 	db	28
   284  00FDFD  22                 	db	34
   285  00FDFE  41                 	db	65
   286  00FDFF  00                 	db	0
   287  00FE00  00                 	db	0
   288  00FE01  41                 	db	65
   289  00FE02  22                 	db	34
   290  00FE03  1C                 	db	28
   291  00FE04  00                 	db	0
   292  00FE05  2A                 	db	42
   293  00FE06  1C                 	db	28
   294  00FE07  7F                 	db	127
   295  00FE08  1C                 	db	28
   296  00FE09  2A                 	db	42
   297  00FE0A  08                 	db	8
   298  00FE0B  08                 	db	8
   299  00FE0C  3E                 	db	62
   300  00FE0D  08                 	db	8
   301  00FE0E  08                 	db	8
   302  00FE0F  00                 	db	0
   303  00FE10  80                 	db	128
   304  00FE11  70                 	db	112
   305  00FE12  30                 	db	48
   306  00FE13  00                 	db	0
   307  00FE14  08                 	db	8
   308  00FE15  08                 	db	8
   309  00FE16  08                 	db	8
   310  00FE17  08                 	db	8
   311  00FE18  08                 	db	8
   312  00FE19  00                 	db	0
   313  00FE1A  00                 	db	0
   314  00FE1B  60                 	db	96
   315  00FE1C  60                 	db	96
   316  00FE1D  00                 	db	0
   317  00FE1E  20                 	db	32
   318  00FE1F  10                 	db	16
   319  00FE20  08                 	db	8
   320  00FE21  04                 	db	4
   321  00FE22  02                 	db	2
   322  00FE23  3E                 	db	62
   323  00FE24  51                 	db	81
   324  00FE25  49                 	db	73
   325  00FE26  45                 	db	69
   326  00FE27  3E                 	db	62
   327  00FE28  00                 	db	0
   328  00FE29  42                 	db	66
   329  00FE2A  7F                 	db	127
   330  00FE2B  40                 	db	64
   331  00FE2C  00                 	db	0
   332  00FE2D  72                 	db	114
   333  00FE2E  49                 	db	73
   334  00FE2F  49                 	db	73
   335  00FE30  49                 	db	73
   336  00FE31  46                 	db	70
   337  00FE32  21                 	db	33
   338  00FE33  41                 	db	65
   339  00FE34  49                 	db	73
   340  00FE35  4D                 	db	77
   341  00FE36  33                 	db	51
   342  00FE37  18                 	db	24
   343  00FE38  14                 	db	20
   344  00FE39  12                 	db	18
   345  00FE3A  7F                 	db	127
   346  00FE3B  10                 	db	16
   347  00FE3C  27                 	db	39
   348  00FE3D  45                 	db	69
   349  00FE3E  45                 	db	69
   350  00FE3F  45                 	db	69
   351  00FE40  39                 	db	57
   352  00FE41  3C                 	db	60
   353  00FE42  4A                 	db	74
   354  00FE43  49                 	db	73
   355  00FE44  49                 	db	73
   356  00FE45  31                 	db	49
   357  00FE46  41                 	db	65
   358  00FE47  21                 	db	33
   359  00FE48  11                 	db	17
   360  00FE49  09                 	db	9
   361  00FE4A  07                 	db	7
   362  00FE4B  36                 	db	54
   363  00FE4C  49                 	db	73
   364  00FE4D  49                 	db	73
   365  00FE4E  49                 	db	73
   366  00FE4F  36                 	db	54
   367  00FE50  46                 	db	70
   368  00FE51  49                 	db	73
   369  00FE52  49                 	db	73
   370  00FE53  29                 	db	41
   371  00FE54  1E                 	db	30
   372  00FE55  00                 	db	0
   373  00FE56  00                 	db	0
   374  00FE57  14                 	db	20
   375  00FE58  00                 	db	0
   376  00FE59  00                 	db	0
   377  00FE5A  00                 	db	0
   378  00FE5B  40                 	db	64
   379  00FE5C  34                 	db	52
   380  00FE5D  00                 	db	0
   381  00FE5E  00                 	db	0
   382  00FE5F  00                 	db	0
   383  00FE60  08                 	db	8
   384  00FE61  14                 	db	20
   385  00FE62  22                 	db	34
   386  00FE63  41                 	db	65
   387  00FE64  14                 	db	20
   388  00FE65  14                 	db	20
   389  00FE66  14                 	db	20
   390  00FE67  14                 	db	20
   391  00FE68  14                 	db	20
   392  00FE69  00                 	db	0
   393  00FE6A  41                 	db	65
   394  00FE6B  22                 	db	34
   395  00FE6C  14                 	db	20
   396  00FE6D  08                 	db	8
   397  00FE6E  02                 	db	2
   398  00FE6F  01                 	db	1
   399  00FE70  59                 	db	89
   400  00FE71  09                 	db	9
   401  00FE72  06                 	db	6
   402  00FE73  3E                 	db	62
   403  00FE74  41                 	db	65
   404  00FE75  5D                 	db	93
   405  00FE76  59                 	db	89
   406  00FE77  4E                 	db	78
   407  00FE78  7C                 	db	124
   408  00FE79  12                 	db	18
   409  00FE7A  11                 	db	17
   410  00FE7B  12                 	db	18
   411  00FE7C  7C                 	db	124
   412  00FE7D  7F                 	db	127
   413  00FE7E  49                 	db	73
   414  00FE7F  49                 	db	73
   415  00FE80  49                 	db	73
   416  00FE81  36                 	db	54
   417  00FE82  3E                 	db	62
   418  00FE83  41                 	db	65
   419  00FE84  41                 	db	65
   420  00FE85  41                 	db	65
   421  00FE86  22                 	db	34
   422  00FE87  7F                 	db	127
   423  00FE88  41                 	db	65
   424  00FE89  41                 	db	65
   425  00FE8A  41                 	db	65
   426  00FE8B  3E                 	db	62
   427  00FE8C  7F                 	db	127
   428  00FE8D  49                 	db	73
   429  00FE8E  49                 	db	73
   430  00FE8F  49                 	db	73
   431  00FE90  41                 	db	65
   432  00FE91  7F                 	db	127
   433  00FE92  09                 	db	9
   434  00FE93  09                 	db	9
   435  00FE94  09                 	db	9
   436  00FE95  01                 	db	1
   437  00FE96  3E                 	db	62
   438  00FE97  41                 	db	65
   439  00FE98  41                 	db	65
   440  00FE99  51                 	db	81
   441  00FE9A  73                 	db	115
   442  00FE9B  7F                 	db	127
   443  00FE9C  08                 	db	8
   444  00FE9D  08                 	db	8
   445  00FE9E  08                 	db	8
   446  00FE9F  7F                 	db	127
   447  00FEA0  00                 	db	0
   448  00FEA1  41                 	db	65
   449  00FEA2  7F                 	db	127
   450  00FEA3  41                 	db	65
   451  00FEA4  00                 	db	0
   452  00FEA5  20                 	db	32
   453  00FEA6  40                 	db	64
   454  00FEA7  41                 	db	65
   455  00FEA8  3F                 	db	63
   456  00FEA9  01                 	db	1
   457  00FEAA  7F                 	db	127
   458  00FEAB  08                 	db	8
   459  00FEAC  14                 	db	20
   460  00FEAD  22                 	db	34
   461  00FEAE  41                 	db	65
   462  00FEAF  7F                 	db	127
   463  00FEB0  40                 	db	64
   464  00FEB1  40                 	db	64
   465  00FEB2  40                 	db	64
   466  00FEB3  40                 	db	64
   467  00FEB4  7F                 	db	127
   468  00FEB5  02                 	db	2
   469  00FEB6  1C                 	db	28
   470  00FEB7  02                 	db	2
   471  00FEB8  7F                 	db	127
   472  00FEB9  7F                 	db	127
   473  00FEBA  04                 	db	4
   474  00FEBB  08                 	db	8
   475  00FEBC  10                 	db	16
   476  00FEBD  7F                 	db	127
   477  00FEBE  3E                 	db	62
   478  00FEBF  41                 	db	65
   479  00FEC0  41                 	db	65
   480  00FEC1  41                 	db	65
   481  00FEC2  3E                 	db	62
   482  00FEC3  7F                 	db	127
   483  00FEC4  09                 	db	9
   484  00FEC5  09                 	db	9
   485  00FEC6  09                 	db	9
   486  00FEC7  06                 	db	6
   487  00FEC8  3E                 	db	62
   488  00FEC9  41                 	db	65
   489  00FECA  51                 	db	81
   490  00FECB  21                 	db	33
   491  00FECC  5E                 	db	94
   492  00FECD  7F                 	db	127
   493  00FECE  09                 	db	9
   494  00FECF  19                 	db	25
   495  00FED0  29                 	db	41
   496  00FED1  46                 	db	70
   497  00FED2                     __end_of_font:
   498                           	opt stack 0
   499  00FED2                     _font2:
   500                           	opt stack 0
   501  00FED2  26                 	db	38
   502  00FED3  49                 	db	73
   503  00FED4  49                 	db	73
   504  00FED5  49                 	db	73
   505  00FED6  32                 	db	50
   506  00FED7  03                 	db	3
   507  00FED8  01                 	db	1
   508  00FED9  7F                 	db	127
   509  00FEDA  01                 	db	1
   510  00FEDB  03                 	db	3
   511  00FEDC  3F                 	db	63
   512  00FEDD  40                 	db	64
   513  00FEDE  40                 	db	64
   514  00FEDF  40                 	db	64
   515  00FEE0  3F                 	db	63
   516  00FEE1  1F                 	db	31
   517  00FEE2  20                 	db	32
   518  00FEE3  40                 	db	64
   519  00FEE4  20                 	db	32
   520  00FEE5  1F                 	db	31
   521  00FEE6  3F                 	db	63
   522  00FEE7  40                 	db	64
   523  00FEE8  38                 	db	56
   524  00FEE9  40                 	db	64
   525  00FEEA  3F                 	db	63
   526  00FEEB  63                 	db	99
   527  00FEEC  14                 	db	20
   528  00FEED  08                 	db	8
   529  00FEEE  14                 	db	20
   530  00FEEF  63                 	db	99
   531  00FEF0  03                 	db	3
   532  00FEF1  04                 	db	4
   533  00FEF2  78                 	db	120
   534  00FEF3  04                 	db	4
   535  00FEF4  03                 	db	3
   536  00FEF5  61                 	db	97
   537  00FEF6  59                 	db	89
   538  00FEF7  49                 	db	73
   539  00FEF8  4D                 	db	77
   540  00FEF9  43                 	db	67
   541  00FEFA  00                 	db	0
   542  00FEFB  7F                 	db	127
   543  00FEFC  41                 	db	65
   544  00FEFD  41                 	db	65
   545  00FEFE  41                 	db	65
   546  00FEFF  02                 	db	2
   547  00FF00  04                 	db	4
   548  00FF01  08                 	db	8
   549  00FF02  10                 	db	16
   550  00FF03  20                 	db	32
   551  00FF04  00                 	db	0
   552  00FF05  41                 	db	65
   553  00FF06  41                 	db	65
   554  00FF07  41                 	db	65
   555  00FF08  7F                 	db	127
   556  00FF09  04                 	db	4
   557  00FF0A  02                 	db	2
   558  00FF0B  01                 	db	1
   559  00FF0C  02                 	db	2
   560  00FF0D  04                 	db	4
   561  00FF0E  40                 	db	64
   562  00FF0F  40                 	db	64
   563  00FF10  40                 	db	64
   564  00FF11  40                 	db	64
   565  00FF12  40                 	db	64
   566  00FF13  00                 	db	0
   567  00FF14  03                 	db	3
   568  00FF15  07                 	db	7
   569  00FF16  08                 	db	8
   570  00FF17  00                 	db	0
   571  00FF18  20                 	db	32
   572  00FF19  54                 	db	84
   573  00FF1A  54                 	db	84
   574  00FF1B  78                 	db	120
   575  00FF1C  40                 	db	64
   576  00FF1D  7F                 	db	127
   577  00FF1E  28                 	db	40
   578  00FF1F  44                 	db	68
   579  00FF20  44                 	db	68
   580  00FF21  38                 	db	56
   581  00FF22  38                 	db	56
   582  00FF23  44                 	db	68
   583  00FF24  44                 	db	68
   584  00FF25  44                 	db	68
   585  00FF26  28                 	db	40
   586  00FF27  38                 	db	56
   587  00FF28  44                 	db	68
   588  00FF29  44                 	db	68
   589  00FF2A  28                 	db	40
   590  00FF2B  7F                 	db	127
   591  00FF2C  38                 	db	56
   592  00FF2D  54                 	db	84
   593  00FF2E  54                 	db	84
   594  00FF2F  54                 	db	84
   595  00FF30  18                 	db	24
   596  00FF31  00                 	db	0
   597  00FF32  08                 	db	8
   598  00FF33  7E                 	db	126
   599  00FF34  09                 	db	9
   600  00FF35  02                 	db	2
   601  00FF36  18                 	db	24
   602  00FF37  A4                 	db	164
   603  00FF38  A4                 	db	164
   604  00FF39  9C                 	db	156
   605  00FF3A  78                 	db	120
   606  00FF3B  7F                 	db	127
   607  00FF3C  08                 	db	8
   608  00FF3D  04                 	db	4
   609  00FF3E  04                 	db	4
   610  00FF3F  78                 	db	120
   611  00FF40  00                 	db	0
   612  00FF41  44                 	db	68
   613  00FF42  7D                 	db	125
   614  00FF43  40                 	db	64
   615  00FF44  00                 	db	0
   616  00FF45  20                 	db	32
   617  00FF46  40                 	db	64
   618  00FF47  40                 	db	64
   619  00FF48  3D                 	db	61
   620  00FF49  00                 	db	0
   621  00FF4A  7F                 	db	127
   622  00FF4B  10                 	db	16
   623  00FF4C  28                 	db	40
   624  00FF4D  44                 	db	68
   625  00FF4E  00                 	db	0
   626  00FF4F  00                 	db	0
   627  00FF50  41                 	db	65
   628  00FF51  7F                 	db	127
   629  00FF52  40                 	db	64
   630  00FF53  00                 	db	0
   631  00FF54  7C                 	db	124
   632  00FF55  04                 	db	4
   633  00FF56  78                 	db	120
   634  00FF57  04                 	db	4
   635  00FF58  78                 	db	120
   636  00FF59  7C                 	db	124
   637  00FF5A  08                 	db	8
   638  00FF5B  04                 	db	4
   639  00FF5C  04                 	db	4
   640  00FF5D  78                 	db	120
   641  00FF5E  38                 	db	56
   642  00FF5F  44                 	db	68
   643  00FF60  44                 	db	68
   644  00FF61  44                 	db	68
   645  00FF62  38                 	db	56
   646  00FF63  FC                 	db	252
   647  00FF64  18                 	db	24
   648  00FF65  24                 	db	36
   649  00FF66  24                 	db	36
   650  00FF67  18                 	db	24
   651  00FF68  18                 	db	24
   652  00FF69  24                 	db	36
   653  00FF6A  24                 	db	36
   654  00FF6B  18                 	db	24
   655  00FF6C  FC                 	db	252
   656  00FF6D  7C                 	db	124
   657  00FF6E  08                 	db	8
   658  00FF6F  04                 	db	4
   659  00FF70  04                 	db	4
   660  00FF71  08                 	db	8
   661  00FF72  48                 	db	72
   662  00FF73  54                 	db	84
   663  00FF74  54                 	db	84
   664  00FF75  54                 	db	84
   665  00FF76  24                 	db	36
   666  00FF77  04                 	db	4
   667  00FF78  04                 	db	4
   668  00FF79  3F                 	db	63
   669  00FF7A  44                 	db	68
   670  00FF7B  24                 	db	36
   671  00FF7C  3C                 	db	60
   672  00FF7D  40                 	db	64
   673  00FF7E  40                 	db	64
   674  00FF7F  20                 	db	32
   675  00FF80  7C                 	db	124
   676  00FF81  1C                 	db	28
   677  00FF82  20                 	db	32
   678  00FF83  40                 	db	64
   679  00FF84  20                 	db	32
   680  00FF85  1C                 	db	28
   681  00FF86  3C                 	db	60
   682  00FF87  40                 	db	64
   683  00FF88  30                 	db	48
   684  00FF89  40                 	db	64
   685  00FF8A  3C                 	db	60
   686  00FF8B  44                 	db	68
   687  00FF8C  28                 	db	40
   688  00FF8D  10                 	db	16
   689  00FF8E  28                 	db	40
   690  00FF8F  44                 	db	68
   691  00FF90  4C                 	db	76
   692  00FF91  90                 	db	144
   693  00FF92  90                 	db	144
   694  00FF93  90                 	db	144
   695  00FF94  7C                 	db	124
   696  00FF95  44                 	db	68
   697  00FF96  64                 	db	100
   698  00FF97  54                 	db	84
   699  00FF98  4C                 	db	76
   700  00FF99  44                 	db	68
   701  00FF9A  00                 	db	0
   702  00FF9B  08                 	db	8
   703  00FF9C  36                 	db	54
   704  00FF9D  41                 	db	65
   705  00FF9E  00                 	db	0
   706  00FF9F  00                 	db	0
   707  00FFA0  00                 	db	0
   708  00FFA1  77                 	db	119
   709  00FFA2  00                 	db	0
   710  00FFA3  00                 	db	0
   711  00FFA4  00                 	db	0
   712  00FFA5  41                 	db	65
   713  00FFA6  36                 	db	54
   714  00FFA7  08                 	db	8
   715  00FFA8  00                 	db	0
   716  00FFA9  02                 	db	2
   717  00FFAA  01                 	db	1
   718  00FFAB  02                 	db	2
   719  00FFAC  04                 	db	4
   720  00FFAD  02                 	db	2
   721  00FFAE                     __end_of_font2:
   722                           	opt stack 0
   723  00FFAE                     _dpowers:
   724                           	opt stack 0
   725  00FFAE  0001               	dw	1
   726  00FFB0  000A               	dw	10
   727  00FFB2  0064               	dw	100
   728  00FFB4  03E8               	dw	1000
   729  00FFB6  2710               	dw	10000
   730  00FFB8                     __end_of_dpowers:
   731                           	opt stack 0
   732  0000                     _ADCON1	set	4033
   733  0000                     _CCP2CON	set	4026
   734  0000                     _CCPR2L	set	4027
   735  0000                     _INTCON2bits	set	4081
   736  0000                     _INTCONbits	set	4082
   737  0000                     _OSCCON	set	4051
   738  0000                     _PIE1bits	set	3997
   739  0000                     _PIR1bits	set	3998
   740  0000                     _PIR2bits	set	4001
   741  0000                     _PORTA	set	3968
   742  0000                     _PORTBbits	set	3969
   743  0000                     _PORTCbits	set	3970
   744  0000                     _PORTDbits	set	3971
   745  0000                     _PORTEbits	set	3972
   746  0000                     _PR2	set	4043
   747  0000                     _RCSTA	set	4011
   748  0000                     _RCSTAbits	set	4011
   749  0000                     _SPBRG	set	4015
   750  0000                     _SPBRGH	set	4016
   751  0000                     _SSPBUF	set	4041
   752  0000                     _SSPCON1	set	4038
   753  0000                     _SSPSTAT	set	4039
   754  0000                     _SSPSTATbits	set	4039
   755  0000                     _T0CON	set	4053
   756  0000                     _T0CONbits	set	4053
   757  0000                     _T1CON	set	4045
   758  0000                     _T1CONbits	set	4045
   759  0000                     _T2CON	set	4042
   760  0000                     _T3CON	set	4017
   761  0000                     _T3CONbits	set	4017
   762  0000                     _TMR0H	set	4055
   763  0000                     _TMR0L	set	4054
   764  0000                     _TMR1H	set	4047
   765  0000                     _TMR1L	set	4046
   766  0000                     _TMR3H	set	4019
   767  0000                     _TMR3L	set	4018
   768  0000                     _TRISA	set	3986
   769  0000                     _TRISB	set	3987
   770  0000                     _TRISC	set	3988
   771  0000                     _TRISCbits	set	3988
   772  0000                     _TRISD	set	3989
   773  0000                     _TRISE	set	3990
   774  0000                     _TXREG	set	4013
   775  0000                     _TXSTA	set	4012
   776  0000                     _TXSTAbits	set	4012
   777  0000                     _RBPU	set	32655
   778  0000                     _TRMT	set	32097
   779  00FFB8                     STR_1:
   780  00FFB8  20                 	db	32
   781  00FFB9  54                 	db	84	;'T'
   782  00FFBA  65                 	db	101	;'e'
   783  00FFBB  6D                 	db	109	;'m'
   784  00FFBC  70                 	db	112	;'p'
   785  00FFBD  65                 	db	101	;'e'
   786  00FFBE  72                 	db	114	;'r'
   787  00FFBF  61                 	db	97	;'a'
   788  00FFC0  74                 	db	116	;'t'
   789  00FFC1  75                 	db	117	;'u'
   790  00FFC2  72                 	db	114	;'r'
   791  00FFC3  65                 	db	101	;'e'
   792  00FFC4  20                 	db	32
   793  00FFC5  3D                 	db	61	;'='
   794  00FFC6  20                 	db	32
   795  00FFC7  25                 	db	37
   796  00FFC8  64                 	db	100	;'d'
   797  00FFC9  20                 	db	32
   798  00FFCA  64                 	db	100	;'d'
   799  00FFCB  65                 	db	101	;'e'
   800  00FFCC  67                 	db	103	;'g'
   801  00FFCD  72                 	db	114	;'r'
   802  00FFCE  65                 	db	101	;'e'
   803  00FFCF  65                 	db	101	;'e'
   804  00FFD0  73                 	db	115	;'s'
   805  00FFD1  43                 	db	67	;'C'
   806  00FFD2  20                 	db	32
   807  00FFD3  3D                 	db	61	;'='
   808  00FFD4  20                 	db	32
   809  00FFD5  25                 	db	37
   810  00FFD6  64                 	db	100	;'d'
   811  00FFD7  20                 	db	32
   812  00FFD8  64                 	db	100	;'d'
   813  00FFD9  65                 	db	101	;'e'
   814  00FFDA  67                 	db	103	;'g'
   815  00FFDB  72                 	db	114	;'r'
   816  00FFDC  65                 	db	101	;'e'
   817  00FFDD  65                 	db	101	;'e'
   818  00FFDE  73                 	db	115	;'s'
   819  00FFDF  46                 	db	70	;'F'
   820  00FFE0  0D                 	db	13
   821  00FFE1  0A                 	db	10
   822  00FFE2  00                 	db	0
   823  00FFE3                     STR_2:
   824  00FFE3  45                 	db	69	;'E'
   825  00FFE4  43                 	db	67	;'C'
   826  00FFE5  45                 	db	69	;'E'
   827  00FFE6  33                 	db	51	;'3'
   828  00FFE7  33                 	db	51	;'3'
   829  00FFE8  30                 	db	48	;'0'
   830  00FFE9  31                 	db	49	;'1'
   831  00FFEA  4C                 	db	76	;'L'
   832  00FFEB  20                 	db	32
   833  00FFEC  46                 	db	70	;'F'
   834  00FFED  61                 	db	97	;'a'
   835  00FFEE  6C                 	db	108	;'l'
   836  00FFEF  6C                 	db	108	;'l'
   837  00FFF0  20                 	db	32
   838  00FFF1  32                 	db	50	;'2'
   839  00FFF2  31                 	db	49	;'1'
   840  00FFF3  2D                 	db	45
   841  00FFF4  53                 	db	83	;'S'
   842  00FFF5  34                 	db	52	;'4'
   843  00FFF6  00                 	db	0
   844  00FFF7                     STR_3:
   845  00FFF7  4C                 	db	76	;'L'
   846  00FFF8  41                 	db	65	;'A'
   847  00FFF9  42                 	db	66	;'B'
   848  00FFFA  20                 	db	32
   849  00FFFB  31                 	db	49	;'1'
   850  00FFFC  30                 	db	48	;'0'
   851  00FFFD  20                 	db	32
   852  00FFFE  00                 	db	0
   853                           
   854                           ; #config settings
   855  00FFFF  00                 	db	0	; dummy byte at the end
   856  0000                     
   857                           	psect	cinit
   858  000A3E                     __pcinit:
   859                           	opt stack 0
   860  000A3E                     start_initialization:
   861                           	opt stack 0
   862  000A3E                     __initialization:
   863                           	opt stack 0
   864                           
   865                           ; Clear objects allocated to BANK0 (31 bytes)
   866  000A3E  EE00  F0C9         	lfsr	0,__pbssBANK0
   867  000A42  0E1F               	movlw	31
   868  000A44                     clear_0:
   869  000A44  6AEE               	clrf	postinc0,c
   870  000A46  06E8               	decf	wreg,f,c
   871  000A48  E1FD               	bnz	clear_0
   872                           
   873                           ; Clear objects allocated to COMRAM (47 bytes)
   874  000A4A  EE00  F03D         	lfsr	0,__pbssCOMRAM
   875  000A4E  0E2F               	movlw	47
   876  000A50                     clear_1:
   877  000A50  6AEE               	clrf	postinc0,c
   878  000A52  06E8               	decf	wreg,f,c
   879  000A54  E1FD               	bnz	clear_1
   880                           
   881                           ; Initialize objects allocated to BANK1 (84 bytes)
   882                           ; load TBLPTR registers with __pidataBANK1
   883  000A56  0EEC               	movlw	low __pidataBANK1
   884  000A58  6EF6               	movwf	tblptrl,c
   885  000A5A  0E0B               	movlw	high __pidataBANK1
   886  000A5C  6EF7               	movwf	tblptrh,c
   887  000A5E  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   888  000A60  6EF8               	movwf	tblptru,c
   889  000A62  EE01  F000         	lfsr	0,__pdataBANK1
   890  000A66  EE10 F054          	lfsr	1,84
   891  000A6A                     copy_data0:
   892  000A6A  0009               	tblrd		*+
   893  000A6C  CFF5 FFEE          	movff	tablat,postinc0
   894  000A70  50E5               	movf	postdec1,w,c
   895  000A72  50E1               	movf	fsr1l,w,c
   896  000A74  E1FA               	bnz	copy_data0
   897                           
   898                           ; Initialize objects allocated to BANK0 (73 bytes)
   899                           ; load TBLPTR registers with __pidataBANK0
   900  000A76  0E76               	movlw	low __pidataBANK0
   901  000A78  6EF6               	movwf	tblptrl,c
   902  000A7A  0E0D               	movlw	high __pidataBANK0
   903  000A7C  6EF7               	movwf	tblptrh,c
   904  000A7E  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   905  000A80  6EF8               	movwf	tblptru,c
   906  000A82  EE00  F080         	lfsr	0,__pdataBANK0
   907  000A86  EE10 F049          	lfsr	1,73
   908  000A8A                     copy_data1:
   909  000A8A  0009               	tblrd		*+
   910  000A8C  CFF5 FFEE          	movff	tablat,postinc0
   911  000A90  50E5               	movf	postdec1,w,c
   912  000A92  50E1               	movf	fsr1l,w,c
   913  000A94  E1FA               	bnz	copy_data1
   914                           
   915                           ; Initialize objects allocated to COMRAM (2 bytes)
   916                           ; load TBLPTR registers with __pidataCOMRAM
   917  000A96  0EC4               	movlw	low __pidataCOMRAM
   918  000A98  6EF6               	movwf	tblptrl,c
   919  000A9A  0E11               	movlw	high __pidataCOMRAM
   920  000A9C  6EF7               	movwf	tblptrh,c
   921  000A9E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   922  000AA0  6EF8               	movwf	tblptru,c
   923  000AA2  0009               	tblrd		*+	;fetch initializer
   924  000AA4  CFF5 F06C          	movff	tablat,__pdataCOMRAM
   925  000AA8  0009               	tblrd		*+	;fetch initializer
   926  000AAA  CFF5 F06D          	movff	tablat,__pdataCOMRAM+1
   927  000AAE                     end_of_initialization:
   928                           	opt stack 0
   929  000AAE                     __end_of__initialization:
   930                           	opt stack 0
   931  000AAE  0E00               	movlw	low (__Lmediumconst shr (0+16))
   932  000AB0  6EF8               	movwf	tblptru,c
   933  000AB2  0100               	movlb	0
   934  000AB4  EF94  F005         	goto	_main	;jump to C main() function
   935                           tblptru	equ	0xFF8
   936                           tblptrh	equ	0xFF7
   937                           tblptrl	equ	0xFF6
   938                           tablat	equ	0xFF5
   939                           postinc0	equ	0xFEE
   940                           wreg	equ	0xFE8
   941                           postdec1	equ	0xFE5
   942                           fsr1l	equ	0xFE1
   943                           
   944                           	psect	bssCOMRAM
   945  00003D                     __pbssCOMRAM:
   946                           	opt stack 0
   947  00003D                     _Nec_code:
   948                           	opt stack 0
   949  00003D                     	ds	4
   950  000041                     _Time_Elapsed:
   951                           	opt stack 0
   952  000041                     	ds	2
   953  000043                     _nbr:
   954                           	opt stack 0
   955  000043                     	ds	2
   956  000045                     _nec_ok:
   957                           	opt stack 0
   958  000045                     	ds	2
   959  000047                     _txt:
   960                           	opt stack 0
   961  000047                     	ds	2
   962  000049                     _Address:
   963                           	opt stack 0
   964  000049                     	ds	1
   965  00004A                     _Cmd:
   966                           	opt stack 0
   967  00004A                     	ds	1
   968  00004B                     _Device:
   969                           	opt stack 0
   970  00004B                     	ds	1
   971  00004C                     _Nec_code1:
   972                           	opt stack 0
   973  00004C                     	ds	1
   974  00004D                     _Nec_state:
   975                           	opt stack 0
   976  00004D                     	ds	1
   977  00004E                     _TempSecond:
   978                           	opt stack 0
   979  00004E                     	ds	1
   980  00004F                     __tft_type:
   981                           	opt stack 0
   982  00004F                     	ds	1
   983  000050                     _alarm_date:
   984                           	opt stack 0
   985  000050                     	ds	1
   986  000051                     _alarm_hour:
   987                           	opt stack 0
   988  000051                     	ds	1
   989  000052                     _alarm_minute:
   990                           	opt stack 0
   991  000052                     	ds	1
   992  000053                     _alarm_second:
   993                           	opt stack 0
   994  000053                     	ds	1
   995  000054                     _bit_count:
   996                           	opt stack 0
   997  000054                     	ds	1
   998  000055                     _colstart:
   999                           	opt stack 0
  1000  000055                     	ds	1
  1001  000056                     _day:
  1002                           	opt stack 0
  1003  000056                     	ds	1
  1004  000057                     _dow:
  1005                           	opt stack 0
  1006  000057                     	ds	1
  1007  000058                     _found:
  1008                           	opt stack 0
  1009  000058                     	ds	1
  1010  000059                     _hour:
  1011                           	opt stack 0
  1012  000059                     	ds	1
  1013  00005A                     _i:
  1014                           	opt stack 0
  1015  00005A                     	ds	1
  1016  00005B                     _minute:
  1017                           	opt stack 0
  1018  00005B                     	ds	1
  1019  00005C                     _month:
  1020                           	opt stack 0
  1021  00005C                     	ds	1
  1022  00005D                     _prev_second:
  1023                           	opt stack 0
  1024  00005D                     	ds	1
  1025  00005E                     _rowstart:
  1026                           	opt stack 0
  1027  00005E                     	ds	1
  1028  00005F                     _second:
  1029                           	opt stack 0
  1030  00005F                     	ds	1
  1031  000060                     _setup_alarm_hour:
  1032                           	opt stack 0
  1033  000060                     	ds	1
  1034  000061                     _setup_alarm_minute:
  1035                           	opt stack 0
  1036  000061                     	ds	1
  1037  000062                     _setup_alarm_second:
  1038                           	opt stack 0
  1039  000062                     	ds	1
  1040  000063                     _setup_day:
  1041                           	opt stack 0
  1042  000063                     	ds	1
  1043  000064                     _setup_hour:
  1044                           	opt stack 0
  1045  000064                     	ds	1
  1046  000065                     _setup_minute:
  1047                           	opt stack 0
  1048  000065                     	ds	1
  1049  000066                     _setup_month:
  1050                           	opt stack 0
  1051  000066                     	ds	1
  1052  000067                     _setup_second:
  1053                           	opt stack 0
  1054  000067                     	ds	1
  1055  000068                     _setup_year:
  1056                           	opt stack 0
  1057  000068                     	ds	1
  1058  000069                     _tempC:
  1059                           	opt stack 0
  1060  000069                     	ds	1
  1061  00006A                     _tempF:
  1062                           	opt stack 0
  1063  00006A                     	ds	1
  1064  00006B                     _year:
  1065                           	opt stack 0
  1066  00006B                     	ds	1
  1067                           tblptru	equ	0xFF8
  1068                           tblptrh	equ	0xFF7
  1069                           tblptrl	equ	0xFF6
  1070                           tablat	equ	0xFF5
  1071                           postinc0	equ	0xFEE
  1072                           wreg	equ	0xFE8
  1073                           postdec1	equ	0xFE5
  1074                           fsr1l	equ	0xFE1
  1075                           
  1076                           	psect	dataCOMRAM
  1077  00006C                     __pdataCOMRAM:
  1078                           	opt stack 0
  1079  00006C                     _tempSecond:
  1080                           	opt stack 0
  1081  00006C                     	ds	1
  1082  00006D                     _wrap:
  1083                           	opt stack 0
  1084  00006D                     	ds	1
  1085                           tblptru	equ	0xFF8
  1086                           tblptrh	equ	0xFF7
  1087                           tblptrl	equ	0xFF6
  1088                           tablat	equ	0xFF5
  1089                           postinc0	equ	0xFEE
  1090                           wreg	equ	0xFE8
  1091                           postdec1	equ	0xFE5
  1092                           fsr1l	equ	0xFE1
  1093                           
  1094                           	psect	bssBANK0
  1095  0000C9                     __pbssBANK0:
  1096                           	opt stack 0
  1097  0000C9                     _buffer:
  1098                           	opt stack 0
  1099  0000C9                     	ds	31
  1100                           tblptru	equ	0xFF8
  1101                           tblptrh	equ	0xFF7
  1102                           tblptrl	equ	0xFF6
  1103                           tablat	equ	0xFF5
  1104                           postinc0	equ	0xFEE
  1105                           wreg	equ	0xFE8
  1106                           postdec1	equ	0xFE5
  1107                           fsr1l	equ	0xFE1
  1108                           
  1109                           	psect	dataBANK0
  1110  000080                     __pdataBANK0:
  1111                           	opt stack 0
  1112  000080                     _color:
  1113                           	opt stack 0
  1114  000080                     	ds	42
  1115  0000AA                     _array1:
  1116                           	opt stack 0
  1117  0000AA                     	ds	21
  1118  0000BF                     _Display_D1:
  1119                           	opt stack 0
  1120  0000BF                     	ds	10
  1121                           tblptru	equ	0xFF8
  1122                           tblptrh	equ	0xFF7
  1123                           tblptrl	equ	0xFF6
  1124                           tablat	equ	0xFF5
  1125                           postinc0	equ	0xFEE
  1126                           wreg	equ	0xFE8
  1127                           postdec1	equ	0xFE5
  1128                           fsr1l	equ	0xFE1
  1129                           
  1130                           	psect	dataBANK1
  1131  000100                     __pdataBANK1:
  1132                           	opt stack 0
  1133  000100                     _txt1:
  1134                           	opt stack 0
  1135  000100                     	ds	84
  1136                           tblptru	equ	0xFF8
  1137                           tblptrh	equ	0xFF7
  1138                           tblptrl	equ	0xFF6
  1139                           tablat	equ	0xFF5
  1140                           postinc0	equ	0xFEE
  1141                           wreg	equ	0xFE8
  1142                           postdec1	equ	0xFE5
  1143                           fsr1l	equ	0xFE1
  1144                           
  1145                           	psect	cstackBANK0
  1146  0000E8                     __pcstackBANK0:
  1147                           	opt stack 0
  1148  0000E8                     drawtext@y:
  1149                           	opt stack 0
  1150                           
  1151                           ; 1 bytes @ 0x0
  1152  0000E8                     	ds	1
  1153  0000E9                     drawtext@_text:
  1154                           	opt stack 0
  1155                           
  1156                           ; 2 bytes @ 0x1
  1157  0000E9                     	ds	2
  1158  0000EB                     drawtext@color:
  1159                           	opt stack 0
  1160                           
  1161                           ; 2 bytes @ 0x3
  1162  0000EB                     	ds	2
  1163  0000ED                     drawtext@bg:
  1164                           	opt stack 0
  1165                           
  1166                           ; 2 bytes @ 0x5
  1167  0000ED                     	ds	2
  1168  0000EF                     drawtext@size:
  1169                           	opt stack 0
  1170                           
  1171                           ; 1 bytes @ 0x7
  1172  0000EF                     	ds	1
  1173  0000F0                     drawtext@x:
  1174                           	opt stack 0
  1175                           
  1176                           ; 1 bytes @ 0x8
  1177  0000F0                     	ds	1
  1178  0000F1                     drawtext@textsize:
  1179                           	opt stack 0
  1180                           
  1181                           ; 2 bytes @ 0x9
  1182  0000F1                     	ds	2
  1183  0000F3                     drawtext@i:
  1184                           	opt stack 0
  1185                           
  1186                           ; 2 bytes @ 0xB
  1187  0000F3                     	ds	2
  1188  0000F5                     drawtext@cursor_y:
  1189                           	opt stack 0
  1190                           
  1191                           ; 1 bytes @ 0xD
  1192  0000F5                     	ds	1
  1193  0000F6                     drawtext@cursor_x:
  1194                           	opt stack 0
  1195                           
  1196                           ; 1 bytes @ 0xE
  1197  0000F6                     	ds	1
  1198                           tblptru	equ	0xFF8
  1199                           tblptrh	equ	0xFF7
  1200                           tblptrl	equ	0xFF6
  1201                           tablat	equ	0xFF5
  1202                           postinc0	equ	0xFEE
  1203                           wreg	equ	0xFE8
  1204                           postdec1	equ	0xFE5
  1205                           fsr1l	equ	0xFE1
  1206                           
  1207                           	psect	cstackCOMRAM
  1208  000001                     __pcstackCOMRAM:
  1209                           	opt stack 0
  1210  000001                     ??_INT0_isr:
  1211  000001                     
  1212                           ; 1 bytes @ 0x0
  1213  000001                     	ds	2
  1214  000003                     ??_chkisr:
  1215                           
  1216                           ; 0 bytes @ 0x2
  1217  000003                     	ds	14
  1218  000011                     ?_strlen:
  1219                           	opt stack 0
  1220  000011                     ?___wmul:
  1221                           	opt stack 0
  1222  000011                     ?___lwdiv:
  1223                           	opt stack 0
  1224  000011                     I2C_Read@ack:
  1225                           	opt stack 0
  1226  000011                     I2C_Write@outByte:
  1227                           	opt stack 0
  1228  000011                     spiwrite@x:
  1229                           	opt stack 0
  1230  000011                     putch@c:
  1231                           	opt stack 0
  1232  000011                     OpenUSART@spbrg:
  1233                           	opt stack 0
  1234  000011                     ___wmul@multiplier:
  1235                           	opt stack 0
  1236  000011                     ___lwdiv@dividend:
  1237                           	opt stack 0
  1238  000011                     strcpy@to:
  1239                           	opt stack 0
  1240  000011                     strlen@s:
  1241                           	opt stack 0
  1242  000011                     I2C_Init@c:
  1243                           	opt stack 0
  1244                           
  1245                           ; 4 bytes @ 0x10
  1246  000011                     	ds	1
  1247  000012                     I2C_Read@n:
  1248                           	opt stack 0
  1249  000012                     I2C_Write@n:
  1250                           	opt stack 0
  1251  000012                     spiwrite@spidata:
  1252                           	opt stack 0
  1253                           
  1254                           ; 1 bytes @ 0x11
  1255  000012                     	ds	1
  1256  000013                     ??_strlen:
  1257  000013                     I2C_Read@inByte:
  1258                           	opt stack 0
  1259  000013                     I2C_Write_Cmd_Only@Cmd:
  1260                           	opt stack 0
  1261  000013                     I2C_Write_Cmd_Write_Data@Cmd:
  1262                           	opt stack 0
  1263  000013                     write_command@cmd_:
  1264                           	opt stack 0
  1265  000013                     write_data@data_:
  1266                           	opt stack 0
  1267  000013                     OpenUSART@config:
  1268                           	opt stack 0
  1269  000013                     ___wmul@multiplicand:
  1270                           	opt stack 0
  1271  000013                     ___lwdiv@divisor:
  1272                           	opt stack 0
  1273  000013                     strcpy@from:
  1274                           	opt stack 0
  1275                           
  1276                           ; 2 bytes @ 0x12
  1277  000013                     	ds	1
  1278  000014                     ?_DS1621_Read_Temp:
  1279                           	opt stack 0
  1280  000014                     I2C_Write_Cmd_Only@Device:
  1281                           	opt stack 0
  1282  000014                     I2C_Write_Cmd_Write_Data@Data_Out:
  1283                           	opt stack 0
  1284  000014                     setAddrWindow@y0:
  1285                           	opt stack 0
  1286                           
  1287                           ; 1 bytes @ 0x13
  1288  000014                     	ds	1
  1289  000015                     I2C_Write_Cmd_Write_Data@Device:
  1290                           	opt stack 0
  1291  000015                     setAddrWindow@x1:
  1292                           	opt stack 0
  1293  000015                     ___wmul@product:
  1294                           	opt stack 0
  1295  000015                     ___lwdiv@quotient:
  1296                           	opt stack 0
  1297  000015                     strcpy@cp:
  1298                           	opt stack 0
  1299  000015                     strlen@cp:
  1300                           	opt stack 0
  1301                           
  1302                           ; 2 bytes @ 0x14
  1303  000015                     	ds	1
  1304  000016                     DS1621_Init@Device:
  1305                           	opt stack 0
  1306  000016                     DS1621_Read_Temp@Cmd:
  1307                           	opt stack 0
  1308  000016                     setAddrWindow@y1:
  1309                           	opt stack 0
  1310                           
  1311                           ; 1 bytes @ 0x15
  1312  000016                     	ds	1
  1313  000017                     ?___awdiv:
  1314                           	opt stack 0
  1315  000017                     DS1621_Read_Temp@Data_Ret:
  1316                           	opt stack 0
  1317  000017                     setAddrWindow@x0:
  1318                           	opt stack 0
  1319  000017                     ___lwdiv@counter:
  1320                           	opt stack 0
  1321  000017                     delay_ms@ms:
  1322                           	opt stack 0
  1323  000017                     ___awdiv@dividend:
  1324                           	opt stack 0
  1325                           
  1326                           ; 2 bytes @ 0x16
  1327  000017                     	ds	1
  1328  000018                     ?___lwmod:
  1329                           	opt stack 0
  1330  000018                     DS1621_Read_Temp@Device:
  1331                           	opt stack 0
  1332  000018                     drawPixel@y:
  1333                           	opt stack 0
  1334  000018                     drawFastVLine@y:
  1335                           	opt stack 0
  1336  000018                     fillRectangle@y:
  1337                           	opt stack 0
  1338  000018                     ___lwmod@dividend:
  1339                           	opt stack 0
  1340                           
  1341                           ; 2 bytes @ 0x17
  1342  000018                     	ds	1
  1343  000019                     ??_delay_ms:
  1344  000019                     drawFastVLine@h:
  1345                           	opt stack 0
  1346  000019                     fillRectangle@w:
  1347                           	opt stack 0
  1348  000019                     drawPixel@color:
  1349                           	opt stack 0
  1350  000019                     ___awdiv@divisor:
  1351                           	opt stack 0
  1352                           
  1353                           ; 2 bytes @ 0x18
  1354  000019                     	ds	1
  1355  00001A                     fillRectangle@h:
  1356                           	opt stack 0
  1357  00001A                     drawFastVLine@color:
  1358                           	opt stack 0
  1359  00001A                     ___lwmod@divisor:
  1360                           	opt stack 0
  1361                           
  1362                           ; 2 bytes @ 0x19
  1363  00001A                     	ds	1
  1364  00001B                     drawPixel@x:
  1365                           	opt stack 0
  1366  00001B                     ___awdiv@counter:
  1367                           	opt stack 0
  1368  00001B                     delay_ms@count:
  1369                           	opt stack 0
  1370  00001B                     fillRectangle@color:
  1371                           	opt stack 0
  1372                           
  1373                           ; 2 bytes @ 0x1A
  1374  00001B                     	ds	1
  1375  00001C                     ??_drawFastVLine:
  1376  00001C                     ___awdiv@sign:
  1377                           	opt stack 0
  1378  00001C                     ___lwmod@counter:
  1379                           	opt stack 0
  1380                           
  1381                           ; 1 bytes @ 0x1B
  1382  00001C                     	ds	1
  1383  00001D                     ??_fillRectangle:
  1384  00001D                     ?_printf:
  1385                           	opt stack 0
  1386  00001D                     printf@f:
  1387                           	opt stack 0
  1388  00001D                     ___awdiv@quotient:
  1389                           	opt stack 0
  1390                           
  1391                           ; 2 bytes @ 0x1C
  1392  00001D                     	ds	3
  1393  000020                     drawFastVLine@hi:
  1394                           	opt stack 0
  1395                           
  1396                           ; 1 bytes @ 0x1F
  1397  000020                     	ds	1
  1398  000021                     drawFastVLine@lo:
  1399                           	opt stack 0
  1400  000021                     fillRectangle@hi:
  1401                           	opt stack 0
  1402                           
  1403                           ; 1 bytes @ 0x20
  1404  000021                     	ds	1
  1405  000022                     drawFastVLine@x:
  1406                           	opt stack 0
  1407  000022                     fillRectangle@lo:
  1408                           	opt stack 0
  1409                           
  1410                           ; 1 bytes @ 0x21
  1411  000022                     	ds	1
  1412  000023                     ??_printf:
  1413  000023                     fillRect@y:
  1414                           	opt stack 0
  1415  000023                     fillRectangle@x:
  1416                           	opt stack 0
  1417                           
  1418                           ; 1 bytes @ 0x22
  1419  000023                     	ds	1
  1420  000024                     fillRect@w:
  1421                           	opt stack 0
  1422  000024                     fillScreen@color:
  1423                           	opt stack 0
  1424  000024                     printf@ap:
  1425                           	opt stack 0
  1426                           
  1427                           ; 2 bytes @ 0x23
  1428  000024                     	ds	1
  1429  000025                     fillRect@h:
  1430                           	opt stack 0
  1431                           
  1432                           ; 1 bytes @ 0x24
  1433  000025                     	ds	1
  1434  000026                     printf@flag:
  1435                           	opt stack 0
  1436  000026                     fillRect@color:
  1437                           	opt stack 0
  1438                           
  1439                           ; 2 bytes @ 0x25
  1440  000026                     	ds	1
  1441  000027                     printf@prec:
  1442                           	opt stack 0
  1443                           
  1444                           ; 1 bytes @ 0x26
  1445  000027                     	ds	1
  1446  000028                     ??_fillRect:
  1447  000028                     printf@val:
  1448                           	opt stack 0
  1449                           
  1450                           ; 2 bytes @ 0x27
  1451  000028                     	ds	2
  1452  00002A                     printf@c:
  1453                           	opt stack 0
  1454                           
  1455                           ; 1 bytes @ 0x29
  1456  00002A                     	ds	1
  1457  00002B                     fillRect@x:
  1458                           	opt stack 0
  1459                           
  1460                           ; 1 bytes @ 0x2A
  1461  00002B                     	ds	1
  1462  00002C                     fillRect@i:
  1463                           	opt stack 0
  1464                           
  1465                           ; 2 bytes @ 0x2B
  1466  00002C                     	ds	2
  1467  00002E                     drawChar@y:
  1468                           	opt stack 0
  1469                           
  1470                           ; 1 bytes @ 0x2D
  1471  00002E                     	ds	1
  1472  00002F                     drawChar@c:
  1473                           	opt stack 0
  1474                           
  1475                           ; 1 bytes @ 0x2E
  1476  00002F                     	ds	1
  1477  000030                     drawChar@color:
  1478                           	opt stack 0
  1479                           
  1480                           ; 2 bytes @ 0x2F
  1481  000030                     	ds	2
  1482  000032                     drawChar@bg:
  1483                           	opt stack 0
  1484                           
  1485                           ; 2 bytes @ 0x31
  1486  000032                     	ds	2
  1487  000034                     drawChar@size:
  1488                           	opt stack 0
  1489                           
  1490                           ; 1 bytes @ 0x33
  1491  000034                     	ds	1
  1492  000035                     drawChar@line:
  1493                           	opt stack 0
  1494                           
  1495                           ; 1 bytes @ 0x34
  1496  000035                     	ds	1
  1497  000036                     drawChar@x:
  1498                           	opt stack 0
  1499                           
  1500                           ; 1 bytes @ 0x35
  1501  000036                     	ds	1
  1502  000037                     drawChar@j:
  1503                           	opt stack 0
  1504                           
  1505                           ; 1 bytes @ 0x36
  1506  000037                     	ds	1
  1507  000038                     drawChar@i:
  1508                           	opt stack 0
  1509                           
  1510                           ; 1 bytes @ 0x37
  1511  000038                     	ds	1
  1512  000039                     ??_drawtext:
  1513                           
  1514                           ; 0 bytes @ 0x38
  1515  000039                     	ds	2
  1516  00003B                     main@tempF:
  1517                           	opt stack 0
  1518                           
  1519                           ; 1 bytes @ 0x3A
  1520  00003B                     	ds	1
  1521  00003C                     main@tempC:
  1522                           	opt stack 0
  1523                           
  1524                           ; 1 bytes @ 0x3B
  1525  00003C                     	ds	1
  1526                           tblptru	equ	0xFF8
  1527                           tblptrh	equ	0xFF7
  1528                           tblptrl	equ	0xFF6
  1529                           tablat	equ	0xFF5
  1530                           postinc0	equ	0xFEE
  1531                           wreg	equ	0xFE8
  1532                           postdec1	equ	0xFE5
  1533                           fsr1l	equ	0xFE1
  1534                           
  1535 ;;
  1536 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1537 ;;
  1538 ;; *************** function _main *****************
  1539 ;; Defined at:
  1540 ;;		line 209 in file "Lab10p1.c"
  1541 ;; Parameters:    Size  Location     Type
  1542 ;;		None
  1543 ;; Auto vars:     Size  Location     Type
  1544 ;;  tempC           1   59[COMRAM] char 
  1545 ;;  tempF           1   58[COMRAM] char 
  1546 ;; Return value:  Size  Location     Type
  1547 ;;		None               void
  1548 ;; Registers used:
  1549 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1550 ;; Tracked objects:
  1551 ;;		On entry : 0/0
  1552 ;;		On exit  : 0/0
  1553 ;;		Unchanged: 0/0
  1554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1555 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1556 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1557 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1558 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1559 ;;Total ram usage:        2 bytes
  1560 ;; Hardware stack levels required when called:   12
  1561 ;; This function calls:
  1562 ;;		_DS1621_Read_Temp
  1563 ;;		_Do_Init
  1564 ;;		_Wait_One_Sec
  1565 ;;		___awdiv
  1566 ;;		___wmul
  1567 ;;		_printf
  1568 ;; This function is called by:
  1569 ;;		Startup code after reset
  1570 ;; This function uses a non-reentrant model
  1571 ;;
  1572                           
  1573                           	psect	text0
  1574  000B28                     __ptext0:
  1575                           	opt stack 0
  1576  000B28                     _main:
  1577                           	opt stack 19
  1578                           
  1579                           ;Lab10p1.c: 211: Do_Init();
  1580                           
  1581                           ;incstack = 0
  1582  000B28  EC04  F007         	call	_Do_Init	;wreg free
  1583  000B2C  D000               	goto	l4240
  1584  000B2E                     l4240:
  1585                           
  1586                           ;Lab10p1.c: 214: {
  1587                           ;Lab10p1.c: 215: signed char tempC = DS1621_Read_Temp();
  1588  000B2E  EC83  F007         	call	_DS1621_Read_Temp	;wreg free
  1589  000B32  5014               	movf	?_DS1621_Read_Temp,w,c
  1590  000B34  6E3C               	movwf	main@tempC,c
  1591                           
  1592                           ;Lab10p1.c: 216: signed char tempF = (tempC * 9 / 5) + 32;
  1593  000B36  503C               	movf	main@tempC,w,c
  1594  000B38  6E11               	movwf	___wmul@multiplier,c
  1595  000B3A  6A12               	clrf	___wmul@multiplier+1,c
  1596  000B3C  BE11               	btfsc	___wmul@multiplier,7,c
  1597  000B3E  0612               	decf	___wmul@multiplier+1,f,c
  1598  000B40  0E00               	movlw	0
  1599  000B42  6E14               	movwf	___wmul@multiplicand+1,c
  1600  000B44  0E09               	movlw	9
  1601  000B46  6E13               	movwf	___wmul@multiplicand,c
  1602  000B48  ECFF  F007         	call	___wmul	;wreg free
  1603  000B4C  C011  F017         	movff	?___wmul,___awdiv@dividend
  1604  000B50  C012  F018         	movff	?___wmul+1,___awdiv@dividend+1
  1605  000B54  0E00               	movlw	0
  1606  000B56  6E1A               	movwf	___awdiv@divisor+1,c
  1607  000B58  0E05               	movlw	5
  1608  000B5A  6E19               	movwf	___awdiv@divisor,c
  1609  000B5C  EC52  F004         	call	___awdiv	;wreg free
  1610  000B60  5017               	movf	?___awdiv,w,c
  1611  000B62  0F20               	addlw	32
  1612  000B64  6E3B               	movwf	main@tempF,c
  1613                           
  1614                           ;Lab10p1.c: 217: printf (" Temperature = %d degreesC = %d degreesF\r\n", tempC, tempF);
  1615  000B66  0EB8               	movlw	low STR_1
  1616  000B68  6E1D               	movwf	printf@f,c
  1617  000B6A  0EFF               	movlw	high STR_1
  1618  000B6C  6E1E               	movwf	printf@f+1,c
  1619  000B6E  503C               	movf	main@tempC,w,c
  1620  000B70  6E1F               	movwf	?_printf+2,c
  1621  000B72  6A20               	clrf	?_printf+3,c
  1622  000B74  BE1F               	btfsc	?_printf+2,7,c
  1623  000B76  0620               	decf	?_printf+3,f,c
  1624  000B78  503B               	movf	main@tempF,w,c
  1625  000B7A  6E21               	movwf	?_printf+4,c
  1626  000B7C  6A22               	clrf	?_printf+5,c
  1627  000B7E  BE21               	btfsc	?_printf+4,7,c
  1628  000B80  0622               	decf	?_printf+5,f,c
  1629  000B82  EC69  F001         	call	_printf	;wreg free
  1630                           
  1631                           ;Lab10p1.c: 218: Wait_One_Sec();
  1632  000B86  ECB4  F008         	call	_Wait_One_Sec	;wreg free
  1633  000B8A  D7D1               	goto	l4240
  1634  000B8C  EF0C  F000         	goto	start
  1635  000B90                     __end_of_main:
  1636                           	opt stack 0
  1637                           tblptru	equ	0xFF8
  1638                           tblptrh	equ	0xFF7
  1639                           tblptrl	equ	0xFF6
  1640                           tablat	equ	0xFF5
  1641                           postinc0	equ	0xFEE
  1642                           wreg	equ	0xFE8
  1643                           postdec1	equ	0xFE5
  1644                           fsr1l	equ	0xFE1
  1645                           
  1646 ;; *************** function _printf *****************
  1647 ;; Defined at:
  1648 ;;		line 464 in file "E:\XC8\sources\common\doprnt.c"
  1649 ;; Parameters:    Size  Location     Type
  1650 ;;  f               2   28[COMRAM] PTR const unsigned char 
  1651 ;;		 -> STR_1(43), 
  1652 ;; Auto vars:     Size  Location     Type
  1653 ;;  tmpval          4    0        struct .
  1654 ;;  cp              3    0        PTR const unsigned char 
  1655 ;;  val             2   39[COMRAM] unsigned int 
  1656 ;;  ap              2   35[COMRAM] PTR void [1]
  1657 ;;		 -> ?_printf(2), 
  1658 ;;  len             2    0        unsigned int 
  1659 ;;  c               1   41[COMRAM] char 
  1660 ;;  prec            1   38[COMRAM] char 
  1661 ;;  flag            1   37[COMRAM] unsigned char 
  1662 ;; Return value:  Size  Location     Type
  1663 ;;                  2   28[COMRAM] int 
  1664 ;; Registers used:
  1665 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1666 ;; Tracked objects:
  1667 ;;		On entry : 0/0
  1668 ;;		On exit  : 0/0
  1669 ;;		Unchanged: 0/0
  1670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1671 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1672 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1673 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1674 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1675 ;;Total ram usage:       14 bytes
  1676 ;; Hardware stack levels used:    1
  1677 ;; Hardware stack levels required when called:    4
  1678 ;; This function calls:
  1679 ;;		___lwdiv
  1680 ;;		___lwmod
  1681 ;;		_putch
  1682 ;; This function is called by:
  1683 ;;		_main
  1684 ;; This function uses a non-reentrant model
  1685 ;;
  1686                           
  1687                           	psect	text1
  1688  0002D2                     __ptext1:
  1689                           	opt stack 0
  1690  0002D2                     _printf:
  1691                           	opt stack 26
  1692                           
  1693                           ;doprnt.c: 466: va_list ap;
  1694                           ;doprnt.c: 499: signed char c;
  1695                           ;doprnt.c: 506: signed char prec;
  1696                           ;doprnt.c: 508: unsigned char flag;
  1697                           ;doprnt.c: 523: union {
  1698                           ;doprnt.c: 524: unsigned long vd;
  1699                           ;doprnt.c: 525: double integ;
  1700                           ;doprnt.c: 526: } tmpval;
  1701                           ;doprnt.c: 528: unsigned int val;
  1702                           ;doprnt.c: 529: unsigned len;
  1703                           ;doprnt.c: 530: const char * cp;
  1704                           ;doprnt.c: 533: *ap = __va_start();
  1705                           
  1706                           ;incstack = 0
  1707  0002D2  0E1F               	movlw	low (?_printf+2)
  1708  0002D4  6E24               	movwf	printf@ap,c
  1709  0002D6  0E00               	movlw	high (?_printf+2)
  1710  0002D8  6E25               	movwf	printf@ap+1,c
  1711                           
  1712                           ;doprnt.c: 536: while(c = *f++) {
  1713  0002DA  D08B               	goto	l3162
  1714  0002DC                     l3116:
  1715                           
  1716                           ;doprnt.c: 538: if(c != '%')
  1717  0002DC  0E25               	movlw	37
  1718  0002DE  182A               	xorwf	printf@c,w,c
  1719  0002E0  B4D8               	btfsc	status,2,c
  1720  0002E2  D004               	goto	l3120
  1721                           
  1722                           ;doprnt.c: 540: {
  1723                           ;doprnt.c: 541: (putch(c) );
  1724  0002E4  502A               	movf	printf@c,w,c
  1725  0002E6  ECAD  F008         	call	_putch
  1726                           
  1727                           ;doprnt.c: 542: continue;
  1728  0002EA  D083               	goto	l3162
  1729  0002EC                     l3120:
  1730                           
  1731                           ;doprnt.c: 543: }
  1732                           ;doprnt.c: 548: flag = 0;
  1733  0002EC  0E00               	movlw	0
  1734  0002EE  6E26               	movwf	printf@flag,c
  1735                           
  1736                           ;doprnt.c: 635: switch(c = *f++) {
  1737  0002F0  D004               	goto	l3124
  1738                           
  1739                           ;doprnt.c: 638: goto alldone;
  1740                           
  1741                           ;doprnt.c: 637: case 0:
  1742  0002F2  D08D               	goto	l587
  1743                           
  1744                           ;doprnt.c: 698: case 'i':
  1745                           ;doprnt.c: 699: break;
  1746                           
  1747                           ;doprnt.c: 697: case 'd':
  1748  0002F4  D015               	goto	l3126
  1749                           
  1750                           ;doprnt.c: 813: continue;
  1751                           
  1752                           ;doprnt.c: 802: default:
  1753  0002F6  D07D               	goto	l3162
  1754                           
  1755                           ;doprnt.c: 822: }
  1756  0002F8  D013               	goto	l3126
  1757  0002FA                     l3124:
  1758  0002FA  C01D  FFF6         	movff	printf@f,tblptrl
  1759  0002FE  C01E  FFF7         	movff	printf@f+1,tblptrh
  1760  000302  4A1D               	infsnz	printf@f,f,c
  1761  000304  2A1E               	incf	printf@f+1,f,c
  1762  000306                     	if	0	;tblptru may be non-zero
  1763  000306                     	endif
  1764  000306                     	if	0	;tblptru may be non-zero
  1765  000306                     	endif
  1766  000306  0008               	tblrd		*
  1767  000308  CFF5 F02A          	movff	tablat,printf@c
  1768  00030C  502A               	movf	printf@c,w,c
  1769                           
  1770                           ; Switch size 1, requested type "space"
  1771                           ; Number of cases is 3, Range of values is 0 to 105
  1772                           ; switch strategies available:
  1773                           ; Name         Instructions Cycles
  1774                           ; simple_byte           10     6 (average)
  1775                           ;	Chosen strategy is simple_byte
  1776  00030E  0A00               	xorlw	0	; case 0
  1777  000310  B4D8               	btfsc	status,2,c
  1778  000312  D07D               	goto	l587
  1779  000314  0A64               	xorlw	100	; case 100
  1780  000316  B4D8               	btfsc	status,2,c
  1781  000318  D003               	goto	l3126
  1782  00031A  0A0D               	xorlw	13	; case 105
  1783  00031C  A4D8               	btfss	status,2,c
  1784  00031E  D069               	goto	l3162
  1785  000320                     l3126:
  1786                           
  1787                           ;doprnt.c: 1253: {
  1788                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1789  000320  C024  FFD9         	movff	printf@ap,fsr2l
  1790  000324  C025  FFDA         	movff	printf@ap+1,fsr2h
  1791  000328  CFDE F028          	movff	postinc2,printf@val
  1792  00032C  CFDD F029          	movff	postdec2,printf@val+1
  1793  000330  0E02               	movlw	2
  1794  000332  2624               	addwf	printf@ap,f,c
  1795  000334  0E00               	movlw	0
  1796  000336  2225               	addwfc	printf@ap+1,f,c
  1797                           
  1798                           ;doprnt.c: 1261: if((int)val < 0) {
  1799  000338  AE29               	btfss	printf@val+1,7,c
  1800  00033A  D007               	goto	l3136
  1801                           
  1802                           ;doprnt.c: 1262: flag |= 0x03;
  1803  00033C  0E03               	movlw	3
  1804  00033E  1226               	iorwf	printf@flag,f,c
  1805                           
  1806                           ;doprnt.c: 1263: val = -val;
  1807  000340  6C28               	negf	printf@val,c
  1808  000342  1E29               	comf	printf@val+1,f,c
  1809  000344  B0D8               	btfsc	status,0,c
  1810  000346  2A29               	incf	printf@val+1,f,c
  1811  000348  D000               	goto	l3136
  1812  00034A                     l3136:
  1813                           
  1814                           ;doprnt.c: 1264: }
  1815                           ;doprnt.c: 1266: }
  1816                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1817  00034A  0E01               	movlw	1
  1818  00034C  6E2A               	movwf	printf@c,c
  1819  00034E                     l3138:
  1820  00034E  0E05               	movlw	5
  1821  000350  182A               	xorwf	printf@c,w,c
  1822  000352  B4D8               	btfsc	status,2,c
  1823  000354  D016               	goto	l3150
  1824  000356  D001               	goto	l3142
  1825  000358  D014               	goto	l3150
  1826  00035A                     l3142:
  1827                           
  1828                           ;doprnt.c: 1306: if(val < dpowers[c])
  1829  00035A  502A               	movf	printf@c,w,c
  1830  00035C  0D02               	mullw	2
  1831  00035E  0EAE               	movlw	low _dpowers
  1832  000360  24F3               	addwf	prodl,w,c
  1833  000362  6EF6               	movwf	tblptrl,c
  1834  000364  0EFF               	movlw	high _dpowers
  1835  000366  20F4               	addwfc	prodh,w,c
  1836  000368  6EF7               	movwf	tblptrh,c
  1837  00036A                     	if	0	;There are less than 3 active tblptr bytes
  1838  00036A                     	endif
  1839  00036A  0009               	tblrd		*+
  1840  00036C  50F5               	movf	tablat,w,c
  1841  00036E  5C28               	subwf	printf@val,w,c
  1842  000370  0009               	tblrd		*+
  1843  000372  50F5               	movf	tablat,w,c
  1844  000374  5829               	subwfb	printf@val+1,w,c
  1845  000376  A0D8               	btfss	status,0,c
  1846  000378  D004               	goto	l3150
  1847  00037A  D001               	goto	l3146
  1848                           
  1849                           ;doprnt.c: 1307: break;
  1850  00037C  D002               	goto	l3150
  1851  00037E                     l3146:
  1852  00037E  2A2A               	incf	printf@c,f,c
  1853  000380  D7E6               	goto	l3138
  1854  000382                     l3150:
  1855                           
  1856                           ;doprnt.c: 1422: {
  1857                           ;doprnt.c: 1438: if(flag & 0x03)
  1858  000382  C026  F023         	movff	printf@flag,??_printf
  1859  000386  0E03               	movlw	3
  1860  000388  1623               	andwf	??_printf,f,c
  1861  00038A  B4D8               	btfsc	status,2,c
  1862  00038C  D004               	goto	l3154
  1863                           
  1864                           ;doprnt.c: 1439: (putch('-') );
  1865  00038E  0E2D               	movlw	45
  1866  000390  ECAD  F008         	call	_putch
  1867  000394  D000               	goto	l3154
  1868  000396                     l3154:
  1869                           
  1870                           ;doprnt.c: 1469: }
  1871                           ;doprnt.c: 1472: prec = c;
  1872  000396  C02A  F027         	movff	printf@c,printf@prec
  1873                           
  1874                           ;doprnt.c: 1474: while(prec--) {
  1875  00039A  D025               	goto	l3160
  1876  00039C                     l3156:
  1877                           
  1878                           ;doprnt.c: 1478: {
  1879                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1880  00039C  5027               	movf	printf@prec,w,c
  1881  00039E  0D02               	mullw	2
  1882  0003A0  0EAE               	movlw	low _dpowers
  1883  0003A2  24F3               	addwf	prodl,w,c
  1884  0003A4  6EF6               	movwf	tblptrl,c
  1885  0003A6  0EFF               	movlw	high _dpowers
  1886  0003A8  20F4               	addwfc	prodh,w,c
  1887  0003AA  6EF7               	movwf	tblptrh,c
  1888  0003AC                     	if	0	;There are less than 3 active tblptr bytes
  1889  0003AC                     	endif
  1890  0003AC  0009               	tblrd		*+
  1891  0003AE  CFF5 F013          	movff	tablat,___lwdiv@divisor
  1892  0003B2  000A               	tblrd		*-
  1893  0003B4  CFF5 F014          	movff	tablat,___lwdiv@divisor+1
  1894  0003B8  C028  F011         	movff	printf@val,___lwdiv@dividend
  1895  0003BC  C029  F012         	movff	printf@val+1,___lwdiv@dividend+1
  1896  0003C0  ECC8  F005         	call	___lwdiv	;wreg free
  1897  0003C4  C011  F018         	movff	?___lwdiv,___lwmod@dividend
  1898  0003C8  C012  F019         	movff	?___lwdiv+1,___lwmod@dividend+1
  1899  0003CC  0E00               	movlw	0
  1900  0003CE  6E1B               	movwf	___lwmod@divisor+1,c
  1901  0003D0  0E0A               	movlw	10
  1902  0003D2  6E1A               	movwf	___lwmod@divisor,c
  1903  0003D4  EC70  F006         	call	___lwmod	;wreg free
  1904  0003D8  5018               	movf	?___lwmod,w,c
  1905  0003DA  0F30               	addlw	48
  1906  0003DC  6E2A               	movwf	printf@c,c
  1907                           
  1908                           ;doprnt.c: 1523: }
  1909                           ;doprnt.c: 1524: (putch(c) );
  1910  0003DE  502A               	movf	printf@c,w,c
  1911  0003E0  ECAD  F008         	call	_putch
  1912  0003E4  D000               	goto	l3160
  1913  0003E6                     l3160:
  1914  0003E6  0627               	decf	printf@prec,f,c
  1915  0003E8  2827               	incf	printf@prec,w,c
  1916  0003EA  B4D8               	btfsc	status,2,c
  1917  0003EC  D002               	goto	l3162
  1918  0003EE  D7D6               	goto	l3156
  1919  0003F0  D000               	goto	l3162
  1920  0003F2                     l3162:
  1921  0003F2  C01D  FFF6         	movff	printf@f,tblptrl
  1922  0003F6  C01E  FFF7         	movff	printf@f+1,tblptrh
  1923  0003FA  4A1D               	infsnz	printf@f,f,c
  1924  0003FC  2A1E               	incf	printf@f+1,f,c
  1925  0003FE                     	if	0	;tblptru may be non-zero
  1926  0003FE                     	endif
  1927  0003FE                     	if	0	;tblptru may be non-zero
  1928  0003FE                     	endif
  1929  0003FE  0008               	tblrd		*
  1930  000400  CFF5 F02A          	movff	tablat,printf@c
  1931  000404  502A               	movf	printf@c,w,c
  1932  000406  B4D8               	btfsc	status,2,c
  1933  000408  D002               	goto	l587
  1934  00040A  D768               	goto	l3116
  1935  00040C  D000               	goto	l587
  1936  00040E                     l587:
  1937  00040E  0012               	return		;funcret
  1938  000410                     __end_of_printf:
  1939                           	opt stack 0
  1940                           tblptru	equ	0xFF8
  1941                           tblptrh	equ	0xFF7
  1942                           tblptrl	equ	0xFF6
  1943                           tablat	equ	0xFF5
  1944                           prodh	equ	0xFF4
  1945                           prodl	equ	0xFF3
  1946                           postinc0	equ	0xFEE
  1947                           wreg	equ	0xFE8
  1948                           postdec1	equ	0xFE5
  1949                           fsr1l	equ	0xFE1
  1950                           postinc2	equ	0xFDE
  1951                           postdec2	equ	0xFDD
  1952                           fsr2h	equ	0xFDA
  1953                           fsr2l	equ	0xFD9
  1954                           status	equ	0xFD8
  1955                           
  1956 ;; *************** function _putch *****************
  1957 ;; Defined at:
  1958 ;;		line 149 in file "Lab10p1.c"
  1959 ;; Parameters:    Size  Location     Type
  1960 ;;  c               1    wreg     unsigned char 
  1961 ;; Auto vars:     Size  Location     Type
  1962 ;;  c               1   16[COMRAM] unsigned char 
  1963 ;; Return value:  Size  Location     Type
  1964 ;;		None               void
  1965 ;; Registers used:
  1966 ;;		wreg
  1967 ;; Tracked objects:
  1968 ;;		On entry : 0/0
  1969 ;;		On exit  : 0/0
  1970 ;;		Unchanged: 0/0
  1971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1972 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1973 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1974 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1975 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1976 ;;Total ram usage:        1 bytes
  1977 ;; Hardware stack levels used:    1
  1978 ;; Hardware stack levels required when called:    3
  1979 ;; This function calls:
  1980 ;;		Nothing
  1981 ;; This function is called by:
  1982 ;;		_printf
  1983 ;; This function uses a non-reentrant model
  1984 ;;
  1985                           
  1986                           	psect	text2
  1987  00115A                     __ptext2:
  1988                           	opt stack 0
  1989  00115A                     _putch:
  1990                           	opt stack 26
  1991                           
  1992                           ;incstack = 0
  1993                           ;putch@c stored from wreg
  1994  00115A  6E11               	movwf	putch@c,c
  1995                           
  1996                           ;Lab10p1.c: 151: while (!TRMT);
  1997  00115C  D000               	goto	l518
  1998  00115E                     l518:
  1999  00115E  A2AC               	btfss	4012,1,c	;volatile
  2000  001160  D7FE               	goto	l518
  2001                           
  2002                           ;Lab10p1.c: 152: TXREG = c;
  2003  001162  C011  FFAD         	movff	putch@c,4013	;volatile
  2004  001166  0012               	return		;funcret
  2005  001168                     __end_of_putch:
  2006                           	opt stack 0
  2007                           tblptru	equ	0xFF8
  2008                           tblptrh	equ	0xFF7
  2009                           tblptrl	equ	0xFF6
  2010                           tablat	equ	0xFF5
  2011                           prodh	equ	0xFF4
  2012                           prodl	equ	0xFF3
  2013                           postinc0	equ	0xFEE
  2014                           wreg	equ	0xFE8
  2015                           postdec1	equ	0xFE5
  2016                           fsr1l	equ	0xFE1
  2017                           postinc2	equ	0xFDE
  2018                           postdec2	equ	0xFDD
  2019                           fsr2h	equ	0xFDA
  2020                           fsr2l	equ	0xFD9
  2021                           status	equ	0xFD8
  2022                           
  2023 ;; *************** function ___lwmod *****************
  2024 ;; Defined at:
  2025 ;;		line 8 in file "E:\XC8\sources\common\lwmod.c"
  2026 ;; Parameters:    Size  Location     Type
  2027 ;;  dividend        2   23[COMRAM] unsigned int 
  2028 ;;  divisor         2   25[COMRAM] unsigned int 
  2029 ;; Auto vars:     Size  Location     Type
  2030 ;;  counter         1   27[COMRAM] unsigned char 
  2031 ;; Return value:  Size  Location     Type
  2032 ;;                  2   23[COMRAM] unsigned int 
  2033 ;; Registers used:
  2034 ;;		wreg, status,2, status,0
  2035 ;; Tracked objects:
  2036 ;;		On entry : 0/0
  2037 ;;		On exit  : 0/0
  2038 ;;		Unchanged: 0/0
  2039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2040 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2041 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2042 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2043 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2044 ;;Total ram usage:        5 bytes
  2045 ;; Hardware stack levels used:    1
  2046 ;; Hardware stack levels required when called:    3
  2047 ;; This function calls:
  2048 ;;		Nothing
  2049 ;; This function is called by:
  2050 ;;		_printf
  2051 ;; This function uses a non-reentrant model
  2052 ;;
  2053                           
  2054                           	psect	text3
  2055  000CE0                     __ptext3:
  2056                           	opt stack 0
  2057  000CE0                     ___lwmod:
  2058                           	opt stack 26
  2059                           
  2060                           ;incstack = 0
  2061  000CE0  501A               	movf	___lwmod@divisor,w,c
  2062  000CE2  101B               	iorwf	___lwmod@divisor+1,w,c
  2063  000CE4  B4D8               	btfsc	status,2,c
  2064  000CE6  D01D               	goto	l1151
  2065  000CE8  0E01               	movlw	1
  2066  000CEA  6E1C               	movwf	___lwmod@counter,c
  2067  000CEC  D005               	goto	l3002
  2068  000CEE                     l3000:
  2069  000CEE  90D8               	bcf	status,0,c
  2070  000CF0  361A               	rlcf	___lwmod@divisor,f,c
  2071  000CF2  361B               	rlcf	___lwmod@divisor+1,f,c
  2072  000CF4  2A1C               	incf	___lwmod@counter,f,c
  2073  000CF6  D000               	goto	l3002
  2074  000CF8                     l3002:
  2075  000CF8  BE1B               	btfsc	___lwmod@divisor+1,7,c
  2076  000CFA  D002               	goto	l3004
  2077  000CFC  D7F8               	goto	l3000
  2078  000CFE  D000               	goto	l3004
  2079  000D00                     l3004:
  2080  000D00  501A               	movf	___lwmod@divisor,w,c
  2081  000D02  5C18               	subwf	___lwmod@dividend,w,c
  2082  000D04  501B               	movf	___lwmod@divisor+1,w,c
  2083  000D06  5819               	subwfb	___lwmod@dividend+1,w,c
  2084  000D08  A0D8               	btfss	status,0,c
  2085  000D0A  D005               	goto	l3008
  2086  000D0C  501A               	movf	___lwmod@divisor,w,c
  2087  000D0E  5E18               	subwf	___lwmod@dividend,f,c
  2088  000D10  501B               	movf	___lwmod@divisor+1,w,c
  2089  000D12  5A19               	subwfb	___lwmod@dividend+1,f,c
  2090  000D14  D000               	goto	l3008
  2091  000D16                     l3008:
  2092  000D16  90D8               	bcf	status,0,c
  2093  000D18  321B               	rrcf	___lwmod@divisor+1,f,c
  2094  000D1A  321A               	rrcf	___lwmod@divisor,f,c
  2095  000D1C  2E1C               	decfsz	___lwmod@counter,f,c
  2096  000D1E  D7F0               	goto	l3004
  2097  000D20  D000               	goto	l1151
  2098  000D22                     l1151:
  2099  000D22  C018  F018         	movff	___lwmod@dividend,?___lwmod
  2100  000D26  C019  F019         	movff	___lwmod@dividend+1,?___lwmod+1
  2101  000D2A  0012               	return		;funcret
  2102  000D2C                     __end_of___lwmod:
  2103                           	opt stack 0
  2104                           tblptru	equ	0xFF8
  2105                           tblptrh	equ	0xFF7
  2106                           tblptrl	equ	0xFF6
  2107                           tablat	equ	0xFF5
  2108                           prodh	equ	0xFF4
  2109                           prodl	equ	0xFF3
  2110                           postinc0	equ	0xFEE
  2111                           wreg	equ	0xFE8
  2112                           postdec1	equ	0xFE5
  2113                           fsr1l	equ	0xFE1
  2114                           postinc2	equ	0xFDE
  2115                           postdec2	equ	0xFDD
  2116                           fsr2h	equ	0xFDA
  2117                           fsr2l	equ	0xFD9
  2118                           status	equ	0xFD8
  2119                           
  2120 ;; *************** function ___lwdiv *****************
  2121 ;; Defined at:
  2122 ;;		line 8 in file "E:\XC8\sources\common\lwdiv.c"
  2123 ;; Parameters:    Size  Location     Type
  2124 ;;  dividend        2   16[COMRAM] unsigned int 
  2125 ;;  divisor         2   18[COMRAM] unsigned int 
  2126 ;; Auto vars:     Size  Location     Type
  2127 ;;  quotient        2   20[COMRAM] unsigned int 
  2128 ;;  counter         1   22[COMRAM] unsigned char 
  2129 ;; Return value:  Size  Location     Type
  2130 ;;                  2   16[COMRAM] unsigned int 
  2131 ;; Registers used:
  2132 ;;		wreg, status,2, status,0
  2133 ;; Tracked objects:
  2134 ;;		On entry : 0/0
  2135 ;;		On exit  : 0/0
  2136 ;;		Unchanged: 0/0
  2137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2138 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2139 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2140 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2141 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2142 ;;Total ram usage:        7 bytes
  2143 ;; Hardware stack levels used:    1
  2144 ;; Hardware stack levels required when called:    3
  2145 ;; This function calls:
  2146 ;;		Nothing
  2147 ;; This function is called by:
  2148 ;;		_printf
  2149 ;; This function uses a non-reentrant model
  2150 ;;
  2151                           
  2152                           	psect	text4
  2153  000B90                     __ptext4:
  2154                           	opt stack 0
  2155  000B90                     ___lwdiv:
  2156                           	opt stack 26
  2157                           
  2158                           ;incstack = 0
  2159  000B90  0E00               	movlw	0
  2160  000B92  6E16               	movwf	___lwdiv@quotient+1,c
  2161  000B94  0E00               	movlw	0
  2162  000B96  6E15               	movwf	___lwdiv@quotient,c
  2163  000B98  5013               	movf	___lwdiv@divisor,w,c
  2164  000B9A  1014               	iorwf	___lwdiv@divisor+1,w,c
  2165  000B9C  B4D8               	btfsc	status,2,c
  2166  000B9E  D021               	goto	l1141
  2167  000BA0  0E01               	movlw	1
  2168  000BA2  6E17               	movwf	___lwdiv@counter,c
  2169  000BA4  D005               	goto	l2982
  2170  000BA6                     l2980:
  2171  000BA6  90D8               	bcf	status,0,c
  2172  000BA8  3613               	rlcf	___lwdiv@divisor,f,c
  2173  000BAA  3614               	rlcf	___lwdiv@divisor+1,f,c
  2174  000BAC  2A17               	incf	___lwdiv@counter,f,c
  2175  000BAE  D000               	goto	l2982
  2176  000BB0                     l2982:
  2177  000BB0  BE14               	btfsc	___lwdiv@divisor+1,7,c
  2178  000BB2  D002               	goto	l2984
  2179  000BB4  D7F8               	goto	l2980
  2180  000BB6  D000               	goto	l2984
  2181  000BB8                     l2984:
  2182  000BB8  90D8               	bcf	status,0,c
  2183  000BBA  3615               	rlcf	___lwdiv@quotient,f,c
  2184  000BBC  3616               	rlcf	___lwdiv@quotient+1,f,c
  2185  000BBE  5013               	movf	___lwdiv@divisor,w,c
  2186  000BC0  5C11               	subwf	___lwdiv@dividend,w,c
  2187  000BC2  5014               	movf	___lwdiv@divisor+1,w,c
  2188  000BC4  5812               	subwfb	___lwdiv@dividend+1,w,c
  2189  000BC6  A0D8               	btfss	status,0,c
  2190  000BC8  D006               	goto	l2992
  2191  000BCA  5013               	movf	___lwdiv@divisor,w,c
  2192  000BCC  5E11               	subwf	___lwdiv@dividend,f,c
  2193  000BCE  5014               	movf	___lwdiv@divisor+1,w,c
  2194  000BD0  5A12               	subwfb	___lwdiv@dividend+1,f,c
  2195  000BD2  8015               	bsf	___lwdiv@quotient,0,c
  2196  000BD4  D000               	goto	l2992
  2197  000BD6                     l2992:
  2198  000BD6  90D8               	bcf	status,0,c
  2199  000BD8  3214               	rrcf	___lwdiv@divisor+1,f,c
  2200  000BDA  3213               	rrcf	___lwdiv@divisor,f,c
  2201  000BDC  2E17               	decfsz	___lwdiv@counter,f,c
  2202  000BDE  D7EC               	goto	l2984
  2203  000BE0  D000               	goto	l1141
  2204  000BE2                     l1141:
  2205  000BE2  C015  F011         	movff	___lwdiv@quotient,?___lwdiv
  2206  000BE6  C016  F012         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2207  000BEA  0012               	return		;funcret
  2208  000BEC                     __end_of___lwdiv:
  2209                           	opt stack 0
  2210                           tblptru	equ	0xFF8
  2211                           tblptrh	equ	0xFF7
  2212                           tblptrl	equ	0xFF6
  2213                           tablat	equ	0xFF5
  2214                           prodh	equ	0xFF4
  2215                           prodl	equ	0xFF3
  2216                           postinc0	equ	0xFEE
  2217                           wreg	equ	0xFE8
  2218                           postdec1	equ	0xFE5
  2219                           fsr1l	equ	0xFE1
  2220                           postinc2	equ	0xFDE
  2221                           postdec2	equ	0xFDD
  2222                           fsr2h	equ	0xFDA
  2223                           fsr2l	equ	0xFD9
  2224                           status	equ	0xFD8
  2225                           
  2226 ;; *************** function ___awdiv *****************
  2227 ;; Defined at:
  2228 ;;		line 8 in file "E:\XC8\sources\common\awdiv.c"
  2229 ;; Parameters:    Size  Location     Type
  2230 ;;  dividend        2   22[COMRAM] int 
  2231 ;;  divisor         2   24[COMRAM] int 
  2232 ;; Auto vars:     Size  Location     Type
  2233 ;;  quotient        2   28[COMRAM] int 
  2234 ;;  sign            1   27[COMRAM] unsigned char 
  2235 ;;  counter         1   26[COMRAM] unsigned char 
  2236 ;; Return value:  Size  Location     Type
  2237 ;;                  2   22[COMRAM] int 
  2238 ;; Registers used:
  2239 ;;		wreg, status,2, status,0
  2240 ;; Tracked objects:
  2241 ;;		On entry : 0/0
  2242 ;;		On exit  : 0/0
  2243 ;;		Unchanged: 0/0
  2244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2245 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2246 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2247 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2248 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2249 ;;Total ram usage:        8 bytes
  2250 ;; Hardware stack levels used:    1
  2251 ;; Hardware stack levels required when called:    3
  2252 ;; This function calls:
  2253 ;;		Nothing
  2254 ;; This function is called by:
  2255 ;;		_main
  2256 ;; This function uses a non-reentrant model
  2257 ;;
  2258                           
  2259                           	psect	text5
  2260  0008A4                     __ptext5:
  2261                           	opt stack 0
  2262  0008A4                     ___awdiv:
  2263                           	opt stack 27
  2264                           
  2265                           ;incstack = 0
  2266  0008A4  0E00               	movlw	0
  2267  0008A6  6E1C               	movwf	___awdiv@sign,c
  2268  0008A8  AE1A               	btfss	___awdiv@divisor+1,7,c
  2269  0008AA  D007               	goto	l3172
  2270  0008AC  6C19               	negf	___awdiv@divisor,c
  2271  0008AE  1E1A               	comf	___awdiv@divisor+1,f,c
  2272  0008B0  B0D8               	btfsc	status,0,c
  2273  0008B2  2A1A               	incf	___awdiv@divisor+1,f,c
  2274  0008B4  0E01               	movlw	1
  2275  0008B6  6E1C               	movwf	___awdiv@sign,c
  2276  0008B8  D000               	goto	l3172
  2277  0008BA                     l3172:
  2278  0008BA  AE18               	btfss	___awdiv@dividend+1,7,c
  2279  0008BC  D007               	goto	l3178
  2280  0008BE  6C17               	negf	___awdiv@dividend,c
  2281  0008C0  1E18               	comf	___awdiv@dividend+1,f,c
  2282  0008C2  B0D8               	btfsc	status,0,c
  2283  0008C4  2A18               	incf	___awdiv@dividend+1,f,c
  2284  0008C6  0E01               	movlw	1
  2285  0008C8  1A1C               	xorwf	___awdiv@sign,f,c
  2286  0008CA  D000               	goto	l3178
  2287  0008CC                     l3178:
  2288  0008CC  0E00               	movlw	0
  2289  0008CE  6E1E               	movwf	___awdiv@quotient+1,c
  2290  0008D0  0E00               	movlw	0
  2291  0008D2  6E1D               	movwf	___awdiv@quotient,c
  2292  0008D4  5019               	movf	___awdiv@divisor,w,c
  2293  0008D6  101A               	iorwf	___awdiv@divisor+1,w,c
  2294  0008D8  B4D8               	btfsc	status,2,c
  2295  0008DA  D021               	goto	l3200
  2296  0008DC  0E01               	movlw	1
  2297  0008DE  6E1B               	movwf	___awdiv@counter,c
  2298  0008E0  D005               	goto	l3186
  2299  0008E2                     l3184:
  2300  0008E2  90D8               	bcf	status,0,c
  2301  0008E4  3619               	rlcf	___awdiv@divisor,f,c
  2302  0008E6  361A               	rlcf	___awdiv@divisor+1,f,c
  2303  0008E8  2A1B               	incf	___awdiv@counter,f,c
  2304  0008EA  D000               	goto	l3186
  2305  0008EC                     l3186:
  2306  0008EC  BE1A               	btfsc	___awdiv@divisor+1,7,c
  2307  0008EE  D002               	goto	l3188
  2308  0008F0  D7F8               	goto	l3184
  2309  0008F2  D000               	goto	l3188
  2310  0008F4                     l3188:
  2311  0008F4  90D8               	bcf	status,0,c
  2312  0008F6  361D               	rlcf	___awdiv@quotient,f,c
  2313  0008F8  361E               	rlcf	___awdiv@quotient+1,f,c
  2314  0008FA  5019               	movf	___awdiv@divisor,w,c
  2315  0008FC  5C17               	subwf	___awdiv@dividend,w,c
  2316  0008FE  501A               	movf	___awdiv@divisor+1,w,c
  2317  000900  5818               	subwfb	___awdiv@dividend+1,w,c
  2318  000902  A0D8               	btfss	status,0,c
  2319  000904  D006               	goto	l3196
  2320  000906  5019               	movf	___awdiv@divisor,w,c
  2321  000908  5E17               	subwf	___awdiv@dividend,f,c
  2322  00090A  501A               	movf	___awdiv@divisor+1,w,c
  2323  00090C  5A18               	subwfb	___awdiv@dividend+1,f,c
  2324  00090E  801D               	bsf	___awdiv@quotient,0,c
  2325  000910  D000               	goto	l3196
  2326  000912                     l3196:
  2327  000912  90D8               	bcf	status,0,c
  2328  000914  321A               	rrcf	___awdiv@divisor+1,f,c
  2329  000916  3219               	rrcf	___awdiv@divisor,f,c
  2330  000918  2E1B               	decfsz	___awdiv@counter,f,c
  2331  00091A  D7EC               	goto	l3188
  2332  00091C  D000               	goto	l3200
  2333  00091E                     l3200:
  2334  00091E  501C               	movf	___awdiv@sign,w,c
  2335  000920  B4D8               	btfsc	status,2,c
  2336  000922  D005               	goto	l3204
  2337  000924  6C1D               	negf	___awdiv@quotient,c
  2338  000926  1E1E               	comf	___awdiv@quotient+1,f,c
  2339  000928  B0D8               	btfsc	status,0,c
  2340  00092A  2A1E               	incf	___awdiv@quotient+1,f,c
  2341  00092C  D000               	goto	l3204
  2342  00092E                     l3204:
  2343  00092E  C01D  F017         	movff	___awdiv@quotient,?___awdiv
  2344  000932  C01E  F018         	movff	___awdiv@quotient+1,?___awdiv+1
  2345  000936  D000               	goto	l816
  2346  000938                     l816:
  2347  000938  0012               	return		;funcret
  2348  00093A                     __end_of___awdiv:
  2349                           	opt stack 0
  2350                           tblptru	equ	0xFF8
  2351                           tblptrh	equ	0xFF7
  2352                           tblptrl	equ	0xFF6
  2353                           tablat	equ	0xFF5
  2354                           prodh	equ	0xFF4
  2355                           prodl	equ	0xFF3
  2356                           postinc0	equ	0xFEE
  2357                           wreg	equ	0xFE8
  2358                           postdec1	equ	0xFE5
  2359                           fsr1l	equ	0xFE1
  2360                           postinc2	equ	0xFDE
  2361                           postdec2	equ	0xFDD
  2362                           fsr2h	equ	0xFDA
  2363                           fsr2l	equ	0xFD9
  2364                           status	equ	0xFD8
  2365                           
  2366 ;; *************** function _Wait_One_Sec *****************
  2367 ;; Defined at:
  2368 ;;		line 182 in file "Lab10p1.c"
  2369 ;; Parameters:    Size  Location     Type
  2370 ;;		None
  2371 ;; Auto vars:     Size  Location     Type
  2372 ;;		None
  2373 ;; Return value:  Size  Location     Type
  2374 ;;		None               void
  2375 ;; Registers used:
  2376 ;;		wreg, status,2, cstack
  2377 ;; Tracked objects:
  2378 ;;		On entry : 0/0
  2379 ;;		On exit  : 0/0
  2380 ;;		Unchanged: 0/0
  2381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2382 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2383 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2384 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2385 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2386 ;;Total ram usage:        0 bytes
  2387 ;; Hardware stack levels used:    1
  2388 ;; Hardware stack levels required when called:    4
  2389 ;; This function calls:
  2390 ;;		_Wait_Half_Second
  2391 ;; This function is called by:
  2392 ;;		_main
  2393 ;; This function uses a non-reentrant model
  2394 ;;
  2395                           
  2396                           	psect	text6
  2397  001168                     __ptext6:
  2398                           	opt stack 0
  2399  001168                     _Wait_One_Sec:
  2400                           	opt stack 26
  2401                           
  2402                           ;Lab10p1.c: 184: Wait_Half_Second();
  2403                           
  2404                           ;incstack = 0
  2405  001168  EC40  F008         	call	_Wait_Half_Second	;wreg free
  2406                           
  2407                           ;Lab10p1.c: 185: PORTEbits.RE1 = 0;
  2408  00116C  9284               	bcf	3972,1,c	;volatile
  2409                           
  2410                           ;Lab10p1.c: 186: Wait_Half_Second();
  2411  00116E  EC40  F008         	call	_Wait_Half_Second	;wreg free
  2412                           
  2413                           ;Lab10p1.c: 187: PORTEbits.RE1 = 1;
  2414  001172  8284               	bsf	3972,1,c	;volatile
  2415  001174  0012               	return		;funcret
  2416  001176                     __end_of_Wait_One_Sec:
  2417                           	opt stack 0
  2418                           tblptru	equ	0xFF8
  2419                           tblptrh	equ	0xFF7
  2420                           tblptrl	equ	0xFF6
  2421                           tablat	equ	0xFF5
  2422                           prodh	equ	0xFF4
  2423                           prodl	equ	0xFF3
  2424                           postinc0	equ	0xFEE
  2425                           wreg	equ	0xFE8
  2426                           postdec1	equ	0xFE5
  2427                           fsr1l	equ	0xFE1
  2428                           postinc2	equ	0xFDE
  2429                           postdec2	equ	0xFDD
  2430                           fsr2h	equ	0xFDA
  2431                           fsr2l	equ	0xFD9
  2432                           status	equ	0xFD8
  2433                           
  2434 ;; *************** function _Wait_Half_Second *****************
  2435 ;; Defined at:
  2436 ;;		line 171 in file "Lab10p1.c"
  2437 ;; Parameters:    Size  Location     Type
  2438 ;;		None
  2439 ;; Auto vars:     Size  Location     Type
  2440 ;;		None
  2441 ;; Return value:  Size  Location     Type
  2442 ;;		None               void
  2443 ;; Registers used:
  2444 ;;		wreg, status,2
  2445 ;; Tracked objects:
  2446 ;;		On entry : 0/0
  2447 ;;		On exit  : 0/0
  2448 ;;		Unchanged: 0/0
  2449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2450 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2451 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2452 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2453 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2454 ;;Total ram usage:        0 bytes
  2455 ;; Hardware stack levels used:    1
  2456 ;; Hardware stack levels required when called:    3
  2457 ;; This function calls:
  2458 ;;		Nothing
  2459 ;; This function is called by:
  2460 ;;		_Wait_One_Sec
  2461 ;;		_Wait_Half_Second_With_Beep
  2462 ;; This function uses a non-reentrant model
  2463 ;;
  2464                           
  2465                           	psect	text7
  2466  001080                     __ptext7:
  2467                           	opt stack 0
  2468  001080                     _Wait_Half_Second:
  2469                           	opt stack 26
  2470                           
  2471                           ;Lab10p1.c: 173: T0CON = 0x03;
  2472                           
  2473                           ;incstack = 0
  2474  001080  0E03               	movlw	3
  2475  001082  6ED5               	movwf	4053,c	;volatile
  2476                           
  2477                           ;Lab10p1.c: 174: TMR0L = 0xDB;
  2478  001084  0EDB               	movlw	219
  2479  001086  6ED6               	movwf	4054,c	;volatile
  2480                           
  2481                           ;Lab10p1.c: 175: TMR0H = 0x0B;
  2482  001088  0E0B               	movlw	11
  2483  00108A  6ED7               	movwf	4055,c	;volatile
  2484                           
  2485                           ;Lab10p1.c: 176: INTCONbits.TMR0IF = 0;
  2486  00108C  94F2               	bcf	intcon,2,c	;volatile
  2487                           
  2488                           ;Lab10p1.c: 177: T0CONbits.TMR0ON = 1;
  2489  00108E  8ED5               	bsf	4053,7,c	;volatile
  2490                           
  2491                           ;Lab10p1.c: 178: while (INTCONbits.TMR0IF == 0);
  2492  001090  D000               	goto	l530
  2493  001092                     l530:
  2494  001092  A4F2               	btfss	intcon,2,c	;volatile
  2495  001094  D7FE               	goto	l530
  2496                           
  2497                           ;Lab10p1.c: 179: T0CONbits.TMR0ON = 0;
  2498  001096  9ED5               	bcf	4053,7,c	;volatile
  2499  001098  0012               	return		;funcret
  2500  00109A                     __end_of_Wait_Half_Second:
  2501                           	opt stack 0
  2502                           tblptru	equ	0xFF8
  2503                           tblptrh	equ	0xFF7
  2504                           tblptrl	equ	0xFF6
  2505                           tablat	equ	0xFF5
  2506                           prodh	equ	0xFF4
  2507                           prodl	equ	0xFF3
  2508                           intcon	equ	0xFF2
  2509                           postinc0	equ	0xFEE
  2510                           wreg	equ	0xFE8
  2511                           postdec1	equ	0xFE5
  2512                           fsr1l	equ	0xFE1
  2513                           postinc2	equ	0xFDE
  2514                           postdec2	equ	0xFDD
  2515                           fsr2h	equ	0xFDA
  2516                           fsr2l	equ	0xFD9
  2517                           status	equ	0xFD8
  2518                           
  2519 ;; *************** function _Do_Init *****************
  2520 ;; Defined at:
  2521 ;;		line 190 in file "Lab10p1.c"
  2522 ;; Parameters:    Size  Location     Type
  2523 ;;		None
  2524 ;; Auto vars:     Size  Location     Type
  2525 ;;		None
  2526 ;; Return value:  Size  Location     Type
  2527 ;;		None               void
  2528 ;; Registers used:
  2529 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2530 ;; Tracked objects:
  2531 ;;		On entry : 0/0
  2532 ;;		On exit  : 0/0
  2533 ;;		Unchanged: 0/0
  2534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2535 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2536 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2537 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2538 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2539 ;;Total ram usage:        0 bytes
  2540 ;; Hardware stack levels used:    1
  2541 ;; Hardware stack levels required when called:   11
  2542 ;; This function calls:
  2543 ;;		_DS1621_Init
  2544 ;;		_I2C_Init
  2545 ;;		_Initialize_Screen
  2546 ;;		_init_INTERRUPT
  2547 ;;		_init_UART
  2548 ;; This function is called by:
  2549 ;;		_main
  2550 ;; This function uses a non-reentrant model
  2551 ;;
  2552                           
  2553                           	psect	text8
  2554  000E08                     __ptext8:
  2555                           	opt stack 0
  2556  000E08                     _Do_Init:
  2557                           	opt stack 19
  2558                           
  2559                           ;Lab10p1.c: 193: init_UART();
  2560                           
  2561                           ;incstack = 0
  2562  000E08  EC65  F008         	call	_init_UART	;wreg free
  2563                           
  2564                           ;Lab10p1.c: 194: OSCCON=0x70;
  2565  000E0C  0E70               	movlw	112
  2566  000E0E  6ED3               	movwf	4051,c	;volatile
  2567                           
  2568                           ;Lab10p1.c: 196: ADCON1=0x0F;
  2569  000E10  0E0F               	movlw	15
  2570  000E12  6EC1               	movwf	4033,c	;volatile
  2571                           
  2572                           ;Lab10p1.c: 197: TRISA = 0x00;
  2573  000E14  0E00               	movlw	0
  2574  000E16  6E92               	movwf	3986,c	;volatile
  2575                           
  2576                           ;Lab10p1.c: 198: TRISB = 0x01;
  2577  000E18  0E01               	movlw	1
  2578  000E1A  6E93               	movwf	3987,c	;volatile
  2579                           
  2580                           ;Lab10p1.c: 199: TRISC = 0x00;
  2581  000E1C  0E00               	movlw	0
  2582  000E1E  6E94               	movwf	3988,c	;volatile
  2583                           
  2584                           ;Lab10p1.c: 200: TRISD = 0x00;
  2585  000E20  0E00               	movlw	0
  2586  000E22  6E95               	movwf	3989,c	;volatile
  2587                           
  2588                           ;Lab10p1.c: 201: TRISE = 0x00;
  2589  000E24  0E00               	movlw	0
  2590  000E26  6E96               	movwf	3990,c	;volatile
  2591                           
  2592                           ;Lab10p1.c: 202: Initialize_Screen();
  2593  000E28  EC03  F004         	call	_Initialize_Screen	;wreg free
  2594                           
  2595                           ;Lab10p1.c: 203: RBPU=0;
  2596  000E2C  9EF1               	bcf	intcon2,7,c	;volatile
  2597                           
  2598                           ;Lab10p1.c: 204: DS1621_Init();
  2599  000E2E  EC23  F008         	call	_DS1621_Init	;wreg free
  2600                           
  2601                           ;Lab10p1.c: 205: init_INTERRUPT();
  2602  000E32  ECBA  F007         	call	_init_INTERRUPT	;wreg free
  2603                           
  2604                           ;Lab10p1.c: 206: I2C_Init(100000);
  2605  000E36  0EA0               	movlw	160
  2606  000E38  6E11               	movwf	I2C_Init@c,c
  2607  000E3A  0E86               	movlw	134
  2608  000E3C  6E12               	movwf	I2C_Init@c+1,c
  2609  000E3E  0E01               	movlw	1
  2610  000E40  6E13               	movwf	I2C_Init@c+2,c
  2611  000E42  0E00               	movlw	0
  2612  000E44  6E14               	movwf	I2C_Init@c+3,c
  2613  000E46  ECC7  F008         	call	_I2C_Init	;wreg free
  2614  000E4A  0012               	return		;funcret
  2615  000E4C                     __end_of_Do_Init:
  2616                           	opt stack 0
  2617                           tblptru	equ	0xFF8
  2618                           tblptrh	equ	0xFF7
  2619                           tblptrl	equ	0xFF6
  2620                           tablat	equ	0xFF5
  2621                           prodh	equ	0xFF4
  2622                           prodl	equ	0xFF3
  2623                           intcon	equ	0xFF2
  2624                           intcon2	equ	0xFF1
  2625                           postinc0	equ	0xFEE
  2626                           wreg	equ	0xFE8
  2627                           postdec1	equ	0xFE5
  2628                           fsr1l	equ	0xFE1
  2629                           postinc2	equ	0xFDE
  2630                           postdec2	equ	0xFDD
  2631                           fsr2h	equ	0xFDA
  2632                           fsr2l	equ	0xFD9
  2633                           status	equ	0xFD8
  2634                           
  2635 ;; *************** function _init_UART *****************
  2636 ;; Defined at:
  2637 ;;		line 155 in file "Lab10p1.c"
  2638 ;; Parameters:    Size  Location     Type
  2639 ;;		None
  2640 ;; Auto vars:     Size  Location     Type
  2641 ;;		None
  2642 ;; Return value:  Size  Location     Type
  2643 ;;		None               void
  2644 ;; Registers used:
  2645 ;;		wreg, status,2, cstack
  2646 ;; Tracked objects:
  2647 ;;		On entry : 0/0
  2648 ;;		On exit  : 0/0
  2649 ;;		Unchanged: 0/0
  2650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2652 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2653 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2654 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2655 ;;Total ram usage:        0 bytes
  2656 ;; Hardware stack levels used:    1
  2657 ;; Hardware stack levels required when called:    4
  2658 ;; This function calls:
  2659 ;;		_OpenUSART
  2660 ;; This function is called by:
  2661 ;;		_Do_Init
  2662 ;; This function uses a non-reentrant model
  2663 ;;
  2664                           
  2665                           	psect	text9
  2666  0010CA                     __ptext9:
  2667                           	opt stack 0
  2668  0010CA                     _init_UART:
  2669                           	opt stack 25
  2670                           
  2671                           ;Lab10p1.c: 157: OpenUSART (0b01111111 & 0b10111111 &
  2672                           ;Lab10p1.c: 158: 0b11111110 & 0b11111101 & 0b11111111 &
  2673                           ;Lab10p1.c: 159: 0b11111111, 25);
  2674                           
  2675                           ;incstack = 0
  2676  0010CA  0E00               	movlw	0
  2677  0010CC  6E12               	movwf	OpenUSART@spbrg+1,c
  2678  0010CE  0E19               	movlw	25
  2679  0010D0  6E11               	movwf	OpenUSART@spbrg,c
  2680  0010D2  0E3C               	movlw	60
  2681  0010D4  EC5C  F005         	call	_OpenUSART
  2682                           
  2683                           ;Lab10p1.c: 160: OSCCON = 0x70;
  2684  0010D8  0E70               	movlw	112
  2685  0010DA  6ED3               	movwf	4051,c	;volatile
  2686  0010DC  0012               	return		;funcret
  2687  0010DE                     __end_of_init_UART:
  2688                           	opt stack 0
  2689                           tblptru	equ	0xFF8
  2690                           tblptrh	equ	0xFF7
  2691                           tblptrl	equ	0xFF6
  2692                           tablat	equ	0xFF5
  2693                           prodh	equ	0xFF4
  2694                           prodl	equ	0xFF3
  2695                           intcon	equ	0xFF2
  2696                           intcon2	equ	0xFF1
  2697                           postinc0	equ	0xFEE
  2698                           wreg	equ	0xFE8
  2699                           postdec1	equ	0xFE5
  2700                           fsr1l	equ	0xFE1
  2701                           postinc2	equ	0xFDE
  2702                           postdec2	equ	0xFDD
  2703                           fsr2h	equ	0xFDA
  2704                           fsr2l	equ	0xFD9
  2705                           status	equ	0xFD8
  2706                           
  2707 ;; *************** function _OpenUSART *****************
  2708 ;; Defined at:
  2709 ;;		line 73 in file "E:\XC8\sources\pic18\plib\USART\uopen.c"
  2710 ;; Parameters:    Size  Location     Type
  2711 ;;  config          1    wreg     unsigned char 
  2712 ;;  spbrg           2   16[COMRAM] unsigned int 
  2713 ;; Auto vars:     Size  Location     Type
  2714 ;;  config          1   18[COMRAM] unsigned char 
  2715 ;; Return value:  Size  Location     Type
  2716 ;;		None               void
  2717 ;; Registers used:
  2718 ;;		wreg, status,2
  2719 ;; Tracked objects:
  2720 ;;		On entry : 0/0
  2721 ;;		On exit  : 0/0
  2722 ;;		Unchanged: 0/0
  2723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2724 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2725 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2726 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2727 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2728 ;;Total ram usage:        3 bytes
  2729 ;; Hardware stack levels used:    1
  2730 ;; Hardware stack levels required when called:    3
  2731 ;; This function calls:
  2732 ;;		Nothing
  2733 ;; This function is called by:
  2734 ;;		_init_UART
  2735 ;; This function uses a non-reentrant model
  2736 ;;
  2737                           
  2738                           	psect	text10
  2739  000AB8                     __ptext10:
  2740                           	opt stack 0
  2741  000AB8                     _OpenUSART:
  2742                           	opt stack 25
  2743                           
  2744                           ;incstack = 0
  2745                           ;OpenUSART@config stored from wreg
  2746  000AB8  6E13               	movwf	OpenUSART@config,c
  2747  000ABA  0E00               	movlw	0
  2748  000ABC  6EAC               	movwf	4012,c	;volatile
  2749  000ABE  0E00               	movlw	0
  2750  000AC0  6EAB               	movwf	4011,c	;volatile
  2751  000AC2  A013               	btfss	OpenUSART@config,0,c
  2752  000AC4  D002               	goto	l2896
  2753  000AC6  88AC               	bsf	4012,4,c	;volatile
  2754  000AC8  D000               	goto	l2896
  2755  000ACA                     l2896:
  2756  000ACA  A213               	btfss	OpenUSART@config,1,c
  2757  000ACC  D003               	goto	l2900
  2758  000ACE  8CAC               	bsf	4012,6,c	;volatile
  2759  000AD0  8CAB               	bsf	4011,6,c	;volatile
  2760  000AD2  D000               	goto	l2900
  2761  000AD4                     l2900:
  2762  000AD4  A413               	btfss	OpenUSART@config,2,c
  2763  000AD6  D002               	goto	l2904
  2764  000AD8  8EAC               	bsf	4012,7,c	;volatile
  2765  000ADA  D000               	goto	l2904
  2766  000ADC                     l2904:
  2767  000ADC  A613               	btfss	OpenUSART@config,3,c
  2768  000ADE  D002               	goto	l611
  2769  000AE0  88AB               	bsf	4011,4,c	;volatile
  2770  000AE2  D002               	goto	l2908
  2771  000AE4                     l611:
  2772  000AE4  8AAB               	bsf	4011,5,c	;volatile
  2773  000AE6  D000               	goto	l2908
  2774  000AE8                     l2908:
  2775  000AE8  B813               	btfsc	OpenUSART@config,4,c
  2776  000AEA  84AC               	bsf	4012,2,c	;volatile
  2777  000AEC  989E               	bcf	3998,4,c	;volatile
  2778  000AEE  AA13               	btfss	OpenUSART@config,5,c
  2779  000AF0  D002               	goto	l2916
  2780  000AF2  86AB               	bsf	4011,3,c	;volatile
  2781  000AF4  D000               	goto	l2916
  2782  000AF6                     l2916:
  2783  000AF6  AC13               	btfss	OpenUSART@config,6,c
  2784  000AF8  D002               	goto	l615
  2785  000AFA  8A9D               	bsf	3997,5,c	;volatile
  2786  000AFC  D001               	goto	l616
  2787  000AFE                     l615:
  2788  000AFE  9A9D               	bcf	3997,5,c	;volatile
  2789  000B00                     l616:
  2790  000B00  9A9E               	bcf	3998,5,c	;volatile
  2791  000B02  AE13               	btfss	OpenUSART@config,7,c
  2792  000B04  D002               	goto	l617
  2793  000B06  889D               	bsf	3997,4,c	;volatile
  2794  000B08  D001               	goto	l618
  2795  000B0A                     l617:
  2796  000B0A  989D               	bcf	3997,4,c	;volatile
  2797  000B0C                     l618:
  2798  000B0C  C011  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  2799  000B10  5012               	movf	OpenUSART@spbrg+1,w,c
  2800  000B12  6EB0               	movwf	4016,c	;volatile
  2801  000B14  8AAC               	bsf	4012,5,c	;volatile
  2802  000B16  8EAB               	bsf	4011,7,c	;volatile
  2803  000B18  9C94               	bcf	3988,6,c	;volatile
  2804  000B1A  8E94               	bsf	3988,7,c	;volatile
  2805  000B1C  B8AC               	btfsc	4012,4,c	;volatile
  2806  000B1E  BEAC               	btfsc	4012,7,c	;volatile
  2807  000B20  D002               	goto	l620
  2808  000B22  8C94               	bsf	3988,6,c	;volatile
  2809  000B24  D000               	goto	l620
  2810  000B26                     l620:
  2811  000B26  0012               	return		;funcret
  2812  000B28                     __end_of_OpenUSART:
  2813                           	opt stack 0
  2814                           tblptru	equ	0xFF8
  2815                           tblptrh	equ	0xFF7
  2816                           tblptrl	equ	0xFF6
  2817                           tablat	equ	0xFF5
  2818                           prodh	equ	0xFF4
  2819                           prodl	equ	0xFF3
  2820                           intcon	equ	0xFF2
  2821                           intcon2	equ	0xFF1
  2822                           postinc0	equ	0xFEE
  2823                           wreg	equ	0xFE8
  2824                           postdec1	equ	0xFE5
  2825                           fsr1l	equ	0xFE1
  2826                           postinc2	equ	0xFDE
  2827                           postdec2	equ	0xFDD
  2828                           fsr2h	equ	0xFDA
  2829                           fsr2l	equ	0xFD9
  2830                           status	equ	0xFD8
  2831                           
  2832 ;; *************** function _init_INTERRUPT *****************
  2833 ;; Defined at:
  2834 ;;		line 13 in file "Interrupt.c"
  2835 ;; Parameters:    Size  Location     Type
  2836 ;;		None
  2837 ;; Auto vars:     Size  Location     Type
  2838 ;;		None
  2839 ;; Return value:  Size  Location     Type
  2840 ;;		None               void
  2841 ;; Registers used:
  2842 ;;		wreg, status,2
  2843 ;; Tracked objects:
  2844 ;;		On entry : 0/0
  2845 ;;		On exit  : 0/0
  2846 ;;		Unchanged: 0/0
  2847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2848 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2849 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2850 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2851 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2852 ;;Total ram usage:        0 bytes
  2853 ;; Hardware stack levels used:    1
  2854 ;; Hardware stack levels required when called:    3
  2855 ;; This function calls:
  2856 ;;		Nothing
  2857 ;; This function is called by:
  2858 ;;		_Do_Init
  2859 ;; This function uses a non-reentrant model
  2860 ;;
  2861                           
  2862                           	psect	text11
  2863  000F74                     __ptext11:
  2864                           	opt stack 0
  2865  000F74                     _init_INTERRUPT:
  2866                           	opt stack 26
  2867                           
  2868                           ;Interrupt.c: 15: INTCONbits.INT0IF = 0;
  2869                           
  2870                           ;incstack = 0
  2871  000F74  92F2               	bcf	intcon,1,c	;volatile
  2872                           
  2873                           ;Interrupt.c: 16: INTCON2bits.INTEDG0 = 0;
  2874  000F76  9CF1               	bcf	intcon2,6,c	;volatile
  2875                           
  2876                           ;Interrupt.c: 17: INTCONbits.INT0IE = 1;
  2877  000F78  88F2               	bsf	intcon,4,c	;volatile
  2878                           
  2879                           ;Interrupt.c: 18: TMR1H = 0;
  2880  000F7A  0E00               	movlw	0
  2881  000F7C  6ECF               	movwf	4047,c	;volatile
  2882                           
  2883                           ;Interrupt.c: 19: TMR1L = 0;
  2884  000F7E  0E00               	movlw	0
  2885  000F80  6ECE               	movwf	4046,c	;volatile
  2886                           
  2887                           ;Interrupt.c: 20: PIR1bits.TMR1IF = 0;
  2888  000F82  909E               	bcf	3998,0,c	;volatile
  2889                           
  2890                           ;Interrupt.c: 21: PIE1bits.TMR1IE = 1;
  2891  000F84  809D               	bsf	3997,0,c	;volatile
  2892                           
  2893                           ;Interrupt.c: 22: INTCONbits.PEIE = 1;
  2894  000F86  8CF2               	bsf	intcon,6,c	;volatile
  2895                           
  2896                           ;Interrupt.c: 23: INTCONbits.GIE = 1;
  2897  000F88  8EF2               	bsf	intcon,7,c	;volatile
  2898                           
  2899                           ;Interrupt.c: 24: nec_ok = 0;
  2900  000F8A  0E00               	movlw	0
  2901  000F8C  6E46               	movwf	_nec_ok+1,c
  2902  000F8E  0E00               	movlw	0
  2903  000F90  6E45               	movwf	_nec_ok,c
  2904                           
  2905                           ;Interrupt.c: 25: Nec_code = 0x0;
  2906  000F92  0E00               	movlw	0
  2907  000F94  6E3D               	movwf	_Nec_code,c
  2908  000F96  0E00               	movlw	0
  2909  000F98  6E3E               	movwf	_Nec_code+1,c
  2910  000F9A  0E00               	movlw	0
  2911  000F9C  6E3F               	movwf	_Nec_code+2,c
  2912  000F9E  0E00               	movlw	0
  2913  000FA0  6E40               	movwf	_Nec_code+3,c
  2914  000FA2  0012               	return		;funcret
  2915  000FA4                     __end_of_init_INTERRUPT:
  2916                           	opt stack 0
  2917                           tblptru	equ	0xFF8
  2918                           tblptrh	equ	0xFF7
  2919                           tblptrl	equ	0xFF6
  2920                           tablat	equ	0xFF5
  2921                           prodh	equ	0xFF4
  2922                           prodl	equ	0xFF3
  2923                           intcon	equ	0xFF2
  2924                           intcon2	equ	0xFF1
  2925                           postinc0	equ	0xFEE
  2926                           wreg	equ	0xFE8
  2927                           postdec1	equ	0xFE5
  2928                           fsr1l	equ	0xFE1
  2929                           postinc2	equ	0xFDE
  2930                           postdec2	equ	0xFDD
  2931                           fsr2h	equ	0xFDA
  2932                           fsr2l	equ	0xFD9
  2933                           status	equ	0xFD8
  2934                           
  2935 ;; *************** function _Initialize_Screen *****************
  2936 ;; Defined at:
  2937 ;;		line 237 in file "Lab10p1.c"
  2938 ;; Parameters:    Size  Location     Type
  2939 ;;		None
  2940 ;; Auto vars:     Size  Location     Type
  2941 ;;		None
  2942 ;; Return value:  Size  Location     Type
  2943 ;;		None               void
  2944 ;; Registers used:
  2945 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2946 ;; Tracked objects:
  2947 ;;		On entry : 0/0
  2948 ;;		On exit  : 0/0
  2949 ;;		Unchanged: 0/0
  2950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2951 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2952 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2953 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2954 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2955 ;;Total ram usage:        0 bytes
  2956 ;; Hardware stack levels used:    1
  2957 ;; Hardware stack levels required when called:   10
  2958 ;; This function calls:
  2959 ;;		_LCD_Reset
  2960 ;;		_TFT_GreenTab_Initialize
  2961 ;;		_drawtext
  2962 ;;		_fillScreen
  2963 ;;		_strcpy
  2964 ;; This function is called by:
  2965 ;;		_Do_Init
  2966 ;; This function uses a non-reentrant model
  2967 ;;
  2968                           
  2969                           	psect	text12
  2970  000806                     __ptext12:
  2971                           	opt stack 0
  2972  000806                     _Initialize_Screen:
  2973                           	opt stack 19
  2974                           
  2975                           ;Lab10p1.c: 239: LCD_Reset();
  2976                           
  2977                           ;incstack = 0
  2978  000806  EC79  F008         	call	_LCD_Reset	;wreg free
  2979                           
  2980                           ;Lab10p1.c: 240: TFT_GreenTab_Initialize();
  2981  00080A  ECEA  F007         	call	_TFT_GreenTab_Initialize	;wreg free
  2982                           
  2983                           ;Lab10p1.c: 241: fillScreen(0x0000);
  2984  00080E  0E00               	movlw	0
  2985  000810  6E25               	movwf	fillScreen@color+1,c
  2986  000812  0E00               	movlw	0
  2987  000814  6E24               	movwf	fillScreen@color,c
  2988  000816  EC32  F008         	call	_fillScreen	;wreg free
  2989                           
  2990                           ;Lab10p1.c: 244: txt = buffer;
  2991  00081A  0EC9               	movlw	low _buffer
  2992  00081C  6E47               	movwf	_txt,c
  2993  00081E  0E00               	movlw	high _buffer
  2994  000820  6E48               	movwf	_txt+1,c
  2995                           
  2996                           ;Lab10p1.c: 245: strcpy(txt, "ECE3301L Fall 21-S4");
  2997  000822  C047  F011         	movff	_txt,strcpy@to
  2998  000826  C048  F012         	movff	_txt+1,strcpy@to+1
  2999  00082A  0EE3               	movlw	low STR_2
  3000  00082C  6E13               	movwf	strcpy@from,c
  3001  00082E  0EFF               	movlw	high STR_2
  3002  000830  6E14               	movwf	strcpy@from+1,c
  3003  000832  ECA1  F007         	call	_strcpy	;wreg free
  3004                           
  3005                           ;Lab10p1.c: 246: drawtext(2, 2, txt, 0xFFFF, 0x0000, 1);
  3006  000836  0E02               	movlw	2
  3007  000838  0100               	movlb	0	; () banked
  3008  00083A  6FE8               	movwf	drawtext@y& (0+255),b
  3009  00083C  C047  F0E9         	movff	_txt,drawtext@_text
  3010  000840  C048  F0EA         	movff	_txt+1,drawtext@_text+1
  3011  000844  0EFF               	movlw	255
  3012  000846  0100               	movlb	0	; () banked
  3013  000848  6FEC               	movwf	(drawtext@color+1)& (0+255),b
  3014  00084A  69EB               	setf	drawtext@color& (0+255),b
  3015  00084C  0E00               	movlw	0
  3016  00084E  0100               	movlb	0	; () banked
  3017  000850  6FEE               	movwf	(drawtext@bg+1)& (0+255),b
  3018  000852  0E00               	movlw	0
  3019  000854  6FED               	movwf	drawtext@bg& (0+255),b
  3020  000856  0E01               	movlw	1
  3021  000858  0100               	movlb	0	; () banked
  3022  00085A  6FEF               	movwf	drawtext@size& (0+255),b
  3023  00085C  0E02               	movlw	2
  3024  00085E  EC08  F002         	call	_drawtext
  3025                           
  3026                           ;Lab10p1.c: 248: strcpy(txt, "LAB 10 ");
  3027  000862  C047  F011         	movff	_txt,strcpy@to
  3028  000866  C048  F012         	movff	_txt+1,strcpy@to+1
  3029  00086A  0EF7               	movlw	low STR_3
  3030  00086C  6E13               	movwf	strcpy@from,c
  3031  00086E  0EFF               	movlw	high STR_3
  3032  000870  6E14               	movwf	strcpy@from+1,c
  3033  000872  ECA1  F007         	call	_strcpy	;wreg free
  3034                           
  3035                           ;Lab10p1.c: 249: drawtext(50, 10, txt, 0xFFFF, 0x0000, 1);
  3036  000876  0E0A               	movlw	10
  3037  000878  0100               	movlb	0	; () banked
  3038  00087A  6FE8               	movwf	drawtext@y& (0+255),b
  3039  00087C  C047  F0E9         	movff	_txt,drawtext@_text
  3040  000880  C048  F0EA         	movff	_txt+1,drawtext@_text+1
  3041  000884  0EFF               	movlw	255
  3042  000886  0100               	movlb	0	; () banked
  3043  000888  6FEC               	movwf	(drawtext@color+1)& (0+255),b
  3044  00088A  69EB               	setf	drawtext@color& (0+255),b
  3045  00088C  0E00               	movlw	0
  3046  00088E  0100               	movlb	0	; () banked
  3047  000890  6FEE               	movwf	(drawtext@bg+1)& (0+255),b
  3048  000892  0E00               	movlw	0
  3049  000894  6FED               	movwf	drawtext@bg& (0+255),b
  3050  000896  0E01               	movlw	1
  3051  000898  0100               	movlb	0	; () banked
  3052  00089A  6FEF               	movwf	drawtext@size& (0+255),b
  3053  00089C  0E32               	movlw	50
  3054  00089E  EC08  F002         	call	_drawtext
  3055  0008A2  0012               	return		;funcret
  3056  0008A4                     __end_of_Initialize_Screen:
  3057                           	opt stack 0
  3058                           tblptru	equ	0xFF8
  3059                           tblptrh	equ	0xFF7
  3060                           tblptrl	equ	0xFF6
  3061                           tablat	equ	0xFF5
  3062                           prodh	equ	0xFF4
  3063                           prodl	equ	0xFF3
  3064                           intcon	equ	0xFF2
  3065                           intcon2	equ	0xFF1
  3066                           postinc0	equ	0xFEE
  3067                           wreg	equ	0xFE8
  3068                           postdec1	equ	0xFE5
  3069                           fsr1l	equ	0xFE1
  3070                           postinc2	equ	0xFDE
  3071                           postdec2	equ	0xFDD
  3072                           fsr2h	equ	0xFDA
  3073                           fsr2l	equ	0xFD9
  3074                           status	equ	0xFD8
  3075                           
  3076 ;; *************** function _strcpy *****************
  3077 ;; Defined at:
  3078 ;;		line 8 in file "E:\XC8\sources\common\strcpy.c"
  3079 ;; Parameters:    Size  Location     Type
  3080 ;;  to              2   16[COMRAM] PTR unsigned char 
  3081 ;;		 -> NULL(0), buffer(31), 
  3082 ;;  from            2   18[COMRAM] PTR const unsigned char 
  3083 ;;		 -> STR_3(8), STR_2(20), 
  3084 ;; Auto vars:     Size  Location     Type
  3085 ;;  cp              2   20[COMRAM] PTR unsigned char 
  3086 ;;		 -> NULL(0), buffer(31), 
  3087 ;; Return value:  Size  Location     Type
  3088 ;;                  2   16[COMRAM] PTR unsigned char 
  3089 ;; Registers used:
  3090 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  3091 ;; Tracked objects:
  3092 ;;		On entry : 0/0
  3093 ;;		On exit  : 0/0
  3094 ;;		Unchanged: 0/0
  3095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3096 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3097 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3098 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3099 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3100 ;;Total ram usage:        6 bytes
  3101 ;; Hardware stack levels used:    1
  3102 ;; Hardware stack levels required when called:    3
  3103 ;; This function calls:
  3104 ;;		Nothing
  3105 ;; This function is called by:
  3106 ;;		_Initialize_Screen
  3107 ;; This function uses a non-reentrant model
  3108 ;;
  3109                           
  3110                           	psect	text13
  3111  000F42                     __ptext13:
  3112                           	opt stack 0
  3113  000F42                     _strcpy:
  3114                           	opt stack 25
  3115                           
  3116                           ;incstack = 0
  3117  000F42  C011  F015         	movff	strcpy@to,strcpy@cp
  3118  000F46  C012  F016         	movff	strcpy@to+1,strcpy@cp+1
  3119  000F4A  D005               	goto	l2944
  3120  000F4C                     l2942:
  3121  000F4C  4A15               	infsnz	strcpy@cp,f,c
  3122  000F4E  2A16               	incf	strcpy@cp+1,f,c
  3123  000F50  4A13               	infsnz	strcpy@from,f,c
  3124  000F52  2A14               	incf	strcpy@from+1,f,c
  3125  000F54  D000               	goto	l2944
  3126  000F56                     l2944:
  3127  000F56  C013  FFF6         	movff	strcpy@from,tblptrl
  3128  000F5A  C014  FFF7         	movff	strcpy@from+1,tblptrh
  3129  000F5E                     	if	0	;tblptru may be non-zero
  3130  000F5E                     	endif
  3131  000F5E                     	if	0	;tblptru may be non-zero
  3132  000F5E                     	endif
  3133  000F5E  C015  FFD9         	movff	strcpy@cp,fsr2l
  3134  000F62  C016  FFDA         	movff	strcpy@cp+1,fsr2h
  3135  000F66  0008               	tblrd		*
  3136  000F68  CFF5 FFDF          	movff	tablat,indf2
  3137  000F6C  50DF               	movf	indf2,w,c
  3138  000F6E  A4D8               	btfss	status,2,c
  3139  000F70  D7ED               	goto	l2942
  3140                           
  3141                           ;	Return value of _strcpy is never used
  3142  000F72  0012               	return		;funcret
  3143  000F74                     __end_of_strcpy:
  3144                           	opt stack 0
  3145                           tblptru	equ	0xFF8
  3146                           tblptrh	equ	0xFF7
  3147                           tblptrl	equ	0xFF6
  3148                           tablat	equ	0xFF5
  3149                           prodh	equ	0xFF4
  3150                           prodl	equ	0xFF3
  3151                           intcon	equ	0xFF2
  3152                           intcon2	equ	0xFF1
  3153                           postinc0	equ	0xFEE
  3154                           wreg	equ	0xFE8
  3155                           postdec1	equ	0xFE5
  3156                           fsr1l	equ	0xFE1
  3157                           indf2	equ	0xFDF
  3158                           postinc2	equ	0xFDE
  3159                           postdec2	equ	0xFDD
  3160                           fsr2h	equ	0xFDA
  3161                           fsr2l	equ	0xFD9
  3162                           status	equ	0xFD8
  3163                           
  3164 ;; *************** function _fillScreen *****************
  3165 ;; Defined at:
  3166 ;;		line 619 in file "ST7735_TFT.c"
  3167 ;; Parameters:    Size  Location     Type
  3168 ;;  color           2   35[COMRAM] unsigned int 
  3169 ;; Auto vars:     Size  Location     Type
  3170 ;;		None
  3171 ;; Return value:  Size  Location     Type
  3172 ;;		None               void
  3173 ;; Registers used:
  3174 ;;		wreg, status,2, status,0, cstack
  3175 ;; Tracked objects:
  3176 ;;		On entry : 0/0
  3177 ;;		On exit  : 0/0
  3178 ;;		Unchanged: 0/0
  3179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3180 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3181 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3182 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3183 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3184 ;;Total ram usage:        2 bytes
  3185 ;; Hardware stack levels used:    1
  3186 ;; Hardware stack levels required when called:    7
  3187 ;; This function calls:
  3188 ;;		_fillRectangle
  3189 ;; This function is called by:
  3190 ;;		_Initialize_Screen
  3191 ;; This function uses a non-reentrant model
  3192 ;;
  3193                           
  3194                           	psect	text14
  3195  001064                     __ptext14:
  3196                           	opt stack 0
  3197  001064                     _fillScreen:
  3198                           	opt stack 21
  3199                           
  3200                           ;ST7735_TFT.c: 621: fillRectangle(0, 0, 128, 160, color);
  3201                           
  3202                           ;incstack = 0
  3203  001064  0E00               	movlw	0
  3204  001066  6E18               	movwf	fillRectangle@y,c
  3205  001068  0E80               	movlw	128
  3206  00106A  6E19               	movwf	fillRectangle@w,c
  3207  00106C  0EA0               	movlw	160
  3208  00106E  6E1A               	movwf	fillRectangle@h,c
  3209  001070  C024  F01B         	movff	fillScreen@color,fillRectangle@color
  3210  001074  C025  F01C         	movff	fillScreen@color+1,fillRectangle@color+1
  3211  001078  0E00               	movlw	0
  3212  00107A  EC95  F003         	call	_fillRectangle
  3213  00107E  0012               	return		;funcret
  3214  001080                     __end_of_fillScreen:
  3215                           	opt stack 0
  3216                           tblptru	equ	0xFF8
  3217                           tblptrh	equ	0xFF7
  3218                           tblptrl	equ	0xFF6
  3219                           tablat	equ	0xFF5
  3220                           prodh	equ	0xFF4
  3221                           prodl	equ	0xFF3
  3222                           intcon	equ	0xFF2
  3223                           intcon2	equ	0xFF1
  3224                           postinc0	equ	0xFEE
  3225                           wreg	equ	0xFE8
  3226                           postdec1	equ	0xFE5
  3227                           fsr1l	equ	0xFE1
  3228                           indf2	equ	0xFDF
  3229                           postinc2	equ	0xFDE
  3230                           postdec2	equ	0xFDD
  3231                           fsr2h	equ	0xFDA
  3232                           fsr2l	equ	0xFD9
  3233                           status	equ	0xFD8
  3234                           
  3235 ;; *************** function _fillRectangle *****************
  3236 ;; Defined at:
  3237 ;;		line 503 in file "ST7735_TFT.c"
  3238 ;; Parameters:    Size  Location     Type
  3239 ;;  x               1    wreg     unsigned char 
  3240 ;;  y               1   23[COMRAM] unsigned char 
  3241 ;;  w               1   24[COMRAM] unsigned char 
  3242 ;;  h               1   25[COMRAM] unsigned char 
  3243 ;;  color           2   26[COMRAM] unsigned int 
  3244 ;; Auto vars:     Size  Location     Type
  3245 ;;  x               1   34[COMRAM] unsigned char 
  3246 ;;  lo              1   33[COMRAM] unsigned char 
  3247 ;;  hi              1   32[COMRAM] unsigned char 
  3248 ;; Return value:  Size  Location     Type
  3249 ;;		None               void
  3250 ;; Registers used:
  3251 ;;		wreg, status,2, status,0, cstack
  3252 ;; Tracked objects:
  3253 ;;		On entry : 0/0
  3254 ;;		On exit  : 0/0
  3255 ;;		Unchanged: 0/0
  3256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3257 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3258 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3259 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3260 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3261 ;;Total ram usage:       12 bytes
  3262 ;; Hardware stack levels used:    1
  3263 ;; Hardware stack levels required when called:    6
  3264 ;; This function calls:
  3265 ;;		_setAddrWindow
  3266 ;;		_spiwrite
  3267 ;; This function is called by:
  3268 ;;		_fillScreen
  3269 ;; This function uses a non-reentrant model
  3270 ;;
  3271                           
  3272                           	psect	text15
  3273  00072A                     __ptext15:
  3274                           	opt stack 0
  3275  00072A                     _fillRectangle:
  3276                           	opt stack 21
  3277                           
  3278                           ;incstack = 0
  3279                           ;fillRectangle@x stored from wreg
  3280  00072A  6E23               	movwf	fillRectangle@x,c
  3281                           
  3282                           ;ST7735_TFT.c: 505: unsigned char hi, lo;
  3283                           ;ST7735_TFT.c: 506: if((x >= 128) || (y >= 160))
  3284  00072C  0E80               	movlw	128
  3285  00072E  6023               	cpfslt	fillRectangle@x,c
  3286  000730  D069               	goto	l372
  3287  000732  0E9F               	movlw	159
  3288  000734  6418               	cpfsgt	fillRectangle@y,c
  3289  000736  D001               	goto	l3758
  3290                           
  3291                           ;ST7735_TFT.c: 507: return;
  3292  000738  D065               	goto	l372
  3293  00073A                     l3758:
  3294                           
  3295                           ;ST7735_TFT.c: 508: if((x + w - 1) >= 128)
  3296  00073A  0EFF               	movlw	255
  3297  00073C  6E1D               	movwf	??_fillRectangle& (0+255),c
  3298  00073E  0EFF               	movlw	255
  3299  000740  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  3300  000742  5019               	movf	fillRectangle@w,w,c
  3301  000744  C023  F01F         	movff	fillRectangle@x,??_fillRectangle+2
  3302  000748  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  3303  00074A  261F               	addwf	??_fillRectangle+2,f,c
  3304  00074C  0E00               	movlw	0
  3305  00074E  2220               	addwfc	??_fillRectangle+3,f,c
  3306  000750  501D               	movf	??_fillRectangle,w,c
  3307  000752  261F               	addwf	??_fillRectangle+2,f,c
  3308  000754  501E               	movf	??_fillRectangle+1,w,c
  3309  000756  2220               	addwfc	??_fillRectangle+3,f,c
  3310  000758  BE20               	btfsc	??_fillRectangle+3,7,c
  3311  00075A  D00A               	goto	l373
  3312  00075C  5020               	movf	??_fillRectangle+3,w,c
  3313  00075E  E104               	bnz	u2330
  3314  000760  0E80               	movlw	128
  3315  000762  5C1F               	subwf	??_fillRectangle+2,w,c
  3316  000764  A0D8               	btfss	status,0,c
  3317  000766  D004               	goto	l373
  3318  000768                     u2330:
  3319                           
  3320                           ;ST7735_TFT.c: 509: w = 128 - x;
  3321  000768  5023               	movf	fillRectangle@x,w,c
  3322  00076A  0800               	sublw	0
  3323  00076C  0F80               	addlw	128
  3324  00076E  6E19               	movwf	fillRectangle@w,c
  3325  000770                     l373:
  3326                           
  3327                           ;ST7735_TFT.c: 510: if((y + h - 1) >= 160)
  3328  000770  0EFF               	movlw	255
  3329  000772  6E1D               	movwf	??_fillRectangle& (0+255),c
  3330  000774  0EFF               	movlw	255
  3331  000776  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  3332  000778  501A               	movf	fillRectangle@h,w,c
  3333  00077A  C018  F01F         	movff	fillRectangle@y,??_fillRectangle+2
  3334  00077E  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  3335  000780  261F               	addwf	??_fillRectangle+2,f,c
  3336  000782  0E00               	movlw	0
  3337  000784  2220               	addwfc	??_fillRectangle+3,f,c
  3338  000786  501D               	movf	??_fillRectangle,w,c
  3339  000788  261F               	addwf	??_fillRectangle+2,f,c
  3340  00078A  501E               	movf	??_fillRectangle+1,w,c
  3341  00078C  2220               	addwfc	??_fillRectangle+3,f,c
  3342  00078E  BE20               	btfsc	??_fillRectangle+3,7,c
  3343  000790  D00B               	goto	l3764
  3344  000792  5020               	movf	??_fillRectangle+3,w,c
  3345  000794  E104               	bnz	u2340
  3346  000796  0EA0               	movlw	160
  3347  000798  5C1F               	subwf	??_fillRectangle+2,w,c
  3348  00079A  A0D8               	btfss	status,0,c
  3349  00079C  D005               	goto	l3764
  3350  00079E                     u2340:
  3351                           
  3352                           ;ST7735_TFT.c: 511: h = 160 - y;
  3353  00079E  5018               	movf	fillRectangle@y,w,c
  3354  0007A0  0800               	sublw	0
  3355  0007A2  0FA0               	addlw	160
  3356  0007A4  6E1A               	movwf	fillRectangle@h,c
  3357  0007A6  D000               	goto	l3764
  3358  0007A8                     l3764:
  3359                           
  3360                           ;ST7735_TFT.c: 512: setAddrWindow(x, y, x+w-1, y+h-1);
  3361  0007A8  C018  F014         	movff	fillRectangle@y,setAddrWindow@y0
  3362  0007AC  5023               	movf	fillRectangle@x,w,c
  3363  0007AE  2419               	addwf	fillRectangle@w,w,c
  3364  0007B0  6E1D               	movwf	??_fillRectangle& (0+255),c
  3365  0007B2  041D               	decf	??_fillRectangle,w,c
  3366  0007B4  6E15               	movwf	setAddrWindow@x1,c
  3367  0007B6  5018               	movf	fillRectangle@y,w,c
  3368  0007B8  241A               	addwf	fillRectangle@h,w,c
  3369  0007BA  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  3370  0007BC  041E               	decf	??_fillRectangle+1,w,c
  3371  0007BE  6E16               	movwf	setAddrWindow@y1,c
  3372  0007C0  5023               	movf	fillRectangle@x,w,c
  3373  0007C2  EC49  F006         	call	_setAddrWindow
  3374                           
  3375                           ;ST7735_TFT.c: 513: hi = color >> 8; lo = color;
  3376  0007C6  501C               	movf	fillRectangle@color+1,w,c
  3377  0007C8  6E21               	movwf	fillRectangle@hi,c
  3378  0007CA  C01B  F022         	movff	fillRectangle@color,fillRectangle@lo
  3379                           
  3380                           ;ST7735_TFT.c: 514: PORTDbits.RD0 = 1;
  3381  0007CE  8083               	bsf	3971,0,c	;volatile
  3382                           
  3383                           ;ST7735_TFT.c: 515: PORTDbits.RD1 = 0;
  3384  0007D0  9283               	bcf	3971,1,c	;volatile
  3385                           
  3386                           ;ST7735_TFT.c: 517: for(y=h; y>0; y--) {
  3387  0007D2  C01A  F018         	movff	fillRectangle@h,fillRectangle@y
  3388  0007D6                     l3776:
  3389  0007D6  5018               	movf	fillRectangle@y,w,c
  3390  0007D8  B4D8               	btfsc	status,2,c
  3391  0007DA  D013               	goto	l376
  3392  0007DC  D001               	goto	l375
  3393  0007DE  D011               	goto	l376
  3394  0007E0                     l375:
  3395                           
  3396                           ;ST7735_TFT.c: 518: for(x = w; x > 0; x--) {
  3397  0007E0  C019  F023         	movff	fillRectangle@w,fillRectangle@x
  3398  0007E4                     l3780:
  3399  0007E4  5023               	movf	fillRectangle@x,w,c
  3400  0007E6  B4D8               	btfsc	status,2,c
  3401  0007E8  D00A               	goto	l3790
  3402  0007EA  D001               	goto	l3784
  3403  0007EC  D008               	goto	l3790
  3404  0007EE                     l3784:
  3405                           
  3406                           ;ST7735_TFT.c: 519: spiwrite(hi);
  3407  0007EE  5021               	movf	fillRectangle@hi,w,c
  3408  0007F0  EC6F  F008         	call	_spiwrite
  3409                           
  3410                           ;ST7735_TFT.c: 520: spiwrite(lo);
  3411  0007F4  5022               	movf	fillRectangle@lo,w,c
  3412  0007F6  EC6F  F008         	call	_spiwrite
  3413  0007FA  0623               	decf	fillRectangle@x,f,c
  3414  0007FC  D7F3               	goto	l3780
  3415  0007FE                     l3790:
  3416  0007FE  0618               	decf	fillRectangle@y,f,c
  3417  000800  D7EA               	goto	l3776
  3418  000802                     l376:
  3419                           
  3420                           ;ST7735_TFT.c: 521: }
  3421                           ;ST7735_TFT.c: 522: }
  3422                           ;ST7735_TFT.c: 523: PORTDbits.RD1 = 1;
  3423  000802  8283               	bsf	3971,1,c	;volatile
  3424  000804                     l372:
  3425  000804  0012               	return		;funcret
  3426  000806                     __end_of_fillRectangle:
  3427                           	opt stack 0
  3428                           tblptru	equ	0xFF8
  3429                           tblptrh	equ	0xFF7
  3430                           tblptrl	equ	0xFF6
  3431                           tablat	equ	0xFF5
  3432                           prodh	equ	0xFF4
  3433                           prodl	equ	0xFF3
  3434                           intcon	equ	0xFF2
  3435                           intcon2	equ	0xFF1
  3436                           postinc0	equ	0xFEE
  3437                           wreg	equ	0xFE8
  3438                           postdec1	equ	0xFE5
  3439                           fsr1l	equ	0xFE1
  3440                           indf2	equ	0xFDF
  3441                           postinc2	equ	0xFDE
  3442                           postdec2	equ	0xFDD
  3443                           fsr2h	equ	0xFDA
  3444                           fsr2l	equ	0xFD9
  3445                           status	equ	0xFD8
  3446                           
  3447 ;; *************** function _drawtext *****************
  3448 ;; Defined at:
  3449 ;;		line 474 in file "ST7735_TFT.c"
  3450 ;; Parameters:    Size  Location     Type
  3451 ;;  x               1    wreg     unsigned char 
  3452 ;;  y               1    0[BANK0 ] unsigned char 
  3453 ;;  _text           2    1[BANK0 ] PTR unsigned char 
  3454 ;;		 -> NULL(0), buffer(31), 
  3455 ;;  color           2    3[BANK0 ] unsigned int 
  3456 ;;  bg              2    5[BANK0 ] unsigned int 
  3457 ;;  size            1    7[BANK0 ] unsigned char 
  3458 ;; Auto vars:     Size  Location     Type
  3459 ;;  x               1    8[BANK0 ] unsigned char 
  3460 ;;  i               2   11[BANK0 ] unsigned int 
  3461 ;;  textsize        2    9[BANK0 ] unsigned int 
  3462 ;;  cursor_x        1   14[BANK0 ] unsigned char 
  3463 ;;  cursor_y        1   13[BANK0 ] unsigned char 
  3464 ;; Return value:  Size  Location     Type
  3465 ;;		None               void
  3466 ;; Registers used:
  3467 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3468 ;; Tracked objects:
  3469 ;;		On entry : 0/0
  3470 ;;		On exit  : 0/0
  3471 ;;		Unchanged: 0/0
  3472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3473 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3474 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3475 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3476 ;;      Totals:         2      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3477 ;;Total ram usage:       17 bytes
  3478 ;; Hardware stack levels used:    1
  3479 ;; Hardware stack levels required when called:    9
  3480 ;; This function calls:
  3481 ;;		_drawChar
  3482 ;;		_strlen
  3483 ;; This function is called by:
  3484 ;;		_Initialize_Screen
  3485 ;; This function uses a non-reentrant model
  3486 ;;
  3487                           
  3488                           	psect	text16
  3489  000410                     __ptext16:
  3490                           	opt stack 0
  3491  000410                     _drawtext:
  3492                           	opt stack 19
  3493                           
  3494                           ;incstack = 0
  3495                           ;drawtext@x stored from wreg
  3496  000410  0100               	movlb	0	; () banked
  3497  000412  6FF0               	movwf	drawtext@x& (0+255),b
  3498                           
  3499                           ; BSR set to: 0
  3500                           ;ST7735_TFT.c: 476: unsigned char cursor_x, cursor_y;
  3501                           ;ST7735_TFT.c: 477: unsigned int textsize, i;
  3502                           ;ST7735_TFT.c: 478: cursor_x = x, cursor_y = y;
  3503  000414  C0F0  F0F6         	movff	drawtext@x,drawtext@cursor_x
  3504                           
  3505                           ; BSR set to: 0
  3506  000418  C0E8  F0F5         	movff	drawtext@y,drawtext@cursor_y
  3507                           
  3508                           ; BSR set to: 0
  3509                           ;ST7735_TFT.c: 479: textsize = strlen(_text);
  3510  00041C  C0E9  F011         	movff	drawtext@_text,strlen@s
  3511  000420  C0EA  F012         	movff	drawtext@_text+1,strlen@s+1
  3512  000424  EC26  F007         	call	_strlen	;wreg free
  3513  000428  C011  F0F1         	movff	?_strlen,drawtext@textsize
  3514  00042C  C012  F0F2         	movff	?_strlen+1,drawtext@textsize+1
  3515                           
  3516                           ;ST7735_TFT.c: 480: for(i = 0; i < textsize; i++){
  3517  000430  0E00               	movlw	0
  3518  000432  0100               	movlb	0	; () banked
  3519  000434  6FF4               	movwf	(drawtext@i+1)& (0+255),b
  3520  000436  0E00               	movlw	0
  3521  000438  6FF3               	movwf	drawtext@i& (0+255),b
  3522  00043A  D06B               	goto	l3834
  3523  00043C                     l3808:
  3524                           
  3525                           ; BSR set to: 0
  3526                           ;ST7735_TFT.c: 481: if(wrap && ((cursor_x + size * 5) > 128)){
  3527  00043C  506D               	movf	_wrap,w,c
  3528  00043E  B4D8               	btfsc	status,2,c
  3529  000440  D038               	goto	l3824
  3530                           
  3531                           ; BSR set to: 0
  3532  000442  0100               	movlb	0	; () banked
  3533  000444  51EF               	movf	drawtext@size& (0+255),w,b
  3534  000446  0D05               	mullw	5
  3535  000448  0100               	movlb	0	; () banked
  3536  00044A  51F6               	movf	drawtext@cursor_x& (0+255),w,b
  3537  00044C  6E39               	movwf	??_drawtext& (0+255),c
  3538  00044E  6A3A               	clrf	(??_drawtext+1)& (0+255),c
  3539  000450  50F3               	movf	prodl,w,c
  3540  000452  2639               	addwf	??_drawtext,f,c
  3541  000454  50F4               	movf	prodh,w,c
  3542  000456  223A               	addwfc	??_drawtext+1,f,c
  3543  000458  BE3A               	btfsc	??_drawtext+1,7,c
  3544  00045A  D02B               	goto	l3824
  3545  00045C  503A               	movf	??_drawtext+1,w,c
  3546  00045E  E104               	bnz	u2400
  3547  000460  0E81               	movlw	129
  3548  000462  5C39               	subwf	??_drawtext,w,c
  3549  000464  A0D8               	btfss	status,0,c
  3550  000466  D025               	goto	l3824
  3551  000468                     u2400:
  3552                           
  3553                           ; BSR set to: 0
  3554                           ;ST7735_TFT.c: 482: cursor_x = 0;
  3555  000468  0E00               	movlw	0
  3556  00046A  0100               	movlb	0	; () banked
  3557  00046C  6FF6               	movwf	drawtext@cursor_x& (0+255),b
  3558                           
  3559                           ; BSR set to: 0
  3560                           ;ST7735_TFT.c: 483: cursor_y = cursor_y + size * 7 + 3 ;
  3561  00046E  0100               	movlb	0	; () banked
  3562  000470  51EF               	movf	drawtext@size& (0+255),w,b
  3563  000472  0D07               	mullw	7
  3564  000474  50F3               	movf	prodl,w,c
  3565  000476  0100               	movlb	0	; () banked
  3566  000478  25F5               	addwf	drawtext@cursor_y& (0+255),w,b
  3567  00047A  0F03               	addlw	3
  3568  00047C  0100               	movlb	0	; () banked
  3569  00047E  6FF5               	movwf	drawtext@cursor_y& (0+255),b
  3570                           
  3571                           ; BSR set to: 0
  3572                           ;ST7735_TFT.c: 484: if(cursor_y > 160) cursor_y = 160;
  3573  000480  0EA0               	movlw	160
  3574  000482  0100               	movlb	0	; () banked
  3575  000484  65F5               	cpfsgt	drawtext@cursor_y& (0+255),b
  3576  000486  D004               	goto	l3820
  3577                           
  3578                           ; BSR set to: 0
  3579  000488  0EA0               	movlw	160
  3580  00048A  0100               	movlb	0	; () banked
  3581  00048C  6FF5               	movwf	drawtext@cursor_y& (0+255),b
  3582  00048E  D000               	goto	l3820
  3583  000490                     l3820:
  3584                           
  3585                           ; BSR set to: 0
  3586                           ;ST7735_TFT.c: 485: if(_text[i] == 0x20) goto _skip; }
  3587  000490  0100               	movlb	0	; () banked
  3588  000492  51F3               	movf	drawtext@i& (0+255),w,b
  3589  000494  0100               	movlb	0	; () banked
  3590  000496  25E9               	addwf	drawtext@_text& (0+255),w,b
  3591  000498  6ED9               	movwf	fsr2l,c
  3592  00049A  0100               	movlb	0	; () banked
  3593  00049C  51F4               	movf	(drawtext@i+1)& (0+255),w,b
  3594  00049E  0100               	movlb	0	; () banked
  3595  0004A0  21EA               	addwfc	(drawtext@_text+1)& (0+255),w,b
  3596  0004A2  6EDA               	movwf	fsr2h,c
  3597  0004A4  0E20               	movlw	32
  3598  0004A6  18DE               	xorwf	postinc2,w,c
  3599  0004A8  B4D8               	btfsc	status,2,c
  3600  0004AA  D02F               	goto	l3832
  3601  0004AC  D002               	goto	l3824
  3602                           
  3603                           ; BSR set to: 0
  3604  0004AE  D02D               	goto	l3832
  3605                           
  3606                           ; BSR set to: 0
  3607  0004B0  D000               	goto	l3824
  3608  0004B2                     l3824:
  3609                           
  3610                           ; BSR set to: 0
  3611                           ;ST7735_TFT.c: 486: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
  3612  0004B2  C0F5  F02E         	movff	drawtext@cursor_y,drawChar@y
  3613  0004B6  0100               	movlb	0	; () banked
  3614  0004B8  51F3               	movf	drawtext@i& (0+255),w,b
  3615  0004BA  0100               	movlb	0	; () banked
  3616  0004BC  25E9               	addwf	drawtext@_text& (0+255),w,b
  3617  0004BE  6ED9               	movwf	fsr2l,c
  3618  0004C0  0100               	movlb	0	; () banked
  3619  0004C2  51F4               	movf	(drawtext@i+1)& (0+255),w,b
  3620  0004C4  0100               	movlb	0	; () banked
  3621  0004C6  21EA               	addwfc	(drawtext@_text+1)& (0+255),w,b
  3622  0004C8  6EDA               	movwf	fsr2h,c
  3623  0004CA  50DF               	movf	indf2,w,c
  3624  0004CC  6E2F               	movwf	drawChar@c,c
  3625  0004CE  C0EB  F030         	movff	drawtext@color,drawChar@color
  3626  0004D2  C0EC  F031         	movff	drawtext@color+1,drawChar@color+1
  3627  0004D6  C0ED  F032         	movff	drawtext@bg,drawChar@bg
  3628  0004DA  C0EE  F033         	movff	drawtext@bg+1,drawChar@bg+1
  3629  0004DE  C0EF  F034         	movff	drawtext@size,drawChar@size
  3630  0004E2  0100               	movlb	0	; () banked
  3631  0004E4  51F6               	movf	drawtext@cursor_x& (0+255),w,b
  3632  0004E6  ECBE  F000         	call	_drawChar
  3633                           
  3634                           ;ST7735_TFT.c: 487: cursor_x = cursor_x + size * 6;
  3635  0004EA  0100               	movlb	0	; () banked
  3636  0004EC  51EF               	movf	drawtext@size& (0+255),w,b
  3637  0004EE  0D06               	mullw	6
  3638  0004F0  50F3               	movf	prodl,w,c
  3639  0004F2  0100               	movlb	0	; () banked
  3640  0004F4  25F6               	addwf	drawtext@cursor_x& (0+255),w,b
  3641  0004F6  0100               	movlb	0	; () banked
  3642  0004F8  6FF6               	movwf	drawtext@cursor_x& (0+255),b
  3643                           
  3644                           ; BSR set to: 0
  3645                           ;ST7735_TFT.c: 488: if(cursor_x > 128) cursor_x = 128;
  3646  0004FA  0E80               	movlw	128
  3647  0004FC  0100               	movlb	0	; () banked
  3648  0004FE  65F6               	cpfsgt	drawtext@cursor_x& (0+255),b
  3649  000500  D004               	goto	l3832
  3650                           
  3651                           ; BSR set to: 0
  3652  000502  0E80               	movlw	128
  3653  000504  0100               	movlb	0	; () banked
  3654  000506  6FF6               	movwf	drawtext@cursor_x& (0+255),b
  3655                           
  3656                           ; BSR set to: 0
  3657  000508  D000               	goto	l3832
  3658  00050A                     l3832:
  3659                           
  3660                           ; BSR set to: 0
  3661  00050A  0100               	movlb	0	; () banked
  3662  00050C  4BF3               	infsnz	drawtext@i& (0+255),f,b
  3663  00050E  2BF4               	incf	(drawtext@i+1)& (0+255),f,b
  3664  000510  D000               	goto	l3834
  3665  000512                     l3834:
  3666                           
  3667                           ; BSR set to: 0
  3668  000512  0100               	movlb	0	; () banked
  3669  000514  51F1               	movf	drawtext@textsize& (0+255),w,b
  3670  000516  0100               	movlb	0	; () banked
  3671  000518  5DF3               	subwf	drawtext@i& (0+255),w,b
  3672  00051A  0100               	movlb	0	; () banked
  3673  00051C  51F2               	movf	(drawtext@textsize+1)& (0+255),w,b
  3674  00051E  0100               	movlb	0	; () banked
  3675  000520  59F4               	subwfb	(drawtext@i+1)& (0+255),w,b
  3676  000522  A0D8               	btfss	status,0,c
  3677  000524  D78B               	goto	l3808
  3678                           
  3679                           ; BSR set to: 0
  3680                           
  3681                           ; BSR set to: 0
  3682  000526  0012               	return		;funcret
  3683  000528                     __end_of_drawtext:
  3684                           	opt stack 0
  3685                           tblptru	equ	0xFF8
  3686                           tblptrh	equ	0xFF7
  3687                           tblptrl	equ	0xFF6
  3688                           tablat	equ	0xFF5
  3689                           prodh	equ	0xFF4
  3690                           prodl	equ	0xFF3
  3691                           intcon	equ	0xFF2
  3692                           intcon2	equ	0xFF1
  3693                           postinc0	equ	0xFEE
  3694                           wreg	equ	0xFE8
  3695                           postdec1	equ	0xFE5
  3696                           fsr1l	equ	0xFE1
  3697                           indf2	equ	0xFDF
  3698                           postinc2	equ	0xFDE
  3699                           postdec2	equ	0xFDD
  3700                           fsr2h	equ	0xFDA
  3701                           fsr2l	equ	0xFD9
  3702                           status	equ	0xFD8
  3703                           
  3704 ;; *************** function _strlen *****************
  3705 ;; Defined at:
  3706 ;;		line 4 in file "E:\XC8\sources\common\strlen.c"
  3707 ;; Parameters:    Size  Location     Type
  3708 ;;  s               2   16[COMRAM] PTR const unsigned char 
  3709 ;;		 -> NULL(0), buffer(31), 
  3710 ;; Auto vars:     Size  Location     Type
  3711 ;;  cp              2   20[COMRAM] PTR const unsigned char 
  3712 ;;		 -> NULL(0), buffer(31), 
  3713 ;; Return value:  Size  Location     Type
  3714 ;;                  2   16[COMRAM] unsigned int 
  3715 ;; Registers used:
  3716 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3717 ;; Tracked objects:
  3718 ;;		On entry : 0/0
  3719 ;;		On exit  : 0/0
  3720 ;;		Unchanged: 0/0
  3721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3722 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3723 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3724 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3725 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3726 ;;Total ram usage:        6 bytes
  3727 ;; Hardware stack levels used:    1
  3728 ;; Hardware stack levels required when called:    3
  3729 ;; This function calls:
  3730 ;;		Nothing
  3731 ;; This function is called by:
  3732 ;;		_drawtext
  3733 ;; This function uses a non-reentrant model
  3734 ;;
  3735                           
  3736                           	psect	text17
  3737  000E4C                     __ptext17:
  3738                           	opt stack 0
  3739  000E4C                     _strlen:
  3740                           	opt stack 24
  3741                           
  3742                           ; BSR set to: 0
  3743                           ;incstack = 0
  3744  000E4C  C011  F015         	movff	strlen@s,strlen@cp
  3745  000E50  C012  F016         	movff	strlen@s+1,strlen@cp+1
  3746  000E54  D003               	goto	l3748
  3747  000E56                     l3746:
  3748  000E56  4A15               	infsnz	strlen@cp,f,c
  3749  000E58  2A16               	incf	strlen@cp+1,f,c
  3750  000E5A  D000               	goto	l3748
  3751  000E5C                     l3748:
  3752  000E5C  C015  FFD9         	movff	strlen@cp,fsr2l
  3753  000E60  C016  FFDA         	movff	strlen@cp+1,fsr2h
  3754  000E64  50DF               	movf	indf2,w,c
  3755  000E66  A4D8               	btfss	status,2,c
  3756  000E68  D7F6               	goto	l3746
  3757  000E6A  C011  F013         	movff	strlen@s,??_strlen
  3758  000E6E  C012  F014         	movff	strlen@s+1,??_strlen+1
  3759  000E72  1E13               	comf	??_strlen,f,c
  3760  000E74  1E14               	comf	??_strlen+1,f,c
  3761  000E76  4A13               	infsnz	??_strlen,f,c
  3762  000E78  2A14               	incf	??_strlen+1,f,c
  3763  000E7A  5015               	movf	strlen@cp,w,c
  3764  000E7C  2413               	addwf	??_strlen,w,c
  3765  000E7E  6E11               	movwf	?_strlen,c
  3766  000E80  5016               	movf	strlen@cp+1,w,c
  3767  000E82  2014               	addwfc	??_strlen+1,w,c
  3768  000E84  6E12               	movwf	?_strlen+1,c
  3769  000E86  D000               	goto	l1180
  3770  000E88                     l1180:
  3771  000E88  0012               	return		;funcret
  3772  000E8A                     __end_of_strlen:
  3773                           	opt stack 0
  3774                           tblptru	equ	0xFF8
  3775                           tblptrh	equ	0xFF7
  3776                           tblptrl	equ	0xFF6
  3777                           tablat	equ	0xFF5
  3778                           prodh	equ	0xFF4
  3779                           prodl	equ	0xFF3
  3780                           intcon	equ	0xFF2
  3781                           intcon2	equ	0xFF1
  3782                           postinc0	equ	0xFEE
  3783                           wreg	equ	0xFE8
  3784                           postdec1	equ	0xFE5
  3785                           fsr1l	equ	0xFE1
  3786                           indf2	equ	0xFDF
  3787                           postinc2	equ	0xFDE
  3788                           postdec2	equ	0xFDD
  3789                           fsr2h	equ	0xFDA
  3790                           fsr2l	equ	0xFD9
  3791                           status	equ	0xFD8
  3792                           
  3793 ;; *************** function _drawChar *****************
  3794 ;; Defined at:
  3795 ;;		line 447 in file "ST7735_TFT.c"
  3796 ;; Parameters:    Size  Location     Type
  3797 ;;  x               1    wreg     unsigned char 
  3798 ;;  y               1   45[COMRAM] unsigned char 
  3799 ;;  c               1   46[COMRAM] unsigned char 
  3800 ;;  color           2   47[COMRAM] unsigned int 
  3801 ;;  bg              2   49[COMRAM] unsigned int 
  3802 ;;  size            1   51[COMRAM] unsigned char 
  3803 ;; Auto vars:     Size  Location     Type
  3804 ;;  x               1   53[COMRAM] unsigned char 
  3805 ;;  line            1   52[COMRAM] unsigned char 
  3806 ;;  i               1   55[COMRAM] unsigned char 
  3807 ;;  j               1   54[COMRAM] unsigned char 
  3808 ;; Return value:  Size  Location     Type
  3809 ;;		None               void
  3810 ;; Registers used:
  3811 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3812 ;; Tracked objects:
  3813 ;;		On entry : 0/0
  3814 ;;		On exit  : 0/0
  3815 ;;		Unchanged: 0/0
  3816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3817 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3818 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3819 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3820 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3821 ;;Total ram usage:       11 bytes
  3822 ;; Hardware stack levels used:    1
  3823 ;; Hardware stack levels required when called:    8
  3824 ;; This function calls:
  3825 ;;		___wmul
  3826 ;;		_drawPixel
  3827 ;;		_fillRect
  3828 ;; This function is called by:
  3829 ;;		_drawtext
  3830 ;; This function uses a non-reentrant model
  3831 ;;
  3832                           
  3833                           	psect	text18
  3834  00017C                     __ptext18:
  3835                           	opt stack 0
  3836  00017C                     _drawChar:
  3837                           	opt stack 19
  3838                           
  3839                           ;incstack = 0
  3840                           ;drawChar@x stored from wreg
  3841  00017C  6E36               	movwf	drawChar@x,c
  3842                           
  3843                           ;ST7735_TFT.c: 449: char i, j;
  3844                           ;ST7735_TFT.c: 450: if((x >= 128) || (y >= 160))
  3845  00017E  0E80               	movlw	128
  3846  000180  6036               	cpfslt	drawChar@x,c
  3847  000182  D0A6               	goto	l335
  3848  000184  0E9F               	movlw	159
  3849  000186  642E               	cpfsgt	drawChar@y,c
  3850  000188  D001               	goto	l3694
  3851                           
  3852                           ;ST7735_TFT.c: 451: return;
  3853  00018A  D0A2               	goto	l335
  3854  00018C                     l3694:
  3855                           
  3856                           ;ST7735_TFT.c: 452: if(size < 1) size = 1;
  3857  00018C  5034               	movf	drawChar@size,w,c
  3858  00018E  A4D8               	btfss	status,2,c
  3859  000190  D003               	goto	l3698
  3860  000192  0E01               	movlw	1
  3861  000194  6E34               	movwf	drawChar@size,c
  3862  000196  D000               	goto	l3698
  3863  000198                     l3698:
  3864                           
  3865                           ;ST7735_TFT.c: 453: if((c < ' ') || (c > '~'))
  3866  000198  0E1F               	movlw	31
  3867  00019A  642F               	cpfsgt	drawChar@c,c
  3868  00019C  D004               	goto	l3702
  3869  00019E  0E7E               	movlw	126
  3870  0001A0  642F               	cpfsgt	drawChar@c,c
  3871  0001A2  D003               	goto	l337
  3872  0001A4  D000               	goto	l3702
  3873  0001A6                     l3702:
  3874                           
  3875                           ;ST7735_TFT.c: 454: c = '?';
  3876  0001A6  0E3F               	movlw	63
  3877  0001A8  6E2F               	movwf	drawChar@c,c
  3878  0001AA                     l337:
  3879                           
  3880                           ;ST7735_TFT.c: 455: for(i=0; i<5; i++ ) {
  3881  0001AA  0E00               	movlw	0
  3882  0001AC  6E38               	movwf	drawChar@i,c
  3883  0001AE                     l3704:
  3884  0001AE  0E04               	movlw	4
  3885  0001B0  6438               	cpfsgt	drawChar@i,c
  3886  0001B2  D001               	goto	l3708
  3887  0001B4  D08D               	goto	l335
  3888  0001B6                     l3708:
  3889                           
  3890                           ;ST7735_TFT.c: 456: unsigned char line;
  3891                           ;ST7735_TFT.c: 457: if(c < 'S')
  3892  0001B6  0E53               	movlw	83
  3893  0001B8  602F               	cpfslt	drawChar@c,c
  3894  0001BA  D015               	goto	l3712
  3895                           
  3896                           ;ST7735_TFT.c: 458: line = font[(c - 32)*5 + i];
  3897  0001BC  0EE0               	movlw	224
  3898  0001BE  242F               	addwf	drawChar@c,w,c
  3899  0001C0  6E11               	movwf	___wmul@multiplier,c
  3900  0001C2  6A12               	clrf	___wmul@multiplier+1,c
  3901  0001C4  0EFF               	movlw	255
  3902  0001C6  2212               	addwfc	___wmul@multiplier+1,f,c
  3903  0001C8  0E00               	movlw	0
  3904  0001CA  6E14               	movwf	___wmul@multiplicand+1,c
  3905  0001CC  0E05               	movlw	5
  3906  0001CE  6E13               	movwf	___wmul@multiplicand,c
  3907  0001D0  ECFF  F007         	call	___wmul	;wreg free
  3908  0001D4  5038               	movf	drawChar@i,w,c
  3909  0001D6  2611               	addwf	?___wmul,f,c
  3910  0001D8  0E00               	movlw	0
  3911  0001DA  2212               	addwfc	?___wmul+1,f,c
  3912  0001DC  0ED3               	movlw	low _font
  3913  0001DE  2411               	addwf	?___wmul,w,c
  3914  0001E0  6EF6               	movwf	tblptrl,c
  3915  0001E2  0EFD               	movlw	high _font
  3916  0001E4  D014               	goto	L1
  3917  0001E6                     l3712:
  3918                           
  3919                           ;ST7735_TFT.c: 459: else
  3920                           ;ST7735_TFT.c: 460: line = font2[(c - 'S')*5 + i];
  3921  0001E6  0EAD               	movlw	173
  3922  0001E8  242F               	addwf	drawChar@c,w,c
  3923  0001EA  6E11               	movwf	___wmul@multiplier,c
  3924  0001EC  6A12               	clrf	___wmul@multiplier+1,c
  3925  0001EE  0EFF               	movlw	255
  3926  0001F0  2212               	addwfc	___wmul@multiplier+1,f,c
  3927  0001F2  0E00               	movlw	0
  3928  0001F4  6E14               	movwf	___wmul@multiplicand+1,c
  3929  0001F6  0E05               	movlw	5
  3930  0001F8  6E13               	movwf	___wmul@multiplicand,c
  3931  0001FA  ECFF  F007         	call	___wmul	;wreg free
  3932  0001FE  5038               	movf	drawChar@i,w,c
  3933  000200  2611               	addwf	?___wmul,f,c
  3934  000202  0E00               	movlw	0
  3935  000204  2212               	addwfc	?___wmul+1,f,c
  3936  000206  0ED2               	movlw	low _font2
  3937  000208  2411               	addwf	?___wmul,w,c
  3938  00020A  6EF6               	movwf	tblptrl,c
  3939  00020C  0EFE               	movlw	high _font2
  3940  00020E                     L1:
  3941  00020E  2012               	addwfc	?___wmul+1,w,c
  3942  000210  6EF7               	movwf	tblptrh,c
  3943  000212                     	if	0	;There are less than 3 active tblptr bytes
  3944  000212                     	endif
  3945  000212  0008               	tblrd		*
  3946  000214  CFF5 F035          	movff	tablat,drawChar@line
  3947  000218  D000               	goto	l3714
  3948  00021A                     l3714:
  3949                           
  3950                           ;ST7735_TFT.c: 461: for(j=0; j<7; j++, line >>= 1) {
  3951  00021A  0E00               	movlw	0
  3952  00021C  6E37               	movwf	drawChar@j,c
  3953  00021E                     l3716:
  3954  00021E  0E06               	movlw	6
  3955  000220  6437               	cpfsgt	drawChar@j,c
  3956  000222  D001               	goto	l344
  3957  000224  D053               	goto	l3740
  3958  000226                     l344:
  3959                           
  3960                           ;ST7735_TFT.c: 462: if(line & 0x01) {
  3961  000226  A035               	btfss	drawChar@line,0,c
  3962  000228  D023               	goto	l3726
  3963                           
  3964                           ;ST7735_TFT.c: 463: if(size == 1) drawPixel(x+i, y+j, color);
  3965  00022A  0434               	decf	drawChar@size,w,c
  3966  00022C  A4D8               	btfss	status,2,c
  3967  00022E  D00C               	goto	l3724
  3968  000230  502E               	movf	drawChar@y,w,c
  3969  000232  2437               	addwf	drawChar@j,w,c
  3970  000234  6E18               	movwf	drawPixel@y,c
  3971  000236  C030  F019         	movff	drawChar@color,drawPixel@color
  3972  00023A  C031  F01A         	movff	drawChar@color+1,drawPixel@color+1
  3973  00023E  5036               	movf	drawChar@x,w,c
  3974  000240  2438               	addwf	drawChar@i,w,c
  3975  000242  ECD2  F007         	call	_drawPixel
  3976  000246  D03E               	goto	l3734
  3977  000248                     l3724:
  3978                           
  3979                           ;ST7735_TFT.c: 464: else fillRect(x+(i*size), y+(j*size), size, size, color);
  3980  000248  5037               	movf	drawChar@j,w,c
  3981  00024A  0234               	mulwf	drawChar@size,c
  3982  00024C  50F3               	movf	prodl,w,c
  3983  00024E  242E               	addwf	drawChar@y,w,c
  3984  000250  6E23               	movwf	fillRect@y,c
  3985  000252  C034  F024         	movff	drawChar@size,fillRect@w
  3986  000256  C034  F025         	movff	drawChar@size,fillRect@h
  3987  00025A  C030  F026         	movff	drawChar@color,fillRect@color
  3988  00025E  C031  F027         	movff	drawChar@color+1,fillRect@color+1
  3989  000262  5038               	movf	drawChar@i,w,c
  3990  000264  0234               	mulwf	drawChar@size,c
  3991  000266  50F3               	movf	prodl,w,c
  3992  000268  2436               	addwf	drawChar@x,w,c
  3993  00026A  EC96  F006         	call	_fillRect
  3994                           
  3995                           ;ST7735_TFT.c: 465: }
  3996  00026E  D02A               	goto	l3734
  3997  000270                     l3726:
  3998                           
  3999                           ;ST7735_TFT.c: 466: else if(bg != color) {
  4000  000270  5030               	movf	drawChar@color,w,c
  4001  000272  1832               	xorwf	drawChar@bg,w,c
  4002  000274  E104               	bnz	u2260
  4003  000276  5031               	movf	drawChar@color+1,w,c
  4004  000278  1833               	xorwf	drawChar@bg+1,w,c
  4005  00027A  B4D8               	btfsc	status,2,c
  4006  00027C  D023               	goto	l3734
  4007  00027E                     u2260:
  4008                           
  4009                           ;ST7735_TFT.c: 467: if(size == 1) drawPixel(x+i, y+j, bg);
  4010  00027E  0434               	decf	drawChar@size,w,c
  4011  000280  A4D8               	btfss	status,2,c
  4012  000282  D00C               	goto	l3732
  4013  000284  502E               	movf	drawChar@y,w,c
  4014  000286  2437               	addwf	drawChar@j,w,c
  4015  000288  6E18               	movwf	drawPixel@y,c
  4016  00028A  C032  F019         	movff	drawChar@bg,drawPixel@color
  4017  00028E  C033  F01A         	movff	drawChar@bg+1,drawPixel@color+1
  4018  000292  5036               	movf	drawChar@x,w,c
  4019  000294  2438               	addwf	drawChar@i,w,c
  4020  000296  ECD2  F007         	call	_drawPixel
  4021  00029A  D014               	goto	l3734
  4022  00029C                     l3732:
  4023                           
  4024                           ;ST7735_TFT.c: 468: else fillRect(x+i*size, y+j*size, size, size, bg);
  4025  00029C  5037               	movf	drawChar@j,w,c
  4026  00029E  0234               	mulwf	drawChar@size,c
  4027  0002A0  50F3               	movf	prodl,w,c
  4028  0002A2  242E               	addwf	drawChar@y,w,c
  4029  0002A4  6E23               	movwf	fillRect@y,c
  4030  0002A6  C034  F024         	movff	drawChar@size,fillRect@w
  4031  0002AA  C034  F025         	movff	drawChar@size,fillRect@h
  4032  0002AE  C032  F026         	movff	drawChar@bg,fillRect@color
  4033  0002B2  C033  F027         	movff	drawChar@bg+1,fillRect@color+1
  4034  0002B6  5038               	movf	drawChar@i,w,c
  4035  0002B8  0234               	mulwf	drawChar@size,c
  4036  0002BA  50F3               	movf	prodl,w,c
  4037  0002BC  2436               	addwf	drawChar@x,w,c
  4038  0002BE  EC96  F006         	call	_fillRect
  4039  0002C2  D000               	goto	l3734
  4040  0002C4                     l3734:
  4041  0002C4  2A37               	incf	drawChar@j,f,c
  4042  0002C6  90D8               	bcf	status,0,c
  4043  0002C8  3235               	rrcf	drawChar@line,f,c
  4044  0002CA  D7A9               	goto	l3716
  4045  0002CC                     l3740:
  4046  0002CC  2A38               	incf	drawChar@i,f,c
  4047  0002CE  D76F               	goto	l3704
  4048  0002D0                     l335:
  4049  0002D0  0012               	return		;funcret
  4050  0002D2                     __end_of_drawChar:
  4051                           	opt stack 0
  4052                           tblptru	equ	0xFF8
  4053                           tblptrh	equ	0xFF7
  4054                           tblptrl	equ	0xFF6
  4055                           tablat	equ	0xFF5
  4056                           prodh	equ	0xFF4
  4057                           prodl	equ	0xFF3
  4058                           intcon	equ	0xFF2
  4059                           intcon2	equ	0xFF1
  4060                           postinc0	equ	0xFEE
  4061                           wreg	equ	0xFE8
  4062                           postdec1	equ	0xFE5
  4063                           fsr1l	equ	0xFE1
  4064                           indf2	equ	0xFDF
  4065                           postinc2	equ	0xFDE
  4066                           postdec2	equ	0xFDD
  4067                           fsr2h	equ	0xFDA
  4068                           fsr2l	equ	0xFD9
  4069                           status	equ	0xFD8
  4070                           
  4071 ;; *************** function _fillRect *****************
  4072 ;; Defined at:
  4073 ;;		line 437 in file "ST7735_TFT.c"
  4074 ;; Parameters:    Size  Location     Type
  4075 ;;  x               1    wreg     unsigned char 
  4076 ;;  y               1   34[COMRAM] unsigned char 
  4077 ;;  w               1   35[COMRAM] unsigned char 
  4078 ;;  h               1   36[COMRAM] unsigned char 
  4079 ;;  color           2   37[COMRAM] unsigned int 
  4080 ;; Auto vars:     Size  Location     Type
  4081 ;;  x               1   42[COMRAM] unsigned char 
  4082 ;;  i               2   43[COMRAM] int 
  4083 ;; Return value:  Size  Location     Type
  4084 ;;		None               void
  4085 ;; Registers used:
  4086 ;;		wreg, status,2, status,0, cstack
  4087 ;; Tracked objects:
  4088 ;;		On entry : 0/0
  4089 ;;		On exit  : 0/0
  4090 ;;		Unchanged: 0/0
  4091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4092 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4093 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4094 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4095 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4096 ;;Total ram usage:       11 bytes
  4097 ;; Hardware stack levels used:    1
  4098 ;; Hardware stack levels required when called:    7
  4099 ;; This function calls:
  4100 ;;		_drawFastVLine
  4101 ;; This function is called by:
  4102 ;;		_drawChar
  4103 ;; This function uses a non-reentrant model
  4104 ;;
  4105                           
  4106                           	psect	text19
  4107  000D2C                     __ptext19:
  4108                           	opt stack 0
  4109  000D2C                     _fillRect:
  4110                           	opt stack 19
  4111                           
  4112                           ;incstack = 0
  4113                           ;fillRect@x stored from wreg
  4114  000D2C  6E2B               	movwf	fillRect@x,c
  4115                           
  4116                           ;ST7735_TFT.c: 439: signed int i;
  4117                           ;ST7735_TFT.c: 441: for (i = x; i < x + w; i++)
  4118  000D2E  C02B  F02C         	movff	fillRect@x,fillRect@i
  4119  000D32  6A2D               	clrf	fillRect@i+1,c
  4120  000D34  D00E               	goto	l3596
  4121  000D36                     l3592:
  4122                           
  4123                           ;ST7735_TFT.c: 442: {
  4124                           ;ST7735_TFT.c: 443: drawFastVLine(i, y, h, color);
  4125  000D36  C023  F018         	movff	fillRect@y,drawFastVLine@y
  4126  000D3A  C025  F019         	movff	fillRect@h,drawFastVLine@h
  4127  000D3E  C026  F01A         	movff	fillRect@color,drawFastVLine@color
  4128  000D42  C027  F01B         	movff	fillRect@color+1,drawFastVLine@color+1
  4129  000D46  502C               	movf	fillRect@i,w,c
  4130  000D48  EC9D  F004         	call	_drawFastVLine
  4131  000D4C  4A2C               	infsnz	fillRect@i,f,c
  4132  000D4E  2A2D               	incf	fillRect@i+1,f,c
  4133  000D50  D000               	goto	l3596
  4134  000D52                     l3596:
  4135  000D52  5024               	movf	fillRect@w,w,c
  4136  000D54  C02B  F028         	movff	fillRect@x,??_fillRect
  4137  000D58  6A29               	clrf	(??_fillRect+1)& (0+255),c
  4138  000D5A  2628               	addwf	??_fillRect,f,c
  4139  000D5C  0E00               	movlw	0
  4140  000D5E  2229               	addwfc	??_fillRect+1,f,c
  4141  000D60  5028               	movf	??_fillRect,w,c
  4142  000D62  5C2C               	subwf	fillRect@i,w,c
  4143  000D64  502D               	movf	fillRect@i+1,w,c
  4144  000D66  0A80               	xorlw	128
  4145  000D68  6E2A               	movwf	(??_fillRect+2)& (0+255),c
  4146  000D6A  5029               	movf	??_fillRect+1,w,c
  4147  000D6C  0A80               	xorlw	128
  4148  000D6E  582A               	subwfb	(??_fillRect+2)& (0+255),w,c
  4149  000D70  A0D8               	btfss	status,0,c
  4150  000D72  D7E1               	goto	l3592
  4151  000D74  0012               	return		;funcret
  4152  000D76                     __end_of_fillRect:
  4153                           	opt stack 0
  4154                           tblptru	equ	0xFF8
  4155                           tblptrh	equ	0xFF7
  4156                           tblptrl	equ	0xFF6
  4157                           tablat	equ	0xFF5
  4158                           prodh	equ	0xFF4
  4159                           prodl	equ	0xFF3
  4160                           intcon	equ	0xFF2
  4161                           intcon2	equ	0xFF1
  4162                           postinc0	equ	0xFEE
  4163                           wreg	equ	0xFE8
  4164                           postdec1	equ	0xFE5
  4165                           fsr1l	equ	0xFE1
  4166                           indf2	equ	0xFDF
  4167                           postinc2	equ	0xFDE
  4168                           postdec2	equ	0xFDD
  4169                           fsr2h	equ	0xFDA
  4170                           fsr2l	equ	0xFD9
  4171                           status	equ	0xFD8
  4172                           
  4173 ;; *************** function _drawFastVLine *****************
  4174 ;; Defined at:
  4175 ;;		line 416 in file "ST7735_TFT.c"
  4176 ;; Parameters:    Size  Location     Type
  4177 ;;  x               1    wreg     unsigned char 
  4178 ;;  y               1   23[COMRAM] unsigned char 
  4179 ;;  h               1   24[COMRAM] unsigned char 
  4180 ;;  color           2   25[COMRAM] unsigned int 
  4181 ;; Auto vars:     Size  Location     Type
  4182 ;;  x               1   33[COMRAM] unsigned char 
  4183 ;;  lo              1   32[COMRAM] unsigned char 
  4184 ;;  hi              1   31[COMRAM] unsigned char 
  4185 ;; Return value:  Size  Location     Type
  4186 ;;		None               void
  4187 ;; Registers used:
  4188 ;;		wreg, status,2, status,0, cstack
  4189 ;; Tracked objects:
  4190 ;;		On entry : 0/0
  4191 ;;		On exit  : 0/0
  4192 ;;		Unchanged: 0/0
  4193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4194 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4195 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4196 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4197 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4198 ;;Total ram usage:       11 bytes
  4199 ;; Hardware stack levels used:    1
  4200 ;; Hardware stack levels required when called:    6
  4201 ;; This function calls:
  4202 ;;		_setAddrWindow
  4203 ;;		_spiwrite
  4204 ;; This function is called by:
  4205 ;;		_fillRect
  4206 ;;		_fillCircleHelper
  4207 ;;		_fillCircle
  4208 ;;		_drawRect
  4209 ;; This function uses a non-reentrant model
  4210 ;;
  4211                           
  4212                           	psect	text20
  4213  00093A                     __ptext20:
  4214                           	opt stack 0
  4215  00093A                     _drawFastVLine:
  4216                           	opt stack 19
  4217                           
  4218                           ;incstack = 0
  4219                           ;drawFastVLine@x stored from wreg
  4220  00093A  6E22               	movwf	drawFastVLine@x,c
  4221                           
  4222                           ;ST7735_TFT.c: 418: unsigned char hi, lo;
  4223                           ;ST7735_TFT.c: 419: if((x >= 128) || (y >= 160))
  4224  00093C  0E80               	movlw	128
  4225  00093E  6022               	cpfslt	drawFastVLine@x,c
  4226  000940  D03F               	goto	l319
  4227  000942  0E9F               	movlw	159
  4228  000944  6418               	cpfsgt	drawFastVLine@y,c
  4229  000946  D001               	goto	l3542
  4230                           
  4231                           ;ST7735_TFT.c: 420: return;
  4232  000948  D03B               	goto	l319
  4233  00094A                     l3542:
  4234                           
  4235                           ;ST7735_TFT.c: 421: if((y + h - 1) >= 160)
  4236  00094A  0EFF               	movlw	255
  4237  00094C  6E1C               	movwf	??_drawFastVLine& (0+255),c
  4238  00094E  0EFF               	movlw	255
  4239  000950  6E1D               	movwf	(??_drawFastVLine+1)& (0+255),c
  4240  000952  5019               	movf	drawFastVLine@h,w,c
  4241  000954  C018  F01E         	movff	drawFastVLine@y,??_drawFastVLine+2
  4242  000958  6A1F               	clrf	(??_drawFastVLine+3)& (0+255),c
  4243  00095A  261E               	addwf	??_drawFastVLine+2,f,c
  4244  00095C  0E00               	movlw	0
  4245  00095E  221F               	addwfc	??_drawFastVLine+3,f,c
  4246  000960  501C               	movf	??_drawFastVLine,w,c
  4247  000962  261E               	addwf	??_drawFastVLine+2,f,c
  4248  000964  501D               	movf	??_drawFastVLine+1,w,c
  4249  000966  221F               	addwfc	??_drawFastVLine+3,f,c
  4250  000968  BE1F               	btfsc	??_drawFastVLine+3,7,c
  4251  00096A  D00B               	goto	l3546
  4252  00096C  501F               	movf	??_drawFastVLine+3,w,c
  4253  00096E  E104               	bnz	u2100
  4254  000970  0EA0               	movlw	160
  4255  000972  5C1E               	subwf	??_drawFastVLine+2,w,c
  4256  000974  A0D8               	btfss	status,0,c
  4257  000976  D005               	goto	l3546
  4258  000978                     u2100:
  4259                           
  4260                           ;ST7735_TFT.c: 422: h = 160 - y;
  4261  000978  5018               	movf	drawFastVLine@y,w,c
  4262  00097A  0800               	sublw	0
  4263  00097C  0FA0               	addlw	160
  4264  00097E  6E19               	movwf	drawFastVLine@h,c
  4265  000980  D000               	goto	l3546
  4266  000982                     l3546:
  4267                           
  4268                           ;ST7735_TFT.c: 423: hi = color >> 8; lo = color;
  4269  000982  501B               	movf	drawFastVLine@color+1,w,c
  4270  000984  6E20               	movwf	drawFastVLine@hi,c
  4271  000986  C01A  F021         	movff	drawFastVLine@color,drawFastVLine@lo
  4272                           
  4273                           ;ST7735_TFT.c: 424: setAddrWindow(x, y, x, y + h - 1);
  4274  00098A  C018  F014         	movff	drawFastVLine@y,setAddrWindow@y0
  4275  00098E  C022  F015         	movff	drawFastVLine@x,setAddrWindow@x1
  4276  000992  5018               	movf	drawFastVLine@y,w,c
  4277  000994  2419               	addwf	drawFastVLine@h,w,c
  4278  000996  6E1C               	movwf	??_drawFastVLine& (0+255),c
  4279  000998  041C               	decf	??_drawFastVLine,w,c
  4280  00099A  6E16               	movwf	setAddrWindow@y1,c
  4281  00099C  5022               	movf	drawFastVLine@x,w,c
  4282  00099E  EC49  F006         	call	_setAddrWindow
  4283                           
  4284                           ;ST7735_TFT.c: 425: PORTDbits.RD0 = 1;
  4285  0009A2  8083               	bsf	3971,0,c	;volatile
  4286                           
  4287                           ;ST7735_TFT.c: 426: PORTDbits.RD1 = 0;
  4288  0009A4  9283               	bcf	3971,1,c	;volatile
  4289                           
  4290                           ;ST7735_TFT.c: 428: while (h--) {
  4291  0009A6  D007               	goto	l3558
  4292  0009A8                     l3556:
  4293                           
  4294                           ;ST7735_TFT.c: 429: spiwrite(hi);
  4295  0009A8  5020               	movf	drawFastVLine@hi,w,c
  4296  0009AA  EC6F  F008         	call	_spiwrite
  4297                           
  4298                           ;ST7735_TFT.c: 430: spiwrite(lo);
  4299  0009AE  5021               	movf	drawFastVLine@lo,w,c
  4300  0009B0  EC6F  F008         	call	_spiwrite
  4301  0009B4  D000               	goto	l3558
  4302  0009B6                     l3558:
  4303  0009B6  0619               	decf	drawFastVLine@h,f,c
  4304  0009B8  2819               	incf	drawFastVLine@h,w,c
  4305  0009BA  A4D8               	btfss	status,2,c
  4306  0009BC  D7F5               	goto	l3556
  4307                           
  4308                           ;ST7735_TFT.c: 431: }
  4309                           ;ST7735_TFT.c: 432: PORTDbits.RD1 = 1;
  4310  0009BE  8283               	bsf	3971,1,c	;volatile
  4311  0009C0                     l319:
  4312  0009C0  0012               	return		;funcret
  4313  0009C2                     __end_of_drawFastVLine:
  4314                           	opt stack 0
  4315                           tblptru	equ	0xFF8
  4316                           tblptrh	equ	0xFF7
  4317                           tblptrl	equ	0xFF6
  4318                           tablat	equ	0xFF5
  4319                           prodh	equ	0xFF4
  4320                           prodl	equ	0xFF3
  4321                           intcon	equ	0xFF2
  4322                           intcon2	equ	0xFF1
  4323                           postinc0	equ	0xFEE
  4324                           wreg	equ	0xFE8
  4325                           postdec1	equ	0xFE5
  4326                           fsr1l	equ	0xFE1
  4327                           indf2	equ	0xFDF
  4328                           postinc2	equ	0xFDE
  4329                           postdec2	equ	0xFDD
  4330                           fsr2h	equ	0xFDA
  4331                           fsr2l	equ	0xFD9
  4332                           status	equ	0xFD8
  4333                           
  4334 ;; *************** function _drawPixel *****************
  4335 ;; Defined at:
  4336 ;;		line 407 in file "ST7735_TFT.c"
  4337 ;; Parameters:    Size  Location     Type
  4338 ;;  x               1    wreg     unsigned char 
  4339 ;;  y               1   23[COMRAM] unsigned char 
  4340 ;;  color           2   24[COMRAM] unsigned int 
  4341 ;; Auto vars:     Size  Location     Type
  4342 ;;  x               1   26[COMRAM] unsigned char 
  4343 ;; Return value:  Size  Location     Type
  4344 ;;		None               void
  4345 ;; Registers used:
  4346 ;;		wreg, status,2, status,0, cstack
  4347 ;; Tracked objects:
  4348 ;;		On entry : 0/0
  4349 ;;		On exit  : 0/0
  4350 ;;		Unchanged: 0/0
  4351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4352 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4353 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4354 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4355 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4356 ;;Total ram usage:        4 bytes
  4357 ;; Hardware stack levels used:    1
  4358 ;; Hardware stack levels required when called:    6
  4359 ;; This function calls:
  4360 ;;		_setAddrWindow
  4361 ;;		_write_data
  4362 ;; This function is called by:
  4363 ;;		_drawChar
  4364 ;;		_drawCircle
  4365 ;;		_drawCircleHelper
  4366 ;; This function uses a non-reentrant model
  4367 ;;
  4368                           
  4369                           	psect	text21
  4370  000FA4                     __ptext21:
  4371                           	opt stack 0
  4372  000FA4                     _drawPixel:
  4373                           	opt stack 20
  4374                           
  4375                           ;incstack = 0
  4376                           ;drawPixel@x stored from wreg
  4377  000FA4  6E1B               	movwf	drawPixel@x,c
  4378                           
  4379                           ;ST7735_TFT.c: 409: if((x >= 128) || (y >= 160))
  4380  000FA6  0E80               	movlw	128
  4381  000FA8  601B               	cpfslt	drawPixel@x,c
  4382  000FAA  D013               	goto	l313
  4383  000FAC  0E9F               	movlw	159
  4384  000FAE  6418               	cpfsgt	drawPixel@y,c
  4385  000FB0  D001               	goto	l3584
  4386                           
  4387                           ;ST7735_TFT.c: 410: return;
  4388  000FB2  D00F               	goto	l313
  4389  000FB4                     l3584:
  4390                           
  4391                           ;ST7735_TFT.c: 411: setAddrWindow(x,y,x+1,y+1);
  4392  000FB4  C018  F014         	movff	drawPixel@y,setAddrWindow@y0
  4393  000FB8  281B               	incf	drawPixel@x,w,c
  4394  000FBA  6E15               	movwf	setAddrWindow@x1,c
  4395  000FBC  2818               	incf	drawPixel@y,w,c
  4396  000FBE  6E16               	movwf	setAddrWindow@y1,c
  4397  000FC0  501B               	movf	drawPixel@x,w,c
  4398  000FC2  EC49  F006         	call	_setAddrWindow
  4399                           
  4400                           ;ST7735_TFT.c: 412: write_data(color >> 8);
  4401  000FC6  501A               	movf	drawPixel@color+1,w,c
  4402  000FC8  EC9D  F008         	call	_write_data
  4403                           
  4404                           ;ST7735_TFT.c: 413: write_data(color & 0xFF);
  4405  000FCC  5019               	movf	drawPixel@color,w,c
  4406  000FCE  EC9D  F008         	call	_write_data
  4407  000FD2                     l313:
  4408  000FD2  0012               	return		;funcret
  4409  000FD4                     __end_of_drawPixel:
  4410                           	opt stack 0
  4411                           tblptru	equ	0xFF8
  4412                           tblptrh	equ	0xFF7
  4413                           tblptrl	equ	0xFF6
  4414                           tablat	equ	0xFF5
  4415                           prodh	equ	0xFF4
  4416                           prodl	equ	0xFF3
  4417                           intcon	equ	0xFF2
  4418                           intcon2	equ	0xFF1
  4419                           postinc0	equ	0xFEE
  4420                           wreg	equ	0xFE8
  4421                           postdec1	equ	0xFE5
  4422                           fsr1l	equ	0xFE1
  4423                           indf2	equ	0xFDF
  4424                           postinc2	equ	0xFDE
  4425                           postdec2	equ	0xFDD
  4426                           fsr2h	equ	0xFDA
  4427                           fsr2l	equ	0xFD9
  4428                           status	equ	0xFD8
  4429                           
  4430 ;; *************** function _setAddrWindow *****************
  4431 ;; Defined at:
  4432 ;;		line 392 in file "ST7735_TFT.c"
  4433 ;; Parameters:    Size  Location     Type
  4434 ;;  x0              1    wreg     unsigned char 
  4435 ;;  y0              1   19[COMRAM] unsigned char 
  4436 ;;  x1              1   20[COMRAM] unsigned char 
  4437 ;;  y1              1   21[COMRAM] unsigned char 
  4438 ;; Auto vars:     Size  Location     Type
  4439 ;;  x0              1   22[COMRAM] unsigned char 
  4440 ;; Return value:  Size  Location     Type
  4441 ;;		None               void
  4442 ;; Registers used:
  4443 ;;		wreg, status,2, status,0, cstack
  4444 ;; Tracked objects:
  4445 ;;		On entry : 0/0
  4446 ;;		On exit  : 0/0
  4447 ;;		Unchanged: 0/0
  4448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4449 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4450 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4451 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4452 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4453 ;;Total ram usage:        4 bytes
  4454 ;; Hardware stack levels used:    1
  4455 ;; Hardware stack levels required when called:    5
  4456 ;; This function calls:
  4457 ;;		_write_command
  4458 ;;		_write_data
  4459 ;; This function is called by:
  4460 ;;		_drawPixel
  4461 ;;		_drawFastVLine
  4462 ;;		_fillRectangle
  4463 ;;		_drawFastHLine
  4464 ;; This function uses a non-reentrant model
  4465 ;;
  4466                           
  4467                           	psect	text22
  4468  000C92                     __ptext22:
  4469                           	opt stack 0
  4470  000C92                     _setAddrWindow:
  4471                           	opt stack 21
  4472                           
  4473                           ;incstack = 0
  4474                           ;setAddrWindow@x0 stored from wreg
  4475  000C92  6E17               	movwf	setAddrWindow@x0,c
  4476                           
  4477                           ;ST7735_TFT.c: 394: write_command(0x2A);
  4478  000C94  0E2A               	movlw	42
  4479  000C96  ECA5  F008         	call	_write_command
  4480                           
  4481                           ;ST7735_TFT.c: 395: write_data(0);
  4482  000C9A  0E00               	movlw	0
  4483  000C9C  EC9D  F008         	call	_write_data
  4484                           
  4485                           ;ST7735_TFT.c: 396: write_data(x0 + colstart);
  4486  000CA0  5017               	movf	setAddrWindow@x0,w,c
  4487  000CA2  2455               	addwf	_colstart,w,c
  4488  000CA4  EC9D  F008         	call	_write_data
  4489                           
  4490                           ;ST7735_TFT.c: 397: write_data(0);
  4491  000CA8  0E00               	movlw	0
  4492  000CAA  EC9D  F008         	call	_write_data
  4493                           
  4494                           ;ST7735_TFT.c: 398: write_data(x1 + colstart);
  4495  000CAE  5015               	movf	setAddrWindow@x1,w,c
  4496  000CB0  2455               	addwf	_colstart,w,c
  4497  000CB2  EC9D  F008         	call	_write_data
  4498                           
  4499                           ;ST7735_TFT.c: 399: write_command(0x2B);
  4500  000CB6  0E2B               	movlw	43
  4501  000CB8  ECA5  F008         	call	_write_command
  4502                           
  4503                           ;ST7735_TFT.c: 400: write_data(0);
  4504  000CBC  0E00               	movlw	0
  4505  000CBE  EC9D  F008         	call	_write_data
  4506                           
  4507                           ;ST7735_TFT.c: 401: write_data(y0 + rowstart);
  4508  000CC2  5014               	movf	setAddrWindow@y0,w,c
  4509  000CC4  245E               	addwf	_rowstart,w,c
  4510  000CC6  EC9D  F008         	call	_write_data
  4511                           
  4512                           ;ST7735_TFT.c: 402: write_data(0);
  4513  000CCA  0E00               	movlw	0
  4514  000CCC  EC9D  F008         	call	_write_data
  4515                           
  4516                           ;ST7735_TFT.c: 403: write_data(y1 + rowstart);
  4517  000CD0  5016               	movf	setAddrWindow@y1,w,c
  4518  000CD2  245E               	addwf	_rowstart,w,c
  4519  000CD4  EC9D  F008         	call	_write_data
  4520                           
  4521                           ;ST7735_TFT.c: 404: write_command(0x2C);
  4522  000CD8  0E2C               	movlw	44
  4523  000CDA  ECA5  F008         	call	_write_command
  4524  000CDE  0012               	return		;funcret
  4525  000CE0                     __end_of_setAddrWindow:
  4526                           	opt stack 0
  4527                           tblptru	equ	0xFF8
  4528                           tblptrh	equ	0xFF7
  4529                           tblptrl	equ	0xFF6
  4530                           tablat	equ	0xFF5
  4531                           prodh	equ	0xFF4
  4532                           prodl	equ	0xFF3
  4533                           intcon	equ	0xFF2
  4534                           intcon2	equ	0xFF1
  4535                           postinc0	equ	0xFEE
  4536                           wreg	equ	0xFE8
  4537                           postdec1	equ	0xFE5
  4538                           fsr1l	equ	0xFE1
  4539                           indf2	equ	0xFDF
  4540                           postinc2	equ	0xFDE
  4541                           postdec2	equ	0xFDD
  4542                           fsr2h	equ	0xFDA
  4543                           fsr2l	equ	0xFD9
  4544                           status	equ	0xFD8
  4545                           
  4546 ;; *************** function _TFT_GreenTab_Initialize *****************
  4547 ;; Defined at:
  4548 ;;		line 644 in file "ST7735_TFT.c"
  4549 ;; Parameters:    Size  Location     Type
  4550 ;;		None
  4551 ;; Auto vars:     Size  Location     Type
  4552 ;;		None
  4553 ;; Return value:  Size  Location     Type
  4554 ;;		None               void
  4555 ;; Registers used:
  4556 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4557 ;; Tracked objects:
  4558 ;;		On entry : 0/0
  4559 ;;		On exit  : 0/0
  4560 ;;		Unchanged: 0/0
  4561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4562 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4563 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4564 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4565 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4566 ;;Total ram usage:        0 bytes
  4567 ;; Hardware stack levels used:    1
  4568 ;; Hardware stack levels required when called:    6
  4569 ;; This function calls:
  4570 ;;		_Rcmd1
  4571 ;;		_Rcmd2red
  4572 ;;		_Rcmd3
  4573 ;;		_write_command
  4574 ;;		_write_data
  4575 ;; This function is called by:
  4576 ;;		_Initialize_Screen
  4577 ;; This function uses a non-reentrant model
  4578 ;;
  4579                           
  4580                           	psect	text23
  4581  000FD4                     __ptext23:
  4582                           	opt stack 0
  4583  000FD4                     _TFT_GreenTab_Initialize:
  4584                           	opt stack 22
  4585                           
  4586                           ;ST7735_TFT.c: 646: PORTDbits.RD1 = 1;
  4587                           
  4588                           ;incstack = 0
  4589  000FD4  8283               	bsf	3971,1,c	;volatile
  4590                           
  4591                           ;ST7735_TFT.c: 647: PORTDbits.RD0 = 0;
  4592  000FD6  9083               	bcf	3971,0,c	;volatile
  4593                           
  4594                           ;ST7735_TFT.c: 649: SSPSTAT=0x80;
  4595  000FD8  0E80               	movlw	128
  4596  000FDA  6EC7               	movwf	4039,c	;volatile
  4597                           
  4598                           ;ST7735_TFT.c: 650: SSPCON1=0x30;
  4599  000FDC  0E30               	movlw	48
  4600  000FDE  6EC6               	movwf	4038,c	;volatile
  4601                           
  4602                           ;ST7735_TFT.c: 653: Rcmd1();
  4603  000FE0  EC94  F002         	call	_Rcmd1	;wreg free
  4604                           
  4605                           ;ST7735_TFT.c: 654: Rcmd2red();
  4606  000FE4  EC45  F007         	call	_Rcmd2red	;wreg free
  4607                           
  4608                           ;ST7735_TFT.c: 655: Rcmd3();
  4609  000FE8  EC1C  F003         	call	_Rcmd3	;wreg free
  4610                           
  4611                           ;ST7735_TFT.c: 656: write_command(0x36);
  4612  000FEC  0E36               	movlw	54
  4613  000FEE  ECA5  F008         	call	_write_command
  4614                           
  4615                           ;ST7735_TFT.c: 657: write_data(0xC0);
  4616  000FF2  0EC0               	movlw	192
  4617  000FF4  EC9D  F008         	call	_write_data
  4618                           
  4619                           ;ST7735_TFT.c: 658: _tft_type = 1;
  4620  000FF8  0E01               	movlw	1
  4621  000FFA  6E4F               	movwf	__tft_type,c
  4622  000FFC  0012               	return		;funcret
  4623  000FFE                     __end_of_TFT_GreenTab_Initialize:
  4624                           	opt stack 0
  4625                           tblptru	equ	0xFF8
  4626                           tblptrh	equ	0xFF7
  4627                           tblptrl	equ	0xFF6
  4628                           tablat	equ	0xFF5
  4629                           prodh	equ	0xFF4
  4630                           prodl	equ	0xFF3
  4631                           intcon	equ	0xFF2
  4632                           intcon2	equ	0xFF1
  4633                           postinc0	equ	0xFEE
  4634                           wreg	equ	0xFE8
  4635                           postdec1	equ	0xFE5
  4636                           fsr1l	equ	0xFE1
  4637                           indf2	equ	0xFDF
  4638                           postinc2	equ	0xFDE
  4639                           postdec2	equ	0xFDD
  4640                           fsr2h	equ	0xFDA
  4641                           fsr2l	equ	0xFD9
  4642                           status	equ	0xFD8
  4643                           
  4644 ;; *************** function _Rcmd3 *****************
  4645 ;; Defined at:
  4646 ;;		line 338 in file "ST7735_TFT.c"
  4647 ;; Parameters:    Size  Location     Type
  4648 ;;		None
  4649 ;; Auto vars:     Size  Location     Type
  4650 ;;		None
  4651 ;; Return value:  Size  Location     Type
  4652 ;;		None               void
  4653 ;; Registers used:
  4654 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4655 ;; Tracked objects:
  4656 ;;		On entry : 0/0
  4657 ;;		On exit  : 0/0
  4658 ;;		Unchanged: 0/0
  4659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4660 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4661 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4662 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4663 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4664 ;;Total ram usage:        0 bytes
  4665 ;; Hardware stack levels used:    1
  4666 ;; Hardware stack levels required when called:    5
  4667 ;; This function calls:
  4668 ;;		_delay_ms
  4669 ;;		_write_command
  4670 ;;		_write_data
  4671 ;; This function is called by:
  4672 ;;		_TFT_GreenTab_Initialize
  4673 ;;		_TFT_BlackTab_Initialize
  4674 ;; This function uses a non-reentrant model
  4675 ;;
  4676                           
  4677                           	psect	text24
  4678  000638                     __ptext24:
  4679                           	opt stack 0
  4680  000638                     _Rcmd3:
  4681                           	opt stack 22
  4682                           
  4683                           ;ST7735_TFT.c: 340: write_command(0xE0);
  4684                           
  4685                           ;incstack = 0
  4686  000638  0EE0               	movlw	224
  4687  00063A  ECA5  F008         	call	_write_command
  4688                           
  4689                           ;ST7735_TFT.c: 341: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
  4690  00063E  0E02               	movlw	2
  4691  000640  EC9D  F008         	call	_write_data
  4692  000644  0E1C               	movlw	28
  4693  000646  EC9D  F008         	call	_write_data
  4694  00064A  0E07               	movlw	7
  4695  00064C  EC9D  F008         	call	_write_data
  4696  000650  0E12               	movlw	18
  4697  000652  EC9D  F008         	call	_write_data
  4698                           
  4699                           ;ST7735_TFT.c: 342: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
  4700  000656  0E37               	movlw	55
  4701  000658  EC9D  F008         	call	_write_data
  4702  00065C  0E32               	movlw	50
  4703  00065E  EC9D  F008         	call	_write_data
  4704  000662  0E29               	movlw	41
  4705  000664  EC9D  F008         	call	_write_data
  4706  000668  0E2D               	movlw	45
  4707  00066A  EC9D  F008         	call	_write_data
  4708                           
  4709                           ;ST7735_TFT.c: 343: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
  4710  00066E  0E29               	movlw	41
  4711  000670  EC9D  F008         	call	_write_data
  4712  000674  0E25               	movlw	37
  4713  000676  EC9D  F008         	call	_write_data
  4714  00067A  0E2B               	movlw	43
  4715  00067C  EC9D  F008         	call	_write_data
  4716  000680  0E39               	movlw	57
  4717  000682  EC9D  F008         	call	_write_data
  4718                           
  4719                           ;ST7735_TFT.c: 344: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
  4720  000686  0E00               	movlw	0
  4721  000688  EC9D  F008         	call	_write_data
  4722  00068C  0E01               	movlw	1
  4723  00068E  EC9D  F008         	call	_write_data
  4724  000692  0E03               	movlw	3
  4725  000694  EC9D  F008         	call	_write_data
  4726  000698  0E10               	movlw	16
  4727  00069A  EC9D  F008         	call	_write_data
  4728                           
  4729                           ;ST7735_TFT.c: 345: write_command(0xE1);
  4730  00069E  0EE1               	movlw	225
  4731  0006A0  ECA5  F008         	call	_write_command
  4732                           
  4733                           ;ST7735_TFT.c: 346: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
  4734  0006A4  0E03               	movlw	3
  4735  0006A6  EC9D  F008         	call	_write_data
  4736  0006AA  0E1D               	movlw	29
  4737  0006AC  EC9D  F008         	call	_write_data
  4738  0006B0  0E07               	movlw	7
  4739  0006B2  EC9D  F008         	call	_write_data
  4740  0006B6  0E06               	movlw	6
  4741  0006B8  EC9D  F008         	call	_write_data
  4742                           
  4743                           ;ST7735_TFT.c: 347: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
  4744  0006BC  0E2E               	movlw	46
  4745  0006BE  EC9D  F008         	call	_write_data
  4746  0006C2  0E2C               	movlw	44
  4747  0006C4  EC9D  F008         	call	_write_data
  4748  0006C8  0E29               	movlw	41
  4749  0006CA  EC9D  F008         	call	_write_data
  4750  0006CE  0E2D               	movlw	45
  4751  0006D0  EC9D  F008         	call	_write_data
  4752                           
  4753                           ;ST7735_TFT.c: 348: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
  4754  0006D4  0E2E               	movlw	46
  4755  0006D6  EC9D  F008         	call	_write_data
  4756  0006DA  0E2E               	movlw	46
  4757  0006DC  EC9D  F008         	call	_write_data
  4758  0006E0  0E37               	movlw	55
  4759  0006E2  EC9D  F008         	call	_write_data
  4760  0006E6  0E3F               	movlw	63
  4761  0006E8  EC9D  F008         	call	_write_data
  4762                           
  4763                           ;ST7735_TFT.c: 349: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
  4764  0006EC  0E00               	movlw	0
  4765  0006EE  EC9D  F008         	call	_write_data
  4766  0006F2  0E00               	movlw	0
  4767  0006F4  EC9D  F008         	call	_write_data
  4768  0006F8  0E02               	movlw	2
  4769  0006FA  EC9D  F008         	call	_write_data
  4770  0006FE  0E10               	movlw	16
  4771  000700  EC9D  F008         	call	_write_data
  4772                           
  4773                           ;ST7735_TFT.c: 350: write_command(0x13);
  4774  000704  0E13               	movlw	19
  4775  000706  ECA5  F008         	call	_write_command
  4776                           
  4777                           ;ST7735_TFT.c: 351: delay_ms(10);
  4778  00070A  0E00               	movlw	0
  4779  00070C  6E18               	movwf	delay_ms@ms+1,c
  4780  00070E  0E0A               	movlw	10
  4781  000710  6E17               	movwf	delay_ms@ms,c
  4782  000712  EC20  F006         	call	_delay_ms	;wreg free
  4783                           
  4784                           ;ST7735_TFT.c: 352: write_command(0x29);
  4785  000716  0E29               	movlw	41
  4786  000718  ECA5  F008         	call	_write_command
  4787                           
  4788                           ;ST7735_TFT.c: 353: delay_ms(100);
  4789  00071C  0E00               	movlw	0
  4790  00071E  6E18               	movwf	delay_ms@ms+1,c
  4791  000720  0E64               	movlw	100
  4792  000722  6E17               	movwf	delay_ms@ms,c
  4793  000724  EC20  F006         	call	_delay_ms	;wreg free
  4794  000728  0012               	return		;funcret
  4795  00072A                     __end_of_Rcmd3:
  4796                           	opt stack 0
  4797                           tblptru	equ	0xFF8
  4798                           tblptrh	equ	0xFF7
  4799                           tblptrl	equ	0xFF6
  4800                           tablat	equ	0xFF5
  4801                           prodh	equ	0xFF4
  4802                           prodl	equ	0xFF3
  4803                           intcon	equ	0xFF2
  4804                           intcon2	equ	0xFF1
  4805                           postinc0	equ	0xFEE
  4806                           wreg	equ	0xFE8
  4807                           postdec1	equ	0xFE5
  4808                           fsr1l	equ	0xFE1
  4809                           indf2	equ	0xFDF
  4810                           postinc2	equ	0xFDE
  4811                           postdec2	equ	0xFDD
  4812                           fsr2h	equ	0xFDA
  4813                           fsr2l	equ	0xFD9
  4814                           status	equ	0xFD8
  4815                           
  4816 ;; *************** function _Rcmd2red *****************
  4817 ;; Defined at:
  4818 ;;		line 328 in file "ST7735_TFT.c"
  4819 ;; Parameters:    Size  Location     Type
  4820 ;;		None
  4821 ;; Auto vars:     Size  Location     Type
  4822 ;;		None
  4823 ;; Return value:  Size  Location     Type
  4824 ;;		None               void
  4825 ;; Registers used:
  4826 ;;		wreg, status,2, cstack
  4827 ;; Tracked objects:
  4828 ;;		On entry : 0/0
  4829 ;;		On exit  : 0/0
  4830 ;;		Unchanged: 0/0
  4831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4832 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4833 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4834 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4835 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4836 ;;Total ram usage:        0 bytes
  4837 ;; Hardware stack levels used:    1
  4838 ;; Hardware stack levels required when called:    5
  4839 ;; This function calls:
  4840 ;;		_write_command
  4841 ;;		_write_data
  4842 ;; This function is called by:
  4843 ;;		_TFT_GreenTab_Initialize
  4844 ;; This function uses a non-reentrant model
  4845 ;;
  4846                           
  4847                           	psect	text25
  4848  000E8A                     __ptext25:
  4849                           	opt stack 0
  4850  000E8A                     _Rcmd2red:
  4851                           	opt stack 22
  4852                           
  4853                           ;ST7735_TFT.c: 330: write_command(0x2A);
  4854                           
  4855                           ;incstack = 0
  4856  000E8A  0E2A               	movlw	42
  4857  000E8C  ECA5  F008         	call	_write_command
  4858                           
  4859                           ;ST7735_TFT.c: 331: write_data(0x00); write_data(0x00);
  4860  000E90  0E00               	movlw	0
  4861  000E92  EC9D  F008         	call	_write_data
  4862  000E96  0E00               	movlw	0
  4863  000E98  EC9D  F008         	call	_write_data
  4864                           
  4865                           ;ST7735_TFT.c: 332: write_data(0x00); write_data(0x7F);
  4866  000E9C  0E00               	movlw	0
  4867  000E9E  EC9D  F008         	call	_write_data
  4868  000EA2  0E7F               	movlw	127
  4869  000EA4  EC9D  F008         	call	_write_data
  4870                           
  4871                           ;ST7735_TFT.c: 333: write_command(0x2B);
  4872  000EA8  0E2B               	movlw	43
  4873  000EAA  ECA5  F008         	call	_write_command
  4874                           
  4875                           ;ST7735_TFT.c: 334: write_data(0x00); write_data(0x00);
  4876  000EAE  0E00               	movlw	0
  4877  000EB0  EC9D  F008         	call	_write_data
  4878  000EB4  0E00               	movlw	0
  4879  000EB6  EC9D  F008         	call	_write_data
  4880                           
  4881                           ;ST7735_TFT.c: 335: write_data(0x00); write_data(0x9F);
  4882  000EBA  0E00               	movlw	0
  4883  000EBC  EC9D  F008         	call	_write_data
  4884  000EC0  0E9F               	movlw	159
  4885  000EC2  EC9D  F008         	call	_write_data
  4886  000EC6  0012               	return		;funcret
  4887  000EC8                     __end_of_Rcmd2red:
  4888                           	opt stack 0
  4889                           tblptru	equ	0xFF8
  4890                           tblptrh	equ	0xFF7
  4891                           tblptrl	equ	0xFF6
  4892                           tablat	equ	0xFF5
  4893                           prodh	equ	0xFF4
  4894                           prodl	equ	0xFF3
  4895                           intcon	equ	0xFF2
  4896                           intcon2	equ	0xFF1
  4897                           postinc0	equ	0xFEE
  4898                           wreg	equ	0xFE8
  4899                           postdec1	equ	0xFE5
  4900                           fsr1l	equ	0xFE1
  4901                           indf2	equ	0xFDF
  4902                           postinc2	equ	0xFDE
  4903                           postdec2	equ	0xFDD
  4904                           fsr2h	equ	0xFDA
  4905                           fsr2l	equ	0xFD9
  4906                           status	equ	0xFD8
  4907                           
  4908 ;; *************** function _Rcmd1 *****************
  4909 ;; Defined at:
  4910 ;;		line 281 in file "ST7735_TFT.c"
  4911 ;; Parameters:    Size  Location     Type
  4912 ;;		None
  4913 ;; Auto vars:     Size  Location     Type
  4914 ;;		None
  4915 ;; Return value:  Size  Location     Type
  4916 ;;		None               void
  4917 ;; Registers used:
  4918 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4919 ;; Tracked objects:
  4920 ;;		On entry : 0/0
  4921 ;;		On exit  : 0/0
  4922 ;;		Unchanged: 0/0
  4923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4924 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4925 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4926 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4927 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4928 ;;Total ram usage:        0 bytes
  4929 ;; Hardware stack levels used:    1
  4930 ;; Hardware stack levels required when called:    5
  4931 ;; This function calls:
  4932 ;;		_delay_ms
  4933 ;;		_write_command
  4934 ;;		_write_data
  4935 ;; This function is called by:
  4936 ;;		_TFT_GreenTab_Initialize
  4937 ;;		_TFT_BlackTab_Initialize
  4938 ;; This function uses a non-reentrant model
  4939 ;;
  4940                           
  4941                           	psect	text26
  4942  000528                     __ptext26:
  4943                           	opt stack 0
  4944  000528                     _Rcmd1:
  4945                           	opt stack 22
  4946                           
  4947                           ;ST7735_TFT.c: 283: write_command(0x01);
  4948                           
  4949                           ;incstack = 0
  4950  000528  0E01               	movlw	1
  4951  00052A  ECA5  F008         	call	_write_command
  4952                           
  4953                           ;ST7735_TFT.c: 284: delay_ms(150);
  4954  00052E  0E00               	movlw	0
  4955  000530  6E18               	movwf	delay_ms@ms+1,c
  4956  000532  0E96               	movlw	150
  4957  000534  6E17               	movwf	delay_ms@ms,c
  4958  000536  EC20  F006         	call	_delay_ms	;wreg free
  4959                           
  4960                           ;ST7735_TFT.c: 285: write_command(0x11);
  4961  00053A  0E11               	movlw	17
  4962  00053C  ECA5  F008         	call	_write_command
  4963                           
  4964                           ;ST7735_TFT.c: 286: delay_ms(500);
  4965  000540  0E01               	movlw	1
  4966  000542  6E18               	movwf	delay_ms@ms+1,c
  4967  000544  0EF4               	movlw	244
  4968  000546  6E17               	movwf	delay_ms@ms,c
  4969  000548  EC20  F006         	call	_delay_ms	;wreg free
  4970                           
  4971                           ;ST7735_TFT.c: 287: write_command(0xB1);
  4972  00054C  0EB1               	movlw	177
  4973  00054E  ECA5  F008         	call	_write_command
  4974                           
  4975                           ;ST7735_TFT.c: 288: write_data(0x01);
  4976  000552  0E01               	movlw	1
  4977  000554  EC9D  F008         	call	_write_data
  4978                           
  4979                           ;ST7735_TFT.c: 289: write_data(0x2C);
  4980  000558  0E2C               	movlw	44
  4981  00055A  EC9D  F008         	call	_write_data
  4982                           
  4983                           ;ST7735_TFT.c: 290: write_data(0x2D);
  4984  00055E  0E2D               	movlw	45
  4985  000560  EC9D  F008         	call	_write_data
  4986                           
  4987                           ;ST7735_TFT.c: 291: write_command(0xB2);
  4988  000564  0EB2               	movlw	178
  4989  000566  ECA5  F008         	call	_write_command
  4990                           
  4991                           ;ST7735_TFT.c: 292: write_data(0x01);
  4992  00056A  0E01               	movlw	1
  4993  00056C  EC9D  F008         	call	_write_data
  4994                           
  4995                           ;ST7735_TFT.c: 293: write_data(0x2C);
  4996  000570  0E2C               	movlw	44
  4997  000572  EC9D  F008         	call	_write_data
  4998                           
  4999                           ;ST7735_TFT.c: 294: write_data(0x2D);
  5000  000576  0E2D               	movlw	45
  5001  000578  EC9D  F008         	call	_write_data
  5002                           
  5003                           ;ST7735_TFT.c: 295: write_command(0xB3);
  5004  00057C  0EB3               	movlw	179
  5005  00057E  ECA5  F008         	call	_write_command
  5006                           
  5007                           ;ST7735_TFT.c: 296: write_data(0x01);
  5008  000582  0E01               	movlw	1
  5009  000584  EC9D  F008         	call	_write_data
  5010                           
  5011                           ;ST7735_TFT.c: 297: write_data(0x2C);
  5012  000588  0E2C               	movlw	44
  5013  00058A  EC9D  F008         	call	_write_data
  5014                           
  5015                           ;ST7735_TFT.c: 298: write_data(0x2D);
  5016  00058E  0E2D               	movlw	45
  5017  000590  EC9D  F008         	call	_write_data
  5018                           
  5019                           ;ST7735_TFT.c: 299: write_data(0x01);
  5020  000594  0E01               	movlw	1
  5021  000596  EC9D  F008         	call	_write_data
  5022                           
  5023                           ;ST7735_TFT.c: 300: write_data(0x2C);
  5024  00059A  0E2C               	movlw	44
  5025  00059C  EC9D  F008         	call	_write_data
  5026                           
  5027                           ;ST7735_TFT.c: 301: write_data(0x2D);
  5028  0005A0  0E2D               	movlw	45
  5029  0005A2  EC9D  F008         	call	_write_data
  5030                           
  5031                           ;ST7735_TFT.c: 302: write_command(0xB4);
  5032  0005A6  0EB4               	movlw	180
  5033  0005A8  ECA5  F008         	call	_write_command
  5034                           
  5035                           ;ST7735_TFT.c: 303: write_data(0x07);
  5036  0005AC  0E07               	movlw	7
  5037  0005AE  EC9D  F008         	call	_write_data
  5038                           
  5039                           ;ST7735_TFT.c: 304: write_command(0xC0);
  5040  0005B2  0EC0               	movlw	192
  5041  0005B4  ECA5  F008         	call	_write_command
  5042                           
  5043                           ;ST7735_TFT.c: 305: write_data(0xA2);
  5044  0005B8  0EA2               	movlw	162
  5045  0005BA  EC9D  F008         	call	_write_data
  5046                           
  5047                           ;ST7735_TFT.c: 306: write_data(0x02);
  5048  0005BE  0E02               	movlw	2
  5049  0005C0  EC9D  F008         	call	_write_data
  5050                           
  5051                           ;ST7735_TFT.c: 307: write_data(0x84);
  5052  0005C4  0E84               	movlw	132
  5053  0005C6  EC9D  F008         	call	_write_data
  5054                           
  5055                           ;ST7735_TFT.c: 308: write_command(0xC1);
  5056  0005CA  0EC1               	movlw	193
  5057  0005CC  ECA5  F008         	call	_write_command
  5058                           
  5059                           ;ST7735_TFT.c: 309: write_data(0xC5);
  5060  0005D0  0EC5               	movlw	197
  5061  0005D2  EC9D  F008         	call	_write_data
  5062                           
  5063                           ;ST7735_TFT.c: 310: write_command(0xC2);
  5064  0005D6  0EC2               	movlw	194
  5065  0005D8  ECA5  F008         	call	_write_command
  5066                           
  5067                           ;ST7735_TFT.c: 311: write_data(0x0A);
  5068  0005DC  0E0A               	movlw	10
  5069  0005DE  EC9D  F008         	call	_write_data
  5070                           
  5071                           ;ST7735_TFT.c: 312: write_data(0x00);
  5072  0005E2  0E00               	movlw	0
  5073  0005E4  EC9D  F008         	call	_write_data
  5074                           
  5075                           ;ST7735_TFT.c: 313: write_command(0xC3);
  5076  0005E8  0EC3               	movlw	195
  5077  0005EA  ECA5  F008         	call	_write_command
  5078                           
  5079                           ;ST7735_TFT.c: 314: write_data(0x8A);
  5080  0005EE  0E8A               	movlw	138
  5081  0005F0  EC9D  F008         	call	_write_data
  5082                           
  5083                           ;ST7735_TFT.c: 315: write_data(0x2A);
  5084  0005F4  0E2A               	movlw	42
  5085  0005F6  EC9D  F008         	call	_write_data
  5086                           
  5087                           ;ST7735_TFT.c: 316: write_command(0xC4);
  5088  0005FA  0EC4               	movlw	196
  5089  0005FC  ECA5  F008         	call	_write_command
  5090                           
  5091                           ;ST7735_TFT.c: 317: write_data(0x8A);
  5092  000600  0E8A               	movlw	138
  5093  000602  EC9D  F008         	call	_write_data
  5094                           
  5095                           ;ST7735_TFT.c: 318: write_data(0xEE);
  5096  000606  0EEE               	movlw	238
  5097  000608  EC9D  F008         	call	_write_data
  5098                           
  5099                           ;ST7735_TFT.c: 319: write_command(0xC5);
  5100  00060C  0EC5               	movlw	197
  5101  00060E  ECA5  F008         	call	_write_command
  5102                           
  5103                           ;ST7735_TFT.c: 320: write_data(0x0E);
  5104  000612  0E0E               	movlw	14
  5105  000614  EC9D  F008         	call	_write_data
  5106                           
  5107                           ;ST7735_TFT.c: 321: write_command(0x20);
  5108  000618  0E20               	movlw	32
  5109  00061A  ECA5  F008         	call	_write_command
  5110                           
  5111                           ;ST7735_TFT.c: 322: write_command(0x36);
  5112  00061E  0E36               	movlw	54
  5113  000620  ECA5  F008         	call	_write_command
  5114                           
  5115                           ;ST7735_TFT.c: 323: write_data(0xC8);
  5116  000624  0EC8               	movlw	200
  5117  000626  EC9D  F008         	call	_write_data
  5118                           
  5119                           ;ST7735_TFT.c: 324: write_command(0x3A);
  5120  00062A  0E3A               	movlw	58
  5121  00062C  ECA5  F008         	call	_write_command
  5122                           
  5123                           ;ST7735_TFT.c: 325: write_data(0x05);
  5124  000630  0E05               	movlw	5
  5125  000632  EC9D  F008         	call	_write_data
  5126  000636  0012               	return		;funcret
  5127  000638                     __end_of_Rcmd1:
  5128                           	opt stack 0
  5129                           tblptru	equ	0xFF8
  5130                           tblptrh	equ	0xFF7
  5131                           tblptrl	equ	0xFF6
  5132                           tablat	equ	0xFF5
  5133                           prodh	equ	0xFF4
  5134                           prodl	equ	0xFF3
  5135                           intcon	equ	0xFF2
  5136                           intcon2	equ	0xFF1
  5137                           postinc0	equ	0xFEE
  5138                           wreg	equ	0xFE8
  5139                           postdec1	equ	0xFE5
  5140                           fsr1l	equ	0xFE1
  5141                           indf2	equ	0xFDF
  5142                           postinc2	equ	0xFDE
  5143                           postdec2	equ	0xFDD
  5144                           fsr2h	equ	0xFDA
  5145                           fsr2l	equ	0xFD9
  5146                           status	equ	0xFD8
  5147                           
  5148 ;; *************** function _write_data *****************
  5149 ;; Defined at:
  5150 ;;		line 209 in file "ST7735_TFT.c"
  5151 ;; Parameters:    Size  Location     Type
  5152 ;;  data_           1    wreg     unsigned char 
  5153 ;; Auto vars:     Size  Location     Type
  5154 ;;  data_           1   18[COMRAM] unsigned char 
  5155 ;; Return value:  Size  Location     Type
  5156 ;;		None               void
  5157 ;; Registers used:
  5158 ;;		wreg, status,2, cstack
  5159 ;; Tracked objects:
  5160 ;;		On entry : 0/0
  5161 ;;		On exit  : 0/0
  5162 ;;		Unchanged: 0/0
  5163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5164 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5165 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5166 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5167 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5168 ;;Total ram usage:        1 bytes
  5169 ;; Hardware stack levels used:    1
  5170 ;; Hardware stack levels required when called:    4
  5171 ;; This function calls:
  5172 ;;		_spiwrite
  5173 ;; This function is called by:
  5174 ;;		_Rcmd1
  5175 ;;		_Rcmd2red
  5176 ;;		_Rcmd3
  5177 ;;		_setAddrWindow
  5178 ;;		_drawPixel
  5179 ;;		_TFT_GreenTab_Initialize
  5180 ;;		_Bcmd
  5181 ;;		_setScrollDefinition
  5182 ;;		_Rcmd2green
  5183 ;;		_VerticalScroll
  5184 ;; This function uses a non-reentrant model
  5185 ;;
  5186                           
  5187                           	psect	text27
  5188  00113A                     __ptext27:
  5189                           	opt stack 0
  5190  00113A                     _write_data:
  5191                           	opt stack 21
  5192                           
  5193                           ;incstack = 0
  5194                           ;write_data@data_ stored from wreg
  5195  00113A  6E13               	movwf	write_data@data_,c
  5196                           
  5197                           ;ST7735_TFT.c: 211: PORTDbits.RD1 = 0;
  5198  00113C  9283               	bcf	3971,1,c	;volatile
  5199                           
  5200                           ;ST7735_TFT.c: 212: PORTDbits.RD0 = 1;
  5201  00113E  8083               	bsf	3971,0,c	;volatile
  5202                           
  5203                           ;ST7735_TFT.c: 213: spiwrite(data_);
  5204  001140  5013               	movf	write_data@data_,w,c
  5205  001142  EC6F  F008         	call	_spiwrite
  5206                           
  5207                           ;ST7735_TFT.c: 214: PORTDbits.RD1 = 1;
  5208  001146  8283               	bsf	3971,1,c	;volatile
  5209  001148  0012               	return		;funcret
  5210  00114A                     __end_of_write_data:
  5211                           	opt stack 0
  5212                           tblptru	equ	0xFF8
  5213                           tblptrh	equ	0xFF7
  5214                           tblptrl	equ	0xFF6
  5215                           tablat	equ	0xFF5
  5216                           prodh	equ	0xFF4
  5217                           prodl	equ	0xFF3
  5218                           intcon	equ	0xFF2
  5219                           intcon2	equ	0xFF1
  5220                           postinc0	equ	0xFEE
  5221                           wreg	equ	0xFE8
  5222                           postdec1	equ	0xFE5
  5223                           fsr1l	equ	0xFE1
  5224                           indf2	equ	0xFDF
  5225                           postinc2	equ	0xFDE
  5226                           postdec2	equ	0xFDD
  5227                           fsr2h	equ	0xFDA
  5228                           fsr2l	equ	0xFD9
  5229                           status	equ	0xFD8
  5230                           
  5231 ;; *************** function _write_command *****************
  5232 ;; Defined at:
  5233 ;;		line 198 in file "ST7735_TFT.c"
  5234 ;; Parameters:    Size  Location     Type
  5235 ;;  cmd_            1    wreg     unsigned char 
  5236 ;; Auto vars:     Size  Location     Type
  5237 ;;  cmd_            1   18[COMRAM] unsigned char 
  5238 ;; Return value:  Size  Location     Type
  5239 ;;		None               void
  5240 ;; Registers used:
  5241 ;;		wreg, status,2, cstack
  5242 ;; Tracked objects:
  5243 ;;		On entry : 0/0
  5244 ;;		On exit  : 0/0
  5245 ;;		Unchanged: 0/0
  5246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5247 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5248 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5249 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5250 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5251 ;;Total ram usage:        1 bytes
  5252 ;; Hardware stack levels used:    1
  5253 ;; Hardware stack levels required when called:    4
  5254 ;; This function calls:
  5255 ;;		_spiwrite
  5256 ;; This function is called by:
  5257 ;;		_Rcmd1
  5258 ;;		_Rcmd2red
  5259 ;;		_Rcmd3
  5260 ;;		_setAddrWindow
  5261 ;;		_TFT_GreenTab_Initialize
  5262 ;;		_Bcmd
  5263 ;;		_setScrollDefinition
  5264 ;;		_Rcmd2green
  5265 ;;		_VerticalScroll
  5266 ;; This function uses a non-reentrant model
  5267 ;;
  5268                           
  5269                           	psect	text28
  5270  00114A                     __ptext28:
  5271                           	opt stack 0
  5272  00114A                     _write_command:
  5273                           	opt stack 21
  5274                           
  5275                           ;incstack = 0
  5276                           ;write_command@cmd_ stored from wreg
  5277  00114A  6E13               	movwf	write_command@cmd_,c
  5278                           
  5279                           ;ST7735_TFT.c: 200: PORTDbits.RD1 = 0;
  5280  00114C  9283               	bcf	3971,1,c	;volatile
  5281                           
  5282                           ;ST7735_TFT.c: 202: PORTDbits.RD0 = 0;
  5283  00114E  9083               	bcf	3971,0,c	;volatile
  5284                           
  5285                           ;ST7735_TFT.c: 203: spiwrite(cmd_);
  5286  001150  5013               	movf	write_command@cmd_,w,c
  5287  001152  EC6F  F008         	call	_spiwrite
  5288                           
  5289                           ;ST7735_TFT.c: 205: PORTDbits.RD1 = 1;
  5290  001156  8283               	bsf	3971,1,c	;volatile
  5291  001158  0012               	return		;funcret
  5292  00115A                     __end_of_write_command:
  5293                           	opt stack 0
  5294                           tblptru	equ	0xFF8
  5295                           tblptrh	equ	0xFF7
  5296                           tblptrl	equ	0xFF6
  5297                           tablat	equ	0xFF5
  5298                           prodh	equ	0xFF4
  5299                           prodl	equ	0xFF3
  5300                           intcon	equ	0xFF2
  5301                           intcon2	equ	0xFF1
  5302                           postinc0	equ	0xFEE
  5303                           wreg	equ	0xFE8
  5304                           postdec1	equ	0xFE5
  5305                           fsr1l	equ	0xFE1
  5306                           indf2	equ	0xFDF
  5307                           postinc2	equ	0xFDE
  5308                           postdec2	equ	0xFDD
  5309                           fsr2h	equ	0xFDA
  5310                           fsr2l	equ	0xFD9
  5311                           status	equ	0xFD8
  5312                           
  5313 ;; *************** function _spiwrite *****************
  5314 ;; Defined at:
  5315 ;;		line 189 in file "ST7735_TFT.c"
  5316 ;; Parameters:    Size  Location     Type
  5317 ;;  spidata         1    wreg     unsigned char 
  5318 ;; Auto vars:     Size  Location     Type
  5319 ;;  spidata         1   17[COMRAM] unsigned char 
  5320 ;;  x               1   16[COMRAM] unsigned char 
  5321 ;; Return value:  Size  Location     Type
  5322 ;;		None               void
  5323 ;; Registers used:
  5324 ;;		wreg
  5325 ;; Tracked objects:
  5326 ;;		On entry : 0/0
  5327 ;;		On exit  : 0/0
  5328 ;;		Unchanged: 0/0
  5329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5330 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5331 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5332 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5333 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5334 ;;Total ram usage:        2 bytes
  5335 ;; Hardware stack levels used:    1
  5336 ;; Hardware stack levels required when called:    3
  5337 ;; This function calls:
  5338 ;;		Nothing
  5339 ;; This function is called by:
  5340 ;;		_write_command
  5341 ;;		_write_data
  5342 ;;		_drawFastVLine
  5343 ;;		_fillRectangle
  5344 ;;		_drawFastHLine
  5345 ;; This function uses a non-reentrant model
  5346 ;;
  5347                           
  5348                           	psect	text29
  5349  0010DE                     __ptext29:
  5350                           	opt stack 0
  5351  0010DE                     _spiwrite:
  5352                           	opt stack 23
  5353                           
  5354                           ;incstack = 0
  5355                           ;spiwrite@spidata stored from wreg
  5356  0010DE  6E12               	movwf	spiwrite@spidata,c
  5357                           
  5358                           ;ST7735_TFT.c: 191: char x;
  5359                           ;ST7735_TFT.c: 192: PIR1bits.SSPIF = 0;
  5360  0010E0  969E               	bcf	3998,3,c	;volatile
  5361                           
  5362                           ;ST7735_TFT.c: 193: x = SSPBUF;
  5363  0010E2  CFC9 F011          	movff	4041,spiwrite@x	;volatile
  5364                           
  5365                           ;ST7735_TFT.c: 194: SSPBUF = spidata;
  5366  0010E6  C012  FFC9         	movff	spiwrite@spidata,4041	;volatile
  5367                           
  5368                           ;ST7735_TFT.c: 195: while (!SSPSTATbits.BF);
  5369  0010EA  D000               	goto	l269
  5370  0010EC                     l269:
  5371  0010EC  A0C7               	btfss	4039,0,c	;volatile
  5372  0010EE  D7FE               	goto	l269
  5373  0010F0  0012               	return		;funcret
  5374  0010F2                     __end_of_spiwrite:
  5375                           	opt stack 0
  5376                           tblptru	equ	0xFF8
  5377                           tblptrh	equ	0xFF7
  5378                           tblptrl	equ	0xFF6
  5379                           tablat	equ	0xFF5
  5380                           prodh	equ	0xFF4
  5381                           prodl	equ	0xFF3
  5382                           intcon	equ	0xFF2
  5383                           intcon2	equ	0xFF1
  5384                           postinc0	equ	0xFEE
  5385                           wreg	equ	0xFE8
  5386                           postdec1	equ	0xFE5
  5387                           fsr1l	equ	0xFE1
  5388                           indf2	equ	0xFDF
  5389                           postinc2	equ	0xFDE
  5390                           postdec2	equ	0xFDD
  5391                           fsr2h	equ	0xFDA
  5392                           fsr2l	equ	0xFD9
  5393                           status	equ	0xFD8
  5394                           
  5395 ;; *************** function _LCD_Reset *****************
  5396 ;; Defined at:
  5397 ;;		line 217 in file "ST7735_TFT.c"
  5398 ;; Parameters:    Size  Location     Type
  5399 ;;		None
  5400 ;; Auto vars:     Size  Location     Type
  5401 ;;		None
  5402 ;; Return value:  Size  Location     Type
  5403 ;;		None               void
  5404 ;; Registers used:
  5405 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5406 ;; Tracked objects:
  5407 ;;		On entry : 0/0
  5408 ;;		On exit  : 0/0
  5409 ;;		Unchanged: 0/0
  5410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5412 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5413 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5414 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5415 ;;Total ram usage:        0 bytes
  5416 ;; Hardware stack levels used:    1
  5417 ;; Hardware stack levels required when called:    5
  5418 ;; This function calls:
  5419 ;;		_delay_ms
  5420 ;; This function is called by:
  5421 ;;		_Initialize_Screen
  5422 ;; This function uses a non-reentrant model
  5423 ;;
  5424                           
  5425                           	psect	text30
  5426  0010F2                     __ptext30:
  5427                           	opt stack 0
  5428  0010F2                     _LCD_Reset:
  5429                           	opt stack 23
  5430                           
  5431                           ;ST7735_TFT.c: 219: PORTDbits.RD2 = 0;
  5432                           
  5433                           ;incstack = 0
  5434  0010F2  9483               	bcf	3971,2,c	;volatile
  5435                           
  5436                           ;ST7735_TFT.c: 220: delay_ms(100);
  5437  0010F4  0E00               	movlw	0
  5438  0010F6  6E18               	movwf	delay_ms@ms+1,c
  5439  0010F8  0E64               	movlw	100
  5440  0010FA  6E17               	movwf	delay_ms@ms,c
  5441  0010FC  EC20  F006         	call	_delay_ms	;wreg free
  5442                           
  5443                           ;ST7735_TFT.c: 221: PORTDbits.RD2 = 1;
  5444  001100  8483               	bsf	3971,2,c	;volatile
  5445  001102  0012               	return		;funcret
  5446  001104                     __end_of_LCD_Reset:
  5447                           	opt stack 0
  5448                           tblptru	equ	0xFF8
  5449                           tblptrh	equ	0xFF7
  5450                           tblptrl	equ	0xFF6
  5451                           tablat	equ	0xFF5
  5452                           prodh	equ	0xFF4
  5453                           prodl	equ	0xFF3
  5454                           intcon	equ	0xFF2
  5455                           intcon2	equ	0xFF1
  5456                           postinc0	equ	0xFEE
  5457                           wreg	equ	0xFE8
  5458                           postdec1	equ	0xFE5
  5459                           fsr1l	equ	0xFE1
  5460                           indf2	equ	0xFDF
  5461                           postinc2	equ	0xFDE
  5462                           postdec2	equ	0xFDD
  5463                           fsr2h	equ	0xFDA
  5464                           fsr2l	equ	0xFD9
  5465                           status	equ	0xFD8
  5466                           
  5467 ;; *************** function _delay_ms *****************
  5468 ;; Defined at:
  5469 ;;		line 64 in file "ST7735_TFT.c"
  5470 ;; Parameters:    Size  Location     Type
  5471 ;;  ms              2   22[COMRAM] int 
  5472 ;; Auto vars:     Size  Location     Type
  5473 ;;  count           2   26[COMRAM] int 
  5474 ;; Return value:  Size  Location     Type
  5475 ;;		None               void
  5476 ;; Registers used:
  5477 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5478 ;; Tracked objects:
  5479 ;;		On entry : 0/0
  5480 ;;		On exit  : 0/0
  5481 ;;		Unchanged: 0/0
  5482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5483 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5484 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5485 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5486 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5487 ;;Total ram usage:        6 bytes
  5488 ;; Hardware stack levels used:    1
  5489 ;; Hardware stack levels required when called:    4
  5490 ;; This function calls:
  5491 ;;		___wmul
  5492 ;; This function is called by:
  5493 ;;		_LCD_Reset
  5494 ;;		_Rcmd1
  5495 ;;		_Rcmd3
  5496 ;;		_Bcmd
  5497 ;; This function uses a non-reentrant model
  5498 ;;
  5499                           
  5500                           	psect	text31
  5501  000C40                     __ptext31:
  5502                           	opt stack 0
  5503  000C40                     _delay_ms:
  5504                           	opt stack 22
  5505                           
  5506                           ;ST7735_TFT.c: 70: int count;
  5507                           ;ST7735_TFT.c: 71: count = 8000000/4000/8 * ms;
  5508                           
  5509                           ;incstack = 0
  5510  000C40  C017  F011         	movff	delay_ms@ms,___wmul@multiplier
  5511  000C44  C018  F012         	movff	delay_ms@ms+1,___wmul@multiplier+1
  5512  000C48  0E00               	movlw	0
  5513  000C4A  6E14               	movwf	___wmul@multiplicand+1,c
  5514  000C4C  0EFA               	movlw	250
  5515  000C4E  6E13               	movwf	___wmul@multiplicand,c
  5516  000C50  ECFF  F007         	call	___wmul	;wreg free
  5517  000C54  C011  F01B         	movff	?___wmul,delay_ms@count
  5518  000C58  C012  F01C         	movff	?___wmul+1,delay_ms@count+1
  5519                           
  5520                           ;ST7735_TFT.c: 72: count = (0xffff - count);
  5521  000C5C  C01B  F019         	movff	delay_ms@count,??_delay_ms
  5522  000C60  C01C  F01A         	movff	delay_ms@count+1,??_delay_ms+1
  5523  000C64  1E19               	comf	??_delay_ms,f,c
  5524  000C66  1E1A               	comf	??_delay_ms+1,f,c
  5525  000C68  4A19               	infsnz	??_delay_ms,f,c
  5526  000C6A  2A1A               	incf	??_delay_ms+1,f,c
  5527  000C6C  0EFF               	movlw	255
  5528  000C6E  2419               	addwf	??_delay_ms,w,c
  5529  000C70  6E1B               	movwf	delay_ms@count,c
  5530  000C72  0EFF               	movlw	255
  5531  000C74  201A               	addwfc	??_delay_ms+1,w,c
  5532  000C76  6E1C               	movwf	delay_ms@count+1,c
  5533                           
  5534                           ;ST7735_TFT.c: 74: T3CON = 0xb8;
  5535  000C78  0EB8               	movlw	184
  5536  000C7A  6EB1               	movwf	4017,c	;volatile
  5537                           
  5538                           ;ST7735_TFT.c: 76: TMR3L = count & 0x00ff;
  5539  000C7C  C01B  FFB2         	movff	delay_ms@count,4018	;volatile
  5540                           
  5541                           ;ST7735_TFT.c: 77: TMR3H = count >> 8;
  5542  000C80  501C               	movf	delay_ms@count+1,w,c
  5543  000C82  6EB3               	movwf	4019,c	;volatile
  5544                           
  5545                           ;ST7735_TFT.c: 79: PIR2bits.TMR3IF = 0;
  5546  000C84  92A1               	bcf	4001,1,c	;volatile
  5547                           
  5548                           ;ST7735_TFT.c: 80: T3CONbits.TMR3ON = 1;
  5549  000C86  80B1               	bsf	4017,0,c	;volatile
  5550                           
  5551                           ;ST7735_TFT.c: 82: while (PIR2bits.TMR3IF == 0);
  5552  000C88  D000               	goto	l259
  5553  000C8A                     l259:
  5554  000C8A  A2A1               	btfss	4001,1,c	;volatile
  5555  000C8C  D7FE               	goto	l259
  5556                           
  5557                           ;ST7735_TFT.c: 83: T3CONbits.TMR3ON = 0;
  5558  000C8E  90B1               	bcf	4017,0,c	;volatile
  5559  000C90  0012               	return		;funcret
  5560  000C92                     __end_of_delay_ms:
  5561                           	opt stack 0
  5562                           tblptru	equ	0xFF8
  5563                           tblptrh	equ	0xFF7
  5564                           tblptrl	equ	0xFF6
  5565                           tablat	equ	0xFF5
  5566                           prodh	equ	0xFF4
  5567                           prodl	equ	0xFF3
  5568                           intcon	equ	0xFF2
  5569                           intcon2	equ	0xFF1
  5570                           postinc0	equ	0xFEE
  5571                           wreg	equ	0xFE8
  5572                           postdec1	equ	0xFE5
  5573                           fsr1l	equ	0xFE1
  5574                           indf2	equ	0xFDF
  5575                           postinc2	equ	0xFDE
  5576                           postdec2	equ	0xFDD
  5577                           fsr2h	equ	0xFDA
  5578                           fsr2l	equ	0xFD9
  5579                           status	equ	0xFD8
  5580                           
  5581 ;; *************** function ___wmul *****************
  5582 ;; Defined at:
  5583 ;;		line 15 in file "E:\XC8\sources\common\Umul16.c"
  5584 ;; Parameters:    Size  Location     Type
  5585 ;;  multiplier      2   16[COMRAM] unsigned int 
  5586 ;;  multiplicand    2   18[COMRAM] unsigned int 
  5587 ;; Auto vars:     Size  Location     Type
  5588 ;;  product         2   20[COMRAM] unsigned int 
  5589 ;; Return value:  Size  Location     Type
  5590 ;;                  2   16[COMRAM] unsigned int 
  5591 ;; Registers used:
  5592 ;;		wreg, status,2, status,0, prodl, prodh
  5593 ;; Tracked objects:
  5594 ;;		On entry : 0/0
  5595 ;;		On exit  : 0/0
  5596 ;;		Unchanged: 0/0
  5597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5598 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5599 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5600 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5601 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5602 ;;Total ram usage:        6 bytes
  5603 ;; Hardware stack levels used:    1
  5604 ;; Hardware stack levels required when called:    3
  5605 ;; This function calls:
  5606 ;;		Nothing
  5607 ;; This function is called by:
  5608 ;;		_delay_ms
  5609 ;;		_drawChar
  5610 ;;		_main
  5611 ;; This function uses a non-reentrant model
  5612 ;;
  5613                           
  5614                           	psect	text32
  5615  000FFE                     __ptext32:
  5616                           	opt stack 0
  5617  000FFE                     ___wmul:
  5618                           	opt stack 27
  5619                           
  5620                           ;incstack = 0
  5621  000FFE  5011               	movf	___wmul@multiplier,w,c
  5622  001000  0213               	mulwf	___wmul@multiplicand,c
  5623  001002  CFF3 F015          	movff	prodl,___wmul@product
  5624  001006  CFF4 F016          	movff	prodh,___wmul@product+1
  5625  00100A  5011               	movf	___wmul@multiplier,w,c
  5626  00100C  0214               	mulwf	___wmul@multiplicand+1,c
  5627  00100E  50F3               	movf	prodl,w,c
  5628  001010  2616               	addwf	___wmul@product+1,f,c
  5629  001012  5012               	movf	___wmul@multiplier+1,w,c
  5630  001014  0213               	mulwf	___wmul@multiplicand,c
  5631  001016  50F3               	movf	prodl,w,c
  5632  001018  2616               	addwf	___wmul@product+1,f,c
  5633  00101A  C015  F011         	movff	___wmul@product,?___wmul
  5634  00101E  C016  F012         	movff	___wmul@product+1,?___wmul+1
  5635  001022  D000               	goto	l623
  5636  001024                     l623:
  5637  001024  0012               	return		;funcret
  5638  001026                     __end_of___wmul:
  5639                           	opt stack 0
  5640                           tblptru	equ	0xFF8
  5641                           tblptrh	equ	0xFF7
  5642                           tblptrl	equ	0xFF6
  5643                           tablat	equ	0xFF5
  5644                           prodh	equ	0xFF4
  5645                           prodl	equ	0xFF3
  5646                           intcon	equ	0xFF2
  5647                           intcon2	equ	0xFF1
  5648                           postinc0	equ	0xFEE
  5649                           wreg	equ	0xFE8
  5650                           postdec1	equ	0xFE5
  5651                           fsr1l	equ	0xFE1
  5652                           indf2	equ	0xFDF
  5653                           postinc2	equ	0xFDE
  5654                           postdec2	equ	0xFDD
  5655                           fsr2h	equ	0xFDA
  5656                           fsr2l	equ	0xFD9
  5657                           status	equ	0xFD8
  5658                           
  5659 ;; *************** function _I2C_Init *****************
  5660 ;; Defined at:
  5661 ;;		line 14 in file "I2C.c"
  5662 ;; Parameters:    Size  Location     Type
  5663 ;;  c               4   16[COMRAM] unsigned long 
  5664 ;; Auto vars:     Size  Location     Type
  5665 ;;		None
  5666 ;; Return value:  Size  Location     Type
  5667 ;;		None               void
  5668 ;; Registers used:
  5669 ;;		wreg, cstack
  5670 ;; Tracked objects:
  5671 ;;		On entry : 0/0
  5672 ;;		On exit  : 0/0
  5673 ;;		Unchanged: 0/0
  5674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5675 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5676 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5677 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5678 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5679 ;;Total ram usage:        4 bytes
  5680 ;; Hardware stack levels used:    1
  5681 ;; Hardware stack levels required when called:    4
  5682 ;; This function calls:
  5683 ;;		_i2cHighScl
  5684 ;;		_i2cHighSda
  5685 ;; This function is called by:
  5686 ;;		_Do_Init
  5687 ;; This function uses a non-reentrant model
  5688 ;;
  5689                           
  5690                           	psect	text33
  5691  00118E                     __ptext33:
  5692                           	opt stack 0
  5693  00118E                     _I2C_Init:
  5694                           	opt stack 25
  5695                           
  5696                           ;I2C.c: 16: i2cHighScl();
  5697                           
  5698                           ;incstack = 0
  5699  00118E  ECBB  F008         	call	_i2cHighScl	;wreg free
  5700                           
  5701                           ;I2C.c: 17: i2cHighSda();
  5702  001192  ECDA  F008         	call	_i2cHighSda	;wreg free
  5703  001196  0012               	return		;funcret
  5704  001198                     __end_of_I2C_Init:
  5705                           	opt stack 0
  5706                           tblptru	equ	0xFF8
  5707                           tblptrh	equ	0xFF7
  5708                           tblptrl	equ	0xFF6
  5709                           tablat	equ	0xFF5
  5710                           prodh	equ	0xFF4
  5711                           prodl	equ	0xFF3
  5712                           intcon	equ	0xFF2
  5713                           intcon2	equ	0xFF1
  5714                           postinc0	equ	0xFEE
  5715                           wreg	equ	0xFE8
  5716                           postdec1	equ	0xFE5
  5717                           fsr1l	equ	0xFE1
  5718                           indf2	equ	0xFDF
  5719                           postinc2	equ	0xFDE
  5720                           postdec2	equ	0xFDD
  5721                           fsr2h	equ	0xFDA
  5722                           fsr2l	equ	0xFD9
  5723                           status	equ	0xFD8
  5724                           
  5725 ;; *************** function _DS1621_Init *****************
  5726 ;; Defined at:
  5727 ;;		line 21 in file "I2C_Support.c"
  5728 ;; Parameters:    Size  Location     Type
  5729 ;;		None
  5730 ;; Auto vars:     Size  Location     Type
  5731 ;;  Device          1   21[COMRAM] unsigned char 
  5732 ;; Return value:  Size  Location     Type
  5733 ;;		None               void
  5734 ;; Registers used:
  5735 ;;		wreg, status,2, status,0, cstack
  5736 ;; Tracked objects:
  5737 ;;		On entry : 0/0
  5738 ;;		On exit  : 0/0
  5739 ;;		Unchanged: 0/0
  5740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5741 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5742 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5743 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5744 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5745 ;;Total ram usage:        1 bytes
  5746 ;; Hardware stack levels used:    1
  5747 ;; Hardware stack levels required when called:    6
  5748 ;; This function calls:
  5749 ;;		_I2C_Write_Cmd_Only
  5750 ;;		_I2C_Write_Cmd_Write_Data
  5751 ;; This function is called by:
  5752 ;;		_Do_Init
  5753 ;; This function uses a non-reentrant model
  5754 ;;
  5755                           
  5756                           	psect	text34
  5757  001046                     __ptext34:
  5758                           	opt stack 0
  5759  001046                     _DS1621_Init:
  5760                           	opt stack 23
  5761                           
  5762                           ;I2C_Support.c: 23: char Device = 0x48;
  5763                           
  5764                           ;incstack = 0
  5765  001046  0E48               	movlw	72
  5766  001048  6E16               	movwf	DS1621_Init@Device,c
  5767                           
  5768                           ;I2C_Support.c: 24: I2C_Write_Cmd_Write_Data (Device, 0xAC, 0x02);
  5769  00104A  0EAC               	movlw	172
  5770  00104C  6E13               	movwf	I2C_Write_Cmd_Write_Data@Cmd,c
  5771  00104E  0E02               	movlw	2
  5772  001050  6E14               	movwf	I2C_Write_Cmd_Write_Data@Data_Out,c
  5773  001052  5016               	movf	DS1621_Init@Device,w,c
  5774  001054  EC13  F008         	call	_I2C_Write_Cmd_Write_Data
  5775                           
  5776                           ;I2C_Support.c: 25: I2C_Write_Cmd_Only(Device, 0xEE);
  5777  001058  0EEE               	movlw	238
  5778  00105A  6E13               	movwf	I2C_Write_Cmd_Only@Cmd,c
  5779  00105C  5016               	movf	DS1621_Init@Device,w,c
  5780  00105E  EC4D  F008         	call	_I2C_Write_Cmd_Only
  5781  001062  0012               	return		;funcret
  5782  001064                     __end_of_DS1621_Init:
  5783                           	opt stack 0
  5784                           tblptru	equ	0xFF8
  5785                           tblptrh	equ	0xFF7
  5786                           tblptrl	equ	0xFF6
  5787                           tablat	equ	0xFF5
  5788                           prodh	equ	0xFF4
  5789                           prodl	equ	0xFF3
  5790                           intcon	equ	0xFF2
  5791                           intcon2	equ	0xFF1
  5792                           postinc0	equ	0xFEE
  5793                           wreg	equ	0xFE8
  5794                           postdec1	equ	0xFE5
  5795                           fsr1l	equ	0xFE1
  5796                           indf2	equ	0xFDF
  5797                           postinc2	equ	0xFDE
  5798                           postdec2	equ	0xFDD
  5799                           fsr2h	equ	0xFDA
  5800                           fsr2l	equ	0xFD9
  5801                           status	equ	0xFD8
  5802                           
  5803 ;; *************** function _I2C_Write_Cmd_Write_Data *****************
  5804 ;; Defined at:
  5805 ;;		line 152 in file "I2C.c"
  5806 ;; Parameters:    Size  Location     Type
  5807 ;;  Device          1    wreg     unsigned char 
  5808 ;;  Cmd             1   18[COMRAM] unsigned char 
  5809 ;;  Data_Out        1   19[COMRAM] unsigned char 
  5810 ;; Auto vars:     Size  Location     Type
  5811 ;;  Device          1   20[COMRAM] unsigned char 
  5812 ;; Return value:  Size  Location     Type
  5813 ;;		None               void
  5814 ;; Registers used:
  5815 ;;		wreg, status,2, status,0, cstack
  5816 ;; Tracked objects:
  5817 ;;		On entry : 0/0
  5818 ;;		On exit  : 0/0
  5819 ;;		Unchanged: 0/0
  5820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5821 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5822 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5823 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5824 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5825 ;;Total ram usage:        3 bytes
  5826 ;; Hardware stack levels used:    1
  5827 ;; Hardware stack levels required when called:    5
  5828 ;; This function calls:
  5829 ;;		_I2C_Start
  5830 ;;		_I2C_Stop
  5831 ;;		_I2C_Write
  5832 ;; This function is called by:
  5833 ;;		_DS1621_Init
  5834 ;; This function uses a non-reentrant model
  5835 ;;
  5836                           
  5837                           	psect	text35
  5838  001026                     __ptext35:
  5839                           	opt stack 0
  5840  001026                     _I2C_Write_Cmd_Write_Data:
  5841                           	opt stack 23
  5842                           
  5843                           ;incstack = 0
  5844                           ;I2C_Write_Cmd_Write_Data@Device stored from wreg
  5845  001026  6E15               	movwf	I2C_Write_Cmd_Write_Data@Device,c
  5846                           
  5847                           ;I2C.c: 154: I2C_Start();
  5848  001028  EC8B  F008         	call	_I2C_Start	;wreg free
  5849                           
  5850                           ;I2C.c: 155: I2C_Write((Device << 1) | 0);
  5851  00102C  5015               	movf	I2C_Write_Cmd_Write_Data@Device,w,c
  5852  00102E  2415               	addwf	I2C_Write_Cmd_Write_Data@Device,w,c
  5853  001030  EC64  F007         	call	_I2C_Write
  5854                           
  5855                           ;I2C.c: 156: I2C_Write(Cmd);
  5856  001034  5013               	movf	I2C_Write_Cmd_Write_Data@Cmd,w,c
  5857  001036  EC64  F007         	call	_I2C_Write
  5858                           
  5859                           ;I2C.c: 157: I2C_Write(Data_Out);
  5860  00103A  5014               	movf	I2C_Write_Cmd_Write_Data@Data_Out,w,c
  5861  00103C  EC64  F007         	call	_I2C_Write
  5862                           
  5863                           ;I2C.c: 158: I2C_Stop();
  5864  001040  EC82  F008         	call	_I2C_Stop	;wreg free
  5865  001044  0012               	return		;funcret
  5866  001046                     __end_of_I2C_Write_Cmd_Write_Data:
  5867                           	opt stack 0
  5868                           tblptru	equ	0xFF8
  5869                           tblptrh	equ	0xFF7
  5870                           tblptrl	equ	0xFF6
  5871                           tablat	equ	0xFF5
  5872                           prodh	equ	0xFF4
  5873                           prodl	equ	0xFF3
  5874                           intcon	equ	0xFF2
  5875                           intcon2	equ	0xFF1
  5876                           postinc0	equ	0xFEE
  5877                           wreg	equ	0xFE8
  5878                           postdec1	equ	0xFE5
  5879                           fsr1l	equ	0xFE1
  5880                           indf2	equ	0xFDF
  5881                           postinc2	equ	0xFDE
  5882                           postdec2	equ	0xFDD
  5883                           fsr2h	equ	0xFDA
  5884                           fsr2l	equ	0xFD9
  5885                           status	equ	0xFD8
  5886                           
  5887 ;; *************** function _I2C_Write_Cmd_Only *****************
  5888 ;; Defined at:
  5889 ;;		line 144 in file "I2C.c"
  5890 ;; Parameters:    Size  Location     Type
  5891 ;;  Device          1    wreg     unsigned char 
  5892 ;;  Cmd             1   18[COMRAM] unsigned char 
  5893 ;; Auto vars:     Size  Location     Type
  5894 ;;  Device          1   19[COMRAM] unsigned char 
  5895 ;; Return value:  Size  Location     Type
  5896 ;;		None               void
  5897 ;; Registers used:
  5898 ;;		wreg, status,2, status,0, cstack
  5899 ;; Tracked objects:
  5900 ;;		On entry : 0/0
  5901 ;;		On exit  : 0/0
  5902 ;;		Unchanged: 0/0
  5903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5904 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5905 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5906 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5907 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5908 ;;Total ram usage:        2 bytes
  5909 ;; Hardware stack levels used:    1
  5910 ;; Hardware stack levels required when called:    5
  5911 ;; This function calls:
  5912 ;;		_I2C_Start
  5913 ;;		_I2C_Stop
  5914 ;;		_I2C_Write
  5915 ;; This function is called by:
  5916 ;;		_DS1621_Init
  5917 ;; This function uses a non-reentrant model
  5918 ;;
  5919                           
  5920                           	psect	text36
  5921  00109A                     __ptext36:
  5922                           	opt stack 0
  5923  00109A                     _I2C_Write_Cmd_Only:
  5924                           	opt stack 23
  5925                           
  5926                           ;incstack = 0
  5927                           ;I2C_Write_Cmd_Only@Device stored from wreg
  5928  00109A  6E14               	movwf	I2C_Write_Cmd_Only@Device,c
  5929                           
  5930                           ;I2C.c: 146: I2C_Start();
  5931  00109C  EC8B  F008         	call	_I2C_Start	;wreg free
  5932                           
  5933                           ;I2C.c: 147: I2C_Write((Device << 1) | 0);
  5934  0010A0  5014               	movf	I2C_Write_Cmd_Only@Device,w,c
  5935  0010A2  2414               	addwf	I2C_Write_Cmd_Only@Device,w,c
  5936  0010A4  EC64  F007         	call	_I2C_Write
  5937                           
  5938                           ;I2C.c: 148: I2C_Write(Cmd);
  5939  0010A8  5013               	movf	I2C_Write_Cmd_Only@Cmd,w,c
  5940  0010AA  EC64  F007         	call	_I2C_Write
  5941                           
  5942                           ;I2C.c: 149: I2C_Stop();
  5943  0010AE  EC82  F008         	call	_I2C_Stop	;wreg free
  5944  0010B2  0012               	return		;funcret
  5945  0010B4                     __end_of_I2C_Write_Cmd_Only:
  5946                           	opt stack 0
  5947                           tblptru	equ	0xFF8
  5948                           tblptrh	equ	0xFF7
  5949                           tblptrl	equ	0xFF6
  5950                           tablat	equ	0xFF5
  5951                           prodh	equ	0xFF4
  5952                           prodl	equ	0xFF3
  5953                           intcon	equ	0xFF2
  5954                           intcon2	equ	0xFF1
  5955                           postinc0	equ	0xFEE
  5956                           wreg	equ	0xFE8
  5957                           postdec1	equ	0xFE5
  5958                           fsr1l	equ	0xFE1
  5959                           indf2	equ	0xFDF
  5960                           postinc2	equ	0xFDE
  5961                           postdec2	equ	0xFDD
  5962                           fsr2h	equ	0xFDA
  5963                           fsr2l	equ	0xFD9
  5964                           status	equ	0xFD8
  5965                           
  5966 ;; *************** function _DS1621_Read_Temp *****************
  5967 ;; Defined at:
  5968 ;;		line 29 in file "I2C_Support.c"
  5969 ;; Parameters:    Size  Location     Type
  5970 ;;		None
  5971 ;; Auto vars:     Size  Location     Type
  5972 ;;  Device          1   23[COMRAM] unsigned char 
  5973 ;;  Data_Ret        1   22[COMRAM] unsigned char 
  5974 ;;  Cmd             1   21[COMRAM] unsigned char 
  5975 ;; Return value:  Size  Location     Type
  5976 ;;                  2   19[COMRAM] int 
  5977 ;; Registers used:
  5978 ;;		wreg, status,2, status,0, cstack
  5979 ;; Tracked objects:
  5980 ;;		On entry : 0/0
  5981 ;;		On exit  : 0/0
  5982 ;;		Unchanged: 0/0
  5983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5984 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5985 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5986 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5987 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5988 ;;Total ram usage:        5 bytes
  5989 ;; Hardware stack levels used:    1
  5990 ;; Hardware stack levels required when called:    6
  5991 ;; This function calls:
  5992 ;;		_I2C_ReStart
  5993 ;;		_I2C_Read
  5994 ;;		_I2C_Start
  5995 ;;		_I2C_Stop
  5996 ;;		_I2C_Write
  5997 ;; This function is called by:
  5998 ;;		_main
  5999 ;; This function uses a non-reentrant model
  6000 ;;
  6001                           
  6002                           	psect	text37
  6003  000F06                     __ptext37:
  6004                           	opt stack 0
  6005  000F06                     _DS1621_Read_Temp:
  6006                           	opt stack 24
  6007                           
  6008                           ;I2C_Support.c: 31: char Device = 0x48;
  6009                           
  6010                           ;incstack = 0
  6011  000F06  0E48               	movlw	72
  6012  000F08  6E18               	movwf	DS1621_Read_Temp@Device,c
  6013                           
  6014                           ;I2C_Support.c: 32: char Cmd = 0xAA;
  6015  000F0A  0EAA               	movlw	170
  6016  000F0C  6E16               	movwf	DS1621_Read_Temp@Cmd,c
  6017                           
  6018                           ;I2C_Support.c: 34: char Data_Ret;
  6019                           ;I2C_Support.c: 35: I2C_Start();
  6020  000F0E  EC8B  F008         	call	_I2C_Start	;wreg free
  6021                           
  6022                           ;I2C_Support.c: 36: I2C_Write((Device << 1) | 0);
  6023  000F12  5018               	movf	DS1621_Read_Temp@Device,w,c
  6024  000F14  2418               	addwf	DS1621_Read_Temp@Device,w,c
  6025  000F16  EC64  F007         	call	_I2C_Write
  6026                           
  6027                           ;I2C_Support.c: 37: I2C_Write(Cmd);
  6028  000F1A  5016               	movf	DS1621_Read_Temp@Cmd,w,c
  6029  000F1C  EC64  F007         	call	_I2C_Write
  6030                           
  6031                           ;I2C_Support.c: 38: I2C_ReStart();
  6032  000F20  EC5A  F008         	call	_I2C_ReStart	;wreg free
  6033                           
  6034                           ;I2C_Support.c: 39: I2C_Write((Device << 1) | 1);
  6035  000F24  80D8               	bsf	status,0,c
  6036  000F26  3418               	rlcf	DS1621_Read_Temp@Device,w,c
  6037  000F28  EC64  F007         	call	_I2C_Write
  6038                           
  6039                           ;I2C_Support.c: 40: Data_Ret = I2C_Read(0);
  6040  000F2C  0E00               	movlw	0
  6041  000F2E  ECE0  F006         	call	_I2C_Read
  6042  000F32  6E17               	movwf	DS1621_Read_Temp@Data_Ret,c
  6043                           
  6044                           ;I2C_Support.c: 41: I2C_Stop();
  6045  000F34  EC82  F008         	call	_I2C_Stop	;wreg free
  6046                           
  6047                           ;I2C_Support.c: 42: return Data_Ret;
  6048  000F38  C017  F014         	movff	DS1621_Read_Temp@Data_Ret,?_DS1621_Read_Temp
  6049  000F3C  6A15               	clrf	?_DS1621_Read_Temp+1,c
  6050  000F3E  D000               	goto	l203
  6051  000F40                     l203:
  6052  000F40  0012               	return		;funcret
  6053  000F42                     __end_of_DS1621_Read_Temp:
  6054                           	opt stack 0
  6055                           tblptru	equ	0xFF8
  6056                           tblptrh	equ	0xFF7
  6057                           tblptrl	equ	0xFF6
  6058                           tablat	equ	0xFF5
  6059                           prodh	equ	0xFF4
  6060                           prodl	equ	0xFF3
  6061                           intcon	equ	0xFF2
  6062                           intcon2	equ	0xFF1
  6063                           postinc0	equ	0xFEE
  6064                           wreg	equ	0xFE8
  6065                           postdec1	equ	0xFE5
  6066                           fsr1l	equ	0xFE1
  6067                           indf2	equ	0xFDF
  6068                           postinc2	equ	0xFDE
  6069                           postdec2	equ	0xFDD
  6070                           fsr2h	equ	0xFDA
  6071                           fsr2l	equ	0xFD9
  6072                           status	equ	0xFD8
  6073                           
  6074 ;; *************** function _I2C_Write *****************
  6075 ;; Defined at:
  6076 ;;		line 41 in file "I2C.c"
  6077 ;; Parameters:    Size  Location     Type
  6078 ;;  outByte         1    wreg     unsigned char 
  6079 ;; Auto vars:     Size  Location     Type
  6080 ;;  outByte         1   16[COMRAM] unsigned char 
  6081 ;;  n               1   17[COMRAM] unsigned char 
  6082 ;; Return value:  Size  Location     Type
  6083 ;;		None               void
  6084 ;; Registers used:
  6085 ;;		wreg, status,2, status,0, cstack
  6086 ;; Tracked objects:
  6087 ;;		On entry : 0/0
  6088 ;;		On exit  : 0/0
  6089 ;;		Unchanged: 0/0
  6090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6091 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6092 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6093 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6094 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6095 ;;Total ram usage:        2 bytes
  6096 ;; Hardware stack levels used:    1
  6097 ;; Hardware stack levels required when called:    4
  6098 ;; This function calls:
  6099 ;;		_i2cHighScl
  6100 ;;		_i2cHighSda
  6101 ;;		_i2cLowScl
  6102 ;;		_i2cLowSda
  6103 ;; This function is called by:
  6104 ;;		_I2C_Write_Cmd_Only
  6105 ;;		_I2C_Write_Cmd_Write_Data
  6106 ;;		_DS1621_Read_Temp
  6107 ;;		_I2C_Write_Address_Read_One_Byte
  6108 ;;		_I2C_Write_Address_Write_One_Byte
  6109 ;;		_I2C_Write_Cmd_Read_One_Byte
  6110 ;;		_DS3231_Read_Time
  6111 ;;		_DS3231_Setup_Time
  6112 ;; This function uses a non-reentrant model
  6113 ;;
  6114                           
  6115                           	psect	text38
  6116  000EC8                     __ptext38:
  6117                           	opt stack 0
  6118  000EC8                     _I2C_Write:
  6119                           	opt stack 23
  6120                           
  6121                           ;incstack = 0
  6122                           ;I2C_Write@outByte stored from wreg
  6123  000EC8  6E11               	movwf	I2C_Write@outByte,c
  6124                           
  6125                           ;I2C.c: 43: unsigned char n;
  6126                           ;I2C.c: 44: for(n=0; n<8; n++)
  6127  000ECA  0E00               	movlw	0
  6128  000ECC  6E12               	movwf	I2C_Write@n,c
  6129  000ECE                     l1324:
  6130  000ECE  0E07               	movlw	7
  6131  000ED0  6412               	cpfsgt	I2C_Write@n,c
  6132  000ED2  D001               	goto	l151
  6133  000ED4  D011               	goto	l1342
  6134  000ED6                     l151:
  6135                           
  6136                           ;I2C.c: 45: {
  6137                           ;I2C.c: 46: if(outByte&0x80) i2cHighSda();
  6138  000ED6  AE11               	btfss	I2C_Write@outByte,7,c
  6139  000ED8  D003               	goto	l1330
  6140  000EDA  ECDA  F008         	call	_i2cHighSda	;wreg free
  6141  000EDE  D003               	goto	l1332
  6142  000EE0                     l1330:
  6143                           
  6144                           ;I2C.c: 47: else i2cLowSda();
  6145  000EE0  ECD1  F008         	call	_i2cLowSda	;wreg free
  6146  000EE4  D000               	goto	l1332
  6147  000EE6                     l1332:
  6148                           
  6149                           ;I2C.c: 48: i2cHighScl();
  6150  000EE6  ECBB  F008         	call	_i2cHighScl	;wreg free
  6151                           
  6152                           ;I2C.c: 49: i2cLowScl();
  6153  000EEA  ECD6  F008         	call	_i2cLowScl	;wreg free
  6154                           
  6155                           ;I2C.c: 50: outByte = outByte << 1;
  6156  000EEE  5011               	movf	I2C_Write@outByte,w,c
  6157  000EF0  2411               	addwf	I2C_Write@outByte,w,c
  6158  000EF2  6E11               	movwf	I2C_Write@outByte,c
  6159  000EF4  2A12               	incf	I2C_Write@n,f,c
  6160  000EF6  D7EB               	goto	l1324
  6161  000EF8                     l1342:
  6162                           
  6163                           ;I2C.c: 51: }
  6164                           ;I2C.c: 52: i2cHighSda();
  6165  000EF8  ECDA  F008         	call	_i2cHighSda	;wreg free
  6166                           
  6167                           ;I2C.c: 53: i2cHighScl();
  6168  000EFC  ECBB  F008         	call	_i2cHighScl	;wreg free
  6169                           
  6170                           ;I2C.c: 54: i2cLowScl();
  6171  000F00  ECD6  F008         	call	_i2cLowScl	;wreg free
  6172  000F04  0012               	return		;funcret
  6173  000F06                     __end_of_I2C_Write:
  6174                           	opt stack 0
  6175                           tblptru	equ	0xFF8
  6176                           tblptrh	equ	0xFF7
  6177                           tblptrl	equ	0xFF6
  6178                           tablat	equ	0xFF5
  6179                           prodh	equ	0xFF4
  6180                           prodl	equ	0xFF3
  6181                           intcon	equ	0xFF2
  6182                           intcon2	equ	0xFF1
  6183                           postinc0	equ	0xFEE
  6184                           wreg	equ	0xFE8
  6185                           postdec1	equ	0xFE5
  6186                           fsr1l	equ	0xFE1
  6187                           indf2	equ	0xFDF
  6188                           postinc2	equ	0xFDE
  6189                           postdec2	equ	0xFDD
  6190                           fsr2h	equ	0xFDA
  6191                           fsr2l	equ	0xFD9
  6192                           status	equ	0xFD8
  6193                           
  6194 ;; *************** function _I2C_Stop *****************
  6195 ;; Defined at:
  6196 ;;		line 88 in file "I2C.c"
  6197 ;; Parameters:    Size  Location     Type
  6198 ;;		None
  6199 ;; Auto vars:     Size  Location     Type
  6200 ;;		None
  6201 ;; Return value:  Size  Location     Type
  6202 ;;		None               void
  6203 ;; Registers used:
  6204 ;;		wreg, cstack
  6205 ;; Tracked objects:
  6206 ;;		On entry : 0/0
  6207 ;;		On exit  : 0/0
  6208 ;;		Unchanged: 0/0
  6209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6210 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6211 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6212 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6213 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6214 ;;Total ram usage:        0 bytes
  6215 ;; Hardware stack levels used:    1
  6216 ;; Hardware stack levels required when called:    4
  6217 ;; This function calls:
  6218 ;;		_i2cHighScl
  6219 ;;		_i2cHighSda
  6220 ;;		_i2cLowScl
  6221 ;;		_i2cLowSda
  6222 ;; This function is called by:
  6223 ;;		_I2C_Write_Cmd_Only
  6224 ;;		_I2C_Write_Cmd_Write_Data
  6225 ;;		_DS1621_Read_Temp
  6226 ;;		_I2C_Write_Address_Read_One_Byte
  6227 ;;		_I2C_Write_Address_Write_One_Byte
  6228 ;;		_I2C_Write_Cmd_Read_One_Byte
  6229 ;;		_DS3231_Read_Time
  6230 ;;		_DS3231_Setup_Time
  6231 ;; This function uses a non-reentrant model
  6232 ;;
  6233                           
  6234                           	psect	text39
  6235  001104                     __ptext39:
  6236                           	opt stack 0
  6237  001104                     _I2C_Stop:
  6238                           	opt stack 23
  6239                           
  6240                           ;I2C.c: 90: i2cLowScl();
  6241                           
  6242                           ;incstack = 0
  6243  001104  ECD6  F008         	call	_i2cLowScl	;wreg free
  6244                           
  6245                           ;I2C.c: 91: i2cLowSda();
  6246  001108  ECD1  F008         	call	_i2cLowSda	;wreg free
  6247                           
  6248                           ;I2C.c: 92: i2cHighScl();
  6249  00110C  ECBB  F008         	call	_i2cHighScl	;wreg free
  6250                           
  6251                           ;I2C.c: 93: i2cHighSda();
  6252  001110  ECDA  F008         	call	_i2cHighSda	;wreg free
  6253  001114  0012               	return		;funcret
  6254  001116                     __end_of_I2C_Stop:
  6255                           	opt stack 0
  6256                           tblptru	equ	0xFF8
  6257                           tblptrh	equ	0xFF7
  6258                           tblptrl	equ	0xFF6
  6259                           tablat	equ	0xFF5
  6260                           prodh	equ	0xFF4
  6261                           prodl	equ	0xFF3
  6262                           intcon	equ	0xFF2
  6263                           intcon2	equ	0xFF1
  6264                           postinc0	equ	0xFEE
  6265                           wreg	equ	0xFE8
  6266                           postdec1	equ	0xFE5
  6267                           fsr1l	equ	0xFE1
  6268                           indf2	equ	0xFDF
  6269                           postinc2	equ	0xFDE
  6270                           postdec2	equ	0xFDD
  6271                           fsr2h	equ	0xFDA
  6272                           fsr2l	equ	0xFD9
  6273                           status	equ	0xFD8
  6274                           
  6275 ;; *************** function _I2C_Start *****************
  6276 ;; Defined at:
  6277 ;;		line 71 in file "I2C.c"
  6278 ;; Parameters:    Size  Location     Type
  6279 ;;		None
  6280 ;; Auto vars:     Size  Location     Type
  6281 ;;		None
  6282 ;; Return value:  Size  Location     Type
  6283 ;;		None               void
  6284 ;; Registers used:
  6285 ;;		wreg, cstack
  6286 ;; Tracked objects:
  6287 ;;		On entry : 0/0
  6288 ;;		On exit  : 0/0
  6289 ;;		Unchanged: 0/0
  6290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6291 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6292 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6293 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6294 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6295 ;;Total ram usage:        0 bytes
  6296 ;; Hardware stack levels used:    1
  6297 ;; Hardware stack levels required when called:    4
  6298 ;; This function calls:
  6299 ;;		_i2cHighScl
  6300 ;;		_i2cHighSda
  6301 ;;		_i2cLowScl
  6302 ;;		_i2cLowSda
  6303 ;; This function is called by:
  6304 ;;		_I2C_Write_Cmd_Only
  6305 ;;		_I2C_Write_Cmd_Write_Data
  6306 ;;		_DS1621_Read_Temp
  6307 ;;		_I2C_Write_Address_Read_One_Byte
  6308 ;;		_I2C_Write_Address_Write_One_Byte
  6309 ;;		_I2C_Write_Cmd_Read_One_Byte
  6310 ;;		_DS3231_Read_Time
  6311 ;;		_DS3231_Setup_Time
  6312 ;; This function uses a non-reentrant model
  6313 ;;
  6314                           
  6315                           	psect	text40
  6316  001116                     __ptext40:
  6317                           	opt stack 0
  6318  001116                     _I2C_Start:
  6319                           	opt stack 23
  6320                           
  6321                           ;I2C.c: 73: i2cHighSda();
  6322                           
  6323                           ;incstack = 0
  6324  001116  ECDA  F008         	call	_i2cHighSda	;wreg free
  6325                           
  6326                           ;I2C.c: 74: i2cHighScl();
  6327  00111A  ECBB  F008         	call	_i2cHighScl	;wreg free
  6328                           
  6329                           ;I2C.c: 75: i2cLowSda();
  6330  00111E  ECD1  F008         	call	_i2cLowSda	;wreg free
  6331                           
  6332                           ;I2C.c: 76: i2cLowScl();
  6333  001122  ECD6  F008         	call	_i2cLowScl	;wreg free
  6334  001126  0012               	return		;funcret
  6335  001128                     __end_of_I2C_Start:
  6336                           	opt stack 0
  6337                           tblptru	equ	0xFF8
  6338                           tblptrh	equ	0xFF7
  6339                           tblptrl	equ	0xFF6
  6340                           tablat	equ	0xFF5
  6341                           prodh	equ	0xFF4
  6342                           prodl	equ	0xFF3
  6343                           intcon	equ	0xFF2
  6344                           intcon2	equ	0xFF1
  6345                           postinc0	equ	0xFEE
  6346                           wreg	equ	0xFE8
  6347                           postdec1	equ	0xFE5
  6348                           fsr1l	equ	0xFE1
  6349                           indf2	equ	0xFDF
  6350                           postinc2	equ	0xFDE
  6351                           postdec2	equ	0xFDD
  6352                           fsr2h	equ	0xFDA
  6353                           fsr2l	equ	0xFD9
  6354                           status	equ	0xFD8
  6355                           
  6356 ;; *************** function _I2C_Read *****************
  6357 ;; Defined at:
  6358 ;;		line 20 in file "I2C.c"
  6359 ;; Parameters:    Size  Location     Type
  6360 ;;  ack             1    wreg     unsigned char 
  6361 ;; Auto vars:     Size  Location     Type
  6362 ;;  ack             1   16[COMRAM] unsigned char 
  6363 ;;  inByte          1   18[COMRAM] unsigned char 
  6364 ;;  n               1   17[COMRAM] unsigned char 
  6365 ;; Return value:  Size  Location     Type
  6366 ;;                  1    wreg      unsigned char 
  6367 ;; Registers used:
  6368 ;;		wreg, status,2, status,0, cstack
  6369 ;; Tracked objects:
  6370 ;;		On entry : 0/0
  6371 ;;		On exit  : 0/0
  6372 ;;		Unchanged: 0/0
  6373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6374 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6375 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6376 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6377 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6378 ;;Total ram usage:        3 bytes
  6379 ;; Hardware stack levels used:    1
  6380 ;; Hardware stack levels required when called:    5
  6381 ;; This function calls:
  6382 ;;		_i2cAck
  6383 ;;		_i2cHighScl
  6384 ;;		_i2cHighSda
  6385 ;;		_i2cLowScl
  6386 ;;		_i2cNack
  6387 ;; This function is called by:
  6388 ;;		_DS1621_Read_Temp
  6389 ;;		_I2C_Write_Address_Read_One_Byte
  6390 ;;		_I2C_Write_Cmd_Read_One_Byte
  6391 ;;		_DS3231_Read_Time
  6392 ;; This function uses a non-reentrant model
  6393 ;;
  6394                           
  6395                           	psect	text41
  6396  000DC0                     __ptext41:
  6397                           	opt stack 0
  6398  000DC0                     _I2C_Read:
  6399                           	opt stack 24
  6400                           
  6401                           ;incstack = 0
  6402                           ;I2C_Read@ack stored from wreg
  6403  000DC0  6E11               	movwf	I2C_Read@ack,c
  6404                           
  6405                           ;I2C.c: 22: unsigned char inByte, n;
  6406                           ;I2C.c: 23: i2cHighSda();
  6407  000DC2  ECDA  F008         	call	_i2cHighSda	;wreg free
  6408                           
  6409                           ;I2C.c: 24: for (n=0; n<8; n++)
  6410  000DC6  0E00               	movlw	0
  6411  000DC8  6E12               	movwf	I2C_Read@n,c
  6412  000DCA                     l1710:
  6413  000DCA  0E07               	movlw	7
  6414  000DCC  6412               	cpfsgt	I2C_Read@n,c
  6415  000DCE  D001               	goto	l1714
  6416  000DD0  D00F               	goto	l1728
  6417  000DD2                     l1714:
  6418                           
  6419                           ;I2C.c: 25: {
  6420                           ;I2C.c: 26: i2cHighScl();
  6421  000DD2  ECBB  F008         	call	_i2cHighScl	;wreg free
  6422                           
  6423                           ;I2C.c: 28: if (PORTCbits.RC1)
  6424  000DD6  A282               	btfss	3970,1,c	;volatile
  6425  000DD8  D003               	goto	l1720
  6426                           
  6427                           ;I2C.c: 29: inByte = (inByte << 1) | 0x01;
  6428  000DDA  80D8               	bsf	status,0,c
  6429  000DDC  3613               	rlcf	I2C_Read@inByte,f,c
  6430  000DDE  D004               	goto	l1722
  6431  000DE0                     l1720:
  6432                           
  6433                           ;I2C.c: 30: else
  6434                           ;I2C.c: 31: inByte = inByte << 1;
  6435  000DE0  5013               	movf	I2C_Read@inByte,w,c
  6436  000DE2  2413               	addwf	I2C_Read@inByte,w,c
  6437  000DE4  6E13               	movwf	I2C_Read@inByte,c
  6438  000DE6  D000               	goto	l1722
  6439  000DE8                     l1722:
  6440                           
  6441                           ;I2C.c: 32: i2cLowScl();
  6442  000DE8  ECD6  F008         	call	_i2cLowScl	;wreg free
  6443  000DEC  2A12               	incf	I2C_Read@n,f,c
  6444  000DEE  D7ED               	goto	l1710
  6445  000DF0                     l1728:
  6446                           
  6447                           ;I2C.c: 33: }
  6448                           ;I2C.c: 34: if (ack) i2cAck();
  6449  000DF0  5011               	movf	I2C_Read@ack,w,c
  6450  000DF2  B4D8               	btfsc	status,2,c
  6451  000DF4  D003               	goto	l1732
  6452  000DF6  EC94  F008         	call	_i2cAck	;wreg free
  6453  000DFA  D003               	goto	l1734
  6454  000DFC                     l1732:
  6455                           
  6456                           ;I2C.c: 35: else i2cNack();
  6457  000DFC  ECCC  F008         	call	_i2cNack	;wreg free
  6458  000E00  D000               	goto	l1734
  6459  000E02                     l1734:
  6460                           
  6461                           ;I2C.c: 38: return(inByte);
  6462  000E02  5013               	movf	I2C_Read@inByte,w,c
  6463  000E04  D000               	goto	l148
  6464  000E06                     l148:
  6465  000E06  0012               	return		;funcret
  6466  000E08                     __end_of_I2C_Read:
  6467                           	opt stack 0
  6468                           tblptru	equ	0xFF8
  6469                           tblptrh	equ	0xFF7
  6470                           tblptrl	equ	0xFF6
  6471                           tablat	equ	0xFF5
  6472                           prodh	equ	0xFF4
  6473                           prodl	equ	0xFF3
  6474                           intcon	equ	0xFF2
  6475                           intcon2	equ	0xFF1
  6476                           postinc0	equ	0xFEE
  6477                           wreg	equ	0xFE8
  6478                           postdec1	equ	0xFE5
  6479                           fsr1l	equ	0xFE1
  6480                           indf2	equ	0xFDF
  6481                           postinc2	equ	0xFDE
  6482                           postdec2	equ	0xFDD
  6483                           fsr2h	equ	0xFDA
  6484                           fsr2l	equ	0xFD9
  6485                           status	equ	0xFD8
  6486                           
  6487 ;; *************** function _i2cNack *****************
  6488 ;; Defined at:
  6489 ;;		line 57 in file "I2C.c"
  6490 ;; Parameters:    Size  Location     Type
  6491 ;;		None
  6492 ;; Auto vars:     Size  Location     Type
  6493 ;;		None
  6494 ;; Return value:  Size  Location     Type
  6495 ;;		None               void
  6496 ;; Registers used:
  6497 ;;		wreg, cstack
  6498 ;; Tracked objects:
  6499 ;;		On entry : 0/0
  6500 ;;		On exit  : 0/0
  6501 ;;		Unchanged: 0/0
  6502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6503 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6504 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6505 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6506 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6507 ;;Total ram usage:        0 bytes
  6508 ;; Hardware stack levels used:    1
  6509 ;; Hardware stack levels required when called:    4
  6510 ;; This function calls:
  6511 ;;		_i2cHighScl
  6512 ;;		_i2cLowScl
  6513 ;; This function is called by:
  6514 ;;		_I2C_Read
  6515 ;; This function uses a non-reentrant model
  6516 ;;
  6517                           
  6518                           	psect	text42
  6519  001198                     __ptext42:
  6520                           	opt stack 0
  6521  001198                     _i2cNack:
  6522                           	opt stack 24
  6523                           
  6524                           ;I2C.c: 59: i2cHighScl();
  6525                           
  6526                           ;incstack = 0
  6527  001198  ECBB  F008         	call	_i2cHighScl	;wreg free
  6528                           
  6529                           ;I2C.c: 60: i2cLowScl();
  6530  00119C  ECD6  F008         	call	_i2cLowScl	;wreg free
  6531  0011A0  0012               	return		;funcret
  6532  0011A2                     __end_of_i2cNack:
  6533                           	opt stack 0
  6534                           tblptru	equ	0xFF8
  6535                           tblptrh	equ	0xFF7
  6536                           tblptrl	equ	0xFF6
  6537                           tablat	equ	0xFF5
  6538                           prodh	equ	0xFF4
  6539                           prodl	equ	0xFF3
  6540                           intcon	equ	0xFF2
  6541                           intcon2	equ	0xFF1
  6542                           postinc0	equ	0xFEE
  6543                           wreg	equ	0xFE8
  6544                           postdec1	equ	0xFE5
  6545                           fsr1l	equ	0xFE1
  6546                           indf2	equ	0xFDF
  6547                           postinc2	equ	0xFDE
  6548                           postdec2	equ	0xFDD
  6549                           fsr2h	equ	0xFDA
  6550                           fsr2l	equ	0xFD9
  6551                           status	equ	0xFD8
  6552                           
  6553 ;; *************** function _i2cAck *****************
  6554 ;; Defined at:
  6555 ;;		line 63 in file "I2C.c"
  6556 ;; Parameters:    Size  Location     Type
  6557 ;;		None
  6558 ;; Auto vars:     Size  Location     Type
  6559 ;;		None
  6560 ;; Return value:  Size  Location     Type
  6561 ;;		None               void
  6562 ;; Registers used:
  6563 ;;		wreg, cstack
  6564 ;; Tracked objects:
  6565 ;;		On entry : 0/0
  6566 ;;		On exit  : 0/0
  6567 ;;		Unchanged: 0/0
  6568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6569 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6570 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6571 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6572 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6573 ;;Total ram usage:        0 bytes
  6574 ;; Hardware stack levels used:    1
  6575 ;; Hardware stack levels required when called:    4
  6576 ;; This function calls:
  6577 ;;		_i2cHighScl
  6578 ;;		_i2cHighSda
  6579 ;;		_i2cLowScl
  6580 ;;		_i2cLowSda
  6581 ;; This function is called by:
  6582 ;;		_I2C_Read
  6583 ;; This function uses a non-reentrant model
  6584 ;;
  6585                           
  6586                           	psect	text43
  6587  001128                     __ptext43:
  6588                           	opt stack 0
  6589  001128                     _i2cAck:
  6590                           	opt stack 24
  6591                           
  6592                           ;I2C.c: 65: i2cLowSda();
  6593                           
  6594                           ;incstack = 0
  6595  001128  ECD1  F008         	call	_i2cLowSda	;wreg free
  6596                           
  6597                           ;I2C.c: 66: i2cHighScl();
  6598  00112C  ECBB  F008         	call	_i2cHighScl	;wreg free
  6599                           
  6600                           ;I2C.c: 67: i2cLowScl();
  6601  001130  ECD6  F008         	call	_i2cLowScl	;wreg free
  6602                           
  6603                           ;I2C.c: 68: i2cHighSda();
  6604  001134  ECDA  F008         	call	_i2cHighSda	;wreg free
  6605  001138  0012               	return		;funcret
  6606  00113A                     __end_of_i2cAck:
  6607                           	opt stack 0
  6608                           tblptru	equ	0xFF8
  6609                           tblptrh	equ	0xFF7
  6610                           tblptrl	equ	0xFF6
  6611                           tablat	equ	0xFF5
  6612                           prodh	equ	0xFF4
  6613                           prodl	equ	0xFF3
  6614                           intcon	equ	0xFF2
  6615                           intcon2	equ	0xFF1
  6616                           postinc0	equ	0xFEE
  6617                           wreg	equ	0xFE8
  6618                           postdec1	equ	0xFE5
  6619                           fsr1l	equ	0xFE1
  6620                           indf2	equ	0xFDF
  6621                           postinc2	equ	0xFDE
  6622                           postdec2	equ	0xFDD
  6623                           fsr2h	equ	0xFDA
  6624                           fsr2l	equ	0xFD9
  6625                           status	equ	0xFD8
  6626                           
  6627 ;; *************** function _I2C_ReStart *****************
  6628 ;; Defined at:
  6629 ;;		line 79 in file "I2C.c"
  6630 ;; Parameters:    Size  Location     Type
  6631 ;;		None
  6632 ;; Auto vars:     Size  Location     Type
  6633 ;;		None
  6634 ;; Return value:  Size  Location     Type
  6635 ;;		None               void
  6636 ;; Registers used:
  6637 ;;		wreg, cstack
  6638 ;; Tracked objects:
  6639 ;;		On entry : 0/0
  6640 ;;		On exit  : 0/0
  6641 ;;		Unchanged: 0/0
  6642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6643 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6644 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6645 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6646 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6647 ;;Total ram usage:        0 bytes
  6648 ;; Hardware stack levels used:    1
  6649 ;; Hardware stack levels required when called:    4
  6650 ;; This function calls:
  6651 ;;		_i2cHighScl
  6652 ;;		_i2cHighSda
  6653 ;;		_i2cLowScl
  6654 ;;		_i2cLowSda
  6655 ;; This function is called by:
  6656 ;;		_DS1621_Read_Temp
  6657 ;;		_I2C_Write_Address_Read_One_Byte
  6658 ;;		_I2C_Write_Cmd_Read_One_Byte
  6659 ;;		_DS3231_Read_Time
  6660 ;; This function uses a non-reentrant model
  6661 ;;
  6662                           
  6663                           	psect	text44
  6664  0010B4                     __ptext44:
  6665                           	opt stack 0
  6666  0010B4                     _I2C_ReStart:
  6667                           	opt stack 25
  6668                           
  6669                           ;I2C.c: 81: i2cLowScl();
  6670                           
  6671                           ;incstack = 0
  6672  0010B4  ECD6  F008         	call	_i2cLowScl	;wreg free
  6673                           
  6674                           ;I2C.c: 82: i2cHighSda();
  6675  0010B8  ECDA  F008         	call	_i2cHighSda	;wreg free
  6676                           
  6677                           ;I2C.c: 83: i2cHighScl();
  6678  0010BC  ECBB  F008         	call	_i2cHighScl	;wreg free
  6679                           
  6680                           ;I2C.c: 84: i2cLowSda();
  6681  0010C0  ECD1  F008         	call	_i2cLowSda	;wreg free
  6682                           
  6683                           ;I2C.c: 85: i2cLowScl();
  6684  0010C4  ECD6  F008         	call	_i2cLowScl	;wreg free
  6685  0010C8  0012               	return		;funcret
  6686  0010CA                     __end_of_I2C_ReStart:
  6687                           	opt stack 0
  6688                           tblptru	equ	0xFF8
  6689                           tblptrh	equ	0xFF7
  6690                           tblptrl	equ	0xFF6
  6691                           tablat	equ	0xFF5
  6692                           prodh	equ	0xFF4
  6693                           prodl	equ	0xFF3
  6694                           intcon	equ	0xFF2
  6695                           intcon2	equ	0xFF1
  6696                           postinc0	equ	0xFEE
  6697                           wreg	equ	0xFE8
  6698                           postdec1	equ	0xFE5
  6699                           fsr1l	equ	0xFE1
  6700                           indf2	equ	0xFDF
  6701                           postinc2	equ	0xFDE
  6702                           postdec2	equ	0xFDD
  6703                           fsr2h	equ	0xFDA
  6704                           fsr2l	equ	0xFD9
  6705                           status	equ	0xFD8
  6706                           
  6707 ;; *************** function _i2cLowSda *****************
  6708 ;; Defined at:
  6709 ;;		line 102 in file "I2C.c"
  6710 ;; Parameters:    Size  Location     Type
  6711 ;;		None
  6712 ;; Auto vars:     Size  Location     Type
  6713 ;;		None
  6714 ;; Return value:  Size  Location     Type
  6715 ;;		None               void
  6716 ;; Registers used:
  6717 ;;		None
  6718 ;; Tracked objects:
  6719 ;;		On entry : 0/0
  6720 ;;		On exit  : 0/0
  6721 ;;		Unchanged: 0/0
  6722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6723 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6724 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6725 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6726 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6727 ;;Total ram usage:        0 bytes
  6728 ;; Hardware stack levels used:    1
  6729 ;; Hardware stack levels required when called:    3
  6730 ;; This function calls:
  6731 ;;		Nothing
  6732 ;; This function is called by:
  6733 ;;		_I2C_Write
  6734 ;;		_i2cAck
  6735 ;;		_I2C_Start
  6736 ;;		_I2C_ReStart
  6737 ;;		_I2C_Stop
  6738 ;; This function uses a non-reentrant model
  6739 ;;
  6740                           
  6741                           	psect	text45
  6742  0011A2                     __ptext45:
  6743                           	opt stack 0
  6744  0011A2                     _i2cLowSda:
  6745                           	opt stack 23
  6746                           
  6747                           ;I2C.c: 104: PORTCbits.RC1 = 0;
  6748                           
  6749                           ;incstack = 0
  6750  0011A2  9282               	bcf	3970,1,c	;volatile
  6751                           
  6752                           ;I2C.c: 105: TRISCbits.RC1 = 0;
  6753  0011A4  9294               	bcf	3988,1,c	;volatile
  6754                           
  6755                           ;I2C.c: 106: _delay((unsigned long)((2)*(8000000/4000000.0)));
  6756  0011A6  D000               	nop2		;2 cycle nop
  6757  0011A8  D000               	nop2		;2 cycle nop
  6758  0011AA  0012               	return		;funcret
  6759  0011AC                     __end_of_i2cLowSda:
  6760                           	opt stack 0
  6761                           tblptru	equ	0xFF8
  6762                           tblptrh	equ	0xFF7
  6763                           tblptrl	equ	0xFF6
  6764                           tablat	equ	0xFF5
  6765                           prodh	equ	0xFF4
  6766                           prodl	equ	0xFF3
  6767                           intcon	equ	0xFF2
  6768                           intcon2	equ	0xFF1
  6769                           postinc0	equ	0xFEE
  6770                           wreg	equ	0xFE8
  6771                           postdec1	equ	0xFE5
  6772                           fsr1l	equ	0xFE1
  6773                           indf2	equ	0xFDF
  6774                           postinc2	equ	0xFDE
  6775                           postdec2	equ	0xFDD
  6776                           fsr2h	equ	0xFDA
  6777                           fsr2l	equ	0xFD9
  6778                           status	equ	0xFD8
  6779                           
  6780 ;; *************** function _i2cLowScl *****************
  6781 ;; Defined at:
  6782 ;;		line 115 in file "I2C.c"
  6783 ;; Parameters:    Size  Location     Type
  6784 ;;		None
  6785 ;; Auto vars:     Size  Location     Type
  6786 ;;		None
  6787 ;; Return value:  Size  Location     Type
  6788 ;;		None               void
  6789 ;; Registers used:
  6790 ;;		None
  6791 ;; Tracked objects:
  6792 ;;		On entry : 0/0
  6793 ;;		On exit  : 0/0
  6794 ;;		Unchanged: 0/0
  6795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6796 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6797 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6798 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6799 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6800 ;;Total ram usage:        0 bytes
  6801 ;; Hardware stack levels used:    1
  6802 ;; Hardware stack levels required when called:    3
  6803 ;; This function calls:
  6804 ;;		Nothing
  6805 ;; This function is called by:
  6806 ;;		_I2C_Read
  6807 ;;		_I2C_Write
  6808 ;;		_i2cNack
  6809 ;;		_i2cAck
  6810 ;;		_I2C_Start
  6811 ;;		_I2C_ReStart
  6812 ;;		_I2C_Stop
  6813 ;; This function uses a non-reentrant model
  6814 ;;
  6815                           
  6816                           	psect	text46
  6817  0011AC                     __ptext46:
  6818                           	opt stack 0
  6819  0011AC                     _i2cLowScl:
  6820                           	opt stack 23
  6821                           
  6822                           ;I2C.c: 117: PORTCbits.RC2 = 0;
  6823                           
  6824                           ;incstack = 0
  6825  0011AC  9482               	bcf	3970,2,c	;volatile
  6826                           
  6827                           ;I2C.c: 118: TRISCbits.RC2 = 0;
  6828  0011AE  9494               	bcf	3988,2,c	;volatile
  6829                           
  6830                           ;I2C.c: 119: _delay((unsigned long)((1)*(8000000/4000000.0)));
  6831  0011B0  D000               	nop2		;2 cycle nop
  6832  0011B2  0012               	return		;funcret
  6833  0011B4                     __end_of_i2cLowScl:
  6834                           	opt stack 0
  6835                           tblptru	equ	0xFF8
  6836                           tblptrh	equ	0xFF7
  6837                           tblptrl	equ	0xFF6
  6838                           tablat	equ	0xFF5
  6839                           prodh	equ	0xFF4
  6840                           prodl	equ	0xFF3
  6841                           intcon	equ	0xFF2
  6842                           intcon2	equ	0xFF1
  6843                           postinc0	equ	0xFEE
  6844                           wreg	equ	0xFE8
  6845                           postdec1	equ	0xFE5
  6846                           fsr1l	equ	0xFE1
  6847                           indf2	equ	0xFDF
  6848                           postinc2	equ	0xFDE
  6849                           postdec2	equ	0xFDD
  6850                           fsr2h	equ	0xFDA
  6851                           fsr2l	equ	0xFD9
  6852                           status	equ	0xFD8
  6853                           
  6854 ;; *************** function _i2cHighSda *****************
  6855 ;; Defined at:
  6856 ;;		line 96 in file "I2C.c"
  6857 ;; Parameters:    Size  Location     Type
  6858 ;;		None
  6859 ;; Auto vars:     Size  Location     Type
  6860 ;;		None
  6861 ;; Return value:  Size  Location     Type
  6862 ;;		None               void
  6863 ;; Registers used:
  6864 ;;		None
  6865 ;; Tracked objects:
  6866 ;;		On entry : 0/0
  6867 ;;		On exit  : 0/0
  6868 ;;		Unchanged: 0/0
  6869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6870 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6871 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6872 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6873 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6874 ;;Total ram usage:        0 bytes
  6875 ;; Hardware stack levels used:    1
  6876 ;; Hardware stack levels required when called:    3
  6877 ;; This function calls:
  6878 ;;		Nothing
  6879 ;; This function is called by:
  6880 ;;		_I2C_Init
  6881 ;;		_I2C_Read
  6882 ;;		_I2C_Write
  6883 ;;		_i2cAck
  6884 ;;		_I2C_Start
  6885 ;;		_I2C_ReStart
  6886 ;;		_I2C_Stop
  6887 ;; This function uses a non-reentrant model
  6888 ;;
  6889                           
  6890                           	psect	text47
  6891  0011B4                     __ptext47:
  6892                           	opt stack 0
  6893  0011B4                     _i2cHighSda:
  6894                           	opt stack 25
  6895                           
  6896                           ;I2C.c: 98: TRISCbits.RC1 = 1;
  6897                           
  6898                           ;incstack = 0
  6899  0011B4  8294               	bsf	3988,1,c	;volatile
  6900                           
  6901                           ;I2C.c: 99: _delay((unsigned long)((2)*(8000000/4000000.0)));
  6902  0011B6  D000               	nop2		;2 cycle nop
  6903  0011B8  D000               	nop2		;2 cycle nop
  6904  0011BA  0012               	return		;funcret
  6905  0011BC                     __end_of_i2cHighSda:
  6906                           	opt stack 0
  6907                           tblptru	equ	0xFF8
  6908                           tblptrh	equ	0xFF7
  6909                           tblptrl	equ	0xFF6
  6910                           tablat	equ	0xFF5
  6911                           prodh	equ	0xFF4
  6912                           prodl	equ	0xFF3
  6913                           intcon	equ	0xFF2
  6914                           intcon2	equ	0xFF1
  6915                           postinc0	equ	0xFEE
  6916                           wreg	equ	0xFE8
  6917                           postdec1	equ	0xFE5
  6918                           fsr1l	equ	0xFE1
  6919                           indf2	equ	0xFDF
  6920                           postinc2	equ	0xFDE
  6921                           postdec2	equ	0xFDD
  6922                           fsr2h	equ	0xFDA
  6923                           fsr2l	equ	0xFD9
  6924                           status	equ	0xFD8
  6925                           
  6926 ;; *************** function _i2cHighScl *****************
  6927 ;; Defined at:
  6928 ;;		line 109 in file "I2C.c"
  6929 ;; Parameters:    Size  Location     Type
  6930 ;;		None
  6931 ;; Auto vars:     Size  Location     Type
  6932 ;;		None
  6933 ;; Return value:  Size  Location     Type
  6934 ;;		None               void
  6935 ;; Registers used:
  6936 ;;		wreg
  6937 ;; Tracked objects:
  6938 ;;		On entry : 0/0
  6939 ;;		On exit  : 0/0
  6940 ;;		Unchanged: 0/0
  6941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6942 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6943 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6944 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6945 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6946 ;;Total ram usage:        0 bytes
  6947 ;; Hardware stack levels used:    1
  6948 ;; Hardware stack levels required when called:    3
  6949 ;; This function calls:
  6950 ;;		Nothing
  6951 ;; This function is called by:
  6952 ;;		_I2C_Init
  6953 ;;		_I2C_Read
  6954 ;;		_I2C_Write
  6955 ;;		_i2cNack
  6956 ;;		_i2cAck
  6957 ;;		_I2C_Start
  6958 ;;		_I2C_ReStart
  6959 ;;		_I2C_Stop
  6960 ;; This function uses a non-reentrant model
  6961 ;;
  6962                           
  6963                           	psect	text48
  6964  001176                     __ptext48:
  6965                           	opt stack 0
  6966  001176                     _i2cHighScl:
  6967                           	opt stack 25
  6968                           
  6969                           ;I2C.c: 111: TRISCbits.RC2 = 1;
  6970                           
  6971                           ;incstack = 0
  6972  001176  8494               	bsf	3988,2,c	;volatile
  6973                           
  6974                           ;I2C.c: 112: _delay((unsigned long)((10)*(8000000/4000000.0)));
  6975  001178  0E06               	movlw	6
  6976  00117A                     u2687:
  6977  00117A  2EE8               	decfsz	wreg,f,c
  6978  00117C  D7FE               	goto	u2687
  6979  00117E  D000               	nop2		;nop
  6980  001180  0012               	return		;funcret
  6981  001182                     __end_of_i2cHighScl:
  6982                           	opt stack 0
  6983                           tblptru	equ	0xFF8
  6984                           tblptrh	equ	0xFF7
  6985                           tblptrl	equ	0xFF6
  6986                           tablat	equ	0xFF5
  6987                           prodh	equ	0xFF4
  6988                           prodl	equ	0xFF3
  6989                           intcon	equ	0xFF2
  6990                           intcon2	equ	0xFF1
  6991                           postinc0	equ	0xFEE
  6992                           wreg	equ	0xFE8
  6993                           postdec1	equ	0xFE5
  6994                           fsr1l	equ	0xFE1
  6995                           indf2	equ	0xFDF
  6996                           postinc2	equ	0xFDE
  6997                           postdec2	equ	0xFDD
  6998                           fsr2h	equ	0xFDA
  6999                           fsr2l	equ	0xFD9
  7000                           status	equ	0xFD8
  7001                           
  7002 ;; *************** function _chkisr *****************
  7003 ;; Defined at:
  7004 ;;		line 28 in file "Interrupt.c"
  7005 ;; Parameters:    Size  Location     Type
  7006 ;;		None
  7007 ;; Auto vars:     Size  Location     Type
  7008 ;;		None
  7009 ;; Return value:  Size  Location     Type
  7010 ;;		None               void
  7011 ;; Registers used:
  7012 ;;		wreg, status,2, status,0, cstack
  7013 ;; Tracked objects:
  7014 ;;		On entry : 0/0
  7015 ;;		On exit  : 0/0
  7016 ;;		Unchanged: 0/0
  7017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7018 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7019 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7020 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7021 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7022 ;;Total ram usage:       14 bytes
  7023 ;; Hardware stack levels used:    1
  7024 ;; Hardware stack levels required when called:    2
  7025 ;; This function calls:
  7026 ;;		_INT0_isr
  7027 ;;		_TIMER1_isr
  7028 ;; This function is called by:
  7029 ;;		Interrupt level 2
  7030 ;; This function uses a non-reentrant model
  7031 ;;
  7032                           
  7033                           	psect	intcode
  7034  000008                     __pintcode:
  7035                           	opt stack 0
  7036  000008                     _chkisr:
  7037                           	opt stack 19
  7038                           
  7039                           ;incstack = 0
  7040  000008  CFFA F003          	movff	pclath,??_chkisr
  7041  00000C  CFFB F004          	movff	pclatu,??_chkisr+1
  7042  000010  CFE9 F005          	movff	fsr0l,??_chkisr+2
  7043  000014  EDE1  F004         	call	int_func,f	;refresh shadow registers
  7044                           pclatu	equ	0xFFB
  7045                           pclath	equ	0xFFA
  7046                           tblptru	equ	0xFF8
  7047                           tblptrh	equ	0xFF7
  7048                           tblptrl	equ	0xFF6
  7049                           tablat	equ	0xFF5
  7050                           prodh	equ	0xFF4
  7051                           prodl	equ	0xFF3
  7052                           intcon	equ	0xFF2
  7053                           intcon2	equ	0xFF1
  7054                           postinc0	equ	0xFEE
  7055                           fsr0l	equ	0xFE9
  7056                           wreg	equ	0xFE8
  7057                           postdec1	equ	0xFE5
  7058                           fsr1l	equ	0xFE1
  7059                           indf2	equ	0xFDF
  7060                           postinc2	equ	0xFDE
  7061                           postdec2	equ	0xFDD
  7062                           fsr2h	equ	0xFDA
  7063                           fsr2l	equ	0xFD9
  7064                           status	equ	0xFD8
  7065                           
  7066                           	psect	intcode_body
  7067  0009C2                     __pintcode_body:
  7068                           	opt stack 19
  7069  0009C2                     int_func:
  7070                           	opt stack 19
  7071  0009C2  0006               	pop		; remove dummy address from shadow register refresh
  7072  0009C4  CFEA F006          	movff	fsr0h,??_chkisr+3
  7073  0009C8  CFE1 F007          	movff	fsr1l,??_chkisr+4
  7074  0009CC  CFE2 F008          	movff	fsr1h,??_chkisr+5
  7075  0009D0  CFD9 F009          	movff	fsr2l,??_chkisr+6
  7076  0009D4  CFDA F00A          	movff	fsr2h,??_chkisr+7
  7077  0009D8  CFF3 F00B          	movff	prodl,??_chkisr+8
  7078  0009DC  CFF4 F00C          	movff	prodh,??_chkisr+9
  7079  0009E0  CFF6 F00D          	movff	tblptrl,??_chkisr+10
  7080  0009E4  CFF7 F00E          	movff	tblptrh,??_chkisr+11
  7081  0009E8  CFF8 F00F          	movff	tblptru,??_chkisr+12
  7082  0009EC  CFF5 F010          	movff	tablat,??_chkisr+13
  7083                           
  7084                           ;Interrupt.c: 30: if (PIR1bits.TMR1IF == 1) TIMER1_isr();
  7085  0009F0  A09E               	btfss	3998,0,c	;volatile
  7086  0009F2  D003               	goto	i2l2212
  7087  0009F4  ECC1  F008         	call	_TIMER1_isr	;wreg free
  7088  0009F8  D000               	goto	i2l2212
  7089  0009FA                     i2l2212:
  7090                           
  7091                           ;Interrupt.c: 31: if (INTCONbits.INT0IF == 1) INT0_isr();
  7092  0009FA  A2F2               	btfss	intcon,1,c	;volatile
  7093  0009FC  D003               	goto	i2l221
  7094  0009FE  EC0E  F000         	call	_INT0_isr	;wreg free
  7095  000A02  D000               	goto	i2l221
  7096  000A04                     i2l221:
  7097  000A04  C010  FFF5         	movff	??_chkisr+13,tablat
  7098  000A08  C00F  FFF8         	movff	??_chkisr+12,tblptru
  7099  000A0C  C00E  FFF7         	movff	??_chkisr+11,tblptrh
  7100  000A10  C00D  FFF6         	movff	??_chkisr+10,tblptrl
  7101  000A14  C00C  FFF4         	movff	??_chkisr+9,prodh
  7102  000A18  C00B  FFF3         	movff	??_chkisr+8,prodl
  7103  000A1C  C00A  FFDA         	movff	??_chkisr+7,fsr2h
  7104  000A20  C009  FFD9         	movff	??_chkisr+6,fsr2l
  7105  000A24  C008  FFE2         	movff	??_chkisr+5,fsr1h
  7106  000A28  C007  FFE1         	movff	??_chkisr+4,fsr1l
  7107  000A2C  C006  FFEA         	movff	??_chkisr+3,fsr0h
  7108  000A30  C005  FFE9         	movff	??_chkisr+2,fsr0l
  7109  000A34  C004  FFFB         	movff	??_chkisr+1,pclatu
  7110  000A38  C003  FFFA         	movff	??_chkisr,pclath
  7111  000A3C  0011               	retfie		f
  7112  000A3E                     __end_of_chkisr:
  7113                           	opt stack 0
  7114                           pclatu	equ	0xFFB
  7115                           pclath	equ	0xFFA
  7116                           tblptru	equ	0xFF8
  7117                           tblptrh	equ	0xFF7
  7118                           tblptrl	equ	0xFF6
  7119                           tablat	equ	0xFF5
  7120                           prodh	equ	0xFF4
  7121                           prodl	equ	0xFF3
  7122                           intcon	equ	0xFF2
  7123                           intcon2	equ	0xFF1
  7124                           postinc0	equ	0xFEE
  7125                           fsr0h	equ	0xFEA
  7126                           fsr0l	equ	0xFE9
  7127                           wreg	equ	0xFE8
  7128                           postdec1	equ	0xFE5
  7129                           fsr1h	equ	0xFE2
  7130                           fsr1l	equ	0xFE1
  7131                           indf2	equ	0xFDF
  7132                           postinc2	equ	0xFDE
  7133                           postdec2	equ	0xFDD
  7134                           fsr2h	equ	0xFDA
  7135                           fsr2l	equ	0xFD9
  7136                           status	equ	0xFD8
  7137                           
  7138 ;; *************** function _TIMER1_isr *****************
  7139 ;; Defined at:
  7140 ;;		line 34 in file "Interrupt.c"
  7141 ;; Parameters:    Size  Location     Type
  7142 ;;		None
  7143 ;; Auto vars:     Size  Location     Type
  7144 ;;		None
  7145 ;; Return value:  Size  Location     Type
  7146 ;;		None               void
  7147 ;; Registers used:
  7148 ;;		wreg, status,2
  7149 ;; Tracked objects:
  7150 ;;		On entry : 0/0
  7151 ;;		On exit  : 0/0
  7152 ;;		Unchanged: 0/0
  7153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7154 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7155 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7156 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7157 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7158 ;;Total ram usage:        0 bytes
  7159 ;; Hardware stack levels used:    1
  7160 ;; This function calls:
  7161 ;;		Nothing
  7162 ;; This function is called by:
  7163 ;;		_chkisr
  7164 ;; This function uses a non-reentrant model
  7165 ;;
  7166                           
  7167                           	psect	text50
  7168  001182                     __ptext50:
  7169                           	opt stack 0
  7170  001182                     _TIMER1_isr:
  7171                           	opt stack 20
  7172                           
  7173                           ;Interrupt.c: 36: Nec_state = 0;
  7174                           
  7175                           ;incstack = 0
  7176  001182  0E00               	movlw	0
  7177  001184  6E4D               	movwf	_Nec_state,c
  7178                           
  7179                           ;Interrupt.c: 37: INTCON2bits.INTEDG0 = 0;
  7180  001186  9CF1               	bcf	intcon2,6,c	;volatile
  7181                           
  7182                           ;Interrupt.c: 38: T1CONbits.TMR1ON = 0;
  7183  001188  90CD               	bcf	4045,0,c	;volatile
  7184                           
  7185                           ;Interrupt.c: 39: PIR1bits.TMR1IF = 0;
  7186  00118A  909E               	bcf	3998,0,c	;volatile
  7187  00118C  0012               	return		;funcret
  7188  00118E                     __end_of_TIMER1_isr:
  7189                           	opt stack 0
  7190                           pclatu	equ	0xFFB
  7191                           pclath	equ	0xFFA
  7192                           tblptru	equ	0xFF8
  7193                           tblptrh	equ	0xFF7
  7194                           tblptrl	equ	0xFF6
  7195                           tablat	equ	0xFF5
  7196                           prodh	equ	0xFF4
  7197                           prodl	equ	0xFF3
  7198                           intcon	equ	0xFF2
  7199                           intcon2	equ	0xFF1
  7200                           postinc0	equ	0xFEE
  7201                           fsr0h	equ	0xFEA
  7202                           fsr0l	equ	0xFE9
  7203                           wreg	equ	0xFE8
  7204                           postdec1	equ	0xFE5
  7205                           fsr1h	equ	0xFE2
  7206                           fsr1l	equ	0xFE1
  7207                           indf2	equ	0xFDF
  7208                           postinc2	equ	0xFDE
  7209                           postdec2	equ	0xFDD
  7210                           fsr2h	equ	0xFDA
  7211                           fsr2l	equ	0xFD9
  7212                           status	equ	0xFD8
  7213                           
  7214 ;; *************** function _INT0_isr *****************
  7215 ;; Defined at:
  7216 ;;		line 48 in file "Interrupt.c"
  7217 ;; Parameters:    Size  Location     Type
  7218 ;;		None
  7219 ;; Auto vars:     Size  Location     Type
  7220 ;;		None
  7221 ;; Return value:  Size  Location     Type
  7222 ;;		None               void
  7223 ;; Registers used:
  7224 ;;		wreg, status,2, status,0, cstack
  7225 ;; Tracked objects:
  7226 ;;		On entry : 0/0
  7227 ;;		On exit  : 0/0
  7228 ;;		Unchanged: 0/0
  7229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7230 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7231 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7232 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7233 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7234 ;;Total ram usage:        2 bytes
  7235 ;; Hardware stack levels used:    1
  7236 ;; Hardware stack levels required when called:    1
  7237 ;; This function calls:
  7238 ;;		_force_nec_state0
  7239 ;; This function is called by:
  7240 ;;		_chkisr
  7241 ;; This function uses a non-reentrant model
  7242 ;;
  7243                           
  7244                           	psect	text51
  7245  00001C                     __ptext51:
  7246                           	opt stack 0
  7247  00001C                     _INT0_isr:
  7248                           	opt stack 19
  7249                           
  7250                           ;Interrupt.c: 51: INTCONbits.INT0IF = 0;
  7251                           
  7252                           ;incstack = 0
  7253  00001C  92F2               	bcf	intcon,1,c	;volatile
  7254                           
  7255                           ;Interrupt.c: 52: if (Nec_state != 0)
  7256  00001E  504D               	movf	_Nec_state,w,c
  7257  000020  B4D8               	btfsc	status,2,c
  7258  000022  D09A               	goto	i2l1938
  7259                           
  7260                           ;Interrupt.c: 53: {
  7261                           ;Interrupt.c: 54: Time_Elapsed = (TMR1H << 8) | TMR1L;
  7262  000024  50CE               	movf	4046,w,c	;volatile
  7263  000026  CFCF F001          	movff	4047,??_INT0_isr	;volatile
  7264  00002A  6A02               	clrf	(??_INT0_isr+1)& (0+255),c
  7265  00002C  C001  F002         	movff	??_INT0_isr,??_INT0_isr+1
  7266  000030  6A01               	clrf	??_INT0_isr,c
  7267  000032  1001               	iorwf	??_INT0_isr,w,c
  7268  000034  6E41               	movwf	_Time_Elapsed,c
  7269  000036  5002               	movf	??_INT0_isr+1,w,c
  7270  000038  6E42               	movwf	_Time_Elapsed+1,c
  7271                           
  7272                           ;Interrupt.c: 55: TMR1H = 0;
  7273  00003A  0E00               	movlw	0
  7274  00003C  6ECF               	movwf	4047,c	;volatile
  7275                           
  7276                           ;Interrupt.c: 56: TMR1L = 0;
  7277  00003E  0E00               	movlw	0
  7278  000040  6ECE               	movwf	4046,c	;volatile
  7279                           
  7280                           ;Interrupt.c: 57: }
  7281                           ;Interrupt.c: 59: switch(Nec_state)
  7282  000042  D08A               	goto	i2l1938
  7283  000044                     i2l1872:
  7284                           
  7285                           ;Interrupt.c: 62: {
  7286                           ;Interrupt.c: 63: TMR1H = 0;
  7287  000044  0E00               	movlw	0
  7288  000046  6ECF               	movwf	4047,c	;volatile
  7289                           
  7290                           ;Interrupt.c: 64: TMR1L = 0;
  7291  000048  0E00               	movlw	0
  7292  00004A  6ECE               	movwf	4046,c	;volatile
  7293                           
  7294                           ;Interrupt.c: 65: PIR1bits.TMR1IF = 0;
  7295  00004C  909E               	bcf	3998,0,c	;volatile
  7296                           
  7297                           ;Interrupt.c: 66: T1CON= 0x90;
  7298  00004E  0E90               	movlw	144
  7299  000050  6ECD               	movwf	4045,c	;volatile
  7300                           
  7301                           ;Interrupt.c: 67: T1CONbits.TMR1ON = 1;
  7302  000052  80CD               	bsf	4045,0,c	;volatile
  7303                           
  7304                           ;Interrupt.c: 68: bit_count = 0;
  7305  000054  0E00               	movlw	0
  7306  000056  6E54               	movwf	_bit_count,c
  7307                           
  7308                           ;Interrupt.c: 69: Nec_code = 0;
  7309  000058  0E00               	movlw	0
  7310  00005A  6E3D               	movwf	_Nec_code,c
  7311  00005C  0E00               	movlw	0
  7312  00005E  6E3E               	movwf	_Nec_code+1,c
  7313  000060  0E00               	movlw	0
  7314  000062  6E3F               	movwf	_Nec_code+2,c
  7315  000064  0E00               	movlw	0
  7316  000066  6E40               	movwf	_Nec_code+3,c
  7317                           
  7318                           ;Interrupt.c: 70: Nec_state = 1;
  7319  000068  0E01               	movlw	1
  7320  00006A  6E4D               	movwf	_Nec_state,c
  7321  00006C  D073               	goto	i2l1932
  7322                           
  7323                           ;Interrupt.c: 72: return;
  7324                           
  7325                           ;Interrupt.c: 71: INTCON2bits.INTEDG0 = 1;
  7326  00006E  D085               	goto	i2l233
  7327  000070                     i2l1882:
  7328                           
  7329                           ;Interrupt.c: 76: {
  7330                           ;Interrupt.c: 77: if (Time_Elapsed > 8500 && Time_Elapsed < 9500)
  7331  000070  0E35               	movlw	53
  7332  000072  5C41               	subwf	_Time_Elapsed,w,c
  7333  000074  0E21               	movlw	33
  7334  000076  5842               	subwfb	_Time_Elapsed+1,w,c
  7335  000078  A0D8               	btfss	status,0,c
  7336  00007A  D009               	goto	i2l1888
  7337  00007C  0E1C               	movlw	28
  7338  00007E  5C41               	subwf	_Time_Elapsed,w,c
  7339  000080  0E25               	movlw	37
  7340  000082  5842               	subwfb	_Time_Elapsed+1,w,c
  7341  000084  B0D8               	btfsc	status,0,c
  7342  000086  D003               	goto	i2l1888
  7343                           
  7344                           ;Interrupt.c: 78: {
  7345                           ;Interrupt.c: 79: Nec_state = 2;
  7346  000088  0E02               	movlw	2
  7347  00008A  6E4D               	movwf	_Nec_state,c
  7348                           
  7349                           ;Interrupt.c: 80: }
  7350  00008C  D02A               	goto	i2l1914
  7351  00008E                     i2l1888:
  7352                           
  7353                           ;Interrupt.c: 81: else
  7354                           ;Interrupt.c: 82: {
  7355                           ;Interrupt.c: 83: force_nec_state0();
  7356  00008E  ECDE  F008         	call	_force_nec_state0	;wreg free
  7357  000092  D027               	goto	i2l1914
  7358  000094  D026               	goto	i2l1914
  7359                           
  7360                           ;Interrupt.c: 86: return;
  7361                           
  7362                           ;Interrupt.c: 84: }
  7363                           ;Interrupt.c: 85: INTCON2bits.INTEDG0 = 0;
  7364  000096  D071               	goto	i2l233
  7365  000098                     i2l1894:
  7366                           
  7367                           ;Interrupt.c: 90: {
  7368                           ;Interrupt.c: 91: if (Time_Elapsed > 4000 && Time_Elapsed < 5000 )
  7369  000098  0EA1               	movlw	161
  7370  00009A  5C41               	subwf	_Time_Elapsed,w,c
  7371  00009C  0E0F               	movlw	15
  7372  00009E  5842               	subwfb	_Time_Elapsed+1,w,c
  7373  0000A0  A0D8               	btfss	status,0,c
  7374  0000A2  D009               	goto	i2l1900
  7375  0000A4  0E88               	movlw	136
  7376  0000A6  5C41               	subwf	_Time_Elapsed,w,c
  7377  0000A8  0E13               	movlw	19
  7378  0000AA  5842               	subwfb	_Time_Elapsed+1,w,c
  7379  0000AC  B0D8               	btfsc	status,0,c
  7380  0000AE  D003               	goto	i2l1900
  7381  0000B0                     
  7382                           ;Interrupt.c: 92: {
  7383                           ;Interrupt.c: 93: Nec_state = 3;
  7384  0000B0  0E03               	movlw	3
  7385  0000B2  6E4D               	movwf	_Nec_state,c
  7386                           
  7387                           ;Interrupt.c: 94: }
  7388  0000B4  D04F               	goto	i2l1932
  7389  0000B6                     i2l1900:
  7390                           
  7391                           ;Interrupt.c: 95: else
  7392                           ;Interrupt.c: 96: {
  7393                           ;Interrupt.c: 97: force_nec_state0();
  7394  0000B6  ECDE  F008         	call	_force_nec_state0	;wreg free
  7395  0000BA  D04C               	goto	i2l1932
  7396  0000BC  D04B               	goto	i2l1932
  7397                           
  7398                           ;Interrupt.c: 100: return;
  7399                           
  7400                           ;Interrupt.c: 98: }
  7401                           ;Interrupt.c: 99: INTCON2bits.INTEDG0 = 1;
  7402  0000BE  D05D               	goto	i2l233
  7403  0000C0                     i2l1906:
  7404                           
  7405                           ;Interrupt.c: 104: {
  7406                           ;Interrupt.c: 105: if (Time_Elapsed > 400 && Time_Elapsed < 700)
  7407  0000C0  0E91               	movlw	145
  7408  0000C2  5C41               	subwf	_Time_Elapsed,w,c
  7409  0000C4  0E01               	movlw	1
  7410  0000C6  5842               	subwfb	_Time_Elapsed+1,w,c
  7411  0000C8  A0D8               	btfss	status,0,c
  7412  0000CA  D008               	goto	i2l1912
  7413  0000CC  0EBC               	movlw	188
  7414  0000CE  5C41               	subwf	_Time_Elapsed,w,c
  7415  0000D0  0E02               	movlw	2
  7416  0000D2  5842               	subwfb	_Time_Elapsed+1,w,c
  7417  0000D4  B0D8               	btfsc	status,0,c
  7418  0000D6  D002               	goto	i2l1912
  7419                           
  7420                           ;Interrupt.c: 106: {
  7421                           ;Interrupt.c: 107: Nec_state = 4;
  7422  0000D8  0E04               	movlw	4
  7423  0000DA  D7D7               	goto	L2
  7424  0000DC                     i2l1912:
  7425                           
  7426                           ;Interrupt.c: 109: else
  7427                           ;Interrupt.c: 110: {
  7428                           ;Interrupt.c: 111: force_nec_state0();
  7429  0000DC  ECDE  F008         	call	_force_nec_state0	;wreg free
  7430  0000E0  D000               	goto	i2l1914
  7431  0000E2                     i2l1914:
  7432                           
  7433                           ;Interrupt.c: 112: }
  7434                           ;Interrupt.c: 113: INTCON2bits.INTEDG0 = 0;
  7435  0000E2  9CF1               	bcf	intcon2,6,c	;volatile
  7436                           
  7437                           ;Interrupt.c: 114: return;
  7438  0000E4  D04A               	goto	i2l233
  7439  0000E6                     i2l1918:
  7440                           
  7441                           ;Interrupt.c: 118: {
  7442                           ;Interrupt.c: 119: if (Time_Elapsed > 400 && Time_Elapsed < 1800)
  7443  0000E6  0E91               	movlw	145
  7444  0000E8  5C41               	subwf	_Time_Elapsed,w,c
  7445  0000EA  0E01               	movlw	1
  7446  0000EC  5842               	subwfb	_Time_Elapsed+1,w,c
  7447  0000EE  A0D8               	btfss	status,0,c
  7448  0000F0  D02E               	goto	i2l1930
  7449  0000F2  0E08               	movlw	8
  7450  0000F4  5C41               	subwf	_Time_Elapsed,w,c
  7451  0000F6  0E07               	movlw	7
  7452  0000F8  5842               	subwfb	_Time_Elapsed+1,w,c
  7453  0000FA  B0D8               	btfsc	status,0,c
  7454  0000FC  D028               	goto	i2l1930
  7455                           
  7456                           ;Interrupt.c: 120: {
  7457                           ;Interrupt.c: 121: Nec_code = Nec_code << 1;
  7458  0000FE  90D8               	bcf	status,0,c
  7459  000100  343D               	rlcf	_Nec_code,w,c
  7460  000102  6E3D               	movwf	_Nec_code,c
  7461  000104  343E               	rlcf	_Nec_code+1,w,c
  7462  000106  6E3E               	movwf	_Nec_code+1,c
  7463  000108  343F               	rlcf	_Nec_code+2,w,c
  7464  00010A  6E3F               	movwf	_Nec_code+2,c
  7465  00010C  3440               	rlcf	_Nec_code+3,w,c
  7466  00010E  6E40               	movwf	_Nec_code+3,c
  7467                           
  7468                           ;Interrupt.c: 122: if (Time_Elapsed > 1000)
  7469  000110  0EE9               	movlw	233
  7470  000112  5C41               	subwf	_Time_Elapsed,w,c
  7471  000114  0E03               	movlw	3
  7472  000116  5842               	subwfb	_Time_Elapsed+1,w,c
  7473  000118  A0D8               	btfss	status,0,c
  7474  00011A  D00C               	goto	i2l245
  7475                           
  7476                           ;Interrupt.c: 123: {
  7477                           ;Interrupt.c: 124: Nec_code = Nec_code + 1;
  7478  00011C  0E01               	movlw	1
  7479  00011E  243D               	addwf	_Nec_code,w,c
  7480  000120  6E3D               	movwf	_Nec_code,c
  7481  000122  0E00               	movlw	0
  7482  000124  203E               	addwfc	_Nec_code+1,w,c
  7483  000126  6E3E               	movwf	_Nec_code+1,c
  7484  000128  0E00               	movlw	0
  7485  00012A  203F               	addwfc	_Nec_code+2,w,c
  7486  00012C  6E3F               	movwf	_Nec_code+2,c
  7487  00012E  0E00               	movlw	0
  7488  000130  2040               	addwfc	_Nec_code+3,w,c
  7489  000132  6E40               	movwf	_Nec_code+3,c
  7490  000134                     i2l245:
  7491                           
  7492                           ;Interrupt.c: 125: }
  7493                           ;Interrupt.c: 126: bit_count = bit_count + 1;
  7494  000134  2854               	incf	_bit_count,w,c
  7495  000136  6E54               	movwf	_bit_count,c
  7496                           
  7497                           ;Interrupt.c: 127: if (bit_count > 31)
  7498  000138  0E1F               	movlw	31
  7499  00013A  6454               	cpfsgt	_bit_count,c
  7500  00013C  D7B9               	goto	L3
  7501                           
  7502                           ;Interrupt.c: 128: {
  7503                           ;Interrupt.c: 129: nec_ok = 1;
  7504  00013E  0E00               	movlw	0
  7505  000140  6E46               	movwf	_nec_ok+1,c
  7506  000142  0E01               	movlw	1
  7507  000144  6E45               	movwf	_nec_ok,c
  7508                           
  7509                           ;Interrupt.c: 130: INTCONbits.INT0IE = 0;
  7510  000146  98F2               	bcf	intcon,4,c	;volatile
  7511                           
  7512                           ;Interrupt.c: 131: Nec_state = 0;
  7513  000148  0E00               	movlw	0
  7514  00014A  6E4D               	movwf	_Nec_state,c
  7515  00014C  D7B1               	goto	L3
  7516  00014E                     i2l1930:
  7517                           
  7518                           ;Interrupt.c: 135: else
  7519                           ;Interrupt.c: 136: {
  7520                           ;Interrupt.c: 137: force_nec_state0();
  7521  00014E  ECDE  F008         	call	_force_nec_state0	;wreg free
  7522  000152  D000               	goto	i2l1932
  7523  000154                     i2l1932:
  7524                           
  7525                           ;Interrupt.c: 138: }
  7526                           ;Interrupt.c: 139: INTCON2bits.INTEDG0 = 1;
  7527  000154  8CF1               	bsf	intcon2,6,c	;volatile
  7528                           
  7529                           ;Interrupt.c: 141: }
  7530                           ;Interrupt.c: 142: }
  7531                           
  7532                           ;Interrupt.c: 140: return;
  7533  000156  D011               	goto	i2l233
  7534  000158                     i2l1938:
  7535  000158  504D               	movf	_Nec_state,w,c
  7536                           
  7537                           ; Switch size 1, requested type "space"
  7538                           ; Number of cases is 5, Range of values is 0 to 4
  7539                           ; switch strategies available:
  7540                           ; Name         Instructions Cycles
  7541                           ; simple_byte           16     9 (average)
  7542                           ;	Chosen strategy is simple_byte
  7543  00015A  0A00               	xorlw	0	; case 0
  7544  00015C  B4D8               	btfsc	status,2,c
  7545  00015E  D772               	goto	i2l1872
  7546  000160  0A01               	xorlw	1	; case 1
  7547  000162  B4D8               	btfsc	status,2,c
  7548  000164  D785               	goto	i2l1882
  7549  000166  0A03               	xorlw	3	; case 2
  7550  000168  B4D8               	btfsc	status,2,c
  7551  00016A  D796               	goto	i2l1894
  7552  00016C  0A01               	xorlw	1	; case 3
  7553  00016E  B4D8               	btfsc	status,2,c
  7554  000170  D7A7               	goto	i2l1906
  7555  000172  0A07               	xorlw	7	; case 4
  7556  000174  B4D8               	btfsc	status,2,c
  7557  000176  D7B7               	goto	i2l1918
  7558  000178  D000               	goto	i2l233
  7559  00017A                     i2l233:
  7560  00017A  0012               	return		;funcret
  7561  00017C                     __end_of_INT0_isr:
  7562                           	opt stack 0
  7563                           pclatu	equ	0xFFB
  7564                           pclath	equ	0xFFA
  7565                           tblptru	equ	0xFF8
  7566                           tblptrh	equ	0xFF7
  7567                           tblptrl	equ	0xFF6
  7568                           tablat	equ	0xFF5
  7569                           prodh	equ	0xFF4
  7570                           prodl	equ	0xFF3
  7571                           intcon	equ	0xFF2
  7572                           intcon2	equ	0xFF1
  7573                           postinc0	equ	0xFEE
  7574                           fsr0h	equ	0xFEA
  7575                           fsr0l	equ	0xFE9
  7576                           wreg	equ	0xFE8
  7577                           postdec1	equ	0xFE5
  7578                           fsr1h	equ	0xFE2
  7579                           fsr1l	equ	0xFE1
  7580                           indf2	equ	0xFDF
  7581                           postinc2	equ	0xFDE
  7582                           postdec2	equ	0xFDD
  7583                           fsr2h	equ	0xFDA
  7584                           fsr2l	equ	0xFD9
  7585                           status	equ	0xFD8
  7586                           
  7587 ;; *************** function _force_nec_state0 *****************
  7588 ;; Defined at:
  7589 ;;		line 42 in file "Interrupt.c"
  7590 ;; Parameters:    Size  Location     Type
  7591 ;;		None
  7592 ;; Auto vars:     Size  Location     Type
  7593 ;;		None
  7594 ;; Return value:  Size  Location     Type
  7595 ;;		None               void
  7596 ;; Registers used:
  7597 ;;		wreg, status,2
  7598 ;; Tracked objects:
  7599 ;;		On entry : 0/0
  7600 ;;		On exit  : 0/0
  7601 ;;		Unchanged: 0/0
  7602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7603 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7604 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7605 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7606 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7607 ;;Total ram usage:        0 bytes
  7608 ;; Hardware stack levels used:    1
  7609 ;; This function calls:
  7610 ;;		Nothing
  7611 ;; This function is called by:
  7612 ;;		_INT0_isr
  7613 ;; This function uses a non-reentrant model
  7614 ;;
  7615                           
  7616                           	psect	text52
  7617  0011BC                     __ptext52:
  7618                           	opt stack 0
  7619  0011BC                     _force_nec_state0:
  7620                           	opt stack 19
  7621                           
  7622                           ;Interrupt.c: 44: Nec_state=0;
  7623                           
  7624                           ;incstack = 0
  7625  0011BC  0E00               	movlw	0
  7626  0011BE  6E4D               	movwf	_Nec_state,c
  7627                           
  7628                           ;Interrupt.c: 45: T1CONbits.TMR1ON = 0;
  7629  0011C0  90CD               	bcf	4045,0,c	;volatile
  7630  0011C2  0012               	return		;funcret
  7631  0011C4                     __end_of_force_nec_state0:
  7632                           	opt stack 0
  7633                           pclatu	equ	0xFFB
  7634                           pclath	equ	0xFFA
  7635                           tblptru	equ	0xFF8
  7636                           tblptrh	equ	0xFF7
  7637                           tblptrl	equ	0xFF6
  7638                           tablat	equ	0xFF5
  7639                           prodh	equ	0xFF4
  7640                           prodl	equ	0xFF3
  7641                           intcon	equ	0xFF2
  7642                           intcon2	equ	0xFF1
  7643                           postinc0	equ	0xFEE
  7644                           fsr0h	equ	0xFEA
  7645                           fsr0l	equ	0xFE9
  7646                           wreg	equ	0xFE8
  7647                           postdec1	equ	0xFE5
  7648                           fsr1h	equ	0xFE2
  7649                           fsr1l	equ	0xFE1
  7650                           indf2	equ	0xFDF
  7651                           postinc2	equ	0xFDE
  7652                           postdec2	equ	0xFDD
  7653                           fsr2h	equ	0xFDA
  7654                           fsr2l	equ	0xFD9
  7655                           status	equ	0xFD8
  7656                           pclatu	equ	0xFFB
  7657                           pclath	equ	0xFFA
  7658                           tblptru	equ	0xFF8
  7659                           tblptrh	equ	0xFF7
  7660                           tblptrl	equ	0xFF6
  7661                           tablat	equ	0xFF5
  7662                           prodh	equ	0xFF4
  7663                           prodl	equ	0xFF3
  7664                           intcon	equ	0xFF2
  7665                           intcon2	equ	0xFF1
  7666                           postinc0	equ	0xFEE
  7667                           fsr0h	equ	0xFEA
  7668                           fsr0l	equ	0xFE9
  7669                           wreg	equ	0xFE8
  7670                           postdec1	equ	0xFE5
  7671                           fsr1h	equ	0xFE2
  7672                           fsr1l	equ	0xFE1
  7673                           indf2	equ	0xFDF
  7674                           postinc2	equ	0xFDE
  7675                           postdec2	equ	0xFDD
  7676                           fsr2h	equ	0xFDA
  7677                           fsr2l	equ	0xFD9
  7678                           status	equ	0xFD8
  7679                           
  7680                           	psect	rparam
  7681  0000                     pclatu	equ	0xFFB
  7682                           pclath	equ	0xFFA
  7683                           tblptru	equ	0xFF8
  7684                           tblptrh	equ	0xFF7
  7685                           tblptrl	equ	0xFF6
  7686                           tablat	equ	0xFF5
  7687                           prodh	equ	0xFF4
  7688                           prodl	equ	0xFF3
  7689                           intcon	equ	0xFF2
  7690                           intcon2	equ	0xFF1
  7691                           postinc0	equ	0xFEE
  7692                           fsr0h	equ	0xFEA
  7693                           fsr0l	equ	0xFE9
  7694                           wreg	equ	0xFE8
  7695                           postdec1	equ	0xFE5
  7696                           fsr1h	equ	0xFE2
  7697                           fsr1l	equ	0xFE1
  7698                           indf2	equ	0xFDF
  7699                           postinc2	equ	0xFDE
  7700                           postdec2	equ	0xFDD
  7701                           fsr2h	equ	0xFDA
  7702                           fsr2l	equ	0xFD9
  7703                           status	equ	0xFD8


Data Sizes:
    Strings     71
    Constant    485
    Data        159
    BSS         78
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     60     109
    BANK0           128     15     119
    BANK1           256      0      84
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_3(CODE[8]), STR_2(CODE[20]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 43
		 -> STR_1(CODE[43]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    txt	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 


Critical Paths under _main in COMRAM

    _printf->___lwmod
    ___lwmod->___lwdiv
    ___awdiv->___wmul
    _init_UART->_OpenUSART
    _Initialize_Screen->_drawtext
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _write_data->_spiwrite
    _write_command->_spiwrite
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul
    _DS1621_Init->_I2C_Write_Cmd_Write_Data
    _I2C_Write_Cmd_Write_Data->_I2C_Write
    _I2C_Write_Cmd_Only->_I2C_Write
    _DS1621_Read_Temp->_I2C_Read

Critical Paths under _chkisr in COMRAM

    _chkisr->_INT0_isr

Critical Paths under _main in BANK0

    _Initialize_Screen->_drawtext

Critical Paths under _chkisr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _chkisr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _chkisr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _chkisr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _chkisr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _chkisr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _chkisr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _chkisr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _chkisr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _chkisr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _chkisr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _chkisr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _chkisr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _chkisr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _chkisr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _chkisr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   23821
                                             58 COMRAM     2     2      0
                   _DS1621_Read_Temp
                            _Do_Init
                       _Wait_One_Sec
                            ___awdiv
                             ___wmul
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              23    17      6     987
                                             28 COMRAM    14     8      6
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      15
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     265
                                             23 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     268
                                             16 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              8     4      4     406
                                             22 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Wait_One_Sec                                         0     0      0       0
                   _Wait_Half_Second
 ---------------------------------------------------------------------------------
 (2) _Wait_Half_Second                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Do_Init                                              0     0      0   21336
                        _DS1621_Init
                           _I2C_Init
                  _Initialize_Screen
                     _init_INTERRUPT
                          _init_UART
 ---------------------------------------------------------------------------------
 (2) _init_UART                                            0     0      0     273
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (3) _OpenUSART                                            3     1      2     273
                                             16 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _init_INTERRUPT                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Initialize_Screen                                    0     0      0   20576
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                           _drawtext
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _strcpy                                               6     2      4     287
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _fillScreen                                           2     0      2    2192
                                             35 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (4) _fillRectangle                                       12     7      5    2096
                                             23 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (3) _drawtext                                            17     9      8   12201
                                             56 COMRAM     2     2      0
                                              0 BANK0     15     7      8
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (4) _strlen                                               6     4      2     195
                                             16 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (4) _drawChar                                            11     4      7   10644
                                             45 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (5) _fillRect                                            11     6      5    3876
                                             34 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (6) _drawFastVLine                                       11     7      4    3102
                                             23 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (5) _drawPixel                                            4     1      3    4207
                                             23 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (5) _setAddrWindow                                        4     1      3    1034
                                             19 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _TFT_GreenTab_Initialize                              0     0      0    4104
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (4) _Rcmd3                                                0     0      0    1922
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (4) _Rcmd2red                                             0     0      0     130
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (4) _Rcmd1                                                0     0      0    1922
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (6) _write_data                                           1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (6) _write_command                                        1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (5) _spiwrite                                             2     2      0      34
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _LCD_Reset                                            0     0      0    1792
                           _delay_ms
 ---------------------------------------------------------------------------------
 (5) _delay_ms                                             6     4      2    1792
                                             22 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     752
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _I2C_Init                                             4     0      4      53
                                             16 COMRAM     4     0      4
                         _i2cHighScl
                         _i2cHighSda
 ---------------------------------------------------------------------------------
 (2) _DS1621_Init                                          1     1      0     434
                                             21 COMRAM     1     1      0
                 _I2C_Write_Cmd_Only
           _I2C_Write_Cmd_Write_Data
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Write_Data                             3     1      2     232
                                             18 COMRAM     3     1      2
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Only                                   2     1      1     157
                                             18 COMRAM     2     1      1
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DS1621_Read_Temp                                     5     3      2     241
                                             19 COMRAM     5     3      2
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Write                                            2     2      0      60
                                             16 COMRAM     2     2      0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Stop                                             0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Start                                            0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (2) _I2C_Read                                             3     3      0      90
                                             16 COMRAM     3     3      0
                             _i2cAck
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                            _i2cNack
 ---------------------------------------------------------------------------------
 (3) _i2cNack                                              0     0      0       0
                         _i2cHighScl
                          _i2cLowScl
 ---------------------------------------------------------------------------------
 (3) _i2cAck                                               0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (2) _I2C_ReStart                                          0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (5) _i2cLowSda                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2cLowScl                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2cHighSda                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2cHighScl                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _chkisr                                             14    14      0       0
                                              2 COMRAM    14    14      0
                           _INT0_isr
                         _TIMER1_isr
 ---------------------------------------------------------------------------------
 (11) _TIMER1_isr                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _INT0_isr                                            2     2      0       0
                                              0 COMRAM     2     2      0
                   _force_nec_state0
 ---------------------------------------------------------------------------------
 (12) _force_nec_state0                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DS1621_Read_Temp
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _Do_Init
     _DS1621_Init
       _I2C_Write_Cmd_Only
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Cmd_Write_Data
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _I2C_Init
       _i2cHighScl
       _i2cHighSda
     _Initialize_Screen
       _LCD_Reset
         _delay_ms
           ___wmul
       _TFT_GreenTab_Initialize
         _Rcmd1
           _delay_ms
             ___wmul
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _Rcmd2red
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _Rcmd3
           _delay_ms
             ___wmul
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
       _fillScreen
         _fillRectangle
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _strcpy
     _init_INTERRUPT
     _init_UART
       _OpenUSART
   _Wait_One_Sec
     _Wait_Half_Second
   ___awdiv
     ___wmul (ARG)
   ___wmul
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch

 _chkisr (ROOT)
   _INT0_isr
     _force_nec_state0
   _TIMER1_isr

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      54       7       32.8%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      F      77       5       93.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     3C      6D       1       85.8%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     138      34        0.0%
DATA                 0      0     138       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Sat Oct 30 00:30:51 2021

                                _i 005A                 __size_of_I2C_Start 0012  
                      _SSPSTATbits 000FC7                 __size_of_I2C_Write 003E  
                     ___awdiv@sign 001C                ___wmul@multiplicand 0013  
                              l203 0F40                                l151 0ED6  
                              l313 0FD2                                l148 0E06  
                              l319 09C0                                l335 02D0  
                              l344 0226                                l337 01AA  
                              l530 1092                                l259 0C8A  
                              l611 0AE4                                l372 0804  
                              l620 0B26                                l269 10EC  
                              l373 0770                                l518 115E  
                              l623 1024                                l375 07E0  
                              l615 0AFE                                l376 0802  
                              l616 0B00                                l617 0B0A  
                              l618 0B0C                                l816 0938  
                              l587 040E                  ?_Wait_Half_Second 0001  
                              _PR2 000FCB                                _Cmd 004A  
                              _day 0056               __size_of_I2C_ReStart 0016  
                              _dow 0057                                _nbr 0043  
                              _txt 0047                                wreg 000FE8  
               ??_Wait_Half_Second 0011                    ??_fillRectangle 001D  
                     __CFG_LVP$OFF 000000            _TFT_GreenTab_Initialize 0FD4  
                     __CFG_WDT$OFF 000000                     drawFastVLine@h 0019  
                             l1141 0BE2                               l1151 0D22  
                             l3000 0CEE                               l1330 0EE0  
                             l3002 0CF8                               l1332 0EE6  
                             l1324 0ECE                               l1180 0E88  
                             l3004 0D00                               l1342 0EF8  
                             l3200 091E                               l3008 0D16  
                             l3120 02EC                               l3204 092E  
                             l3124 02FA                               l3116 02DC  
                   drawFastVLine@x 0022                     drawFastVLine@y 0018  
                             l1710 0DCA                               l3150 0382  
                             l3142 035A                               l3126 0320  
                             l1720 0DE0                               l3160 03E6  
                             l3136 034A                               l1722 0DE8  
                             l1714 0DD2                               l3154 0396  
                             l3146 037E                               l3138 034E  
                             l3162 03F2                               l1732 0DFC  
                             l3172 08BA                               l3156 039C  
                             l1734 0E02                               l1728 0DF0  
                             l3184 08E2                               l4240 0B2E  
                             l3186 08EC                               l3178 08CC  
                             l2900 0AD4                               l3196 0912  
                             l3188 08F4                               l3542 094A  
                             l3702 01A6                               l3712 01E6  
                             l3704 01AE                               l2904 0ADC  
                             l3546 0982                               l3714 021A  
                             l3556 09A8                               l3732 029C  
                             l3724 0248                               l3740 02CC  
                             l3716 021E                               l3708 01B6  
                             l3820 0490                               l2916 0AF6  
                             l2908 0AE8                               l3558 09B6  
                             l3734 02C4                               l3726 0270  
                             l2942 0F4C                               l3584 0FB4  
                             l3592 0D36                               l3832 050A  
                             l3824 04B2                               l3808 043C  
                             l2944 0F56                               l3746 0E56  
                             l3834 0512                               l3596 0D52  
                             l3748 0E5C                               l3780 07E4  
                             l3764 07A8                               l2980 0BA6  
                             l3694 018C                               l3790 07FE  
                             l3758 073A                               l2982 0BB0  
   I2C_Write_Cmd_Write_Data@Device 0015                               l3784 07EE  
                             l3776 07D6                               l2896 0ACA  
                             l2992 0BD6                               l2984 0BB8  
                             l3698 0198                               STR_1 FFB8  
                             STR_2 FFE3                               STR_3 FFF7  
                             u2100 0978                               u2400 0468  
                             u2330 0768                               u2260 027E  
                             u2340 079E                               u2687 117A  
                             _RBPU 007F8F                               _TRMT 007D61  
                             _main 0B28                               _font FDD3  
                             _hour 0059                   __end_of_I2C_Init 1198  
                 __end_of_I2C_Read 0E08                               _year 006B  
                             fsr0h 000FEA                               _txt1 0100  
                             fsr1h 000FE2                               fsr0l 000FE9  
                             fsr2h 000FDA                               fsr1l 000FE1  
                             indf2 000FDF                               fsr2l 000FD9  
                             _wrap 006D                   __end_of_I2C_Stop 1116  
                             pclat 000FFA                 __size_of_LCD_Reset 0012  
                             prodh 000FF4                               prodl 000FF3  
                             start 0018        __size_of_I2C_Write_Cmd_Only 001A  
                  __end_of_Do_Init 0E4C                    ??_drawFastVLine 001C  
                  __end_of_i2cNack 11A2                       ___param_bank 000010  
                      ?_TIMER1_isr 0001                   __end_of_INT0_isr 017C  
                  drawFastVLine@hi 0020                    drawFastVLine@lo 0021  
                            ?_main 0001                    __end_of___awdiv 093A  
                            _T0CON 000FD5                    ___awdiv@divisor 0019  
                            _T1CON 000FCD                              _T2CON 000FCA  
                            _T3CON 000FB1                    __end_of___lwdiv 0BEC  
                  __end_of___lwmod 0D2C                              i2l221 0A04  
                            i2l233 017A                              i2l245 0134  
                  ___awdiv@counter 001B                              _RCSTA 000FAB  
                            _TMR0H 000FD7                              _TMR1H 000FCF  
                            _TMR0L 000FD6                              _TMR3H 000FB3  
                            _TMR1L 000FCE                              _TMR3L 000FB2  
                            _SPBRG 000FAF                              _PORTA 000F80  
                            _TRISA 000F92                              _TRISB 000F93  
                            _TRISC 000F94                              _TRISD 000F95  
                            _TRISE 000F96                              _TXREG 000FAD  
                            _TXSTA 000FAC                              _Rcmd1 0528  
                            _Rcmd3 0638                         _Display_D1 00BF  
                       _i2cHighSda 11B4                         _i2cHighScl 1176  
                  __end_of_dpowers FFB8                              _color 0080  
                            _font2 FED2                              _found 0058  
                            _tempC 0069                              _tempF 006A  
                            _month 005C                              _putch 115A  
                __end_of_I2C_Start 1128                  __end_of_I2C_Write 0F06  
                   __CFG_BOREN$OFF 000000                              tablat 000FF5  
                            status 000FD8                  ?_DS1621_Read_Temp 0014  
                  write_data@data_ 0013                 ??_DS1621_Read_Temp 0016  
                  __initialization 0A3E                       __end_of_main 0B90  
                     __end_of_font FED2                   __end_of_Rcmd2red 0EC8  
                           ??_main 003B                      __activetblptr 000002  
                __end_of_LCD_Reset 1104          ??_TFT_GreenTab_Initialize 001D  
                           ?_Rcmd1 0001                             ?_Rcmd3 0001  
          __size_of_init_INTERRUPT 0030                          I2C_Init@c 0011  
                        I2C_Read@n 0012                             _ADCON1 000FC1  
              DS1621_Read_Temp@Cmd 0016                             _CCPR2L 000FBB  
                 ___awdiv@dividend 0017                 __size_of_i2cLowSda 000A  
               __size_of_i2cLowScl 0008                             ?_putch 0001  
                           i2l2212 09FA                             i2l1900 00B6  
                           i2l1912 00DC                             i2l1930 014E  
                           i2l1914 00E2                             i2l1906 00C0  
                           i2l1932 0154                             i2l1918 00E6  
                           i2l1872 0044                          ??_Do_Init 003B  
                           i2l1882 0070                             i2l1938 0158  
                           i2l1894 0098                             i2l1888 008E  
                           _OSCCON 000FD3                __size_of_TIMER1_isr 000C  
                           _SPBRGH 000FB0                             _SSPBUF 000FC9  
                        ??_i2cNack 0011                   _force_nec_state0 11BC  
                           _Device 004B                   __end_of_delay_ms 0C92  
                           _i2cAck 1128                         _TempSecond 004E  
                 __end_of_fillRect 0D76                   __end_of_drawChar 02D2  
               __size_of_OpenUSART 0070                             ___wmul 0FFE  
                        ??___awdiv 001B                   __end_of_drawtext 0528  
                           _chkisr 0008                          ??___lwdiv 0015  
                           _array1 00AA                          ??___lwmod 001C  
                           _buffer 00C9                             _nec_ok 0045  
                           clear_0 0A44                             clear_1 0A50  
                 ___awdiv@quotient 001D                             _minute 005B  
                           _second 005F                             _printf 02D2  
                     drawtext@size 00EF                             _strcpy 0F42  
                           _strlen 0E4C                       __pdataCOMRAM 006C  
                        ?_I2C_Init 0011                          ?_I2C_Read 0001  
                        ?_I2C_Stop 0001                       __mediumconst FDD2  
                           tblptrh 000FF7                             tblptrl 000FF6  
                           tblptru 000FF8   __end_of_I2C_Write_Cmd_Write_Data 1046  
                      ?_i2cHighSda 0001                        ?_i2cHighScl 0001  
                           putch@c 0011                   __end_of_spiwrite 10F2  
                       __accesstop 0080            __end_of__initialization 0AAE  
                        ?_INT0_isr 0001                 _setup_alarm_minute 0061  
               _setup_alarm_second 0062                      ___rparam_used 000001  
                    __end_of_Rcmd1 0638                      __end_of_Rcmd3 072A  
                   __pcstackCOMRAM 0001                       __pidataBANK0 0D76  
                     __pidataBANK1 0BEC                      __end_of_font2 FFAE  
                __end_of_i2cLowSda 11AC                  __end_of_i2cLowScl 11B4  
                    __end_of_putch 1168                     drawPixel@color 0019  
           __size_of_write_command 0010                         ??_I2C_Init 0015  
                       ??_I2C_Read 0011                       _alarm_minute 0052  
                     _alarm_second 0053                         ??_I2C_Stop 0011  
                          ??_Rcmd1 001D                            ??_Rcmd3 001D  
               __size_of_drawPixel 0030                  __end_of_OpenUSART 0B28  
                          ??_putch 0011                         __pbssBANK0 00C9  
                 _setup_alarm_hour 0060                      ??_DS1621_Init 0016  
                        ?_Rcmd2red 0001                 __size_of_init_UART 0014  
        __size_of_Wait_Half_Second 001A                    spiwrite@spidata 0012  
                       _alarm_date 0050                         ??_INT0_isr 0001  
                       _alarm_hour 0051                      ?_Wait_One_Sec 0001  
                          ?_i2cAck 0001                 __CFG_CCP2MX$PORTBE 000000  
                   I2C_Read@inByte 0013                            ?___wmul 0011  
              __size_of_i2cHighSda 0008                __size_of_i2cHighScl 000C  
                          ?_chkisr 0001             __size_of_setAddrWindow 004E  
 I2C_Write_Cmd_Write_Data@Data_Out 0014                            _CCP2CON 000FBA  
                     ??_TIMER1_isr 0001                      ??_I2C_ReStart 0011  
                       I2C_Write@n 0012                            ?_printf 001D  
                          ?_strcpy 0011                            ?_strlen 0011  
                       _fillScreen 1064                     _init_INTERRUPT 0F74  
                        ?_delay_ms 0017                          ?_fillRect 0023  
                        ?_drawChar 002E                            _SSPCON1 000FC6  
                          _SSPSTAT 000FC7                            _Address 0049  
            __end_of_fillRectangle 0806                          ?_drawtext 00E8  
                          _Do_Init 0E08           _I2C_Write_Cmd_Write_Data 1026  
       __end_of_I2C_Write_Cmd_Only 10B4                         ??_Rcmd2red 0014  
           DS1621_Read_Temp@Device 0018                     ??_Wait_One_Sec 0011  
                          _i2cNack 1198                 __end_of_TIMER1_isr 118E  
                    _write_command 114A                          _I2C_Start 1116  
                        _I2C_Write 0EC8                    __size_of_i2cAck 0012  
                          __Hparam 0000                            __Lparam 0000  
              __end_of_DS1621_Init 1064                  __end_of_drawPixel 0FD4  
            __end_of_drawFastVLine 09C2                            ___awdiv 08A4  
                  __size_of___wmul 0028                            ___lwdiv 0B90  
                          ___lwmod 0CE0                    __size_of_chkisr 0A36  
                        ?_spiwrite 0001                            __pcinit 0A3E  
                          __ramtop 1000                            __ptext0 0B28  
                          __ptext1 02D2                            __ptext2 115A  
                          __ptext3 0CE0                            __ptext4 0B90  
                          __ptext5 08A4          __size_of_DS1621_Read_Temp 003C  
                          __ptext6 1168                            __ptext7 1080  
                          __ptext8 0E08                            __ptext9 10CA  
                  __size_of_printf 013E                  __end_of_init_UART 10DE  
           __end_of_init_INTERRUPT 0FA4                          _T0CONbits 000FD5  
                  __size_of_strcpy 0032                    __size_of_strlen 003E  
         __end_of_force_nec_state0 11C4                          _T1CONbits 000FCD  
                          _dpowers FFAE                          _T3CONbits 000FB1  
                       ??_delay_ms 0019                __end_of_I2C_ReStart 10CA  
                    drawtext@_text 00E9                      drawtext@color 00EB  
                       ??_fillRect 0028                         ??_drawChar 0035  
                        _LCD_Reset 10F2                      _setAddrWindow 0C92  
                   __pintcode_body 09C2                         delay_ms@ms 0017  
             end_of_initialization 0AAE                         ??_drawtext 0039  
                   ?_write_command 0001                      __Lmediumconst FDD2  
                          int_func 09C2                         ?_I2C_Start 0001  
                       ?_I2C_Write 0001                         _tempSecond 006C  
                        _RCSTAbits 000FAB                            printf@c 002A  
                          printf@f 001D                            postdec1 000FE5  
                          postdec2 000FDD                            postinc0 000FEE  
                          postinc2 000FDE                         ??_spiwrite 0011  
                          strlen@s 0011        I2C_Write_Cmd_Write_Data@Cmd 0013  
                 drawtext@cursor_x 00F6                   drawtext@cursor_y 00F5  
                        _PORTBbits 000F81                          _PORTCbits 000F82  
                        _PORTDbits 000F83                          _PORTEbits 000F84  
                 I2C_Write@outByte 0011                    ?_init_INTERRUPT 0001  
                      ?_fillScreen 0024                         _setup_hour 0064  
                       _setup_year 0068                         drawChar@bg 0032  
                        _TRISCbits 000F94                       ??_i2cHighSda 0011  
                     ??_i2cHighScl 0011                  __size_of_I2C_Init 000A  
                __size_of_I2C_Read 0048                  __size_of_I2C_Stop 0012  
                   ?_setAddrWindow 0014                         ?_LCD_Reset 0001  
                 drawtext@textsize 00F1                         drawPixel@x 001B  
                       drawPixel@y 0018                   _Wait_Half_Second 1080  
                      _DS1621_Init 1046                          _TXSTAbits 000FAC  
                __size_of_INT0_isr 0160                     __end_of_i2cAck 113A  
         DS1621_Read_Temp@Data_Ret 0017                 __end_of_i2cHighSda 11BC  
               __end_of_i2cHighScl 1182                     __end_of___wmul 1026  
                    delay_ms@count 001B                         _write_data 113A  
                    __pidataCOMRAM 11C4                     __end_of_chkisr 0A3E  
         ?_TFT_GreenTab_Initialize 0001                        _I2C_ReStart 10B4  
                       drawtext@bg 00ED                          _Nec_code1 004C  
                        _i2cLowSda 11A2                          _i2cLowScl 11AC  
             __end_of_Wait_One_Sec 1176                     __end_of_printf 0410  
                   __end_of_strcpy 0F74                     __end_of_strlen 0E8A  
                        _Nec_state 004D                start_initialization 0A3E  
                  ??_write_command 0013                          _OpenUSART 0AB8  
                 __CFG_OSC$INTIO67 000000                        ??_I2C_Start 0011  
                      ??_I2C_Write 0011                           ??_i2cAck 0011  
                __size_of_Rcmd2red 003E                __size_of_fillScreen 001C  
                         ??___wmul 0015                           ??_chkisr 0003  
                      __pdataBANK0 0080                        __pdataBANK1 0100  
                  setAddrWindow@x0 0017                    setAddrWindow@x1 0015  
                  setAddrWindow@y0 0014                    setAddrWindow@y1 0016  
                         ??_printf 0023                   _DS1621_Read_Temp 0F06  
                         ??_strcpy 0015                           ??_strlen 0013  
                       ?_i2cLowSda 0001                         ?_i2cLowScl 0001  
                      __pbssCOMRAM 003D         ??_I2C_Write_Cmd_Write_Data 0015  
                  ??_setAddrWindow 0017                      __pcstackBANK0 00E8  
                      ??_LCD_Reset 001D                  __size_of_delay_ms 0052  
                         ?_Do_Init 0001                  __size_of_fillRect 004A  
                __size_of_drawChar 0156                         ?_OpenUSART 0011  
                         ?_i2cNack 0001                  __size_of_drawtext 0118  
                 ___lwdiv@dividend 0011                        I2C_Read@ack 0011  
                        _bit_count 0054                          __pintcode 0008  
  __end_of_TFT_GreenTab_Initialize 0FFE                      __pmediumconst FDD2  
                         ?___awdiv 0017                          __tft_type 004F  
                         ?___lwdiv 0011                 _I2C_Write_Cmd_Only 109A  
                         ?___lwmod 0018                 drawFastVLine@color 001A  
                      ?_write_data 0001                          _drawPixel 0FA4  
                __size_of_spiwrite 0014                ?_I2C_Write_Cmd_Only 0013  
                ?_force_nec_state0 0001                           _I2C_Init 118E  
                         _I2C_Read 0DC0                           _I2C_Stop 1104  
                _Initialize_Screen 0806                     __size_of_Rcmd1 0110  
                   __size_of_Rcmd3 00F2                          _init_UART 10CA  
               ??_force_nec_state0 0001           I2C_Write_Cmd_Only@Device 0014  
               ?_Initialize_Screen 0001                   ___lwdiv@quotient 0015  
                   __size_of_putch 000E                     ___wmul@product 0015  
              ??_Initialize_Screen 003B                           _INT0_isr 001C  
             ??_I2C_Write_Cmd_Only 0014                           _PIE1bits 000F9D  
                         _PIR1bits 000F9E                           _PIR2bits 000FA1  
                 ??_init_INTERRUPT 0011              __size_of_Wait_One_Sec 000E  
                        _setup_day 0063                  DS1621_Init@Device 0016  
                        fillRect@h 0025                          fillRect@i 002C  
                        fillRect@w 0024                          fillRect@x 002B  
                        fillRect@y 0023                          drawChar@c 002F  
                        drawChar@i 0038                          drawChar@j 0037  
                        drawChar@x 0036                          drawChar@y 002E  
                       ?_drawPixel 0018             __size_of_fillRectangle 00DC  
         __end_of_Wait_Half_Second 109A                  ___wmul@multiplier 0011  
        __end_of_Initialize_Screen 08A4                        ??_i2cLowSda 0011  
                      ??_i2cLowScl 0011                       ??_fillScreen 0026  
                       printf@flag 0026                         printf@prec 0027  
                        main@tempC 003C                          main@tempF 003B  
                       ?_init_UART 0001                        _INTCON2bits 000FF1  
                        copy_data0 0A6A                          copy_data1 0A8A  
                        drawtext@i 00F3             __size_of_drawFastVLine 0088  
                        drawtext@x 00F0                          drawtext@y 00E8  
                         _Nec_code 003D                  write_command@cmd_ 0013  
                      ??_OpenUSART 0013                       ?_DS1621_Init 0001  
                         _Rcmd2red 0E8A                   __size_of_Do_Init 0044  
              __size_of_write_data 0010                    OpenUSART@config 0013  
                     _Time_Elapsed 0041                   __size_of_i2cNack 000A  
                     _Wait_One_Sec 1168                           __Hrparam 0000  
               __end_of_fillScreen 1080                           __Lrparam 0000  
                 __size_of___awdiv 0096                   __size_of___lwdiv 005C  
                 __size_of___lwmod 004C                       ?_I2C_ReStart 0001  
                         _delay_ms 0C40                    ___lwdiv@divisor 0013  
                  ___lwdiv@counter 0017                           __ptext10 0AB8  
                         __ptext11 0F74                           __ptext20 093A  
                         __ptext12 0806                           __ptext21 0FA4  
                         __ptext13 0F42                           __ptext30 10F2  
                         __ptext22 0C92                           __ptext14 1064  
                         __ptext31 0C40                           __ptext23 0FD4  
                         __ptext15 072A                           __ptext40 1116  
                         __ptext32 0FFE                           __ptext24 0638  
                         __ptext16 0410                           __ptext41 0DC0  
                         __ptext33 118E                           __ptext25 0E8A  
                         __ptext17 0E4C                           __ptext50 1182  
                         __ptext42 1198                           __ptext34 1046  
                         __ptext26 0528                           __ptext18 017C  
                         __ptext51 001C                           __ptext43 1128  
                         __ptext35 1026                           __ptext27 113A  
                         __ptext19 0D2C                           __ptext52 11BC  
                         __ptext44 10B4                           __ptext36 109A  
                         __ptext28 114A                           __ptext45 11A2  
                         __ptext37 0F06                           __ptext29 10DE  
                         __ptext46 11AC                           __ptext38 0EC8  
                         __ptext47 11B4                           __ptext39 1104  
                         __ptext48 1176                           _fillRect 0D2C  
                         _drawChar 017C   __size_of_TFT_GreenTab_Initialize 002A  
                         _colstart 0055                           _drawtext 0410  
                       strcpy@from 0013                      _fillRectangle 072A  
         __end_of_DS1621_Read_Temp 0F42                      __size_of_main 0068  
                  fillRectangle@hi 0021                    fillRectangle@lo 0022  
                    _drawFastVLine 093A                           _spiwrite 10DE  
                        printf@val 0028                        ??_drawPixel 001B  
                         _rowstart 005E         __size_of_Initialize_Screen 009E  
                       _INTCONbits 000FF2                     OpenUSART@spbrg 0011  
                      ??_init_UART 0014                          spiwrite@x 0011  
                         intlevel2 0000                     ?_fillRectangle 0018  
                 ___lwmod@dividend 0018              __end_of_write_command 115A  
                  fillScreen@color 0024                     fillRectangle@h 001A  
                   fillRectangle@w 0019                     fillRectangle@x 0023  
                   fillRectangle@y 0018                     ?_drawFastVLine 0018  
                         printf@ap 0024                       ??_write_data 0013  
                       _TIMER1_isr 1182                      fillRect@color 0026  
                  ___lwmod@divisor 001A                           strcpy@cp 0015  
                         strlen@cp 0015                           strcpy@to 0011  
            I2C_Write_Cmd_Only@Cmd 0013                    ___lwmod@counter 001C  
                     _setup_minute 0065                       _setup_second 0067  
                      _prev_second 005D              __end_of_setAddrWindow 0CE0  
               fillRectangle@color 001B                      drawChar@color 0030  
                      _setup_month 0066                 __end_of_write_data 114A  
        __size_of_force_nec_state0 0008                       drawChar@line 0035  
                     drawChar@size 0034  __size_of_I2C_Write_Cmd_Write_Data 0020  
             __size_of_DS1621_Init 001E          ?_I2C_Write_Cmd_Write_Data 0013  
