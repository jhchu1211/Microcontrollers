

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Sat Nov 06 11:42:05 2021

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	text44,global,reloc=2,class=CODE,delta=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	text53,global,reloc=2,class=CODE,delta=1
    72                           	psect	text54,global,reloc=2,class=CODE,delta=1
    73                           	psect	text55,global,reloc=2,class=CODE,delta=1
    74                           	psect	text56,global,reloc=2,class=CODE,delta=1
    75                           	psect	text57,global,reloc=2,class=CODE,delta=1
    76                           	psect	text58,global,reloc=2,class=CODE,delta=1
    77                           	psect	text59,global,reloc=2,class=CODE,delta=1
    78                           	psect	text60,global,reloc=2,class=CODE,delta=1
    79                           	psect	text61,global,reloc=2,class=CODE,delta=1
    80                           	psect	text62,global,reloc=2,class=CODE,delta=1
    81                           	psect	text63,global,reloc=2,class=CODE,delta=1
    82                           	psect	text64,global,reloc=2,class=CODE,delta=1
    83                           	psect	text65,global,reloc=2,class=CODE,delta=1
    84                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    85                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    86                           	psect	text67,global,reloc=2,class=CODE,delta=1
    87                           	psect	text68,global,reloc=2,class=CODE,delta=1
    88                           	psect	text69,global,reloc=2,class=CODE,delta=1
    89                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    90                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    91  0000                     
    92                           	psect	idataCOMRAM
    93  002258                     __pidataCOMRAM:
    94                           	opt stack 0
    95                           
    96                           ;initializer for _setup_fan_temp
    97  002258  4B                 	db	75
    98                           
    99                           ;initializer for _tempSecond
   100  002259  FF                 	db	255
   101                           
   102                           ;initializer for _wrap
   103  00225A  01                 	db	1
   104                           
   105                           	psect	idataBANK0
   106  001AFC                     __pidataBANK0:
   107                           	opt stack 0
   108                           
   109                           ;initializer for _array1
   110  001AFC  A2                 	db	162
   111  001AFD  62                 	db	98
   112  001AFE  E2                 	db	226
   113  001AFF  22                 	db	34
   114  001B00  02                 	db	2
   115  001B01  C2                 	db	194
   116  001B02  E0                 	db	224
   117  001B03  A8                 	db	168
   118  001B04  90                 	db	144
   119  001B05  68                 	db	104
   120  001B06  98                 	db	152
   121  001B07  B0                 	db	176
   122  001B08  30                 	db	48
   123  001B09  18                 	db	24
   124  001B0A  7A                 	db	122
   125  001B0B  10                 	db	16
   126  001B0C  38                 	db	56
   127  001B0D  5A                 	db	90
   128  001B0E  42                 	db	66
   129  001B0F  4A                 	db	74
   130  001B10  52                 	db	82
   131                           
   132                           ;initializer for _alarm_time
   133  001B11  30                 	db	48
   134  001B12  30                 	db	48
   135  001B13  3A                 	db	58
   136  001B14  30                 	db	48
   137  001B15  30                 	db	48
   138  001B16  3A                 	db	58
   139  001B17  30                 	db	48
   140  001B18  30                 	db	48
   141  001B19  00                 	db	0
   142                           
   143                           ;initializer for _setup_alarm_time
   144  001B1A  30                 	db	48
   145  001B1B  30                 	db	48
   146  001B1C  3A                 	db	58
   147  001B1D  30                 	db	48
   148  001B1E  30                 	db	48
   149  001B1F  3A                 	db	58
   150  001B20  30                 	db	48
   151  001B21  30                 	db	48
   152  001B22  00                 	db	0
   153                           
   154                           ;initializer for _setup_date
   155  001B23  30                 	db	48
   156  001B24  31                 	db	49
   157  001B25  2F                 	db	47
   158  001B26  30                 	db	48
   159  001B27  31                 	db	49
   160  001B28  2F                 	db	47
   161  001B29  30                 	db	48
   162  001B2A  30                 	db	48
   163  001B2B  00                 	db	0
   164                           
   165                           ;initializer for _setup_time
   166  001B2C  30                 	db	48
   167  001B2D  30                 	db	48
   168  001B2E  3A                 	db	58
   169  001B2F  30                 	db	48
   170  001B30  30                 	db	48
   171  001B31  3A                 	db	58
   172  001B32  30                 	db	48
   173  001B33  30                 	db	48
   174  001B34  00                 	db	0
   175                           
   176                           ;initializer for _setup_fan_text
   177  001B35  30                 	db	48
   178  001B36  37                 	db	55
   179  001B37  35                 	db	53
   180  001B38  46                 	db	70
   181  001B39  00                 	db	0
   182                           
   183                           ;initializer for _Alarm_SW_Txt
   184  001B3A  4F                 	db	79
   185  001B3B  46                 	db	70
   186  001B3C  46                 	db	70
   187  001B3D  00                 	db	0
   188                           
   189                           ;initializer for _RTC_ALARM_Txt
   190  001B3E  30                 	db	48
   191  001B3F  00                 	db	0
   192                           
   193                           ;initializer for _date
   194  001B40  30                 	db	48
   195  001B41  30                 	db	48
   196  001B42  2F                 	db	47
   197  001B43  30                 	db	48
   198  001B44  30                 	db	48
   199  001B45  2F                 	db	47
   200  001B46  30                 	db	48
   201  001B47  30                 	db	48
   202  001B48  00                 	db	0
   203                           
   204                           ;initializer for _time
   205  001B49  30                 	db	48
   206  001B4A  30                 	db	48
   207  001B4B  3A                 	db	58
   208  001B4C  30                 	db	48
   209  001B4D  30                 	db	48
   210  001B4E  3A                 	db	58
   211  001B4F  30                 	db	48
   212  001B50  30                 	db	48
   213  001B51  00                 	db	0
   214                           
   215                           ;initializer for _RPM_Txt
   216  001B52  30                 	db	48
   217  001B53  30                 	db	48
   218  001B54  30                 	db	48
   219  001B55  30                 	db	48
   220  001B56  00                 	db	0
   221                           
   222                           ;initializer for _DC_Txt
   223  001B57  30                 	db	48
   224  001B58  30                 	db	48
   225  001B59  30                 	db	48
   226  001B5A  00                 	db	0
   227                           
   228                           ;initializer for _Fan_SW_Txt
   229  001B5B  4F                 	db	79
   230  001B5C  46                 	db	70
   231  001B5D  46                 	db	70
   232  001B5E  00                 	db	0
   233                           
   234                           ;initializer for _tempC
   235  001B5F  2B                 	db	43
   236  001B60  32                 	db	50
   237  001B61  35                 	db	53
   238  001B62  00                 	db	0
   239                           
   240                           ;initializer for _tempF
   241  001B63  2B                 	db	43
   242  001B64  37                 	db	55
   243  001B65  37                 	db	55
   244  001B66  00                 	db	0
   245                           
   246                           	psect	idataBANK1
   247  002054                     __pidataBANK1:
   248                           	opt stack 0
   249                           
   250                           ;initializer for _buffer
   251  002054  20                 	db	32
   252  002055  45                 	db	69
   253  002056  43                 	db	67
   254  002057  45                 	db	69
   255  002058  33                 	db	51
   256  002059  33                 	db	51
   257  00205A  30                 	db	48
   258  00205B  31                 	db	49
   259  00205C  4C                 	db	76
   260  00205D  20                 	db	32
   261  00205E  53                 	db	83
   262  00205F  70                 	db	112
   263  002060  27                 	db	39
   264  002061  32                 	db	50
   265  002062  31                 	db	49
   266  002063  20                 	db	32
   267  002064  4C                 	db	76
   268  002065  31                 	db	49
   269  002066  32                 	db	50
   270  002067  00                 	db	0
   271  002068  00                 	db	0
   272  002069  00                 	db	0
   273  00206A  00                 	db	0
   274  00206B  00                 	db	0
   275  00206C  00                 	db	0
   276  00206D  00                 	db	0
   277  00206E  00                 	db	0
   278  00206F  00                 	db	0
   279  002070  00                 	db	0
   280  002071  00                 	db	0
   281  002072  00                 	db	0
   282  002073  00                 	db	0
   283  002074  00                 	db	0
   284                           
   285                           	psect	mediumconst
   286  00FD3E                     __pmediumconst:
   287                           	opt stack 0
   288  00FD3E  00                 	db	0
   289  00FD3F                     _font:
   290                           	opt stack 0
   291  00FD3F  00                 	db	0
   292  00FD40  00                 	db	0
   293  00FD41  00                 	db	0
   294  00FD42  00                 	db	0
   295  00FD43  00                 	db	0
   296  00FD44  00                 	db	0
   297  00FD45  00                 	db	0
   298  00FD46  5F                 	db	95
   299  00FD47  00                 	db	0
   300  00FD48  00                 	db	0
   301  00FD49  00                 	db	0
   302  00FD4A  07                 	db	7
   303  00FD4B  00                 	db	0
   304  00FD4C  07                 	db	7
   305  00FD4D  00                 	db	0
   306  00FD4E  14                 	db	20
   307  00FD4F  7F                 	db	127
   308  00FD50  14                 	db	20
   309  00FD51  7F                 	db	127
   310  00FD52  14                 	db	20
   311  00FD53  24                 	db	36
   312  00FD54  2A                 	db	42
   313  00FD55  7F                 	db	127
   314  00FD56  2A                 	db	42
   315  00FD57  12                 	db	18
   316  00FD58  23                 	db	35
   317  00FD59  13                 	db	19
   318  00FD5A  08                 	db	8
   319  00FD5B  64                 	db	100
   320  00FD5C  62                 	db	98
   321  00FD5D  36                 	db	54
   322  00FD5E  49                 	db	73
   323  00FD5F  56                 	db	86
   324  00FD60  20                 	db	32
   325  00FD61  50                 	db	80
   326  00FD62  00                 	db	0
   327  00FD63  08                 	db	8
   328  00FD64  07                 	db	7
   329  00FD65  03                 	db	3
   330  00FD66  00                 	db	0
   331  00FD67  00                 	db	0
   332  00FD68  1C                 	db	28
   333  00FD69  22                 	db	34
   334  00FD6A  41                 	db	65
   335  00FD6B  00                 	db	0
   336  00FD6C  00                 	db	0
   337  00FD6D  41                 	db	65
   338  00FD6E  22                 	db	34
   339  00FD6F  1C                 	db	28
   340  00FD70  00                 	db	0
   341  00FD71  2A                 	db	42
   342  00FD72  1C                 	db	28
   343  00FD73  7F                 	db	127
   344  00FD74  1C                 	db	28
   345  00FD75  2A                 	db	42
   346  00FD76  08                 	db	8
   347  00FD77  08                 	db	8
   348  00FD78  3E                 	db	62
   349  00FD79  08                 	db	8
   350  00FD7A  08                 	db	8
   351  00FD7B  00                 	db	0
   352  00FD7C  80                 	db	128
   353  00FD7D  70                 	db	112
   354  00FD7E  30                 	db	48
   355  00FD7F  00                 	db	0
   356  00FD80  08                 	db	8
   357  00FD81  08                 	db	8
   358  00FD82  08                 	db	8
   359  00FD83  08                 	db	8
   360  00FD84  08                 	db	8
   361  00FD85  00                 	db	0
   362  00FD86  00                 	db	0
   363  00FD87  60                 	db	96
   364  00FD88  60                 	db	96
   365  00FD89  00                 	db	0
   366  00FD8A  20                 	db	32
   367  00FD8B  10                 	db	16
   368  00FD8C  08                 	db	8
   369  00FD8D  04                 	db	4
   370  00FD8E  02                 	db	2
   371  00FD8F  3E                 	db	62
   372  00FD90  51                 	db	81
   373  00FD91  49                 	db	73
   374  00FD92  45                 	db	69
   375  00FD93  3E                 	db	62
   376  00FD94  00                 	db	0
   377  00FD95  42                 	db	66
   378  00FD96  7F                 	db	127
   379  00FD97  40                 	db	64
   380  00FD98  00                 	db	0
   381  00FD99  72                 	db	114
   382  00FD9A  49                 	db	73
   383  00FD9B  49                 	db	73
   384  00FD9C  49                 	db	73
   385  00FD9D  46                 	db	70
   386  00FD9E  21                 	db	33
   387  00FD9F  41                 	db	65
   388  00FDA0  49                 	db	73
   389  00FDA1  4D                 	db	77
   390  00FDA2  33                 	db	51
   391  00FDA3  18                 	db	24
   392  00FDA4  14                 	db	20
   393  00FDA5  12                 	db	18
   394  00FDA6  7F                 	db	127
   395  00FDA7  10                 	db	16
   396  00FDA8  27                 	db	39
   397  00FDA9  45                 	db	69
   398  00FDAA  45                 	db	69
   399  00FDAB  45                 	db	69
   400  00FDAC  39                 	db	57
   401  00FDAD  3C                 	db	60
   402  00FDAE  4A                 	db	74
   403  00FDAF  49                 	db	73
   404  00FDB0  49                 	db	73
   405  00FDB1  31                 	db	49
   406  00FDB2  41                 	db	65
   407  00FDB3  21                 	db	33
   408  00FDB4  11                 	db	17
   409  00FDB5  09                 	db	9
   410  00FDB6  07                 	db	7
   411  00FDB7  36                 	db	54
   412  00FDB8  49                 	db	73
   413  00FDB9  49                 	db	73
   414  00FDBA  49                 	db	73
   415  00FDBB  36                 	db	54
   416  00FDBC  46                 	db	70
   417  00FDBD  49                 	db	73
   418  00FDBE  49                 	db	73
   419  00FDBF  29                 	db	41
   420  00FDC0  1E                 	db	30
   421  00FDC1  00                 	db	0
   422  00FDC2  00                 	db	0
   423  00FDC3  14                 	db	20
   424  00FDC4  00                 	db	0
   425  00FDC5  00                 	db	0
   426  00FDC6  00                 	db	0
   427  00FDC7  40                 	db	64
   428  00FDC8  34                 	db	52
   429  00FDC9  00                 	db	0
   430  00FDCA  00                 	db	0
   431  00FDCB  00                 	db	0
   432  00FDCC  08                 	db	8
   433  00FDCD  14                 	db	20
   434  00FDCE  22                 	db	34
   435  00FDCF  41                 	db	65
   436  00FDD0  14                 	db	20
   437  00FDD1  14                 	db	20
   438  00FDD2  14                 	db	20
   439  00FDD3  14                 	db	20
   440  00FDD4  14                 	db	20
   441  00FDD5  00                 	db	0
   442  00FDD6  41                 	db	65
   443  00FDD7  22                 	db	34
   444  00FDD8  14                 	db	20
   445  00FDD9  08                 	db	8
   446  00FDDA  02                 	db	2
   447  00FDDB  01                 	db	1
   448  00FDDC  59                 	db	89
   449  00FDDD  09                 	db	9
   450  00FDDE  06                 	db	6
   451  00FDDF  3E                 	db	62
   452  00FDE0  41                 	db	65
   453  00FDE1  5D                 	db	93
   454  00FDE2  59                 	db	89
   455  00FDE3  4E                 	db	78
   456  00FDE4  7C                 	db	124
   457  00FDE5  12                 	db	18
   458  00FDE6  11                 	db	17
   459  00FDE7  12                 	db	18
   460  00FDE8  7C                 	db	124
   461  00FDE9  7F                 	db	127
   462  00FDEA  49                 	db	73
   463  00FDEB  49                 	db	73
   464  00FDEC  49                 	db	73
   465  00FDED  36                 	db	54
   466  00FDEE  3E                 	db	62
   467  00FDEF  41                 	db	65
   468  00FDF0  41                 	db	65
   469  00FDF1  41                 	db	65
   470  00FDF2  22                 	db	34
   471  00FDF3  7F                 	db	127
   472  00FDF4  41                 	db	65
   473  00FDF5  41                 	db	65
   474  00FDF6  41                 	db	65
   475  00FDF7  3E                 	db	62
   476  00FDF8  7F                 	db	127
   477  00FDF9  49                 	db	73
   478  00FDFA  49                 	db	73
   479  00FDFB  49                 	db	73
   480  00FDFC  41                 	db	65
   481  00FDFD  7F                 	db	127
   482  00FDFE  09                 	db	9
   483  00FDFF  09                 	db	9
   484  00FE00  09                 	db	9
   485  00FE01  01                 	db	1
   486  00FE02  3E                 	db	62
   487  00FE03  41                 	db	65
   488  00FE04  41                 	db	65
   489  00FE05  51                 	db	81
   490  00FE06  73                 	db	115
   491  00FE07  7F                 	db	127
   492  00FE08  08                 	db	8
   493  00FE09  08                 	db	8
   494  00FE0A  08                 	db	8
   495  00FE0B  7F                 	db	127
   496  00FE0C  00                 	db	0
   497  00FE0D  41                 	db	65
   498  00FE0E  7F                 	db	127
   499  00FE0F  41                 	db	65
   500  00FE10  00                 	db	0
   501  00FE11  20                 	db	32
   502  00FE12  40                 	db	64
   503  00FE13  41                 	db	65
   504  00FE14  3F                 	db	63
   505  00FE15  01                 	db	1
   506  00FE16  7F                 	db	127
   507  00FE17  08                 	db	8
   508  00FE18  14                 	db	20
   509  00FE19  22                 	db	34
   510  00FE1A  41                 	db	65
   511  00FE1B  7F                 	db	127
   512  00FE1C  40                 	db	64
   513  00FE1D  40                 	db	64
   514  00FE1E  40                 	db	64
   515  00FE1F  40                 	db	64
   516  00FE20  7F                 	db	127
   517  00FE21  02                 	db	2
   518  00FE22  1C                 	db	28
   519  00FE23  02                 	db	2
   520  00FE24  7F                 	db	127
   521  00FE25  7F                 	db	127
   522  00FE26  04                 	db	4
   523  00FE27  08                 	db	8
   524  00FE28  10                 	db	16
   525  00FE29  7F                 	db	127
   526  00FE2A  3E                 	db	62
   527  00FE2B  41                 	db	65
   528  00FE2C  41                 	db	65
   529  00FE2D  41                 	db	65
   530  00FE2E  3E                 	db	62
   531  00FE2F  7F                 	db	127
   532  00FE30  09                 	db	9
   533  00FE31  09                 	db	9
   534  00FE32  09                 	db	9
   535  00FE33  06                 	db	6
   536  00FE34  3E                 	db	62
   537  00FE35  41                 	db	65
   538  00FE36  51                 	db	81
   539  00FE37  21                 	db	33
   540  00FE38  5E                 	db	94
   541  00FE39  7F                 	db	127
   542  00FE3A  09                 	db	9
   543  00FE3B  19                 	db	25
   544  00FE3C  29                 	db	41
   545  00FE3D  46                 	db	70
   546  00FE3E                     __end_of_font:
   547                           	opt stack 0
   548  00FE3E                     _font2:
   549                           	opt stack 0
   550  00FE3E  26                 	db	38
   551  00FE3F  49                 	db	73
   552  00FE40  49                 	db	73
   553  00FE41  49                 	db	73
   554  00FE42  32                 	db	50
   555  00FE43  03                 	db	3
   556  00FE44  01                 	db	1
   557  00FE45  7F                 	db	127
   558  00FE46  01                 	db	1
   559  00FE47  03                 	db	3
   560  00FE48  3F                 	db	63
   561  00FE49  40                 	db	64
   562  00FE4A  40                 	db	64
   563  00FE4B  40                 	db	64
   564  00FE4C  3F                 	db	63
   565  00FE4D  1F                 	db	31
   566  00FE4E  20                 	db	32
   567  00FE4F  40                 	db	64
   568  00FE50  20                 	db	32
   569  00FE51  1F                 	db	31
   570  00FE52  3F                 	db	63
   571  00FE53  40                 	db	64
   572  00FE54  38                 	db	56
   573  00FE55  40                 	db	64
   574  00FE56  3F                 	db	63
   575  00FE57  63                 	db	99
   576  00FE58  14                 	db	20
   577  00FE59  08                 	db	8
   578  00FE5A  14                 	db	20
   579  00FE5B  63                 	db	99
   580  00FE5C  03                 	db	3
   581  00FE5D  04                 	db	4
   582  00FE5E  78                 	db	120
   583  00FE5F  04                 	db	4
   584  00FE60  03                 	db	3
   585  00FE61  61                 	db	97
   586  00FE62  59                 	db	89
   587  00FE63  49                 	db	73
   588  00FE64  4D                 	db	77
   589  00FE65  43                 	db	67
   590  00FE66  00                 	db	0
   591  00FE67  7F                 	db	127
   592  00FE68  41                 	db	65
   593  00FE69  41                 	db	65
   594  00FE6A  41                 	db	65
   595  00FE6B  02                 	db	2
   596  00FE6C  04                 	db	4
   597  00FE6D  08                 	db	8
   598  00FE6E  10                 	db	16
   599  00FE6F  20                 	db	32
   600  00FE70  00                 	db	0
   601  00FE71  41                 	db	65
   602  00FE72  41                 	db	65
   603  00FE73  41                 	db	65
   604  00FE74  7F                 	db	127
   605  00FE75  04                 	db	4
   606  00FE76  02                 	db	2
   607  00FE77  01                 	db	1
   608  00FE78  02                 	db	2
   609  00FE79  04                 	db	4
   610  00FE7A  40                 	db	64
   611  00FE7B  40                 	db	64
   612  00FE7C  40                 	db	64
   613  00FE7D  40                 	db	64
   614  00FE7E  40                 	db	64
   615  00FE7F  00                 	db	0
   616  00FE80  03                 	db	3
   617  00FE81  07                 	db	7
   618  00FE82  08                 	db	8
   619  00FE83  00                 	db	0
   620  00FE84  20                 	db	32
   621  00FE85  54                 	db	84
   622  00FE86  54                 	db	84
   623  00FE87  78                 	db	120
   624  00FE88  40                 	db	64
   625  00FE89  7F                 	db	127
   626  00FE8A  28                 	db	40
   627  00FE8B  44                 	db	68
   628  00FE8C  44                 	db	68
   629  00FE8D  38                 	db	56
   630  00FE8E  38                 	db	56
   631  00FE8F  44                 	db	68
   632  00FE90  44                 	db	68
   633  00FE91  44                 	db	68
   634  00FE92  28                 	db	40
   635  00FE93  38                 	db	56
   636  00FE94  44                 	db	68
   637  00FE95  44                 	db	68
   638  00FE96  28                 	db	40
   639  00FE97  7F                 	db	127
   640  00FE98  38                 	db	56
   641  00FE99  54                 	db	84
   642  00FE9A  54                 	db	84
   643  00FE9B  54                 	db	84
   644  00FE9C  18                 	db	24
   645  00FE9D  00                 	db	0
   646  00FE9E  08                 	db	8
   647  00FE9F  7E                 	db	126
   648  00FEA0  09                 	db	9
   649  00FEA1  02                 	db	2
   650  00FEA2  18                 	db	24
   651  00FEA3  A4                 	db	164
   652  00FEA4  A4                 	db	164
   653  00FEA5  9C                 	db	156
   654  00FEA6  78                 	db	120
   655  00FEA7  7F                 	db	127
   656  00FEA8  08                 	db	8
   657  00FEA9  04                 	db	4
   658  00FEAA  04                 	db	4
   659  00FEAB  78                 	db	120
   660  00FEAC  00                 	db	0
   661  00FEAD  44                 	db	68
   662  00FEAE  7D                 	db	125
   663  00FEAF  40                 	db	64
   664  00FEB0  00                 	db	0
   665  00FEB1  20                 	db	32
   666  00FEB2  40                 	db	64
   667  00FEB3  40                 	db	64
   668  00FEB4  3D                 	db	61
   669  00FEB5  00                 	db	0
   670  00FEB6  7F                 	db	127
   671  00FEB7  10                 	db	16
   672  00FEB8  28                 	db	40
   673  00FEB9  44                 	db	68
   674  00FEBA  00                 	db	0
   675  00FEBB  00                 	db	0
   676  00FEBC  41                 	db	65
   677  00FEBD  7F                 	db	127
   678  00FEBE  40                 	db	64
   679  00FEBF  00                 	db	0
   680  00FEC0  7C                 	db	124
   681  00FEC1  04                 	db	4
   682  00FEC2  78                 	db	120
   683  00FEC3  04                 	db	4
   684  00FEC4  78                 	db	120
   685  00FEC5  7C                 	db	124
   686  00FEC6  08                 	db	8
   687  00FEC7  04                 	db	4
   688  00FEC8  04                 	db	4
   689  00FEC9  78                 	db	120
   690  00FECA  38                 	db	56
   691  00FECB  44                 	db	68
   692  00FECC  44                 	db	68
   693  00FECD  44                 	db	68
   694  00FECE  38                 	db	56
   695  00FECF  FC                 	db	252
   696  00FED0  18                 	db	24
   697  00FED1  24                 	db	36
   698  00FED2  24                 	db	36
   699  00FED3  18                 	db	24
   700  00FED4  18                 	db	24
   701  00FED5  24                 	db	36
   702  00FED6  24                 	db	36
   703  00FED7  18                 	db	24
   704  00FED8  FC                 	db	252
   705  00FED9  7C                 	db	124
   706  00FEDA  08                 	db	8
   707  00FEDB  04                 	db	4
   708  00FEDC  04                 	db	4
   709  00FEDD  08                 	db	8
   710  00FEDE  48                 	db	72
   711  00FEDF  54                 	db	84
   712  00FEE0  54                 	db	84
   713  00FEE1  54                 	db	84
   714  00FEE2  24                 	db	36
   715  00FEE3  04                 	db	4
   716  00FEE4  04                 	db	4
   717  00FEE5  3F                 	db	63
   718  00FEE6  44                 	db	68
   719  00FEE7  24                 	db	36
   720  00FEE8  3C                 	db	60
   721  00FEE9  40                 	db	64
   722  00FEEA  40                 	db	64
   723  00FEEB  20                 	db	32
   724  00FEEC  7C                 	db	124
   725  00FEED  1C                 	db	28
   726  00FEEE  20                 	db	32
   727  00FEEF  40                 	db	64
   728  00FEF0  20                 	db	32
   729  00FEF1  1C                 	db	28
   730  00FEF2  3C                 	db	60
   731  00FEF3  40                 	db	64
   732  00FEF4  30                 	db	48
   733  00FEF5  40                 	db	64
   734  00FEF6  3C                 	db	60
   735  00FEF7  44                 	db	68
   736  00FEF8  28                 	db	40
   737  00FEF9  10                 	db	16
   738  00FEFA  28                 	db	40
   739  00FEFB  44                 	db	68
   740  00FEFC  4C                 	db	76
   741  00FEFD  90                 	db	144
   742  00FEFE  90                 	db	144
   743  00FEFF  90                 	db	144
   744  00FF00  7C                 	db	124
   745  00FF01  44                 	db	68
   746  00FF02  64                 	db	100
   747  00FF03  54                 	db	84
   748  00FF04  4C                 	db	76
   749  00FF05  44                 	db	68
   750  00FF06  00                 	db	0
   751  00FF07  08                 	db	8
   752  00FF08  36                 	db	54
   753  00FF09  41                 	db	65
   754  00FF0A  00                 	db	0
   755  00FF0B  00                 	db	0
   756  00FF0C  00                 	db	0
   757  00FF0D  77                 	db	119
   758  00FF0E  00                 	db	0
   759  00FF0F  00                 	db	0
   760  00FF10  00                 	db	0
   761  00FF11  41                 	db	65
   762  00FF12  36                 	db	54
   763  00FF13  08                 	db	8
   764  00FF14  00                 	db	0
   765  00FF15  02                 	db	2
   766  00FF16  01                 	db	1
   767  00FF17  02                 	db	2
   768  00FF18  04                 	db	4
   769  00FF19  02                 	db	2
   770  00FF1A                     __end_of_font2:
   771                           	opt stack 0
   772  00FF1A                     _dpowers:
   773                           	opt stack 0
   774  00FF1A  0001               	dw	1
   775  00FF1C  000A               	dw	10
   776  00FF1E  0064               	dw	100
   777  00FF20  03E8               	dw	1000
   778  00FF22  2710               	dw	10000
   779  00FF24                     __end_of_dpowers:
   780                           	opt stack 0
   781  00FF24                     _hexpowers:
   782                           	opt stack 0
   783  00FF24  0001               	dw	1
   784  00FF26  0010               	dw	16
   785  00FF28  0100               	dw	256
   786  00FF2A  1000               	dw	4096
   787  00FF2C                     __end_of_hexpowers:
   788                           	opt stack 0
   789  0000                     _ADCON1	set	4033
   790  0000                     _CCP1CON	set	4029
   791  0000                     _CCP2CON	set	4026
   792  0000                     _CCPR1L	set	4030
   793  0000                     _CCPR2L	set	4027
   794  0000                     _INTCON2bits	set	4081
   795  0000                     _INTCONbits	set	4082
   796  0000                     _OSCCON	set	4051
   797  0000                     _PIE1bits	set	3997
   798  0000                     _PIR1bits	set	3998
   799  0000                     _PIR2bits	set	4001
   800  0000                     _PORTAbits	set	3968
   801  0000                     _PORTBbits	set	3969
   802  0000                     _PORTCbits	set	3970
   803  0000                     _PORTDbits	set	3971
   804  0000                     _PORTEbits	set	3972
   805  0000                     _PR2	set	4043
   806  0000                     _RCSTA	set	4011
   807  0000                     _RCSTAbits	set	4011
   808  0000                     _SPBRG	set	4015
   809  0000                     _SPBRGH	set	4016
   810  0000                     _SSPBUF	set	4041
   811  0000                     _SSPCON1	set	4038
   812  0000                     _SSPSTAT	set	4039
   813  0000                     _SSPSTATbits	set	4039
   814  0000                     _T0CON	set	4053
   815  0000                     _T0CONbits	set	4053
   816  0000                     _T1CON	set	4045
   817  0000                     _T1CONbits	set	4045
   818  0000                     _T2CON	set	4042
   819  0000                     _T3CON	set	4017
   820  0000                     _T3CONbits	set	4017
   821  0000                     _TMR0H	set	4055
   822  0000                     _TMR0L	set	4054
   823  0000                     _TMR1H	set	4047
   824  0000                     _TMR1L	set	4046
   825  0000                     _TMR3H	set	4019
   826  0000                     _TMR3L	set	4018
   827  0000                     _TRISA	set	3986
   828  0000                     _TRISB	set	3987
   829  0000                     _TRISC	set	3988
   830  0000                     _TRISCbits	set	3988
   831  0000                     _TRISD	set	3989
   832  0000                     _TXREG	set	4013
   833  0000                     _TXSTA	set	4012
   834  0000                     _TXSTAbits	set	4012
   835  0000                     _RBPU	set	32655
   836  0000                     _TRMT	set	32097
   837  00FF2C                     STR_1:
   838  00FF2C  25                 	db	37
   839  00FF2D  30                 	db	48	;'0'
   840  00FF2E  32                 	db	50	;'2'
   841  00FF2F  78                 	db	120	;'x'
   842  00FF30  3A                 	db	58	;':'
   843  00FF31  25                 	db	37
   844  00FF32  30                 	db	48	;'0'
   845  00FF33  32                 	db	50	;'2'
   846  00FF34  78                 	db	120	;'x'
   847  00FF35  3A                 	db	58	;':'
   848  00FF36  25                 	db	37
   849  00FF37  30                 	db	48	;'0'
   850  00FF38  32                 	db	50	;'2'
   851  00FF39  78                 	db	120	;'x'
   852  00FF3A  20                 	db	32
   853  00FF3B  25                 	db	37
   854  00FF3C  30                 	db	48	;'0'
   855  00FF3D  32                 	db	50	;'2'
   856  00FF3E  78                 	db	120	;'x'
   857  00FF3F  2F                 	db	47
   858  00FF40  25                 	db	37
   859  00FF41  30                 	db	48	;'0'
   860  00FF42  32                 	db	50	;'2'
   861  00FF43  78                 	db	120	;'x'
   862  00FF44  2F                 	db	47
   863  00FF45  25                 	db	37
   864  00FF46  30                 	db	48	;'0'
   865  00FF47  32                 	db	50	;'2'
   866  00FF48  78                 	db	120	;'x'
   867  00FF49  00                 	db	0
   868  00FF4A                     STR_7:
   869  00FF4A  45                 	db	69	;'E'
   870  00FF4B  43                 	db	67	;'C'
   871  00FF4C  45                 	db	69	;'E'
   872  00FF4D  33                 	db	51	;'3'
   873  00FF4E  33                 	db	51	;'3'
   874  00FF4F  30                 	db	48	;'0'
   875  00FF50  31                 	db	49	;'1'
   876  00FF51  4C                 	db	76	;'L'
   877  00FF52  20                 	db	32
   878  00FF53  53                 	db	83	;'S'
   879  00FF54  70                 	db	112	;'p'
   880  00FF55  72                 	db	114	;'r'
   881  00FF56  69                 	db	105	;'i'
   882  00FF57  6E                 	db	110	;'n'
   883  00FF58  67                 	db	103	;'g'
   884  00FF59  20                 	db	32
   885  00FF5A  32                 	db	50	;'2'
   886  00FF5B  31                 	db	49	;'1'
   887  00FF5C  2D                 	db	45
   888  00FF5D  53                 	db	83	;'S'
   889  00FF5E  31                 	db	49	;'1'
   890  00FF5F  00                 	db	0
   891  00FF60                     STR_5:
   892  00FF60  43                 	db	67	;'C'
   893  00FF61  61                 	db	97	;'a'
   894  00FF62  6E                 	db	110	;'n'
   895  00FF63  6E                 	db	110	;'n'
   896  00FF64  6F                 	db	111	;'o'
   897  00FF65  74                 	db	116	;'t'
   898  00FF66  20                 	db	32
   899  00FF67  66                 	db	102	;'f'
   900  00FF68  69                 	db	105	;'i'
   901  00FF69  6E                 	db	110	;'n'
   902  00FF6A  64                 	db	100	;'d'
   903  00FF6B  20                 	db	32
   904  00FF6C  62                 	db	98	;'b'
   905  00FF6D  75                 	db	117	;'u'
   906  00FF6E  74                 	db	116	;'t'
   907  00FF6F  74                 	db	116	;'t'
   908  00FF70  6F                 	db	111	;'o'
   909  00FF71  6E                 	db	110	;'n'
   910  00FF72  20                 	db	32
   911  00FF73  0D                 	db	13
   912  00FF74  0A                 	db	10
   913  00FF75  00                 	db	0
   914  00FF76                     STR_2:
   915  00FF76  20                 	db	32
   916  00FF77  54                 	db	84	;'T'
   917  00FF78  65                 	db	101	;'e'
   918  00FF79  6D                 	db	109	;'m'
   919  00FF7A  70                 	db	112	;'p'
   920  00FF7B  20                 	db	32
   921  00FF7C  3D                 	db	61	;'='
   922  00FF7D  20                 	db	32
   923  00FF7E  25                 	db	37
   924  00FF7F  64                 	db	100	;'d'
   925  00FF80  20                 	db	32
   926  00FF81  43                 	db	67	;'C'
   927  00FF82  20                 	db	32
   928  00FF83  3D                 	db	61	;'='
   929  00FF84  20                 	db	32
   930  00FF85  25                 	db	37
   931  00FF86  64                 	db	100	;'d'
   932  00FF87  20                 	db	32
   933  00FF88  46                 	db	70	;'F'
   934  00FF89  20                 	db	32
   935  00FF8A  00                 	db	0
   936  00FF8B                     STR_3:
   937  00FF8B  52                 	db	82	;'R'
   938  00FF8C  50                 	db	80	;'P'
   939  00FF8D  4D                 	db	77	;'M'
   940  00FF8E  20                 	db	32
   941  00FF8F  3D                 	db	61	;'='
   942  00FF90  20                 	db	32
   943  00FF91  25                 	db	37
   944  00FF92  64                 	db	100	;'d'
   945  00FF93  20                 	db	32
   946  00FF94  20                 	db	32
   947  00FF95  64                 	db	100	;'d'
   948  00FF96  63                 	db	99	;'c'
   949  00FF97  20                 	db	32
   950  00FF98  3D                 	db	61	;'='
   951  00FF99  20                 	db	32
   952  00FF9A  25                 	db	37
   953  00FF9B  64                 	db	100	;'d'
   954  00FF9C  0D                 	db	13
   955  00FF9D  0A                 	db	10
   956  00FF9E  00                 	db	0
   957  00FF9F                     STR_18:
   958  00FF9F  30                 	db	48	;'0'
   959  00FFA0  31                 	db	49	;'1'
   960  00FFA1  32                 	db	50	;'2'
   961  00FFA2  33                 	db	51	;'3'
   962  00FFA3  34                 	db	52	;'4'
   963  00FFA4  35                 	db	53	;'5'
   964  00FFA5  36                 	db	54	;'6'
   965  00FFA6  37                 	db	55	;'7'
   966  00FFA7  38                 	db	56	;'8'
   967  00FFA8  39                 	db	57	;'9'
   968  00FFA9  61                 	db	97	;'a'
   969  00FFAA  62                 	db	98	;'b'
   970  00FFAB  63                 	db	99	;'c'
   971  00FFAC  64                 	db	100	;'d'
   972  00FFAD  65                 	db	101	;'e'
   973  00FFAE  66                 	db	102	;'f'
   974  00FFAF  00                 	db	0
   975  00FFB0                     STR_4:
   976  00FFB0  4E                 	db	78	;'N'
   977  00FFB1  45                 	db	69	;'E'
   978  00FFB2  43                 	db	67	;'C'
   979  00FFB3  5F                 	db	95	;'_'
   980  00FFB4  43                 	db	67	;'C'
   981  00FFB5  6F                 	db	111	;'o'
   982  00FFB6  64                 	db	100	;'d'
   983  00FFB7  65                 	db	101	;'e'
   984  00FFB8  20                 	db	32
   985  00FFB9  3D                 	db	61	;'='
   986  00FFBA  20                 	db	32
   987  00FFBB  25                 	db	37
   988  00FFBC  78                 	db	120	;'x'
   989  00FFBD  0D                 	db	13
   990  00FFBE  0A                 	db	10
   991  00FFBF  00                 	db	0
   992  00FFC0                     STR_6:
   993  00FFC0  62                 	db	98	;'b'
   994  00FFC1  75                 	db	117	;'u'
   995  00FFC2  74                 	db	116	;'t'
   996  00FFC3  74                 	db	116	;'t'
   997  00FFC4  6F                 	db	111	;'o'
   998  00FFC5  6E                 	db	110	;'n'
   999  00FFC6  20                 	db	32
  1000  00FFC7  3D                 	db	61	;'='
  1001  00FFC8  20                 	db	32
  1002  00FFC9  25                 	db	37
  1003  00FFCA  64                 	db	100	;'d'
  1004  00FFCB  20                 	db	32
  1005  00FFCC  0D                 	db	13
  1006  00FFCD  0A                 	db	10
  1007  00FFCE  00                 	db	0
  1008  00FFCF                     STR_8:
  1009  00FFCF  54                 	db	84	;'T'
  1010  00FFD0  65                 	db	101	;'e'
  1011  00FFD1  6D                 	db	109	;'m'
  1012  00FFD2  70                 	db	112	;'p'
  1013  00FFD3  65                 	db	101	;'e'
  1014  00FFD4  72                 	db	114	;'r'
  1015  00FFD5  61                 	db	97	;'a'
  1016  00FFD6  74                 	db	116	;'t'
  1017  00FFD7  75                 	db	117	;'u'
  1018  00FFD8  72                 	db	114	;'r'
  1019  00FFD9  65                 	db	101	;'e'
  1020  00FFDA  3A                 	db	58	;':'
  1021  00FFDB  00                 	db	0
  1022  00FFDC                     STR_13:
  1023  00FFDC  20                 	db	32
  1024  00FFDD  20                 	db	32
  1025  00FFDE  46                 	db	70	;'F'
  1026  00FFDF  41                 	db	65	;'A'
  1027  00FFE0  4E                 	db	78	;'N'
  1028  00FFE1  00                 	db	0
  1029  00FFE2                     STR_11:
  1030  00FFE2  54                 	db	84	;'T'
  1031  00FFE3  69                 	db	105	;'i'
  1032  00FFE4  6D                 	db	109	;'m'
  1033  00FFE5  65                 	db	101	;'e'
  1034  00FFE6  00                 	db	0
  1035  00FFE7                     STR_12:
  1036  00FFE7  44                 	db	68	;'D'
  1037  00FFE8  61                 	db	97	;'a'
  1038  00FFE9  74                 	db	116	;'t'
  1039  00FFEA  65                 	db	101	;'e'
  1040  00FFEB  00                 	db	0
  1041  00FFEC                     STR_16:
  1042  00FFEC  4F                 	db	79	;'O'
  1043  00FFED  4E                 	db	78	;'N'
  1044  00FFEE  20                 	db	32
  1045  00FFEF  00                 	db	0
  1046  00FFF0                     STR_17:
  1047  00FFF0  4F                 	db	79	;'O'
  1048  00FFF1  46                 	db	70	;'F'
  1049  00FFF2  46                 	db	70	;'F'
  1050  00FFF3  00                 	db	0
  1051  00FFF4                     STR_15:
  1052  00FFF4  52                 	db	82	;'R'
  1053  00FFF5  50                 	db	80	;'P'
  1054  00FFF6  4D                 	db	77	;'M'
  1055  00FFF7  00                 	db	0
  1056  00FFF8                     STR_9:
  1057  00FFF8  43                 	db	67	;'C'
  1058  00FFF9  2F                 	db	47
  1059  00FFFA  00                 	db	0
  1060  00FFFB                     STR_14:
  1061  00FFFB  44                 	db	68	;'D'
  1062  00FFFC  43                 	db	67	;'C'
  1063  00FFFD  00                 	db	0
  1064  0000                     
  1065                           ; #config settings
  1066  00FFFE  00                 	db	0	; dummy byte at the end
  1067  0000                     
  1068                           	psect	cinit
  1069  001990                     __pcinit:
  1070                           	opt stack 0
  1071  001990                     start_initialization:
  1072                           	opt stack 0
  1073  001990                     __initialization:
  1074                           	opt stack 0
  1075                           
  1076                           ; Clear objects allocated to BANK0 (8 bytes)
  1077  001990  EE00  F0F8         	lfsr	0,__pbssBANK0
  1078  001994  0E08               	movlw	8
  1079  001996                     clear_0:
  1080  001996  6AEE               	clrf	postinc0,c
  1081  001998  06E8               	decf	wreg,f,c
  1082  00199A  E1FD               	bnz	clear_0
  1083                           
  1084                           ; Clear objects allocated to COMRAM (43 bytes)
  1085  00199C  EE00  F042         	lfsr	0,__pbssCOMRAM
  1086  0019A0  0E2B               	movlw	43
  1087  0019A2                     clear_1:
  1088  0019A2  6AEE               	clrf	postinc0,c
  1089  0019A4  06E8               	decf	wreg,f,c
  1090  0019A6  E1FD               	bnz	clear_1
  1091                           
  1092                           ; Initialize objects allocated to BANK1 (33 bytes)
  1093                           ; load TBLPTR registers with __pidataBANK1
  1094  0019A8  0E54               	movlw	low __pidataBANK1
  1095  0019AA  6EF6               	movwf	tblptrl,c
  1096  0019AC  0E20               	movlw	high __pidataBANK1
  1097  0019AE  6EF7               	movwf	tblptrh,c
  1098  0019B0  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1099  0019B2  6EF8               	movwf	tblptru,c
  1100  0019B4  EE01  F000         	lfsr	0,__pdataBANK1
  1101  0019B8  EE10 F021          	lfsr	1,33
  1102  0019BC                     copy_data0:
  1103  0019BC  0009               	tblrd		*+
  1104  0019BE  CFF5 FFEE          	movff	tablat,postinc0
  1105  0019C2  50E5               	movf	postdec1,w,c
  1106  0019C4  50E1               	movf	fsr1l,w,c
  1107  0019C6  E1FA               	bnz	copy_data0
  1108                           
  1109                           ; Initialize objects allocated to BANK0 (107 bytes)
  1110                           ; load TBLPTR registers with __pidataBANK0
  1111  0019C8  0EFC               	movlw	low __pidataBANK0
  1112  0019CA  6EF6               	movwf	tblptrl,c
  1113  0019CC  0E1A               	movlw	high __pidataBANK0
  1114  0019CE  6EF7               	movwf	tblptrh,c
  1115  0019D0  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1116  0019D2  6EF8               	movwf	tblptru,c
  1117  0019D4  EE00  F080         	lfsr	0,__pdataBANK0
  1118  0019D8  EE10 F06B          	lfsr	1,107
  1119  0019DC                     copy_data1:
  1120  0019DC  0009               	tblrd		*+
  1121  0019DE  CFF5 FFEE          	movff	tablat,postinc0
  1122  0019E2  50E5               	movf	postdec1,w,c
  1123  0019E4  50E1               	movf	fsr1l,w,c
  1124  0019E6  E1FA               	bnz	copy_data1
  1125                           
  1126                           ; Initialize objects allocated to COMRAM (3 bytes)
  1127                           ; load TBLPTR registers with __pidataCOMRAM
  1128  0019E8  0E58               	movlw	low __pidataCOMRAM
  1129  0019EA  6EF6               	movwf	tblptrl,c
  1130  0019EC  0E22               	movlw	high __pidataCOMRAM
  1131  0019EE  6EF7               	movwf	tblptrh,c
  1132  0019F0  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1133  0019F2  6EF8               	movwf	tblptru,c
  1134  0019F4  0009               	tblrd		*+	;fetch initializer
  1135  0019F6  CFF5 F06D          	movff	tablat,__pdataCOMRAM
  1136  0019FA  0009               	tblrd		*+	;fetch initializer
  1137  0019FC  CFF5 F06E          	movff	tablat,__pdataCOMRAM+1
  1138  001A00  0009               	tblrd		*+	;fetch initializer
  1139  001A02  CFF5 F06F          	movff	tablat,__pdataCOMRAM+2
  1140  001A06                     end_of_initialization:
  1141                           	opt stack 0
  1142  001A06                     __end_of__initialization:
  1143                           	opt stack 0
  1144  001A06  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1145  001A08  6EF8               	movwf	tblptru,c
  1146  001A0A  0100               	movlb	0
  1147  001A0C  EFA7  F005         	goto	_main	;jump to C main() function
  1148                           tblptru	equ	0xFF8
  1149                           tblptrh	equ	0xFF7
  1150                           tblptrl	equ	0xFF6
  1151                           tablat	equ	0xFF5
  1152                           postinc0	equ	0xFEE
  1153                           wreg	equ	0xFE8
  1154                           postdec1	equ	0xFE5
  1155                           fsr1l	equ	0xFE1
  1156                           
  1157                           	psect	bssCOMRAM
  1158  000042                     __pbssCOMRAM:
  1159                           	opt stack 0
  1160  000042                     _DS1621_tempC:
  1161                           	opt stack 0
  1162  000042                     	ds	2
  1163  000044                     _DS1621_tempF:
  1164                           	opt stack 0
  1165  000044                     	ds	2
  1166  000046                     _Time_Elapsed:
  1167                           	opt stack 0
  1168  000046                     	ds	2
  1169  000048                     _nec_ok:
  1170                           	opt stack 0
  1171  000048                     	ds	2
  1172  00004A                     _rpm:
  1173                           	opt stack 0
  1174  00004A                     	ds	2
  1175  00004C                     _rps:
  1176                           	opt stack 0
  1177  00004C                     	ds	2
  1178  00004E                     _txt:
  1179                           	opt stack 0
  1180  00004E                     	ds	2
  1181  000050                     _FAN:
  1182                           	opt stack 0
  1183  000050                     	ds	1
  1184  000051                     _Nec_code1:
  1185                           	opt stack 0
  1186  000051                     	ds	1
  1187  000052                     _Nec_state:
  1188                           	opt stack 0
  1189  000052                     	ds	1
  1190  000053                     __tft_type:
  1191                           	opt stack 0
  1192  000053                     	ds	1
  1193  000054                     _alarm_date:
  1194                           	opt stack 0
  1195  000054                     	ds	1
  1196  000055                     _alarm_hour:
  1197                           	opt stack 0
  1198  000055                     	ds	1
  1199  000056                     _alarm_minute:
  1200                           	opt stack 0
  1201  000056                     	ds	1
  1202  000057                     _alarm_second:
  1203                           	opt stack 0
  1204  000057                     	ds	1
  1205  000058                     _bit_count:
  1206                           	opt stack 0
  1207  000058                     	ds	1
  1208  000059                     _colstart:
  1209                           	opt stack 0
  1210  000059                     	ds	1
  1211  00005A                     _day:
  1212                           	opt stack 0
  1213  00005A                     	ds	1
  1214  00005B                     _dow:
  1215                           	opt stack 0
  1216  00005B                     	ds	1
  1217  00005C                     _duty_cycle:
  1218                           	opt stack 0
  1219  00005C                     	ds	1
  1220  00005D                     _found:
  1221                           	opt stack 0
  1222  00005D                     	ds	1
  1223  00005E                     _hour:
  1224                           	opt stack 0
  1225  00005E                     	ds	1
  1226  00005F                     _minute:
  1227                           	opt stack 0
  1228  00005F                     	ds	1
  1229  000060                     _month:
  1230                           	opt stack 0
  1231  000060                     	ds	1
  1232  000061                     _rowstart:
  1233                           	opt stack 0
  1234  000061                     	ds	1
  1235  000062                     _second:
  1236                           	opt stack 0
  1237  000062                     	ds	1
  1238  000063                     _setup_alarm_hour:
  1239                           	opt stack 0
  1240  000063                     	ds	1
  1241  000064                     _setup_alarm_minute:
  1242                           	opt stack 0
  1243  000064                     	ds	1
  1244  000065                     _setup_alarm_second:
  1245                           	opt stack 0
  1246  000065                     	ds	1
  1247  000066                     _setup_day:
  1248                           	opt stack 0
  1249  000066                     	ds	1
  1250  000067                     _setup_hour:
  1251                           	opt stack 0
  1252  000067                     	ds	1
  1253  000068                     _setup_minute:
  1254                           	opt stack 0
  1255  000068                     	ds	1
  1256  000069                     _setup_month:
  1257                           	opt stack 0
  1258  000069                     	ds	1
  1259  00006A                     _setup_second:
  1260                           	opt stack 0
  1261  00006A                     	ds	1
  1262  00006B                     _setup_year:
  1263                           	opt stack 0
  1264  00006B                     	ds	1
  1265  00006C                     _year:
  1266                           	opt stack 0
  1267  00006C                     	ds	1
  1268                           tblptru	equ	0xFF8
  1269                           tblptrh	equ	0xFF7
  1270                           tblptrl	equ	0xFF6
  1271                           tablat	equ	0xFF5
  1272                           postinc0	equ	0xFEE
  1273                           wreg	equ	0xFE8
  1274                           postdec1	equ	0xFE5
  1275                           fsr1l	equ	0xFE1
  1276                           
  1277                           	psect	dataCOMRAM
  1278  00006D                     __pdataCOMRAM:
  1279                           	opt stack 0
  1280  00006D                     _setup_fan_temp:
  1281                           	opt stack 0
  1282  00006D                     	ds	1
  1283  00006E                     _tempSecond:
  1284                           	opt stack 0
  1285  00006E                     	ds	1
  1286  00006F                     _wrap:
  1287                           	opt stack 0
  1288  00006F                     	ds	1
  1289                           tblptru	equ	0xFF8
  1290                           tblptrh	equ	0xFF7
  1291                           tblptrl	equ	0xFF6
  1292                           tablat	equ	0xFF5
  1293                           postinc0	equ	0xFEE
  1294                           wreg	equ	0xFE8
  1295                           postdec1	equ	0xFE5
  1296                           fsr1l	equ	0xFE1
  1297                           
  1298                           	psect	bssBANK0
  1299  0000F8                     __pbssBANK0:
  1300                           	opt stack 0
  1301  0000F8                     _Nec_code:
  1302                           	opt stack 0
  1303  0000F8                     	ds	4
  1304  0000FC                     _ALARMEN:
  1305                           	opt stack 0
  1306  0000FC                     	ds	2
  1307  0000FE                     _nbr:
  1308                           	opt stack 0
  1309  0000FE                     	ds	2
  1310                           tblptru	equ	0xFF8
  1311                           tblptrh	equ	0xFF7
  1312                           tblptrl	equ	0xFF6
  1313                           tablat	equ	0xFF5
  1314                           postinc0	equ	0xFEE
  1315                           wreg	equ	0xFE8
  1316                           postdec1	equ	0xFE5
  1317                           fsr1l	equ	0xFE1
  1318                           
  1319                           	psect	dataBANK0
  1320  000080                     __pdataBANK0:
  1321                           	opt stack 0
  1322  000080                     _array1:
  1323                           	opt stack 0
  1324  000080                     	ds	21
  1325  000095                     _alarm_time:
  1326                           	opt stack 0
  1327  000095                     	ds	9
  1328  00009E                     _setup_alarm_time:
  1329                           	opt stack 0
  1330  00009E                     	ds	9
  1331  0000A7                     _setup_date:
  1332                           	opt stack 0
  1333  0000A7                     	ds	9
  1334  0000B0                     _setup_time:
  1335                           	opt stack 0
  1336  0000B0                     	ds	9
  1337  0000B9                     _setup_fan_text:
  1338                           	opt stack 0
  1339  0000B9                     	ds	5
  1340  0000BE                     _Alarm_SW_Txt:
  1341                           	opt stack 0
  1342  0000BE                     	ds	4
  1343  0000C2                     _RTC_ALARM_Txt:
  1344                           	opt stack 0
  1345  0000C2                     	ds	2
  1346  0000C4                     _date:
  1347                           	opt stack 0
  1348  0000C4                     	ds	9
  1349  0000CD                     _time:
  1350                           	opt stack 0
  1351  0000CD                     	ds	9
  1352  0000D6                     _RPM_Txt:
  1353                           	opt stack 0
  1354  0000D6                     	ds	5
  1355  0000DB                     _DC_Txt:
  1356                           	opt stack 0
  1357  0000DB                     	ds	4
  1358  0000DF                     _Fan_SW_Txt:
  1359                           	opt stack 0
  1360  0000DF                     	ds	4
  1361  0000E3                     _tempC:
  1362                           	opt stack 0
  1363  0000E3                     	ds	4
  1364  0000E7                     _tempF:
  1365                           	opt stack 0
  1366  0000E7                     	ds	4
  1367                           tblptru	equ	0xFF8
  1368                           tblptrh	equ	0xFF7
  1369                           tblptrl	equ	0xFF6
  1370                           tablat	equ	0xFF5
  1371                           postinc0	equ	0xFEE
  1372                           wreg	equ	0xFE8
  1373                           postdec1	equ	0xFE5
  1374                           fsr1l	equ	0xFE1
  1375                           
  1376                           	psect	dataBANK1
  1377  000100                     __pdataBANK1:
  1378                           	opt stack 0
  1379  000100                     _buffer:
  1380                           	opt stack 0
  1381  000100                     	ds	33
  1382                           tblptru	equ	0xFF8
  1383                           tblptrh	equ	0xFF7
  1384                           tblptrl	equ	0xFF6
  1385                           tablat	equ	0xFF5
  1386                           postinc0	equ	0xFEE
  1387                           wreg	equ	0xFE8
  1388                           postdec1	equ	0xFE5
  1389                           fsr1l	equ	0xFE1
  1390                           
  1391                           	psect	cstackBANK1
  1392  000121                     __pcstackBANK1:
  1393                           	opt stack 0
  1394  000121                     main@j:
  1395                           	opt stack 0
  1396                           
  1397                           ; 2 bytes @ 0x0
  1398  000121                     	ds	2
  1399                           tblptru	equ	0xFF8
  1400                           tblptrh	equ	0xFF7
  1401                           tblptrl	equ	0xFF6
  1402                           tablat	equ	0xFF5
  1403                           postinc0	equ	0xFEE
  1404                           wreg	equ	0xFE8
  1405                           postdec1	equ	0xFE5
  1406                           fsr1l	equ	0xFE1
  1407                           
  1408                           	psect	cstackBANK0
  1409  0000EB                     __pcstackBANK0:
  1410                           	opt stack 0
  1411  0000EB                     ??_drawtext:
  1412  0000EB                     do_update_pwm@dc_f:
  1413                           	opt stack 0
  1414                           
  1415                           ; 3 bytes @ 0x0
  1416  0000EB                     	ds	2
  1417  0000ED                     drawtext@x:
  1418                           	opt stack 0
  1419                           
  1420                           ; 1 bytes @ 0x2
  1421  0000ED                     	ds	1
  1422  0000EE                     do_update_pwm@duty_cycle:
  1423                           	opt stack 0
  1424  0000EE                     drawtext@textsize:
  1425                           	opt stack 0
  1426                           
  1427                           ; 2 bytes @ 0x3
  1428  0000EE                     	ds	1
  1429  0000EF                     do_update_pwm@dc_I:
  1430                           	opt stack 0
  1431                           
  1432                           ; 2 bytes @ 0x4
  1433  0000EF                     	ds	1
  1434  0000F0                     drawtext@i:
  1435                           	opt stack 0
  1436                           
  1437                           ; 2 bytes @ 0x5
  1438  0000F0                     	ds	2
  1439  0000F2                     drawtext@cursor_y:
  1440                           	opt stack 0
  1441                           
  1442                           ; 1 bytes @ 0x7
  1443  0000F2                     	ds	1
  1444  0000F3                     drawtext@cursor_x:
  1445                           	opt stack 0
  1446                           
  1447                           ; 1 bytes @ 0x8
  1448  0000F3                     	ds	1
  1449  0000F4                     ??_Update_Screen:
  1450                           
  1451                           ; 0 bytes @ 0x9
  1452  0000F4                     	ds	2
  1453  0000F6                     Update_Screen@neg_tempF:
  1454                           	opt stack 0
  1455                           
  1456                           ; 2 bytes @ 0xB
  1457  0000F6                     	ds	2
  1458                           tblptru	equ	0xFF8
  1459                           tblptrh	equ	0xFF7
  1460                           tblptrl	equ	0xFF6
  1461                           tablat	equ	0xFF5
  1462                           postinc0	equ	0xFEE
  1463                           wreg	equ	0xFE8
  1464                           postdec1	equ	0xFE5
  1465                           fsr1l	equ	0xFE1
  1466                           
  1467                           	psect	cstackCOMRAM
  1468  000001                     __pcstackCOMRAM:
  1469                           	opt stack 0
  1470  000001                     ??_INT0_isr:
  1471  000001                     
  1472                           ; 2 bytes @ 0x0
  1473  000001                     	ds	2
  1474  000003                     ??_chkisr:
  1475                           
  1476                           ; 0 bytes @ 0x2
  1477  000003                     	ds	14
  1478  000011                     ??_isdigit:
  1479  000011                     ?_strlen:
  1480                           	opt stack 0
  1481  000011                     ?___wmul:
  1482                           	opt stack 0
  1483  000011                     ?___lwdiv:
  1484                           	opt stack 0
  1485  000011                     ?___ftpack:
  1486                           	opt stack 0
  1487  000011                     ?___fttol:
  1488                           	opt stack 0
  1489  000011                     putch@c:
  1490                           	opt stack 0
  1491  000011                     I2C_Read@ack:
  1492                           	opt stack 0
  1493  000011                     I2C_Write@outByte:
  1494                           	opt stack 0
  1495  000011                     spiwrite@x:
  1496                           	opt stack 0
  1497  000011                     OpenUSART@spbrg:
  1498                           	opt stack 0
  1499  000011                     ___wmul@multiplier:
  1500                           	opt stack 0
  1501  000011                     ___lwdiv@dividend:
  1502                           	opt stack 0
  1503  000011                     strcpy@to:
  1504                           	opt stack 0
  1505  000011                     strlen@s:
  1506                           	opt stack 0
  1507  000011                     ___ftpack@arg:
  1508                           	opt stack 0
  1509  000011                     ___fttol@f1:
  1510                           	opt stack 0
  1511  000011                     I2C_Init@c:
  1512                           	opt stack 0
  1513                           
  1514                           ; 4 bytes @ 0x10
  1515  000011                     	ds	1
  1516  000012                     I2C_Read@n:
  1517                           	opt stack 0
  1518  000012                     I2C_Write@n:
  1519                           	opt stack 0
  1520  000012                     spiwrite@spidata:
  1521                           	opt stack 0
  1522  000012                     _isdigit$2448:
  1523                           	opt stack 0
  1524                           
  1525                           ; 1 bytes @ 0x11
  1526  000012                     	ds	1
  1527  000013                     ??_strlen:
  1528  000013                     I2C_Read@inByte:
  1529                           	opt stack 0
  1530  000013                     I2C_Write_Cmd_Only@Cmd:
  1531                           	opt stack 0
  1532  000013                     I2C_Write_Cmd_Write_Data@Cmd:
  1533                           	opt stack 0
  1534  000013                     write_command@cmd_:
  1535                           	opt stack 0
  1536  000013                     write_data@data_:
  1537                           	opt stack 0
  1538  000013                     OpenUSART@config:
  1539                           	opt stack 0
  1540  000013                     isdigit@c:
  1541                           	opt stack 0
  1542  000013                     ___wmul@multiplicand:
  1543                           	opt stack 0
  1544  000013                     ___lwdiv@divisor:
  1545                           	opt stack 0
  1546  000013                     strcpy@from:
  1547                           	opt stack 0
  1548                           
  1549                           ; 2 bytes @ 0x12
  1550  000013                     	ds	1
  1551  000014                     ?_DS1621_Read_Temp:
  1552                           	opt stack 0
  1553  000014                     DS3231_Read_Time@Address:
  1554                           	opt stack 0
  1555  000014                     I2C_Write_Cmd_Only@Device:
  1556                           	opt stack 0
  1557  000014                     I2C_Write_Cmd_Write_Data@Data_Out:
  1558                           	opt stack 0
  1559  000014                     setAddrWindow@y0:
  1560                           	opt stack 0
  1561  000014                     ___ftpack@exp:
  1562                           	opt stack 0
  1563                           
  1564                           ; 1 bytes @ 0x13
  1565  000014                     	ds	1
  1566  000015                     ??___fttol:
  1567  000015                     DS3231_Read_Time@Device:
  1568                           	opt stack 0
  1569  000015                     I2C_Write_Cmd_Write_Data@Device:
  1570                           	opt stack 0
  1571  000015                     setAddrWindow@x1:
  1572                           	opt stack 0
  1573  000015                     ___ftpack@sign:
  1574                           	opt stack 0
  1575  000015                     ___lwdiv@counter:
  1576                           	opt stack 0
  1577  000015                     ___wmul@product:
  1578                           	opt stack 0
  1579  000015                     strcpy@cp:
  1580                           	opt stack 0
  1581  000015                     strlen@cp:
  1582                           	opt stack 0
  1583                           
  1584                           ; 2 bytes @ 0x14
  1585  000015                     	ds	1
  1586  000016                     ??___ftpack:
  1587  000016                     DS1621_Init@Device:
  1588                           	opt stack 0
  1589  000016                     DS1621_Read_Temp@Cmd:
  1590                           	opt stack 0
  1591  000016                     setAddrWindow@y1:
  1592                           	opt stack 0
  1593  000016                     ___lwdiv@quotient:
  1594                           	opt stack 0
  1595                           
  1596                           ; 2 bytes @ 0x15
  1597  000016                     	ds	1
  1598  000017                     ?___awdiv:
  1599                           	opt stack 0
  1600  000017                     DS1621_Read_Temp@Data_Ret:
  1601                           	opt stack 0
  1602  000017                     setAddrWindow@x0:
  1603                           	opt stack 0
  1604  000017                     delay_ms@ms:
  1605                           	opt stack 0
  1606  000017                     ___awdiv@dividend:
  1607                           	opt stack 0
  1608                           
  1609                           ; 2 bytes @ 0x16
  1610  000017                     	ds	1
  1611  000018                     ?___lwmod:
  1612                           	opt stack 0
  1613  000018                     DS1621_Read_Temp@Device:
  1614                           	opt stack 0
  1615  000018                     drawPixel@y:
  1616                           	opt stack 0
  1617  000018                     drawFastVLine@y:
  1618                           	opt stack 0
  1619  000018                     fillRectangle@y:
  1620                           	opt stack 0
  1621  000018                     ___lwmod@dividend:
  1622                           	opt stack 0
  1623                           
  1624                           ; 2 bytes @ 0x17
  1625  000018                     	ds	1
  1626  000019                     ??_delay_ms:
  1627  000019                     ?___lbtoft:
  1628                           	opt stack 0
  1629  000019                     drawFastVLine@h:
  1630                           	opt stack 0
  1631  000019                     fillRectangle@w:
  1632                           	opt stack 0
  1633  000019                     drawPixel@color:
  1634                           	opt stack 0
  1635  000019                     ___awdiv@divisor:
  1636                           	opt stack 0
  1637                           
  1638                           ; 2 bytes @ 0x18
  1639  000019                     	ds	1
  1640  00001A                     fillRectangle@h:
  1641                           	opt stack 0
  1642  00001A                     ___fttol@sign1:
  1643                           	opt stack 0
  1644  00001A                     drawFastVLine@color:
  1645                           	opt stack 0
  1646  00001A                     ___lwmod@divisor:
  1647                           	opt stack 0
  1648                           
  1649                           ; 2 bytes @ 0x19
  1650  00001A                     	ds	1
  1651  00001B                     drawPixel@x:
  1652                           	opt stack 0
  1653  00001B                     ___awdiv@counter:
  1654                           	opt stack 0
  1655  00001B                     delay_ms@count:
  1656                           	opt stack 0
  1657  00001B                     fillRectangle@color:
  1658                           	opt stack 0
  1659  00001B                     ___fttol@lval:
  1660                           	opt stack 0
  1661                           
  1662                           ; 4 bytes @ 0x1A
  1663  00001B                     	ds	1
  1664  00001C                     ??_drawFastVLine:
  1665  00001C                     ___awdiv@sign:
  1666                           	opt stack 0
  1667  00001C                     ___lbtoft@c:
  1668                           	opt stack 0
  1669  00001C                     ___lwmod@counter:
  1670                           	opt stack 0
  1671  00001C                     drawCircle@x0:
  1672                           	opt stack 0
  1673                           
  1674                           ; 2 bytes @ 0x1B
  1675  00001C                     	ds	1
  1676  00001D                     ??_fillRectangle:
  1677  00001D                     ?_printf:
  1678                           	opt stack 0
  1679  00001D                     ?___ftmul:
  1680                           	opt stack 0
  1681  00001D                     printf@f:
  1682                           	opt stack 0
  1683  00001D                     ___awdiv@quotient:
  1684                           	opt stack 0
  1685  00001D                     ___ftmul@f1:
  1686                           	opt stack 0
  1687                           
  1688                           ; 3 bytes @ 0x1C
  1689  00001D                     	ds	1
  1690  00001E                     drawCircle@y0:
  1691                           	opt stack 0
  1692                           
  1693                           ; 2 bytes @ 0x1D
  1694  00001E                     	ds	1
  1695  00001F                     ?_get_RPM:
  1696                           	opt stack 0
  1697  00001F                     ?___awmod:
  1698                           	opt stack 0
  1699  00001F                     ___fttol@exp1:
  1700                           	opt stack 0
  1701  00001F                     ___awmod@dividend:
  1702                           	opt stack 0
  1703                           
  1704                           ; 2 bytes @ 0x1E
  1705  00001F                     	ds	1
  1706  000020                     drawFastVLine@hi:
  1707                           	opt stack 0
  1708  000020                     drawCircle@r:
  1709                           	opt stack 0
  1710  000020                     ___ftmul@f2:
  1711                           	opt stack 0
  1712                           
  1713                           ; 3 bytes @ 0x1F
  1714  000020                     	ds	1
  1715  000021                     drawFastVLine@lo:
  1716                           	opt stack 0
  1717  000021                     fillRectangle@hi:
  1718                           	opt stack 0
  1719  000021                     get_RPM@RPS:
  1720                           	opt stack 0
  1721  000021                     ___awmod@divisor:
  1722                           	opt stack 0
  1723                           
  1724                           ; 2 bytes @ 0x20
  1725  000021                     	ds	1
  1726  000022                     drawFastVLine@x:
  1727                           	opt stack 0
  1728  000022                     fillRectangle@lo:
  1729                           	opt stack 0
  1730  000022                     drawCircle@color:
  1731                           	opt stack 0
  1732                           
  1733                           ; 2 bytes @ 0x21
  1734  000022                     	ds	1
  1735  000023                     ??___ftmul:
  1736  000023                     fillRect@y:
  1737                           	opt stack 0
  1738  000023                     fillRectangle@x:
  1739                           	opt stack 0
  1740  000023                     ___awmod@counter:
  1741                           	opt stack 0
  1742                           
  1743                           ; 1 bytes @ 0x22
  1744  000023                     	ds	1
  1745  000024                     ??_drawCircle:
  1746  000024                     fillRect@w:
  1747                           	opt stack 0
  1748  000024                     ___awmod@sign:
  1749                           	opt stack 0
  1750  000024                     fillScreen@color:
  1751                           	opt stack 0
  1752                           
  1753                           ; 2 bytes @ 0x23
  1754  000024                     	ds	1
  1755  000025                     fillRect@h:
  1756                           	opt stack 0
  1757                           
  1758                           ; 1 bytes @ 0x24
  1759  000025                     	ds	1
  1760  000026                     ___ftmul@exp:
  1761                           	opt stack 0
  1762  000026                     fillRect@color:
  1763                           	opt stack 0
  1764  000026                     drawCircle@ddF_x:
  1765                           	opt stack 0
  1766                           
  1767                           ; 2 bytes @ 0x25
  1768  000026                     	ds	1
  1769  000027                     ___ftmul@f3_as_product:
  1770                           	opt stack 0
  1771                           
  1772                           ; 3 bytes @ 0x26
  1773  000027                     	ds	1
  1774  000028                     ??_fillRect:
  1775  000028                     drawCircle@ddF_y:
  1776                           	opt stack 0
  1777                           
  1778                           ; 2 bytes @ 0x27
  1779  000028                     	ds	2
  1780  00002A                     ___ftmul@cntr:
  1781                           	opt stack 0
  1782  00002A                     drawCircle@f:
  1783                           	opt stack 0
  1784                           
  1785                           ; 2 bytes @ 0x29
  1786  00002A                     	ds	1
  1787  00002B                     ??_printf:
  1788  00002B                     fillRect@x:
  1789                           	opt stack 0
  1790  00002B                     ___ftmul@sign:
  1791                           	opt stack 0
  1792                           
  1793                           ; 1 bytes @ 0x2A
  1794  00002B                     	ds	1
  1795  00002C                     ?___ftdiv:
  1796                           	opt stack 0
  1797  00002C                     fillRect@i:
  1798                           	opt stack 0
  1799  00002C                     drawCircle@x:
  1800                           	opt stack 0
  1801  00002C                     ___ftdiv@f1:
  1802                           	opt stack 0
  1803                           
  1804                           ; 3 bytes @ 0x2B
  1805  00002C                     	ds	2
  1806  00002E                     drawChar@y:
  1807                           	opt stack 0
  1808  00002E                     drawCircle@y:
  1809                           	opt stack 0
  1810                           
  1811                           ; 2 bytes @ 0x2D
  1812  00002E                     	ds	1
  1813  00002F                     drawChar@c:
  1814                           	opt stack 0
  1815  00002F                     printf@idx:
  1816                           	opt stack 0
  1817  00002F                     ___ftdiv@f2:
  1818                           	opt stack 0
  1819                           
  1820                           ; 3 bytes @ 0x2E
  1821  00002F                     	ds	1
  1822  000030                     drawChar@color:
  1823                           	opt stack 0
  1824  000030                     printf@ap:
  1825                           	opt stack 0
  1826                           
  1827                           ; 2 bytes @ 0x2F
  1828  000030                     	ds	2
  1829  000032                     ??___ftdiv:
  1830  000032                     printf@prec:
  1831                           	opt stack 0
  1832  000032                     drawChar@bg:
  1833                           	opt stack 0
  1834                           
  1835                           ; 2 bytes @ 0x31
  1836  000032                     	ds	1
  1837  000033                     printf@val:
  1838                           	opt stack 0
  1839                           
  1840                           ; 2 bytes @ 0x32
  1841  000033                     	ds	1
  1842  000034                     drawChar@size:
  1843                           	opt stack 0
  1844                           
  1845                           ; 1 bytes @ 0x33
  1846  000034                     	ds	1
  1847  000035                     drawChar@line:
  1848                           	opt stack 0
  1849  000035                     printf@flag:
  1850                           	opt stack 0
  1851  000035                     ___ftdiv@cntr:
  1852                           	opt stack 0
  1853                           
  1854                           ; 1 bytes @ 0x34
  1855  000035                     	ds	1
  1856  000036                     drawChar@x:
  1857                           	opt stack 0
  1858  000036                     printf@width:
  1859                           	opt stack 0
  1860  000036                     ___ftdiv@f3:
  1861                           	opt stack 0
  1862                           
  1863                           ; 3 bytes @ 0x35
  1864  000036                     	ds	1
  1865  000037                     drawChar@j:
  1866                           	opt stack 0
  1867                           
  1868                           ; 1 bytes @ 0x36
  1869  000037                     	ds	1
  1870  000038                     drawChar@i:
  1871                           	opt stack 0
  1872  000038                     printf@c:
  1873                           	opt stack 0
  1874                           
  1875                           ; 1 bytes @ 0x37
  1876  000038                     	ds	1
  1877  000039                     drawtext@y:
  1878                           	opt stack 0
  1879  000039                     ___ftdiv@exp:
  1880                           	opt stack 0
  1881                           
  1882                           ; 1 bytes @ 0x38
  1883  000039                     	ds	1
  1884  00003A                     ___ftdiv@sign:
  1885                           	opt stack 0
  1886  00003A                     drawtext@_text:
  1887                           	opt stack 0
  1888                           
  1889                           ; 2 bytes @ 0x39
  1890  00003A                     	ds	1
  1891  00003B                     ??_do_update_pwm:
  1892                           
  1893                           ; 0 bytes @ 0x3A
  1894  00003B                     	ds	1
  1895  00003C                     drawtext@color:
  1896                           	opt stack 0
  1897                           
  1898                           ; 2 bytes @ 0x3B
  1899  00003C                     	ds	2
  1900  00003E                     drawtext@bg:
  1901                           	opt stack 0
  1902                           
  1903                           ; 2 bytes @ 0x3D
  1904  00003E                     	ds	2
  1905  000040                     drawtext@size:
  1906                           	opt stack 0
  1907                           
  1908                           ; 1 bytes @ 0x3F
  1909  000040                     	ds	1
  1910  000041                     
  1911                           ; 0 bytes @ 0x40
  1912  000041                     	ds	1
  1913                           tblptru	equ	0xFF8
  1914                           tblptrh	equ	0xFF7
  1915                           tblptrl	equ	0xFF6
  1916                           tablat	equ	0xFF5
  1917                           postinc0	equ	0xFEE
  1918                           wreg	equ	0xFE8
  1919                           postdec1	equ	0xFE5
  1920                           fsr1l	equ	0xFE1
  1921                           
  1922 ;;
  1923 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1924 ;;
  1925 ;; *************** function _main *****************
  1926 ;; Defined at:
  1927 ;;		line 111 in file "Lab11pA.c"
  1928 ;; Parameters:    Size  Location     Type
  1929 ;;		None
  1930 ;; Auto vars:     Size  Location     Type
  1931 ;;  j               2    0[BANK1 ] int 
  1932 ;; Return value:  Size  Location     Type
  1933 ;;		None               void
  1934 ;; Registers used:
  1935 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1936 ;; Tracked objects:
  1937 ;;		On entry : 0/0
  1938 ;;		On exit  : 0/0
  1939 ;;		Unchanged: 0/0
  1940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1941 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1942 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1943 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1944 ;;      Totals:         1       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1945 ;;Total ram usage:        3 bytes
  1946 ;; Hardware stack levels required when called:   11
  1947 ;; This function calls:
  1948 ;;		_DS1621_Read_Temp
  1949 ;;		_DS3231_Read_Time
  1950 ;;		_Do_Beep
  1951 ;;		_Do_Init
  1952 ;;		_Initialize_Screen
  1953 ;;		_Turn_On_Fan
  1954 ;;		_Update_Screen
  1955 ;;		___awdiv
  1956 ;;		___wmul
  1957 ;;		_do_update_pwm
  1958 ;;		_get_RPM
  1959 ;;		_printf
  1960 ;; This function is called by:
  1961 ;;		Startup code after reset
  1962 ;; This function uses a non-reentrant model
  1963 ;;
  1964                           
  1965                           	psect	text0
  1966  000B4E                     __ptext0:
  1967                           	opt stack 0
  1968  000B4E                     _main:
  1969                           	opt stack 20
  1970                           
  1971                           ;Lab11pA.c: 113: Do_Init();
  1972                           
  1973                           ;incstack = 0
  1974  000B4E  EC8A  F00E         	call	_Do_Init	;wreg free
  1975                           
  1976                           ;Lab11pA.c: 114: Initialize_Screen();
  1977  000B52  EC9B  F003         	call	_Initialize_Screen	;wreg free
  1978                           
  1979                           ;Lab11pA.c: 171: Turn_On_Fan();
  1980  000B56  ECD8  F010         	call	_Turn_On_Fan	;wreg free
  1981                           
  1982                           ;Lab11pA.c: 172: duty_cycle=50;
  1983  000B5A  0E32               	movlw	50
  1984  000B5C  6E5C               	movwf	_duty_cycle,c
  1985                           
  1986                           ;Lab11pA.c: 173: do_update_pwm(duty_cycle);
  1987  000B5E  505C               	movf	_duty_cycle,w,c
  1988  000B60  EC97  F00B         	call	_do_update_pwm
  1989  000B64  D000               	goto	l6595
  1990  000B66                     l6595:
  1991                           
  1992                           ;Lab11pA.c: 175: {
  1993                           ;Lab11pA.c: 178: DS3231_Read_Time();
  1994  000B66  ECB4  F00D         	call	_DS3231_Read_Time	;wreg free
  1995                           
  1996                           ;Lab11pA.c: 180: if(tempSecond != second)
  1997  000B6A  5062               	movf	_second,w,c
  1998  000B6C  186E               	xorwf	_tempSecond,w,c
  1999  000B6E  B4D8               	btfsc	status,2,c
  2000  000B70  D05E               	goto	l6615
  2001                           
  2002                           ;Lab11pA.c: 181: {
  2003                           ;Lab11pA.c: 182: tempSecond = second;
  2004  000B72  C062  F06E         	movff	_second,_tempSecond
  2005                           
  2006                           ;Lab11pA.c: 183: DS1621_tempC = DS1621_Read_Temp();
  2007  000B76  EC75  F00F         	call	_DS1621_Read_Temp	;wreg free
  2008  000B7A  C014  F042         	movff	?_DS1621_Read_Temp,_DS1621_tempC
  2009  000B7E  C015  F043         	movff	?_DS1621_Read_Temp+1,_DS1621_tempC+1
  2010                           
  2011                           ;Lab11pA.c: 184: DS1621_tempF = (DS1621_tempC * 9 / 5) + 32;
  2012  000B82  C042  F011         	movff	_DS1621_tempC,___wmul@multiplier
  2013  000B86  C043  F012         	movff	_DS1621_tempC+1,___wmul@multiplier+1
  2014  000B8A  0E00               	movlw	0
  2015  000B8C  6E14               	movwf	___wmul@multiplicand+1,c
  2016  000B8E  0E09               	movlw	9
  2017  000B90  6E13               	movwf	___wmul@multiplicand,c
  2018  000B92  ECF2  F00F         	call	___wmul	;wreg free
  2019  000B96  C011  F017         	movff	?___wmul,___awdiv@dividend
  2020  000B9A  C012  F018         	movff	?___wmul+1,___awdiv@dividend+1
  2021  000B9E  0E00               	movlw	0
  2022  000BA0  6E1A               	movwf	___awdiv@divisor+1,c
  2023  000BA2  0E05               	movlw	5
  2024  000BA4  6E19               	movwf	___awdiv@divisor,c
  2025  000BA6  ECF8  F00B         	call	___awdiv	;wreg free
  2026  000BAA  0E20               	movlw	32
  2027  000BAC  2417               	addwf	?___awdiv,w,c
  2028  000BAE  6E44               	movwf	_DS1621_tempF,c
  2029  000BB0  0E00               	movlw	0
  2030  000BB2  2018               	addwfc	?___awdiv+1,w,c
  2031  000BB4  6E45               	movwf	_DS1621_tempF+1,c
  2032                           
  2033                           ;Lab11pA.c: 185: rpm = get_RPM();
  2034  000BB6  ECF9  F00E         	call	_get_RPM	;wreg free
  2035  000BBA  C01F  F04A         	movff	?_get_RPM,_rpm
  2036  000BBE  C020  F04B         	movff	?_get_RPM+1,_rpm+1
  2037                           
  2038                           ;Lab11pA.c: 186: printf ("%02x:%02x:%02x %02x/%02x/%02x",hour,minute,second,month,day,ye
      +                          ar);
  2039  000BC2  0E2C               	movlw	low STR_1
  2040  000BC4  6E1D               	movwf	printf@f,c
  2041  000BC6  0EFF               	movlw	high STR_1
  2042  000BC8  6E1E               	movwf	printf@f+1,c
  2043  000BCA  C05E  F01F         	movff	_hour,?_printf+2
  2044  000BCE  6A20               	clrf	?_printf+3,c
  2045  000BD0  C05F  F021         	movff	_minute,?_printf+4
  2046  000BD4  6A22               	clrf	?_printf+5,c
  2047  000BD6  C062  F023         	movff	_second,?_printf+6
  2048  000BDA  6A24               	clrf	?_printf+7,c
  2049  000BDC  C060  F025         	movff	_month,?_printf+8
  2050  000BE0  6A26               	clrf	?_printf+9,c
  2051  000BE2  C05A  F027         	movff	_day,?_printf+10
  2052  000BE6  6A28               	clrf	?_printf+11,c
  2053  000BE8  C06C  F029         	movff	_year,?_printf+12
  2054  000BEC  6A2A               	clrf	?_printf+13,c
  2055  000BEE  ECEE  F001         	call	_printf	;wreg free
  2056                           
  2057                           ;Lab11pA.c: 187: printf (" Temp = %d C = %d F ", DS1621_tempC, DS1621_tempF);
  2058  000BF2  0E76               	movlw	low STR_2
  2059  000BF4  6E1D               	movwf	printf@f,c
  2060  000BF6  0EFF               	movlw	high STR_2
  2061  000BF8  6E1E               	movwf	printf@f+1,c
  2062  000BFA  C042  F01F         	movff	_DS1621_tempC,?_printf+2
  2063  000BFE  C043  F020         	movff	_DS1621_tempC+1,?_printf+3
  2064  000C02  C044  F021         	movff	_DS1621_tempF,?_printf+4
  2065  000C06  C045  F022         	movff	_DS1621_tempF+1,?_printf+5
  2066  000C0A  ECEE  F001         	call	_printf	;wreg free
  2067                           
  2068                           ;Lab11pA.c: 188: printf ("RPM = %d  dc = %d\r\n", rpm, duty_cycle);
  2069  000C0E  0E8B               	movlw	low STR_3
  2070  000C10  6E1D               	movwf	printf@f,c
  2071  000C12  0EFF               	movlw	high STR_3
  2072  000C14  6E1E               	movwf	printf@f+1,c
  2073  000C16  C04A  F01F         	movff	_rpm,?_printf+2
  2074  000C1A  C04B  F020         	movff	_rpm+1,?_printf+3
  2075  000C1E  C05C  F021         	movff	_duty_cycle,?_printf+4
  2076  000C22  6A22               	clrf	?_printf+5,c
  2077  000C24  ECEE  F001         	call	_printf	;wreg free
  2078                           
  2079                           ;Lab11pA.c: 189: Update_Screen();
  2080  000C28  EC0E  F000         	call	_Update_Screen	;wreg free
  2081  000C2C  D000               	goto	l6615
  2082  000C2E                     l6615:
  2083                           
  2084                           ;Lab11pA.c: 190: }
  2085                           ;Lab11pA.c: 192: if (nec_ok == 1)
  2086  000C2E  0448               	decf	_nec_ok,w,c
  2087  000C30  1049               	iorwf	_nec_ok+1,w,c
  2088  000C32  A4D8               	btfss	status,2,c
  2089  000C34  D798               	goto	l6595
  2090                           
  2091                           ;Lab11pA.c: 193: {
  2092                           ;Lab11pA.c: 194: nec_ok = 0;
  2093  000C36  0E00               	movlw	0
  2094  000C38  6E49               	movwf	_nec_ok+1,c
  2095  000C3A  0E00               	movlw	0
  2096  000C3C  6E48               	movwf	_nec_ok,c
  2097                           
  2098                           ;Lab11pA.c: 196: printf ("NEC_Code = %x\r\n", Nec_code1);
  2099  000C3E  0EB0               	movlw	low STR_4
  2100  000C40  6E1D               	movwf	printf@f,c
  2101  000C42  0EFF               	movlw	high STR_4
  2102  000C44  6E1E               	movwf	printf@f+1,c
  2103  000C46  C051  F01F         	movff	_Nec_code1,?_printf+2
  2104  000C4A  6A20               	clrf	?_printf+3,c
  2105  000C4C  ECEE  F001         	call	_printf	;wreg free
  2106                           
  2107                           ;Lab11pA.c: 198: INTCONbits.INT0IE = 1;
  2108  000C50  88F2               	bsf	intcon,4,c	;volatile
  2109                           
  2110                           ;Lab11pA.c: 199: INTCON2bits.INTEDG0 = 0;
  2111  000C52  9CF1               	bcf	intcon2,6,c	;volatile
  2112                           
  2113                           ;Lab11pA.c: 201: found = 0xff;
  2114  000C54  685D               	setf	_found,c
  2115                           
  2116                           ;Lab11pA.c: 202: for (int j=0; j< 21; j++)
  2117  000C56  0E00               	movlw	0
  2118  000C58  0101               	movlb	1	; () banked
  2119  000C5A  6F22               	movwf	(main@j+1)& (0+255),b
  2120  000C5C  0E00               	movlw	0
  2121  000C5E  6F21               	movwf	main@j& (0+255),b
  2122  000C60                     l6629:
  2123                           
  2124                           ; BSR set to: 1
  2125  000C60  0101               	movlb	1	; () banked
  2126  000C62  BF22               	btfsc	(main@j+1)& (0+255),7,b
  2127  000C64  D00A               	goto	l6633
  2128  000C66  0101               	movlb	1	; () banked
  2129  000C68  5122               	movf	(main@j+1)& (0+255),w,b
  2130  000C6A  E120               	bnz	l6643
  2131  000C6C  0E15               	movlw	21
  2132  000C6E  0101               	movlb	1	; () banked
  2133  000C70  5D21               	subwf	main@j& (0+255),w,b
  2134  000C72  B0D8               	btfsc	status,0,c
  2135  000C74  D01B               	goto	l6643
  2136  000C76  D001               	goto	l6633
  2137                           
  2138                           ; BSR set to: 1
  2139  000C78  D019               	goto	l6643
  2140  000C7A                     l6633:
  2141                           
  2142                           ; BSR set to: 1
  2143                           ;Lab11pA.c: 203: {
  2144                           ;Lab11pA.c: 204: if (Nec_code1 == array1[j])
  2145  000C7A  0E80               	movlw	low _array1
  2146  000C7C  0101               	movlb	1	; () banked
  2147  000C7E  2521               	addwf	main@j& (0+255),w,b
  2148  000C80  6ED9               	movwf	fsr2l,c
  2149  000C82  0E00               	movlw	high _array1
  2150  000C84  0101               	movlb	1	; () banked
  2151  000C86  2122               	addwfc	(main@j+1)& (0+255),w,b
  2152  000C88  6EDA               	movwf	fsr2h,c
  2153  000C8A  5051               	movf	_Nec_code1,w,c
  2154  000C8C  18DE               	xorwf	postinc2,w,c
  2155  000C8E  A4D8               	btfss	status,2,c
  2156  000C90  D008               	goto	l6639
  2157                           
  2158                           ; BSR set to: 1
  2159                           ;Lab11pA.c: 205: {
  2160                           ;Lab11pA.c: 206: found = j;
  2161  000C92  C121  F05D         	movff	main@j,_found
  2162                           
  2163                           ; BSR set to: 1
  2164                           ;Lab11pA.c: 207: j = 21;
  2165  000C96  0E00               	movlw	0
  2166  000C98  0101               	movlb	1	; () banked
  2167  000C9A  6F22               	movwf	(main@j+1)& (0+255),b
  2168  000C9C  0E15               	movlw	21
  2169  000C9E  6F21               	movwf	main@j& (0+255),b
  2170  000CA0  D000               	goto	l6639
  2171  000CA2                     l6639:
  2172                           
  2173                           ; BSR set to: 1
  2174  000CA2  0101               	movlb	1	; () banked
  2175  000CA4  4B21               	infsnz	main@j& (0+255),f,b
  2176  000CA6  2B22               	incf	(main@j+1)& (0+255),f,b
  2177  000CA8  D7DB               	goto	l6629
  2178                           
  2179                           ; BSR set to: 1
  2180  000CAA  D000               	goto	l6643
  2181  000CAC                     l6643:
  2182                           
  2183                           ; BSR set to: 1
  2184                           ;Lab11pA.c: 208: }
  2185                           ;Lab11pA.c: 209: }
  2186                           ;Lab11pA.c: 211: if (found == 0xff)
  2187  000CAC  285D               	incf	_found,w,c
  2188  000CAE  A4D8               	btfss	status,2,c
  2189  000CB0  D007               	goto	l6647
  2190                           
  2191                           ; BSR set to: 1
  2192                           ;Lab11pA.c: 212: {
  2193                           ;Lab11pA.c: 213: printf ("Cannot find button \r\n");
  2194  000CB2  0E60               	movlw	low STR_5
  2195  000CB4  6E1D               	movwf	printf@f,c
  2196  000CB6  0EFF               	movlw	high STR_5
  2197  000CB8  6E1E               	movwf	printf@f+1,c
  2198  000CBA  ECEE  F001         	call	_printf	;wreg free
  2199                           
  2200                           ;Lab11pA.c: 214: }
  2201  000CBE  D753               	goto	l6595
  2202  000CC0                     l6647:
  2203                           
  2204                           ;Lab11pA.c: 215: else
  2205                           ;Lab11pA.c: 216: {
  2206                           ;Lab11pA.c: 217: Do_Beep();
  2207  000CC0  ECA1  F010         	call	_Do_Beep	;wreg free
  2208                           
  2209                           ;Lab11pA.c: 218: printf ("button = %d \r\n", found);
  2210  000CC4  0EC0               	movlw	low STR_6
  2211  000CC6  6E1D               	movwf	printf@f,c
  2212  000CC8  0EFF               	movlw	high STR_6
  2213  000CCA  6E1E               	movwf	printf@f+1,c
  2214  000CCC  C05D  F01F         	movff	_found,?_printf+2
  2215  000CD0  6A20               	clrf	?_printf+3,c
  2216  000CD2  ECEE  F001         	call	_printf	;wreg free
  2217  000CD6  D747               	goto	l6595
  2218  000CD8  EF0C  F000         	goto	start
  2219  000CDC                     __end_of_main:
  2220                           	opt stack 0
  2221                           tblptru	equ	0xFF8
  2222                           tblptrh	equ	0xFF7
  2223                           tblptrl	equ	0xFF6
  2224                           tablat	equ	0xFF5
  2225                           intcon	equ	0xFF2
  2226                           intcon2	equ	0xFF1
  2227                           postinc0	equ	0xFEE
  2228                           wreg	equ	0xFE8
  2229                           postdec1	equ	0xFE5
  2230                           fsr1l	equ	0xFE1
  2231                           postinc2	equ	0xFDE
  2232                           fsr2h	equ	0xFDA
  2233                           fsr2l	equ	0xFD9
  2234                           status	equ	0xFD8
  2235                           
  2236 ;; *************** function _printf *****************
  2237 ;; Defined at:
  2238 ;;		line 464 in file "E:\XC8\sources\common\doprnt.c"
  2239 ;; Parameters:    Size  Location     Type
  2240 ;;  f               2   28[COMRAM] PTR const unsigned char 
  2241 ;;		 -> STR_6(15), STR_5(22), STR_4(16), STR_3(20), 
  2242 ;;		 -> STR_2(21), STR_1(30), 
  2243 ;; Auto vars:     Size  Location     Type
  2244 ;;  idx             1   46[COMRAM] unsigned char 
  2245 ;;  tmpval          4    0        struct .
  2246 ;;  cp              3    0        PTR const unsigned char 
  2247 ;;  width           2   53[COMRAM] int 
  2248 ;;  val             2   50[COMRAM] unsigned int 
  2249 ;;  ap              2   47[COMRAM] PTR void [1]
  2250 ;;		 -> ?_printf(2), 
  2251 ;;  len             2    0        unsigned int 
  2252 ;;  c               1   55[COMRAM] char 
  2253 ;;  flag            1   52[COMRAM] unsigned char 
  2254 ;;  prec            1   49[COMRAM] char 
  2255 ;; Return value:  Size  Location     Type
  2256 ;;                  2   28[COMRAM] int 
  2257 ;; Registers used:
  2258 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2259 ;; Tracked objects:
  2260 ;;		On entry : 0/0
  2261 ;;		On exit  : 0/0
  2262 ;;		Unchanged: 0/0
  2263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2264 ;;      Params:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2265 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2266 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2267 ;;      Totals:        28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2268 ;;Total ram usage:       28 bytes
  2269 ;; Hardware stack levels used:    1
  2270 ;; Hardware stack levels required when called:    4
  2271 ;; This function calls:
  2272 ;;		___lwdiv
  2273 ;;		___lwmod
  2274 ;;		___wmul
  2275 ;;		_isdigit
  2276 ;;		_putch
  2277 ;; This function is called by:
  2278 ;;		_main
  2279 ;; This function uses a non-reentrant model
  2280 ;;
  2281                           
  2282                           	psect	text1
  2283  0003DC                     __ptext1:
  2284                           	opt stack 0
  2285  0003DC                     _printf:
  2286                           	opt stack 26
  2287                           
  2288                           ;doprnt.c: 466: va_list ap;
  2289                           ;doprnt.c: 499: signed char c;
  2290                           ;doprnt.c: 501: int width;
  2291                           ;doprnt.c: 506: signed char prec;
  2292                           ;doprnt.c: 508: unsigned char flag;
  2293                           ;doprnt.c: 523: union {
  2294                           ;doprnt.c: 524: unsigned long vd;
  2295                           ;doprnt.c: 525: double integ;
  2296                           ;doprnt.c: 526: } tmpval;
  2297                           ;doprnt.c: 528: unsigned int val;
  2298                           ;doprnt.c: 529: unsigned len;
  2299                           ;doprnt.c: 530: const char * cp;
  2300                           ;doprnt.c: 533: *ap = __va_start();
  2301                           
  2302                           ;incstack = 0
  2303  0003DC  0E1F               	movlw	low (?_printf+2)
  2304  0003DE  6E30               	movwf	printf@ap,c
  2305  0003E0  0E00               	movlw	high (?_printf+2)
  2306  0003E2  6E31               	movwf	printf@ap+1,c
  2307                           
  2308                           ;doprnt.c: 536: while(c = *f++) {
  2309  0003E4  D199               	goto	l6435
  2310  0003E6                     l6309:
  2311                           
  2312                           ;doprnt.c: 538: if(c != '%')
  2313  0003E6  0E25               	movlw	37
  2314  0003E8  1838               	xorwf	printf@c,w,c
  2315  0003EA  B4D8               	btfsc	status,2,c
  2316  0003EC  D004               	goto	l6313
  2317                           
  2318                           ;doprnt.c: 540: {
  2319                           ;doprnt.c: 541: (putch(c) );
  2320  0003EE  5038               	movf	printf@c,w,c
  2321  0003F0  ECF0  F010         	call	_putch
  2322                           
  2323                           ;doprnt.c: 542: continue;
  2324  0003F4  D191               	goto	l6435
  2325  0003F6                     l6313:
  2326                           
  2327                           ;doprnt.c: 543: }
  2328                           ;doprnt.c: 546: width = 0;
  2329  0003F6  0E00               	movlw	0
  2330  0003F8  6E37               	movwf	printf@width+1,c
  2331  0003FA  0E00               	movlw	0
  2332  0003FC  6E36               	movwf	printf@width,c
  2333                           
  2334                           ;doprnt.c: 548: flag = 0;
  2335  0003FE  0E00               	movlw	0
  2336  000400  6E35               	movwf	printf@flag,c
  2337                           
  2338                           ;doprnt.c: 551: switch(*f) {
  2339                           
  2340                           ;doprnt.c: 550: for(;;) {
  2341  000402  D005               	goto	l6319
  2342  000404                     l6315:
  2343                           
  2344                           ;doprnt.c: 580: flag |= 0x04;
  2345  000404  8435               	bsf	printf@flag,2,c
  2346                           
  2347                           ;doprnt.c: 581: f++;
  2348  000406  4A1D               	infsnz	printf@f,f,c
  2349  000408  2A1E               	incf	printf@f+1,f,c
  2350                           
  2351                           ;doprnt.c: 582: continue;
  2352  00040A  D001               	goto	l6319
  2353                           
  2354                           ;doprnt.c: 584: }
  2355  00040C  D00B               	goto	l6321
  2356  00040E                     l6319:
  2357  00040E  C01D  FFF6         	movff	printf@f,tblptrl
  2358  000412  C01E  FFF7         	movff	printf@f+1,tblptrh
  2359  000416                     	if	0	;tblptru may be non-zero
  2360  000416                     	endif
  2361  000416                     	if	0	;tblptru may be non-zero
  2362  000416                     	endif
  2363  000416  0008               	tblrd		*
  2364  000418  50F5               	movf	tablat,w,c
  2365                           
  2366                           ; Switch size 1, requested type "space"
  2367                           ; Number of cases is 1, Range of values is 48 to 48
  2368                           ; switch strategies available:
  2369                           ; Name         Instructions Cycles
  2370                           ; simple_byte            4     3 (average)
  2371                           ;	Chosen strategy is simple_byte
  2372  00041A  0A30               	xorlw	48	; case 48
  2373  00041C  B4D8               	btfsc	status,2,c
  2374  00041E  D7F2               	goto	l6315
  2375                           
  2376                           ;doprnt.c: 585: break;
  2377  000420  D001               	goto	l6321
  2378                           
  2379                           ;doprnt.c: 586: }
  2380  000422  D7F5               	goto	l6319
  2381  000424                     l6321:
  2382                           
  2383                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2384  000424  C01D  FFF6         	movff	printf@f,tblptrl
  2385  000428  C01E  FFF7         	movff	printf@f+1,tblptrh
  2386  00042C                     	if	0	;tblptru may be non-zero
  2387  00042C                     	endif
  2388  00042C                     	if	0	;tblptru may be non-zero
  2389  00042C                     	endif
  2390  00042C  0008               	tblrd		*
  2391  00042E  50F5               	movf	tablat,w,c
  2392  000430  EC19  F010         	call	_isdigit
  2393  000434  A0D8               	btfss	status,0,c
  2394  000436  D03B               	goto	l6337
  2395                           
  2396                           ;doprnt.c: 598: width = 0;
  2397  000438  0E00               	movlw	0
  2398  00043A  6E37               	movwf	printf@width+1,c
  2399  00043C  0E00               	movlw	0
  2400  00043E  6E36               	movwf	printf@width,c
  2401  000440  D000               	goto	l6325
  2402  000442                     l6325:
  2403                           
  2404                           ;doprnt.c: 600: width *= 10;
  2405  000442  C036  F011         	movff	printf@width,___wmul@multiplier
  2406  000446  C037  F012         	movff	printf@width+1,___wmul@multiplier+1
  2407  00044A  0E00               	movlw	0
  2408  00044C  6E14               	movwf	___wmul@multiplicand+1,c
  2409  00044E  0E0A               	movlw	10
  2410  000450  6E13               	movwf	___wmul@multiplicand,c
  2411  000452  ECF2  F00F         	call	___wmul	;wreg free
  2412  000456  C011  F036         	movff	?___wmul,printf@width
  2413  00045A  C012  F037         	movff	?___wmul+1,printf@width+1
  2414                           
  2415                           ;doprnt.c: 601: width += *f++ - '0';
  2416  00045E  0ED0               	movlw	208
  2417  000460  6E2B               	movwf	??_printf& (0+255),c
  2418  000462  0EFF               	movlw	255
  2419  000464  6E2C               	movwf	(??_printf+1)& (0+255),c
  2420  000466  C01D  FFF6         	movff	printf@f,tblptrl
  2421  00046A  C01E  FFF7         	movff	printf@f+1,tblptrh
  2422  00046E                     	if	0	;tblptru may be non-zero
  2423  00046E                     	endif
  2424  00046E                     	if	0	;tblptru may be non-zero
  2425  00046E                     	endif
  2426  00046E  0008               	tblrd		*
  2427  000470  50F5               	movf	tablat,w,c
  2428  000472  6E2D               	movwf	(??_printf+2)& (0+255),c
  2429  000474  6A2E               	clrf	(??_printf+3)& (0+255),c
  2430  000476  502B               	movf	??_printf,w,c
  2431  000478  262D               	addwf	??_printf+2,f,c
  2432  00047A  502C               	movf	??_printf+1,w,c
  2433  00047C  222E               	addwfc	??_printf+3,f,c
  2434  00047E  502D               	movf	??_printf+2,w,c
  2435  000480  2636               	addwf	printf@width,f,c
  2436  000482  502E               	movf	??_printf+3,w,c
  2437  000484  2237               	addwfc	printf@width+1,f,c
  2438  000486  4A1D               	infsnz	printf@f,f,c
  2439  000488  2A1E               	incf	printf@f+1,f,c
  2440                           
  2441                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2442  00048A  C01D  FFF6         	movff	printf@f,tblptrl
  2443  00048E  C01E  FFF7         	movff	printf@f+1,tblptrh
  2444  000492                     	if	0	;tblptru may be non-zero
  2445  000492                     	endif
  2446  000492                     	if	0	;tblptru may be non-zero
  2447  000492                     	endif
  2448  000492  0008               	tblrd		*
  2449  000494  50F5               	movf	tablat,w,c
  2450  000496  EC19  F010         	call	_isdigit
  2451  00049A  A0D8               	btfss	status,0,c
  2452  00049C  D008               	goto	l6337
  2453  00049E  D7D1               	goto	l6325
  2454                           
  2455                           ;doprnt.c: 608: }
  2456                           ;doprnt.c: 635: switch(c = *f++) {
  2457  0004A0  D006               	goto	l6337
  2458                           
  2459                           ;doprnt.c: 638: goto alldone;
  2460                           
  2461                           ;doprnt.c: 637: case 0:
  2462  0004A2  D148               	goto	l839
  2463                           
  2464                           ;doprnt.c: 698: case 'i':
  2465                           ;doprnt.c: 699: break;
  2466                           
  2467                           ;doprnt.c: 697: case 'd':
  2468  0004A4  D01B               	goto	l802
  2469  0004A6                     l6333:
  2470                           
  2471                           ;doprnt.c: 721: flag |= 0x80;
  2472  0004A6  8E35               	bsf	printf@flag,7,c
  2473                           
  2474                           ;doprnt.c: 723: break;
  2475  0004A8  D019               	goto	l802
  2476                           
  2477                           ;doprnt.c: 813: continue;
  2478                           
  2479                           ;doprnt.c: 802: default:
  2480  0004AA  D136               	goto	l6435
  2481                           
  2482                           ;doprnt.c: 822: }
  2483  0004AC  D017               	goto	l802
  2484  0004AE                     l6337:
  2485  0004AE  C01D  FFF6         	movff	printf@f,tblptrl
  2486  0004B2  C01E  FFF7         	movff	printf@f+1,tblptrh
  2487  0004B6  4A1D               	infsnz	printf@f,f,c
  2488  0004B8  2A1E               	incf	printf@f+1,f,c
  2489  0004BA                     	if	0	;tblptru may be non-zero
  2490  0004BA                     	endif
  2491  0004BA                     	if	0	;tblptru may be non-zero
  2492  0004BA                     	endif
  2493  0004BA  0008               	tblrd		*
  2494  0004BC  CFF5 F038          	movff	tablat,printf@c
  2495  0004C0  5038               	movf	printf@c,w,c
  2496                           
  2497                           ; Switch size 1, requested type "space"
  2498                           ; Number of cases is 4, Range of values is 0 to 120
  2499                           ; switch strategies available:
  2500                           ; Name         Instructions Cycles
  2501                           ; simple_byte           13     7 (average)
  2502                           ;	Chosen strategy is simple_byte
  2503  0004C2  0A00               	xorlw	0	; case 0
  2504  0004C4  B4D8               	btfsc	status,2,c
  2505  0004C6  D136               	goto	l839
  2506  0004C8  0A64               	xorlw	100	; case 100
  2507  0004CA  B4D8               	btfsc	status,2,c
  2508  0004CC  D007               	goto	l802
  2509  0004CE  0A0D               	xorlw	13	; case 105
  2510  0004D0  B4D8               	btfsc	status,2,c
  2511  0004D2  D004               	goto	l802
  2512  0004D4  0A11               	xorlw	17	; case 120
  2513  0004D6  B4D8               	btfsc	status,2,c
  2514  0004D8  D7E6               	goto	l6333
  2515  0004DA  D11E               	goto	l6435
  2516  0004DC                     l802:
  2517                           
  2518                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  2519  0004DC  BE35               	btfsc	printf@flag,7,c
  2520  0004DE  D015               	goto	l6349
  2521                           
  2522                           ;doprnt.c: 1253: {
  2523                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2524  0004E0  C030  FFD9         	movff	printf@ap,fsr2l
  2525  0004E4  C031  FFDA         	movff	printf@ap+1,fsr2h
  2526  0004E8  CFDE F033          	movff	postinc2,printf@val
  2527  0004EC  CFDD F034          	movff	postdec2,printf@val+1
  2528  0004F0  0E02               	movlw	2
  2529  0004F2  2630               	addwf	printf@ap,f,c
  2530  0004F4  0E00               	movlw	0
  2531  0004F6  2231               	addwfc	printf@ap+1,f,c
  2532                           
  2533                           ;doprnt.c: 1261: if((int)val < 0) {
  2534  0004F8  AE34               	btfss	printf@val+1,7,c
  2535  0004FA  D04E               	goto	l6383
  2536                           
  2537                           ;doprnt.c: 1262: flag |= 0x03;
  2538  0004FC  0E03               	movlw	3
  2539  0004FE  1235               	iorwf	printf@flag,f,c
  2540                           
  2541                           ;doprnt.c: 1263: val = -val;
  2542  000500  6C33               	negf	printf@val,c
  2543  000502  1E34               	comf	printf@val+1,f,c
  2544  000504  B0D8               	btfsc	status,0,c
  2545  000506  2A34               	incf	printf@val+1,f,c
  2546                           
  2547                           ;doprnt.c: 1264: }
  2548                           ;doprnt.c: 1266: }
  2549  000508  D047               	goto	l6383
  2550  00050A                     l6349:
  2551                           
  2552                           ;doprnt.c: 1268: else
  2553                           ;doprnt.c: 1273: {
  2554                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2555  00050A  C030  FFD9         	movff	printf@ap,fsr2l
  2556  00050E  C031  FFDA         	movff	printf@ap+1,fsr2h
  2557  000512  CFDE F033          	movff	postinc2,printf@val
  2558  000516  CFDD F034          	movff	postdec2,printf@val+1
  2559  00051A  0E02               	movlw	2
  2560  00051C  2630               	addwf	printf@ap,f,c
  2561  00051E  0E00               	movlw	0
  2562  000520  2231               	addwfc	printf@ap+1,f,c
  2563                           
  2564                           ;doprnt.c: 1287: }
  2565                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  2566  000522  D03A               	goto	l6383
  2567  000524                     l6353:
  2568                           
  2569                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2570  000524  0E01               	movlw	1
  2571  000526  6E38               	movwf	printf@c,c
  2572  000528                     l6355:
  2573  000528  0E05               	movlw	5
  2574  00052A  1838               	xorwf	printf@c,w,c
  2575  00052C  B4D8               	btfsc	status,2,c
  2576  00052E  D03D               	goto	l6385
  2577  000530  D001               	goto	l6359
  2578  000532  D03B               	goto	l6385
  2579  000534                     l6359:
  2580                           
  2581                           ;doprnt.c: 1306: if(val < dpowers[c])
  2582  000534  5038               	movf	printf@c,w,c
  2583  000536  0D02               	mullw	2
  2584  000538  0E1A               	movlw	low _dpowers
  2585  00053A  24F3               	addwf	prodl,w,c
  2586  00053C  6EF6               	movwf	tblptrl,c
  2587  00053E  0EFF               	movlw	high _dpowers
  2588  000540  20F4               	addwfc	prodh,w,c
  2589  000542  6EF7               	movwf	tblptrh,c
  2590  000544                     	if	0	;There are less than 3 active tblptr bytes
  2591  000544                     	endif
  2592  000544  0009               	tblrd		*+
  2593  000546  50F5               	movf	tablat,w,c
  2594  000548  5C33               	subwf	printf@val,w,c
  2595  00054A  0009               	tblrd		*+
  2596  00054C  50F5               	movf	tablat,w,c
  2597  00054E  5834               	subwfb	printf@val+1,w,c
  2598  000550  A0D8               	btfss	status,0,c
  2599  000552  D02B               	goto	l6385
  2600  000554  D001               	goto	l6363
  2601                           
  2602                           ;doprnt.c: 1307: break;
  2603  000556  D029               	goto	l6385
  2604  000558                     l6363:
  2605  000558  2A38               	incf	printf@c,f,c
  2606  00055A  D7E6               	goto	l6355
  2607                           
  2608                           ;doprnt.c: 1309: break;
  2609  00055C  D026               	goto	l6385
  2610  00055E                     l6367:
  2611                           
  2612                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2613  00055E  0E01               	movlw	1
  2614  000560  6E38               	movwf	printf@c,c
  2615  000562                     l6369:
  2616  000562  0E04               	movlw	4
  2617  000564  1838               	xorwf	printf@c,w,c
  2618  000566  B4D8               	btfsc	status,2,c
  2619  000568  D020               	goto	l6385
  2620  00056A  D001               	goto	l6373
  2621  00056C  D01E               	goto	l6385
  2622  00056E                     l6373:
  2623                           
  2624                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2625  00056E  5038               	movf	printf@c,w,c
  2626  000570  0D02               	mullw	2
  2627  000572  0E24               	movlw	low _hexpowers
  2628  000574  24F3               	addwf	prodl,w,c
  2629  000576  6EF6               	movwf	tblptrl,c
  2630  000578  0EFF               	movlw	high _hexpowers
  2631  00057A  20F4               	addwfc	prodh,w,c
  2632  00057C  6EF7               	movwf	tblptrh,c
  2633  00057E                     	if	0	;There are less than 3 active tblptr bytes
  2634  00057E                     	endif
  2635  00057E  0009               	tblrd		*+
  2636  000580  50F5               	movf	tablat,w,c
  2637  000582  5C33               	subwf	printf@val,w,c
  2638  000584  0009               	tblrd		*+
  2639  000586  50F5               	movf	tablat,w,c
  2640  000588  5834               	subwfb	printf@val+1,w,c
  2641  00058A  A0D8               	btfss	status,0,c
  2642  00058C  D00E               	goto	l6385
  2643  00058E  D001               	goto	l6377
  2644                           
  2645                           ;doprnt.c: 1318: break;
  2646  000590  D00C               	goto	l6385
  2647  000592                     l6377:
  2648  000592  2A38               	incf	printf@c,f,c
  2649  000594  D7E6               	goto	l6369
  2650                           
  2651                           ;doprnt.c: 1336: }
  2652                           
  2653                           ;doprnt.c: 1320: break;
  2654  000596  D009               	goto	l6385
  2655  000598                     l6383:
  2656  000598  5035               	movf	printf@flag,w,c
  2657  00059A  0B80               	andlw	128
  2658                           
  2659                           ; Switch size 1, requested type "space"
  2660                           ; Number of cases is 2, Range of values is 0 to 128
  2661                           ; switch strategies available:
  2662                           ; Name         Instructions Cycles
  2663                           ; simple_byte            7     4 (average)
  2664                           ;	Chosen strategy is simple_byte
  2665  00059C  0A00               	xorlw	0	; case 0
  2666  00059E  B4D8               	btfsc	status,2,c
  2667  0005A0  D7C1               	goto	l6353
  2668  0005A2  0A80               	xorlw	128	; case 128
  2669  0005A4  B4D8               	btfsc	status,2,c
  2670  0005A6  D7DB               	goto	l6367
  2671  0005A8  D000               	goto	l6385
  2672  0005AA                     l6385:
  2673                           
  2674                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2675  0005AA  5036               	movf	printf@width,w,c
  2676  0005AC  1037               	iorwf	printf@width+1,w,c
  2677  0005AE  B4D8               	btfsc	status,2,c
  2678  0005B0  D00A               	goto	l6391
  2679  0005B2  C035  F02B         	movff	printf@flag,??_printf
  2680  0005B6  0E03               	movlw	3
  2681  0005B8  162B               	andwf	??_printf,f,c
  2682  0005BA  B4D8               	btfsc	status,2,c
  2683  0005BC  D004               	goto	l6391
  2684                           
  2685                           ;doprnt.c: 1346: width--;
  2686  0005BE  0636               	decf	printf@width,f,c
  2687  0005C0  A0D8               	btfss	status,0,c
  2688  0005C2  0637               	decf	printf@width+1,f,c
  2689  0005C4  D000               	goto	l6391
  2690  0005C6                     l6391:
  2691                           
  2692                           ;doprnt.c: 1381: if(width > c)
  2693  0005C6  0E80               	movlw	128
  2694  0005C8  BE38               	btfsc	printf@c,7,c
  2695  0005CA  0E7F               	movlw	127
  2696  0005CC  6E2B               	movwf	??_printf& (0+255),c
  2697  0005CE  5036               	movf	printf@width,w,c
  2698  0005D0  5C38               	subwf	printf@c,w,c
  2699  0005D2  5037               	movf	printf@width+1,w,c
  2700  0005D4  0A80               	xorlw	128
  2701  0005D6  582B               	subwfb	??_printf& (0+255),w,c
  2702  0005D8  B0D8               	btfsc	status,0,c
  2703  0005DA  D007               	goto	l6395
  2704                           
  2705                           ;doprnt.c: 1382: width -= c;
  2706  0005DC  5038               	movf	printf@c,w,c
  2707  0005DE  5E36               	subwf	printf@width,f,c
  2708  0005E0  0E00               	movlw	0
  2709  0005E2  BE38               	btfsc	printf@c,7,c
  2710  0005E4  0EFF               	movlw	255
  2711  0005E6  5A37               	subwfb	printf@width+1,f,c
  2712  0005E8  D005               	goto	l6397
  2713  0005EA                     l6395:
  2714                           
  2715                           ;doprnt.c: 1383: else
  2716                           ;doprnt.c: 1384: width = 0;
  2717  0005EA  0E00               	movlw	0
  2718  0005EC  6E37               	movwf	printf@width+1,c
  2719  0005EE  0E00               	movlw	0
  2720  0005F0  6E36               	movwf	printf@width,c
  2721  0005F2  D000               	goto	l6397
  2722  0005F4                     l6397:
  2723                           
  2724                           ;doprnt.c: 1387: if(flag & 0x04) {
  2725  0005F4  A435               	btfss	printf@flag,2,c
  2726  0005F6  D01A               	goto	l6409
  2727                           
  2728                           ;doprnt.c: 1392: if(flag & 0x03)
  2729  0005F8  C035  F02B         	movff	printf@flag,??_printf
  2730  0005FC  0E03               	movlw	3
  2731  0005FE  162B               	andwf	??_printf,f,c
  2732  000600  B4D8               	btfsc	status,2,c
  2733  000602  D004               	goto	l6403
  2734                           
  2735                           ;doprnt.c: 1393: (putch('-') );
  2736  000604  0E2D               	movlw	45
  2737  000606  ECF0  F010         	call	_putch
  2738  00060A  D000               	goto	l6403
  2739  00060C                     l6403:
  2740                           
  2741                           ;doprnt.c: 1415: if(width)
  2742  00060C  5036               	movf	printf@width,w,c
  2743  00060E  1037               	iorwf	printf@width+1,w,c
  2744  000610  B4D8               	btfsc	status,2,c
  2745  000612  D026               	goto	l6419
  2746  000614                     l6405:
  2747                           
  2748                           ;doprnt.c: 1417: (putch('0') );
  2749  000614  0E30               	movlw	48
  2750  000616  ECF0  F010         	call	_putch
  2751                           
  2752                           ;doprnt.c: 1418: while(--width);
  2753  00061A  0636               	decf	printf@width,f,c
  2754  00061C  A0D8               	btfss	status,0,c
  2755  00061E  0637               	decf	printf@width+1,f,c
  2756  000620  5036               	movf	printf@width,w,c
  2757  000622  1037               	iorwf	printf@width+1,w,c
  2758  000624  B4D8               	btfsc	status,2,c
  2759  000626  D01C               	goto	l6419
  2760  000628  D7F5               	goto	l6405
  2761                           
  2762                           ;doprnt.c: 1420: } else
  2763  00062A  D01A               	goto	l6419
  2764  00062C                     l6409:
  2765                           
  2766                           ;doprnt.c: 1422: {
  2767                           ;doprnt.c: 1424: if(width
  2768                           ;doprnt.c: 1428: )
  2769  00062C  5036               	movf	printf@width,w,c
  2770  00062E  1037               	iorwf	printf@width+1,w,c
  2771  000630  B4D8               	btfsc	status,2,c
  2772  000632  D00C               	goto	l6415
  2773  000634                     l6411:
  2774                           
  2775                           ;doprnt.c: 1430: (putch(' ') );
  2776  000634  0E20               	movlw	32
  2777  000636  ECF0  F010         	call	_putch
  2778                           
  2779                           ;doprnt.c: 1431: while(--width);
  2780  00063A  0636               	decf	printf@width,f,c
  2781  00063C  A0D8               	btfss	status,0,c
  2782  00063E  0637               	decf	printf@width+1,f,c
  2783  000640  5036               	movf	printf@width,w,c
  2784  000642  1037               	iorwf	printf@width+1,w,c
  2785  000644  B4D8               	btfsc	status,2,c
  2786  000646  D002               	goto	l6415
  2787  000648  D7F5               	goto	l6411
  2788  00064A  D000               	goto	l6415
  2789  00064C                     l6415:
  2790                           
  2791                           ;doprnt.c: 1438: if(flag & 0x03)
  2792  00064C  C035  F02B         	movff	printf@flag,??_printf
  2793  000650  0E03               	movlw	3
  2794  000652  162B               	andwf	??_printf,f,c
  2795  000654  B4D8               	btfsc	status,2,c
  2796  000656  D004               	goto	l6419
  2797                           
  2798                           ;doprnt.c: 1439: (putch('-') );
  2799  000658  0E2D               	movlw	45
  2800  00065A  ECF0  F010         	call	_putch
  2801  00065E  D000               	goto	l6419
  2802  000660                     l6419:
  2803                           
  2804                           ;doprnt.c: 1469: }
  2805                           ;doprnt.c: 1472: prec = c;
  2806  000660  C038  F032         	movff	printf@c,printf@prec
  2807                           
  2808                           ;doprnt.c: 1474: while(prec--) {
  2809  000664  D053               	goto	l6433
  2810                           
  2811                           ;doprnt.c: 1476: switch((unsigned char)(flag & 0x80))
  2812  000666  D045               	goto	l6429
  2813  000668                     l6421:
  2814                           
  2815                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2816  000668  5032               	movf	printf@prec,w,c
  2817  00066A  0D02               	mullw	2
  2818  00066C  0E1A               	movlw	low _dpowers
  2819  00066E  24F3               	addwf	prodl,w,c
  2820  000670  6EF6               	movwf	tblptrl,c
  2821  000672  0EFF               	movlw	high _dpowers
  2822  000674  20F4               	addwfc	prodh,w,c
  2823  000676  6EF7               	movwf	tblptrh,c
  2824  000678                     	if	0	;There are less than 3 active tblptr bytes
  2825  000678                     	endif
  2826  000678  0009               	tblrd		*+
  2827  00067A  CFF5 F013          	movff	tablat,___lwdiv@divisor
  2828  00067E  000A               	tblrd		*-
  2829  000680  CFF5 F014          	movff	tablat,___lwdiv@divisor+1
  2830  000684  C033  F011         	movff	printf@val,___lwdiv@dividend
  2831  000688  C034  F012         	movff	printf@val+1,___lwdiv@dividend+1
  2832  00068C  ECE6  F00D         	call	___lwdiv	;wreg free
  2833  000690  C011  F018         	movff	?___lwdiv,___lwmod@dividend
  2834  000694  C012  F019         	movff	?___lwdiv+1,___lwmod@dividend+1
  2835  000698  0E00               	movlw	0
  2836  00069A  6E1B               	movwf	___lwmod@divisor+1,c
  2837  00069C  0E0A               	movlw	10
  2838  00069E  6E1A               	movwf	___lwmod@divisor,c
  2839  0006A0  EC64  F00E         	call	___lwmod	;wreg free
  2840  0006A4  5018               	movf	?___lwmod,w,c
  2841  0006A6  0F30               	addlw	48
  2842  0006A8  6E38               	movwf	printf@c,c
  2843                           
  2844                           ;doprnt.c: 1491: break;
  2845  0006AA  D02C               	goto	l6431
  2846  0006AC                     l6423:
  2847                           
  2848                           ;doprnt.c: 1499: {
  2849                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  2850  0006AC  C033  F011         	movff	printf@val,___lwdiv@dividend
  2851  0006B0  C034  F012         	movff	printf@val+1,___lwdiv@dividend+1
  2852  0006B4  5032               	movf	printf@prec,w,c
  2853  0006B6  0D02               	mullw	2
  2854  0006B8  0E24               	movlw	low _hexpowers
  2855  0006BA  24F3               	addwf	prodl,w,c
  2856  0006BC  6EF6               	movwf	tblptrl,c
  2857  0006BE  0EFF               	movlw	high _hexpowers
  2858  0006C0  20F4               	addwfc	prodh,w,c
  2859  0006C2  6EF7               	movwf	tblptrh,c
  2860  0006C4                     	if	0	;There are less than 3 active tblptr bytes
  2861  0006C4                     	endif
  2862  0006C4  0009               	tblrd		*+
  2863  0006C6  CFF5 F013          	movff	tablat,___lwdiv@divisor
  2864  0006CA  000A               	tblrd		*-
  2865  0006CC  CFF5 F014          	movff	tablat,___lwdiv@divisor+1
  2866  0006D0  ECE6  F00D         	call	___lwdiv	;wreg free
  2867  0006D4  5011               	movf	?___lwdiv,w,c
  2868  0006D6  0B0F               	andlw	15
  2869  0006D8  6E2F               	movwf	printf@idx,c
  2870                           
  2871                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  2872  0006DA  502F               	movf	printf@idx,w,c
  2873  0006DC  0D01               	mullw	1
  2874  0006DE  0E9F               	movlw	low STR_18
  2875  0006E0  24F3               	addwf	prodl,w,c
  2876  0006E2  6EF6               	movwf	tblptrl,c
  2877  0006E4  0EFF               	movlw	high STR_18
  2878  0006E6  20F4               	addwfc	prodh,w,c
  2879  0006E8  6EF7               	movwf	tblptrh,c
  2880  0006EA                     	if	0	;There are less than 3 active tblptr bytes
  2881  0006EA                     	endif
  2882  0006EA  0008               	tblrd		*
  2883  0006EC  CFF5 F038          	movff	tablat,printf@c
  2884                           
  2885                           ;doprnt.c: 1523: }
  2886                           
  2887                           ;doprnt.c: 1508: }
  2888                           ;doprnt.c: 1510: break;
  2889  0006F0  D009               	goto	l6431
  2890  0006F2                     l6429:
  2891  0006F2  5035               	movf	printf@flag,w,c
  2892  0006F4  0B80               	andlw	128
  2893                           
  2894                           ; Switch size 1, requested type "space"
  2895                           ; Number of cases is 2, Range of values is 0 to 128
  2896                           ; switch strategies available:
  2897                           ; Name         Instructions Cycles
  2898                           ; simple_byte            7     4 (average)
  2899                           ;	Chosen strategy is simple_byte
  2900  0006F6  0A00               	xorlw	0	; case 0
  2901  0006F8  B4D8               	btfsc	status,2,c
  2902  0006FA  D7B6               	goto	l6421
  2903  0006FC  0A80               	xorlw	128	; case 128
  2904  0006FE  B4D8               	btfsc	status,2,c
  2905  000700  D7D5               	goto	l6423
  2906  000702  D000               	goto	l6431
  2907  000704                     l6431:
  2908                           
  2909                           ;doprnt.c: 1524: (putch(c) );
  2910  000704  5038               	movf	printf@c,w,c
  2911  000706  ECF0  F010         	call	_putch
  2912  00070A  D000               	goto	l6433
  2913  00070C                     l6433:
  2914  00070C  0632               	decf	printf@prec,f,c
  2915  00070E  2832               	incf	printf@prec,w,c
  2916  000710  B4D8               	btfsc	status,2,c
  2917  000712  D002               	goto	l6435
  2918  000714  D7EE               	goto	l6429
  2919  000716  D000               	goto	l6435
  2920  000718                     l6435:
  2921  000718  C01D  FFF6         	movff	printf@f,tblptrl
  2922  00071C  C01E  FFF7         	movff	printf@f+1,tblptrh
  2923  000720  4A1D               	infsnz	printf@f,f,c
  2924  000722  2A1E               	incf	printf@f+1,f,c
  2925  000724                     	if	0	;tblptru may be non-zero
  2926  000724                     	endif
  2927  000724                     	if	0	;tblptru may be non-zero
  2928  000724                     	endif
  2929  000724  0008               	tblrd		*
  2930  000726  CFF5 F038          	movff	tablat,printf@c
  2931  00072A  5038               	movf	printf@c,w,c
  2932  00072C  B4D8               	btfsc	status,2,c
  2933  00072E  D002               	goto	l839
  2934  000730  D65A               	goto	l6309
  2935  000732  D000               	goto	l839
  2936  000734                     l839:
  2937  000734  0012               	return		;funcret
  2938  000736                     __end_of_printf:
  2939                           	opt stack 0
  2940                           tblptru	equ	0xFF8
  2941                           tblptrh	equ	0xFF7
  2942                           tblptrl	equ	0xFF6
  2943                           tablat	equ	0xFF5
  2944                           prodh	equ	0xFF4
  2945                           prodl	equ	0xFF3
  2946                           intcon	equ	0xFF2
  2947                           intcon2	equ	0xFF1
  2948                           postinc0	equ	0xFEE
  2949                           wreg	equ	0xFE8
  2950                           postdec1	equ	0xFE5
  2951                           fsr1l	equ	0xFE1
  2952                           postinc2	equ	0xFDE
  2953                           postdec2	equ	0xFDD
  2954                           fsr2h	equ	0xFDA
  2955                           fsr2l	equ	0xFD9
  2956                           status	equ	0xFD8
  2957                           
  2958 ;; *************** function _putch *****************
  2959 ;; Defined at:
  2960 ;;		line 73 in file "Lab11pA.c"
  2961 ;; Parameters:    Size  Location     Type
  2962 ;;  c               1    wreg     unsigned char 
  2963 ;; Auto vars:     Size  Location     Type
  2964 ;;  c               1   16[COMRAM] unsigned char 
  2965 ;; Return value:  Size  Location     Type
  2966 ;;		None               void
  2967 ;; Registers used:
  2968 ;;		wreg
  2969 ;; Tracked objects:
  2970 ;;		On entry : 0/0
  2971 ;;		On exit  : 0/0
  2972 ;;		Unchanged: 0/0
  2973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2974 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2975 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2976 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2977 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2978 ;;Total ram usage:        1 bytes
  2979 ;; Hardware stack levels used:    1
  2980 ;; Hardware stack levels required when called:    3
  2981 ;; This function calls:
  2982 ;;		Nothing
  2983 ;; This function is called by:
  2984 ;;		_printf
  2985 ;; This function uses a non-reentrant model
  2986 ;;
  2987                           
  2988                           	psect	text2
  2989  0021E0                     __ptext2:
  2990                           	opt stack 0
  2991  0021E0                     _putch:
  2992                           	opt stack 26
  2993                           
  2994                           ;incstack = 0
  2995                           ;putch@c stored from wreg
  2996  0021E0  6E11               	movwf	putch@c,c
  2997                           
  2998                           ;Lab11pA.c: 75: while (!TRMT);
  2999  0021E2  D000               	goto	l159
  3000  0021E4                     l159:
  3001  0021E4  A2AC               	btfss	4012,1,c	;volatile
  3002  0021E6  D7FE               	goto	l159
  3003                           
  3004                           ;Lab11pA.c: 76: TXREG = c;
  3005  0021E8  C011  FFAD         	movff	putch@c,4013	;volatile
  3006  0021EC  0012               	return		;funcret
  3007  0021EE                     __end_of_putch:
  3008                           	opt stack 0
  3009                           tblptru	equ	0xFF8
  3010                           tblptrh	equ	0xFF7
  3011                           tblptrl	equ	0xFF6
  3012                           tablat	equ	0xFF5
  3013                           prodh	equ	0xFF4
  3014                           prodl	equ	0xFF3
  3015                           intcon	equ	0xFF2
  3016                           intcon2	equ	0xFF1
  3017                           postinc0	equ	0xFEE
  3018                           wreg	equ	0xFE8
  3019                           postdec1	equ	0xFE5
  3020                           fsr1l	equ	0xFE1
  3021                           postinc2	equ	0xFDE
  3022                           postdec2	equ	0xFDD
  3023                           fsr2h	equ	0xFDA
  3024                           fsr2l	equ	0xFD9
  3025                           status	equ	0xFD8
  3026                           
  3027 ;; *************** function _isdigit *****************
  3028 ;; Defined at:
  3029 ;;		line 8 in file "E:\XC8\sources\common\isdigit.c"
  3030 ;; Parameters:    Size  Location     Type
  3031 ;;  c               1    wreg     unsigned char 
  3032 ;; Auto vars:     Size  Location     Type
  3033 ;;  c               1   18[COMRAM] unsigned char 
  3034 ;; Return value:  Size  Location     Type
  3035 ;;		None               void
  3036 ;; Registers used:
  3037 ;;		wreg, status,2, status,0
  3038 ;; Tracked objects:
  3039 ;;		On entry : 0/0
  3040 ;;		On exit  : 0/0
  3041 ;;		Unchanged: 0/0
  3042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3043 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3044 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3045 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3046 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3047 ;;Total ram usage:        3 bytes
  3048 ;; Hardware stack levels used:    1
  3049 ;; Hardware stack levels required when called:    3
  3050 ;; This function calls:
  3051 ;;		Nothing
  3052 ;; This function is called by:
  3053 ;;		_printf
  3054 ;; This function uses a non-reentrant model
  3055 ;;
  3056                           
  3057                           	psect	text3
  3058  002032                     __ptext3:
  3059                           	opt stack 0
  3060  002032                     _isdigit:
  3061                           	opt stack 26
  3062                           
  3063                           ;incstack = 0
  3064                           ;isdigit@c stored from wreg
  3065  002032  6E13               	movwf	isdigit@c,c
  3066  002034  0E00               	movlw	0
  3067  002036  6E12               	movwf	_isdigit$2448,c
  3068  002038  0E3A               	movlw	58
  3069  00203A  6013               	cpfslt	isdigit@c,c
  3070  00203C  D006               	goto	l6045
  3071  00203E  0E2F               	movlw	47
  3072  002040  6413               	cpfsgt	isdigit@c,c
  3073  002042  D003               	goto	l6045
  3074  002044  0E01               	movlw	1
  3075  002046  6E12               	movwf	_isdigit$2448,c
  3076  002048  D000               	goto	l6045
  3077  00204A                     l6045:
  3078  00204A  C012  F011         	movff	_isdigit$2448,??_isdigit
  3079  00204E  3011               	rrcf	??_isdigit,w,c
  3080  002050  D000               	goto	l1306
  3081  002052                     l1306:
  3082  002052  0012               	return		;funcret
  3083  002054                     __end_of_isdigit:
  3084                           	opt stack 0
  3085                           tblptru	equ	0xFF8
  3086                           tblptrh	equ	0xFF7
  3087                           tblptrl	equ	0xFF6
  3088                           tablat	equ	0xFF5
  3089                           prodh	equ	0xFF4
  3090                           prodl	equ	0xFF3
  3091                           intcon	equ	0xFF2
  3092                           intcon2	equ	0xFF1
  3093                           postinc0	equ	0xFEE
  3094                           wreg	equ	0xFE8
  3095                           postdec1	equ	0xFE5
  3096                           fsr1l	equ	0xFE1
  3097                           postinc2	equ	0xFDE
  3098                           postdec2	equ	0xFDD
  3099                           fsr2h	equ	0xFDA
  3100                           fsr2l	equ	0xFD9
  3101                           status	equ	0xFD8
  3102                           
  3103 ;; *************** function ___lwmod *****************
  3104 ;; Defined at:
  3105 ;;		line 8 in file "E:\XC8\sources\common\lwmod.c"
  3106 ;; Parameters:    Size  Location     Type
  3107 ;;  dividend        2   23[COMRAM] unsigned int 
  3108 ;;  divisor         2   25[COMRAM] unsigned int 
  3109 ;; Auto vars:     Size  Location     Type
  3110 ;;  counter         1   27[COMRAM] unsigned char 
  3111 ;; Return value:  Size  Location     Type
  3112 ;;                  2   23[COMRAM] unsigned int 
  3113 ;; Registers used:
  3114 ;;		wreg, status,2, status,0
  3115 ;; Tracked objects:
  3116 ;;		On entry : 0/0
  3117 ;;		On exit  : 0/0
  3118 ;;		Unchanged: 0/0
  3119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3120 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3121 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3122 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3123 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3124 ;;Total ram usage:        5 bytes
  3125 ;; Hardware stack levels used:    1
  3126 ;; Hardware stack levels required when called:    3
  3127 ;; This function calls:
  3128 ;;		Nothing
  3129 ;; This function is called by:
  3130 ;;		_printf
  3131 ;; This function uses a non-reentrant model
  3132 ;;
  3133                           
  3134                           	psect	text4
  3135  001CC8                     __ptext4:
  3136                           	opt stack 0
  3137  001CC8                     ___lwmod:
  3138                           	opt stack 26
  3139                           
  3140                           ;incstack = 0
  3141  001CC8  501A               	movf	___lwmod@divisor,w,c
  3142  001CCA  101B               	iorwf	___lwmod@divisor+1,w,c
  3143  001CCC  B4D8               	btfsc	status,2,c
  3144  001CCE  D01D               	goto	l1408
  3145  001CD0  0E01               	movlw	1
  3146  001CD2  6E1C               	movwf	___lwmod@counter,c
  3147  001CD4  D005               	goto	l6157
  3148  001CD6                     l6155:
  3149  001CD6  90D8               	bcf	status,0,c
  3150  001CD8  361A               	rlcf	___lwmod@divisor,f,c
  3151  001CDA  361B               	rlcf	___lwmod@divisor+1,f,c
  3152  001CDC  2A1C               	incf	___lwmod@counter,f,c
  3153  001CDE  D000               	goto	l6157
  3154  001CE0                     l6157:
  3155  001CE0  BE1B               	btfsc	___lwmod@divisor+1,7,c
  3156  001CE2  D002               	goto	l6159
  3157  001CE4  D7F8               	goto	l6155
  3158  001CE6  D000               	goto	l6159
  3159  001CE8                     l6159:
  3160  001CE8  501A               	movf	___lwmod@divisor,w,c
  3161  001CEA  5C18               	subwf	___lwmod@dividend,w,c
  3162  001CEC  501B               	movf	___lwmod@divisor+1,w,c
  3163  001CEE  5819               	subwfb	___lwmod@dividend+1,w,c
  3164  001CF0  A0D8               	btfss	status,0,c
  3165  001CF2  D005               	goto	l6163
  3166  001CF4  501A               	movf	___lwmod@divisor,w,c
  3167  001CF6  5E18               	subwf	___lwmod@dividend,f,c
  3168  001CF8  501B               	movf	___lwmod@divisor+1,w,c
  3169  001CFA  5A19               	subwfb	___lwmod@dividend+1,f,c
  3170  001CFC  D000               	goto	l6163
  3171  001CFE                     l6163:
  3172  001CFE  90D8               	bcf	status,0,c
  3173  001D00  321B               	rrcf	___lwmod@divisor+1,f,c
  3174  001D02  321A               	rrcf	___lwmod@divisor,f,c
  3175  001D04  2E1C               	decfsz	___lwmod@counter,f,c
  3176  001D06  D7F0               	goto	l6159
  3177  001D08  D000               	goto	l1408
  3178  001D0A                     l1408:
  3179  001D0A  C018  F018         	movff	___lwmod@dividend,?___lwmod
  3180  001D0E  C019  F019         	movff	___lwmod@dividend+1,?___lwmod+1
  3181  001D12  0012               	return		;funcret
  3182  001D14                     __end_of___lwmod:
  3183                           	opt stack 0
  3184                           tblptru	equ	0xFF8
  3185                           tblptrh	equ	0xFF7
  3186                           tblptrl	equ	0xFF6
  3187                           tablat	equ	0xFF5
  3188                           prodh	equ	0xFF4
  3189                           prodl	equ	0xFF3
  3190                           intcon	equ	0xFF2
  3191                           intcon2	equ	0xFF1
  3192                           postinc0	equ	0xFEE
  3193                           wreg	equ	0xFE8
  3194                           postdec1	equ	0xFE5
  3195                           fsr1l	equ	0xFE1
  3196                           postinc2	equ	0xFDE
  3197                           postdec2	equ	0xFDD
  3198                           fsr2h	equ	0xFDA
  3199                           fsr2l	equ	0xFD9
  3200                           status	equ	0xFD8
  3201                           
  3202 ;; *************** function ___lwdiv *****************
  3203 ;; Defined at:
  3204 ;;		line 8 in file "E:\XC8\sources\common\lwdiv.c"
  3205 ;; Parameters:    Size  Location     Type
  3206 ;;  dividend        2   16[COMRAM] unsigned int 
  3207 ;;  divisor         2   18[COMRAM] unsigned int 
  3208 ;; Auto vars:     Size  Location     Type
  3209 ;;  quotient        2   21[COMRAM] unsigned int 
  3210 ;;  counter         1   20[COMRAM] unsigned char 
  3211 ;; Return value:  Size  Location     Type
  3212 ;;                  2   16[COMRAM] unsigned int 
  3213 ;; Registers used:
  3214 ;;		wreg, status,2, status,0
  3215 ;; Tracked objects:
  3216 ;;		On entry : 0/0
  3217 ;;		On exit  : 0/0
  3218 ;;		Unchanged: 0/0
  3219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3220 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3221 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3222 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3223 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3224 ;;Total ram usage:        7 bytes
  3225 ;; Hardware stack levels used:    1
  3226 ;; Hardware stack levels required when called:    3
  3227 ;; This function calls:
  3228 ;;		Nothing
  3229 ;; This function is called by:
  3230 ;;		_printf
  3231 ;; This function uses a non-reentrant model
  3232 ;;
  3233                           
  3234                           	psect	text5
  3235  001BCC                     __ptext5:
  3236                           	opt stack 0
  3237  001BCC                     ___lwdiv:
  3238                           	opt stack 26
  3239                           
  3240                           ;incstack = 0
  3241  001BCC  0E00               	movlw	0
  3242  001BCE  6E17               	movwf	___lwdiv@quotient+1,c
  3243  001BD0  0E00               	movlw	0
  3244  001BD2  6E16               	movwf	___lwdiv@quotient,c
  3245  001BD4  5013               	movf	___lwdiv@divisor,w,c
  3246  001BD6  1014               	iorwf	___lwdiv@divisor+1,w,c
  3247  001BD8  B4D8               	btfsc	status,2,c
  3248  001BDA  D021               	goto	l1398
  3249  001BDC  0E01               	movlw	1
  3250  001BDE  6E15               	movwf	___lwdiv@counter,c
  3251  001BE0  D005               	goto	l6137
  3252  001BE2                     l6135:
  3253  001BE2  90D8               	bcf	status,0,c
  3254  001BE4  3613               	rlcf	___lwdiv@divisor,f,c
  3255  001BE6  3614               	rlcf	___lwdiv@divisor+1,f,c
  3256  001BE8  2A15               	incf	___lwdiv@counter,f,c
  3257  001BEA  D000               	goto	l6137
  3258  001BEC                     l6137:
  3259  001BEC  BE14               	btfsc	___lwdiv@divisor+1,7,c
  3260  001BEE  D002               	goto	l6139
  3261  001BF0  D7F8               	goto	l6135
  3262  001BF2  D000               	goto	l6139
  3263  001BF4                     l6139:
  3264  001BF4  90D8               	bcf	status,0,c
  3265  001BF6  3616               	rlcf	___lwdiv@quotient,f,c
  3266  001BF8  3617               	rlcf	___lwdiv@quotient+1,f,c
  3267  001BFA  5013               	movf	___lwdiv@divisor,w,c
  3268  001BFC  5C11               	subwf	___lwdiv@dividend,w,c
  3269  001BFE  5014               	movf	___lwdiv@divisor+1,w,c
  3270  001C00  5812               	subwfb	___lwdiv@dividend+1,w,c
  3271  001C02  A0D8               	btfss	status,0,c
  3272  001C04  D006               	goto	l6147
  3273  001C06  5013               	movf	___lwdiv@divisor,w,c
  3274  001C08  5E11               	subwf	___lwdiv@dividend,f,c
  3275  001C0A  5014               	movf	___lwdiv@divisor+1,w,c
  3276  001C0C  5A12               	subwfb	___lwdiv@dividend+1,f,c
  3277  001C0E  8016               	bsf	___lwdiv@quotient,0,c
  3278  001C10  D000               	goto	l6147
  3279  001C12                     l6147:
  3280  001C12  90D8               	bcf	status,0,c
  3281  001C14  3214               	rrcf	___lwdiv@divisor+1,f,c
  3282  001C16  3213               	rrcf	___lwdiv@divisor,f,c
  3283  001C18  2E15               	decfsz	___lwdiv@counter,f,c
  3284  001C1A  D7EC               	goto	l6139
  3285  001C1C  D000               	goto	l1398
  3286  001C1E                     l1398:
  3287  001C1E  C016  F011         	movff	___lwdiv@quotient,?___lwdiv
  3288  001C22  C017  F012         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3289  001C26  0012               	return		;funcret
  3290  001C28                     __end_of___lwdiv:
  3291                           	opt stack 0
  3292                           tblptru	equ	0xFF8
  3293                           tblptrh	equ	0xFF7
  3294                           tblptrl	equ	0xFF6
  3295                           tablat	equ	0xFF5
  3296                           prodh	equ	0xFF4
  3297                           prodl	equ	0xFF3
  3298                           intcon	equ	0xFF2
  3299                           intcon2	equ	0xFF1
  3300                           postinc0	equ	0xFEE
  3301                           wreg	equ	0xFE8
  3302                           postdec1	equ	0xFE5
  3303                           fsr1l	equ	0xFE1
  3304                           postinc2	equ	0xFDE
  3305                           postdec2	equ	0xFDD
  3306                           fsr2h	equ	0xFDA
  3307                           fsr2l	equ	0xFD9
  3308                           status	equ	0xFD8
  3309                           
  3310 ;; *************** function _get_RPM *****************
  3311 ;; Defined at:
  3312 ;;		line 18 in file "Fan_Support.c"
  3313 ;; Parameters:    Size  Location     Type
  3314 ;;		None
  3315 ;; Auto vars:     Size  Location     Type
  3316 ;;  RPS             2   32[COMRAM] int 
  3317 ;; Return value:  Size  Location     Type
  3318 ;;                  2   30[COMRAM] int 
  3319 ;; Registers used:
  3320 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3321 ;; Tracked objects:
  3322 ;;		On entry : 0/0
  3323 ;;		On exit  : 0/0
  3324 ;;		Unchanged: 0/0
  3325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3326 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3327 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3328 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3329 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3330 ;;Total ram usage:        4 bytes
  3331 ;; Hardware stack levels used:    1
  3332 ;; Hardware stack levels required when called:    4
  3333 ;; This function calls:
  3334 ;;		___awdiv
  3335 ;;		___wmul
  3336 ;; This function is called by:
  3337 ;;		_main
  3338 ;; This function uses a non-reentrant model
  3339 ;;
  3340                           
  3341                           	psect	text6
  3342  001DF2                     __ptext6:
  3343                           	opt stack 0
  3344  001DF2                     _get_RPM:
  3345                           	opt stack 26
  3346                           
  3347                           ;Fan_Support.c: 20: int RPS = TMR3L / 2;
  3348                           
  3349                           ;incstack = 0
  3350  001DF2  CFB2 F017          	movff	4018,___awdiv@dividend	;volatile
  3351  001DF6  6A18               	clrf	___awdiv@dividend+1,c
  3352  001DF8  0E00               	movlw	0
  3353  001DFA  6E1A               	movwf	___awdiv@divisor+1,c
  3354  001DFC  0E02               	movlw	2
  3355  001DFE  6E19               	movwf	___awdiv@divisor,c
  3356  001E00  ECF8  F00B         	call	___awdiv	;wreg free
  3357  001E04  C017  F021         	movff	?___awdiv,get_RPM@RPS
  3358  001E08  C018  F022         	movff	?___awdiv+1,get_RPM@RPS+1
  3359                           
  3360                           ;Fan_Support.c: 22: TMR3L = 0;
  3361  001E0C  0E00               	movlw	0
  3362  001E0E  6EB2               	movwf	4018,c	;volatile
  3363                           
  3364                           ;Fan_Support.c: 23: return (RPS * 60);
  3365  001E10  C021  F011         	movff	get_RPM@RPS,___wmul@multiplier
  3366  001E14  C022  F012         	movff	get_RPM@RPS+1,___wmul@multiplier+1
  3367  001E18  0E00               	movlw	0
  3368  001E1A  6E14               	movwf	___wmul@multiplicand+1,c
  3369  001E1C  0E3C               	movlw	60
  3370  001E1E  6E13               	movwf	___wmul@multiplicand,c
  3371  001E20  ECF2  F00F         	call	___wmul	;wreg free
  3372  001E24  C011  F01F         	movff	?___wmul,?_get_RPM
  3373  001E28  C012  F020         	movff	?___wmul+1,?_get_RPM+1
  3374  001E2C  D000               	goto	l396
  3375  001E2E                     l396:
  3376  001E2E  0012               	return		;funcret
  3377  001E30                     __end_of_get_RPM:
  3378                           	opt stack 0
  3379                           tblptru	equ	0xFF8
  3380                           tblptrh	equ	0xFF7
  3381                           tblptrl	equ	0xFF6
  3382                           tablat	equ	0xFF5
  3383                           prodh	equ	0xFF4
  3384                           prodl	equ	0xFF3
  3385                           intcon	equ	0xFF2
  3386                           intcon2	equ	0xFF1
  3387                           postinc0	equ	0xFEE
  3388                           wreg	equ	0xFE8
  3389                           postdec1	equ	0xFE5
  3390                           fsr1l	equ	0xFE1
  3391                           postinc2	equ	0xFDE
  3392                           postdec2	equ	0xFDD
  3393                           fsr2h	equ	0xFDA
  3394                           fsr2l	equ	0xFD9
  3395                           status	equ	0xFD8
  3396                           
  3397 ;; *************** function _Update_Screen *****************
  3398 ;; Defined at:
  3399 ;;		line 69 in file "Main_Screen.c"
  3400 ;; Parameters:    Size  Location     Type
  3401 ;;		None
  3402 ;; Auto vars:     Size  Location     Type
  3403 ;;  neg_tempF       2   11[BANK0 ] int 
  3404 ;; Return value:  Size  Location     Type
  3405 ;;		None               void
  3406 ;; Registers used:
  3407 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3408 ;; Tracked objects:
  3409 ;;		On entry : 0/0
  3410 ;;		On exit  : 0/0
  3411 ;;		Unchanged: 0/0
  3412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3413 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3414 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3415 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3416 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3417 ;;Total ram usage:        4 bytes
  3418 ;; Hardware stack levels used:    1
  3419 ;; Hardware stack levels required when called:   10
  3420 ;; This function calls:
  3421 ;;		___awdiv
  3422 ;;		___awmod
  3423 ;;		_drawtext
  3424 ;;		_strcpy
  3425 ;; This function is called by:
  3426 ;;		_main
  3427 ;; This function uses a non-reentrant model
  3428 ;;
  3429                           
  3430                           	psect	text7
  3431  00001C                     __ptext7:
  3432                           	opt stack 0
  3433  00001C                     _Update_Screen:
  3434                           	opt stack 20
  3435                           
  3436                           ;Main_Screen.c: 71: if ((DS1621_tempC & 0x80) == 0x80)
  3437                           
  3438                           ;incstack = 0
  3439  00001C  AE42               	btfss	_DS1621_tempC,7,c
  3440  00001E  D01C               	goto	l6445
  3441                           
  3442                           ;Main_Screen.c: 72: {
  3443                           ;Main_Screen.c: 73: tempC[0] = '-';
  3444  000020  0E2D               	movlw	45
  3445  000022  0100               	movlb	0	; () banked
  3446  000024  6FE3               	movwf	_tempC& (0+255),b
  3447                           
  3448                           ; BSR set to: 0
  3449                           ;Main_Screen.c: 74: tempC[1] = (DS1621_tempC & 0x7f)/10 + '0';
  3450  000026  0E7F               	movlw	127
  3451  000028  1442               	andwf	_DS1621_tempC,w,c
  3452  00002A  6E17               	movwf	___awdiv@dividend,c
  3453  00002C  6A18               	clrf	___awdiv@dividend+1,c
  3454  00002E  0E00               	movlw	0
  3455  000030  6E1A               	movwf	___awdiv@divisor+1,c
  3456  000032  0E0A               	movlw	10
  3457  000034  6E19               	movwf	___awdiv@divisor,c
  3458  000036  ECF8  F00B         	call	___awdiv	;wreg free
  3459  00003A  5017               	movf	?___awdiv,w,c
  3460  00003C  0F30               	addlw	48
  3461  00003E  0100               	movlb	0	; () banked
  3462  000040  6FE4               	movwf	(_tempC+1)& (0+255),b
  3463                           
  3464                           ; BSR set to: 0
  3465                           ;Main_Screen.c: 75: tempC[2] = (DS1621_tempC & 0x7f)%10 + '0';
  3466  000042  0E7F               	movlw	127
  3467  000044  1442               	andwf	_DS1621_tempC,w,c
  3468  000046  6E1F               	movwf	___awmod@dividend,c
  3469  000048  6A20               	clrf	___awmod@dividend+1,c
  3470  00004A  0E00               	movlw	0
  3471  00004C  6E22               	movwf	___awmod@divisor+1,c
  3472  00004E  0E0A               	movlw	10
  3473  000050  6E21               	movwf	___awmod@divisor,c
  3474  000052  EC87  F00C         	call	___awmod	;wreg free
  3475  000056  D01B               	goto	L1
  3476  000058                     l6445:
  3477                           
  3478                           ;Main_Screen.c: 77: else
  3479                           ;Main_Screen.c: 78: {
  3480                           ;Main_Screen.c: 79: tempC[0] = '+';
  3481  000058  0E2B               	movlw	43
  3482  00005A  0100               	movlb	0	; () banked
  3483  00005C  6FE3               	movwf	_tempC& (0+255),b
  3484                           
  3485                           ; BSR set to: 0
  3486                           ;Main_Screen.c: 80: tempC[1] = DS1621_tempC/10 + '0';
  3487  00005E  C042  F017         	movff	_DS1621_tempC,___awdiv@dividend
  3488  000062  C043  F018         	movff	_DS1621_tempC+1,___awdiv@dividend+1
  3489  000066  0E00               	movlw	0
  3490  000068  6E1A               	movwf	___awdiv@divisor+1,c
  3491  00006A  0E0A               	movlw	10
  3492  00006C  6E19               	movwf	___awdiv@divisor,c
  3493  00006E  ECF8  F00B         	call	___awdiv	;wreg free
  3494  000072  5017               	movf	?___awdiv,w,c
  3495  000074  0F30               	addlw	48
  3496  000076  0100               	movlb	0	; () banked
  3497  000078  6FE4               	movwf	(_tempC+1)& (0+255),b
  3498                           
  3499                           ; BSR set to: 0
  3500                           ;Main_Screen.c: 81: tempC[2] = DS1621_tempC%10 + '0';
  3501  00007A  C042  F01F         	movff	_DS1621_tempC,___awmod@dividend
  3502  00007E  C043  F020         	movff	_DS1621_tempC+1,___awmod@dividend+1
  3503  000082  0E00               	movlw	0
  3504  000084  6E22               	movwf	___awmod@divisor+1,c
  3505  000086  0E0A               	movlw	10
  3506  000088  6E21               	movwf	___awmod@divisor,c
  3507  00008A  EC87  F00C         	call	___awmod	;wreg free
  3508  00008E                     L1:
  3509  00008E  501F               	movf	?___awmod,w,c
  3510  000090  0F30               	addlw	48
  3511  000092  0100               	movlb	0	; () banked
  3512  000094  6FE5               	movwf	(_tempC+2)& (0+255),b
  3513  000096  D000               	goto	l6451
  3514  000098                     l6451:
  3515                           
  3516                           ; BSR set to: 0
  3517                           ;Main_Screen.c: 82: }
  3518                           ;Main_Screen.c: 84: if (DS1621_tempF < 0)
  3519  000098  AE45               	btfss	_DS1621_tempF+1,7,c
  3520  00009A  D029               	goto	l6461
  3521                           
  3522                           ; BSR set to: 0
  3523                           ;Main_Screen.c: 85: {
  3524                           ;Main_Screen.c: 86: tempF[0] = '-';
  3525  00009C  0E2D               	movlw	45
  3526  00009E  0100               	movlb	0	; () banked
  3527  0000A0  6FE7               	movwf	_tempF& (0+255),b
  3528                           
  3529                           ; BSR set to: 0
  3530                           ;Main_Screen.c: 87: int neg_tempF = -DS1621_tempF;
  3531  0000A2  C044  F0F4         	movff	_DS1621_tempF,??_Update_Screen
  3532  0000A6  C045  F0F5         	movff	_DS1621_tempF+1,??_Update_Screen+1
  3533  0000AA  0100               	movlb	0	; () banked
  3534  0000AC  1FF4               	comf	??_Update_Screen& (0+255),f,b
  3535  0000AE  1FF5               	comf	(??_Update_Screen+1)& (0+255),f,b
  3536  0000B0  4BF4               	infsnz	??_Update_Screen& (0+255),f,b
  3537  0000B2  2BF5               	incf	(??_Update_Screen+1)& (0+255),f,b
  3538  0000B4  C0F4  F0F6         	movff	??_Update_Screen,Update_Screen@neg_tempF
  3539  0000B8  C0F5  F0F7         	movff	??_Update_Screen+1,Update_Screen@neg_tempF+1
  3540                           
  3541                           ; BSR set to: 0
  3542                           ;Main_Screen.c: 88: tempF[1] = neg_tempF/10 + '0';
  3543  0000BC  C0F6  F017         	movff	Update_Screen@neg_tempF,___awdiv@dividend
  3544  0000C0  C0F7  F018         	movff	Update_Screen@neg_tempF+1,___awdiv@dividend+1
  3545  0000C4  0E00               	movlw	0
  3546  0000C6  6E1A               	movwf	___awdiv@divisor+1,c
  3547  0000C8  0E0A               	movlw	10
  3548  0000CA  6E19               	movwf	___awdiv@divisor,c
  3549  0000CC  ECF8  F00B         	call	___awdiv	;wreg free
  3550  0000D0  5017               	movf	?___awdiv,w,c
  3551  0000D2  0F30               	addlw	48
  3552  0000D4  0100               	movlb	0	; () banked
  3553  0000D6  6FE8               	movwf	(_tempF+1)& (0+255),b
  3554                           
  3555                           ; BSR set to: 0
  3556                           ;Main_Screen.c: 89: tempF[2] = neg_tempF%10 + '0';
  3557  0000D8  C0F6  F01F         	movff	Update_Screen@neg_tempF,___awmod@dividend
  3558  0000DC  C0F7  F020         	movff	Update_Screen@neg_tempF+1,___awmod@dividend+1
  3559  0000E0  0E00               	movlw	0
  3560  0000E2  6E22               	movwf	___awmod@divisor+1,c
  3561  0000E4  0E0A               	movlw	10
  3562  0000E6  6E21               	movwf	___awmod@divisor,c
  3563  0000E8  EC87  F00C         	call	___awmod	;wreg free
  3564  0000EC  D01B               	goto	L2
  3565  0000EE                     l6461:
  3566                           
  3567                           ; BSR set to: 0
  3568                           ;Main_Screen.c: 91: else
  3569                           ;Main_Screen.c: 92: {
  3570                           ;Main_Screen.c: 93: tempF[0] = '+';
  3571  0000EE  0E2B               	movlw	43
  3572  0000F0  0100               	movlb	0	; () banked
  3573  0000F2  6FE7               	movwf	_tempF& (0+255),b
  3574                           
  3575                           ; BSR set to: 0
  3576                           ;Main_Screen.c: 94: tempF[1] = DS1621_tempF/10 + '0';
  3577  0000F4  C044  F017         	movff	_DS1621_tempF,___awdiv@dividend
  3578  0000F8  C045  F018         	movff	_DS1621_tempF+1,___awdiv@dividend+1
  3579  0000FC  0E00               	movlw	0
  3580  0000FE  6E1A               	movwf	___awdiv@divisor+1,c
  3581  000100  0E0A               	movlw	10
  3582  000102  6E19               	movwf	___awdiv@divisor,c
  3583  000104  ECF8  F00B         	call	___awdiv	;wreg free
  3584  000108  5017               	movf	?___awdiv,w,c
  3585  00010A  0F30               	addlw	48
  3586  00010C  0100               	movlb	0	; () banked
  3587  00010E  6FE8               	movwf	(_tempF+1)& (0+255),b
  3588                           
  3589                           ; BSR set to: 0
  3590                           ;Main_Screen.c: 95: tempF[2] = DS1621_tempF%10 + '0';
  3591  000110  C044  F01F         	movff	_DS1621_tempF,___awmod@dividend
  3592  000114  C045  F020         	movff	_DS1621_tempF+1,___awmod@dividend+1
  3593  000118  0E00               	movlw	0
  3594  00011A  6E22               	movwf	___awmod@divisor+1,c
  3595  00011C  0E0A               	movlw	10
  3596  00011E  6E21               	movwf	___awmod@divisor,c
  3597  000120  EC87  F00C         	call	___awmod	;wreg free
  3598  000124                     L2:
  3599  000124  501F               	movf	?___awmod,w,c
  3600  000126  0F30               	addlw	48
  3601  000128  0100               	movlb	0	; () banked
  3602  00012A  6FE9               	movwf	(_tempF+2)& (0+255),b
  3603  00012C  D000               	goto	l6467
  3604  00012E                     l6467:
  3605                           
  3606                           ; BSR set to: 0
  3607                           ;Main_Screen.c: 96: }
  3608                           ;Main_Screen.c: 97: time[0] = (hour>>4) + '0';
  3609  00012E  385E               	swapf	_hour,w,c
  3610  000130  0B0F               	andlw	15
  3611  000132  0F30               	addlw	48
  3612  000134  0100               	movlb	0	; () banked
  3613  000136  6FCD               	movwf	_time& (0+255),b
  3614                           
  3615                           ; BSR set to: 0
  3616                           ;Main_Screen.c: 98: time[1] = (hour & 0x0f)+ '0';
  3617  000138  505E               	movf	_hour,w,c
  3618  00013A  0B0F               	andlw	15
  3619  00013C  0F30               	addlw	48
  3620  00013E  0100               	movlb	0	; () banked
  3621  000140  6FCE               	movwf	(_time+1)& (0+255),b
  3622                           
  3623                           ; BSR set to: 0
  3624                           ;Main_Screen.c: 101: time[3] = (minute >> 4) + '0';
  3625  000142  385F               	swapf	_minute,w,c
  3626  000144  0B0F               	andlw	15
  3627  000146  0F30               	addlw	48
  3628  000148  0100               	movlb	0	; () banked
  3629  00014A  6FD0               	movwf	(_time+3)& (0+255),b
  3630                           
  3631                           ; BSR set to: 0
  3632                           ;Main_Screen.c: 102: time[4] = (minute & 0x0f) + '0';
  3633  00014C  505F               	movf	_minute,w,c
  3634  00014E  0B0F               	andlw	15
  3635  000150  0F30               	addlw	48
  3636  000152  0100               	movlb	0	; () banked
  3637  000154  6FD1               	movwf	(_time+4)& (0+255),b
  3638                           
  3639                           ; BSR set to: 0
  3640                           ;Main_Screen.c: 104: time[6] = (second>>4) + '0';
  3641  000156  3862               	swapf	_second,w,c
  3642  000158  0B0F               	andlw	15
  3643  00015A  0F30               	addlw	48
  3644  00015C  0100               	movlb	0	; () banked
  3645  00015E  6FD3               	movwf	(_time+6)& (0+255),b
  3646                           
  3647                           ; BSR set to: 0
  3648                           ;Main_Screen.c: 105: time[7] = (second & 0x0f) + '0';
  3649  000160  5062               	movf	_second,w,c
  3650  000162  0B0F               	andlw	15
  3651  000164  0F30               	addlw	48
  3652  000166  0100               	movlb	0	; () banked
  3653  000168  6FD4               	movwf	(_time+7)& (0+255),b
  3654                           
  3655                           ; BSR set to: 0
  3656                           ;Main_Screen.c: 107: date[0] = (month>>4) + '0';
  3657  00016A  3860               	swapf	_month,w,c
  3658  00016C  0B0F               	andlw	15
  3659  00016E  0F30               	addlw	48
  3660  000170  0100               	movlb	0	; () banked
  3661  000172  6FC4               	movwf	_date& (0+255),b
  3662                           
  3663                           ; BSR set to: 0
  3664                           ;Main_Screen.c: 108: date[1] = (month & 0x0f) + '0';
  3665  000174  5060               	movf	_month,w,c
  3666  000176  0B0F               	andlw	15
  3667  000178  0F30               	addlw	48
  3668  00017A  0100               	movlb	0	; () banked
  3669  00017C  6FC5               	movwf	(_date+1)& (0+255),b
  3670                           
  3671                           ; BSR set to: 0
  3672                           ;Main_Screen.c: 109: date[3] = (day >> 4) + '0';
  3673  00017E  385A               	swapf	_day,w,c
  3674  000180  0B0F               	andlw	15
  3675  000182  0F30               	addlw	48
  3676  000184  0100               	movlb	0	; () banked
  3677  000186  6FC7               	movwf	(_date+3)& (0+255),b
  3678                           
  3679                           ; BSR set to: 0
  3680                           ;Main_Screen.c: 110: date[4] = (day & 0x0f) + '0';
  3681  000188  505A               	movf	_day,w,c
  3682  00018A  0B0F               	andlw	15
  3683  00018C  0F30               	addlw	48
  3684  00018E  0100               	movlb	0	; () banked
  3685  000190  6FC8               	movwf	(_date+4)& (0+255),b
  3686                           
  3687                           ; BSR set to: 0
  3688                           ;Main_Screen.c: 111: date[6] = (year>> 4) + '0';
  3689  000192  386C               	swapf	_year,w,c
  3690  000194  0B0F               	andlw	15
  3691  000196  0F30               	addlw	48
  3692  000198  0100               	movlb	0	; () banked
  3693  00019A  6FCA               	movwf	(_date+6)& (0+255),b
  3694                           
  3695                           ; BSR set to: 0
  3696                           ;Main_Screen.c: 112: date[7] = (year & 0x0f) + '0';
  3697  00019C  506C               	movf	_year,w,c
  3698  00019E  0B0F               	andlw	15
  3699  0001A0  0F30               	addlw	48
  3700  0001A2  0100               	movlb	0	; () banked
  3701  0001A4  6FCB               	movwf	(_date+7)& (0+255),b
  3702                           
  3703                           ; BSR set to: 0
  3704                           ;Main_Screen.c: 115: if (FAN == 1) strcpy(Fan_SW_Txt, "ON ");
  3705  0001A6  0450               	decf	_FAN,w,c
  3706  0001A8  A4D8               	btfss	status,2,c
  3707  0001AA  D00B               	goto	l6495
  3708                           
  3709                           ; BSR set to: 0
  3710  0001AC  0EDF               	movlw	low _Fan_SW_Txt
  3711  0001AE  6E11               	movwf	strcpy@to,c
  3712  0001B0  0E00               	movlw	high _Fan_SW_Txt
  3713  0001B2  6E12               	movwf	strcpy@to+1,c
  3714  0001B4  0EEC               	movlw	low STR_16
  3715  0001B6  6E13               	movwf	strcpy@from,c
  3716  0001B8  0EFF               	movlw	high STR_16
  3717  0001BA  6E14               	movwf	strcpy@from+1,c
  3718  0001BC  EC93  F00F         	call	_strcpy	;wreg free
  3719  0001C0  D00B               	goto	l6497
  3720  0001C2                     l6495:
  3721                           
  3722                           ;Main_Screen.c: 116: else strcpy(Fan_SW_Txt, "OFF");
  3723  0001C2  0EDF               	movlw	low _Fan_SW_Txt
  3724  0001C4  6E11               	movwf	strcpy@to,c
  3725  0001C6  0E00               	movlw	high _Fan_SW_Txt
  3726  0001C8  6E12               	movwf	strcpy@to+1,c
  3727  0001CA  0EF0               	movlw	low STR_17
  3728  0001CC  6E13               	movwf	strcpy@from,c
  3729  0001CE  0EFF               	movlw	high STR_17
  3730  0001D0  6E14               	movwf	strcpy@from+1,c
  3731  0001D2  EC93  F00F         	call	_strcpy	;wreg free
  3732  0001D6  D000               	goto	l6497
  3733  0001D8                     l6497:
  3734                           
  3735                           ;Main_Screen.c: 119: DC_Txt[0] = duty_cycle/100 + '0';
  3736  0001D8  C05C  F017         	movff	_duty_cycle,___awdiv@dividend
  3737  0001DC  6A18               	clrf	___awdiv@dividend+1,c
  3738  0001DE  0E00               	movlw	0
  3739  0001E0  6E1A               	movwf	___awdiv@divisor+1,c
  3740  0001E2  0E64               	movlw	100
  3741  0001E4  6E19               	movwf	___awdiv@divisor,c
  3742  0001E6  ECF8  F00B         	call	___awdiv	;wreg free
  3743  0001EA  5017               	movf	?___awdiv,w,c
  3744  0001EC  0F30               	addlw	48
  3745  0001EE  0100               	movlb	0	; () banked
  3746  0001F0  6FDB               	movwf	_DC_Txt& (0+255),b
  3747                           
  3748                           ; BSR set to: 0
  3749                           ;Main_Screen.c: 121: DC_Txt[1] = (duty_cycle / 10) % 10 + '0';
  3750  0001F2  0E00               	movlw	0
  3751  0001F4  6E1A               	movwf	___awdiv@divisor+1,c
  3752  0001F6  0E0A               	movlw	10
  3753  0001F8  6E19               	movwf	___awdiv@divisor,c
  3754  0001FA  C05C  F017         	movff	_duty_cycle,___awdiv@dividend
  3755  0001FE  6A18               	clrf	___awdiv@dividend+1,c
  3756  000200  ECF8  F00B         	call	___awdiv	;wreg free
  3757  000204  C017  F01F         	movff	?___awdiv,___awmod@dividend
  3758  000208  C018  F020         	movff	?___awdiv+1,___awmod@dividend+1
  3759  00020C  0E00               	movlw	0
  3760  00020E  6E22               	movwf	___awmod@divisor+1,c
  3761  000210  0E0A               	movlw	10
  3762  000212  6E21               	movwf	___awmod@divisor,c
  3763  000214  EC87  F00C         	call	___awmod	;wreg free
  3764  000218  501F               	movf	?___awmod,w,c
  3765  00021A  0F30               	addlw	48
  3766  00021C  0100               	movlb	0	; () banked
  3767  00021E  6FDC               	movwf	(_DC_Txt+1)& (0+255),b
  3768                           
  3769                           ; BSR set to: 0
  3770                           ;Main_Screen.c: 122: DC_Txt[2] = duty_cycle % 10 +'0';
  3771  000220  C05C  F01F         	movff	_duty_cycle,___awmod@dividend
  3772  000224  6A20               	clrf	___awmod@dividend+1,c
  3773  000226  0E00               	movlw	0
  3774  000228  6E22               	movwf	___awmod@divisor+1,c
  3775  00022A  0E0A               	movlw	10
  3776  00022C  6E21               	movwf	___awmod@divisor,c
  3777  00022E  EC87  F00C         	call	___awmod	;wreg free
  3778  000232  501F               	movf	?___awmod,w,c
  3779  000234  0F30               	addlw	48
  3780  000236  0100               	movlb	0	; () banked
  3781  000238  6FDD               	movwf	(_DC_Txt+2)& (0+255),b
  3782                           
  3783                           ; BSR set to: 0
  3784                           ;Main_Screen.c: 125: RPM_Txt[0] = rpm/1000 + '0';
  3785  00023A  C04A  F017         	movff	_rpm,___awdiv@dividend
  3786  00023E  C04B  F018         	movff	_rpm+1,___awdiv@dividend+1
  3787  000242  0E03               	movlw	3
  3788  000244  6E1A               	movwf	___awdiv@divisor+1,c
  3789  000246  0EE8               	movlw	232
  3790  000248  6E19               	movwf	___awdiv@divisor,c
  3791  00024A  ECF8  F00B         	call	___awdiv	;wreg free
  3792  00024E  5017               	movf	?___awdiv,w,c
  3793  000250  0F30               	addlw	48
  3794  000252  0100               	movlb	0	; () banked
  3795  000254  6FD6               	movwf	_RPM_Txt& (0+255),b
  3796                           
  3797                           ; BSR set to: 0
  3798                           ;Main_Screen.c: 127: RPM_Txt[1] = (rpm / 100) % 10 + '0';
  3799  000256  0E00               	movlw	0
  3800  000258  6E1A               	movwf	___awdiv@divisor+1,c
  3801  00025A  0E64               	movlw	100
  3802  00025C  6E19               	movwf	___awdiv@divisor,c
  3803  00025E  C04A  F017         	movff	_rpm,___awdiv@dividend
  3804  000262  C04B  F018         	movff	_rpm+1,___awdiv@dividend+1
  3805  000266  ECF8  F00B         	call	___awdiv	;wreg free
  3806  00026A  C017  F01F         	movff	?___awdiv,___awmod@dividend
  3807  00026E  C018  F020         	movff	?___awdiv+1,___awmod@dividend+1
  3808  000272  0E00               	movlw	0
  3809  000274  6E22               	movwf	___awmod@divisor+1,c
  3810  000276  0E0A               	movlw	10
  3811  000278  6E21               	movwf	___awmod@divisor,c
  3812  00027A  EC87  F00C         	call	___awmod	;wreg free
  3813  00027E  501F               	movf	?___awmod,w,c
  3814  000280  0F30               	addlw	48
  3815  000282  0100               	movlb	0	; () banked
  3816  000284  6FD7               	movwf	(_RPM_Txt+1)& (0+255),b
  3817                           
  3818                           ; BSR set to: 0
  3819                           ;Main_Screen.c: 128: RPM_Txt[2] = (rpm / 10) % 10 + '0';
  3820  000286  0E00               	movlw	0
  3821  000288  6E1A               	movwf	___awdiv@divisor+1,c
  3822  00028A  0E0A               	movlw	10
  3823  00028C  6E19               	movwf	___awdiv@divisor,c
  3824  00028E  C04A  F017         	movff	_rpm,___awdiv@dividend
  3825  000292  C04B  F018         	movff	_rpm+1,___awdiv@dividend+1
  3826  000296  ECF8  F00B         	call	___awdiv	;wreg free
  3827  00029A  C017  F01F         	movff	?___awdiv,___awmod@dividend
  3828  00029E  C018  F020         	movff	?___awdiv+1,___awmod@dividend+1
  3829  0002A2  0E00               	movlw	0
  3830  0002A4  6E22               	movwf	___awmod@divisor+1,c
  3831  0002A6  0E0A               	movlw	10
  3832  0002A8  6E21               	movwf	___awmod@divisor,c
  3833  0002AA  EC87  F00C         	call	___awmod	;wreg free
  3834  0002AE  501F               	movf	?___awmod,w,c
  3835  0002B0  0F30               	addlw	48
  3836  0002B2  0100               	movlb	0	; () banked
  3837  0002B4  6FD8               	movwf	(_RPM_Txt+2)& (0+255),b
  3838                           
  3839                           ; BSR set to: 0
  3840                           ;Main_Screen.c: 129: RPM_Txt[3] = rpm % 10 + '0';
  3841  0002B6  C04A  F01F         	movff	_rpm,___awmod@dividend
  3842  0002BA  C04B  F020         	movff	_rpm+1,___awmod@dividend+1
  3843  0002BE  0E00               	movlw	0
  3844  0002C0  6E22               	movwf	___awmod@divisor+1,c
  3845  0002C2  0E0A               	movlw	10
  3846  0002C4  6E21               	movwf	___awmod@divisor,c
  3847  0002C6  EC87  F00C         	call	___awmod	;wreg free
  3848  0002CA  501F               	movf	?___awmod,w,c
  3849  0002CC  0F30               	addlw	48
  3850  0002CE  0100               	movlb	0	; () banked
  3851  0002D0  6FD9               	movwf	(_RPM_Txt+3)& (0+255),b
  3852                           
  3853                           ; BSR set to: 0
  3854                           ;Main_Screen.c: 131: drawtext(1, 23, tempC , 0xFFE0 , 0x0000 , 2);
  3855  0002D2  0E17               	movlw	23
  3856  0002D4  6E39               	movwf	drawtext@y,c
  3857  0002D6  0EE3               	movlw	low _tempC
  3858  0002D8  6E3A               	movwf	drawtext@_text,c
  3859  0002DA  0E00               	movlw	high _tempC
  3860  0002DC  6E3B               	movwf	drawtext@_text+1,c
  3861  0002DE  0EFF               	movlw	255
  3862  0002E0  6E3D               	movwf	drawtext@color+1,c
  3863  0002E2  0EE0               	movlw	224
  3864  0002E4  6E3C               	movwf	drawtext@color,c
  3865  0002E6  0E00               	movlw	0
  3866  0002E8  6E3F               	movwf	drawtext@bg+1,c
  3867  0002EA  0E00               	movlw	0
  3868  0002EC  6E3E               	movwf	drawtext@bg,c
  3869  0002EE  0E02               	movlw	2
  3870  0002F0  6E40               	movwf	drawtext@size,c
  3871  0002F2  0E01               	movlw	1
  3872  0002F4  ECDA  F007         	call	_drawtext
  3873                           
  3874                           ;Main_Screen.c: 132: drawtext(70, 23, tempF , 0xFFE0 , 0x0000 , 2);
  3875  0002F8  0E17               	movlw	23
  3876  0002FA  6E39               	movwf	drawtext@y,c
  3877  0002FC  0EE7               	movlw	low _tempF
  3878  0002FE  6E3A               	movwf	drawtext@_text,c
  3879  000300  0E00               	movlw	high _tempF
  3880  000302  6E3B               	movwf	drawtext@_text+1,c
  3881  000304  0EFF               	movlw	255
  3882  000306  6E3D               	movwf	drawtext@color+1,c
  3883  000308  0EE0               	movlw	224
  3884  00030A  6E3C               	movwf	drawtext@color,c
  3885  00030C  0E00               	movlw	0
  3886  00030E  6E3F               	movwf	drawtext@bg+1,c
  3887  000310  0E00               	movlw	0
  3888  000312  6E3E               	movwf	drawtext@bg,c
  3889  000314  0E02               	movlw	2
  3890  000316  6E40               	movwf	drawtext@size,c
  3891  000318  0E46               	movlw	70
  3892  00031A  ECDA  F007         	call	_drawtext
  3893                           
  3894                           ;Main_Screen.c: 133: drawtext(15 , 52 , time , 0x07FF , 0x0000 , 2);
  3895  00031E  0E34               	movlw	52
  3896  000320  6E39               	movwf	drawtext@y,c
  3897  000322  0ECD               	movlw	low _time
  3898  000324  6E3A               	movwf	drawtext@_text,c
  3899  000326  0E00               	movlw	high _time
  3900  000328  6E3B               	movwf	drawtext@_text+1,c
  3901  00032A  0E07               	movlw	7
  3902  00032C  6E3D               	movwf	drawtext@color+1,c
  3903  00032E  683C               	setf	drawtext@color,c
  3904  000330  0E00               	movlw	0
  3905  000332  6E3F               	movwf	drawtext@bg+1,c
  3906  000334  0E00               	movlw	0
  3907  000336  6E3E               	movwf	drawtext@bg,c
  3908  000338  0E02               	movlw	2
  3909  00033A  6E40               	movwf	drawtext@size,c
  3910  00033C  0E0F               	movlw	15
  3911  00033E  ECDA  F007         	call	_drawtext
  3912                           
  3913                           ;Main_Screen.c: 134: drawtext(15 , 82 , date , 0x07E0 , 0x0000 , 2);
  3914  000342  0E52               	movlw	82
  3915  000344  6E39               	movwf	drawtext@y,c
  3916  000346  0EC4               	movlw	low _date
  3917  000348  6E3A               	movwf	drawtext@_text,c
  3918  00034A  0E00               	movlw	high _date
  3919  00034C  6E3B               	movwf	drawtext@_text+1,c
  3920  00034E  0E07               	movlw	7
  3921  000350  6E3D               	movwf	drawtext@color+1,c
  3922  000352  0EE0               	movlw	224
  3923  000354  6E3C               	movwf	drawtext@color,c
  3924  000356  0E00               	movlw	0
  3925  000358  6E3F               	movwf	drawtext@bg+1,c
  3926  00035A  0E00               	movlw	0
  3927  00035C  6E3E               	movwf	drawtext@bg,c
  3928  00035E  0E02               	movlw	2
  3929  000360  6E40               	movwf	drawtext@size,c
  3930  000362  0E0F               	movlw	15
  3931  000364  ECDA  F007         	call	_drawtext
  3932                           
  3933                           ;Main_Screen.c: 136: drawtext(95, 130, Fan_SW_Txt, 0xF800 , 0x0000 , 1);
  3934  000368  0E82               	movlw	130
  3935  00036A  6E39               	movwf	drawtext@y,c
  3936  00036C  0EDF               	movlw	low _Fan_SW_Txt
  3937  00036E  6E3A               	movwf	drawtext@_text,c
  3938  000370  0E00               	movlw	high _Fan_SW_Txt
  3939  000372  6E3B               	movwf	drawtext@_text+1,c
  3940  000374  0EF8               	movlw	248
  3941  000376  6E3D               	movwf	drawtext@color+1,c
  3942  000378  0E00               	movlw	0
  3943  00037A  6E3C               	movwf	drawtext@color,c
  3944  00037C  0E00               	movlw	0
  3945  00037E  6E3F               	movwf	drawtext@bg+1,c
  3946  000380  0E00               	movlw	0
  3947  000382  6E3E               	movwf	drawtext@bg,c
  3948  000384  0E01               	movlw	1
  3949  000386  6E40               	movwf	drawtext@size,c
  3950  000388  0E5F               	movlw	95
  3951  00038A  ECDA  F007         	call	_drawtext
  3952                           
  3953                           ;Main_Screen.c: 137: drawtext(10, 150, DC_Txt, 0x07E0, 0x0000, 1);
  3954  00038E  0E96               	movlw	150
  3955  000390  6E39               	movwf	drawtext@y,c
  3956  000392  0EDB               	movlw	low _DC_Txt
  3957  000394  6E3A               	movwf	drawtext@_text,c
  3958  000396  0E00               	movlw	high _DC_Txt
  3959  000398  6E3B               	movwf	drawtext@_text+1,c
  3960  00039A  0E07               	movlw	7
  3961  00039C  6E3D               	movwf	drawtext@color+1,c
  3962  00039E  0EE0               	movlw	224
  3963  0003A0  6E3C               	movwf	drawtext@color,c
  3964  0003A2  0E00               	movlw	0
  3965  0003A4  6E3F               	movwf	drawtext@bg+1,c
  3966  0003A6  0E00               	movlw	0
  3967  0003A8  6E3E               	movwf	drawtext@bg,c
  3968  0003AA  0E01               	movlw	1
  3969  0003AC  6E40               	movwf	drawtext@size,c
  3970  0003AE  0E0A               	movlw	10
  3971  0003B0  ECDA  F007         	call	_drawtext
  3972                           
  3973                           ;Main_Screen.c: 138: drawtext(93, 150, RPM_Txt, 0x07E0, 0x0000, 1);
  3974  0003B4  0E96               	movlw	150
  3975  0003B6  6E39               	movwf	drawtext@y,c
  3976  0003B8  0ED6               	movlw	low _RPM_Txt
  3977  0003BA  6E3A               	movwf	drawtext@_text,c
  3978  0003BC  0E00               	movlw	high _RPM_Txt
  3979  0003BE  6E3B               	movwf	drawtext@_text+1,c
  3980  0003C0  0E07               	movlw	7
  3981  0003C2  6E3D               	movwf	drawtext@color+1,c
  3982  0003C4  0EE0               	movlw	224
  3983  0003C6  6E3C               	movwf	drawtext@color,c
  3984  0003C8  0E00               	movlw	0
  3985  0003CA  6E3F               	movwf	drawtext@bg+1,c
  3986  0003CC  0E00               	movlw	0
  3987  0003CE  6E3E               	movwf	drawtext@bg,c
  3988  0003D0  0E01               	movlw	1
  3989  0003D2  6E40               	movwf	drawtext@size,c
  3990  0003D4  0E5D               	movlw	93
  3991  0003D6  ECDA  F007         	call	_drawtext
  3992  0003DA  0012               	return		;funcret
  3993  0003DC                     __end_of_Update_Screen:
  3994                           	opt stack 0
  3995                           tblptru	equ	0xFF8
  3996                           tblptrh	equ	0xFF7
  3997                           tblptrl	equ	0xFF6
  3998                           tablat	equ	0xFF5
  3999                           prodh	equ	0xFF4
  4000                           prodl	equ	0xFF3
  4001                           intcon	equ	0xFF2
  4002                           intcon2	equ	0xFF1
  4003                           postinc0	equ	0xFEE
  4004                           wreg	equ	0xFE8
  4005                           postdec1	equ	0xFE5
  4006                           fsr1l	equ	0xFE1
  4007                           postinc2	equ	0xFDE
  4008                           postdec2	equ	0xFDD
  4009                           fsr2h	equ	0xFDA
  4010                           fsr2l	equ	0xFD9
  4011                           status	equ	0xFD8
  4012                           
  4013 ;; *************** function ___awmod *****************
  4014 ;; Defined at:
  4015 ;;		line 8 in file "E:\XC8\sources\common\awmod.c"
  4016 ;; Parameters:    Size  Location     Type
  4017 ;;  dividend        2   30[COMRAM] int 
  4018 ;;  divisor         2   32[COMRAM] int 
  4019 ;; Auto vars:     Size  Location     Type
  4020 ;;  sign            1   35[COMRAM] unsigned char 
  4021 ;;  counter         1   34[COMRAM] unsigned char 
  4022 ;; Return value:  Size  Location     Type
  4023 ;;                  2   30[COMRAM] int 
  4024 ;; Registers used:
  4025 ;;		wreg, status,2, status,0
  4026 ;; Tracked objects:
  4027 ;;		On entry : 0/0
  4028 ;;		On exit  : 0/0
  4029 ;;		Unchanged: 0/0
  4030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4031 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4032 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4033 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4034 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4035 ;;Total ram usage:        6 bytes
  4036 ;; Hardware stack levels used:    1
  4037 ;; Hardware stack levels required when called:    3
  4038 ;; This function calls:
  4039 ;;		Nothing
  4040 ;; This function is called by:
  4041 ;;		_Update_Screen
  4042 ;; This function uses a non-reentrant model
  4043 ;;
  4044                           
  4045                           	psect	text8
  4046  00190E                     __ptext8:
  4047                           	opt stack 0
  4048  00190E                     ___awmod:
  4049                           	opt stack 26
  4050                           
  4051                           ;incstack = 0
  4052  00190E  0E00               	movlw	0
  4053  001910  6E24               	movwf	___awmod@sign,c
  4054  001912  AE20               	btfss	___awmod@dividend+1,7,c
  4055  001914  D007               	goto	l6101
  4056  001916  6C1F               	negf	___awmod@dividend,c
  4057  001918  1E20               	comf	___awmod@dividend+1,f,c
  4058  00191A  B0D8               	btfsc	status,0,c
  4059  00191C  2A20               	incf	___awmod@dividend+1,f,c
  4060  00191E  0E01               	movlw	1
  4061  001920  6E24               	movwf	___awmod@sign,c
  4062  001922  D000               	goto	l6101
  4063  001924                     l6101:
  4064  001924  AE22               	btfss	___awmod@divisor+1,7,c
  4065  001926  D005               	goto	l6105
  4066  001928  6C21               	negf	___awmod@divisor,c
  4067  00192A  1E22               	comf	___awmod@divisor+1,f,c
  4068  00192C  B0D8               	btfsc	status,0,c
  4069  00192E  2A22               	incf	___awmod@divisor+1,f,c
  4070  001930  D000               	goto	l6105
  4071  001932                     l6105:
  4072  001932  5021               	movf	___awmod@divisor,w,c
  4073  001934  1022               	iorwf	___awmod@divisor+1,w,c
  4074  001936  B4D8               	btfsc	status,2,c
  4075  001938  D01D               	goto	l6121
  4076  00193A  0E01               	movlw	1
  4077  00193C  6E23               	movwf	___awmod@counter,c
  4078  00193E  D005               	goto	l6111
  4079  001940                     l6109:
  4080  001940  90D8               	bcf	status,0,c
  4081  001942  3621               	rlcf	___awmod@divisor,f,c
  4082  001944  3622               	rlcf	___awmod@divisor+1,f,c
  4083  001946  2A23               	incf	___awmod@counter,f,c
  4084  001948  D000               	goto	l6111
  4085  00194A                     l6111:
  4086  00194A  BE22               	btfsc	___awmod@divisor+1,7,c
  4087  00194C  D002               	goto	l6113
  4088  00194E  D7F8               	goto	l6109
  4089  001950  D000               	goto	l6113
  4090  001952                     l6113:
  4091  001952  5021               	movf	___awmod@divisor,w,c
  4092  001954  5C1F               	subwf	___awmod@dividend,w,c
  4093  001956  5022               	movf	___awmod@divisor+1,w,c
  4094  001958  5820               	subwfb	___awmod@dividend+1,w,c
  4095  00195A  A0D8               	btfss	status,0,c
  4096  00195C  D005               	goto	l6117
  4097  00195E  5021               	movf	___awmod@divisor,w,c
  4098  001960  5E1F               	subwf	___awmod@dividend,f,c
  4099  001962  5022               	movf	___awmod@divisor+1,w,c
  4100  001964  5A20               	subwfb	___awmod@dividend+1,f,c
  4101  001966  D000               	goto	l6117
  4102  001968                     l6117:
  4103  001968  90D8               	bcf	status,0,c
  4104  00196A  3222               	rrcf	___awmod@divisor+1,f,c
  4105  00196C  3221               	rrcf	___awmod@divisor,f,c
  4106  00196E  2E23               	decfsz	___awmod@counter,f,c
  4107  001970  D7F0               	goto	l6113
  4108  001972  D000               	goto	l6121
  4109  001974                     l6121:
  4110  001974  5024               	movf	___awmod@sign,w,c
  4111  001976  B4D8               	btfsc	status,2,c
  4112  001978  D005               	goto	l6125
  4113  00197A  6C1F               	negf	___awmod@dividend,c
  4114  00197C  1E20               	comf	___awmod@dividend+1,f,c
  4115  00197E  B0D8               	btfsc	status,0,c
  4116  001980  2A20               	incf	___awmod@dividend+1,f,c
  4117  001982  D000               	goto	l6125
  4118  001984                     l6125:
  4119  001984  C01F  F01F         	movff	___awmod@dividend,?___awmod
  4120  001988  C020  F020         	movff	___awmod@dividend+1,?___awmod+1
  4121  00198C  D000               	goto	l1081
  4122  00198E                     l1081:
  4123  00198E  0012               	return		;funcret
  4124  001990                     __end_of___awmod:
  4125                           	opt stack 0
  4126                           tblptru	equ	0xFF8
  4127                           tblptrh	equ	0xFF7
  4128                           tblptrl	equ	0xFF6
  4129                           tablat	equ	0xFF5
  4130                           prodh	equ	0xFF4
  4131                           prodl	equ	0xFF3
  4132                           intcon	equ	0xFF2
  4133                           intcon2	equ	0xFF1
  4134                           postinc0	equ	0xFEE
  4135                           wreg	equ	0xFE8
  4136                           postdec1	equ	0xFE5
  4137                           fsr1l	equ	0xFE1
  4138                           postinc2	equ	0xFDE
  4139                           postdec2	equ	0xFDD
  4140                           fsr2h	equ	0xFDA
  4141                           fsr2l	equ	0xFD9
  4142                           status	equ	0xFD8
  4143                           
  4144 ;; *************** function ___awdiv *****************
  4145 ;; Defined at:
  4146 ;;		line 8 in file "E:\XC8\sources\common\awdiv.c"
  4147 ;; Parameters:    Size  Location     Type
  4148 ;;  dividend        2   22[COMRAM] int 
  4149 ;;  divisor         2   24[COMRAM] int 
  4150 ;; Auto vars:     Size  Location     Type
  4151 ;;  quotient        2   28[COMRAM] int 
  4152 ;;  sign            1   27[COMRAM] unsigned char 
  4153 ;;  counter         1   26[COMRAM] unsigned char 
  4154 ;; Return value:  Size  Location     Type
  4155 ;;                  2   22[COMRAM] int 
  4156 ;; Registers used:
  4157 ;;		wreg, status,2, status,0
  4158 ;; Tracked objects:
  4159 ;;		On entry : 0/0
  4160 ;;		On exit  : 0/0
  4161 ;;		Unchanged: 0/0
  4162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4163 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4164 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4165 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4166 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4167 ;;Total ram usage:        8 bytes
  4168 ;; Hardware stack levels used:    1
  4169 ;; Hardware stack levels required when called:    3
  4170 ;; This function calls:
  4171 ;;		Nothing
  4172 ;; This function is called by:
  4173 ;;		_main
  4174 ;;		_get_RPM
  4175 ;;		_Update_Screen
  4176 ;; This function uses a non-reentrant model
  4177 ;;
  4178                           
  4179                           	psect	text9
  4180  0017F0                     __ptext9:
  4181                           	opt stack 0
  4182  0017F0                     ___awdiv:
  4183                           	opt stack 26
  4184                           
  4185                           ;incstack = 0
  4186  0017F0  0E00               	movlw	0
  4187  0017F2  6E1C               	movwf	___awdiv@sign,c
  4188  0017F4  AE1A               	btfss	___awdiv@divisor+1,7,c
  4189  0017F6  D007               	goto	l6057
  4190  0017F8  6C19               	negf	___awdiv@divisor,c
  4191  0017FA  1E1A               	comf	___awdiv@divisor+1,f,c
  4192  0017FC  B0D8               	btfsc	status,0,c
  4193  0017FE  2A1A               	incf	___awdiv@divisor+1,f,c
  4194  001800  0E01               	movlw	1
  4195  001802  6E1C               	movwf	___awdiv@sign,c
  4196  001804  D000               	goto	l6057
  4197  001806                     l6057:
  4198  001806  AE18               	btfss	___awdiv@dividend+1,7,c
  4199  001808  D007               	goto	l6063
  4200  00180A  6C17               	negf	___awdiv@dividend,c
  4201  00180C  1E18               	comf	___awdiv@dividend+1,f,c
  4202  00180E  B0D8               	btfsc	status,0,c
  4203  001810  2A18               	incf	___awdiv@dividend+1,f,c
  4204  001812  0E01               	movlw	1
  4205  001814  1A1C               	xorwf	___awdiv@sign,f,c
  4206  001816  D000               	goto	l6063
  4207  001818                     l6063:
  4208  001818  0E00               	movlw	0
  4209  00181A  6E1E               	movwf	___awdiv@quotient+1,c
  4210  00181C  0E00               	movlw	0
  4211  00181E  6E1D               	movwf	___awdiv@quotient,c
  4212  001820  5019               	movf	___awdiv@divisor,w,c
  4213  001822  101A               	iorwf	___awdiv@divisor+1,w,c
  4214  001824  B4D8               	btfsc	status,2,c
  4215  001826  D021               	goto	l6085
  4216  001828  0E01               	movlw	1
  4217  00182A  6E1B               	movwf	___awdiv@counter,c
  4218  00182C  D005               	goto	l6071
  4219  00182E                     l6069:
  4220  00182E  90D8               	bcf	status,0,c
  4221  001830  3619               	rlcf	___awdiv@divisor,f,c
  4222  001832  361A               	rlcf	___awdiv@divisor+1,f,c
  4223  001834  2A1B               	incf	___awdiv@counter,f,c
  4224  001836  D000               	goto	l6071
  4225  001838                     l6071:
  4226  001838  BE1A               	btfsc	___awdiv@divisor+1,7,c
  4227  00183A  D002               	goto	l6073
  4228  00183C  D7F8               	goto	l6069
  4229  00183E  D000               	goto	l6073
  4230  001840                     l6073:
  4231  001840  90D8               	bcf	status,0,c
  4232  001842  361D               	rlcf	___awdiv@quotient,f,c
  4233  001844  361E               	rlcf	___awdiv@quotient+1,f,c
  4234  001846  5019               	movf	___awdiv@divisor,w,c
  4235  001848  5C17               	subwf	___awdiv@dividend,w,c
  4236  00184A  501A               	movf	___awdiv@divisor+1,w,c
  4237  00184C  5818               	subwfb	___awdiv@dividend+1,w,c
  4238  00184E  A0D8               	btfss	status,0,c
  4239  001850  D006               	goto	l6081
  4240  001852  5019               	movf	___awdiv@divisor,w,c
  4241  001854  5E17               	subwf	___awdiv@dividend,f,c
  4242  001856  501A               	movf	___awdiv@divisor+1,w,c
  4243  001858  5A18               	subwfb	___awdiv@dividend+1,f,c
  4244  00185A  801D               	bsf	___awdiv@quotient,0,c
  4245  00185C  D000               	goto	l6081
  4246  00185E                     l6081:
  4247  00185E  90D8               	bcf	status,0,c
  4248  001860  321A               	rrcf	___awdiv@divisor+1,f,c
  4249  001862  3219               	rrcf	___awdiv@divisor,f,c
  4250  001864  2E1B               	decfsz	___awdiv@counter,f,c
  4251  001866  D7EC               	goto	l6073
  4252  001868  D000               	goto	l6085
  4253  00186A                     l6085:
  4254  00186A  501C               	movf	___awdiv@sign,w,c
  4255  00186C  B4D8               	btfsc	status,2,c
  4256  00186E  D005               	goto	l6089
  4257  001870  6C1D               	negf	___awdiv@quotient,c
  4258  001872  1E1E               	comf	___awdiv@quotient+1,f,c
  4259  001874  B0D8               	btfsc	status,0,c
  4260  001876  2A1E               	incf	___awdiv@quotient+1,f,c
  4261  001878  D000               	goto	l6089
  4262  00187A                     l6089:
  4263  00187A  C01D  F017         	movff	___awdiv@quotient,?___awdiv
  4264  00187E  C01E  F018         	movff	___awdiv@quotient+1,?___awdiv+1
  4265  001882  D000               	goto	l1068
  4266  001884                     l1068:
  4267  001884  0012               	return		;funcret
  4268  001886                     __end_of___awdiv:
  4269                           	opt stack 0
  4270                           tblptru	equ	0xFF8
  4271                           tblptrh	equ	0xFF7
  4272                           tblptrl	equ	0xFF6
  4273                           tablat	equ	0xFF5
  4274                           prodh	equ	0xFF4
  4275                           prodl	equ	0xFF3
  4276                           intcon	equ	0xFF2
  4277                           intcon2	equ	0xFF1
  4278                           postinc0	equ	0xFEE
  4279                           wreg	equ	0xFE8
  4280                           postdec1	equ	0xFE5
  4281                           fsr1l	equ	0xFE1
  4282                           postinc2	equ	0xFDE
  4283                           postdec2	equ	0xFDD
  4284                           fsr2h	equ	0xFDA
  4285                           fsr2l	equ	0xFD9
  4286                           status	equ	0xFD8
  4287                           
  4288 ;; *************** function _Turn_On_Fan *****************
  4289 ;; Defined at:
  4290 ;;		line 43 in file "Fan_Support.c"
  4291 ;; Parameters:    Size  Location     Type
  4292 ;;		None
  4293 ;; Auto vars:     Size  Location     Type
  4294 ;;		None
  4295 ;; Return value:  Size  Location     Type
  4296 ;;		None               void
  4297 ;; Registers used:
  4298 ;;		wreg, status,2, status,0, cstack
  4299 ;; Tracked objects:
  4300 ;;		On entry : 0/0
  4301 ;;		On exit  : 0/0
  4302 ;;		Unchanged: 0/0
  4303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4305 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4306 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4307 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4308 ;;Total ram usage:        0 bytes
  4309 ;; Hardware stack levels used:    1
  4310 ;; Hardware stack levels required when called:    6
  4311 ;; This function calls:
  4312 ;;		_do_update_pwm
  4313 ;; This function is called by:
  4314 ;;		_main
  4315 ;;		_Toggle_Fan
  4316 ;; This function uses a non-reentrant model
  4317 ;;
  4318                           
  4319                           	psect	text10
  4320  0021B0                     __ptext10:
  4321                           	opt stack 0
  4322  0021B0                     _Turn_On_Fan:
  4323                           	opt stack 24
  4324                           
  4325                           ;Fan_Support.c: 46: FAN=1;
  4326                           
  4327                           ;incstack = 0
  4328  0021B0  0E01               	movlw	1
  4329  0021B2  6E50               	movwf	_FAN,c
  4330                           
  4331                           ;Fan_Support.c: 47: do_update_pwm(duty_cycle);
  4332  0021B4  505C               	movf	_duty_cycle,w,c
  4333  0021B6  EC97  F00B         	call	_do_update_pwm
  4334                           
  4335                           ;Fan_Support.c: 48: PORTAbits.RA5=1;
  4336  0021BA  8A80               	bsf	3968,5,c	;volatile
  4337                           
  4338                           ;Fan_Support.c: 49: PORTEbits.RE2=1;
  4339  0021BC  8484               	bsf	3972,2,c	;volatile
  4340  0021BE  0012               	return		;funcret
  4341  0021C0                     __end_of_Turn_On_Fan:
  4342                           	opt stack 0
  4343                           tblptru	equ	0xFF8
  4344                           tblptrh	equ	0xFF7
  4345                           tblptrl	equ	0xFF6
  4346                           tablat	equ	0xFF5
  4347                           prodh	equ	0xFF4
  4348                           prodl	equ	0xFF3
  4349                           intcon	equ	0xFF2
  4350                           intcon2	equ	0xFF1
  4351                           postinc0	equ	0xFEE
  4352                           wreg	equ	0xFE8
  4353                           postdec1	equ	0xFE5
  4354                           fsr1l	equ	0xFE1
  4355                           postinc2	equ	0xFDE
  4356                           postdec2	equ	0xFDD
  4357                           fsr2h	equ	0xFDA
  4358                           fsr2l	equ	0xFD9
  4359                           status	equ	0xFD8
  4360                           
  4361 ;; *************** function _Initialize_Screen *****************
  4362 ;; Defined at:
  4363 ;;		line 34 in file "Main_Screen.c"
  4364 ;; Parameters:    Size  Location     Type
  4365 ;;		None
  4366 ;; Auto vars:     Size  Location     Type
  4367 ;;		None
  4368 ;; Return value:  Size  Location     Type
  4369 ;;		None               void
  4370 ;; Registers used:
  4371 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4372 ;; Tracked objects:
  4373 ;;		On entry : 0/0
  4374 ;;		On exit  : 0/0
  4375 ;;		Unchanged: 0/0
  4376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4377 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4378 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4379 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4380 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4381 ;;Total ram usage:        0 bytes
  4382 ;; Hardware stack levels used:    1
  4383 ;; Hardware stack levels required when called:   10
  4384 ;; This function calls:
  4385 ;;		_LCD_Reset
  4386 ;;		_TFT_GreenTab_Initialize
  4387 ;;		_drawCircle
  4388 ;;		_drawtext
  4389 ;;		_fillScreen
  4390 ;;		_strcpy
  4391 ;; This function is called by:
  4392 ;;		_main
  4393 ;; This function uses a non-reentrant model
  4394 ;;
  4395                           
  4396                           	psect	text11
  4397  000736                     __ptext11:
  4398                           	opt stack 0
  4399  000736                     _Initialize_Screen:
  4400                           	opt stack 20
  4401                           
  4402                           ;Main_Screen.c: 36: LCD_Reset();
  4403                           
  4404                           ;incstack = 0
  4405  000736  ECAB  F010         	call	_LCD_Reset	;wreg free
  4406                           
  4407                           ;Main_Screen.c: 37: TFT_GreenTab_Initialize();
  4408  00073A  ECDD  F00F         	call	_TFT_GreenTab_Initialize	;wreg free
  4409                           
  4410                           ;Main_Screen.c: 38: fillScreen(0x0000);
  4411  00073E  0E00               	movlw	0
  4412  000740  6E25               	movwf	fillScreen@color+1,c
  4413  000742  0E00               	movlw	0
  4414  000744  6E24               	movwf	fillScreen@color,c
  4415  000746  EC5A  F010         	call	_fillScreen	;wreg free
  4416                           
  4417                           ;Main_Screen.c: 39: txt = buffer;
  4418  00074A  0E00               	movlw	low _buffer
  4419  00074C  6E4E               	movwf	_txt,c
  4420  00074E  0E01               	movlw	high _buffer
  4421  000750  6E4F               	movwf	_txt+1,c
  4422                           
  4423                           ;Main_Screen.c: 40: strcpy(txt, "ECE3301L Spring 21-S1");
  4424  000752  C04E  F011         	movff	_txt,strcpy@to
  4425  000756  C04F  F012         	movff	_txt+1,strcpy@to+1
  4426  00075A  0E4A               	movlw	low STR_7
  4427  00075C  6E13               	movwf	strcpy@from,c
  4428  00075E  0EFF               	movlw	high STR_7
  4429  000760  6E14               	movwf	strcpy@from+1,c
  4430  000762  EC93  F00F         	call	_strcpy	;wreg free
  4431                           
  4432                           ;Main_Screen.c: 42: drawtext(1 , 1, txt, 0xFFFF , 0x0000, 1);
  4433  000766  0E01               	movlw	1
  4434  000768  6E39               	movwf	drawtext@y,c
  4435  00076A  C04E  F03A         	movff	_txt,drawtext@_text
  4436  00076E  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  4437  000772  0EFF               	movlw	255
  4438  000774  6E3D               	movwf	drawtext@color+1,c
  4439  000776  683C               	setf	drawtext@color,c
  4440  000778  0E00               	movlw	0
  4441  00077A  6E3F               	movwf	drawtext@bg+1,c
  4442  00077C  0E00               	movlw	0
  4443  00077E  6E3E               	movwf	drawtext@bg,c
  4444  000780  0E01               	movlw	1
  4445  000782  6E40               	movwf	drawtext@size,c
  4446  000784  0E01               	movlw	1
  4447  000786  ECDA  F007         	call	_drawtext
  4448                           
  4449                           ;Main_Screen.c: 44: strcpy(txt, "Temperature:");
  4450  00078A  C04E  F011         	movff	_txt,strcpy@to
  4451  00078E  C04F  F012         	movff	_txt+1,strcpy@to+1
  4452  000792  0ECF               	movlw	low STR_8
  4453  000794  6E13               	movwf	strcpy@from,c
  4454  000796  0EFF               	movlw	high STR_8
  4455  000798  6E14               	movwf	strcpy@from+1,c
  4456  00079A  EC93  F00F         	call	_strcpy	;wreg free
  4457                           
  4458                           ;Main_Screen.c: 45: drawtext(24 , 11 , txt, 0xF81F, 0x0000, 1);
  4459  00079E  0E0B               	movlw	11
  4460  0007A0  6E39               	movwf	drawtext@y,c
  4461  0007A2  C04E  F03A         	movff	_txt,drawtext@_text
  4462  0007A6  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  4463  0007AA  0EF8               	movlw	248
  4464  0007AC  6E3D               	movwf	drawtext@color+1,c
  4465  0007AE  0E1F               	movlw	31
  4466  0007B0  6E3C               	movwf	drawtext@color,c
  4467  0007B2  0E00               	movlw	0
  4468  0007B4  6E3F               	movwf	drawtext@bg+1,c
  4469  0007B6  0E00               	movlw	0
  4470  0007B8  6E3E               	movwf	drawtext@bg,c
  4471  0007BA  0E01               	movlw	1
  4472  0007BC  6E40               	movwf	drawtext@size,c
  4473  0007BE  0E18               	movlw	24
  4474  0007C0  ECDA  F007         	call	_drawtext
  4475                           
  4476                           ;Main_Screen.c: 46: drawCircle(40, 23 , 2 , 0xFFE0);
  4477  0007C4  0E00               	movlw	0
  4478  0007C6  6E1D               	movwf	drawCircle@x0+1,c
  4479  0007C8  0E28               	movlw	40
  4480  0007CA  6E1C               	movwf	drawCircle@x0,c
  4481  0007CC  0E00               	movlw	0
  4482  0007CE  6E1F               	movwf	drawCircle@y0+1,c
  4483  0007D0  0E17               	movlw	23
  4484  0007D2  6E1E               	movwf	drawCircle@y0,c
  4485  0007D4  0E00               	movlw	0
  4486  0007D6  6E21               	movwf	drawCircle@r+1,c
  4487  0007D8  0E02               	movlw	2
  4488  0007DA  6E20               	movwf	drawCircle@r,c
  4489  0007DC  0EFF               	movlw	255
  4490  0007DE  6E23               	movwf	drawCircle@color+1,c
  4491  0007E0  0EE0               	movlw	224
  4492  0007E2  6E22               	movwf	drawCircle@color,c
  4493  0007E4  ECD0  F004         	call	_drawCircle	;wreg free
  4494                           
  4495                           ;Main_Screen.c: 47: strcpy(txt, "C/");
  4496  0007E8  C04E  F011         	movff	_txt,strcpy@to
  4497  0007EC  C04F  F012         	movff	_txt+1,strcpy@to+1
  4498  0007F0  0EF8               	movlw	low STR_9
  4499  0007F2  6E13               	movwf	strcpy@from,c
  4500  0007F4  0EFF               	movlw	high STR_9
  4501  0007F6  6E14               	movwf	strcpy@from+1,c
  4502  0007F8  EC93  F00F         	call	_strcpy	;wreg free
  4503                           
  4504                           ;Main_Screen.c: 48: drawtext(45 , 23, txt, 0xFFE0 , 0x0000, 2);
  4505  0007FC  0E17               	movlw	23
  4506  0007FE  6E39               	movwf	drawtext@y,c
  4507  000800  C04E  F03A         	movff	_txt,drawtext@_text
  4508  000804  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  4509  000808  0EFF               	movlw	255
  4510  00080A  6E3D               	movwf	drawtext@color+1,c
  4511  00080C  0EE0               	movlw	224
  4512  00080E  6E3C               	movwf	drawtext@color,c
  4513  000810  0E00               	movlw	0
  4514  000812  6E3F               	movwf	drawtext@bg+1,c
  4515  000814  0E00               	movlw	0
  4516  000816  6E3E               	movwf	drawtext@bg,c
  4517  000818  0E02               	movlw	2
  4518  00081A  6E40               	movwf	drawtext@size,c
  4519  00081C  0E2D               	movlw	45
  4520  00081E  ECDA  F007         	call	_drawtext
  4521                           
  4522                           ;Main_Screen.c: 49: strcpy(txt, "F");
  4523  000822  C04E  F011         	movff	_txt,strcpy@to
  4524  000826  C04F  F012         	movff	_txt+1,strcpy@to+1
  4525  00082A  0EF2               	movlw	low (STR_17+2)
  4526  00082C  6E13               	movwf	strcpy@from,c
  4527  00082E  0EFF               	movlw	high (STR_17+2)
  4528  000830  6E14               	movwf	strcpy@from+1,c
  4529  000832  EC93  F00F         	call	_strcpy	;wreg free
  4530                           
  4531                           ;Main_Screen.c: 50: drawCircle(110, 23 , 2 , 0xFFE0);
  4532  000836  0E00               	movlw	0
  4533  000838  6E1D               	movwf	drawCircle@x0+1,c
  4534  00083A  0E6E               	movlw	110
  4535  00083C  6E1C               	movwf	drawCircle@x0,c
  4536  00083E  0E00               	movlw	0
  4537  000840  6E1F               	movwf	drawCircle@y0+1,c
  4538  000842  0E17               	movlw	23
  4539  000844  6E1E               	movwf	drawCircle@y0,c
  4540  000846  0E00               	movlw	0
  4541  000848  6E21               	movwf	drawCircle@r+1,c
  4542  00084A  0E02               	movlw	2
  4543  00084C  6E20               	movwf	drawCircle@r,c
  4544  00084E  0EFF               	movlw	255
  4545  000850  6E23               	movwf	drawCircle@color+1,c
  4546  000852  0EE0               	movlw	224
  4547  000854  6E22               	movwf	drawCircle@color,c
  4548  000856  ECD0  F004         	call	_drawCircle	;wreg free
  4549                           
  4550                           ;Main_Screen.c: 51: drawtext(115 , 23, txt, 0xFFE0 , 0x0000, 2);
  4551  00085A  0E17               	movlw	23
  4552  00085C  6E39               	movwf	drawtext@y,c
  4553  00085E  C04E  F03A         	movff	_txt,drawtext@_text
  4554  000862  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  4555  000866  0EFF               	movlw	255
  4556  000868  6E3D               	movwf	drawtext@color+1,c
  4557  00086A  0EE0               	movlw	224
  4558  00086C  6E3C               	movwf	drawtext@color,c
  4559  00086E  0E00               	movlw	0
  4560  000870  6E3F               	movwf	drawtext@bg+1,c
  4561  000872  0E00               	movlw	0
  4562  000874  6E3E               	movwf	drawtext@bg,c
  4563  000876  0E02               	movlw	2
  4564  000878  6E40               	movwf	drawtext@size,c
  4565  00087A  0E73               	movlw	115
  4566  00087C  ECDA  F007         	call	_drawtext
  4567                           
  4568                           ;Main_Screen.c: 52: strcpy(txt, "Time");
  4569  000880  C04E  F011         	movff	_txt,strcpy@to
  4570  000884  C04F  F012         	movff	_txt+1,strcpy@to+1
  4571  000888  0EE2               	movlw	low STR_11
  4572  00088A  6E13               	movwf	strcpy@from,c
  4573  00088C  0EFF               	movlw	high STR_11
  4574  00088E  6E14               	movwf	strcpy@from+1,c
  4575  000890  EC93  F00F         	call	_strcpy	;wreg free
  4576                           
  4577                           ;Main_Screen.c: 53: drawtext(50 , 40 , txt, 0x001F , 0x0000, 1);
  4578  000894  0E28               	movlw	40
  4579  000896  6E39               	movwf	drawtext@y,c
  4580  000898  C04E  F03A         	movff	_txt,drawtext@_text
  4581  00089C  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  4582  0008A0  0E00               	movlw	0
  4583  0008A2  6E3D               	movwf	drawtext@color+1,c
  4584  0008A4  0E1F               	movlw	31
  4585  0008A6  6E3C               	movwf	drawtext@color,c
  4586  0008A8  0E00               	movlw	0
  4587  0008AA  6E3F               	movwf	drawtext@bg+1,c
  4588  0008AC  0E00               	movlw	0
  4589  0008AE  6E3E               	movwf	drawtext@bg,c
  4590  0008B0  0E01               	movlw	1
  4591  0008B2  6E40               	movwf	drawtext@size,c
  4592  0008B4  0E32               	movlw	50
  4593  0008B6  ECDA  F007         	call	_drawtext
  4594                           
  4595                           ;Main_Screen.c: 54: strcpy(txt, "Date");
  4596  0008BA  C04E  F011         	movff	_txt,strcpy@to
  4597  0008BE  C04F  F012         	movff	_txt+1,strcpy@to+1
  4598  0008C2  0EE7               	movlw	low STR_12
  4599  0008C4  6E13               	movwf	strcpy@from,c
  4600  0008C6  0EFF               	movlw	high STR_12
  4601  0008C8  6E14               	movwf	strcpy@from+1,c
  4602  0008CA  EC93  F00F         	call	_strcpy	;wreg free
  4603                           
  4604                           ;Main_Screen.c: 55: drawtext(50 , 71 , txt, 0xF800 , 0x0000, 1);
  4605  0008CE  0E47               	movlw	71
  4606  0008D0  6E39               	movwf	drawtext@y,c
  4607  0008D2  C04E  F03A         	movff	_txt,drawtext@_text
  4608  0008D6  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  4609  0008DA  0EF8               	movlw	248
  4610  0008DC  6E3D               	movwf	drawtext@color+1,c
  4611  0008DE  0E00               	movlw	0
  4612  0008E0  6E3C               	movwf	drawtext@color,c
  4613  0008E2  0E00               	movlw	0
  4614  0008E4  6E3F               	movwf	drawtext@bg+1,c
  4615  0008E6  0E00               	movlw	0
  4616  0008E8  6E3E               	movwf	drawtext@bg,c
  4617  0008EA  0E01               	movlw	1
  4618  0008EC  6E40               	movwf	drawtext@size,c
  4619  0008EE  0E32               	movlw	50
  4620  0008F0  ECDA  F007         	call	_drawtext
  4621                           
  4622                           ;Main_Screen.c: 58: strcpy(txt, "  FAN");
  4623  0008F4  C04E  F011         	movff	_txt,strcpy@to
  4624  0008F8  C04F  F012         	movff	_txt+1,strcpy@to+1
  4625  0008FC  0EDC               	movlw	low STR_13
  4626  0008FE  6E13               	movwf	strcpy@from,c
  4627  000900  0EFF               	movlw	high STR_13
  4628  000902  6E14               	movwf	strcpy@from+1,c
  4629  000904  EC93  F00F         	call	_strcpy	;wreg free
  4630                           
  4631                           ;Main_Screen.c: 59: drawtext(85, 120, txt, 0x001F , 0x0000, 1);
  4632  000908  0E78               	movlw	120
  4633  00090A  6E39               	movwf	drawtext@y,c
  4634  00090C  C04E  F03A         	movff	_txt,drawtext@_text
  4635  000910  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  4636  000914  0E00               	movlw	0
  4637  000916  6E3D               	movwf	drawtext@color+1,c
  4638  000918  0E1F               	movlw	31
  4639  00091A  6E3C               	movwf	drawtext@color,c
  4640  00091C  0E00               	movlw	0
  4641  00091E  6E3F               	movwf	drawtext@bg+1,c
  4642  000920  0E00               	movlw	0
  4643  000922  6E3E               	movwf	drawtext@bg,c
  4644  000924  0E01               	movlw	1
  4645  000926  6E40               	movwf	drawtext@size,c
  4646  000928  0E55               	movlw	85
  4647  00092A  ECDA  F007         	call	_drawtext
  4648                           
  4649                           ;Main_Screen.c: 61: strcpy(txt, "DC");
  4650  00092E  C04E  F011         	movff	_txt,strcpy@to
  4651  000932  C04F  F012         	movff	_txt+1,strcpy@to+1
  4652  000936  0EFB               	movlw	low STR_14
  4653  000938  6E13               	movwf	strcpy@from,c
  4654  00093A  0EFF               	movlw	high STR_14
  4655  00093C  6E14               	movwf	strcpy@from+1,c
  4656  00093E  EC93  F00F         	call	_strcpy	;wreg free
  4657                           
  4658                           ;Main_Screen.c: 62: drawtext(12, 140, txt, 0xFFFF , 0x0000, 1);
  4659  000942  0E8C               	movlw	140
  4660  000944  6E39               	movwf	drawtext@y,c
  4661  000946  C04E  F03A         	movff	_txt,drawtext@_text
  4662  00094A  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  4663  00094E  0EFF               	movlw	255
  4664  000950  6E3D               	movwf	drawtext@color+1,c
  4665  000952  683C               	setf	drawtext@color,c
  4666  000954  0E00               	movlw	0
  4667  000956  6E3F               	movwf	drawtext@bg+1,c
  4668  000958  0E00               	movlw	0
  4669  00095A  6E3E               	movwf	drawtext@bg,c
  4670  00095C  0E01               	movlw	1
  4671  00095E  6E40               	movwf	drawtext@size,c
  4672  000960  0E0C               	movlw	12
  4673  000962  ECDA  F007         	call	_drawtext
  4674                           
  4675                           ;Main_Screen.c: 64: strcpy(txt, "RPM");
  4676  000966  C04E  F011         	movff	_txt,strcpy@to
  4677  00096A  C04F  F012         	movff	_txt+1,strcpy@to+1
  4678  00096E  0EF4               	movlw	low STR_15
  4679  000970  6E13               	movwf	strcpy@from,c
  4680  000972  0EFF               	movlw	high STR_15
  4681  000974  6E14               	movwf	strcpy@from+1,c
  4682  000976  EC93  F00F         	call	_strcpy	;wreg free
  4683                           
  4684                           ;Main_Screen.c: 65: drawtext(95, 140, txt, 0xFFFF , 0x0000 , 1);
  4685  00097A  0E8C               	movlw	140
  4686  00097C  6E39               	movwf	drawtext@y,c
  4687  00097E  C04E  F03A         	movff	_txt,drawtext@_text
  4688  000982  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  4689  000986  0EFF               	movlw	255
  4690  000988  6E3D               	movwf	drawtext@color+1,c
  4691  00098A  683C               	setf	drawtext@color,c
  4692  00098C  0E00               	movlw	0
  4693  00098E  6E3F               	movwf	drawtext@bg+1,c
  4694  000990  0E00               	movlw	0
  4695  000992  6E3E               	movwf	drawtext@bg,c
  4696  000994  0E01               	movlw	1
  4697  000996  6E40               	movwf	drawtext@size,c
  4698  000998  0E5F               	movlw	95
  4699  00099A  ECDA  F007         	call	_drawtext
  4700  00099E  0012               	return		;funcret
  4701  0009A0                     __end_of_Initialize_Screen:
  4702                           	opt stack 0
  4703                           tblptru	equ	0xFF8
  4704                           tblptrh	equ	0xFF7
  4705                           tblptrl	equ	0xFF6
  4706                           tablat	equ	0xFF5
  4707                           prodh	equ	0xFF4
  4708                           prodl	equ	0xFF3
  4709                           intcon	equ	0xFF2
  4710                           intcon2	equ	0xFF1
  4711                           postinc0	equ	0xFEE
  4712                           wreg	equ	0xFE8
  4713                           postdec1	equ	0xFE5
  4714                           fsr1l	equ	0xFE1
  4715                           postinc2	equ	0xFDE
  4716                           postdec2	equ	0xFDD
  4717                           fsr2h	equ	0xFDA
  4718                           fsr2l	equ	0xFD9
  4719                           status	equ	0xFD8
  4720                           
  4721 ;; *************** function _strcpy *****************
  4722 ;; Defined at:
  4723 ;;		line 8 in file "E:\XC8\sources\common\strcpy.c"
  4724 ;; Parameters:    Size  Location     Type
  4725 ;;  to              2   16[COMRAM] PTR unsigned char 
  4726 ;;		 -> NULL(0), Fan_SW_Txt(4), buffer(33), 
  4727 ;;  from            2   18[COMRAM] PTR const unsigned char 
  4728 ;;		 -> STR_17(4), STR_16(4), STR_15(4), STR_14(3), 
  4729 ;;		 -> STR_13(6), STR_12(5), STR_11(5), STR_10(2), 
  4730 ;;		 -> STR_9(3), STR_8(13), STR_7(22), 
  4731 ;; Auto vars:     Size  Location     Type
  4732 ;;  cp              2   20[COMRAM] PTR unsigned char 
  4733 ;;		 -> NULL(0), Fan_SW_Txt(4), buffer(33), 
  4734 ;; Return value:  Size  Location     Type
  4735 ;;                  2   16[COMRAM] PTR unsigned char 
  4736 ;; Registers used:
  4737 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  4738 ;; Tracked objects:
  4739 ;;		On entry : 0/0
  4740 ;;		On exit  : 0/0
  4741 ;;		Unchanged: 0/0
  4742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4743 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4744 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4745 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4746 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4747 ;;Total ram usage:        6 bytes
  4748 ;; Hardware stack levels used:    1
  4749 ;; Hardware stack levels required when called:    3
  4750 ;; This function calls:
  4751 ;;		Nothing
  4752 ;; This function is called by:
  4753 ;;		_Initialize_Screen
  4754 ;;		_Update_Screen
  4755 ;; This function uses a non-reentrant model
  4756 ;;
  4757                           
  4758                           	psect	text12
  4759  001F26                     __ptext12:
  4760                           	opt stack 0
  4761  001F26                     _strcpy:
  4762                           	opt stack 26
  4763                           
  4764                           ;incstack = 0
  4765  001F26  C011  F015         	movff	strcpy@to,strcpy@cp
  4766  001F2A  C012  F016         	movff	strcpy@to+1,strcpy@cp+1
  4767  001F2E  D005               	goto	l6027
  4768  001F30                     l6025:
  4769  001F30  4A15               	infsnz	strcpy@cp,f,c
  4770  001F32  2A16               	incf	strcpy@cp+1,f,c
  4771  001F34  4A13               	infsnz	strcpy@from,f,c
  4772  001F36  2A14               	incf	strcpy@from+1,f,c
  4773  001F38  D000               	goto	l6027
  4774  001F3A                     l6027:
  4775  001F3A  C013  FFF6         	movff	strcpy@from,tblptrl
  4776  001F3E  C014  FFF7         	movff	strcpy@from+1,tblptrh
  4777  001F42                     	if	0	;tblptru may be non-zero
  4778  001F42                     	endif
  4779  001F42                     	if	0	;tblptru may be non-zero
  4780  001F42                     	endif
  4781  001F42  C015  FFD9         	movff	strcpy@cp,fsr2l
  4782  001F46  C016  FFDA         	movff	strcpy@cp+1,fsr2h
  4783  001F4A  0008               	tblrd		*
  4784  001F4C  CFF5 FFDF          	movff	tablat,indf2
  4785  001F50  50DF               	movf	indf2,w,c
  4786  001F52  A4D8               	btfss	status,2,c
  4787  001F54  D7ED               	goto	l6025
  4788                           
  4789                           ;	Return value of _strcpy is never used
  4790  001F56  0012               	return		;funcret
  4791  001F58                     __end_of_strcpy:
  4792                           	opt stack 0
  4793                           tblptru	equ	0xFF8
  4794                           tblptrh	equ	0xFF7
  4795                           tblptrl	equ	0xFF6
  4796                           tablat	equ	0xFF5
  4797                           prodh	equ	0xFF4
  4798                           prodl	equ	0xFF3
  4799                           intcon	equ	0xFF2
  4800                           intcon2	equ	0xFF1
  4801                           postinc0	equ	0xFEE
  4802                           wreg	equ	0xFE8
  4803                           postdec1	equ	0xFE5
  4804                           fsr1l	equ	0xFE1
  4805                           indf2	equ	0xFDF
  4806                           postinc2	equ	0xFDE
  4807                           postdec2	equ	0xFDD
  4808                           fsr2h	equ	0xFDA
  4809                           fsr2l	equ	0xFD9
  4810                           status	equ	0xFD8
  4811                           
  4812 ;; *************** function _fillScreen *****************
  4813 ;; Defined at:
  4814 ;;		line 618 in file "ST7735_TFT.c"
  4815 ;; Parameters:    Size  Location     Type
  4816 ;;  color           2   35[COMRAM] unsigned int 
  4817 ;; Auto vars:     Size  Location     Type
  4818 ;;		None
  4819 ;; Return value:  Size  Location     Type
  4820 ;;		None               void
  4821 ;; Registers used:
  4822 ;;		wreg, status,2, status,0, cstack
  4823 ;; Tracked objects:
  4824 ;;		On entry : 0/0
  4825 ;;		On exit  : 0/0
  4826 ;;		Unchanged: 0/0
  4827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4828 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4829 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4830 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4831 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4832 ;;Total ram usage:        2 bytes
  4833 ;; Hardware stack levels used:    1
  4834 ;; Hardware stack levels required when called:    7
  4835 ;; This function calls:
  4836 ;;		_fillRectangle
  4837 ;; This function is called by:
  4838 ;;		_Initialize_Screen
  4839 ;; This function uses a non-reentrant model
  4840 ;;
  4841                           
  4842                           	psect	text13
  4843  0020B4                     __ptext13:
  4844                           	opt stack 0
  4845  0020B4                     _fillScreen:
  4846                           	opt stack 22
  4847                           
  4848                           ;ST7735_TFT.c: 620: fillRectangle(0, 0, 128, 160, color);
  4849                           
  4850                           ;incstack = 0
  4851  0020B4  0E00               	movlw	0
  4852  0020B6  6E18               	movwf	fillRectangle@y,c
  4853  0020B8  0E80               	movlw	128
  4854  0020BA  6E19               	movwf	fillRectangle@w,c
  4855  0020BC  0EA0               	movlw	160
  4856  0020BE  6E1A               	movwf	fillRectangle@h,c
  4857  0020C0  C024  F01B         	movff	fillScreen@color,fillRectangle@color
  4858  0020C4  C025  F01C         	movff	fillScreen@color+1,fillRectangle@color+1
  4859  0020C8  0E00               	movlw	0
  4860  0020CA  ECC6  F00A         	call	_fillRectangle
  4861  0020CE  0012               	return		;funcret
  4862  0020D0                     __end_of_fillScreen:
  4863                           	opt stack 0
  4864                           tblptru	equ	0xFF8
  4865                           tblptrh	equ	0xFF7
  4866                           tblptrl	equ	0xFF6
  4867                           tablat	equ	0xFF5
  4868                           prodh	equ	0xFF4
  4869                           prodl	equ	0xFF3
  4870                           intcon	equ	0xFF2
  4871                           intcon2	equ	0xFF1
  4872                           postinc0	equ	0xFEE
  4873                           wreg	equ	0xFE8
  4874                           postdec1	equ	0xFE5
  4875                           fsr1l	equ	0xFE1
  4876                           indf2	equ	0xFDF
  4877                           postinc2	equ	0xFDE
  4878                           postdec2	equ	0xFDD
  4879                           fsr2h	equ	0xFDA
  4880                           fsr2l	equ	0xFD9
  4881                           status	equ	0xFD8
  4882                           
  4883 ;; *************** function _fillRectangle *****************
  4884 ;; Defined at:
  4885 ;;		line 502 in file "ST7735_TFT.c"
  4886 ;; Parameters:    Size  Location     Type
  4887 ;;  x               1    wreg     unsigned char 
  4888 ;;  y               1   23[COMRAM] unsigned char 
  4889 ;;  w               1   24[COMRAM] unsigned char 
  4890 ;;  h               1   25[COMRAM] unsigned char 
  4891 ;;  color           2   26[COMRAM] unsigned int 
  4892 ;; Auto vars:     Size  Location     Type
  4893 ;;  x               1   34[COMRAM] unsigned char 
  4894 ;;  lo              1   33[COMRAM] unsigned char 
  4895 ;;  hi              1   32[COMRAM] unsigned char 
  4896 ;; Return value:  Size  Location     Type
  4897 ;;		None               void
  4898 ;; Registers used:
  4899 ;;		wreg, status,2, status,0, cstack
  4900 ;; Tracked objects:
  4901 ;;		On entry : 0/0
  4902 ;;		On exit  : 0/0
  4903 ;;		Unchanged: 0/0
  4904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4905 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4906 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4907 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4908 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4909 ;;Total ram usage:       12 bytes
  4910 ;; Hardware stack levels used:    1
  4911 ;; Hardware stack levels required when called:    6
  4912 ;; This function calls:
  4913 ;;		_setAddrWindow
  4914 ;;		_spiwrite
  4915 ;; This function is called by:
  4916 ;;		_fillScreen
  4917 ;; This function uses a non-reentrant model
  4918 ;;
  4919                           
  4920                           	psect	text14
  4921  00158C                     __ptext14:
  4922                           	opt stack 0
  4923  00158C                     _fillRectangle:
  4924                           	opt stack 22
  4925                           
  4926                           ;incstack = 0
  4927                           ;fillRectangle@x stored from wreg
  4928  00158C  6E23               	movwf	fillRectangle@x,c
  4929                           
  4930                           ;ST7735_TFT.c: 504: unsigned char hi, lo;
  4931                           ;ST7735_TFT.c: 505: if((x >= 128) || (y >= 160))
  4932  00158E  0E80               	movlw	128
  4933  001590  6023               	cpfslt	fillRectangle@x,c
  4934  001592  D069               	goto	l597
  4935  001594  0E9F               	movlw	159
  4936  001596  6418               	cpfsgt	fillRectangle@y,c
  4937  001598  D001               	goto	l5639
  4938                           
  4939                           ;ST7735_TFT.c: 506: return;
  4940  00159A  D065               	goto	l597
  4941  00159C                     l5639:
  4942                           
  4943                           ;ST7735_TFT.c: 507: if((x + w - 1) >= 128)
  4944  00159C  0EFF               	movlw	255
  4945  00159E  6E1D               	movwf	??_fillRectangle& (0+255),c
  4946  0015A0  0EFF               	movlw	255
  4947  0015A2  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  4948  0015A4  5019               	movf	fillRectangle@w,w,c
  4949  0015A6  C023  F01F         	movff	fillRectangle@x,??_fillRectangle+2
  4950  0015AA  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  4951  0015AC  261F               	addwf	??_fillRectangle+2,f,c
  4952  0015AE  0E00               	movlw	0
  4953  0015B0  2220               	addwfc	??_fillRectangle+3,f,c
  4954  0015B2  501D               	movf	??_fillRectangle,w,c
  4955  0015B4  261F               	addwf	??_fillRectangle+2,f,c
  4956  0015B6  501E               	movf	??_fillRectangle+1,w,c
  4957  0015B8  2220               	addwfc	??_fillRectangle+3,f,c
  4958  0015BA  BE20               	btfsc	??_fillRectangle+3,7,c
  4959  0015BC  D00A               	goto	l598
  4960  0015BE  5020               	movf	??_fillRectangle+3,w,c
  4961  0015C0  E104               	bnz	u4230
  4962  0015C2  0E80               	movlw	128
  4963  0015C4  5C1F               	subwf	??_fillRectangle+2,w,c
  4964  0015C6  A0D8               	btfss	status,0,c
  4965  0015C8  D004               	goto	l598
  4966  0015CA                     u4230:
  4967                           
  4968                           ;ST7735_TFT.c: 508: w = 128 - x;
  4969  0015CA  5023               	movf	fillRectangle@x,w,c
  4970  0015CC  0800               	sublw	0
  4971  0015CE  0F80               	addlw	128
  4972  0015D0  6E19               	movwf	fillRectangle@w,c
  4973  0015D2                     l598:
  4974                           
  4975                           ;ST7735_TFT.c: 509: if((y + h - 1) >= 160)
  4976  0015D2  0EFF               	movlw	255
  4977  0015D4  6E1D               	movwf	??_fillRectangle& (0+255),c
  4978  0015D6  0EFF               	movlw	255
  4979  0015D8  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  4980  0015DA  501A               	movf	fillRectangle@h,w,c
  4981  0015DC  C018  F01F         	movff	fillRectangle@y,??_fillRectangle+2
  4982  0015E0  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  4983  0015E2  261F               	addwf	??_fillRectangle+2,f,c
  4984  0015E4  0E00               	movlw	0
  4985  0015E6  2220               	addwfc	??_fillRectangle+3,f,c
  4986  0015E8  501D               	movf	??_fillRectangle,w,c
  4987  0015EA  261F               	addwf	??_fillRectangle+2,f,c
  4988  0015EC  501E               	movf	??_fillRectangle+1,w,c
  4989  0015EE  2220               	addwfc	??_fillRectangle+3,f,c
  4990  0015F0  BE20               	btfsc	??_fillRectangle+3,7,c
  4991  0015F2  D00B               	goto	l5645
  4992  0015F4  5020               	movf	??_fillRectangle+3,w,c
  4993  0015F6  E104               	bnz	u4240
  4994  0015F8  0EA0               	movlw	160
  4995  0015FA  5C1F               	subwf	??_fillRectangle+2,w,c
  4996  0015FC  A0D8               	btfss	status,0,c
  4997  0015FE  D005               	goto	l5645
  4998  001600                     u4240:
  4999                           
  5000                           ;ST7735_TFT.c: 510: h = 160 - y;
  5001  001600  5018               	movf	fillRectangle@y,w,c
  5002  001602  0800               	sublw	0
  5003  001604  0FA0               	addlw	160
  5004  001606  6E1A               	movwf	fillRectangle@h,c
  5005  001608  D000               	goto	l5645
  5006  00160A                     l5645:
  5007                           
  5008                           ;ST7735_TFT.c: 511: setAddrWindow(x, y, x+w-1, y+h-1);
  5009  00160A  C018  F014         	movff	fillRectangle@y,setAddrWindow@y0
  5010  00160E  5023               	movf	fillRectangle@x,w,c
  5011  001610  2419               	addwf	fillRectangle@w,w,c
  5012  001612  6E1D               	movwf	??_fillRectangle& (0+255),c
  5013  001614  041D               	decf	??_fillRectangle,w,c
  5014  001616  6E15               	movwf	setAddrWindow@x1,c
  5015  001618  5018               	movf	fillRectangle@y,w,c
  5016  00161A  241A               	addwf	fillRectangle@h,w,c
  5017  00161C  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  5018  00161E  041E               	decf	??_fillRectangle+1,w,c
  5019  001620  6E16               	movwf	setAddrWindow@y1,c
  5020  001622  5023               	movf	fillRectangle@x,w,c
  5021  001624  EC3D  F00E         	call	_setAddrWindow
  5022                           
  5023                           ;ST7735_TFT.c: 512: hi = color >> 8; lo = color;
  5024  001628  501C               	movf	fillRectangle@color+1,w,c
  5025  00162A  6E21               	movwf	fillRectangle@hi,c
  5026  00162C  C01B  F022         	movff	fillRectangle@color,fillRectangle@lo
  5027                           
  5028                           ;ST7735_TFT.c: 513: PORTDbits.RD0 = 1;
  5029  001630  8083               	bsf	3971,0,c	;volatile
  5030                           
  5031                           ;ST7735_TFT.c: 514: PORTDbits.RD1 = 0;
  5032  001632  9283               	bcf	3971,1,c	;volatile
  5033                           
  5034                           ;ST7735_TFT.c: 516: for(y=h; y>0; y--) {
  5035  001634  C01A  F018         	movff	fillRectangle@h,fillRectangle@y
  5036  001638                     l5657:
  5037  001638  5018               	movf	fillRectangle@y,w,c
  5038  00163A  B4D8               	btfsc	status,2,c
  5039  00163C  D013               	goto	l601
  5040  00163E  D001               	goto	l600
  5041  001640  D011               	goto	l601
  5042  001642                     l600:
  5043                           
  5044                           ;ST7735_TFT.c: 517: for(x = w; x > 0; x--) {
  5045  001642  C019  F023         	movff	fillRectangle@w,fillRectangle@x
  5046  001646                     l5661:
  5047  001646  5023               	movf	fillRectangle@x,w,c
  5048  001648  B4D8               	btfsc	status,2,c
  5049  00164A  D00A               	goto	l5671
  5050  00164C  D001               	goto	l5665
  5051  00164E  D008               	goto	l5671
  5052  001650                     l5665:
  5053                           
  5054                           ;ST7735_TFT.c: 518: spiwrite(hi);
  5055  001650  5021               	movf	fillRectangle@hi,w,c
  5056  001652  EC8D  F010         	call	_spiwrite
  5057                           
  5058                           ;ST7735_TFT.c: 519: spiwrite(lo);
  5059  001656  5022               	movf	fillRectangle@lo,w,c
  5060  001658  EC8D  F010         	call	_spiwrite
  5061  00165C  0623               	decf	fillRectangle@x,f,c
  5062  00165E  D7F3               	goto	l5661
  5063  001660                     l5671:
  5064  001660  0618               	decf	fillRectangle@y,f,c
  5065  001662  D7EA               	goto	l5657
  5066  001664                     l601:
  5067                           
  5068                           ;ST7735_TFT.c: 520: }
  5069                           ;ST7735_TFT.c: 521: }
  5070                           ;ST7735_TFT.c: 522: PORTDbits.RD1 = 1;
  5071  001664  8283               	bsf	3971,1,c	;volatile
  5072  001666                     l597:
  5073  001666  0012               	return		;funcret
  5074  001668                     __end_of_fillRectangle:
  5075                           	opt stack 0
  5076                           tblptru	equ	0xFF8
  5077                           tblptrh	equ	0xFF7
  5078                           tblptrl	equ	0xFF6
  5079                           tablat	equ	0xFF5
  5080                           prodh	equ	0xFF4
  5081                           prodl	equ	0xFF3
  5082                           intcon	equ	0xFF2
  5083                           intcon2	equ	0xFF1
  5084                           postinc0	equ	0xFEE
  5085                           wreg	equ	0xFE8
  5086                           postdec1	equ	0xFE5
  5087                           fsr1l	equ	0xFE1
  5088                           indf2	equ	0xFDF
  5089                           postinc2	equ	0xFDE
  5090                           postdec2	equ	0xFDD
  5091                           fsr2h	equ	0xFDA
  5092                           fsr2l	equ	0xFD9
  5093                           status	equ	0xFD8
  5094                           
  5095 ;; *************** function _drawtext *****************
  5096 ;; Defined at:
  5097 ;;		line 473 in file "ST7735_TFT.c"
  5098 ;; Parameters:    Size  Location     Type
  5099 ;;  x               1    wreg     unsigned char 
  5100 ;;  y               1   56[COMRAM] unsigned char 
  5101 ;;  _text           2   57[COMRAM] PTR unsigned char 
  5102 ;;		 -> NULL(0), RPM_Txt(5), DC_Txt(4), Fan_SW_Txt(4), 
  5103 ;;		 -> date(9), time(9), tempF(4), tempC(4), 
  5104 ;;		 -> buffer(33), 
  5105 ;;  color           2   59[COMRAM] unsigned int 
  5106 ;;  bg              2   61[COMRAM] unsigned int 
  5107 ;;  size            1   63[COMRAM] unsigned char 
  5108 ;; Auto vars:     Size  Location     Type
  5109 ;;  x               1    2[BANK0 ] unsigned char 
  5110 ;;  i               2    5[BANK0 ] unsigned int 
  5111 ;;  textsize        2    3[BANK0 ] unsigned int 
  5112 ;;  cursor_x        1    8[BANK0 ] unsigned char 
  5113 ;;  cursor_y        1    7[BANK0 ] unsigned char 
  5114 ;; Return value:  Size  Location     Type
  5115 ;;		None               void
  5116 ;; Registers used:
  5117 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5118 ;; Tracked objects:
  5119 ;;		On entry : 0/0
  5120 ;;		On exit  : 0/0
  5121 ;;		Unchanged: 0/0
  5122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5123 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5124 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5125 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5126 ;;      Totals:         8       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5127 ;;Total ram usage:       17 bytes
  5128 ;; Hardware stack levels used:    1
  5129 ;; Hardware stack levels required when called:    9
  5130 ;; This function calls:
  5131 ;;		_drawChar
  5132 ;;		_strlen
  5133 ;; This function is called by:
  5134 ;;		_Initialize_Screen
  5135 ;;		_Update_Screen
  5136 ;; This function uses a non-reentrant model
  5137 ;;
  5138                           
  5139                           	psect	text15
  5140  000FB4                     __ptext15:
  5141                           	opt stack 0
  5142  000FB4                     _drawtext:
  5143                           	opt stack 20
  5144                           
  5145                           ;incstack = 0
  5146                           ;drawtext@x stored from wreg
  5147  000FB4  0100               	movlb	0	; () banked
  5148  000FB6  6FED               	movwf	drawtext@x& (0+255),b
  5149                           
  5150                           ; BSR set to: 0
  5151                           ;ST7735_TFT.c: 475: unsigned char cursor_x, cursor_y;
  5152                           ;ST7735_TFT.c: 476: unsigned int textsize, i;
  5153                           ;ST7735_TFT.c: 477: cursor_x = x, cursor_y = y;
  5154  000FB8  C0ED  F0F3         	movff	drawtext@x,drawtext@cursor_x
  5155                           
  5156                           ; BSR set to: 0
  5157  000FBC  C039  F0F2         	movff	drawtext@y,drawtext@cursor_y
  5158                           
  5159                           ; BSR set to: 0
  5160                           ;ST7735_TFT.c: 478: textsize = strlen(_text);
  5161  000FC0  C03A  F011         	movff	drawtext@_text,strlen@s
  5162  000FC4  C03B  F012         	movff	drawtext@_text+1,strlen@s+1
  5163  000FC8  EC18  F00F         	call	_strlen	;wreg free
  5164  000FCC  C011  F0EE         	movff	?_strlen,drawtext@textsize
  5165  000FD0  C012  F0EF         	movff	?_strlen+1,drawtext@textsize+1
  5166                           
  5167                           ;ST7735_TFT.c: 479: for(i = 0; i < textsize; i++){
  5168  000FD4  0E00               	movlw	0
  5169  000FD6  0100               	movlb	0	; () banked
  5170  000FD8  6FF1               	movwf	(drawtext@i+1)& (0+255),b
  5171  000FDA  0E00               	movlw	0
  5172  000FDC  6FF0               	movwf	drawtext@i& (0+255),b
  5173  000FDE  D06A               	goto	l5955
  5174  000FE0                     l5929:
  5175                           
  5176                           ; BSR set to: 0
  5177                           ;ST7735_TFT.c: 480: if(wrap && ((cursor_x + size * 5) > 128)){
  5178  000FE0  506F               	movf	_wrap,w,c
  5179  000FE2  B4D8               	btfsc	status,2,c
  5180  000FE4  D03A               	goto	l5945
  5181                           
  5182                           ; BSR set to: 0
  5183  000FE6  5040               	movf	drawtext@size,w,c
  5184  000FE8  0D05               	mullw	5
  5185  000FEA  0100               	movlb	0	; () banked
  5186  000FEC  51F3               	movf	drawtext@cursor_x& (0+255),w,b
  5187  000FEE  0100               	movlb	0	; () banked
  5188  000FF0  6FEB               	movwf	??_drawtext& (0+255),b
  5189  000FF2  6BEC               	clrf	(??_drawtext+1)& (0+255),b
  5190  000FF4  50F3               	movf	prodl,w,c
  5191  000FF6  0100               	movlb	0	; () banked
  5192  000FF8  27EB               	addwf	??_drawtext& (0+255),f,b
  5193  000FFA  50F4               	movf	prodh,w,c
  5194  000FFC  0100               	movlb	0	; () banked
  5195  000FFE  23EC               	addwfc	(??_drawtext+1)& (0+255),f,b
  5196  001000  0100               	movlb	0	; () banked
  5197  001002  BFEC               	btfsc	(??_drawtext+1)& (0+255),7,b
  5198  001004  D02A               	goto	l5945
  5199  001006  0100               	movlb	0	; () banked
  5200  001008  51EC               	movf	(??_drawtext+1)& (0+255),w,b
  5201  00100A  E105               	bnz	u4560
  5202  00100C  0E81               	movlw	129
  5203  00100E  0100               	movlb	0	; () banked
  5204  001010  5DEB               	subwf	??_drawtext& (0+255),w,b
  5205  001012  A0D8               	btfss	status,0,c
  5206  001014  D022               	goto	l5945
  5207  001016                     u4560:
  5208                           
  5209                           ; BSR set to: 0
  5210                           ;ST7735_TFT.c: 481: cursor_x = 0;
  5211  001016  0E00               	movlw	0
  5212  001018  0100               	movlb	0	; () banked
  5213  00101A  6FF3               	movwf	drawtext@cursor_x& (0+255),b
  5214                           
  5215                           ; BSR set to: 0
  5216                           ;ST7735_TFT.c: 482: cursor_y = cursor_y + size * 7 + 3 ;
  5217  00101C  5040               	movf	drawtext@size,w,c
  5218  00101E  0D07               	mullw	7
  5219  001020  50F3               	movf	prodl,w,c
  5220  001022  0100               	movlb	0	; () banked
  5221  001024  25F2               	addwf	drawtext@cursor_y& (0+255),w,b
  5222  001026  0F03               	addlw	3
  5223  001028  0100               	movlb	0	; () banked
  5224  00102A  6FF2               	movwf	drawtext@cursor_y& (0+255),b
  5225                           
  5226                           ; BSR set to: 0
  5227                           ;ST7735_TFT.c: 483: if(cursor_y > 160) cursor_y = 160;
  5228  00102C  0EA0               	movlw	160
  5229  00102E  0100               	movlb	0	; () banked
  5230  001030  65F2               	cpfsgt	drawtext@cursor_y& (0+255),b
  5231  001032  D004               	goto	l5941
  5232                           
  5233                           ; BSR set to: 0
  5234  001034  0EA0               	movlw	160
  5235  001036  0100               	movlb	0	; () banked
  5236  001038  6FF2               	movwf	drawtext@cursor_y& (0+255),b
  5237  00103A  D000               	goto	l5941
  5238  00103C                     l5941:
  5239                           
  5240                           ; BSR set to: 0
  5241                           ;ST7735_TFT.c: 484: if(_text[i] == 0x20) goto _skip; }
  5242  00103C  0100               	movlb	0	; () banked
  5243  00103E  51F0               	movf	drawtext@i& (0+255),w,b
  5244  001040  243A               	addwf	drawtext@_text,w,c
  5245  001042  6ED9               	movwf	fsr2l,c
  5246  001044  0100               	movlb	0	; () banked
  5247  001046  51F1               	movf	(drawtext@i+1)& (0+255),w,b
  5248  001048  203B               	addwfc	drawtext@_text+1,w,c
  5249  00104A  6EDA               	movwf	fsr2h,c
  5250  00104C  0E20               	movlw	32
  5251  00104E  18DE               	xorwf	postinc2,w,c
  5252  001050  B4D8               	btfsc	status,2,c
  5253  001052  D02C               	goto	l5953
  5254  001054  D002               	goto	l5945
  5255                           
  5256                           ; BSR set to: 0
  5257  001056  D02A               	goto	l5953
  5258                           
  5259                           ; BSR set to: 0
  5260  001058  D000               	goto	l5945
  5261  00105A                     l5945:
  5262                           
  5263                           ; BSR set to: 0
  5264                           ;ST7735_TFT.c: 485: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
  5265  00105A  C0F2  F02E         	movff	drawtext@cursor_y,drawChar@y
  5266  00105E  0100               	movlb	0	; () banked
  5267  001060  51F0               	movf	drawtext@i& (0+255),w,b
  5268  001062  243A               	addwf	drawtext@_text,w,c
  5269  001064  6ED9               	movwf	fsr2l,c
  5270  001066  0100               	movlb	0	; () banked
  5271  001068  51F1               	movf	(drawtext@i+1)& (0+255),w,b
  5272  00106A  203B               	addwfc	drawtext@_text+1,w,c
  5273  00106C  6EDA               	movwf	fsr2h,c
  5274  00106E  50DF               	movf	indf2,w,c
  5275  001070  6E2F               	movwf	drawChar@c,c
  5276  001072  C03C  F030         	movff	drawtext@color,drawChar@color
  5277  001076  C03D  F031         	movff	drawtext@color+1,drawChar@color+1
  5278  00107A  C03E  F032         	movff	drawtext@bg,drawChar@bg
  5279  00107E  C03F  F033         	movff	drawtext@bg+1,drawChar@bg+1
  5280  001082  C040  F034         	movff	drawtext@size,drawChar@size
  5281  001086  0100               	movlb	0	; () banked
  5282  001088  51F3               	movf	drawtext@cursor_x& (0+255),w,b
  5283  00108A  EC2F  F007         	call	_drawChar
  5284                           
  5285                           ;ST7735_TFT.c: 486: cursor_x = cursor_x + size * 6;
  5286  00108E  5040               	movf	drawtext@size,w,c
  5287  001090  0D06               	mullw	6
  5288  001092  50F3               	movf	prodl,w,c
  5289  001094  0100               	movlb	0	; () banked
  5290  001096  25F3               	addwf	drawtext@cursor_x& (0+255),w,b
  5291  001098  0100               	movlb	0	; () banked
  5292  00109A  6FF3               	movwf	drawtext@cursor_x& (0+255),b
  5293                           
  5294                           ; BSR set to: 0
  5295                           ;ST7735_TFT.c: 487: if(cursor_x > 128) cursor_x = 128;
  5296  00109C  0E80               	movlw	128
  5297  00109E  0100               	movlb	0	; () banked
  5298  0010A0  65F3               	cpfsgt	drawtext@cursor_x& (0+255),b
  5299  0010A2  D004               	goto	l5953
  5300                           
  5301                           ; BSR set to: 0
  5302  0010A4  0E80               	movlw	128
  5303  0010A6  0100               	movlb	0	; () banked
  5304  0010A8  6FF3               	movwf	drawtext@cursor_x& (0+255),b
  5305                           
  5306                           ; BSR set to: 0
  5307  0010AA  D000               	goto	l5953
  5308  0010AC                     l5953:
  5309                           
  5310                           ; BSR set to: 0
  5311  0010AC  0100               	movlb	0	; () banked
  5312  0010AE  4BF0               	infsnz	drawtext@i& (0+255),f,b
  5313  0010B0  2BF1               	incf	(drawtext@i+1)& (0+255),f,b
  5314  0010B2  D000               	goto	l5955
  5315  0010B4                     l5955:
  5316                           
  5317                           ; BSR set to: 0
  5318  0010B4  0100               	movlb	0	; () banked
  5319  0010B6  51EE               	movf	drawtext@textsize& (0+255),w,b
  5320  0010B8  0100               	movlb	0	; () banked
  5321  0010BA  5DF0               	subwf	drawtext@i& (0+255),w,b
  5322  0010BC  0100               	movlb	0	; () banked
  5323  0010BE  51EF               	movf	(drawtext@textsize+1)& (0+255),w,b
  5324  0010C0  0100               	movlb	0	; () banked
  5325  0010C2  59F1               	subwfb	(drawtext@i+1)& (0+255),w,b
  5326  0010C4  A0D8               	btfss	status,0,c
  5327  0010C6  D78C               	goto	l5929
  5328                           
  5329                           ; BSR set to: 0
  5330                           
  5331                           ; BSR set to: 0
  5332  0010C8  0012               	return		;funcret
  5333  0010CA                     __end_of_drawtext:
  5334                           	opt stack 0
  5335                           tblptru	equ	0xFF8
  5336                           tblptrh	equ	0xFF7
  5337                           tblptrl	equ	0xFF6
  5338                           tablat	equ	0xFF5
  5339                           prodh	equ	0xFF4
  5340                           prodl	equ	0xFF3
  5341                           intcon	equ	0xFF2
  5342                           intcon2	equ	0xFF1
  5343                           postinc0	equ	0xFEE
  5344                           wreg	equ	0xFE8
  5345                           postdec1	equ	0xFE5
  5346                           fsr1l	equ	0xFE1
  5347                           indf2	equ	0xFDF
  5348                           postinc2	equ	0xFDE
  5349                           postdec2	equ	0xFDD
  5350                           fsr2h	equ	0xFDA
  5351                           fsr2l	equ	0xFD9
  5352                           status	equ	0xFD8
  5353                           
  5354 ;; *************** function _strlen *****************
  5355 ;; Defined at:
  5356 ;;		line 4 in file "E:\XC8\sources\common\strlen.c"
  5357 ;; Parameters:    Size  Location     Type
  5358 ;;  s               2   16[COMRAM] PTR const unsigned char 
  5359 ;;		 -> NULL(0), RPM_Txt(5), DC_Txt(4), Fan_SW_Txt(4), 
  5360 ;;		 -> date(9), time(9), tempF(4), tempC(4), 
  5361 ;;		 -> buffer(33), 
  5362 ;; Auto vars:     Size  Location     Type
  5363 ;;  cp              2   20[COMRAM] PTR const unsigned char 
  5364 ;;		 -> NULL(0), RPM_Txt(5), DC_Txt(4), Fan_SW_Txt(4), 
  5365 ;;		 -> date(9), time(9), tempF(4), tempC(4), 
  5366 ;;		 -> buffer(33), 
  5367 ;; Return value:  Size  Location     Type
  5368 ;;                  2   16[COMRAM] unsigned int 
  5369 ;; Registers used:
  5370 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5371 ;; Tracked objects:
  5372 ;;		On entry : 0/0
  5373 ;;		On exit  : 0/0
  5374 ;;		Unchanged: 0/0
  5375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5376 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5377 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5378 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5379 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5380 ;;Total ram usage:        6 bytes
  5381 ;; Hardware stack levels used:    1
  5382 ;; Hardware stack levels required when called:    3
  5383 ;; This function calls:
  5384 ;;		Nothing
  5385 ;; This function is called by:
  5386 ;;		_drawtext
  5387 ;; This function uses a non-reentrant model
  5388 ;;
  5389                           
  5390                           	psect	text16
  5391  001E30                     __ptext16:
  5392                           	opt stack 0
  5393  001E30                     _strlen:
  5394                           	opt stack 25
  5395                           
  5396                           ; BSR set to: 0
  5397                           ;incstack = 0
  5398  001E30  C011  F015         	movff	strlen@s,strlen@cp
  5399  001E34  C012  F016         	movff	strlen@s+1,strlen@cp+1
  5400  001E38  D003               	goto	l5629
  5401  001E3A                     l5627:
  5402  001E3A  4A15               	infsnz	strlen@cp,f,c
  5403  001E3C  2A16               	incf	strlen@cp+1,f,c
  5404  001E3E  D000               	goto	l5629
  5405  001E40                     l5629:
  5406  001E40  C015  FFD9         	movff	strlen@cp,fsr2l
  5407  001E44  C016  FFDA         	movff	strlen@cp+1,fsr2h
  5408  001E48  50DF               	movf	indf2,w,c
  5409  001E4A  A4D8               	btfss	status,2,c
  5410  001E4C  D7F6               	goto	l5627
  5411  001E4E  C011  F013         	movff	strlen@s,??_strlen
  5412  001E52  C012  F014         	movff	strlen@s+1,??_strlen+1
  5413  001E56  1E13               	comf	??_strlen,f,c
  5414  001E58  1E14               	comf	??_strlen+1,f,c
  5415  001E5A  4A13               	infsnz	??_strlen,f,c
  5416  001E5C  2A14               	incf	??_strlen+1,f,c
  5417  001E5E  5015               	movf	strlen@cp,w,c
  5418  001E60  2413               	addwf	??_strlen,w,c
  5419  001E62  6E11               	movwf	?_strlen,c
  5420  001E64  5016               	movf	strlen@cp+1,w,c
  5421  001E66  2014               	addwfc	??_strlen+1,w,c
  5422  001E68  6E12               	movwf	?_strlen+1,c
  5423  001E6A  D000               	goto	l1437
  5424  001E6C                     l1437:
  5425  001E6C  0012               	return		;funcret
  5426  001E6E                     __end_of_strlen:
  5427                           	opt stack 0
  5428                           tblptru	equ	0xFF8
  5429                           tblptrh	equ	0xFF7
  5430                           tblptrl	equ	0xFF6
  5431                           tablat	equ	0xFF5
  5432                           prodh	equ	0xFF4
  5433                           prodl	equ	0xFF3
  5434                           intcon	equ	0xFF2
  5435                           intcon2	equ	0xFF1
  5436                           postinc0	equ	0xFEE
  5437                           wreg	equ	0xFE8
  5438                           postdec1	equ	0xFE5
  5439                           fsr1l	equ	0xFE1
  5440                           indf2	equ	0xFDF
  5441                           postinc2	equ	0xFDE
  5442                           postdec2	equ	0xFDD
  5443                           fsr2h	equ	0xFDA
  5444                           fsr2l	equ	0xFD9
  5445                           status	equ	0xFD8
  5446                           
  5447 ;; *************** function _drawChar *****************
  5448 ;; Defined at:
  5449 ;;		line 446 in file "ST7735_TFT.c"
  5450 ;; Parameters:    Size  Location     Type
  5451 ;;  x               1    wreg     unsigned char 
  5452 ;;  y               1   45[COMRAM] unsigned char 
  5453 ;;  c               1   46[COMRAM] unsigned char 
  5454 ;;  color           2   47[COMRAM] unsigned int 
  5455 ;;  bg              2   49[COMRAM] unsigned int 
  5456 ;;  size            1   51[COMRAM] unsigned char 
  5457 ;; Auto vars:     Size  Location     Type
  5458 ;;  x               1   53[COMRAM] unsigned char 
  5459 ;;  line            1   52[COMRAM] unsigned char 
  5460 ;;  i               1   55[COMRAM] unsigned char 
  5461 ;;  j               1   54[COMRAM] unsigned char 
  5462 ;; Return value:  Size  Location     Type
  5463 ;;		None               void
  5464 ;; Registers used:
  5465 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5466 ;; Tracked objects:
  5467 ;;		On entry : 0/0
  5468 ;;		On exit  : 0/0
  5469 ;;		Unchanged: 0/0
  5470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5471 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5472 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5473 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5474 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5475 ;;Total ram usage:       11 bytes
  5476 ;; Hardware stack levels used:    1
  5477 ;; Hardware stack levels required when called:    8
  5478 ;; This function calls:
  5479 ;;		___wmul
  5480 ;;		_drawPixel
  5481 ;;		_fillRect
  5482 ;; This function is called by:
  5483 ;;		_drawtext
  5484 ;; This function uses a non-reentrant model
  5485 ;;
  5486                           
  5487                           	psect	text17
  5488  000E5E                     __ptext17:
  5489                           	opt stack 0
  5490  000E5E                     _drawChar:
  5491                           	opt stack 20
  5492                           
  5493                           ;incstack = 0
  5494                           ;drawChar@x stored from wreg
  5495  000E5E  6E36               	movwf	drawChar@x,c
  5496                           
  5497                           ;ST7735_TFT.c: 448: char i, j;
  5498                           ;ST7735_TFT.c: 449: if((x >= 128) || (y >= 160))
  5499  000E60  0E80               	movlw	128
  5500  000E62  6036               	cpfslt	drawChar@x,c
  5501  000E64  D0A6               	goto	l560
  5502  000E66  0E9F               	movlw	159
  5503  000E68  642E               	cpfsgt	drawChar@y,c
  5504  000E6A  D001               	goto	l5575
  5505                           
  5506                           ;ST7735_TFT.c: 450: return;
  5507  000E6C  D0A2               	goto	l560
  5508  000E6E                     l5575:
  5509                           
  5510                           ;ST7735_TFT.c: 451: if(size < 1) size = 1;
  5511  000E6E  5034               	movf	drawChar@size,w,c
  5512  000E70  A4D8               	btfss	status,2,c
  5513  000E72  D003               	goto	l5579
  5514  000E74  0E01               	movlw	1
  5515  000E76  6E34               	movwf	drawChar@size,c
  5516  000E78  D000               	goto	l5579
  5517  000E7A                     l5579:
  5518                           
  5519                           ;ST7735_TFT.c: 452: if((c < ' ') || (c > '~'))
  5520  000E7A  0E1F               	movlw	31
  5521  000E7C  642F               	cpfsgt	drawChar@c,c
  5522  000E7E  D004               	goto	l5583
  5523  000E80  0E7E               	movlw	126
  5524  000E82  642F               	cpfsgt	drawChar@c,c
  5525  000E84  D003               	goto	l562
  5526  000E86  D000               	goto	l5583
  5527  000E88                     l5583:
  5528                           
  5529                           ;ST7735_TFT.c: 453: c = '?';
  5530  000E88  0E3F               	movlw	63
  5531  000E8A  6E2F               	movwf	drawChar@c,c
  5532  000E8C                     l562:
  5533                           
  5534                           ;ST7735_TFT.c: 454: for(i=0; i<5; i++ ) {
  5535  000E8C  0E00               	movlw	0
  5536  000E8E  6E38               	movwf	drawChar@i,c
  5537  000E90                     l5585:
  5538  000E90  0E04               	movlw	4
  5539  000E92  6438               	cpfsgt	drawChar@i,c
  5540  000E94  D001               	goto	l5589
  5541  000E96  D08D               	goto	l560
  5542  000E98                     l5589:
  5543                           
  5544                           ;ST7735_TFT.c: 455: unsigned char line;
  5545                           ;ST7735_TFT.c: 456: if(c < 'S')
  5546  000E98  0E53               	movlw	83
  5547  000E9A  602F               	cpfslt	drawChar@c,c
  5548  000E9C  D015               	goto	l5593
  5549                           
  5550                           ;ST7735_TFT.c: 457: line = font[(c - 32)*5 + i];
  5551  000E9E  0EE0               	movlw	224
  5552  000EA0  242F               	addwf	drawChar@c,w,c
  5553  000EA2  6E11               	movwf	___wmul@multiplier,c
  5554  000EA4  6A12               	clrf	___wmul@multiplier+1,c
  5555  000EA6  0EFF               	movlw	255
  5556  000EA8  2212               	addwfc	___wmul@multiplier+1,f,c
  5557  000EAA  0E00               	movlw	0
  5558  000EAC  6E14               	movwf	___wmul@multiplicand+1,c
  5559  000EAE  0E05               	movlw	5
  5560  000EB0  6E13               	movwf	___wmul@multiplicand,c
  5561  000EB2  ECF2  F00F         	call	___wmul	;wreg free
  5562  000EB6  5038               	movf	drawChar@i,w,c
  5563  000EB8  2611               	addwf	?___wmul,f,c
  5564  000EBA  0E00               	movlw	0
  5565  000EBC  2212               	addwfc	?___wmul+1,f,c
  5566  000EBE  0E3F               	movlw	low _font
  5567  000EC0  2411               	addwf	?___wmul,w,c
  5568  000EC2  6EF6               	movwf	tblptrl,c
  5569  000EC4  0EFD               	movlw	high _font
  5570  000EC6  D014               	goto	L3
  5571  000EC8                     l5593:
  5572                           
  5573                           ;ST7735_TFT.c: 458: else
  5574                           ;ST7735_TFT.c: 459: line = font2[(c - 'S')*5 + i];
  5575  000EC8  0EAD               	movlw	173
  5576  000ECA  242F               	addwf	drawChar@c,w,c
  5577  000ECC  6E11               	movwf	___wmul@multiplier,c
  5578  000ECE  6A12               	clrf	___wmul@multiplier+1,c
  5579  000ED0  0EFF               	movlw	255
  5580  000ED2  2212               	addwfc	___wmul@multiplier+1,f,c
  5581  000ED4  0E00               	movlw	0
  5582  000ED6  6E14               	movwf	___wmul@multiplicand+1,c
  5583  000ED8  0E05               	movlw	5
  5584  000EDA  6E13               	movwf	___wmul@multiplicand,c
  5585  000EDC  ECF2  F00F         	call	___wmul	;wreg free
  5586  000EE0  5038               	movf	drawChar@i,w,c
  5587  000EE2  2611               	addwf	?___wmul,f,c
  5588  000EE4  0E00               	movlw	0
  5589  000EE6  2212               	addwfc	?___wmul+1,f,c
  5590  000EE8  0E3E               	movlw	low _font2
  5591  000EEA  2411               	addwf	?___wmul,w,c
  5592  000EEC  6EF6               	movwf	tblptrl,c
  5593  000EEE  0EFE               	movlw	high _font2
  5594  000EF0                     L3:
  5595  000EF0  2012               	addwfc	?___wmul+1,w,c
  5596  000EF2  6EF7               	movwf	tblptrh,c
  5597  000EF4                     	if	0	;There are less than 3 active tblptr bytes
  5598  000EF4                     	endif
  5599  000EF4  0008               	tblrd		*
  5600  000EF6  CFF5 F035          	movff	tablat,drawChar@line
  5601  000EFA  D000               	goto	l5595
  5602  000EFC                     l5595:
  5603                           
  5604                           ;ST7735_TFT.c: 460: for(j=0; j<7; j++, line >>= 1) {
  5605  000EFC  0E00               	movlw	0
  5606  000EFE  6E37               	movwf	drawChar@j,c
  5607  000F00                     l5597:
  5608  000F00  0E06               	movlw	6
  5609  000F02  6437               	cpfsgt	drawChar@j,c
  5610  000F04  D001               	goto	l569
  5611  000F06  D053               	goto	l5621
  5612  000F08                     l569:
  5613                           
  5614                           ;ST7735_TFT.c: 461: if(line & 0x01) {
  5615  000F08  A035               	btfss	drawChar@line,0,c
  5616  000F0A  D023               	goto	l5607
  5617                           
  5618                           ;ST7735_TFT.c: 462: if(size == 1) drawPixel(x+i, y+j, color);
  5619  000F0C  0434               	decf	drawChar@size,w,c
  5620  000F0E  A4D8               	btfss	status,2,c
  5621  000F10  D00C               	goto	l5605
  5622  000F12  502E               	movf	drawChar@y,w,c
  5623  000F14  2437               	addwf	drawChar@j,w,c
  5624  000F16  6E18               	movwf	drawPixel@y,c
  5625  000F18  C030  F019         	movff	drawChar@color,drawPixel@color
  5626  000F1C  C031  F01A         	movff	drawChar@color+1,drawPixel@color+1
  5627  000F20  5036               	movf	drawChar@x,w,c
  5628  000F22  2438               	addwf	drawChar@i,w,c
  5629  000F24  ECC5  F00F         	call	_drawPixel
  5630  000F28  D03E               	goto	l5615
  5631  000F2A                     l5605:
  5632                           
  5633                           ;ST7735_TFT.c: 463: else fillRect(x+(i*size), y+(j*size), size, size, color);
  5634  000F2A  5037               	movf	drawChar@j,w,c
  5635  000F2C  0234               	mulwf	drawChar@size,c
  5636  000F2E  50F3               	movf	prodl,w,c
  5637  000F30  242E               	addwf	drawChar@y,w,c
  5638  000F32  6E23               	movwf	fillRect@y,c
  5639  000F34  C034  F024         	movff	drawChar@size,fillRect@w
  5640  000F38  C034  F025         	movff	drawChar@size,fillRect@h
  5641  000F3C  C030  F026         	movff	drawChar@color,fillRect@color
  5642  000F40  C031  F027         	movff	drawChar@color+1,fillRect@color+1
  5643  000F44  5038               	movf	drawChar@i,w,c
  5644  000F46  0234               	mulwf	drawChar@size,c
  5645  000F48  50F3               	movf	prodl,w,c
  5646  000F4A  2436               	addwf	drawChar@x,w,c
  5647  000F4C  ECB0  F00E         	call	_fillRect
  5648                           
  5649                           ;ST7735_TFT.c: 464: }
  5650  000F50  D02A               	goto	l5615
  5651  000F52                     l5607:
  5652                           
  5653                           ;ST7735_TFT.c: 465: else if(bg != color) {
  5654  000F52  5030               	movf	drawChar@color,w,c
  5655  000F54  1832               	xorwf	drawChar@bg,w,c
  5656  000F56  E104               	bnz	u4160
  5657  000F58  5031               	movf	drawChar@color+1,w,c
  5658  000F5A  1833               	xorwf	drawChar@bg+1,w,c
  5659  000F5C  B4D8               	btfsc	status,2,c
  5660  000F5E  D023               	goto	l5615
  5661  000F60                     u4160:
  5662                           
  5663                           ;ST7735_TFT.c: 466: if(size == 1) drawPixel(x+i, y+j, bg);
  5664  000F60  0434               	decf	drawChar@size,w,c
  5665  000F62  A4D8               	btfss	status,2,c
  5666  000F64  D00C               	goto	l5613
  5667  000F66  502E               	movf	drawChar@y,w,c
  5668  000F68  2437               	addwf	drawChar@j,w,c
  5669  000F6A  6E18               	movwf	drawPixel@y,c
  5670  000F6C  C032  F019         	movff	drawChar@bg,drawPixel@color
  5671  000F70  C033  F01A         	movff	drawChar@bg+1,drawPixel@color+1
  5672  000F74  5036               	movf	drawChar@x,w,c
  5673  000F76  2438               	addwf	drawChar@i,w,c
  5674  000F78  ECC5  F00F         	call	_drawPixel
  5675  000F7C  D014               	goto	l5615
  5676  000F7E                     l5613:
  5677                           
  5678                           ;ST7735_TFT.c: 467: else fillRect(x+i*size, y+j*size, size, size, bg);
  5679  000F7E  5037               	movf	drawChar@j,w,c
  5680  000F80  0234               	mulwf	drawChar@size,c
  5681  000F82  50F3               	movf	prodl,w,c
  5682  000F84  242E               	addwf	drawChar@y,w,c
  5683  000F86  6E23               	movwf	fillRect@y,c
  5684  000F88  C034  F024         	movff	drawChar@size,fillRect@w
  5685  000F8C  C034  F025         	movff	drawChar@size,fillRect@h
  5686  000F90  C032  F026         	movff	drawChar@bg,fillRect@color
  5687  000F94  C033  F027         	movff	drawChar@bg+1,fillRect@color+1
  5688  000F98  5038               	movf	drawChar@i,w,c
  5689  000F9A  0234               	mulwf	drawChar@size,c
  5690  000F9C  50F3               	movf	prodl,w,c
  5691  000F9E  2436               	addwf	drawChar@x,w,c
  5692  000FA0  ECB0  F00E         	call	_fillRect
  5693  000FA4  D000               	goto	l5615
  5694  000FA6                     l5615:
  5695  000FA6  2A37               	incf	drawChar@j,f,c
  5696  000FA8  90D8               	bcf	status,0,c
  5697  000FAA  3235               	rrcf	drawChar@line,f,c
  5698  000FAC  D7A9               	goto	l5597
  5699  000FAE                     l5621:
  5700  000FAE  2A38               	incf	drawChar@i,f,c
  5701  000FB0  D76F               	goto	l5585
  5702  000FB2                     l560:
  5703  000FB2  0012               	return		;funcret
  5704  000FB4                     __end_of_drawChar:
  5705                           	opt stack 0
  5706                           tblptru	equ	0xFF8
  5707                           tblptrh	equ	0xFF7
  5708                           tblptrl	equ	0xFF6
  5709                           tablat	equ	0xFF5
  5710                           prodh	equ	0xFF4
  5711                           prodl	equ	0xFF3
  5712                           intcon	equ	0xFF2
  5713                           intcon2	equ	0xFF1
  5714                           postinc0	equ	0xFEE
  5715                           wreg	equ	0xFE8
  5716                           postdec1	equ	0xFE5
  5717                           fsr1l	equ	0xFE1
  5718                           indf2	equ	0xFDF
  5719                           postinc2	equ	0xFDE
  5720                           postdec2	equ	0xFDD
  5721                           fsr2h	equ	0xFDA
  5722                           fsr2l	equ	0xFD9
  5723                           status	equ	0xFD8
  5724                           
  5725 ;; *************** function _fillRect *****************
  5726 ;; Defined at:
  5727 ;;		line 436 in file "ST7735_TFT.c"
  5728 ;; Parameters:    Size  Location     Type
  5729 ;;  x               1    wreg     unsigned char 
  5730 ;;  y               1   34[COMRAM] unsigned char 
  5731 ;;  w               1   35[COMRAM] unsigned char 
  5732 ;;  h               1   36[COMRAM] unsigned char 
  5733 ;;  color           2   37[COMRAM] unsigned int 
  5734 ;; Auto vars:     Size  Location     Type
  5735 ;;  x               1   42[COMRAM] unsigned char 
  5736 ;;  i               2   43[COMRAM] int 
  5737 ;; Return value:  Size  Location     Type
  5738 ;;		None               void
  5739 ;; Registers used:
  5740 ;;		wreg, status,2, status,0, cstack
  5741 ;; Tracked objects:
  5742 ;;		On entry : 0/0
  5743 ;;		On exit  : 0/0
  5744 ;;		Unchanged: 0/0
  5745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5746 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5747 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5748 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5749 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5750 ;;Total ram usage:       11 bytes
  5751 ;; Hardware stack levels used:    1
  5752 ;; Hardware stack levels required when called:    7
  5753 ;; This function calls:
  5754 ;;		_drawFastVLine
  5755 ;; This function is called by:
  5756 ;;		_drawChar
  5757 ;; This function uses a non-reentrant model
  5758 ;;
  5759                           
  5760                           	psect	text18
  5761  001D60                     __ptext18:
  5762                           	opt stack 0
  5763  001D60                     _fillRect:
  5764                           	opt stack 20
  5765                           
  5766                           ;incstack = 0
  5767                           ;fillRect@x stored from wreg
  5768  001D60  6E2B               	movwf	fillRect@x,c
  5769                           
  5770                           ;ST7735_TFT.c: 438: signed int i;
  5771                           ;ST7735_TFT.c: 440: for (i = x; i < x + w; i++)
  5772  001D62  C02B  F02C         	movff	fillRect@x,fillRect@i
  5773  001D66  6A2D               	clrf	fillRect@i+1,c
  5774  001D68  D00E               	goto	l5363
  5775  001D6A                     l5359:
  5776                           
  5777                           ;ST7735_TFT.c: 441: {
  5778                           ;ST7735_TFT.c: 442: drawFastVLine(i, y, h, color);
  5779  001D6A  C023  F018         	movff	fillRect@y,drawFastVLine@y
  5780  001D6E  C025  F019         	movff	fillRect@h,drawFastVLine@h
  5781  001D72  C026  F01A         	movff	fillRect@color,drawFastVLine@color
  5782  001D76  C027  F01B         	movff	fillRect@color+1,drawFastVLine@color+1
  5783  001D7A  502C               	movf	fillRect@i,w,c
  5784  001D7C  EC43  F00C         	call	_drawFastVLine
  5785  001D80  4A2C               	infsnz	fillRect@i,f,c
  5786  001D82  2A2D               	incf	fillRect@i+1,f,c
  5787  001D84  D000               	goto	l5363
  5788  001D86                     l5363:
  5789  001D86  5024               	movf	fillRect@w,w,c
  5790  001D88  C02B  F028         	movff	fillRect@x,??_fillRect
  5791  001D8C  6A29               	clrf	(??_fillRect+1)& (0+255),c
  5792  001D8E  2628               	addwf	??_fillRect,f,c
  5793  001D90  0E00               	movlw	0
  5794  001D92  2229               	addwfc	??_fillRect+1,f,c
  5795  001D94  5028               	movf	??_fillRect,w,c
  5796  001D96  5C2C               	subwf	fillRect@i,w,c
  5797  001D98  502D               	movf	fillRect@i+1,w,c
  5798  001D9A  0A80               	xorlw	128
  5799  001D9C  6E2A               	movwf	(??_fillRect+2)& (0+255),c
  5800  001D9E  5029               	movf	??_fillRect+1,w,c
  5801  001DA0  0A80               	xorlw	128
  5802  001DA2  582A               	subwfb	(??_fillRect+2)& (0+255),w,c
  5803  001DA4  A0D8               	btfss	status,0,c
  5804  001DA6  D7E1               	goto	l5359
  5805  001DA8  0012               	return		;funcret
  5806  001DAA                     __end_of_fillRect:
  5807                           	opt stack 0
  5808                           tblptru	equ	0xFF8
  5809                           tblptrh	equ	0xFF7
  5810                           tblptrl	equ	0xFF6
  5811                           tablat	equ	0xFF5
  5812                           prodh	equ	0xFF4
  5813                           prodl	equ	0xFF3
  5814                           intcon	equ	0xFF2
  5815                           intcon2	equ	0xFF1
  5816                           postinc0	equ	0xFEE
  5817                           wreg	equ	0xFE8
  5818                           postdec1	equ	0xFE5
  5819                           fsr1l	equ	0xFE1
  5820                           indf2	equ	0xFDF
  5821                           postinc2	equ	0xFDE
  5822                           postdec2	equ	0xFDD
  5823                           fsr2h	equ	0xFDA
  5824                           fsr2l	equ	0xFD9
  5825                           status	equ	0xFD8
  5826                           
  5827 ;; *************** function _drawFastVLine *****************
  5828 ;; Defined at:
  5829 ;;		line 415 in file "ST7735_TFT.c"
  5830 ;; Parameters:    Size  Location     Type
  5831 ;;  x               1    wreg     unsigned char 
  5832 ;;  y               1   23[COMRAM] unsigned char 
  5833 ;;  h               1   24[COMRAM] unsigned char 
  5834 ;;  color           2   25[COMRAM] unsigned int 
  5835 ;; Auto vars:     Size  Location     Type
  5836 ;;  x               1   33[COMRAM] unsigned char 
  5837 ;;  lo              1   32[COMRAM] unsigned char 
  5838 ;;  hi              1   31[COMRAM] unsigned char 
  5839 ;; Return value:  Size  Location     Type
  5840 ;;		None               void
  5841 ;; Registers used:
  5842 ;;		wreg, status,2, status,0, cstack
  5843 ;; Tracked objects:
  5844 ;;		On entry : 0/0
  5845 ;;		On exit  : 0/0
  5846 ;;		Unchanged: 0/0
  5847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5848 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5849 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5850 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5851 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5852 ;;Total ram usage:       11 bytes
  5853 ;; Hardware stack levels used:    1
  5854 ;; Hardware stack levels required when called:    6
  5855 ;; This function calls:
  5856 ;;		_setAddrWindow
  5857 ;;		_spiwrite
  5858 ;; This function is called by:
  5859 ;;		_fillRect
  5860 ;;		_fillCircleHelper
  5861 ;;		_fillCircle
  5862 ;;		_drawRect
  5863 ;; This function uses a non-reentrant model
  5864 ;;
  5865                           
  5866                           	psect	text19
  5867  001886                     __ptext19:
  5868                           	opt stack 0
  5869  001886                     _drawFastVLine:
  5870                           	opt stack 20
  5871                           
  5872                           ;incstack = 0
  5873                           ;drawFastVLine@x stored from wreg
  5874  001886  6E22               	movwf	drawFastVLine@x,c
  5875                           
  5876                           ;ST7735_TFT.c: 417: unsigned char hi, lo;
  5877                           ;ST7735_TFT.c: 418: if((x >= 128) || (y >= 160))
  5878  001888  0E80               	movlw	128
  5879  00188A  6022               	cpfslt	drawFastVLine@x,c
  5880  00188C  D03F               	goto	l544
  5881  00188E  0E9F               	movlw	159
  5882  001890  6418               	cpfsgt	drawFastVLine@y,c
  5883  001892  D001               	goto	l5269
  5884                           
  5885                           ;ST7735_TFT.c: 419: return;
  5886  001894  D03B               	goto	l544
  5887  001896                     l5269:
  5888                           
  5889                           ;ST7735_TFT.c: 420: if((y + h - 1) >= 160)
  5890  001896  0EFF               	movlw	255
  5891  001898  6E1C               	movwf	??_drawFastVLine& (0+255),c
  5892  00189A  0EFF               	movlw	255
  5893  00189C  6E1D               	movwf	(??_drawFastVLine+1)& (0+255),c
  5894  00189E  5019               	movf	drawFastVLine@h,w,c
  5895  0018A0  C018  F01E         	movff	drawFastVLine@y,??_drawFastVLine+2
  5896  0018A4  6A1F               	clrf	(??_drawFastVLine+3)& (0+255),c
  5897  0018A6  261E               	addwf	??_drawFastVLine+2,f,c
  5898  0018A8  0E00               	movlw	0
  5899  0018AA  221F               	addwfc	??_drawFastVLine+3,f,c
  5900  0018AC  501C               	movf	??_drawFastVLine,w,c
  5901  0018AE  261E               	addwf	??_drawFastVLine+2,f,c
  5902  0018B0  501D               	movf	??_drawFastVLine+1,w,c
  5903  0018B2  221F               	addwfc	??_drawFastVLine+3,f,c
  5904  0018B4  BE1F               	btfsc	??_drawFastVLine+3,7,c
  5905  0018B6  D00B               	goto	l5273
  5906  0018B8  501F               	movf	??_drawFastVLine+3,w,c
  5907  0018BA  E104               	bnz	u3790
  5908  0018BC  0EA0               	movlw	160
  5909  0018BE  5C1E               	subwf	??_drawFastVLine+2,w,c
  5910  0018C0  A0D8               	btfss	status,0,c
  5911  0018C2  D005               	goto	l5273
  5912  0018C4                     u3790:
  5913                           
  5914                           ;ST7735_TFT.c: 421: h = 160 - y;
  5915  0018C4  5018               	movf	drawFastVLine@y,w,c
  5916  0018C6  0800               	sublw	0
  5917  0018C8  0FA0               	addlw	160
  5918  0018CA  6E19               	movwf	drawFastVLine@h,c
  5919  0018CC  D000               	goto	l5273
  5920  0018CE                     l5273:
  5921                           
  5922                           ;ST7735_TFT.c: 422: hi = color >> 8; lo = color;
  5923  0018CE  501B               	movf	drawFastVLine@color+1,w,c
  5924  0018D0  6E20               	movwf	drawFastVLine@hi,c
  5925  0018D2  C01A  F021         	movff	drawFastVLine@color,drawFastVLine@lo
  5926                           
  5927                           ;ST7735_TFT.c: 423: setAddrWindow(x, y, x, y + h - 1);
  5928  0018D6  C018  F014         	movff	drawFastVLine@y,setAddrWindow@y0
  5929  0018DA  C022  F015         	movff	drawFastVLine@x,setAddrWindow@x1
  5930  0018DE  5018               	movf	drawFastVLine@y,w,c
  5931  0018E0  2419               	addwf	drawFastVLine@h,w,c
  5932  0018E2  6E1C               	movwf	??_drawFastVLine& (0+255),c
  5933  0018E4  041C               	decf	??_drawFastVLine,w,c
  5934  0018E6  6E16               	movwf	setAddrWindow@y1,c
  5935  0018E8  5022               	movf	drawFastVLine@x,w,c
  5936  0018EA  EC3D  F00E         	call	_setAddrWindow
  5937                           
  5938                           ;ST7735_TFT.c: 424: PORTDbits.RD0 = 1;
  5939  0018EE  8083               	bsf	3971,0,c	;volatile
  5940                           
  5941                           ;ST7735_TFT.c: 425: PORTDbits.RD1 = 0;
  5942  0018F0  9283               	bcf	3971,1,c	;volatile
  5943                           
  5944                           ;ST7735_TFT.c: 427: while (h--) {
  5945  0018F2  D007               	goto	l5285
  5946  0018F4                     l5283:
  5947                           
  5948                           ;ST7735_TFT.c: 428: spiwrite(hi);
  5949  0018F4  5020               	movf	drawFastVLine@hi,w,c
  5950  0018F6  EC8D  F010         	call	_spiwrite
  5951                           
  5952                           ;ST7735_TFT.c: 429: spiwrite(lo);
  5953  0018FA  5021               	movf	drawFastVLine@lo,w,c
  5954  0018FC  EC8D  F010         	call	_spiwrite
  5955  001900  D000               	goto	l5285
  5956  001902                     l5285:
  5957  001902  0619               	decf	drawFastVLine@h,f,c
  5958  001904  2819               	incf	drawFastVLine@h,w,c
  5959  001906  A4D8               	btfss	status,2,c
  5960  001908  D7F5               	goto	l5283
  5961                           
  5962                           ;ST7735_TFT.c: 430: }
  5963                           ;ST7735_TFT.c: 431: PORTDbits.RD1 = 1;
  5964  00190A  8283               	bsf	3971,1,c	;volatile
  5965  00190C                     l544:
  5966  00190C  0012               	return		;funcret
  5967  00190E                     __end_of_drawFastVLine:
  5968                           	opt stack 0
  5969                           tblptru	equ	0xFF8
  5970                           tblptrh	equ	0xFF7
  5971                           tblptrl	equ	0xFF6
  5972                           tablat	equ	0xFF5
  5973                           prodh	equ	0xFF4
  5974                           prodl	equ	0xFF3
  5975                           intcon	equ	0xFF2
  5976                           intcon2	equ	0xFF1
  5977                           postinc0	equ	0xFEE
  5978                           wreg	equ	0xFE8
  5979                           postdec1	equ	0xFE5
  5980                           fsr1l	equ	0xFE1
  5981                           indf2	equ	0xFDF
  5982                           postinc2	equ	0xFDE
  5983                           postdec2	equ	0xFDD
  5984                           fsr2h	equ	0xFDA
  5985                           fsr2l	equ	0xFD9
  5986                           status	equ	0xFD8
  5987                           
  5988 ;; *************** function _drawCircle *****************
  5989 ;; Defined at:
  5990 ;;		line 527 in file "ST7735_TFT.c"
  5991 ;; Parameters:    Size  Location     Type
  5992 ;;  x0              2   27[COMRAM] int 
  5993 ;;  y0              2   29[COMRAM] int 
  5994 ;;  r               2   31[COMRAM] int 
  5995 ;;  color           2   33[COMRAM] unsigned int 
  5996 ;; Auto vars:     Size  Location     Type
  5997 ;;  y               2   45[COMRAM] int 
  5998 ;;  x               2   43[COMRAM] int 
  5999 ;;  f               2   41[COMRAM] int 
  6000 ;;  ddF_y           2   39[COMRAM] int 
  6001 ;;  ddF_x           2   37[COMRAM] int 
  6002 ;; Return value:  Size  Location     Type
  6003 ;;		None               void
  6004 ;; Registers used:
  6005 ;;		wreg, status,2, status,0, cstack
  6006 ;; Tracked objects:
  6007 ;;		On entry : 0/0
  6008 ;;		On exit  : 0/0
  6009 ;;		Unchanged: 0/0
  6010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6011 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6012 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6013 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6014 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6015 ;;Total ram usage:       20 bytes
  6016 ;; Hardware stack levels used:    1
  6017 ;; Hardware stack levels required when called:    7
  6018 ;; This function calls:
  6019 ;;		_drawPixel
  6020 ;; This function is called by:
  6021 ;;		_Initialize_Screen
  6022 ;; This function uses a non-reentrant model
  6023 ;;
  6024                           
  6025                           	psect	text20
  6026  0009A0                     __ptext20:
  6027                           	opt stack 0
  6028  0009A0                     _drawCircle:
  6029                           	opt stack 22
  6030                           
  6031                           ;ST7735_TFT.c: 529: signed int f, ddF_x, ddF_y, x, y;
  6032                           ;ST7735_TFT.c: 530: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  6033                           
  6034                           ;incstack = 0
  6035  0009A0  C020  F024         	movff	drawCircle@r,??_drawCircle
  6036  0009A4  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
  6037  0009A8  1E24               	comf	??_drawCircle,f,c
  6038  0009AA  1E25               	comf	??_drawCircle+1,f,c
  6039  0009AC  4A24               	infsnz	??_drawCircle,f,c
  6040  0009AE  2A25               	incf	??_drawCircle+1,f,c
  6041  0009B0  0E01               	movlw	1
  6042  0009B2  2424               	addwf	??_drawCircle,w,c
  6043  0009B4  6E2A               	movwf	drawCircle@f,c
  6044  0009B6  0E00               	movlw	0
  6045  0009B8  2025               	addwfc	??_drawCircle+1,w,c
  6046  0009BA  6E2B               	movwf	drawCircle@f+1,c
  6047  0009BC  0E00               	movlw	0
  6048  0009BE  6E27               	movwf	drawCircle@ddF_x+1,c
  6049  0009C0  0E01               	movlw	1
  6050  0009C2  6E26               	movwf	drawCircle@ddF_x,c
  6051  0009C4  C020  F024         	movff	drawCircle@r,??_drawCircle
  6052  0009C8  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
  6053  0009CC  90D8               	bcf	status,0,c
  6054  0009CE  3624               	rlcf	??_drawCircle,f,c
  6055  0009D0  3625               	rlcf	??_drawCircle+1,f,c
  6056  0009D2  1E24               	comf	??_drawCircle,f,c
  6057  0009D4  1E25               	comf	??_drawCircle+1,f,c
  6058  0009D6  4A24               	infsnz	??_drawCircle,f,c
  6059  0009D8  2A25               	incf	??_drawCircle+1,f,c
  6060  0009DA  C024  F028         	movff	??_drawCircle,drawCircle@ddF_y
  6061  0009DE  C025  F029         	movff	??_drawCircle+1,drawCircle@ddF_y+1
  6062  0009E2  0E00               	movlw	0
  6063  0009E4  6E2D               	movwf	drawCircle@x+1,c
  6064  0009E6  0E00               	movlw	0
  6065  0009E8  6E2C               	movwf	drawCircle@x,c
  6066  0009EA  C020  F02E         	movff	drawCircle@r,drawCircle@y
  6067  0009EE  C021  F02F         	movff	drawCircle@r+1,drawCircle@y+1
  6068                           
  6069                           ;ST7735_TFT.c: 531: drawPixel(x0 , y0 + r, color);
  6070  0009F2  501E               	movf	drawCircle@y0,w,c
  6071  0009F4  2420               	addwf	drawCircle@r,w,c
  6072  0009F6  6E18               	movwf	drawPixel@y,c
  6073  0009F8  C022  F019         	movff	drawCircle@color,drawPixel@color
  6074  0009FC  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6075  000A00  501C               	movf	drawCircle@x0,w,c
  6076  000A02  ECC5  F00F         	call	_drawPixel
  6077                           
  6078                           ;ST7735_TFT.c: 532: drawPixel(x0 , y0 - r, color);
  6079  000A06  5020               	movf	drawCircle@r,w,c
  6080  000A08  0800               	sublw	0
  6081  000A0A  241E               	addwf	drawCircle@y0,w,c
  6082  000A0C  6E18               	movwf	drawPixel@y,c
  6083  000A0E  C022  F019         	movff	drawCircle@color,drawPixel@color
  6084  000A12  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6085  000A16  501C               	movf	drawCircle@x0,w,c
  6086  000A18  ECC5  F00F         	call	_drawPixel
  6087                           
  6088                           ;ST7735_TFT.c: 533: drawPixel(x0+r, y0 , color);
  6089  000A1C  C01E  F018         	movff	drawCircle@y0,drawPixel@y
  6090  000A20  C022  F019         	movff	drawCircle@color,drawPixel@color
  6091  000A24  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6092  000A28  501C               	movf	drawCircle@x0,w,c
  6093  000A2A  2420               	addwf	drawCircle@r,w,c
  6094  000A2C  ECC5  F00F         	call	_drawPixel
  6095                           
  6096                           ;ST7735_TFT.c: 534: drawPixel(x0-r, y0 , color);
  6097  000A30  C01E  F018         	movff	drawCircle@y0,drawPixel@y
  6098  000A34  C022  F019         	movff	drawCircle@color,drawPixel@color
  6099  000A38  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6100  000A3C  5020               	movf	drawCircle@r,w,c
  6101  000A3E  0800               	sublw	0
  6102  000A40  241C               	addwf	drawCircle@x0,w,c
  6103  000A42  ECC5  F00F         	call	_drawPixel
  6104                           
  6105                           ;ST7735_TFT.c: 535: while (x < y) {
  6106  000A46  D078               	goto	l6003
  6107  000A48                     l5975:
  6108                           
  6109                           ;ST7735_TFT.c: 536: if (f >= 0) {
  6110  000A48  BE2B               	btfsc	drawCircle@f+1,7,c
  6111  000A4A  D00B               	goto	l608
  6112                           
  6113                           ;ST7735_TFT.c: 537: y--;
  6114  000A4C  062E               	decf	drawCircle@y,f,c
  6115  000A4E  A0D8               	btfss	status,0,c
  6116  000A50  062F               	decf	drawCircle@y+1,f,c
  6117                           
  6118                           ;ST7735_TFT.c: 538: ddF_y += 2;
  6119  000A52  0E02               	movlw	2
  6120  000A54  2628               	addwf	drawCircle@ddF_y,f,c
  6121  000A56  0E00               	movlw	0
  6122  000A58  2229               	addwfc	drawCircle@ddF_y+1,f,c
  6123                           
  6124                           ;ST7735_TFT.c: 539: f += ddF_y;
  6125  000A5A  5028               	movf	drawCircle@ddF_y,w,c
  6126  000A5C  262A               	addwf	drawCircle@f,f,c
  6127  000A5E  5029               	movf	drawCircle@ddF_y+1,w,c
  6128  000A60  222B               	addwfc	drawCircle@f+1,f,c
  6129  000A62                     l608:
  6130                           
  6131                           ;ST7735_TFT.c: 540: }
  6132                           ;ST7735_TFT.c: 541: x++;
  6133  000A62  4A2C               	infsnz	drawCircle@x,f,c
  6134  000A64  2A2D               	incf	drawCircle@x+1,f,c
  6135                           
  6136                           ;ST7735_TFT.c: 542: ddF_x += 2;
  6137  000A66  0E02               	movlw	2
  6138  000A68  2626               	addwf	drawCircle@ddF_x,f,c
  6139  000A6A  0E00               	movlw	0
  6140  000A6C  2227               	addwfc	drawCircle@ddF_x+1,f,c
  6141                           
  6142                           ;ST7735_TFT.c: 543: f += ddF_x;
  6143  000A6E  5026               	movf	drawCircle@ddF_x,w,c
  6144  000A70  262A               	addwf	drawCircle@f,f,c
  6145  000A72  5027               	movf	drawCircle@ddF_x+1,w,c
  6146  000A74  222B               	addwfc	drawCircle@f+1,f,c
  6147                           
  6148                           ;ST7735_TFT.c: 544: drawPixel(x0 + x, y0 + y, color);
  6149  000A76  501E               	movf	drawCircle@y0,w,c
  6150  000A78  242E               	addwf	drawCircle@y,w,c
  6151  000A7A  6E18               	movwf	drawPixel@y,c
  6152  000A7C  C022  F019         	movff	drawCircle@color,drawPixel@color
  6153  000A80  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6154  000A84  501C               	movf	drawCircle@x0,w,c
  6155  000A86  242C               	addwf	drawCircle@x,w,c
  6156  000A88  ECC5  F00F         	call	_drawPixel
  6157                           
  6158                           ;ST7735_TFT.c: 545: drawPixel(x0 - x, y0 + y, color);
  6159  000A8C  501E               	movf	drawCircle@y0,w,c
  6160  000A8E  242E               	addwf	drawCircle@y,w,c
  6161  000A90  6E18               	movwf	drawPixel@y,c
  6162  000A92  C022  F019         	movff	drawCircle@color,drawPixel@color
  6163  000A96  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6164  000A9A  502C               	movf	drawCircle@x,w,c
  6165  000A9C  0800               	sublw	0
  6166  000A9E  241C               	addwf	drawCircle@x0,w,c
  6167  000AA0  ECC5  F00F         	call	_drawPixel
  6168                           
  6169                           ;ST7735_TFT.c: 546: drawPixel(x0 + x, y0 - y, color);
  6170  000AA4  502E               	movf	drawCircle@y,w,c
  6171  000AA6  0800               	sublw	0
  6172  000AA8  241E               	addwf	drawCircle@y0,w,c
  6173  000AAA  6E18               	movwf	drawPixel@y,c
  6174  000AAC  C022  F019         	movff	drawCircle@color,drawPixel@color
  6175  000AB0  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6176  000AB4  501C               	movf	drawCircle@x0,w,c
  6177  000AB6  242C               	addwf	drawCircle@x,w,c
  6178  000AB8  ECC5  F00F         	call	_drawPixel
  6179                           
  6180                           ;ST7735_TFT.c: 547: drawPixel(x0 - x, y0 - y, color);
  6181  000ABC  502E               	movf	drawCircle@y,w,c
  6182  000ABE  0800               	sublw	0
  6183  000AC0  241E               	addwf	drawCircle@y0,w,c
  6184  000AC2  6E18               	movwf	drawPixel@y,c
  6185  000AC4  C022  F019         	movff	drawCircle@color,drawPixel@color
  6186  000AC8  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6187  000ACC  502C               	movf	drawCircle@x,w,c
  6188  000ACE  0800               	sublw	0
  6189  000AD0  241C               	addwf	drawCircle@x0,w,c
  6190  000AD2  ECC5  F00F         	call	_drawPixel
  6191                           
  6192                           ;ST7735_TFT.c: 548: drawPixel(x0 + y, y0 + x, color);
  6193  000AD6  501E               	movf	drawCircle@y0,w,c
  6194  000AD8  242C               	addwf	drawCircle@x,w,c
  6195  000ADA  6E18               	movwf	drawPixel@y,c
  6196  000ADC  C022  F019         	movff	drawCircle@color,drawPixel@color
  6197  000AE0  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6198  000AE4  501C               	movf	drawCircle@x0,w,c
  6199  000AE6  242E               	addwf	drawCircle@y,w,c
  6200  000AE8  ECC5  F00F         	call	_drawPixel
  6201                           
  6202                           ;ST7735_TFT.c: 549: drawPixel(x0 - y, y0 + x, color);
  6203  000AEC  501E               	movf	drawCircle@y0,w,c
  6204  000AEE  242C               	addwf	drawCircle@x,w,c
  6205  000AF0  6E18               	movwf	drawPixel@y,c
  6206  000AF2  C022  F019         	movff	drawCircle@color,drawPixel@color
  6207  000AF6  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6208  000AFA  502E               	movf	drawCircle@y,w,c
  6209  000AFC  0800               	sublw	0
  6210  000AFE  241C               	addwf	drawCircle@x0,w,c
  6211  000B00  ECC5  F00F         	call	_drawPixel
  6212                           
  6213                           ;ST7735_TFT.c: 550: drawPixel(x0 + y, y0 - x, color);
  6214  000B04  502C               	movf	drawCircle@x,w,c
  6215  000B06  0800               	sublw	0
  6216  000B08  241E               	addwf	drawCircle@y0,w,c
  6217  000B0A  6E18               	movwf	drawPixel@y,c
  6218  000B0C  C022  F019         	movff	drawCircle@color,drawPixel@color
  6219  000B10  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6220  000B14  501C               	movf	drawCircle@x0,w,c
  6221  000B16  242E               	addwf	drawCircle@y,w,c
  6222  000B18  ECC5  F00F         	call	_drawPixel
  6223                           
  6224                           ;ST7735_TFT.c: 551: drawPixel(x0 - y, y0 - x, color);
  6225  000B1C  502C               	movf	drawCircle@x,w,c
  6226  000B1E  0800               	sublw	0
  6227  000B20  241E               	addwf	drawCircle@y0,w,c
  6228  000B22  6E18               	movwf	drawPixel@y,c
  6229  000B24  C022  F019         	movff	drawCircle@color,drawPixel@color
  6230  000B28  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6231  000B2C  502E               	movf	drawCircle@y,w,c
  6232  000B2E  0800               	sublw	0
  6233  000B30  241C               	addwf	drawCircle@x0,w,c
  6234  000B32  ECC5  F00F         	call	_drawPixel
  6235  000B36  D000               	goto	l6003
  6236  000B38                     l6003:
  6237  000B38  502E               	movf	drawCircle@y,w,c
  6238  000B3A  5C2C               	subwf	drawCircle@x,w,c
  6239  000B3C  502D               	movf	drawCircle@x+1,w,c
  6240  000B3E  0A80               	xorlw	128
  6241  000B40  6E24               	movwf	??_drawCircle& (0+255),c
  6242  000B42  502F               	movf	drawCircle@y+1,w,c
  6243  000B44  0A80               	xorlw	128
  6244  000B46  5824               	subwfb	??_drawCircle& (0+255),w,c
  6245  000B48  A0D8               	btfss	status,0,c
  6246  000B4A  D77E               	goto	l5975
  6247  000B4C  0012               	return		;funcret
  6248  000B4E                     __end_of_drawCircle:
  6249                           	opt stack 0
  6250                           tblptru	equ	0xFF8
  6251                           tblptrh	equ	0xFF7
  6252                           tblptrl	equ	0xFF6
  6253                           tablat	equ	0xFF5
  6254                           prodh	equ	0xFF4
  6255                           prodl	equ	0xFF3
  6256                           intcon	equ	0xFF2
  6257                           intcon2	equ	0xFF1
  6258                           postinc0	equ	0xFEE
  6259                           wreg	equ	0xFE8
  6260                           postdec1	equ	0xFE5
  6261                           fsr1l	equ	0xFE1
  6262                           indf2	equ	0xFDF
  6263                           postinc2	equ	0xFDE
  6264                           postdec2	equ	0xFDD
  6265                           fsr2h	equ	0xFDA
  6266                           fsr2l	equ	0xFD9
  6267                           status	equ	0xFD8
  6268                           
  6269 ;; *************** function _drawPixel *****************
  6270 ;; Defined at:
  6271 ;;		line 406 in file "ST7735_TFT.c"
  6272 ;; Parameters:    Size  Location     Type
  6273 ;;  x               1    wreg     unsigned char 
  6274 ;;  y               1   23[COMRAM] unsigned char 
  6275 ;;  color           2   24[COMRAM] unsigned int 
  6276 ;; Auto vars:     Size  Location     Type
  6277 ;;  x               1   26[COMRAM] unsigned char 
  6278 ;; Return value:  Size  Location     Type
  6279 ;;		None               void
  6280 ;; Registers used:
  6281 ;;		wreg, status,2, status,0, cstack
  6282 ;; Tracked objects:
  6283 ;;		On entry : 0/0
  6284 ;;		On exit  : 0/0
  6285 ;;		Unchanged: 0/0
  6286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6287 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6288 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6289 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6290 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6291 ;;Total ram usage:        4 bytes
  6292 ;; Hardware stack levels used:    1
  6293 ;; Hardware stack levels required when called:    6
  6294 ;; This function calls:
  6295 ;;		_setAddrWindow
  6296 ;;		_write_data
  6297 ;; This function is called by:
  6298 ;;		_drawChar
  6299 ;;		_drawCircle
  6300 ;;		_drawCircleHelper
  6301 ;; This function uses a non-reentrant model
  6302 ;;
  6303                           
  6304                           	psect	text21
  6305  001F8A                     __ptext21:
  6306                           	opt stack 0
  6307  001F8A                     _drawPixel:
  6308                           	opt stack 21
  6309                           
  6310                           ;incstack = 0
  6311                           ;drawPixel@x stored from wreg
  6312  001F8A  6E1B               	movwf	drawPixel@x,c
  6313                           
  6314                           ;ST7735_TFT.c: 408: if((x >= 128) || (y >= 160))
  6315  001F8C  0E80               	movlw	128
  6316  001F8E  601B               	cpfslt	drawPixel@x,c
  6317  001F90  D013               	goto	l538
  6318  001F92  0E9F               	movlw	159
  6319  001F94  6418               	cpfsgt	drawPixel@y,c
  6320  001F96  D001               	goto	l5351
  6321                           
  6322                           ;ST7735_TFT.c: 409: return;
  6323  001F98  D00F               	goto	l538
  6324  001F9A                     l5351:
  6325                           
  6326                           ;ST7735_TFT.c: 410: setAddrWindow(x,y,x+1,y+1);
  6327  001F9A  C018  F014         	movff	drawPixel@y,setAddrWindow@y0
  6328  001F9E  281B               	incf	drawPixel@x,w,c
  6329  001FA0  6E15               	movwf	setAddrWindow@x1,c
  6330  001FA2  2818               	incf	drawPixel@y,w,c
  6331  001FA4  6E16               	movwf	setAddrWindow@y1,c
  6332  001FA6  501B               	movf	drawPixel@x,w,c
  6333  001FA8  EC3D  F00E         	call	_setAddrWindow
  6334                           
  6335                           ;ST7735_TFT.c: 411: write_data(color >> 8);
  6336  001FAC  501A               	movf	drawPixel@color+1,w,c
  6337  001FAE  ECE0  F010         	call	_write_data
  6338                           
  6339                           ;ST7735_TFT.c: 412: write_data(color & 0xFF);
  6340  001FB2  5019               	movf	drawPixel@color,w,c
  6341  001FB4  ECE0  F010         	call	_write_data
  6342  001FB8                     l538:
  6343  001FB8  0012               	return		;funcret
  6344  001FBA                     __end_of_drawPixel:
  6345                           	opt stack 0
  6346                           tblptru	equ	0xFF8
  6347                           tblptrh	equ	0xFF7
  6348                           tblptrl	equ	0xFF6
  6349                           tablat	equ	0xFF5
  6350                           prodh	equ	0xFF4
  6351                           prodl	equ	0xFF3
  6352                           intcon	equ	0xFF2
  6353                           intcon2	equ	0xFF1
  6354                           postinc0	equ	0xFEE
  6355                           wreg	equ	0xFE8
  6356                           postdec1	equ	0xFE5
  6357                           fsr1l	equ	0xFE1
  6358                           indf2	equ	0xFDF
  6359                           postinc2	equ	0xFDE
  6360                           postdec2	equ	0xFDD
  6361                           fsr2h	equ	0xFDA
  6362                           fsr2l	equ	0xFD9
  6363                           status	equ	0xFD8
  6364                           
  6365 ;; *************** function _setAddrWindow *****************
  6366 ;; Defined at:
  6367 ;;		line 391 in file "ST7735_TFT.c"
  6368 ;; Parameters:    Size  Location     Type
  6369 ;;  x0              1    wreg     unsigned char 
  6370 ;;  y0              1   19[COMRAM] unsigned char 
  6371 ;;  x1              1   20[COMRAM] unsigned char 
  6372 ;;  y1              1   21[COMRAM] unsigned char 
  6373 ;; Auto vars:     Size  Location     Type
  6374 ;;  x0              1   22[COMRAM] unsigned char 
  6375 ;; Return value:  Size  Location     Type
  6376 ;;		None               void
  6377 ;; Registers used:
  6378 ;;		wreg, status,2, status,0, cstack
  6379 ;; Tracked objects:
  6380 ;;		On entry : 0/0
  6381 ;;		On exit  : 0/0
  6382 ;;		Unchanged: 0/0
  6383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6384 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6385 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6386 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6387 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6388 ;;Total ram usage:        4 bytes
  6389 ;; Hardware stack levels used:    1
  6390 ;; Hardware stack levels required when called:    5
  6391 ;; This function calls:
  6392 ;;		_write_command
  6393 ;;		_write_data
  6394 ;; This function is called by:
  6395 ;;		_drawPixel
  6396 ;;		_drawFastVLine
  6397 ;;		_fillRectangle
  6398 ;;		_drawFastHLine
  6399 ;; This function uses a non-reentrant model
  6400 ;;
  6401                           
  6402                           	psect	text22
  6403  001C7A                     __ptext22:
  6404                           	opt stack 0
  6405  001C7A                     _setAddrWindow:
  6406                           	opt stack 20
  6407                           
  6408                           ;incstack = 0
  6409                           ;setAddrWindow@x0 stored from wreg
  6410  001C7A  6E17               	movwf	setAddrWindow@x0,c
  6411                           
  6412                           ;ST7735_TFT.c: 393: write_command(0x2A);
  6413  001C7C  0E2A               	movlw	42
  6414  001C7E  ECE8  F010         	call	_write_command
  6415                           
  6416                           ;ST7735_TFT.c: 394: write_data(0);
  6417  001C82  0E00               	movlw	0
  6418  001C84  ECE0  F010         	call	_write_data
  6419                           
  6420                           ;ST7735_TFT.c: 395: write_data(x0 + colstart);
  6421  001C88  5017               	movf	setAddrWindow@x0,w,c
  6422  001C8A  2459               	addwf	_colstart,w,c
  6423  001C8C  ECE0  F010         	call	_write_data
  6424                           
  6425                           ;ST7735_TFT.c: 396: write_data(0);
  6426  001C90  0E00               	movlw	0
  6427  001C92  ECE0  F010         	call	_write_data
  6428                           
  6429                           ;ST7735_TFT.c: 397: write_data(x1 + colstart);
  6430  001C96  5015               	movf	setAddrWindow@x1,w,c
  6431  001C98  2459               	addwf	_colstart,w,c
  6432  001C9A  ECE0  F010         	call	_write_data
  6433                           
  6434                           ;ST7735_TFT.c: 398: write_command(0x2B);
  6435  001C9E  0E2B               	movlw	43
  6436  001CA0  ECE8  F010         	call	_write_command
  6437                           
  6438                           ;ST7735_TFT.c: 399: write_data(0);
  6439  001CA4  0E00               	movlw	0
  6440  001CA6  ECE0  F010         	call	_write_data
  6441                           
  6442                           ;ST7735_TFT.c: 400: write_data(y0 + rowstart);
  6443  001CAA  5014               	movf	setAddrWindow@y0,w,c
  6444  001CAC  2461               	addwf	_rowstart,w,c
  6445  001CAE  ECE0  F010         	call	_write_data
  6446                           
  6447                           ;ST7735_TFT.c: 401: write_data(0);
  6448  001CB2  0E00               	movlw	0
  6449  001CB4  ECE0  F010         	call	_write_data
  6450                           
  6451                           ;ST7735_TFT.c: 402: write_data(y1 + rowstart);
  6452  001CB8  5016               	movf	setAddrWindow@y1,w,c
  6453  001CBA  2461               	addwf	_rowstart,w,c
  6454  001CBC  ECE0  F010         	call	_write_data
  6455                           
  6456                           ;ST7735_TFT.c: 403: write_command(0x2C);
  6457  001CC0  0E2C               	movlw	44
  6458  001CC2  ECE8  F010         	call	_write_command
  6459  001CC6  0012               	return		;funcret
  6460  001CC8                     __end_of_setAddrWindow:
  6461                           	opt stack 0
  6462                           tblptru	equ	0xFF8
  6463                           tblptrh	equ	0xFF7
  6464                           tblptrl	equ	0xFF6
  6465                           tablat	equ	0xFF5
  6466                           prodh	equ	0xFF4
  6467                           prodl	equ	0xFF3
  6468                           intcon	equ	0xFF2
  6469                           intcon2	equ	0xFF1
  6470                           postinc0	equ	0xFEE
  6471                           wreg	equ	0xFE8
  6472                           postdec1	equ	0xFE5
  6473                           fsr1l	equ	0xFE1
  6474                           indf2	equ	0xFDF
  6475                           postinc2	equ	0xFDE
  6476                           postdec2	equ	0xFDD
  6477                           fsr2h	equ	0xFDA
  6478                           fsr2l	equ	0xFD9
  6479                           status	equ	0xFD8
  6480                           
  6481 ;; *************** function _TFT_GreenTab_Initialize *****************
  6482 ;; Defined at:
  6483 ;;		line 643 in file "ST7735_TFT.c"
  6484 ;; Parameters:    Size  Location     Type
  6485 ;;		None
  6486 ;; Auto vars:     Size  Location     Type
  6487 ;;		None
  6488 ;; Return value:  Size  Location     Type
  6489 ;;		None               void
  6490 ;; Registers used:
  6491 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6492 ;; Tracked objects:
  6493 ;;		On entry : 0/0
  6494 ;;		On exit  : 0/0
  6495 ;;		Unchanged: 0/0
  6496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6497 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6498 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6499 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6500 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6501 ;;Total ram usage:        0 bytes
  6502 ;; Hardware stack levels used:    1
  6503 ;; Hardware stack levels required when called:    6
  6504 ;; This function calls:
  6505 ;;		_Rcmd1
  6506 ;;		_Rcmd2red
  6507 ;;		_Rcmd3
  6508 ;;		_write_command
  6509 ;;		_write_data
  6510 ;; This function is called by:
  6511 ;;		_Initialize_Screen
  6512 ;; This function uses a non-reentrant model
  6513 ;;
  6514                           
  6515                           	psect	text23
  6516  001FBA                     __ptext23:
  6517                           	opt stack 0
  6518  001FBA                     _TFT_GreenTab_Initialize:
  6519                           	opt stack 23
  6520                           
  6521                           ;ST7735_TFT.c: 645: PORTDbits.RD1 = 1;
  6522                           
  6523                           ;incstack = 0
  6524  001FBA  8283               	bsf	3971,1,c	;volatile
  6525                           
  6526                           ;ST7735_TFT.c: 646: PORTDbits.RD0 = 0;
  6527  001FBC  9083               	bcf	3971,0,c	;volatile
  6528                           
  6529                           ;ST7735_TFT.c: 648: SSPSTAT=0x80;
  6530  001FBE  0E80               	movlw	128
  6531  001FC0  6EC7               	movwf	4039,c	;volatile
  6532                           
  6533                           ;ST7735_TFT.c: 649: SSPCON1=0x30;
  6534  001FC2  0E30               	movlw	48
  6535  001FC4  6EC6               	movwf	4038,c	;volatile
  6536                           
  6537                           ;ST7735_TFT.c: 652: Rcmd1();
  6538  001FC6  EC65  F008         	call	_Rcmd1	;wreg free
  6539                           
  6540                           ;ST7735_TFT.c: 653: Rcmd2red();
  6541  001FCA  EC37  F00F         	call	_Rcmd2red	;wreg free
  6542                           
  6543                           ;ST7735_TFT.c: 654: Rcmd3();
  6544  001FCE  EC69  F009         	call	_Rcmd3	;wreg free
  6545                           
  6546                           ;ST7735_TFT.c: 655: write_command(0x36);
  6547  001FD2  0E36               	movlw	54
  6548  001FD4  ECE8  F010         	call	_write_command
  6549                           
  6550                           ;ST7735_TFT.c: 656: write_data(0xC0);
  6551  001FD8  0EC0               	movlw	192
  6552  001FDA  ECE0  F010         	call	_write_data
  6553                           
  6554                           ;ST7735_TFT.c: 657: _tft_type = 1;
  6555  001FDE  0E01               	movlw	1
  6556  001FE0  6E53               	movwf	__tft_type,c
  6557  001FE2  0012               	return		;funcret
  6558  001FE4                     __end_of_TFT_GreenTab_Initialize:
  6559                           	opt stack 0
  6560                           tblptru	equ	0xFF8
  6561                           tblptrh	equ	0xFF7
  6562                           tblptrl	equ	0xFF6
  6563                           tablat	equ	0xFF5
  6564                           prodh	equ	0xFF4
  6565                           prodl	equ	0xFF3
  6566                           intcon	equ	0xFF2
  6567                           intcon2	equ	0xFF1
  6568                           postinc0	equ	0xFEE
  6569                           wreg	equ	0xFE8
  6570                           postdec1	equ	0xFE5
  6571                           fsr1l	equ	0xFE1
  6572                           indf2	equ	0xFDF
  6573                           postinc2	equ	0xFDE
  6574                           postdec2	equ	0xFDD
  6575                           fsr2h	equ	0xFDA
  6576                           fsr2l	equ	0xFD9
  6577                           status	equ	0xFD8
  6578                           
  6579 ;; *************** function _Rcmd3 *****************
  6580 ;; Defined at:
  6581 ;;		line 337 in file "ST7735_TFT.c"
  6582 ;; Parameters:    Size  Location     Type
  6583 ;;		None
  6584 ;; Auto vars:     Size  Location     Type
  6585 ;;		None
  6586 ;; Return value:  Size  Location     Type
  6587 ;;		None               void
  6588 ;; Registers used:
  6589 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6590 ;; Tracked objects:
  6591 ;;		On entry : 0/0
  6592 ;;		On exit  : 0/0
  6593 ;;		Unchanged: 0/0
  6594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6595 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6596 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6597 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6598 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6599 ;;Total ram usage:        0 bytes
  6600 ;; Hardware stack levels used:    1
  6601 ;; Hardware stack levels required when called:    5
  6602 ;; This function calls:
  6603 ;;		_delay_ms
  6604 ;;		_write_command
  6605 ;;		_write_data
  6606 ;; This function is called by:
  6607 ;;		_TFT_GreenTab_Initialize
  6608 ;;		_TFT_BlackTab_Initialize
  6609 ;; This function uses a non-reentrant model
  6610 ;;
  6611                           
  6612                           	psect	text24
  6613  0012D2                     __ptext24:
  6614                           	opt stack 0
  6615  0012D2                     _Rcmd3:
  6616                           	opt stack 23
  6617                           
  6618                           ;ST7735_TFT.c: 339: write_command(0xE0);
  6619                           
  6620                           ;incstack = 0
  6621  0012D2  0EE0               	movlw	224
  6622  0012D4  ECE8  F010         	call	_write_command
  6623                           
  6624                           ;ST7735_TFT.c: 340: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
  6625  0012D8  0E02               	movlw	2
  6626  0012DA  ECE0  F010         	call	_write_data
  6627  0012DE  0E1C               	movlw	28
  6628  0012E0  ECE0  F010         	call	_write_data
  6629  0012E4  0E07               	movlw	7
  6630  0012E6  ECE0  F010         	call	_write_data
  6631  0012EA  0E12               	movlw	18
  6632  0012EC  ECE0  F010         	call	_write_data
  6633                           
  6634                           ;ST7735_TFT.c: 341: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
  6635  0012F0  0E37               	movlw	55
  6636  0012F2  ECE0  F010         	call	_write_data
  6637  0012F6  0E32               	movlw	50
  6638  0012F8  ECE0  F010         	call	_write_data
  6639  0012FC  0E29               	movlw	41
  6640  0012FE  ECE0  F010         	call	_write_data
  6641  001302  0E2D               	movlw	45
  6642  001304  ECE0  F010         	call	_write_data
  6643                           
  6644                           ;ST7735_TFT.c: 342: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
  6645  001308  0E29               	movlw	41
  6646  00130A  ECE0  F010         	call	_write_data
  6647  00130E  0E25               	movlw	37
  6648  001310  ECE0  F010         	call	_write_data
  6649  001314  0E2B               	movlw	43
  6650  001316  ECE0  F010         	call	_write_data
  6651  00131A  0E39               	movlw	57
  6652  00131C  ECE0  F010         	call	_write_data
  6653                           
  6654                           ;ST7735_TFT.c: 343: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
  6655  001320  0E00               	movlw	0
  6656  001322  ECE0  F010         	call	_write_data
  6657  001326  0E01               	movlw	1
  6658  001328  ECE0  F010         	call	_write_data
  6659  00132C  0E03               	movlw	3
  6660  00132E  ECE0  F010         	call	_write_data
  6661  001332  0E10               	movlw	16
  6662  001334  ECE0  F010         	call	_write_data
  6663                           
  6664                           ;ST7735_TFT.c: 344: write_command(0xE1);
  6665  001338  0EE1               	movlw	225
  6666  00133A  ECE8  F010         	call	_write_command
  6667                           
  6668                           ;ST7735_TFT.c: 345: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
  6669  00133E  0E03               	movlw	3
  6670  001340  ECE0  F010         	call	_write_data
  6671  001344  0E1D               	movlw	29
  6672  001346  ECE0  F010         	call	_write_data
  6673  00134A  0E07               	movlw	7
  6674  00134C  ECE0  F010         	call	_write_data
  6675  001350  0E06               	movlw	6
  6676  001352  ECE0  F010         	call	_write_data
  6677                           
  6678                           ;ST7735_TFT.c: 346: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
  6679  001356  0E2E               	movlw	46
  6680  001358  ECE0  F010         	call	_write_data
  6681  00135C  0E2C               	movlw	44
  6682  00135E  ECE0  F010         	call	_write_data
  6683  001362  0E29               	movlw	41
  6684  001364  ECE0  F010         	call	_write_data
  6685  001368  0E2D               	movlw	45
  6686  00136A  ECE0  F010         	call	_write_data
  6687                           
  6688                           ;ST7735_TFT.c: 347: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
  6689  00136E  0E2E               	movlw	46
  6690  001370  ECE0  F010         	call	_write_data
  6691  001374  0E2E               	movlw	46
  6692  001376  ECE0  F010         	call	_write_data
  6693  00137A  0E37               	movlw	55
  6694  00137C  ECE0  F010         	call	_write_data
  6695  001380  0E3F               	movlw	63
  6696  001382  ECE0  F010         	call	_write_data
  6697                           
  6698                           ;ST7735_TFT.c: 348: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
  6699  001386  0E00               	movlw	0
  6700  001388  ECE0  F010         	call	_write_data
  6701  00138C  0E00               	movlw	0
  6702  00138E  ECE0  F010         	call	_write_data
  6703  001392  0E02               	movlw	2
  6704  001394  ECE0  F010         	call	_write_data
  6705  001398  0E10               	movlw	16
  6706  00139A  ECE0  F010         	call	_write_data
  6707                           
  6708                           ;ST7735_TFT.c: 349: write_command(0x13);
  6709  00139E  0E13               	movlw	19
  6710  0013A0  ECE8  F010         	call	_write_command
  6711                           
  6712                           ;ST7735_TFT.c: 350: delay_ms(10);
  6713  0013A4  0E00               	movlw	0
  6714  0013A6  6E18               	movwf	delay_ms@ms+1,c
  6715  0013A8  0E0A               	movlw	10
  6716  0013AA  6E17               	movwf	delay_ms@ms,c
  6717  0013AC  EC14  F00E         	call	_delay_ms	;wreg free
  6718                           
  6719                           ;ST7735_TFT.c: 351: write_command(0x29);
  6720  0013B0  0E29               	movlw	41
  6721  0013B2  ECE8  F010         	call	_write_command
  6722                           
  6723                           ;ST7735_TFT.c: 352: delay_ms(100);
  6724  0013B6  0E00               	movlw	0
  6725  0013B8  6E18               	movwf	delay_ms@ms+1,c
  6726  0013BA  0E64               	movlw	100
  6727  0013BC  6E17               	movwf	delay_ms@ms,c
  6728  0013BE  EC14  F00E         	call	_delay_ms	;wreg free
  6729  0013C2  0012               	return		;funcret
  6730  0013C4                     __end_of_Rcmd3:
  6731                           	opt stack 0
  6732                           tblptru	equ	0xFF8
  6733                           tblptrh	equ	0xFF7
  6734                           tblptrl	equ	0xFF6
  6735                           tablat	equ	0xFF5
  6736                           prodh	equ	0xFF4
  6737                           prodl	equ	0xFF3
  6738                           intcon	equ	0xFF2
  6739                           intcon2	equ	0xFF1
  6740                           postinc0	equ	0xFEE
  6741                           wreg	equ	0xFE8
  6742                           postdec1	equ	0xFE5
  6743                           fsr1l	equ	0xFE1
  6744                           indf2	equ	0xFDF
  6745                           postinc2	equ	0xFDE
  6746                           postdec2	equ	0xFDD
  6747                           fsr2h	equ	0xFDA
  6748                           fsr2l	equ	0xFD9
  6749                           status	equ	0xFD8
  6750                           
  6751 ;; *************** function _Rcmd2red *****************
  6752 ;; Defined at:
  6753 ;;		line 327 in file "ST7735_TFT.c"
  6754 ;; Parameters:    Size  Location     Type
  6755 ;;		None
  6756 ;; Auto vars:     Size  Location     Type
  6757 ;;		None
  6758 ;; Return value:  Size  Location     Type
  6759 ;;		None               void
  6760 ;; Registers used:
  6761 ;;		wreg, status,2, cstack
  6762 ;; Tracked objects:
  6763 ;;		On entry : 0/0
  6764 ;;		On exit  : 0/0
  6765 ;;		Unchanged: 0/0
  6766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6768 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6769 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6770 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6771 ;;Total ram usage:        0 bytes
  6772 ;; Hardware stack levels used:    1
  6773 ;; Hardware stack levels required when called:    5
  6774 ;; This function calls:
  6775 ;;		_write_command
  6776 ;;		_write_data
  6777 ;; This function is called by:
  6778 ;;		_TFT_GreenTab_Initialize
  6779 ;; This function uses a non-reentrant model
  6780 ;;
  6781                           
  6782                           	psect	text25
  6783  001E6E                     __ptext25:
  6784                           	opt stack 0
  6785  001E6E                     _Rcmd2red:
  6786                           	opt stack 23
  6787                           
  6788                           ;ST7735_TFT.c: 329: write_command(0x2A);
  6789                           
  6790                           ;incstack = 0
  6791  001E6E  0E2A               	movlw	42
  6792  001E70  ECE8  F010         	call	_write_command
  6793                           
  6794                           ;ST7735_TFT.c: 330: write_data(0x00); write_data(0x00);
  6795  001E74  0E00               	movlw	0
  6796  001E76  ECE0  F010         	call	_write_data
  6797  001E7A  0E00               	movlw	0
  6798  001E7C  ECE0  F010         	call	_write_data
  6799                           
  6800                           ;ST7735_TFT.c: 331: write_data(0x00); write_data(0x7F);
  6801  001E80  0E00               	movlw	0
  6802  001E82  ECE0  F010         	call	_write_data
  6803  001E86  0E7F               	movlw	127
  6804  001E88  ECE0  F010         	call	_write_data
  6805                           
  6806                           ;ST7735_TFT.c: 332: write_command(0x2B);
  6807  001E8C  0E2B               	movlw	43
  6808  001E8E  ECE8  F010         	call	_write_command
  6809                           
  6810                           ;ST7735_TFT.c: 333: write_data(0x00); write_data(0x00);
  6811  001E92  0E00               	movlw	0
  6812  001E94  ECE0  F010         	call	_write_data
  6813  001E98  0E00               	movlw	0
  6814  001E9A  ECE0  F010         	call	_write_data
  6815                           
  6816                           ;ST7735_TFT.c: 334: write_data(0x00); write_data(0x9F);
  6817  001E9E  0E00               	movlw	0
  6818  001EA0  ECE0  F010         	call	_write_data
  6819  001EA4  0E9F               	movlw	159
  6820  001EA6  ECE0  F010         	call	_write_data
  6821  001EAA  0012               	return		;funcret
  6822  001EAC                     __end_of_Rcmd2red:
  6823                           	opt stack 0
  6824                           tblptru	equ	0xFF8
  6825                           tblptrh	equ	0xFF7
  6826                           tblptrl	equ	0xFF6
  6827                           tablat	equ	0xFF5
  6828                           prodh	equ	0xFF4
  6829                           prodl	equ	0xFF3
  6830                           intcon	equ	0xFF2
  6831                           intcon2	equ	0xFF1
  6832                           postinc0	equ	0xFEE
  6833                           wreg	equ	0xFE8
  6834                           postdec1	equ	0xFE5
  6835                           fsr1l	equ	0xFE1
  6836                           indf2	equ	0xFDF
  6837                           postinc2	equ	0xFDE
  6838                           postdec2	equ	0xFDD
  6839                           fsr2h	equ	0xFDA
  6840                           fsr2l	equ	0xFD9
  6841                           status	equ	0xFD8
  6842                           
  6843 ;; *************** function _Rcmd1 *****************
  6844 ;; Defined at:
  6845 ;;		line 280 in file "ST7735_TFT.c"
  6846 ;; Parameters:    Size  Location     Type
  6847 ;;		None
  6848 ;; Auto vars:     Size  Location     Type
  6849 ;;		None
  6850 ;; Return value:  Size  Location     Type
  6851 ;;		None               void
  6852 ;; Registers used:
  6853 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6854 ;; Tracked objects:
  6855 ;;		On entry : 0/0
  6856 ;;		On exit  : 0/0
  6857 ;;		Unchanged: 0/0
  6858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6859 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6860 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6861 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6862 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6863 ;;Total ram usage:        0 bytes
  6864 ;; Hardware stack levels used:    1
  6865 ;; Hardware stack levels required when called:    5
  6866 ;; This function calls:
  6867 ;;		_delay_ms
  6868 ;;		_write_command
  6869 ;;		_write_data
  6870 ;; This function is called by:
  6871 ;;		_TFT_GreenTab_Initialize
  6872 ;;		_TFT_BlackTab_Initialize
  6873 ;; This function uses a non-reentrant model
  6874 ;;
  6875                           
  6876                           	psect	text26
  6877  0010CA                     __ptext26:
  6878                           	opt stack 0
  6879  0010CA                     _Rcmd1:
  6880                           	opt stack 23
  6881                           
  6882                           ;ST7735_TFT.c: 282: write_command(0x01);
  6883                           
  6884                           ;incstack = 0
  6885  0010CA  0E01               	movlw	1
  6886  0010CC  ECE8  F010         	call	_write_command
  6887                           
  6888                           ;ST7735_TFT.c: 283: delay_ms(150);
  6889  0010D0  0E00               	movlw	0
  6890  0010D2  6E18               	movwf	delay_ms@ms+1,c
  6891  0010D4  0E96               	movlw	150
  6892  0010D6  6E17               	movwf	delay_ms@ms,c
  6893  0010D8  EC14  F00E         	call	_delay_ms	;wreg free
  6894                           
  6895                           ;ST7735_TFT.c: 284: write_command(0x11);
  6896  0010DC  0E11               	movlw	17
  6897  0010DE  ECE8  F010         	call	_write_command
  6898                           
  6899                           ;ST7735_TFT.c: 285: delay_ms(500);
  6900  0010E2  0E01               	movlw	1
  6901  0010E4  6E18               	movwf	delay_ms@ms+1,c
  6902  0010E6  0EF4               	movlw	244
  6903  0010E8  6E17               	movwf	delay_ms@ms,c
  6904  0010EA  EC14  F00E         	call	_delay_ms	;wreg free
  6905                           
  6906                           ;ST7735_TFT.c: 286: write_command(0xB1);
  6907  0010EE  0EB1               	movlw	177
  6908  0010F0  ECE8  F010         	call	_write_command
  6909                           
  6910                           ;ST7735_TFT.c: 287: write_data(0x01);
  6911  0010F4  0E01               	movlw	1
  6912  0010F6  ECE0  F010         	call	_write_data
  6913                           
  6914                           ;ST7735_TFT.c: 288: write_data(0x2C);
  6915  0010FA  0E2C               	movlw	44
  6916  0010FC  ECE0  F010         	call	_write_data
  6917                           
  6918                           ;ST7735_TFT.c: 289: write_data(0x2D);
  6919  001100  0E2D               	movlw	45
  6920  001102  ECE0  F010         	call	_write_data
  6921                           
  6922                           ;ST7735_TFT.c: 290: write_command(0xB2);
  6923  001106  0EB2               	movlw	178
  6924  001108  ECE8  F010         	call	_write_command
  6925                           
  6926                           ;ST7735_TFT.c: 291: write_data(0x01);
  6927  00110C  0E01               	movlw	1
  6928  00110E  ECE0  F010         	call	_write_data
  6929                           
  6930                           ;ST7735_TFT.c: 292: write_data(0x2C);
  6931  001112  0E2C               	movlw	44
  6932  001114  ECE0  F010         	call	_write_data
  6933                           
  6934                           ;ST7735_TFT.c: 293: write_data(0x2D);
  6935  001118  0E2D               	movlw	45
  6936  00111A  ECE0  F010         	call	_write_data
  6937                           
  6938                           ;ST7735_TFT.c: 294: write_command(0xB3);
  6939  00111E  0EB3               	movlw	179
  6940  001120  ECE8  F010         	call	_write_command
  6941                           
  6942                           ;ST7735_TFT.c: 295: write_data(0x01);
  6943  001124  0E01               	movlw	1
  6944  001126  ECE0  F010         	call	_write_data
  6945                           
  6946                           ;ST7735_TFT.c: 296: write_data(0x2C);
  6947  00112A  0E2C               	movlw	44
  6948  00112C  ECE0  F010         	call	_write_data
  6949                           
  6950                           ;ST7735_TFT.c: 297: write_data(0x2D);
  6951  001130  0E2D               	movlw	45
  6952  001132  ECE0  F010         	call	_write_data
  6953                           
  6954                           ;ST7735_TFT.c: 298: write_data(0x01);
  6955  001136  0E01               	movlw	1
  6956  001138  ECE0  F010         	call	_write_data
  6957                           
  6958                           ;ST7735_TFT.c: 299: write_data(0x2C);
  6959  00113C  0E2C               	movlw	44
  6960  00113E  ECE0  F010         	call	_write_data
  6961                           
  6962                           ;ST7735_TFT.c: 300: write_data(0x2D);
  6963  001142  0E2D               	movlw	45
  6964  001144  ECE0  F010         	call	_write_data
  6965                           
  6966                           ;ST7735_TFT.c: 301: write_command(0xB4);
  6967  001148  0EB4               	movlw	180
  6968  00114A  ECE8  F010         	call	_write_command
  6969                           
  6970                           ;ST7735_TFT.c: 302: write_data(0x07);
  6971  00114E  0E07               	movlw	7
  6972  001150  ECE0  F010         	call	_write_data
  6973                           
  6974                           ;ST7735_TFT.c: 303: write_command(0xC0);
  6975  001154  0EC0               	movlw	192
  6976  001156  ECE8  F010         	call	_write_command
  6977                           
  6978                           ;ST7735_TFT.c: 304: write_data(0xA2);
  6979  00115A  0EA2               	movlw	162
  6980  00115C  ECE0  F010         	call	_write_data
  6981                           
  6982                           ;ST7735_TFT.c: 305: write_data(0x02);
  6983  001160  0E02               	movlw	2
  6984  001162  ECE0  F010         	call	_write_data
  6985                           
  6986                           ;ST7735_TFT.c: 306: write_data(0x84);
  6987  001166  0E84               	movlw	132
  6988  001168  ECE0  F010         	call	_write_data
  6989                           
  6990                           ;ST7735_TFT.c: 307: write_command(0xC1);
  6991  00116C  0EC1               	movlw	193
  6992  00116E  ECE8  F010         	call	_write_command
  6993                           
  6994                           ;ST7735_TFT.c: 308: write_data(0xC5);
  6995  001172  0EC5               	movlw	197
  6996  001174  ECE0  F010         	call	_write_data
  6997                           
  6998                           ;ST7735_TFT.c: 309: write_command(0xC2);
  6999  001178  0EC2               	movlw	194
  7000  00117A  ECE8  F010         	call	_write_command
  7001                           
  7002                           ;ST7735_TFT.c: 310: write_data(0x0A);
  7003  00117E  0E0A               	movlw	10
  7004  001180  ECE0  F010         	call	_write_data
  7005                           
  7006                           ;ST7735_TFT.c: 311: write_data(0x00);
  7007  001184  0E00               	movlw	0
  7008  001186  ECE0  F010         	call	_write_data
  7009                           
  7010                           ;ST7735_TFT.c: 312: write_command(0xC3);
  7011  00118A  0EC3               	movlw	195
  7012  00118C  ECE8  F010         	call	_write_command
  7013                           
  7014                           ;ST7735_TFT.c: 313: write_data(0x8A);
  7015  001190  0E8A               	movlw	138
  7016  001192  ECE0  F010         	call	_write_data
  7017                           
  7018                           ;ST7735_TFT.c: 314: write_data(0x2A);
  7019  001196  0E2A               	movlw	42
  7020  001198  ECE0  F010         	call	_write_data
  7021                           
  7022                           ;ST7735_TFT.c: 315: write_command(0xC4);
  7023  00119C  0EC4               	movlw	196
  7024  00119E  ECE8  F010         	call	_write_command
  7025                           
  7026                           ;ST7735_TFT.c: 316: write_data(0x8A);
  7027  0011A2  0E8A               	movlw	138
  7028  0011A4  ECE0  F010         	call	_write_data
  7029                           
  7030                           ;ST7735_TFT.c: 317: write_data(0xEE);
  7031  0011A8  0EEE               	movlw	238
  7032  0011AA  ECE0  F010         	call	_write_data
  7033                           
  7034                           ;ST7735_TFT.c: 318: write_command(0xC5);
  7035  0011AE  0EC5               	movlw	197
  7036  0011B0  ECE8  F010         	call	_write_command
  7037                           
  7038                           ;ST7735_TFT.c: 319: write_data(0x0E);
  7039  0011B4  0E0E               	movlw	14
  7040  0011B6  ECE0  F010         	call	_write_data
  7041                           
  7042                           ;ST7735_TFT.c: 320: write_command(0x20);
  7043  0011BA  0E20               	movlw	32
  7044  0011BC  ECE8  F010         	call	_write_command
  7045                           
  7046                           ;ST7735_TFT.c: 321: write_command(0x36);
  7047  0011C0  0E36               	movlw	54
  7048  0011C2  ECE8  F010         	call	_write_command
  7049                           
  7050                           ;ST7735_TFT.c: 322: write_data(0xC8);
  7051  0011C6  0EC8               	movlw	200
  7052  0011C8  ECE0  F010         	call	_write_data
  7053                           
  7054                           ;ST7735_TFT.c: 323: write_command(0x3A);
  7055  0011CC  0E3A               	movlw	58
  7056  0011CE  ECE8  F010         	call	_write_command
  7057                           
  7058                           ;ST7735_TFT.c: 324: write_data(0x05);
  7059  0011D2  0E05               	movlw	5
  7060  0011D4  ECE0  F010         	call	_write_data
  7061  0011D8  0012               	return		;funcret
  7062  0011DA                     __end_of_Rcmd1:
  7063                           	opt stack 0
  7064                           tblptru	equ	0xFF8
  7065                           tblptrh	equ	0xFF7
  7066                           tblptrl	equ	0xFF6
  7067                           tablat	equ	0xFF5
  7068                           prodh	equ	0xFF4
  7069                           prodl	equ	0xFF3
  7070                           intcon	equ	0xFF2
  7071                           intcon2	equ	0xFF1
  7072                           postinc0	equ	0xFEE
  7073                           wreg	equ	0xFE8
  7074                           postdec1	equ	0xFE5
  7075                           fsr1l	equ	0xFE1
  7076                           indf2	equ	0xFDF
  7077                           postinc2	equ	0xFDE
  7078                           postdec2	equ	0xFDD
  7079                           fsr2h	equ	0xFDA
  7080                           fsr2l	equ	0xFD9
  7081                           status	equ	0xFD8
  7082                           
  7083 ;; *************** function _write_data *****************
  7084 ;; Defined at:
  7085 ;;		line 208 in file "ST7735_TFT.c"
  7086 ;; Parameters:    Size  Location     Type
  7087 ;;  data_           1    wreg     unsigned char 
  7088 ;; Auto vars:     Size  Location     Type
  7089 ;;  data_           1   18[COMRAM] unsigned char 
  7090 ;; Return value:  Size  Location     Type
  7091 ;;		None               void
  7092 ;; Registers used:
  7093 ;;		wreg, status,2, cstack
  7094 ;; Tracked objects:
  7095 ;;		On entry : 0/0
  7096 ;;		On exit  : 0/0
  7097 ;;		Unchanged: 0/0
  7098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7099 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7100 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7101 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7102 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7103 ;;Total ram usage:        1 bytes
  7104 ;; Hardware stack levels used:    1
  7105 ;; Hardware stack levels required when called:    4
  7106 ;; This function calls:
  7107 ;;		_spiwrite
  7108 ;; This function is called by:
  7109 ;;		_Rcmd1
  7110 ;;		_Rcmd2red
  7111 ;;		_Rcmd3
  7112 ;;		_setAddrWindow
  7113 ;;		_drawPixel
  7114 ;;		_TFT_GreenTab_Initialize
  7115 ;;		_Bcmd
  7116 ;;		_setScrollDefinition
  7117 ;;		_Rcmd2green
  7118 ;;		_VerticalScroll
  7119 ;; This function uses a non-reentrant model
  7120 ;;
  7121                           
  7122                           	psect	text27
  7123  0021C0                     __ptext27:
  7124                           	opt stack 0
  7125  0021C0                     _write_data:
  7126                           	opt stack 20
  7127                           
  7128                           ;incstack = 0
  7129                           ;write_data@data_ stored from wreg
  7130  0021C0  6E13               	movwf	write_data@data_,c
  7131                           
  7132                           ;ST7735_TFT.c: 210: PORTDbits.RD1 = 0;
  7133  0021C2  9283               	bcf	3971,1,c	;volatile
  7134                           
  7135                           ;ST7735_TFT.c: 211: PORTDbits.RD0 = 1;
  7136  0021C4  8083               	bsf	3971,0,c	;volatile
  7137                           
  7138                           ;ST7735_TFT.c: 212: spiwrite(data_);
  7139  0021C6  5013               	movf	write_data@data_,w,c
  7140  0021C8  EC8D  F010         	call	_spiwrite
  7141                           
  7142                           ;ST7735_TFT.c: 213: PORTDbits.RD1 = 1;
  7143  0021CC  8283               	bsf	3971,1,c	;volatile
  7144  0021CE  0012               	return		;funcret
  7145  0021D0                     __end_of_write_data:
  7146                           	opt stack 0
  7147                           tblptru	equ	0xFF8
  7148                           tblptrh	equ	0xFF7
  7149                           tblptrl	equ	0xFF6
  7150                           tablat	equ	0xFF5
  7151                           prodh	equ	0xFF4
  7152                           prodl	equ	0xFF3
  7153                           intcon	equ	0xFF2
  7154                           intcon2	equ	0xFF1
  7155                           postinc0	equ	0xFEE
  7156                           wreg	equ	0xFE8
  7157                           postdec1	equ	0xFE5
  7158                           fsr1l	equ	0xFE1
  7159                           indf2	equ	0xFDF
  7160                           postinc2	equ	0xFDE
  7161                           postdec2	equ	0xFDD
  7162                           fsr2h	equ	0xFDA
  7163                           fsr2l	equ	0xFD9
  7164                           status	equ	0xFD8
  7165                           
  7166 ;; *************** function _write_command *****************
  7167 ;; Defined at:
  7168 ;;		line 197 in file "ST7735_TFT.c"
  7169 ;; Parameters:    Size  Location     Type
  7170 ;;  cmd_            1    wreg     unsigned char 
  7171 ;; Auto vars:     Size  Location     Type
  7172 ;;  cmd_            1   18[COMRAM] unsigned char 
  7173 ;; Return value:  Size  Location     Type
  7174 ;;		None               void
  7175 ;; Registers used:
  7176 ;;		wreg, status,2, cstack
  7177 ;; Tracked objects:
  7178 ;;		On entry : 0/0
  7179 ;;		On exit  : 0/0
  7180 ;;		Unchanged: 0/0
  7181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7182 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7183 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7184 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7185 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7186 ;;Total ram usage:        1 bytes
  7187 ;; Hardware stack levels used:    1
  7188 ;; Hardware stack levels required when called:    4
  7189 ;; This function calls:
  7190 ;;		_spiwrite
  7191 ;; This function is called by:
  7192 ;;		_Rcmd1
  7193 ;;		_Rcmd2red
  7194 ;;		_Rcmd3
  7195 ;;		_setAddrWindow
  7196 ;;		_TFT_GreenTab_Initialize
  7197 ;;		_Bcmd
  7198 ;;		_setScrollDefinition
  7199 ;;		_Rcmd2green
  7200 ;;		_VerticalScroll
  7201 ;; This function uses a non-reentrant model
  7202 ;;
  7203                           
  7204                           	psect	text28
  7205  0021D0                     __ptext28:
  7206                           	opt stack 0
  7207  0021D0                     _write_command:
  7208                           	opt stack 20
  7209                           
  7210                           ;incstack = 0
  7211                           ;write_command@cmd_ stored from wreg
  7212  0021D0  6E13               	movwf	write_command@cmd_,c
  7213                           
  7214                           ;ST7735_TFT.c: 199: PORTDbits.RD1 = 0;
  7215  0021D2  9283               	bcf	3971,1,c	;volatile
  7216                           
  7217                           ;ST7735_TFT.c: 201: PORTDbits.RD0 = 0;
  7218  0021D4  9083               	bcf	3971,0,c	;volatile
  7219                           
  7220                           ;ST7735_TFT.c: 202: spiwrite(cmd_);
  7221  0021D6  5013               	movf	write_command@cmd_,w,c
  7222  0021D8  EC8D  F010         	call	_spiwrite
  7223                           
  7224                           ;ST7735_TFT.c: 204: PORTDbits.RD1 = 1;
  7225  0021DC  8283               	bsf	3971,1,c	;volatile
  7226  0021DE  0012               	return		;funcret
  7227  0021E0                     __end_of_write_command:
  7228                           	opt stack 0
  7229                           tblptru	equ	0xFF8
  7230                           tblptrh	equ	0xFF7
  7231                           tblptrl	equ	0xFF6
  7232                           tablat	equ	0xFF5
  7233                           prodh	equ	0xFF4
  7234                           prodl	equ	0xFF3
  7235                           intcon	equ	0xFF2
  7236                           intcon2	equ	0xFF1
  7237                           postinc0	equ	0xFEE
  7238                           wreg	equ	0xFE8
  7239                           postdec1	equ	0xFE5
  7240                           fsr1l	equ	0xFE1
  7241                           indf2	equ	0xFDF
  7242                           postinc2	equ	0xFDE
  7243                           postdec2	equ	0xFDD
  7244                           fsr2h	equ	0xFDA
  7245                           fsr2l	equ	0xFD9
  7246                           status	equ	0xFD8
  7247                           
  7248 ;; *************** function _spiwrite *****************
  7249 ;; Defined at:
  7250 ;;		line 188 in file "ST7735_TFT.c"
  7251 ;; Parameters:    Size  Location     Type
  7252 ;;  spidata         1    wreg     unsigned char 
  7253 ;; Auto vars:     Size  Location     Type
  7254 ;;  spidata         1   17[COMRAM] unsigned char 
  7255 ;;  x               1   16[COMRAM] unsigned char 
  7256 ;; Return value:  Size  Location     Type
  7257 ;;		None               void
  7258 ;; Registers used:
  7259 ;;		wreg
  7260 ;; Tracked objects:
  7261 ;;		On entry : 0/0
  7262 ;;		On exit  : 0/0
  7263 ;;		Unchanged: 0/0
  7264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7265 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7266 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7267 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7268 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7269 ;;Total ram usage:        2 bytes
  7270 ;; Hardware stack levels used:    1
  7271 ;; Hardware stack levels required when called:    3
  7272 ;; This function calls:
  7273 ;;		Nothing
  7274 ;; This function is called by:
  7275 ;;		_write_command
  7276 ;;		_write_data
  7277 ;;		_drawFastVLine
  7278 ;;		_fillRectangle
  7279 ;;		_drawFastHLine
  7280 ;; This function uses a non-reentrant model
  7281 ;;
  7282                           
  7283                           	psect	text29
  7284  00211A                     __ptext29:
  7285                           	opt stack 0
  7286  00211A                     _spiwrite:
  7287                           	opt stack 22
  7288                           
  7289                           ;incstack = 0
  7290                           ;spiwrite@spidata stored from wreg
  7291  00211A  6E12               	movwf	spiwrite@spidata,c
  7292                           
  7293                           ;ST7735_TFT.c: 190: char x;
  7294                           ;ST7735_TFT.c: 191: PIR1bits.SSPIF = 0;
  7295  00211C  969E               	bcf	3998,3,c	;volatile
  7296                           
  7297                           ;ST7735_TFT.c: 192: x = SSPBUF;
  7298  00211E  CFC9 F011          	movff	4041,spiwrite@x	;volatile
  7299                           
  7300                           ;ST7735_TFT.c: 193: SSPBUF = spidata;
  7301  002122  C012  FFC9         	movff	spiwrite@spidata,4041	;volatile
  7302                           
  7303                           ;ST7735_TFT.c: 194: while (!SSPSTATbits.BF);
  7304  002126  D000               	goto	l494
  7305  002128                     l494:
  7306  002128  A0C7               	btfss	4039,0,c	;volatile
  7307  00212A  D7FE               	goto	l494
  7308  00212C  0012               	return		;funcret
  7309  00212E                     __end_of_spiwrite:
  7310                           	opt stack 0
  7311                           tblptru	equ	0xFF8
  7312                           tblptrh	equ	0xFF7
  7313                           tblptrl	equ	0xFF6
  7314                           tablat	equ	0xFF5
  7315                           prodh	equ	0xFF4
  7316                           prodl	equ	0xFF3
  7317                           intcon	equ	0xFF2
  7318                           intcon2	equ	0xFF1
  7319                           postinc0	equ	0xFEE
  7320                           wreg	equ	0xFE8
  7321                           postdec1	equ	0xFE5
  7322                           fsr1l	equ	0xFE1
  7323                           indf2	equ	0xFDF
  7324                           postinc2	equ	0xFDE
  7325                           postdec2	equ	0xFDD
  7326                           fsr2h	equ	0xFDA
  7327                           fsr2l	equ	0xFD9
  7328                           status	equ	0xFD8
  7329                           
  7330 ;; *************** function _LCD_Reset *****************
  7331 ;; Defined at:
  7332 ;;		line 216 in file "ST7735_TFT.c"
  7333 ;; Parameters:    Size  Location     Type
  7334 ;;		None
  7335 ;; Auto vars:     Size  Location     Type
  7336 ;;		None
  7337 ;; Return value:  Size  Location     Type
  7338 ;;		None               void
  7339 ;; Registers used:
  7340 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7341 ;; Tracked objects:
  7342 ;;		On entry : 0/0
  7343 ;;		On exit  : 0/0
  7344 ;;		Unchanged: 0/0
  7345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7346 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7347 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7348 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7349 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7350 ;;Total ram usage:        0 bytes
  7351 ;; Hardware stack levels used:    1
  7352 ;; Hardware stack levels required when called:    5
  7353 ;; This function calls:
  7354 ;;		_delay_ms
  7355 ;; This function is called by:
  7356 ;;		_Initialize_Screen
  7357 ;; This function uses a non-reentrant model
  7358 ;;
  7359                           
  7360                           	psect	text30
  7361  002156                     __ptext30:
  7362                           	opt stack 0
  7363  002156                     _LCD_Reset:
  7364                           	opt stack 24
  7365                           
  7366                           ;ST7735_TFT.c: 218: PORTDbits.RD2 = 0;
  7367                           
  7368                           ;incstack = 0
  7369  002156  9483               	bcf	3971,2,c	;volatile
  7370                           
  7371                           ;ST7735_TFT.c: 219: delay_ms(100);
  7372  002158  0E00               	movlw	0
  7373  00215A  6E18               	movwf	delay_ms@ms+1,c
  7374  00215C  0E64               	movlw	100
  7375  00215E  6E17               	movwf	delay_ms@ms,c
  7376  002160  EC14  F00E         	call	_delay_ms	;wreg free
  7377                           
  7378                           ;ST7735_TFT.c: 220: PORTDbits.RD2 = 1;
  7379  002164  8483               	bsf	3971,2,c	;volatile
  7380  002166  0012               	return		;funcret
  7381  002168                     __end_of_LCD_Reset:
  7382                           	opt stack 0
  7383                           tblptru	equ	0xFF8
  7384                           tblptrh	equ	0xFF7
  7385                           tblptrl	equ	0xFF6
  7386                           tablat	equ	0xFF5
  7387                           prodh	equ	0xFF4
  7388                           prodl	equ	0xFF3
  7389                           intcon	equ	0xFF2
  7390                           intcon2	equ	0xFF1
  7391                           postinc0	equ	0xFEE
  7392                           wreg	equ	0xFE8
  7393                           postdec1	equ	0xFE5
  7394                           fsr1l	equ	0xFE1
  7395                           indf2	equ	0xFDF
  7396                           postinc2	equ	0xFDE
  7397                           postdec2	equ	0xFDD
  7398                           fsr2h	equ	0xFDA
  7399                           fsr2l	equ	0xFD9
  7400                           status	equ	0xFD8
  7401                           
  7402 ;; *************** function _delay_ms *****************
  7403 ;; Defined at:
  7404 ;;		line 63 in file "ST7735_TFT.c"
  7405 ;; Parameters:    Size  Location     Type
  7406 ;;  ms              2   22[COMRAM] int 
  7407 ;; Auto vars:     Size  Location     Type
  7408 ;;  count           2   26[COMRAM] int 
  7409 ;; Return value:  Size  Location     Type
  7410 ;;		None               void
  7411 ;; Registers used:
  7412 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7413 ;; Tracked objects:
  7414 ;;		On entry : 0/0
  7415 ;;		On exit  : 0/0
  7416 ;;		Unchanged: 0/0
  7417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7418 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7419 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7420 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7421 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7422 ;;Total ram usage:        6 bytes
  7423 ;; Hardware stack levels used:    1
  7424 ;; Hardware stack levels required when called:    4
  7425 ;; This function calls:
  7426 ;;		___wmul
  7427 ;; This function is called by:
  7428 ;;		_LCD_Reset
  7429 ;;		_Rcmd1
  7430 ;;		_Rcmd3
  7431 ;;		_Bcmd
  7432 ;; This function uses a non-reentrant model
  7433 ;;
  7434                           
  7435                           	psect	text31
  7436  001C28                     __ptext31:
  7437                           	opt stack 0
  7438  001C28                     _delay_ms:
  7439                           	opt stack 23
  7440                           
  7441                           ;ST7735_TFT.c: 69: int count;
  7442                           ;ST7735_TFT.c: 70: count = 8000000/4000/8 * ms;
  7443                           
  7444                           ;incstack = 0
  7445  001C28  C017  F011         	movff	delay_ms@ms,___wmul@multiplier
  7446  001C2C  C018  F012         	movff	delay_ms@ms+1,___wmul@multiplier+1
  7447  001C30  0E00               	movlw	0
  7448  001C32  6E14               	movwf	___wmul@multiplicand+1,c
  7449  001C34  0EFA               	movlw	250
  7450  001C36  6E13               	movwf	___wmul@multiplicand,c
  7451  001C38  ECF2  F00F         	call	___wmul	;wreg free
  7452  001C3C  C011  F01B         	movff	?___wmul,delay_ms@count
  7453  001C40  C012  F01C         	movff	?___wmul+1,delay_ms@count+1
  7454                           
  7455                           ;ST7735_TFT.c: 71: count = (0xffff - count);
  7456  001C44  C01B  F019         	movff	delay_ms@count,??_delay_ms
  7457  001C48  C01C  F01A         	movff	delay_ms@count+1,??_delay_ms+1
  7458  001C4C  1E19               	comf	??_delay_ms,f,c
  7459  001C4E  1E1A               	comf	??_delay_ms+1,f,c
  7460  001C50  4A19               	infsnz	??_delay_ms,f,c
  7461  001C52  2A1A               	incf	??_delay_ms+1,f,c
  7462  001C54  0EFF               	movlw	255
  7463  001C56  2419               	addwf	??_delay_ms,w,c
  7464  001C58  6E1B               	movwf	delay_ms@count,c
  7465  001C5A  0EFF               	movlw	255
  7466  001C5C  201A               	addwfc	??_delay_ms+1,w,c
  7467  001C5E  6E1C               	movwf	delay_ms@count+1,c
  7468                           
  7469                           ;ST7735_TFT.c: 73: T3CON = 0xb8;
  7470  001C60  0EB8               	movlw	184
  7471  001C62  6EB1               	movwf	4017,c	;volatile
  7472                           
  7473                           ;ST7735_TFT.c: 75: TMR3L = count & 0x00ff;
  7474  001C64  C01B  FFB2         	movff	delay_ms@count,4018	;volatile
  7475                           
  7476                           ;ST7735_TFT.c: 76: TMR3H = count >> 8;
  7477  001C68  501C               	movf	delay_ms@count+1,w,c
  7478  001C6A  6EB3               	movwf	4019,c	;volatile
  7479                           
  7480                           ;ST7735_TFT.c: 78: PIR2bits.TMR3IF = 0;
  7481  001C6C  92A1               	bcf	4001,1,c	;volatile
  7482                           
  7483                           ;ST7735_TFT.c: 79: T3CONbits.TMR3ON = 1;
  7484  001C6E  80B1               	bsf	4017,0,c	;volatile
  7485                           
  7486                           ;ST7735_TFT.c: 81: while (PIR2bits.TMR3IF == 0);
  7487  001C70  D000               	goto	l484
  7488  001C72                     l484:
  7489  001C72  A2A1               	btfss	4001,1,c	;volatile
  7490  001C74  D7FE               	goto	l484
  7491                           
  7492                           ;ST7735_TFT.c: 82: T3CONbits.TMR3ON = 0;
  7493  001C76  90B1               	bcf	4017,0,c	;volatile
  7494  001C78  0012               	return		;funcret
  7495  001C7A                     __end_of_delay_ms:
  7496                           	opt stack 0
  7497                           tblptru	equ	0xFF8
  7498                           tblptrh	equ	0xFF7
  7499                           tblptrl	equ	0xFF6
  7500                           tablat	equ	0xFF5
  7501                           prodh	equ	0xFF4
  7502                           prodl	equ	0xFF3
  7503                           intcon	equ	0xFF2
  7504                           intcon2	equ	0xFF1
  7505                           postinc0	equ	0xFEE
  7506                           wreg	equ	0xFE8
  7507                           postdec1	equ	0xFE5
  7508                           fsr1l	equ	0xFE1
  7509                           indf2	equ	0xFDF
  7510                           postinc2	equ	0xFDE
  7511                           postdec2	equ	0xFDD
  7512                           fsr2h	equ	0xFDA
  7513                           fsr2l	equ	0xFD9
  7514                           status	equ	0xFD8
  7515                           
  7516 ;; *************** function ___wmul *****************
  7517 ;; Defined at:
  7518 ;;		line 15 in file "E:\XC8\sources\common\Umul16.c"
  7519 ;; Parameters:    Size  Location     Type
  7520 ;;  multiplier      2   16[COMRAM] unsigned int 
  7521 ;;  multiplicand    2   18[COMRAM] unsigned int 
  7522 ;; Auto vars:     Size  Location     Type
  7523 ;;  product         2   20[COMRAM] unsigned int 
  7524 ;; Return value:  Size  Location     Type
  7525 ;;                  2   16[COMRAM] unsigned int 
  7526 ;; Registers used:
  7527 ;;		wreg, status,2, status,0, prodl, prodh
  7528 ;; Tracked objects:
  7529 ;;		On entry : 0/0
  7530 ;;		On exit  : 0/0
  7531 ;;		Unchanged: 0/0
  7532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7533 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7534 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7535 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7536 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7537 ;;Total ram usage:        6 bytes
  7538 ;; Hardware stack levels used:    1
  7539 ;; Hardware stack levels required when called:    3
  7540 ;; This function calls:
  7541 ;;		Nothing
  7542 ;; This function is called by:
  7543 ;;		_main
  7544 ;;		_get_RPM
  7545 ;;		_delay_ms
  7546 ;;		_drawChar
  7547 ;;		_printf
  7548 ;; This function uses a non-reentrant model
  7549 ;;
  7550                           
  7551                           	psect	text32
  7552  001FE4                     __ptext32:
  7553                           	opt stack 0
  7554  001FE4                     ___wmul:
  7555                           	opt stack 26
  7556                           
  7557                           ;incstack = 0
  7558  001FE4  5011               	movf	___wmul@multiplier,w,c
  7559  001FE6  0213               	mulwf	___wmul@multiplicand,c
  7560  001FE8  CFF3 F015          	movff	prodl,___wmul@product
  7561  001FEC  CFF4 F016          	movff	prodh,___wmul@product+1
  7562  001FF0  5011               	movf	___wmul@multiplier,w,c
  7563  001FF2  0214               	mulwf	___wmul@multiplicand+1,c
  7564  001FF4  50F3               	movf	prodl,w,c
  7565  001FF6  2616               	addwf	___wmul@product+1,f,c
  7566  001FF8  5012               	movf	___wmul@multiplier+1,w,c
  7567  001FFA  0213               	mulwf	___wmul@multiplicand,c
  7568  001FFC  50F3               	movf	prodl,w,c
  7569  001FFE  2616               	addwf	___wmul@product+1,f,c
  7570  002000  C015  F011         	movff	___wmul@product,?___wmul
  7571  002004  C016  F012         	movff	___wmul@product+1,?___wmul+1
  7572  002008  D000               	goto	l875
  7573  00200A                     l875:
  7574  00200A  0012               	return		;funcret
  7575  00200C                     __end_of___wmul:
  7576                           	opt stack 0
  7577                           tblptru	equ	0xFF8
  7578                           tblptrh	equ	0xFF7
  7579                           tblptrl	equ	0xFF6
  7580                           tablat	equ	0xFF5
  7581                           prodh	equ	0xFF4
  7582                           prodl	equ	0xFF3
  7583                           intcon	equ	0xFF2
  7584                           intcon2	equ	0xFF1
  7585                           postinc0	equ	0xFEE
  7586                           wreg	equ	0xFE8
  7587                           postdec1	equ	0xFE5
  7588                           fsr1l	equ	0xFE1
  7589                           indf2	equ	0xFDF
  7590                           postinc2	equ	0xFDE
  7591                           postdec2	equ	0xFDD
  7592                           fsr2h	equ	0xFDA
  7593                           fsr2l	equ	0xFD9
  7594                           status	equ	0xFD8
  7595                           
  7596 ;; *************** function _Do_Init *****************
  7597 ;; Defined at:
  7598 ;;		line 88 in file "Lab11pA.c"
  7599 ;; Parameters:    Size  Location     Type
  7600 ;;		None
  7601 ;; Auto vars:     Size  Location     Type
  7602 ;;		None
  7603 ;; Return value:  Size  Location     Type
  7604 ;;		None               void
  7605 ;; Registers used:
  7606 ;;		wreg, status,2, status,0, cstack
  7607 ;; Tracked objects:
  7608 ;;		On entry : 0/0
  7609 ;;		On exit  : 0/0
  7610 ;;		Unchanged: 0/0
  7611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7612 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7613 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7614 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7615 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7616 ;;Total ram usage:        0 bytes
  7617 ;; Hardware stack levels used:    1
  7618 ;; Hardware stack levels required when called:    7
  7619 ;; This function calls:
  7620 ;;		_DS1621_Init
  7621 ;;		_I2C_Init
  7622 ;;		_Turn_Off_Fan
  7623 ;;		_init_INTERRUPT
  7624 ;;		_init_UART
  7625 ;; This function is called by:
  7626 ;;		_main
  7627 ;; This function uses a non-reentrant model
  7628 ;;
  7629                           
  7630                           	psect	text33
  7631  001D14                     __ptext33:
  7632                           	opt stack 0
  7633  001D14                     _Do_Init:
  7634                           	opt stack 23
  7635                           
  7636                           ;Lab11pA.c: 90: init_UART();
  7637                           
  7638                           ;incstack = 0
  7639  001D14  EC97  F010         	call	_init_UART	;wreg free
  7640                           
  7641                           ;Lab11pA.c: 91: OSCCON=0x70;
  7642  001D18  0E70               	movlw	112
  7643  001D1A  6ED3               	movwf	4051,c	;volatile
  7644                           
  7645                           ;Lab11pA.c: 93: ADCON1=0x0F;
  7646  001D1C  0E0F               	movlw	15
  7647  001D1E  6EC1               	movwf	4033,c	;volatile
  7648                           
  7649                           ;Lab11pA.c: 94: TRISA = 0x00;
  7650  001D20  0E00               	movlw	0
  7651  001D22  6E92               	movwf	3986,c	;volatile
  7652                           
  7653                           ;Lab11pA.c: 95: TRISB = 0x01;
  7654  001D24  0E01               	movlw	1
  7655  001D26  6E93               	movwf	3987,c	;volatile
  7656                           
  7657                           ;Lab11pA.c: 96: TRISC = 0x01;
  7658  001D28  0E01               	movlw	1
  7659  001D2A  6E94               	movwf	3988,c	;volatile
  7660                           
  7661                           ;Lab11pA.c: 97: TRISD = 0x00;
  7662  001D2C  0E00               	movlw	0
  7663  001D2E  6E95               	movwf	3989,c	;volatile
  7664                           
  7665                           ;Lab11pA.c: 99: FAN=0;
  7666  001D30  0E00               	movlw	0
  7667  001D32  6E50               	movwf	_FAN,c
  7668                           
  7669                           ;Lab11pA.c: 100: RBPU=0;
  7670  001D34  9EF1               	bcf	intcon2,7,c	;volatile
  7671                           
  7672                           ;Lab11pA.c: 101: TMR3L = 0x00;
  7673  001D36  0E00               	movlw	0
  7674  001D38  6EB2               	movwf	4018,c	;volatile
  7675                           
  7676                           ;Lab11pA.c: 102: T3CON = 0x03;
  7677  001D3A  0E03               	movlw	3
  7678  001D3C  6EB1               	movwf	4017,c	;volatile
  7679                           
  7680                           ;Lab11pA.c: 103: I2C_Init(100000);
  7681  001D3E  0EA0               	movlw	160
  7682  001D40  6E11               	movwf	I2C_Init@c,c
  7683  001D42  0E86               	movlw	134
  7684  001D44  6E12               	movwf	I2C_Init@c+1,c
  7685  001D46  0E01               	movlw	1
  7686  001D48  6E13               	movwf	I2C_Init@c+2,c
  7687  001D4A  0E00               	movlw	0
  7688  001D4C  6E14               	movwf	I2C_Init@c+3,c
  7689  001D4E  EC08  F011         	call	_I2C_Init	;wreg free
  7690                           
  7691                           ;Lab11pA.c: 105: DS1621_Init();
  7692  001D52  EC4B  F010         	call	_DS1621_Init	;wreg free
  7693                           
  7694                           ;Lab11pA.c: 106: init_INTERRUPT();
  7695  001D56  ECAC  F00F         	call	_init_INTERRUPT	;wreg free
  7696                           
  7697                           ;Lab11pA.c: 107: Turn_Off_Fan();
  7698  001D5A  EC03  F011         	call	_Turn_Off_Fan	;wreg free
  7699  001D5E  0012               	return		;funcret
  7700  001D60                     __end_of_Do_Init:
  7701                           	opt stack 0
  7702                           tblptru	equ	0xFF8
  7703                           tblptrh	equ	0xFF7
  7704                           tblptrl	equ	0xFF6
  7705                           tablat	equ	0xFF5
  7706                           prodh	equ	0xFF4
  7707                           prodl	equ	0xFF3
  7708                           intcon	equ	0xFF2
  7709                           intcon2	equ	0xFF1
  7710                           postinc0	equ	0xFEE
  7711                           wreg	equ	0xFE8
  7712                           postdec1	equ	0xFE5
  7713                           fsr1l	equ	0xFE1
  7714                           indf2	equ	0xFDF
  7715                           postinc2	equ	0xFDE
  7716                           postdec2	equ	0xFDD
  7717                           fsr2h	equ	0xFDA
  7718                           fsr2l	equ	0xFD9
  7719                           status	equ	0xFD8
  7720                           
  7721 ;; *************** function _init_UART *****************
  7722 ;; Defined at:
  7723 ;;		line 79 in file "Lab11pA.c"
  7724 ;; Parameters:    Size  Location     Type
  7725 ;;		None
  7726 ;; Auto vars:     Size  Location     Type
  7727 ;;		None
  7728 ;; Return value:  Size  Location     Type
  7729 ;;		None               void
  7730 ;; Registers used:
  7731 ;;		wreg, status,2, cstack
  7732 ;; Tracked objects:
  7733 ;;		On entry : 0/0
  7734 ;;		On exit  : 0/0
  7735 ;;		Unchanged: 0/0
  7736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7737 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7738 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7739 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7740 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7741 ;;Total ram usage:        0 bytes
  7742 ;; Hardware stack levels used:    1
  7743 ;; Hardware stack levels required when called:    4
  7744 ;; This function calls:
  7745 ;;		_OpenUSART
  7746 ;; This function is called by:
  7747 ;;		_Do_Init
  7748 ;; This function uses a non-reentrant model
  7749 ;;
  7750                           
  7751                           	psect	text34
  7752  00212E                     __ptext34:
  7753                           	opt stack 0
  7754  00212E                     _init_UART:
  7755                           	opt stack 25
  7756                           
  7757                           ;Lab11pA.c: 81: OpenUSART (0b01111111 & 0b10111111 &
  7758                           ;Lab11pA.c: 82: 0b11111110 & 0b11111101 & 0b11111111 &
  7759                           ;Lab11pA.c: 83: 0b11111111, 25);
  7760                           
  7761                           ;incstack = 0
  7762  00212E  0E00               	movlw	0
  7763  002130  6E12               	movwf	OpenUSART@spbrg+1,c
  7764  002132  0E19               	movlw	25
  7765  002134  6E11               	movwf	OpenUSART@spbrg,c
  7766  002136  0E3C               	movlw	60
  7767  002138  EC46  F00D         	call	_OpenUSART
  7768                           
  7769                           ;Lab11pA.c: 84: OSCCON = 0x70;
  7770  00213C  0E70               	movlw	112
  7771  00213E  6ED3               	movwf	4051,c	;volatile
  7772  002140  0012               	return		;funcret
  7773  002142                     __end_of_init_UART:
  7774                           	opt stack 0
  7775                           tblptru	equ	0xFF8
  7776                           tblptrh	equ	0xFF7
  7777                           tblptrl	equ	0xFF6
  7778                           tablat	equ	0xFF5
  7779                           prodh	equ	0xFF4
  7780                           prodl	equ	0xFF3
  7781                           intcon	equ	0xFF2
  7782                           intcon2	equ	0xFF1
  7783                           postinc0	equ	0xFEE
  7784                           wreg	equ	0xFE8
  7785                           postdec1	equ	0xFE5
  7786                           fsr1l	equ	0xFE1
  7787                           indf2	equ	0xFDF
  7788                           postinc2	equ	0xFDE
  7789                           postdec2	equ	0xFDD
  7790                           fsr2h	equ	0xFDA
  7791                           fsr2l	equ	0xFD9
  7792                           status	equ	0xFD8
  7793                           
  7794 ;; *************** function _OpenUSART *****************
  7795 ;; Defined at:
  7796 ;;		line 73 in file "E:\XC8\sources\pic18\plib\USART\uopen.c"
  7797 ;; Parameters:    Size  Location     Type
  7798 ;;  config          1    wreg     unsigned char 
  7799 ;;  spbrg           2   16[COMRAM] unsigned int 
  7800 ;; Auto vars:     Size  Location     Type
  7801 ;;  config          1   18[COMRAM] unsigned char 
  7802 ;; Return value:  Size  Location     Type
  7803 ;;		None               void
  7804 ;; Registers used:
  7805 ;;		wreg, status,2
  7806 ;; Tracked objects:
  7807 ;;		On entry : 0/0
  7808 ;;		On exit  : 0/0
  7809 ;;		Unchanged: 0/0
  7810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7811 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7812 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7813 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7814 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7815 ;;Total ram usage:        3 bytes
  7816 ;; Hardware stack levels used:    1
  7817 ;; Hardware stack levels required when called:    3
  7818 ;; This function calls:
  7819 ;;		Nothing
  7820 ;; This function is called by:
  7821 ;;		_init_UART
  7822 ;; This function uses a non-reentrant model
  7823 ;;
  7824                           
  7825                           	psect	text35
  7826  001A8C                     __ptext35:
  7827                           	opt stack 0
  7828  001A8C                     _OpenUSART:
  7829                           	opt stack 25
  7830                           
  7831                           ;incstack = 0
  7832                           ;OpenUSART@config stored from wreg
  7833  001A8C  6E13               	movwf	OpenUSART@config,c
  7834  001A8E  0E00               	movlw	0
  7835  001A90  6EAC               	movwf	4012,c	;volatile
  7836  001A92  0E00               	movlw	0
  7837  001A94  6EAB               	movwf	4011,c	;volatile
  7838  001A96  A013               	btfss	OpenUSART@config,0,c
  7839  001A98  D002               	goto	l5407
  7840  001A9A  88AC               	bsf	4012,4,c	;volatile
  7841  001A9C  D000               	goto	l5407
  7842  001A9E                     l5407:
  7843  001A9E  A213               	btfss	OpenUSART@config,1,c
  7844  001AA0  D003               	goto	l5411
  7845  001AA2  8CAC               	bsf	4012,6,c	;volatile
  7846  001AA4  8CAB               	bsf	4011,6,c	;volatile
  7847  001AA6  D000               	goto	l5411
  7848  001AA8                     l5411:
  7849  001AA8  A413               	btfss	OpenUSART@config,2,c
  7850  001AAA  D002               	goto	l5415
  7851  001AAC  8EAC               	bsf	4012,7,c	;volatile
  7852  001AAE  D000               	goto	l5415
  7853  001AB0                     l5415:
  7854  001AB0  A613               	btfss	OpenUSART@config,3,c
  7855  001AB2  D002               	goto	l863
  7856  001AB4  88AB               	bsf	4011,4,c	;volatile
  7857  001AB6  D002               	goto	l5419
  7858  001AB8                     l863:
  7859  001AB8  8AAB               	bsf	4011,5,c	;volatile
  7860  001ABA  D000               	goto	l5419
  7861  001ABC                     l5419:
  7862  001ABC  B813               	btfsc	OpenUSART@config,4,c
  7863  001ABE  84AC               	bsf	4012,2,c	;volatile
  7864  001AC0  989E               	bcf	3998,4,c	;volatile
  7865  001AC2  AA13               	btfss	OpenUSART@config,5,c
  7866  001AC4  D002               	goto	l5427
  7867  001AC6  86AB               	bsf	4011,3,c	;volatile
  7868  001AC8  D000               	goto	l5427
  7869  001ACA                     l5427:
  7870  001ACA  AC13               	btfss	OpenUSART@config,6,c
  7871  001ACC  D002               	goto	l867
  7872  001ACE  8A9D               	bsf	3997,5,c	;volatile
  7873  001AD0  D001               	goto	l868
  7874  001AD2                     l867:
  7875  001AD2  9A9D               	bcf	3997,5,c	;volatile
  7876  001AD4                     l868:
  7877  001AD4  9A9E               	bcf	3998,5,c	;volatile
  7878  001AD6  AE13               	btfss	OpenUSART@config,7,c
  7879  001AD8  D002               	goto	l869
  7880  001ADA  889D               	bsf	3997,4,c	;volatile
  7881  001ADC  D001               	goto	l870
  7882  001ADE                     l869:
  7883  001ADE  989D               	bcf	3997,4,c	;volatile
  7884  001AE0                     l870:
  7885  001AE0  C011  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  7886  001AE4  5012               	movf	OpenUSART@spbrg+1,w,c
  7887  001AE6  6EB0               	movwf	4016,c	;volatile
  7888  001AE8  8AAC               	bsf	4012,5,c	;volatile
  7889  001AEA  8EAB               	bsf	4011,7,c	;volatile
  7890  001AEC  9C94               	bcf	3988,6,c	;volatile
  7891  001AEE  8E94               	bsf	3988,7,c	;volatile
  7892  001AF0  B8AC               	btfsc	4012,4,c	;volatile
  7893  001AF2  BEAC               	btfsc	4012,7,c	;volatile
  7894  001AF4  D002               	goto	l872
  7895  001AF6  8C94               	bsf	3988,6,c	;volatile
  7896  001AF8  D000               	goto	l872
  7897  001AFA                     l872:
  7898  001AFA  0012               	return		;funcret
  7899  001AFC                     __end_of_OpenUSART:
  7900                           	opt stack 0
  7901                           tblptru	equ	0xFF8
  7902                           tblptrh	equ	0xFF7
  7903                           tblptrl	equ	0xFF6
  7904                           tablat	equ	0xFF5
  7905                           prodh	equ	0xFF4
  7906                           prodl	equ	0xFF3
  7907                           intcon	equ	0xFF2
  7908                           intcon2	equ	0xFF1
  7909                           postinc0	equ	0xFEE
  7910                           wreg	equ	0xFE8
  7911                           postdec1	equ	0xFE5
  7912                           fsr1l	equ	0xFE1
  7913                           indf2	equ	0xFDF
  7914                           postinc2	equ	0xFDE
  7915                           postdec2	equ	0xFDD
  7916                           fsr2h	equ	0xFDA
  7917                           fsr2l	equ	0xFD9
  7918                           status	equ	0xFD8
  7919                           
  7920 ;; *************** function _init_INTERRUPT *****************
  7921 ;; Defined at:
  7922 ;;		line 14 in file "Interrupt.c"
  7923 ;; Parameters:    Size  Location     Type
  7924 ;;		None
  7925 ;; Auto vars:     Size  Location     Type
  7926 ;;		None
  7927 ;; Return value:  Size  Location     Type
  7928 ;;		None               void
  7929 ;; Registers used:
  7930 ;;		wreg, status,2
  7931 ;; Tracked objects:
  7932 ;;		On entry : 0/0
  7933 ;;		On exit  : 0/0
  7934 ;;		Unchanged: 0/0
  7935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7936 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7937 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7938 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7939 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7940 ;;Total ram usage:        0 bytes
  7941 ;; Hardware stack levels used:    1
  7942 ;; Hardware stack levels required when called:    3
  7943 ;; This function calls:
  7944 ;;		Nothing
  7945 ;; This function is called by:
  7946 ;;		_Do_Init
  7947 ;; This function uses a non-reentrant model
  7948 ;;
  7949                           
  7950                           	psect	text36
  7951  001F58                     __ptext36:
  7952                           	opt stack 0
  7953  001F58                     _init_INTERRUPT:
  7954                           	opt stack 26
  7955                           
  7956                           ;Interrupt.c: 16: INTCONbits.INT0IF = 0;
  7957                           
  7958                           ;incstack = 0
  7959  001F58  92F2               	bcf	intcon,1,c	;volatile
  7960                           
  7961                           ;Interrupt.c: 17: INTCON2bits.INTEDG0 = 0;
  7962  001F5A  9CF1               	bcf	intcon2,6,c	;volatile
  7963                           
  7964                           ;Interrupt.c: 18: INTCONbits.INT0IE = 1;
  7965  001F5C  88F2               	bsf	intcon,4,c	;volatile
  7966                           
  7967                           ;Interrupt.c: 19: TMR1H = 0;
  7968  001F5E  0E00               	movlw	0
  7969  001F60  6ECF               	movwf	4047,c	;volatile
  7970                           
  7971                           ;Interrupt.c: 20: TMR1L = 0;
  7972  001F62  0E00               	movlw	0
  7973  001F64  6ECE               	movwf	4046,c	;volatile
  7974                           
  7975                           ;Interrupt.c: 21: PIR1bits.TMR1IF = 0;
  7976  001F66  909E               	bcf	3998,0,c	;volatile
  7977                           
  7978                           ;Interrupt.c: 22: PIE1bits.TMR1IE = 1;
  7979  001F68  809D               	bsf	3997,0,c	;volatile
  7980                           
  7981                           ;Interrupt.c: 23: INTCONbits.PEIE = 1;
  7982  001F6A  8CF2               	bsf	intcon,6,c	;volatile
  7983                           
  7984                           ;Interrupt.c: 24: INTCONbits.GIE = 1;
  7985  001F6C  8EF2               	bsf	intcon,7,c	;volatile
  7986                           
  7987                           ;Interrupt.c: 25: nec_ok = 0;
  7988  001F6E  0E00               	movlw	0
  7989  001F70  6E49               	movwf	_nec_ok+1,c
  7990  001F72  0E00               	movlw	0
  7991  001F74  6E48               	movwf	_nec_ok,c
  7992                           
  7993                           ;Interrupt.c: 26: Nec_code = 0x0;
  7994  001F76  0E00               	movlw	0
  7995  001F78  0100               	movlb	0	; () banked
  7996  001F7A  6FF8               	movwf	_Nec_code& (0+255),b
  7997  001F7C  0E00               	movlw	0
  7998  001F7E  6FF9               	movwf	(_Nec_code+1)& (0+255),b
  7999  001F80  0E00               	movlw	0
  8000  001F82  6FFA               	movwf	(_Nec_code+2)& (0+255),b
  8001  001F84  0E00               	movlw	0
  8002  001F86  6FFB               	movwf	(_Nec_code+3)& (0+255),b
  8003                           
  8004                           ; BSR set to: 0
  8005  001F88  0012               	return		;funcret
  8006  001F8A                     __end_of_init_INTERRUPT:
  8007                           	opt stack 0
  8008                           tblptru	equ	0xFF8
  8009                           tblptrh	equ	0xFF7
  8010                           tblptrl	equ	0xFF6
  8011                           tablat	equ	0xFF5
  8012                           prodh	equ	0xFF4
  8013                           prodl	equ	0xFF3
  8014                           intcon	equ	0xFF2
  8015                           intcon2	equ	0xFF1
  8016                           postinc0	equ	0xFEE
  8017                           wreg	equ	0xFE8
  8018                           postdec1	equ	0xFE5
  8019                           fsr1l	equ	0xFE1
  8020                           indf2	equ	0xFDF
  8021                           postinc2	equ	0xFDE
  8022                           postdec2	equ	0xFDD
  8023                           fsr2h	equ	0xFDA
  8024                           fsr2l	equ	0xFD9
  8025                           status	equ	0xFD8
  8026                           
  8027 ;; *************** function _Turn_Off_Fan *****************
  8028 ;; Defined at:
  8029 ;;		line 34 in file "Fan_Support.c"
  8030 ;; Parameters:    Size  Location     Type
  8031 ;;		None
  8032 ;; Auto vars:     Size  Location     Type
  8033 ;;		None
  8034 ;; Return value:  Size  Location     Type
  8035 ;;		None               void
  8036 ;; Registers used:
  8037 ;;		wreg, status,2
  8038 ;; Tracked objects:
  8039 ;;		On entry : 0/0
  8040 ;;		On exit  : 0/0
  8041 ;;		Unchanged: 0/0
  8042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8043 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8044 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8045 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8046 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8047 ;;Total ram usage:        0 bytes
  8048 ;; Hardware stack levels used:    1
  8049 ;; Hardware stack levels required when called:    3
  8050 ;; This function calls:
  8051 ;;		Nothing
  8052 ;; This function is called by:
  8053 ;;		_Do_Init
  8054 ;;		_Toggle_Fan
  8055 ;; This function uses a non-reentrant model
  8056 ;;
  8057                           
  8058                           	psect	text37
  8059  002206                     __ptext37:
  8060                           	opt stack 0
  8061  002206                     _Turn_Off_Fan:
  8062                           	opt stack 26
  8063                           
  8064                           ;Fan_Support.c: 37: FAN=0;
  8065                           
  8066                           ; BSR set to: 0
  8067                           ;incstack = 0
  8068  002206  0E00               	movlw	0
  8069  002208  6E50               	movwf	_FAN,c
  8070                           
  8071                           ;Fan_Support.c: 38: PORTAbits.RA5=0;
  8072  00220A  9A80               	bcf	3968,5,c	;volatile
  8073                           
  8074                           ;Fan_Support.c: 39: PORTEbits.RE2=0;
  8075  00220C  9484               	bcf	3972,2,c	;volatile
  8076  00220E  0012               	return		;funcret
  8077  002210                     __end_of_Turn_Off_Fan:
  8078                           	opt stack 0
  8079                           tblptru	equ	0xFF8
  8080                           tblptrh	equ	0xFF7
  8081                           tblptrl	equ	0xFF6
  8082                           tablat	equ	0xFF5
  8083                           prodh	equ	0xFF4
  8084                           prodl	equ	0xFF3
  8085                           intcon	equ	0xFF2
  8086                           intcon2	equ	0xFF1
  8087                           postinc0	equ	0xFEE
  8088                           wreg	equ	0xFE8
  8089                           postdec1	equ	0xFE5
  8090                           fsr1l	equ	0xFE1
  8091                           indf2	equ	0xFDF
  8092                           postinc2	equ	0xFDE
  8093                           postdec2	equ	0xFDD
  8094                           fsr2h	equ	0xFDA
  8095                           fsr2l	equ	0xFD9
  8096                           status	equ	0xFD8
  8097                           
  8098 ;; *************** function _I2C_Init *****************
  8099 ;; Defined at:
  8100 ;;		line 14 in file "I2C.c"
  8101 ;; Parameters:    Size  Location     Type
  8102 ;;  c               4   16[COMRAM] unsigned long 
  8103 ;; Auto vars:     Size  Location     Type
  8104 ;;		None
  8105 ;; Return value:  Size  Location     Type
  8106 ;;		None               void
  8107 ;; Registers used:
  8108 ;;		wreg, cstack
  8109 ;; Tracked objects:
  8110 ;;		On entry : 0/0
  8111 ;;		On exit  : 0/0
  8112 ;;		Unchanged: 0/0
  8113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8114 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8115 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8116 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8117 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8118 ;;Total ram usage:        4 bytes
  8119 ;; Hardware stack levels used:    1
  8120 ;; Hardware stack levels required when called:    4
  8121 ;; This function calls:
  8122 ;;		_i2cHighScl
  8123 ;;		_i2cHighSda
  8124 ;; This function is called by:
  8125 ;;		_Do_Init
  8126 ;; This function uses a non-reentrant model
  8127 ;;
  8128                           
  8129                           	psect	text38
  8130  002210                     __ptext38:
  8131                           	opt stack 0
  8132  002210                     _I2C_Init:
  8133                           	opt stack 25
  8134                           
  8135                           ;I2C.c: 16: i2cHighScl();
  8136                           
  8137                           ;incstack = 0
  8138  002210  ECF7  F010         	call	_i2cHighScl	;wreg free
  8139                           
  8140                           ;I2C.c: 17: i2cHighSda();
  8141  002214  EC24  F011         	call	_i2cHighSda	;wreg free
  8142  002218  0012               	return		;funcret
  8143  00221A                     __end_of_I2C_Init:
  8144                           	opt stack 0
  8145                           tblptru	equ	0xFF8
  8146                           tblptrh	equ	0xFF7
  8147                           tblptrl	equ	0xFF6
  8148                           tablat	equ	0xFF5
  8149                           prodh	equ	0xFF4
  8150                           prodl	equ	0xFF3
  8151                           intcon	equ	0xFF2
  8152                           intcon2	equ	0xFF1
  8153                           postinc0	equ	0xFEE
  8154                           wreg	equ	0xFE8
  8155                           postdec1	equ	0xFE5
  8156                           fsr1l	equ	0xFE1
  8157                           indf2	equ	0xFDF
  8158                           postinc2	equ	0xFDE
  8159                           postdec2	equ	0xFDD
  8160                           fsr2h	equ	0xFDA
  8161                           fsr2l	equ	0xFD9
  8162                           status	equ	0xFD8
  8163                           
  8164 ;; *************** function _DS1621_Init *****************
  8165 ;; Defined at:
  8166 ;;		line 21 in file "I2C_Support.c"
  8167 ;; Parameters:    Size  Location     Type
  8168 ;;		None
  8169 ;; Auto vars:     Size  Location     Type
  8170 ;;  Device          1   21[COMRAM] unsigned char 
  8171 ;; Return value:  Size  Location     Type
  8172 ;;		None               void
  8173 ;; Registers used:
  8174 ;;		wreg, status,2, status,0, cstack
  8175 ;; Tracked objects:
  8176 ;;		On entry : 0/0
  8177 ;;		On exit  : 0/0
  8178 ;;		Unchanged: 0/0
  8179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8180 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8181 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8182 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8183 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8184 ;;Total ram usage:        1 bytes
  8185 ;; Hardware stack levels used:    1
  8186 ;; Hardware stack levels required when called:    6
  8187 ;; This function calls:
  8188 ;;		_I2C_Write_Cmd_Only
  8189 ;;		_I2C_Write_Cmd_Write_Data
  8190 ;; This function is called by:
  8191 ;;		_Do_Init
  8192 ;; This function uses a non-reentrant model
  8193 ;;
  8194                           
  8195                           	psect	text39
  8196  002096                     __ptext39:
  8197                           	opt stack 0
  8198  002096                     _DS1621_Init:
  8199                           	opt stack 23
  8200                           
  8201                           ;I2C_Support.c: 23: char Device = 0x48;
  8202                           
  8203                           ;incstack = 0
  8204  002096  0E48               	movlw	72
  8205  002098  6E16               	movwf	DS1621_Init@Device,c
  8206                           
  8207                           ;I2C_Support.c: 24: I2C_Write_Cmd_Write_Data (Device, 0xAC, 0x02);
  8208  00209A  0EAC               	movlw	172
  8209  00209C  6E13               	movwf	I2C_Write_Cmd_Write_Data@Cmd,c
  8210  00209E  0E02               	movlw	2
  8211  0020A0  6E14               	movwf	I2C_Write_Cmd_Write_Data@Data_Out,c
  8212  0020A2  5016               	movf	DS1621_Init@Device,w,c
  8213  0020A4  EC3B  F010         	call	_I2C_Write_Cmd_Write_Data
  8214                           
  8215                           ;I2C_Support.c: 25: I2C_Write_Cmd_Only(Device, 0xEE);
  8216  0020A8  0EEE               	movlw	238
  8217  0020AA  6E13               	movwf	I2C_Write_Cmd_Only@Cmd,c
  8218  0020AC  5016               	movf	DS1621_Init@Device,w,c
  8219  0020AE  EC68  F010         	call	_I2C_Write_Cmd_Only
  8220  0020B2  0012               	return		;funcret
  8221  0020B4                     __end_of_DS1621_Init:
  8222                           	opt stack 0
  8223                           tblptru	equ	0xFF8
  8224                           tblptrh	equ	0xFF7
  8225                           tblptrl	equ	0xFF6
  8226                           tablat	equ	0xFF5
  8227                           prodh	equ	0xFF4
  8228                           prodl	equ	0xFF3
  8229                           intcon	equ	0xFF2
  8230                           intcon2	equ	0xFF1
  8231                           postinc0	equ	0xFEE
  8232                           wreg	equ	0xFE8
  8233                           postdec1	equ	0xFE5
  8234                           fsr1l	equ	0xFE1
  8235                           indf2	equ	0xFDF
  8236                           postinc2	equ	0xFDE
  8237                           postdec2	equ	0xFDD
  8238                           fsr2h	equ	0xFDA
  8239                           fsr2l	equ	0xFD9
  8240                           status	equ	0xFD8
  8241                           
  8242 ;; *************** function _I2C_Write_Cmd_Write_Data *****************
  8243 ;; Defined at:
  8244 ;;		line 152 in file "I2C.c"
  8245 ;; Parameters:    Size  Location     Type
  8246 ;;  Device          1    wreg     unsigned char 
  8247 ;;  Cmd             1   18[COMRAM] unsigned char 
  8248 ;;  Data_Out        1   19[COMRAM] unsigned char 
  8249 ;; Auto vars:     Size  Location     Type
  8250 ;;  Device          1   20[COMRAM] unsigned char 
  8251 ;; Return value:  Size  Location     Type
  8252 ;;		None               void
  8253 ;; Registers used:
  8254 ;;		wreg, status,2, status,0, cstack
  8255 ;; Tracked objects:
  8256 ;;		On entry : 0/0
  8257 ;;		On exit  : 0/0
  8258 ;;		Unchanged: 0/0
  8259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8260 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8261 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8262 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8263 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8264 ;;Total ram usage:        3 bytes
  8265 ;; Hardware stack levels used:    1
  8266 ;; Hardware stack levels required when called:    5
  8267 ;; This function calls:
  8268 ;;		_I2C_Start
  8269 ;;		_I2C_Stop
  8270 ;;		_I2C_Write
  8271 ;; This function is called by:
  8272 ;;		_DS1621_Init
  8273 ;; This function uses a non-reentrant model
  8274 ;;
  8275                           
  8276                           	psect	text40
  8277  002076                     __ptext40:
  8278                           	opt stack 0
  8279  002076                     _I2C_Write_Cmd_Write_Data:
  8280                           	opt stack 23
  8281                           
  8282                           ;incstack = 0
  8283                           ;I2C_Write_Cmd_Write_Data@Device stored from wreg
  8284  002076  6E15               	movwf	I2C_Write_Cmd_Write_Data@Device,c
  8285                           
  8286                           ;I2C.c: 154: I2C_Start();
  8287  002078  ECC6  F010         	call	_I2C_Start	;wreg free
  8288                           
  8289                           ;I2C.c: 155: I2C_Write((Device << 1) | 0);
  8290  00207C  5015               	movf	I2C_Write_Cmd_Write_Data@Device,w,c
  8291  00207E  2415               	addwf	I2C_Write_Cmd_Write_Data@Device,w,c
  8292  002080  EC56  F00F         	call	_I2C_Write
  8293                           
  8294                           ;I2C.c: 156: I2C_Write(Cmd);
  8295  002084  5013               	movf	I2C_Write_Cmd_Write_Data@Cmd,w,c
  8296  002086  EC56  F00F         	call	_I2C_Write
  8297                           
  8298                           ;I2C.c: 157: I2C_Write(Data_Out);
  8299  00208A  5014               	movf	I2C_Write_Cmd_Write_Data@Data_Out,w,c
  8300  00208C  EC56  F00F         	call	_I2C_Write
  8301                           
  8302                           ;I2C.c: 158: I2C_Stop();
  8303  002090  ECBD  F010         	call	_I2C_Stop	;wreg free
  8304  002094  0012               	return		;funcret
  8305  002096                     __end_of_I2C_Write_Cmd_Write_Data:
  8306                           	opt stack 0
  8307                           tblptru	equ	0xFF8
  8308                           tblptrh	equ	0xFF7
  8309                           tblptrl	equ	0xFF6
  8310                           tablat	equ	0xFF5
  8311                           prodh	equ	0xFF4
  8312                           prodl	equ	0xFF3
  8313                           intcon	equ	0xFF2
  8314                           intcon2	equ	0xFF1
  8315                           postinc0	equ	0xFEE
  8316                           wreg	equ	0xFE8
  8317                           postdec1	equ	0xFE5
  8318                           fsr1l	equ	0xFE1
  8319                           indf2	equ	0xFDF
  8320                           postinc2	equ	0xFDE
  8321                           postdec2	equ	0xFDD
  8322                           fsr2h	equ	0xFDA
  8323                           fsr2l	equ	0xFD9
  8324                           status	equ	0xFD8
  8325                           
  8326 ;; *************** function _I2C_Write_Cmd_Only *****************
  8327 ;; Defined at:
  8328 ;;		line 144 in file "I2C.c"
  8329 ;; Parameters:    Size  Location     Type
  8330 ;;  Device          1    wreg     unsigned char 
  8331 ;;  Cmd             1   18[COMRAM] unsigned char 
  8332 ;; Auto vars:     Size  Location     Type
  8333 ;;  Device          1   19[COMRAM] unsigned char 
  8334 ;; Return value:  Size  Location     Type
  8335 ;;		None               void
  8336 ;; Registers used:
  8337 ;;		wreg, status,2, status,0, cstack
  8338 ;; Tracked objects:
  8339 ;;		On entry : 0/0
  8340 ;;		On exit  : 0/0
  8341 ;;		Unchanged: 0/0
  8342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8343 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8344 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8345 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8346 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8347 ;;Total ram usage:        2 bytes
  8348 ;; Hardware stack levels used:    1
  8349 ;; Hardware stack levels required when called:    5
  8350 ;; This function calls:
  8351 ;;		_I2C_Start
  8352 ;;		_I2C_Stop
  8353 ;;		_I2C_Write
  8354 ;; This function is called by:
  8355 ;;		_DS1621_Init
  8356 ;; This function uses a non-reentrant model
  8357 ;;
  8358                           
  8359                           	psect	text41
  8360  0020D0                     __ptext41:
  8361                           	opt stack 0
  8362  0020D0                     _I2C_Write_Cmd_Only:
  8363                           	opt stack 23
  8364                           
  8365                           ;incstack = 0
  8366                           ;I2C_Write_Cmd_Only@Device stored from wreg
  8367  0020D0  6E14               	movwf	I2C_Write_Cmd_Only@Device,c
  8368                           
  8369                           ;I2C.c: 146: I2C_Start();
  8370  0020D2  ECC6  F010         	call	_I2C_Start	;wreg free
  8371                           
  8372                           ;I2C.c: 147: I2C_Write((Device << 1) | 0);
  8373  0020D6  5014               	movf	I2C_Write_Cmd_Only@Device,w,c
  8374  0020D8  2414               	addwf	I2C_Write_Cmd_Only@Device,w,c
  8375  0020DA  EC56  F00F         	call	_I2C_Write
  8376                           
  8377                           ;I2C.c: 148: I2C_Write(Cmd);
  8378  0020DE  5013               	movf	I2C_Write_Cmd_Only@Cmd,w,c
  8379  0020E0  EC56  F00F         	call	_I2C_Write
  8380                           
  8381                           ;I2C.c: 149: I2C_Stop();
  8382  0020E4  ECBD  F010         	call	_I2C_Stop	;wreg free
  8383  0020E8  0012               	return		;funcret
  8384  0020EA                     __end_of_I2C_Write_Cmd_Only:
  8385                           	opt stack 0
  8386                           tblptru	equ	0xFF8
  8387                           tblptrh	equ	0xFF7
  8388                           tblptrl	equ	0xFF6
  8389                           tablat	equ	0xFF5
  8390                           prodh	equ	0xFF4
  8391                           prodl	equ	0xFF3
  8392                           intcon	equ	0xFF2
  8393                           intcon2	equ	0xFF1
  8394                           postinc0	equ	0xFEE
  8395                           wreg	equ	0xFE8
  8396                           postdec1	equ	0xFE5
  8397                           fsr1l	equ	0xFE1
  8398                           indf2	equ	0xFDF
  8399                           postinc2	equ	0xFDE
  8400                           postdec2	equ	0xFDD
  8401                           fsr2h	equ	0xFDA
  8402                           fsr2l	equ	0xFD9
  8403                           status	equ	0xFD8
  8404                           
  8405 ;; *************** function _Do_Beep *****************
  8406 ;; Defined at:
  8407 ;;		line 9 in file "Utils.c"
  8408 ;; Parameters:    Size  Location     Type
  8409 ;;		None
  8410 ;; Auto vars:     Size  Location     Type
  8411 ;;		None
  8412 ;; Return value:  Size  Location     Type
  8413 ;;                  2   54[None  ] int 
  8414 ;; Registers used:
  8415 ;;		wreg, status,2, status,0, cstack
  8416 ;; Tracked objects:
  8417 ;;		On entry : 0/0
  8418 ;;		On exit  : 0/0
  8419 ;;		Unchanged: 0/0
  8420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8421 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8422 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8423 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8424 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8425 ;;Total ram usage:        0 bytes
  8426 ;; Hardware stack levels used:    1
  8427 ;; Hardware stack levels required when called:    6
  8428 ;; This function calls:
  8429 ;;		_Activate_Buzzer
  8430 ;;		_Deactivate_Buzzer
  8431 ;;		_Wait_One_Sec
  8432 ;;		_do_update_pwm
  8433 ;; This function is called by:
  8434 ;;		_main
  8435 ;;		_Increase_Speed
  8436 ;;		_Decrease_Speed
  8437 ;; This function uses a non-reentrant model
  8438 ;;
  8439                           
  8440                           	psect	text42
  8441  002142                     __ptext42:
  8442                           	opt stack 0
  8443  002142                     _Do_Beep:
  8444                           	opt stack 24
  8445                           
  8446                           ;Utils.c: 11: Activate_Buzzer();
  8447                           
  8448                           ;incstack = 0
  8449  002142  ECB4  F010         	call	_Activate_Buzzer	;wreg free
  8450                           
  8451                           ;Utils.c: 12: Wait_One_Sec();
  8452  002146  EC0D  F011         	call	_Wait_One_Sec	;wreg free
  8453                           
  8454                           ;Utils.c: 13: Deactivate_Buzzer();
  8455  00214A  EC1C  F011         	call	_Deactivate_Buzzer	;wreg free
  8456                           
  8457                           ;Utils.c: 14: do_update_pwm(duty_cycle);
  8458  00214E  505C               	movf	_duty_cycle,w,c
  8459  002150  EC97  F00B         	call	_do_update_pwm
  8460  002154  0012               	return		;funcret
  8461  002156                     __end_of_Do_Beep:
  8462                           	opt stack 0
  8463                           tblptru	equ	0xFF8
  8464                           tblptrh	equ	0xFF7
  8465                           tblptrl	equ	0xFF6
  8466                           tablat	equ	0xFF5
  8467                           prodh	equ	0xFF4
  8468                           prodl	equ	0xFF3
  8469                           intcon	equ	0xFF2
  8470                           intcon2	equ	0xFF1
  8471                           postinc0	equ	0xFEE
  8472                           wreg	equ	0xFE8
  8473                           postdec1	equ	0xFE5
  8474                           fsr1l	equ	0xFE1
  8475                           indf2	equ	0xFDF
  8476                           postinc2	equ	0xFDE
  8477                           postdec2	equ	0xFDD
  8478                           fsr2h	equ	0xFDA
  8479                           fsr2l	equ	0xFD9
  8480                           status	equ	0xFD8
  8481                           
  8482 ;; *************** function _do_update_pwm *****************
  8483 ;; Defined at:
  8484 ;;		line 84 in file "Fan_Support.c"
  8485 ;; Parameters:    Size  Location     Type
  8486 ;;  duty_cycle      1    wreg     unsigned char 
  8487 ;; Auto vars:     Size  Location     Type
  8488 ;;  duty_cycle      1    3[BANK0 ] unsigned char 
  8489 ;;  dc_f            3    0[BANK0 ] float 
  8490 ;;  dc_I            2    4[BANK0 ] int 
  8491 ;; Return value:  Size  Location     Type
  8492 ;;		None               void
  8493 ;; Registers used:
  8494 ;;		wreg, status,2, status,0, cstack
  8495 ;; Tracked objects:
  8496 ;;		On entry : 0/0
  8497 ;;		On exit  : 0/0
  8498 ;;		Unchanged: 0/0
  8499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8500 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8501 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8502 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8503 ;;      Totals:         3       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8504 ;;Total ram usage:        9 bytes
  8505 ;; Hardware stack levels used:    1
  8506 ;; Hardware stack levels required when called:    5
  8507 ;; This function calls:
  8508 ;;		___ftdiv
  8509 ;;		___ftmul
  8510 ;;		___fttol
  8511 ;;		___lbtoft
  8512 ;; This function is called by:
  8513 ;;		_main
  8514 ;;		_Turn_On_Fan
  8515 ;;		_Do_Beep
  8516 ;;		_Increase_Speed
  8517 ;;		_Decrease_Speed
  8518 ;; This function uses a non-reentrant model
  8519 ;;
  8520                           
  8521                           	psect	text43
  8522  00172E                     __ptext43:
  8523                           	opt stack 0
  8524  00172E                     _do_update_pwm:
  8525                           	opt stack 25
  8526                           
  8527                           ;incstack = 0
  8528                           ;do_update_pwm@duty_cycle stored from wreg
  8529  00172E  0100               	movlb	0	; () banked
  8530  001730  6FEE               	movwf	do_update_pwm@duty_cycle& (0+255),b
  8531                           
  8532                           ; BSR set to: 0
  8533                           ;Fan_Support.c: 86: float dc_f;
  8534                           ;Fan_Support.c: 87: int dc_I;
  8535                           ;Fan_Support.c: 88: PR2 = 0b00000100 ;
  8536  001732  0E04               	movlw	4
  8537  001734  6ECB               	movwf	4043,c	;volatile
  8538                           
  8539                           ;Fan_Support.c: 89: T2CON = 0b00000111 ;
  8540  001736  0E07               	movlw	7
  8541  001738  6ECA               	movwf	4042,c	;volatile
  8542                           
  8543                           ; BSR set to: 0
  8544                           ;Fan_Support.c: 90: dc_f = ( 4.0 * duty_cycle / 20.0) ;
  8545  00173A  0E00               	movlw	0
  8546  00173C  6E20               	movwf	___ftmul@f2,c
  8547  00173E  0E80               	movlw	128
  8548  001740  6E21               	movwf	___ftmul@f2+1,c
  8549  001742  0E40               	movlw	64
  8550  001744  6E22               	movwf	___ftmul@f2+2,c
  8551  001746  0100               	movlb	0	; () banked
  8552  001748  51EE               	movf	do_update_pwm@duty_cycle& (0+255),w,b
  8553  00174A  EC06  F010         	call	___lbtoft
  8554  00174E  C019  F01D         	movff	?___lbtoft,___ftmul@f1
  8555  001752  C01A  F01E         	movff	?___lbtoft+1,___ftmul@f1+1
  8556  001756  C01B  F01F         	movff	?___lbtoft+2,___ftmul@f1+2
  8557  00175A  ECED  F008         	call	___ftmul	;wreg free
  8558  00175E  C01D  F02C         	movff	?___ftmul,___ftdiv@f1
  8559  001762  C01E  F02D         	movff	?___ftmul+1,___ftdiv@f1+1
  8560  001766  C01F  F02E         	movff	?___ftmul+2,___ftdiv@f1+2
  8561  00176A  0E00               	movlw	0
  8562  00176C  6E2F               	movwf	___ftdiv@f2,c
  8563  00176E  0EA0               	movlw	160
  8564  001770  6E30               	movwf	___ftdiv@f2+1,c
  8565  001772  0E41               	movlw	65
  8566  001774  6E31               	movwf	___ftdiv@f2+2,c
  8567  001776  EC55  F00A         	call	___ftdiv	;wreg free
  8568  00177A  C02C  F0EB         	movff	?___ftdiv,do_update_pwm@dc_f
  8569  00177E  C02D  F0EC         	movff	?___ftdiv+1,do_update_pwm@dc_f+1
  8570  001782  C02E  F0ED         	movff	?___ftdiv+2,do_update_pwm@dc_f+2
  8571                           
  8572                           ;Fan_Support.c: 92: dc_I = (int) dc_f;
  8573  001786  C0EB  F011         	movff	do_update_pwm@dc_f,___fttol@f1
  8574  00178A  C0EC  F012         	movff	do_update_pwm@dc_f+1,___fttol@f1+1
  8575  00178E  C0ED  F013         	movff	do_update_pwm@dc_f+2,___fttol@f1+2
  8576  001792  ECE2  F009         	call	___fttol	;wreg free
  8577  001796  C011  F0EF         	movff	?___fttol,do_update_pwm@dc_I
  8578  00179A  C012  F0F0         	movff	?___fttol+1,do_update_pwm@dc_I+1
  8579                           
  8580                           ;Fan_Support.c: 93: if (dc_I > duty_cycle) dc_I++;
  8581  00179E  0100               	movlb	0	; () banked
  8582  0017A0  51EE               	movf	do_update_pwm@duty_cycle& (0+255),w,b
  8583  0017A2  6E3B               	movwf	??_do_update_pwm& (0+255),c
  8584  0017A4  6A3C               	clrf	(??_do_update_pwm+1)& (0+255),c
  8585  0017A6  0100               	movlb	0	; () banked
  8586  0017A8  51EF               	movf	do_update_pwm@dc_I& (0+255),w,b
  8587  0017AA  5C3B               	subwf	??_do_update_pwm,w,c
  8588  0017AC  503C               	movf	??_do_update_pwm+1,w,c
  8589  0017AE  0A80               	xorlw	128
  8590  0017B0  6E3D               	movwf	(??_do_update_pwm+2)& (0+255),c
  8591  0017B2  0100               	movlb	0	; () banked
  8592  0017B4  51F0               	movf	(do_update_pwm@dc_I+1)& (0+255),w,b
  8593  0017B6  0A80               	xorlw	128
  8594  0017B8  583D               	subwfb	(??_do_update_pwm+2)& (0+255),w,c
  8595  0017BA  B0D8               	btfsc	status,0,c
  8596  0017BC  D004               	goto	l5871
  8597                           
  8598                           ; BSR set to: 0
  8599  0017BE  0100               	movlb	0	; () banked
  8600  0017C0  4BEF               	infsnz	do_update_pwm@dc_I& (0+255),f,b
  8601  0017C2  2BF0               	incf	(do_update_pwm@dc_I+1)& (0+255),f,b
  8602  0017C4  D000               	goto	l5871
  8603  0017C6                     l5871:
  8604                           
  8605                           ; BSR set to: 0
  8606                           ;Fan_Support.c: 94: CCP1CON = ((dc_I & 0x03) << 4) | 0b00001100;
  8607  0017C6  C0EF  F03B         	movff	do_update_pwm@dc_I,??_do_update_pwm
  8608  0017CA  0E03               	movlw	3
  8609  0017CC  163B               	andwf	??_do_update_pwm,f,c
  8610  0017CE  383B               	swapf	??_do_update_pwm,w,c
  8611  0017D0  0BF0               	andlw	240
  8612  0017D2  090C               	iorlw	12
  8613  0017D4  6EBD               	movwf	4029,c	;volatile
  8614                           
  8615                           ; BSR set to: 0
  8616                           ;Fan_Support.c: 95: CCPR1L = (dc_I) >> 2;
  8617  0017D6  C0EF  F03B         	movff	do_update_pwm@dc_I,??_do_update_pwm
  8618  0017DA  C0F0  F03C         	movff	do_update_pwm@dc_I+1,??_do_update_pwm+1
  8619  0017DE  343C               	rlcf	??_do_update_pwm+1,w,c
  8620  0017E0  323C               	rrcf	??_do_update_pwm+1,f,c
  8621  0017E2  323B               	rrcf	??_do_update_pwm,f,c
  8622  0017E4  343C               	rlcf	??_do_update_pwm+1,w,c
  8623  0017E6  323C               	rrcf	??_do_update_pwm+1,f,c
  8624  0017E8  323B               	rrcf	??_do_update_pwm,f,c
  8625  0017EA  503B               	movf	??_do_update_pwm,w,c
  8626  0017EC  6EBE               	movwf	4030,c	;volatile
  8627                           
  8628                           ; BSR set to: 0
  8629  0017EE  0012               	return		;funcret
  8630  0017F0                     __end_of_do_update_pwm:
  8631                           	opt stack 0
  8632                           tblptru	equ	0xFF8
  8633                           tblptrh	equ	0xFF7
  8634                           tblptrl	equ	0xFF6
  8635                           tablat	equ	0xFF5
  8636                           prodh	equ	0xFF4
  8637                           prodl	equ	0xFF3
  8638                           intcon	equ	0xFF2
  8639                           intcon2	equ	0xFF1
  8640                           postinc0	equ	0xFEE
  8641                           wreg	equ	0xFE8
  8642                           postdec1	equ	0xFE5
  8643                           fsr1l	equ	0xFE1
  8644                           indf2	equ	0xFDF
  8645                           postinc2	equ	0xFDE
  8646                           postdec2	equ	0xFDD
  8647                           fsr2h	equ	0xFDA
  8648                           fsr2l	equ	0xFD9
  8649                           status	equ	0xFD8
  8650                           
  8651 ;; *************** function ___lbtoft *****************
  8652 ;; Defined at:
  8653 ;;		line 27 in file "E:\XC8\sources\common\lbtoft.c"
  8654 ;; Parameters:    Size  Location     Type
  8655 ;;  c               1    wreg     unsigned char 
  8656 ;; Auto vars:     Size  Location     Type
  8657 ;;  c               1   27[COMRAM] unsigned char 
  8658 ;; Return value:  Size  Location     Type
  8659 ;;                  3   24[COMRAM] float 
  8660 ;; Registers used:
  8661 ;;		wreg, status,2, status,0, cstack
  8662 ;; Tracked objects:
  8663 ;;		On entry : 0/0
  8664 ;;		On exit  : 0/0
  8665 ;;		Unchanged: 0/0
  8666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8667 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8668 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8669 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8670 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8671 ;;Total ram usage:        4 bytes
  8672 ;; Hardware stack levels used:    1
  8673 ;; Hardware stack levels required when called:    4
  8674 ;; This function calls:
  8675 ;;		___ftpack
  8676 ;; This function is called by:
  8677 ;;		_do_update_pwm
  8678 ;; This function uses a non-reentrant model
  8679 ;;
  8680                           
  8681                           	psect	text44
  8682  00200C                     __ptext44:
  8683                           	opt stack 0
  8684  00200C                     ___lbtoft:
  8685                           	opt stack 25
  8686                           
  8687                           ; BSR set to: 0
  8688                           ;incstack = 0
  8689                           ;___lbtoft@c stored from wreg
  8690  00200C  6E1C               	movwf	___lbtoft@c,c
  8691  00200E  501C               	movf	___lbtoft@c,w,c
  8692  002010  6E11               	movwf	___ftpack@arg,c
  8693  002012  6A12               	clrf	___ftpack@arg+1,c
  8694  002014  6A13               	clrf	___ftpack@arg+2,c
  8695  002016  0E8E               	movlw	142
  8696  002018  6E14               	movwf	___ftpack@exp,c
  8697  00201A  0E00               	movlw	0
  8698  00201C  6E15               	movwf	___ftpack@sign,c
  8699  00201E  EC34  F00B         	call	___ftpack	;wreg free
  8700  002022  C011  F019         	movff	?___ftpack,?___lbtoft
  8701  002026  C012  F01A         	movff	?___ftpack+1,?___lbtoft+1
  8702  00202A  C013  F01B         	movff	?___ftpack+2,?___lbtoft+2
  8703  00202E  D000               	goto	l1332
  8704  002030                     l1332:
  8705  002030  0012               	return		;funcret
  8706  002032                     __end_of___lbtoft:
  8707                           	opt stack 0
  8708                           tblptru	equ	0xFF8
  8709                           tblptrh	equ	0xFF7
  8710                           tblptrl	equ	0xFF6
  8711                           tablat	equ	0xFF5
  8712                           prodh	equ	0xFF4
  8713                           prodl	equ	0xFF3
  8714                           intcon	equ	0xFF2
  8715                           intcon2	equ	0xFF1
  8716                           postinc0	equ	0xFEE
  8717                           wreg	equ	0xFE8
  8718                           postdec1	equ	0xFE5
  8719                           fsr1l	equ	0xFE1
  8720                           indf2	equ	0xFDF
  8721                           postinc2	equ	0xFDE
  8722                           postdec2	equ	0xFDD
  8723                           fsr2h	equ	0xFDA
  8724                           fsr2l	equ	0xFD9
  8725                           status	equ	0xFD8
  8726                           
  8727 ;; *************** function ___fttol *****************
  8728 ;; Defined at:
  8729 ;;		line 44 in file "E:\XC8\sources\common\fttol.c"
  8730 ;; Parameters:    Size  Location     Type
  8731 ;;  f1              3   16[COMRAM] float 
  8732 ;; Auto vars:     Size  Location     Type
  8733 ;;  lval            4   26[COMRAM] unsigned long 
  8734 ;;  exp1            1   30[COMRAM] unsigned char 
  8735 ;;  sign1           1   25[COMRAM] unsigned char 
  8736 ;; Return value:  Size  Location     Type
  8737 ;;                  4   16[COMRAM] long 
  8738 ;; Registers used:
  8739 ;;		wreg, status,2, status,0
  8740 ;; Tracked objects:
  8741 ;;		On entry : 0/0
  8742 ;;		On exit  : 0/0
  8743 ;;		Unchanged: 0/0
  8744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8745 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8746 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8747 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8748 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8749 ;;Total ram usage:       15 bytes
  8750 ;; Hardware stack levels used:    1
  8751 ;; Hardware stack levels required when called:    3
  8752 ;; This function calls:
  8753 ;;		Nothing
  8754 ;; This function is called by:
  8755 ;;		_do_update_pwm
  8756 ;; This function uses a non-reentrant model
  8757 ;;
  8758                           
  8759                           	psect	text45
  8760  0013C4                     __ptext45:
  8761                           	opt stack 0
  8762  0013C4                     ___fttol:
  8763                           	opt stack 26
  8764                           
  8765                           ;incstack = 0
  8766  0013C4  C013  F015         	movff	___fttol@f1+2,??___fttol
  8767  0013C8  6A16               	clrf	(??___fttol+1)& (0+255),c
  8768  0013CA  6A17               	clrf	(??___fttol+2)& (0+255),c
  8769  0013CC  3412               	rlcf	___fttol@f1+1,w,c
  8770  0013CE  3615               	rlcf	??___fttol& (0+255),f,c
  8771  0013D0  E301               	bnc	u4411
  8772  0013D2  8016               	bsf	(??___fttol+1)& (0+255),0,c
  8773  0013D4                     u4411:
  8774  0013D4  5015               	movf	??___fttol,w,c
  8775  0013D6  6E1F               	movwf	___fttol@exp1,c
  8776  0013D8  501F               	movf	___fttol@exp1,w,c
  8777  0013DA  A4D8               	btfss	status,2,c
  8778  0013DC  D002               	goto	l5781
  8779  0013DE  D039               	goto	l5805
  8780  0013E0  D063               	goto	l1291
  8781  0013E2                     l5781:
  8782  0013E2  0E17               	movlw	23
  8783  0013E4  6E15               	movwf	??___fttol& (0+255),c
  8784  0013E6  C011  F016         	movff	___fttol@f1,??___fttol+1
  8785  0013EA  C012  F017         	movff	___fttol@f1+1,??___fttol+2
  8786  0013EE  C013  F018         	movff	___fttol@f1+2,??___fttol+3
  8787  0013F2  2815               	incf	??___fttol,w,c
  8788  0013F4  6E19               	movwf	(??___fttol+4)& (0+255),c
  8789  0013F6  D004               	goto	u4430
  8790  0013F8                     u4435:
  8791  0013F8  90D8               	bcf	status,0,c
  8792  0013FA  3218               	rrcf	??___fttol+3,f,c
  8793  0013FC  3217               	rrcf	??___fttol+2,f,c
  8794  0013FE  3216               	rrcf	??___fttol+1,f,c
  8795  001400                     u4430:
  8796  001400  2E19               	decfsz	(??___fttol+4)& (0+255),f,c
  8797  001402  D7FA               	goto	u4435
  8798  001404  5016               	movf	??___fttol+1,w,c
  8799  001406  6E1A               	movwf	___fttol@sign1,c
  8800  001408  8E12               	bsf	___fttol@f1+1,7,c
  8801  00140A  0EFF               	movlw	255
  8802  00140C  1611               	andwf	___fttol@f1,f,c
  8803  00140E  0EFF               	movlw	255
  8804  001410  1612               	andwf	___fttol@f1+1,f,c
  8805  001412  0E00               	movlw	0
  8806  001414  1613               	andwf	___fttol@f1+2,f,c
  8807  001416  5011               	movf	___fttol@f1,w,c
  8808  001418  6E1B               	movwf	___fttol@lval,c
  8809  00141A  5012               	movf	___fttol@f1+1,w,c
  8810  00141C  6E1C               	movwf	___fttol@lval+1,c
  8811  00141E  5013               	movf	___fttol@f1+2,w,c
  8812  001420  6E1D               	movwf	___fttol@lval+2,c
  8813  001422  6A1E               	clrf	___fttol@lval+3,c
  8814  001424  0E8E               	movlw	142
  8815  001426  5E1F               	subwf	___fttol@exp1,f,c
  8816  001428  AE1F               	btfss	___fttol@exp1,7,c
  8817  00142A  D010               	goto	l5803
  8818  00142C  501F               	movf	___fttol@exp1,w,c
  8819  00142E  0A80               	xorlw	128
  8820  001430  0F8F               	addlw	143
  8821  001432  B0D8               	btfsc	status,0,c
  8822  001434  D003               	goto	l5799
  8823  001436  D00D               	goto	l5805
  8824  001438  D037               	goto	l1291
  8825  00143A  D000               	goto	l5799
  8826  00143C                     l5799:
  8827  00143C  90D8               	bcf	status,0,c
  8828  00143E  321E               	rrcf	___fttol@lval+3,f,c
  8829  001440  321D               	rrcf	___fttol@lval+2,f,c
  8830  001442  321C               	rrcf	___fttol@lval+1,f,c
  8831  001444  321B               	rrcf	___fttol@lval,f,c
  8832  001446  3E1F               	incfsz	___fttol@exp1,f,c
  8833  001448  D7F9               	goto	l5799
  8834  00144A  D019               	goto	l5813
  8835  00144C                     l5803:
  8836  00144C  0E17               	movlw	23
  8837  00144E  641F               	cpfsgt	___fttol@exp1,c
  8838  001450  D011               	goto	l5811
  8839  001452                     l5805:
  8840  001452  0E00               	movlw	0
  8841  001454  6E11               	movwf	?___fttol,c
  8842  001456  0E00               	movlw	0
  8843  001458  6E12               	movwf	?___fttol+1,c
  8844  00145A  0E00               	movlw	0
  8845  00145C  6E13               	movwf	?___fttol+2,c
  8846  00145E  0E00               	movlw	0
  8847  001460  6E14               	movwf	?___fttol+3,c
  8848  001462  D022               	goto	l1291
  8849  001464  D007               	goto	l5811
  8850  001466                     l5809:
  8851  001466  90D8               	bcf	status,0,c
  8852  001468  361B               	rlcf	___fttol@lval,f,c
  8853  00146A  361C               	rlcf	___fttol@lval+1,f,c
  8854  00146C  361D               	rlcf	___fttol@lval+2,f,c
  8855  00146E  361E               	rlcf	___fttol@lval+3,f,c
  8856  001470  061F               	decf	___fttol@exp1,f,c
  8857  001472  D000               	goto	l5811
  8858  001474                     l5811:
  8859  001474  501F               	movf	___fttol@exp1,w,c
  8860  001476  B4D8               	btfsc	status,2,c
  8861  001478  D002               	goto	l5813
  8862  00147A  D7F5               	goto	l5809
  8863  00147C  D000               	goto	l5813
  8864  00147E                     l5813:
  8865  00147E  501A               	movf	___fttol@sign1,w,c
  8866  001480  B4D8               	btfsc	status,2,c
  8867  001482  D009               	goto	l5817
  8868  001484  1E1E               	comf	___fttol@lval+3,f,c
  8869  001486  1E1D               	comf	___fttol@lval+2,f,c
  8870  001488  1E1C               	comf	___fttol@lval+1,f,c
  8871  00148A  6C1B               	negf	___fttol@lval,c
  8872  00148C  0E00               	movlw	0
  8873  00148E  221C               	addwfc	___fttol@lval+1,f,c
  8874  001490  221D               	addwfc	___fttol@lval+2,f,c
  8875  001492  221E               	addwfc	___fttol@lval+3,f,c
  8876  001494  D000               	goto	l5817
  8877  001496                     l5817:
  8878  001496  C01B  F011         	movff	___fttol@lval,?___fttol
  8879  00149A  C01C  F012         	movff	___fttol@lval+1,?___fttol+1
  8880  00149E  C01D  F013         	movff	___fttol@lval+2,?___fttol+2
  8881  0014A2  C01E  F014         	movff	___fttol@lval+3,?___fttol+3
  8882  0014A6  D000               	goto	l1291
  8883  0014A8                     l1291:
  8884  0014A8  0012               	return		;funcret
  8885  0014AA                     __end_of___fttol:
  8886                           	opt stack 0
  8887                           tblptru	equ	0xFF8
  8888                           tblptrh	equ	0xFF7
  8889                           tblptrl	equ	0xFF6
  8890                           tablat	equ	0xFF5
  8891                           prodh	equ	0xFF4
  8892                           prodl	equ	0xFF3
  8893                           intcon	equ	0xFF2
  8894                           intcon2	equ	0xFF1
  8895                           postinc0	equ	0xFEE
  8896                           wreg	equ	0xFE8
  8897                           postdec1	equ	0xFE5
  8898                           fsr1l	equ	0xFE1
  8899                           indf2	equ	0xFDF
  8900                           postinc2	equ	0xFDE
  8901                           postdec2	equ	0xFDD
  8902                           fsr2h	equ	0xFDA
  8903                           fsr2l	equ	0xFD9
  8904                           status	equ	0xFD8
  8905                           
  8906 ;; *************** function ___ftmul *****************
  8907 ;; Defined at:
  8908 ;;		line 62 in file "E:\XC8\sources\common\ftmul.c"
  8909 ;; Parameters:    Size  Location     Type
  8910 ;;  f1              3   28[COMRAM] float 
  8911 ;;  f2              3   31[COMRAM] float 
  8912 ;; Auto vars:     Size  Location     Type
  8913 ;;  f3_as_produc    3   38[COMRAM] unsigned um
  8914 ;;  sign            1   42[COMRAM] unsigned char 
  8915 ;;  cntr            1   41[COMRAM] unsigned char 
  8916 ;;  exp             1   37[COMRAM] unsigned char 
  8917 ;; Return value:  Size  Location     Type
  8918 ;;                  3   28[COMRAM] float 
  8919 ;; Registers used:
  8920 ;;		wreg, status,2, status,0, cstack
  8921 ;; Tracked objects:
  8922 ;;		On entry : 0/0
  8923 ;;		On exit  : 0/0
  8924 ;;		Unchanged: 0/0
  8925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8926 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8927 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8928 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8929 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8930 ;;Total ram usage:       15 bytes
  8931 ;; Hardware stack levels used:    1
  8932 ;; Hardware stack levels required when called:    4
  8933 ;; This function calls:
  8934 ;;		___ftpack
  8935 ;; This function is called by:
  8936 ;;		_do_update_pwm
  8937 ;; This function uses a non-reentrant model
  8938 ;;
  8939                           
  8940                           	psect	text46
  8941  0011DA                     __ptext46:
  8942                           	opt stack 0
  8943  0011DA                     ___ftmul:
  8944                           	opt stack 25
  8945                           
  8946                           ;incstack = 0
  8947  0011DA  C01F  F023         	movff	___ftmul@f1+2,??___ftmul
  8948  0011DE  6A24               	clrf	(??___ftmul+1)& (0+255),c
  8949  0011E0  6A25               	clrf	(??___ftmul+2)& (0+255),c
  8950  0011E2  341E               	rlcf	___ftmul@f1+1,w,c
  8951  0011E4  3623               	rlcf	??___ftmul& (0+255),f,c
  8952  0011E6  E301               	bnc	u4351
  8953  0011E8  8024               	bsf	(??___ftmul+1)& (0+255),0,c
  8954  0011EA                     u4351:
  8955  0011EA  5023               	movf	??___ftmul,w,c
  8956  0011EC  6E26               	movwf	___ftmul@exp,c
  8957  0011EE  5026               	movf	___ftmul@exp,w,c
  8958  0011F0  A4D8               	btfss	status,2,c
  8959  0011F2  D002               	goto	l5733
  8960  0011F4  D00E               	goto	l5735
  8961  0011F6  D06C               	goto	l1270
  8962  0011F8                     l5733:
  8963  0011F8  C022  F023         	movff	___ftmul@f2+2,??___ftmul
  8964  0011FC  6A24               	clrf	(??___ftmul+1)& (0+255),c
  8965  0011FE  6A25               	clrf	(??___ftmul+2)& (0+255),c
  8966  001200  3421               	rlcf	___ftmul@f2+1,w,c
  8967  001202  3623               	rlcf	??___ftmul& (0+255),f,c
  8968  001204  E301               	bnc	u4371
  8969  001206  8024               	bsf	(??___ftmul+1)& (0+255),0,c
  8970  001208                     u4371:
  8971  001208  5023               	movf	??___ftmul,w,c
  8972  00120A  6E2B               	movwf	___ftmul@sign,c
  8973  00120C  502B               	movf	___ftmul@sign,w,c
  8974  00120E  A4D8               	btfss	status,2,c
  8975  001210  D007               	goto	l5739
  8976  001212                     l5735:
  8977  001212  0E00               	movlw	0
  8978  001214  6E1D               	movwf	?___ftmul,c
  8979  001216  0E00               	movlw	0
  8980  001218  6E1E               	movwf	?___ftmul+1,c
  8981  00121A  0E00               	movlw	0
  8982  00121C  6E1F               	movwf	?___ftmul+2,c
  8983  00121E  D058               	goto	l1270
  8984  001220                     l5739:
  8985  001220  502B               	movf	___ftmul@sign,w,c
  8986  001222  0F7B               	addlw	123
  8987  001224  2626               	addwf	___ftmul@exp,f,c
  8988  001226  C01F  F02B         	movff	___ftmul@f1+2,___ftmul@sign
  8989  00122A  5022               	movf	___ftmul@f2+2,w,c
  8990  00122C  1A2B               	xorwf	___ftmul@sign,f,c
  8991  00122E  0E80               	movlw	128
  8992  001230  162B               	andwf	___ftmul@sign,f,c
  8993  001232  8E1E               	bsf	___ftmul@f1+1,7,c
  8994  001234  8E21               	bsf	___ftmul@f2+1,7,c
  8995  001236  0EFF               	movlw	255
  8996  001238  1620               	andwf	___ftmul@f2,f,c
  8997  00123A  0EFF               	movlw	255
  8998  00123C  1621               	andwf	___ftmul@f2+1,f,c
  8999  00123E  0E00               	movlw	0
  9000  001240  1622               	andwf	___ftmul@f2+2,f,c
  9001  001242  0E00               	movlw	0
  9002  001244  6E27               	movwf	___ftmul@f3_as_product,c
  9003  001246  0E00               	movlw	0
  9004  001248  6E28               	movwf	___ftmul@f3_as_product+1,c
  9005  00124A  0E00               	movlw	0
  9006  00124C  6E29               	movwf	___ftmul@f3_as_product+2,c
  9007  00124E  0E07               	movlw	7
  9008  001250  6E2A               	movwf	___ftmul@cntr,c
  9009  001252  D000               	goto	l5753
  9010  001254                     l5753:
  9011  001254  A01D               	btfss	___ftmul@f1,0,c
  9012  001256  D007               	goto	l5757
  9013  001258  5020               	movf	___ftmul@f2,w,c
  9014  00125A  2627               	addwf	___ftmul@f3_as_product,f,c
  9015  00125C  5021               	movf	___ftmul@f2+1,w,c
  9016  00125E  2228               	addwfc	___ftmul@f3_as_product+1,f,c
  9017  001260  5022               	movf	___ftmul@f2+2,w,c
  9018  001262  2229               	addwfc	___ftmul@f3_as_product+2,f,c
  9019  001264  D000               	goto	l5757
  9020  001266                     l5757:
  9021  001266  90D8               	bcf	status,0,c
  9022  001268  321F               	rrcf	___ftmul@f1+2,f,c
  9023  00126A  321E               	rrcf	___ftmul@f1+1,f,c
  9024  00126C  321D               	rrcf	___ftmul@f1,f,c
  9025  00126E  90D8               	bcf	status,0,c
  9026  001270  3620               	rlcf	___ftmul@f2,f,c
  9027  001272  3621               	rlcf	___ftmul@f2+1,f,c
  9028  001274  3622               	rlcf	___ftmul@f2+2,f,c
  9029  001276  2E2A               	decfsz	___ftmul@cntr,f,c
  9030  001278  D7ED               	goto	l5753
  9031  00127A  D000               	goto	l5761
  9032  00127C                     l5761:
  9033  00127C  0E09               	movlw	9
  9034  00127E  6E2A               	movwf	___ftmul@cntr,c
  9035  001280  D000               	goto	l5763
  9036  001282                     l5763:
  9037  001282  A01D               	btfss	___ftmul@f1,0,c
  9038  001284  D007               	goto	l5767
  9039  001286  5020               	movf	___ftmul@f2,w,c
  9040  001288  2627               	addwf	___ftmul@f3_as_product,f,c
  9041  00128A  5021               	movf	___ftmul@f2+1,w,c
  9042  00128C  2228               	addwfc	___ftmul@f3_as_product+1,f,c
  9043  00128E  5022               	movf	___ftmul@f2+2,w,c
  9044  001290  2229               	addwfc	___ftmul@f3_as_product+2,f,c
  9045  001292  D000               	goto	l5767
  9046  001294                     l5767:
  9047  001294  90D8               	bcf	status,0,c
  9048  001296  321F               	rrcf	___ftmul@f1+2,f,c
  9049  001298  321E               	rrcf	___ftmul@f1+1,f,c
  9050  00129A  321D               	rrcf	___ftmul@f1,f,c
  9051  00129C  90D8               	bcf	status,0,c
  9052  00129E  3229               	rrcf	___ftmul@f3_as_product+2,f,c
  9053  0012A0  3228               	rrcf	___ftmul@f3_as_product+1,f,c
  9054  0012A2  3227               	rrcf	___ftmul@f3_as_product,f,c
  9055  0012A4  2E2A               	decfsz	___ftmul@cntr,f,c
  9056  0012A6  D7ED               	goto	l5763
  9057  0012A8  D000               	goto	l5771
  9058  0012AA                     l5771:
  9059  0012AA  C027  F011         	movff	___ftmul@f3_as_product,___ftpack@arg
  9060  0012AE  C028  F012         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  9061  0012B2  C029  F013         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  9062  0012B6  C026  F014         	movff	___ftmul@exp,___ftpack@exp
  9063  0012BA  C02B  F015         	movff	___ftmul@sign,___ftpack@sign
  9064  0012BE  EC34  F00B         	call	___ftpack	;wreg free
  9065  0012C2  C011  F01D         	movff	?___ftpack,?___ftmul
  9066  0012C6  C012  F01E         	movff	?___ftpack+1,?___ftmul+1
  9067  0012CA  C013  F01F         	movff	?___ftpack+2,?___ftmul+2
  9068  0012CE  D000               	goto	l1270
  9069  0012D0                     l1270:
  9070  0012D0  0012               	return		;funcret
  9071  0012D2                     __end_of___ftmul:
  9072                           	opt stack 0
  9073                           tblptru	equ	0xFF8
  9074                           tblptrh	equ	0xFF7
  9075                           tblptrl	equ	0xFF6
  9076                           tablat	equ	0xFF5
  9077                           prodh	equ	0xFF4
  9078                           prodl	equ	0xFF3
  9079                           intcon	equ	0xFF2
  9080                           intcon2	equ	0xFF1
  9081                           postinc0	equ	0xFEE
  9082                           wreg	equ	0xFE8
  9083                           postdec1	equ	0xFE5
  9084                           fsr1l	equ	0xFE1
  9085                           indf2	equ	0xFDF
  9086                           postinc2	equ	0xFDE
  9087                           postdec2	equ	0xFDD
  9088                           fsr2h	equ	0xFDA
  9089                           fsr2l	equ	0xFD9
  9090                           status	equ	0xFD8
  9091                           
  9092 ;; *************** function ___ftdiv *****************
  9093 ;; Defined at:
  9094 ;;		line 54 in file "E:\XC8\sources\common\ftdiv.c"
  9095 ;; Parameters:    Size  Location     Type
  9096 ;;  f1              3   43[COMRAM] float 
  9097 ;;  f2              3   46[COMRAM] float 
  9098 ;; Auto vars:     Size  Location     Type
  9099 ;;  f3              3   53[COMRAM] float 
  9100 ;;  sign            1   57[COMRAM] unsigned char 
  9101 ;;  exp             1   56[COMRAM] unsigned char 
  9102 ;;  cntr            1   52[COMRAM] unsigned char 
  9103 ;; Return value:  Size  Location     Type
  9104 ;;                  3   43[COMRAM] float 
  9105 ;; Registers used:
  9106 ;;		wreg, status,2, status,0, cstack
  9107 ;; Tracked objects:
  9108 ;;		On entry : 0/0
  9109 ;;		On exit  : 0/0
  9110 ;;		Unchanged: 0/0
  9111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9112 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9113 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9114 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9115 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9116 ;;Total ram usage:       15 bytes
  9117 ;; Hardware stack levels used:    1
  9118 ;; Hardware stack levels required when called:    4
  9119 ;; This function calls:
  9120 ;;		___ftpack
  9121 ;; This function is called by:
  9122 ;;		_do_update_pwm
  9123 ;; This function uses a non-reentrant model
  9124 ;;
  9125                           
  9126                           	psect	text47
  9127  0014AA                     __ptext47:
  9128                           	opt stack 0
  9129  0014AA                     ___ftdiv:
  9130                           	opt stack 25
  9131                           
  9132                           ;incstack = 0
  9133  0014AA  C02E  F032         	movff	___ftdiv@f1+2,??___ftdiv
  9134  0014AE  6A33               	clrf	(??___ftdiv+1)& (0+255),c
  9135  0014B0  6A34               	clrf	(??___ftdiv+2)& (0+255),c
  9136  0014B2  342D               	rlcf	___ftdiv@f1+1,w,c
  9137  0014B4  3632               	rlcf	??___ftdiv& (0+255),f,c
  9138  0014B6  E301               	bnc	u4301
  9139  0014B8  8033               	bsf	(??___ftdiv+1)& (0+255),0,c
  9140  0014BA                     u4301:
  9141  0014BA  5032               	movf	??___ftdiv,w,c
  9142  0014BC  6E39               	movwf	___ftdiv@exp,c
  9143  0014BE  5039               	movf	___ftdiv@exp,w,c
  9144  0014C0  A4D8               	btfss	status,2,c
  9145  0014C2  D002               	goto	l5687
  9146  0014C4  D00E               	goto	l5689
  9147  0014C6  D061               	goto	l1255
  9148  0014C8                     l5687:
  9149  0014C8  C031  F032         	movff	___ftdiv@f2+2,??___ftdiv
  9150  0014CC  6A33               	clrf	(??___ftdiv+1)& (0+255),c
  9151  0014CE  6A34               	clrf	(??___ftdiv+2)& (0+255),c
  9152  0014D0  3430               	rlcf	___ftdiv@f2+1,w,c
  9153  0014D2  3632               	rlcf	??___ftdiv& (0+255),f,c
  9154  0014D4  E301               	bnc	u4321
  9155  0014D6  8033               	bsf	(??___ftdiv+1)& (0+255),0,c
  9156  0014D8                     u4321:
  9157  0014D8  5032               	movf	??___ftdiv,w,c
  9158  0014DA  6E3A               	movwf	___ftdiv@sign,c
  9159  0014DC  503A               	movf	___ftdiv@sign,w,c
  9160  0014DE  A4D8               	btfss	status,2,c
  9161  0014E0  D007               	goto	l5693
  9162  0014E2                     l5689:
  9163  0014E2  0E00               	movlw	0
  9164  0014E4  6E2C               	movwf	?___ftdiv,c
  9165  0014E6  0E00               	movlw	0
  9166  0014E8  6E2D               	movwf	?___ftdiv+1,c
  9167  0014EA  0E00               	movlw	0
  9168  0014EC  6E2E               	movwf	?___ftdiv+2,c
  9169  0014EE  D04D               	goto	l1255
  9170  0014F0                     l5693:
  9171  0014F0  0E00               	movlw	0
  9172  0014F2  6E36               	movwf	___ftdiv@f3,c
  9173  0014F4  0E00               	movlw	0
  9174  0014F6  6E37               	movwf	___ftdiv@f3+1,c
  9175  0014F8  0E00               	movlw	0
  9176  0014FA  6E38               	movwf	___ftdiv@f3+2,c
  9177  0014FC  503A               	movf	___ftdiv@sign,w,c
  9178  0014FE  0F89               	addlw	137
  9179  001500  5E39               	subwf	___ftdiv@exp,f,c
  9180  001502  C02E  F03A         	movff	___ftdiv@f1+2,___ftdiv@sign
  9181  001506  5031               	movf	___ftdiv@f2+2,w,c
  9182  001508  1A3A               	xorwf	___ftdiv@sign,f,c
  9183  00150A  0E80               	movlw	128
  9184  00150C  163A               	andwf	___ftdiv@sign,f,c
  9185  00150E  8E2D               	bsf	___ftdiv@f1+1,7,c
  9186  001510  0EFF               	movlw	255
  9187  001512  162C               	andwf	___ftdiv@f1,f,c
  9188  001514  0EFF               	movlw	255
  9189  001516  162D               	andwf	___ftdiv@f1+1,f,c
  9190  001518  0E00               	movlw	0
  9191  00151A  162E               	andwf	___ftdiv@f1+2,f,c
  9192  00151C  8E30               	bsf	___ftdiv@f2+1,7,c
  9193  00151E  0EFF               	movlw	255
  9194  001520  162F               	andwf	___ftdiv@f2,f,c
  9195  001522  0EFF               	movlw	255
  9196  001524  1630               	andwf	___ftdiv@f2+1,f,c
  9197  001526  0E00               	movlw	0
  9198  001528  1631               	andwf	___ftdiv@f2+2,f,c
  9199  00152A  0E18               	movlw	24
  9200  00152C  6E35               	movwf	___ftdiv@cntr,c
  9201  00152E  D000               	goto	l5713
  9202  001530                     l5713:
  9203  001530  90D8               	bcf	status,0,c
  9204  001532  3636               	rlcf	___ftdiv@f3,f,c
  9205  001534  3637               	rlcf	___ftdiv@f3+1,f,c
  9206  001536  3638               	rlcf	___ftdiv@f3+2,f,c
  9207  001538  502F               	movf	___ftdiv@f2,w,c
  9208  00153A  5C2C               	subwf	___ftdiv@f1,w,c
  9209  00153C  5030               	movf	___ftdiv@f2+1,w,c
  9210  00153E  582D               	subwfb	___ftdiv@f1+1,w,c
  9211  001540  5031               	movf	___ftdiv@f2+2,w,c
  9212  001542  582E               	subwfb	___ftdiv@f1+2,w,c
  9213  001544  A0D8               	btfss	status,0,c
  9214  001546  D007               	goto	l1258
  9215  001548  502F               	movf	___ftdiv@f2,w,c
  9216  00154A  5E2C               	subwf	___ftdiv@f1,f,c
  9217  00154C  5030               	movf	___ftdiv@f2+1,w,c
  9218  00154E  5A2D               	subwfb	___ftdiv@f1+1,f,c
  9219  001550  5031               	movf	___ftdiv@f2+2,w,c
  9220  001552  5A2E               	subwfb	___ftdiv@f1+2,f,c
  9221  001554  8036               	bsf	___ftdiv@f3,0,c
  9222  001556                     l1258:
  9223  001556  90D8               	bcf	status,0,c
  9224  001558  362C               	rlcf	___ftdiv@f1,f,c
  9225  00155A  362D               	rlcf	___ftdiv@f1+1,f,c
  9226  00155C  362E               	rlcf	___ftdiv@f1+2,f,c
  9227  00155E  2E35               	decfsz	___ftdiv@cntr,f,c
  9228  001560  D7E7               	goto	l5713
  9229  001562  D000               	goto	l5723
  9230  001564                     l5723:
  9231  001564  C036  F011         	movff	___ftdiv@f3,___ftpack@arg
  9232  001568  C037  F012         	movff	___ftdiv@f3+1,___ftpack@arg+1
  9233  00156C  C038  F013         	movff	___ftdiv@f3+2,___ftpack@arg+2
  9234  001570  C039  F014         	movff	___ftdiv@exp,___ftpack@exp
  9235  001574  C03A  F015         	movff	___ftdiv@sign,___ftpack@sign
  9236  001578  EC34  F00B         	call	___ftpack	;wreg free
  9237  00157C  C011  F02C         	movff	?___ftpack,?___ftdiv
  9238  001580  C012  F02D         	movff	?___ftpack+1,?___ftdiv+1
  9239  001584  C013  F02E         	movff	?___ftpack+2,?___ftdiv+2
  9240  001588  D000               	goto	l1255
  9241  00158A                     l1255:
  9242  00158A  0012               	return		;funcret
  9243  00158C                     __end_of___ftdiv:
  9244                           	opt stack 0
  9245                           tblptru	equ	0xFF8
  9246                           tblptrh	equ	0xFF7
  9247                           tblptrl	equ	0xFF6
  9248                           tablat	equ	0xFF5
  9249                           prodh	equ	0xFF4
  9250                           prodl	equ	0xFF3
  9251                           intcon	equ	0xFF2
  9252                           intcon2	equ	0xFF1
  9253                           postinc0	equ	0xFEE
  9254                           wreg	equ	0xFE8
  9255                           postdec1	equ	0xFE5
  9256                           fsr1l	equ	0xFE1
  9257                           indf2	equ	0xFDF
  9258                           postinc2	equ	0xFDE
  9259                           postdec2	equ	0xFDD
  9260                           fsr2h	equ	0xFDA
  9261                           fsr2l	equ	0xFD9
  9262                           status	equ	0xFD8
  9263                           
  9264 ;; *************** function ___ftpack *****************
  9265 ;; Defined at:
  9266 ;;		line 62 in file "E:\XC8\sources\common\float.c"
  9267 ;; Parameters:    Size  Location     Type
  9268 ;;  arg             3   16[COMRAM] unsigned um
  9269 ;;  exp             1   19[COMRAM] unsigned char 
  9270 ;;  sign            1   20[COMRAM] unsigned char 
  9271 ;; Auto vars:     Size  Location     Type
  9272 ;;		None
  9273 ;; Return value:  Size  Location     Type
  9274 ;;                  3   16[COMRAM] float 
  9275 ;; Registers used:
  9276 ;;		wreg, status,2, status,0
  9277 ;; Tracked objects:
  9278 ;;		On entry : 0/0
  9279 ;;		On exit  : 0/0
  9280 ;;		Unchanged: 0/0
  9281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9282 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9283 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9284 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9285 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9286 ;;Total ram usage:        8 bytes
  9287 ;; Hardware stack levels used:    1
  9288 ;; Hardware stack levels required when called:    3
  9289 ;; This function calls:
  9290 ;;		Nothing
  9291 ;; This function is called by:
  9292 ;;		___ftdiv
  9293 ;;		___ftmul
  9294 ;;		___lbtoft
  9295 ;; This function uses a non-reentrant model
  9296 ;;
  9297                           
  9298                           	psect	text48
  9299  001668                     __ptext48:
  9300                           	opt stack 0
  9301  001668                     ___ftpack:
  9302                           	opt stack 25
  9303                           
  9304                           ;incstack = 0
  9305  001668  5014               	movf	___ftpack@exp,w,c
  9306  00166A  B4D8               	btfsc	status,2,c
  9307  00166C  D005               	goto	l5369
  9308  00166E  5011               	movf	___ftpack@arg,w,c
  9309  001670  1012               	iorwf	___ftpack@arg+1,w,c
  9310  001672  1013               	iorwf	___ftpack@arg+2,w,c
  9311  001674  A4D8               	btfss	status,2,c
  9312  001676  D00E               	goto	l5375
  9313  001678                     l5369:
  9314  001678  0E00               	movlw	0
  9315  00167A  6E11               	movwf	?___ftpack,c
  9316  00167C  0E00               	movlw	0
  9317  00167E  6E12               	movwf	?___ftpack+1,c
  9318  001680  0E00               	movlw	0
  9319  001682  6E13               	movwf	?___ftpack+2,c
  9320  001684  D053               	goto	l1183
  9321  001686  D006               	goto	l5375
  9322  001688                     l5373:
  9323  001688  2A14               	incf	___ftpack@exp,f,c
  9324  00168A  90D8               	bcf	status,0,c
  9325  00168C  3213               	rrcf	___ftpack@arg+2,f,c
  9326  00168E  3212               	rrcf	___ftpack@arg+1,f,c
  9327  001690  3211               	rrcf	___ftpack@arg,f,c
  9328  001692  D000               	goto	l5375
  9329  001694                     l5375:
  9330  001694  0E00               	movlw	0
  9331  001696  1411               	andwf	___ftpack@arg,w,c
  9332  001698  6E16               	movwf	??___ftpack& (0+255),c
  9333  00169A  0E00               	movlw	0
  9334  00169C  1412               	andwf	___ftpack@arg+1,w,c
  9335  00169E  6E17               	movwf	(??___ftpack+1)& (0+255),c
  9336  0016A0  0EFE               	movlw	254
  9337  0016A2  1413               	andwf	___ftpack@arg+2,w,c
  9338  0016A4  6E18               	movwf	(??___ftpack+2)& (0+255),c
  9339  0016A6  5016               	movf	??___ftpack,w,c
  9340  0016A8  1017               	iorwf	??___ftpack+1,w,c
  9341  0016AA  1018               	iorwf	??___ftpack+2,w,c
  9342  0016AC  B4D8               	btfsc	status,2,c
  9343  0016AE  D00E               	goto	l5381
  9344  0016B0  D7EB               	goto	l5373
  9345  0016B2  D00C               	goto	l5381
  9346  0016B4                     l5377:
  9347  0016B4  2A14               	incf	___ftpack@exp,f,c
  9348  0016B6  0E01               	movlw	1
  9349  0016B8  2611               	addwf	___ftpack@arg,f,c
  9350  0016BA  0E00               	movlw	0
  9351  0016BC  2212               	addwfc	___ftpack@arg+1,f,c
  9352  0016BE  0E00               	movlw	0
  9353  0016C0  2213               	addwfc	___ftpack@arg+2,f,c
  9354  0016C2  90D8               	bcf	status,0,c
  9355  0016C4  3213               	rrcf	___ftpack@arg+2,f,c
  9356  0016C6  3212               	rrcf	___ftpack@arg+1,f,c
  9357  0016C8  3211               	rrcf	___ftpack@arg,f,c
  9358  0016CA  D000               	goto	l5381
  9359  0016CC                     l5381:
  9360  0016CC  0E00               	movlw	0
  9361  0016CE  1411               	andwf	___ftpack@arg,w,c
  9362  0016D0  6E16               	movwf	??___ftpack& (0+255),c
  9363  0016D2  0E00               	movlw	0
  9364  0016D4  1412               	andwf	___ftpack@arg+1,w,c
  9365  0016D6  6E17               	movwf	(??___ftpack+1)& (0+255),c
  9366  0016D8  0EFF               	movlw	255
  9367  0016DA  1413               	andwf	___ftpack@arg+2,w,c
  9368  0016DC  6E18               	movwf	(??___ftpack+2)& (0+255),c
  9369  0016DE  5016               	movf	??___ftpack,w,c
  9370  0016E0  1017               	iorwf	??___ftpack+1,w,c
  9371  0016E2  1018               	iorwf	??___ftpack+2,w,c
  9372  0016E4  B4D8               	btfsc	status,2,c
  9373  0016E6  D008               	goto	l5385
  9374  0016E8  D7E5               	goto	l5377
  9375  0016EA  D006               	goto	l5385
  9376  0016EC                     l5383:
  9377  0016EC  0614               	decf	___ftpack@exp,f,c
  9378  0016EE  90D8               	bcf	status,0,c
  9379  0016F0  3611               	rlcf	___ftpack@arg,f,c
  9380  0016F2  3612               	rlcf	___ftpack@arg+1,f,c
  9381  0016F4  3613               	rlcf	___ftpack@arg+2,f,c
  9382  0016F6  D000               	goto	l5385
  9383  0016F8                     l5385:
  9384  0016F8  BE12               	btfsc	___ftpack@arg+1,7,c
  9385  0016FA  D004               	goto	l1194
  9386  0016FC  0E02               	movlw	2
  9387  0016FE  6014               	cpfslt	___ftpack@exp,c
  9388  001700  D7F5               	goto	l5383
  9389  001702  D000               	goto	l1194
  9390  001704                     l1194:
  9391  001704  B014               	btfsc	___ftpack@exp,0,c
  9392  001706  D002               	goto	l5391
  9393  001708  9E12               	bcf	___ftpack@arg+1,7,c
  9394  00170A  D000               	goto	l5391
  9395  00170C                     l5391:
  9396  00170C  90D8               	bcf	status,0,c
  9397  00170E  3214               	rrcf	___ftpack@exp,f,c
  9398  001710  5014               	movf	___ftpack@exp,w,c
  9399  001712  1213               	iorwf	___ftpack@arg+2,f,c
  9400  001714  5015               	movf	___ftpack@sign,w,c
  9401  001716  B4D8               	btfsc	status,2,c
  9402  001718  D002               	goto	l5397
  9403  00171A  8E13               	bsf	___ftpack@arg+2,7,c
  9404  00171C  D000               	goto	l5397
  9405  00171E                     l5397:
  9406  00171E  C011  F011         	movff	___ftpack@arg,?___ftpack
  9407  001722  C012  F012         	movff	___ftpack@arg+1,?___ftpack+1
  9408  001726  C013  F013         	movff	___ftpack@arg+2,?___ftpack+2
  9409  00172A  D000               	goto	l1183
  9410  00172C                     l1183:
  9411  00172C  0012               	return		;funcret
  9412  00172E                     __end_of___ftpack:
  9413                           	opt stack 0
  9414                           tblptru	equ	0xFF8
  9415                           tblptrh	equ	0xFF7
  9416                           tblptrl	equ	0xFF6
  9417                           tablat	equ	0xFF5
  9418                           prodh	equ	0xFF4
  9419                           prodl	equ	0xFF3
  9420                           intcon	equ	0xFF2
  9421                           intcon2	equ	0xFF1
  9422                           postinc0	equ	0xFEE
  9423                           wreg	equ	0xFE8
  9424                           postdec1	equ	0xFE5
  9425                           fsr1l	equ	0xFE1
  9426                           indf2	equ	0xFDF
  9427                           postinc2	equ	0xFDE
  9428                           postdec2	equ	0xFDD
  9429                           fsr2h	equ	0xFDA
  9430                           fsr2l	equ	0xFD9
  9431                           status	equ	0xFD8
  9432                           
  9433 ;; *************** function _Wait_One_Sec *****************
  9434 ;; Defined at:
  9435 ;;		line 28 in file "Utils.c"
  9436 ;; Parameters:    Size  Location     Type
  9437 ;;		None
  9438 ;; Auto vars:     Size  Location     Type
  9439 ;;		None
  9440 ;; Return value:  Size  Location     Type
  9441 ;;		None               void
  9442 ;; Registers used:
  9443 ;;		wreg, status,2, cstack
  9444 ;; Tracked objects:
  9445 ;;		On entry : 0/0
  9446 ;;		On exit  : 0/0
  9447 ;;		Unchanged: 0/0
  9448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9449 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9450 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9451 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9452 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9453 ;;Total ram usage:        0 bytes
  9454 ;; Hardware stack levels used:    1
  9455 ;; Hardware stack levels required when called:    4
  9456 ;; This function calls:
  9457 ;;		_Wait_Half_Second
  9458 ;; This function is called by:
  9459 ;;		_Do_Beep
  9460 ;; This function uses a non-reentrant model
  9461 ;;
  9462                           
  9463                           	psect	text49
  9464  00221A                     __ptext49:
  9465                           	opt stack 0
  9466  00221A                     _Wait_One_Sec:
  9467                           	opt stack 25
  9468                           
  9469                           ;Utils.c: 30: Wait_Half_Second();
  9470                           
  9471                           ;incstack = 0
  9472  00221A  EC75  F010         	call	_Wait_Half_Second	;wreg free
  9473                           
  9474                           ;Utils.c: 32: Wait_Half_Second();
  9475  00221E  EC75  F010         	call	_Wait_Half_Second	;wreg free
  9476  002222  0012               	return		;funcret
  9477  002224                     __end_of_Wait_One_Sec:
  9478                           	opt stack 0
  9479                           tblptru	equ	0xFF8
  9480                           tblptrh	equ	0xFF7
  9481                           tblptrl	equ	0xFF6
  9482                           tablat	equ	0xFF5
  9483                           prodh	equ	0xFF4
  9484                           prodl	equ	0xFF3
  9485                           intcon	equ	0xFF2
  9486                           intcon2	equ	0xFF1
  9487                           postinc0	equ	0xFEE
  9488                           wreg	equ	0xFE8
  9489                           postdec1	equ	0xFE5
  9490                           fsr1l	equ	0xFE1
  9491                           indf2	equ	0xFDF
  9492                           postinc2	equ	0xFDE
  9493                           postdec2	equ	0xFDD
  9494                           fsr2h	equ	0xFDA
  9495                           fsr2l	equ	0xFD9
  9496                           status	equ	0xFD8
  9497                           
  9498 ;; *************** function _Wait_Half_Second *****************
  9499 ;; Defined at:
  9500 ;;		line 17 in file "Utils.c"
  9501 ;; Parameters:    Size  Location     Type
  9502 ;;		None
  9503 ;; Auto vars:     Size  Location     Type
  9504 ;;		None
  9505 ;; Return value:  Size  Location     Type
  9506 ;;		None               void
  9507 ;; Registers used:
  9508 ;;		wreg, status,2
  9509 ;; Tracked objects:
  9510 ;;		On entry : 0/0
  9511 ;;		On exit  : 0/0
  9512 ;;		Unchanged: 0/0
  9513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9514 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9515 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9516 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9517 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9518 ;;Total ram usage:        0 bytes
  9519 ;; Hardware stack levels used:    1
  9520 ;; Hardware stack levels required when called:    3
  9521 ;; This function calls:
  9522 ;;		Nothing
  9523 ;; This function is called by:
  9524 ;;		_Wait_One_Sec
  9525 ;; This function uses a non-reentrant model
  9526 ;;
  9527                           
  9528                           	psect	text50
  9529  0020EA                     __ptext50:
  9530                           	opt stack 0
  9531  0020EA                     _Wait_Half_Second:
  9532                           	opt stack 25
  9533                           
  9534                           ;Utils.c: 19: T0CON = 0x03;
  9535                           
  9536                           ;incstack = 0
  9537  0020EA  0E03               	movlw	3
  9538  0020EC  6ED5               	movwf	4053,c	;volatile
  9539                           
  9540                           ;Utils.c: 20: TMR0L = 0xDB;
  9541  0020EE  0EDB               	movlw	219
  9542  0020F0  6ED6               	movwf	4054,c	;volatile
  9543                           
  9544                           ;Utils.c: 21: TMR0H = 0x0B;
  9545  0020F2  0E0B               	movlw	11
  9546  0020F4  6ED7               	movwf	4055,c	;volatile
  9547                           
  9548                           ;Utils.c: 22: INTCONbits.TMR0IF = 0;
  9549  0020F6  94F2               	bcf	intcon,2,c	;volatile
  9550                           
  9551                           ;Utils.c: 23: T0CONbits.TMR0ON = 1;
  9552  0020F8  8ED5               	bsf	4053,7,c	;volatile
  9553                           
  9554                           ;Utils.c: 24: while (INTCONbits.TMR0IF == 0);
  9555  0020FA  D000               	goto	l758
  9556  0020FC                     l758:
  9557  0020FC  A4F2               	btfss	intcon,2,c	;volatile
  9558  0020FE  D7FE               	goto	l758
  9559                           
  9560                           ;Utils.c: 25: T0CONbits.TMR0ON = 0;
  9561  002100  9ED5               	bcf	4053,7,c	;volatile
  9562  002102  0012               	return		;funcret
  9563  002104                     __end_of_Wait_Half_Second:
  9564                           	opt stack 0
  9565                           tblptru	equ	0xFF8
  9566                           tblptrh	equ	0xFF7
  9567                           tblptrl	equ	0xFF6
  9568                           tablat	equ	0xFF5
  9569                           prodh	equ	0xFF4
  9570                           prodl	equ	0xFF3
  9571                           intcon	equ	0xFF2
  9572                           intcon2	equ	0xFF1
  9573                           postinc0	equ	0xFEE
  9574                           wreg	equ	0xFE8
  9575                           postdec1	equ	0xFE5
  9576                           fsr1l	equ	0xFE1
  9577                           indf2	equ	0xFDF
  9578                           postinc2	equ	0xFDE
  9579                           postdec2	equ	0xFDD
  9580                           fsr2h	equ	0xFDA
  9581                           fsr2l	equ	0xFD9
  9582                           status	equ	0xFD8
  9583                           
  9584 ;; *************** function _Deactivate_Buzzer *****************
  9585 ;; Defined at:
  9586 ;;		line 36 in file "Utils.c"
  9587 ;; Parameters:    Size  Location     Type
  9588 ;;		None
  9589 ;; Auto vars:     Size  Location     Type
  9590 ;;		None
  9591 ;; Return value:  Size  Location     Type
  9592 ;;		None               void
  9593 ;; Registers used:
  9594 ;;		wreg, status,2
  9595 ;; Tracked objects:
  9596 ;;		On entry : 0/0
  9597 ;;		On exit  : 0/0
  9598 ;;		Unchanged: 0/0
  9599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9600 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9601 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9602 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9603 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9604 ;;Total ram usage:        0 bytes
  9605 ;; Hardware stack levels used:    1
  9606 ;; Hardware stack levels required when called:    3
  9607 ;; This function calls:
  9608 ;;		Nothing
  9609 ;; This function is called by:
  9610 ;;		_Do_Beep
  9611 ;; This function uses a non-reentrant model
  9612 ;;
  9613                           
  9614                           	psect	text51
  9615  002238                     __ptext51:
  9616                           	opt stack 0
  9617  002238                     _Deactivate_Buzzer:
  9618                           	opt stack 26
  9619                           
  9620                           ;Utils.c: 38: CCP2CON = 0x0;
  9621                           
  9622                           ;incstack = 0
  9623  002238  0E00               	movlw	0
  9624  00223A  6EBA               	movwf	4026,c	;volatile
  9625                           
  9626                           ;Utils.c: 39: PORTBbits.RB3 = 0;
  9627  00223C  9681               	bcf	3969,3,c	;volatile
  9628  00223E  0012               	return		;funcret
  9629  002240                     __end_of_Deactivate_Buzzer:
  9630                           	opt stack 0
  9631                           tblptru	equ	0xFF8
  9632                           tblptrh	equ	0xFF7
  9633                           tblptrl	equ	0xFF6
  9634                           tablat	equ	0xFF5
  9635                           prodh	equ	0xFF4
  9636                           prodl	equ	0xFF3
  9637                           intcon	equ	0xFF2
  9638                           intcon2	equ	0xFF1
  9639                           postinc0	equ	0xFEE
  9640                           wreg	equ	0xFE8
  9641                           postdec1	equ	0xFE5
  9642                           fsr1l	equ	0xFE1
  9643                           indf2	equ	0xFDF
  9644                           postinc2	equ	0xFDE
  9645                           postdec2	equ	0xFDD
  9646                           fsr2h	equ	0xFDA
  9647                           fsr2l	equ	0xFD9
  9648                           status	equ	0xFD8
  9649                           
  9650 ;; *************** function _Activate_Buzzer *****************
  9651 ;; Defined at:
  9652 ;;		line 42 in file "Utils.c"
  9653 ;; Parameters:    Size  Location     Type
  9654 ;;		None
  9655 ;; Auto vars:     Size  Location     Type
  9656 ;;		None
  9657 ;; Return value:  Size  Location     Type
  9658 ;;		None               void
  9659 ;; Registers used:
  9660 ;;		wreg, status,2
  9661 ;; Tracked objects:
  9662 ;;		On entry : 0/0
  9663 ;;		On exit  : 0/0
  9664 ;;		Unchanged: 0/0
  9665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9666 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9667 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9668 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9669 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9670 ;;Total ram usage:        0 bytes
  9671 ;; Hardware stack levels used:    1
  9672 ;; Hardware stack levels required when called:    3
  9673 ;; This function calls:
  9674 ;;		Nothing
  9675 ;; This function is called by:
  9676 ;;		_Do_Beep
  9677 ;; This function uses a non-reentrant model
  9678 ;;
  9679                           
  9680                           	psect	text52
  9681  002168                     __ptext52:
  9682                           	opt stack 0
  9683  002168                     _Activate_Buzzer:
  9684                           	opt stack 26
  9685                           
  9686                           ;Utils.c: 44: PR2 = 0b11111001 ;
  9687                           
  9688                           ;incstack = 0
  9689  002168  0EF9               	movlw	249
  9690  00216A  6ECB               	movwf	4043,c	;volatile
  9691                           
  9692                           ;Utils.c: 45: T2CON = 0b00000101 ;
  9693  00216C  0E05               	movlw	5
  9694  00216E  6ECA               	movwf	4042,c	;volatile
  9695                           
  9696                           ;Utils.c: 46: CCPR2L = 0b01001010 ;
  9697  002170  0E4A               	movlw	74
  9698  002172  6EBB               	movwf	4027,c	;volatile
  9699                           
  9700                           ;Utils.c: 47: CCP2CON = 0b00111100 ;
  9701  002174  0E3C               	movlw	60
  9702  002176  6EBA               	movwf	4026,c	;volatile
  9703  002178  0012               	return		;funcret
  9704  00217A                     __end_of_Activate_Buzzer:
  9705                           	opt stack 0
  9706                           tblptru	equ	0xFF8
  9707                           tblptrh	equ	0xFF7
  9708                           tblptrl	equ	0xFF6
  9709                           tablat	equ	0xFF5
  9710                           prodh	equ	0xFF4
  9711                           prodl	equ	0xFF3
  9712                           intcon	equ	0xFF2
  9713                           intcon2	equ	0xFF1
  9714                           postinc0	equ	0xFEE
  9715                           wreg	equ	0xFE8
  9716                           postdec1	equ	0xFE5
  9717                           fsr1l	equ	0xFE1
  9718                           indf2	equ	0xFDF
  9719                           postinc2	equ	0xFDE
  9720                           postdec2	equ	0xFDD
  9721                           fsr2h	equ	0xFDA
  9722                           fsr2l	equ	0xFD9
  9723                           status	equ	0xFD8
  9724                           
  9725 ;; *************** function _DS3231_Read_Time *****************
  9726 ;; Defined at:
  9727 ;;		line 45 in file "I2C_Support.c"
  9728 ;; Parameters:    Size  Location     Type
  9729 ;;		None
  9730 ;; Auto vars:     Size  Location     Type
  9731 ;;  Device          1   20[COMRAM] unsigned char 
  9732 ;;  Address         1   19[COMRAM] unsigned char 
  9733 ;;  Data_Ret        1    0        unsigned char 
  9734 ;; Return value:  Size  Location     Type
  9735 ;;		None               void
  9736 ;; Registers used:
  9737 ;;		wreg, status,2, status,0, cstack
  9738 ;; Tracked objects:
  9739 ;;		On entry : 0/0
  9740 ;;		On exit  : 0/0
  9741 ;;		Unchanged: 0/0
  9742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9743 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9744 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9745 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9746 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9747 ;;Total ram usage:        2 bytes
  9748 ;; Hardware stack levels used:    1
  9749 ;; Hardware stack levels required when called:    6
  9750 ;; This function calls:
  9751 ;;		_I2C_ReStart
  9752 ;;		_I2C_Read
  9753 ;;		_I2C_Start
  9754 ;;		_I2C_Stop
  9755 ;;		_I2C_Write
  9756 ;; This function is called by:
  9757 ;;		_main
  9758 ;; This function uses a non-reentrant model
  9759 ;;
  9760                           
  9761                           	psect	text53
  9762  001B68                     __ptext53:
  9763                           	opt stack 0
  9764  001B68                     _DS3231_Read_Time:
  9765                           	opt stack 24
  9766                           
  9767                           ;I2C_Support.c: 47: char Device = 0x68;
  9768                           
  9769                           ;incstack = 0
  9770  001B68  0E68               	movlw	104
  9771  001B6A  6E15               	movwf	DS3231_Read_Time@Device,c
  9772                           
  9773                           ;I2C_Support.c: 48: char Address = 0x00;
  9774  001B6C  0E00               	movlw	0
  9775  001B6E  6E14               	movwf	DS3231_Read_Time@Address,c
  9776                           
  9777                           ;I2C_Support.c: 49: char Data_Ret;
  9778                           ;I2C_Support.c: 50: I2C_Start();
  9779  001B70  ECC6  F010         	call	_I2C_Start	;wreg free
  9780                           
  9781                           ;I2C_Support.c: 51: I2C_Write((Device << 1) | 0);
  9782  001B74  5015               	movf	DS3231_Read_Time@Device,w,c
  9783  001B76  2415               	addwf	DS3231_Read_Time@Device,w,c
  9784  001B78  EC56  F00F         	call	_I2C_Write
  9785                           
  9786                           ;I2C_Support.c: 52: I2C_Write(Address);
  9787  001B7C  5014               	movf	DS3231_Read_Time@Address,w,c
  9788  001B7E  EC56  F00F         	call	_I2C_Write
  9789                           
  9790                           ;I2C_Support.c: 53: I2C_ReStart();
  9791  001B82  EC82  F010         	call	_I2C_ReStart	;wreg free
  9792                           
  9793                           ;I2C_Support.c: 54: I2C_Write((Device << 1) | 1);
  9794  001B86  80D8               	bsf	status,0,c
  9795  001B88  3415               	rlcf	DS3231_Read_Time@Device,w,c
  9796  001B8A  EC56  F00F         	call	_I2C_Write
  9797                           
  9798                           ;I2C_Support.c: 56: second = I2C_Read(1);
  9799  001B8E  0E01               	movlw	1
  9800  001B90  ECD5  F00E         	call	_I2C_Read
  9801  001B94  6E62               	movwf	_second,c
  9802                           
  9803                           ;I2C_Support.c: 57: minute = I2C_Read(1);
  9804  001B96  0E01               	movlw	1
  9805  001B98  ECD5  F00E         	call	_I2C_Read
  9806  001B9C  6E5F               	movwf	_minute,c
  9807                           
  9808                           ;I2C_Support.c: 58: hour = I2C_Read(1);
  9809  001B9E  0E01               	movlw	1
  9810  001BA0  ECD5  F00E         	call	_I2C_Read
  9811  001BA4  6E5E               	movwf	_hour,c
  9812                           
  9813                           ;I2C_Support.c: 59: dow = I2C_Read(1);
  9814  001BA6  0E01               	movlw	1
  9815  001BA8  ECD5  F00E         	call	_I2C_Read
  9816  001BAC  6E5B               	movwf	_dow,c
  9817                           
  9818                           ;I2C_Support.c: 60: day = I2C_Read(1);
  9819  001BAE  0E01               	movlw	1
  9820  001BB0  ECD5  F00E         	call	_I2C_Read
  9821  001BB4  6E5A               	movwf	_day,c
  9822                           
  9823                           ;I2C_Support.c: 61: month = I2C_Read(1);
  9824  001BB6  0E01               	movlw	1
  9825  001BB8  ECD5  F00E         	call	_I2C_Read
  9826  001BBC  6E60               	movwf	_month,c
  9827                           
  9828                           ;I2C_Support.c: 62: year = I2C_Read(0);
  9829  001BBE  0E00               	movlw	0
  9830  001BC0  ECD5  F00E         	call	_I2C_Read
  9831  001BC4  6E6C               	movwf	_year,c
  9832                           
  9833                           ;I2C_Support.c: 64: I2C_Stop();
  9834  001BC6  ECBD  F010         	call	_I2C_Stop	;wreg free
  9835  001BCA  0012               	return		;funcret
  9836  001BCC                     __end_of_DS3231_Read_Time:
  9837                           	opt stack 0
  9838                           tblptru	equ	0xFF8
  9839                           tblptrh	equ	0xFF7
  9840                           tblptrl	equ	0xFF6
  9841                           tablat	equ	0xFF5
  9842                           prodh	equ	0xFF4
  9843                           prodl	equ	0xFF3
  9844                           intcon	equ	0xFF2
  9845                           intcon2	equ	0xFF1
  9846                           postinc0	equ	0xFEE
  9847                           wreg	equ	0xFE8
  9848                           postdec1	equ	0xFE5
  9849                           fsr1l	equ	0xFE1
  9850                           indf2	equ	0xFDF
  9851                           postinc2	equ	0xFDE
  9852                           postdec2	equ	0xFDD
  9853                           fsr2h	equ	0xFDA
  9854                           fsr2l	equ	0xFD9
  9855                           status	equ	0xFD8
  9856                           
  9857 ;; *************** function _DS1621_Read_Temp *****************
  9858 ;; Defined at:
  9859 ;;		line 29 in file "I2C_Support.c"
  9860 ;; Parameters:    Size  Location     Type
  9861 ;;		None
  9862 ;; Auto vars:     Size  Location     Type
  9863 ;;  Device          1   23[COMRAM] unsigned char 
  9864 ;;  Data_Ret        1   22[COMRAM] unsigned char 
  9865 ;;  Cmd             1   21[COMRAM] unsigned char 
  9866 ;; Return value:  Size  Location     Type
  9867 ;;                  2   19[COMRAM] int 
  9868 ;; Registers used:
  9869 ;;		wreg, status,2, status,0, cstack
  9870 ;; Tracked objects:
  9871 ;;		On entry : 0/0
  9872 ;;		On exit  : 0/0
  9873 ;;		Unchanged: 0/0
  9874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9875 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9876 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9877 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9878 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9879 ;;Total ram usage:        5 bytes
  9880 ;; Hardware stack levels used:    1
  9881 ;; Hardware stack levels required when called:    6
  9882 ;; This function calls:
  9883 ;;		_I2C_ReStart
  9884 ;;		_I2C_Read
  9885 ;;		_I2C_Start
  9886 ;;		_I2C_Stop
  9887 ;;		_I2C_Write
  9888 ;; This function is called by:
  9889 ;;		_main
  9890 ;; This function uses a non-reentrant model
  9891 ;;
  9892                           
  9893                           	psect	text54
  9894  001EEA                     __ptext54:
  9895                           	opt stack 0
  9896  001EEA                     _DS1621_Read_Temp:
  9897                           	opt stack 24
  9898                           
  9899                           ;I2C_Support.c: 31: char Device = 0x48;
  9900                           
  9901                           ;incstack = 0
  9902  001EEA  0E48               	movlw	72
  9903  001EEC  6E18               	movwf	DS1621_Read_Temp@Device,c
  9904                           
  9905                           ;I2C_Support.c: 32: char Cmd = 0xAA;
  9906  001EEE  0EAA               	movlw	170
  9907  001EF0  6E16               	movwf	DS1621_Read_Temp@Cmd,c
  9908                           
  9909                           ;I2C_Support.c: 34: char Data_Ret;
  9910                           ;I2C_Support.c: 35: I2C_Start();
  9911  001EF2  ECC6  F010         	call	_I2C_Start	;wreg free
  9912                           
  9913                           ;I2C_Support.c: 36: I2C_Write((Device << 1) | 0);
  9914  001EF6  5018               	movf	DS1621_Read_Temp@Device,w,c
  9915  001EF8  2418               	addwf	DS1621_Read_Temp@Device,w,c
  9916  001EFA  EC56  F00F         	call	_I2C_Write
  9917                           
  9918                           ;I2C_Support.c: 37: I2C_Write(Cmd);
  9919  001EFE  5016               	movf	DS1621_Read_Temp@Cmd,w,c
  9920  001F00  EC56  F00F         	call	_I2C_Write
  9921                           
  9922                           ;I2C_Support.c: 38: I2C_ReStart();
  9923  001F04  EC82  F010         	call	_I2C_ReStart	;wreg free
  9924                           
  9925                           ;I2C_Support.c: 39: I2C_Write((Device << 1) | 1);
  9926  001F08  80D8               	bsf	status,0,c
  9927  001F0A  3418               	rlcf	DS1621_Read_Temp@Device,w,c
  9928  001F0C  EC56  F00F         	call	_I2C_Write
  9929                           
  9930                           ;I2C_Support.c: 40: Data_Ret = I2C_Read(0);
  9931  001F10  0E00               	movlw	0
  9932  001F12  ECD5  F00E         	call	_I2C_Read
  9933  001F16  6E17               	movwf	DS1621_Read_Temp@Data_Ret,c
  9934                           
  9935                           ;I2C_Support.c: 41: I2C_Stop();
  9936  001F18  ECBD  F010         	call	_I2C_Stop	;wreg free
  9937                           
  9938                           ;I2C_Support.c: 42: return Data_Ret;
  9939  001F1C  C017  F014         	movff	DS1621_Read_Temp@Data_Ret,?_DS1621_Read_Temp
  9940  001F20  6A15               	clrf	?_DS1621_Read_Temp+1,c
  9941  001F22  D000               	goto	l280
  9942  001F24                     l280:
  9943  001F24  0012               	return		;funcret
  9944  001F26                     __end_of_DS1621_Read_Temp:
  9945                           	opt stack 0
  9946                           tblptru	equ	0xFF8
  9947                           tblptrh	equ	0xFF7
  9948                           tblptrl	equ	0xFF6
  9949                           tablat	equ	0xFF5
  9950                           prodh	equ	0xFF4
  9951                           prodl	equ	0xFF3
  9952                           intcon	equ	0xFF2
  9953                           intcon2	equ	0xFF1
  9954                           postinc0	equ	0xFEE
  9955                           wreg	equ	0xFE8
  9956                           postdec1	equ	0xFE5
  9957                           fsr1l	equ	0xFE1
  9958                           indf2	equ	0xFDF
  9959                           postinc2	equ	0xFDE
  9960                           postdec2	equ	0xFDD
  9961                           fsr2h	equ	0xFDA
  9962                           fsr2l	equ	0xFD9
  9963                           status	equ	0xFD8
  9964                           
  9965 ;; *************** function _I2C_Write *****************
  9966 ;; Defined at:
  9967 ;;		line 41 in file "I2C.c"
  9968 ;; Parameters:    Size  Location     Type
  9969 ;;  outByte         1    wreg     unsigned char 
  9970 ;; Auto vars:     Size  Location     Type
  9971 ;;  outByte         1   16[COMRAM] unsigned char 
  9972 ;;  n               1   17[COMRAM] unsigned char 
  9973 ;; Return value:  Size  Location     Type
  9974 ;;		None               void
  9975 ;; Registers used:
  9976 ;;		wreg, status,2, status,0, cstack
  9977 ;; Tracked objects:
  9978 ;;		On entry : 0/0
  9979 ;;		On exit  : 0/0
  9980 ;;		Unchanged: 0/0
  9981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9982 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9983 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9984 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9985 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9986 ;;Total ram usage:        2 bytes
  9987 ;; Hardware stack levels used:    1
  9988 ;; Hardware stack levels required when called:    4
  9989 ;; This function calls:
  9990 ;;		_i2cHighScl
  9991 ;;		_i2cHighSda
  9992 ;;		_i2cLowScl
  9993 ;;		_i2cLowSda
  9994 ;; This function is called by:
  9995 ;;		_DS1621_Read_Temp
  9996 ;;		_DS3231_Read_Time
  9997 ;;		_I2C_Write_Cmd_Only
  9998 ;;		_I2C_Write_Cmd_Write_Data
  9999 ;;		_DS3231_Setup_Time
 10000 ;;		_I2C_Write_Address_Read_One_Byte
 10001 ;;		_I2C_Write_Address_Write_One_Byte
 10002 ;;		_I2C_Write_Cmd_Read_One_Byte
 10003 ;; This function uses a non-reentrant model
 10004 ;;
 10005                           
 10006                           	psect	text55
 10007  001EAC                     __ptext55:
 10008                           	opt stack 0
 10009  001EAC                     _I2C_Write:
 10010                           	opt stack 23
 10011                           
 10012                           ;incstack = 0
 10013                           ;I2C_Write@outByte stored from wreg
 10014  001EAC  6E11               	movwf	I2C_Write@outByte,c
 10015                           
 10016                           ;I2C.c: 43: unsigned char n;
 10017                           ;I2C.c: 44: for(n=0; n<8; n++)
 10018  001EAE  0E00               	movlw	0
 10019  001EB0  6E12               	movwf	I2C_Write@n,c
 10020  001EB2                     l5303:
 10021  001EB2  0E07               	movlw	7
 10022  001EB4  6412               	cpfsgt	I2C_Write@n,c
 10023  001EB6  D001               	goto	l319
 10024  001EB8  D011               	goto	l5321
 10025  001EBA                     l319:
 10026                           
 10027                           ;I2C.c: 45: {
 10028                           ;I2C.c: 46: if(outByte&0x80) i2cHighSda();
 10029  001EBA  AE11               	btfss	I2C_Write@outByte,7,c
 10030  001EBC  D003               	goto	l5309
 10031  001EBE  EC24  F011         	call	_i2cHighSda	;wreg free
 10032  001EC2  D003               	goto	l5311
 10033  001EC4                     l5309:
 10034                           
 10035                           ;I2C.c: 47: else i2cLowSda();
 10036  001EC4  EC17  F011         	call	_i2cLowSda	;wreg free
 10037  001EC8  D000               	goto	l5311
 10038  001ECA                     l5311:
 10039                           
 10040                           ;I2C.c: 48: i2cHighScl();
 10041  001ECA  ECF7  F010         	call	_i2cHighScl	;wreg free
 10042                           
 10043                           ;I2C.c: 49: i2cLowScl();
 10044  001ECE  EC20  F011         	call	_i2cLowScl	;wreg free
 10045                           
 10046                           ;I2C.c: 50: outByte = outByte << 1;
 10047  001ED2  5011               	movf	I2C_Write@outByte,w,c
 10048  001ED4  2411               	addwf	I2C_Write@outByte,w,c
 10049  001ED6  6E11               	movwf	I2C_Write@outByte,c
 10050  001ED8  2A12               	incf	I2C_Write@n,f,c
 10051  001EDA  D7EB               	goto	l5303
 10052  001EDC                     l5321:
 10053                           
 10054                           ;I2C.c: 51: }
 10055                           ;I2C.c: 52: i2cHighSda();
 10056  001EDC  EC24  F011         	call	_i2cHighSda	;wreg free
 10057                           
 10058                           ;I2C.c: 53: i2cHighScl();
 10059  001EE0  ECF7  F010         	call	_i2cHighScl	;wreg free
 10060                           
 10061                           ;I2C.c: 54: i2cLowScl();
 10062  001EE4  EC20  F011         	call	_i2cLowScl	;wreg free
 10063  001EE8  0012               	return		;funcret
 10064  001EEA                     __end_of_I2C_Write:
 10065                           	opt stack 0
 10066                           tblptru	equ	0xFF8
 10067                           tblptrh	equ	0xFF7
 10068                           tblptrl	equ	0xFF6
 10069                           tablat	equ	0xFF5
 10070                           prodh	equ	0xFF4
 10071                           prodl	equ	0xFF3
 10072                           intcon	equ	0xFF2
 10073                           intcon2	equ	0xFF1
 10074                           postinc0	equ	0xFEE
 10075                           wreg	equ	0xFE8
 10076                           postdec1	equ	0xFE5
 10077                           fsr1l	equ	0xFE1
 10078                           indf2	equ	0xFDF
 10079                           postinc2	equ	0xFDE
 10080                           postdec2	equ	0xFDD
 10081                           fsr2h	equ	0xFDA
 10082                           fsr2l	equ	0xFD9
 10083                           status	equ	0xFD8
 10084                           
 10085 ;; *************** function _I2C_Stop *****************
 10086 ;; Defined at:
 10087 ;;		line 88 in file "I2C.c"
 10088 ;; Parameters:    Size  Location     Type
 10089 ;;		None
 10090 ;; Auto vars:     Size  Location     Type
 10091 ;;		None
 10092 ;; Return value:  Size  Location     Type
 10093 ;;		None               void
 10094 ;; Registers used:
 10095 ;;		wreg, cstack
 10096 ;; Tracked objects:
 10097 ;;		On entry : 0/0
 10098 ;;		On exit  : 0/0
 10099 ;;		Unchanged: 0/0
 10100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10101 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10102 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10103 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10104 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10105 ;;Total ram usage:        0 bytes
 10106 ;; Hardware stack levels used:    1
 10107 ;; Hardware stack levels required when called:    4
 10108 ;; This function calls:
 10109 ;;		_i2cHighScl
 10110 ;;		_i2cHighSda
 10111 ;;		_i2cLowScl
 10112 ;;		_i2cLowSda
 10113 ;; This function is called by:
 10114 ;;		_DS1621_Read_Temp
 10115 ;;		_DS3231_Read_Time
 10116 ;;		_I2C_Write_Cmd_Only
 10117 ;;		_I2C_Write_Cmd_Write_Data
 10118 ;;		_DS3231_Setup_Time
 10119 ;;		_I2C_Write_Address_Read_One_Byte
 10120 ;;		_I2C_Write_Address_Write_One_Byte
 10121 ;;		_I2C_Write_Cmd_Read_One_Byte
 10122 ;; This function uses a non-reentrant model
 10123 ;;
 10124                           
 10125                           	psect	text56
 10126  00217A                     __ptext56:
 10127                           	opt stack 0
 10128  00217A                     _I2C_Stop:
 10129                           	opt stack 23
 10130                           
 10131                           ;I2C.c: 90: i2cLowScl();
 10132                           
 10133                           ;incstack = 0
 10134  00217A  EC20  F011         	call	_i2cLowScl	;wreg free
 10135                           
 10136                           ;I2C.c: 91: i2cLowSda();
 10137  00217E  EC17  F011         	call	_i2cLowSda	;wreg free
 10138                           
 10139                           ;I2C.c: 92: i2cHighScl();
 10140  002182  ECF7  F010         	call	_i2cHighScl	;wreg free
 10141                           
 10142                           ;I2C.c: 93: i2cHighSda();
 10143  002186  EC24  F011         	call	_i2cHighSda	;wreg free
 10144  00218A  0012               	return		;funcret
 10145  00218C                     __end_of_I2C_Stop:
 10146                           	opt stack 0
 10147                           tblptru	equ	0xFF8
 10148                           tblptrh	equ	0xFF7
 10149                           tblptrl	equ	0xFF6
 10150                           tablat	equ	0xFF5
 10151                           prodh	equ	0xFF4
 10152                           prodl	equ	0xFF3
 10153                           intcon	equ	0xFF2
 10154                           intcon2	equ	0xFF1
 10155                           postinc0	equ	0xFEE
 10156                           wreg	equ	0xFE8
 10157                           postdec1	equ	0xFE5
 10158                           fsr1l	equ	0xFE1
 10159                           indf2	equ	0xFDF
 10160                           postinc2	equ	0xFDE
 10161                           postdec2	equ	0xFDD
 10162                           fsr2h	equ	0xFDA
 10163                           fsr2l	equ	0xFD9
 10164                           status	equ	0xFD8
 10165                           
 10166 ;; *************** function _I2C_Start *****************
 10167 ;; Defined at:
 10168 ;;		line 71 in file "I2C.c"
 10169 ;; Parameters:    Size  Location     Type
 10170 ;;		None
 10171 ;; Auto vars:     Size  Location     Type
 10172 ;;		None
 10173 ;; Return value:  Size  Location     Type
 10174 ;;		None               void
 10175 ;; Registers used:
 10176 ;;		wreg, cstack
 10177 ;; Tracked objects:
 10178 ;;		On entry : 0/0
 10179 ;;		On exit  : 0/0
 10180 ;;		Unchanged: 0/0
 10181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10182 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10183 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10184 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10185 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10186 ;;Total ram usage:        0 bytes
 10187 ;; Hardware stack levels used:    1
 10188 ;; Hardware stack levels required when called:    4
 10189 ;; This function calls:
 10190 ;;		_i2cHighScl
 10191 ;;		_i2cHighSda
 10192 ;;		_i2cLowScl
 10193 ;;		_i2cLowSda
 10194 ;; This function is called by:
 10195 ;;		_DS1621_Read_Temp
 10196 ;;		_DS3231_Read_Time
 10197 ;;		_I2C_Write_Cmd_Only
 10198 ;;		_I2C_Write_Cmd_Write_Data
 10199 ;;		_DS3231_Setup_Time
 10200 ;;		_I2C_Write_Address_Read_One_Byte
 10201 ;;		_I2C_Write_Address_Write_One_Byte
 10202 ;;		_I2C_Write_Cmd_Read_One_Byte
 10203 ;; This function uses a non-reentrant model
 10204 ;;
 10205                           
 10206                           	psect	text57
 10207  00218C                     __ptext57:
 10208                           	opt stack 0
 10209  00218C                     _I2C_Start:
 10210                           	opt stack 23
 10211                           
 10212                           ;I2C.c: 73: i2cHighSda();
 10213                           
 10214                           ;incstack = 0
 10215  00218C  EC24  F011         	call	_i2cHighSda	;wreg free
 10216                           
 10217                           ;I2C.c: 74: i2cHighScl();
 10218  002190  ECF7  F010         	call	_i2cHighScl	;wreg free
 10219                           
 10220                           ;I2C.c: 75: i2cLowSda();
 10221  002194  EC17  F011         	call	_i2cLowSda	;wreg free
 10222                           
 10223                           ;I2C.c: 76: i2cLowScl();
 10224  002198  EC20  F011         	call	_i2cLowScl	;wreg free
 10225  00219C  0012               	return		;funcret
 10226  00219E                     __end_of_I2C_Start:
 10227                           	opt stack 0
 10228                           tblptru	equ	0xFF8
 10229                           tblptrh	equ	0xFF7
 10230                           tblptrl	equ	0xFF6
 10231                           tablat	equ	0xFF5
 10232                           prodh	equ	0xFF4
 10233                           prodl	equ	0xFF3
 10234                           intcon	equ	0xFF2
 10235                           intcon2	equ	0xFF1
 10236                           postinc0	equ	0xFEE
 10237                           wreg	equ	0xFE8
 10238                           postdec1	equ	0xFE5
 10239                           fsr1l	equ	0xFE1
 10240                           indf2	equ	0xFDF
 10241                           postinc2	equ	0xFDE
 10242                           postdec2	equ	0xFDD
 10243                           fsr2h	equ	0xFDA
 10244                           fsr2l	equ	0xFD9
 10245                           status	equ	0xFD8
 10246                           
 10247 ;; *************** function _I2C_Read *****************
 10248 ;; Defined at:
 10249 ;;		line 20 in file "I2C.c"
 10250 ;; Parameters:    Size  Location     Type
 10251 ;;  ack             1    wreg     unsigned char 
 10252 ;; Auto vars:     Size  Location     Type
 10253 ;;  ack             1   16[COMRAM] unsigned char 
 10254 ;;  inByte          1   18[COMRAM] unsigned char 
 10255 ;;  n               1   17[COMRAM] unsigned char 
 10256 ;; Return value:  Size  Location     Type
 10257 ;;                  1    wreg      unsigned char 
 10258 ;; Registers used:
 10259 ;;		wreg, status,2, status,0, cstack
 10260 ;; Tracked objects:
 10261 ;;		On entry : 0/0
 10262 ;;		On exit  : 0/0
 10263 ;;		Unchanged: 0/0
 10264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10265 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10266 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10267 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10268 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10269 ;;Total ram usage:        3 bytes
 10270 ;; Hardware stack levels used:    1
 10271 ;; Hardware stack levels required when called:    5
 10272 ;; This function calls:
 10273 ;;		_i2cAck
 10274 ;;		_i2cHighScl
 10275 ;;		_i2cHighSda
 10276 ;;		_i2cLowScl
 10277 ;;		_i2cNack
 10278 ;; This function is called by:
 10279 ;;		_DS1621_Read_Temp
 10280 ;;		_DS3231_Read_Time
 10281 ;;		_I2C_Write_Address_Read_One_Byte
 10282 ;;		_I2C_Write_Cmd_Read_One_Byte
 10283 ;; This function uses a non-reentrant model
 10284 ;;
 10285                           
 10286                           	psect	text58
 10287  001DAA                     __ptext58:
 10288                           	opt stack 0
 10289  001DAA                     _I2C_Read:
 10290                           	opt stack 24
 10291                           
 10292                           ;incstack = 0
 10293                           ;I2C_Read@ack stored from wreg
 10294  001DAA  6E11               	movwf	I2C_Read@ack,c
 10295                           
 10296                           ;I2C.c: 22: unsigned char inByte, n;
 10297                           ;I2C.c: 23: i2cHighSda();
 10298  001DAC  EC24  F011         	call	_i2cHighSda	;wreg free
 10299                           
 10300                           ;I2C.c: 24: for (n=0; n<8; n++)
 10301  001DB0  0E00               	movlw	0
 10302  001DB2  6E12               	movwf	I2C_Read@n,c
 10303  001DB4                     l5887:
 10304  001DB4  0E07               	movlw	7
 10305  001DB6  6412               	cpfsgt	I2C_Read@n,c
 10306  001DB8  D001               	goto	l5891
 10307  001DBA  D00F               	goto	l5905
 10308  001DBC                     l5891:
 10309                           
 10310                           ;I2C.c: 25: {
 10311                           ;I2C.c: 26: i2cHighScl();
 10312  001DBC  ECF7  F010         	call	_i2cHighScl	;wreg free
 10313                           
 10314                           ;I2C.c: 28: if (PORTCbits.RC1)
 10315  001DC0  A282               	btfss	3970,1,c	;volatile
 10316  001DC2  D003               	goto	l5897
 10317                           
 10318                           ;I2C.c: 29: inByte = (inByte << 1) | 0x01;
 10319  001DC4  80D8               	bsf	status,0,c
 10320  001DC6  3613               	rlcf	I2C_Read@inByte,f,c
 10321  001DC8  D004               	goto	l5899
 10322  001DCA                     l5897:
 10323                           
 10324                           ;I2C.c: 30: else
 10325                           ;I2C.c: 31: inByte = inByte << 1;
 10326  001DCA  5013               	movf	I2C_Read@inByte,w,c
 10327  001DCC  2413               	addwf	I2C_Read@inByte,w,c
 10328  001DCE  6E13               	movwf	I2C_Read@inByte,c
 10329  001DD0  D000               	goto	l5899
 10330  001DD2                     l5899:
 10331                           
 10332                           ;I2C.c: 32: i2cLowScl();
 10333  001DD2  EC20  F011         	call	_i2cLowScl	;wreg free
 10334  001DD6  2A12               	incf	I2C_Read@n,f,c
 10335  001DD8  D7ED               	goto	l5887
 10336  001DDA                     l5905:
 10337                           
 10338                           ;I2C.c: 33: }
 10339                           ;I2C.c: 34: if (ack) i2cAck();
 10340  001DDA  5011               	movf	I2C_Read@ack,w,c
 10341  001DDC  B4D8               	btfsc	status,2,c
 10342  001DDE  D003               	goto	l5909
 10343  001DE0  ECCF  F010         	call	_i2cAck	;wreg free
 10344  001DE4  D003               	goto	l5911
 10345  001DE6                     l5909:
 10346                           
 10347                           ;I2C.c: 35: else i2cNack();
 10348  001DE6  EC12  F011         	call	_i2cNack	;wreg free
 10349  001DEA  D000               	goto	l5911
 10350  001DEC                     l5911:
 10351                           
 10352                           ;I2C.c: 38: return(inByte);
 10353  001DEC  5013               	movf	I2C_Read@inByte,w,c
 10354  001DEE  D000               	goto	l316
 10355  001DF0                     l316:
 10356  001DF0  0012               	return		;funcret
 10357  001DF2                     __end_of_I2C_Read:
 10358                           	opt stack 0
 10359                           tblptru	equ	0xFF8
 10360                           tblptrh	equ	0xFF7
 10361                           tblptrl	equ	0xFF6
 10362                           tablat	equ	0xFF5
 10363                           prodh	equ	0xFF4
 10364                           prodl	equ	0xFF3
 10365                           intcon	equ	0xFF2
 10366                           intcon2	equ	0xFF1
 10367                           postinc0	equ	0xFEE
 10368                           wreg	equ	0xFE8
 10369                           postdec1	equ	0xFE5
 10370                           fsr1l	equ	0xFE1
 10371                           indf2	equ	0xFDF
 10372                           postinc2	equ	0xFDE
 10373                           postdec2	equ	0xFDD
 10374                           fsr2h	equ	0xFDA
 10375                           fsr2l	equ	0xFD9
 10376                           status	equ	0xFD8
 10377                           
 10378 ;; *************** function _i2cNack *****************
 10379 ;; Defined at:
 10380 ;;		line 57 in file "I2C.c"
 10381 ;; Parameters:    Size  Location     Type
 10382 ;;		None
 10383 ;; Auto vars:     Size  Location     Type
 10384 ;;		None
 10385 ;; Return value:  Size  Location     Type
 10386 ;;		None               void
 10387 ;; Registers used:
 10388 ;;		wreg, cstack
 10389 ;; Tracked objects:
 10390 ;;		On entry : 0/0
 10391 ;;		On exit  : 0/0
 10392 ;;		Unchanged: 0/0
 10393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10394 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10395 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10396 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10397 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10398 ;;Total ram usage:        0 bytes
 10399 ;; Hardware stack levels used:    1
 10400 ;; Hardware stack levels required when called:    4
 10401 ;; This function calls:
 10402 ;;		_i2cHighScl
 10403 ;;		_i2cLowScl
 10404 ;; This function is called by:
 10405 ;;		_I2C_Read
 10406 ;; This function uses a non-reentrant model
 10407 ;;
 10408                           
 10409                           	psect	text59
 10410  002224                     __ptext59:
 10411                           	opt stack 0
 10412  002224                     _i2cNack:
 10413                           	opt stack 24
 10414                           
 10415                           ;I2C.c: 59: i2cHighScl();
 10416                           
 10417                           ;incstack = 0
 10418  002224  ECF7  F010         	call	_i2cHighScl	;wreg free
 10419                           
 10420                           ;I2C.c: 60: i2cLowScl();
 10421  002228  EC20  F011         	call	_i2cLowScl	;wreg free
 10422  00222C  0012               	return		;funcret
 10423  00222E                     __end_of_i2cNack:
 10424                           	opt stack 0
 10425                           tblptru	equ	0xFF8
 10426                           tblptrh	equ	0xFF7
 10427                           tblptrl	equ	0xFF6
 10428                           tablat	equ	0xFF5
 10429                           prodh	equ	0xFF4
 10430                           prodl	equ	0xFF3
 10431                           intcon	equ	0xFF2
 10432                           intcon2	equ	0xFF1
 10433                           postinc0	equ	0xFEE
 10434                           wreg	equ	0xFE8
 10435                           postdec1	equ	0xFE5
 10436                           fsr1l	equ	0xFE1
 10437                           indf2	equ	0xFDF
 10438                           postinc2	equ	0xFDE
 10439                           postdec2	equ	0xFDD
 10440                           fsr2h	equ	0xFDA
 10441                           fsr2l	equ	0xFD9
 10442                           status	equ	0xFD8
 10443                           
 10444 ;; *************** function _i2cAck *****************
 10445 ;; Defined at:
 10446 ;;		line 63 in file "I2C.c"
 10447 ;; Parameters:    Size  Location     Type
 10448 ;;		None
 10449 ;; Auto vars:     Size  Location     Type
 10450 ;;		None
 10451 ;; Return value:  Size  Location     Type
 10452 ;;		None               void
 10453 ;; Registers used:
 10454 ;;		wreg, cstack
 10455 ;; Tracked objects:
 10456 ;;		On entry : 0/0
 10457 ;;		On exit  : 0/0
 10458 ;;		Unchanged: 0/0
 10459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10460 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10461 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10462 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10463 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10464 ;;Total ram usage:        0 bytes
 10465 ;; Hardware stack levels used:    1
 10466 ;; Hardware stack levels required when called:    4
 10467 ;; This function calls:
 10468 ;;		_i2cHighScl
 10469 ;;		_i2cHighSda
 10470 ;;		_i2cLowScl
 10471 ;;		_i2cLowSda
 10472 ;; This function is called by:
 10473 ;;		_I2C_Read
 10474 ;; This function uses a non-reentrant model
 10475 ;;
 10476                           
 10477                           	psect	text60
 10478  00219E                     __ptext60:
 10479                           	opt stack 0
 10480  00219E                     _i2cAck:
 10481                           	opt stack 24
 10482                           
 10483                           ;I2C.c: 65: i2cLowSda();
 10484                           
 10485                           ;incstack = 0
 10486  00219E  EC17  F011         	call	_i2cLowSda	;wreg free
 10487                           
 10488                           ;I2C.c: 66: i2cHighScl();
 10489  0021A2  ECF7  F010         	call	_i2cHighScl	;wreg free
 10490                           
 10491                           ;I2C.c: 67: i2cLowScl();
 10492  0021A6  EC20  F011         	call	_i2cLowScl	;wreg free
 10493                           
 10494                           ;I2C.c: 68: i2cHighSda();
 10495  0021AA  EC24  F011         	call	_i2cHighSda	;wreg free
 10496  0021AE  0012               	return		;funcret
 10497  0021B0                     __end_of_i2cAck:
 10498                           	opt stack 0
 10499                           tblptru	equ	0xFF8
 10500                           tblptrh	equ	0xFF7
 10501                           tblptrl	equ	0xFF6
 10502                           tablat	equ	0xFF5
 10503                           prodh	equ	0xFF4
 10504                           prodl	equ	0xFF3
 10505                           intcon	equ	0xFF2
 10506                           intcon2	equ	0xFF1
 10507                           postinc0	equ	0xFEE
 10508                           wreg	equ	0xFE8
 10509                           postdec1	equ	0xFE5
 10510                           fsr1l	equ	0xFE1
 10511                           indf2	equ	0xFDF
 10512                           postinc2	equ	0xFDE
 10513                           postdec2	equ	0xFDD
 10514                           fsr2h	equ	0xFDA
 10515                           fsr2l	equ	0xFD9
 10516                           status	equ	0xFD8
 10517                           
 10518 ;; *************** function _I2C_ReStart *****************
 10519 ;; Defined at:
 10520 ;;		line 79 in file "I2C.c"
 10521 ;; Parameters:    Size  Location     Type
 10522 ;;		None
 10523 ;; Auto vars:     Size  Location     Type
 10524 ;;		None
 10525 ;; Return value:  Size  Location     Type
 10526 ;;		None               void
 10527 ;; Registers used:
 10528 ;;		wreg, cstack
 10529 ;; Tracked objects:
 10530 ;;		On entry : 0/0
 10531 ;;		On exit  : 0/0
 10532 ;;		Unchanged: 0/0
 10533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10534 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10535 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10536 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10537 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10538 ;;Total ram usage:        0 bytes
 10539 ;; Hardware stack levels used:    1
 10540 ;; Hardware stack levels required when called:    4
 10541 ;; This function calls:
 10542 ;;		_i2cHighScl
 10543 ;;		_i2cHighSda
 10544 ;;		_i2cLowScl
 10545 ;;		_i2cLowSda
 10546 ;; This function is called by:
 10547 ;;		_DS1621_Read_Temp
 10548 ;;		_DS3231_Read_Time
 10549 ;;		_I2C_Write_Address_Read_One_Byte
 10550 ;;		_I2C_Write_Cmd_Read_One_Byte
 10551 ;; This function uses a non-reentrant model
 10552 ;;
 10553                           
 10554                           	psect	text61
 10555  002104                     __ptext61:
 10556                           	opt stack 0
 10557  002104                     _I2C_ReStart:
 10558                           	opt stack 25
 10559                           
 10560                           ;I2C.c: 81: i2cLowScl();
 10561                           
 10562                           ;incstack = 0
 10563  002104  EC20  F011         	call	_i2cLowScl	;wreg free
 10564                           
 10565                           ;I2C.c: 82: i2cHighSda();
 10566  002108  EC24  F011         	call	_i2cHighSda	;wreg free
 10567                           
 10568                           ;I2C.c: 83: i2cHighScl();
 10569  00210C  ECF7  F010         	call	_i2cHighScl	;wreg free
 10570                           
 10571                           ;I2C.c: 84: i2cLowSda();
 10572  002110  EC17  F011         	call	_i2cLowSda	;wreg free
 10573                           
 10574                           ;I2C.c: 85: i2cLowScl();
 10575  002114  EC20  F011         	call	_i2cLowScl	;wreg free
 10576  002118  0012               	return		;funcret
 10577  00211A                     __end_of_I2C_ReStart:
 10578                           	opt stack 0
 10579                           tblptru	equ	0xFF8
 10580                           tblptrh	equ	0xFF7
 10581                           tblptrl	equ	0xFF6
 10582                           tablat	equ	0xFF5
 10583                           prodh	equ	0xFF4
 10584                           prodl	equ	0xFF3
 10585                           intcon	equ	0xFF2
 10586                           intcon2	equ	0xFF1
 10587                           postinc0	equ	0xFEE
 10588                           wreg	equ	0xFE8
 10589                           postdec1	equ	0xFE5
 10590                           fsr1l	equ	0xFE1
 10591                           indf2	equ	0xFDF
 10592                           postinc2	equ	0xFDE
 10593                           postdec2	equ	0xFDD
 10594                           fsr2h	equ	0xFDA
 10595                           fsr2l	equ	0xFD9
 10596                           status	equ	0xFD8
 10597                           
 10598 ;; *************** function _i2cLowSda *****************
 10599 ;; Defined at:
 10600 ;;		line 102 in file "I2C.c"
 10601 ;; Parameters:    Size  Location     Type
 10602 ;;		None
 10603 ;; Auto vars:     Size  Location     Type
 10604 ;;		None
 10605 ;; Return value:  Size  Location     Type
 10606 ;;		None               void
 10607 ;; Registers used:
 10608 ;;		None
 10609 ;; Tracked objects:
 10610 ;;		On entry : 0/0
 10611 ;;		On exit  : 0/0
 10612 ;;		Unchanged: 0/0
 10613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10614 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10615 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10616 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10617 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10618 ;;Total ram usage:        0 bytes
 10619 ;; Hardware stack levels used:    1
 10620 ;; Hardware stack levels required when called:    3
 10621 ;; This function calls:
 10622 ;;		Nothing
 10623 ;; This function is called by:
 10624 ;;		_I2C_Write
 10625 ;;		_i2cAck
 10626 ;;		_I2C_Start
 10627 ;;		_I2C_ReStart
 10628 ;;		_I2C_Stop
 10629 ;; This function uses a non-reentrant model
 10630 ;;
 10631                           
 10632                           	psect	text62
 10633  00222E                     __ptext62:
 10634                           	opt stack 0
 10635  00222E                     _i2cLowSda:
 10636                           	opt stack 23
 10637                           
 10638                           ;I2C.c: 104: PORTCbits.RC1 = 0;
 10639                           
 10640                           ;incstack = 0
 10641  00222E  9282               	bcf	3970,1,c	;volatile
 10642                           
 10643                           ;I2C.c: 105: TRISCbits.RC1 = 0;
 10644  002230  9294               	bcf	3988,1,c	;volatile
 10645                           
 10646                           ;I2C.c: 106: _delay((unsigned long)((2)*(8000000/4000000.0)));
 10647  002232  D000               	nop2		;2 cycle nop
 10648  002234  D000               	nop2		;2 cycle nop
 10649  002236  0012               	return		;funcret
 10650  002238                     __end_of_i2cLowSda:
 10651                           	opt stack 0
 10652                           tblptru	equ	0xFF8
 10653                           tblptrh	equ	0xFF7
 10654                           tblptrl	equ	0xFF6
 10655                           tablat	equ	0xFF5
 10656                           prodh	equ	0xFF4
 10657                           prodl	equ	0xFF3
 10658                           intcon	equ	0xFF2
 10659                           intcon2	equ	0xFF1
 10660                           postinc0	equ	0xFEE
 10661                           wreg	equ	0xFE8
 10662                           postdec1	equ	0xFE5
 10663                           fsr1l	equ	0xFE1
 10664                           indf2	equ	0xFDF
 10665                           postinc2	equ	0xFDE
 10666                           postdec2	equ	0xFDD
 10667                           fsr2h	equ	0xFDA
 10668                           fsr2l	equ	0xFD9
 10669                           status	equ	0xFD8
 10670                           
 10671 ;; *************** function _i2cLowScl *****************
 10672 ;; Defined at:
 10673 ;;		line 115 in file "I2C.c"
 10674 ;; Parameters:    Size  Location     Type
 10675 ;;		None
 10676 ;; Auto vars:     Size  Location     Type
 10677 ;;		None
 10678 ;; Return value:  Size  Location     Type
 10679 ;;		None               void
 10680 ;; Registers used:
 10681 ;;		None
 10682 ;; Tracked objects:
 10683 ;;		On entry : 0/0
 10684 ;;		On exit  : 0/0
 10685 ;;		Unchanged: 0/0
 10686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10687 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10688 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10689 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10690 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10691 ;;Total ram usage:        0 bytes
 10692 ;; Hardware stack levels used:    1
 10693 ;; Hardware stack levels required when called:    3
 10694 ;; This function calls:
 10695 ;;		Nothing
 10696 ;; This function is called by:
 10697 ;;		_I2C_Read
 10698 ;;		_I2C_Write
 10699 ;;		_i2cNack
 10700 ;;		_i2cAck
 10701 ;;		_I2C_Start
 10702 ;;		_I2C_ReStart
 10703 ;;		_I2C_Stop
 10704 ;; This function uses a non-reentrant model
 10705 ;;
 10706                           
 10707                           	psect	text63
 10708  002240                     __ptext63:
 10709                           	opt stack 0
 10710  002240                     _i2cLowScl:
 10711                           	opt stack 23
 10712                           
 10713                           ;I2C.c: 117: PORTCbits.RC2 = 0;
 10714                           
 10715                           ;incstack = 0
 10716  002240  9482               	bcf	3970,2,c	;volatile
 10717                           
 10718                           ;I2C.c: 118: TRISCbits.RC2 = 0;
 10719  002242  9494               	bcf	3988,2,c	;volatile
 10720                           
 10721                           ;I2C.c: 119: _delay((unsigned long)((1)*(8000000/4000000.0)));
 10722  002244  D000               	nop2		;2 cycle nop
 10723  002246  0012               	return		;funcret
 10724  002248                     __end_of_i2cLowScl:
 10725                           	opt stack 0
 10726                           tblptru	equ	0xFF8
 10727                           tblptrh	equ	0xFF7
 10728                           tblptrl	equ	0xFF6
 10729                           tablat	equ	0xFF5
 10730                           prodh	equ	0xFF4
 10731                           prodl	equ	0xFF3
 10732                           intcon	equ	0xFF2
 10733                           intcon2	equ	0xFF1
 10734                           postinc0	equ	0xFEE
 10735                           wreg	equ	0xFE8
 10736                           postdec1	equ	0xFE5
 10737                           fsr1l	equ	0xFE1
 10738                           indf2	equ	0xFDF
 10739                           postinc2	equ	0xFDE
 10740                           postdec2	equ	0xFDD
 10741                           fsr2h	equ	0xFDA
 10742                           fsr2l	equ	0xFD9
 10743                           status	equ	0xFD8
 10744                           
 10745 ;; *************** function _i2cHighSda *****************
 10746 ;; Defined at:
 10747 ;;		line 96 in file "I2C.c"
 10748 ;; Parameters:    Size  Location     Type
 10749 ;;		None
 10750 ;; Auto vars:     Size  Location     Type
 10751 ;;		None
 10752 ;; Return value:  Size  Location     Type
 10753 ;;		None               void
 10754 ;; Registers used:
 10755 ;;		None
 10756 ;; Tracked objects:
 10757 ;;		On entry : 0/0
 10758 ;;		On exit  : 0/0
 10759 ;;		Unchanged: 0/0
 10760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10761 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10762 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10763 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10764 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10765 ;;Total ram usage:        0 bytes
 10766 ;; Hardware stack levels used:    1
 10767 ;; Hardware stack levels required when called:    3
 10768 ;; This function calls:
 10769 ;;		Nothing
 10770 ;; This function is called by:
 10771 ;;		_I2C_Init
 10772 ;;		_I2C_Read
 10773 ;;		_I2C_Write
 10774 ;;		_i2cAck
 10775 ;;		_I2C_Start
 10776 ;;		_I2C_ReStart
 10777 ;;		_I2C_Stop
 10778 ;; This function uses a non-reentrant model
 10779 ;;
 10780                           
 10781                           	psect	text64
 10782  002248                     __ptext64:
 10783                           	opt stack 0
 10784  002248                     _i2cHighSda:
 10785                           	opt stack 25
 10786                           
 10787                           ;I2C.c: 98: TRISCbits.RC1 = 1;
 10788                           
 10789                           ;incstack = 0
 10790  002248  8294               	bsf	3988,1,c	;volatile
 10791                           
 10792                           ;I2C.c: 99: _delay((unsigned long)((2)*(8000000/4000000.0)));
 10793  00224A  D000               	nop2		;2 cycle nop
 10794  00224C  D000               	nop2		;2 cycle nop
 10795  00224E  0012               	return		;funcret
 10796  002250                     __end_of_i2cHighSda:
 10797                           	opt stack 0
 10798                           tblptru	equ	0xFF8
 10799                           tblptrh	equ	0xFF7
 10800                           tblptrl	equ	0xFF6
 10801                           tablat	equ	0xFF5
 10802                           prodh	equ	0xFF4
 10803                           prodl	equ	0xFF3
 10804                           intcon	equ	0xFF2
 10805                           intcon2	equ	0xFF1
 10806                           postinc0	equ	0xFEE
 10807                           wreg	equ	0xFE8
 10808                           postdec1	equ	0xFE5
 10809                           fsr1l	equ	0xFE1
 10810                           indf2	equ	0xFDF
 10811                           postinc2	equ	0xFDE
 10812                           postdec2	equ	0xFDD
 10813                           fsr2h	equ	0xFDA
 10814                           fsr2l	equ	0xFD9
 10815                           status	equ	0xFD8
 10816                           
 10817 ;; *************** function _i2cHighScl *****************
 10818 ;; Defined at:
 10819 ;;		line 109 in file "I2C.c"
 10820 ;; Parameters:    Size  Location     Type
 10821 ;;		None
 10822 ;; Auto vars:     Size  Location     Type
 10823 ;;		None
 10824 ;; Return value:  Size  Location     Type
 10825 ;;		None               void
 10826 ;; Registers used:
 10827 ;;		wreg
 10828 ;; Tracked objects:
 10829 ;;		On entry : 0/0
 10830 ;;		On exit  : 0/0
 10831 ;;		Unchanged: 0/0
 10832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10833 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10834 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10835 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10836 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10837 ;;Total ram usage:        0 bytes
 10838 ;; Hardware stack levels used:    1
 10839 ;; Hardware stack levels required when called:    3
 10840 ;; This function calls:
 10841 ;;		Nothing
 10842 ;; This function is called by:
 10843 ;;		_I2C_Init
 10844 ;;		_I2C_Read
 10845 ;;		_I2C_Write
 10846 ;;		_i2cNack
 10847 ;;		_i2cAck
 10848 ;;		_I2C_Start
 10849 ;;		_I2C_ReStart
 10850 ;;		_I2C_Stop
 10851 ;; This function uses a non-reentrant model
 10852 ;;
 10853                           
 10854                           	psect	text65
 10855  0021EE                     __ptext65:
 10856                           	opt stack 0
 10857  0021EE                     _i2cHighScl:
 10858                           	opt stack 25
 10859                           
 10860                           ;I2C.c: 111: TRISCbits.RC2 = 1;
 10861                           
 10862                           ;incstack = 0
 10863  0021EE  8494               	bsf	3988,2,c	;volatile
 10864                           
 10865                           ;I2C.c: 112: _delay((unsigned long)((10)*(8000000/4000000.0)));
 10866  0021F0  0E06               	movlw	6
 10867  0021F2                     u5407:
 10868  0021F2  2EE8               	decfsz	wreg,f,c
 10869  0021F4  D7FE               	goto	u5407
 10870  0021F6  D000               	nop2		;nop
 10871  0021F8  0012               	return		;funcret
 10872  0021FA                     __end_of_i2cHighScl:
 10873                           	opt stack 0
 10874                           tblptru	equ	0xFF8
 10875                           tblptrh	equ	0xFF7
 10876                           tblptrl	equ	0xFF6
 10877                           tablat	equ	0xFF5
 10878                           prodh	equ	0xFF4
 10879                           prodl	equ	0xFF3
 10880                           intcon	equ	0xFF2
 10881                           intcon2	equ	0xFF1
 10882                           postinc0	equ	0xFEE
 10883                           wreg	equ	0xFE8
 10884                           postdec1	equ	0xFE5
 10885                           fsr1l	equ	0xFE1
 10886                           indf2	equ	0xFDF
 10887                           postinc2	equ	0xFDE
 10888                           postdec2	equ	0xFDD
 10889                           fsr2h	equ	0xFDA
 10890                           fsr2l	equ	0xFD9
 10891                           status	equ	0xFD8
 10892                           
 10893 ;; *************** function _chkisr *****************
 10894 ;; Defined at:
 10895 ;;		line 29 in file "Interrupt.c"
 10896 ;; Parameters:    Size  Location     Type
 10897 ;;		None
 10898 ;; Auto vars:     Size  Location     Type
 10899 ;;		None
 10900 ;; Return value:  Size  Location     Type
 10901 ;;		None               void
 10902 ;; Registers used:
 10903 ;;		wreg, status,2, status,0, cstack
 10904 ;; Tracked objects:
 10905 ;;		On entry : 0/0
 10906 ;;		On exit  : 0/0
 10907 ;;		Unchanged: 0/0
 10908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10909 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10910 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10911 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10912 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10913 ;;Total ram usage:       14 bytes
 10914 ;; Hardware stack levels used:    1
 10915 ;; Hardware stack levels required when called:    2
 10916 ;; This function calls:
 10917 ;;		_INT0_isr
 10918 ;;		_TIMER1_isr
 10919 ;; This function is called by:
 10920 ;;		Interrupt level 2
 10921 ;; This function uses a non-reentrant model
 10922 ;;
 10923                           
 10924                           	psect	intcode
 10925  000008                     __pintcode:
 10926                           	opt stack 0
 10927  000008                     _chkisr:
 10928                           	opt stack 20
 10929                           
 10930                           ;incstack = 0
 10931  000008  CFFA F003          	movff	pclath,??_chkisr
 10932  00000C  CFFB F004          	movff	pclatu,??_chkisr+1
 10933  000010  CFE9 F005          	movff	fsr0l,??_chkisr+2
 10934  000014  ED08  F00D         	call	int_func,f	;refresh shadow registers
 10935                           pclatu	equ	0xFFB
 10936                           pclath	equ	0xFFA
 10937                           tblptru	equ	0xFF8
 10938                           tblptrh	equ	0xFF7
 10939                           tblptrl	equ	0xFF6
 10940                           tablat	equ	0xFF5
 10941                           prodh	equ	0xFF4
 10942                           prodl	equ	0xFF3
 10943                           intcon	equ	0xFF2
 10944                           intcon2	equ	0xFF1
 10945                           postinc0	equ	0xFEE
 10946                           fsr0l	equ	0xFE9
 10947                           wreg	equ	0xFE8
 10948                           postdec1	equ	0xFE5
 10949                           fsr1l	equ	0xFE1
 10950                           indf2	equ	0xFDF
 10951                           postinc2	equ	0xFDE
 10952                           postdec2	equ	0xFDD
 10953                           fsr2h	equ	0xFDA
 10954                           fsr2l	equ	0xFD9
 10955                           status	equ	0xFD8
 10956                           
 10957                           	psect	intcode_body
 10958  001A10                     __pintcode_body:
 10959                           	opt stack 20
 10960  001A10                     int_func:
 10961                           	opt stack 20
 10962  001A10  0006               	pop		; remove dummy address from shadow register refresh
 10963  001A12  CFEA F006          	movff	fsr0h,??_chkisr+3
 10964  001A16  CFE1 F007          	movff	fsr1l,??_chkisr+4
 10965  001A1A  CFE2 F008          	movff	fsr1h,??_chkisr+5
 10966  001A1E  CFD9 F009          	movff	fsr2l,??_chkisr+6
 10967  001A22  CFDA F00A          	movff	fsr2h,??_chkisr+7
 10968  001A26  CFF3 F00B          	movff	prodl,??_chkisr+8
 10969  001A2A  CFF4 F00C          	movff	prodh,??_chkisr+9
 10970  001A2E  CFF6 F00D          	movff	tblptrl,??_chkisr+10
 10971  001A32  CFF7 F00E          	movff	tblptrh,??_chkisr+11
 10972  001A36  CFF8 F00F          	movff	tblptru,??_chkisr+12
 10973  001A3A  CFF5 F010          	movff	tablat,??_chkisr+13
 10974                           
 10975                           ;Interrupt.c: 31: if (PIR1bits.TMR1IF == 1) TIMER1_isr();
 10976  001A3E  A09E               	btfss	3998,0,c	;volatile
 10977  001A40  D003               	goto	i2l4901
 10978  001A42  ECFD  F010         	call	_TIMER1_isr	;wreg free
 10979  001A46  D000               	goto	i2l4901
 10980  001A48                     i2l4901:
 10981                           
 10982                           ;Interrupt.c: 32: if (INTCONbits.INT0IF == 1) INT0_isr();
 10983  001A48  A2F2               	btfss	intcon,1,c	;volatile
 10984  001A4A  D003               	goto	i2l219
 10985  001A4C  EC6E  F006         	call	_INT0_isr	;wreg free
 10986  001A50  D000               	goto	i2l219
 10987  001A52                     i2l219:
 10988  001A52  C010  FFF5         	movff	??_chkisr+13,tablat
 10989  001A56  C00F  FFF8         	movff	??_chkisr+12,tblptru
 10990  001A5A  C00E  FFF7         	movff	??_chkisr+11,tblptrh
 10991  001A5E  C00D  FFF6         	movff	??_chkisr+10,tblptrl
 10992  001A62  C00C  FFF4         	movff	??_chkisr+9,prodh
 10993  001A66  C00B  FFF3         	movff	??_chkisr+8,prodl
 10994  001A6A  C00A  FFDA         	movff	??_chkisr+7,fsr2h
 10995  001A6E  C009  FFD9         	movff	??_chkisr+6,fsr2l
 10996  001A72  C008  FFE2         	movff	??_chkisr+5,fsr1h
 10997  001A76  C007  FFE1         	movff	??_chkisr+4,fsr1l
 10998  001A7A  C006  FFEA         	movff	??_chkisr+3,fsr0h
 10999  001A7E  C005  FFE9         	movff	??_chkisr+2,fsr0l
 11000  001A82  C004  FFFB         	movff	??_chkisr+1,pclatu
 11001  001A86  C003  FFFA         	movff	??_chkisr,pclath
 11002  001A8A  0011               	retfie		f
 11003  001A8C                     __end_of_chkisr:
 11004                           	opt stack 0
 11005                           pclatu	equ	0xFFB
 11006                           pclath	equ	0xFFA
 11007                           tblptru	equ	0xFF8
 11008                           tblptrh	equ	0xFF7
 11009                           tblptrl	equ	0xFF6
 11010                           tablat	equ	0xFF5
 11011                           prodh	equ	0xFF4
 11012                           prodl	equ	0xFF3
 11013                           intcon	equ	0xFF2
 11014                           intcon2	equ	0xFF1
 11015                           postinc0	equ	0xFEE
 11016                           fsr0h	equ	0xFEA
 11017                           fsr0l	equ	0xFE9
 11018                           wreg	equ	0xFE8
 11019                           postdec1	equ	0xFE5
 11020                           fsr1h	equ	0xFE2
 11021                           fsr1l	equ	0xFE1
 11022                           indf2	equ	0xFDF
 11023                           postinc2	equ	0xFDE
 11024                           postdec2	equ	0xFDD
 11025                           fsr2h	equ	0xFDA
 11026                           fsr2l	equ	0xFD9
 11027                           status	equ	0xFD8
 11028                           
 11029 ;; *************** function _TIMER1_isr *****************
 11030 ;; Defined at:
 11031 ;;		line 35 in file "Interrupt.c"
 11032 ;; Parameters:    Size  Location     Type
 11033 ;;		None
 11034 ;; Auto vars:     Size  Location     Type
 11035 ;;		None
 11036 ;; Return value:  Size  Location     Type
 11037 ;;		None               void
 11038 ;; Registers used:
 11039 ;;		wreg, status,2
 11040 ;; Tracked objects:
 11041 ;;		On entry : 0/0
 11042 ;;		On exit  : 0/0
 11043 ;;		Unchanged: 0/0
 11044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11045 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11046 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11047 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11048 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11049 ;;Total ram usage:        0 bytes
 11050 ;; Hardware stack levels used:    1
 11051 ;; This function calls:
 11052 ;;		Nothing
 11053 ;; This function is called by:
 11054 ;;		_chkisr
 11055 ;; This function uses a non-reentrant model
 11056 ;;
 11057                           
 11058                           	psect	text67
 11059  0021FA                     __ptext67:
 11060                           	opt stack 0
 11061  0021FA                     _TIMER1_isr:
 11062                           	opt stack 21
 11063                           
 11064                           ;Interrupt.c: 37: Nec_state = 0;
 11065                           
 11066                           ;incstack = 0
 11067  0021FA  0E00               	movlw	0
 11068  0021FC  6E52               	movwf	_Nec_state,c
 11069                           
 11070                           ;Interrupt.c: 38: INTCON2bits.INTEDG0 = 0;
 11071  0021FE  9CF1               	bcf	intcon2,6,c	;volatile
 11072                           
 11073                           ;Interrupt.c: 39: T1CONbits.TMR1ON = 0;
 11074  002200  90CD               	bcf	4045,0,c	;volatile
 11075                           
 11076                           ;Interrupt.c: 40: PIR1bits.TMR1IF = 0;
 11077  002202  909E               	bcf	3998,0,c	;volatile
 11078  002204  0012               	return		;funcret
 11079  002206                     __end_of_TIMER1_isr:
 11080                           	opt stack 0
 11081                           pclatu	equ	0xFFB
 11082                           pclath	equ	0xFFA
 11083                           tblptru	equ	0xFF8
 11084                           tblptrh	equ	0xFF7
 11085                           tblptrl	equ	0xFF6
 11086                           tablat	equ	0xFF5
 11087                           prodh	equ	0xFF4
 11088                           prodl	equ	0xFF3
 11089                           intcon	equ	0xFF2
 11090                           intcon2	equ	0xFF1
 11091                           postinc0	equ	0xFEE
 11092                           fsr0h	equ	0xFEA
 11093                           fsr0l	equ	0xFE9
 11094                           wreg	equ	0xFE8
 11095                           postdec1	equ	0xFE5
 11096                           fsr1h	equ	0xFE2
 11097                           fsr1l	equ	0xFE1
 11098                           indf2	equ	0xFDF
 11099                           postinc2	equ	0xFDE
 11100                           postdec2	equ	0xFDD
 11101                           fsr2h	equ	0xFDA
 11102                           fsr2l	equ	0xFD9
 11103                           status	equ	0xFD8
 11104                           
 11105 ;; *************** function _INT0_isr *****************
 11106 ;; Defined at:
 11107 ;;		line 49 in file "Interrupt.c"
 11108 ;; Parameters:    Size  Location     Type
 11109 ;;		None
 11110 ;; Auto vars:     Size  Location     Type
 11111 ;;		None
 11112 ;; Return value:  Size  Location     Type
 11113 ;;		None               void
 11114 ;; Registers used:
 11115 ;;		wreg, status,2, status,0, cstack
 11116 ;; Tracked objects:
 11117 ;;		On entry : 0/0
 11118 ;;		On exit  : 0/0
 11119 ;;		Unchanged: 0/0
 11120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11121 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11122 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11123 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11124 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11125 ;;Total ram usage:        2 bytes
 11126 ;; Hardware stack levels used:    1
 11127 ;; Hardware stack levels required when called:    1
 11128 ;; This function calls:
 11129 ;;		_force_nec_state0
 11130 ;; This function is called by:
 11131 ;;		_chkisr
 11132 ;; This function uses a non-reentrant model
 11133 ;;
 11134                           
 11135                           	psect	text68
 11136  000CDC                     __ptext68:
 11137                           	opt stack 0
 11138  000CDC                     _INT0_isr:
 11139                           	opt stack 20
 11140                           
 11141                           ;Interrupt.c: 52: INTCONbits.INT0IF = 0;
 11142                           
 11143                           ;incstack = 0
 11144  000CDC  92F2               	bcf	intcon,1,c	;volatile
 11145                           
 11146                           ;Interrupt.c: 53: if (Nec_state != 0)
 11147  000CDE  5052               	movf	_Nec_state,w,c
 11148  000CE0  B4D8               	btfsc	status,2,c
 11149  000CE2  D0AB               	goto	i2l4773
 11150                           
 11151                           ;Interrupt.c: 54: {
 11152                           ;Interrupt.c: 55: Time_Elapsed = (TMR1H << 8) | TMR1L;
 11153  000CE4  50CE               	movf	4046,w,c	;volatile
 11154  000CE6  CFCF F001          	movff	4047,??_INT0_isr	;volatile
 11155  000CEA  6A02               	clrf	(??_INT0_isr+1)& (0+255),c
 11156  000CEC  C001  F002         	movff	??_INT0_isr,??_INT0_isr+1
 11157  000CF0  6A01               	clrf	??_INT0_isr,c
 11158  000CF2  1001               	iorwf	??_INT0_isr,w,c
 11159  000CF4  6E46               	movwf	_Time_Elapsed,c
 11160  000CF6  5002               	movf	??_INT0_isr+1,w,c
 11161  000CF8  6E47               	movwf	_Time_Elapsed+1,c
 11162                           
 11163                           ;Interrupt.c: 56: TMR1H = 0;
 11164  000CFA  0E00               	movlw	0
 11165  000CFC  6ECF               	movwf	4047,c	;volatile
 11166                           
 11167                           ;Interrupt.c: 57: TMR1L = 0;
 11168  000CFE  0E00               	movlw	0
 11169  000D00  6ECE               	movwf	4046,c	;volatile
 11170                           
 11171                           ;Interrupt.c: 58: }
 11172                           ;Interrupt.c: 60: switch(Nec_state)
 11173  000D02  D09B               	goto	i2l4773
 11174  000D04                     i2l4707:
 11175                           
 11176                           ;Interrupt.c: 63: {
 11177                           ;Interrupt.c: 64: TMR1H = 0;
 11178  000D04  0E00               	movlw	0
 11179  000D06  6ECF               	movwf	4047,c	;volatile
 11180                           
 11181                           ;Interrupt.c: 65: TMR1L = 0;
 11182  000D08  0E00               	movlw	0
 11183  000D0A  6ECE               	movwf	4046,c	;volatile
 11184                           
 11185                           ;Interrupt.c: 66: PIR1bits.TMR1IF = 0;
 11186  000D0C  909E               	bcf	3998,0,c	;volatile
 11187                           
 11188                           ;Interrupt.c: 67: T1CON= 0x90;
 11189  000D0E  0E90               	movlw	144
 11190  000D10  6ECD               	movwf	4045,c	;volatile
 11191                           
 11192                           ;Interrupt.c: 68: T1CONbits.TMR1ON = 1;
 11193  000D12  80CD               	bsf	4045,0,c	;volatile
 11194                           
 11195                           ;Interrupt.c: 69: bit_count = 0;
 11196  000D14  0E00               	movlw	0
 11197  000D16  6E58               	movwf	_bit_count,c
 11198                           
 11199                           ;Interrupt.c: 70: Nec_code = 0;
 11200  000D18  0E00               	movlw	0
 11201  000D1A  0100               	movlb	0	; () banked
 11202  000D1C  6FF8               	movwf	_Nec_code& (0+255),b
 11203  000D1E  0E00               	movlw	0
 11204  000D20  6FF9               	movwf	(_Nec_code+1)& (0+255),b
 11205  000D22  0E00               	movlw	0
 11206  000D24  6FFA               	movwf	(_Nec_code+2)& (0+255),b
 11207  000D26  0E00               	movlw	0
 11208  000D28  6FFB               	movwf	(_Nec_code+3)& (0+255),b
 11209                           
 11210                           ;Interrupt.c: 71: Nec_state = 1;
 11211  000D2A  0E01               	movlw	1
 11212  000D2C  6E52               	movwf	_Nec_state,c
 11213  000D2E  D083               	goto	i2l4767
 11214                           
 11215                           ; BSR set to: 0
 11216                           ;Interrupt.c: 73: return;
 11217                           
 11218                           ; BSR set to: 0
 11219                           ;Interrupt.c: 72: INTCON2bits.INTEDG0 = 1;
 11220  000D30  D095               	goto	i2l231
 11221  000D32                     i2l4717:
 11222                           
 11223                           ;Interrupt.c: 77: {
 11224                           ;Interrupt.c: 78: if (Time_Elapsed > 8500 && Time_Elapsed < 9500)
 11225  000D32  0E35               	movlw	53
 11226  000D34  5C46               	subwf	_Time_Elapsed,w,c
 11227  000D36  0E21               	movlw	33
 11228  000D38  5847               	subwfb	_Time_Elapsed+1,w,c
 11229  000D3A  A0D8               	btfss	status,0,c
 11230  000D3C  D009               	goto	i2l4723
 11231  000D3E  0E1C               	movlw	28
 11232  000D40  5C46               	subwf	_Time_Elapsed,w,c
 11233  000D42  0E25               	movlw	37
 11234  000D44  5847               	subwfb	_Time_Elapsed+1,w,c
 11235  000D46  B0D8               	btfsc	status,0,c
 11236  000D48  D003               	goto	i2l4723
 11237                           
 11238                           ;Interrupt.c: 79: {
 11239                           ;Interrupt.c: 80: Nec_state = 2;
 11240  000D4A  0E02               	movlw	2
 11241  000D4C  6E52               	movwf	_Nec_state,c
 11242                           
 11243                           ;Interrupt.c: 81: }
 11244  000D4E  D02A               	goto	i2l4749
 11245  000D50                     i2l4723:
 11246                           
 11247                           ;Interrupt.c: 82: else
 11248                           ;Interrupt.c: 83: {
 11249                           ;Interrupt.c: 84: force_nec_state0();
 11250  000D50  EC28  F011         	call	_force_nec_state0	;wreg free
 11251  000D54  D027               	goto	i2l4749
 11252  000D56  D026               	goto	i2l4749
 11253                           
 11254                           ;Interrupt.c: 87: return;
 11255                           
 11256                           ;Interrupt.c: 85: }
 11257                           ;Interrupt.c: 86: INTCON2bits.INTEDG0 = 0;
 11258  000D58  D081               	goto	i2l231
 11259  000D5A                     i2l4729:
 11260                           
 11261                           ;Interrupt.c: 91: {
 11262                           ;Interrupt.c: 92: if (Time_Elapsed > 4000 && Time_Elapsed < 5000 )
 11263  000D5A  0EA1               	movlw	161
 11264  000D5C  5C46               	subwf	_Time_Elapsed,w,c
 11265  000D5E  0E0F               	movlw	15
 11266  000D60  5847               	subwfb	_Time_Elapsed+1,w,c
 11267  000D62  A0D8               	btfss	status,0,c
 11268  000D64  D009               	goto	i2l4735
 11269  000D66  0E88               	movlw	136
 11270  000D68  5C46               	subwf	_Time_Elapsed,w,c
 11271  000D6A  0E13               	movlw	19
 11272  000D6C  5847               	subwfb	_Time_Elapsed+1,w,c
 11273  000D6E  B0D8               	btfsc	status,0,c
 11274  000D70  D003               	goto	i2l4735
 11275  000D72                     
 11276                           ;Interrupt.c: 93: {
 11277                           ;Interrupt.c: 94: Nec_state = 3;
 11278  000D72  0E03               	movlw	3
 11279  000D74  6E52               	movwf	_Nec_state,c
 11280                           
 11281                           ;Interrupt.c: 95: }
 11282  000D76  D05F               	goto	i2l4767
 11283  000D78                     i2l4735:
 11284                           
 11285                           ;Interrupt.c: 96: else
 11286                           ;Interrupt.c: 97: {
 11287                           ;Interrupt.c: 98: force_nec_state0();
 11288  000D78  EC28  F011         	call	_force_nec_state0	;wreg free
 11289  000D7C  D05C               	goto	i2l4767
 11290  000D7E  D05B               	goto	i2l4767
 11291                           
 11292                           ;Interrupt.c: 101: return;
 11293                           
 11294                           ;Interrupt.c: 99: }
 11295                           ;Interrupt.c: 100: INTCON2bits.INTEDG0 = 1;
 11296  000D80  D06D               	goto	i2l231
 11297  000D82                     i2l4741:
 11298                           
 11299                           ;Interrupt.c: 105: {
 11300                           ;Interrupt.c: 106: if (Time_Elapsed > 400 && Time_Elapsed < 700)
 11301  000D82  0E91               	movlw	145
 11302  000D84  5C46               	subwf	_Time_Elapsed,w,c
 11303  000D86  0E01               	movlw	1
 11304  000D88  5847               	subwfb	_Time_Elapsed+1,w,c
 11305  000D8A  A0D8               	btfss	status,0,c
 11306  000D8C  D008               	goto	i2l4747
 11307  000D8E  0EBC               	movlw	188
 11308  000D90  5C46               	subwf	_Time_Elapsed,w,c
 11309  000D92  0E02               	movlw	2
 11310  000D94  5847               	subwfb	_Time_Elapsed+1,w,c
 11311  000D96  B0D8               	btfsc	status,0,c
 11312  000D98  D002               	goto	i2l4747
 11313                           
 11314                           ;Interrupt.c: 107: {
 11315                           ;Interrupt.c: 108: Nec_state = 4;
 11316  000D9A  0E04               	movlw	4
 11317  000D9C  D7D7               	goto	L4
 11318  000D9E                     i2l4747:
 11319                           
 11320                           ;Interrupt.c: 110: else
 11321                           ;Interrupt.c: 111: {
 11322                           ;Interrupt.c: 112: force_nec_state0();
 11323  000D9E  EC28  F011         	call	_force_nec_state0	;wreg free
 11324  000DA2  D000               	goto	i2l4749
 11325  000DA4                     i2l4749:
 11326                           
 11327                           ;Interrupt.c: 113: }
 11328                           ;Interrupt.c: 114: INTCON2bits.INTEDG0 = 0;
 11329  000DA4  9CF1               	bcf	intcon2,6,c	;volatile
 11330                           
 11331                           ;Interrupt.c: 115: return;
 11332  000DA6  D05A               	goto	i2l231
 11333  000DA8                     i2l4753:
 11334                           
 11335                           ;Interrupt.c: 119: {
 11336                           ;Interrupt.c: 120: if (Time_Elapsed > 400 && Time_Elapsed < 1800)
 11337  000DA8  0E91               	movlw	145
 11338  000DAA  5C46               	subwf	_Time_Elapsed,w,c
 11339  000DAC  0E01               	movlw	1
 11340  000DAE  5847               	subwfb	_Time_Elapsed+1,w,c
 11341  000DB0  A0D8               	btfss	status,0,c
 11342  000DB2  D03E               	goto	i2l4765
 11343  000DB4  0E08               	movlw	8
 11344  000DB6  5C46               	subwf	_Time_Elapsed,w,c
 11345  000DB8  0E07               	movlw	7
 11346  000DBA  5847               	subwfb	_Time_Elapsed+1,w,c
 11347  000DBC  B0D8               	btfsc	status,0,c
 11348  000DBE  D038               	goto	i2l4765
 11349                           
 11350                           ;Interrupt.c: 121: {
 11351                           ;Interrupt.c: 122: Nec_code = Nec_code << 1;
 11352  000DC0  90D8               	bcf	status,0,c
 11353  000DC2  0100               	movlb	0	; () banked
 11354  000DC4  35F8               	rlcf	_Nec_code& (0+255),w,b
 11355  000DC6  0100               	movlb	0	; () banked
 11356  000DC8  6FF8               	movwf	_Nec_code& (0+255),b
 11357  000DCA  0100               	movlb	0	; () banked
 11358  000DCC  35F9               	rlcf	(_Nec_code+1)& (0+255),w,b
 11359  000DCE  0100               	movlb	0	; () banked
 11360  000DD0  6FF9               	movwf	(_Nec_code+1)& (0+255),b
 11361  000DD2  0100               	movlb	0	; () banked
 11362  000DD4  35FA               	rlcf	(_Nec_code+2)& (0+255),w,b
 11363  000DD6  0100               	movlb	0	; () banked
 11364  000DD8  6FFA               	movwf	(_Nec_code+2)& (0+255),b
 11365  000DDA  0100               	movlb	0	; () banked
 11366  000DDC  35FB               	rlcf	(_Nec_code+3)& (0+255),w,b
 11367  000DDE  0100               	movlb	0	; () banked
 11368  000DE0  6FFB               	movwf	(_Nec_code+3)& (0+255),b
 11369                           
 11370                           ;Interrupt.c: 123: if (Time_Elapsed > 1000)
 11371  000DE2  0EE9               	movlw	233
 11372  000DE4  5C46               	subwf	_Time_Elapsed,w,c
 11373  000DE6  0E03               	movlw	3
 11374  000DE8  5847               	subwfb	_Time_Elapsed+1,w,c
 11375  000DEA  A0D8               	btfss	status,0,c
 11376  000DEC  D014               	goto	i2l243
 11377                           
 11378                           ; BSR set to: 0
 11379                           ;Interrupt.c: 124: {
 11380                           ;Interrupt.c: 125: Nec_code = Nec_code + 1;
 11381  000DEE  0E01               	movlw	1
 11382  000DF0  0100               	movlb	0	; () banked
 11383  000DF2  25F8               	addwf	_Nec_code& (0+255),w,b
 11384  000DF4  0100               	movlb	0	; () banked
 11385  000DF6  6FF8               	movwf	_Nec_code& (0+255),b
 11386  000DF8  0E00               	movlw	0
 11387  000DFA  0100               	movlb	0	; () banked
 11388  000DFC  21F9               	addwfc	(_Nec_code+1)& (0+255),w,b
 11389  000DFE  0100               	movlb	0	; () banked
 11390  000E00  6FF9               	movwf	(_Nec_code+1)& (0+255),b
 11391  000E02  0E00               	movlw	0
 11392  000E04  0100               	movlb	0	; () banked
 11393  000E06  21FA               	addwfc	(_Nec_code+2)& (0+255),w,b
 11394  000E08  0100               	movlb	0	; () banked
 11395  000E0A  6FFA               	movwf	(_Nec_code+2)& (0+255),b
 11396  000E0C  0E00               	movlw	0
 11397  000E0E  0100               	movlb	0	; () banked
 11398  000E10  21FB               	addwfc	(_Nec_code+3)& (0+255),w,b
 11399  000E12  0100               	movlb	0	; () banked
 11400  000E14  6FFB               	movwf	(_Nec_code+3)& (0+255),b
 11401  000E16                     i2l243:
 11402                           
 11403                           ; BSR set to: 0
 11404                           ;Interrupt.c: 126: }
 11405                           ;Interrupt.c: 127: bit_count = bit_count + 1;
 11406  000E16  2858               	incf	_bit_count,w,c
 11407  000E18  6E58               	movwf	_bit_count,c
 11408                           
 11409                           ;Interrupt.c: 128: if (bit_count > 31)
 11410  000E1A  0E1F               	movlw	31
 11411  000E1C  6458               	cpfsgt	_bit_count,c
 11412  000E1E  D7A9               	goto	L5
 11413                           
 11414                           ; BSR set to: 0
 11415                           ;Interrupt.c: 129: {
 11416                           ;Interrupt.c: 130: nec_ok = 1;
 11417  000E20  0E00               	movlw	0
 11418  000E22  6E49               	movwf	_nec_ok+1,c
 11419  000E24  0E01               	movlw	1
 11420  000E26  6E48               	movwf	_nec_ok,c
 11421                           
 11422                           ; BSR set to: 0
 11423                           ;Interrupt.c: 131: INTCONbits.INT0IE = 0;
 11424  000E28  98F2               	bcf	intcon,4,c	;volatile
 11425                           
 11426                           ;Interrupt.c: 132: Nec_state = 0;
 11427  000E2A  0E00               	movlw	0
 11428  000E2C  6E52               	movwf	_Nec_state,c
 11429  000E2E  D7A1               	goto	L5
 11430  000E30                     i2l4765:
 11431                           
 11432                           ;Interrupt.c: 136: else
 11433                           ;Interrupt.c: 137: {
 11434                           ;Interrupt.c: 138: force_nec_state0();
 11435  000E30  EC28  F011         	call	_force_nec_state0	;wreg free
 11436  000E34  D000               	goto	i2l4767
 11437  000E36                     i2l4767:
 11438                           
 11439                           ;Interrupt.c: 139: }
 11440                           ;Interrupt.c: 140: INTCON2bits.INTEDG0 = 1;
 11441  000E36  8CF1               	bsf	intcon2,6,c	;volatile
 11442                           
 11443                           ;Interrupt.c: 142: }
 11444                           ;Interrupt.c: 143: }
 11445                           
 11446                           ;Interrupt.c: 141: return;
 11447  000E38  D011               	goto	i2l231
 11448  000E3A                     i2l4773:
 11449  000E3A  5052               	movf	_Nec_state,w,c
 11450                           
 11451                           ; Switch size 1, requested type "space"
 11452                           ; Number of cases is 5, Range of values is 0 to 4
 11453                           ; switch strategies available:
 11454                           ; Name         Instructions Cycles
 11455                           ; simple_byte           16     9 (average)
 11456                           ;	Chosen strategy is simple_byte
 11457  000E3C  0A00               	xorlw	0	; case 0
 11458  000E3E  B4D8               	btfsc	status,2,c
 11459  000E40  D761               	goto	i2l4707
 11460  000E42  0A01               	xorlw	1	; case 1
 11461  000E44  B4D8               	btfsc	status,2,c
 11462  000E46  D775               	goto	i2l4717
 11463  000E48  0A03               	xorlw	3	; case 2
 11464  000E4A  B4D8               	btfsc	status,2,c
 11465  000E4C  D786               	goto	i2l4729
 11466  000E4E  0A01               	xorlw	1	; case 3
 11467  000E50  B4D8               	btfsc	status,2,c
 11468  000E52  D797               	goto	i2l4741
 11469  000E54  0A07               	xorlw	7	; case 4
 11470  000E56  B4D8               	btfsc	status,2,c
 11471  000E58  D7A7               	goto	i2l4753
 11472  000E5A  D000               	goto	i2l231
 11473  000E5C                     i2l231:
 11474  000E5C  0012               	return		;funcret
 11475  000E5E                     __end_of_INT0_isr:
 11476                           	opt stack 0
 11477                           pclatu	equ	0xFFB
 11478                           pclath	equ	0xFFA
 11479                           tblptru	equ	0xFF8
 11480                           tblptrh	equ	0xFF7
 11481                           tblptrl	equ	0xFF6
 11482                           tablat	equ	0xFF5
 11483                           prodh	equ	0xFF4
 11484                           prodl	equ	0xFF3
 11485                           intcon	equ	0xFF2
 11486                           intcon2	equ	0xFF1
 11487                           postinc0	equ	0xFEE
 11488                           fsr0h	equ	0xFEA
 11489                           fsr0l	equ	0xFE9
 11490                           wreg	equ	0xFE8
 11491                           postdec1	equ	0xFE5
 11492                           fsr1h	equ	0xFE2
 11493                           fsr1l	equ	0xFE1
 11494                           indf2	equ	0xFDF
 11495                           postinc2	equ	0xFDE
 11496                           postdec2	equ	0xFDD
 11497                           fsr2h	equ	0xFDA
 11498                           fsr2l	equ	0xFD9
 11499                           status	equ	0xFD8
 11500                           
 11501 ;; *************** function _force_nec_state0 *****************
 11502 ;; Defined at:
 11503 ;;		line 43 in file "Interrupt.c"
 11504 ;; Parameters:    Size  Location     Type
 11505 ;;		None
 11506 ;; Auto vars:     Size  Location     Type
 11507 ;;		None
 11508 ;; Return value:  Size  Location     Type
 11509 ;;		None               void
 11510 ;; Registers used:
 11511 ;;		wreg, status,2
 11512 ;; Tracked objects:
 11513 ;;		On entry : 0/0
 11514 ;;		On exit  : 0/0
 11515 ;;		Unchanged: 0/0
 11516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11517 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11518 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11519 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11520 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11521 ;;Total ram usage:        0 bytes
 11522 ;; Hardware stack levels used:    1
 11523 ;; This function calls:
 11524 ;;		Nothing
 11525 ;; This function is called by:
 11526 ;;		_INT0_isr
 11527 ;; This function uses a non-reentrant model
 11528 ;;
 11529                           
 11530                           	psect	text69
 11531  002250                     __ptext69:
 11532                           	opt stack 0
 11533  002250                     _force_nec_state0:
 11534                           	opt stack 20
 11535                           
 11536                           ;Interrupt.c: 45: Nec_state=0;
 11537                           
 11538                           ;incstack = 0
 11539  002250  0E00               	movlw	0
 11540  002252  6E52               	movwf	_Nec_state,c
 11541                           
 11542                           ;Interrupt.c: 46: T1CONbits.TMR1ON = 0;
 11543  002254  90CD               	bcf	4045,0,c	;volatile
 11544  002256  0012               	return		;funcret
 11545  002258                     __end_of_force_nec_state0:
 11546                           	opt stack 0
 11547                           pclatu	equ	0xFFB
 11548                           pclath	equ	0xFFA
 11549                           tblptru	equ	0xFF8
 11550                           tblptrh	equ	0xFF7
 11551                           tblptrl	equ	0xFF6
 11552                           tablat	equ	0xFF5
 11553                           prodh	equ	0xFF4
 11554                           prodl	equ	0xFF3
 11555                           intcon	equ	0xFF2
 11556                           intcon2	equ	0xFF1
 11557                           postinc0	equ	0xFEE
 11558                           fsr0h	equ	0xFEA
 11559                           fsr0l	equ	0xFE9
 11560                           wreg	equ	0xFE8
 11561                           postdec1	equ	0xFE5
 11562                           fsr1h	equ	0xFE2
 11563                           fsr1l	equ	0xFE1
 11564                           indf2	equ	0xFDF
 11565                           postinc2	equ	0xFDE
 11566                           postdec2	equ	0xFDD
 11567                           fsr2h	equ	0xFDA
 11568                           fsr2l	equ	0xFD9
 11569                           status	equ	0xFD8
 11570                           pclatu	equ	0xFFB
 11571                           pclath	equ	0xFFA
 11572                           tblptru	equ	0xFF8
 11573                           tblptrh	equ	0xFF7
 11574                           tblptrl	equ	0xFF6
 11575                           tablat	equ	0xFF5
 11576                           prodh	equ	0xFF4
 11577                           prodl	equ	0xFF3
 11578                           intcon	equ	0xFF2
 11579                           intcon2	equ	0xFF1
 11580                           postinc0	equ	0xFEE
 11581                           fsr0h	equ	0xFEA
 11582                           fsr0l	equ	0xFE9
 11583                           wreg	equ	0xFE8
 11584                           postdec1	equ	0xFE5
 11585                           fsr1h	equ	0xFE2
 11586                           fsr1l	equ	0xFE1
 11587                           indf2	equ	0xFDF
 11588                           postinc2	equ	0xFDE
 11589                           postdec2	equ	0xFDD
 11590                           fsr2h	equ	0xFDA
 11591                           fsr2l	equ	0xFD9
 11592                           status	equ	0xFD8
 11593                           
 11594                           	psect	rparam
 11595  0000                     pclatu	equ	0xFFB
 11596                           pclath	equ	0xFFA
 11597                           tblptru	equ	0xFF8
 11598                           tblptrh	equ	0xFF7
 11599                           tblptrl	equ	0xFF6
 11600                           tablat	equ	0xFF5
 11601                           prodh	equ	0xFF4
 11602                           prodl	equ	0xFF3
 11603                           intcon	equ	0xFF2
 11604                           intcon2	equ	0xFF1
 11605                           postinc0	equ	0xFEE
 11606                           fsr0h	equ	0xFEA
 11607                           fsr0l	equ	0xFE9
 11608                           wreg	equ	0xFE8
 11609                           postdec1	equ	0xFE5
 11610                           fsr1h	equ	0xFE2
 11611                           fsr1l	equ	0xFE1
 11612                           indf2	equ	0xFDF
 11613                           postinc2	equ	0xFDE
 11614                           postdec2	equ	0xFDD
 11615                           fsr2h	equ	0xFDA
 11616                           fsr2l	equ	0xFD9
 11617                           status	equ	0xFD8


Data Sizes:
    Strings     210
    Constant    493
    Data        143
    BSS         51
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     65     111
    BANK0           128     13     128
    BANK1           256      2      35
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), RPM_Txt(BANK0[5]), DC_Txt(BANK0[4]), Fan_SW_Txt(BANK0[4]), 
		 -> date(BANK0[9]), time(BANK0[9]), tempF(BANK0[4]), tempC(BANK0[4]), 
		 -> buffer(BANK1[33]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), RPM_Txt(BANK0[5]), DC_Txt(BANK0[4]), Fan_SW_Txt(BANK0[4]), 
		 -> date(BANK0[9]), time(BANK0[9]), tempF(BANK0[4]), tempC(BANK0[4]), 
		 -> buffer(BANK1[33]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_17(CODE[4]), STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[3]), 
		 -> STR_13(CODE[6]), STR_12(CODE[5]), STR_11(CODE[5]), STR_10(CODE[2]), 
		 -> STR_9(CODE[3]), STR_8(CODE[13]), STR_7(CODE[22]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), Fan_SW_Txt(BANK0[4]), buffer(BANK1[33]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), Fan_SW_Txt(BANK0[4]), buffer(BANK1[33]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 30
		 -> STR_6(CODE[15]), STR_5(CODE[22]), STR_4(CODE[16]), STR_3(CODE[20]), 
		 -> STR_2(CODE[21]), STR_1(CODE[30]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), Fan_SW_Txt(BANK0[4]), buffer(BANK1[33]), 

    txt	PTR unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), buffer(BANK1[33]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), RPM_Txt(BANK0[5]), DC_Txt(BANK0[4]), Fan_SW_Txt(BANK0[4]), 
		 -> date(BANK0[9]), time(BANK0[9]), tempF(BANK0[4]), tempC(BANK0[4]), 
		 -> buffer(BANK1[33]), 


Critical Paths under _main in COMRAM

    _printf->___lwmod
    ___lwmod->___lwdiv
    _get_RPM->___awdiv
    _Update_Screen->_drawtext
    ___awmod->___awdiv
    ___awdiv->___wmul
    _Turn_On_Fan->_do_update_pwm
    _Initialize_Screen->_drawtext
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawCircle->_drawPixel
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _write_data->_spiwrite
    _write_command->_spiwrite
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul
    _Do_Init->_DS1621_Init
    _init_UART->_OpenUSART
    _DS1621_Init->_I2C_Write_Cmd_Write_Data
    _I2C_Write_Cmd_Write_Data->_I2C_Write
    _I2C_Write_Cmd_Only->_I2C_Write
    _Do_Beep->_do_update_pwm
    _do_update_pwm->___ftdiv
    ___lbtoft->___ftpack
    ___ftmul->___lbtoft
    ___ftdiv->___ftmul
    _DS3231_Read_Time->_I2C_Read
    _DS1621_Read_Temp->_I2C_Read

Critical Paths under _chkisr in COMRAM

    _chkisr->_INT0_isr

Critical Paths under _main in BANK0

    _main->_Update_Screen
    _Update_Screen->_drawtext
    _Turn_On_Fan->_do_update_pwm
    _Initialize_Screen->_drawtext
    _Do_Beep->_do_update_pwm

Critical Paths under _chkisr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _chkisr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _chkisr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _chkisr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _chkisr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _chkisr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _chkisr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _chkisr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _chkisr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _chkisr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _chkisr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _chkisr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _chkisr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _chkisr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _chkisr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _chkisr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   92159
                                             64 COMRAM     1     1      0
                                              0 BANK1      2     2      0
                   _DS1621_Read_Temp
                   _DS3231_Read_Time
                            _Do_Beep
                            _Do_Init
                  _Initialize_Screen
                        _Turn_On_Fan
                      _Update_Screen
                            ___awdiv
                             ___wmul
                      _do_update_pwm
                            _get_RPM
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              37    23     14    3846
                                             28 COMRAM    28    14     14
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      31
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             16 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     362
                                             23 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     501
                                             16 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _get_RPM                                              4     2      2    2921
                                             30 COMRAM     4     2      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Update_Screen                                        4     4      0   22093
                                              9 BANK0      4     4      0
                            ___awdiv
                            ___awmod
                           _drawtext
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1603
                                             30 COMRAM     6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    1875
                                             22 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Turn_On_Fan                                          0     0      0    8034
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (1) _Initialize_Screen                                    0     0      0   34162
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                         _drawCircle
                           _drawtext
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4    1539
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _fillScreen                                           2     0      2    2192
                                             35 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (3) _fillRectangle                                       12     7      5    2096
                                             23 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _drawtext                                            17     9      8   17011
                                             56 COMRAM     8     0      8
                                              0 BANK0      9     9      0
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _strlen                                               6     4      2     195
                                             16 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) _drawChar                                            11     4      7   10904
                                             45 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (4) _fillRect                                            11     6      5    3876
                                             34 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (5) _drawFastVLine                                       11     7      4    3102
                                             23 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _drawCircle                                          20    12      8    6744
                                             27 COMRAM    20    12      8
                          _drawPixel
 ---------------------------------------------------------------------------------
 (4) _drawPixel                                            4     1      3    4207
                                             23 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (6) _setAddrWindow                                        4     1      3    1034
                                             19 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _TFT_GreenTab_Initialize                              0     0      0    4624
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd3                                                0     0      0    2182
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd2red                                             0     0      0     130
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd1                                                0     0      0    2182
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (7) _write_data                                           1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (7) _write_command                                        1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (6) _spiwrite                                             2     2      0      34
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _LCD_Reset                                            0     0      0    2052
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             6     4      2    2052
                                             22 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1012
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _Do_Init                                              0     0      0    1121
                        _DS1621_Init
                           _I2C_Init
                       _Turn_Off_Fan
                     _init_INTERRUPT
                          _init_UART
 ---------------------------------------------------------------------------------
 (2) _init_UART                                            0     0      0     375
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (3) _OpenUSART                                            3     1      2     375
                                             16 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _init_INTERRUPT                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Turn_Off_Fan                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Init                                             4     0      4      65
                                             16 COMRAM     4     0      4
                         _i2cHighScl
                         _i2cHighSda
 ---------------------------------------------------------------------------------
 (2) _DS1621_Init                                          1     1      0     681
                                             21 COMRAM     1     1      0
                 _I2C_Write_Cmd_Only
           _I2C_Write_Cmd_Write_Data
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Write_Data                             3     1      2     356
                                             18 COMRAM     3     1      2
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Only                                   2     1      1     260
                                             18 COMRAM     2     1      1
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _Do_Beep                                              0     0      0    8034
                    _Activate_Buzzer
                  _Deactivate_Buzzer
                       _Wait_One_Sec
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (1) _do_update_pwm                                        9     9      0    8034
                                             58 COMRAM     3     3      0
                                              0 BANK0      6     6      0
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (2) ___lbtoft                                             4     1      3    2039
                                             24 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     436
                                             16 COMRAM    15    11      4
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    2716
                                             28 COMRAM    15     9      6
                           ___ftpack
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    2648
                                             43 COMRAM    15     9      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2008
                                             16 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) _Wait_One_Sec                                         0     0      0       0
                   _Wait_Half_Second
 ---------------------------------------------------------------------------------
 (3) _Wait_Half_Second                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Deactivate_Buzzer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Activate_Buzzer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DS3231_Read_Time                                     3     3      0     430
                                             19 COMRAM     2     2      0
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DS1621_Read_Temp                                     5     3      2     464
                                             19 COMRAM     5     3      2
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Write                                            2     2      0     133
                                             16 COMRAM     2     2      0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Stop                                             0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Start                                            0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (2) _I2C_Read                                             3     3      0     198
                                             16 COMRAM     3     3      0
                             _i2cAck
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                            _i2cNack
 ---------------------------------------------------------------------------------
 (3) _i2cNack                                              0     0      0       0
                         _i2cHighScl
                          _i2cLowScl
 ---------------------------------------------------------------------------------
 (3) _i2cAck                                               0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (2) _I2C_ReStart                                          0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (5) _i2cLowSda                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2cLowScl                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2cHighSda                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2cHighScl                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _chkisr                                              14    14      0       0
                                              2 COMRAM    14    14      0
                           _INT0_isr
                         _TIMER1_isr
 ---------------------------------------------------------------------------------
 (10) _TIMER1_isr                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _INT0_isr                                            2     2      0       0
                                              0 COMRAM     2     2      0
                   _force_nec_state0
 ---------------------------------------------------------------------------------
 (11) _force_nec_state0                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DS1621_Read_Temp
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Read_Time
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _Do_Beep
     _Activate_Buzzer
     _Deactivate_Buzzer
     _Wait_One_Sec
       _Wait_Half_Second
     _do_update_pwm
       ___ftdiv
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___ftmul
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___fttol
       ___lbtoft
         ___ftpack
   _Do_Init
     _DS1621_Init
       _I2C_Write_Cmd_Only
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Cmd_Write_Data
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _I2C_Init
       _i2cHighScl
       _i2cHighSda
     _Turn_Off_Fan
     _init_INTERRUPT
     _init_UART
       _OpenUSART
   _Initialize_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawCircle
       _drawPixel
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_data
           _spiwrite
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   _Turn_On_Fan
     _do_update_pwm
       ___ftdiv
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___ftmul
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___fttol
       ___lbtoft
         ___ftpack
   _Update_Screen
     ___awdiv
       ___wmul (ARG)
     ___awmod
       ___awdiv (ARG)
         ___wmul (ARG)
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _strcpy
   ___awdiv
     ___wmul (ARG)
   ___wmul
   _do_update_pwm
     ___ftdiv
       ___ftmul (ARG)
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
     ___ftmul
       ___ftpack
       ___lbtoft (ARG)
         ___ftpack
     ___fttol
     ___lbtoft
       ___ftpack
   _get_RPM
     ___awdiv
       ___wmul (ARG)
     ___wmul
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch

 _chkisr (ROOT)
   _INT0_isr
     _force_nec_state0
   _TIMER1_isr

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      2      23       7       13.7%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      D      80       5      100.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     41      6F       1       87.4%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     112      34        0.0%
DATA                 0      0     112       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Sat Nov 06 11:42:05 2021

                      drawCircle@f 002A                        drawCircle@r 0020  
                      drawCircle@x 002C                        drawCircle@y 002E  
               __size_of_I2C_Start 0012                        _SSPSTATbits 000FC7  
               __size_of_I2C_Write 003E                       drawCircle@x0 001C  
                     drawCircle@y0 001E                       ___awdiv@sign 001C  
             __size_of_Turn_On_Fan 0010                ___wmul@multiplicand 0013  
                  ??_Update_Screen 00F4                                l316 1DF0  
                              l319 1EBA                                l159 21E4  
                              l280 1F24                                l600 1642  
                              l601 1664                                l608 0A62  
                              l544 190C                                l560 0FB2  
                              l538 1FB8                                l562 0E8C  
                              l802 04DC                                l484 1C72  
                              l396 1E2E                                l494 2128  
                              l569 0F08                                l597 1666  
                              l758 20FC                                l870 1AE0  
                              l598 15D2                                l863 1AB8  
                              l839 0734                                l872 1AFA  
                              _FAN 0050                                l867 1AD2  
                              l875 200A                                l868 1AD4  
                              l869 1ADE                  ?_Wait_Half_Second 0001  
                              _PR2 000FCB                                _day 005A  
                _Deactivate_Buzzer 2238               __size_of_I2C_ReStart 0016  
                              _dow 005B                                _nbr 00FE  
                              _rpm 004A              __size_of_Turn_Off_Fan 000A  
                              _rps 004C                                _txt 004E  
                     ___awmod@sign 0024                                wreg 000FE8  
               ??_Wait_Half_Second 0011                 ?_Deactivate_Buzzer 0001  
                       _Fan_SW_Txt 00DF                    ??_fillRectangle 001D  
                     __CFG_LVP$OFF 000000            _TFT_GreenTab_Initialize 1FBA  
                     ___ftdiv@cntr 0035                       ___ftdiv@sign 003A  
                     __CFG_WDT$OFF 000000                     drawFastVLine@h 0019  
                             l1081 198E                               l1306 2052  
                             l1332 2030                               l1068 1884  
                             l1270 12D0                               l1183 172C  
                             l1255 158A                               l1408 1D0A  
                             l1194 1704                               l1258 1556  
                             l1291 14A8                     drawFastVLine@x 0022  
                             l1437 1E6C                     drawFastVLine@y 0018  
                             l1398 1C1E                               l6003 0B38  
                             l6101 1924                               l5311 1ECA  
                             l5303 1EB2                               l6111 194A  
                             l5321 1EDC                               l6025 1F30  
                             l6113 1952                               l6121 1974  
                             l6105 1932                               l5411 1AA8  
                             l6027 1F3A                               l5309 1EC4  
                             l6125 1984                               l6117 1968  
                             l6109 1940                               l6045 204A  
                             l5415 1AB0                               l5407 1A9E  
                             l5351 1F9A                               l6071 1838  
                             l6063 1818                               l6135 1BE2  
                             l5273 18CE                               l6081 185E  
                             l6073 1840                               l6057 1806  
                             l6137 1BEC                               l6321 0424  
                             l6313 03F6                               l5427 1ACA  
                             l5419 1ABC                               l5283 18F4  
                             l5363 1D86                               l6147 1C12  
                             l6139 1BF4                               l6163 1CFE  
                             l6155 1CD6                               l6411 0634  
                             l6403 060C                               l6315 0404  
                             l5381 16CC                               l5373 1688  
                             l5285 1902                               l5269 1896  
                             l5613 0F7E                               l5605 0F2A  
                             l5621 0FAE                               l6069 182E  
                             l6085 186A                               l6157 1CE0  
                             l6421 0668                               l6405 0614  
                             l6333 04A6                               l6325 0442  
                             l6309 03E6     I2C_Write_Cmd_Write_Data@Device 0015  
                             l5391 170C                               l5383 16EC  
                             l5375 1694                               l5359 1D6A  
                             l5615 0FA6                               l5607 0F52  
                             l6159 1CE8                               l6423 06AC  
                             l6431 0704                               l6415 064C  
                             l6319 040E                               l5385 16F8  
                             l5377 16B4                               l5369 1678  
                             l5713 1530                               l6089 187A  
                             l6433 070C                               l6409 062C  
                             l6353 0524                               l6337 04AE  
                             l5723 1564                               l5811 1474  
                             l5803 144C                               l5627 1E3A  
                             l6451 0098                               l6419 0660  
                             l6363 0558                               l6355 0528  
                             l6435 0718                               l5397 171E  
                             l5733 11F8                               l5805 1452  
                             l5813 147E                               l5629 1E40  
                             l5661 1646                               l5645 160A  
                             l6461 00EE                               l6445 0058  
                             l6429 06F2                               l6373 056E  
                             l6349 050A                               l5911 1DEC  
                             l5735 1212                               l5583 0E88  
                             l5575 0E6E                               l5671 1660  
                             l5639 159C                               l6391 05C6  
                             l6367 055E                               l6359 0534  
                             l6383 0598                               l6615 0C2E  
                             l5905 1DDA                               l5761 127C  
                             l5753 1254                               l5817 1496  
                             l5809 1466                               l5593 0EC8  
                             l5585 0E90                               l5665 1650  
                             l5657 1638                               l6377 0592  
                             l6369 0562                               l6385 05AA  
                             l6633 0C7A                               l5771 12AA  
                             l5763 1282                               l5739 1220  
                             l5595 0EFC                               l5579 0E7A  
                             l6467 012E                               l6395 05EA  
                             l6643 0CAC                               l5909 1DE6  
                             l5693 14F0                               l5757 1266  
                             l5781 13E2                               l5597 0F00  
                             l5589 0E98                               l5941 103C  
                             l6397 05F4                               l6629 0C60  
                             l5687 14C8                               l5767 1294  
                             l5871 17C6                               l6495 01C2  
                             l6647 0CC0                               l6639 0CA2  
                             l5689 14E2                               l5953 10AC  
                             l5945 105A                               l5929 0FE0  
                             l6497 01D8                               l5891 1DBC  
                             l5955 10B4                               l6595 0B66  
                             l5887 1DB4                               l5799 143C  
                             l5975 0A48                               l5897 1DCA  
                             l5899 1DD2                               STR_1 FF2C  
                             STR_2 FF76                               STR_3 FF8B  
                             STR_4 FFB0                               STR_5 FF60  
                             STR_6 FFC0                               STR_7 FF4A  
                             STR_8 FFCF                               STR_9 FFF8  
                             u4301 14BA                               u4230 15CA  
                             u4160 0F60                               u4240 1600  
                             u4321 14D8                               u4411 13D4  
                             u4430 1400                               u4351 11EA  
                             u4371 1208                               u4435 13F8  
                             u5407 21F2                               u4560 1016  
                             u3790 18C4                               _RBPU 007F8F  
                             _TRMT 007D61                       _DS1621_tempC 0042  
                     _DS1621_tempF 0044                ??_Deactivate_Buzzer 0011  
                             _date 00C4                               _main 0B4E  
                             _font FD3F                       ___ftpack@arg 0011  
                             _hour 005E                       ___ftpack@exp 0014  
                 __end_of_I2C_Init 221A                   __end_of_I2C_Read 1DF2  
                             _time 00CD                               _year 006C  
                             fsr0h 000FEA                               fsr1h 000FE2  
                             fsr0l 000FE9                               fsr2h 000FDA  
                             fsr1l 000FE1                               indf2 000FDF  
                             fsr2l 000FD9                               _wrap 006F  
                 __end_of_I2C_Stop 218C                               pclat 000FFA  
               __size_of_LCD_Reset 0012                               prodh 000FF4  
                             prodl 000FF3                    __end_of_Do_Beep 2156  
                             start 0018        __size_of_I2C_Write_Cmd_Only 001A  
                  __end_of_Do_Init 1D60                    ??_drawFastVLine 001C  
                     ___ftmul@cntr 002A                    __end_of_i2cNack 222E  
                     ___param_bank 000010                       ___ftmul@sign 002B  
                     ___fttol@exp1 001F                       _Turn_Off_Fan 2206  
                     ___fttol@lval 001B                        ?_TIMER1_isr 0001  
                 __end_of_INT0_isr 0E5E          __end_of_Deactivate_Buzzer 2240  
                  ??_do_update_pwm 003B                    drawFastVLine@hi 0020  
                  drawFastVLine@lo 0021                              ?_main 0001  
                  __end_of___awdiv 1886                    drawCircle@ddF_x 0026  
                            STR_10 FFF2                    drawCircle@ddF_y 0028  
                            STR_11 FFE2                              STR_12 FFE7  
                            STR_13 FFDC                              STR_14 FFFB  
                            STR_15 FFF4                              STR_16 FFEC  
                            STR_17 FFF0                              STR_18 FF9F  
                  __end_of___awmod 1990                    __end_of___ftdiv 158C  
                  __end_of___ftmul 12D2                              _T0CON 000FD5  
                  ___awdiv@divisor 0019                              _T1CON 000FCD  
                  __end_of___fttol 14AA                              _T2CON 000FCA  
                            _T3CON 000FB1                    __end_of___lwdiv 1C28  
                  __end_of___lwmod 1D14                              i2l231 0E5C  
                            i2l243 0E16                              i2l219 1A52  
                  ___awdiv@counter 001B                    drawCircle@color 0022  
                            _RCSTA 000FAB                              _TMR0H 000FD7  
                            _TMR1H 000FCF                              _TMR0L 000FD6  
                            _TMR3H 000FB3                              _TMR1L 000FCE  
                            _TMR3L 000FB2                              _SPBRG 000FAF  
                            _TRISA 000F92                              _TRISB 000F93  
                            _TRISC 000F94                              _TRISD 000F95  
                            _TXREG 000FAD                              _TXSTA 000FAC  
                  __end_of_get_RPM 1E30                              _Rcmd1 10CA  
                            _Rcmd3 12D2                         _i2cHighSda 2248  
                       _i2cHighScl 21EE                    __end_of_dpowers FF24  
                            _font2 FE3E                              _found 005D  
                  __end_of_isdigit 2054                              _tempC 00E3  
                            _tempF 00E7                              _month 0060  
                    ___ftpack@sign 0015                              _putch 21E0  
                            main@j 0121                  __end_of_I2C_Start 219E  
                __end_of_I2C_Write 1EEA                     __CFG_BOREN$OFF 000000  
                            tablat 000FF5                              status 000FD8  
                ?_DS1621_Read_Temp 0014                    write_data@data_ 0013  
               ??_DS1621_Read_Temp 0016                    __initialization 1990  
                     __end_of_main 0CDC                       __end_of_font FE3E  
                 __end_of_Rcmd2red 1EAC                             ??_main 0041  
                    ___fttol@sign1 001A                      __activetblptr 000002  
                ?_DS3231_Read_Time 0001                  __end_of_LCD_Reset 2168  
        ??_TFT_GreenTab_Initialize 001D                 ??_DS3231_Read_Time 0014  
                           ?_Rcmd1 0001                             ?_Rcmd3 0001  
          __size_of_init_INTERRUPT 0032                          I2C_Init@c 0011  
                        I2C_Read@n 0012                             _ADCON1 000FC1  
              DS1621_Read_Temp@Cmd 0016                             _CCPR1L 000FBE  
                           _CCPR2L 000FBB                   ___awdiv@dividend 0017  
               __size_of_i2cLowSda 000A                 __size_of_i2cLowScl 0008  
                           ?_putch 0001                   __end_of___ftpack 172E  
                 __end_of___lbtoft 2032                          ??_Do_Beep 003E  
                           _DC_Txt 00DB                          ??_Do_Init 0017  
                           i2l4723 0D50                             i2l4707 0D04  
                           i2l4741 0D82                             i2l4717 0D32  
                           i2l4901 1A48                             i2l4735 0D78  
                           i2l4753 0DA8                             i2l4729 0D5A  
                           i2l4747 0D9E                             i2l4765 0E30  
                           i2l4749 0DA4                             i2l4773 0E3A  
                           i2l4767 0E36                             _OSCCON 000FD3  
              __size_of_TIMER1_isr 000C                             _SPBRGH 000FB0  
                           _SSPBUF 000FC9                          ??_i2cNack 0011  
                     _Alarm_SW_Txt 00BE                   _force_nec_state0 2250  
                 __end_of_delay_ms 1C7A                             _i2cAck 219E  
                 __end_of_fillRect 1DAA                   __end_of_drawChar 0FB4  
               __size_of_OpenUSART 0070           __size_of_Activate_Buzzer 0012  
                           ___wmul 1FE4                          ??___awdiv 001B  
                 __end_of_drawtext 10CA                          ??___awmod 0023  
                        ??___ftdiv 0032                          ??___ftmul 0023  
                        ??___fttol 0015                             _chkisr 0008  
                        ??___lwdiv 0015                             _array1 0080  
                        ??___lwmod 001C                             _buffer 0100  
                           _nec_ok 0048                             clear_0 1996  
                           clear_1 19A2                   ___awdiv@quotient 001D  
                           _minute 005F                             _second 0062  
                  ___awmod@divisor 0021                          ??_get_RPM 0021  
       __size_of_Deactivate_Buzzer 0008                    ___awmod@counter 0023  
                           _printf 03DC                       drawtext@size 0040  
                           _strcpy 1F26                             _strlen 1E30  
            ___ftmul@f3_as_product 0027                       __pdataCOMRAM 006D  
                        ??_isdigit 0011                          ?_I2C_Init 0011  
                        ?_I2C_Read 0001                          ?_I2C_Stop 0001  
                     __mediumconst FD3E                             tblptrh 000FF7  
                           tblptrl 000FF6                             tblptru 000FF8  
 __end_of_I2C_Write_Cmd_Write_Data 2096                        ?_i2cHighSda 0001  
                      ?_i2cHighScl 0001                             putch@c 0011  
                 __end_of_spiwrite 212E                         __accesstop 0080  
          __end_of__initialization 1A06                          ?_INT0_isr 0001  
               _setup_alarm_minute 0064                 _setup_alarm_second 0065  
                    ___rparam_used 000001                         ___ftdiv@f1 002C  
                       ___ftdiv@f2 002F                         ___ftdiv@f3 0036  
                       ___lbtoft@c 001C                         ___ftmul@f1 001D  
                       ___ftmul@f2 0020                         ___fttol@f1 0011  
                    __end_of_Rcmd1 11DA                      __end_of_Rcmd3 13C4  
                   __pcstackCOMRAM 0001                       __pidataBANK0 1AFC  
                     __pidataBANK1 2054                      __end_of_font2 FF1A  
                __end_of_i2cLowSda 2238                  __end_of_i2cLowScl 2248  
                    __end_of_putch 21EE                     drawPixel@color 0019  
           __size_of_write_command 0010                         ??_I2C_Init 0015  
                       ??_I2C_Read 0011                       _alarm_minute 0056  
                     _alarm_second 0057                         ??_I2C_Stop 0011  
                          ??_Rcmd1 001D                            ??_Rcmd3 001D  
               __size_of_drawPixel 0030                  __end_of_OpenUSART 1AFC  
                          ??_putch 0011                         __pbssBANK0 00F8  
                 _setup_alarm_hour 0063                   _setup_alarm_time 009E  
                    ??_DS1621_Init 0016                          ?_Rcmd2red 0001  
               __size_of_init_UART 0014          __size_of_Wait_Half_Second 001A  
                  spiwrite@spidata 0012                         _alarm_date 0054  
                       ??_INT0_isr 0001                         _alarm_hour 0055  
                       _alarm_time 0095                      ?_Wait_One_Sec 0001  
                          ?_i2cAck 0001                 __CFG_CCP2MX$PORTBE 000000  
                    ??_Turn_On_Fan 003E                     I2C_Read@inByte 0013  
                          ?___wmul 0011                __size_of_i2cHighSda 0008  
              __size_of_i2cHighScl 000C                            ?_chkisr 0001  
           __size_of_setAddrWindow 004E                            _CCP1CON 000FBD  
 I2C_Write_Cmd_Write_Data@Data_Out 0014                            _CCP2CON 000FBA  
                     ??_TIMER1_isr 0001                      ??_I2C_ReStart 0011  
                          _ALARMEN 00FC                          ?___ftpack 0011  
                        ?___lbtoft 0019                         I2C_Write@n 0012  
                          ?_printf 001D                            ?_strcpy 0011  
                          ?_strlen 0011                  ??_Activate_Buzzer 0011  
                       _fillScreen 20B4              __end_of_Update_Screen 03DC  
                       _drawCircle 09A0                     _init_INTERRUPT 1F58  
                        ?_delay_ms 0017                          ?_fillRect 0023  
                        ?_drawChar 002E                            _SSPCON1 000FC6  
                          _SSPSTAT 000FC7                            _RPM_Txt 00D6  
            __end_of_fillRectangle 1668                            _Do_Beep 2142  
                        ?_drawtext 0039                            _Do_Init 1D14  
         _I2C_Write_Cmd_Write_Data 2076         __end_of_I2C_Write_Cmd_Only 20EA  
                       ??_Rcmd2red 0014             DS1621_Read_Temp@Device 0018  
                   ??_Wait_One_Sec 0011                            _i2cNack 2224  
               __end_of_TIMER1_isr 2206                      _write_command 21D0  
                        _I2C_Start 218C                          _I2C_Write 1EAC  
                  __size_of_i2cAck 0012                            __Hparam 0000  
                          __Lparam 0000                __end_of_DS1621_Init 20B4  
                __end_of_drawPixel 1FBA              __end_of_drawFastVLine 190E  
                          ___awdiv 17F0                            ___awmod 190E  
                          ___ftdiv 14AA                    __size_of___wmul 0028  
                          ___ftmul 11DA                            ___fttol 13C4  
                          ___lwdiv 1BCC                            ___lwmod 1CC8  
                  __size_of_chkisr 1A84                          ?_spiwrite 0001  
                          __pcinit 1990                         ??___ftpack 0016  
                       ??___lbtoft 001C                            __ramtop 1000  
                          _get_RPM 1DF2                            __ptext0 0B4E  
                          __ptext1 03DC                            __ptext2 21E0  
                          __ptext3 2032                            __ptext4 1CC8  
                          __ptext5 1BCC          __size_of_DS1621_Read_Temp 003C  
                          __ptext6 1DF2                            __ptext7 001C  
                          __ptext8 190E                            __ptext9 17F0  
                  __size_of_printf 035A                  __end_of_init_UART 2142  
              __end_of_Turn_On_Fan 21C0             __end_of_init_INTERRUPT 1F8A  
                        _T0CONbits 000FD5                    __size_of_strcpy 0032  
                  __size_of_strlen 003E                  __end_of_hexpowers FF2C  
         __end_of_force_nec_state0 2258                          _T1CONbits 000FCD  
                          _dpowers FF1A              __end_of_do_update_pwm 17F0  
                          _isdigit 2032                          _T3CONbits 000FB1  
                 ___awmod@dividend 001F                         _duty_cycle 005C  
                       ??_delay_ms 0019                __end_of_I2C_ReStart 211A  
                    drawtext@_text 003A                      drawtext@color 003C  
                       ??_fillRect 0028                         ??_drawChar 0035  
                        _LCD_Reset 2156                      _setAddrWindow 1C7A  
                   __pintcode_body 1A10                         delay_ms@ms 0017  
             end_of_initialization 1A06                         ??_drawtext 00EB  
                   ?_write_command 0001                      __Lmediumconst FD3E  
        __size_of_DS3231_Read_Time 0064                            int_func 1A10  
          DS3231_Read_Time@Address 0014                         ?_I2C_Start 0001  
                       ?_I2C_Write 0001                         get_RPM@RPS 0021  
                       _tempSecond 006E                          _RCSTAbits 000FAB  
                          printf@c 0038                            printf@f 001D  
                          postdec1 000FE5                            postdec2 000FDD  
                          postinc0 000FEE                            postinc2 000FDE  
                       ??_spiwrite 0011                            strlen@s 0011  
      I2C_Write_Cmd_Write_Data@Cmd 0013                          _PORTAbits 000F80  
                 drawtext@cursor_x 00F3                   drawtext@cursor_y 00F2  
                        _PORTBbits 000F81                          _PORTCbits 000F82  
                        _PORTDbits 000F83                          _PORTEbits 000F84  
                 I2C_Write@outByte 0011                    ?_init_INTERRUPT 0001  
                       _setup_date 00A7                        ?_fillScreen 0024  
                       _setup_hour 0067                         _setup_time 00B0  
                       _setup_year 006B                        ?_drawCircle 001C  
                       drawChar@bg 0032                          _TRISCbits 000F94  
                     ??_i2cHighSda 0011                       ??_i2cHighScl 0011  
                __size_of_I2C_Init 000A                  __size_of_I2C_Read 0048  
                __size_of_I2C_Stop 0012                     ?_setAddrWindow 0014  
                       ?_LCD_Reset 0001                   drawtext@textsize 00EE  
                       drawPixel@x 001B                         drawPixel@y 0018  
                 _Wait_Half_Second 20EA                        _DS1621_Init 2096  
                      ___ftdiv@exp 0039                        printf@width 0036  
                        _TXSTAbits 000FAC                  __size_of_INT0_isr 0182  
                   __end_of_i2cAck 21B0                        ___ftmul@exp 0026  
         DS1621_Read_Temp@Data_Ret 0017                        _Turn_On_Fan 21B0  
               __end_of_i2cHighSda 2250                 __end_of_i2cHighScl 21FA  
                   __end_of___wmul 200C                      delay_ms@count 001B  
                       _write_data 21C0                      __pidataCOMRAM 2258  
                   __end_of_chkisr 1A8C           ?_TFT_GreenTab_Initialize 0001  
                      _I2C_ReStart 2104                         drawtext@bg 003E  
                        _Nec_code1 0051                          _i2cLowSda 222E  
                        _i2cLowScl 2240               __end_of_Wait_One_Sec 2224  
                   __end_of_printf 0736                     __end_of_strcpy 1F58  
                   __end_of_strlen 1E6E                          _Nec_state 0052  
              start_initialization 1990             Update_Screen@neg_tempF 00F6  
                  ??_write_command 0013                          _OpenUSART 1A8C  
                 __CFG_OSC$INTIO67 000000                        ??_I2C_Start 0011  
                      ??_I2C_Write 0011                           ??_i2cAck 0011  
                __size_of_Rcmd2red 003E                __size_of_fillScreen 001C  
              __size_of_drawCircle 01AE                    _Activate_Buzzer 2168  
                         ??___wmul 0015                      ?_Turn_Off_Fan 0001  
                         ??_chkisr 0003                        __pdataBANK0 0080  
                      __pdataBANK1 0100                    setAddrWindow@x0 0017  
                  setAddrWindow@x1 0015                    setAddrWindow@y0 0014  
                  setAddrWindow@y1 0016                           ??_printf 002B  
                 _DS1621_Read_Temp 1EEA                           ??_strcpy 0015  
                         ??_strlen 0013                         ?_i2cLowSda 0001  
                       ?_i2cLowScl 0001                  __size_of___ftpack 00C6  
                __size_of___lbtoft 0026                        __pbssCOMRAM 0042  
       ??_I2C_Write_Cmd_Write_Data 0015                    ??_setAddrWindow 0017  
                    __pcstackBANK0 00EB                      __pcstackBANK1 0121  
                      ??_LCD_Reset 001D                       _isdigit$2448 0012  
                __size_of_delay_ms 0052                           ?_Do_Beep 0001  
                         ?_Do_Init 0001                  __size_of_fillRect 004A  
                __size_of_drawChar 0156                         ?_OpenUSART 0011  
                 _DS3231_Read_Time 1B68                           ?_i2cNack 0001  
                __size_of_drawtext 0116                   ___lwdiv@dividend 0011  
                      I2C_Read@ack 0011                          _bit_count 0058  
                        __pintcode 0008    __end_of_TFT_GreenTab_Initialize 1FE4  
                   ??_Turn_Off_Fan 0011                      __pmediumconst FD3E  
                         ?___awdiv 0017                           ?___awmod 001F  
                         ?___ftdiv 002C                           ?___ftmul 001D  
                         ?___fttol 0011                          __tft_type 0053  
                         ?___lwdiv 0011                 _I2C_Write_Cmd_Only 20D0  
                         ?___lwmod 0018                 drawFastVLine@color 001A  
                      ?_write_data 0001                          _drawPixel 1F8A  
                         ?_get_RPM 001F                  __size_of_spiwrite 0014  
              ?_I2C_Write_Cmd_Only 0013                  ?_force_nec_state0 0001  
                         ?_isdigit 0001                           _I2C_Init 2210  
                         _I2C_Read 1DAA                           _I2C_Stop 217A  
                _Initialize_Screen 0736                     __size_of_Rcmd1 0110  
                   __size_of_Rcmd3 00F2                          _init_UART 212E  
               ??_force_nec_state0 0001           I2C_Write_Cmd_Only@Device 0014  
                        _hexpowers FF24                 ?_Initialize_Screen 0001  
                 ___lwdiv@quotient 0016                     __size_of_putch 000E  
          __end_of_Activate_Buzzer 217A                     ___wmul@product 0015  
              ??_Initialize_Screen 0041                           _INT0_isr 0CDC  
             ??_I2C_Write_Cmd_Only 0014                           _PIE1bits 000F9D  
           __size_of_Update_Screen 03C0             DS3231_Read_Time@Device 0015  
                         _PIR1bits 000F9E                           _PIR2bits 000FA1  
                 ??_init_INTERRUPT 0011              __size_of_Wait_One_Sec 000A  
                        _setup_day 0066                  DS1621_Init@Device 0016  
                        fillRect@h 0025                          fillRect@i 002C  
                        fillRect@w 0024                          fillRect@x 002B  
                        fillRect@y 0023                          drawChar@c 002F  
                        drawChar@i 0038                          drawChar@j 0037  
                        drawChar@x 0036                          drawChar@y 002E  
                       ?_drawPixel 0018             __size_of_fillRectangle 00DC  
         __end_of_Wait_Half_Second 2104                  ___wmul@multiplier 0011  
        __end_of_Initialize_Screen 09A0                        ??_i2cLowSda 0011  
                      ??_i2cLowScl 0011                       ??_fillScreen 0026  
                     ??_drawCircle 0024                         printf@flag 0035  
                       printf@prec 0032                         ?_init_UART 0001  
                      _INTCON2bits 000FF1                          copy_data0 19BC  
                        copy_data1 19DC                          drawtext@i 00F0  
           __size_of_drawFastVLine 0088                          drawtext@x 00ED  
                        drawtext@y 0039                           _Nec_code 00F8  
                write_command@cmd_ 0013                        ??_OpenUSART 0013  
                 __size_of_Do_Beep 0014                       ?_DS1621_Init 0001  
                         _Rcmd2red 1E6E                   __size_of_Do_Init 004C  
              __size_of_write_data 0010                    OpenUSART@config 0013  
                     _Time_Elapsed 0046                   __size_of_i2cNack 000A  
                    _RTC_ALARM_Txt 00C2                       _Wait_One_Sec 221A  
                         __Hrparam 0000             __size_of_do_update_pwm 00C2  
               __end_of_fillScreen 20D0                           __Lrparam 0000  
               __end_of_drawCircle 0B4E                       ?_Turn_On_Fan 0001  
                 __size_of___awdiv 0096                   __size_of___awmod 0082  
                 __size_of___ftdiv 00E2                   __size_of___ftmul 00F8  
                 __size_of___fttol 00E6                   __size_of___lwdiv 005C  
                 __size_of___lwmod 004C                           ___ftpack 1668  
                         ___lbtoft 200C                       ?_I2C_ReStart 0001  
                 __size_of_get_RPM 003E                      _Update_Screen 001C  
                   _setup_fan_temp 006D                     _setup_fan_text 00B9  
                 __size_of_isdigit 0022                           _delay_ms 1C28  
                  ___lwdiv@divisor 0013                    ___lwdiv@counter 0015  
                         __ptext10 21B0                           __ptext11 0736  
                         __ptext20 09A0                           __ptext12 1F26  
                         __ptext21 1F8A                           __ptext13 20B4  
                         __ptext30 2156                           __ptext22 1C7A  
                         __ptext14 158C                           __ptext31 1C28  
                         __ptext23 1FBA                           __ptext15 0FB4  
                         __ptext40 2076                           __ptext32 1FE4  
                         __ptext24 12D2                           __ptext16 1E30  
                         __ptext41 20D0                           __ptext33 1D14  
                         __ptext25 1E6E                           __ptext17 0E5E  
                         __ptext50 20EA                           __ptext42 2142  
                         __ptext34 212E                           __ptext26 10CA  
                         __ptext18 1D60                           __ptext51 2238  
                         __ptext43 172E                           __ptext35 1A8C  
                         __ptext27 21C0                           __ptext19 1886  
                         __ptext60 219E                           __ptext52 2168  
                         __ptext44 200C                           __ptext36 1F58  
                         __ptext28 21D0                           __ptext61 2104  
                         __ptext53 1B68                           __ptext45 13C4  
                         __ptext37 2206                           __ptext29 211A  
                         __ptext62 222E                           __ptext54 1EEA  
                         __ptext46 11DA                           __ptext38 2210  
                         __ptext63 2240                           __ptext55 1EAC  
                         __ptext47 14AA                           __ptext39 2096  
                         __ptext64 2248                           __ptext56 217A  
                         __ptext48 1668                           __ptext65 21EE  
                         __ptext57 218C                           __ptext49 221A  
                         __ptext58 1DAA                           __ptext67 21FA  
                         __ptext59 2224                           __ptext68 0CDC  
                         __ptext69 2250                           _fillRect 1D60  
                         _drawChar 0E5E               __end_of_Turn_Off_Fan 2210  
 __size_of_TFT_GreenTab_Initialize 002A                           _colstart 0059  
                         _drawtext 0FB4                         strcpy@from 0013  
                    _fillRectangle 158C           __end_of_DS1621_Read_Temp 1F26  
                 ?_Activate_Buzzer 0001                      __size_of_main 018E  
                  fillRectangle@hi 0021                    fillRectangle@lo 0022  
                    _drawFastVLine 1886                          printf@idx 002F  
                         _spiwrite 211A                          printf@val 0033  
                      ??_drawPixel 001B                           _rowstart 0061  
         __end_of_DS3231_Read_Time 1BCC         __size_of_Initialize_Screen 026A  
                   ?_Update_Screen 0001                         _INTCONbits 000FF2  
                    _do_update_pwm 172E                     OpenUSART@spbrg 0011  
                      ??_init_UART 0014                           isdigit@c 0013  
                        spiwrite@x 0011                           intlevel2 0000  
                   ?_fillRectangle 0018                   ___lwmod@dividend 0018  
            __end_of_write_command 21E0                    fillScreen@color 0024  
          do_update_pwm@duty_cycle 00EE                     fillRectangle@h 001A  
                   fillRectangle@w 0019                     fillRectangle@x 0023  
                   fillRectangle@y 0018                     ?_drawFastVLine 0018  
                         printf@ap 0030                       ??_write_data 0013  
                       _TIMER1_isr 21FA                      fillRect@color 0026  
                   ?_do_update_pwm 0001                    ___lwmod@divisor 001A  
                         strcpy@cp 0015                           strlen@cp 0015  
                         strcpy@to 0011              I2C_Write_Cmd_Only@Cmd 0013  
                  ___lwmod@counter 001C                       _setup_minute 0068  
                     _setup_second 006A              __end_of_setAddrWindow 1CC8  
               fillRectangle@color 001B                  do_update_pwm@dc_I 00EF  
                do_update_pwm@dc_f 00EB                      drawChar@color 0030  
                      _setup_month 0069                 __end_of_write_data 21D0  
        __size_of_force_nec_state0 0008                       drawChar@line 0035  
                     drawChar@size 0034  __size_of_I2C_Write_Cmd_Write_Data 0020  
             __size_of_DS1621_Init 001E          ?_I2C_Write_Cmd_Write_Data 0013  
