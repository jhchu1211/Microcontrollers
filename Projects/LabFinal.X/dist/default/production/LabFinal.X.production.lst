

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Fri Dec 03 16:35:58 2021

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	text44,global,reloc=2,class=CODE,delta=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	text53,global,reloc=2,class=CODE,delta=1
    72                           	psect	text54,global,reloc=2,class=CODE,delta=1
    73                           	psect	text55,global,reloc=2,class=CODE,delta=1
    74                           	psect	text56,global,reloc=2,class=CODE,delta=1
    75                           	psect	text57,global,reloc=2,class=CODE,delta=1
    76                           	psect	text58,global,reloc=2,class=CODE,delta=1
    77                           	psect	text59,global,reloc=2,class=CODE,delta=1
    78                           	psect	text60,global,reloc=2,class=CODE,delta=1
    79                           	psect	text61,global,reloc=2,class=CODE,delta=1
    80                           	psect	text62,global,reloc=2,class=CODE,delta=1
    81                           	psect	text63,global,reloc=2,class=CODE,delta=1
    82                           	psect	text64,global,reloc=2,class=CODE,delta=1
    83                           	psect	text65,global,reloc=2,class=CODE,delta=1
    84                           	psect	text66,global,reloc=2,class=CODE,delta=1
    85                           	psect	text67,global,reloc=2,class=CODE,delta=1
    86                           	psect	text68,global,reloc=2,class=CODE,delta=1
    87                           	psect	text69,global,reloc=2,class=CODE,delta=1
    88                           	psect	text70,global,reloc=2,class=CODE,delta=1
    89                           	psect	text71,global,reloc=2,class=CODE,delta=1
    90                           	psect	text72,global,reloc=2,class=CODE,delta=1
    91                           	psect	text73,global,reloc=2,class=CODE,delta=1
    92                           	psect	text74,global,reloc=2,class=CODE,delta=1
    93                           	psect	text75,global,reloc=2,class=CODE,delta=1
    94                           	psect	text76,global,reloc=2,class=CODE,delta=1
    95                           	psect	text77,global,reloc=2,class=CODE,delta=1
    96                           	psect	text78,global,reloc=2,class=CODE,delta=1
    97                           	psect	text79,global,reloc=2,class=CODE,delta=1
    98                           	psect	text80,global,reloc=2,class=CODE,delta=1
    99                           	psect	text81,global,reloc=2,class=CODE,delta=1
   100                           	psect	text82,global,reloc=2,class=CODE,delta=1
   101                           	psect	text83,global,reloc=2,class=CODE,delta=1
   102                           	psect	text84,global,reloc=2,class=CODE,delta=1
   103                           	psect	text85,global,reloc=2,class=CODE,delta=1
   104                           	psect	text86,global,reloc=2,class=CODE,delta=1
   105                           	psect	text87,global,reloc=2,class=CODE,delta=1
   106                           	psect	text88,global,reloc=2,class=CODE,delta=1
   107                           	psect	text89,global,reloc=2,class=CODE,delta=1
   108                           	psect	text90,global,reloc=2,class=CODE,delta=1
   109                           	psect	text91,global,reloc=2,class=CODE,delta=1
   110                           	psect	text92,global,reloc=2,class=CODE,delta=1
   111                           	psect	text93,global,reloc=2,class=CODE,delta=1
   112                           	psect	text94,global,reloc=2,class=CODE,delta=1
   113                           	psect	text95,global,reloc=2,class=CODE,delta=1
   114                           	psect	text96,global,reloc=2,class=CODE,delta=1
   115                           	psect	text97,global,reloc=2,class=CODE,delta=1
   116                           	psect	text98,global,reloc=2,class=CODE,delta=1
   117                           	psect	text99,global,reloc=2,class=CODE,delta=1
   118                           	psect	text100,global,reloc=2,class=CODE,delta=1
   119                           	psect	text101,global,reloc=2,class=CODE,delta=1
   120                           	psect	text102,global,reloc=2,class=CODE,delta=1
   121                           	psect	text103,global,reloc=2,class=CODE,delta=1
   122                           	psect	text104,global,reloc=2,class=CODE,delta=1
   123                           	psect	text105,global,reloc=2,class=CODE,delta=1
   124                           	psect	text106,global,reloc=2,class=CODE,delta=1
   125                           	psect	text107,global,reloc=2,class=CODE,delta=1
   126                           	psect	text108,global,reloc=2,class=CODE,delta=1
   127                           	psect	text109,global,reloc=2,class=CODE,delta=1
   128                           	psect	text110,global,reloc=2,class=CODE,delta=1
   129                           	psect	text111,global,reloc=2,class=CODE,delta=1
   130                           	psect	text112,global,reloc=2,class=CODE,delta=1
   131                           	psect	text113,global,reloc=2,class=CODE,delta=1
   132                           	psect	text114,global,reloc=2,class=CODE,delta=1
   133                           	psect	text115,global,reloc=2,class=CODE,delta=1
   134                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   135                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
   136                           	psect	text117,global,reloc=2,class=CODE,delta=1
   137                           	psect	text118,global,reloc=2,class=CODE,delta=1
   138                           	psect	text119,global,reloc=2,class=CODE,delta=1
   139                           	psect	text120,global,reloc=2,class=CODE,delta=1
   140                           	psect	text121,global,reloc=2,class=CODE,delta=1
   141                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   142                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   143  0000                     
   144                           	psect	idataCOMRAM
   145  003DA2                     __pidataCOMRAM:
   146                           	opt stack 0
   147                           
   148                           ;initializer for _heater_set_temp
   149  003DA2  4B                 	db	75
   150                           
   151                           	psect	idataBANK0
   152  0032C2                     __pidataBANK0:
   153                           	opt stack 0
   154                           
   155                           ;initializer for _tempSecond
   156  0032C2  FF                 	db	255
   157                           
   158                           ;initializer for _wrap
   159  0032C3  01                 	db	1
   160                           
   161                           ;initializer for _alarm_time
   162  0032C4  30                 	db	48
   163  0032C5  30                 	db	48
   164  0032C6  3A                 	db	58
   165  0032C7  30                 	db	48
   166  0032C8  30                 	db	48
   167  0032C9  3A                 	db	58
   168  0032CA  30                 	db	48
   169  0032CB  30                 	db	48
   170  0032CC  00                 	db	0
   171                           
   172                           ;initializer for _date
   173  0032CD  30                 	db	48
   174  0032CE  30                 	db	48
   175  0032CF  2F                 	db	47
   176  0032D0  30                 	db	48
   177  0032D1  30                 	db	48
   178  0032D2  2F                 	db	47
   179  0032D3  30                 	db	48
   180  0032D4  30                 	db	48
   181  0032D5  00                 	db	0
   182                           
   183                           ;initializer for _setup_alarm_time
   184  0032D6  30                 	db	48
   185  0032D7  30                 	db	48
   186  0032D8  3A                 	db	58
   187  0032D9  30                 	db	48
   188  0032DA  30                 	db	48
   189  0032DB  3A                 	db	58
   190  0032DC  30                 	db	48
   191  0032DD  30                 	db	48
   192  0032DE  00                 	db	0
   193                           
   194                           ;initializer for _setup_date
   195  0032DF  30                 	db	48
   196  0032E0  31                 	db	49
   197  0032E1  2F                 	db	47
   198  0032E2  30                 	db	48
   199  0032E3  31                 	db	49
   200  0032E4  2F                 	db	47
   201  0032E5  30                 	db	48
   202  0032E6  30                 	db	48
   203  0032E7  00                 	db	0
   204                           
   205                           ;initializer for _setup_time
   206  0032E8  30                 	db	48
   207  0032E9  30                 	db	48
   208  0032EA  3A                 	db	58
   209  0032EB  30                 	db	48
   210  0032EC  30                 	db	48
   211  0032ED  3A                 	db	58
   212  0032EE  30                 	db	48
   213  0032EF  30                 	db	48
   214  0032F0  00                 	db	0
   215                           
   216                           ;initializer for _time
   217  0032F1  30                 	db	48
   218  0032F2  30                 	db	48
   219  0032F3  3A                 	db	58
   220  0032F4  30                 	db	48
   221  0032F5  30                 	db	48
   222  0032F6  3A                 	db	58
   223  0032F7  30                 	db	48
   224  0032F8  30                 	db	48
   225  0032F9  00                 	db	0
   226                           
   227                           ;initializer for _Volt_Txt
   228  0032FA  30                 	db	48
   229  0032FB  2E                 	db	46
   230  0032FC  30                 	db	48
   231  0032FD  30                 	db	48
   232  0032FE  56                 	db	86
   233  0032FF  00                 	db	0
   234                           
   235                           ;initializer for _Heater_Set_Temp_Txt
   236  003300  30                 	db	48
   237  003301  37                 	db	55
   238  003302  35                 	db	53
   239  003303  46                 	db	70
   240  003304  00                 	db	0
   241                           
   242                           ;initializer for _RPM_Txt
   243  003305  30                 	db	48
   244  003306  30                 	db	48
   245  003307  30                 	db	48
   246  003308  30                 	db	48
   247  003309  00                 	db	0
   248                           
   249                           ;initializer for _setup_heater_set_text
   250  00330A  30                 	db	48
   251  00330B  37                 	db	55
   252  00330C  35                 	db	53
   253  00330D  46                 	db	70
   254  00330E  00                 	db	0
   255                           
   256                           ;initializer for _Alarm_SW_Txt
   257  00330F  4F                 	db	79
   258  003310  46                 	db	70
   259  003311  46                 	db	70
   260  003312  00                 	db	0
   261                           
   262                           ;initializer for _DC_Txt
   263  003313  30                 	db	48
   264  003314  30                 	db	48
   265  003315  30                 	db	48
   266  003316  00                 	db	0
   267                           
   268                           ;initializer for _Heater_SW_Txt
   269  003317  4F                 	db	79
   270  003318  46                 	db	70
   271  003319  46                 	db	70
   272  00331A  00                 	db	0
   273                           
   274                           ;initializer for _tempC
   275  00331B  2B                 	db	43
   276  00331C  32                 	db	50
   277  00331D  35                 	db	53
   278  00331E  00                 	db	0
   279                           
   280                           ;initializer for _tempF
   281  00331F  2B                 	db	43
   282  003320  37                 	db	55
   283  003321  37                 	db	55
   284  003322  00                 	db	0
   285                           
   286                           ;initializer for _RTC_ALARM_Txt
   287  003323  30                 	db	48
   288  003324  00                 	db	0
   289                           
   290                           	psect	idataBANK1
   291  0037C2                     __pidataBANK1:
   292                           	opt stack 0
   293                           
   294                           ;initializer for _buffer
   295  0037C2  45                 	db	69
   296  0037C3  43                 	db	67
   297  0037C4  45                 	db	69
   298  0037C5  33                 	db	51
   299  0037C6  33                 	db	51
   300  0037C7  30                 	db	48
   301  0037C8  31                 	db	49
   302  0037C9  4C                 	db	76
   303  0037CA  20                 	db	32
   304  0037CB  46                 	db	70
   305  0037CC  27                 	db	39
   306  0037CD  32                 	db	50
   307  0037CE  31                 	db	49
   308  0037CF  00                 	db	0
   309  0037D0  00                 	db	0
   310  0037D1  00                 	db	0
   311  0037D2  00                 	db	0
   312  0037D3  00                 	db	0
   313  0037D4  00                 	db	0
   314  0037D5  00                 	db	0
   315  0037D6  00                 	db	0
   316  0037D7  00                 	db	0
   317  0037D8  00                 	db	0
   318  0037D9  00                 	db	0
   319  0037DA  00                 	db	0
   320  0037DB  00                 	db	0
   321  0037DC  00                 	db	0
   322  0037DD  00                 	db	0
   323  0037DE  00                 	db	0
   324  0037DF  00                 	db	0
   325  0037E0  00                 	db	0
   326                           
   327                           ;initializer for _array1
   328  0037E1  A2                 	db	162
   329  0037E2  62                 	db	98
   330  0037E3  E2                 	db	226
   331  0037E4  22                 	db	34
   332  0037E5  02                 	db	2
   333  0037E6  C2                 	db	194
   334  0037E7  E0                 	db	224
   335  0037E8  A8                 	db	168
   336  0037E9  90                 	db	144
   337  0037EA  68                 	db	104
   338  0037EB  98                 	db	152
   339  0037EC  B0                 	db	176
   340  0037ED  30                 	db	48
   341  0037EE  18                 	db	24
   342  0037EF  7A                 	db	122
   343  0037F0  10                 	db	16
   344  0037F1  38                 	db	56
   345  0037F2  5A                 	db	90
   346  0037F3  42                 	db	66
   347  0037F4  4A                 	db	74
   348  0037F5  52                 	db	82
   349                           
   350                           ;initializer for _D1
   351  0037F6  00                 	db	0
   352  0037F7  02                 	db	2
   353  0037F8  04                 	db	4
   354  0037F9  06                 	db	6
   355  0037FA  10                 	db	16
   356  0037FB  12                 	db	18
   357  0037FC  14                 	db	20
   358  0037FD  16                 	db	22
   359                           
   360                           	psect	mediumconst
   361  00FC8C                     __pmediumconst:
   362                           	opt stack 0
   363  00FC8C  00                 	db	0
   364  00FC8D                     _font:
   365                           	opt stack 0
   366  00FC8D  00                 	db	0
   367  00FC8E  00                 	db	0
   368  00FC8F  00                 	db	0
   369  00FC90  00                 	db	0
   370  00FC91  00                 	db	0
   371  00FC92  00                 	db	0
   372  00FC93  00                 	db	0
   373  00FC94  5F                 	db	95
   374  00FC95  00                 	db	0
   375  00FC96  00                 	db	0
   376  00FC97  00                 	db	0
   377  00FC98  07                 	db	7
   378  00FC99  00                 	db	0
   379  00FC9A  07                 	db	7
   380  00FC9B  00                 	db	0
   381  00FC9C  14                 	db	20
   382  00FC9D  7F                 	db	127
   383  00FC9E  14                 	db	20
   384  00FC9F  7F                 	db	127
   385  00FCA0  14                 	db	20
   386  00FCA1  24                 	db	36
   387  00FCA2  2A                 	db	42
   388  00FCA3  7F                 	db	127
   389  00FCA4  2A                 	db	42
   390  00FCA5  12                 	db	18
   391  00FCA6  23                 	db	35
   392  00FCA7  13                 	db	19
   393  00FCA8  08                 	db	8
   394  00FCA9  64                 	db	100
   395  00FCAA  62                 	db	98
   396  00FCAB  36                 	db	54
   397  00FCAC  49                 	db	73
   398  00FCAD  56                 	db	86
   399  00FCAE  20                 	db	32
   400  00FCAF  50                 	db	80
   401  00FCB0  00                 	db	0
   402  00FCB1  08                 	db	8
   403  00FCB2  07                 	db	7
   404  00FCB3  03                 	db	3
   405  00FCB4  00                 	db	0
   406  00FCB5  00                 	db	0
   407  00FCB6  1C                 	db	28
   408  00FCB7  22                 	db	34
   409  00FCB8  41                 	db	65
   410  00FCB9  00                 	db	0
   411  00FCBA  00                 	db	0
   412  00FCBB  41                 	db	65
   413  00FCBC  22                 	db	34
   414  00FCBD  1C                 	db	28
   415  00FCBE  00                 	db	0
   416  00FCBF  2A                 	db	42
   417  00FCC0  1C                 	db	28
   418  00FCC1  7F                 	db	127
   419  00FCC2  1C                 	db	28
   420  00FCC3  2A                 	db	42
   421  00FCC4  08                 	db	8
   422  00FCC5  08                 	db	8
   423  00FCC6  3E                 	db	62
   424  00FCC7  08                 	db	8
   425  00FCC8  08                 	db	8
   426  00FCC9  00                 	db	0
   427  00FCCA  80                 	db	128
   428  00FCCB  70                 	db	112
   429  00FCCC  30                 	db	48
   430  00FCCD  00                 	db	0
   431  00FCCE  08                 	db	8
   432  00FCCF  08                 	db	8
   433  00FCD0  08                 	db	8
   434  00FCD1  08                 	db	8
   435  00FCD2  08                 	db	8
   436  00FCD3  00                 	db	0
   437  00FCD4  00                 	db	0
   438  00FCD5  60                 	db	96
   439  00FCD6  60                 	db	96
   440  00FCD7  00                 	db	0
   441  00FCD8  20                 	db	32
   442  00FCD9  10                 	db	16
   443  00FCDA  08                 	db	8
   444  00FCDB  04                 	db	4
   445  00FCDC  02                 	db	2
   446  00FCDD  3E                 	db	62
   447  00FCDE  51                 	db	81
   448  00FCDF  49                 	db	73
   449  00FCE0  45                 	db	69
   450  00FCE1  3E                 	db	62
   451  00FCE2  00                 	db	0
   452  00FCE3  42                 	db	66
   453  00FCE4  7F                 	db	127
   454  00FCE5  40                 	db	64
   455  00FCE6  00                 	db	0
   456  00FCE7  72                 	db	114
   457  00FCE8  49                 	db	73
   458  00FCE9  49                 	db	73
   459  00FCEA  49                 	db	73
   460  00FCEB  46                 	db	70
   461  00FCEC  21                 	db	33
   462  00FCED  41                 	db	65
   463  00FCEE  49                 	db	73
   464  00FCEF  4D                 	db	77
   465  00FCF0  33                 	db	51
   466  00FCF1  18                 	db	24
   467  00FCF2  14                 	db	20
   468  00FCF3  12                 	db	18
   469  00FCF4  7F                 	db	127
   470  00FCF5  10                 	db	16
   471  00FCF6  27                 	db	39
   472  00FCF7  45                 	db	69
   473  00FCF8  45                 	db	69
   474  00FCF9  45                 	db	69
   475  00FCFA  39                 	db	57
   476  00FCFB  3C                 	db	60
   477  00FCFC  4A                 	db	74
   478  00FCFD  49                 	db	73
   479  00FCFE  49                 	db	73
   480  00FCFF  31                 	db	49
   481  00FD00  41                 	db	65
   482  00FD01  21                 	db	33
   483  00FD02  11                 	db	17
   484  00FD03  09                 	db	9
   485  00FD04  07                 	db	7
   486  00FD05  36                 	db	54
   487  00FD06  49                 	db	73
   488  00FD07  49                 	db	73
   489  00FD08  49                 	db	73
   490  00FD09  36                 	db	54
   491  00FD0A  46                 	db	70
   492  00FD0B  49                 	db	73
   493  00FD0C  49                 	db	73
   494  00FD0D  29                 	db	41
   495  00FD0E  1E                 	db	30
   496  00FD0F  00                 	db	0
   497  00FD10  00                 	db	0
   498  00FD11  14                 	db	20
   499  00FD12  00                 	db	0
   500  00FD13  00                 	db	0
   501  00FD14  00                 	db	0
   502  00FD15  40                 	db	64
   503  00FD16  34                 	db	52
   504  00FD17  00                 	db	0
   505  00FD18  00                 	db	0
   506  00FD19  00                 	db	0
   507  00FD1A  08                 	db	8
   508  00FD1B  14                 	db	20
   509  00FD1C  22                 	db	34
   510  00FD1D  41                 	db	65
   511  00FD1E  14                 	db	20
   512  00FD1F  14                 	db	20
   513  00FD20  14                 	db	20
   514  00FD21  14                 	db	20
   515  00FD22  14                 	db	20
   516  00FD23  00                 	db	0
   517  00FD24  41                 	db	65
   518  00FD25  22                 	db	34
   519  00FD26  14                 	db	20
   520  00FD27  08                 	db	8
   521  00FD28  02                 	db	2
   522  00FD29  01                 	db	1
   523  00FD2A  59                 	db	89
   524  00FD2B  09                 	db	9
   525  00FD2C  06                 	db	6
   526  00FD2D  3E                 	db	62
   527  00FD2E  41                 	db	65
   528  00FD2F  5D                 	db	93
   529  00FD30  59                 	db	89
   530  00FD31  4E                 	db	78
   531  00FD32  7C                 	db	124
   532  00FD33  12                 	db	18
   533  00FD34  11                 	db	17
   534  00FD35  12                 	db	18
   535  00FD36  7C                 	db	124
   536  00FD37  7F                 	db	127
   537  00FD38  49                 	db	73
   538  00FD39  49                 	db	73
   539  00FD3A  49                 	db	73
   540  00FD3B  36                 	db	54
   541  00FD3C  3E                 	db	62
   542  00FD3D  41                 	db	65
   543  00FD3E  41                 	db	65
   544  00FD3F  41                 	db	65
   545  00FD40  22                 	db	34
   546  00FD41  7F                 	db	127
   547  00FD42  41                 	db	65
   548  00FD43  41                 	db	65
   549  00FD44  41                 	db	65
   550  00FD45  3E                 	db	62
   551  00FD46  7F                 	db	127
   552  00FD47  49                 	db	73
   553  00FD48  49                 	db	73
   554  00FD49  49                 	db	73
   555  00FD4A  41                 	db	65
   556  00FD4B  7F                 	db	127
   557  00FD4C  09                 	db	9
   558  00FD4D  09                 	db	9
   559  00FD4E  09                 	db	9
   560  00FD4F  01                 	db	1
   561  00FD50  3E                 	db	62
   562  00FD51  41                 	db	65
   563  00FD52  41                 	db	65
   564  00FD53  51                 	db	81
   565  00FD54  73                 	db	115
   566  00FD55  7F                 	db	127
   567  00FD56  08                 	db	8
   568  00FD57  08                 	db	8
   569  00FD58  08                 	db	8
   570  00FD59  7F                 	db	127
   571  00FD5A  00                 	db	0
   572  00FD5B  41                 	db	65
   573  00FD5C  7F                 	db	127
   574  00FD5D  41                 	db	65
   575  00FD5E  00                 	db	0
   576  00FD5F  20                 	db	32
   577  00FD60  40                 	db	64
   578  00FD61  41                 	db	65
   579  00FD62  3F                 	db	63
   580  00FD63  01                 	db	1
   581  00FD64  7F                 	db	127
   582  00FD65  08                 	db	8
   583  00FD66  14                 	db	20
   584  00FD67  22                 	db	34
   585  00FD68  41                 	db	65
   586  00FD69  7F                 	db	127
   587  00FD6A  40                 	db	64
   588  00FD6B  40                 	db	64
   589  00FD6C  40                 	db	64
   590  00FD6D  40                 	db	64
   591  00FD6E  7F                 	db	127
   592  00FD6F  02                 	db	2
   593  00FD70  1C                 	db	28
   594  00FD71  02                 	db	2
   595  00FD72  7F                 	db	127
   596  00FD73  7F                 	db	127
   597  00FD74  04                 	db	4
   598  00FD75  08                 	db	8
   599  00FD76  10                 	db	16
   600  00FD77  7F                 	db	127
   601  00FD78  3E                 	db	62
   602  00FD79  41                 	db	65
   603  00FD7A  41                 	db	65
   604  00FD7B  41                 	db	65
   605  00FD7C  3E                 	db	62
   606  00FD7D  7F                 	db	127
   607  00FD7E  09                 	db	9
   608  00FD7F  09                 	db	9
   609  00FD80  09                 	db	9
   610  00FD81  06                 	db	6
   611  00FD82  3E                 	db	62
   612  00FD83  41                 	db	65
   613  00FD84  51                 	db	81
   614  00FD85  21                 	db	33
   615  00FD86  5E                 	db	94
   616  00FD87  7F                 	db	127
   617  00FD88  09                 	db	9
   618  00FD89  19                 	db	25
   619  00FD8A  29                 	db	41
   620  00FD8B  46                 	db	70
   621  00FD8C                     __end_of_font:
   622                           	opt stack 0
   623  00FD8C                     _font2:
   624                           	opt stack 0
   625  00FD8C  26                 	db	38
   626  00FD8D  49                 	db	73
   627  00FD8E  49                 	db	73
   628  00FD8F  49                 	db	73
   629  00FD90  32                 	db	50
   630  00FD91  03                 	db	3
   631  00FD92  01                 	db	1
   632  00FD93  7F                 	db	127
   633  00FD94  01                 	db	1
   634  00FD95  03                 	db	3
   635  00FD96  3F                 	db	63
   636  00FD97  40                 	db	64
   637  00FD98  40                 	db	64
   638  00FD99  40                 	db	64
   639  00FD9A  3F                 	db	63
   640  00FD9B  1F                 	db	31
   641  00FD9C  20                 	db	32
   642  00FD9D  40                 	db	64
   643  00FD9E  20                 	db	32
   644  00FD9F  1F                 	db	31
   645  00FDA0  3F                 	db	63
   646  00FDA1  40                 	db	64
   647  00FDA2  38                 	db	56
   648  00FDA3  40                 	db	64
   649  00FDA4  3F                 	db	63
   650  00FDA5  63                 	db	99
   651  00FDA6  14                 	db	20
   652  00FDA7  08                 	db	8
   653  00FDA8  14                 	db	20
   654  00FDA9  63                 	db	99
   655  00FDAA  03                 	db	3
   656  00FDAB  04                 	db	4
   657  00FDAC  78                 	db	120
   658  00FDAD  04                 	db	4
   659  00FDAE  03                 	db	3
   660  00FDAF  61                 	db	97
   661  00FDB0  59                 	db	89
   662  00FDB1  49                 	db	73
   663  00FDB2  4D                 	db	77
   664  00FDB3  43                 	db	67
   665  00FDB4  00                 	db	0
   666  00FDB5  7F                 	db	127
   667  00FDB6  41                 	db	65
   668  00FDB7  41                 	db	65
   669  00FDB8  41                 	db	65
   670  00FDB9  02                 	db	2
   671  00FDBA  04                 	db	4
   672  00FDBB  08                 	db	8
   673  00FDBC  10                 	db	16
   674  00FDBD  20                 	db	32
   675  00FDBE  00                 	db	0
   676  00FDBF  41                 	db	65
   677  00FDC0  41                 	db	65
   678  00FDC1  41                 	db	65
   679  00FDC2  7F                 	db	127
   680  00FDC3  04                 	db	4
   681  00FDC4  02                 	db	2
   682  00FDC5  01                 	db	1
   683  00FDC6  02                 	db	2
   684  00FDC7  04                 	db	4
   685  00FDC8  40                 	db	64
   686  00FDC9  40                 	db	64
   687  00FDCA  40                 	db	64
   688  00FDCB  40                 	db	64
   689  00FDCC  40                 	db	64
   690  00FDCD  00                 	db	0
   691  00FDCE  03                 	db	3
   692  00FDCF  07                 	db	7
   693  00FDD0  08                 	db	8
   694  00FDD1  00                 	db	0
   695  00FDD2  20                 	db	32
   696  00FDD3  54                 	db	84
   697  00FDD4  54                 	db	84
   698  00FDD5  78                 	db	120
   699  00FDD6  40                 	db	64
   700  00FDD7  7F                 	db	127
   701  00FDD8  28                 	db	40
   702  00FDD9  44                 	db	68
   703  00FDDA  44                 	db	68
   704  00FDDB  38                 	db	56
   705  00FDDC  38                 	db	56
   706  00FDDD  44                 	db	68
   707  00FDDE  44                 	db	68
   708  00FDDF  44                 	db	68
   709  00FDE0  28                 	db	40
   710  00FDE1  38                 	db	56
   711  00FDE2  44                 	db	68
   712  00FDE3  44                 	db	68
   713  00FDE4  28                 	db	40
   714  00FDE5  7F                 	db	127
   715  00FDE6  38                 	db	56
   716  00FDE7  54                 	db	84
   717  00FDE8  54                 	db	84
   718  00FDE9  54                 	db	84
   719  00FDEA  18                 	db	24
   720  00FDEB  00                 	db	0
   721  00FDEC  08                 	db	8
   722  00FDED  7E                 	db	126
   723  00FDEE  09                 	db	9
   724  00FDEF  02                 	db	2
   725  00FDF0  18                 	db	24
   726  00FDF1  A4                 	db	164
   727  00FDF2  A4                 	db	164
   728  00FDF3  9C                 	db	156
   729  00FDF4  78                 	db	120
   730  00FDF5  7F                 	db	127
   731  00FDF6  08                 	db	8
   732  00FDF7  04                 	db	4
   733  00FDF8  04                 	db	4
   734  00FDF9  78                 	db	120
   735  00FDFA  00                 	db	0
   736  00FDFB  44                 	db	68
   737  00FDFC  7D                 	db	125
   738  00FDFD  40                 	db	64
   739  00FDFE  00                 	db	0
   740  00FDFF  20                 	db	32
   741  00FE00  40                 	db	64
   742  00FE01  40                 	db	64
   743  00FE02  3D                 	db	61
   744  00FE03  00                 	db	0
   745  00FE04  7F                 	db	127
   746  00FE05  10                 	db	16
   747  00FE06  28                 	db	40
   748  00FE07  44                 	db	68
   749  00FE08  00                 	db	0
   750  00FE09  00                 	db	0
   751  00FE0A  41                 	db	65
   752  00FE0B  7F                 	db	127
   753  00FE0C  40                 	db	64
   754  00FE0D  00                 	db	0
   755  00FE0E  7C                 	db	124
   756  00FE0F  04                 	db	4
   757  00FE10  78                 	db	120
   758  00FE11  04                 	db	4
   759  00FE12  78                 	db	120
   760  00FE13  7C                 	db	124
   761  00FE14  08                 	db	8
   762  00FE15  04                 	db	4
   763  00FE16  04                 	db	4
   764  00FE17  78                 	db	120
   765  00FE18  38                 	db	56
   766  00FE19  44                 	db	68
   767  00FE1A  44                 	db	68
   768  00FE1B  44                 	db	68
   769  00FE1C  38                 	db	56
   770  00FE1D  FC                 	db	252
   771  00FE1E  18                 	db	24
   772  00FE1F  24                 	db	36
   773  00FE20  24                 	db	36
   774  00FE21  18                 	db	24
   775  00FE22  18                 	db	24
   776  00FE23  24                 	db	36
   777  00FE24  24                 	db	36
   778  00FE25  18                 	db	24
   779  00FE26  FC                 	db	252
   780  00FE27  7C                 	db	124
   781  00FE28  08                 	db	8
   782  00FE29  04                 	db	4
   783  00FE2A  04                 	db	4
   784  00FE2B  08                 	db	8
   785  00FE2C  48                 	db	72
   786  00FE2D  54                 	db	84
   787  00FE2E  54                 	db	84
   788  00FE2F  54                 	db	84
   789  00FE30  24                 	db	36
   790  00FE31  04                 	db	4
   791  00FE32  04                 	db	4
   792  00FE33  3F                 	db	63
   793  00FE34  44                 	db	68
   794  00FE35  24                 	db	36
   795  00FE36  3C                 	db	60
   796  00FE37  40                 	db	64
   797  00FE38  40                 	db	64
   798  00FE39  20                 	db	32
   799  00FE3A  7C                 	db	124
   800  00FE3B  1C                 	db	28
   801  00FE3C  20                 	db	32
   802  00FE3D  40                 	db	64
   803  00FE3E  20                 	db	32
   804  00FE3F  1C                 	db	28
   805  00FE40  3C                 	db	60
   806  00FE41  40                 	db	64
   807  00FE42  30                 	db	48
   808  00FE43  40                 	db	64
   809  00FE44  3C                 	db	60
   810  00FE45  44                 	db	68
   811  00FE46  28                 	db	40
   812  00FE47  10                 	db	16
   813  00FE48  28                 	db	40
   814  00FE49  44                 	db	68
   815  00FE4A  4C                 	db	76
   816  00FE4B  90                 	db	144
   817  00FE4C  90                 	db	144
   818  00FE4D  90                 	db	144
   819  00FE4E  7C                 	db	124
   820  00FE4F  44                 	db	68
   821  00FE50  64                 	db	100
   822  00FE51  54                 	db	84
   823  00FE52  4C                 	db	76
   824  00FE53  44                 	db	68
   825  00FE54  00                 	db	0
   826  00FE55  08                 	db	8
   827  00FE56  36                 	db	54
   828  00FE57  41                 	db	65
   829  00FE58  00                 	db	0
   830  00FE59  00                 	db	0
   831  00FE5A  00                 	db	0
   832  00FE5B  77                 	db	119
   833  00FE5C  00                 	db	0
   834  00FE5D  00                 	db	0
   835  00FE5E  00                 	db	0
   836  00FE5F  41                 	db	65
   837  00FE60  36                 	db	54
   838  00FE61  08                 	db	8
   839  00FE62  00                 	db	0
   840  00FE63  02                 	db	2
   841  00FE64  01                 	db	1
   842  00FE65  02                 	db	2
   843  00FE66  04                 	db	4
   844  00FE67  02                 	db	2
   845  00FE68                     __end_of_font2:
   846                           	opt stack 0
   847  00FE68                     _dpowers:
   848                           	opt stack 0
   849  00FE68  0001               	dw	1
   850  00FE6A  000A               	dw	10
   851  00FE6C  0064               	dw	100
   852  00FE6E  03E8               	dw	1000
   853  00FE70  2710               	dw	10000
   854  00FE72                     __end_of_dpowers:
   855                           	opt stack 0
   856  00FE72                     _hexpowers:
   857                           	opt stack 0
   858  00FE72  0001               	dw	1
   859  00FE74  0010               	dw	16
   860  00FE76  0100               	dw	256
   861  00FE78  1000               	dw	4096
   862  00FE7A                     __end_of_hexpowers:
   863                           	opt stack 0
   864  0000                     _ADCON0	set	4034
   865  0000                     _ADCON0bits	set	4034
   866  0000                     _ADCON1	set	4033
   867  0000                     _ADCON2	set	4032
   868  0000                     _ADRESH	set	4036
   869  0000                     _ADRESL	set	4035
   870  0000                     _CCP1CON	set	4029
   871  0000                     _CCP2CON	set	4026
   872  0000                     _CCPR1L	set	4030
   873  0000                     _CCPR2L	set	4027
   874  0000                     _INTCON2bits	set	4081
   875  0000                     _INTCON3bits	set	4080
   876  0000                     _INTCONbits	set	4082
   877  0000                     _OSCCON	set	4051
   878  0000                     _PIE1bits	set	3997
   879  0000                     _PIR1bits	set	3998
   880  0000                     _PORTA	set	3968
   881  0000                     _PORTAbits	set	3968
   882  0000                     _PORTBbits	set	3969
   883  0000                     _PORTCbits	set	3970
   884  0000                     _PORTDbits	set	3971
   885  0000                     _PORTE	set	3972
   886  0000                     _PORTEbits	set	3972
   887  0000                     _PR2	set	4043
   888  0000                     _RCSTA	set	4011
   889  0000                     _RCSTAbits	set	4011
   890  0000                     _SPBRG	set	4015
   891  0000                     _SPBRGH	set	4016
   892  0000                     _SSPBUF	set	4041
   893  0000                     _SSPCON1	set	4038
   894  0000                     _SSPSTAT	set	4039
   895  0000                     _SSPSTATbits	set	4039
   896  0000                     _T0CON	set	4053
   897  0000                     _T0CONbits	set	4053
   898  0000                     _T1CON	set	4045
   899  0000                     _T1CONbits	set	4045
   900  0000                     _T2CON	set	4042
   901  0000                     _T3CON	set	4017
   902  0000                     _TMR0H	set	4055
   903  0000                     _TMR0L	set	4054
   904  0000                     _TMR1H	set	4047
   905  0000                     _TMR1L	set	4046
   906  0000                     _TMR3L	set	4018
   907  0000                     _TRISA	set	3986
   908  0000                     _TRISB	set	3987
   909  0000                     _TRISBbits	set	3987
   910  0000                     _TRISC	set	3988
   911  0000                     _TRISCbits	set	3988
   912  0000                     _TRISD	set	3989
   913  0000                     _TRISE	set	3990
   914  0000                     _TXREG	set	4013
   915  0000                     _TXSTA	set	4012
   916  0000                     _TXSTAbits	set	4012
   917  0000                     _RBPU	set	32655
   918  0000                     _TRMT	set	32097
   919  00FE7A                     STR_21:
   920  00FE7A  25                 	db	37
   921  00FE7B  30                 	db	48	;'0'
   922  00FE7C  32                 	db	50	;'2'
   923  00FE7D  78                 	db	120	;'x'
   924  00FE7E  3A                 	db	58	;':'
   925  00FE7F  25                 	db	37
   926  00FE80  30                 	db	48	;'0'
   927  00FE81  32                 	db	50	;'2'
   928  00FE82  78                 	db	120	;'x'
   929  00FE83  3A                 	db	58	;':'
   930  00FE84  25                 	db	37
   931  00FE85  30                 	db	48	;'0'
   932  00FE86  32                 	db	50	;'2'
   933  00FE87  78                 	db	120	;'x'
   934  00FE88  20                 	db	32
   935  00FE89  25                 	db	37
   936  00FE8A  30                 	db	48	;'0'
   937  00FE8B  32                 	db	50	;'2'
   938  00FE8C  78                 	db	120	;'x'
   939  00FE8D  2F                 	db	47
   940  00FE8E  25                 	db	37
   941  00FE8F  30                 	db	48	;'0'
   942  00FE90  32                 	db	50	;'2'
   943  00FE91  78                 	db	120	;'x'
   944  00FE92  2F                 	db	47
   945  00FE93  25                 	db	37
   946  00FE94  30                 	db	48	;'0'
   947  00FE95  32                 	db	50	;'2'
   948  00FE96  78                 	db	120	;'x'
   949  00FE97  00                 	db	0
   950  00FE98                     STR_23:
   951  00FE98  61                 	db	97	;'a'
   952  00FE99  6C                 	db	108	;'l'
   953  00FE9A  61                 	db	97	;'a'
   954  00FE9B  72                 	db	114	;'r'
   955  00FE9C  6D                 	db	109	;'m'
   956  00FE9D  20                 	db	32
   957  00FE9E  3D                 	db	61	;'='
   958  00FE9F  20                 	db	32
   959  00FEA0  25                 	db	37
   960  00FEA1  64                 	db	100	;'d'
   961  00FEA2  20                 	db	32
   962  00FEA3  48                 	db	72	;'H'
   963  00FEA4  65                 	db	101	;'e'
   964  00FEA5  61                 	db	97	;'a'
   965  00FEA6  74                 	db	116	;'t'
   966  00FEA7  65                 	db	101	;'e'
   967  00FEA8  72                 	db	114	;'r'
   968  00FEA9  20                 	db	32
   969  00FEAA  3D                 	db	61	;'='
   970  00FEAB  20                 	db	32
   971  00FEAC  25                 	db	37
   972  00FEAD  64                 	db	100	;'d'
   973  00FEAE  20                 	db	32
   974  00FEAF  2C                 	db	44
   975  00FEB0  00                 	db	0
   976  00FEB1                     STR_22:
   977  00FEB1  20                 	db	32
   978  00FEB2  54                 	db	84	;'T'
   979  00FEB3  65                 	db	101	;'e'
   980  00FEB4  6D                 	db	109	;'m'
   981  00FEB5  70                 	db	112	;'p'
   982  00FEB6  20                 	db	32
   983  00FEB7  3D                 	db	61	;'='
   984  00FEB8  20                 	db	32
   985  00FEB9  25                 	db	37
   986  00FEBA  64                 	db	100	;'d'
   987  00FEBB  20                 	db	32
   988  00FEBC  43                 	db	67	;'C'
   989  00FEBD  20                 	db	32
   990  00FEBE  3D                 	db	61	;'='
   991  00FEBF  20                 	db	32
   992  00FEC0  25                 	db	37
   993  00FEC1  64                 	db	100	;'d'
   994  00FEC2  20                 	db	32
   995  00FEC3  46                 	db	70	;'F'
   996  00FEC4  20                 	db	32
   997  00FEC5  2C                 	db	44
   998  00FEC6  00                 	db	0
   999  00FEC7                     STR_20:
  1000  00FEC7  43                 	db	67	;'C'
  1001  00FEC8  61                 	db	97	;'a'
  1002  00FEC9  6E                 	db	110	;'n'
  1003  00FECA  6E                 	db	110	;'n'
  1004  00FECB  6F                 	db	111	;'o'
  1005  00FECC  74                 	db	116	;'t'
  1006  00FECD  20                 	db	32
  1007  00FECE  66                 	db	102	;'f'
  1008  00FECF  69                 	db	105	;'i'
  1009  00FED0  6E                 	db	110	;'n'
  1010  00FED1  64                 	db	100	;'d'
  1011  00FED2  20                 	db	32
  1012  00FED3  62                 	db	98	;'b'
  1013  00FED4  75                 	db	117	;'u'
  1014  00FED5  74                 	db	116	;'t'
  1015  00FED6  74                 	db	116	;'t'
  1016  00FED7  6F                 	db	111	;'o'
  1017  00FED8  6E                 	db	110	;'n'
  1018  00FED9  20                 	db	32
  1019  00FEDA  0D                 	db	13
  1020  00FEDB  0A                 	db	10
  1021  00FEDC  00                 	db	0
  1022  00FEDD                     STR_29:
  1023  00FEDD  45                 	db	69	;'E'
  1024  00FEDE  43                 	db	67	;'C'
  1025  00FEDF  45                 	db	69	;'E'
  1026  00FEE0  33                 	db	51	;'3'
  1027  00FEE1  33                 	db	51	;'3'
  1028  00FEE2  30                 	db	48	;'0'
  1029  00FEE3  31                 	db	49	;'1'
  1030  00FEE4  4C                 	db	76	;'L'
  1031  00FEE5  20                 	db	32
  1032  00FEE6  46                 	db	70	;'F'
  1033  00FEE7  27                 	db	39
  1034  00FEE8  32                 	db	50	;'2'
  1035  00FEE9  31                 	db	49	;'1'
  1036  00FEEA  20                 	db	32
  1037  00FEEB  46                 	db	70	;'F'
  1038  00FEEC  69                 	db	105	;'i'
  1039  00FEED  6E                 	db	110	;'n'
  1040  00FEEE  61                 	db	97	;'a'
  1041  00FEEF  6C                 	db	108	;'l'
  1042  00FEF0  00                 	db	0
  1043  00FEF1  00                 	db	0
  1044  00FEF2                     STR_25:
  1045  00FEF2  45                 	db	69	;'E'
  1046  00FEF3  43                 	db	67	;'C'
  1047  00FEF4  45                 	db	69	;'E'
  1048  00FEF5  33                 	db	51	;'3'
  1049  00FEF6  33                 	db	51	;'3'
  1050  00FEF7  30                 	db	48	;'0'
  1051  00FEF8  31                 	db	49	;'1'
  1052  00FEF9  4C                 	db	76	;'L'
  1053  00FEFA  20                 	db	32
  1054  00FEFB  46                 	db	70	;'F'
  1055  00FEFC  3B                 	db	59	;';'
  1056  00FEFD  32                 	db	50	;'2'
  1057  00FEFE  31                 	db	49	;'1'
  1058  00FEFF  20                 	db	32
  1059  00FF00  46                 	db	70	;'F'
  1060  00FF01  69                 	db	105	;'i'
  1061  00FF02  6E                 	db	110	;'n'
  1062  00FF03  61                 	db	97	;'a'
  1063  00FF04  6C                 	db	108	;'l'
  1064  00FF05  00                 	db	0
  1065  00FF06  00                 	db	0
  1066  00FF07                     STR_33:
  1067  00FF07  45                 	db	69	;'E'
  1068  00FF08  43                 	db	67	;'C'
  1069  00FF09  45                 	db	69	;'E'
  1070  00FF0A  33                 	db	51	;'3'
  1071  00FF0B  33                 	db	51	;'3'
  1072  00FF0C  30                 	db	48	;'0'
  1073  00FF0D  31                 	db	49	;'1'
  1074  00FF0E  4C                 	db	76	;'L'
  1075  00FF0F  20                 	db	32
  1076  00FF10  46                 	db	70	;'F'
  1077  00FF11  27                 	db	39
  1078  00FF12  32                 	db	50	;'2'
  1079  00FF13  31                 	db	49	;'1'
  1080  00FF14  20                 	db	32
  1081  00FF15  46                 	db	70	;'F'
  1082  00FF16  69                 	db	105	;'i'
  1083  00FF17  6E                 	db	110	;'n'
  1084  00FF18  61                 	db	97	;'a'
  1085  00FF19  6C                 	db	108	;'l'
  1086  00FF1A  00                 	db	0
  1087  00FF1B                     STR_24:
  1088  00FF1B  52                 	db	82	;'R'
  1089  00FF1C  50                 	db	80	;'P'
  1090  00FF1D  4D                 	db	77	;'M'
  1091  00FF1E  20                 	db	32
  1092  00FF1F  3D                 	db	61	;'='
  1093  00FF20  20                 	db	32
  1094  00FF21  25                 	db	37
  1095  00FF22  64                 	db	100	;'d'
  1096  00FF23  20                 	db	32
  1097  00FF24  20                 	db	32
  1098  00FF25  64                 	db	100	;'d'
  1099  00FF26  63                 	db	99	;'c'
  1100  00FF27  20                 	db	32
  1101  00FF28  3D                 	db	61	;'='
  1102  00FF29  20                 	db	32
  1103  00FF2A  25                 	db	37
  1104  00FF2B  64                 	db	100	;'d'
  1105  00FF2C  0D                 	db	13
  1106  00FF2D  0A                 	db	10
  1107  00FF2E  00                 	db	0
  1108  00FF2F                     STR_38:
  1109  00FF2F  30                 	db	48	;'0'
  1110  00FF30  31                 	db	49	;'1'
  1111  00FF31  32                 	db	50	;'2'
  1112  00FF32  33                 	db	51	;'3'
  1113  00FF33  34                 	db	52	;'4'
  1114  00FF34  35                 	db	53	;'5'
  1115  00FF35  36                 	db	54	;'6'
  1116  00FF36  37                 	db	55	;'7'
  1117  00FF37  38                 	db	56	;'8'
  1118  00FF38  39                 	db	57	;'9'
  1119  00FF39  61                 	db	97	;'a'
  1120  00FF3A  62                 	db	98	;'b'
  1121  00FF3B  63                 	db	99	;'c'
  1122  00FF3C  64                 	db	100	;'d'
  1123  00FF3D  65                 	db	101	;'e'
  1124  00FF3E  66                 	db	102	;'f'
  1125  00FF3F  00                 	db	0
  1126  00FF40                     STR_32:
  1127  00FF40  53                 	db	83	;'S'
  1128  00FF41  65                 	db	101	;'e'
  1129  00FF42  74                 	db	116	;'t'
  1130  00FF43  20                 	db	32
  1131  00FF44  48                 	db	72	;'H'
  1132  00FF45  65                 	db	101	;'e'
  1133  00FF46  61                 	db	97	;'a'
  1134  00FF47  74                 	db	116	;'t'
  1135  00FF48  65                 	db	101	;'e'
  1136  00FF49  72                 	db	114	;'r'
  1137  00FF4A  20                 	db	32
  1138  00FF4B  54                 	db	84	;'T'
  1139  00FF4C  65                 	db	101	;'e'
  1140  00FF4D  6D                 	db	109	;'m'
  1141  00FF4E  70                 	db	112	;'p'
  1142  00FF4F  00                 	db	0
  1143  00FF50                     STR_19:
  1144  00FF50  4E                 	db	78	;'N'
  1145  00FF51  45                 	db	69	;'E'
  1146  00FF52  43                 	db	67	;'C'
  1147  00FF53  5F                 	db	95	;'_'
  1148  00FF54  43                 	db	67	;'C'
  1149  00FF55  6F                 	db	111	;'o'
  1150  00FF56  64                 	db	100	;'d'
  1151  00FF57  65                 	db	101	;'e'
  1152  00FF58  20                 	db	32
  1153  00FF59  3D                 	db	61	;'='
  1154  00FF5A  20                 	db	32
  1155  00FF5B  25                 	db	37
  1156  00FF5C  78                 	db	120	;'x'
  1157  00FF5D  0D                 	db	13
  1158  00FF5E  0A                 	db	10
  1159  00FF5F  00                 	db	0
  1160  00FF60                     STR_1:
  1161  00FF60  45                 	db	69	;'E'
  1162  00FF61  43                 	db	67	;'C'
  1163  00FF62  45                 	db	69	;'E'
  1164  00FF63  33                 	db	51	;'3'
  1165  00FF64  33                 	db	51	;'3'
  1166  00FF65  30                 	db	48	;'0'
  1167  00FF66  31                 	db	49	;'1'
  1168  00FF67  4C                 	db	76	;'L'
  1169  00FF68  20                 	db	32
  1170  00FF69  46                 	db	70	;'F'
  1171  00FF6A  27                 	db	39
  1172  00FF6B  32                 	db	50	;'2'
  1173  00FF6C  31                 	db	49	;'1'
  1174  00FF6D  00                 	db	0
  1175  00FF6E  00                 	db	0
  1176  00FF6F                     STR_9:
  1177  00FF6F  48                 	db	72	;'H'
  1178  00FF70  54                 	db	84	;'T'
  1179  00FF71  52                 	db	82	;'R'
  1180  00FF72  20                 	db	32
  1181  00FF73  53                 	db	83	;'S'
  1182  00FF74  65                 	db	101	;'e'
  1183  00FF75  74                 	db	116	;'t'
  1184  00FF76  20                 	db	32
  1185  00FF77  54                 	db	84	;'T'
  1186  00FF78  65                 	db	101	;'e'
  1187  00FF79  6D                 	db	109	;'m'
  1188  00FF7A  70                 	db	112	;'p'
  1189  00FF7B  00                 	db	0
  1190  00FF7C                     STR_26:
  1191  00FF7C  54                 	db	84	;'T'
  1192  00FF7D  69                 	db	105	;'i'
  1193  00FF7E  6D                 	db	109	;'m'
  1194  00FF7F  65                 	db	101	;'e'
  1195  00FF80  20                 	db	32
  1196  00FF81  53                 	db	83	;'S'
  1197  00FF82  65                 	db	101	;'e'
  1198  00FF83  74                 	db	116	;'t'
  1199  00FF84  75                 	db	117	;'u'
  1200  00FF85  70                 	db	112	;'p'
  1201  00FF86  00                 	db	0
  1202  00FF87  00                 	db	0
  1203  00FF88                     STR_2:
  1204  00FF88  54                 	db	84	;'T'
  1205  00FF89  65                 	db	101	;'e'
  1206  00FF8A  6D                 	db	109	;'m'
  1207  00FF8B  70                 	db	112	;'p'
  1208  00FF8C  65                 	db	101	;'e'
  1209  00FF8D  72                 	db	114	;'r'
  1210  00FF8E  61                 	db	97	;'a'
  1211  00FF8F  74                 	db	116	;'t'
  1212  00FF90  75                 	db	117	;'u'
  1213  00FF91  72                 	db	114	;'r'
  1214  00FF92  65                 	db	101	;'e'
  1215  00FF93  00                 	db	0
  1216  00FF94                     STR_37:
  1217  00FF94  25                 	db	37
  1218  00FF95  78                 	db	120	;'x'
  1219  00FF96  3A                 	db	58	;':'
  1220  00FF97  25                 	db	37
  1221  00FF98  78                 	db	120	;'x'
  1222  00FF99  3A                 	db	58	;':'
  1223  00FF9A  25                 	db	37
  1224  00FF9B  78                 	db	120	;'x'
  1225  00FF9C  0D                 	db	13
  1226  00FF9D  0A                 	db	10
  1227  00FF9E  00                 	db	0
  1228  00FF9F                     STR_30:
  1229  00FF9F  20                 	db	32
  1230  00FFA0  20                 	db	32
  1231  00FFA1  48                 	db	72	;'H'
  1232  00FFA2  65                 	db	101	;'e'
  1233  00FFA3  61                 	db	97	;'a'
  1234  00FFA4  74                 	db	116	;'t'
  1235  00FFA5  65                 	db	101	;'e'
  1236  00FFA6  72                 	db	114	;'r'
  1237  00FFA7  00                 	db	0
  1238  00FFA8  20                 	db	32
  1239  00FFA9  00                 	db	0
  1240  00FFAA                     STR_7:
  1241  00FFAA  41                 	db	65	;'A'
  1242  00FFAB  6C                 	db	108	;'l'
  1243  00FFAC  61                 	db	97	;'a'
  1244  00FFAD  72                 	db	114	;'r'
  1245  00FFAE  6D                 	db	109	;'m'
  1246  00FFAF  20                 	db	32
  1247  00FFB0  54                 	db	84	;'T'
  1248  00FFB1  69                 	db	105	;'i'
  1249  00FFB2  6D                 	db	109	;'m'
  1250  00FFB3  65                 	db	101	;'e'
  1251  00FFB4  00                 	db	0
  1252  00FFB5                     STR_31:
  1253  00FFB5  20                 	db	32
  1254  00FFB6  20                 	db	32
  1255  00FFB7  53                 	db	83	;'S'
  1256  00FFB8  65                 	db	101	;'e'
  1257  00FFB9  74                 	db	116	;'t'
  1258  00FFBA  75                 	db	117	;'u'
  1259  00FFBB  70                 	db	112	;'p'
  1260  00FFBC  00                 	db	0
  1261  00FFBD  20                 	db	32
  1262  00FFBE  00                 	db	0
  1263  00FFBF                     STR_8:
  1264  00FFBF  41                 	db	65	;'A'
  1265  00FFC0  6C                 	db	108	;'l'
  1266  00FFC1  61                 	db	97	;'a'
  1267  00FFC2  72                 	db	114	;'r'
  1268  00FFC3  6D                 	db	109	;'m'
  1269  00FFC4  20                 	db	32
  1270  00FFC5  53                 	db	83	;'S'
  1271  00FFC6  57                 	db	87	;'W'
  1272  00FFC7  00                 	db	0
  1273  00FFC8                     STR_34:
  1274  00FFC8  20                 	db	32
  1275  00FFC9  20                 	db	32
  1276  00FFCA  41                 	db	65	;'A'
  1277  00FFCB  6C                 	db	108	;'l'
  1278  00FFCC  61                 	db	97	;'a'
  1279  00FFCD  72                 	db	114	;'r'
  1280  00FFCE  6D                 	db	109	;'m'
  1281  00FFCF  00                 	db	0
  1282  00FFD0                     STR_35:
  1283  00FFD0  20                 	db	32
  1284  00FFD1  20                 	db	32
  1285  00FFD2  53                 	db	83	;'S'
  1286  00FFD3  65                 	db	101	;'e'
  1287  00FFD4  74                 	db	116	;'t'
  1288  00FFD5  75                 	db	117	;'u'
  1289  00FFD6  70                 	db	112	;'p'
  1290  00FFD7  00                 	db	0
  1291  00FFD8                     STR_10:
  1292  00FFD8  48                 	db	72	;'H'
  1293  00FFD9  54                 	db	84	;'T'
  1294  00FFDA  52                 	db	82	;'R'
  1295  00FFDB  20                 	db	32
  1296  00FFDC  53                 	db	83	;'S'
  1297  00FFDD  57                 	db	87	;'W'
  1298  00FFDE  00                 	db	0
  1299  00FFDF                     STR_6:
  1300  00FFDF  44                 	db	68	;'D'
  1301  00FFE0  61                 	db	97	;'a'
  1302  00FFE1  74                 	db	116	;'t'
  1303  00FFE2  65                 	db	101	;'e'
  1304  00FFE3  00                 	db	0
  1305  00FFE4                     STR_13:
  1306  00FFE4  56                 	db	86	;'V'
  1307  00FFE5  6F                 	db	111	;'o'
  1308  00FFE6  6C                 	db	108	;'l'
  1309  00FFE7  74                 	db	116	;'t'
  1310  00FFE8  00                 	db	0
  1311  00FFE9                     STR_15:
  1312  00FFE9  4F                 	db	79	;'O'
  1313  00FFEA  4E                 	db	78	;'N'
  1314  00FFEB  20                 	db	32
  1315  00FFEC  00                 	db	0
  1316  00FFED                     STR_16:
  1317  00FFED  4F                 	db	79	;'O'
  1318  00FFEE  46                 	db	70	;'F'
  1319  00FFEF  46                 	db	70	;'F'
  1320  00FFF0  00                 	db	0
  1321  00FFF1                     STR_14:
  1322  00FFF1  52                 	db	82	;'R'
  1323  00FFF2  50                 	db	80	;'P'
  1324  00FFF3  4D                 	db	77	;'M'
  1325  00FFF4  00                 	db	0
  1326  00FFF5                     STR_3:
  1327  00FFF5  43                 	db	67	;'C'
  1328  00FFF6  2F                 	db	47
  1329  00FFF7  00                 	db	0
  1330  00FFF8                     STR_11:
  1331  00FFF8  44                 	db	68	;'D'
  1332  00FFF9  43                 	db	67	;'C'
  1333  00FFFA  00                 	db	0
  1334  00FFFB                     STR_12:
  1335  00FFFB  52                 	db	82	;'R'
  1336  00FFFC  4D                 	db	77	;'M'
  1337  00FFFD  00                 	db	0
  1338  0000                     
  1339                           ; #config settings
  1340  00FFFE  00                 	db	0	; dummy byte at the end
  1341  0000                     
  1342                           	psect	cinit
  1343  002F6C                     __pcinit:
  1344                           	opt stack 0
  1345  002F6C                     start_initialization:
  1346                           	opt stack 0
  1347  002F6C                     __initialization:
  1348                           	opt stack 0
  1349                           
  1350                           ; Clear objects allocated to BANK0 (27 bytes)
  1351  002F6C  EE00  F0E3         	lfsr	0,__pbssBANK0
  1352  002F70  0E1B               	movlw	27
  1353  002F72                     clear_0:
  1354  002F72  6AEE               	clrf	postinc0,c
  1355  002F74  06E8               	decf	wreg,f,c
  1356  002F76  E1FD               	bnz	clear_0
  1357                           
  1358                           ; Clear objects allocated to COMRAM (43 bytes)
  1359  002F78  EE00  F044         	lfsr	0,__pbssCOMRAM
  1360  002F7C  0E2B               	movlw	43
  1361  002F7E                     clear_1:
  1362  002F7E  6AEE               	clrf	postinc0,c
  1363  002F80  06E8               	decf	wreg,f,c
  1364  002F82  E1FD               	bnz	clear_1
  1365                           
  1366                           ; Initialize objects allocated to BANK1 (60 bytes)
  1367                           ; load TBLPTR registers with __pidataBANK1
  1368  002F84  0EC2               	movlw	low __pidataBANK1
  1369  002F86  6EF6               	movwf	tblptrl,c
  1370  002F88  0E37               	movlw	high __pidataBANK1
  1371  002F8A  6EF7               	movwf	tblptrh,c
  1372  002F8C  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1373  002F8E  6EF8               	movwf	tblptru,c
  1374  002F90  EE01  F000         	lfsr	0,__pdataBANK1
  1375  002F94  EE10 F03C          	lfsr	1,60
  1376  002F98                     copy_data0:
  1377  002F98  0009               	tblrd		*+
  1378  002F9A  CFF5 FFEE          	movff	tablat,postinc0
  1379  002F9E  50E5               	movf	postdec1,w,c
  1380  002FA0  50E1               	movf	fsr1l,w,c
  1381  002FA2  E1FA               	bnz	copy_data0
  1382                           
  1383                           ; Initialize objects allocated to BANK0 (99 bytes)
  1384                           ; load TBLPTR registers with __pidataBANK0
  1385  002FA4  0EC2               	movlw	low __pidataBANK0
  1386  002FA6  6EF6               	movwf	tblptrl,c
  1387  002FA8  0E32               	movlw	high __pidataBANK0
  1388  002FAA  6EF7               	movwf	tblptrh,c
  1389  002FAC  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1390  002FAE  6EF8               	movwf	tblptru,c
  1391  002FB0  EE00  F080         	lfsr	0,__pdataBANK0
  1392  002FB4  EE10 F063          	lfsr	1,99
  1393  002FB8                     copy_data1:
  1394  002FB8  0009               	tblrd		*+
  1395  002FBA  CFF5 FFEE          	movff	tablat,postinc0
  1396  002FBE  50E5               	movf	postdec1,w,c
  1397  002FC0  50E1               	movf	fsr1l,w,c
  1398  002FC2  E1FA               	bnz	copy_data1
  1399                           
  1400                           ; Initialize objects allocated to COMRAM (1 bytes)
  1401                           ; load TBLPTR registers with __pidataCOMRAM
  1402  002FC4  0EA2               	movlw	low __pidataCOMRAM
  1403  002FC6  6EF6               	movwf	tblptrl,c
  1404  002FC8  0E3D               	movlw	high __pidataCOMRAM
  1405  002FCA  6EF7               	movwf	tblptrh,c
  1406  002FCC  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1407  002FCE  6EF8               	movwf	tblptru,c
  1408  002FD0  0009               	tblrd		*+	;fetch initializer
  1409  002FD2  CFF5 F06F          	movff	tablat,__pdataCOMRAM
  1410  002FD6                     end_of_initialization:
  1411                           	opt stack 0
  1412  002FD6                     __end_of__initialization:
  1413                           	opt stack 0
  1414  002FD6  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1415  002FD8  6EF8               	movwf	tblptru,c
  1416  002FDA  0100               	movlb	0
  1417  002FDC  EFB2  F006         	goto	_main	;jump to C main() function
  1418                           tblptru	equ	0xFF8
  1419                           tblptrh	equ	0xFF7
  1420                           tblptrl	equ	0xFF6
  1421                           tablat	equ	0xFF5
  1422                           postinc0	equ	0xFEE
  1423                           wreg	equ	0xFE8
  1424                           postdec1	equ	0xFE5
  1425                           fsr1l	equ	0xFE1
  1426                           
  1427                           	psect	bssCOMRAM
  1428  000044                     __pbssCOMRAM:
  1429                           	opt stack 0
  1430  000044                     _ALARMEN:
  1431                           	opt stack 0
  1432  000044                     	ds	2
  1433  000046                     _DS1621_tempC:
  1434                           	opt stack 0
  1435  000046                     	ds	2
  1436  000048                     _DS1621_tempF:
  1437                           	opt stack 0
  1438  000048                     	ds	2
  1439  00004A                     _Time_Elapsed:
  1440                           	opt stack 0
  1441  00004A                     	ds	2
  1442  00004C                     _rpm:
  1443                           	opt stack 0
  1444  00004C                     	ds	2
  1445  00004E                     _txt:
  1446                           	opt stack 0
  1447  00004E                     	ds	2
  1448  000050                     _HEATER:
  1449                           	opt stack 0
  1450  000050                     	ds	1
  1451  000051                     _Nec_code1:
  1452                           	opt stack 0
  1453  000051                     	ds	1
  1454  000052                     _Nec_state:
  1455                           	opt stack 0
  1456  000052                     	ds	1
  1457  000053                     _Select_Alarm_Field:
  1458                           	opt stack 0
  1459  000053                     	ds	1
  1460  000054                     _Select_Field:
  1461                           	opt stack 0
  1462  000054                     	ds	1
  1463  000055                     __tft_type:
  1464                           	opt stack 0
  1465  000055                     	ds	1
  1466  000056                     _alarm_date:
  1467                           	opt stack 0
  1468  000056                     	ds	1
  1469  000057                     _alarm_hour:
  1470                           	opt stack 0
  1471  000057                     	ds	1
  1472  000058                     _alarm_minute:
  1473                           	opt stack 0
  1474  000058                     	ds	1
  1475  000059                     _alarm_second:
  1476                           	opt stack 0
  1477  000059                     	ds	1
  1478  00005A                     _colstart:
  1479                           	opt stack 0
  1480  00005A                     	ds	1
  1481  00005B                     _day:
  1482                           	opt stack 0
  1483  00005B                     	ds	1
  1484  00005C                     _dow:
  1485                           	opt stack 0
  1486  00005C                     	ds	1
  1487  00005D                     _duty_cycle:
  1488                           	opt stack 0
  1489  00005D                     	ds	1
  1490  00005E                     _found:
  1491                           	opt stack 0
  1492  00005E                     	ds	1
  1493  00005F                     _hour:
  1494                           	opt stack 0
  1495  00005F                     	ds	1
  1496  000060                     _minute:
  1497                           	opt stack 0
  1498  000060                     	ds	1
  1499  000061                     _month:
  1500                           	opt stack 0
  1501  000061                     	ds	1
  1502  000062                     _rowstart:
  1503                           	opt stack 0
  1504  000062                     	ds	1
  1505  000063                     _second:
  1506                           	opt stack 0
  1507  000063                     	ds	1
  1508  000064                     _setup_alarm_hour:
  1509                           	opt stack 0
  1510  000064                     	ds	1
  1511  000065                     _setup_alarm_minute:
  1512                           	opt stack 0
  1513  000065                     	ds	1
  1514  000066                     _setup_alarm_second:
  1515                           	opt stack 0
  1516  000066                     	ds	1
  1517  000067                     _setup_day:
  1518                           	opt stack 0
  1519  000067                     	ds	1
  1520  000068                     _setup_heater_set_temp:
  1521                           	opt stack 0
  1522  000068                     	ds	1
  1523  000069                     _setup_hour:
  1524                           	opt stack 0
  1525  000069                     	ds	1
  1526  00006A                     _setup_minute:
  1527                           	opt stack 0
  1528  00006A                     	ds	1
  1529  00006B                     _setup_month:
  1530                           	opt stack 0
  1531  00006B                     	ds	1
  1532  00006C                     _setup_second:
  1533                           	opt stack 0
  1534  00006C                     	ds	1
  1535  00006D                     _setup_year:
  1536                           	opt stack 0
  1537  00006D                     	ds	1
  1538  00006E                     _year:
  1539                           	opt stack 0
  1540  00006E                     	ds	1
  1541                           tblptru	equ	0xFF8
  1542                           tblptrh	equ	0xFF7
  1543                           tblptrl	equ	0xFF6
  1544                           tablat	equ	0xFF5
  1545                           postinc0	equ	0xFEE
  1546                           wreg	equ	0xFE8
  1547                           postdec1	equ	0xFE5
  1548                           fsr1l	equ	0xFE1
  1549                           
  1550                           	psect	dataCOMRAM
  1551  00006F                     __pdataCOMRAM:
  1552                           	opt stack 0
  1553  00006F                     _heater_set_temp:
  1554                           	opt stack 0
  1555  00006F                     	ds	1
  1556                           tblptru	equ	0xFF8
  1557                           tblptrh	equ	0xFF7
  1558                           tblptrl	equ	0xFF6
  1559                           tablat	equ	0xFF5
  1560                           postinc0	equ	0xFEE
  1561                           wreg	equ	0xFE8
  1562                           postdec1	equ	0xFE5
  1563                           fsr1l	equ	0xFE1
  1564                           
  1565                           	psect	bssBANK0
  1566  0000E3                     __pbssBANK0:
  1567                           	opt stack 0
  1568  0000E3                     _Nec_code:
  1569                           	opt stack 0
  1570  0000E3                     	ds	4
  1571  0000E7                     _volt:
  1572                           	opt stack 0
  1573  0000E7                     	ds	3
  1574  0000EA                     _MATCHED:
  1575                           	opt stack 0
  1576  0000EA                     	ds	2
  1577  0000EC                     _alarm_mode:
  1578                           	opt stack 0
  1579  0000EC                     	ds	2
  1580  0000EE                     _color:
  1581                           	opt stack 0
  1582  0000EE                     	ds	2
  1583  0000F0                     _nbr:
  1584                           	opt stack 0
  1585  0000F0                     	ds	2
  1586  0000F2                     _nec_ok:
  1587                           	opt stack 0
  1588  0000F2                     	ds	2
  1589  0000F4                     _rps:
  1590                           	opt stack 0
  1591  0000F4                     	ds	2
  1592  0000F6                     _FAN:
  1593                           	opt stack 0
  1594  0000F6                     	ds	1
  1595  0000F7                     _INT1_flag:
  1596                           	opt stack 0
  1597  0000F7                     	ds	1
  1598  0000F8                     _INT2_flag:
  1599                           	opt stack 0
  1600  0000F8                     	ds	1
  1601  0000F9                     _In_Alarm_Time_Setup:
  1602                           	opt stack 0
  1603  0000F9                     	ds	1
  1604  0000FA                     _In_Heater_Temp_Setup:
  1605                           	opt stack 0
  1606  0000FA                     	ds	1
  1607  0000FB                     _In_Time_Setup:
  1608                           	opt stack 0
  1609  0000FB                     	ds	1
  1610  0000FC                     _Select_Heater_Temp_Field:
  1611                           	opt stack 0
  1612  0000FC                     	ds	1
  1613  0000FD                     _bit_count:
  1614                           	opt stack 0
  1615  0000FD                     	ds	1
  1616                           tblptru	equ	0xFF8
  1617                           tblptrh	equ	0xFF7
  1618                           tblptrl	equ	0xFF6
  1619                           tablat	equ	0xFF5
  1620                           postinc0	equ	0xFEE
  1621                           wreg	equ	0xFE8
  1622                           postdec1	equ	0xFE5
  1623                           fsr1l	equ	0xFE1
  1624                           
  1625                           	psect	dataBANK0
  1626  000080                     __pdataBANK0:
  1627                           	opt stack 0
  1628  000080                     _tempSecond:
  1629                           	opt stack 0
  1630  000080                     	ds	1
  1631  000081                     _wrap:
  1632                           	opt stack 0
  1633  000081                     	ds	1
  1634  000082                     _alarm_time:
  1635                           	opt stack 0
  1636  000082                     	ds	9
  1637  00008B                     _date:
  1638                           	opt stack 0
  1639  00008B                     	ds	9
  1640  000094                     _setup_alarm_time:
  1641                           	opt stack 0
  1642  000094                     	ds	9
  1643  00009D                     _setup_date:
  1644                           	opt stack 0
  1645  00009D                     	ds	9
  1646  0000A6                     _setup_time:
  1647                           	opt stack 0
  1648  0000A6                     	ds	9
  1649  0000AF                     _time:
  1650                           	opt stack 0
  1651  0000AF                     	ds	9
  1652  0000B8                     _Volt_Txt:
  1653                           	opt stack 0
  1654  0000B8                     	ds	6
  1655  0000BE                     _Heater_Set_Temp_Txt:
  1656                           	opt stack 0
  1657  0000BE                     	ds	5
  1658  0000C3                     _RPM_Txt:
  1659                           	opt stack 0
  1660  0000C3                     	ds	5
  1661  0000C8                     _setup_heater_set_text:
  1662                           	opt stack 0
  1663  0000C8                     	ds	5
  1664  0000CD                     _Alarm_SW_Txt:
  1665                           	opt stack 0
  1666  0000CD                     	ds	4
  1667  0000D1                     _DC_Txt:
  1668                           	opt stack 0
  1669  0000D1                     	ds	4
  1670  0000D5                     _Heater_SW_Txt:
  1671                           	opt stack 0
  1672  0000D5                     	ds	4
  1673  0000D9                     _tempC:
  1674                           	opt stack 0
  1675  0000D9                     	ds	4
  1676  0000DD                     _tempF:
  1677                           	opt stack 0
  1678  0000DD                     	ds	4
  1679  0000E1                     _RTC_ALARM_Txt:
  1680                           	opt stack 0
  1681  0000E1                     	ds	2
  1682                           tblptru	equ	0xFF8
  1683                           tblptrh	equ	0xFF7
  1684                           tblptrl	equ	0xFF6
  1685                           tablat	equ	0xFF5
  1686                           postinc0	equ	0xFEE
  1687                           wreg	equ	0xFE8
  1688                           postdec1	equ	0xFE5
  1689                           fsr1l	equ	0xFE1
  1690                           
  1691                           	psect	dataBANK1
  1692  000100                     __pdataBANK1:
  1693                           	opt stack 0
  1694  000100                     _buffer:
  1695                           	opt stack 0
  1696  000100                     	ds	31
  1697  00011F                     _array1:
  1698                           	opt stack 0
  1699  00011F                     	ds	21
  1700  000134                     _D1:
  1701                           	opt stack 0
  1702  000134                     	ds	8
  1703                           tblptru	equ	0xFF8
  1704                           tblptrh	equ	0xFF7
  1705                           tblptrl	equ	0xFF6
  1706                           tablat	equ	0xFF5
  1707                           postinc0	equ	0xFEE
  1708                           wreg	equ	0xFE8
  1709                           postdec1	equ	0xFE5
  1710                           fsr1l	equ	0xFE1
  1711                           
  1712                           	psect	cstackBANK1
  1713  00013C                     __pcstackBANK1:
  1714                           	opt stack 0
  1715  00013C                     ?___awdiv:
  1716                           	opt stack 0
  1717  00013C                     drawtext@x:
  1718                           	opt stack 0
  1719  00013C                     ___awdiv@dividend:
  1720                           	opt stack 0
  1721                           
  1722                           ; 2 bytes @ 0x0
  1723  00013C                     	ds	1
  1724  00013D                     drawtext@textsize:
  1725                           	opt stack 0
  1726                           
  1727                           ; 2 bytes @ 0x1
  1728  00013D                     	ds	1
  1729  00013E                     ___awdiv@divisor:
  1730                           	opt stack 0
  1731                           
  1732                           ; 2 bytes @ 0x2
  1733  00013E                     	ds	1
  1734  00013F                     drawtext@i:
  1735                           	opt stack 0
  1736                           
  1737                           ; 2 bytes @ 0x3
  1738  00013F                     	ds	1
  1739  000140                     ___awdiv@counter:
  1740                           	opt stack 0
  1741                           
  1742                           ; 1 bytes @ 0x4
  1743  000140                     	ds	1
  1744  000141                     drawtext@cursor_y:
  1745                           	opt stack 0
  1746  000141                     ___awdiv@sign:
  1747                           	opt stack 0
  1748                           
  1749                           ; 1 bytes @ 0x5
  1750  000141                     	ds	1
  1751  000142                     drawtext@cursor_x:
  1752                           	opt stack 0
  1753  000142                     ___awdiv@quotient:
  1754                           	opt stack 0
  1755                           
  1756                           ; 2 bytes @ 0x6
  1757  000142                     	ds	2
  1758  000144                     Update_Setup_Heater_Screen@dc_char1:
  1759                           	opt stack 0
  1760  000144                     dec_2_bcd@bcd:
  1761                           	opt stack 0
  1762  000144                     _Update_Screen$3325:
  1763                           	opt stack 0
  1764                           
  1765                           ; 2 bytes @ 0x8
  1766  000144                     	ds	1
  1767  000145                     Update_Setup_Heater_Screen@dc_char2:
  1768                           	opt stack 0
  1769                           
  1770                           ; 1 bytes @ 0x9
  1771  000145                     	ds	1
  1772  000146                     dec_2_bcd@dec:
  1773                           	opt stack 0
  1774  000146                     Update_Setup_Heater_Screen@dc_char3:
  1775                           	opt stack 0
  1776  000146                     Update_Screen@neg_tempF:
  1777                           	opt stack 0
  1778                           
  1779                           ; 2 bytes @ 0xA
  1780  000146                     	ds	1
  1781  000147                     DS3231_Write_Time@Device:
  1782                           	opt stack 0
  1783  000147                     DS3231_Write_Alarm_Time@Device:
  1784                           	opt stack 0
  1785                           
  1786                           ; 1 bytes @ 0xB
  1787  000147                     	ds	1
  1788  000148                     DS3231_Write_Time@Address:
  1789                           	opt stack 0
  1790  000148                     DS3231_Write_Alarm_Time@Address:
  1791                           	opt stack 0
  1792  000148                     Update_Screen@neg_DS1621_tempC:
  1793                           	opt stack 0
  1794                           
  1795                           ; 1 bytes @ 0xC
  1796  000148                     	ds	1
  1797  000149                     ??_main:
  1798                           
  1799                           ; 0 bytes @ 0xD
  1800  000149                     	ds	2
  1801                           tblptru	equ	0xFF8
  1802                           tblptrh	equ	0xFF7
  1803                           tblptrl	equ	0xFF6
  1804                           tablat	equ	0xFF5
  1805                           postinc0	equ	0xFEE
  1806                           wreg	equ	0xFE8
  1807                           postdec1	equ	0xFE5
  1808                           fsr1l	equ	0xFE1
  1809                           
  1810                           	psect	cstackBANK0
  1811  0000FE                     __pcstackBANK0:
  1812                           	opt stack 0
  1813  0000FE                     ??_dec_2_bcd:
  1814  0000FE                     ??_Do_Setup_Heater_Temp:
  1815  0000FE                     ??_Update_Screen:
  1816  0000FE                     get_RPM@RPS:
  1817                           	opt stack 0
  1818                           
  1819                           ; 2 bytes @ 0x0
  1820  0000FE                     	ds	2
  1821                           tblptru	equ	0xFF8
  1822                           tblptrh	equ	0xFF7
  1823                           tblptrl	equ	0xFF6
  1824                           tablat	equ	0xFF5
  1825                           postinc0	equ	0xFEE
  1826                           wreg	equ	0xFE8
  1827                           postdec1	equ	0xFE5
  1828                           fsr1l	equ	0xFE1
  1829                           
  1830                           	psect	cstackCOMRAM
  1831  000001                     __pcstackCOMRAM:
  1832                           	opt stack 0
  1833  000001                     ??_INT0_isr:
  1834  000001                     
  1835                           ; 2 bytes @ 0x0
  1836  000001                     	ds	2
  1837  000003                     ??_chkisr:
  1838                           
  1839                           ; 0 bytes @ 0x2
  1840  000003                     	ds	14
  1841  000011                     ??_isdigit:
  1842  000011                     ??_bcd_2_dec:
  1843  000011                     ?_strlen:
  1844                           	opt stack 0
  1845  000011                     ?_get_full_ADC:
  1846                           	opt stack 0
  1847  000011                     ?_get_duty_cycle:
  1848                           	opt stack 0
  1849  000011                     ?___wmul:
  1850                           	opt stack 0
  1851  000011                     ?___lwdiv:
  1852                           	opt stack 0
  1853  000011                     ?___ftpack:
  1854                           	opt stack 0
  1855  000011                     I2C_Read@ack:
  1856                           	opt stack 0
  1857  000011                     I2C_Write@outByte:
  1858                           	opt stack 0
  1859  000011                     spiwrite@x:
  1860                           	opt stack 0
  1861  000011                     putch@c:
  1862                           	opt stack 0
  1863  000011                     get_duty_cycle@temp:
  1864                           	opt stack 0
  1865  000011                     Set_RPM_RGB@rpm:
  1866                           	opt stack 0
  1867  000011                     Wait_One_Sec@k:
  1868                           	opt stack 0
  1869  000011                     OpenUSART@spbrg:
  1870                           	opt stack 0
  1871  000011                     ___wmul@multiplier:
  1872                           	opt stack 0
  1873  000011                     ___lwdiv@dividend:
  1874                           	opt stack 0
  1875  000011                     strcpy@to:
  1876                           	opt stack 0
  1877  000011                     strlen@s:
  1878                           	opt stack 0
  1879  000011                     ___ftpack@arg:
  1880                           	opt stack 0
  1881  000011                     ___ftge@ff1:
  1882                           	opt stack 0
  1883  000011                     I2C_Init@c:
  1884                           	opt stack 0
  1885                           
  1886                           ; 4 bytes @ 0x10
  1887  000011                     	ds	1
  1888  000012                     I2C_Read@n:
  1889                           	opt stack 0
  1890  000012                     I2C_Write@n:
  1891                           	opt stack 0
  1892  000012                     spiwrite@spidata:
  1893                           	opt stack 0
  1894  000012                     _isdigit$2956:
  1895                           	opt stack 0
  1896                           
  1897                           ; 1 bytes @ 0x11
  1898  000012                     	ds	1
  1899  000013                     ??_strlen:
  1900  000013                     ??_get_full_ADC:
  1901  000013                     I2C_Read@inByte:
  1902                           	opt stack 0
  1903  000013                     I2C_Write_Address_Write_One_Byte@Address:
  1904                           	opt stack 0
  1905  000013                     I2C_Write_Cmd_Only@Cmd:
  1906                           	opt stack 0
  1907  000013                     I2C_Write_Cmd_Write_Data@Cmd:
  1908                           	opt stack 0
  1909  000013                     write_command@cmd_:
  1910                           	opt stack 0
  1911  000013                     write_data@data_:
  1912                           	opt stack 0
  1913  000013                     Set_RGB_Color@color:
  1914                           	opt stack 0
  1915  000013                     OpenUSART@config:
  1916                           	opt stack 0
  1917  000013                     isdigit@c:
  1918                           	opt stack 0
  1919  000013                     get_duty_cycle@set_temp:
  1920                           	opt stack 0
  1921  000013                     bcd_2_dec@dec:
  1922                           	opt stack 0
  1923  000013                     ___wmul@multiplicand:
  1924                           	opt stack 0
  1925  000013                     ___lwdiv@divisor:
  1926                           	opt stack 0
  1927  000013                     strcpy@from:
  1928                           	opt stack 0
  1929                           
  1930                           ; 2 bytes @ 0x12
  1931  000013                     	ds	1
  1932  000014                     ?_DS1621_Read_Temp:
  1933                           	opt stack 0
  1934  000014                     DS3231_Read_Time@Address:
  1935                           	opt stack 0
  1936  000014                     DS3231_Read_Alarm_Time@Address:
  1937                           	opt stack 0
  1938  000014                     I2C_Write_Address_Read_One_Byte@Address:
  1939                           	opt stack 0
  1940  000014                     I2C_Write_Address_Write_One_Byte@Data_Out:
  1941                           	opt stack 0
  1942  000014                     I2C_Write_Cmd_Only@Device:
  1943                           	opt stack 0
  1944  000014                     I2C_Write_Cmd_Write_Data@Data_Out:
  1945                           	opt stack 0
  1946  000014                     setAddrWindow@y0:
  1947                           	opt stack 0
  1948  000014                     Set_RGB_Color@temp_preserved:
  1949                           	opt stack 0
  1950  000014                     ___ftpack@exp:
  1951                           	opt stack 0
  1952  000014                     ___ftge@ff2:
  1953                           	opt stack 0
  1954                           
  1955                           ; 3 bytes @ 0x13
  1956  000014                     	ds	1
  1957  000015                     ??_get_duty_cycle:
  1958  000015                     DS3231_Read_Time@Device:
  1959                           	opt stack 0
  1960  000015                     DS3231_Read_Alarm_Time@Device:
  1961                           	opt stack 0
  1962  000015                     I2C_Write_Address_Read_One_Byte@Data_Ret:
  1963                           	opt stack 0
  1964  000015                     I2C_Write_Address_Write_One_Byte@Device:
  1965                           	opt stack 0
  1966  000015                     I2C_Write_Cmd_Write_Data@Device:
  1967                           	opt stack 0
  1968  000015                     setAddrWindow@x1:
  1969                           	opt stack 0
  1970  000015                     bcd_2_dec@bcd:
  1971                           	opt stack 0
  1972  000015                     ___ftpack@sign:
  1973                           	opt stack 0
  1974  000015                     get_full_ADC@result:
  1975                           	opt stack 0
  1976  000015                     ___wmul@product:
  1977                           	opt stack 0
  1978  000015                     ___lwdiv@quotient:
  1979                           	opt stack 0
  1980  000015                     strcpy@cp:
  1981                           	opt stack 0
  1982  000015                     strlen@cp:
  1983                           	opt stack 0
  1984                           
  1985                           ; 2 bytes @ 0x14
  1986  000015                     	ds	1
  1987  000016                     ??___ftpack:
  1988  000016                     DS1621_Init@Device:
  1989                           	opt stack 0
  1990  000016                     DS1621_Read_Temp@Cmd:
  1991                           	opt stack 0
  1992  000016                     I2C_Write_Address_Read_One_Byte@Device:
  1993                           	opt stack 0
  1994  000016                     setAddrWindow@y1:
  1995                           	opt stack 0
  1996                           
  1997                           ; 1 bytes @ 0x15
  1998  000016                     	ds	1
  1999  000017                     ??___ftge:
  2000  000017                     DS1621_Read_Temp@Data_Ret:
  2001                           	opt stack 0
  2002  000017                     DS3231_Init@Address_7:
  2003                           	opt stack 0
  2004  000017                     setAddrWindow@x0:
  2005                           	opt stack 0
  2006  000017                     ___lwdiv@counter:
  2007                           	opt stack 0
  2008  000017                     get_duty_cycle@dc:
  2009                           	opt stack 0
  2010  000017                     delay_ms@ms:
  2011                           	opt stack 0
  2012                           
  2013                           ; 2 bytes @ 0x16
  2014  000017                     	ds	1
  2015  000018                     ?___lwmod:
  2016                           	opt stack 0
  2017  000018                     DS1621_Read_Temp@Device:
  2018                           	opt stack 0
  2019  000018                     DS3231_Init@Address_E:
  2020                           	opt stack 0
  2021  000018                     drawPixel@y:
  2022                           	opt stack 0
  2023  000018                     drawFastVLine@y:
  2024                           	opt stack 0
  2025  000018                     fillRectangle@y:
  2026                           	opt stack 0
  2027  000018                     ___lwmod@dividend:
  2028                           	opt stack 0
  2029                           
  2030                           ; 2 bytes @ 0x17
  2031  000018                     	ds	1
  2032  000019                     ??_delay_ms:
  2033  000019                     ?___awtoft:
  2034                           	opt stack 0
  2035  000019                     ?___lbtoft:
  2036                           	opt stack 0
  2037  000019                     DS3231_Init@control_E:
  2038                           	opt stack 0
  2039  000019                     drawFastVLine@h:
  2040                           	opt stack 0
  2041  000019                     fillRectangle@w:
  2042                           	opt stack 0
  2043  000019                     drawPixel@color:
  2044                           	opt stack 0
  2045  000019                     ___awtoft@c:
  2046                           	opt stack 0
  2047                           
  2048                           ; 2 bytes @ 0x18
  2049  000019                     	ds	1
  2050  00001A                     DS3231_Init@Device:
  2051                           	opt stack 0
  2052  00001A                     fillRectangle@h:
  2053                           	opt stack 0
  2054  00001A                     drawFastVLine@color:
  2055                           	opt stack 0
  2056  00001A                     ___lwmod@divisor:
  2057                           	opt stack 0
  2058                           
  2059                           ; 2 bytes @ 0x19
  2060  00001A                     	ds	1
  2061  00001B                     DS3231_Turn_Off_Alarm@Address_E:
  2062                           	opt stack 0
  2063  00001B                     DS3231_Turn_On_Alarm@Address_E:
  2064                           	opt stack 0
  2065  00001B                     drawPixel@x:
  2066                           	opt stack 0
  2067  00001B                     delay_ms@count:
  2068                           	opt stack 0
  2069  00001B                     fillRectangle@color:
  2070                           	opt stack 0
  2071                           
  2072                           ; 2 bytes @ 0x1A
  2073  00001B                     	ds	1
  2074  00001C                     ??_drawFastVLine:
  2075  00001C                     DS3231_Turn_Off_Alarm@Address_F:
  2076                           	opt stack 0
  2077  00001C                     DS3231_Turn_On_Alarm@Address_F:
  2078                           	opt stack 0
  2079  00001C                     ___awtoft@sign:
  2080                           	opt stack 0
  2081  00001C                     ___lbtoft@c:
  2082                           	opt stack 0
  2083  00001C                     ___lwmod@counter:
  2084                           	opt stack 0
  2085  00001C                     drawCircle@x0:
  2086                           	opt stack 0
  2087                           
  2088                           ; 2 bytes @ 0x1B
  2089  00001C                     	ds	1
  2090  00001D                     ??_fillRectangle:
  2091  00001D                     ?_printf:
  2092                           	opt stack 0
  2093  00001D                     ?___ftmul:
  2094                           	opt stack 0
  2095  00001D                     DS3231_Turn_Off_Alarm@control_E:
  2096                           	opt stack 0
  2097  00001D                     DS3231_Turn_On_Alarm@control_E:
  2098                           	opt stack 0
  2099  00001D                     printf@f:
  2100                           	opt stack 0
  2101  00001D                     ___ftmul@f1:
  2102                           	opt stack 0
  2103                           
  2104                           ; 3 bytes @ 0x1C
  2105  00001D                     	ds	1
  2106  00001E                     DS3231_Turn_Off_Alarm@control_F:
  2107                           	opt stack 0
  2108  00001E                     DS3231_Turn_On_Alarm@control_F:
  2109                           	opt stack 0
  2110  00001E                     drawCircle@y0:
  2111                           	opt stack 0
  2112                           
  2113                           ; 2 bytes @ 0x1D
  2114  00001E                     	ds	1
  2115  00001F                     DS3231_Turn_Off_Alarm@Device:
  2116                           	opt stack 0
  2117  00001F                     DS3231_Turn_On_Alarm@Device:
  2118                           	opt stack 0
  2119                           
  2120                           ; 1 bytes @ 0x1E
  2121  00001F                     	ds	1
  2122  000020                     drawFastVLine@hi:
  2123                           	opt stack 0
  2124  000020                     drawCircle@r:
  2125                           	opt stack 0
  2126  000020                     ___ftmul@f2:
  2127                           	opt stack 0
  2128                           
  2129                           ; 3 bytes @ 0x1F
  2130  000020                     	ds	1
  2131  000021                     drawFastVLine@lo:
  2132                           	opt stack 0
  2133  000021                     fillRectangle@hi:
  2134                           	opt stack 0
  2135                           
  2136                           ; 1 bytes @ 0x20
  2137  000021                     	ds	1
  2138  000022                     drawFastVLine@x:
  2139                           	opt stack 0
  2140  000022                     fillRectangle@lo:
  2141                           	opt stack 0
  2142  000022                     drawCircle@color:
  2143                           	opt stack 0
  2144                           
  2145                           ; 2 bytes @ 0x21
  2146  000022                     	ds	1
  2147  000023                     ??___ftmul:
  2148  000023                     fillRect@y:
  2149                           	opt stack 0
  2150  000023                     fillRectangle@x:
  2151                           	opt stack 0
  2152                           
  2153                           ; 1 bytes @ 0x22
  2154  000023                     	ds	1
  2155  000024                     ??_drawCircle:
  2156  000024                     fillRect@w:
  2157                           	opt stack 0
  2158  000024                     fillScreen@color:
  2159                           	opt stack 0
  2160                           
  2161                           ; 2 bytes @ 0x23
  2162  000024                     	ds	1
  2163  000025                     fillRect@h:
  2164                           	opt stack 0
  2165                           
  2166                           ; 1 bytes @ 0x24
  2167  000025                     	ds	1
  2168  000026                     ___ftmul@exp:
  2169                           	opt stack 0
  2170  000026                     fillRect@color:
  2171                           	opt stack 0
  2172  000026                     drawCircle@ddF_x:
  2173                           	opt stack 0
  2174                           
  2175                           ; 2 bytes @ 0x25
  2176  000026                     	ds	1
  2177  000027                     ___ftmul@f3_as_product:
  2178                           	opt stack 0
  2179                           
  2180                           ; 3 bytes @ 0x26
  2181  000027                     	ds	1
  2182  000028                     ??_fillRect:
  2183  000028                     drawCircle@ddF_y:
  2184                           	opt stack 0
  2185                           
  2186                           ; 2 bytes @ 0x27
  2187  000028                     	ds	2
  2188  00002A                     ___ftmul@cntr:
  2189                           	opt stack 0
  2190  00002A                     drawCircle@f:
  2191                           	opt stack 0
  2192                           
  2193                           ; 2 bytes @ 0x29
  2194  00002A                     	ds	1
  2195  00002B                     ??_printf:
  2196  00002B                     fillRect@x:
  2197                           	opt stack 0
  2198  00002B                     ___ftmul@sign:
  2199                           	opt stack 0
  2200                           
  2201                           ; 1 bytes @ 0x2A
  2202  00002B                     	ds	1
  2203  00002C                     ?___ftdiv:
  2204                           	opt stack 0
  2205  00002C                     ?___fttol:
  2206                           	opt stack 0
  2207  00002C                     fillRect@i:
  2208                           	opt stack 0
  2209  00002C                     drawCircle@x:
  2210                           	opt stack 0
  2211  00002C                     ___ftdiv@f1:
  2212                           	opt stack 0
  2213  00002C                     ___fttol@f1:
  2214                           	opt stack 0
  2215                           
  2216                           ; 3 bytes @ 0x2B
  2217  00002C                     	ds	2
  2218  00002E                     drawChar@y:
  2219                           	opt stack 0
  2220  00002E                     Update_Setup_Screen_Cursor_Forward@field:
  2221                           	opt stack 0
  2222  00002E                     Update_Setup_Screen_Cursor_Backward@field:
  2223                           	opt stack 0
  2224  00002E                     drawCircle@y:
  2225                           	opt stack 0
  2226                           
  2227                           ; 2 bytes @ 0x2D
  2228  00002E                     	ds	1
  2229  00002F                     drawChar@c:
  2230                           	opt stack 0
  2231  00002F                     Update_Setup_Screen_Cursor_Forward@yinc:
  2232                           	opt stack 0
  2233  00002F                     Update_Setup_Screen_Cursor_Backward@yinc:
  2234                           	opt stack 0
  2235  00002F                     printf@idx:
  2236                           	opt stack 0
  2237  00002F                     ___ftdiv@f2:
  2238                           	opt stack 0
  2239                           
  2240                           ; 3 bytes @ 0x2E
  2241  00002F                     	ds	1
  2242  000030                     ??___fttol:
  2243  000030                     Update_Setup_Screen_Cursor_Forward@xinc:
  2244                           	opt stack 0
  2245  000030                     Update_Setup_Screen_Cursor_Backward@xinc:
  2246                           	opt stack 0
  2247  000030                     drawChar@color:
  2248                           	opt stack 0
  2249  000030                     printf@ap:
  2250                           	opt stack 0
  2251                           
  2252                           ; 2 bytes @ 0x2F
  2253  000030                     	ds	1
  2254  000031                     
  2255                           ; 0 bytes @ 0x30
  2256  000031                     	ds	1
  2257  000032                     ??___ftdiv:
  2258  000032                     printf@prec:
  2259                           	opt stack 0
  2260  000032                     drawChar@bg:
  2261                           	opt stack 0
  2262                           
  2263                           ; 2 bytes @ 0x31
  2264  000032                     	ds	1
  2265  000033                     printf@val:
  2266                           	opt stack 0
  2267                           
  2268                           ; 2 bytes @ 0x32
  2269  000033                     	ds	1
  2270  000034                     drawChar@size:
  2271                           	opt stack 0
  2272                           
  2273                           ; 1 bytes @ 0x33
  2274  000034                     	ds	1
  2275  000035                     drawChar@line:
  2276                           	opt stack 0
  2277  000035                     printf@flag:
  2278                           	opt stack 0
  2279  000035                     ___ftdiv@cntr:
  2280                           	opt stack 0
  2281  000035                     ___fttol@sign1:
  2282                           	opt stack 0
  2283                           
  2284                           ; 1 bytes @ 0x34
  2285  000035                     	ds	1
  2286  000036                     drawChar@x:
  2287                           	opt stack 0
  2288  000036                     printf@width:
  2289                           	opt stack 0
  2290  000036                     ___ftdiv@f3:
  2291                           	opt stack 0
  2292  000036                     ___fttol@lval:
  2293                           	opt stack 0
  2294                           
  2295                           ; 4 bytes @ 0x35
  2296  000036                     	ds	1
  2297  000037                     drawChar@j:
  2298                           	opt stack 0
  2299                           
  2300                           ; 1 bytes @ 0x36
  2301  000037                     	ds	1
  2302  000038                     drawChar@i:
  2303                           	opt stack 0
  2304  000038                     printf@c:
  2305                           	opt stack 0
  2306                           
  2307                           ; 1 bytes @ 0x37
  2308  000038                     	ds	1
  2309  000039                     drawtext@y:
  2310                           	opt stack 0
  2311  000039                     ___ftdiv@exp:
  2312                           	opt stack 0
  2313                           
  2314                           ; 1 bytes @ 0x38
  2315  000039                     	ds	1
  2316  00003A                     ___ftdiv@sign:
  2317                           	opt stack 0
  2318  00003A                     ___fttol@exp1:
  2319                           	opt stack 0
  2320  00003A                     drawtext@_text:
  2321                           	opt stack 0
  2322  00003A                     check_for_button_input@j:
  2323                           	opt stack 0
  2324                           
  2325                           ; 2 bytes @ 0x39
  2326  00003A                     	ds	1
  2327  00003B                     ??_do_update_pwm:
  2328  00003B                     ?___awmod:
  2329                           	opt stack 0
  2330  00003B                     ?_read_volt:
  2331                           	opt stack 0
  2332  00003B                     ___awmod@dividend:
  2333                           	opt stack 0
  2334                           
  2335                           ; 2 bytes @ 0x3A
  2336  00003B                     	ds	1
  2337  00003C                     drawtext@color:
  2338                           	opt stack 0
  2339                           
  2340                           ; 2 bytes @ 0x3B
  2341  00003C                     	ds	1
  2342  00003D                     ___awmod@divisor:
  2343                           	opt stack 0
  2344                           
  2345                           ; 2 bytes @ 0x3C
  2346  00003D                     	ds	1
  2347  00003E                     drawtext@bg:
  2348                           	opt stack 0
  2349  00003E                     do_update_pwm@dc_f:
  2350                           	opt stack 0
  2351  00003E                     read_volt@volt:
  2352                           	opt stack 0
  2353                           
  2354                           ; 3 bytes @ 0x3D
  2355  00003E                     	ds	1
  2356  00003F                     ___awmod@counter:
  2357                           	opt stack 0
  2358                           
  2359                           ; 1 bytes @ 0x3E
  2360  00003F                     	ds	1
  2361  000040                     drawtext@size:
  2362                           	opt stack 0
  2363  000040                     ___awmod@sign:
  2364                           	opt stack 0
  2365                           
  2366                           ; 1 bytes @ 0x3F
  2367  000040                     	ds	1
  2368  000041                     ??_drawtext:
  2369  000041                     ?_dec_2_bcd:
  2370                           	opt stack 0
  2371  000041                     ?_get_RPM:
  2372                           	opt stack 0
  2373  000041                     do_update_pwm@duty_cycle:
  2374                           	opt stack 0
  2375  000041                     read_volt@nStep:
  2376                           	opt stack 0
  2377                           
  2378                           ; 2 bytes @ 0x40
  2379  000041                     	ds	1
  2380  000042                     do_update_pwm@dc_I:
  2381                           	opt stack 0
  2382                           
  2383                           ; 2 bytes @ 0x41
  2384  000042                     	ds	1
  2385  000043                     
  2386                           ; 0 bytes @ 0x42
  2387  000043                     	ds	1
  2388  000044                     tblptru	equ	0xFF8
  2389                           tblptrh	equ	0xFF7
  2390                           tblptrl	equ	0xFF6
  2391                           tablat	equ	0xFF5
  2392                           postinc0	equ	0xFEE
  2393                           wreg	equ	0xFE8
  2394                           postdec1	equ	0xFE5
  2395                           fsr1l	equ	0xFE1
  2396                           
  2397                           ; 0 bytes @ 0x43
  2398 ;;
  2399 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2400 ;;
  2401 ;; *************** function _main *****************
  2402 ;; Defined at:
  2403 ;;		line 136 in file "LabFinal.c"
  2404 ;; Parameters:    Size  Location     Type
  2405 ;;		None
  2406 ;; Auto vars:     Size  Location     Type
  2407 ;;		None
  2408 ;; Return value:  Size  Location     Type
  2409 ;;		None               void
  2410 ;; Registers used:
  2411 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2412 ;; Tracked objects:
  2413 ;;		On entry : 0/0
  2414 ;;		On exit  : 0/0
  2415 ;;		Unchanged: 0/0
  2416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2417 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2418 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2419 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2420 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2421 ;;Total ram usage:        2 bytes
  2422 ;; Hardware stack levels required when called:   13
  2423 ;; This function calls:
  2424 ;;		_DS1621_Read_Temp
  2425 ;;		_DS3231_Read_Alarm_Time
  2426 ;;		_DS3231_Read_Time
  2427 ;;		_DS3231_Turn_Off_Alarm
  2428 ;;		_Do_Beep_Bad
  2429 ;;		_Do_Beep_Good
  2430 ;;		_Do_Init
  2431 ;;		_Do_Setup_Alarm_Time
  2432 ;;		_Do_Setup_Heater_Temp
  2433 ;;		_Do_Setup_Time
  2434 ;;		_Initialize_Screen
  2435 ;;		_Monitor_Heater
  2436 ;;		_Set_RPM_RGB
  2437 ;;		_Test_Alarm
  2438 ;;		_Toggle_Heater
  2439 ;;		_Update_Screen
  2440 ;;		___awdiv
  2441 ;;		___wmul
  2442 ;;		_check_for_button_input
  2443 ;;		_get_RPM
  2444 ;;		_printf
  2445 ;;		_read_volt
  2446 ;; This function is called by:
  2447 ;;		Startup code after reset
  2448 ;; This function uses a non-reentrant model
  2449 ;;
  2450                           
  2451                           	psect	text0
  2452  000D64                     __ptext0:
  2453                           	opt stack 0
  2454  000D64                     _main:
  2455                           	opt stack 18
  2456                           
  2457                           ;LabFinal.c: 138: Do_Init();
  2458                           
  2459                           ;incstack = 0
  2460  000D64  ECF0  F017         	call	_Do_Init	;wreg free
  2461                           
  2462                           ;LabFinal.c: 139: Initialize_Screen();
  2463  000D68  EC45  F003         	call	_Initialize_Screen	;wreg free
  2464                           
  2465                           ;LabFinal.c: 140: DS3231_Turn_Off_Alarm();
  2466  000D6C  ECEA  F019         	call	_DS3231_Turn_Off_Alarm	;wreg free
  2467                           
  2468                           ;LabFinal.c: 141: DS3231_Read_Alarm_Time();
  2469  000D70  EC8A  F01A         	call	_DS3231_Read_Alarm_Time	;wreg free
  2470                           
  2471                           ;LabFinal.c: 143: tempSecond = 0xff;
  2472  000D74  0100               	movlb	0	; () banked
  2473  000D76  6980               	setf	_tempSecond& (0+255),b
  2474  000D78  D000               	goto	l10233
  2475  000D7A                     l10233:
  2476                           
  2477                           ; BSR set to: 0
  2478                           ;LabFinal.c: 145: {
  2479                           ;LabFinal.c: 146: DS3231_Read_Time();
  2480  000D7A  EC2F  F019         	call	_DS3231_Read_Time	;wreg free
  2481                           
  2482                           ;LabFinal.c: 148: if(tempSecond != second)
  2483  000D7E  5063               	movf	_second,w,c
  2484  000D80  0100               	movlb	0	; () banked
  2485  000D82  1980               	xorwf	_tempSecond& (0+255),w,b
  2486  000D84  B4D8               	btfsc	status,2,c
  2487  000D86  D0A7               	goto	l10265
  2488                           
  2489                           ; BSR set to: 0
  2490                           ;LabFinal.c: 149: {
  2491                           ;LabFinal.c: 150: tempSecond = second;
  2492  000D88  C063  F080         	movff	_second,_tempSecond
  2493                           
  2494                           ; BSR set to: 0
  2495                           ;LabFinal.c: 151: rpm = get_RPM();
  2496  000D8C  EC43  F01B         	call	_get_RPM	;wreg free
  2497  000D90  C041  F04C         	movff	?_get_RPM,_rpm
  2498  000D94  C042  F04D         	movff	?_get_RPM+1,_rpm+1
  2499                           
  2500                           ;LabFinal.c: 152: volt = read_volt();
  2501  000D98  ECFD  F018         	call	_read_volt	;wreg free
  2502  000D9C  C03B  F0E7         	movff	?_read_volt,_volt
  2503  000DA0  C03C  F0E8         	movff	?_read_volt+1,_volt+1
  2504  000DA4  C03D  F0E9         	movff	?_read_volt+2,_volt+2
  2505                           
  2506                           ;LabFinal.c: 157: DS1621_tempC = DS1621_Read_Temp();
  2507  000DA8  EC1D  F01C         	call	_DS1621_Read_Temp	;wreg free
  2508  000DAC  C014  F046         	movff	?_DS1621_Read_Temp,_DS1621_tempC
  2509  000DB0  C015  F047         	movff	?_DS1621_Read_Temp+1,_DS1621_tempC+1
  2510                           
  2511                           ;LabFinal.c: 158: if ((DS1621_tempC & 0x80) == 0x80) DS1621_tempC = - (0x80 - DS1621_tem
      +                          pC & 0x7f);
  2512  000DB4  AE46               	btfss	_DS1621_tempC,7,c
  2513  000DB6  D01D               	goto	l10247
  2514  000DB8  C046  F149         	movff	_DS1621_tempC,??_main
  2515  000DBC  C047  F14A         	movff	_DS1621_tempC+1,??_main+1
  2516  000DC0  0101               	movlb	1	; () banked
  2517  000DC2  1F49               	comf	??_main& (0+255),f,b
  2518  000DC4  1F4A               	comf	(??_main+1)& (0+255),f,b
  2519  000DC6  4B49               	infsnz	??_main& (0+255),f,b
  2520  000DC8  2B4A               	incf	(??_main+1)& (0+255),f,b
  2521  000DCA  0E80               	movlw	128
  2522  000DCC  0101               	movlb	1	; () banked
  2523  000DCE  2749               	addwf	??_main& (0+255),f,b
  2524  000DD0  0E00               	movlw	0
  2525  000DD2  234A               	addwfc	(??_main+1)& (0+255),f,b
  2526  000DD4  0E7F               	movlw	127
  2527  000DD6  0101               	movlb	1	; () banked
  2528  000DD8  1749               	andwf	??_main& (0+255),f,b
  2529  000DDA  0E00               	movlw	0
  2530  000DDC  174A               	andwf	(??_main+1)& (0+255),f,b
  2531  000DDE  0101               	movlb	1	; () banked
  2532  000DE0  1F49               	comf	??_main& (0+255),f,b
  2533  000DE2  1F4A               	comf	(??_main+1)& (0+255),f,b
  2534  000DE4  4B49               	infsnz	??_main& (0+255),f,b
  2535  000DE6  2B4A               	incf	(??_main+1)& (0+255),f,b
  2536  000DE8  C149  F046         	movff	??_main,_DS1621_tempC
  2537  000DEC  C14A  F047         	movff	??_main+1,_DS1621_tempC+1
  2538  000DF0  D000               	goto	l10247
  2539  000DF2                     l10247:
  2540                           
  2541                           ;LabFinal.c: 159: DS1621_tempF = (DS1621_tempC * 9 / 5) + 32;
  2542  000DF2  C046  F011         	movff	_DS1621_tempC,___wmul@multiplier
  2543  000DF6  C047  F012         	movff	_DS1621_tempC+1,___wmul@multiplier+1
  2544  000DFA  0E00               	movlw	0
  2545  000DFC  6E14               	movwf	___wmul@multiplicand+1,c
  2546  000DFE  0E09               	movlw	9
  2547  000E00  6E13               	movwf	___wmul@multiplicand,c
  2548  000E02  ECC7  F01C         	call	___wmul	;wreg free
  2549  000E06  C011  F13C         	movff	?___wmul,___awdiv@dividend
  2550  000E0A  C012  F13D         	movff	?___wmul+1,___awdiv@dividend+1
  2551  000E0E  0E00               	movlw	0
  2552  000E10  0101               	movlb	1	; () banked
  2553  000E12  6F3F               	movwf	(___awdiv@divisor+1)& (0+255),b
  2554  000E14  0E05               	movlw	5
  2555  000E16  6F3E               	movwf	___awdiv@divisor& (0+255),b
  2556  000E18  EC5E  F012         	call	___awdiv	;wreg free
  2557  000E1C  0E20               	movlw	32
  2558  000E1E  0101               	movlb	1	; () banked
  2559  000E20  253C               	addwf	?___awdiv& (0+255),w,b
  2560  000E22  6E48               	movwf	_DS1621_tempF,c
  2561  000E24  0E00               	movlw	0
  2562  000E26  0101               	movlb	1	; () banked
  2563  000E28  213D               	addwfc	(?___awdiv+1)& (0+255),w,b
  2564  000E2A  6E49               	movwf	_DS1621_tempF+1,c
  2565                           
  2566                           ; BSR set to: 1
  2567                           ;LabFinal.c: 161: printf ("%02x:%02x:%02x %02x/%02x/%02x",hour,minute,second,month,day,y
      +                          ear);
  2568  000E2C  0E7A               	movlw	low STR_21
  2569  000E2E  6E1D               	movwf	printf@f,c
  2570  000E30  0EFE               	movlw	high STR_21
  2571  000E32  6E1E               	movwf	printf@f+1,c
  2572  000E34  C05F  F01F         	movff	_hour,?_printf+2
  2573  000E38  6A20               	clrf	?_printf+3,c
  2574  000E3A  C060  F021         	movff	_minute,?_printf+4
  2575  000E3E  6A22               	clrf	?_printf+5,c
  2576  000E40  C063  F023         	movff	_second,?_printf+6
  2577  000E44  6A24               	clrf	?_printf+7,c
  2578  000E46  C061  F025         	movff	_month,?_printf+8
  2579  000E4A  6A26               	clrf	?_printf+9,c
  2580  000E4C  C05B  F027         	movff	_day,?_printf+10
  2581  000E50  6A28               	clrf	?_printf+11,c
  2582  000E52  C06E  F029         	movff	_year,?_printf+12
  2583  000E56  6A2A               	clrf	?_printf+13,c
  2584  000E58  EC05  F005         	call	_printf	;wreg free
  2585                           
  2586                           ;LabFinal.c: 162: printf (" Temp = %d C = %d F ,", DS1621_tempC, DS1621_tempF);
  2587  000E5C  0EB1               	movlw	low STR_22
  2588  000E5E  6E1D               	movwf	printf@f,c
  2589  000E60  0EFE               	movlw	high STR_22
  2590  000E62  6E1E               	movwf	printf@f+1,c
  2591  000E64  C046  F01F         	movff	_DS1621_tempC,?_printf+2
  2592  000E68  C047  F020         	movff	_DS1621_tempC+1,?_printf+3
  2593  000E6C  C048  F021         	movff	_DS1621_tempF,?_printf+4
  2594  000E70  C049  F022         	movff	_DS1621_tempF+1,?_printf+5
  2595  000E74  EC05  F005         	call	_printf	;wreg free
  2596                           
  2597                           ;LabFinal.c: 163: printf ("alarm = %d Heater = %d ,", PORTCbits.RC1, HEATER);
  2598  000E78  0E98               	movlw	low STR_23
  2599  000E7A  6E1D               	movwf	printf@f,c
  2600  000E7C  0EFE               	movlw	high STR_23
  2601  000E7E  6E1E               	movwf	printf@f+1,c
  2602  000E80  A282               	btfss	3970,1,c	;volatile
  2603  000E82  D004               	goto	u7320
  2604  000E84  0101               	movlb	1	; () banked
  2605  000E86  6B49               	clrf	??_main& (0+255),b
  2606  000E88  2B49               	incf	??_main& (0+255),f,b
  2607  000E8A  D002               	goto	u7328
  2608  000E8C                     u7320:
  2609  000E8C  0101               	movlb	1	; () banked
  2610  000E8E  6B49               	clrf	??_main& (0+255),b
  2611  000E90                     u7328:
  2612  000E90  0101               	movlb	1	; () banked
  2613  000E92  5149               	movf	??_main& (0+255),w,b
  2614  000E94  6E1F               	movwf	?_printf+2,c
  2615  000E96  6A20               	clrf	?_printf+3,c
  2616  000E98  C050  F021         	movff	_HEATER,?_printf+4
  2617  000E9C  6A22               	clrf	?_printf+5,c
  2618  000E9E  EC05  F005         	call	_printf	;wreg free
  2619                           
  2620                           ;LabFinal.c: 164: printf ("RPM = %d  dc = %d\r\n", rpm, duty_cycle);
  2621  000EA2  0E1B               	movlw	low STR_24
  2622  000EA4  6E1D               	movwf	printf@f,c
  2623  000EA6  0EFF               	movlw	high STR_24
  2624  000EA8  6E1E               	movwf	printf@f+1,c
  2625  000EAA  C04C  F01F         	movff	_rpm,?_printf+2
  2626  000EAE  C04D  F020         	movff	_rpm+1,?_printf+3
  2627  000EB2  C05D  F021         	movff	_duty_cycle,?_printf+4
  2628  000EB6  6A22               	clrf	?_printf+5,c
  2629  000EB8  EC05  F005         	call	_printf	;wreg free
  2630                           
  2631                           ;LabFinal.c: 166: Set_RPM_RGB(rpm);
  2632  000EBC  C04C  F011         	movff	_rpm,Set_RPM_RGB@rpm
  2633  000EC0  C04D  F012         	movff	_rpm+1,Set_RPM_RGB@rpm+1
  2634  000EC4  EC60  F018         	call	_Set_RPM_RGB	;wreg free
  2635                           
  2636                           ;LabFinal.c: 167: Monitor_Heater();
  2637  000EC8  EC6D  F01C         	call	_Monitor_Heater	;wreg free
  2638                           
  2639                           ;LabFinal.c: 168: Test_Alarm();
  2640  000ECC  EC78  F00C         	call	_Test_Alarm	;wreg free
  2641                           
  2642                           ;LabFinal.c: 169: Update_Screen();
  2643  000ED0  EC0E  F000         	call	_Update_Screen	;wreg free
  2644  000ED4  D000               	goto	l10265
  2645  000ED6                     l10265:
  2646                           
  2647                           ;LabFinal.c: 170: }
  2648                           ;LabFinal.c: 172: if (check_for_button_input() == 1)
  2649  000ED6  EC20  F016         	call	_check_for_button_input	;wreg free
  2650  000EDA  06E8               	decf	wreg,f,c
  2651  000EDC  A4D8               	btfss	status,2,c
  2652  000EDE  D02C               	goto	l10291
  2653                           
  2654                           ;LabFinal.c: 173: {
  2655                           ;LabFinal.c: 175: nec_ok = 0;
  2656  000EE0  0E00               	movlw	0
  2657  000EE2  0100               	movlb	0	; () banked
  2658  000EE4  6FF3               	movwf	(_nec_ok+1)& (0+255),b
  2659  000EE6  0E00               	movlw	0
  2660  000EE8  6FF2               	movwf	_nec_ok& (0+255),b
  2661                           
  2662                           ;LabFinal.c: 176: switch (found)
  2663  000EEA  D017               	goto	l10289
  2664  000EEC                     l10269:
  2665                           
  2666                           ;LabFinal.c: 179: Do_Beep_Good();
  2667  000EEC  ECBA  F01D         	call	_Do_Beep_Good	;wreg free
  2668                           
  2669                           ;LabFinal.c: 180: Do_Setup_Time();
  2670  000EF0  ECC6  F012         	call	_Do_Setup_Time	;wreg free
  2671                           
  2672                           ;LabFinal.c: 181: break;
  2673  000EF4  D021               	goto	l10291
  2674  000EF6                     l10273:
  2675                           
  2676                           ;LabFinal.c: 184: Do_Beep_Good();
  2677  000EF6  ECBA  F01D         	call	_Do_Beep_Good	;wreg free
  2678                           
  2679                           ;LabFinal.c: 185: Do_Setup_Alarm_Time();
  2680  000EFA  EC8E  F013         	call	_Do_Setup_Alarm_Time	;wreg free
  2681                           
  2682                           ;LabFinal.c: 186: break;
  2683  000EFE  D01C               	goto	l10291
  2684  000F00                     l10277:
  2685                           
  2686                           ;LabFinal.c: 189: Do_Beep_Good();
  2687  000F00  ECBA  F01D         	call	_Do_Beep_Good	;wreg free
  2688                           
  2689                           ;LabFinal.c: 190: Do_Setup_Heater_Temp();
  2690  000F04  EC45  F015         	call	_Do_Setup_Heater_Temp	;wreg free
  2691                           
  2692                           ;LabFinal.c: 191: break;
  2693  000F08  D017               	goto	l10291
  2694  000F0A                     l10281:
  2695                           
  2696                           ;LabFinal.c: 194: Do_Beep_Good();
  2697  000F0A  ECBA  F01D         	call	_Do_Beep_Good	;wreg free
  2698                           
  2699                           ;LabFinal.c: 195: Toggle_Heater();
  2700  000F0E  EC58  F01E         	call	_Toggle_Heater	;wreg free
  2701                           
  2702                           ;LabFinal.c: 196: break;
  2703  000F12  D012               	goto	l10291
  2704  000F14                     l10285:
  2705                           
  2706                           ;LabFinal.c: 199: Do_Beep_Bad();
  2707  000F14  ECC6  F01D         	call	_Do_Beep_Bad	;wreg free
  2708                           
  2709                           ;LabFinal.c: 201: }
  2710                           
  2711                           ;LabFinal.c: 200: break;
  2712  000F18  D00F               	goto	l10291
  2713  000F1A                     l10289:
  2714  000F1A  505E               	movf	_found,w,c
  2715                           
  2716                           ; Switch size 1, requested type "space"
  2717                           ; Number of cases is 4, Range of values is 0 to 5
  2718                           ; switch strategies available:
  2719                           ; Name         Instructions Cycles
  2720                           ; simple_byte           13     7 (average)
  2721                           ;	Chosen strategy is simple_byte
  2722  000F1C  0A00               	xorlw	0	; case 0
  2723  000F1E  B4D8               	btfsc	status,2,c
  2724  000F20  D7E5               	goto	l10269
  2725  000F22  0A01               	xorlw	1	; case 1
  2726  000F24  B4D8               	btfsc	status,2,c
  2727  000F26  D7E7               	goto	l10273
  2728  000F28  0A03               	xorlw	3	; case 2
  2729  000F2A  B4D8               	btfsc	status,2,c
  2730  000F2C  D7E9               	goto	l10277
  2731  000F2E  0A07               	xorlw	7	; case 5
  2732  000F30  B4D8               	btfsc	status,2,c
  2733  000F32  D7EB               	goto	l10281
  2734  000F34  D7EF               	goto	l10285
  2735  000F36  D000               	goto	l10291
  2736  000F38                     l10291:
  2737                           
  2738                           ;LabFinal.c: 202: }
  2739                           ;LabFinal.c: 206: if (INT1_flag == 1)
  2740  000F38  0100               	movlb	0	; () banked
  2741  000F3A  05F7               	decf	_INT1_flag& (0+255),w,b
  2742  000F3C  A4D8               	btfss	status,2,c
  2743  000F3E  D71D               	goto	l10233
  2744                           
  2745                           ; BSR set to: 0
  2746                           ;LabFinal.c: 207: {
  2747                           ;LabFinal.c: 208: INT1_flag = 0;
  2748  000F40  0E00               	movlw	0
  2749  000F42  0100               	movlb	0	; () banked
  2750  000F44  6FF7               	movwf	_INT1_flag& (0+255),b
  2751                           
  2752                           ; BSR set to: 0
  2753                           ;LabFinal.c: 209: ALARMEN = (!ALARMEN);
  2754  000F46  5044               	movf	_ALARMEN,w,c
  2755  000F48  1045               	iorwf	_ALARMEN+1,w,c
  2756  000F4A  A4D8               	btfss	status,2,c
  2757  000F4C  D002               	goto	u7350
  2758  000F4E  0E01               	movlw	1
  2759  000F50  D001               	goto	u7360
  2760  000F52                     u7350:
  2761  000F52  0E00               	movlw	0
  2762  000F54                     u7360:
  2763  000F54  6E44               	movwf	_ALARMEN,c
  2764  000F56  6A45               	clrf	_ALARMEN+1,c
  2765                           
  2766                           ; BSR set to: 0
  2767                           
  2768                           ; BSR set to: 0
  2769  000F58  D710               	goto	l10233
  2770                           
  2771                           ; BSR set to: 0
  2772                           
  2773                           ; BSR set to: 0
  2774  000F5A  EF0C  F000         	goto	start
  2775  000F5E                     __end_of_main:
  2776                           	opt stack 0
  2777                           tblptru	equ	0xFF8
  2778                           tblptrh	equ	0xFF7
  2779                           tblptrl	equ	0xFF6
  2780                           tablat	equ	0xFF5
  2781                           postinc0	equ	0xFEE
  2782                           wreg	equ	0xFE8
  2783                           postdec1	equ	0xFE5
  2784                           fsr1l	equ	0xFE1
  2785                           status	equ	0xFD8
  2786                           
  2787 ;; *************** function _get_RPM *****************
  2788 ;; Defined at:
  2789 ;;		line 56 in file "Fan_Support.c"
  2790 ;; Parameters:    Size  Location     Type
  2791 ;;		None
  2792 ;; Auto vars:     Size  Location     Type
  2793 ;;  RPS             2    0[BANK0 ] int 
  2794 ;; Return value:  Size  Location     Type
  2795 ;;                  2   64[COMRAM] int 
  2796 ;; Registers used:
  2797 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2798 ;; Tracked objects:
  2799 ;;		On entry : 0/0
  2800 ;;		On exit  : 0/0
  2801 ;;		Unchanged: 0/0
  2802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2803 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2804 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2805 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2806 ;;      Totals:         2       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2807 ;;Total ram usage:        4 bytes
  2808 ;; Hardware stack levels used:    1
  2809 ;; Hardware stack levels required when called:    4
  2810 ;; This function calls:
  2811 ;;		___awdiv
  2812 ;;		___wmul
  2813 ;; This function is called by:
  2814 ;;		_main
  2815 ;; This function uses a non-reentrant model
  2816 ;;
  2817                           
  2818                           	psect	text1
  2819  003686                     __ptext1:
  2820                           	opt stack 0
  2821  003686                     _get_RPM:
  2822                           	opt stack 26
  2823                           
  2824                           ;Fan_Support.c: 59: int RPS = TMR3L / 2;
  2825                           
  2826                           ; BSR set to: 0
  2827                           ;incstack = 0
  2828  003686  CFB2 F13C          	movff	4018,___awdiv@dividend	;volatile
  2829  00368A  0101               	movlb	1	; () banked
  2830  00368C  6B3D               	clrf	(___awdiv@dividend+1)& (0+255),b
  2831  00368E  0E00               	movlw	0
  2832  003690  0101               	movlb	1	; () banked
  2833  003692  6F3F               	movwf	(___awdiv@divisor+1)& (0+255),b
  2834  003694  0E02               	movlw	2
  2835  003696  6F3E               	movwf	___awdiv@divisor& (0+255),b
  2836  003698  EC5E  F012         	call	___awdiv	;wreg free
  2837  00369C  C13C  F0FE         	movff	?___awdiv,get_RPM@RPS
  2838  0036A0  C13D  F0FF         	movff	?___awdiv+1,get_RPM@RPS+1
  2839                           
  2840                           ;Fan_Support.c: 61: TMR3L = 0;
  2841  0036A4  0E00               	movlw	0
  2842  0036A6  6EB2               	movwf	4018,c	;volatile
  2843                           
  2844                           ;Fan_Support.c: 62: return (RPS * 60);
  2845  0036A8  C0FE  F011         	movff	get_RPM@RPS,___wmul@multiplier
  2846  0036AC  C0FF  F012         	movff	get_RPM@RPS+1,___wmul@multiplier+1
  2847  0036B0  0E00               	movlw	0
  2848  0036B2  6E14               	movwf	___wmul@multiplicand+1,c
  2849  0036B4  0E3C               	movlw	60
  2850  0036B6  6E13               	movwf	___wmul@multiplicand,c
  2851  0036B8  ECC7  F01C         	call	___wmul	;wreg free
  2852  0036BC  C011  F041         	movff	?___wmul,?_get_RPM
  2853  0036C0  C012  F042         	movff	?___wmul+1,?_get_RPM+1
  2854  0036C4  D000               	goto	l295
  2855  0036C6                     l295:
  2856  0036C6  0012               	return		;funcret
  2857  0036C8                     __end_of_get_RPM:
  2858                           	opt stack 0
  2859                           tblptru	equ	0xFF8
  2860                           tblptrh	equ	0xFF7
  2861                           tblptrl	equ	0xFF6
  2862                           tablat	equ	0xFF5
  2863                           postinc0	equ	0xFEE
  2864                           wreg	equ	0xFE8
  2865                           postdec1	equ	0xFE5
  2866                           fsr1l	equ	0xFE1
  2867                           status	equ	0xFD8
  2868                           
  2869 ;; *************** function _Update_Screen *****************
  2870 ;; Defined at:
  2871 ;;		line 77 in file "Main_Screen.c"
  2872 ;; Parameters:    Size  Location     Type
  2873 ;;		None
  2874 ;; Auto vars:     Size  Location     Type
  2875 ;;  neg_tempF       2   10[BANK1 ] int 
  2876 ;;  neg_DS1621_t    1   12[BANK1 ] unsigned char 
  2877 ;; Return value:  Size  Location     Type
  2878 ;;		None               void
  2879 ;; Registers used:
  2880 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2881 ;; Tracked objects:
  2882 ;;		On entry : 0/0
  2883 ;;		On exit  : 0/0
  2884 ;;		Unchanged: 0/0
  2885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2886 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2887 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2888 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2889 ;;      Totals:         0       2       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2890 ;;Total ram usage:        7 bytes
  2891 ;; Hardware stack levels used:    1
  2892 ;; Hardware stack levels required when called:   10
  2893 ;; This function calls:
  2894 ;;		___awdiv
  2895 ;;		___awmod
  2896 ;;		___ftmul
  2897 ;;		___fttol
  2898 ;;		_drawtext
  2899 ;;		_strcpy
  2900 ;; This function is called by:
  2901 ;;		_main
  2902 ;; This function uses a non-reentrant model
  2903 ;;
  2904                           
  2905                           	psect	text2
  2906  00001C                     __ptext2:
  2907                           	opt stack 0
  2908  00001C                     _Update_Screen:
  2909                           	opt stack 20
  2910                           
  2911                           ;Main_Screen.c: 79: if ((DS1621_tempC & 0x80) == 0x80)
  2912                           
  2913                           ;incstack = 0
  2914  00001C  AE46               	btfss	_DS1621_tempC,7,c
  2915  00001E  D023               	goto	l9529
  2916                           
  2917                           ;Main_Screen.c: 80: {
  2918                           ;Main_Screen.c: 81: tempC[0] = '-';
  2919  000020  0E2D               	movlw	45
  2920  000022  0100               	movlb	0	; () banked
  2921  000024  6FD9               	movwf	_tempC& (0+255),b
  2922                           
  2923                           ; BSR set to: 0
  2924                           ;Main_Screen.c: 82: char neg_DS1621_tempC = 0x80 - (DS1621_tempC & 0x7f);
  2925  000026  5046               	movf	_DS1621_tempC,w,c
  2926  000028  0B7F               	andlw	127
  2927  00002A  0800               	sublw	0
  2928  00002C  0F80               	addlw	128
  2929  00002E  0101               	movlb	1	; () banked
  2930  000030  6F48               	movwf	Update_Screen@neg_DS1621_tempC& (0+255),b
  2931                           
  2932                           ; BSR set to: 1
  2933                           ;Main_Screen.c: 83: tempC[1] = (neg_DS1621_tempC)/10 + '0';
  2934  000032  C148  F13C         	movff	Update_Screen@neg_DS1621_tempC,___awdiv@dividend
  2935  000036  0101               	movlb	1	; () banked
  2936  000038  6B3D               	clrf	(___awdiv@dividend+1)& (0+255),b
  2937  00003A  0E00               	movlw	0
  2938  00003C  0101               	movlb	1	; () banked
  2939  00003E  6F3F               	movwf	(___awdiv@divisor+1)& (0+255),b
  2940  000040  0E0A               	movlw	10
  2941  000042  6F3E               	movwf	___awdiv@divisor& (0+255),b
  2942  000044  EC5E  F012         	call	___awdiv	;wreg free
  2943  000048  0101               	movlb	1	; () banked
  2944  00004A  513C               	movf	?___awdiv& (0+255),w,b
  2945  00004C  0F30               	addlw	48
  2946  00004E  0100               	movlb	0	; () banked
  2947  000050  6FDA               	movwf	(_tempC+1)& (0+255),b
  2948                           
  2949                           ; BSR set to: 0
  2950                           ;Main_Screen.c: 84: tempC[2] = (neg_DS1621_tempC)%10 + '0';
  2951  000052  C148  F03B         	movff	Update_Screen@neg_DS1621_tempC,___awmod@dividend
  2952  000056  6A3C               	clrf	___awmod@dividend+1,c
  2953  000058  0E00               	movlw	0
  2954  00005A  6E3E               	movwf	___awmod@divisor+1,c
  2955  00005C  0E0A               	movlw	10
  2956  00005E  6E3D               	movwf	___awmod@divisor,c
  2957  000060  EC36  F017         	call	___awmod	;wreg free
  2958  000064  D01D               	goto	L1
  2959  000066                     l9529:
  2960                           
  2961                           ;Main_Screen.c: 86: else
  2962                           ;Main_Screen.c: 87: {
  2963                           ;Main_Screen.c: 88: tempC[0] = '+';
  2964  000066  0E2B               	movlw	43
  2965  000068  0100               	movlb	0	; () banked
  2966  00006A  6FD9               	movwf	_tempC& (0+255),b
  2967                           
  2968                           ; BSR set to: 0
  2969                           ;Main_Screen.c: 89: tempC[1] = DS1621_tempC/10 + '0';
  2970  00006C  C046  F13C         	movff	_DS1621_tempC,___awdiv@dividend
  2971  000070  C047  F13D         	movff	_DS1621_tempC+1,___awdiv@dividend+1
  2972  000074  0E00               	movlw	0
  2973  000076  0101               	movlb	1	; () banked
  2974  000078  6F3F               	movwf	(___awdiv@divisor+1)& (0+255),b
  2975  00007A  0E0A               	movlw	10
  2976  00007C  6F3E               	movwf	___awdiv@divisor& (0+255),b
  2977  00007E  EC5E  F012         	call	___awdiv	;wreg free
  2978  000082  0101               	movlb	1	; () banked
  2979  000084  513C               	movf	?___awdiv& (0+255),w,b
  2980  000086  0F30               	addlw	48
  2981  000088  0100               	movlb	0	; () banked
  2982  00008A  6FDA               	movwf	(_tempC+1)& (0+255),b
  2983                           
  2984                           ; BSR set to: 0
  2985                           ;Main_Screen.c: 90: tempC[2] = DS1621_tempC%10 + '0';
  2986  00008C  C046  F03B         	movff	_DS1621_tempC,___awmod@dividend
  2987  000090  C047  F03C         	movff	_DS1621_tempC+1,___awmod@dividend+1
  2988  000094  0E00               	movlw	0
  2989  000096  6E3E               	movwf	___awmod@divisor+1,c
  2990  000098  0E0A               	movlw	10
  2991  00009A  6E3D               	movwf	___awmod@divisor,c
  2992  00009C  EC36  F017         	call	___awmod	;wreg free
  2993  0000A0                     L1:
  2994  0000A0  503B               	movf	?___awmod,w,c
  2995  0000A2  0F30               	addlw	48
  2996  0000A4  0100               	movlb	0	; () banked
  2997  0000A6  6FDB               	movwf	(_tempC+2)& (0+255),b
  2998  0000A8  D000               	goto	l9535
  2999  0000AA                     l9535:
  3000                           
  3001                           ; BSR set to: 0
  3002                           ;Main_Screen.c: 91: }
  3003                           ;Main_Screen.c: 93: if (DS1621_tempF < 0)
  3004  0000AA  AE49               	btfss	_DS1621_tempF+1,7,c
  3005  0000AC  D035               	goto	l9545
  3006                           
  3007                           ; BSR set to: 0
  3008                           ;Main_Screen.c: 94: {
  3009                           ;Main_Screen.c: 95: tempF[0] = '-';
  3010  0000AE  0E2D               	movlw	45
  3011  0000B0  0100               	movlb	0	; () banked
  3012  0000B2  6FDD               	movwf	_tempF& (0+255),b
  3013                           
  3014                           ; BSR set to: 0
  3015                           ;Main_Screen.c: 96: int neg_tempF = 0x80 - (DS1621_tempF & 0x7f);
  3016  0000B4  0E7F               	movlw	127
  3017  0000B6  1448               	andwf	_DS1621_tempF,w,c
  3018  0000B8  0100               	movlb	0	; () banked
  3019  0000BA  6FFE               	movwf	??_Update_Screen& (0+255),b
  3020  0000BC  0E00               	movlw	0
  3021  0000BE  1449               	andwf	_DS1621_tempF+1,w,c
  3022  0000C0  0100               	movlb	0	; () banked
  3023  0000C2  6FFF               	movwf	(??_Update_Screen+1)& (0+255),b
  3024  0000C4  0100               	movlb	0	; () banked
  3025  0000C6  1FFE               	comf	??_Update_Screen& (0+255),f,b
  3026  0000C8  1FFF               	comf	(??_Update_Screen+1)& (0+255),f,b
  3027  0000CA  4BFE               	infsnz	??_Update_Screen& (0+255),f,b
  3028  0000CC  2BFF               	incf	(??_Update_Screen+1)& (0+255),f,b
  3029  0000CE  0E80               	movlw	128
  3030  0000D0  0100               	movlb	0	; () banked
  3031  0000D2  25FE               	addwf	??_Update_Screen& (0+255),w,b
  3032  0000D4  0101               	movlb	1	; () banked
  3033  0000D6  6F46               	movwf	Update_Screen@neg_tempF& (0+255),b
  3034  0000D8  0E00               	movlw	0
  3035  0000DA  0100               	movlb	0	; () banked
  3036  0000DC  21FF               	addwfc	(??_Update_Screen+1)& (0+255),w,b
  3037  0000DE  0101               	movlb	1	; () banked
  3038  0000E0  6F47               	movwf	(Update_Screen@neg_tempF+1)& (0+255),b
  3039                           
  3040                           ; BSR set to: 1
  3041                           ;Main_Screen.c: 97: tempF[1] = neg_tempF/10 + '0';
  3042  0000E2  C146  F13C         	movff	Update_Screen@neg_tempF,___awdiv@dividend
  3043  0000E6  C147  F13D         	movff	Update_Screen@neg_tempF+1,___awdiv@dividend+1
  3044  0000EA  0E00               	movlw	0
  3045  0000EC  0101               	movlb	1	; () banked
  3046  0000EE  6F3F               	movwf	(___awdiv@divisor+1)& (0+255),b
  3047  0000F0  0E0A               	movlw	10
  3048  0000F2  6F3E               	movwf	___awdiv@divisor& (0+255),b
  3049  0000F4  EC5E  F012         	call	___awdiv	;wreg free
  3050  0000F8  0101               	movlb	1	; () banked
  3051  0000FA  513C               	movf	?___awdiv& (0+255),w,b
  3052  0000FC  0F30               	addlw	48
  3053  0000FE  0100               	movlb	0	; () banked
  3054  000100  6FDE               	movwf	(_tempF+1)& (0+255),b
  3055                           
  3056                           ; BSR set to: 0
  3057                           ;Main_Screen.c: 98: tempF[2] = neg_tempF%10 + '0';
  3058  000102  C146  F03B         	movff	Update_Screen@neg_tempF,___awmod@dividend
  3059  000106  C147  F03C         	movff	Update_Screen@neg_tempF+1,___awmod@dividend+1
  3060  00010A  0E00               	movlw	0
  3061  00010C  6E3E               	movwf	___awmod@divisor+1,c
  3062  00010E  0E0A               	movlw	10
  3063  000110  6E3D               	movwf	___awmod@divisor,c
  3064  000112  EC36  F017         	call	___awmod	;wreg free
  3065  000116  D01D               	goto	L2
  3066  000118                     l9545:
  3067                           
  3068                           ; BSR set to: 0
  3069                           ;Main_Screen.c: 100: else
  3070                           ;Main_Screen.c: 101: {
  3071                           ;Main_Screen.c: 102: tempF[0] = '+';
  3072  000118  0E2B               	movlw	43
  3073  00011A  0100               	movlb	0	; () banked
  3074  00011C  6FDD               	movwf	_tempF& (0+255),b
  3075                           
  3076                           ; BSR set to: 0
  3077                           ;Main_Screen.c: 103: tempF[1] = DS1621_tempF/10 + '0';
  3078  00011E  C048  F13C         	movff	_DS1621_tempF,___awdiv@dividend
  3079  000122  C049  F13D         	movff	_DS1621_tempF+1,___awdiv@dividend+1
  3080  000126  0E00               	movlw	0
  3081  000128  0101               	movlb	1	; () banked
  3082  00012A  6F3F               	movwf	(___awdiv@divisor+1)& (0+255),b
  3083  00012C  0E0A               	movlw	10
  3084  00012E  6F3E               	movwf	___awdiv@divisor& (0+255),b
  3085  000130  EC5E  F012         	call	___awdiv	;wreg free
  3086  000134  0101               	movlb	1	; () banked
  3087  000136  513C               	movf	?___awdiv& (0+255),w,b
  3088  000138  0F30               	addlw	48
  3089  00013A  0100               	movlb	0	; () banked
  3090  00013C  6FDE               	movwf	(_tempF+1)& (0+255),b
  3091                           
  3092                           ; BSR set to: 0
  3093                           ;Main_Screen.c: 104: tempF[2] = DS1621_tempF%10 + '0';
  3094  00013E  C048  F03B         	movff	_DS1621_tempF,___awmod@dividend
  3095  000142  C049  F03C         	movff	_DS1621_tempF+1,___awmod@dividend+1
  3096  000146  0E00               	movlw	0
  3097  000148  6E3E               	movwf	___awmod@divisor+1,c
  3098  00014A  0E0A               	movlw	10
  3099  00014C  6E3D               	movwf	___awmod@divisor,c
  3100  00014E  EC36  F017         	call	___awmod	;wreg free
  3101  000152                     L2:
  3102  000152  503B               	movf	?___awmod,w,c
  3103  000154  0F30               	addlw	48
  3104  000156  0100               	movlb	0	; () banked
  3105  000158  6FDF               	movwf	(_tempF+2)& (0+255),b
  3106  00015A  D000               	goto	l9551
  3107  00015C                     l9551:
  3108                           
  3109                           ; BSR set to: 0
  3110                           ;Main_Screen.c: 105: }
  3111                           ;Main_Screen.c: 107: time[0] = (hour>>4) + '0';
  3112  00015C  385F               	swapf	_hour,w,c
  3113  00015E  0B0F               	andlw	15
  3114  000160  0F30               	addlw	48
  3115  000162  0100               	movlb	0	; () banked
  3116  000164  6FAF               	movwf	_time& (0+255),b
  3117                           
  3118                           ; BSR set to: 0
  3119                           ;Main_Screen.c: 108: time[1] = (hour & 0x0f)+ '0';
  3120  000166  505F               	movf	_hour,w,c
  3121  000168  0B0F               	andlw	15
  3122  00016A  0F30               	addlw	48
  3123  00016C  0100               	movlb	0	; () banked
  3124  00016E  6FB0               	movwf	(_time+1)& (0+255),b
  3125                           
  3126                           ; BSR set to: 0
  3127                           ;Main_Screen.c: 109: time[3] = (minute>>4) + '0';
  3128  000170  3860               	swapf	_minute,w,c
  3129  000172  0B0F               	andlw	15
  3130  000174  0F30               	addlw	48
  3131  000176  0100               	movlb	0	; () banked
  3132  000178  6FB2               	movwf	(_time+3)& (0+255),b
  3133                           
  3134                           ; BSR set to: 0
  3135                           ;Main_Screen.c: 110: time[4] = (minute & 0x0f)+ '0';
  3136  00017A  5060               	movf	_minute,w,c
  3137  00017C  0B0F               	andlw	15
  3138  00017E  0F30               	addlw	48
  3139  000180  0100               	movlb	0	; () banked
  3140  000182  6FB3               	movwf	(_time+4)& (0+255),b
  3141                           
  3142                           ; BSR set to: 0
  3143                           ;Main_Screen.c: 111: time[6] = (second>>4) + '0';
  3144  000184  3863               	swapf	_second,w,c
  3145  000186  0B0F               	andlw	15
  3146  000188  0F30               	addlw	48
  3147  00018A  0100               	movlb	0	; () banked
  3148  00018C  6FB5               	movwf	(_time+6)& (0+255),b
  3149                           
  3150                           ; BSR set to: 0
  3151                           ;Main_Screen.c: 112: time[7] = (second & 0x0f)+ '0';
  3152  00018E  5063               	movf	_second,w,c
  3153  000190  0B0F               	andlw	15
  3154  000192  0F30               	addlw	48
  3155  000194  0100               	movlb	0	; () banked
  3156  000196  6FB6               	movwf	(_time+7)& (0+255),b
  3157                           
  3158                           ; BSR set to: 0
  3159                           ;Main_Screen.c: 113: date[0] = (month>>4) + '0';
  3160  000198  3861               	swapf	_month,w,c
  3161  00019A  0B0F               	andlw	15
  3162  00019C  0F30               	addlw	48
  3163  00019E  0100               	movlb	0	; () banked
  3164  0001A0  6F8B               	movwf	_date& (0+255),b
  3165                           
  3166                           ; BSR set to: 0
  3167                           ;Main_Screen.c: 114: date[1] = (month & 0x0f)+ '0';
  3168  0001A2  5061               	movf	_month,w,c
  3169  0001A4  0B0F               	andlw	15
  3170  0001A6  0F30               	addlw	48
  3171  0001A8  0100               	movlb	0	; () banked
  3172  0001AA  6F8C               	movwf	(_date+1)& (0+255),b
  3173                           
  3174                           ; BSR set to: 0
  3175                           ;Main_Screen.c: 115: date[3] = (day>>4) + '0';
  3176  0001AC  385B               	swapf	_day,w,c
  3177  0001AE  0B0F               	andlw	15
  3178  0001B0  0F30               	addlw	48
  3179  0001B2  0100               	movlb	0	; () banked
  3180  0001B4  6F8E               	movwf	(_date+3)& (0+255),b
  3181                           
  3182                           ; BSR set to: 0
  3183                           ;Main_Screen.c: 116: date[4] = (day & 0x0f)+ '0';
  3184  0001B6  505B               	movf	_day,w,c
  3185  0001B8  0B0F               	andlw	15
  3186  0001BA  0F30               	addlw	48
  3187  0001BC  0100               	movlb	0	; () banked
  3188  0001BE  6F8F               	movwf	(_date+4)& (0+255),b
  3189                           
  3190                           ; BSR set to: 0
  3191                           ;Main_Screen.c: 117: date[6] = (year>>4) + '0';
  3192  0001C0  386E               	swapf	_year,w,c
  3193  0001C2  0B0F               	andlw	15
  3194  0001C4  0F30               	addlw	48
  3195  0001C6  0100               	movlb	0	; () banked
  3196  0001C8  6F91               	movwf	(_date+6)& (0+255),b
  3197                           
  3198                           ; BSR set to: 0
  3199                           ;Main_Screen.c: 118: date[7] = (year & 0x0f)+ '0';
  3200  0001CA  506E               	movf	_year,w,c
  3201  0001CC  0B0F               	andlw	15
  3202  0001CE  0F30               	addlw	48
  3203  0001D0  0100               	movlb	0	; () banked
  3204  0001D2  6F92               	movwf	(_date+7)& (0+255),b
  3205                           
  3206                           ; BSR set to: 0
  3207                           ;Main_Screen.c: 119: alarm_time[0] = (alarm_hour>>4) + '0';
  3208  0001D4  3857               	swapf	_alarm_hour,w,c
  3209  0001D6  0B0F               	andlw	15
  3210  0001D8  0F30               	addlw	48
  3211  0001DA  0100               	movlb	0	; () banked
  3212  0001DC  6F82               	movwf	_alarm_time& (0+255),b
  3213                           
  3214                           ; BSR set to: 0
  3215                           ;Main_Screen.c: 120: alarm_time[1] = (alarm_hour & 0x0f)+ '0';
  3216  0001DE  5057               	movf	_alarm_hour,w,c
  3217  0001E0  0B0F               	andlw	15
  3218  0001E2  0F30               	addlw	48
  3219  0001E4  0100               	movlb	0	; () banked
  3220  0001E6  6F83               	movwf	(_alarm_time+1)& (0+255),b
  3221                           
  3222                           ; BSR set to: 0
  3223                           ;Main_Screen.c: 121: alarm_time[3] = (alarm_minute>>4) + '0';
  3224  0001E8  3858               	swapf	_alarm_minute,w,c
  3225  0001EA  0B0F               	andlw	15
  3226  0001EC  0F30               	addlw	48
  3227  0001EE  0100               	movlb	0	; () banked
  3228  0001F0  6F85               	movwf	(_alarm_time+3)& (0+255),b
  3229                           
  3230                           ; BSR set to: 0
  3231                           ;Main_Screen.c: 122: alarm_time[4] = (alarm_minute & 0x0f)+ '0';
  3232  0001F2  5058               	movf	_alarm_minute,w,c
  3233  0001F4  0B0F               	andlw	15
  3234  0001F6  0F30               	addlw	48
  3235  0001F8  0100               	movlb	0	; () banked
  3236  0001FA  6F86               	movwf	(_alarm_time+4)& (0+255),b
  3237                           
  3238                           ; BSR set to: 0
  3239                           ;Main_Screen.c: 123: alarm_time[6] = (alarm_second>>4) + '0';
  3240  0001FC  3859               	swapf	_alarm_second,w,c
  3241  0001FE  0B0F               	andlw	15
  3242  000200  0F30               	addlw	48
  3243  000202  0100               	movlb	0	; () banked
  3244  000204  6F88               	movwf	(_alarm_time+6)& (0+255),b
  3245                           
  3246                           ; BSR set to: 0
  3247                           ;Main_Screen.c: 124: alarm_time[7] = (alarm_second & 0x0f)+ '0';
  3248  000206  5059               	movf	_alarm_second,w,c
  3249  000208  0B0F               	andlw	15
  3250  00020A  0F30               	addlw	48
  3251  00020C  0100               	movlb	0	; () banked
  3252  00020E  6F89               	movwf	(_alarm_time+7)& (0+255),b
  3253                           
  3254                           ; BSR set to: 0
  3255                           ;Main_Screen.c: 126: if (ALARMEN == 1)
  3256  000210  0444               	decf	_ALARMEN,w,c
  3257  000212  1045               	iorwf	_ALARMEN+1,w,c
  3258  000214  A4D8               	btfss	status,2,c
  3259  000216  D00B               	goto	l9591
  3260                           
  3261                           ; BSR set to: 0
  3262                           ;Main_Screen.c: 127: {
  3263                           ;Main_Screen.c: 128: strcpy(Alarm_SW_Txt, "ON ");
  3264  000218  0ECD               	movlw	low _Alarm_SW_Txt
  3265  00021A  6E11               	movwf	strcpy@to,c
  3266  00021C  0E00               	movlw	high _Alarm_SW_Txt
  3267  00021E  6E12               	movwf	strcpy@to+1,c
  3268  000220  0EE9               	movlw	low STR_15
  3269  000222  6E13               	movwf	strcpy@from,c
  3270  000224  0EFF               	movlw	high STR_15
  3271  000226  6E14               	movwf	strcpy@from+1,c
  3272  000228  EC54  F01C         	call	_strcpy	;wreg free
  3273                           
  3274                           ;Main_Screen.c: 129: }
  3275  00022C  D00B               	goto	l9593
  3276  00022E                     l9591:
  3277                           
  3278                           ;Main_Screen.c: 130: else
  3279                           ;Main_Screen.c: 131: {
  3280                           ;Main_Screen.c: 132: strcpy(Alarm_SW_Txt, "OFF");
  3281  00022E  0ECD               	movlw	low _Alarm_SW_Txt
  3282  000230  6E11               	movwf	strcpy@to,c
  3283  000232  0E00               	movlw	high _Alarm_SW_Txt
  3284  000234  6E12               	movwf	strcpy@to+1,c
  3285  000236  0EED               	movlw	low STR_16
  3286  000238  6E13               	movwf	strcpy@from,c
  3287  00023A  0EFF               	movlw	high STR_16
  3288  00023C  6E14               	movwf	strcpy@from+1,c
  3289  00023E  EC54  F01C         	call	_strcpy	;wreg free
  3290  000242  D000               	goto	l9593
  3291  000244                     l9593:
  3292                           
  3293                           ;Main_Screen.c: 133: }
  3294                           ;Main_Screen.c: 135: Heater_Set_Temp_Txt[0] = heater_set_temp/100 + '0';
  3295  000244  C06F  F13C         	movff	_heater_set_temp,___awdiv@dividend
  3296  000248  0101               	movlb	1	; () banked
  3297  00024A  6B3D               	clrf	(___awdiv@dividend+1)& (0+255),b
  3298  00024C  0E00               	movlw	0
  3299  00024E  0101               	movlb	1	; () banked
  3300  000250  6F3F               	movwf	(___awdiv@divisor+1)& (0+255),b
  3301  000252  0E64               	movlw	100
  3302  000254  6F3E               	movwf	___awdiv@divisor& (0+255),b
  3303  000256  EC5E  F012         	call	___awdiv	;wreg free
  3304  00025A  0101               	movlb	1	; () banked
  3305  00025C  513C               	movf	?___awdiv& (0+255),w,b
  3306  00025E  0F30               	addlw	48
  3307  000260  0100               	movlb	0	; () banked
  3308  000262  6FBE               	movwf	_Heater_Set_Temp_Txt& (0+255),b
  3309                           
  3310                           ; BSR set to: 0
  3311                           ;Main_Screen.c: 136: Heater_Set_Temp_Txt[1] = (heater_set_temp%100)/10 + '0';
  3312  000264  0E00               	movlw	0
  3313  000266  6E3E               	movwf	___awmod@divisor+1,c
  3314  000268  0E64               	movlw	100
  3315  00026A  6E3D               	movwf	___awmod@divisor,c
  3316  00026C  C06F  F03B         	movff	_heater_set_temp,___awmod@dividend
  3317  000270  6A3C               	clrf	___awmod@dividend+1,c
  3318  000272  EC36  F017         	call	___awmod	;wreg free
  3319  000276  C03B  F13C         	movff	?___awmod,___awdiv@dividend
  3320  00027A  C03C  F13D         	movff	?___awmod+1,___awdiv@dividend+1
  3321  00027E  0E00               	movlw	0
  3322  000280  0101               	movlb	1	; () banked
  3323  000282  6F3F               	movwf	(___awdiv@divisor+1)& (0+255),b
  3324  000284  0E0A               	movlw	10
  3325  000286  6F3E               	movwf	___awdiv@divisor& (0+255),b
  3326  000288  EC5E  F012         	call	___awdiv	;wreg free
  3327  00028C  0101               	movlb	1	; () banked
  3328  00028E  513C               	movf	?___awdiv& (0+255),w,b
  3329  000290  0F30               	addlw	48
  3330  000292  0100               	movlb	0	; () banked
  3331  000294  6FBF               	movwf	(_Heater_Set_Temp_Txt+1)& (0+255),b
  3332                           
  3333                           ; BSR set to: 0
  3334                           ;Main_Screen.c: 137: Heater_Set_Temp_Txt[2] = heater_set_temp%10 + '0';
  3335  000296  C06F  F03B         	movff	_heater_set_temp,___awmod@dividend
  3336  00029A  6A3C               	clrf	___awmod@dividend+1,c
  3337  00029C  0E00               	movlw	0
  3338  00029E  6E3E               	movwf	___awmod@divisor+1,c
  3339  0002A0  0E0A               	movlw	10
  3340  0002A2  6E3D               	movwf	___awmod@divisor,c
  3341  0002A4  EC36  F017         	call	___awmod	;wreg free
  3342  0002A8  503B               	movf	?___awmod,w,c
  3343  0002AA  0F30               	addlw	48
  3344  0002AC  0100               	movlb	0	; () banked
  3345  0002AE  6FC0               	movwf	(_Heater_Set_Temp_Txt+2)& (0+255),b
  3346                           
  3347                           ; BSR set to: 0
  3348                           ;Main_Screen.c: 139: if (HEATER == 1)
  3349  0002B0  0450               	decf	_HEATER,w,c
  3350  0002B2  A4D8               	btfss	status,2,c
  3351  0002B4  D00B               	goto	l9603
  3352                           
  3353                           ; BSR set to: 0
  3354                           ;Main_Screen.c: 140: {
  3355                           ;Main_Screen.c: 141: strcpy(Heater_SW_Txt, "ON ");
  3356  0002B6  0ED5               	movlw	low _Heater_SW_Txt
  3357  0002B8  6E11               	movwf	strcpy@to,c
  3358  0002BA  0E00               	movlw	high _Heater_SW_Txt
  3359  0002BC  6E12               	movwf	strcpy@to+1,c
  3360  0002BE  0EE9               	movlw	low STR_15
  3361  0002C0  6E13               	movwf	strcpy@from,c
  3362  0002C2  0EFF               	movlw	high STR_15
  3363  0002C4  6E14               	movwf	strcpy@from+1,c
  3364  0002C6  EC54  F01C         	call	_strcpy	;wreg free
  3365                           
  3366                           ;Main_Screen.c: 142: }
  3367  0002CA  D00B               	goto	l9605
  3368  0002CC                     l9603:
  3369                           
  3370                           ;Main_Screen.c: 143: else
  3371                           ;Main_Screen.c: 144: {
  3372                           ;Main_Screen.c: 145: strcpy(Heater_SW_Txt, "OFF");
  3373  0002CC  0ED5               	movlw	low _Heater_SW_Txt
  3374  0002CE  6E11               	movwf	strcpy@to,c
  3375  0002D0  0E00               	movlw	high _Heater_SW_Txt
  3376  0002D2  6E12               	movwf	strcpy@to+1,c
  3377  0002D4  0EED               	movlw	low STR_16
  3378  0002D6  6E13               	movwf	strcpy@from,c
  3379  0002D8  0EFF               	movlw	high STR_16
  3380  0002DA  6E14               	movwf	strcpy@from+1,c
  3381  0002DC  EC54  F01C         	call	_strcpy	;wreg free
  3382  0002E0  D000               	goto	l9605
  3383  0002E2                     l9605:
  3384                           
  3385                           ;Main_Screen.c: 146: }
  3386                           ;Main_Screen.c: 148: if (PORTCbits.RC1 == 0) RTC_ALARM_Txt[0] = '1';
  3387  0002E2  B282               	btfsc	3970,1,c	;volatile
  3388  0002E4  D002               	goto	l9609
  3389  0002E6  0E31               	movlw	49
  3390  0002E8  D001               	goto	L3
  3391  0002EA                     l9609:
  3392                           
  3393                           ;Main_Screen.c: 149: else RTC_ALARM_Txt[0] = '0';
  3394  0002EA  0E30               	movlw	48
  3395  0002EC                     L3:
  3396  0002EC  0100               	movlb	0	; () banked
  3397  0002EE  6FE1               	movwf	_RTC_ALARM_Txt& (0+255),b
  3398  0002F0  D000               	goto	l9611
  3399  0002F2                     l9611:
  3400                           
  3401                           ; BSR set to: 0
  3402                           ;Main_Screen.c: 152: DC_Txt[0] = duty_cycle/100 + '0';
  3403  0002F2  C05D  F13C         	movff	_duty_cycle,___awdiv@dividend
  3404  0002F6  0101               	movlb	1	; () banked
  3405  0002F8  6B3D               	clrf	(___awdiv@dividend+1)& (0+255),b
  3406  0002FA  0E00               	movlw	0
  3407  0002FC  0101               	movlb	1	; () banked
  3408  0002FE  6F3F               	movwf	(___awdiv@divisor+1)& (0+255),b
  3409  000300  0E64               	movlw	100
  3410  000302  6F3E               	movwf	___awdiv@divisor& (0+255),b
  3411  000304  EC5E  F012         	call	___awdiv	;wreg free
  3412  000308  0101               	movlb	1	; () banked
  3413  00030A  513C               	movf	?___awdiv& (0+255),w,b
  3414  00030C  0F30               	addlw	48
  3415  00030E  0100               	movlb	0	; () banked
  3416  000310  6FD1               	movwf	_DC_Txt& (0+255),b
  3417                           
  3418                           ; BSR set to: 0
  3419                           ;Main_Screen.c: 153: DC_Txt[1] = (duty_cycle%100)/10 + '0';
  3420  000312  0E00               	movlw	0
  3421  000314  6E3E               	movwf	___awmod@divisor+1,c
  3422  000316  0E64               	movlw	100
  3423  000318  6E3D               	movwf	___awmod@divisor,c
  3424  00031A  C05D  F03B         	movff	_duty_cycle,___awmod@dividend
  3425  00031E  6A3C               	clrf	___awmod@dividend+1,c
  3426  000320  EC36  F017         	call	___awmod	;wreg free
  3427  000324  C03B  F13C         	movff	?___awmod,___awdiv@dividend
  3428  000328  C03C  F13D         	movff	?___awmod+1,___awdiv@dividend+1
  3429  00032C  0E00               	movlw	0
  3430  00032E  0101               	movlb	1	; () banked
  3431  000330  6F3F               	movwf	(___awdiv@divisor+1)& (0+255),b
  3432  000332  0E0A               	movlw	10
  3433  000334  6F3E               	movwf	___awdiv@divisor& (0+255),b
  3434  000336  EC5E  F012         	call	___awdiv	;wreg free
  3435  00033A  0101               	movlb	1	; () banked
  3436  00033C  513C               	movf	?___awdiv& (0+255),w,b
  3437  00033E  0F30               	addlw	48
  3438  000340  0100               	movlb	0	; () banked
  3439  000342  6FD2               	movwf	(_DC_Txt+1)& (0+255),b
  3440                           
  3441                           ; BSR set to: 0
  3442                           ;Main_Screen.c: 154: DC_Txt[2] = (duty_cycle%100)%10 + '0';
  3443  000344  0E00               	movlw	0
  3444  000346  6E3E               	movwf	___awmod@divisor+1,c
  3445  000348  0E64               	movlw	100
  3446  00034A  6E3D               	movwf	___awmod@divisor,c
  3447  00034C  C05D  F03B         	movff	_duty_cycle,___awmod@dividend
  3448  000350  6A3C               	clrf	___awmod@dividend+1,c
  3449  000352  EC36  F017         	call	___awmod	;wreg free
  3450  000356  C03B  F144         	movff	?___awmod,_Update_Screen$3325
  3451  00035A  C03C  F145         	movff	?___awmod+1,_Update_Screen$3325+1
  3452                           
  3453                           ;Main_Screen.c: 154: DC_Txt[2] = (duty_cycle%100)%10 + '0';
  3454  00035E  C144  F03B         	movff	_Update_Screen$3325,___awmod@dividend
  3455  000362  C145  F03C         	movff	_Update_Screen$3325+1,___awmod@dividend+1
  3456  000366  0E00               	movlw	0
  3457  000368  6E3E               	movwf	___awmod@divisor+1,c
  3458  00036A  0E0A               	movlw	10
  3459  00036C  6E3D               	movwf	___awmod@divisor,c
  3460  00036E  EC36  F017         	call	___awmod	;wreg free
  3461  000372  503B               	movf	?___awmod,w,c
  3462  000374  0F30               	addlw	48
  3463  000376  0100               	movlb	0	; () banked
  3464  000378  6FD3               	movwf	(_DC_Txt+2)& (0+255),b
  3465                           
  3466                           ; BSR set to: 0
  3467                           ;Main_Screen.c: 156: Volt_Txt[0] = ((int) volt ) + '0';
  3468  00037A  C0E7  F02C         	movff	_volt,___fttol@f1
  3469  00037E  C0E8  F02D         	movff	_volt+1,___fttol@f1+1
  3470  000382  C0E9  F02E         	movff	_volt+2,___fttol@f1+2
  3471  000386  EC0C  F011         	call	___fttol	;wreg free
  3472  00038A  502C               	movf	?___fttol,w,c
  3473  00038C  0F30               	addlw	48
  3474  00038E  0100               	movlb	0	; () banked
  3475  000390  6FB8               	movwf	_Volt_Txt& (0+255),b
  3476                           
  3477                           ; BSR set to: 0
  3478                           ;Main_Screen.c: 157: Volt_Txt[2] = ((int) (volt*10)%10) + '0';
  3479  000392  0E00               	movlw	0
  3480  000394  6E20               	movwf	___ftmul@f2,c
  3481  000396  0E20               	movlw	32
  3482  000398  6E21               	movwf	___ftmul@f2+1,c
  3483  00039A  0E41               	movlw	65
  3484  00039C  6E22               	movwf	___ftmul@f2+2,c
  3485  00039E  C0E7  F01D         	movff	_volt,___ftmul@f1
  3486  0003A2  C0E8  F01E         	movff	_volt+1,___ftmul@f1+1
  3487  0003A6  C0E9  F01F         	movff	_volt+2,___ftmul@f1+2
  3488  0003AA  EC25  F00F         	call	___ftmul	;wreg free
  3489  0003AE  C01D  F02C         	movff	?___ftmul,___fttol@f1
  3490  0003B2  C01E  F02D         	movff	?___ftmul+1,___fttol@f1+1
  3491  0003B6  C01F  F02E         	movff	?___ftmul+2,___fttol@f1+2
  3492  0003BA  EC0C  F011         	call	___fttol	;wreg free
  3493  0003BE  C02C  F03B         	movff	?___fttol,___awmod@dividend
  3494  0003C2  C02D  F03C         	movff	?___fttol+1,___awmod@dividend+1
  3495  0003C6  0E00               	movlw	0
  3496  0003C8  6E3E               	movwf	___awmod@divisor+1,c
  3497  0003CA  0E0A               	movlw	10
  3498  0003CC  6E3D               	movwf	___awmod@divisor,c
  3499  0003CE  EC36  F017         	call	___awmod	;wreg free
  3500  0003D2  503B               	movf	?___awmod,w,c
  3501  0003D4  0F30               	addlw	48
  3502  0003D6  0100               	movlb	0	; () banked
  3503  0003D8  6FBA               	movwf	(_Volt_Txt+2)& (0+255),b
  3504                           
  3505                           ; BSR set to: 0
  3506                           ;Main_Screen.c: 158: Volt_Txt[3] = ((int) (volt*100)%10) + '0';
  3507  0003DA  0E00               	movlw	0
  3508  0003DC  6E20               	movwf	___ftmul@f2,c
  3509  0003DE  0EC8               	movlw	200
  3510  0003E0  6E21               	movwf	___ftmul@f2+1,c
  3511  0003E2  0E42               	movlw	66
  3512  0003E4  6E22               	movwf	___ftmul@f2+2,c
  3513  0003E6  C0E7  F01D         	movff	_volt,___ftmul@f1
  3514  0003EA  C0E8  F01E         	movff	_volt+1,___ftmul@f1+1
  3515  0003EE  C0E9  F01F         	movff	_volt+2,___ftmul@f1+2
  3516  0003F2  EC25  F00F         	call	___ftmul	;wreg free
  3517  0003F6  C01D  F02C         	movff	?___ftmul,___fttol@f1
  3518  0003FA  C01E  F02D         	movff	?___ftmul+1,___fttol@f1+1
  3519  0003FE  C01F  F02E         	movff	?___ftmul+2,___fttol@f1+2
  3520  000402  EC0C  F011         	call	___fttol	;wreg free
  3521  000406  C02C  F03B         	movff	?___fttol,___awmod@dividend
  3522  00040A  C02D  F03C         	movff	?___fttol+1,___awmod@dividend+1
  3523  00040E  0E00               	movlw	0
  3524  000410  6E3E               	movwf	___awmod@divisor+1,c
  3525  000412  0E0A               	movlw	10
  3526  000414  6E3D               	movwf	___awmod@divisor,c
  3527  000416  EC36  F017         	call	___awmod	;wreg free
  3528  00041A  503B               	movf	?___awmod,w,c
  3529  00041C  0F30               	addlw	48
  3530  00041E  0100               	movlb	0	; () banked
  3531  000420  6FBB               	movwf	(_Volt_Txt+3)& (0+255),b
  3532                           
  3533                           ; BSR set to: 0
  3534                           ;Main_Screen.c: 160: RPM_Txt[0] = rpm/1000 + '0';
  3535  000422  C04C  F13C         	movff	_rpm,___awdiv@dividend
  3536  000426  C04D  F13D         	movff	_rpm+1,___awdiv@dividend+1
  3537  00042A  0E03               	movlw	3
  3538  00042C  0101               	movlb	1	; () banked
  3539  00042E  6F3F               	movwf	(___awdiv@divisor+1)& (0+255),b
  3540  000430  0EE8               	movlw	232
  3541  000432  6F3E               	movwf	___awdiv@divisor& (0+255),b
  3542  000434  EC5E  F012         	call	___awdiv	;wreg free
  3543  000438  0101               	movlb	1	; () banked
  3544  00043A  513C               	movf	?___awdiv& (0+255),w,b
  3545  00043C  0F30               	addlw	48
  3546  00043E  0100               	movlb	0	; () banked
  3547  000440  6FC3               	movwf	_RPM_Txt& (0+255),b
  3548                           
  3549                           ; BSR set to: 0
  3550                           ;Main_Screen.c: 161: RPM_Txt[1] = (rpm%1000)/100 + '0';
  3551  000442  0E03               	movlw	3
  3552  000444  6E3E               	movwf	___awmod@divisor+1,c
  3553  000446  0EE8               	movlw	232
  3554  000448  6E3D               	movwf	___awmod@divisor,c
  3555  00044A  C04C  F03B         	movff	_rpm,___awmod@dividend
  3556  00044E  C04D  F03C         	movff	_rpm+1,___awmod@dividend+1
  3557  000452  EC36  F017         	call	___awmod	;wreg free
  3558  000456  C03B  F13C         	movff	?___awmod,___awdiv@dividend
  3559  00045A  C03C  F13D         	movff	?___awmod+1,___awdiv@dividend+1
  3560  00045E  0E00               	movlw	0
  3561  000460  0101               	movlb	1	; () banked
  3562  000462  6F3F               	movwf	(___awdiv@divisor+1)& (0+255),b
  3563  000464  0E64               	movlw	100
  3564  000466  6F3E               	movwf	___awdiv@divisor& (0+255),b
  3565  000468  EC5E  F012         	call	___awdiv	;wreg free
  3566  00046C  0101               	movlb	1	; () banked
  3567  00046E  513C               	movf	?___awdiv& (0+255),w,b
  3568  000470  0F30               	addlw	48
  3569  000472  0100               	movlb	0	; () banked
  3570  000474  6FC4               	movwf	(_RPM_Txt+1)& (0+255),b
  3571                           
  3572                           ; BSR set to: 0
  3573                           ;Main_Screen.c: 162: RPM_Txt[2] = (rpm%100)/10 + '0';
  3574  000476  0E00               	movlw	0
  3575  000478  6E3E               	movwf	___awmod@divisor+1,c
  3576  00047A  0E64               	movlw	100
  3577  00047C  6E3D               	movwf	___awmod@divisor,c
  3578  00047E  C04C  F03B         	movff	_rpm,___awmod@dividend
  3579  000482  C04D  F03C         	movff	_rpm+1,___awmod@dividend+1
  3580  000486  EC36  F017         	call	___awmod	;wreg free
  3581  00048A  C03B  F13C         	movff	?___awmod,___awdiv@dividend
  3582  00048E  C03C  F13D         	movff	?___awmod+1,___awdiv@dividend+1
  3583  000492  0E00               	movlw	0
  3584  000494  0101               	movlb	1	; () banked
  3585  000496  6F3F               	movwf	(___awdiv@divisor+1)& (0+255),b
  3586  000498  0E0A               	movlw	10
  3587  00049A  6F3E               	movwf	___awdiv@divisor& (0+255),b
  3588  00049C  EC5E  F012         	call	___awdiv	;wreg free
  3589  0004A0  0101               	movlb	1	; () banked
  3590  0004A2  513C               	movf	?___awdiv& (0+255),w,b
  3591  0004A4  0F30               	addlw	48
  3592  0004A6  0100               	movlb	0	; () banked
  3593  0004A8  6FC5               	movwf	(_RPM_Txt+2)& (0+255),b
  3594                           
  3595                           ; BSR set to: 0
  3596                           ;Main_Screen.c: 163: RPM_Txt[3] = (rpm % 10) + '0';
  3597  0004AA  C04C  F03B         	movff	_rpm,___awmod@dividend
  3598  0004AE  C04D  F03C         	movff	_rpm+1,___awmod@dividend+1
  3599  0004B2  0E00               	movlw	0
  3600  0004B4  6E3E               	movwf	___awmod@divisor+1,c
  3601  0004B6  0E0A               	movlw	10
  3602  0004B8  6E3D               	movwf	___awmod@divisor,c
  3603  0004BA  EC36  F017         	call	___awmod	;wreg free
  3604  0004BE  503B               	movf	?___awmod,w,c
  3605  0004C0  0F30               	addlw	48
  3606  0004C2  0100               	movlb	0	; () banked
  3607  0004C4  6FC6               	movwf	(_RPM_Txt+3)& (0+255),b
  3608                           
  3609                           ; BSR set to: 0
  3610                           ;Main_Screen.c: 165: drawtext(1, 23, tempC , 0xFFE0 , 0x0000 , 2);
  3611  0004C6  0E17               	movlw	23
  3612  0004C8  6E39               	movwf	drawtext@y,c
  3613  0004CA  0ED9               	movlw	low _tempC
  3614  0004CC  6E3A               	movwf	drawtext@_text,c
  3615  0004CE  0E00               	movlw	high _tempC
  3616  0004D0  6E3B               	movwf	drawtext@_text+1,c
  3617  0004D2  0EFF               	movlw	255
  3618  0004D4  6E3D               	movwf	drawtext@color+1,c
  3619  0004D6  0EE0               	movlw	224
  3620  0004D8  6E3C               	movwf	drawtext@color,c
  3621  0004DA  0E00               	movlw	0
  3622  0004DC  6E3F               	movwf	drawtext@bg+1,c
  3623  0004DE  0E00               	movlw	0
  3624  0004E0  6E3E               	movwf	drawtext@bg,c
  3625  0004E2  0E02               	movlw	2
  3626  0004E4  6E40               	movwf	drawtext@size,c
  3627  0004E6  0E01               	movlw	1
  3628  0004E8  EC92  F00D         	call	_drawtext
  3629                           
  3630                           ;Main_Screen.c: 166: drawtext(70, 23, tempF , 0xFFE0 , 0x0000 , 2);
  3631  0004EC  0E17               	movlw	23
  3632  0004EE  6E39               	movwf	drawtext@y,c
  3633  0004F0  0EDD               	movlw	low _tempF
  3634  0004F2  6E3A               	movwf	drawtext@_text,c
  3635  0004F4  0E00               	movlw	high _tempF
  3636  0004F6  6E3B               	movwf	drawtext@_text+1,c
  3637  0004F8  0EFF               	movlw	255
  3638  0004FA  6E3D               	movwf	drawtext@color+1,c
  3639  0004FC  0EE0               	movlw	224
  3640  0004FE  6E3C               	movwf	drawtext@color,c
  3641  000500  0E00               	movlw	0
  3642  000502  6E3F               	movwf	drawtext@bg+1,c
  3643  000504  0E00               	movlw	0
  3644  000506  6E3E               	movwf	drawtext@bg,c
  3645  000508  0E02               	movlw	2
  3646  00050A  6E40               	movwf	drawtext@size,c
  3647  00050C  0E46               	movlw	70
  3648  00050E  EC92  F00D         	call	_drawtext
  3649                           
  3650                           ;Main_Screen.c: 167: drawtext(15 , 52 , time , 0x07FF , 0x0000 , 2);
  3651  000512  0E34               	movlw	52
  3652  000514  6E39               	movwf	drawtext@y,c
  3653  000516  0EAF               	movlw	low _time
  3654  000518  6E3A               	movwf	drawtext@_text,c
  3655  00051A  0E00               	movlw	high _time
  3656  00051C  6E3B               	movwf	drawtext@_text+1,c
  3657  00051E  0E07               	movlw	7
  3658  000520  6E3D               	movwf	drawtext@color+1,c
  3659  000522  683C               	setf	drawtext@color,c
  3660  000524  0E00               	movlw	0
  3661  000526  6E3F               	movwf	drawtext@bg+1,c
  3662  000528  0E00               	movlw	0
  3663  00052A  6E3E               	movwf	drawtext@bg,c
  3664  00052C  0E02               	movlw	2
  3665  00052E  6E40               	movwf	drawtext@size,c
  3666  000530  0E0F               	movlw	15
  3667  000532  EC92  F00D         	call	_drawtext
  3668                           
  3669                           ;Main_Screen.c: 168: drawtext(15 , 82 , date , 0x07E0 , 0x0000 , 2);
  3670  000536  0E52               	movlw	82
  3671  000538  6E39               	movwf	drawtext@y,c
  3672  00053A  0E8B               	movlw	low _date
  3673  00053C  6E3A               	movwf	drawtext@_text,c
  3674  00053E  0E00               	movlw	high _date
  3675  000540  6E3B               	movwf	drawtext@_text+1,c
  3676  000542  0E07               	movlw	7
  3677  000544  6E3D               	movwf	drawtext@color+1,c
  3678  000546  0EE0               	movlw	224
  3679  000548  6E3C               	movwf	drawtext@color,c
  3680  00054A  0E00               	movlw	0
  3681  00054C  6E3F               	movwf	drawtext@bg+1,c
  3682  00054E  0E00               	movlw	0
  3683  000550  6E3E               	movwf	drawtext@bg,c
  3684  000552  0E02               	movlw	2
  3685  000554  6E40               	movwf	drawtext@size,c
  3686  000556  0E0F               	movlw	15
  3687  000558  EC92  F00D         	call	_drawtext
  3688                           
  3689                           ;Main_Screen.c: 169: drawtext(10 , 110 , alarm_time , 0x07FF , 0x0000 , 1);
  3690  00055C  0E6E               	movlw	110
  3691  00055E  6E39               	movwf	drawtext@y,c
  3692  000560  0E82               	movlw	low _alarm_time
  3693  000562  6E3A               	movwf	drawtext@_text,c
  3694  000564  0E00               	movlw	high _alarm_time
  3695  000566  6E3B               	movwf	drawtext@_text+1,c
  3696  000568  0E07               	movlw	7
  3697  00056A  6E3D               	movwf	drawtext@color+1,c
  3698  00056C  683C               	setf	drawtext@color,c
  3699  00056E  0E00               	movlw	0
  3700  000570  6E3F               	movwf	drawtext@bg+1,c
  3701  000572  0E00               	movlw	0
  3702  000574  6E3E               	movwf	drawtext@bg,c
  3703  000576  0E01               	movlw	1
  3704  000578  6E40               	movwf	drawtext@size,c
  3705  00057A  0E0A               	movlw	10
  3706  00057C  EC92  F00D         	call	_drawtext
  3707                           
  3708                           ;Main_Screen.c: 170: drawtext(95 , 110 , Alarm_SW_Txt , 0x07FF , 0x0000 , 1);
  3709  000580  0E6E               	movlw	110
  3710  000582  6E39               	movwf	drawtext@y,c
  3711  000584  0ECD               	movlw	low _Alarm_SW_Txt
  3712  000586  6E3A               	movwf	drawtext@_text,c
  3713  000588  0E00               	movlw	high _Alarm_SW_Txt
  3714  00058A  6E3B               	movwf	drawtext@_text+1,c
  3715  00058C  0E07               	movlw	7
  3716  00058E  6E3D               	movwf	drawtext@color+1,c
  3717  000590  683C               	setf	drawtext@color,c
  3718  000592  0E00               	movlw	0
  3719  000594  6E3F               	movwf	drawtext@bg+1,c
  3720  000596  0E00               	movlw	0
  3721  000598  6E3E               	movwf	drawtext@bg,c
  3722  00059A  0E01               	movlw	1
  3723  00059C  6E40               	movwf	drawtext@size,c
  3724  00059E  0E5F               	movlw	95
  3725  0005A0  EC92  F00D         	call	_drawtext
  3726                           
  3727                           ;Main_Screen.c: 171: drawtext(35, 130 ,Heater_Set_Temp_Txt, 0xF800, 0x0000, 1);
  3728  0005A4  0E82               	movlw	130
  3729  0005A6  6E39               	movwf	drawtext@y,c
  3730  0005A8  0EBE               	movlw	low _Heater_Set_Temp_Txt
  3731  0005AA  6E3A               	movwf	drawtext@_text,c
  3732  0005AC  0E00               	movlw	high _Heater_Set_Temp_Txt
  3733  0005AE  6E3B               	movwf	drawtext@_text+1,c
  3734  0005B0  0EF8               	movlw	248
  3735  0005B2  6E3D               	movwf	drawtext@color+1,c
  3736  0005B4  0E00               	movlw	0
  3737  0005B6  6E3C               	movwf	drawtext@color,c
  3738  0005B8  0E00               	movlw	0
  3739  0005BA  6E3F               	movwf	drawtext@bg+1,c
  3740  0005BC  0E00               	movlw	0
  3741  0005BE  6E3E               	movwf	drawtext@bg,c
  3742  0005C0  0E01               	movlw	1
  3743  0005C2  6E40               	movwf	drawtext@size,c
  3744  0005C4  0E23               	movlw	35
  3745  0005C6  EC92  F00D         	call	_drawtext
  3746                           
  3747                           ;Main_Screen.c: 172: drawtext(95, 130, Heater_SW_Txt, 0xF800 , 0x0000 , 1);
  3748  0005CA  0E82               	movlw	130
  3749  0005CC  6E39               	movwf	drawtext@y,c
  3750  0005CE  0ED5               	movlw	low _Heater_SW_Txt
  3751  0005D0  6E3A               	movwf	drawtext@_text,c
  3752  0005D2  0E00               	movlw	high _Heater_SW_Txt
  3753  0005D4  6E3B               	movwf	drawtext@_text+1,c
  3754  0005D6  0EF8               	movlw	248
  3755  0005D8  6E3D               	movwf	drawtext@color+1,c
  3756  0005DA  0E00               	movlw	0
  3757  0005DC  6E3C               	movwf	drawtext@color,c
  3758  0005DE  0E00               	movlw	0
  3759  0005E0  6E3F               	movwf	drawtext@bg+1,c
  3760  0005E2  0E00               	movlw	0
  3761  0005E4  6E3E               	movwf	drawtext@bg,c
  3762  0005E6  0E01               	movlw	1
  3763  0005E8  6E40               	movwf	drawtext@size,c
  3764  0005EA  0E5F               	movlw	95
  3765  0005EC  EC92  F00D         	call	_drawtext
  3766                           
  3767                           ;Main_Screen.c: 173: drawtext(10, 150, DC_Txt, 0x07E0, 0x0000, 1);
  3768  0005F0  0E96               	movlw	150
  3769  0005F2  6E39               	movwf	drawtext@y,c
  3770  0005F4  0ED1               	movlw	low _DC_Txt
  3771  0005F6  6E3A               	movwf	drawtext@_text,c
  3772  0005F8  0E00               	movlw	high _DC_Txt
  3773  0005FA  6E3B               	movwf	drawtext@_text+1,c
  3774  0005FC  0E07               	movlw	7
  3775  0005FE  6E3D               	movwf	drawtext@color+1,c
  3776  000600  0EE0               	movlw	224
  3777  000602  6E3C               	movwf	drawtext@color,c
  3778  000604  0E00               	movlw	0
  3779  000606  6E3F               	movwf	drawtext@bg+1,c
  3780  000608  0E00               	movlw	0
  3781  00060A  6E3E               	movwf	drawtext@bg,c
  3782  00060C  0E01               	movlw	1
  3783  00060E  6E40               	movwf	drawtext@size,c
  3784  000610  0E0A               	movlw	10
  3785  000612  EC92  F00D         	call	_drawtext
  3786                           
  3787                           ;Main_Screen.c: 174: drawtext(35, 150, RTC_ALARM_Txt, 0x07E0, 0x0000, 1);
  3788  000616  0E96               	movlw	150
  3789  000618  6E39               	movwf	drawtext@y,c
  3790  00061A  0EE1               	movlw	low _RTC_ALARM_Txt
  3791  00061C  6E3A               	movwf	drawtext@_text,c
  3792  00061E  0E00               	movlw	high _RTC_ALARM_Txt
  3793  000620  6E3B               	movwf	drawtext@_text+1,c
  3794  000622  0E07               	movlw	7
  3795  000624  6E3D               	movwf	drawtext@color+1,c
  3796  000626  0EE0               	movlw	224
  3797  000628  6E3C               	movwf	drawtext@color,c
  3798  00062A  0E00               	movlw	0
  3799  00062C  6E3F               	movwf	drawtext@bg+1,c
  3800  00062E  0E00               	movlw	0
  3801  000630  6E3E               	movwf	drawtext@bg,c
  3802  000632  0E01               	movlw	1
  3803  000634  6E40               	movwf	drawtext@size,c
  3804  000636  0E23               	movlw	35
  3805  000638  EC92  F00D         	call	_drawtext
  3806                           
  3807                           ;Main_Screen.c: 175: drawtext(50, 150, Volt_Txt, 0x07E0, 0x0000, 1);
  3808  00063C  0E96               	movlw	150
  3809  00063E  6E39               	movwf	drawtext@y,c
  3810  000640  0EB8               	movlw	low _Volt_Txt
  3811  000642  6E3A               	movwf	drawtext@_text,c
  3812  000644  0E00               	movlw	high _Volt_Txt
  3813  000646  6E3B               	movwf	drawtext@_text+1,c
  3814  000648  0E07               	movlw	7
  3815  00064A  6E3D               	movwf	drawtext@color+1,c
  3816  00064C  0EE0               	movlw	224
  3817  00064E  6E3C               	movwf	drawtext@color,c
  3818  000650  0E00               	movlw	0
  3819  000652  6E3F               	movwf	drawtext@bg+1,c
  3820  000654  0E00               	movlw	0
  3821  000656  6E3E               	movwf	drawtext@bg,c
  3822  000658  0E01               	movlw	1
  3823  00065A  6E40               	movwf	drawtext@size,c
  3824  00065C  0E32               	movlw	50
  3825  00065E  EC92  F00D         	call	_drawtext
  3826                           
  3827                           ;Main_Screen.c: 176: drawtext(93, 150, RPM_Txt, 0x07E0, 0x0000, 1);
  3828  000662  0E96               	movlw	150
  3829  000664  6E39               	movwf	drawtext@y,c
  3830  000666  0EC3               	movlw	low _RPM_Txt
  3831  000668  6E3A               	movwf	drawtext@_text,c
  3832  00066A  0E00               	movlw	high _RPM_Txt
  3833  00066C  6E3B               	movwf	drawtext@_text+1,c
  3834  00066E  0E07               	movlw	7
  3835  000670  6E3D               	movwf	drawtext@color+1,c
  3836  000672  0EE0               	movlw	224
  3837  000674  6E3C               	movwf	drawtext@color,c
  3838  000676  0E00               	movlw	0
  3839  000678  6E3F               	movwf	drawtext@bg+1,c
  3840  00067A  0E00               	movlw	0
  3841  00067C  6E3E               	movwf	drawtext@bg,c
  3842  00067E  0E01               	movlw	1
  3843  000680  6E40               	movwf	drawtext@size,c
  3844  000682  0E5D               	movlw	93
  3845  000684  EC92  F00D         	call	_drawtext
  3846  000688  0012               	return		;funcret
  3847  00068A                     __end_of_Update_Screen:
  3848                           	opt stack 0
  3849                           tblptru	equ	0xFF8
  3850                           tblptrh	equ	0xFF7
  3851                           tblptrl	equ	0xFF6
  3852                           tablat	equ	0xFF5
  3853                           postinc0	equ	0xFEE
  3854                           wreg	equ	0xFE8
  3855                           postdec1	equ	0xFE5
  3856                           fsr1l	equ	0xFE1
  3857                           status	equ	0xFD8
  3858                           
  3859 ;; *************** function _Toggle_Heater *****************
  3860 ;; Defined at:
  3861 ;;		line 49 in file "Fan_Support.c"
  3862 ;; Parameters:    Size  Location     Type
  3863 ;;		None
  3864 ;; Auto vars:     Size  Location     Type
  3865 ;;		None
  3866 ;; Return value:  Size  Location     Type
  3867 ;;		None               void
  3868 ;; Registers used:
  3869 ;;		wreg, status,2
  3870 ;; Tracked objects:
  3871 ;;		On entry : 0/0
  3872 ;;		On exit  : 0/0
  3873 ;;		Unchanged: 0/0
  3874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3875 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3876 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3877 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3878 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3879 ;;Total ram usage:        0 bytes
  3880 ;; Hardware stack levels used:    1
  3881 ;; Hardware stack levels required when called:    3
  3882 ;; This function calls:
  3883 ;;		Nothing
  3884 ;; This function is called by:
  3885 ;;		_main
  3886 ;; This function uses a non-reentrant model
  3887 ;;
  3888                           
  3889                           	psect	text3
  3890  003CB0                     __ptext3:
  3891                           	opt stack 0
  3892  003CB0                     _Toggle_Heater:
  3893                           	opt stack 27
  3894                           
  3895                           ;Fan_Support.c: 51: HEATER = (!HEATER);
  3896                           
  3897                           ;incstack = 0
  3898  003CB0  5050               	movf	_HEATER,w,c
  3899  003CB2  A4D8               	btfss	status,2,c
  3900  003CB4  D002               	goto	u4420
  3901  003CB6  0E01               	movlw	1
  3902  003CB8  D001               	goto	u4430
  3903  003CBA                     u4420:
  3904  003CBA  0E00               	movlw	0
  3905  003CBC                     u4430:
  3906  003CBC  6E50               	movwf	_HEATER,c
  3907  003CBE  0012               	return		;funcret
  3908  003CC0                     __end_of_Toggle_Heater:
  3909                           	opt stack 0
  3910                           tblptru	equ	0xFF8
  3911                           tblptrh	equ	0xFF7
  3912                           tblptrl	equ	0xFF6
  3913                           tablat	equ	0xFF5
  3914                           postinc0	equ	0xFEE
  3915                           wreg	equ	0xFE8
  3916                           postdec1	equ	0xFE5
  3917                           fsr1l	equ	0xFE1
  3918                           status	equ	0xFD8
  3919                           
  3920 ;; *************** function _Test_Alarm *****************
  3921 ;; Defined at:
  3922 ;;		line 219 in file "LabFinal.c"
  3923 ;; Parameters:    Size  Location     Type
  3924 ;;		None
  3925 ;; Auto vars:     Size  Location     Type
  3926 ;;		None
  3927 ;; Return value:  Size  Location     Type
  3928 ;;		None               void
  3929 ;; Registers used:
  3930 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3931 ;; Tracked objects:
  3932 ;;		On entry : 0/0
  3933 ;;		On exit  : 0/0
  3934 ;;		Unchanged: 0/0
  3935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3936 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3937 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3938 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3939 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3940 ;;Total ram usage:        0 bytes
  3941 ;; Hardware stack levels used:    1
  3942 ;; Hardware stack levels required when called:    9
  3943 ;; This function calls:
  3944 ;;		_Activate_Buzzer_4KHz
  3945 ;;		_DS3231_Turn_Off_Alarm
  3946 ;;		_DS3231_Turn_On_Alarm
  3947 ;;		_Deactivate_Buzzer
  3948 ;;		_Set_RGB_Color
  3949 ;;		___ftge
  3950 ;;		_do_update_pwm
  3951 ;;		_read_volt
  3952 ;; This function is called by:
  3953 ;;		_main
  3954 ;; This function uses a non-reentrant model
  3955 ;;
  3956                           
  3957                           	psect	text4
  3958  0018F0                     __ptext4:
  3959                           	opt stack 0
  3960  0018F0                     _Test_Alarm:
  3961                           	opt stack 21
  3962                           
  3963                           ;LabFinal.c: 221: if(alarm_mode == 0 && ALARMEN == 1)
  3964                           
  3965                           ;incstack = 0
  3966  0018F0  0100               	movlb	0	; () banked
  3967  0018F2  51EC               	movf	_alarm_mode& (0+255),w,b
  3968  0018F4  0100               	movlb	0	; () banked
  3969  0018F6  11ED               	iorwf	(_alarm_mode+1)& (0+255),w,b
  3970  0018F8  A4D8               	btfss	status,2,c
  3971  0018FA  D00C               	goto	l9709
  3972                           
  3973                           ; BSR set to: 0
  3974  0018FC  0444               	decf	_ALARMEN,w,c
  3975  0018FE  1045               	iorwf	_ALARMEN+1,w,c
  3976  001900  A4D8               	btfss	status,2,c
  3977  001902  D008               	goto	l9709
  3978                           
  3979                           ; BSR set to: 0
  3980                           ;LabFinal.c: 222: {
  3981                           ;LabFinal.c: 223: DS3231_Turn_On_Alarm();
  3982  001904  ECC1  F019         	call	_DS3231_Turn_On_Alarm	;wreg free
  3983                           
  3984                           ;LabFinal.c: 224: alarm_mode = 1;
  3985  001908  0E00               	movlw	0
  3986  00190A  0100               	movlb	0	; () banked
  3987  00190C  6FED               	movwf	(_alarm_mode+1)& (0+255),b
  3988  00190E  0E01               	movlw	1
  3989  001910  6FEC               	movwf	_alarm_mode& (0+255),b
  3990  001912  D016               	goto	l9721
  3991  001914                     l9709:
  3992                           
  3993                           ; BSR set to: 0
  3994                           ;LabFinal.c: 228: else if(alarm_mode == 1 && ALARMEN == 0)
  3995  001914  0100               	movlb	0	; () banked
  3996  001916  05EC               	decf	_alarm_mode& (0+255),w,b
  3997  001918  0100               	movlb	0	; () banked
  3998  00191A  11ED               	iorwf	(_alarm_mode+1)& (0+255),w,b
  3999  00191C  A4D8               	btfss	status,2,c
  4000  00191E  D016               	goto	l9723
  4001                           
  4002                           ; BSR set to: 0
  4003  001920  5044               	movf	_ALARMEN,w,c
  4004  001922  1045               	iorwf	_ALARMEN+1,w,c
  4005  001924  A4D8               	btfss	status,2,c
  4006  001926  D012               	goto	l9723
  4007                           
  4008                           ; BSR set to: 0
  4009                           ;LabFinal.c: 229: {
  4010                           ;LabFinal.c: 230: DS3231_Turn_Off_Alarm();
  4011  001928  ECEA  F019         	call	_DS3231_Turn_Off_Alarm	;wreg free
  4012                           
  4013                           ;LabFinal.c: 231: alarm_mode = 0;
  4014  00192C  0E00               	movlw	0
  4015  00192E  0100               	movlb	0	; () banked
  4016  001930  6FED               	movwf	(_alarm_mode+1)& (0+255),b
  4017  001932  0E00               	movlw	0
  4018  001934  6FEC               	movwf	_alarm_mode& (0+255),b
  4019                           
  4020                           ; BSR set to: 0
  4021                           ;LabFinal.c: 232: Set_RGB_Color(0);
  4022  001936  0E00               	movlw	0
  4023  001938  EC01  F01D         	call	_Set_RGB_Color
  4024                           
  4025                           ;LabFinal.c: 233: Deactivate_Buzzer();
  4026  00193C  ECC1  F01E         	call	_Deactivate_Buzzer	;wreg free
  4027  001940                     l9721:
  4028                           
  4029                           ;LabFinal.c: 234: MATCHED = 0;
  4030  001940  0E00               	movlw	0
  4031  001942  0100               	movlb	0	; () banked
  4032  001944  6FEB               	movwf	(_MATCHED+1)& (0+255),b
  4033  001946  0E00               	movlw	0
  4034  001948  6FEA               	movwf	_MATCHED& (0+255),b
  4035                           
  4036                           ;LabFinal.c: 236: }
  4037  00194A  D063               	goto	l984
  4038  00194C                     l9723:
  4039                           
  4040                           ; BSR set to: 0
  4041                           ;LabFinal.c: 237: else if(alarm_mode == 1 && ALARMEN == 1)
  4042  00194C  0100               	movlb	0	; () banked
  4043  00194E  05EC               	decf	_alarm_mode& (0+255),w,b
  4044  001950  0100               	movlb	0	; () banked
  4045  001952  11ED               	iorwf	(_alarm_mode+1)& (0+255),w,b
  4046  001954  A4D8               	btfss	status,2,c
  4047  001956  D05D               	goto	l984
  4048                           
  4049                           ; BSR set to: 0
  4050  001958  0444               	decf	_ALARMEN,w,c
  4051  00195A  1045               	iorwf	_ALARMEN+1,w,c
  4052  00195C  A4D8               	btfss	status,2,c
  4053  00195E  D059               	goto	l984
  4054                           
  4055                           ; BSR set to: 0
  4056                           ;LabFinal.c: 238: {
  4057                           ;LabFinal.c: 241: if(PORTCbits.RC1 == 0)
  4058  001960  B282               	btfsc	3970,1,c	;volatile
  4059  001962  D008               	goto	l9733
  4060                           
  4061                           ; BSR set to: 0
  4062                           ;LabFinal.c: 242: {
  4063                           ;LabFinal.c: 243: MATCHED = 1;
  4064  001964  0E00               	movlw	0
  4065  001966  0100               	movlb	0	; () banked
  4066  001968  6FEB               	movwf	(_MATCHED+1)& (0+255),b
  4067  00196A  0E01               	movlw	1
  4068  00196C  6FEA               	movwf	_MATCHED& (0+255),b
  4069                           
  4070                           ; BSR set to: 0
  4071                           ;LabFinal.c: 244: Activate_Buzzer_4KHz();
  4072  00196E  EC19  F01E         	call	_Activate_Buzzer_4KHz	;wreg free
  4073  001972  D000               	goto	l9733
  4074  001974                     l9733:
  4075                           
  4076                           ;LabFinal.c: 245: }
  4077                           ;LabFinal.c: 246: if (MATCHED == 1)
  4078  001974  0100               	movlb	0	; () banked
  4079  001976  05EA               	decf	_MATCHED& (0+255),w,b
  4080  001978  0100               	movlb	0	; () banked
  4081  00197A  11EB               	iorwf	(_MATCHED+1)& (0+255),w,b
  4082  00197C  A4D8               	btfss	status,2,c
  4083  00197E  D049               	goto	l984
  4084                           
  4085                           ; BSR set to: 0
  4086                           ;LabFinal.c: 247: {
  4087                           ;LabFinal.c: 248: Set_RGB_Color(color++);
  4088  001980  0100               	movlb	0	; () banked
  4089  001982  51EE               	movf	_color& (0+255),w,b
  4090  001984  EC01  F01D         	call	_Set_RGB_Color
  4091  001988  0100               	movlb	0	; () banked
  4092  00198A  4BEE               	infsnz	_color& (0+255),f,b
  4093  00198C  2BEF               	incf	(_color+1)& (0+255),f,b
  4094                           
  4095                           ; BSR set to: 0
  4096                           ;LabFinal.c: 249: if(color > 7) color = 0;
  4097  00198E  0100               	movlb	0	; () banked
  4098  001990  BFEF               	btfsc	(_color+1)& (0+255),7,b
  4099  001992  D00E               	goto	l9743
  4100  001994  0100               	movlb	0	; () banked
  4101  001996  51EF               	movf	(_color+1)& (0+255),w,b
  4102  001998  E105               	bnz	u6870
  4103  00199A  0E08               	movlw	8
  4104  00199C  0100               	movlb	0	; () banked
  4105  00199E  5DEE               	subwf	_color& (0+255),w,b
  4106  0019A0  A0D8               	btfss	status,0,c
  4107  0019A2  D006               	goto	l9743
  4108  0019A4                     u6870:
  4109                           
  4110                           ; BSR set to: 0
  4111  0019A4  0E00               	movlw	0
  4112  0019A6  0100               	movlb	0	; () banked
  4113  0019A8  6FEF               	movwf	(_color+1)& (0+255),b
  4114  0019AA  0E00               	movlw	0
  4115  0019AC  6FEE               	movwf	_color& (0+255),b
  4116  0019AE  D000               	goto	l9743
  4117  0019B0                     l9743:
  4118                           
  4119                           ; BSR set to: 0
  4120                           ;LabFinal.c: 250: volt = read_volt();
  4121  0019B0  ECFD  F018         	call	_read_volt	;wreg free
  4122  0019B4  C03B  F0E7         	movff	?_read_volt,_volt
  4123  0019B8  C03C  F0E8         	movff	?_read_volt+1,_volt+1
  4124  0019BC  C03D  F0E9         	movff	?_read_volt+2,_volt+2
  4125                           
  4126                           ;LabFinal.c: 251: if(volt > 3)
  4127  0019C0  0E00               	movlw	0
  4128  0019C2  6E11               	movwf	___ftge@ff1,c
  4129  0019C4  0E40               	movlw	64
  4130  0019C6  6E12               	movwf	___ftge@ff1+1,c
  4131  0019C8  0E40               	movlw	64
  4132  0019CA  6E13               	movwf	___ftge@ff1+2,c
  4133  0019CC  C0E7  F014         	movff	_volt,___ftge@ff2
  4134  0019D0  C0E8  F015         	movff	_volt+1,___ftge@ff2+1
  4135  0019D4  C0E9  F016         	movff	_volt+2,___ftge@ff2+2
  4136  0019D8  ECFA  F014         	call	___ftge	;wreg free
  4137  0019DC  B0D8               	btfsc	status,0,c
  4138  0019DE  D019               	goto	l984
  4139                           
  4140                           ;LabFinal.c: 252: {
  4141                           ;LabFinal.c: 253: MATCHED = 0;
  4142  0019E0  0E00               	movlw	0
  4143  0019E2  0100               	movlb	0	; () banked
  4144  0019E4  6FEB               	movwf	(_MATCHED+1)& (0+255),b
  4145  0019E6  0E00               	movlw	0
  4146  0019E8  6FEA               	movwf	_MATCHED& (0+255),b
  4147                           
  4148                           ;LabFinal.c: 254: color = 0;
  4149  0019EA  0E00               	movlw	0
  4150  0019EC  0100               	movlb	0	; () banked
  4151  0019EE  6FEF               	movwf	(_color+1)& (0+255),b
  4152  0019F0  0E00               	movlw	0
  4153  0019F2  6FEE               	movwf	_color& (0+255),b
  4154                           
  4155                           ; BSR set to: 0
  4156                           ;LabFinal.c: 255: Set_RGB_Color(color);
  4157  0019F4  0100               	movlb	0	; () banked
  4158  0019F6  51EE               	movf	_color& (0+255),w,b
  4159  0019F8  EC01  F01D         	call	_Set_RGB_Color
  4160                           
  4161                           ;LabFinal.c: 256: Deactivate_Buzzer();
  4162  0019FC  ECC1  F01E         	call	_Deactivate_Buzzer	;wreg free
  4163                           
  4164                           ;LabFinal.c: 257: do_update_pwm(duty_cycle);
  4165  001A00  505D               	movf	_duty_cycle,w,c
  4166  001A02  EC49  F014         	call	_do_update_pwm
  4167                           
  4168                           ;LabFinal.c: 258: alarm_mode = 0;
  4169  001A06  0E00               	movlw	0
  4170  001A08  0100               	movlb	0	; () banked
  4171  001A0A  6FED               	movwf	(_alarm_mode+1)& (0+255),b
  4172  001A0C  0E00               	movlw	0
  4173  001A0E  6FEC               	movwf	_alarm_mode& (0+255),b
  4174                           
  4175                           ; BSR set to: 0
  4176                           
  4177                           ; BSR set to: 0
  4178                           
  4179                           ; BSR set to: 0
  4180                           
  4181                           ; BSR set to: 0
  4182  001A10  D000               	goto	l984
  4183  001A12                     l984:
  4184  001A12  0012               	return		;funcret
  4185  001A14                     __end_of_Test_Alarm:
  4186                           	opt stack 0
  4187                           tblptru	equ	0xFF8
  4188                           tblptrh	equ	0xFF7
  4189                           tblptrl	equ	0xFF6
  4190                           tablat	equ	0xFF5
  4191                           postinc0	equ	0xFEE
  4192                           wreg	equ	0xFE8
  4193                           postdec1	equ	0xFE5
  4194                           fsr1l	equ	0xFE1
  4195                           status	equ	0xFD8
  4196                           
  4197 ;; *************** function _read_volt *****************
  4198 ;; Defined at:
  4199 ;;		line 156 in file "Utils.c"
  4200 ;; Parameters:    Size  Location     Type
  4201 ;;		None
  4202 ;; Auto vars:     Size  Location     Type
  4203 ;;  volt            3   61[COMRAM] float 
  4204 ;;  nStep           2   64[COMRAM] int 
  4205 ;; Return value:  Size  Location     Type
  4206 ;;                  3   58[COMRAM] float 
  4207 ;; Registers used:
  4208 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4209 ;; Tracked objects:
  4210 ;;		On entry : 0/0
  4211 ;;		On exit  : 0/0
  4212 ;;		Unchanged: 0/0
  4213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4214 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4215 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4216 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4217 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4218 ;;Total ram usage:        8 bytes
  4219 ;; Hardware stack levels used:    1
  4220 ;; Hardware stack levels required when called:    5
  4221 ;; This function calls:
  4222 ;;		___awtoft
  4223 ;;		___ftdiv
  4224 ;;		___wmul
  4225 ;;		_get_full_ADC
  4226 ;; This function is called by:
  4227 ;;		_main
  4228 ;;		_Test_Alarm
  4229 ;; This function uses a non-reentrant model
  4230 ;;
  4231                           
  4232                           	psect	text5
  4233  0031FA                     __ptext5:
  4234                           	opt stack 0
  4235  0031FA                     _read_volt:
  4236                           	opt stack 25
  4237                           
  4238                           ;Utils.c: 159: int nStep = get_full_ADC();
  4239                           
  4240                           ;incstack = 0
  4241  0031FA  ECDB  F01C         	call	_get_full_ADC	;wreg free
  4242  0031FE  C011  F041         	movff	?_get_full_ADC,read_volt@nStep
  4243  003202  C012  F042         	movff	?_get_full_ADC+1,read_volt@nStep+1
  4244                           
  4245                           ;Utils.c: 160: float volt = nStep * 5 /1024.0;
  4246  003206  C041  F011         	movff	read_volt@nStep,___wmul@multiplier
  4247  00320A  C042  F012         	movff	read_volt@nStep+1,___wmul@multiplier+1
  4248  00320E  0E00               	movlw	0
  4249  003210  6E14               	movwf	___wmul@multiplicand+1,c
  4250  003212  0E05               	movlw	5
  4251  003214  6E13               	movwf	___wmul@multiplicand,c
  4252  003216  ECC7  F01C         	call	___wmul	;wreg free
  4253  00321A  C011  F019         	movff	?___wmul,___awtoft@c
  4254  00321E  C012  F01A         	movff	?___wmul+1,___awtoft@c+1
  4255  003222  ECFF  F01B         	call	___awtoft	;wreg free
  4256  003226  C019  F02C         	movff	?___awtoft,___ftdiv@f1
  4257  00322A  C01A  F02D         	movff	?___awtoft+1,___ftdiv@f1+1
  4258  00322E  C01B  F02E         	movff	?___awtoft+2,___ftdiv@f1+2
  4259  003232  0E00               	movlw	0
  4260  003234  6E2F               	movwf	___ftdiv@f2,c
  4261  003236  0E80               	movlw	128
  4262  003238  6E30               	movwf	___ftdiv@f2+1,c
  4263  00323A  0E44               	movlw	68
  4264  00323C  6E31               	movwf	___ftdiv@f2+2,c
  4265  00323E  EC7F  F011         	call	___ftdiv	;wreg free
  4266  003242  C02C  F03E         	movff	?___ftdiv,read_volt@volt
  4267  003246  C02D  F03F         	movff	?___ftdiv+1,read_volt@volt+1
  4268  00324A  C02E  F040         	movff	?___ftdiv+2,read_volt@volt+2
  4269                           
  4270                           ;Utils.c: 161: return volt;
  4271  00324E  C03E  F03B         	movff	read_volt@volt,?_read_volt
  4272  003252  C03F  F03C         	movff	read_volt@volt+1,?_read_volt+1
  4273  003256  C040  F03D         	movff	read_volt@volt+2,?_read_volt+2
  4274  00325A  D000               	goto	l724
  4275  00325C                     l724:
  4276  00325C  0012               	return		;funcret
  4277  00325E                     __end_of_read_volt:
  4278                           	opt stack 0
  4279                           tblptru	equ	0xFF8
  4280                           tblptrh	equ	0xFF7
  4281                           tblptrl	equ	0xFF6
  4282                           tablat	equ	0xFF5
  4283                           postinc0	equ	0xFEE
  4284                           wreg	equ	0xFE8
  4285                           postdec1	equ	0xFE5
  4286                           fsr1l	equ	0xFE1
  4287                           status	equ	0xFD8
  4288                           
  4289 ;; *************** function _get_full_ADC *****************
  4290 ;; Defined at:
  4291 ;;		line 164 in file "Utils.c"
  4292 ;; Parameters:    Size  Location     Type
  4293 ;;		None
  4294 ;; Auto vars:     Size  Location     Type
  4295 ;;  result          2   20[COMRAM] unsigned int 
  4296 ;; Return value:  Size  Location     Type
  4297 ;;                  2   16[COMRAM] unsigned int 
  4298 ;; Registers used:
  4299 ;;		wreg, status,2, status,0
  4300 ;; Tracked objects:
  4301 ;;		On entry : 0/0
  4302 ;;		On exit  : 0/0
  4303 ;;		Unchanged: 0/0
  4304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4305 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4306 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4307 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4308 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4309 ;;Total ram usage:        6 bytes
  4310 ;; Hardware stack levels used:    1
  4311 ;; Hardware stack levels required when called:    3
  4312 ;; This function calls:
  4313 ;;		Nothing
  4314 ;; This function is called by:
  4315 ;;		_read_volt
  4316 ;; This function uses a non-reentrant model
  4317 ;;
  4318                           
  4319                           	psect	text6
  4320  0039B6                     __ptext6:
  4321                           	opt stack 0
  4322  0039B6                     _get_full_ADC:
  4323                           	opt stack 26
  4324                           
  4325                           ;Utils.c: 166: unsigned int result;
  4326                           ;Utils.c: 167: ADCON0bits.GO=1;
  4327                           
  4328                           ;incstack = 0
  4329  0039B6  82C2               	bsf	4034,1,c	;volatile
  4330                           
  4331                           ;Utils.c: 168: while(ADCON0bits.DONE == 1)
  4332  0039B8  D00E               	goto	l727
  4333  0039BA                     l6187:
  4334                           
  4335                           ;Utils.c: 169: {
  4336                           ;Utils.c: 170: result = (ADRESH*0x100) + ADRESL;
  4337  0039BA  50C4               	movf	4036,w,c	;volatile
  4338  0039BC  6E14               	movwf	(??_get_full_ADC+1)& (0+255),c
  4339  0039BE  6A13               	clrf	??_get_full_ADC& (0+255),c
  4340  0039C0  50C3               	movf	4035,w,c	;volatile
  4341  0039C2  2413               	addwf	??_get_full_ADC,w,c
  4342  0039C4  6E15               	movwf	get_full_ADC@result,c
  4343  0039C6  0E00               	movlw	0
  4344  0039C8  2014               	addwfc	??_get_full_ADC+1,w,c
  4345  0039CA  6E16               	movwf	get_full_ADC@result+1,c
  4346                           
  4347                           ;Utils.c: 171: return result;
  4348  0039CC  C015  F011         	movff	get_full_ADC@result,?_get_full_ADC
  4349  0039D0  C016  F012         	movff	get_full_ADC@result+1,?_get_full_ADC+1
  4350  0039D4  D002               	goto	l729
  4351  0039D6                     l727:
  4352  0039D6  B2C2               	btfsc	4034,1,c	;volatile
  4353  0039D8  D7F0               	goto	l6187
  4354  0039DA                     l729:
  4355  0039DA  0012               	return		;funcret
  4356  0039DC                     __end_of_get_full_ADC:
  4357                           	opt stack 0
  4358                           tblptru	equ	0xFF8
  4359                           tblptrh	equ	0xFF7
  4360                           tblptrl	equ	0xFF6
  4361                           tablat	equ	0xFF5
  4362                           postinc0	equ	0xFEE
  4363                           wreg	equ	0xFE8
  4364                           postdec1	equ	0xFE5
  4365                           fsr1l	equ	0xFE1
  4366                           status	equ	0xFD8
  4367                           
  4368 ;; *************** function ___awtoft *****************
  4369 ;; Defined at:
  4370 ;;		line 32 in file "E:\XC8\sources\common\awtoft.c"
  4371 ;; Parameters:    Size  Location     Type
  4372 ;;  c               2   24[COMRAM] int 
  4373 ;; Auto vars:     Size  Location     Type
  4374 ;;  sign            1   27[COMRAM] unsigned char 
  4375 ;; Return value:  Size  Location     Type
  4376 ;;                  3   24[COMRAM] float 
  4377 ;; Registers used:
  4378 ;;		wreg, status,2, status,0, cstack
  4379 ;; Tracked objects:
  4380 ;;		On entry : 0/0
  4381 ;;		On exit  : 0/0
  4382 ;;		Unchanged: 0/0
  4383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4384 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4385 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4386 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4387 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4388 ;;Total ram usage:        4 bytes
  4389 ;; Hardware stack levels used:    1
  4390 ;; Hardware stack levels required when called:    4
  4391 ;; This function calls:
  4392 ;;		___ftpack
  4393 ;; This function is called by:
  4394 ;;		_read_volt
  4395 ;; This function uses a non-reentrant model
  4396 ;;
  4397                           
  4398                           	psect	text7
  4399  0037FE                     __ptext7:
  4400                           	opt stack 0
  4401  0037FE                     ___awtoft:
  4402                           	opt stack 25
  4403                           
  4404                           ;incstack = 0
  4405  0037FE  0E00               	movlw	0
  4406  003800  6E1C               	movwf	___awtoft@sign,c
  4407  003802  AE1A               	btfss	___awtoft@c+1,7,c
  4408  003804  D007               	goto	l9045
  4409  003806  6C19               	negf	___awtoft@c,c
  4410  003808  1E1A               	comf	___awtoft@c+1,f,c
  4411  00380A  B0D8               	btfsc	status,0,c
  4412  00380C  2A1A               	incf	___awtoft@c+1,f,c
  4413  00380E  0E01               	movlw	1
  4414  003810  6E1C               	movwf	___awtoft@sign,c
  4415  003812  D000               	goto	l9045
  4416  003814                     l9045:
  4417  003814  C019  F011         	movff	___awtoft@c,___ftpack@arg
  4418  003818  C01A  F012         	movff	___awtoft@c+1,___ftpack@arg+1
  4419  00381C  6A13               	clrf	___ftpack@arg+2,c
  4420  00381E  0E8E               	movlw	142
  4421  003820  6E14               	movwf	___ftpack@exp,c
  4422  003822  C01C  F015         	movff	___awtoft@sign,___ftpack@sign
  4423  003826  EC2B  F013         	call	___ftpack	;wreg free
  4424  00382A  C011  F019         	movff	?___ftpack,?___awtoft
  4425  00382E  C012  F01A         	movff	?___ftpack+1,?___awtoft+1
  4426  003832  C013  F01B         	movff	?___ftpack+2,?___awtoft+2
  4427  003836  D000               	goto	l1691
  4428  003838                     l1691:
  4429  003838  0012               	return		;funcret
  4430  00383A                     __end_of___awtoft:
  4431                           	opt stack 0
  4432                           tblptru	equ	0xFF8
  4433                           tblptrh	equ	0xFF7
  4434                           tblptrl	equ	0xFF6
  4435                           tablat	equ	0xFF5
  4436                           postinc0	equ	0xFEE
  4437                           wreg	equ	0xFE8
  4438                           postdec1	equ	0xFE5
  4439                           fsr1l	equ	0xFE1
  4440                           status	equ	0xFD8
  4441                           
  4442 ;; *************** function ___ftge *****************
  4443 ;; Defined at:
  4444 ;;		line 4 in file "E:\XC8\sources\common\ftge.c"
  4445 ;; Parameters:    Size  Location     Type
  4446 ;;  ff1             3   16[COMRAM] float 
  4447 ;;  ff2             3   19[COMRAM] float 
  4448 ;; Auto vars:     Size  Location     Type
  4449 ;;		None
  4450 ;; Return value:  Size  Location     Type
  4451 ;;		None               void
  4452 ;; Registers used:
  4453 ;;		wreg, status,2, status,0
  4454 ;; Tracked objects:
  4455 ;;		On entry : 0/0
  4456 ;;		On exit  : 0/0
  4457 ;;		Unchanged: 0/0
  4458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4459 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4460 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4461 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4462 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4463 ;;Total ram usage:        9 bytes
  4464 ;; Hardware stack levels used:    1
  4465 ;; Hardware stack levels required when called:    3
  4466 ;; This function calls:
  4467 ;;		Nothing
  4468 ;; This function is called by:
  4469 ;;		_Test_Alarm
  4470 ;; This function uses a non-reentrant model
  4471 ;;
  4472                           
  4473                           	psect	text8
  4474  0029F4                     __ptext8:
  4475                           	opt stack 0
  4476  0029F4                     ___ftge:
  4477                           	opt stack 26
  4478                           
  4479                           ;incstack = 0
  4480  0029F4  AE13               	btfss	___ftge@ff1+2,7,c
  4481  0029F6  D017               	goto	l6779
  4482  0029F8  C011  F017         	movff	___ftge@ff1,??___ftge
  4483  0029FC  C012  F018         	movff	___ftge@ff1+1,??___ftge+1
  4484  002A00  C013  F019         	movff	___ftge@ff1+2,??___ftge+2
  4485  002A04  1E17               	comf	??___ftge,f,c
  4486  002A06  1E18               	comf	??___ftge+1,f,c
  4487  002A08  1E19               	comf	??___ftge+2,f,c
  4488  002A0A  2A17               	incf	??___ftge,f,c
  4489  002A0C  0E00               	movlw	0
  4490  002A0E  2218               	addwfc	??___ftge+1,f,c
  4491  002A10  2219               	addwfc	??___ftge+2,f,c
  4492  002A12  0E00               	movlw	0
  4493  002A14  2417               	addwf	??___ftge,w,c
  4494  002A16  6E11               	movwf	___ftge@ff1,c
  4495  002A18  0E00               	movlw	0
  4496  002A1A  2018               	addwfc	??___ftge+1,w,c
  4497  002A1C  6E12               	movwf	___ftge@ff1+1,c
  4498  002A1E  0E80               	movlw	128
  4499  002A20  2019               	addwfc	??___ftge+2,w,c
  4500  002A22  6E13               	movwf	___ftge@ff1+2,c
  4501  002A24  D000               	goto	l6779
  4502  002A26                     l6779:
  4503  002A26  AE16               	btfss	___ftge@ff2+2,7,c
  4504  002A28  D017               	goto	l6783
  4505  002A2A  C014  F017         	movff	___ftge@ff2,??___ftge
  4506  002A2E  C015  F018         	movff	___ftge@ff2+1,??___ftge+1
  4507  002A32  C016  F019         	movff	___ftge@ff2+2,??___ftge+2
  4508  002A36  1E17               	comf	??___ftge,f,c
  4509  002A38  1E18               	comf	??___ftge+1,f,c
  4510  002A3A  1E19               	comf	??___ftge+2,f,c
  4511  002A3C  2A17               	incf	??___ftge,f,c
  4512  002A3E  0E00               	movlw	0
  4513  002A40  2218               	addwfc	??___ftge+1,f,c
  4514  002A42  2219               	addwfc	??___ftge+2,f,c
  4515  002A44  0E00               	movlw	0
  4516  002A46  2417               	addwf	??___ftge,w,c
  4517  002A48  6E14               	movwf	___ftge@ff2,c
  4518  002A4A  0E00               	movlw	0
  4519  002A4C  2018               	addwfc	??___ftge+1,w,c
  4520  002A4E  6E15               	movwf	___ftge@ff2+1,c
  4521  002A50  0E80               	movlw	128
  4522  002A52  2019               	addwfc	??___ftge+2,w,c
  4523  002A54  6E16               	movwf	___ftge@ff2+2,c
  4524  002A56  D000               	goto	l6783
  4525  002A58                     l6783:
  4526  002A58  0E00               	movlw	0
  4527  002A5A  1A11               	xorwf	___ftge@ff1,f,c
  4528  002A5C  0E00               	movlw	0
  4529  002A5E  1A12               	xorwf	___ftge@ff1+1,f,c
  4530  002A60  0E80               	movlw	128
  4531  002A62  1A13               	xorwf	___ftge@ff1+2,f,c
  4532  002A64  0E00               	movlw	0
  4533  002A66  1A14               	xorwf	___ftge@ff2,f,c
  4534  002A68  0E00               	movlw	0
  4535  002A6A  1A15               	xorwf	___ftge@ff2+1,f,c
  4536  002A6C  0E80               	movlw	128
  4537  002A6E  1A16               	xorwf	___ftge@ff2+2,f,c
  4538  002A70  5014               	movf	___ftge@ff2,w,c
  4539  002A72  5C11               	subwf	___ftge@ff1,w,c
  4540  002A74  5015               	movf	___ftge@ff2+1,w,c
  4541  002A76  5812               	subwfb	___ftge@ff1+1,w,c
  4542  002A78  5016               	movf	___ftge@ff2+2,w,c
  4543  002A7A  5813               	subwfb	___ftge@ff1+2,w,c
  4544  002A7C  B0D8               	btfsc	status,0,c
  4545  002A7E  D002               	goto	l6789
  4546  002A80  90D8               	bcf	status,0,c
  4547  002A82  D002               	goto	l1862
  4548  002A84                     l6789:
  4549  002A84  80D8               	bsf	status,0,c
  4550  002A86  D000               	goto	l1862
  4551  002A88                     l1862:
  4552  002A88  0012               	return		;funcret
  4553  002A8A                     __end_of___ftge:
  4554                           	opt stack 0
  4555                           tblptru	equ	0xFF8
  4556                           tblptrh	equ	0xFF7
  4557                           tblptrl	equ	0xFF6
  4558                           tablat	equ	0xFF5
  4559                           postinc0	equ	0xFEE
  4560                           wreg	equ	0xFE8
  4561                           postdec1	equ	0xFE5
  4562                           fsr1l	equ	0xFE1
  4563                           status	equ	0xFD8
  4564                           
  4565 ;; *************** function _DS3231_Turn_On_Alarm *****************
  4566 ;; Defined at:
  4567 ;;		line 229 in file "I2C_Support.c"
  4568 ;; Parameters:    Size  Location     Type
  4569 ;;		None
  4570 ;; Auto vars:     Size  Location     Type
  4571 ;;  Device          1   30[COMRAM] unsigned char 
  4572 ;;  control_F       1   29[COMRAM] unsigned char 
  4573 ;;  control_E       1   28[COMRAM] unsigned char 
  4574 ;;  Address_F       1   27[COMRAM] unsigned char 
  4575 ;;  Address_E       1   26[COMRAM] unsigned char 
  4576 ;; Return value:  Size  Location     Type
  4577 ;;		None               void
  4578 ;; Registers used:
  4579 ;;		wreg, status,2, status,0, cstack
  4580 ;; Tracked objects:
  4581 ;;		On entry : 0/0
  4582 ;;		On exit  : 0/0
  4583 ;;		Unchanged: 0/0
  4584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4585 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4586 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4587 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4588 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4589 ;;Total ram usage:        5 bytes
  4590 ;; Hardware stack levels used:    1
  4591 ;; Hardware stack levels required when called:    8
  4592 ;; This function calls:
  4593 ;;		_DS3231_Init
  4594 ;;		_I2C_Write_Address_Read_One_Byte
  4595 ;;		_I2C_Write_Address_Write_One_Byte
  4596 ;; This function is called by:
  4597 ;;		_Test_Alarm
  4598 ;; This function uses a non-reentrant model
  4599 ;;
  4600                           
  4601                           	psect	text9
  4602  003382                     __ptext9:
  4603                           	opt stack 0
  4604  003382                     _DS3231_Turn_On_Alarm:
  4605                           	opt stack 21
  4606                           
  4607                           ;I2C_Support.c: 231: char Device = 0x68;
  4608                           
  4609                           ;incstack = 0
  4610  003382  0E68               	movlw	104
  4611  003384  6E1F               	movwf	DS3231_Turn_On_Alarm@Device,c
  4612                           
  4613                           ;I2C_Support.c: 232: char Address_E = 0x0E;
  4614  003386  0E0E               	movlw	14
  4615  003388  6E1B               	movwf	DS3231_Turn_On_Alarm@Address_E,c
  4616                           
  4617                           ;I2C_Support.c: 233: char Address_F = 0x0F;
  4618  00338A  0E0F               	movlw	15
  4619  00338C  6E1C               	movwf	DS3231_Turn_On_Alarm@Address_F,c
  4620                           
  4621                           ;I2C_Support.c: 234: char control_E;
  4622                           ;I2C_Support.c: 235: char control_F;
  4623                           ;I2C_Support.c: 237: control_E = I2C_Write_Address_Read_One_Byte(Device, Address_E);
  4624  00338E  C01B  F014         	movff	DS3231_Turn_On_Alarm@Address_E,I2C_Write_Address_Read_One_Byte@Address
  4625  003392  501F               	movf	DS3231_Turn_On_Alarm@Device,w,c
  4626  003394  EC3B  F01C         	call	_I2C_Write_Address_Read_One_Byte
  4627  003398  6E1D               	movwf	DS3231_Turn_On_Alarm@control_E,c
  4628                           
  4629                           ;I2C_Support.c: 238: control_E = control_E | 0x01;
  4630  00339A  501D               	movf	DS3231_Turn_On_Alarm@control_E,w,c
  4631  00339C  0901               	iorlw	1
  4632  00339E  6E1D               	movwf	DS3231_Turn_On_Alarm@control_E,c
  4633                           
  4634                           ;I2C_Support.c: 239: I2C_Write_Address_Write_One_Byte(Device, Address_E, control_E);
  4635  0033A0  C01B  F013         	movff	DS3231_Turn_On_Alarm@Address_E,I2C_Write_Address_Write_One_Byte@Address
  4636  0033A4  C01D  F014         	movff	DS3231_Turn_On_Alarm@control_E,I2C_Write_Address_Write_One_Byte@Data_Out
  4637  0033A8  501F               	movf	DS3231_Turn_On_Alarm@Device,w,c
  4638  0033AA  EC24  F01D         	call	_I2C_Write_Address_Write_One_Byte
  4639                           
  4640                           ;I2C_Support.c: 241: control_F = I2C_Write_Address_Read_One_Byte(Device, Address_F);
  4641  0033AE  C01C  F014         	movff	DS3231_Turn_On_Alarm@Address_F,I2C_Write_Address_Read_One_Byte@Address
  4642  0033B2  501F               	movf	DS3231_Turn_On_Alarm@Device,w,c
  4643  0033B4  EC3B  F01C         	call	_I2C_Write_Address_Read_One_Byte
  4644  0033B8  6E1E               	movwf	DS3231_Turn_On_Alarm@control_F,c
  4645                           
  4646                           ;I2C_Support.c: 242: control_F = control_F & 0xFE;
  4647  0033BA  501E               	movf	DS3231_Turn_On_Alarm@control_F,w,c
  4648  0033BC  0BFE               	andlw	254
  4649  0033BE  6E1E               	movwf	DS3231_Turn_On_Alarm@control_F,c
  4650                           
  4651                           ;I2C_Support.c: 243: I2C_Write_Address_Write_One_Byte(Device, Address_F, control_F);
  4652  0033C0  C01C  F013         	movff	DS3231_Turn_On_Alarm@Address_F,I2C_Write_Address_Write_One_Byte@Address
  4653  0033C4  C01E  F014         	movff	DS3231_Turn_On_Alarm@control_F,I2C_Write_Address_Write_One_Byte@Data_Out
  4654  0033C8  501F               	movf	DS3231_Turn_On_Alarm@Device,w,c
  4655  0033CA  EC24  F01D         	call	_I2C_Write_Address_Write_One_Byte
  4656                           
  4657                           ;I2C_Support.c: 244: DS3231_Init();
  4658  0033CE  ECED  F013         	call	_DS3231_Init	;wreg free
  4659  0033D2  0012               	return		;funcret
  4660  0033D4                     __end_of_DS3231_Turn_On_Alarm:
  4661                           	opt stack 0
  4662                           tblptru	equ	0xFF8
  4663                           tblptrh	equ	0xFF7
  4664                           tblptrl	equ	0xFF6
  4665                           tablat	equ	0xFF5
  4666                           postinc0	equ	0xFEE
  4667                           wreg	equ	0xFE8
  4668                           postdec1	equ	0xFE5
  4669                           fsr1l	equ	0xFE1
  4670                           status	equ	0xFD8
  4671                           
  4672 ;; *************** function _DS3231_Turn_Off_Alarm *****************
  4673 ;; Defined at:
  4674 ;;		line 212 in file "I2C_Support.c"
  4675 ;; Parameters:    Size  Location     Type
  4676 ;;		None
  4677 ;; Auto vars:     Size  Location     Type
  4678 ;;  Device          1   30[COMRAM] unsigned char 
  4679 ;;  control_F       1   29[COMRAM] unsigned char 
  4680 ;;  control_E       1   28[COMRAM] unsigned char 
  4681 ;;  Address_F       1   27[COMRAM] unsigned char 
  4682 ;;  Address_E       1   26[COMRAM] unsigned char 
  4683 ;; Return value:  Size  Location     Type
  4684 ;;		None               void
  4685 ;; Registers used:
  4686 ;;		wreg, status,2, status,0, cstack
  4687 ;; Tracked objects:
  4688 ;;		On entry : 0/0
  4689 ;;		On exit  : 0/0
  4690 ;;		Unchanged: 0/0
  4691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4692 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4693 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4694 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4695 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4696 ;;Total ram usage:        5 bytes
  4697 ;; Hardware stack levels used:    1
  4698 ;; Hardware stack levels required when called:    8
  4699 ;; This function calls:
  4700 ;;		_DS3231_Init
  4701 ;;		_I2C_Write_Address_Read_One_Byte
  4702 ;;		_I2C_Write_Address_Write_One_Byte
  4703 ;; This function is called by:
  4704 ;;		_main
  4705 ;;		_Test_Alarm
  4706 ;; This function uses a non-reentrant model
  4707 ;;
  4708                           
  4709                           	psect	text10
  4710  0033D4                     __ptext10:
  4711                           	opt stack 0
  4712  0033D4                     _DS3231_Turn_Off_Alarm:
  4713                           	opt stack 21
  4714                           
  4715                           ;I2C_Support.c: 214: char Device = 0x68;
  4716                           
  4717                           ;incstack = 0
  4718  0033D4  0E68               	movlw	104
  4719  0033D6  6E1F               	movwf	DS3231_Turn_Off_Alarm@Device,c
  4720                           
  4721                           ;I2C_Support.c: 215: char Address_E = 0x0E;
  4722  0033D8  0E0E               	movlw	14
  4723  0033DA  6E1B               	movwf	DS3231_Turn_Off_Alarm@Address_E,c
  4724                           
  4725                           ;I2C_Support.c: 216: char Address_F = 0x0F;
  4726  0033DC  0E0F               	movlw	15
  4727  0033DE  6E1C               	movwf	DS3231_Turn_Off_Alarm@Address_F,c
  4728                           
  4729                           ;I2C_Support.c: 217: char control_E;
  4730                           ;I2C_Support.c: 218: char control_F;
  4731                           ;I2C_Support.c: 220: control_E = I2C_Write_Address_Read_One_Byte(Device, Address_E);
  4732  0033E0  C01B  F014         	movff	DS3231_Turn_Off_Alarm@Address_E,I2C_Write_Address_Read_One_Byte@Address
  4733  0033E4  501F               	movf	DS3231_Turn_Off_Alarm@Device,w,c
  4734  0033E6  EC3B  F01C         	call	_I2C_Write_Address_Read_One_Byte
  4735  0033EA  6E1D               	movwf	DS3231_Turn_Off_Alarm@control_E,c
  4736                           
  4737                           ;I2C_Support.c: 221: control_E = control_E & 0xFE;
  4738  0033EC  501D               	movf	DS3231_Turn_Off_Alarm@control_E,w,c
  4739  0033EE  0BFE               	andlw	254
  4740  0033F0  6E1D               	movwf	DS3231_Turn_Off_Alarm@control_E,c
  4741                           
  4742                           ;I2C_Support.c: 222: I2C_Write_Address_Write_One_Byte(Device, Address_E, control_E);
  4743  0033F2  C01B  F013         	movff	DS3231_Turn_Off_Alarm@Address_E,I2C_Write_Address_Write_One_Byte@Address
  4744  0033F6  C01D  F014         	movff	DS3231_Turn_Off_Alarm@control_E,I2C_Write_Address_Write_One_Byte@Data_Out
  4745  0033FA  501F               	movf	DS3231_Turn_Off_Alarm@Device,w,c
  4746  0033FC  EC24  F01D         	call	_I2C_Write_Address_Write_One_Byte
  4747                           
  4748                           ;I2C_Support.c: 223: control_F = I2C_Write_Address_Read_One_Byte(Device, Address_F);
  4749  003400  C01C  F014         	movff	DS3231_Turn_Off_Alarm@Address_F,I2C_Write_Address_Read_One_Byte@Address
  4750  003404  501F               	movf	DS3231_Turn_Off_Alarm@Device,w,c
  4751  003406  EC3B  F01C         	call	_I2C_Write_Address_Read_One_Byte
  4752  00340A  6E1E               	movwf	DS3231_Turn_Off_Alarm@control_F,c
  4753                           
  4754                           ;I2C_Support.c: 224: control_F = control_F & 0xFE;
  4755  00340C  501E               	movf	DS3231_Turn_Off_Alarm@control_F,w,c
  4756  00340E  0BFE               	andlw	254
  4757  003410  6E1E               	movwf	DS3231_Turn_Off_Alarm@control_F,c
  4758                           
  4759                           ;I2C_Support.c: 225: I2C_Write_Address_Write_One_Byte(Device, Address_F, control_F);
  4760  003412  C01C  F013         	movff	DS3231_Turn_Off_Alarm@Address_F,I2C_Write_Address_Write_One_Byte@Address
  4761  003416  C01E  F014         	movff	DS3231_Turn_Off_Alarm@control_F,I2C_Write_Address_Write_One_Byte@Data_Out
  4762  00341A  501F               	movf	DS3231_Turn_Off_Alarm@Device,w,c
  4763  00341C  EC24  F01D         	call	_I2C_Write_Address_Write_One_Byte
  4764                           
  4765                           ;I2C_Support.c: 226: DS3231_Init();
  4766  003420  ECED  F013         	call	_DS3231_Init	;wreg free
  4767  003424  0012               	return		;funcret
  4768  003426                     __end_of_DS3231_Turn_Off_Alarm:
  4769                           	opt stack 0
  4770                           tblptru	equ	0xFF8
  4771                           tblptrh	equ	0xFF7
  4772                           tblptrl	equ	0xFF6
  4773                           tablat	equ	0xFF5
  4774                           postinc0	equ	0xFEE
  4775                           wreg	equ	0xFE8
  4776                           postdec1	equ	0xFE5
  4777                           fsr1l	equ	0xFE1
  4778                           status	equ	0xFD8
  4779                           
  4780 ;; *************** function _DS3231_Init *****************
  4781 ;; Defined at:
  4782 ;;		line 151 in file "I2C_Support.c"
  4783 ;; Parameters:    Size  Location     Type
  4784 ;;		None
  4785 ;; Auto vars:     Size  Location     Type
  4786 ;;  Device          1   25[COMRAM] unsigned char 
  4787 ;;  control_E       1   24[COMRAM] unsigned char 
  4788 ;;  Address_E       1   23[COMRAM] unsigned char 
  4789 ;;  Address_7       1   22[COMRAM] unsigned char 
  4790 ;; Return value:  Size  Location     Type
  4791 ;;		None               void
  4792 ;; Registers used:
  4793 ;;		wreg, status,2, status,0, cstack
  4794 ;; Tracked objects:
  4795 ;;		On entry : 0/0
  4796 ;;		On exit  : 0/0
  4797 ;;		Unchanged: 0/0
  4798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4799 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4800 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4801 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4802 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4803 ;;Total ram usage:        4 bytes
  4804 ;; Hardware stack levels used:    1
  4805 ;; Hardware stack levels required when called:    7
  4806 ;; This function calls:
  4807 ;;		_I2C_ReStart
  4808 ;;		_I2C_Read
  4809 ;;		_I2C_Start
  4810 ;;		_I2C_Stop
  4811 ;;		_I2C_Write
  4812 ;;		_I2C_Write_Address_Read_One_Byte
  4813 ;;		_I2C_Write_Address_Write_One_Byte
  4814 ;; This function is called by:
  4815 ;;		_DS3231_Turn_Off_Alarm
  4816 ;;		_DS3231_Turn_On_Alarm
  4817 ;; This function uses a non-reentrant model
  4818 ;;
  4819                           
  4820                           	psect	text11
  4821  0027DA                     __ptext11:
  4822                           	opt stack 0
  4823  0027DA                     _DS3231_Init:
  4824                           	opt stack 21
  4825                           
  4826                           ;I2C_Support.c: 153: char Device = 0x68;
  4827                           
  4828                           ;incstack = 0
  4829  0027DA  0E68               	movlw	104
  4830  0027DC  6E1A               	movwf	DS3231_Init@Device,c
  4831                           
  4832                           ;I2C_Support.c: 154: char Address_7 = 0x07;
  4833  0027DE  0E07               	movlw	7
  4834  0027E0  6E17               	movwf	DS3231_Init@Address_7,c
  4835                           
  4836                           ;I2C_Support.c: 155: char Address_E = 0x0E;
  4837  0027E2  0E0E               	movlw	14
  4838  0027E4  6E18               	movwf	DS3231_Init@Address_E,c
  4839                           
  4840                           ;I2C_Support.c: 156: char control_E;
  4841                           ;I2C_Support.c: 158: control_E = I2C_Write_Address_Read_One_Byte(Device, Address_E);
  4842  0027E6  C018  F014         	movff	DS3231_Init@Address_E,I2C_Write_Address_Read_One_Byte@Address
  4843  0027EA  501A               	movf	DS3231_Init@Device,w,c
  4844  0027EC  EC3B  F01C         	call	_I2C_Write_Address_Read_One_Byte
  4845  0027F0  6E19               	movwf	DS3231_Init@control_E,c
  4846                           
  4847                           ;I2C_Support.c: 159: control_E = control_E & 0x01;
  4848  0027F2  5019               	movf	DS3231_Init@control_E,w,c
  4849  0027F4  0B01               	andlw	1
  4850  0027F6  6E19               	movwf	DS3231_Init@control_E,c
  4851                           
  4852                           ;I2C_Support.c: 160: control_E = control_E | 0x25;
  4853  0027F8  5019               	movf	DS3231_Init@control_E,w,c
  4854  0027FA  0925               	iorlw	37
  4855  0027FC  6E19               	movwf	DS3231_Init@control_E,c
  4856                           
  4857                           ;I2C_Support.c: 161: I2C_Write_Address_Write_One_Byte(Device, Address_E, control_E);
  4858  0027FE  C018  F013         	movff	DS3231_Init@Address_E,I2C_Write_Address_Write_One_Byte@Address
  4859  002802  C019  F014         	movff	DS3231_Init@control_E,I2C_Write_Address_Write_One_Byte@Data_Out
  4860  002806  501A               	movf	DS3231_Init@Device,w,c
  4861  002808  EC24  F01D         	call	_I2C_Write_Address_Write_One_Byte
  4862                           
  4863                           ;I2C_Support.c: 162: I2C_Start();
  4864  00280C  EC46  F01E         	call	_I2C_Start	;wreg free
  4865                           
  4866                           ;I2C_Support.c: 163: I2C_Write((Device << 1) | 0);
  4867  002810  501A               	movf	DS3231_Init@Device,w,c
  4868  002812  241A               	addwf	DS3231_Init@Device,w,c
  4869  002814  ECC2  F01B         	call	_I2C_Write
  4870                           
  4871                           ;I2C_Support.c: 164: I2C_Write(Address_7);
  4872  002818  5017               	movf	DS3231_Init@Address_7,w,c
  4873  00281A  ECC2  F01B         	call	_I2C_Write
  4874                           
  4875                           ;I2C_Support.c: 165: I2C_ReStart();
  4876  00281E  ECD2  F01D         	call	_I2C_ReStart	;wreg free
  4877                           
  4878                           ;I2C_Support.c: 166: I2C_Write((Device << 1) | 1);
  4879  002822  80D8               	bsf	status,0,c
  4880  002824  341A               	rlcf	DS3231_Init@Device,w,c
  4881  002826  ECC2  F01B         	call	_I2C_Write
  4882                           
  4883                           ;I2C_Support.c: 167: alarm_second = I2C_Read(1);
  4884  00282A  0E01               	movlw	1
  4885  00282C  EC1F  F01B         	call	_I2C_Read
  4886  002830  6E59               	movwf	_alarm_second,c
  4887                           
  4888                           ;I2C_Support.c: 168: alarm_minute = I2C_Read(1);
  4889  002832  0E01               	movlw	1
  4890  002834  EC1F  F01B         	call	_I2C_Read
  4891  002838  6E58               	movwf	_alarm_minute,c
  4892                           
  4893                           ;I2C_Support.c: 169: alarm_hour = I2C_Read(1);
  4894  00283A  0E01               	movlw	1
  4895  00283C  EC1F  F01B         	call	_I2C_Read
  4896  002840  6E57               	movwf	_alarm_hour,c
  4897                           
  4898                           ;I2C_Support.c: 170: alarm_date = I2C_Read(0);
  4899  002842  0E00               	movlw	0
  4900  002844  EC1F  F01B         	call	_I2C_Read
  4901  002848  6E56               	movwf	_alarm_date,c
  4902                           
  4903                           ;I2C_Support.c: 172: alarm_second = alarm_second & 0x7f;
  4904  00284A  5059               	movf	_alarm_second,w,c
  4905  00284C  0B7F               	andlw	127
  4906  00284E  6E59               	movwf	_alarm_second,c
  4907                           
  4908                           ;I2C_Support.c: 173: alarm_minute = alarm_minute & 0x7f;
  4909  002850  5058               	movf	_alarm_minute,w,c
  4910  002852  0B7F               	andlw	127
  4911  002854  6E58               	movwf	_alarm_minute,c
  4912                           
  4913                           ;I2C_Support.c: 174: alarm_hour = alarm_hour & 0x7f;
  4914  002856  5057               	movf	_alarm_hour,w,c
  4915  002858  0B7F               	andlw	127
  4916  00285A  6E57               	movwf	_alarm_hour,c
  4917                           
  4918                           ;I2C_Support.c: 175: alarm_date = alarm_date | 0x80;
  4919  00285C  5056               	movf	_alarm_date,w,c
  4920  00285E  0980               	iorlw	128
  4921  002860  6E56               	movwf	_alarm_date,c
  4922                           
  4923                           ;I2C_Support.c: 177: I2C_Start();
  4924  002862  EC46  F01E         	call	_I2C_Start	;wreg free
  4925                           
  4926                           ;I2C_Support.c: 178: I2C_Write((Device << 1) | 0);
  4927  002866  501A               	movf	DS3231_Init@Device,w,c
  4928  002868  241A               	addwf	DS3231_Init@Device,w,c
  4929  00286A  ECC2  F01B         	call	_I2C_Write
  4930                           
  4931                           ;I2C_Support.c: 179: I2C_Write(Address_7);
  4932  00286E  5017               	movf	DS3231_Init@Address_7,w,c
  4933  002870  ECC2  F01B         	call	_I2C_Write
  4934                           
  4935                           ;I2C_Support.c: 181: I2C_Write(alarm_second);
  4936  002874  5059               	movf	_alarm_second,w,c
  4937  002876  ECC2  F01B         	call	_I2C_Write
  4938                           
  4939                           ;I2C_Support.c: 182: I2C_Write(alarm_minute);
  4940  00287A  5058               	movf	_alarm_minute,w,c
  4941  00287C  ECC2  F01B         	call	_I2C_Write
  4942                           
  4943                           ;I2C_Support.c: 183: I2C_Write(alarm_hour);
  4944  002880  5057               	movf	_alarm_hour,w,c
  4945  002882  ECC2  F01B         	call	_I2C_Write
  4946                           
  4947                           ;I2C_Support.c: 184: I2C_Write(alarm_date);
  4948  002886  5056               	movf	_alarm_date,w,c
  4949  002888  ECC2  F01B         	call	_I2C_Write
  4950                           
  4951                           ;I2C_Support.c: 185: I2C_Stop();
  4952  00288C  EC3D  F01E         	call	_I2C_Stop	;wreg free
  4953  002890  0012               	return		;funcret
  4954  002892                     __end_of_DS3231_Init:
  4955                           	opt stack 0
  4956                           tblptru	equ	0xFF8
  4957                           tblptrh	equ	0xFF7
  4958                           tblptrl	equ	0xFF6
  4959                           tablat	equ	0xFF5
  4960                           postinc0	equ	0xFEE
  4961                           wreg	equ	0xFE8
  4962                           postdec1	equ	0xFE5
  4963                           fsr1l	equ	0xFE1
  4964                           status	equ	0xFD8
  4965                           
  4966 ;; *************** function _I2C_Write_Address_Write_One_Byte *****************
  4967 ;; Defined at:
  4968 ;;		line 131 in file "I2C.c"
  4969 ;; Parameters:    Size  Location     Type
  4970 ;;  Device          1    wreg     unsigned char 
  4971 ;;  Address         1   18[COMRAM] unsigned char 
  4972 ;;  Data_Out        1   19[COMRAM] unsigned char 
  4973 ;; Auto vars:     Size  Location     Type
  4974 ;;  Device          1   20[COMRAM] unsigned char 
  4975 ;; Return value:  Size  Location     Type
  4976 ;;		None               void
  4977 ;; Registers used:
  4978 ;;		wreg, status,2, status,0, cstack
  4979 ;; Tracked objects:
  4980 ;;		On entry : 0/0
  4981 ;;		On exit  : 0/0
  4982 ;;		Unchanged: 0/0
  4983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4984 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4985 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4986 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4987 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4988 ;;Total ram usage:        3 bytes
  4989 ;; Hardware stack levels used:    1
  4990 ;; Hardware stack levels required when called:    5
  4991 ;; This function calls:
  4992 ;;		_I2C_Start
  4993 ;;		_I2C_Stop
  4994 ;;		_I2C_Write
  4995 ;; This function is called by:
  4996 ;;		_DS3231_Init
  4997 ;;		_DS3231_Turn_Off_Alarm
  4998 ;;		_DS3231_Turn_On_Alarm
  4999 ;; This function uses a non-reentrant model
  5000 ;;
  5001                           
  5002                           	psect	text12
  5003  003A48                     __ptext12:
  5004                           	opt stack 0
  5005  003A48                     _I2C_Write_Address_Write_One_Byte:
  5006                           	opt stack 23
  5007                           
  5008                           ;incstack = 0
  5009                           ;I2C_Write_Address_Write_One_Byte@Device stored from wreg
  5010  003A48  6E15               	movwf	I2C_Write_Address_Write_One_Byte@Device,c
  5011                           
  5012                           ;I2C.c: 133: I2C_Start();
  5013  003A4A  EC46  F01E         	call	_I2C_Start	;wreg free
  5014                           
  5015                           ;I2C.c: 134: I2C_Write((Device << 1) | 0);
  5016  003A4E  5015               	movf	I2C_Write_Address_Write_One_Byte@Device,w,c
  5017  003A50  2415               	addwf	I2C_Write_Address_Write_One_Byte@Device,w,c
  5018  003A52  ECC2  F01B         	call	_I2C_Write
  5019                           
  5020                           ;I2C.c: 135: I2C_Write(Address);
  5021  003A56  5013               	movf	I2C_Write_Address_Write_One_Byte@Address,w,c
  5022  003A58  ECC2  F01B         	call	_I2C_Write
  5023                           
  5024                           ;I2C.c: 136: I2C_Write(Data_Out);
  5025  003A5C  5014               	movf	I2C_Write_Address_Write_One_Byte@Data_Out,w,c
  5026  003A5E  ECC2  F01B         	call	_I2C_Write
  5027                           
  5028                           ;I2C.c: 137: I2C_Stop();
  5029  003A62  EC3D  F01E         	call	_I2C_Stop	;wreg free
  5030  003A66  0012               	return		;funcret
  5031  003A68                     __end_of_I2C_Write_Address_Write_One_Byte:
  5032                           	opt stack 0
  5033                           tblptru	equ	0xFF8
  5034                           tblptrh	equ	0xFF7
  5035                           tblptrl	equ	0xFF6
  5036                           tablat	equ	0xFF5
  5037                           postinc0	equ	0xFEE
  5038                           wreg	equ	0xFE8
  5039                           postdec1	equ	0xFE5
  5040                           fsr1l	equ	0xFE1
  5041                           status	equ	0xFD8
  5042                           
  5043 ;; *************** function _I2C_Write_Address_Read_One_Byte *****************
  5044 ;; Defined at:
  5045 ;;		line 118 in file "I2C.c"
  5046 ;; Parameters:    Size  Location     Type
  5047 ;;  Device          1    wreg     unsigned char 
  5048 ;;  Address         1   19[COMRAM] unsigned char 
  5049 ;; Auto vars:     Size  Location     Type
  5050 ;;  Device          1   21[COMRAM] unsigned char 
  5051 ;;  Data_Ret        1   20[COMRAM] unsigned char 
  5052 ;; Return value:  Size  Location     Type
  5053 ;;                  1    wreg      unsigned char 
  5054 ;; Registers used:
  5055 ;;		wreg, status,2, status,0, cstack
  5056 ;; Tracked objects:
  5057 ;;		On entry : 0/0
  5058 ;;		On exit  : 0/0
  5059 ;;		Unchanged: 0/0
  5060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5061 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5062 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5063 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5064 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5065 ;;Total ram usage:        3 bytes
  5066 ;; Hardware stack levels used:    1
  5067 ;; Hardware stack levels required when called:    6
  5068 ;; This function calls:
  5069 ;;		_I2C_ReStart
  5070 ;;		_I2C_Read
  5071 ;;		_I2C_Start
  5072 ;;		_I2C_Stop
  5073 ;;		_I2C_Write
  5074 ;; This function is called by:
  5075 ;;		_DS3231_Init
  5076 ;;		_DS3231_Turn_Off_Alarm
  5077 ;;		_DS3231_Turn_On_Alarm
  5078 ;; This function uses a non-reentrant model
  5079 ;;
  5080                           
  5081                           	psect	text13
  5082  003876                     __ptext13:
  5083                           	opt stack 0
  5084  003876                     _I2C_Write_Address_Read_One_Byte:
  5085                           	opt stack 22
  5086                           
  5087                           ;incstack = 0
  5088                           ;I2C_Write_Address_Read_One_Byte@Device stored from wreg
  5089  003876  6E16               	movwf	I2C_Write_Address_Read_One_Byte@Device,c
  5090                           
  5091                           ;I2C.c: 120: char Data_Ret;
  5092                           ;I2C.c: 121: I2C_Start();
  5093  003878  EC46  F01E         	call	_I2C_Start	;wreg free
  5094                           
  5095                           ;I2C.c: 122: I2C_Write((Device << 1) | 0);
  5096  00387C  5016               	movf	I2C_Write_Address_Read_One_Byte@Device,w,c
  5097  00387E  2416               	addwf	I2C_Write_Address_Read_One_Byte@Device,w,c
  5098  003880  ECC2  F01B         	call	_I2C_Write
  5099                           
  5100                           ;I2C.c: 123: I2C_Write(Address);
  5101  003884  5014               	movf	I2C_Write_Address_Read_One_Byte@Address,w,c
  5102  003886  ECC2  F01B         	call	_I2C_Write
  5103                           
  5104                           ;I2C.c: 124: I2C_ReStart();
  5105  00388A  ECD2  F01D         	call	_I2C_ReStart	;wreg free
  5106                           
  5107                           ;I2C.c: 125: I2C_Write((Device << 1) | 1);
  5108  00388E  80D8               	bsf	status,0,c
  5109  003890  3416               	rlcf	I2C_Write_Address_Read_One_Byte@Device,w,c
  5110  003892  ECC2  F01B         	call	_I2C_Write
  5111                           
  5112                           ;I2C.c: 126: Data_Ret = I2C_Read(0);
  5113  003896  0E00               	movlw	0
  5114  003898  EC1F  F01B         	call	_I2C_Read
  5115  00389C  6E15               	movwf	I2C_Write_Address_Read_One_Byte@Data_Ret,c
  5116                           
  5117                           ;I2C.c: 127: I2C_Stop();
  5118  00389E  EC3D  F01E         	call	_I2C_Stop	;wreg free
  5119                           
  5120                           ;I2C.c: 128: return Data_Ret;
  5121  0038A2  5015               	movf	I2C_Write_Address_Read_One_Byte@Data_Ret,w,c
  5122  0038A4  D000               	goto	l245
  5123  0038A6                     l245:
  5124  0038A6  0012               	return		;funcret
  5125  0038A8                     __end_of_I2C_Write_Address_Read_One_Byte:
  5126                           	opt stack 0
  5127                           tblptru	equ	0xFF8
  5128                           tblptrh	equ	0xFF7
  5129                           tblptrl	equ	0xFF6
  5130                           tablat	equ	0xFF5
  5131                           postinc0	equ	0xFEE
  5132                           wreg	equ	0xFE8
  5133                           postdec1	equ	0xFE5
  5134                           fsr1l	equ	0xFE1
  5135                           status	equ	0xFD8
  5136                           
  5137 ;; *************** function _Activate_Buzzer_4KHz *****************
  5138 ;; Defined at:
  5139 ;;		line 121 in file "Utils.c"
  5140 ;; Parameters:    Size  Location     Type
  5141 ;;		None
  5142 ;; Auto vars:     Size  Location     Type
  5143 ;;		None
  5144 ;; Return value:  Size  Location     Type
  5145 ;;		None               void
  5146 ;; Registers used:
  5147 ;;		wreg, status,2
  5148 ;; Tracked objects:
  5149 ;;		On entry : 0/0
  5150 ;;		On exit  : 0/0
  5151 ;;		Unchanged: 0/0
  5152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5153 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5154 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5155 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5156 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5157 ;;Total ram usage:        0 bytes
  5158 ;; Hardware stack levels used:    1
  5159 ;; Hardware stack levels required when called:    3
  5160 ;; This function calls:
  5161 ;;		Nothing
  5162 ;; This function is called by:
  5163 ;;		_Test_Alarm
  5164 ;; This function uses a non-reentrant model
  5165 ;;
  5166                           
  5167                           	psect	text14
  5168  003C32                     __ptext14:
  5169                           	opt stack 0
  5170  003C32                     _Activate_Buzzer_4KHz:
  5171                           	opt stack 26
  5172                           
  5173                           ;Utils.c: 123: PR2 = 0b01111100 ;
  5174                           
  5175                           ;incstack = 0
  5176  003C32  0E7C               	movlw	124
  5177  003C34  6ECB               	movwf	4043,c	;volatile
  5178                           
  5179                           ;Utils.c: 124: T2CON = 0b00000101 ;
  5180  003C36  0E05               	movlw	5
  5181  003C38  6ECA               	movwf	4042,c	;volatile
  5182                           
  5183                           ;Utils.c: 125: CCPR2L = 0b00111110 ;
  5184  003C3A  0E3E               	movlw	62
  5185  003C3C  6EBB               	movwf	4027,c	;volatile
  5186                           
  5187                           ;Utils.c: 126: CCP2CON = 0b00011100 ;
  5188  003C3E  0E1C               	movlw	28
  5189  003C40  6EBA               	movwf	4026,c	;volatile
  5190  003C42  0012               	return		;funcret
  5191  003C44                     __end_of_Activate_Buzzer_4KHz:
  5192                           	opt stack 0
  5193                           tblptru	equ	0xFF8
  5194                           tblptrh	equ	0xFF7
  5195                           tblptrl	equ	0xFF6
  5196                           tablat	equ	0xFF5
  5197                           postinc0	equ	0xFEE
  5198                           wreg	equ	0xFE8
  5199                           postdec1	equ	0xFE5
  5200                           fsr1l	equ	0xFE1
  5201                           status	equ	0xFD8
  5202                           
  5203 ;; *************** function _Set_RPM_RGB *****************
  5204 ;; Defined at:
  5205 ;;		line 83 in file "Fan_Support.c"
  5206 ;; Parameters:    Size  Location     Type
  5207 ;;  rpm             2   16[COMRAM] int 
  5208 ;; Auto vars:     Size  Location     Type
  5209 ;;		None
  5210 ;; Return value:  Size  Location     Type
  5211 ;;		None               void
  5212 ;; Registers used:
  5213 ;;		wreg, status,2, status,0
  5214 ;; Tracked objects:
  5215 ;;		On entry : 0/0
  5216 ;;		On exit  : 0/0
  5217 ;;		Unchanged: 0/0
  5218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5219 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5220 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5221 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5222 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5223 ;;Total ram usage:        2 bytes
  5224 ;; Hardware stack levels used:    1
  5225 ;; Hardware stack levels required when called:    3
  5226 ;; This function calls:
  5227 ;;		Nothing
  5228 ;; This function is called by:
  5229 ;;		_main
  5230 ;; This function uses a non-reentrant model
  5231 ;;
  5232                           
  5233                           	psect	text15
  5234  0030C0                     __ptext15:
  5235                           	opt stack 0
  5236  0030C0                     _Set_RPM_RGB:
  5237                           	opt stack 27
  5238                           
  5239                           ;Fan_Support.c: 85: if (rpm==0)
  5240                           
  5241                           ;incstack = 0
  5242  0030C0  5011               	movf	Set_RPM_RGB@rpm,w,c
  5243  0030C2  1012               	iorwf	Set_RPM_RGB@rpm+1,w,c
  5244  0030C4  A4D8               	btfss	status,2,c
  5245  0030C6  D002               	goto	l6925
  5246                           
  5247                           ;Fan_Support.c: 86: {
  5248                           ;Fan_Support.c: 87: PORTDbits.RD6=0;
  5249  0030C8  9C83               	bcf	3971,6,c	;volatile
  5250  0030CA  D010               	goto	L4
  5251  0030CC                     l6925:
  5252                           
  5253                           ;Fan_Support.c: 90: else if (rpm>0 & rpm<1800)
  5254  0030CC  BE12               	btfsc	Set_RPM_RGB@rpm+1,7,c
  5255  0030CE  D010               	goto	l6931
  5256  0030D0  5012               	movf	Set_RPM_RGB@rpm+1,w,c
  5257  0030D2  E103               	bnz	u4450
  5258  0030D4  0411               	decf	Set_RPM_RGB@rpm,w,c
  5259  0030D6  A0D8               	btfss	status,0,c
  5260  0030D8  D00B               	goto	l6931
  5261  0030DA                     u4450:
  5262  0030DA  BE12               	btfsc	Set_RPM_RGB@rpm+1,7,c
  5263  0030DC  D006               	goto	l6929
  5264  0030DE  0E08               	movlw	8
  5265  0030E0  5C11               	subwf	Set_RPM_RGB@rpm,w,c
  5266  0030E2  0E07               	movlw	7
  5267  0030E4  5812               	subwfb	Set_RPM_RGB@rpm+1,w,c
  5268  0030E6  B0D8               	btfsc	status,0,c
  5269  0030E8  D003               	goto	l6931
  5270  0030EA                     l6929:
  5271                           
  5272                           ;Fan_Support.c: 91: {
  5273                           ;Fan_Support.c: 92: PORTDbits.RD6=1;
  5274  0030EA  8C83               	bsf	3971,6,c	;volatile
  5275  0030EC                     L4:
  5276                           
  5277                           ;Fan_Support.c: 93: PORTDbits.RD7=0;
  5278  0030EC  9E83               	bcf	3971,7,c	;volatile
  5279                           
  5280                           ;Fan_Support.c: 94: }
  5281  0030EE  D01D               	goto	l311
  5282  0030F0                     l6931:
  5283                           
  5284                           ;Fan_Support.c: 95: else if (rpm>=1800 & rpm<2700)
  5285  0030F0  BE12               	btfsc	Set_RPM_RGB@rpm+1,7,c
  5286  0030F2  D010               	goto	l6937
  5287  0030F4  0E08               	movlw	8
  5288  0030F6  5C11               	subwf	Set_RPM_RGB@rpm,w,c
  5289  0030F8  0E07               	movlw	7
  5290  0030FA  5812               	subwfb	Set_RPM_RGB@rpm+1,w,c
  5291  0030FC  A0D8               	btfss	status,0,c
  5292  0030FE  D00A               	goto	l6937
  5293  003100  BE12               	btfsc	Set_RPM_RGB@rpm+1,7,c
  5294  003102  D006               	goto	l6935
  5295  003104  0E8C               	movlw	140
  5296  003106  5C11               	subwf	Set_RPM_RGB@rpm,w,c
  5297  003108  0E0A               	movlw	10
  5298  00310A  5812               	subwfb	Set_RPM_RGB@rpm+1,w,c
  5299  00310C  B0D8               	btfsc	status,0,c
  5300  00310E  D002               	goto	l6937
  5301  003110                     l6935:
  5302                           
  5303                           ;Fan_Support.c: 96: {
  5304                           ;Fan_Support.c: 97: PORTDbits.RD6=1;
  5305  003110  8C83               	bsf	3971,6,c	;volatile
  5306  003112  D009               	goto	L5
  5307  003114                     l6937:
  5308                           
  5309                           ;Fan_Support.c: 100: else if (rpm>=2700)
  5310  003114  BE12               	btfsc	Set_RPM_RGB@rpm+1,7,c
  5311  003116  D009               	goto	l311
  5312  003118  0E8C               	movlw	140
  5313  00311A  5C11               	subwf	Set_RPM_RGB@rpm,w,c
  5314  00311C  0E0A               	movlw	10
  5315  00311E  5812               	subwfb	Set_RPM_RGB@rpm+1,w,c
  5316  003120  A0D8               	btfss	status,0,c
  5317  003122  D003               	goto	l311
  5318                           
  5319                           ;Fan_Support.c: 101: {
  5320                           ;Fan_Support.c: 102: PORTDbits.RD6=0;
  5321  003124  9C83               	bcf	3971,6,c	;volatile
  5322  003126                     L5:
  5323                           
  5324                           ;Fan_Support.c: 103: PORTDbits.RD7=1;
  5325  003126  8E83               	bsf	3971,7,c	;volatile
  5326  003128  D000               	goto	l311
  5327  00312A                     l311:
  5328  00312A  0012               	return		;funcret
  5329  00312C                     __end_of_Set_RPM_RGB:
  5330                           	opt stack 0
  5331                           tblptru	equ	0xFF8
  5332                           tblptrh	equ	0xFF7
  5333                           tblptrl	equ	0xFF6
  5334                           tablat	equ	0xFF5
  5335                           postinc0	equ	0xFEE
  5336                           wreg	equ	0xFE8
  5337                           postdec1	equ	0xFE5
  5338                           fsr1l	equ	0xFE1
  5339                           status	equ	0xFD8
  5340                           
  5341 ;; *************** function _Monitor_Heater *****************
  5342 ;; Defined at:
  5343 ;;		line 34 in file "Fan_Support.c"
  5344 ;; Parameters:    Size  Location     Type
  5345 ;;		None
  5346 ;; Auto vars:     Size  Location     Type
  5347 ;;		None
  5348 ;; Return value:  Size  Location     Type
  5349 ;;		None               void
  5350 ;; Registers used:
  5351 ;;		wreg, status,2, status,0, cstack
  5352 ;; Tracked objects:
  5353 ;;		On entry : 0/0
  5354 ;;		On exit  : 0/0
  5355 ;;		Unchanged: 0/0
  5356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5357 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5358 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5359 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5360 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5361 ;;Total ram usage:        0 bytes
  5362 ;; Hardware stack levels used:    1
  5363 ;; Hardware stack levels required when called:    6
  5364 ;; This function calls:
  5365 ;;		_do_update_pwm
  5366 ;;		_get_duty_cycle
  5367 ;; This function is called by:
  5368 ;;		_main
  5369 ;; This function uses a non-reentrant model
  5370 ;;
  5371                           
  5372                           	psect	text16
  5373  0038DA                     __ptext16:
  5374                           	opt stack 0
  5375  0038DA                     _Monitor_Heater:
  5376                           	opt stack 24
  5377                           
  5378                           ;Fan_Support.c: 36: duty_cycle = get_duty_cycle(DS1621_tempF, heater_set_temp);
  5379                           
  5380                           ;incstack = 0
  5381  0038DA  C048  F011         	movff	_DS1621_tempF,get_duty_cycle@temp
  5382  0038DE  C049  F012         	movff	_DS1621_tempF+1,get_duty_cycle@temp+1
  5383  0038E2  C06F  F013         	movff	_heater_set_temp,get_duty_cycle@set_temp
  5384  0038E6  6A14               	clrf	get_duty_cycle@set_temp+1,c
  5385  0038E8  ECCA  F018         	call	_get_duty_cycle	;wreg free
  5386  0038EC  5011               	movf	?_get_duty_cycle,w,c
  5387  0038EE  6E5D               	movwf	_duty_cycle,c
  5388                           
  5389                           ;Fan_Support.c: 37: do_update_pwm(duty_cycle);
  5390  0038F0  505D               	movf	_duty_cycle,w,c
  5391  0038F2  EC49  F014         	call	_do_update_pwm
  5392                           
  5393                           ;Fan_Support.c: 38: if (HEATER == 1)
  5394  0038F6  0450               	decf	_HEATER,w,c
  5395  0038F8  A4D8               	btfss	status,2,c
  5396  0038FA  D003               	goto	l287
  5397                           
  5398                           ;Fan_Support.c: 39: {
  5399                           ;Fan_Support.c: 40: PORTAbits.RA5 = 1;
  5400  0038FC  8A80               	bsf	3968,5,c	;volatile
  5401                           
  5402                           ;Fan_Support.c: 41: PORTEbits.RE2 = 1;
  5403  0038FE  8484               	bsf	3972,2,c	;volatile
  5404                           
  5405                           ;Fan_Support.c: 42: }
  5406  003900  D003               	goto	l289
  5407  003902                     l287:
  5408                           
  5409                           ;Fan_Support.c: 43: else
  5410                           ;Fan_Support.c: 44: {
  5411                           ;Fan_Support.c: 45: PORTEbits.RE2 = 0; PORTAbits.RA5 = 0;
  5412  003902  9484               	bcf	3972,2,c	;volatile
  5413  003904  9A80               	bcf	3968,5,c	;volatile
  5414  003906  D000               	goto	l289
  5415  003908                     l289:
  5416  003908  0012               	return		;funcret
  5417  00390A                     __end_of_Monitor_Heater:
  5418                           	opt stack 0
  5419                           tblptru	equ	0xFF8
  5420                           tblptrh	equ	0xFF7
  5421                           tblptrl	equ	0xFF6
  5422                           tablat	equ	0xFF5
  5423                           postinc0	equ	0xFEE
  5424                           wreg	equ	0xFE8
  5425                           postdec1	equ	0xFE5
  5426                           fsr1l	equ	0xFE1
  5427                           status	equ	0xFD8
  5428                           
  5429 ;; *************** function _get_duty_cycle *****************
  5430 ;; Defined at:
  5431 ;;		line 15 in file "Fan_Support.c"
  5432 ;; Parameters:    Size  Location     Type
  5433 ;;  temp            2   16[COMRAM] int 
  5434 ;;  set_temp        2   18[COMRAM] int 
  5435 ;; Auto vars:     Size  Location     Type
  5436 ;;  dc              2   22[COMRAM] int 
  5437 ;; Return value:  Size  Location     Type
  5438 ;;                  2   16[COMRAM] int 
  5439 ;; Registers used:
  5440 ;;		wreg, status,2, status,0
  5441 ;; Tracked objects:
  5442 ;;		On entry : 0/0
  5443 ;;		On exit  : 0/0
  5444 ;;		Unchanged: 0/0
  5445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5446 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5447 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5448 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5449 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5450 ;;Total ram usage:        8 bytes
  5451 ;; Hardware stack levels used:    1
  5452 ;; Hardware stack levels required when called:    3
  5453 ;; This function calls:
  5454 ;;		Nothing
  5455 ;; This function is called by:
  5456 ;;		_Monitor_Heater
  5457 ;; This function uses a non-reentrant model
  5458 ;;
  5459                           
  5460                           	psect	text17
  5461  003194                     __ptext17:
  5462                           	opt stack 0
  5463  003194                     _get_duty_cycle:
  5464                           	opt stack 26
  5465                           
  5466                           ;Fan_Support.c: 17: if (temp > set_temp)
  5467                           
  5468                           ;incstack = 0
  5469  003194  5011               	movf	get_duty_cycle@temp,w,c
  5470  003196  5C13               	subwf	get_duty_cycle@set_temp,w,c
  5471  003198  5014               	movf	get_duty_cycle@set_temp+1,w,c
  5472  00319A  0A80               	xorlw	128
  5473  00319C  6E15               	movwf	??_get_duty_cycle& (0+255),c
  5474  00319E  5012               	movf	get_duty_cycle@temp+1,w,c
  5475  0031A0  0A80               	xorlw	128
  5476  0031A2  5815               	subwfb	??_get_duty_cycle& (0+255),w,c
  5477  0031A4  B0D8               	btfsc	status,0,c
  5478  0031A6  D005               	goto	l6403
  5479                           
  5480                           ;Fan_Support.c: 18: return 0;
  5481  0031A8  0E00               	movlw	0
  5482  0031AA  6E12               	movwf	?_get_duty_cycle+1,c
  5483  0031AC  0E00               	movlw	0
  5484  0031AE  D01D               	goto	L6
  5485  0031B0  D023               	goto	l281
  5486  0031B2                     l6403:
  5487                           
  5488                           ;Fan_Support.c: 19: else
  5489                           ;Fan_Support.c: 20: {
  5490                           ;Fan_Support.c: 21: int dc = 2*(set_temp - temp);
  5491  0031B2  C011  F015         	movff	get_duty_cycle@temp,??_get_duty_cycle
  5492  0031B6  C012  F016         	movff	get_duty_cycle@temp+1,??_get_duty_cycle+1
  5493  0031BA  1E15               	comf	??_get_duty_cycle,f,c
  5494  0031BC  1E16               	comf	??_get_duty_cycle+1,f,c
  5495  0031BE  4A15               	infsnz	??_get_duty_cycle,f,c
  5496  0031C0  2A16               	incf	??_get_duty_cycle+1,f,c
  5497  0031C2  5013               	movf	get_duty_cycle@set_temp,w,c
  5498  0031C4  2615               	addwf	??_get_duty_cycle,f,c
  5499  0031C6  5014               	movf	get_duty_cycle@set_temp+1,w,c
  5500  0031C8  2216               	addwfc	??_get_duty_cycle+1,f,c
  5501  0031CA  90D8               	bcf	status,0,c
  5502  0031CC  3415               	rlcf	??_get_duty_cycle,w,c
  5503  0031CE  6E17               	movwf	get_duty_cycle@dc,c
  5504  0031D0  3416               	rlcf	??_get_duty_cycle+1,w,c
  5505  0031D2  6E18               	movwf	get_duty_cycle@dc+1,c
  5506                           
  5507                           ;Fan_Support.c: 22: if (dc > 100)
  5508  0031D4  BE18               	btfsc	get_duty_cycle@dc+1,7,c
  5509  0031D6  D00B               	goto	l283
  5510  0031D8  5018               	movf	get_duty_cycle@dc+1,w,c
  5511  0031DA  E104               	bnz	u3980
  5512  0031DC  0E65               	movlw	101
  5513  0031DE  5C17               	subwf	get_duty_cycle@dc,w,c
  5514  0031E0  A0D8               	btfss	status,0,c
  5515  0031E2  D005               	goto	l283
  5516  0031E4                     u3980:
  5517                           
  5518                           ;Fan_Support.c: 23: return 100;
  5519  0031E4  0E00               	movlw	0
  5520  0031E6  6E12               	movwf	?_get_duty_cycle+1,c
  5521  0031E8  0E64               	movlw	100
  5522  0031EA                     L6:
  5523  0031EA  6E11               	movwf	?_get_duty_cycle,c
  5524  0031EC  D005               	goto	l281
  5525  0031EE                     l283:
  5526                           
  5527                           ;Fan_Support.c: 24: else
  5528                           ;Fan_Support.c: 25: return dc;
  5529  0031EE  C017  F011         	movff	get_duty_cycle@dc,?_get_duty_cycle
  5530  0031F2  C018  F012         	movff	get_duty_cycle@dc+1,?_get_duty_cycle+1
  5531  0031F6  D000               	goto	l281
  5532  0031F8                     l281:
  5533  0031F8  0012               	return		;funcret
  5534  0031FA                     __end_of_get_duty_cycle:
  5535                           	opt stack 0
  5536                           tblptru	equ	0xFF8
  5537                           tblptrh	equ	0xFF7
  5538                           tblptrl	equ	0xFF6
  5539                           tablat	equ	0xFF5
  5540                           postinc0	equ	0xFEE
  5541                           wreg	equ	0xFE8
  5542                           postdec1	equ	0xFE5
  5543                           fsr1l	equ	0xFE1
  5544                           status	equ	0xFD8
  5545                           
  5546 ;; *************** function _Do_Setup_Time *****************
  5547 ;; Defined at:
  5548 ;;		line 33 in file "Setup_Time.c"
  5549 ;; Parameters:    Size  Location     Type
  5550 ;;		None
  5551 ;; Auto vars:     Size  Location     Type
  5552 ;;		None
  5553 ;; Return value:  Size  Location     Type
  5554 ;;                  2  805[None  ] int 
  5555 ;; Registers used:
  5556 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5557 ;; Tracked objects:
  5558 ;;		On entry : 0/0
  5559 ;;		On exit  : 0/0
  5560 ;;		Unchanged: 0/0
  5561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5562 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5563 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5564 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5565 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5566 ;;Total ram usage:        0 bytes
  5567 ;; Hardware stack levels used:    1
  5568 ;; Hardware stack levels required when called:   12
  5569 ;; This function calls:
  5570 ;;		_DS3231_Read_Time
  5571 ;;		_Decrease_Time
  5572 ;;		_Do_Beep_Bad
  5573 ;;		_Do_Beep_Good
  5574 ;;		_Do_Save_New_Time
  5575 ;;		_Exit_Time_Setup
  5576 ;;		_Go_Next_Field
  5577 ;;		_Go_Prev_Field
  5578 ;;		_Increase_Time
  5579 ;;		_Initialize_Setup_Time_Screen
  5580 ;;		_Update_Setup_Time_Screen
  5581 ;;		_bcd_2_dec
  5582 ;;		_check_for_button_input
  5583 ;; This function is called by:
  5584 ;;		_main
  5585 ;; This function uses a non-reentrant model
  5586 ;;
  5587                           
  5588                           	psect	text18
  5589  00258C                     __ptext18:
  5590                           	opt stack 0
  5591  00258C                     _Do_Setup_Time:
  5592                           	opt stack 18
  5593                           
  5594                           ;Setup_Time.c: 36: Select_Field = 0;
  5595                           
  5596                           ;incstack = 0
  5597  00258C  0E00               	movlw	0
  5598  00258E  6E54               	movwf	_Select_Field,c
  5599                           
  5600                           ;Setup_Time.c: 38: DS3231_Read_Time();
  5601  002590  EC2F  F019         	call	_DS3231_Read_Time	;wreg free
  5602                           
  5603                           ;Setup_Time.c: 39: setup_second = bcd_2_dec(second);
  5604  002594  5063               	movf	_second,w,c
  5605  002596  EC9D  F01C         	call	_bcd_2_dec
  5606  00259A  6E6C               	movwf	_setup_second,c
  5607                           
  5608                           ;Setup_Time.c: 40: setup_minute = bcd_2_dec(minute);
  5609  00259C  5060               	movf	_minute,w,c
  5610  00259E  EC9D  F01C         	call	_bcd_2_dec
  5611  0025A2  6E6A               	movwf	_setup_minute,c
  5612                           
  5613                           ;Setup_Time.c: 41: setup_hour = bcd_2_dec(hour);
  5614  0025A4  505F               	movf	_hour,w,c
  5615  0025A6  EC9D  F01C         	call	_bcd_2_dec
  5616  0025AA  6E69               	movwf	_setup_hour,c
  5617                           
  5618                           ;Setup_Time.c: 42: setup_day = bcd_2_dec(day);
  5619  0025AC  505B               	movf	_day,w,c
  5620  0025AE  EC9D  F01C         	call	_bcd_2_dec
  5621  0025B2  6E67               	movwf	_setup_day,c
  5622                           
  5623                           ;Setup_Time.c: 43: setup_month = bcd_2_dec(month);
  5624  0025B4  5061               	movf	_month,w,c
  5625  0025B6  EC9D  F01C         	call	_bcd_2_dec
  5626  0025BA  6E6B               	movwf	_setup_month,c
  5627                           
  5628                           ;Setup_Time.c: 44: setup_year = bcd_2_dec(year);
  5629  0025BC  506E               	movf	_year,w,c
  5630  0025BE  EC9D  F01C         	call	_bcd_2_dec
  5631  0025C2  6E6D               	movwf	_setup_year,c
  5632                           
  5633                           ;Setup_Time.c: 46: Initialize_Setup_Time_Screen();
  5634  0025C4  EC19  F00E         	call	_Initialize_Setup_Time_Screen	;wreg free
  5635                           
  5636                           ;Setup_Time.c: 47: Update_Setup_Time_Screen();
  5637  0025C8  EC3D  F00A         	call	_Update_Setup_Time_Screen	;wreg free
  5638                           
  5639                           ;Setup_Time.c: 48: In_Time_Setup = 1;
  5640  0025CC  0E01               	movlw	1
  5641  0025CE  0100               	movlb	0	; () banked
  5642  0025D0  6FFB               	movwf	_In_Time_Setup& (0+255),b
  5643                           
  5644                           ;Setup_Time.c: 50: while (In_Time_Setup == 1)
  5645  0025D2  D03C               	goto	l9815
  5646  0025D4                     l9779:
  5647                           
  5648                           ; BSR set to: 0
  5649                           ;Setup_Time.c: 51: {
  5650                           ;Setup_Time.c: 52: if (check_for_button_input() == 1)
  5651  0025D4  EC20  F016         	call	_check_for_button_input	;wreg free
  5652  0025D8  06E8               	decf	wreg,f,c
  5653  0025DA  A4D8               	btfss	status,2,c
  5654  0025DC  D037               	goto	l9815
  5655                           
  5656                           ;Setup_Time.c: 53: {
  5657                           ;Setup_Time.c: 55: if (found >= 3 && found <= 8)
  5658  0025DE  0E02               	movlw	2
  5659  0025E0  645E               	cpfsgt	_found,c
  5660  0025E2  D031               	goto	l9813
  5661  0025E4  0E09               	movlw	9
  5662  0025E6  605E               	cpfslt	_found,c
  5663  0025E8  D02E               	goto	l9813
  5664                           
  5665                           ;Setup_Time.c: 56: {
  5666                           ;Setup_Time.c: 57: Do_Beep_Good();
  5667  0025EA  ECBA  F01D         	call	_Do_Beep_Good	;wreg free
  5668                           
  5669                           ;Setup_Time.c: 58: if (found == 3) Go_Prev_Field();
  5670  0025EE  0E03               	movlw	3
  5671  0025F0  185E               	xorwf	_found,w,c
  5672  0025F2  A4D8               	btfss	status,2,c
  5673  0025F4  D003               	goto	l9791
  5674  0025F6  EC7E  F01D         	call	_Go_Prev_Field	;wreg free
  5675  0025FA  D000               	goto	l9791
  5676  0025FC                     l9791:
  5677                           
  5678                           ;Setup_Time.c: 59: if (found == 4) Go_Next_Field();
  5679  0025FC  0E04               	movlw	4
  5680  0025FE  185E               	xorwf	_found,w,c
  5681  002600  A4D8               	btfss	status,2,c
  5682  002602  D003               	goto	l9795
  5683  002604  EC8A  F01D         	call	_Go_Next_Field	;wreg free
  5684  002608  D000               	goto	l9795
  5685  00260A                     l9795:
  5686                           
  5687                           ;Setup_Time.c: 60: if (found == 5) Do_Save_New_Time();
  5688  00260A  0E05               	movlw	5
  5689  00260C  185E               	xorwf	_found,w,c
  5690  00260E  A4D8               	btfss	status,2,c
  5691  002610  D003               	goto	l9799
  5692  002612  ECDD  F01D         	call	_Do_Save_New_Time	;wreg free
  5693  002616  D000               	goto	l9799
  5694  002618                     l9799:
  5695                           
  5696                           ;Setup_Time.c: 61: if (found == 6) Decrease_Time();
  5697  002618  0E06               	movlw	6
  5698  00261A  185E               	xorwf	_found,w,c
  5699  00261C  A4D8               	btfss	status,2,c
  5700  00261E  D003               	goto	l9803
  5701  002620  ECF4  F016         	call	_Decrease_Time	;wreg free
  5702  002624  D000               	goto	l9803
  5703  002626                     l9803:
  5704                           
  5705                           ;Setup_Time.c: 62: if (found == 7) Increase_Time();
  5706  002626  0E07               	movlw	7
  5707  002628  185E               	xorwf	_found,w,c
  5708  00262A  A4D8               	btfss	status,2,c
  5709  00262C  D003               	goto	l9807
  5710  00262E  ECD8  F015         	call	_Increase_Time	;wreg free
  5711  002632  D000               	goto	l9807
  5712  002634                     l9807:
  5713                           
  5714                           ;Setup_Time.c: 63: if (found == 8) Exit_Time_Setup();
  5715  002634  0E08               	movlw	8
  5716  002636  185E               	xorwf	_found,w,c
  5717  002638  A4D8               	btfss	status,2,c
  5718  00263A  D003               	goto	l9811
  5719  00263C  EC60  F01E         	call	_Exit_Time_Setup	;wreg free
  5720  002640  D000               	goto	l9811
  5721  002642                     l9811:
  5722                           
  5723                           ;Setup_Time.c: 69: found = 0xff;
  5724  002642  685E               	setf	_found,c
  5725                           
  5726                           ;Setup_Time.c: 70: }
  5727  002644  D003               	goto	l9815
  5728  002646                     l9813:
  5729                           
  5730                           ;Setup_Time.c: 71: else
  5731                           ;Setup_Time.c: 72: {
  5732                           ;Setup_Time.c: 73: Do_Beep_Bad();
  5733  002646  ECC6  F01D         	call	_Do_Beep_Bad	;wreg free
  5734  00264A  D000               	goto	l9815
  5735  00264C                     l9815:
  5736  00264C  0100               	movlb	0	; () banked
  5737  00264E  05FB               	decf	_In_Time_Setup& (0+255),w,b
  5738  002650  B4D8               	btfsc	status,2,c
  5739  002652  D7C0               	goto	l9779
  5740                           
  5741                           ; BSR set to: 0
  5742                           
  5743                           ; BSR set to: 0
  5744  002654  0012               	return		;funcret
  5745  002656                     __end_of_Do_Setup_Time:
  5746                           	opt stack 0
  5747                           tblptru	equ	0xFF8
  5748                           tblptrh	equ	0xFF7
  5749                           tblptrl	equ	0xFF6
  5750                           tablat	equ	0xFF5
  5751                           postinc0	equ	0xFEE
  5752                           wreg	equ	0xFE8
  5753                           postdec1	equ	0xFE5
  5754                           fsr1l	equ	0xFE1
  5755                           status	equ	0xFD8
  5756                           
  5757 ;; *************** function _Initialize_Setup_Time_Screen *****************
  5758 ;; Defined at:
  5759 ;;		line 190 in file "Setup_Time.c"
  5760 ;; Parameters:    Size  Location     Type
  5761 ;;		None
  5762 ;; Auto vars:     Size  Location     Type
  5763 ;;		None
  5764 ;; Return value:  Size  Location     Type
  5765 ;;		None               void
  5766 ;; Registers used:
  5767 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5768 ;; Tracked objects:
  5769 ;;		On entry : 0/0
  5770 ;;		On exit  : 0/0
  5771 ;;		Unchanged: 0/0
  5772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5773 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5774 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5775 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5776 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5777 ;;Total ram usage:        0 bytes
  5778 ;; Hardware stack levels used:    1
  5779 ;; Hardware stack levels required when called:   10
  5780 ;; This function calls:
  5781 ;;		_drawtext
  5782 ;;		_fillRect
  5783 ;;		_fillScreen
  5784 ;;		_strcpy
  5785 ;; This function is called by:
  5786 ;;		_Do_Setup_Time
  5787 ;; This function uses a non-reentrant model
  5788 ;;
  5789                           
  5790                           	psect	text19
  5791  001C32                     __ptext19:
  5792                           	opt stack 0
  5793  001C32                     _Initialize_Setup_Time_Screen:
  5794                           	opt stack 19
  5795                           
  5796                           ;Setup_Time.c: 192: fillScreen(0x0000);
  5797                           
  5798                           ; BSR set to: 0
  5799                           ;incstack = 0
  5800  001C32  0E00               	movlw	0
  5801  001C34  6E25               	movwf	fillScreen@color+1,c
  5802  001C36  0E00               	movlw	0
  5803  001C38  6E24               	movwf	fillScreen@color,c
  5804  001C3A  EC63  F01D         	call	_fillScreen	;wreg free
  5805                           
  5806                           ;Setup_Time.c: 194: strcpy(txt, "ECE3301L F;21 Final\0");
  5807  001C3E  C04E  F011         	movff	_txt,strcpy@to
  5808  001C42  C04F  F012         	movff	_txt+1,strcpy@to+1
  5809  001C46  0EF2               	movlw	low STR_25
  5810  001C48  6E13               	movwf	strcpy@from,c
  5811  001C4A  0EFE               	movlw	high STR_25
  5812  001C4C  6E14               	movwf	strcpy@from+1,c
  5813  001C4E  EC54  F01C         	call	_strcpy	;wreg free
  5814                           
  5815                           ;Setup_Time.c: 195: drawtext(1 , 1, txt, 0xFFFF , 0x0000, 1);
  5816  001C52  0E01               	movlw	1
  5817  001C54  6E39               	movwf	drawtext@y,c
  5818  001C56  C04E  F03A         	movff	_txt,drawtext@_text
  5819  001C5A  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  5820  001C5E  0EFF               	movlw	255
  5821  001C60  6E3D               	movwf	drawtext@color+1,c
  5822  001C62  683C               	setf	drawtext@color,c
  5823  001C64  0E00               	movlw	0
  5824  001C66  6E3F               	movwf	drawtext@bg+1,c
  5825  001C68  0E00               	movlw	0
  5826  001C6A  6E3E               	movwf	drawtext@bg,c
  5827  001C6C  0E01               	movlw	1
  5828  001C6E  6E40               	movwf	drawtext@size,c
  5829  001C70  0E01               	movlw	1
  5830  001C72  EC92  F00D         	call	_drawtext
  5831                           
  5832                           ;Setup_Time.c: 198: strcpy(txt, "Time Setup\0");
  5833  001C76  C04E  F011         	movff	_txt,strcpy@to
  5834  001C7A  C04F  F012         	movff	_txt+1,strcpy@to+1
  5835  001C7E  0E7C               	movlw	low STR_26
  5836  001C80  6E13               	movwf	strcpy@from,c
  5837  001C82  0EFF               	movlw	high STR_26
  5838  001C84  6E14               	movwf	strcpy@from+1,c
  5839  001C86  EC54  F01C         	call	_strcpy	;wreg free
  5840                           
  5841                           ;Setup_Time.c: 199: drawtext(1+3 , 1+15, txt, 0xF81F, 0x0000, 2);
  5842  001C8A  0E10               	movlw	16
  5843  001C8C  6E39               	movwf	drawtext@y,c
  5844  001C8E  C04E  F03A         	movff	_txt,drawtext@_text
  5845  001C92  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  5846  001C96  0EF8               	movlw	248
  5847  001C98  6E3D               	movwf	drawtext@color+1,c
  5848  001C9A  0E1F               	movlw	31
  5849  001C9C  6E3C               	movwf	drawtext@color,c
  5850  001C9E  0E00               	movlw	0
  5851  001CA0  6E3F               	movwf	drawtext@bg+1,c
  5852  001CA2  0E00               	movlw	0
  5853  001CA4  6E3E               	movwf	drawtext@bg,c
  5854  001CA6  0E02               	movlw	2
  5855  001CA8  6E40               	movwf	drawtext@size,c
  5856  001CAA  0E04               	movlw	4
  5857  001CAC  EC92  F00D         	call	_drawtext
  5858                           
  5859                           ;Setup_Time.c: 201: strcpy(txt, "Time");
  5860  001CB0  C04E  F011         	movff	_txt,strcpy@to
  5861  001CB4  C04F  F012         	movff	_txt+1,strcpy@to+1
  5862  001CB8  0EB0               	movlw	low (STR_7+6)
  5863  001CBA  6E13               	movwf	strcpy@from,c
  5864  001CBC  0EFF               	movlw	high (STR_7+6)
  5865  001CBE  6E14               	movwf	strcpy@from+1,c
  5866  001CC0  EC54  F01C         	call	_strcpy	;wreg free
  5867                           
  5868                           ;Setup_Time.c: 202: drawtext(50 , 40 , txt, 0x001F , 0x0000, 1);
  5869  001CC4  0E28               	movlw	40
  5870  001CC6  6E39               	movwf	drawtext@y,c
  5871  001CC8  C04E  F03A         	movff	_txt,drawtext@_text
  5872  001CCC  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  5873  001CD0  0E00               	movlw	0
  5874  001CD2  6E3D               	movwf	drawtext@color+1,c
  5875  001CD4  0E1F               	movlw	31
  5876  001CD6  6E3C               	movwf	drawtext@color,c
  5877  001CD8  0E00               	movlw	0
  5878  001CDA  6E3F               	movwf	drawtext@bg+1,c
  5879  001CDC  0E00               	movlw	0
  5880  001CDE  6E3E               	movwf	drawtext@bg,c
  5881  001CE0  0E01               	movlw	1
  5882  001CE2  6E40               	movwf	drawtext@size,c
  5883  001CE4  0E32               	movlw	50
  5884  001CE6  EC92  F00D         	call	_drawtext
  5885                           
  5886                           ;Setup_Time.c: 204: fillRect(15-1, 52+16, 25,2,0x07FF);
  5887  001CEA  0E44               	movlw	68
  5888  001CEC  6E23               	movwf	fillRect@y,c
  5889  001CEE  0E19               	movlw	25
  5890  001CF0  6E24               	movwf	fillRect@w,c
  5891  001CF2  0E02               	movlw	2
  5892  001CF4  6E25               	movwf	fillRect@h,c
  5893  001CF6  0E07               	movlw	7
  5894  001CF8  6E27               	movwf	fillRect@color+1,c
  5895  001CFA  6826               	setf	fillRect@color,c
  5896  001CFC  0E0E               	movlw	14
  5897  001CFE  ECD6  F01A         	call	_fillRect
  5898                           
  5899                           ;Setup_Time.c: 205: strcpy(txt, "Date");
  5900  001D02  C04E  F011         	movff	_txt,strcpy@to
  5901  001D06  C04F  F012         	movff	_txt+1,strcpy@to+1
  5902  001D0A  0EDF               	movlw	low STR_6
  5903  001D0C  6E13               	movwf	strcpy@from,c
  5904  001D0E  0EFF               	movlw	high STR_6
  5905  001D10  6E14               	movwf	strcpy@from+1,c
  5906  001D12  EC54  F01C         	call	_strcpy	;wreg free
  5907                           
  5908                           ;Setup_Time.c: 206: drawtext(50 , 71 , txt, 0xF800 , 0x0000, 1);
  5909  001D16  0E47               	movlw	71
  5910  001D18  6E39               	movwf	drawtext@y,c
  5911  001D1A  C04E  F03A         	movff	_txt,drawtext@_text
  5912  001D1E  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  5913  001D22  0EF8               	movlw	248
  5914  001D24  6E3D               	movwf	drawtext@color+1,c
  5915  001D26  0E00               	movlw	0
  5916  001D28  6E3C               	movwf	drawtext@color,c
  5917  001D2A  0E00               	movlw	0
  5918  001D2C  6E3F               	movwf	drawtext@bg+1,c
  5919  001D2E  0E00               	movlw	0
  5920  001D30  6E3E               	movwf	drawtext@bg,c
  5921  001D32  0E01               	movlw	1
  5922  001D34  6E40               	movwf	drawtext@size,c
  5923  001D36  0E32               	movlw	50
  5924  001D38  EC92  F00D         	call	_drawtext
  5925  001D3C  0012               	return		;funcret
  5926  001D3E                     __end_of_Initialize_Setup_Time_Screen:
  5927                           	opt stack 0
  5928                           tblptru	equ	0xFF8
  5929                           tblptrh	equ	0xFF7
  5930                           tblptrl	equ	0xFF6
  5931                           tablat	equ	0xFF5
  5932                           postinc0	equ	0xFEE
  5933                           wreg	equ	0xFE8
  5934                           postdec1	equ	0xFE5
  5935                           fsr1l	equ	0xFE1
  5936                           status	equ	0xFD8
  5937                           
  5938 ;; *************** function _Increase_Time *****************
  5939 ;; Defined at:
  5940 ;;		line 79 in file "Setup_Time.c"
  5941 ;; Parameters:    Size  Location     Type
  5942 ;;		None
  5943 ;; Auto vars:     Size  Location     Type
  5944 ;;		None
  5945 ;; Return value:  Size  Location     Type
  5946 ;;		None               void
  5947 ;; Registers used:
  5948 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5949 ;; Tracked objects:
  5950 ;;		On entry : 0/0
  5951 ;;		On exit  : 0/0
  5952 ;;		Unchanged: 0/0
  5953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5955 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5956 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5957 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5958 ;;Total ram usage:        0 bytes
  5959 ;; Hardware stack levels used:    1
  5960 ;; Hardware stack levels required when called:   11
  5961 ;; This function calls:
  5962 ;;		_Update_Setup_Time_Screen
  5963 ;; This function is called by:
  5964 ;;		_Do_Setup_Time
  5965 ;; This function uses a non-reentrant model
  5966 ;;
  5967                           
  5968                           	psect	text20
  5969  002BB0                     __ptext20:
  5970                           	opt stack 0
  5971  002BB0                     _Increase_Time:
  5972                           	opt stack 18
  5973                           
  5974                           ;Setup_Time.c: 81: switch (Select_Field)
  5975                           
  5976                           ;incstack = 0
  5977  002BB0  D030               	goto	l9273
  5978  002BB2                     l9235:
  5979                           
  5980                           ;Setup_Time.c: 84: setup_hour++;
  5981  002BB2  2A69               	incf	_setup_hour,f,c
  5982                           
  5983                           ;Setup_Time.c: 85: if (setup_hour == 24) setup_hour = 0;
  5984  002BB4  0E18               	movlw	24
  5985  002BB6  1869               	xorwf	_setup_hour,w,c
  5986  002BB8  A4D8               	btfss	status,2,c
  5987  002BBA  D03F               	goto	l9275
  5988  002BBC  0E00               	movlw	0
  5989  002BBE  6E69               	movwf	_setup_hour,c
  5990                           
  5991                           ;Setup_Time.c: 86: break;
  5992  002BC0  D03C               	goto	l9275
  5993  002BC2                     l9241:
  5994                           
  5995                           ;Setup_Time.c: 89: setup_minute++;
  5996  002BC2  2A6A               	incf	_setup_minute,f,c
  5997                           
  5998                           ;Setup_Time.c: 90: if (setup_minute == 60) setup_minute = 0;
  5999  002BC4  0E3C               	movlw	60
  6000  002BC6  186A               	xorwf	_setup_minute,w,c
  6001  002BC8  A4D8               	btfss	status,2,c
  6002  002BCA  D037               	goto	l9275
  6003  002BCC  0E00               	movlw	0
  6004  002BCE  6E6A               	movwf	_setup_minute,c
  6005                           
  6006                           ;Setup_Time.c: 91: break;
  6007  002BD0  D034               	goto	l9275
  6008  002BD2                     l9247:
  6009                           
  6010                           ;Setup_Time.c: 95: setup_second++;
  6011  002BD2  2A6C               	incf	_setup_second,f,c
  6012                           
  6013                           ;Setup_Time.c: 96: if (setup_second == 60) setup_second = 0;
  6014  002BD4  0E3C               	movlw	60
  6015  002BD6  186C               	xorwf	_setup_second,w,c
  6016  002BD8  A4D8               	btfss	status,2,c
  6017  002BDA  D02F               	goto	l9275
  6018  002BDC  0E00               	movlw	0
  6019  002BDE  6E6C               	movwf	_setup_second,c
  6020                           
  6021                           ;Setup_Time.c: 97: break;
  6022  002BE0  D02C               	goto	l9275
  6023  002BE2                     l9253:
  6024                           
  6025                           ;Setup_Time.c: 101: setup_month++;
  6026  002BE2  2A6B               	incf	_setup_month,f,c
  6027                           
  6028                           ;Setup_Time.c: 102: if (setup_month == 12) setup_month = 0;
  6029  002BE4  0E0C               	movlw	12
  6030  002BE6  186B               	xorwf	_setup_month,w,c
  6031  002BE8  A4D8               	btfss	status,2,c
  6032  002BEA  D027               	goto	l9275
  6033  002BEC  0E00               	movlw	0
  6034  002BEE  6E6B               	movwf	_setup_month,c
  6035                           
  6036                           ;Setup_Time.c: 103: break;
  6037  002BF0  D024               	goto	l9275
  6038  002BF2                     l9259:
  6039                           
  6040                           ;Setup_Time.c: 107: setup_day++;
  6041  002BF2  2A67               	incf	_setup_day,f,c
  6042                           
  6043                           ;Setup_Time.c: 108: if (setup_day == 31) setup_day = 0;
  6044  002BF4  0E1F               	movlw	31
  6045  002BF6  1867               	xorwf	_setup_day,w,c
  6046  002BF8  A4D8               	btfss	status,2,c
  6047  002BFA  D01F               	goto	l9275
  6048  002BFC  0E00               	movlw	0
  6049  002BFE  6E67               	movwf	_setup_day,c
  6050                           
  6051                           ;Setup_Time.c: 109: break;
  6052  002C00  D01C               	goto	l9275
  6053  002C02                     l9265:
  6054                           
  6055                           ;Setup_Time.c: 113: setup_year++;
  6056  002C02  2A6D               	incf	_setup_year,f,c
  6057                           
  6058                           ;Setup_Time.c: 114: if (setup_year == 100) setup_year = 0;
  6059  002C04  0E64               	movlw	100
  6060  002C06  186D               	xorwf	_setup_year,w,c
  6061  002C08  A4D8               	btfss	status,2,c
  6062  002C0A  D017               	goto	l9275
  6063  002C0C  0E00               	movlw	0
  6064  002C0E  6E6D               	movwf	_setup_year,c
  6065                           
  6066                           ;Setup_Time.c: 120: }
  6067                           
  6068                           ;Setup_Time.c: 119: break;
  6069                           
  6070                           ;Setup_Time.c: 118: default:
  6071                           
  6072                           ;Setup_Time.c: 115: break;
  6073  002C10  D014               	goto	l9275
  6074  002C12                     l9273:
  6075  002C12  5054               	movf	_Select_Field,w,c
  6076                           
  6077                           ; Switch size 1, requested type "space"
  6078                           ; Number of cases is 6, Range of values is 0 to 5
  6079                           ; switch strategies available:
  6080                           ; Name         Instructions Cycles
  6081                           ; simple_byte           19    10 (average)
  6082                           ;	Chosen strategy is simple_byte
  6083  002C14  0A00               	xorlw	0	; case 0
  6084  002C16  B4D8               	btfsc	status,2,c
  6085  002C18  D7CC               	goto	l9235
  6086  002C1A  0A01               	xorlw	1	; case 1
  6087  002C1C  B4D8               	btfsc	status,2,c
  6088  002C1E  D7D1               	goto	l9241
  6089  002C20  0A03               	xorlw	3	; case 2
  6090  002C22  B4D8               	btfsc	status,2,c
  6091  002C24  D7D6               	goto	l9247
  6092  002C26  0A01               	xorlw	1	; case 3
  6093  002C28  B4D8               	btfsc	status,2,c
  6094  002C2A  D7DB               	goto	l9253
  6095  002C2C  0A07               	xorlw	7	; case 4
  6096  002C2E  B4D8               	btfsc	status,2,c
  6097  002C30  D7E0               	goto	l9259
  6098  002C32  0A01               	xorlw	1	; case 5
  6099  002C34  B4D8               	btfsc	status,2,c
  6100  002C36  D7E5               	goto	l9265
  6101  002C38  D000               	goto	l9275
  6102  002C3A                     l9275:
  6103                           
  6104                           ;Setup_Time.c: 121: Update_Setup_Time_Screen();
  6105  002C3A  EC3D  F00A         	call	_Update_Setup_Time_Screen	;wreg free
  6106  002C3E  0012               	return		;funcret
  6107  002C40                     __end_of_Increase_Time:
  6108                           	opt stack 0
  6109                           tblptru	equ	0xFF8
  6110                           tblptrh	equ	0xFF7
  6111                           tblptrl	equ	0xFF6
  6112                           tablat	equ	0xFF5
  6113                           postinc0	equ	0xFEE
  6114                           wreg	equ	0xFE8
  6115                           postdec1	equ	0xFE5
  6116                           fsr1l	equ	0xFE1
  6117                           status	equ	0xFD8
  6118                           
  6119 ;; *************** function _Go_Prev_Field *****************
  6120 ;; Defined at:
  6121 ;;		line 169 in file "Setup_Time.c"
  6122 ;; Parameters:    Size  Location     Type
  6123 ;;		None
  6124 ;; Auto vars:     Size  Location     Type
  6125 ;;		None
  6126 ;; Return value:  Size  Location     Type
  6127 ;;		None               void
  6128 ;; Registers used:
  6129 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6130 ;; Tracked objects:
  6131 ;;		On entry : 0/0
  6132 ;;		On exit  : 0/0
  6133 ;;		Unchanged: 0/0
  6134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6135 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6136 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6137 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6138 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6139 ;;Total ram usage:        0 bytes
  6140 ;; Hardware stack levels used:    1
  6141 ;; Hardware stack levels required when called:    9
  6142 ;; This function calls:
  6143 ;;		_Update_Setup_Screen_Cursor_Backward
  6144 ;; This function is called by:
  6145 ;;		_Do_Setup_Time
  6146 ;; This function uses a non-reentrant model
  6147 ;;
  6148                           
  6149                           	psect	text21
  6150  003AFC                     __ptext21:
  6151                           	opt stack 0
  6152  003AFC                     _Go_Prev_Field:
  6153                           	opt stack 20
  6154                           
  6155                           ;Setup_Time.c: 171: if (Select_Field == 0) Select_Field = 5;
  6156                           
  6157                           ;incstack = 0
  6158  003AFC  5054               	movf	_Select_Field,w,c
  6159  003AFE  A4D8               	btfss	status,2,c
  6160  003B00  D003               	goto	l9175
  6161  003B02  0E05               	movlw	5
  6162  003B04  6E54               	movwf	_Select_Field,c
  6163  003B06  D002               	goto	l9177
  6164  003B08                     l9175:
  6165                           
  6166                           ;Setup_Time.c: 172: else Select_Field--;
  6167  003B08  0654               	decf	_Select_Field,f,c
  6168  003B0A  D000               	goto	l9177
  6169  003B0C                     l9177:
  6170                           
  6171                           ;Setup_Time.c: 173: Update_Setup_Screen_Cursor_Backward(Select_Field);
  6172  003B0C  5054               	movf	_Select_Field,w,c
  6173  003B0E  EC8C  F008         	call	_Update_Setup_Screen_Cursor_Backward
  6174  003B12  0012               	return		;funcret
  6175  003B14                     __end_of_Go_Prev_Field:
  6176                           	opt stack 0
  6177                           tblptru	equ	0xFF8
  6178                           tblptrh	equ	0xFF7
  6179                           tblptrl	equ	0xFF6
  6180                           tablat	equ	0xFF5
  6181                           postinc0	equ	0xFEE
  6182                           wreg	equ	0xFE8
  6183                           postdec1	equ	0xFE5
  6184                           fsr1l	equ	0xFE1
  6185                           status	equ	0xFD8
  6186                           
  6187 ;; *************** function _Go_Next_Field *****************
  6188 ;; Defined at:
  6189 ;;		line 160 in file "Setup_Time.c"
  6190 ;; Parameters:    Size  Location     Type
  6191 ;;		None
  6192 ;; Auto vars:     Size  Location     Type
  6193 ;;		None
  6194 ;; Return value:  Size  Location     Type
  6195 ;;		None               void
  6196 ;; Registers used:
  6197 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6198 ;; Tracked objects:
  6199 ;;		On entry : 0/0
  6200 ;;		On exit  : 0/0
  6201 ;;		Unchanged: 0/0
  6202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6203 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6204 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6205 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6206 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6207 ;;Total ram usage:        0 bytes
  6208 ;; Hardware stack levels used:    1
  6209 ;; Hardware stack levels required when called:    9
  6210 ;; This function calls:
  6211 ;;		_Update_Setup_Screen_Cursor_Forward
  6212 ;; This function is called by:
  6213 ;;		_Do_Setup_Time
  6214 ;; This function uses a non-reentrant model
  6215 ;;
  6216                           
  6217                           	psect	text22
  6218  003B14                     __ptext22:
  6219                           	opt stack 0
  6220  003B14                     _Go_Next_Field:
  6221                           	opt stack 20
  6222                           
  6223                           ;Setup_Time.c: 163: Select_Field++;
  6224                           
  6225                           ;incstack = 0
  6226  003B14  2A54               	incf	_Select_Field,f,c
  6227                           
  6228                           ;Setup_Time.c: 164: if (Select_Field == 6) Select_Field = 0;
  6229  003B16  0E06               	movlw	6
  6230  003B18  1854               	xorwf	_Select_Field,w,c
  6231  003B1A  A4D8               	btfss	status,2,c
  6232  003B1C  D003               	goto	l9185
  6233  003B1E  0E00               	movlw	0
  6234  003B20  6E54               	movwf	_Select_Field,c
  6235  003B22  D000               	goto	l9185
  6236  003B24                     l9185:
  6237                           
  6238                           ;Setup_Time.c: 165: Update_Setup_Screen_Cursor_Forward(Select_Field);
  6239  003B24  5054               	movf	_Select_Field,w,c
  6240  003B26  ECAF  F007         	call	_Update_Setup_Screen_Cursor_Forward
  6241  003B2A  0012               	return		;funcret
  6242  003B2C                     __end_of_Go_Next_Field:
  6243                           	opt stack 0
  6244                           tblptru	equ	0xFF8
  6245                           tblptrh	equ	0xFF7
  6246                           tblptrl	equ	0xFF6
  6247                           tablat	equ	0xFF5
  6248                           postinc0	equ	0xFEE
  6249                           wreg	equ	0xFE8
  6250                           postdec1	equ	0xFE5
  6251                           fsr1l	equ	0xFE1
  6252                           status	equ	0xFD8
  6253                           
  6254 ;; *************** function _Exit_Time_Setup *****************
  6255 ;; Defined at:
  6256 ;;		line 184 in file "Setup_Time.c"
  6257 ;; Parameters:    Size  Location     Type
  6258 ;;		None
  6259 ;; Auto vars:     Size  Location     Type
  6260 ;;		None
  6261 ;; Return value:  Size  Location     Type
  6262 ;;		None               void
  6263 ;; Registers used:
  6264 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6265 ;; Tracked objects:
  6266 ;;		On entry : 0/0
  6267 ;;		On exit  : 0/0
  6268 ;;		Unchanged: 0/0
  6269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6270 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6271 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6272 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6273 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6274 ;;Total ram usage:        0 bytes
  6275 ;; Hardware stack levels used:    1
  6276 ;; Hardware stack levels required when called:   11
  6277 ;; This function calls:
  6278 ;;		_DS3231_Read_Time
  6279 ;;		_Initialize_Screen
  6280 ;; This function is called by:
  6281 ;;		_Do_Setup_Time
  6282 ;; This function uses a non-reentrant model
  6283 ;;
  6284                           
  6285                           	psect	text23
  6286  003CC0                     __ptext23:
  6287                           	opt stack 0
  6288  003CC0                     _Exit_Time_Setup:
  6289                           	opt stack 18
  6290                           
  6291                           ;Setup_Time.c: 186: DS3231_Read_Time();
  6292                           
  6293                           ;incstack = 0
  6294  003CC0  EC2F  F019         	call	_DS3231_Read_Time	;wreg free
  6295                           
  6296                           ;Setup_Time.c: 187: Initialize_Screen();
  6297  003CC4  EC45  F003         	call	_Initialize_Screen	;wreg free
  6298                           
  6299                           ;Setup_Time.c: 188: In_Time_Setup = 0;
  6300  003CC8  0E00               	movlw	0
  6301  003CCA  0100               	movlb	0	; () banked
  6302  003CCC  6FFB               	movwf	_In_Time_Setup& (0+255),b
  6303                           
  6304                           ; BSR set to: 0
  6305  003CCE  0012               	return		;funcret
  6306  003CD0                     __end_of_Exit_Time_Setup:
  6307                           	opt stack 0
  6308                           tblptru	equ	0xFF8
  6309                           tblptrh	equ	0xFF7
  6310                           tblptrl	equ	0xFF6
  6311                           tablat	equ	0xFF5
  6312                           postinc0	equ	0xFEE
  6313                           wreg	equ	0xFE8
  6314                           postdec1	equ	0xFE5
  6315                           fsr1l	equ	0xFE1
  6316                           status	equ	0xFD8
  6317                           
  6318 ;; *************** function _Do_Save_New_Time *****************
  6319 ;; Defined at:
  6320 ;;		line 176 in file "Setup_Time.c"
  6321 ;; Parameters:    Size  Location     Type
  6322 ;;		None
  6323 ;; Auto vars:     Size  Location     Type
  6324 ;;		None
  6325 ;; Return value:  Size  Location     Type
  6326 ;;		None               void
  6327 ;; Registers used:
  6328 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6329 ;; Tracked objects:
  6330 ;;		On entry : 0/0
  6331 ;;		On exit  : 0/0
  6332 ;;		Unchanged: 0/0
  6333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6335 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6336 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6337 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6338 ;;Total ram usage:        0 bytes
  6339 ;; Hardware stack levels used:    1
  6340 ;; Hardware stack levels required when called:   11
  6341 ;; This function calls:
  6342 ;;		_DS3231_Read_Time
  6343 ;;		_DS3231_Write_Time
  6344 ;;		_Initialize_Screen
  6345 ;; This function is called by:
  6346 ;;		_Do_Setup_Time
  6347 ;; This function uses a non-reentrant model
  6348 ;;
  6349                           
  6350                           	psect	text24
  6351  003BBA                     __ptext24:
  6352                           	opt stack 0
  6353  003BBA                     _Do_Save_New_Time:
  6354                           	opt stack 18
  6355                           
  6356                           ;Setup_Time.c: 178: DS3231_Write_Time();
  6357                           
  6358                           ; BSR set to: 0
  6359                           ;incstack = 0
  6360  003BBA  EC8F  F015         	call	_DS3231_Write_Time	;wreg free
  6361                           
  6362                           ;Setup_Time.c: 179: DS3231_Read_Time();
  6363  003BBE  EC2F  F019         	call	_DS3231_Read_Time	;wreg free
  6364                           
  6365                           ;Setup_Time.c: 180: Initialize_Screen();
  6366  003BC2  EC45  F003         	call	_Initialize_Screen	;wreg free
  6367                           
  6368                           ;Setup_Time.c: 181: In_Time_Setup = 0;
  6369  003BC6  0E00               	movlw	0
  6370  003BC8  0100               	movlb	0	; () banked
  6371  003BCA  6FFB               	movwf	_In_Time_Setup& (0+255),b
  6372                           
  6373                           ; BSR set to: 0
  6374  003BCC  0012               	return		;funcret
  6375  003BCE                     __end_of_Do_Save_New_Time:
  6376                           	opt stack 0
  6377                           tblptru	equ	0xFF8
  6378                           tblptrh	equ	0xFF7
  6379                           tblptrl	equ	0xFF6
  6380                           tablat	equ	0xFF5
  6381                           postinc0	equ	0xFEE
  6382                           wreg	equ	0xFE8
  6383                           postdec1	equ	0xFE5
  6384                           fsr1l	equ	0xFE1
  6385                           status	equ	0xFD8
  6386                           
  6387 ;; *************** function _DS3231_Write_Time *****************
  6388 ;; Defined at:
  6389 ;;		line 109 in file "I2C_Support.c"
  6390 ;; Parameters:    Size  Location     Type
  6391 ;;		None
  6392 ;; Auto vars:     Size  Location     Type
  6393 ;;  Address         1   12[BANK1 ] unsigned char 
  6394 ;;  Device          1   11[BANK1 ] unsigned char 
  6395 ;; Return value:  Size  Location     Type
  6396 ;;		None               void
  6397 ;; Registers used:
  6398 ;;		wreg, status,2, status,0, cstack
  6399 ;; Tracked objects:
  6400 ;;		On entry : 0/0
  6401 ;;		On exit  : 0/0
  6402 ;;		Unchanged: 0/0
  6403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6405 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6406 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6407 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6408 ;;Total ram usage:        2 bytes
  6409 ;; Hardware stack levels used:    1
  6410 ;; Hardware stack levels required when called:    5
  6411 ;; This function calls:
  6412 ;;		_I2C_Start
  6413 ;;		_I2C_Stop
  6414 ;;		_I2C_Write
  6415 ;;		_dec_2_bcd
  6416 ;; This function is called by:
  6417 ;;		_Do_Save_New_Time
  6418 ;; This function uses a non-reentrant model
  6419 ;;
  6420                           
  6421                           	psect	text25
  6422  002B1E                     __ptext25:
  6423                           	opt stack 0
  6424  002B1E                     _DS3231_Write_Time:
  6425                           	opt stack 23
  6426                           
  6427                           ;I2C_Support.c: 111: char Device = 0x68;
  6428                           
  6429                           ; BSR set to: 0
  6430                           ;incstack = 0
  6431  002B1E  0E68               	movlw	104
  6432  002B20  0101               	movlb	1	; () banked
  6433  002B22  6F47               	movwf	DS3231_Write_Time@Device& (0+255),b
  6434                           
  6435                           ;I2C_Support.c: 112: char Address = 0x00;
  6436  002B24  0E00               	movlw	0
  6437  002B26  0101               	movlb	1	; () banked
  6438  002B28  6F48               	movwf	DS3231_Write_Time@Address& (0+255),b
  6439                           
  6440                           ; BSR set to: 1
  6441                           ;I2C_Support.c: 113: second = dec_2_bcd(setup_second);
  6442  002B2A  506C               	movf	_setup_second,w,c
  6443  002B2C  EC96  F018         	call	_dec_2_bcd
  6444  002B30  5041               	movf	?_dec_2_bcd,w,c
  6445  002B32  6E63               	movwf	_second,c
  6446                           
  6447                           ;I2C_Support.c: 114: minute = dec_2_bcd(setup_minute);
  6448  002B34  506A               	movf	_setup_minute,w,c
  6449  002B36  EC96  F018         	call	_dec_2_bcd
  6450  002B3A  5041               	movf	?_dec_2_bcd,w,c
  6451  002B3C  6E60               	movwf	_minute,c
  6452                           
  6453                           ;I2C_Support.c: 115: hour = dec_2_bcd(setup_hour);
  6454  002B3E  5069               	movf	_setup_hour,w,c
  6455  002B40  EC96  F018         	call	_dec_2_bcd
  6456  002B44  5041               	movf	?_dec_2_bcd,w,c
  6457  002B46  6E5F               	movwf	_hour,c
  6458                           
  6459                           ;I2C_Support.c: 116: dow = 0x01;
  6460  002B48  0E01               	movlw	1
  6461  002B4A  6E5C               	movwf	_dow,c
  6462                           
  6463                           ;I2C_Support.c: 117: day = dec_2_bcd(setup_day);
  6464  002B4C  5067               	movf	_setup_day,w,c
  6465  002B4E  EC96  F018         	call	_dec_2_bcd
  6466  002B52  5041               	movf	?_dec_2_bcd,w,c
  6467  002B54  6E5B               	movwf	_day,c
  6468                           
  6469                           ;I2C_Support.c: 118: month = dec_2_bcd(setup_month);
  6470  002B56  506B               	movf	_setup_month,w,c
  6471  002B58  EC96  F018         	call	_dec_2_bcd
  6472  002B5C  5041               	movf	?_dec_2_bcd,w,c
  6473  002B5E  6E61               	movwf	_month,c
  6474                           
  6475                           ;I2C_Support.c: 119: year = dec_2_bcd(setup_year);
  6476  002B60  506D               	movf	_setup_year,w,c
  6477  002B62  EC96  F018         	call	_dec_2_bcd
  6478  002B66  5041               	movf	?_dec_2_bcd,w,c
  6479  002B68  6E6E               	movwf	_year,c
  6480                           
  6481                           ;I2C_Support.c: 120: I2C_Start();
  6482  002B6A  EC46  F01E         	call	_I2C_Start	;wreg free
  6483                           
  6484                           ;I2C_Support.c: 121: I2C_Write((Device << 1) | 0);
  6485  002B6E  0101               	movlb	1	; () banked
  6486  002B70  5147               	movf	DS3231_Write_Time@Device& (0+255),w,b
  6487  002B72  2547               	addwf	DS3231_Write_Time@Device& (0+255),w,b
  6488  002B74  ECC2  F01B         	call	_I2C_Write
  6489                           
  6490                           ;I2C_Support.c: 122: I2C_Write(Address);
  6491  002B78  0101               	movlb	1	; () banked
  6492  002B7A  5148               	movf	DS3231_Write_Time@Address& (0+255),w,b
  6493  002B7C  ECC2  F01B         	call	_I2C_Write
  6494                           
  6495                           ;I2C_Support.c: 123: I2C_Write(second);
  6496  002B80  5063               	movf	_second,w,c
  6497  002B82  ECC2  F01B         	call	_I2C_Write
  6498                           
  6499                           ;I2C_Support.c: 124: I2C_Write(minute);
  6500  002B86  5060               	movf	_minute,w,c
  6501  002B88  ECC2  F01B         	call	_I2C_Write
  6502                           
  6503                           ;I2C_Support.c: 125: I2C_Write(hour);
  6504  002B8C  505F               	movf	_hour,w,c
  6505  002B8E  ECC2  F01B         	call	_I2C_Write
  6506                           
  6507                           ;I2C_Support.c: 126: I2C_Write(dow);
  6508  002B92  505C               	movf	_dow,w,c
  6509  002B94  ECC2  F01B         	call	_I2C_Write
  6510                           
  6511                           ;I2C_Support.c: 127: I2C_Write(day);
  6512  002B98  505B               	movf	_day,w,c
  6513  002B9A  ECC2  F01B         	call	_I2C_Write
  6514                           
  6515                           ;I2C_Support.c: 128: I2C_Write(month);
  6516  002B9E  5061               	movf	_month,w,c
  6517  002BA0  ECC2  F01B         	call	_I2C_Write
  6518                           
  6519                           ;I2C_Support.c: 129: I2C_Write(year);
  6520  002BA4  506E               	movf	_year,w,c
  6521  002BA6  ECC2  F01B         	call	_I2C_Write
  6522                           
  6523                           ;I2C_Support.c: 130: I2C_Stop();
  6524  002BAA  EC3D  F01E         	call	_I2C_Stop	;wreg free
  6525  002BAE  0012               	return		;funcret
  6526  002BB0                     __end_of_DS3231_Write_Time:
  6527                           	opt stack 0
  6528                           tblptru	equ	0xFF8
  6529                           tblptrh	equ	0xFF7
  6530                           tblptrl	equ	0xFF6
  6531                           tablat	equ	0xFF5
  6532                           postinc0	equ	0xFEE
  6533                           wreg	equ	0xFE8
  6534                           postdec1	equ	0xFE5
  6535                           fsr1l	equ	0xFE1
  6536                           status	equ	0xFD8
  6537                           
  6538 ;; *************** function _Decrease_Time *****************
  6539 ;; Defined at:
  6540 ;;		line 124 in file "Setup_Time.c"
  6541 ;; Parameters:    Size  Location     Type
  6542 ;;		None
  6543 ;; Auto vars:     Size  Location     Type
  6544 ;;		None
  6545 ;; Return value:  Size  Location     Type
  6546 ;;		None               void
  6547 ;; Registers used:
  6548 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6549 ;; Tracked objects:
  6550 ;;		On entry : 0/0
  6551 ;;		On exit  : 0/0
  6552 ;;		Unchanged: 0/0
  6553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6554 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6555 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6556 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6557 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6558 ;;Total ram usage:        0 bytes
  6559 ;; Hardware stack levels used:    1
  6560 ;; Hardware stack levels required when called:   11
  6561 ;; This function calls:
  6562 ;;		_Update_Setup_Time_Screen
  6563 ;; This function is called by:
  6564 ;;		_Do_Setup_Time
  6565 ;; This function uses a non-reentrant model
  6566 ;;
  6567                           
  6568                           	psect	text26
  6569  002DE8                     __ptext26:
  6570                           	opt stack 0
  6571  002DE8                     _Decrease_Time:
  6572                           	opt stack 18
  6573                           
  6574                           ;Setup_Time.c: 126: switch (Select_Field)
  6575                           
  6576                           ;incstack = 0
  6577  002DE8  D02A               	goto	l9229
  6578  002DEA                     l9195:
  6579                           
  6580                           ;Setup_Time.c: 129: if (setup_hour == 0) setup_hour = 23;
  6581  002DEA  5069               	movf	_setup_hour,w,c
  6582  002DEC  A4D8               	btfss	status,2,c
  6583  002DEE  D003               	goto	l9199
  6584  002DF0  0E17               	movlw	23
  6585  002DF2  6E69               	movwf	_setup_hour,c
  6586  002DF4  D038               	goto	l9231
  6587  002DF6                     l9199:
  6588                           
  6589                           ;Setup_Time.c: 130: else --setup_hour;
  6590  002DF6  0669               	decf	_setup_hour,f,c
  6591                           
  6592                           ;Setup_Time.c: 131: break;
  6593  002DF8  D036               	goto	l9231
  6594  002DFA                     l9201:
  6595                           
  6596                           ;Setup_Time.c: 133: if (setup_minute == 0) setup_minute = 59;
  6597  002DFA  506A               	movf	_setup_minute,w,c
  6598  002DFC  A4D8               	btfss	status,2,c
  6599  002DFE  D003               	goto	l9205
  6600  002E00  0E3B               	movlw	59
  6601  002E02  6E6A               	movwf	_setup_minute,c
  6602  002E04  D030               	goto	l9231
  6603  002E06                     l9205:
  6604                           
  6605                           ;Setup_Time.c: 134: else --setup_minute;
  6606  002E06  066A               	decf	_setup_minute,f,c
  6607                           
  6608                           ;Setup_Time.c: 135: break;
  6609  002E08  D02E               	goto	l9231
  6610  002E0A                     l9207:
  6611                           
  6612                           ;Setup_Time.c: 137: if (setup_second == 0) setup_second = 59;
  6613  002E0A  506C               	movf	_setup_second,w,c
  6614  002E0C  A4D8               	btfss	status,2,c
  6615  002E0E  D003               	goto	l9211
  6616  002E10  0E3B               	movlw	59
  6617  002E12  6E6C               	movwf	_setup_second,c
  6618  002E14  D028               	goto	l9231
  6619  002E16                     l9211:
  6620                           
  6621                           ;Setup_Time.c: 138: else
  6622                           ;Setup_Time.c: 139: --setup_second;
  6623  002E16  066C               	decf	_setup_second,f,c
  6624                           
  6625                           ;Setup_Time.c: 140: break;
  6626  002E18  D026               	goto	l9231
  6627  002E1A                     l9213:
  6628                           
  6629                           ;Setup_Time.c: 142: if (setup_month == 0) setup_month = 12;
  6630  002E1A  506B               	movf	_setup_month,w,c
  6631  002E1C  A4D8               	btfss	status,2,c
  6632  002E1E  D003               	goto	l9217
  6633  002E20  0E0C               	movlw	12
  6634  002E22  6E6B               	movwf	_setup_month,c
  6635  002E24  D020               	goto	l9231
  6636  002E26                     l9217:
  6637                           
  6638                           ;Setup_Time.c: 143: else
  6639                           ;Setup_Time.c: 144: --setup_month;
  6640  002E26  066B               	decf	_setup_month,f,c
  6641                           
  6642                           ;Setup_Time.c: 145: break;
  6643  002E28  D01E               	goto	l9231
  6644  002E2A                     l9219:
  6645                           
  6646                           ;Setup_Time.c: 147: if (setup_day == 0) setup_day = 31;
  6647  002E2A  5067               	movf	_setup_day,w,c
  6648  002E2C  A4D8               	btfss	status,2,c
  6649  002E2E  D003               	goto	l9223
  6650  002E30  0E1F               	movlw	31
  6651  002E32  6E67               	movwf	_setup_day,c
  6652  002E34  D018               	goto	l9231
  6653  002E36                     l9223:
  6654                           
  6655                           ;Setup_Time.c: 148: else
  6656                           ;Setup_Time.c: 149: --setup_day;
  6657  002E36  0667               	decf	_setup_day,f,c
  6658                           
  6659                           ;Setup_Time.c: 150: break;
  6660  002E38  D016               	goto	l9231
  6661  002E3A                     l9225:
  6662                           
  6663                           ;Setup_Time.c: 152: --setup_year;
  6664  002E3A  066D               	decf	_setup_year,f,c
  6665                           
  6666                           ;Setup_Time.c: 156: }
  6667                           
  6668                           ;Setup_Time.c: 155: break;
  6669                           
  6670                           ;Setup_Time.c: 154: default:
  6671                           
  6672                           ;Setup_Time.c: 153: break;
  6673  002E3C  D014               	goto	l9231
  6674  002E3E                     l9229:
  6675  002E3E  5054               	movf	_Select_Field,w,c
  6676                           
  6677                           ; Switch size 1, requested type "space"
  6678                           ; Number of cases is 6, Range of values is 0 to 5
  6679                           ; switch strategies available:
  6680                           ; Name         Instructions Cycles
  6681                           ; simple_byte           19    10 (average)
  6682                           ;	Chosen strategy is simple_byte
  6683  002E40  0A00               	xorlw	0	; case 0
  6684  002E42  B4D8               	btfsc	status,2,c
  6685  002E44  D7D2               	goto	l9195
  6686  002E46  0A01               	xorlw	1	; case 1
  6687  002E48  B4D8               	btfsc	status,2,c
  6688  002E4A  D7D7               	goto	l9201
  6689  002E4C  0A03               	xorlw	3	; case 2
  6690  002E4E  B4D8               	btfsc	status,2,c
  6691  002E50  D7DC               	goto	l9207
  6692  002E52  0A01               	xorlw	1	; case 3
  6693  002E54  B4D8               	btfsc	status,2,c
  6694  002E56  D7E1               	goto	l9213
  6695  002E58  0A07               	xorlw	7	; case 4
  6696  002E5A  B4D8               	btfsc	status,2,c
  6697  002E5C  D7E6               	goto	l9219
  6698  002E5E  0A01               	xorlw	1	; case 5
  6699  002E60  B4D8               	btfsc	status,2,c
  6700  002E62  D7EB               	goto	l9225
  6701  002E64  D000               	goto	l9231
  6702  002E66                     l9231:
  6703                           
  6704                           ;Setup_Time.c: 157: Update_Setup_Time_Screen();
  6705  002E66  EC3D  F00A         	call	_Update_Setup_Time_Screen	;wreg free
  6706  002E6A  0012               	return		;funcret
  6707  002E6C                     __end_of_Decrease_Time:
  6708                           	opt stack 0
  6709                           tblptru	equ	0xFF8
  6710                           tblptrh	equ	0xFF7
  6711                           tblptrl	equ	0xFF6
  6712                           tablat	equ	0xFF5
  6713                           postinc0	equ	0xFEE
  6714                           wreg	equ	0xFE8
  6715                           postdec1	equ	0xFE5
  6716                           fsr1l	equ	0xFE1
  6717                           status	equ	0xFD8
  6718                           
  6719 ;; *************** function _Update_Setup_Time_Screen *****************
  6720 ;; Defined at:
  6721 ;;		line 209 in file "Setup_Time.c"
  6722 ;; Parameters:    Size  Location     Type
  6723 ;;		None
  6724 ;; Auto vars:     Size  Location     Type
  6725 ;;		None
  6726 ;; Return value:  Size  Location     Type
  6727 ;;		None               void
  6728 ;; Registers used:
  6729 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6730 ;; Tracked objects:
  6731 ;;		On entry : 0/0
  6732 ;;		On exit  : 0/0
  6733 ;;		Unchanged: 0/0
  6734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6735 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6736 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6737 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6738 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6739 ;;Total ram usage:        0 bytes
  6740 ;; Hardware stack levels used:    1
  6741 ;; Hardware stack levels required when called:   10
  6742 ;; This function calls:
  6743 ;;		___awdiv
  6744 ;;		___awmod
  6745 ;;		_drawtext
  6746 ;; This function is called by:
  6747 ;;		_Do_Setup_Time
  6748 ;;		_Increase_Time
  6749 ;;		_Decrease_Time
  6750 ;; This function uses a non-reentrant model
  6751 ;;
  6752                           
  6753                           	psect	text27
  6754  00147A                     __ptext27:
  6755                           	opt stack 0
  6756  00147A                     _Update_Setup_Time_Screen:
  6757                           	opt stack 19
  6758                           
  6759                           ;Setup_Time.c: 211: setup_time[0] = (setup_hour/10) + '0';
  6760                           
  6761                           ;incstack = 0
  6762  00147A  C069  F13C         	movff	_setup_hour,___awdiv@dividend
  6763  00147E  0101               	movlb	1	; () banked
  6764  001480  6B3D               	clrf	(___awdiv@dividend+1)& (0+255),b
  6765  001482  0E00               	movlw	0
  6766  001484  0101               	movlb	1	; () banked
  6767  001486  6F3F               	movwf	(___awdiv@divisor+1)& (0+255),b
  6768  001488  0E0A               	movlw	10
  6769  00148A  6F3E               	movwf	___awdiv@divisor& (0+255),b
  6770  00148C  EC5E  F012         	call	___awdiv	;wreg free
  6771  001490  0101               	movlb	1	; () banked
  6772  001492  513C               	movf	?___awdiv& (0+255),w,b
  6773  001494  0F30               	addlw	48
  6774  001496  0100               	movlb	0	; () banked
  6775  001498  6FA6               	movwf	_setup_time& (0+255),b
  6776                           
  6777                           ;Setup_Time.c: 212: setup_time[1] = (setup_hour%10) + '0';
  6778  00149A  C069  F03B         	movff	_setup_hour,___awmod@dividend
  6779  00149E  6A3C               	clrf	___awmod@dividend+1,c
  6780  0014A0  0E00               	movlw	0
  6781  0014A2  6E3E               	movwf	___awmod@divisor+1,c
  6782  0014A4  0E0A               	movlw	10
  6783  0014A6  6E3D               	movwf	___awmod@divisor,c
  6784  0014A8  EC36  F017         	call	___awmod	;wreg free
  6785  0014AC  503B               	movf	?___awmod,w,c
  6786  0014AE  0F30               	addlw	48
  6787  0014B0  0100               	movlb	0	; () banked
  6788  0014B2  6FA7               	movwf	(_setup_time+1)& (0+255),b
  6789                           
  6790                           ;Setup_Time.c: 214: setup_time[3] = (setup_minute/10) + '0';
  6791  0014B4  C06A  F13C         	movff	_setup_minute,___awdiv@dividend
  6792  0014B8  0101               	movlb	1	; () banked
  6793  0014BA  6B3D               	clrf	(___awdiv@dividend+1)& (0+255),b
  6794  0014BC  0E00               	movlw	0
  6795  0014BE  0101               	movlb	1	; () banked
  6796  0014C0  6F3F               	movwf	(___awdiv@divisor+1)& (0+255),b
  6797  0014C2  0E0A               	movlw	10
  6798  0014C4  6F3E               	movwf	___awdiv@divisor& (0+255),b
  6799  0014C6  EC5E  F012         	call	___awdiv	;wreg free
  6800  0014CA  0101               	movlb	1	; () banked
  6801  0014CC  513C               	movf	?___awdiv& (0+255),w,b
  6802  0014CE  0F30               	addlw	48
  6803  0014D0  0100               	movlb	0	; () banked
  6804  0014D2  6FA9               	movwf	(_setup_time+3)& (0+255),b
  6805                           
  6806                           ;Setup_Time.c: 215: setup_time[4] = (setup_minute%10) + '0';
  6807  0014D4  C06A  F03B         	movff	_setup_minute,___awmod@dividend
  6808  0014D8  6A3C               	clrf	___awmod@dividend+1,c
  6809  0014DA  0E00               	movlw	0
  6810  0014DC  6E3E               	movwf	___awmod@divisor+1,c
  6811  0014DE  0E0A               	movlw	10
  6812  0014E0  6E3D               	movwf	___awmod@divisor,c
  6813  0014E2  EC36  F017         	call	___awmod	;wreg free
  6814  0014E6  503B               	movf	?___awmod,w,c
  6815  0014E8  0F30               	addlw	48
  6816  0014EA  0100               	movlb	0	; () banked
  6817  0014EC  6FAA               	movwf	(_setup_time+4)& (0+255),b
  6818                           
  6819                           ;Setup_Time.c: 217: setup_time[6] = (setup_second/10) + '0';
  6820  0014EE  C06C  F13C         	movff	_setup_second,___awdiv@dividend
  6821  0014F2  0101               	movlb	1	; () banked
  6822  0014F4  6B3D               	clrf	(___awdiv@dividend+1)& (0+255),b
  6823  0014F6  0E00               	movlw	0
  6824  0014F8  0101               	movlb	1	; () banked
  6825  0014FA  6F3F               	movwf	(___awdiv@divisor+1)& (0+255),b
  6826  0014FC  0E0A               	movlw	10
  6827  0014FE  6F3E               	movwf	___awdiv@divisor& (0+255),b
  6828  001500  EC5E  F012         	call	___awdiv	;wreg free
  6829  001504  0101               	movlb	1	; () banked
  6830  001506  513C               	movf	?___awdiv& (0+255),w,b
  6831  001508  0F30               	addlw	48
  6832  00150A  0100               	movlb	0	; () banked
  6833  00150C  6FAC               	movwf	(_setup_time+6)& (0+255),b
  6834                           
  6835                           ;Setup_Time.c: 218: setup_time[7] = (setup_second%10) + '0';
  6836  00150E  C06C  F03B         	movff	_setup_second,___awmod@dividend
  6837  001512  6A3C               	clrf	___awmod@dividend+1,c
  6838  001514  0E00               	movlw	0
  6839  001516  6E3E               	movwf	___awmod@divisor+1,c
  6840  001518  0E0A               	movlw	10
  6841  00151A  6E3D               	movwf	___awmod@divisor,c
  6842  00151C  EC36  F017         	call	___awmod	;wreg free
  6843  001520  503B               	movf	?___awmod,w,c
  6844  001522  0F30               	addlw	48
  6845  001524  0100               	movlb	0	; () banked
  6846  001526  6FAD               	movwf	(_setup_time+7)& (0+255),b
  6847                           
  6848                           ;Setup_Time.c: 220: setup_date[0] = (setup_month/10) + '0';
  6849  001528  C06B  F13C         	movff	_setup_month,___awdiv@dividend
  6850  00152C  0101               	movlb	1	; () banked
  6851  00152E  6B3D               	clrf	(___awdiv@dividend+1)& (0+255),b
  6852  001530  0E00               	movlw	0
  6853  001532  0101               	movlb	1	; () banked
  6854  001534  6F3F               	movwf	(___awdiv@divisor+1)& (0+255),b
  6855  001536  0E0A               	movlw	10
  6856  001538  6F3E               	movwf	___awdiv@divisor& (0+255),b
  6857  00153A  EC5E  F012         	call	___awdiv	;wreg free
  6858  00153E  0101               	movlb	1	; () banked
  6859  001540  513C               	movf	?___awdiv& (0+255),w,b
  6860  001542  0F30               	addlw	48
  6861  001544  0100               	movlb	0	; () banked
  6862  001546  6F9D               	movwf	_setup_date& (0+255),b
  6863                           
  6864                           ;Setup_Time.c: 221: setup_date[1] = (setup_month%10) + '0';
  6865  001548  C06B  F03B         	movff	_setup_month,___awmod@dividend
  6866  00154C  6A3C               	clrf	___awmod@dividend+1,c
  6867  00154E  0E00               	movlw	0
  6868  001550  6E3E               	movwf	___awmod@divisor+1,c
  6869  001552  0E0A               	movlw	10
  6870  001554  6E3D               	movwf	___awmod@divisor,c
  6871  001556  EC36  F017         	call	___awmod	;wreg free
  6872  00155A  503B               	movf	?___awmod,w,c
  6873  00155C  0F30               	addlw	48
  6874  00155E  0100               	movlb	0	; () banked
  6875  001560  6F9E               	movwf	(_setup_date+1)& (0+255),b
  6876                           
  6877                           ;Setup_Time.c: 223: setup_date[3] = (setup_day/10) + '0';
  6878  001562  C067  F13C         	movff	_setup_day,___awdiv@dividend
  6879  001566  0101               	movlb	1	; () banked
  6880  001568  6B3D               	clrf	(___awdiv@dividend+1)& (0+255),b
  6881  00156A  0E00               	movlw	0
  6882  00156C  0101               	movlb	1	; () banked
  6883  00156E  6F3F               	movwf	(___awdiv@divisor+1)& (0+255),b
  6884  001570  0E0A               	movlw	10
  6885  001572  6F3E               	movwf	___awdiv@divisor& (0+255),b
  6886  001574  EC5E  F012         	call	___awdiv	;wreg free
  6887  001578  0101               	movlb	1	; () banked
  6888  00157A  513C               	movf	?___awdiv& (0+255),w,b
  6889  00157C  0F30               	addlw	48
  6890  00157E  0100               	movlb	0	; () banked
  6891  001580  6FA0               	movwf	(_setup_date+3)& (0+255),b
  6892                           
  6893                           ;Setup_Time.c: 224: setup_date[4] = (setup_day%10) + '0';
  6894  001582  C067  F03B         	movff	_setup_day,___awmod@dividend
  6895  001586  6A3C               	clrf	___awmod@dividend+1,c
  6896  001588  0E00               	movlw	0
  6897  00158A  6E3E               	movwf	___awmod@divisor+1,c
  6898  00158C  0E0A               	movlw	10
  6899  00158E  6E3D               	movwf	___awmod@divisor,c
  6900  001590  EC36  F017         	call	___awmod	;wreg free
  6901  001594  503B               	movf	?___awmod,w,c
  6902  001596  0F30               	addlw	48
  6903  001598  0100               	movlb	0	; () banked
  6904  00159A  6FA1               	movwf	(_setup_date+4)& (0+255),b
  6905                           
  6906                           ;Setup_Time.c: 226: setup_date[6] = (setup_year/10) + '0';
  6907  00159C  C06D  F13C         	movff	_setup_year,___awdiv@dividend
  6908  0015A0  0101               	movlb	1	; () banked
  6909  0015A2  6B3D               	clrf	(___awdiv@dividend+1)& (0+255),b
  6910  0015A4  0E00               	movlw	0
  6911  0015A6  0101               	movlb	1	; () banked
  6912  0015A8  6F3F               	movwf	(___awdiv@divisor+1)& (0+255),b
  6913  0015AA  0E0A               	movlw	10
  6914  0015AC  6F3E               	movwf	___awdiv@divisor& (0+255),b
  6915  0015AE  EC5E  F012         	call	___awdiv	;wreg free
  6916  0015B2  0101               	movlb	1	; () banked
  6917  0015B4  513C               	movf	?___awdiv& (0+255),w,b
  6918  0015B6  0F30               	addlw	48
  6919  0015B8  0100               	movlb	0	; () banked
  6920  0015BA  6FA3               	movwf	(_setup_date+6)& (0+255),b
  6921                           
  6922                           ;Setup_Time.c: 227: setup_date[7] = (setup_year%10) + '0';
  6923  0015BC  C06D  F03B         	movff	_setup_year,___awmod@dividend
  6924  0015C0  6A3C               	clrf	___awmod@dividend+1,c
  6925  0015C2  0E00               	movlw	0
  6926  0015C4  6E3E               	movwf	___awmod@divisor+1,c
  6927  0015C6  0E0A               	movlw	10
  6928  0015C8  6E3D               	movwf	___awmod@divisor,c
  6929  0015CA  EC36  F017         	call	___awmod	;wreg free
  6930  0015CE  503B               	movf	?___awmod,w,c
  6931  0015D0  0F30               	addlw	48
  6932  0015D2  0100               	movlb	0	; () banked
  6933  0015D4  6FA4               	movwf	(_setup_date+7)& (0+255),b
  6934                           
  6935                           ; BSR set to: 0
  6936                           ;Setup_Time.c: 229: drawtext(15, 52, setup_time, 0x07FF, 0x0000, 2);
  6937  0015D6  0E34               	movlw	52
  6938  0015D8  6E39               	movwf	drawtext@y,c
  6939  0015DA  0EA6               	movlw	low _setup_time
  6940  0015DC  6E3A               	movwf	drawtext@_text,c
  6941  0015DE  0E00               	movlw	high _setup_time
  6942  0015E0  6E3B               	movwf	drawtext@_text+1,c
  6943  0015E2  0E07               	movlw	7
  6944  0015E4  6E3D               	movwf	drawtext@color+1,c
  6945  0015E6  683C               	setf	drawtext@color,c
  6946  0015E8  0E00               	movlw	0
  6947  0015EA  6E3F               	movwf	drawtext@bg+1,c
  6948  0015EC  0E00               	movlw	0
  6949  0015EE  6E3E               	movwf	drawtext@bg,c
  6950  0015F0  0E02               	movlw	2
  6951  0015F2  6E40               	movwf	drawtext@size,c
  6952  0015F4  0E0F               	movlw	15
  6953  0015F6  EC92  F00D         	call	_drawtext
  6954                           
  6955                           ;Setup_Time.c: 230: drawtext(15, 82, setup_date, 0x07E0, 0x0000, 2);
  6956  0015FA  0E52               	movlw	82
  6957  0015FC  6E39               	movwf	drawtext@y,c
  6958  0015FE  0E9D               	movlw	low _setup_date
  6959  001600  6E3A               	movwf	drawtext@_text,c
  6960  001602  0E00               	movlw	high _setup_date
  6961  001604  6E3B               	movwf	drawtext@_text+1,c
  6962  001606  0E07               	movlw	7
  6963  001608  6E3D               	movwf	drawtext@color+1,c
  6964  00160A  0EE0               	movlw	224
  6965  00160C  6E3C               	movwf	drawtext@color,c
  6966  00160E  0E00               	movlw	0
  6967  001610  6E3F               	movwf	drawtext@bg+1,c
  6968  001612  0E00               	movlw	0
  6969  001614  6E3E               	movwf	drawtext@bg,c
  6970  001616  0E02               	movlw	2
  6971  001618  6E40               	movwf	drawtext@size,c
  6972  00161A  0E0F               	movlw	15
  6973  00161C  EC92  F00D         	call	_drawtext
  6974  001620  0012               	return		;funcret
  6975  001622                     __end_of_Update_Setup_Time_Screen:
  6976                           	opt stack 0
  6977                           tblptru	equ	0xFF8
  6978                           tblptrh	equ	0xFF7
  6979                           tblptrl	equ	0xFF6
  6980                           tablat	equ	0xFF5
  6981                           postinc0	equ	0xFEE
  6982                           wreg	equ	0xFE8
  6983                           postdec1	equ	0xFE5
  6984                           fsr1l	equ	0xFE1
  6985                           status	equ	0xFD8
  6986                           
  6987 ;; *************** function _Do_Setup_Heater_Temp *****************
  6988 ;; Defined at:
  6989 ;;		line 24 in file "Setup_Heater.c"
  6990 ;; Parameters:    Size  Location     Type
  6991 ;;		None
  6992 ;; Auto vars:     Size  Location     Type
  6993 ;;		None
  6994 ;; Return value:  Size  Location     Type
  6995 ;;                  2  809[None  ] int 
  6996 ;; Registers used:
  6997 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6998 ;; Tracked objects:
  6999 ;;		On entry : 0/0
  7000 ;;		On exit  : 0/0
  7001 ;;		Unchanged: 0/0
  7002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7003 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7004 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7005 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7006 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7007 ;;Total ram usage:        2 bytes
  7008 ;; Hardware stack levels used:    1
  7009 ;; Hardware stack levels required when called:   12
  7010 ;; This function calls:
  7011 ;;		_Decrease_Heater_Temp
  7012 ;;		_Do_Beep_Bad
  7013 ;;		_Do_Beep_Good
  7014 ;;		_Do_Save_New_Heater_Temp
  7015 ;;		_Exit_Setup_Heater_Temp
  7016 ;;		_Increase_Heater_Temp
  7017 ;;		_Initialize_Setup_Heater_Screen
  7018 ;;		_Update_Setup_Heater_Screen
  7019 ;;		_check_for_button_input
  7020 ;; This function is called by:
  7021 ;;		_main
  7022 ;; This function uses a non-reentrant model
  7023 ;;
  7024                           
  7025                           	psect	text28
  7026  002A8A                     __ptext28:
  7027                           	opt stack 0
  7028  002A8A                     _Do_Setup_Heater_Temp:
  7029                           	opt stack 18
  7030                           
  7031                           ;Setup_Heater.c: 27: In_Heater_Temp_Setup = 1;
  7032                           
  7033                           ;incstack = 0
  7034  002A8A  0E01               	movlw	1
  7035  002A8C  0100               	movlb	0	; () banked
  7036  002A8E  6FFA               	movwf	_In_Heater_Temp_Setup& (0+255),b
  7037                           
  7038                           ; BSR set to: 0
  7039                           ;Setup_Heater.c: 28: setup_heater_set_temp = heater_set_temp;
  7040  002A90  C06F  F068         	movff	_heater_set_temp,_setup_heater_set_temp
  7041                           
  7042                           ; BSR set to: 0
  7043                           ;Setup_Heater.c: 29: Initialize_Setup_Heater_Screen();
  7044  002A94  ECA1  F00F         	call	_Initialize_Setup_Heater_Screen	;wreg free
  7045                           
  7046                           ;Setup_Heater.c: 30: Update_Setup_Heater_Screen();
  7047  002A98  ECA4  F014         	call	_Update_Setup_Heater_Screen	;wreg free
  7048                           
  7049                           ;Setup_Heater.c: 32: while (In_Heater_Temp_Setup == 1)
  7050  002A9C  D03B               	goto	l9913
  7051  002A9E                     l9883:
  7052                           
  7053                           ;Setup_Heater.c: 33: {
  7054                           ;Setup_Heater.c: 34: if (check_for_button_input() == 1)
  7055  002A9E  0E01               	movlw	1
  7056  002AA0  0100               	movlb	0	; () banked
  7057  002AA2  6FFE               	movwf	??_Do_Setup_Heater_Temp& (0+255),b
  7058  002AA4  0E00               	movlw	0
  7059  002AA6  0100               	movlb	0	; () banked
  7060  002AA8  6FFF               	movwf	(??_Do_Setup_Heater_Temp+1)& (0+255),b
  7061  002AAA  EC20  F016         	call	_check_for_button_input	;wreg free
  7062  002AAE  0100               	movlb	0	; () banked
  7063  002AB0  19FE               	xorwf	??_Do_Setup_Heater_Temp& (0+255),w,b
  7064  002AB2  11FF               	iorwf	(??_Do_Setup_Heater_Temp+1)& (0+255),w,b
  7065  002AB4  A4D8               	btfss	status,2,c
  7066  002AB6  D02E               	goto	l9913
  7067                           
  7068                           ; BSR set to: 0
  7069                           ;Setup_Heater.c: 35: {
  7070                           ;Setup_Heater.c: 36: nec_ok = 0;
  7071  002AB8  0E00               	movlw	0
  7072  002ABA  0100               	movlb	0	; () banked
  7073  002ABC  6FF3               	movwf	(_nec_ok+1)& (0+255),b
  7074  002ABE  0E00               	movlw	0
  7075  002AC0  6FF2               	movwf	_nec_ok& (0+255),b
  7076                           
  7077                           ; BSR set to: 0
  7078                           ;Setup_Heater.c: 37: if (found >= 5 && found <= 8)
  7079  002AC2  0E04               	movlw	4
  7080  002AC4  645E               	cpfsgt	_found,c
  7081  002AC6  D023               	goto	l9911
  7082                           
  7083                           ; BSR set to: 0
  7084  002AC8  0E09               	movlw	9
  7085  002ACA  605E               	cpfslt	_found,c
  7086  002ACC  D020               	goto	l9911
  7087                           
  7088                           ; BSR set to: 0
  7089                           ;Setup_Heater.c: 38: {
  7090                           ;Setup_Heater.c: 39: Do_Beep_Good();
  7091  002ACE  ECBA  F01D         	call	_Do_Beep_Good	;wreg free
  7092                           
  7093                           ;Setup_Heater.c: 41: if (found == 5) Do_Save_New_Heater_Temp();
  7094  002AD2  0E05               	movlw	5
  7095  002AD4  185E               	xorwf	_found,w,c
  7096  002AD6  A4D8               	btfss	status,2,c
  7097  002AD8  D003               	goto	l9897
  7098  002ADA  ECF1  F01D         	call	_Do_Save_New_Heater_Temp	;wreg free
  7099  002ADE  D000               	goto	l9897
  7100  002AE0                     l9897:
  7101                           
  7102                           ;Setup_Heater.c: 42: if (found == 6) Decrease_Heater_Temp();
  7103  002AE0  0E06               	movlw	6
  7104  002AE2  185E               	xorwf	_found,w,c
  7105  002AE4  A4D8               	btfss	status,2,c
  7106  002AE6  D003               	goto	l9901
  7107  002AE8  ECFB  F01D         	call	_Decrease_Heater_Temp	;wreg free
  7108  002AEC  D000               	goto	l9901
  7109  002AEE                     l9901:
  7110                           
  7111                           ;Setup_Heater.c: 43: if (found == 7) Increase_Heater_Temp();
  7112  002AEE  0E07               	movlw	7
  7113  002AF0  185E               	xorwf	_found,w,c
  7114  002AF2  A4D8               	btfss	status,2,c
  7115  002AF4  D003               	goto	l9905
  7116  002AF6  ECE7  F01D         	call	_Increase_Heater_Temp	;wreg free
  7117  002AFA  D000               	goto	l9905
  7118  002AFC                     l9905:
  7119                           
  7120                           ;Setup_Heater.c: 44: if (found == 8) Exit_Setup_Heater_Temp();
  7121  002AFC  0E08               	movlw	8
  7122  002AFE  185E               	xorwf	_found,w,c
  7123  002B00  A4D8               	btfss	status,2,c
  7124  002B02  D003               	goto	l9909
  7125  002B04  EC68  F01E         	call	_Exit_Setup_Heater_Temp	;wreg free
  7126  002B08  D000               	goto	l9909
  7127  002B0A                     l9909:
  7128                           
  7129                           ;Setup_Heater.c: 45: found = 0xff;
  7130  002B0A  685E               	setf	_found,c
  7131                           
  7132                           ;Setup_Heater.c: 46: }
  7133  002B0C  D003               	goto	l9913
  7134  002B0E                     l9911:
  7135                           
  7136                           ;Setup_Heater.c: 47: else
  7137                           ;Setup_Heater.c: 48: {
  7138                           ;Setup_Heater.c: 49: Do_Beep_Bad();
  7139  002B0E  ECC6  F01D         	call	_Do_Beep_Bad	;wreg free
  7140  002B12  D000               	goto	l9913
  7141  002B14                     l9913:
  7142  002B14  0100               	movlb	0	; () banked
  7143  002B16  05FA               	decf	_In_Heater_Temp_Setup& (0+255),w,b
  7144  002B18  B4D8               	btfsc	status,2,c
  7145  002B1A  D7C1               	goto	l9883
  7146                           
  7147                           ; BSR set to: 0
  7148                           
  7149                           ; BSR set to: 0
  7150  002B1C  0012               	return		;funcret
  7151  002B1E                     __end_of_Do_Setup_Heater_Temp:
  7152                           	opt stack 0
  7153                           tblptru	equ	0xFF8
  7154                           tblptrh	equ	0xFF7
  7155                           tblptrl	equ	0xFF6
  7156                           tablat	equ	0xFF5
  7157                           postinc0	equ	0xFEE
  7158                           wreg	equ	0xFE8
  7159                           postdec1	equ	0xFE5
  7160                           fsr1l	equ	0xFE1
  7161                           status	equ	0xFD8
  7162                           
  7163 ;; *************** function _Initialize_Setup_Heater_Screen *****************
  7164 ;; Defined at:
  7165 ;;		line 92 in file "Setup_Heater.c"
  7166 ;; Parameters:    Size  Location     Type
  7167 ;;		None
  7168 ;; Auto vars:     Size  Location     Type
  7169 ;;		None
  7170 ;; Return value:  Size  Location     Type
  7171 ;;		None               void
  7172 ;; Registers used:
  7173 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7174 ;; Tracked objects:
  7175 ;;		On entry : 0/0
  7176 ;;		On exit  : 0/0
  7177 ;;		Unchanged: 0/0
  7178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7179 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7180 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7181 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7182 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7183 ;;Total ram usage:        0 bytes
  7184 ;; Hardware stack levels used:    1
  7185 ;; Hardware stack levels required when called:   10
  7186 ;; This function calls:
  7187 ;;		_drawtext
  7188 ;;		_fillScreen
  7189 ;;		_strcpy
  7190 ;; This function is called by:
  7191 ;;		_Do_Setup_Heater_Temp
  7192 ;; This function uses a non-reentrant model
  7193 ;;
  7194                           
  7195                           	psect	text29
  7196  001F42                     __ptext29:
  7197                           	opt stack 0
  7198  001F42                     _Initialize_Setup_Heater_Screen:
  7199                           	opt stack 19
  7200                           
  7201                           ;Setup_Heater.c: 94: fillScreen(0x0000);
  7202                           
  7203                           ; BSR set to: 0
  7204                           ;incstack = 0
  7205  001F42  0E00               	movlw	0
  7206  001F44  6E25               	movwf	fillScreen@color+1,c
  7207  001F46  0E00               	movlw	0
  7208  001F48  6E24               	movwf	fillScreen@color,c
  7209  001F4A  EC63  F01D         	call	_fillScreen	;wreg free
  7210                           
  7211                           ;Setup_Heater.c: 96: strcpy(txt, "ECE3301L F'21 Final\0");
  7212  001F4E  C04E  F011         	movff	_txt,strcpy@to
  7213  001F52  C04F  F012         	movff	_txt+1,strcpy@to+1
  7214  001F56  0EDD               	movlw	low STR_29
  7215  001F58  6E13               	movwf	strcpy@from,c
  7216  001F5A  0EFE               	movlw	high STR_29
  7217  001F5C  6E14               	movwf	strcpy@from+1,c
  7218  001F5E  EC54  F01C         	call	_strcpy	;wreg free
  7219                           
  7220                           ;Setup_Heater.c: 97: drawtext(1 , 1, txt, 0xFFFF , 0x0000, 1);
  7221  001F62  0E01               	movlw	1
  7222  001F64  6E39               	movwf	drawtext@y,c
  7223  001F66  C04E  F03A         	movff	_txt,drawtext@_text
  7224  001F6A  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  7225  001F6E  0EFF               	movlw	255
  7226  001F70  6E3D               	movwf	drawtext@color+1,c
  7227  001F72  683C               	setf	drawtext@color,c
  7228  001F74  0E00               	movlw	0
  7229  001F76  6E3F               	movwf	drawtext@bg+1,c
  7230  001F78  0E00               	movlw	0
  7231  001F7A  6E3E               	movwf	drawtext@bg,c
  7232  001F7C  0E01               	movlw	1
  7233  001F7E  6E40               	movwf	drawtext@size,c
  7234  001F80  0E01               	movlw	1
  7235  001F82  EC92  F00D         	call	_drawtext
  7236                           
  7237                           ;Setup_Heater.c: 99: strcpy(txt, "  Heater\0 ");
  7238  001F86  C04E  F011         	movff	_txt,strcpy@to
  7239  001F8A  C04F  F012         	movff	_txt+1,strcpy@to+1
  7240  001F8E  0E9F               	movlw	low STR_30
  7241  001F90  6E13               	movwf	strcpy@from,c
  7242  001F92  0EFF               	movlw	high STR_30
  7243  001F94  6E14               	movwf	strcpy@from+1,c
  7244  001F96  EC54  F01C         	call	_strcpy	;wreg free
  7245                           
  7246                           ;Setup_Heater.c: 100: drawtext(1 , 1+25, txt, 0xFFE0, 0x0000, 2);
  7247  001F9A  0E1A               	movlw	26
  7248  001F9C  6E39               	movwf	drawtext@y,c
  7249  001F9E  C04E  F03A         	movff	_txt,drawtext@_text
  7250  001FA2  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  7251  001FA6  0EFF               	movlw	255
  7252  001FA8  6E3D               	movwf	drawtext@color+1,c
  7253  001FAA  0EE0               	movlw	224
  7254  001FAC  6E3C               	movwf	drawtext@color,c
  7255  001FAE  0E00               	movlw	0
  7256  001FB0  6E3F               	movwf	drawtext@bg+1,c
  7257  001FB2  0E00               	movlw	0
  7258  001FB4  6E3E               	movwf	drawtext@bg,c
  7259  001FB6  0E02               	movlw	2
  7260  001FB8  6E40               	movwf	drawtext@size,c
  7261  001FBA  0E01               	movlw	1
  7262  001FBC  EC92  F00D         	call	_drawtext
  7263                           
  7264                           ;Setup_Heater.c: 101: strcpy(txt, "  Setup\0 ");
  7265  001FC0  C04E  F011         	movff	_txt,strcpy@to
  7266  001FC4  C04F  F012         	movff	_txt+1,strcpy@to+1
  7267  001FC8  0EB5               	movlw	low STR_31
  7268  001FCA  6E13               	movwf	strcpy@from,c
  7269  001FCC  0EFF               	movlw	high STR_31
  7270  001FCE  6E14               	movwf	strcpy@from+1,c
  7271  001FD0  EC54  F01C         	call	_strcpy	;wreg free
  7272                           
  7273                           ;Setup_Heater.c: 102: drawtext(1 , 1+40, txt, 0xFFE0, 0x0000, 2);
  7274  001FD4  0E29               	movlw	41
  7275  001FD6  6E39               	movwf	drawtext@y,c
  7276  001FD8  C04E  F03A         	movff	_txt,drawtext@_text
  7277  001FDC  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  7278  001FE0  0EFF               	movlw	255
  7279  001FE2  6E3D               	movwf	drawtext@color+1,c
  7280  001FE4  0EE0               	movlw	224
  7281  001FE6  6E3C               	movwf	drawtext@color,c
  7282  001FE8  0E00               	movlw	0
  7283  001FEA  6E3F               	movwf	drawtext@bg+1,c
  7284  001FEC  0E00               	movlw	0
  7285  001FEE  6E3E               	movwf	drawtext@bg,c
  7286  001FF0  0E02               	movlw	2
  7287  001FF2  6E40               	movwf	drawtext@size,c
  7288  001FF4  0E01               	movlw	1
  7289  001FF6  EC92  F00D         	call	_drawtext
  7290                           
  7291                           ;Setup_Heater.c: 103: strcpy(txt, "Set Heater Temp");
  7292  001FFA  C04E  F011         	movff	_txt,strcpy@to
  7293  001FFE  C04F  F012         	movff	_txt+1,strcpy@to+1
  7294  002002  0E40               	movlw	low STR_32
  7295  002004  6E13               	movwf	strcpy@from,c
  7296  002006  0EFF               	movlw	high STR_32
  7297  002008  6E14               	movwf	strcpy@from+1,c
  7298  00200A  EC54  F01C         	call	_strcpy	;wreg free
  7299                           
  7300                           ;Setup_Heater.c: 104: drawtext(15 , 60, txt, 0x07FF , 0x0000, 1);
  7301  00200E  0E3C               	movlw	60
  7302  002010  6E39               	movwf	drawtext@y,c
  7303  002012  C04E  F03A         	movff	_txt,drawtext@_text
  7304  002016  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  7305  00201A  0E07               	movlw	7
  7306  00201C  6E3D               	movwf	drawtext@color+1,c
  7307  00201E  683C               	setf	drawtext@color,c
  7308  002020  0E00               	movlw	0
  7309  002022  6E3F               	movwf	drawtext@bg+1,c
  7310  002024  0E00               	movlw	0
  7311  002026  6E3E               	movwf	drawtext@bg,c
  7312  002028  0E01               	movlw	1
  7313  00202A  6E40               	movwf	drawtext@size,c
  7314  00202C  0E0F               	movlw	15
  7315  00202E  EC92  F00D         	call	_drawtext
  7316  002032  0012               	return		;funcret
  7317  002034                     __end_of_Initialize_Setup_Heater_Screen:
  7318                           	opt stack 0
  7319                           tblptru	equ	0xFF8
  7320                           tblptrh	equ	0xFF7
  7321                           tblptrl	equ	0xFF6
  7322                           tablat	equ	0xFF5
  7323                           postinc0	equ	0xFEE
  7324                           wreg	equ	0xFE8
  7325                           postdec1	equ	0xFE5
  7326                           fsr1l	equ	0xFE1
  7327                           status	equ	0xFD8
  7328                           
  7329 ;; *************** function _Increase_Heater_Temp *****************
  7330 ;; Defined at:
  7331 ;;		line 55 in file "Setup_Heater.c"
  7332 ;; Parameters:    Size  Location     Type
  7333 ;;		None
  7334 ;; Auto vars:     Size  Location     Type
  7335 ;;		None
  7336 ;; Return value:  Size  Location     Type
  7337 ;;		None               void
  7338 ;; Registers used:
  7339 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7340 ;; Tracked objects:
  7341 ;;		On entry : 0/0
  7342 ;;		On exit  : 0/0
  7343 ;;		Unchanged: 0/0
  7344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7345 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7346 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7347 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7348 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7349 ;;Total ram usage:        0 bytes
  7350 ;; Hardware stack levels used:    1
  7351 ;; Hardware stack levels required when called:   11
  7352 ;; This function calls:
  7353 ;;		_Update_Setup_Heater_Screen
  7354 ;; This function is called by:
  7355 ;;		_Do_Setup_Heater_Temp
  7356 ;; This function uses a non-reentrant model
  7357 ;;
  7358                           
  7359                           	psect	text30
  7360  003BCE                     __ptext30:
  7361                           	opt stack 0
  7362  003BCE                     _Increase_Heater_Temp:
  7363                           	opt stack 18
  7364                           
  7365                           ;Setup_Heater.c: 59: setup_heater_set_temp++;
  7366                           
  7367                           ;incstack = 0
  7368  003BCE  2A68               	incf	_setup_heater_set_temp,f,c
  7369                           
  7370                           ;Setup_Heater.c: 60: if (setup_heater_set_temp > 110) setup_heater_set_temp = 110;
  7371  003BD0  0E6E               	movlw	110
  7372  003BD2  6468               	cpfsgt	_setup_heater_set_temp,c
  7373  003BD4  D003               	goto	l9323
  7374  003BD6  0E6E               	movlw	110
  7375  003BD8  6E68               	movwf	_setup_heater_set_temp,c
  7376  003BDA  D000               	goto	l9323
  7377  003BDC                     l9323:
  7378                           
  7379                           ;Setup_Heater.c: 61: Update_Setup_Heater_Screen();
  7380  003BDC  ECA4  F014         	call	_Update_Setup_Heater_Screen	;wreg free
  7381  003BE0  0012               	return		;funcret
  7382  003BE2                     __end_of_Increase_Heater_Temp:
  7383                           	opt stack 0
  7384                           tblptru	equ	0xFF8
  7385                           tblptrh	equ	0xFF7
  7386                           tblptrl	equ	0xFF6
  7387                           tablat	equ	0xFF5
  7388                           postinc0	equ	0xFEE
  7389                           wreg	equ	0xFE8
  7390                           postdec1	equ	0xFE5
  7391                           fsr1l	equ	0xFE1
  7392                           status	equ	0xFD8
  7393                           
  7394 ;; *************** function _Exit_Setup_Heater_Temp *****************
  7395 ;; Defined at:
  7396 ;;		line 77 in file "Setup_Heater.c"
  7397 ;; Parameters:    Size  Location     Type
  7398 ;;		None
  7399 ;; Auto vars:     Size  Location     Type
  7400 ;;		None
  7401 ;; Return value:  Size  Location     Type
  7402 ;;		None               void
  7403 ;; Registers used:
  7404 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7405 ;; Tracked objects:
  7406 ;;		On entry : 0/0
  7407 ;;		On exit  : 0/0
  7408 ;;		Unchanged: 0/0
  7409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7410 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7411 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7412 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7413 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7414 ;;Total ram usage:        0 bytes
  7415 ;; Hardware stack levels used:    1
  7416 ;; Hardware stack levels required when called:   11
  7417 ;; This function calls:
  7418 ;;		_DS3231_Read_Time
  7419 ;;		_Initialize_Screen
  7420 ;; This function is called by:
  7421 ;;		_Do_Setup_Heater_Temp
  7422 ;; This function uses a non-reentrant model
  7423 ;;
  7424                           
  7425                           	psect	text31
  7426  003CD0                     __ptext31:
  7427                           	opt stack 0
  7428  003CD0                     _Exit_Setup_Heater_Temp:
  7429                           	opt stack 18
  7430                           
  7431                           ;Setup_Heater.c: 79: DS3231_Read_Time();
  7432                           
  7433                           ;incstack = 0
  7434  003CD0  EC2F  F019         	call	_DS3231_Read_Time	;wreg free
  7435                           
  7436                           ;Setup_Heater.c: 80: Initialize_Screen();
  7437  003CD4  EC45  F003         	call	_Initialize_Screen	;wreg free
  7438                           
  7439                           ;Setup_Heater.c: 81: In_Heater_Temp_Setup = 0;
  7440  003CD8  0E00               	movlw	0
  7441  003CDA  0100               	movlb	0	; () banked
  7442  003CDC  6FFA               	movwf	_In_Heater_Temp_Setup& (0+255),b
  7443                           
  7444                           ; BSR set to: 0
  7445  003CDE  0012               	return		;funcret
  7446  003CE0                     __end_of_Exit_Setup_Heater_Temp:
  7447                           	opt stack 0
  7448                           tblptru	equ	0xFF8
  7449                           tblptrh	equ	0xFF7
  7450                           tblptrl	equ	0xFF6
  7451                           tablat	equ	0xFF5
  7452                           postinc0	equ	0xFEE
  7453                           wreg	equ	0xFE8
  7454                           postdec1	equ	0xFE5
  7455                           fsr1l	equ	0xFE1
  7456                           status	equ	0xFD8
  7457                           
  7458 ;; *************** function _Do_Save_New_Heater_Temp *****************
  7459 ;; Defined at:
  7460 ;;		line 84 in file "Setup_Heater.c"
  7461 ;; Parameters:    Size  Location     Type
  7462 ;;		None
  7463 ;; Auto vars:     Size  Location     Type
  7464 ;;		None
  7465 ;; Return value:  Size  Location     Type
  7466 ;;		None               void
  7467 ;; Registers used:
  7468 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7469 ;; Tracked objects:
  7470 ;;		On entry : 0/0
  7471 ;;		On exit  : 0/0
  7472 ;;		Unchanged: 0/0
  7473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7474 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7475 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7476 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7477 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7478 ;;Total ram usage:        0 bytes
  7479 ;; Hardware stack levels used:    1
  7480 ;; Hardware stack levels required when called:   11
  7481 ;; This function calls:
  7482 ;;		_DS3231_Read_Time
  7483 ;;		_Initialize_Screen
  7484 ;; This function is called by:
  7485 ;;		_Do_Setup_Heater_Temp
  7486 ;; This function uses a non-reentrant model
  7487 ;;
  7488                           
  7489                           	psect	text32
  7490  003BE2                     __ptext32:
  7491                           	opt stack 0
  7492  003BE2                     _Do_Save_New_Heater_Temp:
  7493                           	opt stack 18
  7494                           
  7495                           ;Setup_Heater.c: 86: heater_set_temp = setup_heater_set_temp;
  7496                           
  7497                           ; BSR set to: 0
  7498                           ;incstack = 0
  7499  003BE2  C068  F06F         	movff	_setup_heater_set_temp,_heater_set_temp
  7500                           
  7501                           ;Setup_Heater.c: 87: DS3231_Read_Time();
  7502  003BE6  EC2F  F019         	call	_DS3231_Read_Time	;wreg free
  7503                           
  7504                           ;Setup_Heater.c: 88: Initialize_Screen();
  7505  003BEA  EC45  F003         	call	_Initialize_Screen	;wreg free
  7506                           
  7507                           ;Setup_Heater.c: 89: In_Heater_Temp_Setup = 0;
  7508  003BEE  0E00               	movlw	0
  7509  003BF0  0100               	movlb	0	; () banked
  7510  003BF2  6FFA               	movwf	_In_Heater_Temp_Setup& (0+255),b
  7511                           
  7512                           ; BSR set to: 0
  7513  003BF4  0012               	return		;funcret
  7514  003BF6                     __end_of_Do_Save_New_Heater_Temp:
  7515                           	opt stack 0
  7516                           tblptru	equ	0xFF8
  7517                           tblptrh	equ	0xFF7
  7518                           tblptrl	equ	0xFF6
  7519                           tablat	equ	0xFF5
  7520                           postinc0	equ	0xFEE
  7521                           wreg	equ	0xFE8
  7522                           postdec1	equ	0xFE5
  7523                           fsr1l	equ	0xFE1
  7524                           status	equ	0xFD8
  7525                           
  7526 ;; *************** function _Decrease_Heater_Temp *****************
  7527 ;; Defined at:
  7528 ;;		line 65 in file "Setup_Heater.c"
  7529 ;; Parameters:    Size  Location     Type
  7530 ;;		None
  7531 ;; Auto vars:     Size  Location     Type
  7532 ;;		None
  7533 ;; Return value:  Size  Location     Type
  7534 ;;		None               void
  7535 ;; Registers used:
  7536 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7537 ;; Tracked objects:
  7538 ;;		On entry : 0/0
  7539 ;;		On exit  : 0/0
  7540 ;;		Unchanged: 0/0
  7541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7542 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7543 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7544 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7545 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7546 ;;Total ram usage:        0 bytes
  7547 ;; Hardware stack levels used:    1
  7548 ;; Hardware stack levels required when called:   11
  7549 ;; This function calls:
  7550 ;;		_Update_Setup_Heater_Screen
  7551 ;; This function is called by:
  7552 ;;		_Do_Setup_Heater_Temp
  7553 ;; This function uses a non-reentrant model
  7554 ;;
  7555                           
  7556                           	psect	text33
  7557  003BF6                     __ptext33:
  7558                           	opt stack 0
  7559  003BF6                     _Decrease_Heater_Temp:
  7560                           	opt stack 18
  7561                           
  7562                           ;Setup_Heater.c: 69: --setup_heater_set_temp;
  7563                           
  7564                           ; BSR set to: 0
  7565                           ;incstack = 0
  7566  003BF6  0668               	decf	_setup_heater_set_temp,f,c
  7567                           
  7568                           ;Setup_Heater.c: 70: if (setup_heater_set_temp < 50) setup_heater_set_temp = 50;
  7569  003BF8  0E32               	movlw	50
  7570  003BFA  6068               	cpfslt	_setup_heater_set_temp,c
  7571  003BFC  D003               	goto	l9315
  7572  003BFE  0E32               	movlw	50
  7573  003C00  6E68               	movwf	_setup_heater_set_temp,c
  7574  003C02  D000               	goto	l9315
  7575  003C04                     l9315:
  7576                           
  7577                           ;Setup_Heater.c: 72: Update_Setup_Heater_Screen();
  7578  003C04  ECA4  F014         	call	_Update_Setup_Heater_Screen	;wreg free
  7579  003C08  0012               	return		;funcret
  7580  003C0A                     __end_of_Decrease_Heater_Temp:
  7581                           	opt stack 0
  7582                           tblptru	equ	0xFF8
  7583                           tblptrh	equ	0xFF7
  7584                           tblptrl	equ	0xFF6
  7585                           tablat	equ	0xFF5
  7586                           postinc0	equ	0xFEE
  7587                           wreg	equ	0xFE8
  7588                           postdec1	equ	0xFE5
  7589                           fsr1l	equ	0xFE1
  7590                           status	equ	0xFD8
  7591                           
  7592 ;; *************** function _Update_Setup_Heater_Screen *****************
  7593 ;; Defined at:
  7594 ;;		line 107 in file "Setup_Heater.c"
  7595 ;; Parameters:    Size  Location     Type
  7596 ;;		None
  7597 ;; Auto vars:     Size  Location     Type
  7598 ;;  dc_char3        1   10[BANK1 ] unsigned char 
  7599 ;;  dc_char2        1    9[BANK1 ] unsigned char 
  7600 ;;  dc_char1        1    8[BANK1 ] unsigned char 
  7601 ;; Return value:  Size  Location     Type
  7602 ;;		None               void
  7603 ;; Registers used:
  7604 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7605 ;; Tracked objects:
  7606 ;;		On entry : 0/0
  7607 ;;		On exit  : 0/0
  7608 ;;		Unchanged: 0/0
  7609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7610 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7611 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7612 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7613 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7614 ;;Total ram usage:        3 bytes
  7615 ;; Hardware stack levels used:    1
  7616 ;; Hardware stack levels required when called:   10
  7617 ;; This function calls:
  7618 ;;		___awdiv
  7619 ;;		___awmod
  7620 ;;		_drawtext
  7621 ;; This function is called by:
  7622 ;;		_Do_Setup_Heater_Temp
  7623 ;;		_Increase_Heater_Temp
  7624 ;;		_Decrease_Heater_Temp
  7625 ;; This function uses a non-reentrant model
  7626 ;;
  7627                           
  7628                           	psect	text34
  7629  002948                     __ptext34:
  7630                           	opt stack 0
  7631  002948                     _Update_Setup_Heater_Screen:
  7632                           	opt stack 19
  7633                           
  7634                           ;Setup_Heater.c: 109: char dc_char1 = setup_heater_set_temp / 100;
  7635                           
  7636                           ;incstack = 0
  7637  002948  C068  F13C         	movff	_setup_heater_set_temp,___awdiv@dividend
  7638  00294C  0101               	movlb	1	; () banked
  7639  00294E  6B3D               	clrf	(___awdiv@dividend+1)& (0+255),b
  7640  002950  0E00               	movlw	0
  7641  002952  0101               	movlb	1	; () banked
  7642  002954  6F3F               	movwf	(___awdiv@divisor+1)& (0+255),b
  7643  002956  0E64               	movlw	100
  7644  002958  6F3E               	movwf	___awdiv@divisor& (0+255),b
  7645  00295A  EC5E  F012         	call	___awdiv	;wreg free
  7646  00295E  0101               	movlb	1	; () banked
  7647  002960  513C               	movf	?___awdiv& (0+255),w,b
  7648  002962  0101               	movlb	1	; () banked
  7649  002964  6F44               	movwf	Update_Setup_Heater_Screen@dc_char1& (0+255),b
  7650                           
  7651                           ;Setup_Heater.c: 110: char dc_char2 = (setup_heater_set_temp % 100) / 10;
  7652  002966  0E00               	movlw	0
  7653  002968  6E3E               	movwf	___awmod@divisor+1,c
  7654  00296A  0E64               	movlw	100
  7655  00296C  6E3D               	movwf	___awmod@divisor,c
  7656  00296E  C068  F03B         	movff	_setup_heater_set_temp,___awmod@dividend
  7657  002972  6A3C               	clrf	___awmod@dividend+1,c
  7658  002974  EC36  F017         	call	___awmod	;wreg free
  7659  002978  C03B  F13C         	movff	?___awmod,___awdiv@dividend
  7660  00297C  C03C  F13D         	movff	?___awmod+1,___awdiv@dividend+1
  7661  002980  0E00               	movlw	0
  7662  002982  0101               	movlb	1	; () banked
  7663  002984  6F3F               	movwf	(___awdiv@divisor+1)& (0+255),b
  7664  002986  0E0A               	movlw	10
  7665  002988  6F3E               	movwf	___awdiv@divisor& (0+255),b
  7666  00298A  EC5E  F012         	call	___awdiv	;wreg free
  7667  00298E  0101               	movlb	1	; () banked
  7668  002990  513C               	movf	?___awdiv& (0+255),w,b
  7669  002992  0101               	movlb	1	; () banked
  7670  002994  6F45               	movwf	Update_Setup_Heater_Screen@dc_char2& (0+255),b
  7671                           
  7672                           ;Setup_Heater.c: 111: char dc_char3 = setup_heater_set_temp % 10;
  7673  002996  C068  F03B         	movff	_setup_heater_set_temp,___awmod@dividend
  7674  00299A  6A3C               	clrf	___awmod@dividend+1,c
  7675  00299C  0E00               	movlw	0
  7676  00299E  6E3E               	movwf	___awmod@divisor+1,c
  7677  0029A0  0E0A               	movlw	10
  7678  0029A2  6E3D               	movwf	___awmod@divisor,c
  7679  0029A4  EC36  F017         	call	___awmod	;wreg free
  7680  0029A8  503B               	movf	?___awmod,w,c
  7681  0029AA  0101               	movlb	1	; () banked
  7682  0029AC  6F46               	movwf	Update_Setup_Heater_Screen@dc_char3& (0+255),b
  7683                           
  7684                           ; BSR set to: 1
  7685                           ;Setup_Heater.c: 112: setup_heater_set_text[0] = dc_char1 + '0';
  7686  0029AE  0101               	movlb	1	; () banked
  7687  0029B0  5144               	movf	Update_Setup_Heater_Screen@dc_char1& (0+255),w,b
  7688  0029B2  0F30               	addlw	48
  7689  0029B4  0100               	movlb	0	; () banked
  7690  0029B6  6FC8               	movwf	_setup_heater_set_text& (0+255),b
  7691                           
  7692                           ; BSR set to: 0
  7693                           ;Setup_Heater.c: 113: setup_heater_set_text[1] = dc_char2 + '0';
  7694  0029B8  0101               	movlb	1	; () banked
  7695  0029BA  5145               	movf	Update_Setup_Heater_Screen@dc_char2& (0+255),w,b
  7696  0029BC  0F30               	addlw	48
  7697  0029BE  0100               	movlb	0	; () banked
  7698  0029C0  6FC9               	movwf	(_setup_heater_set_text+1)& (0+255),b
  7699                           
  7700                           ; BSR set to: 0
  7701                           ;Setup_Heater.c: 114: setup_heater_set_text[2] = dc_char3 + '0';
  7702  0029C2  0101               	movlb	1	; () banked
  7703  0029C4  5146               	movf	Update_Setup_Heater_Screen@dc_char3& (0+255),w,b
  7704  0029C6  0F30               	addlw	48
  7705  0029C8  0100               	movlb	0	; () banked
  7706  0029CA  6FCA               	movwf	(_setup_heater_set_text+2)& (0+255),b
  7707                           
  7708                           ; BSR set to: 0
  7709                           ;Setup_Heater.c: 115: drawtext(40, 74 ,setup_heater_set_text, 0xF800, 0x0000, 2);
  7710  0029CC  0E4A               	movlw	74
  7711  0029CE  6E39               	movwf	drawtext@y,c
  7712  0029D0  0EC8               	movlw	low _setup_heater_set_text
  7713  0029D2  6E3A               	movwf	drawtext@_text,c
  7714  0029D4  0E00               	movlw	high _setup_heater_set_text
  7715  0029D6  6E3B               	movwf	drawtext@_text+1,c
  7716  0029D8  0EF8               	movlw	248
  7717  0029DA  6E3D               	movwf	drawtext@color+1,c
  7718  0029DC  0E00               	movlw	0
  7719  0029DE  6E3C               	movwf	drawtext@color,c
  7720  0029E0  0E00               	movlw	0
  7721  0029E2  6E3F               	movwf	drawtext@bg+1,c
  7722  0029E4  0E00               	movlw	0
  7723  0029E6  6E3E               	movwf	drawtext@bg,c
  7724  0029E8  0E02               	movlw	2
  7725  0029EA  6E40               	movwf	drawtext@size,c
  7726  0029EC  0E28               	movlw	40
  7727  0029EE  EC92  F00D         	call	_drawtext
  7728  0029F2  0012               	return		;funcret
  7729  0029F4                     __end_of_Update_Setup_Heater_Screen:
  7730                           	opt stack 0
  7731                           tblptru	equ	0xFF8
  7732                           tblptrh	equ	0xFF7
  7733                           tblptrl	equ	0xFF6
  7734                           tablat	equ	0xFF5
  7735                           postinc0	equ	0xFEE
  7736                           wreg	equ	0xFE8
  7737                           postdec1	equ	0xFE5
  7738                           fsr1l	equ	0xFE1
  7739                           status	equ	0xFD8
  7740                           
  7741 ;; *************** function _Do_Setup_Alarm_Time *****************
  7742 ;; Defined at:
  7743 ;;		line 24 in file "Setup_Alarm.c"
  7744 ;; Parameters:    Size  Location     Type
  7745 ;;		None
  7746 ;; Auto vars:     Size  Location     Type
  7747 ;;		None
  7748 ;; Return value:  Size  Location     Type
  7749 ;;                  2  807[None  ] int 
  7750 ;; Registers used:
  7751 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7752 ;; Tracked objects:
  7753 ;;		On entry : 0/0
  7754 ;;		On exit  : 0/0
  7755 ;;		Unchanged: 0/0
  7756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7757 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7758 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7759 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7760 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7761 ;;Total ram usage:        0 bytes
  7762 ;; Hardware stack levels used:    1
  7763 ;; Hardware stack levels required when called:   12
  7764 ;; This function calls:
  7765 ;;		_DS3231_Read_Alarm_Time
  7766 ;;		_Decrease_Alarm_Time
  7767 ;;		_Do_Beep_Bad
  7768 ;;		_Do_Beep_Good
  7769 ;;		_Do_Save_New_Alarm_Time
  7770 ;;		_Exit_Setup_Alarm_Time
  7771 ;;		_Go_Next_Alarm_Field
  7772 ;;		_Go_Prev_Alarm_Field
  7773 ;;		_Increase_Alarm_Time
  7774 ;;		_Initialize_Setup_Alarm_Time_Screen
  7775 ;;		_Update_Setup_Alarm_Time_Screen
  7776 ;;		_bcd_2_dec
  7777 ;;		_check_for_button_input
  7778 ;; This function is called by:
  7779 ;;		_main
  7780 ;; This function uses a non-reentrant model
  7781 ;;
  7782                           
  7783                           	psect	text35
  7784  00271C                     __ptext35:
  7785                           	opt stack 0
  7786  00271C                     _Do_Setup_Alarm_Time:
  7787                           	opt stack 18
  7788                           
  7789                           ;Setup_Alarm.c: 26: Select_Alarm_Field = 0;
  7790                           
  7791                           ;incstack = 0
  7792  00271C  0E00               	movlw	0
  7793  00271E  6E53               	movwf	_Select_Alarm_Field,c
  7794                           
  7795                           ;Setup_Alarm.c: 27: In_Alarm_Time_Setup = 1;
  7796  002720  0E01               	movlw	1
  7797  002722  0100               	movlb	0	; () banked
  7798  002724  6FF9               	movwf	_In_Alarm_Time_Setup& (0+255),b
  7799                           
  7800                           ; BSR set to: 0
  7801                           ;Setup_Alarm.c: 28: DS3231_Read_Alarm_Time();
  7802  002726  EC8A  F01A         	call	_DS3231_Read_Alarm_Time	;wreg free
  7803                           
  7804                           ;Setup_Alarm.c: 29: alarm_second = bcd_2_dec(alarm_second);
  7805  00272A  5059               	movf	_alarm_second,w,c
  7806  00272C  EC9D  F01C         	call	_bcd_2_dec
  7807  002730  6E59               	movwf	_alarm_second,c
  7808                           
  7809                           ;Setup_Alarm.c: 30: alarm_minute = bcd_2_dec(alarm_minute);
  7810  002732  5058               	movf	_alarm_minute,w,c
  7811  002734  EC9D  F01C         	call	_bcd_2_dec
  7812  002738  6E58               	movwf	_alarm_minute,c
  7813                           
  7814                           ;Setup_Alarm.c: 31: alarm_hour = bcd_2_dec(alarm_hour);
  7815  00273A  5057               	movf	_alarm_hour,w,c
  7816  00273C  EC9D  F01C         	call	_bcd_2_dec
  7817  002740  6E57               	movwf	_alarm_hour,c
  7818                           
  7819                           ;Setup_Alarm.c: 32: setup_alarm_second = alarm_second;
  7820  002742  C059  F066         	movff	_alarm_second,_setup_alarm_second
  7821                           
  7822                           ;Setup_Alarm.c: 33: setup_alarm_minute = alarm_minute;
  7823  002746  C058  F065         	movff	_alarm_minute,_setup_alarm_minute
  7824                           
  7825                           ;Setup_Alarm.c: 34: setup_alarm_hour = alarm_hour;
  7826  00274A  C057  F064         	movff	_alarm_hour,_setup_alarm_hour
  7827                           
  7828                           ;Setup_Alarm.c: 35: Initialize_Setup_Alarm_Time_Screen();
  7829  00274E  EC9F  F00E         	call	_Initialize_Setup_Alarm_Time_Screen	;wreg free
  7830                           
  7831                           ;Setup_Alarm.c: 36: Update_Setup_Alarm_Time_Screen();
  7832  002752  EC93  F010         	call	_Update_Setup_Alarm_Time_Screen	;wreg free
  7833                           
  7834                           ;Setup_Alarm.c: 37: while (In_Alarm_Time_Setup == 1)
  7835  002756  D03C               	goto	l9873
  7836  002758                     l9837:
  7837                           
  7838                           ;Setup_Alarm.c: 38: {
  7839                           ;Setup_Alarm.c: 39: if (check_for_button_input() == 1)
  7840  002758  EC20  F016         	call	_check_for_button_input	;wreg free
  7841  00275C  06E8               	decf	wreg,f,c
  7842  00275E  A4D8               	btfss	status,2,c
  7843  002760  D037               	goto	l9873
  7844                           
  7845                           ;Setup_Alarm.c: 40: {
  7846                           ;Setup_Alarm.c: 41: if (found >= 3 && found <= 8)
  7847  002762  0E02               	movlw	2
  7848  002764  645E               	cpfsgt	_found,c
  7849  002766  D031               	goto	l9871
  7850  002768  0E09               	movlw	9
  7851  00276A  605E               	cpfslt	_found,c
  7852  00276C  D02E               	goto	l9871
  7853                           
  7854                           ;Setup_Alarm.c: 42: {
  7855                           ;Setup_Alarm.c: 43: Do_Beep_Good();
  7856  00276E  ECBA  F01D         	call	_Do_Beep_Good	;wreg free
  7857                           
  7858                           ;Setup_Alarm.c: 44: if (found == 3) Go_Prev_Alarm_Field();
  7859  002772  0E03               	movlw	3
  7860  002774  185E               	xorwf	_found,w,c
  7861  002776  A4D8               	btfss	status,2,c
  7862  002778  D003               	goto	l9849
  7863  00277A  EC96  F01D         	call	_Go_Prev_Alarm_Field	;wreg free
  7864  00277E  D000               	goto	l9849
  7865  002780                     l9849:
  7866                           
  7867                           ;Setup_Alarm.c: 45: if (found == 4) Go_Next_Alarm_Field();
  7868  002780  0E04               	movlw	4
  7869  002782  185E               	xorwf	_found,w,c
  7870  002784  A4D8               	btfss	status,2,c
  7871  002786  D003               	goto	l9853
  7872  002788  ECA2  F01D         	call	_Go_Next_Alarm_Field	;wreg free
  7873  00278C  D000               	goto	l9853
  7874  00278E                     l9853:
  7875                           
  7876                           ;Setup_Alarm.c: 46: if (found == 5) Do_Save_New_Alarm_Time();
  7877  00278E  0E05               	movlw	5
  7878  002790  185E               	xorwf	_found,w,c
  7879  002792  A4D8               	btfss	status,2,c
  7880  002794  D003               	goto	l9857
  7881  002796  ECAE  F01D         	call	_Do_Save_New_Alarm_Time	;wreg free
  7882  00279A  D000               	goto	l9857
  7883  00279C                     l9857:
  7884                           
  7885                           ;Setup_Alarm.c: 47: if (found == 6) Decrease_Alarm_Time();
  7886  00279C  0E06               	movlw	6
  7887  00279E  185E               	xorwf	_found,w,c
  7888  0027A0  A4D8               	btfss	status,2,c
  7889  0027A2  D003               	goto	l9861
  7890  0027A4  ECFB  F01A         	call	_Decrease_Alarm_Time	;wreg free
  7891  0027A8  D000               	goto	l9861
  7892  0027AA                     l9861:
  7893                           
  7894                           ;Setup_Alarm.c: 48: if (found == 7) Increase_Alarm_Time();
  7895  0027AA  0E07               	movlw	7
  7896  0027AC  185E               	xorwf	_found,w,c
  7897  0027AE  A4D8               	btfss	status,2,c
  7898  0027B0  D003               	goto	l9865
  7899  0027B2  EC3C  F01A         	call	_Increase_Alarm_Time	;wreg free
  7900  0027B6  D000               	goto	l9865
  7901  0027B8                     l9865:
  7902                           
  7903                           ;Setup_Alarm.c: 49: if (found == 8) Exit_Setup_Alarm_Time();
  7904  0027B8  0E08               	movlw	8
  7905  0027BA  185E               	xorwf	_found,w,c
  7906  0027BC  A4D8               	btfss	status,2,c
  7907  0027BE  D003               	goto	l9869
  7908  0027C0  EC70  F01E         	call	_Exit_Setup_Alarm_Time	;wreg free
  7909  0027C4  D000               	goto	l9869
  7910  0027C6                     l9869:
  7911                           
  7912                           ;Setup_Alarm.c: 51: found = 0xff;
  7913  0027C6  685E               	setf	_found,c
  7914                           
  7915                           ;Setup_Alarm.c: 52: }
  7916  0027C8  D003               	goto	l9873
  7917  0027CA                     l9871:
  7918                           
  7919                           ;Setup_Alarm.c: 53: else
  7920                           ;Setup_Alarm.c: 54: {
  7921                           ;Setup_Alarm.c: 55: Do_Beep_Bad();
  7922  0027CA  ECC6  F01D         	call	_Do_Beep_Bad	;wreg free
  7923  0027CE  D000               	goto	l9873
  7924  0027D0                     l9873:
  7925  0027D0  0100               	movlb	0	; () banked
  7926  0027D2  05F9               	decf	_In_Alarm_Time_Setup& (0+255),w,b
  7927  0027D4  B4D8               	btfsc	status,2,c
  7928  0027D6  D7C0               	goto	l9837
  7929                           
  7930                           ; BSR set to: 0
  7931                           
  7932                           ; BSR set to: 0
  7933  0027D8  0012               	return		;funcret
  7934  0027DA                     __end_of_Do_Setup_Alarm_Time:
  7935                           	opt stack 0
  7936                           tblptru	equ	0xFF8
  7937                           tblptrh	equ	0xFF7
  7938                           tblptrl	equ	0xFF6
  7939                           tablat	equ	0xFF5
  7940                           postinc0	equ	0xFEE
  7941                           wreg	equ	0xFE8
  7942                           postdec1	equ	0xFE5
  7943                           fsr1l	equ	0xFE1
  7944                           status	equ	0xFD8
  7945                           
  7946 ;; *************** function _check_for_button_input *****************
  7947 ;; Defined at:
  7948 ;;		line 16 in file "Utils.c"
  7949 ;; Parameters:    Size  Location     Type
  7950 ;;		None
  7951 ;; Auto vars:     Size  Location     Type
  7952 ;;  j               2   57[COMRAM] int 
  7953 ;; Return value:  Size  Location     Type
  7954 ;;                  1    wreg      unsigned char 
  7955 ;; Registers used:
  7956 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7957 ;; Tracked objects:
  7958 ;;		On entry : 0/0
  7959 ;;		On exit  : 0/0
  7960 ;;		Unchanged: 0/0
  7961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7962 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7963 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7964 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7965 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7966 ;;Total ram usage:        3 bytes
  7967 ;; Hardware stack levels used:    1
  7968 ;; Hardware stack levels required when called:    5
  7969 ;; This function calls:
  7970 ;;		_printf
  7971 ;; This function is called by:
  7972 ;;		_main
  7973 ;;		_Do_Setup_Time
  7974 ;;		_Do_Setup_Heater_Temp
  7975 ;;		_Do_Setup_Alarm_Time
  7976 ;; This function uses a non-reentrant model
  7977 ;;
  7978                           
  7979                           	psect	text36
  7980  002C40                     __ptext36:
  7981                           	opt stack 0
  7982  002C40                     _check_for_button_input:
  7983                           	opt stack 25
  7984                           
  7985                           ;Utils.c: 18: if (nec_ok == 1)
  7986                           
  7987                           ; BSR set to: 0
  7988                           ;incstack = 0
  7989  002C40  0100               	movlb	0	; () banked
  7990  002C42  05F2               	decf	_nec_ok& (0+255),w,b
  7991  002C44  0100               	movlb	0	; () banked
  7992  002C46  11F3               	iorwf	(_nec_ok+1)& (0+255),w,b
  7993  002C48  A4D8               	btfss	status,2,c
  7994  002C4A  D041               	goto	l678
  7995                           
  7996                           ; BSR set to: 0
  7997                           ;Utils.c: 19: {
  7998                           ;Utils.c: 20: nec_ok = 0;
  7999  002C4C  0E00               	movlw	0
  8000  002C4E  0100               	movlb	0	; () banked
  8001  002C50  6FF3               	movwf	(_nec_ok+1)& (0+255),b
  8002  002C52  0E00               	movlw	0
  8003  002C54  6FF2               	movwf	_nec_ok& (0+255),b
  8004                           
  8005                           ; BSR set to: 0
  8006                           ;Utils.c: 21: printf ("NEC_Code = %x\r\n", Nec_code1);
  8007  002C56  0E50               	movlw	low STR_19
  8008  002C58  6E1D               	movwf	printf@f,c
  8009  002C5A  0EFF               	movlw	high STR_19
  8010  002C5C  6E1E               	movwf	printf@f+1,c
  8011  002C5E  C051  F01F         	movff	_Nec_code1,?_printf+2
  8012  002C62  6A20               	clrf	?_printf+3,c
  8013  002C64  EC05  F005         	call	_printf	;wreg free
  8014                           
  8015                           ;Utils.c: 24: INTCONbits.INT0IE = 1;
  8016  002C68  88F2               	bsf	intcon,4,c	;volatile
  8017                           
  8018                           ;Utils.c: 25: INTCON2bits.INTEDG0 = 0;
  8019  002C6A  9CF1               	bcf	intcon2,6,c	;volatile
  8020                           
  8021                           ;Utils.c: 27: found = 0xff;
  8022  002C6C  685E               	setf	_found,c
  8023                           
  8024                           ;Utils.c: 28: for (int j=0; j< 21; j++)
  8025  002C6E  0E00               	movlw	0
  8026  002C70  6E3B               	movwf	check_for_button_input@j+1,c
  8027  002C72  0E00               	movlw	0
  8028  002C74  6E3A               	movwf	check_for_button_input@j,c
  8029  002C76                     l9105:
  8030  002C76  BE3B               	btfsc	check_for_button_input@j+1,7,c
  8031  002C78  D008               	goto	l9109
  8032  002C7A  503B               	movf	check_for_button_input@j+1,w,c
  8033  002C7C  E11B               	bnz	l9119
  8034  002C7E  0E15               	movlw	21
  8035  002C80  5C3A               	subwf	check_for_button_input@j,w,c
  8036  002C82  B0D8               	btfsc	status,0,c
  8037  002C84  D017               	goto	l9119
  8038  002C86  D001               	goto	l9109
  8039  002C88  D015               	goto	l9119
  8040  002C8A                     l9109:
  8041                           
  8042                           ;Utils.c: 29: {
  8043                           ;Utils.c: 30: if (Nec_code1 == array1[j])
  8044  002C8A  0E1F               	movlw	low _array1
  8045  002C8C  243A               	addwf	check_for_button_input@j,w,c
  8046  002C8E  6ED9               	movwf	fsr2l,c
  8047  002C90  0E01               	movlw	high _array1
  8048  002C92  203B               	addwfc	check_for_button_input@j+1,w,c
  8049  002C94  6EDA               	movwf	fsr2h,c
  8050  002C96  5051               	movf	_Nec_code1,w,c
  8051  002C98  18DE               	xorwf	postinc2,w,c
  8052  002C9A  A4D8               	btfss	status,2,c
  8053  002C9C  D007               	goto	l9115
  8054                           
  8055                           ;Utils.c: 31: {
  8056                           ;Utils.c: 32: found = j;
  8057  002C9E  C03A  F05E         	movff	check_for_button_input@j,_found
  8058                           
  8059                           ;Utils.c: 33: j = 21;
  8060  002CA2  0E00               	movlw	0
  8061  002CA4  6E3B               	movwf	check_for_button_input@j+1,c
  8062  002CA6  0E15               	movlw	21
  8063  002CA8  6E3A               	movwf	check_for_button_input@j,c
  8064  002CAA  D000               	goto	l9115
  8065  002CAC                     l9115:
  8066  002CAC  4A3A               	infsnz	check_for_button_input@j,f,c
  8067  002CAE  2A3B               	incf	check_for_button_input@j+1,f,c
  8068  002CB0  D7E2               	goto	l9105
  8069  002CB2  D000               	goto	l9119
  8070  002CB4                     l9119:
  8071                           
  8072                           ;Utils.c: 34: }
  8073                           ;Utils.c: 35: }
  8074                           ;Utils.c: 37: if (found == 0xff)
  8075  002CB4  285E               	incf	_found,w,c
  8076  002CB6  A4D8               	btfss	status,2,c
  8077  002CB8  D008               	goto	l9129
  8078                           
  8079                           ;Utils.c: 38: {
  8080                           ;Utils.c: 39: printf ("Cannot find button \r\n");
  8081  002CBA  0EC7               	movlw	low STR_20
  8082  002CBC  6E1D               	movwf	printf@f,c
  8083  002CBE  0EFE               	movlw	high STR_20
  8084  002CC0  6E1E               	movwf	printf@f+1,c
  8085  002CC2  EC05  F005         	call	_printf	;wreg free
  8086                           
  8087                           ;Utils.c: 40: return (0);
  8088  002CC6  0E00               	movlw	0
  8089                           
  8090                           ;Utils.c: 41: }
  8091  002CC8  D002               	goto	l678
  8092  002CCA                     l9129:
  8093                           
  8094                           ;Utils.c: 42: else
  8095                           ;Utils.c: 43: {
  8096                           ;Utils.c: 44: return (1);
  8097  002CCA  0E01               	movlw	1
  8098  002CCC  D000               	goto	l678
  8099  002CCE                     l678:
  8100  002CCE  0012               	return		;funcret
  8101  002CD0                     __end_of_check_for_button_input:
  8102                           	opt stack 0
  8103                           tblptru	equ	0xFF8
  8104                           tblptrh	equ	0xFF7
  8105                           tblptrl	equ	0xFF6
  8106                           tablat	equ	0xFF5
  8107                           intcon	equ	0xFF2
  8108                           intcon2	equ	0xFF1
  8109                           postinc0	equ	0xFEE
  8110                           wreg	equ	0xFE8
  8111                           postdec1	equ	0xFE5
  8112                           fsr1l	equ	0xFE1
  8113                           postinc2	equ	0xFDE
  8114                           fsr2h	equ	0xFDA
  8115                           fsr2l	equ	0xFD9
  8116                           status	equ	0xFD8
  8117                           
  8118 ;; *************** function _bcd_2_dec *****************
  8119 ;; Defined at:
  8120 ;;		line 49 in file "Utils.c"
  8121 ;; Parameters:    Size  Location     Type
  8122 ;;  bcd             1    wreg     unsigned char 
  8123 ;; Auto vars:     Size  Location     Type
  8124 ;;  bcd             1   20[COMRAM] unsigned char 
  8125 ;;  dec             2   18[COMRAM] int 
  8126 ;; Return value:  Size  Location     Type
  8127 ;;                  1    wreg      unsigned char 
  8128 ;; Registers used:
  8129 ;;		wreg, status,2, status,0, prodl, prodh
  8130 ;; Tracked objects:
  8131 ;;		On entry : 0/0
  8132 ;;		On exit  : 0/0
  8133 ;;		Unchanged: 0/0
  8134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8135 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8136 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8137 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8138 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8139 ;;Total ram usage:        5 bytes
  8140 ;; Hardware stack levels used:    1
  8141 ;; Hardware stack levels required when called:    3
  8142 ;; This function calls:
  8143 ;;		Nothing
  8144 ;; This function is called by:
  8145 ;;		_Do_Setup_Time
  8146 ;;		_Do_Setup_Alarm_Time
  8147 ;; This function uses a non-reentrant model
  8148 ;;
  8149                           
  8150                           	psect	text37
  8151  00393A                     __ptext37:
  8152                           	opt stack 0
  8153  00393A                     _bcd_2_dec:
  8154                           	opt stack 26
  8155                           
  8156                           ;incstack = 0
  8157                           ;bcd_2_dec@bcd stored from wreg
  8158  00393A  6E15               	movwf	bcd_2_dec@bcd,c
  8159                           
  8160                           ;Utils.c: 51: int dec;
  8161                           ;Utils.c: 52: dec = ((bcd>> 4) * 10) + (bcd & 0x0f);
  8162  00393C  C015  F011         	movff	bcd_2_dec@bcd,??_bcd_2_dec
  8163  003940  0E0F               	movlw	15
  8164  003942  1611               	andwf	??_bcd_2_dec,f,c
  8165  003944  C015  F012         	movff	bcd_2_dec@bcd,??_bcd_2_dec+1
  8166  003948  3A12               	swapf	??_bcd_2_dec+1,f,c
  8167  00394A  0E0F               	movlw	15
  8168  00394C  1612               	andwf	??_bcd_2_dec+1,f,c
  8169  00394E  5012               	movf	??_bcd_2_dec+1,w,c
  8170  003950  0D0A               	mullw	10
  8171  003952  5011               	movf	??_bcd_2_dec,w,c
  8172  003954  24F3               	addwf	prodl,w,c
  8173  003956  6E13               	movwf	bcd_2_dec@dec,c
  8174  003958  0E00               	movlw	0
  8175  00395A  20F4               	addwfc	prodh,w,c
  8176  00395C  6E14               	movwf	bcd_2_dec@dec+1,c
  8177                           
  8178                           ;Utils.c: 53: return dec;
  8179  00395E  5013               	movf	bcd_2_dec@dec,w,c
  8180  003960  D000               	goto	l682
  8181  003962                     l682:
  8182  003962  0012               	return		;funcret
  8183  003964                     __end_of_bcd_2_dec:
  8184                           	opt stack 0
  8185                           tblptru	equ	0xFF8
  8186                           tblptrh	equ	0xFF7
  8187                           tblptrl	equ	0xFF6
  8188                           tablat	equ	0xFF5
  8189                           prodh	equ	0xFF4
  8190                           prodl	equ	0xFF3
  8191                           intcon	equ	0xFF2
  8192                           intcon2	equ	0xFF1
  8193                           postinc0	equ	0xFEE
  8194                           wreg	equ	0xFE8
  8195                           postdec1	equ	0xFE5
  8196                           fsr1l	equ	0xFE1
  8197                           postinc2	equ	0xFDE
  8198                           fsr2h	equ	0xFDA
  8199                           fsr2l	equ	0xFD9
  8200                           status	equ	0xFD8
  8201                           
  8202 ;; *************** function _Initialize_Setup_Alarm_Time_Screen *****************
  8203 ;; Defined at:
  8204 ;;		line 149 in file "Setup_Alarm.c"
  8205 ;; Parameters:    Size  Location     Type
  8206 ;;		None
  8207 ;; Auto vars:     Size  Location     Type
  8208 ;;		None
  8209 ;; Return value:  Size  Location     Type
  8210 ;;		None               void
  8211 ;; Registers used:
  8212 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8213 ;; Tracked objects:
  8214 ;;		On entry : 0/0
  8215 ;;		On exit  : 0/0
  8216 ;;		Unchanged: 0/0
  8217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8219 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8220 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8221 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8222 ;;Total ram usage:        0 bytes
  8223 ;; Hardware stack levels used:    1
  8224 ;; Hardware stack levels required when called:   10
  8225 ;; This function calls:
  8226 ;;		_drawtext
  8227 ;;		_fillRect
  8228 ;;		_fillScreen
  8229 ;;		_strcpy
  8230 ;; This function is called by:
  8231 ;;		_Do_Setup_Alarm_Time
  8232 ;; This function uses a non-reentrant model
  8233 ;;
  8234                           
  8235                           	psect	text38
  8236  001D3E                     __ptext38:
  8237                           	opt stack 0
  8238  001D3E                     _Initialize_Setup_Alarm_Time_Screen:
  8239                           	opt stack 19
  8240                           
  8241                           ;Setup_Alarm.c: 151: fillScreen(0x0000);
  8242                           
  8243                           ;incstack = 0
  8244  001D3E  0E00               	movlw	0
  8245  001D40  6E25               	movwf	fillScreen@color+1,c
  8246  001D42  0E00               	movlw	0
  8247  001D44  6E24               	movwf	fillScreen@color,c
  8248  001D46  EC63  F01D         	call	_fillScreen	;wreg free
  8249                           
  8250                           ;Setup_Alarm.c: 153: strcpy(txt, "ECE3301L F'21 Final");
  8251  001D4A  C04E  F011         	movff	_txt,strcpy@to
  8252  001D4E  C04F  F012         	movff	_txt+1,strcpy@to+1
  8253  001D52  0E07               	movlw	low STR_33
  8254  001D54  6E13               	movwf	strcpy@from,c
  8255  001D56  0EFF               	movlw	high STR_33
  8256  001D58  6E14               	movwf	strcpy@from+1,c
  8257  001D5A  EC54  F01C         	call	_strcpy	;wreg free
  8258                           
  8259                           ;Setup_Alarm.c: 154: drawtext(1 , 1, txt, 0xFFFF , 0x0000, 1);
  8260  001D5E  0E01               	movlw	1
  8261  001D60  6E39               	movwf	drawtext@y,c
  8262  001D62  C04E  F03A         	movff	_txt,drawtext@_text
  8263  001D66  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  8264  001D6A  0EFF               	movlw	255
  8265  001D6C  6E3D               	movwf	drawtext@color+1,c
  8266  001D6E  683C               	setf	drawtext@color,c
  8267  001D70  0E00               	movlw	0
  8268  001D72  6E3F               	movwf	drawtext@bg+1,c
  8269  001D74  0E00               	movlw	0
  8270  001D76  6E3E               	movwf	drawtext@bg,c
  8271  001D78  0E01               	movlw	1
  8272  001D7A  6E40               	movwf	drawtext@size,c
  8273  001D7C  0E01               	movlw	1
  8274  001D7E  EC92  F00D         	call	_drawtext
  8275                           
  8276                           ;Setup_Alarm.c: 157: strcpy(txt, "  Alarm");
  8277  001D82  C04E  F011         	movff	_txt,strcpy@to
  8278  001D86  C04F  F012         	movff	_txt+1,strcpy@to+1
  8279  001D8A  0EC8               	movlw	low STR_34
  8280  001D8C  6E13               	movwf	strcpy@from,c
  8281  001D8E  0EFF               	movlw	high STR_34
  8282  001D90  6E14               	movwf	strcpy@from+1,c
  8283  001D92  EC54  F01C         	call	_strcpy	;wreg free
  8284                           
  8285                           ;Setup_Alarm.c: 158: drawtext(1+5 , 1+10, txt, 0xF81F, 0x0000, 2);
  8286  001D96  0E0B               	movlw	11
  8287  001D98  6E39               	movwf	drawtext@y,c
  8288  001D9A  C04E  F03A         	movff	_txt,drawtext@_text
  8289  001D9E  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  8290  001DA2  0EF8               	movlw	248
  8291  001DA4  6E3D               	movwf	drawtext@color+1,c
  8292  001DA6  0E1F               	movlw	31
  8293  001DA8  6E3C               	movwf	drawtext@color,c
  8294  001DAA  0E00               	movlw	0
  8295  001DAC  6E3F               	movwf	drawtext@bg+1,c
  8296  001DAE  0E00               	movlw	0
  8297  001DB0  6E3E               	movwf	drawtext@bg,c
  8298  001DB2  0E02               	movlw	2
  8299  001DB4  6E40               	movwf	drawtext@size,c
  8300  001DB6  0E06               	movlw	6
  8301  001DB8  EC92  F00D         	call	_drawtext
  8302                           
  8303                           ;Setup_Alarm.c: 159: strcpy(txt, "  Setup");
  8304  001DBC  C04E  F011         	movff	_txt,strcpy@to
  8305  001DC0  C04F  F012         	movff	_txt+1,strcpy@to+1
  8306  001DC4  0ED0               	movlw	low STR_35
  8307  001DC6  6E13               	movwf	strcpy@from,c
  8308  001DC8  0EFF               	movlw	high STR_35
  8309  001DCA  6E14               	movwf	strcpy@from+1,c
  8310  001DCC  EC54  F01C         	call	_strcpy	;wreg free
  8311                           
  8312                           ;Setup_Alarm.c: 160: drawtext(1+5 , 1+25, txt, 0xF81F, 0x0000, 2);
  8313  001DD0  0E1A               	movlw	26
  8314  001DD2  6E39               	movwf	drawtext@y,c
  8315  001DD4  C04E  F03A         	movff	_txt,drawtext@_text
  8316  001DD8  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  8317  001DDC  0EF8               	movlw	248
  8318  001DDE  6E3D               	movwf	drawtext@color+1,c
  8319  001DE0  0E1F               	movlw	31
  8320  001DE2  6E3C               	movwf	drawtext@color,c
  8321  001DE4  0E00               	movlw	0
  8322  001DE6  6E3F               	movwf	drawtext@bg+1,c
  8323  001DE8  0E00               	movlw	0
  8324  001DEA  6E3E               	movwf	drawtext@bg,c
  8325  001DEC  0E02               	movlw	2
  8326  001DEE  6E40               	movwf	drawtext@size,c
  8327  001DF0  0E06               	movlw	6
  8328  001DF2  EC92  F00D         	call	_drawtext
  8329                           
  8330                           ;Setup_Alarm.c: 162: strcpy(txt, "Time");
  8331  001DF6  C04E  F011         	movff	_txt,strcpy@to
  8332  001DFA  C04F  F012         	movff	_txt+1,strcpy@to+1
  8333  001DFE  0EB0               	movlw	low (STR_7+6)
  8334  001E00  6E13               	movwf	strcpy@from,c
  8335  001E02  0EFF               	movlw	high (STR_7+6)
  8336  001E04  6E14               	movwf	strcpy@from+1,c
  8337  001E06  EC54  F01C         	call	_strcpy	;wreg free
  8338                           
  8339                           ;Setup_Alarm.c: 163: drawtext(50 , 40 , txt, 0x001F , 0x0000, 1);
  8340  001E0A  0E28               	movlw	40
  8341  001E0C  6E39               	movwf	drawtext@y,c
  8342  001E0E  C04E  F03A         	movff	_txt,drawtext@_text
  8343  001E12  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  8344  001E16  0E00               	movlw	0
  8345  001E18  6E3D               	movwf	drawtext@color+1,c
  8346  001E1A  0E1F               	movlw	31
  8347  001E1C  6E3C               	movwf	drawtext@color,c
  8348  001E1E  0E00               	movlw	0
  8349  001E20  6E3F               	movwf	drawtext@bg+1,c
  8350  001E22  0E00               	movlw	0
  8351  001E24  6E3E               	movwf	drawtext@bg,c
  8352  001E26  0E01               	movlw	1
  8353  001E28  6E40               	movwf	drawtext@size,c
  8354  001E2A  0E32               	movlw	50
  8355  001E2C  EC92  F00D         	call	_drawtext
  8356                           
  8357                           ;Setup_Alarm.c: 164: fillRect(15-1, 52+16, 25,2,0x07FF);
  8358  001E30  0E44               	movlw	68
  8359  001E32  6E23               	movwf	fillRect@y,c
  8360  001E34  0E19               	movlw	25
  8361  001E36  6E24               	movwf	fillRect@w,c
  8362  001E38  0E02               	movlw	2
  8363  001E3A  6E25               	movwf	fillRect@h,c
  8364  001E3C  0E07               	movlw	7
  8365  001E3E  6E27               	movwf	fillRect@color+1,c
  8366  001E40  6826               	setf	fillRect@color,c
  8367  001E42  0E0E               	movlw	14
  8368  001E44  ECD6  F01A         	call	_fillRect
  8369  001E48  0012               	return		;funcret
  8370  001E4A                     __end_of_Initialize_Setup_Alarm_Time_Screen:
  8371                           	opt stack 0
  8372                           tblptru	equ	0xFF8
  8373                           tblptrh	equ	0xFF7
  8374                           tblptrl	equ	0xFF6
  8375                           tablat	equ	0xFF5
  8376                           prodh	equ	0xFF4
  8377                           prodl	equ	0xFF3
  8378                           intcon	equ	0xFF2
  8379                           intcon2	equ	0xFF1
  8380                           postinc0	equ	0xFEE
  8381                           wreg	equ	0xFE8
  8382                           postdec1	equ	0xFE5
  8383                           fsr1l	equ	0xFE1
  8384                           postinc2	equ	0xFDE
  8385                           fsr2h	equ	0xFDA
  8386                           fsr2l	equ	0xFD9
  8387                           status	equ	0xFD8
  8388                           
  8389 ;; *************** function _Increase_Alarm_Time *****************
  8390 ;; Defined at:
  8391 ;;		line 61 in file "Setup_Alarm.c"
  8392 ;; Parameters:    Size  Location     Type
  8393 ;;		None
  8394 ;; Auto vars:     Size  Location     Type
  8395 ;;		None
  8396 ;; Return value:  Size  Location     Type
  8397 ;;		None               void
  8398 ;; Registers used:
  8399 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8400 ;; Tracked objects:
  8401 ;;		On entry : 0/0
  8402 ;;		On exit  : 0/0
  8403 ;;		Unchanged: 0/0
  8404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8405 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8406 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8407 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8408 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8409 ;;Total ram usage:        0 bytes
  8410 ;; Hardware stack levels used:    1
  8411 ;; Hardware stack levels required when called:   11
  8412 ;; This function calls:
  8413 ;;		_Update_Setup_Alarm_Time_Screen
  8414 ;; This function is called by:
  8415 ;;		_Do_Setup_Alarm_Time
  8416 ;; This function uses a non-reentrant model
  8417 ;;
  8418                           
  8419                           	psect	text39
  8420  003478                     __ptext39:
  8421                           	opt stack 0
  8422  003478                     _Increase_Alarm_Time:
  8423                           	opt stack 18
  8424                           
  8425                           ;Setup_Alarm.c: 63: switch (Select_Alarm_Field)
  8426                           
  8427                           ;incstack = 0
  8428  003478  D018               	goto	l9419
  8429  00347A                     l9399:
  8430                           
  8431                           ;Setup_Alarm.c: 66: setup_alarm_hour++;
  8432  00347A  2A64               	incf	_setup_alarm_hour,f,c
  8433                           
  8434                           ;Setup_Alarm.c: 67: if (setup_alarm_hour == 24) setup_alarm_hour = 0;
  8435  00347C  0E18               	movlw	24
  8436  00347E  1864               	xorwf	_setup_alarm_hour,w,c
  8437  003480  A4D8               	btfss	status,2,c
  8438  003482  D01E               	goto	l9421
  8439  003484  0E00               	movlw	0
  8440  003486  6E64               	movwf	_setup_alarm_hour,c
  8441                           
  8442                           ;Setup_Alarm.c: 68: break;
  8443  003488  D01B               	goto	l9421
  8444  00348A                     l9405:
  8445                           
  8446                           ;Setup_Alarm.c: 71: setup_alarm_minute++;
  8447  00348A  2A65               	incf	_setup_alarm_minute,f,c
  8448                           
  8449                           ;Setup_Alarm.c: 72: if (setup_alarm_minute == 60) setup_alarm_minute = 0;
  8450  00348C  0E3C               	movlw	60
  8451  00348E  1865               	xorwf	_setup_alarm_minute,w,c
  8452  003490  A4D8               	btfss	status,2,c
  8453  003492  D016               	goto	l9421
  8454  003494  0E00               	movlw	0
  8455  003496  6E65               	movwf	_setup_alarm_minute,c
  8456                           
  8457                           ;Setup_Alarm.c: 73: break;
  8458  003498  D013               	goto	l9421
  8459  00349A                     l9411:
  8460                           
  8461                           ;Setup_Alarm.c: 77: setup_alarm_second++;
  8462  00349A  2A66               	incf	_setup_alarm_second,f,c
  8463                           
  8464                           ;Setup_Alarm.c: 78: if (setup_alarm_second == 60) setup_alarm_second = 0;
  8465  00349C  0E3C               	movlw	60
  8466  00349E  1866               	xorwf	_setup_alarm_second,w,c
  8467  0034A0  A4D8               	btfss	status,2,c
  8468  0034A2  D00E               	goto	l9421
  8469  0034A4  0E00               	movlw	0
  8470  0034A6  6E66               	movwf	_setup_alarm_second,c
  8471                           
  8472                           ;Setup_Alarm.c: 84: }
  8473                           
  8474                           ;Setup_Alarm.c: 83: break;
  8475                           
  8476                           ;Setup_Alarm.c: 82: default:
  8477                           
  8478                           ;Setup_Alarm.c: 79: break;
  8479  0034A8  D00B               	goto	l9421
  8480  0034AA                     l9419:
  8481  0034AA  5053               	movf	_Select_Alarm_Field,w,c
  8482                           
  8483                           ; Switch size 1, requested type "space"
  8484                           ; Number of cases is 3, Range of values is 0 to 2
  8485                           ; switch strategies available:
  8486                           ; Name         Instructions Cycles
  8487                           ; simple_byte           10     6 (average)
  8488                           ;	Chosen strategy is simple_byte
  8489  0034AC  0A00               	xorlw	0	; case 0
  8490  0034AE  B4D8               	btfsc	status,2,c
  8491  0034B0  D7E4               	goto	l9399
  8492  0034B2  0A01               	xorlw	1	; case 1
  8493  0034B4  B4D8               	btfsc	status,2,c
  8494  0034B6  D7E9               	goto	l9405
  8495  0034B8  0A03               	xorlw	3	; case 2
  8496  0034BA  B4D8               	btfsc	status,2,c
  8497  0034BC  D7EE               	goto	l9411
  8498  0034BE  D000               	goto	l9421
  8499  0034C0                     l9421:
  8500                           
  8501                           ;Setup_Alarm.c: 85: Update_Setup_Alarm_Time_Screen();
  8502  0034C0  EC93  F010         	call	_Update_Setup_Alarm_Time_Screen	;wreg free
  8503  0034C4  0012               	return		;funcret
  8504  0034C6                     __end_of_Increase_Alarm_Time:
  8505                           	opt stack 0
  8506                           tblptru	equ	0xFF8
  8507                           tblptrh	equ	0xFF7
  8508                           tblptrl	equ	0xFF6
  8509                           tablat	equ	0xFF5
  8510                           prodh	equ	0xFF4
  8511                           prodl	equ	0xFF3
  8512                           intcon	equ	0xFF2
  8513                           intcon2	equ	0xFF1
  8514                           postinc0	equ	0xFEE
  8515                           wreg	equ	0xFE8
  8516                           postdec1	equ	0xFE5
  8517                           fsr1l	equ	0xFE1
  8518                           postinc2	equ	0xFDE
  8519                           fsr2h	equ	0xFDA
  8520                           fsr2l	equ	0xFD9
  8521                           status	equ	0xFD8
  8522                           
  8523 ;; *************** function _Go_Prev_Alarm_Field *****************
  8524 ;; Defined at:
  8525 ;;		line 126 in file "Setup_Alarm.c"
  8526 ;; Parameters:    Size  Location     Type
  8527 ;;		None
  8528 ;; Auto vars:     Size  Location     Type
  8529 ;;		None
  8530 ;; Return value:  Size  Location     Type
  8531 ;;		None               void
  8532 ;; Registers used:
  8533 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8534 ;; Tracked objects:
  8535 ;;		On entry : 0/0
  8536 ;;		On exit  : 0/0
  8537 ;;		Unchanged: 0/0
  8538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8539 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8540 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8541 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8542 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8543 ;;Total ram usage:        0 bytes
  8544 ;; Hardware stack levels used:    1
  8545 ;; Hardware stack levels required when called:    9
  8546 ;; This function calls:
  8547 ;;		_Update_Setup_Screen_Cursor_Backward
  8548 ;; This function is called by:
  8549 ;;		_Do_Setup_Alarm_Time
  8550 ;; This function uses a non-reentrant model
  8551 ;;
  8552                           
  8553                           	psect	text40
  8554  003B2C                     __ptext40:
  8555                           	opt stack 0
  8556  003B2C                     _Go_Prev_Alarm_Field:
  8557                           	opt stack 20
  8558                           
  8559                           ;Setup_Alarm.c: 128: if (Select_Alarm_Field == 0) Select_Alarm_Field = 2;
  8560                           
  8561                           ;incstack = 0
  8562  003B2C  5053               	movf	_Select_Alarm_Field,w,c
  8563  003B2E  A4D8               	btfss	status,2,c
  8564  003B30  D003               	goto	l9353
  8565  003B32  0E02               	movlw	2
  8566  003B34  6E53               	movwf	_Select_Alarm_Field,c
  8567  003B36  D002               	goto	l9355
  8568  003B38                     l9353:
  8569                           
  8570                           ;Setup_Alarm.c: 129: else Select_Alarm_Field--;
  8571  003B38  0653               	decf	_Select_Alarm_Field,f,c
  8572  003B3A  D000               	goto	l9355
  8573  003B3C                     l9355:
  8574                           
  8575                           ;Setup_Alarm.c: 130: Update_Setup_Screen_Cursor_Backward(Select_Alarm_Field);
  8576  003B3C  5053               	movf	_Select_Alarm_Field,w,c
  8577  003B3E  EC8C  F008         	call	_Update_Setup_Screen_Cursor_Backward
  8578  003B42  0012               	return		;funcret
  8579  003B44                     __end_of_Go_Prev_Alarm_Field:
  8580                           	opt stack 0
  8581                           tblptru	equ	0xFF8
  8582                           tblptrh	equ	0xFF7
  8583                           tblptrl	equ	0xFF6
  8584                           tablat	equ	0xFF5
  8585                           prodh	equ	0xFF4
  8586                           prodl	equ	0xFF3
  8587                           intcon	equ	0xFF2
  8588                           intcon2	equ	0xFF1
  8589                           postinc0	equ	0xFEE
  8590                           wreg	equ	0xFE8
  8591                           postdec1	equ	0xFE5
  8592                           fsr1l	equ	0xFE1
  8593                           postinc2	equ	0xFDE
  8594                           fsr2h	equ	0xFDA
  8595                           fsr2l	equ	0xFD9
  8596                           status	equ	0xFD8
  8597                           
  8598 ;; *************** function _Update_Setup_Screen_Cursor_Backward *****************
  8599 ;; Defined at:
  8600 ;;		line 272 in file "Setup_Time.c"
  8601 ;; Parameters:    Size  Location     Type
  8602 ;;  field           1    wreg     unsigned char 
  8603 ;; Auto vars:     Size  Location     Type
  8604 ;;  field           1   45[COMRAM] unsigned char 
  8605 ;;  xinc            1   47[COMRAM] unsigned char 
  8606 ;;  yinc            1   46[COMRAM] unsigned char 
  8607 ;; Return value:  Size  Location     Type
  8608 ;;		None               void
  8609 ;; Registers used:
  8610 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8611 ;; Tracked objects:
  8612 ;;		On entry : 0/0
  8613 ;;		On exit  : 0/0
  8614 ;;		Unchanged: 0/0
  8615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8616 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8617 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8618 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8619 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8620 ;;Total ram usage:        3 bytes
  8621 ;; Hardware stack levels used:    1
  8622 ;; Hardware stack levels required when called:    8
  8623 ;; This function calls:
  8624 ;;		_fillRect
  8625 ;; This function is called by:
  8626 ;;		_Go_Prev_Field
  8627 ;;		_Go_Prev_Alarm_Field
  8628 ;; This function uses a non-reentrant model
  8629 ;;
  8630                           
  8631                           	psect	text41
  8632  001118                     __ptext41:
  8633                           	opt stack 0
  8634  001118                     _Update_Setup_Screen_Cursor_Backward:
  8635                           	opt stack 20
  8636                           
  8637                           ;incstack = 0
  8638                           ;Update_Setup_Screen_Cursor_Backward@field stored from wreg
  8639  001118  6E2E               	movwf	Update_Setup_Screen_Cursor_Backward@field,c
  8640                           
  8641                           ;Setup_Time.c: 274: char xinc = 36;
  8642  00111A  0E24               	movlw	36
  8643  00111C  6E30               	movwf	Update_Setup_Screen_Cursor_Backward@xinc,c
  8644                           
  8645                           ;Setup_Time.c: 275: char yinc = 30;
  8646  00111E  0E1E               	movlw	30
  8647  001120  6E2F               	movwf	Update_Setup_Screen_Cursor_Backward@yinc,c
  8648                           
  8649                           ;Setup_Time.c: 276: switch (field)
  8650  001122  D0BF               	goto	l9011
  8651  001124                     l8989:
  8652                           
  8653                           ;Setup_Time.c: 279: fillRect(15-1+xinc, 52+16, 25,2,0x0000);
  8654  001124  0E44               	movlw	68
  8655  001126  6E23               	movwf	fillRect@y,c
  8656  001128  0E19               	movlw	25
  8657  00112A  6E24               	movwf	fillRect@w,c
  8658  00112C  0E02               	movlw	2
  8659  00112E  6E25               	movwf	fillRect@h,c
  8660  001130  0E00               	movlw	0
  8661  001132  6E27               	movwf	fillRect@color+1,c
  8662  001134  0E00               	movlw	0
  8663  001136  6E26               	movwf	fillRect@color,c
  8664  001138  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  8665  00113A  0F0E               	addlw	14
  8666  00113C  ECD6  F01A         	call	_fillRect
  8667                           
  8668                           ;Setup_Time.c: 280: fillRect(15-1, 52+16, 25,2,0x07FF);
  8669  001140  0E44               	movlw	68
  8670  001142  6E23               	movwf	fillRect@y,c
  8671  001144  0E19               	movlw	25
  8672  001146  6E24               	movwf	fillRect@w,c
  8673  001148  0E02               	movlw	2
  8674  00114A  6E25               	movwf	fillRect@h,c
  8675  00114C  0E07               	movlw	7
  8676  00114E  6E27               	movwf	fillRect@color+1,c
  8677  001150  6826               	setf	fillRect@color,c
  8678  001152  0E0E               	movlw	14
  8679  001154  ECD6  F01A         	call	_fillRect
  8680                           
  8681                           ;Setup_Time.c: 281: break;
  8682  001158  D0B8               	goto	l1160
  8683  00115A                     l8991:
  8684                           
  8685                           ;Setup_Time.c: 284: fillRect(15-1+2*xinc, 52+16, 25,2,0x0000);
  8686  00115A  0E44               	movlw	68
  8687  00115C  6E23               	movwf	fillRect@y,c
  8688  00115E  0E19               	movlw	25
  8689  001160  6E24               	movwf	fillRect@w,c
  8690  001162  0E02               	movlw	2
  8691  001164  6E25               	movwf	fillRect@h,c
  8692  001166  0E00               	movlw	0
  8693  001168  6E27               	movwf	fillRect@color+1,c
  8694  00116A  0E00               	movlw	0
  8695  00116C  6E26               	movwf	fillRect@color,c
  8696  00116E  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  8697  001170  0D02               	mullw	2
  8698  001172  50F3               	movf	prodl,w,c
  8699  001174  0F0E               	addlw	14
  8700  001176  ECD6  F01A         	call	_fillRect
  8701                           
  8702                           ;Setup_Time.c: 285: fillRect(15-1+xinc, 52+16, 25,2,0x07FF);
  8703  00117A  0E44               	movlw	68
  8704  00117C  6E23               	movwf	fillRect@y,c
  8705  00117E  0E19               	movlw	25
  8706  001180  6E24               	movwf	fillRect@w,c
  8707  001182  0E02               	movlw	2
  8708  001184  6E25               	movwf	fillRect@h,c
  8709  001186  0E07               	movlw	7
  8710  001188  6E27               	movwf	fillRect@color+1,c
  8711  00118A  6826               	setf	fillRect@color,c
  8712  00118C  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  8713  00118E  0F0E               	addlw	14
  8714  001190  ECD6  F01A         	call	_fillRect
  8715                           
  8716                           ;Setup_Time.c: 286: break;
  8717  001194  D09A               	goto	l1160
  8718  001196                     l8995:
  8719                           
  8720                           ;Setup_Time.c: 289: fillRect(15-1, 52+16, 25,2,0x0000);
  8721  001196  0E44               	movlw	68
  8722  001198  6E23               	movwf	fillRect@y,c
  8723  00119A  0E19               	movlw	25
  8724  00119C  6E24               	movwf	fillRect@w,c
  8725  00119E  0E02               	movlw	2
  8726  0011A0  6E25               	movwf	fillRect@h,c
  8727  0011A2  0E00               	movlw	0
  8728  0011A4  6E27               	movwf	fillRect@color+1,c
  8729  0011A6  0E00               	movlw	0
  8730  0011A8  6E26               	movwf	fillRect@color,c
  8731  0011AA  0E0E               	movlw	14
  8732  0011AC  ECD6  F01A         	call	_fillRect
  8733                           
  8734                           ;Setup_Time.c: 290: fillRect(15-1, 52+16+yinc, 25,2,0x0000);
  8735  0011B0  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
  8736  0011B2  0F44               	addlw	68
  8737  0011B4  6E23               	movwf	fillRect@y,c
  8738  0011B6  0E19               	movlw	25
  8739  0011B8  6E24               	movwf	fillRect@w,c
  8740  0011BA  0E02               	movlw	2
  8741  0011BC  6E25               	movwf	fillRect@h,c
  8742  0011BE  0E00               	movlw	0
  8743  0011C0  6E27               	movwf	fillRect@color+1,c
  8744  0011C2  0E00               	movlw	0
  8745  0011C4  6E26               	movwf	fillRect@color,c
  8746  0011C6  0E0E               	movlw	14
  8747  0011C8  ECD6  F01A         	call	_fillRect
  8748                           
  8749                           ;Setup_Time.c: 291: fillRect(15-1+2*xinc, 52+16, 25,2,0x07FF);
  8750  0011CC  0E44               	movlw	68
  8751  0011CE  6E23               	movwf	fillRect@y,c
  8752  0011D0  0E19               	movlw	25
  8753  0011D2  6E24               	movwf	fillRect@w,c
  8754  0011D4  0E02               	movlw	2
  8755  0011D6  6E25               	movwf	fillRect@h,c
  8756  0011D8  0E07               	movlw	7
  8757  0011DA  6E27               	movwf	fillRect@color+1,c
  8758  0011DC  6826               	setf	fillRect@color,c
  8759  0011DE  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  8760  0011E0  0D02               	mullw	2
  8761  0011E2  50F3               	movf	prodl,w,c
  8762  0011E4  0F0E               	addlw	14
  8763  0011E6  ECD6  F01A         	call	_fillRect
  8764                           
  8765                           ;Setup_Time.c: 292: break;
  8766  0011EA  D06F               	goto	l1160
  8767  0011EC                     l8999:
  8768                           
  8769                           ;Setup_Time.c: 295: fillRect(15-1+xinc, 52+16+yinc, 25,2,0x0000);
  8770  0011EC  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
  8771  0011EE  0F44               	addlw	68
  8772  0011F0  6E23               	movwf	fillRect@y,c
  8773  0011F2  0E19               	movlw	25
  8774  0011F4  6E24               	movwf	fillRect@w,c
  8775  0011F6  0E02               	movlw	2
  8776  0011F8  6E25               	movwf	fillRect@h,c
  8777  0011FA  0E00               	movlw	0
  8778  0011FC  6E27               	movwf	fillRect@color+1,c
  8779  0011FE  0E00               	movlw	0
  8780  001200  6E26               	movwf	fillRect@color,c
  8781  001202  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  8782  001204  0F0E               	addlw	14
  8783  001206  ECD6  F01A         	call	_fillRect
  8784                           
  8785                           ;Setup_Time.c: 296: fillRect(15-1, 52+16+yinc, 25,2,0x07FF);
  8786  00120A  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
  8787  00120C  0F44               	addlw	68
  8788  00120E  6E23               	movwf	fillRect@y,c
  8789  001210  0E19               	movlw	25
  8790  001212  6E24               	movwf	fillRect@w,c
  8791  001214  0E02               	movlw	2
  8792  001216  6E25               	movwf	fillRect@h,c
  8793  001218  0E07               	movlw	7
  8794  00121A  6E27               	movwf	fillRect@color+1,c
  8795  00121C  6826               	setf	fillRect@color,c
  8796  00121E  0E0E               	movlw	14
  8797  001220  ECD6  F01A         	call	_fillRect
  8798                           
  8799                           ;Setup_Time.c: 297: break;
  8800  001224  D052               	goto	l1160
  8801  001226                     l9001:
  8802                           
  8803                           ;Setup_Time.c: 300: fillRect(15-1+2*xinc, 52+16+yinc, 25,2,0x0000);
  8804  001226  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
  8805  001228  0F44               	addlw	68
  8806  00122A  6E23               	movwf	fillRect@y,c
  8807  00122C  0E19               	movlw	25
  8808  00122E  6E24               	movwf	fillRect@w,c
  8809  001230  0E02               	movlw	2
  8810  001232  6E25               	movwf	fillRect@h,c
  8811  001234  0E00               	movlw	0
  8812  001236  6E27               	movwf	fillRect@color+1,c
  8813  001238  0E00               	movlw	0
  8814  00123A  6E26               	movwf	fillRect@color,c
  8815  00123C  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  8816  00123E  0D02               	mullw	2
  8817  001240  50F3               	movf	prodl,w,c
  8818  001242  0F0E               	addlw	14
  8819  001244  ECD6  F01A         	call	_fillRect
  8820                           
  8821                           ;Setup_Time.c: 301: fillRect(15-1+xinc, 52+16+yinc, 25,2,0x07FF);
  8822  001248  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
  8823  00124A  0F44               	addlw	68
  8824  00124C  6E23               	movwf	fillRect@y,c
  8825  00124E  0E19               	movlw	25
  8826  001250  6E24               	movwf	fillRect@w,c
  8827  001252  0E02               	movlw	2
  8828  001254  6E25               	movwf	fillRect@h,c
  8829  001256  0E07               	movlw	7
  8830  001258  6E27               	movwf	fillRect@color+1,c
  8831  00125A  6826               	setf	fillRect@color,c
  8832  00125C  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  8833  00125E  0F0E               	addlw	14
  8834  001260  ECD6  F01A         	call	_fillRect
  8835                           
  8836                           ;Setup_Time.c: 302: break;
  8837  001264  D032               	goto	l1160
  8838  001266                     l9005:
  8839                           
  8840                           ;Setup_Time.c: 305: fillRect(15-1, 52+16, 25,2,0x0000);
  8841  001266  0E44               	movlw	68
  8842  001268  6E23               	movwf	fillRect@y,c
  8843  00126A  0E19               	movlw	25
  8844  00126C  6E24               	movwf	fillRect@w,c
  8845  00126E  0E02               	movlw	2
  8846  001270  6E25               	movwf	fillRect@h,c
  8847  001272  0E00               	movlw	0
  8848  001274  6E27               	movwf	fillRect@color+1,c
  8849  001276  0E00               	movlw	0
  8850  001278  6E26               	movwf	fillRect@color,c
  8851  00127A  0E0E               	movlw	14
  8852  00127C  ECD6  F01A         	call	_fillRect
  8853                           
  8854                           ;Setup_Time.c: 306: fillRect(15-1+2*xinc, 52+16+yinc, 25,2,0x07FF);
  8855  001280  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
  8856  001282  0F44               	addlw	68
  8857  001284  6E23               	movwf	fillRect@y,c
  8858  001286  0E19               	movlw	25
  8859  001288  6E24               	movwf	fillRect@w,c
  8860  00128A  0E02               	movlw	2
  8861  00128C  6E25               	movwf	fillRect@h,c
  8862  00128E  0E07               	movlw	7
  8863  001290  6E27               	movwf	fillRect@color+1,c
  8864  001292  6826               	setf	fillRect@color,c
  8865  001294  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  8866  001296  0D02               	mullw	2
  8867  001298  50F3               	movf	prodl,w,c
  8868  00129A  0F0E               	addlw	14
  8869  00129C  ECD6  F01A         	call	_fillRect
  8870                           
  8871                           ;Setup_Time.c: 308: }
  8872                           
  8873                           ;Setup_Time.c: 307: break;
  8874  0012A0  D014               	goto	l1160
  8875  0012A2                     l9011:
  8876  0012A2  502E               	movf	Update_Setup_Screen_Cursor_Backward@field,w,c
  8877                           
  8878                           ; Switch size 1, requested type "space"
  8879                           ; Number of cases is 6, Range of values is 0 to 5
  8880                           ; switch strategies available:
  8881                           ; Name         Instructions Cycles
  8882                           ; simple_byte           19    10 (average)
  8883                           ;	Chosen strategy is simple_byte
  8884  0012A4  0A00               	xorlw	0	; case 0
  8885  0012A6  B4D8               	btfsc	status,2,c
  8886  0012A8  D73D               	goto	l8989
  8887  0012AA  0A01               	xorlw	1	; case 1
  8888  0012AC  B4D8               	btfsc	status,2,c
  8889  0012AE  D755               	goto	l8991
  8890  0012B0  0A03               	xorlw	3	; case 2
  8891  0012B2  B4D8               	btfsc	status,2,c
  8892  0012B4  D770               	goto	l8995
  8893  0012B6  0A01               	xorlw	1	; case 3
  8894  0012B8  B4D8               	btfsc	status,2,c
  8895  0012BA  D798               	goto	l8999
  8896  0012BC  0A07               	xorlw	7	; case 4
  8897  0012BE  B4D8               	btfsc	status,2,c
  8898  0012C0  D7B2               	goto	l9001
  8899  0012C2  0A01               	xorlw	1	; case 5
  8900  0012C4  B4D8               	btfsc	status,2,c
  8901  0012C6  D7CF               	goto	l9005
  8902  0012C8  D000               	goto	l1160
  8903  0012CA                     l1160:
  8904  0012CA  0012               	return		;funcret
  8905  0012CC                     __end_of_Update_Setup_Screen_Cursor_Backward:
  8906                           	opt stack 0
  8907                           tblptru	equ	0xFF8
  8908                           tblptrh	equ	0xFF7
  8909                           tblptrl	equ	0xFF6
  8910                           tablat	equ	0xFF5
  8911                           prodh	equ	0xFF4
  8912                           prodl	equ	0xFF3
  8913                           intcon	equ	0xFF2
  8914                           intcon2	equ	0xFF1
  8915                           postinc0	equ	0xFEE
  8916                           wreg	equ	0xFE8
  8917                           postdec1	equ	0xFE5
  8918                           fsr1l	equ	0xFE1
  8919                           postinc2	equ	0xFDE
  8920                           fsr2h	equ	0xFDA
  8921                           fsr2l	equ	0xFD9
  8922                           status	equ	0xFD8
  8923                           
  8924 ;; *************** function _Go_Next_Alarm_Field *****************
  8925 ;; Defined at:
  8926 ;;		line 117 in file "Setup_Alarm.c"
  8927 ;; Parameters:    Size  Location     Type
  8928 ;;		None
  8929 ;; Auto vars:     Size  Location     Type
  8930 ;;		None
  8931 ;; Return value:  Size  Location     Type
  8932 ;;		None               void
  8933 ;; Registers used:
  8934 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8935 ;; Tracked objects:
  8936 ;;		On entry : 0/0
  8937 ;;		On exit  : 0/0
  8938 ;;		Unchanged: 0/0
  8939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8940 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8941 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8942 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8943 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8944 ;;Total ram usage:        0 bytes
  8945 ;; Hardware stack levels used:    1
  8946 ;; Hardware stack levels required when called:    9
  8947 ;; This function calls:
  8948 ;;		_Update_Setup_Screen_Cursor_Forward
  8949 ;; This function is called by:
  8950 ;;		_Do_Setup_Alarm_Time
  8951 ;; This function uses a non-reentrant model
  8952 ;;
  8953                           
  8954                           	psect	text42
  8955  003B44                     __ptext42:
  8956                           	opt stack 0
  8957  003B44                     _Go_Next_Alarm_Field:
  8958                           	opt stack 20
  8959                           
  8960                           ;Setup_Alarm.c: 120: Select_Alarm_Field++;
  8961                           
  8962                           ;incstack = 0
  8963  003B44  2A53               	incf	_Select_Alarm_Field,f,c
  8964                           
  8965                           ;Setup_Alarm.c: 121: if (Select_Alarm_Field == 3) Select_Alarm_Field = 0;
  8966  003B46  0E03               	movlw	3
  8967  003B48  1853               	xorwf	_Select_Alarm_Field,w,c
  8968  003B4A  A4D8               	btfss	status,2,c
  8969  003B4C  D003               	goto	l9363
  8970  003B4E  0E00               	movlw	0
  8971  003B50  6E53               	movwf	_Select_Alarm_Field,c
  8972  003B52  D000               	goto	l9363
  8973  003B54                     l9363:
  8974                           
  8975                           ;Setup_Alarm.c: 122: Update_Setup_Screen_Cursor_Forward(Select_Alarm_Field);
  8976  003B54  5053               	movf	_Select_Alarm_Field,w,c
  8977  003B56  ECAF  F007         	call	_Update_Setup_Screen_Cursor_Forward
  8978  003B5A  0012               	return		;funcret
  8979  003B5C                     __end_of_Go_Next_Alarm_Field:
  8980                           	opt stack 0
  8981                           tblptru	equ	0xFF8
  8982                           tblptrh	equ	0xFF7
  8983                           tblptrl	equ	0xFF6
  8984                           tablat	equ	0xFF5
  8985                           prodh	equ	0xFF4
  8986                           prodl	equ	0xFF3
  8987                           intcon	equ	0xFF2
  8988                           intcon2	equ	0xFF1
  8989                           postinc0	equ	0xFEE
  8990                           wreg	equ	0xFE8
  8991                           postdec1	equ	0xFE5
  8992                           fsr1l	equ	0xFE1
  8993                           postinc2	equ	0xFDE
  8994                           fsr2h	equ	0xFDA
  8995                           fsr2l	equ	0xFD9
  8996                           status	equ	0xFD8
  8997                           
  8998 ;; *************** function _Update_Setup_Screen_Cursor_Forward *****************
  8999 ;; Defined at:
  9000 ;;		line 233 in file "Setup_Time.c"
  9001 ;; Parameters:    Size  Location     Type
  9002 ;;  field           1    wreg     unsigned char 
  9003 ;; Auto vars:     Size  Location     Type
  9004 ;;  field           1   45[COMRAM] unsigned char 
  9005 ;;  xinc            1   47[COMRAM] unsigned char 
  9006 ;;  yinc            1   46[COMRAM] unsigned char 
  9007 ;; Return value:  Size  Location     Type
  9008 ;;		None               void
  9009 ;; Registers used:
  9010 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9011 ;; Tracked objects:
  9012 ;;		On entry : 0/0
  9013 ;;		On exit  : 0/0
  9014 ;;		Unchanged: 0/0
  9015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9016 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9017 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9018 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9019 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9020 ;;Total ram usage:        3 bytes
  9021 ;; Hardware stack levels used:    1
  9022 ;; Hardware stack levels required when called:    8
  9023 ;; This function calls:
  9024 ;;		_fillRect
  9025 ;; This function is called by:
  9026 ;;		_Go_Next_Field
  9027 ;;		_Go_Next_Alarm_Field
  9028 ;; This function uses a non-reentrant model
  9029 ;;
  9030                           
  9031                           	psect	text43
  9032  000F5E                     __ptext43:
  9033                           	opt stack 0
  9034  000F5E                     _Update_Setup_Screen_Cursor_Forward:
  9035                           	opt stack 20
  9036                           
  9037                           ;incstack = 0
  9038                           ;Update_Setup_Screen_Cursor_Forward@field stored from wreg
  9039  000F5E  6E2E               	movwf	Update_Setup_Screen_Cursor_Forward@field,c
  9040                           
  9041                           ;Setup_Time.c: 235: char xinc = 36;
  9042  000F60  0E24               	movlw	36
  9043  000F62  6E30               	movwf	Update_Setup_Screen_Cursor_Forward@xinc,c
  9044                           
  9045                           ;Setup_Time.c: 236: char yinc = 30;
  9046  000F64  0E1E               	movlw	30
  9047  000F66  6E2F               	movwf	Update_Setup_Screen_Cursor_Forward@yinc,c
  9048                           
  9049                           ;Setup_Time.c: 237: switch (field)
  9050  000F68  D0C2               	goto	l8985
  9051  000F6A                     l8963:
  9052                           
  9053                           ;Setup_Time.c: 240: fillRect(15-1+2*xinc, 52+16+yinc, 25,2,0x0000);
  9054  000F6A  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
  9055  000F6C  0F44               	addlw	68
  9056  000F6E  6E23               	movwf	fillRect@y,c
  9057  000F70  0E19               	movlw	25
  9058  000F72  6E24               	movwf	fillRect@w,c
  9059  000F74  0E02               	movlw	2
  9060  000F76  6E25               	movwf	fillRect@h,c
  9061  000F78  0E00               	movlw	0
  9062  000F7A  6E27               	movwf	fillRect@color+1,c
  9063  000F7C  0E00               	movlw	0
  9064  000F7E  6E26               	movwf	fillRect@color,c
  9065  000F80  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  9066  000F82  0D02               	mullw	2
  9067  000F84  50F3               	movf	prodl,w,c
  9068  000F86  0F0E               	addlw	14
  9069  000F88  ECD6  F01A         	call	_fillRect
  9070                           
  9071                           ;Setup_Time.c: 241: fillRect(15-1+2*xinc, 52+16, 25,2,0x0000);
  9072  000F8C  0E44               	movlw	68
  9073  000F8E  6E23               	movwf	fillRect@y,c
  9074  000F90  0E19               	movlw	25
  9075  000F92  6E24               	movwf	fillRect@w,c
  9076  000F94  0E02               	movlw	2
  9077  000F96  6E25               	movwf	fillRect@h,c
  9078  000F98  0E00               	movlw	0
  9079  000F9A  6E27               	movwf	fillRect@color+1,c
  9080  000F9C  0E00               	movlw	0
  9081  000F9E  6E26               	movwf	fillRect@color,c
  9082  000FA0  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  9083  000FA2  0D02               	mullw	2
  9084  000FA4  50F3               	movf	prodl,w,c
  9085  000FA6  0F0E               	addlw	14
  9086  000FA8  ECD6  F01A         	call	_fillRect
  9087                           
  9088                           ;Setup_Time.c: 242: fillRect(15-1, 52+16, 25,2,0x07FF);
  9089  000FAC  0E44               	movlw	68
  9090  000FAE  6E23               	movwf	fillRect@y,c
  9091  000FB0  0E19               	movlw	25
  9092  000FB2  6E24               	movwf	fillRect@w,c
  9093  000FB4  0E02               	movlw	2
  9094  000FB6  6E25               	movwf	fillRect@h,c
  9095  000FB8  0E07               	movlw	7
  9096  000FBA  6E27               	movwf	fillRect@color+1,c
  9097  000FBC  6826               	setf	fillRect@color,c
  9098  000FBE  0E0E               	movlw	14
  9099  000FC0  ECD6  F01A         	call	_fillRect
  9100                           
  9101                           ;Setup_Time.c: 243: break;
  9102  000FC4  D0A8               	goto	l1149
  9103  000FC6                     l8967:
  9104                           
  9105                           ;Setup_Time.c: 246: fillRect(15-1, 52+16, 25,2,0x0000);
  9106  000FC6  0E44               	movlw	68
  9107  000FC8  6E23               	movwf	fillRect@y,c
  9108  000FCA  0E19               	movlw	25
  9109  000FCC  6E24               	movwf	fillRect@w,c
  9110  000FCE  0E02               	movlw	2
  9111  000FD0  6E25               	movwf	fillRect@h,c
  9112  000FD2  0E00               	movlw	0
  9113  000FD4  6E27               	movwf	fillRect@color+1,c
  9114  000FD6  0E00               	movlw	0
  9115  000FD8  6E26               	movwf	fillRect@color,c
  9116  000FDA  0E0E               	movlw	14
  9117  000FDC  ECD6  F01A         	call	_fillRect
  9118                           
  9119                           ;Setup_Time.c: 247: fillRect(15-1+xinc, 52+16, 25,2,0x07FF);
  9120  000FE0  0E44               	movlw	68
  9121  000FE2  6E23               	movwf	fillRect@y,c
  9122  000FE4  0E19               	movlw	25
  9123  000FE6  6E24               	movwf	fillRect@w,c
  9124  000FE8  0E02               	movlw	2
  9125  000FEA  6E25               	movwf	fillRect@h,c
  9126  000FEC  0E07               	movlw	7
  9127  000FEE  6E27               	movwf	fillRect@color+1,c
  9128  000FF0  6826               	setf	fillRect@color,c
  9129  000FF2  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  9130  000FF4  0F0E               	addlw	14
  9131  000FF6  ECD6  F01A         	call	_fillRect
  9132                           
  9133                           ;Setup_Time.c: 248: break;
  9134  000FFA  D08D               	goto	l1149
  9135  000FFC                     l8969:
  9136                           
  9137                           ;Setup_Time.c: 251: fillRect(15-1+xinc, 52+16, 25,2,0x0000);
  9138  000FFC  0E44               	movlw	68
  9139  000FFE  6E23               	movwf	fillRect@y,c
  9140  001000  0E19               	movlw	25
  9141  001002  6E24               	movwf	fillRect@w,c
  9142  001004  0E02               	movlw	2
  9143  001006  6E25               	movwf	fillRect@h,c
  9144  001008  0E00               	movlw	0
  9145  00100A  6E27               	movwf	fillRect@color+1,c
  9146  00100C  0E00               	movlw	0
  9147  00100E  6E26               	movwf	fillRect@color,c
  9148  001010  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  9149  001012  0F0E               	addlw	14
  9150  001014  ECD6  F01A         	call	_fillRect
  9151                           
  9152                           ;Setup_Time.c: 252: fillRect(15-1+2*xinc, 52+16, 25,2,0x07FF);
  9153  001018  0E44               	movlw	68
  9154  00101A  6E23               	movwf	fillRect@y,c
  9155  00101C  0E19               	movlw	25
  9156  00101E  6E24               	movwf	fillRect@w,c
  9157  001020  0E02               	movlw	2
  9158  001022  6E25               	movwf	fillRect@h,c
  9159  001024  0E07               	movlw	7
  9160  001026  6E27               	movwf	fillRect@color+1,c
  9161  001028  6826               	setf	fillRect@color,c
  9162  00102A  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  9163  00102C  0D02               	mullw	2
  9164  00102E  50F3               	movf	prodl,w,c
  9165  001030  0F0E               	addlw	14
  9166  001032  ECD6  F01A         	call	_fillRect
  9167                           
  9168                           ;Setup_Time.c: 253: break;
  9169  001036  D06F               	goto	l1149
  9170  001038                     l8973:
  9171                           
  9172                           ;Setup_Time.c: 256: fillRect(15-1+2*xinc, 52+16, 25,2,0x0000);
  9173  001038  0E44               	movlw	68
  9174  00103A  6E23               	movwf	fillRect@y,c
  9175  00103C  0E19               	movlw	25
  9176  00103E  6E24               	movwf	fillRect@w,c
  9177  001040  0E02               	movlw	2
  9178  001042  6E25               	movwf	fillRect@h,c
  9179  001044  0E00               	movlw	0
  9180  001046  6E27               	movwf	fillRect@color+1,c
  9181  001048  0E00               	movlw	0
  9182  00104A  6E26               	movwf	fillRect@color,c
  9183  00104C  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  9184  00104E  0D02               	mullw	2
  9185  001050  50F3               	movf	prodl,w,c
  9186  001052  0F0E               	addlw	14
  9187  001054  ECD6  F01A         	call	_fillRect
  9188                           
  9189                           ;Setup_Time.c: 257: fillRect(15-1, 52+16+yinc, 25,2,0x07FF);
  9190  001058  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
  9191  00105A  0F44               	addlw	68
  9192  00105C  6E23               	movwf	fillRect@y,c
  9193  00105E  0E19               	movlw	25
  9194  001060  6E24               	movwf	fillRect@w,c
  9195  001062  0E02               	movlw	2
  9196  001064  6E25               	movwf	fillRect@h,c
  9197  001066  0E07               	movlw	7
  9198  001068  6E27               	movwf	fillRect@color+1,c
  9199  00106A  6826               	setf	fillRect@color,c
  9200  00106C  0E0E               	movlw	14
  9201  00106E  ECD6  F01A         	call	_fillRect
  9202                           
  9203                           ;Setup_Time.c: 258: break;
  9204  001072  D051               	goto	l1149
  9205  001074                     l8977:
  9206                           
  9207                           ;Setup_Time.c: 261: fillRect(15-1, 52+16+yinc, 25,2,0x0000);
  9208  001074  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
  9209  001076  0F44               	addlw	68
  9210  001078  6E23               	movwf	fillRect@y,c
  9211  00107A  0E19               	movlw	25
  9212  00107C  6E24               	movwf	fillRect@w,c
  9213  00107E  0E02               	movlw	2
  9214  001080  6E25               	movwf	fillRect@h,c
  9215  001082  0E00               	movlw	0
  9216  001084  6E27               	movwf	fillRect@color+1,c
  9217  001086  0E00               	movlw	0
  9218  001088  6E26               	movwf	fillRect@color,c
  9219  00108A  0E0E               	movlw	14
  9220  00108C  ECD6  F01A         	call	_fillRect
  9221                           
  9222                           ;Setup_Time.c: 262: fillRect(15-1+xinc, 52+16+yinc, 25,2,0x07FF);
  9223  001090  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
  9224  001092  0F44               	addlw	68
  9225  001094  6E23               	movwf	fillRect@y,c
  9226  001096  0E19               	movlw	25
  9227  001098  6E24               	movwf	fillRect@w,c
  9228  00109A  0E02               	movlw	2
  9229  00109C  6E25               	movwf	fillRect@h,c
  9230  00109E  0E07               	movlw	7
  9231  0010A0  6E27               	movwf	fillRect@color+1,c
  9232  0010A2  6826               	setf	fillRect@color,c
  9233  0010A4  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  9234  0010A6  0F0E               	addlw	14
  9235  0010A8  ECD6  F01A         	call	_fillRect
  9236                           
  9237                           ;Setup_Time.c: 263: break;
  9238  0010AC  D034               	goto	l1149
  9239  0010AE                     l8979:
  9240                           
  9241                           ;Setup_Time.c: 266: fillRect(15-1+xinc, 52+16+yinc, 25,2,0x0000);
  9242  0010AE  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
  9243  0010B0  0F44               	addlw	68
  9244  0010B2  6E23               	movwf	fillRect@y,c
  9245  0010B4  0E19               	movlw	25
  9246  0010B6  6E24               	movwf	fillRect@w,c
  9247  0010B8  0E02               	movlw	2
  9248  0010BA  6E25               	movwf	fillRect@h,c
  9249  0010BC  0E00               	movlw	0
  9250  0010BE  6E27               	movwf	fillRect@color+1,c
  9251  0010C0  0E00               	movlw	0
  9252  0010C2  6E26               	movwf	fillRect@color,c
  9253  0010C4  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  9254  0010C6  0F0E               	addlw	14
  9255  0010C8  ECD6  F01A         	call	_fillRect
  9256                           
  9257                           ;Setup_Time.c: 267: fillRect(15-1+2*xinc, 52+16+yinc, 25,2,0x07FF);
  9258  0010CC  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
  9259  0010CE  0F44               	addlw	68
  9260  0010D0  6E23               	movwf	fillRect@y,c
  9261  0010D2  0E19               	movlw	25
  9262  0010D4  6E24               	movwf	fillRect@w,c
  9263  0010D6  0E02               	movlw	2
  9264  0010D8  6E25               	movwf	fillRect@h,c
  9265  0010DA  0E07               	movlw	7
  9266  0010DC  6E27               	movwf	fillRect@color+1,c
  9267  0010DE  6826               	setf	fillRect@color,c
  9268  0010E0  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  9269  0010E2  0D02               	mullw	2
  9270  0010E4  50F3               	movf	prodl,w,c
  9271  0010E6  0F0E               	addlw	14
  9272  0010E8  ECD6  F01A         	call	_fillRect
  9273                           
  9274                           ;Setup_Time.c: 269: }
  9275                           
  9276                           ;Setup_Time.c: 268: break;
  9277  0010EC  D014               	goto	l1149
  9278  0010EE                     l8985:
  9279  0010EE  502E               	movf	Update_Setup_Screen_Cursor_Forward@field,w,c
  9280                           
  9281                           ; Switch size 1, requested type "space"
  9282                           ; Number of cases is 6, Range of values is 0 to 5
  9283                           ; switch strategies available:
  9284                           ; Name         Instructions Cycles
  9285                           ; simple_byte           19    10 (average)
  9286                           ;	Chosen strategy is simple_byte
  9287  0010F0  0A00               	xorlw	0	; case 0
  9288  0010F2  B4D8               	btfsc	status,2,c
  9289  0010F4  D73A               	goto	l8963
  9290  0010F6  0A01               	xorlw	1	; case 1
  9291  0010F8  B4D8               	btfsc	status,2,c
  9292  0010FA  D765               	goto	l8967
  9293  0010FC  0A03               	xorlw	3	; case 2
  9294  0010FE  B4D8               	btfsc	status,2,c
  9295  001100  D77D               	goto	l8969
  9296  001102  0A01               	xorlw	1	; case 3
  9297  001104  B4D8               	btfsc	status,2,c
  9298  001106  D798               	goto	l8973
  9299  001108  0A07               	xorlw	7	; case 4
  9300  00110A  B4D8               	btfsc	status,2,c
  9301  00110C  D7B3               	goto	l8977
  9302  00110E  0A01               	xorlw	1	; case 5
  9303  001110  B4D8               	btfsc	status,2,c
  9304  001112  D7CD               	goto	l8979
  9305  001114  D000               	goto	l1149
  9306  001116                     l1149:
  9307  001116  0012               	return		;funcret
  9308  001118                     __end_of_Update_Setup_Screen_Cursor_Forward:
  9309                           	opt stack 0
  9310                           tblptru	equ	0xFF8
  9311                           tblptrh	equ	0xFF7
  9312                           tblptrl	equ	0xFF6
  9313                           tablat	equ	0xFF5
  9314                           prodh	equ	0xFF4
  9315                           prodl	equ	0xFF3
  9316                           intcon	equ	0xFF2
  9317                           intcon2	equ	0xFF1
  9318                           postinc0	equ	0xFEE
  9319                           wreg	equ	0xFE8
  9320                           postdec1	equ	0xFE5
  9321                           fsr1l	equ	0xFE1
  9322                           postinc2	equ	0xFDE
  9323                           fsr2h	equ	0xFDA
  9324                           fsr2l	equ	0xFD9
  9325                           status	equ	0xFD8
  9326                           
  9327 ;; *************** function _Exit_Setup_Alarm_Time *****************
  9328 ;; Defined at:
  9329 ;;		line 133 in file "Setup_Alarm.c"
  9330 ;; Parameters:    Size  Location     Type
  9331 ;;		None
  9332 ;; Auto vars:     Size  Location     Type
  9333 ;;		None
  9334 ;; Return value:  Size  Location     Type
  9335 ;;		None               void
  9336 ;; Registers used:
  9337 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9338 ;; Tracked objects:
  9339 ;;		On entry : 0/0
  9340 ;;		On exit  : 0/0
  9341 ;;		Unchanged: 0/0
  9342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9343 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9344 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9345 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9346 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9347 ;;Total ram usage:        0 bytes
  9348 ;; Hardware stack levels used:    1
  9349 ;; Hardware stack levels required when called:   11
  9350 ;; This function calls:
  9351 ;;		_DS3231_Read_Time
  9352 ;;		_Initialize_Screen
  9353 ;; This function is called by:
  9354 ;;		_Do_Setup_Alarm_Time
  9355 ;; This function uses a non-reentrant model
  9356 ;;
  9357                           
  9358                           	psect	text44
  9359  003CE0                     __ptext44:
  9360                           	opt stack 0
  9361  003CE0                     _Exit_Setup_Alarm_Time:
  9362                           	opt stack 18
  9363                           
  9364                           ;Setup_Alarm.c: 135: DS3231_Read_Time();
  9365                           
  9366                           ;incstack = 0
  9367  003CE0  EC2F  F019         	call	_DS3231_Read_Time	;wreg free
  9368                           
  9369                           ;Setup_Alarm.c: 136: Initialize_Screen();
  9370  003CE4  EC45  F003         	call	_Initialize_Screen	;wreg free
  9371                           
  9372                           ;Setup_Alarm.c: 137: In_Alarm_Time_Setup = 0;
  9373  003CE8  0E00               	movlw	0
  9374  003CEA  0100               	movlb	0	; () banked
  9375  003CEC  6FF9               	movwf	_In_Alarm_Time_Setup& (0+255),b
  9376                           
  9377                           ; BSR set to: 0
  9378  003CEE  0012               	return		;funcret
  9379  003CF0                     __end_of_Exit_Setup_Alarm_Time:
  9380                           	opt stack 0
  9381                           tblptru	equ	0xFF8
  9382                           tblptrh	equ	0xFF7
  9383                           tblptrl	equ	0xFF6
  9384                           tablat	equ	0xFF5
  9385                           prodh	equ	0xFF4
  9386                           prodl	equ	0xFF3
  9387                           intcon	equ	0xFF2
  9388                           intcon2	equ	0xFF1
  9389                           postinc0	equ	0xFEE
  9390                           wreg	equ	0xFE8
  9391                           postdec1	equ	0xFE5
  9392                           fsr1l	equ	0xFE1
  9393                           postinc2	equ	0xFDE
  9394                           fsr2h	equ	0xFDA
  9395                           fsr2l	equ	0xFD9
  9396                           status	equ	0xFD8
  9397                           
  9398 ;; *************** function _Do_Save_New_Alarm_Time *****************
  9399 ;; Defined at:
  9400 ;;		line 140 in file "Setup_Alarm.c"
  9401 ;; Parameters:    Size  Location     Type
  9402 ;;		None
  9403 ;; Auto vars:     Size  Location     Type
  9404 ;;		None
  9405 ;; Return value:  Size  Location     Type
  9406 ;;		None               void
  9407 ;; Registers used:
  9408 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9409 ;; Tracked objects:
  9410 ;;		On entry : 0/0
  9411 ;;		On exit  : 0/0
  9412 ;;		Unchanged: 0/0
  9413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9414 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9415 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9416 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9417 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9418 ;;Total ram usage:        0 bytes
  9419 ;; Hardware stack levels used:    1
  9420 ;; Hardware stack levels required when called:   11
  9421 ;; This function calls:
  9422 ;;		_DS3231_Read_Alarm_Time
  9423 ;;		_DS3231_Read_Time
  9424 ;;		_DS3231_Write_Alarm_Time
  9425 ;;		_Initialize_Screen
  9426 ;; This function is called by:
  9427 ;;		_Do_Setup_Alarm_Time
  9428 ;; This function uses a non-reentrant model
  9429 ;;
  9430                           
  9431                           	psect	text45
  9432  003B5C                     __ptext45:
  9433                           	opt stack 0
  9434  003B5C                     _Do_Save_New_Alarm_Time:
  9435                           	opt stack 18
  9436                           
  9437                           ;Setup_Alarm.c: 142: DS3231_Write_Alarm_Time();
  9438                           
  9439                           ; BSR set to: 0
  9440                           ;incstack = 0
  9441  003B5C  EC77  F017         	call	_DS3231_Write_Alarm_Time	;wreg free
  9442                           
  9443                           ;Setup_Alarm.c: 143: DS3231_Read_Alarm_Time();
  9444  003B60  EC8A  F01A         	call	_DS3231_Read_Alarm_Time	;wreg free
  9445                           
  9446                           ;Setup_Alarm.c: 144: DS3231_Read_Time();
  9447  003B64  EC2F  F019         	call	_DS3231_Read_Time	;wreg free
  9448                           
  9449                           ;Setup_Alarm.c: 145: Initialize_Screen();
  9450  003B68  EC45  F003         	call	_Initialize_Screen	;wreg free
  9451                           
  9452                           ;Setup_Alarm.c: 146: In_Alarm_Time_Setup = 0;
  9453  003B6C  0E00               	movlw	0
  9454  003B6E  0100               	movlb	0	; () banked
  9455  003B70  6FF9               	movwf	_In_Alarm_Time_Setup& (0+255),b
  9456                           
  9457                           ; BSR set to: 0
  9458  003B72  0012               	return		;funcret
  9459  003B74                     __end_of_Do_Save_New_Alarm_Time:
  9460                           	opt stack 0
  9461                           tblptru	equ	0xFF8
  9462                           tblptrh	equ	0xFF7
  9463                           tblptrl	equ	0xFF6
  9464                           tablat	equ	0xFF5
  9465                           prodh	equ	0xFF4
  9466                           prodl	equ	0xFF3
  9467                           intcon	equ	0xFF2
  9468                           intcon2	equ	0xFF1
  9469                           postinc0	equ	0xFEE
  9470                           wreg	equ	0xFE8
  9471                           postdec1	equ	0xFE5
  9472                           fsr1l	equ	0xFE1
  9473                           postinc2	equ	0xFDE
  9474                           fsr2h	equ	0xFDA
  9475                           fsr2l	equ	0xFD9
  9476                           status	equ	0xFD8
  9477                           
  9478 ;; *************** function _Initialize_Screen *****************
  9479 ;; Defined at:
  9480 ;;		line 36 in file "Main_Screen.c"
  9481 ;; Parameters:    Size  Location     Type
  9482 ;;		None
  9483 ;; Auto vars:     Size  Location     Type
  9484 ;;		None
  9485 ;; Return value:  Size  Location     Type
  9486 ;;		None               void
  9487 ;; Registers used:
  9488 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9489 ;; Tracked objects:
  9490 ;;		On entry : 0/0
  9491 ;;		On exit  : 0/0
  9492 ;;		Unchanged: 0/0
  9493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9494 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9495 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9496 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9497 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9498 ;;Total ram usage:        0 bytes
  9499 ;; Hardware stack levels used:    1
  9500 ;; Hardware stack levels required when called:   10
  9501 ;; This function calls:
  9502 ;;		_LCD_Reset
  9503 ;;		_TFT_GreenTab_Initialize
  9504 ;;		_drawCircle
  9505 ;;		_drawtext
  9506 ;;		_fillScreen
  9507 ;;		_strcpy
  9508 ;; This function is called by:
  9509 ;;		_main
  9510 ;;		_Do_Save_New_Time
  9511 ;;		_Exit_Time_Setup
  9512 ;;		_Exit_Setup_Heater_Temp
  9513 ;;		_Do_Save_New_Heater_Temp
  9514 ;;		_Exit_Setup_Alarm_Time
  9515 ;;		_Do_Save_New_Alarm_Time
  9516 ;; This function uses a non-reentrant model
  9517 ;;
  9518                           
  9519                           	psect	text46
  9520  00068A                     __ptext46:
  9521                           	opt stack 0
  9522  00068A                     _Initialize_Screen:
  9523                           	opt stack 20
  9524                           
  9525                           ;Main_Screen.c: 38: LCD_Reset();
  9526                           
  9527                           ; BSR set to: 0
  9528                           ;incstack = 0
  9529  00068A  EC22  F01E         	call	_LCD_Reset	;wreg free
  9530                           
  9531                           ;Main_Screen.c: 39: TFT_GreenTab_Initialize();
  9532  00068E  ECB2  F01C         	call	_TFT_GreenTab_Initialize	;wreg free
  9533                           
  9534                           ;Main_Screen.c: 40: fillScreen(0x0000);
  9535  000692  0E00               	movlw	0
  9536  000694  6E25               	movwf	fillScreen@color+1,c
  9537  000696  0E00               	movlw	0
  9538  000698  6E24               	movwf	fillScreen@color,c
  9539  00069A  EC63  F01D         	call	_fillScreen	;wreg free
  9540                           
  9541                           ;Main_Screen.c: 42: strcpy(txt, "ECE3301L F'21\0");
  9542  00069E  C04E  F011         	movff	_txt,strcpy@to
  9543  0006A2  C04F  F012         	movff	_txt+1,strcpy@to+1
  9544  0006A6  0E60               	movlw	low STR_1
  9545  0006A8  6E13               	movwf	strcpy@from,c
  9546  0006AA  0EFF               	movlw	high STR_1
  9547  0006AC  6E14               	movwf	strcpy@from+1,c
  9548  0006AE  EC54  F01C         	call	_strcpy	;wreg free
  9549                           
  9550                           ;Main_Screen.c: 43: drawtext(1 , 1, txt, 0xFFFF , 0x0000, 1);
  9551  0006B2  0E01               	movlw	1
  9552  0006B4  6E39               	movwf	drawtext@y,c
  9553  0006B6  C04E  F03A         	movff	_txt,drawtext@_text
  9554  0006BA  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  9555  0006BE  0EFF               	movlw	255
  9556  0006C0  6E3D               	movwf	drawtext@color+1,c
  9557  0006C2  683C               	setf	drawtext@color,c
  9558  0006C4  0E00               	movlw	0
  9559  0006C6  6E3F               	movwf	drawtext@bg+1,c
  9560  0006C8  0E00               	movlw	0
  9561  0006CA  6E3E               	movwf	drawtext@bg,c
  9562  0006CC  0E01               	movlw	1
  9563  0006CE  6E40               	movwf	drawtext@size,c
  9564  0006D0  0E01               	movlw	1
  9565  0006D2  EC92  F00D         	call	_drawtext
  9566                           
  9567                           ;Main_Screen.c: 45: strcpy(txt, "Temperature");
  9568  0006D6  C04E  F011         	movff	_txt,strcpy@to
  9569  0006DA  C04F  F012         	movff	_txt+1,strcpy@to+1
  9570  0006DE  0E88               	movlw	low STR_2
  9571  0006E0  6E13               	movwf	strcpy@from,c
  9572  0006E2  0EFF               	movlw	high STR_2
  9573  0006E4  6E14               	movwf	strcpy@from+1,c
  9574  0006E6  EC54  F01C         	call	_strcpy	;wreg free
  9575                           
  9576                           ;Main_Screen.c: 46: drawtext(24 , 11 , txt, 0xF81F, 0x0000, 1);
  9577  0006EA  0E0B               	movlw	11
  9578  0006EC  6E39               	movwf	drawtext@y,c
  9579  0006EE  C04E  F03A         	movff	_txt,drawtext@_text
  9580  0006F2  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  9581  0006F6  0EF8               	movlw	248
  9582  0006F8  6E3D               	movwf	drawtext@color+1,c
  9583  0006FA  0E1F               	movlw	31
  9584  0006FC  6E3C               	movwf	drawtext@color,c
  9585  0006FE  0E00               	movlw	0
  9586  000700  6E3F               	movwf	drawtext@bg+1,c
  9587  000702  0E00               	movlw	0
  9588  000704  6E3E               	movwf	drawtext@bg,c
  9589  000706  0E01               	movlw	1
  9590  000708  6E40               	movwf	drawtext@size,c
  9591  00070A  0E18               	movlw	24
  9592  00070C  EC92  F00D         	call	_drawtext
  9593                           
  9594                           ;Main_Screen.c: 47: drawCircle(40, 23 , 2 , 0xFFE0);
  9595  000710  0E00               	movlw	0
  9596  000712  6E1D               	movwf	drawCircle@x0+1,c
  9597  000714  0E28               	movlw	40
  9598  000716  6E1C               	movwf	drawCircle@x0,c
  9599  000718  0E00               	movlw	0
  9600  00071A  6E1F               	movwf	drawCircle@y0+1,c
  9601  00071C  0E17               	movlw	23
  9602  00071E  6E1E               	movwf	drawCircle@y0,c
  9603  000720  0E00               	movlw	0
  9604  000722  6E21               	movwf	drawCircle@r+1,c
  9605  000724  0E02               	movlw	2
  9606  000726  6E20               	movwf	drawCircle@r,c
  9607  000728  0EFF               	movlw	255
  9608  00072A  6E23               	movwf	drawCircle@color+1,c
  9609  00072C  0EE0               	movlw	224
  9610  00072E  6E22               	movwf	drawCircle@color,c
  9611  000730  EC66  F009         	call	_drawCircle	;wreg free
  9612                           
  9613                           ;Main_Screen.c: 48: strcpy(txt, "C/");
  9614  000734  C04E  F011         	movff	_txt,strcpy@to
  9615  000738  C04F  F012         	movff	_txt+1,strcpy@to+1
  9616  00073C  0EF5               	movlw	low STR_3
  9617  00073E  6E13               	movwf	strcpy@from,c
  9618  000740  0EFF               	movlw	high STR_3
  9619  000742  6E14               	movwf	strcpy@from+1,c
  9620  000744  EC54  F01C         	call	_strcpy	;wreg free
  9621                           
  9622                           ;Main_Screen.c: 49: drawtext(45 , 23, txt, 0xFFE0 , 0x0000, 2);
  9623  000748  0E17               	movlw	23
  9624  00074A  6E39               	movwf	drawtext@y,c
  9625  00074C  C04E  F03A         	movff	_txt,drawtext@_text
  9626  000750  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  9627  000754  0EFF               	movlw	255
  9628  000756  6E3D               	movwf	drawtext@color+1,c
  9629  000758  0EE0               	movlw	224
  9630  00075A  6E3C               	movwf	drawtext@color,c
  9631  00075C  0E00               	movlw	0
  9632  00075E  6E3F               	movwf	drawtext@bg+1,c
  9633  000760  0E00               	movlw	0
  9634  000762  6E3E               	movwf	drawtext@bg,c
  9635  000764  0E02               	movlw	2
  9636  000766  6E40               	movwf	drawtext@size,c
  9637  000768  0E2D               	movlw	45
  9638  00076A  EC92  F00D         	call	_drawtext
  9639                           
  9640                           ;Main_Screen.c: 50: strcpy(txt, "F");
  9641  00076E  C04E  F011         	movff	_txt,strcpy@to
  9642  000772  C04F  F012         	movff	_txt+1,strcpy@to+1
  9643  000776  0EEF               	movlw	low (STR_16+2)
  9644  000778  6E13               	movwf	strcpy@from,c
  9645  00077A  0EFF               	movlw	high (STR_16+2)
  9646  00077C  6E14               	movwf	strcpy@from+1,c
  9647  00077E  EC54  F01C         	call	_strcpy	;wreg free
  9648                           
  9649                           ;Main_Screen.c: 51: drawCircle(110, 23 , 2 , 0xFFE0);
  9650  000782  0E00               	movlw	0
  9651  000784  6E1D               	movwf	drawCircle@x0+1,c
  9652  000786  0E6E               	movlw	110
  9653  000788  6E1C               	movwf	drawCircle@x0,c
  9654  00078A  0E00               	movlw	0
  9655  00078C  6E1F               	movwf	drawCircle@y0+1,c
  9656  00078E  0E17               	movlw	23
  9657  000790  6E1E               	movwf	drawCircle@y0,c
  9658  000792  0E00               	movlw	0
  9659  000794  6E21               	movwf	drawCircle@r+1,c
  9660  000796  0E02               	movlw	2
  9661  000798  6E20               	movwf	drawCircle@r,c
  9662  00079A  0EFF               	movlw	255
  9663  00079C  6E23               	movwf	drawCircle@color+1,c
  9664  00079E  0EE0               	movlw	224
  9665  0007A0  6E22               	movwf	drawCircle@color,c
  9666  0007A2  EC66  F009         	call	_drawCircle	;wreg free
  9667                           
  9668                           ;Main_Screen.c: 52: drawtext(115 , 23, txt, 0xFFE0 , 0x0000, 2);
  9669  0007A6  0E17               	movlw	23
  9670  0007A8  6E39               	movwf	drawtext@y,c
  9671  0007AA  C04E  F03A         	movff	_txt,drawtext@_text
  9672  0007AE  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  9673  0007B2  0EFF               	movlw	255
  9674  0007B4  6E3D               	movwf	drawtext@color+1,c
  9675  0007B6  0EE0               	movlw	224
  9676  0007B8  6E3C               	movwf	drawtext@color,c
  9677  0007BA  0E00               	movlw	0
  9678  0007BC  6E3F               	movwf	drawtext@bg+1,c
  9679  0007BE  0E00               	movlw	0
  9680  0007C0  6E3E               	movwf	drawtext@bg,c
  9681  0007C2  0E02               	movlw	2
  9682  0007C4  6E40               	movwf	drawtext@size,c
  9683  0007C6  0E73               	movlw	115
  9684  0007C8  EC92  F00D         	call	_drawtext
  9685                           
  9686                           ;Main_Screen.c: 53: strcpy(txt, "Time");
  9687  0007CC  C04E  F011         	movff	_txt,strcpy@to
  9688  0007D0  C04F  F012         	movff	_txt+1,strcpy@to+1
  9689  0007D4  0EB0               	movlw	low (STR_7+6)
  9690  0007D6  6E13               	movwf	strcpy@from,c
  9691  0007D8  0EFF               	movlw	high (STR_7+6)
  9692  0007DA  6E14               	movwf	strcpy@from+1,c
  9693  0007DC  EC54  F01C         	call	_strcpy	;wreg free
  9694                           
  9695                           ;Main_Screen.c: 54: drawtext(50 , 40 , txt, 0x001F , 0x0000, 1);
  9696  0007E0  0E28               	movlw	40
  9697  0007E2  6E39               	movwf	drawtext@y,c
  9698  0007E4  C04E  F03A         	movff	_txt,drawtext@_text
  9699  0007E8  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  9700  0007EC  0E00               	movlw	0
  9701  0007EE  6E3D               	movwf	drawtext@color+1,c
  9702  0007F0  0E1F               	movlw	31
  9703  0007F2  6E3C               	movwf	drawtext@color,c
  9704  0007F4  0E00               	movlw	0
  9705  0007F6  6E3F               	movwf	drawtext@bg+1,c
  9706  0007F8  0E00               	movlw	0
  9707  0007FA  6E3E               	movwf	drawtext@bg,c
  9708  0007FC  0E01               	movlw	1
  9709  0007FE  6E40               	movwf	drawtext@size,c
  9710  000800  0E32               	movlw	50
  9711  000802  EC92  F00D         	call	_drawtext
  9712                           
  9713                           ;Main_Screen.c: 55: strcpy(txt, "Date");
  9714  000806  C04E  F011         	movff	_txt,strcpy@to
  9715  00080A  C04F  F012         	movff	_txt+1,strcpy@to+1
  9716  00080E  0EDF               	movlw	low STR_6
  9717  000810  6E13               	movwf	strcpy@from,c
  9718  000812  0EFF               	movlw	high STR_6
  9719  000814  6E14               	movwf	strcpy@from+1,c
  9720  000816  EC54  F01C         	call	_strcpy	;wreg free
  9721                           
  9722                           ;Main_Screen.c: 56: drawtext(50 , 71 , txt, 0xF800 , 0x0000, 1);
  9723  00081A  0E47               	movlw	71
  9724  00081C  6E39               	movwf	drawtext@y,c
  9725  00081E  C04E  F03A         	movff	_txt,drawtext@_text
  9726  000822  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  9727  000826  0EF8               	movlw	248
  9728  000828  6E3D               	movwf	drawtext@color+1,c
  9729  00082A  0E00               	movlw	0
  9730  00082C  6E3C               	movwf	drawtext@color,c
  9731  00082E  0E00               	movlw	0
  9732  000830  6E3F               	movwf	drawtext@bg+1,c
  9733  000832  0E00               	movlw	0
  9734  000834  6E3E               	movwf	drawtext@bg,c
  9735  000836  0E01               	movlw	1
  9736  000838  6E40               	movwf	drawtext@size,c
  9737  00083A  0E32               	movlw	50
  9738  00083C  EC92  F00D         	call	_drawtext
  9739                           
  9740                           ;Main_Screen.c: 57: strcpy(txt, "Alarm Time");
  9741  000840  C04E  F011         	movff	_txt,strcpy@to
  9742  000844  C04F  F012         	movff	_txt+1,strcpy@to+1
  9743  000848  0EAA               	movlw	low STR_7
  9744  00084A  6E13               	movwf	strcpy@from,c
  9745  00084C  0EFF               	movlw	high STR_7
  9746  00084E  6E14               	movwf	strcpy@from+1,c
  9747  000850  EC54  F01C         	call	_strcpy	;wreg free
  9748                           
  9749                           ;Main_Screen.c: 58: drawtext(4 , 100 , txt, 0xFFE0, 0x0000, 1);
  9750  000854  0E64               	movlw	100
  9751  000856  6E39               	movwf	drawtext@y,c
  9752  000858  C04E  F03A         	movff	_txt,drawtext@_text
  9753  00085C  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  9754  000860  0EFF               	movlw	255
  9755  000862  6E3D               	movwf	drawtext@color+1,c
  9756  000864  0EE0               	movlw	224
  9757  000866  6E3C               	movwf	drawtext@color,c
  9758  000868  0E00               	movlw	0
  9759  00086A  6E3F               	movwf	drawtext@bg+1,c
  9760  00086C  0E00               	movlw	0
  9761  00086E  6E3E               	movwf	drawtext@bg,c
  9762  000870  0E01               	movlw	1
  9763  000872  6E40               	movwf	drawtext@size,c
  9764  000874  0E04               	movlw	4
  9765  000876  EC92  F00D         	call	_drawtext
  9766                           
  9767                           ;Main_Screen.c: 59: strcpy(txt, "Alarm SW");
  9768  00087A  C04E  F011         	movff	_txt,strcpy@to
  9769  00087E  C04F  F012         	movff	_txt+1,strcpy@to+1
  9770  000882  0EBF               	movlw	low STR_8
  9771  000884  6E13               	movwf	strcpy@from,c
  9772  000886  0EFF               	movlw	high STR_8
  9773  000888  6E14               	movwf	strcpy@from+1,c
  9774  00088A  EC54  F01C         	call	_strcpy	;wreg free
  9775                           
  9776                           ;Main_Screen.c: 60: drawtext(77, 100, txt, 0xFFE0, 0x0000, 1);
  9777  00088E  0E64               	movlw	100
  9778  000890  6E39               	movwf	drawtext@y,c
  9779  000892  C04E  F03A         	movff	_txt,drawtext@_text
  9780  000896  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  9781  00089A  0EFF               	movlw	255
  9782  00089C  6E3D               	movwf	drawtext@color+1,c
  9783  00089E  0EE0               	movlw	224
  9784  0008A0  6E3C               	movwf	drawtext@color,c
  9785  0008A2  0E00               	movlw	0
  9786  0008A4  6E3F               	movwf	drawtext@bg+1,c
  9787  0008A6  0E00               	movlw	0
  9788  0008A8  6E3E               	movwf	drawtext@bg,c
  9789  0008AA  0E01               	movlw	1
  9790  0008AC  6E40               	movwf	drawtext@size,c
  9791  0008AE  0E4D               	movlw	77
  9792  0008B0  EC92  F00D         	call	_drawtext
  9793                           
  9794                           ;Main_Screen.c: 61: strcpy(txt, "HTR Set Temp");
  9795  0008B4  C04E  F011         	movff	_txt,strcpy@to
  9796  0008B8  C04F  F012         	movff	_txt+1,strcpy@to+1
  9797  0008BC  0E6F               	movlw	low STR_9
  9798  0008BE  6E13               	movwf	strcpy@from,c
  9799  0008C0  0EFF               	movlw	high STR_9
  9800  0008C2  6E14               	movwf	strcpy@from+1,c
  9801  0008C4  EC54  F01C         	call	_strcpy	;wreg free
  9802                           
  9803                           ;Main_Screen.c: 62: drawtext(6, 120, txt, 0x001F , 0x0000, 1);
  9804  0008C8  0E78               	movlw	120
  9805  0008CA  6E39               	movwf	drawtext@y,c
  9806  0008CC  C04E  F03A         	movff	_txt,drawtext@_text
  9807  0008D0  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  9808  0008D4  0E00               	movlw	0
  9809  0008D6  6E3D               	movwf	drawtext@color+1,c
  9810  0008D8  0E1F               	movlw	31
  9811  0008DA  6E3C               	movwf	drawtext@color,c
  9812  0008DC  0E00               	movlw	0
  9813  0008DE  6E3F               	movwf	drawtext@bg+1,c
  9814  0008E0  0E00               	movlw	0
  9815  0008E2  6E3E               	movwf	drawtext@bg,c
  9816  0008E4  0E01               	movlw	1
  9817  0008E6  6E40               	movwf	drawtext@size,c
  9818  0008E8  0E06               	movlw	6
  9819  0008EA  EC92  F00D         	call	_drawtext
  9820                           
  9821                           ;Main_Screen.c: 63: strcpy(txt, "HTR SW");
  9822  0008EE  C04E  F011         	movff	_txt,strcpy@to
  9823  0008F2  C04F  F012         	movff	_txt+1,strcpy@to+1
  9824  0008F6  0ED8               	movlw	low STR_10
  9825  0008F8  6E13               	movwf	strcpy@from,c
  9826  0008FA  0EFF               	movlw	high STR_10
  9827  0008FC  6E14               	movwf	strcpy@from+1,c
  9828  0008FE  EC54  F01C         	call	_strcpy	;wreg free
  9829                           
  9830                           ;Main_Screen.c: 64: drawtext(85, 120, txt, 0x001F , 0x0000, 1);
  9831  000902  0E78               	movlw	120
  9832  000904  6E39               	movwf	drawtext@y,c
  9833  000906  C04E  F03A         	movff	_txt,drawtext@_text
  9834  00090A  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  9835  00090E  0E00               	movlw	0
  9836  000910  6E3D               	movwf	drawtext@color+1,c
  9837  000912  0E1F               	movlw	31
  9838  000914  6E3C               	movwf	drawtext@color,c
  9839  000916  0E00               	movlw	0
  9840  000918  6E3F               	movwf	drawtext@bg+1,c
  9841  00091A  0E00               	movlw	0
  9842  00091C  6E3E               	movwf	drawtext@bg,c
  9843  00091E  0E01               	movlw	1
  9844  000920  6E40               	movwf	drawtext@size,c
  9845  000922  0E55               	movlw	85
  9846  000924  EC92  F00D         	call	_drawtext
  9847                           
  9848                           ;Main_Screen.c: 65: strcpy(txt, "DC");
  9849  000928  C04E  F011         	movff	_txt,strcpy@to
  9850  00092C  C04F  F012         	movff	_txt+1,strcpy@to+1
  9851  000930  0EF8               	movlw	low STR_11
  9852  000932  6E13               	movwf	strcpy@from,c
  9853  000934  0EFF               	movlw	high STR_11
  9854  000936  6E14               	movwf	strcpy@from+1,c
  9855  000938  EC54  F01C         	call	_strcpy	;wreg free
  9856                           
  9857                           ;Main_Screen.c: 66: drawtext(12, 140, txt, 0xFFFF , 0x0000, 1);
  9858  00093C  0E8C               	movlw	140
  9859  00093E  6E39               	movwf	drawtext@y,c
  9860  000940  C04E  F03A         	movff	_txt,drawtext@_text
  9861  000944  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  9862  000948  0EFF               	movlw	255
  9863  00094A  6E3D               	movwf	drawtext@color+1,c
  9864  00094C  683C               	setf	drawtext@color,c
  9865  00094E  0E00               	movlw	0
  9866  000950  6E3F               	movwf	drawtext@bg+1,c
  9867  000952  0E00               	movlw	0
  9868  000954  6E3E               	movwf	drawtext@bg,c
  9869  000956  0E01               	movlw	1
  9870  000958  6E40               	movwf	drawtext@size,c
  9871  00095A  0E0C               	movlw	12
  9872  00095C  EC92  F00D         	call	_drawtext
  9873                           
  9874                           ;Main_Screen.c: 67: strcpy(txt, "RM");
  9875  000960  C04E  F011         	movff	_txt,strcpy@to
  9876  000964  C04F  F012         	movff	_txt+1,strcpy@to+1
  9877  000968  0EFB               	movlw	low STR_12
  9878  00096A  6E13               	movwf	strcpy@from,c
  9879  00096C  0EFF               	movlw	high STR_12
  9880  00096E  6E14               	movwf	strcpy@from+1,c
  9881  000970  EC54  F01C         	call	_strcpy	;wreg free
  9882                           
  9883                           ;Main_Screen.c: 68: drawtext(33, 140, txt, 0xFFFF , 0x0000 , 1);
  9884  000974  0E8C               	movlw	140
  9885  000976  6E39               	movwf	drawtext@y,c
  9886  000978  C04E  F03A         	movff	_txt,drawtext@_text
  9887  00097C  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  9888  000980  0EFF               	movlw	255
  9889  000982  6E3D               	movwf	drawtext@color+1,c
  9890  000984  683C               	setf	drawtext@color,c
  9891  000986  0E00               	movlw	0
  9892  000988  6E3F               	movwf	drawtext@bg+1,c
  9893  00098A  0E00               	movlw	0
  9894  00098C  6E3E               	movwf	drawtext@bg,c
  9895  00098E  0E01               	movlw	1
  9896  000990  6E40               	movwf	drawtext@size,c
  9897  000992  0E21               	movlw	33
  9898  000994  EC92  F00D         	call	_drawtext
  9899                           
  9900                           ;Main_Screen.c: 69: strcpy(txt, "Volt");
  9901  000998  C04E  F011         	movff	_txt,strcpy@to
  9902  00099C  C04F  F012         	movff	_txt+1,strcpy@to+1
  9903  0009A0  0EE4               	movlw	low STR_13
  9904  0009A2  6E13               	movwf	strcpy@from,c
  9905  0009A4  0EFF               	movlw	high STR_13
  9906  0009A6  6E14               	movwf	strcpy@from+1,c
  9907  0009A8  EC54  F01C         	call	_strcpy	;wreg free
  9908                           
  9909                           ;Main_Screen.c: 70: drawtext(50, 140, txt, 0xFFFF , 0x0000 , 1);
  9910  0009AC  0E8C               	movlw	140
  9911  0009AE  6E39               	movwf	drawtext@y,c
  9912  0009B0  C04E  F03A         	movff	_txt,drawtext@_text
  9913  0009B4  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  9914  0009B8  0EFF               	movlw	255
  9915  0009BA  6E3D               	movwf	drawtext@color+1,c
  9916  0009BC  683C               	setf	drawtext@color,c
  9917  0009BE  0E00               	movlw	0
  9918  0009C0  6E3F               	movwf	drawtext@bg+1,c
  9919  0009C2  0E00               	movlw	0
  9920  0009C4  6E3E               	movwf	drawtext@bg,c
  9921  0009C6  0E01               	movlw	1
  9922  0009C8  6E40               	movwf	drawtext@size,c
  9923  0009CA  0E32               	movlw	50
  9924  0009CC  EC92  F00D         	call	_drawtext
  9925                           
  9926                           ;Main_Screen.c: 71: strcpy(txt, "RPM");
  9927  0009D0  C04E  F011         	movff	_txt,strcpy@to
  9928  0009D4  C04F  F012         	movff	_txt+1,strcpy@to+1
  9929  0009D8  0EF1               	movlw	low STR_14
  9930  0009DA  6E13               	movwf	strcpy@from,c
  9931  0009DC  0EFF               	movlw	high STR_14
  9932  0009DE  6E14               	movwf	strcpy@from+1,c
  9933  0009E0  EC54  F01C         	call	_strcpy	;wreg free
  9934                           
  9935                           ;Main_Screen.c: 72: drawtext(95, 140, txt, 0xFFFF , 0x0000 , 1);
  9936  0009E4  0E8C               	movlw	140
  9937  0009E6  6E39               	movwf	drawtext@y,c
  9938  0009E8  C04E  F03A         	movff	_txt,drawtext@_text
  9939  0009EC  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  9940  0009F0  0EFF               	movlw	255
  9941  0009F2  6E3D               	movwf	drawtext@color+1,c
  9942  0009F4  683C               	setf	drawtext@color,c
  9943  0009F6  0E00               	movlw	0
  9944  0009F8  6E3F               	movwf	drawtext@bg+1,c
  9945  0009FA  0E00               	movlw	0
  9946  0009FC  6E3E               	movwf	drawtext@bg,c
  9947  0009FE  0E01               	movlw	1
  9948  000A00  6E40               	movwf	drawtext@size,c
  9949  000A02  0E5F               	movlw	95
  9950  000A04  EC92  F00D         	call	_drawtext
  9951  000A08  0012               	return		;funcret
  9952  000A0A                     __end_of_Initialize_Screen:
  9953                           	opt stack 0
  9954                           tblptru	equ	0xFF8
  9955                           tblptrh	equ	0xFF7
  9956                           tblptrl	equ	0xFF6
  9957                           tablat	equ	0xFF5
  9958                           prodh	equ	0xFF4
  9959                           prodl	equ	0xFF3
  9960                           intcon	equ	0xFF2
  9961                           intcon2	equ	0xFF1
  9962                           postinc0	equ	0xFEE
  9963                           wreg	equ	0xFE8
  9964                           postdec1	equ	0xFE5
  9965                           fsr1l	equ	0xFE1
  9966                           postinc2	equ	0xFDE
  9967                           fsr2h	equ	0xFDA
  9968                           fsr2l	equ	0xFD9
  9969                           status	equ	0xFD8
  9970                           
  9971 ;; *************** function _strcpy *****************
  9972 ;; Defined at:
  9973 ;;		line 8 in file "E:\XC8\sources\common\strcpy.c"
  9974 ;; Parameters:    Size  Location     Type
  9975 ;;  to              2   16[COMRAM] PTR unsigned char 
  9976 ;;		 -> NULL(0), Heater_SW_Txt(4), Alarm_SW_Txt(4), 
  9977 ;;  from            2   18[COMRAM] PTR const unsigned char 
  9978 ;;		 -> STR_36(5), STR_35(8), STR_34(8), STR_33(20), 
  9979 ;;		 -> STR_32(16), STR_31(10), STR_30(11), STR_29(21), 
  9980 ;;		 -> STR_28(5), STR_27(5), STR_26(12), STR_25(21), 
  9981 ;;		 -> STR_18(4), STR_17(4), STR_16(4), STR_15(4), 
  9982 ;;		 -> STR_14(4), STR_13(5), STR_12(3), STR_11(3), 
  9983 ;;		 -> STR_10(7), STR_9(13), STR_8(9), STR_7(11), 
  9984 ;;		 -> STR_6(5), STR_5(5), STR_4(2), STR_3(3), 
  9985 ;;		 -> STR_2(12), STR_1(15), 
  9986 ;; Auto vars:     Size  Location     Type
  9987 ;;  cp              2   20[COMRAM] PTR unsigned char 
  9988 ;;		 -> NULL(0), Heater_SW_Txt(4), Alarm_SW_Txt(4), 
  9989 ;; Return value:  Size  Location     Type
  9990 ;;                  2   16[COMRAM] PTR unsigned char 
  9991 ;; Registers used:
  9992 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  9993 ;; Tracked objects:
  9994 ;;		On entry : 0/0
  9995 ;;		On exit  : 0/0
  9996 ;;		Unchanged: 0/0
  9997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9998 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9999 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10000 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10001 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10002 ;;Total ram usage:        6 bytes
 10003 ;; Hardware stack levels used:    1
 10004 ;; Hardware stack levels required when called:    3
 10005 ;; This function calls:
 10006 ;;		Nothing
 10007 ;; This function is called by:
 10008 ;;		_Initialize_Screen
 10009 ;;		_Update_Screen
 10010 ;;		_Initialize_Setup_Time_Screen
 10011 ;;		_Initialize_Setup_Heater_Screen
 10012 ;;		_Initialize_Setup_Alarm_Time_Screen
 10013 ;; This function uses a non-reentrant model
 10014 ;;
 10015                           
 10016                           	psect	text47
 10017  0038A8                     __ptext47:
 10018                           	opt stack 0
 10019  0038A8                     _strcpy:
 10020                           	opt stack 26
 10021                           
 10022                           ;incstack = 0
 10023  0038A8  C011  F015         	movff	strcpy@to,strcpy@cp
 10024  0038AC  C012  F016         	movff	strcpy@to+1,strcpy@cp+1
 10025  0038B0  D005               	goto	l8465
 10026  0038B2                     l8463:
 10027  0038B2  4A15               	infsnz	strcpy@cp,f,c
 10028  0038B4  2A16               	incf	strcpy@cp+1,f,c
 10029  0038B6  4A13               	infsnz	strcpy@from,f,c
 10030  0038B8  2A14               	incf	strcpy@from+1,f,c
 10031  0038BA  D000               	goto	l8465
 10032  0038BC                     l8465:
 10033  0038BC  C013  FFF6         	movff	strcpy@from,tblptrl
 10034  0038C0  C014  FFF7         	movff	strcpy@from+1,tblptrh
 10035  0038C4                     	if	0	;tblptru may be non-zero
 10036  0038C4                     	endif
 10037  0038C4                     	if	0	;tblptru may be non-zero
 10038  0038C4                     	endif
 10039  0038C4  C015  FFD9         	movff	strcpy@cp,fsr2l
 10040  0038C8  C016  FFDA         	movff	strcpy@cp+1,fsr2h
 10041  0038CC  0008               	tblrd		*
 10042  0038CE  CFF5 FFDF          	movff	tablat,indf2
 10043  0038D2  50DF               	movf	indf2,w,c
 10044  0038D4  A4D8               	btfss	status,2,c
 10045  0038D6  D7ED               	goto	l8463
 10046                           
 10047                           ;	Return value of _strcpy is never used
 10048  0038D8  0012               	return		;funcret
 10049  0038DA                     __end_of_strcpy:
 10050                           	opt stack 0
 10051                           tblptru	equ	0xFF8
 10052                           tblptrh	equ	0xFF7
 10053                           tblptrl	equ	0xFF6
 10054                           tablat	equ	0xFF5
 10055                           prodh	equ	0xFF4
 10056                           prodl	equ	0xFF3
 10057                           intcon	equ	0xFF2
 10058                           intcon2	equ	0xFF1
 10059                           postinc0	equ	0xFEE
 10060                           wreg	equ	0xFE8
 10061                           postdec1	equ	0xFE5
 10062                           fsr1l	equ	0xFE1
 10063                           indf2	equ	0xFDF
 10064                           postinc2	equ	0xFDE
 10065                           fsr2h	equ	0xFDA
 10066                           fsr2l	equ	0xFD9
 10067                           status	equ	0xFD8
 10068                           
 10069 ;; *************** function _fillScreen *****************
 10070 ;; Defined at:
 10071 ;;		line 619 in file "ST7735_TFT.c"
 10072 ;; Parameters:    Size  Location     Type
 10073 ;;  color           2   35[COMRAM] unsigned int 
 10074 ;; Auto vars:     Size  Location     Type
 10075 ;;		None
 10076 ;; Return value:  Size  Location     Type
 10077 ;;		None               void
 10078 ;; Registers used:
 10079 ;;		wreg, status,2, status,0, cstack
 10080 ;; Tracked objects:
 10081 ;;		On entry : 0/0
 10082 ;;		On exit  : 0/0
 10083 ;;		Unchanged: 0/0
 10084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10085 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10086 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10087 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10088 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10089 ;;Total ram usage:        2 bytes
 10090 ;; Hardware stack levels used:    1
 10091 ;; Hardware stack levels required when called:    7
 10092 ;; This function calls:
 10093 ;;		_fillRectangle
 10094 ;; This function is called by:
 10095 ;;		_Initialize_Screen
 10096 ;;		_Initialize_Setup_Time_Screen
 10097 ;;		_Initialize_Setup_Heater_Screen
 10098 ;;		_Initialize_Setup_Alarm_Time_Screen
 10099 ;; This function uses a non-reentrant model
 10100 ;;
 10101                           
 10102                           	psect	text48
 10103  003AC6                     __ptext48:
 10104                           	opt stack 0
 10105  003AC6                     _fillScreen:
 10106                           	opt stack 22
 10107                           
 10108                           ;ST7735_TFT.c: 621: fillRectangle(0, 0, 128, 160, color);
 10109                           
 10110                           ;incstack = 0
 10111  003AC6  0E00               	movlw	0
 10112  003AC8  6E18               	movwf	fillRectangle@y,c
 10113  003ACA  0E80               	movlw	128
 10114  003ACC  6E19               	movwf	fillRectangle@w,c
 10115  003ACE  0EA0               	movlw	160
 10116  003AD0  6E1A               	movwf	fillRectangle@h,c
 10117  003AD2  C024  F01B         	movff	fillScreen@color,fillRectangle@color
 10118  003AD6  C025  F01C         	movff	fillScreen@color+1,fillRectangle@color+1
 10119  003ADA  0E00               	movlw	0
 10120  003ADC  ECF0  F011         	call	_fillRectangle
 10121  003AE0  0012               	return		;funcret
 10122  003AE2                     __end_of_fillScreen:
 10123                           	opt stack 0
 10124                           tblptru	equ	0xFF8
 10125                           tblptrh	equ	0xFF7
 10126                           tblptrl	equ	0xFF6
 10127                           tablat	equ	0xFF5
 10128                           prodh	equ	0xFF4
 10129                           prodl	equ	0xFF3
 10130                           intcon	equ	0xFF2
 10131                           intcon2	equ	0xFF1
 10132                           postinc0	equ	0xFEE
 10133                           wreg	equ	0xFE8
 10134                           postdec1	equ	0xFE5
 10135                           fsr1l	equ	0xFE1
 10136                           indf2	equ	0xFDF
 10137                           postinc2	equ	0xFDE
 10138                           fsr2h	equ	0xFDA
 10139                           fsr2l	equ	0xFD9
 10140                           status	equ	0xFD8
 10141                           
 10142 ;; *************** function _fillRectangle *****************
 10143 ;; Defined at:
 10144 ;;		line 503 in file "ST7735_TFT.c"
 10145 ;; Parameters:    Size  Location     Type
 10146 ;;  x               1    wreg     unsigned char 
 10147 ;;  y               1   23[COMRAM] unsigned char 
 10148 ;;  w               1   24[COMRAM] unsigned char 
 10149 ;;  h               1   25[COMRAM] unsigned char 
 10150 ;;  color           2   26[COMRAM] unsigned int 
 10151 ;; Auto vars:     Size  Location     Type
 10152 ;;  x               1   34[COMRAM] unsigned char 
 10153 ;;  lo              1   33[COMRAM] unsigned char 
 10154 ;;  hi              1   32[COMRAM] unsigned char 
 10155 ;; Return value:  Size  Location     Type
 10156 ;;		None               void
 10157 ;; Registers used:
 10158 ;;		wreg, status,2, status,0, cstack
 10159 ;; Tracked objects:
 10160 ;;		On entry : 0/0
 10161 ;;		On exit  : 0/0
 10162 ;;		Unchanged: 0/0
 10163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10164 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10165 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10166 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10167 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10168 ;;Total ram usage:       12 bytes
 10169 ;; Hardware stack levels used:    1
 10170 ;; Hardware stack levels required when called:    6
 10171 ;; This function calls:
 10172 ;;		_setAddrWindow
 10173 ;;		_spiwrite
 10174 ;; This function is called by:
 10175 ;;		_fillScreen
 10176 ;; This function uses a non-reentrant model
 10177 ;;
 10178                           
 10179                           	psect	text49
 10180  0023E0                     __ptext49:
 10181                           	opt stack 0
 10182  0023E0                     _fillRectangle:
 10183                           	opt stack 22
 10184                           
 10185                           ;incstack = 0
 10186                           ;fillRectangle@x stored from wreg
 10187  0023E0  6E23               	movwf	fillRectangle@x,c
 10188                           
 10189                           ;ST7735_TFT.c: 505: unsigned char hi, lo;
 10190                           ;ST7735_TFT.c: 506: if((x >= 128) || (y >= 160))
 10191  0023E2  0E80               	movlw	128
 10192  0023E4  6023               	cpfslt	fillRectangle@x,c
 10193  0023E6  D069               	goto	l459
 10194  0023E8  0E9F               	movlw	159
 10195  0023EA  6418               	cpfsgt	fillRectangle@y,c
 10196  0023EC  D001               	goto	l8143
 10197                           
 10198                           ;ST7735_TFT.c: 507: return;
 10199  0023EE  D065               	goto	l459
 10200  0023F0                     l8143:
 10201                           
 10202                           ;ST7735_TFT.c: 508: if((x + w - 1) >= 128)
 10203  0023F0  0EFF               	movlw	255
 10204  0023F2  6E1D               	movwf	??_fillRectangle& (0+255),c
 10205  0023F4  0EFF               	movlw	255
 10206  0023F6  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
 10207  0023F8  5019               	movf	fillRectangle@w,w,c
 10208  0023FA  C023  F01F         	movff	fillRectangle@x,??_fillRectangle+2
 10209  0023FE  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
 10210  002400  261F               	addwf	??_fillRectangle+2,f,c
 10211  002402  0E00               	movlw	0
 10212  002404  2220               	addwfc	??_fillRectangle+3,f,c
 10213  002406  501D               	movf	??_fillRectangle,w,c
 10214  002408  261F               	addwf	??_fillRectangle+2,f,c
 10215  00240A  501E               	movf	??_fillRectangle+1,w,c
 10216  00240C  2220               	addwfc	??_fillRectangle+3,f,c
 10217  00240E  BE20               	btfsc	??_fillRectangle+3,7,c
 10218  002410  D00A               	goto	l460
 10219  002412  5020               	movf	??_fillRectangle+3,w,c
 10220  002414  E104               	bnz	u5580
 10221  002416  0E80               	movlw	128
 10222  002418  5C1F               	subwf	??_fillRectangle+2,w,c
 10223  00241A  A0D8               	btfss	status,0,c
 10224  00241C  D004               	goto	l460
 10225  00241E                     u5580:
 10226                           
 10227                           ;ST7735_TFT.c: 509: w = 128 - x;
 10228  00241E  5023               	movf	fillRectangle@x,w,c
 10229  002420  0800               	sublw	0
 10230  002422  0F80               	addlw	128
 10231  002424  6E19               	movwf	fillRectangle@w,c
 10232  002426                     l460:
 10233                           
 10234                           ;ST7735_TFT.c: 510: if((y + h - 1) >= 160)
 10235  002426  0EFF               	movlw	255
 10236  002428  6E1D               	movwf	??_fillRectangle& (0+255),c
 10237  00242A  0EFF               	movlw	255
 10238  00242C  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
 10239  00242E  501A               	movf	fillRectangle@h,w,c
 10240  002430  C018  F01F         	movff	fillRectangle@y,??_fillRectangle+2
 10241  002434  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
 10242  002436  261F               	addwf	??_fillRectangle+2,f,c
 10243  002438  0E00               	movlw	0
 10244  00243A  2220               	addwfc	??_fillRectangle+3,f,c
 10245  00243C  501D               	movf	??_fillRectangle,w,c
 10246  00243E  261F               	addwf	??_fillRectangle+2,f,c
 10247  002440  501E               	movf	??_fillRectangle+1,w,c
 10248  002442  2220               	addwfc	??_fillRectangle+3,f,c
 10249  002444  BE20               	btfsc	??_fillRectangle+3,7,c
 10250  002446  D00B               	goto	l8149
 10251  002448  5020               	movf	??_fillRectangle+3,w,c
 10252  00244A  E104               	bnz	u5590
 10253  00244C  0EA0               	movlw	160
 10254  00244E  5C1F               	subwf	??_fillRectangle+2,w,c
 10255  002450  A0D8               	btfss	status,0,c
 10256  002452  D005               	goto	l8149
 10257  002454                     u5590:
 10258                           
 10259                           ;ST7735_TFT.c: 511: h = 160 - y;
 10260  002454  5018               	movf	fillRectangle@y,w,c
 10261  002456  0800               	sublw	0
 10262  002458  0FA0               	addlw	160
 10263  00245A  6E1A               	movwf	fillRectangle@h,c
 10264  00245C  D000               	goto	l8149
 10265  00245E                     l8149:
 10266                           
 10267                           ;ST7735_TFT.c: 512: setAddrWindow(x, y, x+w-1, y+h-1);
 10268  00245E  C018  F014         	movff	fillRectangle@y,setAddrWindow@y0
 10269  002462  5023               	movf	fillRectangle@x,w,c
 10270  002464  2419               	addwf	fillRectangle@w,w,c
 10271  002466  6E1D               	movwf	??_fillRectangle& (0+255),c
 10272  002468  041D               	decf	??_fillRectangle,w,c
 10273  00246A  6E15               	movwf	setAddrWindow@x1,c
 10274  00246C  5018               	movf	fillRectangle@y,w,c
 10275  00246E  241A               	addwf	fillRectangle@h,w,c
 10276  002470  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
 10277  002472  041E               	decf	??_fillRectangle+1,w,c
 10278  002474  6E16               	movwf	setAddrWindow@y1,c
 10279  002476  5023               	movf	fillRectangle@x,w,c
 10280  002478  EC63  F01A         	call	_setAddrWindow
 10281                           
 10282                           ;ST7735_TFT.c: 513: hi = color >> 8; lo = color;
 10283  00247C  501C               	movf	fillRectangle@color+1,w,c
 10284  00247E  6E21               	movwf	fillRectangle@hi,c
 10285  002480  C01B  F022         	movff	fillRectangle@color,fillRectangle@lo
 10286                           
 10287                           ;ST7735_TFT.c: 514: PORTDbits.RD0 = 1;
 10288  002484  8083               	bsf	3971,0,c	;volatile
 10289                           
 10290                           ;ST7735_TFT.c: 515: PORTDbits.RD1 = 0;
 10291  002486  9283               	bcf	3971,1,c	;volatile
 10292                           
 10293                           ;ST7735_TFT.c: 517: for(y=h; y>0; y--) {
 10294  002488  C01A  F018         	movff	fillRectangle@h,fillRectangle@y
 10295  00248C                     l8161:
 10296  00248C  5018               	movf	fillRectangle@y,w,c
 10297  00248E  B4D8               	btfsc	status,2,c
 10298  002490  D013               	goto	l463
 10299  002492  D001               	goto	l462
 10300  002494  D011               	goto	l463
 10301  002496                     l462:
 10302                           
 10303                           ;ST7735_TFT.c: 518: for(x = w; x > 0; x--) {
 10304  002496  C019  F023         	movff	fillRectangle@w,fillRectangle@x
 10305  00249A                     l8165:
 10306  00249A  5023               	movf	fillRectangle@x,w,c
 10307  00249C  B4D8               	btfsc	status,2,c
 10308  00249E  D00A               	goto	l8175
 10309  0024A0  D001               	goto	l8169
 10310  0024A2  D008               	goto	l8175
 10311  0024A4                     l8169:
 10312                           
 10313                           ;ST7735_TFT.c: 519: spiwrite(hi);
 10314  0024A4  5021               	movf	fillRectangle@hi,w,c
 10315  0024A6  EC05  F01E         	call	_spiwrite
 10316                           
 10317                           ;ST7735_TFT.c: 520: spiwrite(lo);
 10318  0024AA  5022               	movf	fillRectangle@lo,w,c
 10319  0024AC  EC05  F01E         	call	_spiwrite
 10320  0024B0  0623               	decf	fillRectangle@x,f,c
 10321  0024B2  D7F3               	goto	l8165
 10322  0024B4                     l8175:
 10323  0024B4  0618               	decf	fillRectangle@y,f,c
 10324  0024B6  D7EA               	goto	l8161
 10325  0024B8                     l463:
 10326                           
 10327                           ;ST7735_TFT.c: 521: }
 10328                           ;ST7735_TFT.c: 522: }
 10329                           ;ST7735_TFT.c: 523: PORTDbits.RD1 = 1;
 10330  0024B8  8283               	bsf	3971,1,c	;volatile
 10331  0024BA                     l459:
 10332  0024BA  0012               	return		;funcret
 10333  0024BC                     __end_of_fillRectangle:
 10334                           	opt stack 0
 10335                           tblptru	equ	0xFF8
 10336                           tblptrh	equ	0xFF7
 10337                           tblptrl	equ	0xFF6
 10338                           tablat	equ	0xFF5
 10339                           prodh	equ	0xFF4
 10340                           prodl	equ	0xFF3
 10341                           intcon	equ	0xFF2
 10342                           intcon2	equ	0xFF1
 10343                           postinc0	equ	0xFEE
 10344                           wreg	equ	0xFE8
 10345                           postdec1	equ	0xFE5
 10346                           fsr1l	equ	0xFE1
 10347                           indf2	equ	0xFDF
 10348                           postinc2	equ	0xFDE
 10349                           fsr2h	equ	0xFDA
 10350                           fsr2l	equ	0xFD9
 10351                           status	equ	0xFD8
 10352                           
 10353 ;; *************** function _drawCircle *****************
 10354 ;; Defined at:
 10355 ;;		line 528 in file "ST7735_TFT.c"
 10356 ;; Parameters:    Size  Location     Type
 10357 ;;  x0              2   27[COMRAM] int 
 10358 ;;  y0              2   29[COMRAM] int 
 10359 ;;  r               2   31[COMRAM] int 
 10360 ;;  color           2   33[COMRAM] unsigned int 
 10361 ;; Auto vars:     Size  Location     Type
 10362 ;;  y               2   45[COMRAM] int 
 10363 ;;  x               2   43[COMRAM] int 
 10364 ;;  f               2   41[COMRAM] int 
 10365 ;;  ddF_y           2   39[COMRAM] int 
 10366 ;;  ddF_x           2   37[COMRAM] int 
 10367 ;; Return value:  Size  Location     Type
 10368 ;;		None               void
 10369 ;; Registers used:
 10370 ;;		wreg, status,2, status,0, cstack
 10371 ;; Tracked objects:
 10372 ;;		On entry : 0/0
 10373 ;;		On exit  : 0/0
 10374 ;;		Unchanged: 0/0
 10375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10376 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10377 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10378 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10379 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10380 ;;Total ram usage:       20 bytes
 10381 ;; Hardware stack levels used:    1
 10382 ;; Hardware stack levels required when called:    7
 10383 ;; This function calls:
 10384 ;;		_drawPixel
 10385 ;; This function is called by:
 10386 ;;		_Initialize_Screen
 10387 ;; This function uses a non-reentrant model
 10388 ;;
 10389                           
 10390                           	psect	text50
 10391  0012CC                     __ptext50:
 10392                           	opt stack 0
 10393  0012CC                     _drawCircle:
 10394                           	opt stack 22
 10395                           
 10396                           ;ST7735_TFT.c: 530: signed int f, ddF_x, ddF_y, x, y;
 10397                           ;ST7735_TFT.c: 531: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
 10398                           
 10399                           ;incstack = 0
 10400  0012CC  C020  F024         	movff	drawCircle@r,??_drawCircle
 10401  0012D0  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
 10402  0012D4  1E24               	comf	??_drawCircle,f,c
 10403  0012D6  1E25               	comf	??_drawCircle+1,f,c
 10404  0012D8  4A24               	infsnz	??_drawCircle,f,c
 10405  0012DA  2A25               	incf	??_drawCircle+1,f,c
 10406  0012DC  0E01               	movlw	1
 10407  0012DE  2424               	addwf	??_drawCircle,w,c
 10408  0012E0  6E2A               	movwf	drawCircle@f,c
 10409  0012E2  0E00               	movlw	0
 10410  0012E4  2025               	addwfc	??_drawCircle+1,w,c
 10411  0012E6  6E2B               	movwf	drawCircle@f+1,c
 10412  0012E8  0E00               	movlw	0
 10413  0012EA  6E27               	movwf	drawCircle@ddF_x+1,c
 10414  0012EC  0E01               	movlw	1
 10415  0012EE  6E26               	movwf	drawCircle@ddF_x,c
 10416  0012F0  C020  F024         	movff	drawCircle@r,??_drawCircle
 10417  0012F4  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
 10418  0012F8  90D8               	bcf	status,0,c
 10419  0012FA  3624               	rlcf	??_drawCircle,f,c
 10420  0012FC  3625               	rlcf	??_drawCircle+1,f,c
 10421  0012FE  1E24               	comf	??_drawCircle,f,c
 10422  001300  1E25               	comf	??_drawCircle+1,f,c
 10423  001302  4A24               	infsnz	??_drawCircle,f,c
 10424  001304  2A25               	incf	??_drawCircle+1,f,c
 10425  001306  C024  F028         	movff	??_drawCircle,drawCircle@ddF_y
 10426  00130A  C025  F029         	movff	??_drawCircle+1,drawCircle@ddF_y+1
 10427  00130E  0E00               	movlw	0
 10428  001310  6E2D               	movwf	drawCircle@x+1,c
 10429  001312  0E00               	movlw	0
 10430  001314  6E2C               	movwf	drawCircle@x,c
 10431  001316  C020  F02E         	movff	drawCircle@r,drawCircle@y
 10432  00131A  C021  F02F         	movff	drawCircle@r+1,drawCircle@y+1
 10433                           
 10434                           ;ST7735_TFT.c: 532: drawPixel(x0 , y0 + r, color);
 10435  00131E  501E               	movf	drawCircle@y0,w,c
 10436  001320  2420               	addwf	drawCircle@r,w,c
 10437  001322  6E18               	movwf	drawPixel@y,c
 10438  001324  C022  F019         	movff	drawCircle@color,drawPixel@color
 10439  001328  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 10440  00132C  501C               	movf	drawCircle@x0,w,c
 10441  00132E  EC85  F01C         	call	_drawPixel
 10442                           
 10443                           ;ST7735_TFT.c: 533: drawPixel(x0 , y0 - r, color);
 10444  001332  5020               	movf	drawCircle@r,w,c
 10445  001334  0800               	sublw	0
 10446  001336  241E               	addwf	drawCircle@y0,w,c
 10447  001338  6E18               	movwf	drawPixel@y,c
 10448  00133A  C022  F019         	movff	drawCircle@color,drawPixel@color
 10449  00133E  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 10450  001342  501C               	movf	drawCircle@x0,w,c
 10451  001344  EC85  F01C         	call	_drawPixel
 10452                           
 10453                           ;ST7735_TFT.c: 534: drawPixel(x0+r, y0 , color);
 10454  001348  C01E  F018         	movff	drawCircle@y0,drawPixel@y
 10455  00134C  C022  F019         	movff	drawCircle@color,drawPixel@color
 10456  001350  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 10457  001354  501C               	movf	drawCircle@x0,w,c
 10458  001356  2420               	addwf	drawCircle@r,w,c
 10459  001358  EC85  F01C         	call	_drawPixel
 10460                           
 10461                           ;ST7735_TFT.c: 535: drawPixel(x0-r, y0 , color);
 10462  00135C  C01E  F018         	movff	drawCircle@y0,drawPixel@y
 10463  001360  C022  F019         	movff	drawCircle@color,drawPixel@color
 10464  001364  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 10465  001368  5020               	movf	drawCircle@r,w,c
 10466  00136A  0800               	sublw	0
 10467  00136C  241C               	addwf	drawCircle@x0,w,c
 10468  00136E  EC85  F01C         	call	_drawPixel
 10469                           
 10470                           ;ST7735_TFT.c: 536: while (x < y) {
 10471  001372  D078               	goto	l8441
 10472  001374                     l8413:
 10473                           
 10474                           ;ST7735_TFT.c: 537: if (f >= 0) {
 10475  001374  BE2B               	btfsc	drawCircle@f+1,7,c
 10476  001376  D00B               	goto	l470
 10477                           
 10478                           ;ST7735_TFT.c: 538: y--;
 10479  001378  062E               	decf	drawCircle@y,f,c
 10480  00137A  A0D8               	btfss	status,0,c
 10481  00137C  062F               	decf	drawCircle@y+1,f,c
 10482                           
 10483                           ;ST7735_TFT.c: 539: ddF_y += 2;
 10484  00137E  0E02               	movlw	2
 10485  001380  2628               	addwf	drawCircle@ddF_y,f,c
 10486  001382  0E00               	movlw	0
 10487  001384  2229               	addwfc	drawCircle@ddF_y+1,f,c
 10488                           
 10489                           ;ST7735_TFT.c: 540: f += ddF_y;
 10490  001386  5028               	movf	drawCircle@ddF_y,w,c
 10491  001388  262A               	addwf	drawCircle@f,f,c
 10492  00138A  5029               	movf	drawCircle@ddF_y+1,w,c
 10493  00138C  222B               	addwfc	drawCircle@f+1,f,c
 10494  00138E                     l470:
 10495                           
 10496                           ;ST7735_TFT.c: 541: }
 10497                           ;ST7735_TFT.c: 542: x++;
 10498  00138E  4A2C               	infsnz	drawCircle@x,f,c
 10499  001390  2A2D               	incf	drawCircle@x+1,f,c
 10500                           
 10501                           ;ST7735_TFT.c: 543: ddF_x += 2;
 10502  001392  0E02               	movlw	2
 10503  001394  2626               	addwf	drawCircle@ddF_x,f,c
 10504  001396  0E00               	movlw	0
 10505  001398  2227               	addwfc	drawCircle@ddF_x+1,f,c
 10506                           
 10507                           ;ST7735_TFT.c: 544: f += ddF_x;
 10508  00139A  5026               	movf	drawCircle@ddF_x,w,c
 10509  00139C  262A               	addwf	drawCircle@f,f,c
 10510  00139E  5027               	movf	drawCircle@ddF_x+1,w,c
 10511  0013A0  222B               	addwfc	drawCircle@f+1,f,c
 10512                           
 10513                           ;ST7735_TFT.c: 545: drawPixel(x0 + x, y0 + y, color);
 10514  0013A2  501E               	movf	drawCircle@y0,w,c
 10515  0013A4  242E               	addwf	drawCircle@y,w,c
 10516  0013A6  6E18               	movwf	drawPixel@y,c
 10517  0013A8  C022  F019         	movff	drawCircle@color,drawPixel@color
 10518  0013AC  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 10519  0013B0  501C               	movf	drawCircle@x0,w,c
 10520  0013B2  242C               	addwf	drawCircle@x,w,c
 10521  0013B4  EC85  F01C         	call	_drawPixel
 10522                           
 10523                           ;ST7735_TFT.c: 546: drawPixel(x0 - x, y0 + y, color);
 10524  0013B8  501E               	movf	drawCircle@y0,w,c
 10525  0013BA  242E               	addwf	drawCircle@y,w,c
 10526  0013BC  6E18               	movwf	drawPixel@y,c
 10527  0013BE  C022  F019         	movff	drawCircle@color,drawPixel@color
 10528  0013C2  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 10529  0013C6  502C               	movf	drawCircle@x,w,c
 10530  0013C8  0800               	sublw	0
 10531  0013CA  241C               	addwf	drawCircle@x0,w,c
 10532  0013CC  EC85  F01C         	call	_drawPixel
 10533                           
 10534                           ;ST7735_TFT.c: 547: drawPixel(x0 + x, y0 - y, color);
 10535  0013D0  502E               	movf	drawCircle@y,w,c
 10536  0013D2  0800               	sublw	0
 10537  0013D4  241E               	addwf	drawCircle@y0,w,c
 10538  0013D6  6E18               	movwf	drawPixel@y,c
 10539  0013D8  C022  F019         	movff	drawCircle@color,drawPixel@color
 10540  0013DC  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 10541  0013E0  501C               	movf	drawCircle@x0,w,c
 10542  0013E2  242C               	addwf	drawCircle@x,w,c
 10543  0013E4  EC85  F01C         	call	_drawPixel
 10544                           
 10545                           ;ST7735_TFT.c: 548: drawPixel(x0 - x, y0 - y, color);
 10546  0013E8  502E               	movf	drawCircle@y,w,c
 10547  0013EA  0800               	sublw	0
 10548  0013EC  241E               	addwf	drawCircle@y0,w,c
 10549  0013EE  6E18               	movwf	drawPixel@y,c
 10550  0013F0  C022  F019         	movff	drawCircle@color,drawPixel@color
 10551  0013F4  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 10552  0013F8  502C               	movf	drawCircle@x,w,c
 10553  0013FA  0800               	sublw	0
 10554  0013FC  241C               	addwf	drawCircle@x0,w,c
 10555  0013FE  EC85  F01C         	call	_drawPixel
 10556                           
 10557                           ;ST7735_TFT.c: 549: drawPixel(x0 + y, y0 + x, color);
 10558  001402  501E               	movf	drawCircle@y0,w,c
 10559  001404  242C               	addwf	drawCircle@x,w,c
 10560  001406  6E18               	movwf	drawPixel@y,c
 10561  001408  C022  F019         	movff	drawCircle@color,drawPixel@color
 10562  00140C  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 10563  001410  501C               	movf	drawCircle@x0,w,c
 10564  001412  242E               	addwf	drawCircle@y,w,c
 10565  001414  EC85  F01C         	call	_drawPixel
 10566                           
 10567                           ;ST7735_TFT.c: 550: drawPixel(x0 - y, y0 + x, color);
 10568  001418  501E               	movf	drawCircle@y0,w,c
 10569  00141A  242C               	addwf	drawCircle@x,w,c
 10570  00141C  6E18               	movwf	drawPixel@y,c
 10571  00141E  C022  F019         	movff	drawCircle@color,drawPixel@color
 10572  001422  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 10573  001426  502E               	movf	drawCircle@y,w,c
 10574  001428  0800               	sublw	0
 10575  00142A  241C               	addwf	drawCircle@x0,w,c
 10576  00142C  EC85  F01C         	call	_drawPixel
 10577                           
 10578                           ;ST7735_TFT.c: 551: drawPixel(x0 + y, y0 - x, color);
 10579  001430  502C               	movf	drawCircle@x,w,c
 10580  001432  0800               	sublw	0
 10581  001434  241E               	addwf	drawCircle@y0,w,c
 10582  001436  6E18               	movwf	drawPixel@y,c
 10583  001438  C022  F019         	movff	drawCircle@color,drawPixel@color
 10584  00143C  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 10585  001440  501C               	movf	drawCircle@x0,w,c
 10586  001442  242E               	addwf	drawCircle@y,w,c
 10587  001444  EC85  F01C         	call	_drawPixel
 10588                           
 10589                           ;ST7735_TFT.c: 552: drawPixel(x0 - y, y0 - x, color);
 10590  001448  502C               	movf	drawCircle@x,w,c
 10591  00144A  0800               	sublw	0
 10592  00144C  241E               	addwf	drawCircle@y0,w,c
 10593  00144E  6E18               	movwf	drawPixel@y,c
 10594  001450  C022  F019         	movff	drawCircle@color,drawPixel@color
 10595  001454  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 10596  001458  502E               	movf	drawCircle@y,w,c
 10597  00145A  0800               	sublw	0
 10598  00145C  241C               	addwf	drawCircle@x0,w,c
 10599  00145E  EC85  F01C         	call	_drawPixel
 10600  001462  D000               	goto	l8441
 10601  001464                     l8441:
 10602  001464  502E               	movf	drawCircle@y,w,c
 10603  001466  5C2C               	subwf	drawCircle@x,w,c
 10604  001468  502D               	movf	drawCircle@x+1,w,c
 10605  00146A  0A80               	xorlw	128
 10606  00146C  6E24               	movwf	??_drawCircle& (0+255),c
 10607  00146E  502F               	movf	drawCircle@y+1,w,c
 10608  001470  0A80               	xorlw	128
 10609  001472  5824               	subwfb	??_drawCircle& (0+255),w,c
 10610  001474  A0D8               	btfss	status,0,c
 10611  001476  D77E               	goto	l8413
 10612  001478  0012               	return		;funcret
 10613  00147A                     __end_of_drawCircle:
 10614                           	opt stack 0
 10615                           tblptru	equ	0xFF8
 10616                           tblptrh	equ	0xFF7
 10617                           tblptrl	equ	0xFF6
 10618                           tablat	equ	0xFF5
 10619                           prodh	equ	0xFF4
 10620                           prodl	equ	0xFF3
 10621                           intcon	equ	0xFF2
 10622                           intcon2	equ	0xFF1
 10623                           postinc0	equ	0xFEE
 10624                           wreg	equ	0xFE8
 10625                           postdec1	equ	0xFE5
 10626                           fsr1l	equ	0xFE1
 10627                           indf2	equ	0xFDF
 10628                           postinc2	equ	0xFDE
 10629                           fsr2h	equ	0xFDA
 10630                           fsr2l	equ	0xFD9
 10631                           status	equ	0xFD8
 10632                           
 10633 ;; *************** function _TFT_GreenTab_Initialize *****************
 10634 ;; Defined at:
 10635 ;;		line 644 in file "ST7735_TFT.c"
 10636 ;; Parameters:    Size  Location     Type
 10637 ;;		None
 10638 ;; Auto vars:     Size  Location     Type
 10639 ;;		None
 10640 ;; Return value:  Size  Location     Type
 10641 ;;		None               void
 10642 ;; Registers used:
 10643 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 10644 ;; Tracked objects:
 10645 ;;		On entry : 0/0
 10646 ;;		On exit  : 0/0
 10647 ;;		Unchanged: 0/0
 10648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10649 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10650 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10651 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10652 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10653 ;;Total ram usage:        0 bytes
 10654 ;; Hardware stack levels used:    1
 10655 ;; Hardware stack levels required when called:    6
 10656 ;; This function calls:
 10657 ;;		_Rcmd1
 10658 ;;		_Rcmd2red
 10659 ;;		_Rcmd3
 10660 ;;		_write_command
 10661 ;;		_write_data
 10662 ;; This function is called by:
 10663 ;;		_Initialize_Screen
 10664 ;; This function uses a non-reentrant model
 10665 ;;
 10666                           
 10667                           	psect	text51
 10668  003964                     __ptext51:
 10669                           	opt stack 0
 10670  003964                     _TFT_GreenTab_Initialize:
 10671                           	opt stack 23
 10672                           
 10673                           ;ST7735_TFT.c: 646: PORTDbits.RD1 = 1;
 10674                           
 10675                           ;incstack = 0
 10676  003964  8283               	bsf	3971,1,c	;volatile
 10677                           
 10678                           ;ST7735_TFT.c: 647: PORTDbits.RD0 = 0;
 10679  003966  9083               	bcf	3971,0,c	;volatile
 10680                           
 10681                           ;ST7735_TFT.c: 649: SSPSTAT=0x80;
 10682  003968  0E80               	movlw	128
 10683  00396A  6EC7               	movwf	4039,c	;volatile
 10684                           
 10685                           ;ST7735_TFT.c: 650: SSPCON1=0x30;
 10686  00396C  0E30               	movlw	48
 10687  00396E  6EC6               	movwf	4038,c	;volatile
 10688                           
 10689                           ;ST7735_TFT.c: 653: Rcmd1();
 10690  003970  EC0A  F00D         	call	_Rcmd1	;wreg free
 10691                           
 10692                           ;ST7735_TFT.c: 654: Rcmd2red();
 10693  003974  EC84  F01B         	call	_Rcmd2red	;wreg free
 10694                           
 10695                           ;ST7735_TFT.c: 655: Rcmd3();
 10696  003978  EC1A  F010         	call	_Rcmd3	;wreg free
 10697                           
 10698                           ;ST7735_TFT.c: 656: write_command(0x36);
 10699  00397C  0E36               	movlw	54
 10700  00397E  EC80  F01E         	call	_write_command
 10701                           
 10702                           ;ST7735_TFT.c: 657: write_data(0xC0);
 10703  003982  0EC0               	movlw	192
 10704  003984  EC78  F01E         	call	_write_data
 10705                           
 10706                           ;ST7735_TFT.c: 658: _tft_type = 1;
 10707  003988  0E01               	movlw	1
 10708  00398A  6E55               	movwf	__tft_type,c
 10709  00398C  0012               	return		;funcret
 10710  00398E                     __end_of_TFT_GreenTab_Initialize:
 10711                           	opt stack 0
 10712                           tblptru	equ	0xFF8
 10713                           tblptrh	equ	0xFF7
 10714                           tblptrl	equ	0xFF6
 10715                           tablat	equ	0xFF5
 10716                           prodh	equ	0xFF4
 10717                           prodl	equ	0xFF3
 10718                           intcon	equ	0xFF2
 10719                           intcon2	equ	0xFF1
 10720                           postinc0	equ	0xFEE
 10721                           wreg	equ	0xFE8
 10722                           postdec1	equ	0xFE5
 10723                           fsr1l	equ	0xFE1
 10724                           indf2	equ	0xFDF
 10725                           postinc2	equ	0xFDE
 10726                           fsr2h	equ	0xFDA
 10727                           fsr2l	equ	0xFD9
 10728                           status	equ	0xFD8
 10729                           
 10730 ;; *************** function _Rcmd3 *****************
 10731 ;; Defined at:
 10732 ;;		line 338 in file "ST7735_TFT.c"
 10733 ;; Parameters:    Size  Location     Type
 10734 ;;		None
 10735 ;; Auto vars:     Size  Location     Type
 10736 ;;		None
 10737 ;; Return value:  Size  Location     Type
 10738 ;;		None               void
 10739 ;; Registers used:
 10740 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 10741 ;; Tracked objects:
 10742 ;;		On entry : 0/0
 10743 ;;		On exit  : 0/0
 10744 ;;		Unchanged: 0/0
 10745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10746 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10747 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10748 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10749 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10750 ;;Total ram usage:        0 bytes
 10751 ;; Hardware stack levels used:    1
 10752 ;; Hardware stack levels required when called:    5
 10753 ;; This function calls:
 10754 ;;		_delay_ms
 10755 ;;		_write_command
 10756 ;;		_write_data
 10757 ;; This function is called by:
 10758 ;;		_TFT_GreenTab_Initialize
 10759 ;;		_TFT_BlackTab_Initialize
 10760 ;; This function uses a non-reentrant model
 10761 ;;
 10762                           
 10763                           	psect	text52
 10764  002034                     __ptext52:
 10765                           	opt stack 0
 10766  002034                     _Rcmd3:
 10767                           	opt stack 23
 10768                           
 10769                           ;ST7735_TFT.c: 340: write_command(0xE0);
 10770                           
 10771                           ;incstack = 0
 10772  002034  0EE0               	movlw	224
 10773  002036  EC80  F01E         	call	_write_command
 10774                           
 10775                           ;ST7735_TFT.c: 341: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
 10776  00203A  0E02               	movlw	2
 10777  00203C  EC78  F01E         	call	_write_data
 10778  002040  0E1C               	movlw	28
 10779  002042  EC78  F01E         	call	_write_data
 10780  002046  0E07               	movlw	7
 10781  002048  EC78  F01E         	call	_write_data
 10782  00204C  0E12               	movlw	18
 10783  00204E  EC78  F01E         	call	_write_data
 10784                           
 10785                           ;ST7735_TFT.c: 342: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
 10786  002052  0E37               	movlw	55
 10787  002054  EC78  F01E         	call	_write_data
 10788  002058  0E32               	movlw	50
 10789  00205A  EC78  F01E         	call	_write_data
 10790  00205E  0E29               	movlw	41
 10791  002060  EC78  F01E         	call	_write_data
 10792  002064  0E2D               	movlw	45
 10793  002066  EC78  F01E         	call	_write_data
 10794                           
 10795                           ;ST7735_TFT.c: 343: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
 10796  00206A  0E29               	movlw	41
 10797  00206C  EC78  F01E         	call	_write_data
 10798  002070  0E25               	movlw	37
 10799  002072  EC78  F01E         	call	_write_data
 10800  002076  0E2B               	movlw	43
 10801  002078  EC78  F01E         	call	_write_data
 10802  00207C  0E39               	movlw	57
 10803  00207E  EC78  F01E         	call	_write_data
 10804                           
 10805                           ;ST7735_TFT.c: 344: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
 10806  002082  0E00               	movlw	0
 10807  002084  EC78  F01E         	call	_write_data
 10808  002088  0E01               	movlw	1
 10809  00208A  EC78  F01E         	call	_write_data
 10810  00208E  0E03               	movlw	3
 10811  002090  EC78  F01E         	call	_write_data
 10812  002094  0E10               	movlw	16
 10813  002096  EC78  F01E         	call	_write_data
 10814                           
 10815                           ;ST7735_TFT.c: 345: write_command(0xE1);
 10816  00209A  0EE1               	movlw	225
 10817  00209C  EC80  F01E         	call	_write_command
 10818                           
 10819                           ;ST7735_TFT.c: 346: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
 10820  0020A0  0E03               	movlw	3
 10821  0020A2  EC78  F01E         	call	_write_data
 10822  0020A6  0E1D               	movlw	29
 10823  0020A8  EC78  F01E         	call	_write_data
 10824  0020AC  0E07               	movlw	7
 10825  0020AE  EC78  F01E         	call	_write_data
 10826  0020B2  0E06               	movlw	6
 10827  0020B4  EC78  F01E         	call	_write_data
 10828                           
 10829                           ;ST7735_TFT.c: 347: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
 10830  0020B8  0E2E               	movlw	46
 10831  0020BA  EC78  F01E         	call	_write_data
 10832  0020BE  0E2C               	movlw	44
 10833  0020C0  EC78  F01E         	call	_write_data
 10834  0020C4  0E29               	movlw	41
 10835  0020C6  EC78  F01E         	call	_write_data
 10836  0020CA  0E2D               	movlw	45
 10837  0020CC  EC78  F01E         	call	_write_data
 10838                           
 10839                           ;ST7735_TFT.c: 348: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
 10840  0020D0  0E2E               	movlw	46
 10841  0020D2  EC78  F01E         	call	_write_data
 10842  0020D6  0E2E               	movlw	46
 10843  0020D8  EC78  F01E         	call	_write_data
 10844  0020DC  0E37               	movlw	55
 10845  0020DE  EC78  F01E         	call	_write_data
 10846  0020E2  0E3F               	movlw	63
 10847  0020E4  EC78  F01E         	call	_write_data
 10848                           
 10849                           ;ST7735_TFT.c: 349: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
 10850  0020E8  0E00               	movlw	0
 10851  0020EA  EC78  F01E         	call	_write_data
 10852  0020EE  0E00               	movlw	0
 10853  0020F0  EC78  F01E         	call	_write_data
 10854  0020F4  0E02               	movlw	2
 10855  0020F6  EC78  F01E         	call	_write_data
 10856  0020FA  0E10               	movlw	16
 10857  0020FC  EC78  F01E         	call	_write_data
 10858                           
 10859                           ;ST7735_TFT.c: 350: write_command(0x13);
 10860  002100  0E13               	movlw	19
 10861  002102  EC80  F01E         	call	_write_command
 10862                           
 10863                           ;ST7735_TFT.c: 351: delay_ms(10);
 10864  002106  0E00               	movlw	0
 10865  002108  6E18               	movwf	delay_ms@ms+1,c
 10866  00210A  0E0A               	movlw	10
 10867  00210C  6E17               	movwf	delay_ms@ms,c
 10868  00210E  EC13  F01A         	call	_delay_ms	;wreg free
 10869                           
 10870                           ;ST7735_TFT.c: 352: write_command(0x29);
 10871  002112  0E29               	movlw	41
 10872  002114  EC80  F01E         	call	_write_command
 10873                           
 10874                           ;ST7735_TFT.c: 353: delay_ms(100);
 10875  002118  0E00               	movlw	0
 10876  00211A  6E18               	movwf	delay_ms@ms+1,c
 10877  00211C  0E64               	movlw	100
 10878  00211E  6E17               	movwf	delay_ms@ms,c
 10879  002120  EC13  F01A         	call	_delay_ms	;wreg free
 10880  002124  0012               	return		;funcret
 10881  002126                     __end_of_Rcmd3:
 10882                           	opt stack 0
 10883                           tblptru	equ	0xFF8
 10884                           tblptrh	equ	0xFF7
 10885                           tblptrl	equ	0xFF6
 10886                           tablat	equ	0xFF5
 10887                           prodh	equ	0xFF4
 10888                           prodl	equ	0xFF3
 10889                           intcon	equ	0xFF2
 10890                           intcon2	equ	0xFF1
 10891                           postinc0	equ	0xFEE
 10892                           wreg	equ	0xFE8
 10893                           postdec1	equ	0xFE5
 10894                           fsr1l	equ	0xFE1
 10895                           indf2	equ	0xFDF
 10896                           postinc2	equ	0xFDE
 10897                           fsr2h	equ	0xFDA
 10898                           fsr2l	equ	0xFD9
 10899                           status	equ	0xFD8
 10900                           
 10901 ;; *************** function _Rcmd2red *****************
 10902 ;; Defined at:
 10903 ;;		line 328 in file "ST7735_TFT.c"
 10904 ;; Parameters:    Size  Location     Type
 10905 ;;		None
 10906 ;; Auto vars:     Size  Location     Type
 10907 ;;		None
 10908 ;; Return value:  Size  Location     Type
 10909 ;;		None               void
 10910 ;; Registers used:
 10911 ;;		wreg, status,2, cstack
 10912 ;; Tracked objects:
 10913 ;;		On entry : 0/0
 10914 ;;		On exit  : 0/0
 10915 ;;		Unchanged: 0/0
 10916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10917 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10918 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10919 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10920 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10921 ;;Total ram usage:        0 bytes
 10922 ;; Hardware stack levels used:    1
 10923 ;; Hardware stack levels required when called:    5
 10924 ;; This function calls:
 10925 ;;		_write_command
 10926 ;;		_write_data
 10927 ;; This function is called by:
 10928 ;;		_TFT_GreenTab_Initialize
 10929 ;; This function uses a non-reentrant model
 10930 ;;
 10931                           
 10932                           	psect	text53
 10933  003708                     __ptext53:
 10934                           	opt stack 0
 10935  003708                     _Rcmd2red:
 10936                           	opt stack 23
 10937                           
 10938                           ;ST7735_TFT.c: 330: write_command(0x2A);
 10939                           
 10940                           ;incstack = 0
 10941  003708  0E2A               	movlw	42
 10942  00370A  EC80  F01E         	call	_write_command
 10943                           
 10944                           ;ST7735_TFT.c: 331: write_data(0x00); write_data(0x00);
 10945  00370E  0E00               	movlw	0
 10946  003710  EC78  F01E         	call	_write_data
 10947  003714  0E00               	movlw	0
 10948  003716  EC78  F01E         	call	_write_data
 10949                           
 10950                           ;ST7735_TFT.c: 332: write_data(0x00); write_data(0x7F);
 10951  00371A  0E00               	movlw	0
 10952  00371C  EC78  F01E         	call	_write_data
 10953  003720  0E7F               	movlw	127
 10954  003722  EC78  F01E         	call	_write_data
 10955                           
 10956                           ;ST7735_TFT.c: 333: write_command(0x2B);
 10957  003726  0E2B               	movlw	43
 10958  003728  EC80  F01E         	call	_write_command
 10959                           
 10960                           ;ST7735_TFT.c: 334: write_data(0x00); write_data(0x00);
 10961  00372C  0E00               	movlw	0
 10962  00372E  EC78  F01E         	call	_write_data
 10963  003732  0E00               	movlw	0
 10964  003734  EC78  F01E         	call	_write_data
 10965                           
 10966                           ;ST7735_TFT.c: 335: write_data(0x00); write_data(0x9F);
 10967  003738  0E00               	movlw	0
 10968  00373A  EC78  F01E         	call	_write_data
 10969  00373E  0E9F               	movlw	159
 10970  003740  EC78  F01E         	call	_write_data
 10971  003744  0012               	return		;funcret
 10972  003746                     __end_of_Rcmd2red:
 10973                           	opt stack 0
 10974                           tblptru	equ	0xFF8
 10975                           tblptrh	equ	0xFF7
 10976                           tblptrl	equ	0xFF6
 10977                           tablat	equ	0xFF5
 10978                           prodh	equ	0xFF4
 10979                           prodl	equ	0xFF3
 10980                           intcon	equ	0xFF2
 10981                           intcon2	equ	0xFF1
 10982                           postinc0	equ	0xFEE
 10983                           wreg	equ	0xFE8
 10984                           postdec1	equ	0xFE5
 10985                           fsr1l	equ	0xFE1
 10986                           indf2	equ	0xFDF
 10987                           postinc2	equ	0xFDE
 10988                           fsr2h	equ	0xFDA
 10989                           fsr2l	equ	0xFD9
 10990                           status	equ	0xFD8
 10991                           
 10992 ;; *************** function _Rcmd1 *****************
 10993 ;; Defined at:
 10994 ;;		line 281 in file "ST7735_TFT.c"
 10995 ;; Parameters:    Size  Location     Type
 10996 ;;		None
 10997 ;; Auto vars:     Size  Location     Type
 10998 ;;		None
 10999 ;; Return value:  Size  Location     Type
 11000 ;;		None               void
 11001 ;; Registers used:
 11002 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 11003 ;; Tracked objects:
 11004 ;;		On entry : 0/0
 11005 ;;		On exit  : 0/0
 11006 ;;		Unchanged: 0/0
 11007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11008 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11009 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11010 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11011 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11012 ;;Total ram usage:        0 bytes
 11013 ;; Hardware stack levels used:    1
 11014 ;; Hardware stack levels required when called:    5
 11015 ;; This function calls:
 11016 ;;		_delay_ms
 11017 ;;		_write_command
 11018 ;;		_write_data
 11019 ;; This function is called by:
 11020 ;;		_TFT_GreenTab_Initialize
 11021 ;;		_TFT_BlackTab_Initialize
 11022 ;; This function uses a non-reentrant model
 11023 ;;
 11024                           
 11025                           	psect	text54
 11026  001A14                     __ptext54:
 11027                           	opt stack 0
 11028  001A14                     _Rcmd1:
 11029                           	opt stack 23
 11030                           
 11031                           ;ST7735_TFT.c: 283: write_command(0x01);
 11032                           
 11033                           ;incstack = 0
 11034  001A14  0E01               	movlw	1
 11035  001A16  EC80  F01E         	call	_write_command
 11036                           
 11037                           ;ST7735_TFT.c: 284: delay_ms(150);
 11038  001A1A  0E00               	movlw	0
 11039  001A1C  6E18               	movwf	delay_ms@ms+1,c
 11040  001A1E  0E96               	movlw	150
 11041  001A20  6E17               	movwf	delay_ms@ms,c
 11042  001A22  EC13  F01A         	call	_delay_ms	;wreg free
 11043                           
 11044                           ;ST7735_TFT.c: 285: write_command(0x11);
 11045  001A26  0E11               	movlw	17
 11046  001A28  EC80  F01E         	call	_write_command
 11047                           
 11048                           ;ST7735_TFT.c: 286: delay_ms(500);
 11049  001A2C  0E01               	movlw	1
 11050  001A2E  6E18               	movwf	delay_ms@ms+1,c
 11051  001A30  0EF4               	movlw	244
 11052  001A32  6E17               	movwf	delay_ms@ms,c
 11053  001A34  EC13  F01A         	call	_delay_ms	;wreg free
 11054                           
 11055                           ;ST7735_TFT.c: 287: write_command(0xB1);
 11056  001A38  0EB1               	movlw	177
 11057  001A3A  EC80  F01E         	call	_write_command
 11058                           
 11059                           ;ST7735_TFT.c: 288: write_data(0x01);
 11060  001A3E  0E01               	movlw	1
 11061  001A40  EC78  F01E         	call	_write_data
 11062                           
 11063                           ;ST7735_TFT.c: 289: write_data(0x2C);
 11064  001A44  0E2C               	movlw	44
 11065  001A46  EC78  F01E         	call	_write_data
 11066                           
 11067                           ;ST7735_TFT.c: 290: write_data(0x2D);
 11068  001A4A  0E2D               	movlw	45
 11069  001A4C  EC78  F01E         	call	_write_data
 11070                           
 11071                           ;ST7735_TFT.c: 291: write_command(0xB2);
 11072  001A50  0EB2               	movlw	178
 11073  001A52  EC80  F01E         	call	_write_command
 11074                           
 11075                           ;ST7735_TFT.c: 292: write_data(0x01);
 11076  001A56  0E01               	movlw	1
 11077  001A58  EC78  F01E         	call	_write_data
 11078                           
 11079                           ;ST7735_TFT.c: 293: write_data(0x2C);
 11080  001A5C  0E2C               	movlw	44
 11081  001A5E  EC78  F01E         	call	_write_data
 11082                           
 11083                           ;ST7735_TFT.c: 294: write_data(0x2D);
 11084  001A62  0E2D               	movlw	45
 11085  001A64  EC78  F01E         	call	_write_data
 11086                           
 11087                           ;ST7735_TFT.c: 295: write_command(0xB3);
 11088  001A68  0EB3               	movlw	179
 11089  001A6A  EC80  F01E         	call	_write_command
 11090                           
 11091                           ;ST7735_TFT.c: 296: write_data(0x01);
 11092  001A6E  0E01               	movlw	1
 11093  001A70  EC78  F01E         	call	_write_data
 11094                           
 11095                           ;ST7735_TFT.c: 297: write_data(0x2C);
 11096  001A74  0E2C               	movlw	44
 11097  001A76  EC78  F01E         	call	_write_data
 11098                           
 11099                           ;ST7735_TFT.c: 298: write_data(0x2D);
 11100  001A7A  0E2D               	movlw	45
 11101  001A7C  EC78  F01E         	call	_write_data
 11102                           
 11103                           ;ST7735_TFT.c: 299: write_data(0x01);
 11104  001A80  0E01               	movlw	1
 11105  001A82  EC78  F01E         	call	_write_data
 11106                           
 11107                           ;ST7735_TFT.c: 300: write_data(0x2C);
 11108  001A86  0E2C               	movlw	44
 11109  001A88  EC78  F01E         	call	_write_data
 11110                           
 11111                           ;ST7735_TFT.c: 301: write_data(0x2D);
 11112  001A8C  0E2D               	movlw	45
 11113  001A8E  EC78  F01E         	call	_write_data
 11114                           
 11115                           ;ST7735_TFT.c: 302: write_command(0xB4);
 11116  001A92  0EB4               	movlw	180
 11117  001A94  EC80  F01E         	call	_write_command
 11118                           
 11119                           ;ST7735_TFT.c: 303: write_data(0x07);
 11120  001A98  0E07               	movlw	7
 11121  001A9A  EC78  F01E         	call	_write_data
 11122                           
 11123                           ;ST7735_TFT.c: 304: write_command(0xC0);
 11124  001A9E  0EC0               	movlw	192
 11125  001AA0  EC80  F01E         	call	_write_command
 11126                           
 11127                           ;ST7735_TFT.c: 305: write_data(0xA2);
 11128  001AA4  0EA2               	movlw	162
 11129  001AA6  EC78  F01E         	call	_write_data
 11130                           
 11131                           ;ST7735_TFT.c: 306: write_data(0x02);
 11132  001AAA  0E02               	movlw	2
 11133  001AAC  EC78  F01E         	call	_write_data
 11134                           
 11135                           ;ST7735_TFT.c: 307: write_data(0x84);
 11136  001AB0  0E84               	movlw	132
 11137  001AB2  EC78  F01E         	call	_write_data
 11138                           
 11139                           ;ST7735_TFT.c: 308: write_command(0xC1);
 11140  001AB6  0EC1               	movlw	193
 11141  001AB8  EC80  F01E         	call	_write_command
 11142                           
 11143                           ;ST7735_TFT.c: 309: write_data(0xC5);
 11144  001ABC  0EC5               	movlw	197
 11145  001ABE  EC78  F01E         	call	_write_data
 11146                           
 11147                           ;ST7735_TFT.c: 310: write_command(0xC2);
 11148  001AC2  0EC2               	movlw	194
 11149  001AC4  EC80  F01E         	call	_write_command
 11150                           
 11151                           ;ST7735_TFT.c: 311: write_data(0x0A);
 11152  001AC8  0E0A               	movlw	10
 11153  001ACA  EC78  F01E         	call	_write_data
 11154                           
 11155                           ;ST7735_TFT.c: 312: write_data(0x00);
 11156  001ACE  0E00               	movlw	0
 11157  001AD0  EC78  F01E         	call	_write_data
 11158                           
 11159                           ;ST7735_TFT.c: 313: write_command(0xC3);
 11160  001AD4  0EC3               	movlw	195
 11161  001AD6  EC80  F01E         	call	_write_command
 11162                           
 11163                           ;ST7735_TFT.c: 314: write_data(0x8A);
 11164  001ADA  0E8A               	movlw	138
 11165  001ADC  EC78  F01E         	call	_write_data
 11166                           
 11167                           ;ST7735_TFT.c: 315: write_data(0x2A);
 11168  001AE0  0E2A               	movlw	42
 11169  001AE2  EC78  F01E         	call	_write_data
 11170                           
 11171                           ;ST7735_TFT.c: 316: write_command(0xC4);
 11172  001AE6  0EC4               	movlw	196
 11173  001AE8  EC80  F01E         	call	_write_command
 11174                           
 11175                           ;ST7735_TFT.c: 317: write_data(0x8A);
 11176  001AEC  0E8A               	movlw	138
 11177  001AEE  EC78  F01E         	call	_write_data
 11178                           
 11179                           ;ST7735_TFT.c: 318: write_data(0xEE);
 11180  001AF2  0EEE               	movlw	238
 11181  001AF4  EC78  F01E         	call	_write_data
 11182                           
 11183                           ;ST7735_TFT.c: 319: write_command(0xC5);
 11184  001AF8  0EC5               	movlw	197
 11185  001AFA  EC80  F01E         	call	_write_command
 11186                           
 11187                           ;ST7735_TFT.c: 320: write_data(0x0E);
 11188  001AFE  0E0E               	movlw	14
 11189  001B00  EC78  F01E         	call	_write_data
 11190                           
 11191                           ;ST7735_TFT.c: 321: write_command(0x20);
 11192  001B04  0E20               	movlw	32
 11193  001B06  EC80  F01E         	call	_write_command
 11194                           
 11195                           ;ST7735_TFT.c: 322: write_command(0x36);
 11196  001B0A  0E36               	movlw	54
 11197  001B0C  EC80  F01E         	call	_write_command
 11198                           
 11199                           ;ST7735_TFT.c: 323: write_data(0xC8);
 11200  001B10  0EC8               	movlw	200
 11201  001B12  EC78  F01E         	call	_write_data
 11202                           
 11203                           ;ST7735_TFT.c: 324: write_command(0x3A);
 11204  001B16  0E3A               	movlw	58
 11205  001B18  EC80  F01E         	call	_write_command
 11206                           
 11207                           ;ST7735_TFT.c: 325: write_data(0x05);
 11208  001B1C  0E05               	movlw	5
 11209  001B1E  EC78  F01E         	call	_write_data
 11210  001B22  0012               	return		;funcret
 11211  001B24                     __end_of_Rcmd1:
 11212                           	opt stack 0
 11213                           tblptru	equ	0xFF8
 11214                           tblptrh	equ	0xFF7
 11215                           tblptrl	equ	0xFF6
 11216                           tablat	equ	0xFF5
 11217                           prodh	equ	0xFF4
 11218                           prodl	equ	0xFF3
 11219                           intcon	equ	0xFF2
 11220                           intcon2	equ	0xFF1
 11221                           postinc0	equ	0xFEE
 11222                           wreg	equ	0xFE8
 11223                           postdec1	equ	0xFE5
 11224                           fsr1l	equ	0xFE1
 11225                           indf2	equ	0xFDF
 11226                           postinc2	equ	0xFDE
 11227                           fsr2h	equ	0xFDA
 11228                           fsr2l	equ	0xFD9
 11229                           status	equ	0xFD8
 11230                           
 11231 ;; *************** function _LCD_Reset *****************
 11232 ;; Defined at:
 11233 ;;		line 217 in file "ST7735_TFT.c"
 11234 ;; Parameters:    Size  Location     Type
 11235 ;;		None
 11236 ;; Auto vars:     Size  Location     Type
 11237 ;;		None
 11238 ;; Return value:  Size  Location     Type
 11239 ;;		None               void
 11240 ;; Registers used:
 11241 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 11242 ;; Tracked objects:
 11243 ;;		On entry : 0/0
 11244 ;;		On exit  : 0/0
 11245 ;;		Unchanged: 0/0
 11246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11247 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11248 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11249 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11250 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11251 ;;Total ram usage:        0 bytes
 11252 ;; Hardware stack levels used:    1
 11253 ;; Hardware stack levels required when called:    5
 11254 ;; This function calls:
 11255 ;;		_delay_ms
 11256 ;; This function is called by:
 11257 ;;		_Initialize_Screen
 11258 ;; This function uses a non-reentrant model
 11259 ;;
 11260                           
 11261                           	psect	text55
 11262  003C44                     __ptext55:
 11263                           	opt stack 0
 11264  003C44                     _LCD_Reset:
 11265                           	opt stack 24
 11266                           
 11267                           ;ST7735_TFT.c: 219: PORTDbits.RD2 = 0;
 11268                           
 11269                           ;incstack = 0
 11270  003C44  9483               	bcf	3971,2,c	;volatile
 11271                           
 11272                           ;ST7735_TFT.c: 220: delay_ms(100);
 11273  003C46  0E00               	movlw	0
 11274  003C48  6E18               	movwf	delay_ms@ms+1,c
 11275  003C4A  0E64               	movlw	100
 11276  003C4C  6E17               	movwf	delay_ms@ms,c
 11277  003C4E  EC13  F01A         	call	_delay_ms	;wreg free
 11278                           
 11279                           ;ST7735_TFT.c: 221: PORTDbits.RD2 = 1;
 11280  003C52  8483               	bsf	3971,2,c	;volatile
 11281  003C54  0012               	return		;funcret
 11282  003C56                     __end_of_LCD_Reset:
 11283                           	opt stack 0
 11284                           tblptru	equ	0xFF8
 11285                           tblptrh	equ	0xFF7
 11286                           tblptrl	equ	0xFF6
 11287                           tablat	equ	0xFF5
 11288                           prodh	equ	0xFF4
 11289                           prodl	equ	0xFF3
 11290                           intcon	equ	0xFF2
 11291                           intcon2	equ	0xFF1
 11292                           postinc0	equ	0xFEE
 11293                           wreg	equ	0xFE8
 11294                           postdec1	equ	0xFE5
 11295                           fsr1l	equ	0xFE1
 11296                           indf2	equ	0xFDF
 11297                           postinc2	equ	0xFDE
 11298                           fsr2h	equ	0xFDA
 11299                           fsr2l	equ	0xFD9
 11300                           status	equ	0xFD8
 11301                           
 11302 ;; *************** function _delay_ms *****************
 11303 ;; Defined at:
 11304 ;;		line 64 in file "ST7735_TFT.c"
 11305 ;; Parameters:    Size  Location     Type
 11306 ;;  ms              2   22[COMRAM] int 
 11307 ;; Auto vars:     Size  Location     Type
 11308 ;;  count           2   26[COMRAM] int 
 11309 ;; Return value:  Size  Location     Type
 11310 ;;		None               void
 11311 ;; Registers used:
 11312 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 11313 ;; Tracked objects:
 11314 ;;		On entry : 0/0
 11315 ;;		On exit  : 0/0
 11316 ;;		Unchanged: 0/0
 11317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11318 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11319 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11320 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11321 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11322 ;;Total ram usage:        6 bytes
 11323 ;; Hardware stack levels used:    1
 11324 ;; Hardware stack levels required when called:    4
 11325 ;; This function calls:
 11326 ;;		___wmul
 11327 ;; This function is called by:
 11328 ;;		_LCD_Reset
 11329 ;;		_Rcmd1
 11330 ;;		_Rcmd3
 11331 ;;		_Bcmd
 11332 ;; This function uses a non-reentrant model
 11333 ;;
 11334                           
 11335                           	psect	text56
 11336  003426                     __ptext56:
 11337                           	opt stack 0
 11338  003426                     _delay_ms:
 11339                           	opt stack 23
 11340                           
 11341                           ;ST7735_TFT.c: 70: int count;
 11342                           ;ST7735_TFT.c: 71: count = 8000000/4000/16 * ms;
 11343                           
 11344                           ;incstack = 0
 11345  003426  C017  F011         	movff	delay_ms@ms,___wmul@multiplier
 11346  00342A  C018  F012         	movff	delay_ms@ms+1,___wmul@multiplier+1
 11347  00342E  0E00               	movlw	0
 11348  003430  6E14               	movwf	___wmul@multiplicand+1,c
 11349  003432  0E7D               	movlw	125
 11350  003434  6E13               	movwf	___wmul@multiplicand,c
 11351  003436  ECC7  F01C         	call	___wmul	;wreg free
 11352  00343A  C011  F01B         	movff	?___wmul,delay_ms@count
 11353  00343E  C012  F01C         	movff	?___wmul+1,delay_ms@count+1
 11354                           
 11355                           ;ST7735_TFT.c: 72: count = (0xffff - count);
 11356  003442  C01B  F019         	movff	delay_ms@count,??_delay_ms
 11357  003446  C01C  F01A         	movff	delay_ms@count+1,??_delay_ms+1
 11358  00344A  1E19               	comf	??_delay_ms,f,c
 11359  00344C  1E1A               	comf	??_delay_ms+1,f,c
 11360  00344E  4A19               	infsnz	??_delay_ms,f,c
 11361  003450  2A1A               	incf	??_delay_ms+1,f,c
 11362  003452  0EFF               	movlw	255
 11363  003454  2419               	addwf	??_delay_ms,w,c
 11364  003456  6E1B               	movwf	delay_ms@count,c
 11365  003458  0EFF               	movlw	255
 11366  00345A  201A               	addwfc	??_delay_ms+1,w,c
 11367  00345C  6E1C               	movwf	delay_ms@count+1,c
 11368                           
 11369                           ;ST7735_TFT.c: 74: T0CON = 0x03;
 11370  00345E  0E03               	movlw	3
 11371  003460  6ED5               	movwf	4053,c	;volatile
 11372                           
 11373                           ;ST7735_TFT.c: 76: TMR0L = count & 0x00ff;
 11374  003462  C01B  FFD6         	movff	delay_ms@count,4054	;volatile
 11375                           
 11376                           ;ST7735_TFT.c: 77: TMR0H = count >> 8;
 11377  003466  501C               	movf	delay_ms@count+1,w,c
 11378  003468  6ED7               	movwf	4055,c	;volatile
 11379                           
 11380                           ;ST7735_TFT.c: 79: INTCONbits.TMR0IF = 0;
 11381  00346A  94F2               	bcf	intcon,2,c	;volatile
 11382                           
 11383                           ;ST7735_TFT.c: 80: T0CONbits.TMR0ON = 1;
 11384  00346C  8ED5               	bsf	4053,7,c	;volatile
 11385                           
 11386                           ;ST7735_TFT.c: 82: while (INTCONbits.TMR0IF == 0);
 11387  00346E  D000               	goto	l346
 11388  003470                     l346:
 11389  003470  A4F2               	btfss	intcon,2,c	;volatile
 11390  003472  D7FE               	goto	l346
 11391                           
 11392                           ;ST7735_TFT.c: 83: T0CONbits.TMR0ON = 0;
 11393  003474  9ED5               	bcf	4053,7,c	;volatile
 11394  003476  0012               	return		;funcret
 11395  003478                     __end_of_delay_ms:
 11396                           	opt stack 0
 11397                           tblptru	equ	0xFF8
 11398                           tblptrh	equ	0xFF7
 11399                           tblptrl	equ	0xFF6
 11400                           tablat	equ	0xFF5
 11401                           prodh	equ	0xFF4
 11402                           prodl	equ	0xFF3
 11403                           intcon	equ	0xFF2
 11404                           intcon2	equ	0xFF1
 11405                           postinc0	equ	0xFEE
 11406                           wreg	equ	0xFE8
 11407                           postdec1	equ	0xFE5
 11408                           fsr1l	equ	0xFE1
 11409                           indf2	equ	0xFDF
 11410                           postinc2	equ	0xFDE
 11411                           fsr2h	equ	0xFDA
 11412                           fsr2l	equ	0xFD9
 11413                           status	equ	0xFD8
 11414                           
 11415 ;; *************** function _DS3231_Write_Alarm_Time *****************
 11416 ;; Defined at:
 11417 ;;		line 188 in file "I2C_Support.c"
 11418 ;; Parameters:    Size  Location     Type
 11419 ;;		None
 11420 ;; Auto vars:     Size  Location     Type
 11421 ;;  Address         1   12[BANK1 ] unsigned char 
 11422 ;;  Device          1   11[BANK1 ] unsigned char 
 11423 ;; Return value:  Size  Location     Type
 11424 ;;		None               void
 11425 ;; Registers used:
 11426 ;;		wreg, status,2, status,0, cstack
 11427 ;; Tracked objects:
 11428 ;;		On entry : 0/0
 11429 ;;		On exit  : 0/0
 11430 ;;		Unchanged: 0/0
 11431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11432 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11433 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11434 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11435 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11436 ;;Total ram usage:        2 bytes
 11437 ;; Hardware stack levels used:    1
 11438 ;; Hardware stack levels required when called:    7
 11439 ;; This function calls:
 11440 ;;		_DS3231_Read_Time
 11441 ;;		_I2C_Start
 11442 ;;		_I2C_Stop
 11443 ;;		_I2C_Write
 11444 ;;		_dec_2_bcd
 11445 ;; This function is called by:
 11446 ;;		_Do_Save_New_Alarm_Time
 11447 ;; This function uses a non-reentrant model
 11448 ;;
 11449                           
 11450                           	psect	text57
 11451  002EEE                     __ptext57:
 11452                           	opt stack 0
 11453  002EEE                     _DS3231_Write_Alarm_Time:
 11454                           	opt stack 21
 11455                           
 11456                           ;I2C_Support.c: 190: DS3231_Read_Time();
 11457                           
 11458                           ;incstack = 0
 11459  002EEE  EC2F  F019         	call	_DS3231_Read_Time	;wreg free
 11460                           
 11461                           ;I2C_Support.c: 191: alarm_date = day;
 11462  002EF2  C05B  F056         	movff	_day,_alarm_date
 11463                           
 11464                           ;I2C_Support.c: 192: char Device = 0x68;
 11465  002EF6  0E68               	movlw	104
 11466  002EF8  0101               	movlb	1	; () banked
 11467  002EFA  6F47               	movwf	DS3231_Write_Alarm_Time@Device& (0+255),b
 11468                           
 11469                           ; BSR set to: 1
 11470                           ;I2C_Support.c: 193: char Address = 0x07;
 11471  002EFC  0E07               	movlw	7
 11472  002EFE  0101               	movlb	1	; () banked
 11473  002F00  6F48               	movwf	DS3231_Write_Alarm_Time@Address& (0+255),b
 11474                           
 11475                           ;I2C_Support.c: 194: alarm_hour = dec_2_bcd(setup_alarm_hour);
 11476  002F02  5064               	movf	_setup_alarm_hour,w,c
 11477  002F04  EC96  F018         	call	_dec_2_bcd
 11478  002F08  5041               	movf	?_dec_2_bcd,w,c
 11479  002F0A  6E57               	movwf	_alarm_hour,c
 11480                           
 11481                           ;I2C_Support.c: 195: alarm_minute = dec_2_bcd(setup_alarm_minute);
 11482  002F0C  5065               	movf	_setup_alarm_minute,w,c
 11483  002F0E  EC96  F018         	call	_dec_2_bcd
 11484  002F12  5041               	movf	?_dec_2_bcd,w,c
 11485  002F14  6E58               	movwf	_alarm_minute,c
 11486                           
 11487                           ;I2C_Support.c: 196: alarm_second = dec_2_bcd(setup_alarm_second);
 11488  002F16  5066               	movf	_setup_alarm_second,w,c
 11489  002F18  EC96  F018         	call	_dec_2_bcd
 11490  002F1C  5041               	movf	?_dec_2_bcd,w,c
 11491  002F1E  6E59               	movwf	_alarm_second,c
 11492                           
 11493                           ;I2C_Support.c: 197: alarm_second = alarm_second & 0x7f;
 11494  002F20  5059               	movf	_alarm_second,w,c
 11495  002F22  0B7F               	andlw	127
 11496  002F24  6E59               	movwf	_alarm_second,c
 11497                           
 11498                           ;I2C_Support.c: 198: alarm_minute = alarm_minute & 0x7f;
 11499  002F26  5058               	movf	_alarm_minute,w,c
 11500  002F28  0B7F               	andlw	127
 11501  002F2A  6E58               	movwf	_alarm_minute,c
 11502                           
 11503                           ;I2C_Support.c: 199: alarm_hour = alarm_hour & 0x7f;
 11504  002F2C  5057               	movf	_alarm_hour,w,c
 11505  002F2E  0B7F               	andlw	127
 11506  002F30  6E57               	movwf	_alarm_hour,c
 11507                           
 11508                           ;I2C_Support.c: 200: alarm_date = alarm_date | 0x80;
 11509  002F32  5056               	movf	_alarm_date,w,c
 11510  002F34  0980               	iorlw	128
 11511  002F36  6E56               	movwf	_alarm_date,c
 11512                           
 11513                           ;I2C_Support.c: 201: I2C_Start();
 11514  002F38  EC46  F01E         	call	_I2C_Start	;wreg free
 11515                           
 11516                           ;I2C_Support.c: 202: I2C_Write((Device << 1) | 0);
 11517  002F3C  0101               	movlb	1	; () banked
 11518  002F3E  5147               	movf	DS3231_Write_Alarm_Time@Device& (0+255),w,b
 11519  002F40  2547               	addwf	DS3231_Write_Alarm_Time@Device& (0+255),w,b
 11520  002F42  ECC2  F01B         	call	_I2C_Write
 11521                           
 11522                           ;I2C_Support.c: 203: I2C_Write(Address);
 11523  002F46  0101               	movlb	1	; () banked
 11524  002F48  5148               	movf	DS3231_Write_Alarm_Time@Address& (0+255),w,b
 11525  002F4A  ECC2  F01B         	call	_I2C_Write
 11526                           
 11527                           ;I2C_Support.c: 205: I2C_Write(alarm_second);
 11528  002F4E  5059               	movf	_alarm_second,w,c
 11529  002F50  ECC2  F01B         	call	_I2C_Write
 11530                           
 11531                           ;I2C_Support.c: 206: I2C_Write(alarm_minute);
 11532  002F54  5058               	movf	_alarm_minute,w,c
 11533  002F56  ECC2  F01B         	call	_I2C_Write
 11534                           
 11535                           ;I2C_Support.c: 207: I2C_Write(alarm_hour);
 11536  002F5A  5057               	movf	_alarm_hour,w,c
 11537  002F5C  ECC2  F01B         	call	_I2C_Write
 11538                           
 11539                           ;I2C_Support.c: 208: I2C_Write(alarm_date);
 11540  002F60  5056               	movf	_alarm_date,w,c
 11541  002F62  ECC2  F01B         	call	_I2C_Write
 11542                           
 11543                           ;I2C_Support.c: 209: I2C_Stop();
 11544  002F66  EC3D  F01E         	call	_I2C_Stop	;wreg free
 11545  002F6A  0012               	return		;funcret
 11546  002F6C                     __end_of_DS3231_Write_Alarm_Time:
 11547                           	opt stack 0
 11548                           tblptru	equ	0xFF8
 11549                           tblptrh	equ	0xFF7
 11550                           tblptrl	equ	0xFF6
 11551                           tablat	equ	0xFF5
 11552                           prodh	equ	0xFF4
 11553                           prodl	equ	0xFF3
 11554                           intcon	equ	0xFF2
 11555                           intcon2	equ	0xFF1
 11556                           postinc0	equ	0xFEE
 11557                           wreg	equ	0xFE8
 11558                           postdec1	equ	0xFE5
 11559                           fsr1l	equ	0xFE1
 11560                           indf2	equ	0xFDF
 11561                           postinc2	equ	0xFDE
 11562                           fsr2h	equ	0xFDA
 11563                           fsr2l	equ	0xFD9
 11564                           status	equ	0xFD8
 11565                           
 11566 ;; *************** function _dec_2_bcd *****************
 11567 ;; Defined at:
 11568 ;;		line 56 in file "Utils.c"
 11569 ;; Parameters:    Size  Location     Type
 11570 ;;  dec             1    wreg     unsigned char 
 11571 ;; Auto vars:     Size  Location     Type
 11572 ;;  dec             1   10[BANK1 ] unsigned char 
 11573 ;;  bcd             2    8[BANK1 ] int 
 11574 ;; Return value:  Size  Location     Type
 11575 ;;                  2   64[COMRAM] int 
 11576 ;; Registers used:
 11577 ;;		wreg, status,2, status,0, cstack
 11578 ;; Tracked objects:
 11579 ;;		On entry : 0/0
 11580 ;;		On exit  : 0/0
 11581 ;;		Unchanged: 0/0
 11582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11583 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11584 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11585 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11586 ;;      Totals:         2       2       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11587 ;;Total ram usage:        7 bytes
 11588 ;; Hardware stack levels used:    1
 11589 ;; Hardware stack levels required when called:    4
 11590 ;; This function calls:
 11591 ;;		___awdiv
 11592 ;;		___awmod
 11593 ;; This function is called by:
 11594 ;;		_DS3231_Write_Time
 11595 ;;		_DS3231_Write_Alarm_Time
 11596 ;; This function uses a non-reentrant model
 11597 ;;
 11598                           
 11599                           	psect	text58
 11600  00312C                     __ptext58:
 11601                           	opt stack 0
 11602  00312C                     _dec_2_bcd:
 11603                           	opt stack 23
 11604                           
 11605                           ;incstack = 0
 11606                           ;dec_2_bcd@dec stored from wreg
 11607  00312C  0101               	movlb	1	; () banked
 11608  00312E  6F46               	movwf	dec_2_bcd@dec& (0+255),b
 11609                           
 11610                           ; BSR set to: 1
 11611                           ;Utils.c: 58: int bcd;
 11612                           ;Utils.c: 59: bcd = ((dec / 10) << 4) + (dec % 10);
 11613  003130  C146  F13C         	movff	dec_2_bcd@dec,___awdiv@dividend
 11614  003134  0101               	movlb	1	; () banked
 11615  003136  6B3D               	clrf	(___awdiv@dividend+1)& (0+255),b
 11616  003138  0E00               	movlw	0
 11617  00313A  0101               	movlb	1	; () banked
 11618  00313C  6F3F               	movwf	(___awdiv@divisor+1)& (0+255),b
 11619  00313E  0E0A               	movlw	10
 11620  003140  6F3E               	movwf	___awdiv@divisor& (0+255),b
 11621  003142  EC5E  F012         	call	___awdiv	;wreg free
 11622  003146  C13C  F0FE         	movff	?___awdiv,??_dec_2_bcd
 11623  00314A  C13D  F0FF         	movff	?___awdiv+1,??_dec_2_bcd+1
 11624  00314E  0100               	movlb	0	; () banked
 11625  003150  3BFE               	swapf	??_dec_2_bcd& (0+255),f,b
 11626  003152  3BFF               	swapf	(??_dec_2_bcd+1)& (0+255),f,b
 11627  003154  0EF0               	movlw	240
 11628  003156  17FF               	andwf	(??_dec_2_bcd+1)& (0+255),f,b
 11629  003158  51FE               	movf	??_dec_2_bcd& (0+255),w,b
 11630  00315A  0B0F               	andlw	15
 11631  00315C  13FF               	iorwf	(??_dec_2_bcd+1)& (0+255),f,b
 11632  00315E  0EF0               	movlw	240
 11633  003160  17FE               	andwf	??_dec_2_bcd& (0+255),f,b
 11634  003162  C146  F03B         	movff	dec_2_bcd@dec,___awmod@dividend
 11635  003166  6A3C               	clrf	___awmod@dividend+1,c
 11636  003168  0E00               	movlw	0
 11637  00316A  6E3E               	movwf	___awmod@divisor+1,c
 11638  00316C  0E0A               	movlw	10
 11639  00316E  6E3D               	movwf	___awmod@divisor,c
 11640  003170  EC36  F017         	call	___awmod	;wreg free
 11641  003174  503B               	movf	?___awmod,w,c
 11642  003176  0100               	movlb	0	; () banked
 11643  003178  25FE               	addwf	??_dec_2_bcd& (0+255),w,b
 11644  00317A  0101               	movlb	1	; () banked
 11645  00317C  6F44               	movwf	dec_2_bcd@bcd& (0+255),b
 11646  00317E  503C               	movf	?___awmod+1,w,c
 11647  003180  0100               	movlb	0	; () banked
 11648  003182  21FF               	addwfc	(??_dec_2_bcd+1)& (0+255),w,b
 11649  003184  0101               	movlb	1	; () banked
 11650  003186  6F45               	movwf	(dec_2_bcd@bcd+1)& (0+255),b
 11651                           
 11652                           ; BSR set to: 1
 11653                           ;Utils.c: 60: return bcd;
 11654  003188  C144  F041         	movff	dec_2_bcd@bcd,?_dec_2_bcd
 11655  00318C  C145  F042         	movff	dec_2_bcd@bcd+1,?_dec_2_bcd+1
 11656  003190  D000               	goto	l685
 11657  003192                     l685:
 11658                           
 11659                           ; BSR set to: 1
 11660  003192  0012               	return		;funcret
 11661  003194                     __end_of_dec_2_bcd:
 11662                           	opt stack 0
 11663                           tblptru	equ	0xFF8
 11664                           tblptrh	equ	0xFF7
 11665                           tblptrl	equ	0xFF6
 11666                           tablat	equ	0xFF5
 11667                           prodh	equ	0xFF4
 11668                           prodl	equ	0xFF3
 11669                           intcon	equ	0xFF2
 11670                           intcon2	equ	0xFF1
 11671                           postinc0	equ	0xFEE
 11672                           wreg	equ	0xFE8
 11673                           postdec1	equ	0xFE5
 11674                           fsr1l	equ	0xFE1
 11675                           indf2	equ	0xFDF
 11676                           postinc2	equ	0xFDE
 11677                           fsr2h	equ	0xFDA
 11678                           fsr2l	equ	0xFD9
 11679                           status	equ	0xFD8
 11680                           
 11681 ;; *************** function _DS3231_Read_Time *****************
 11682 ;; Defined at:
 11683 ;;		line 64 in file "I2C_Support.c"
 11684 ;; Parameters:    Size  Location     Type
 11685 ;;		None
 11686 ;; Auto vars:     Size  Location     Type
 11687 ;;  Device          1   20[COMRAM] unsigned char 
 11688 ;;  Address         1   19[COMRAM] unsigned char 
 11689 ;; Return value:  Size  Location     Type
 11690 ;;		None               void
 11691 ;; Registers used:
 11692 ;;		wreg, status,2, status,0, cstack
 11693 ;; Tracked objects:
 11694 ;;		On entry : 0/0
 11695 ;;		On exit  : 0/0
 11696 ;;		Unchanged: 0/0
 11697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11698 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11699 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11700 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11701 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11702 ;;Total ram usage:        2 bytes
 11703 ;; Hardware stack levels used:    1
 11704 ;; Hardware stack levels required when called:    6
 11705 ;; This function calls:
 11706 ;;		_I2C_ReStart
 11707 ;;		_I2C_Read
 11708 ;;		_I2C_Start
 11709 ;;		_I2C_Stop
 11710 ;;		_I2C_Write
 11711 ;; This function is called by:
 11712 ;;		_DS3231_Write_Alarm_Time
 11713 ;;		_main
 11714 ;;		_Do_Setup_Time
 11715 ;;		_Do_Save_New_Time
 11716 ;;		_Exit_Time_Setup
 11717 ;;		_Exit_Setup_Heater_Temp
 11718 ;;		_Do_Save_New_Heater_Temp
 11719 ;;		_Exit_Setup_Alarm_Time
 11720 ;;		_Do_Save_New_Alarm_Time
 11721 ;; This function uses a non-reentrant model
 11722 ;;
 11723                           
 11724                           	psect	text59
 11725  00325E                     __ptext59:
 11726                           	opt stack 0
 11727  00325E                     _DS3231_Read_Time:
 11728                           	opt stack 22
 11729                           
 11730                           ;I2C_Support.c: 66: char Device = 0x68;
 11731                           
 11732                           ; BSR set to: 1
 11733                           ;incstack = 0
 11734  00325E  0E68               	movlw	104
 11735  003260  6E15               	movwf	DS3231_Read_Time@Device,c
 11736                           
 11737                           ;I2C_Support.c: 67: char Address = 0x00;
 11738  003262  0E00               	movlw	0
 11739  003264  6E14               	movwf	DS3231_Read_Time@Address,c
 11740                           
 11741                           ;I2C_Support.c: 69: I2C_Start();
 11742  003266  EC46  F01E         	call	_I2C_Start	;wreg free
 11743                           
 11744                           ;I2C_Support.c: 70: I2C_Write((Device << 1) | 0);
 11745  00326A  5015               	movf	DS3231_Read_Time@Device,w,c
 11746  00326C  2415               	addwf	DS3231_Read_Time@Device,w,c
 11747  00326E  ECC2  F01B         	call	_I2C_Write
 11748                           
 11749                           ;I2C_Support.c: 71: I2C_Write(Address);
 11750  003272  5014               	movf	DS3231_Read_Time@Address,w,c
 11751  003274  ECC2  F01B         	call	_I2C_Write
 11752                           
 11753                           ;I2C_Support.c: 72: I2C_ReStart();
 11754  003278  ECD2  F01D         	call	_I2C_ReStart	;wreg free
 11755                           
 11756                           ;I2C_Support.c: 73: I2C_Write((Device << 1) | 1);
 11757  00327C  80D8               	bsf	status,0,c
 11758  00327E  3415               	rlcf	DS3231_Read_Time@Device,w,c
 11759  003280  ECC2  F01B         	call	_I2C_Write
 11760                           
 11761                           ;I2C_Support.c: 74: second = I2C_Read(1);
 11762  003284  0E01               	movlw	1
 11763  003286  EC1F  F01B         	call	_I2C_Read
 11764  00328A  6E63               	movwf	_second,c
 11765                           
 11766                           ;I2C_Support.c: 75: minute = I2C_Read(1);
 11767  00328C  0E01               	movlw	1
 11768  00328E  EC1F  F01B         	call	_I2C_Read
 11769  003292  6E60               	movwf	_minute,c
 11770                           
 11771                           ;I2C_Support.c: 76: hour = I2C_Read(1);
 11772  003294  0E01               	movlw	1
 11773  003296  EC1F  F01B         	call	_I2C_Read
 11774  00329A  6E5F               	movwf	_hour,c
 11775                           
 11776                           ;I2C_Support.c: 77: dow = I2C_Read(1);
 11777  00329C  0E01               	movlw	1
 11778  00329E  EC1F  F01B         	call	_I2C_Read
 11779  0032A2  6E5C               	movwf	_dow,c
 11780                           
 11781                           ;I2C_Support.c: 78: day = I2C_Read(1);
 11782  0032A4  0E01               	movlw	1
 11783  0032A6  EC1F  F01B         	call	_I2C_Read
 11784  0032AA  6E5B               	movwf	_day,c
 11785                           
 11786                           ;I2C_Support.c: 79: month = I2C_Read(1);
 11787  0032AC  0E01               	movlw	1
 11788  0032AE  EC1F  F01B         	call	_I2C_Read
 11789  0032B2  6E61               	movwf	_month,c
 11790                           
 11791                           ;I2C_Support.c: 80: year = I2C_Read(0);
 11792  0032B4  0E00               	movlw	0
 11793  0032B6  EC1F  F01B         	call	_I2C_Read
 11794  0032BA  6E6E               	movwf	_year,c
 11795                           
 11796                           ;I2C_Support.c: 81: I2C_Stop();
 11797  0032BC  EC3D  F01E         	call	_I2C_Stop	;wreg free
 11798  0032C0  0012               	return		;funcret
 11799  0032C2                     __end_of_DS3231_Read_Time:
 11800                           	opt stack 0
 11801                           tblptru	equ	0xFF8
 11802                           tblptrh	equ	0xFF7
 11803                           tblptrl	equ	0xFF6
 11804                           tablat	equ	0xFF5
 11805                           prodh	equ	0xFF4
 11806                           prodl	equ	0xFF3
 11807                           intcon	equ	0xFF2
 11808                           intcon2	equ	0xFF1
 11809                           postinc0	equ	0xFEE
 11810                           wreg	equ	0xFE8
 11811                           postdec1	equ	0xFE5
 11812                           fsr1l	equ	0xFE1
 11813                           indf2	equ	0xFDF
 11814                           postinc2	equ	0xFDE
 11815                           fsr2h	equ	0xFDA
 11816                           fsr2l	equ	0xFD9
 11817                           status	equ	0xFD8
 11818                           
 11819 ;; *************** function _DS3231_Read_Alarm_Time *****************
 11820 ;; Defined at:
 11821 ;;		line 134 in file "I2C_Support.c"
 11822 ;; Parameters:    Size  Location     Type
 11823 ;;		None
 11824 ;; Auto vars:     Size  Location     Type
 11825 ;;  Device          1   20[COMRAM] unsigned char 
 11826 ;;  Address         1   19[COMRAM] unsigned char 
 11827 ;; Return value:  Size  Location     Type
 11828 ;;		None               void
 11829 ;; Registers used:
 11830 ;;		wreg, status,2, status,0, cstack
 11831 ;; Tracked objects:
 11832 ;;		On entry : 0/0
 11833 ;;		On exit  : 0/0
 11834 ;;		Unchanged: 0/0
 11835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11836 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11837 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11838 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11839 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11840 ;;Total ram usage:        2 bytes
 11841 ;; Hardware stack levels used:    1
 11842 ;; Hardware stack levels required when called:    6
 11843 ;; This function calls:
 11844 ;;		_I2C_ReStart
 11845 ;;		_I2C_Read
 11846 ;;		_I2C_Start
 11847 ;;		_I2C_Stop
 11848 ;;		_I2C_Write
 11849 ;; This function is called by:
 11850 ;;		_main
 11851 ;;		_Do_Setup_Alarm_Time
 11852 ;;		_Do_Save_New_Alarm_Time
 11853 ;; This function uses a non-reentrant model
 11854 ;;
 11855                           
 11856                           	psect	text60
 11857  003514                     __ptext60:
 11858                           	opt stack 0
 11859  003514                     _DS3231_Read_Alarm_Time:
 11860                           	opt stack 22
 11861                           
 11862                           ;I2C_Support.c: 136: char Device = 0x68;
 11863                           
 11864                           ;incstack = 0
 11865  003514  0E68               	movlw	104
 11866  003516  6E15               	movwf	DS3231_Read_Alarm_Time@Device,c
 11867                           
 11868                           ;I2C_Support.c: 137: char Address = 0x07;
 11869  003518  0E07               	movlw	7
 11870  00351A  6E14               	movwf	DS3231_Read_Alarm_Time@Address,c
 11871                           
 11872                           ;I2C_Support.c: 138: I2C_Start();
 11873  00351C  EC46  F01E         	call	_I2C_Start	;wreg free
 11874                           
 11875                           ;I2C_Support.c: 139: I2C_Write((Device << 1) | 0);
 11876  003520  5015               	movf	DS3231_Read_Alarm_Time@Device,w,c
 11877  003522  2415               	addwf	DS3231_Read_Alarm_Time@Device,w,c
 11878  003524  ECC2  F01B         	call	_I2C_Write
 11879                           
 11880                           ;I2C_Support.c: 140: I2C_Write(Address);
 11881  003528  5014               	movf	DS3231_Read_Alarm_Time@Address,w,c
 11882  00352A  ECC2  F01B         	call	_I2C_Write
 11883                           
 11884                           ;I2C_Support.c: 141: I2C_ReStart();
 11885  00352E  ECD2  F01D         	call	_I2C_ReStart	;wreg free
 11886                           
 11887                           ;I2C_Support.c: 142: I2C_Write((Device << 1) | 1);
 11888  003532  80D8               	bsf	status,0,c
 11889  003534  3415               	rlcf	DS3231_Read_Alarm_Time@Device,w,c
 11890  003536  ECC2  F01B         	call	_I2C_Write
 11891                           
 11892                           ;I2C_Support.c: 143: alarm_second = I2C_Read(1);
 11893  00353A  0E01               	movlw	1
 11894  00353C  EC1F  F01B         	call	_I2C_Read
 11895  003540  6E59               	movwf	_alarm_second,c
 11896                           
 11897                           ;I2C_Support.c: 144: alarm_minute = I2C_Read(1);
 11898  003542  0E01               	movlw	1
 11899  003544  EC1F  F01B         	call	_I2C_Read
 11900  003548  6E58               	movwf	_alarm_minute,c
 11901                           
 11902                           ;I2C_Support.c: 145: alarm_hour = I2C_Read(1);
 11903  00354A  0E01               	movlw	1
 11904  00354C  EC1F  F01B         	call	_I2C_Read
 11905  003550  6E57               	movwf	_alarm_hour,c
 11906                           
 11907                           ;I2C_Support.c: 146: alarm_date = I2C_Read(0);
 11908  003552  0E00               	movlw	0
 11909  003554  EC1F  F01B         	call	_I2C_Read
 11910  003558  6E56               	movwf	_alarm_date,c
 11911                           
 11912                           ;I2C_Support.c: 147: I2C_Stop();
 11913  00355A  EC3D  F01E         	call	_I2C_Stop	;wreg free
 11914  00355E  0012               	return		;funcret
 11915  003560                     __end_of_DS3231_Read_Alarm_Time:
 11916                           	opt stack 0
 11917                           tblptru	equ	0xFF8
 11918                           tblptrh	equ	0xFF7
 11919                           tblptrl	equ	0xFF6
 11920                           tablat	equ	0xFF5
 11921                           prodh	equ	0xFF4
 11922                           prodl	equ	0xFF3
 11923                           intcon	equ	0xFF2
 11924                           intcon2	equ	0xFF1
 11925                           postinc0	equ	0xFEE
 11926                           wreg	equ	0xFE8
 11927                           postdec1	equ	0xFE5
 11928                           fsr1l	equ	0xFE1
 11929                           indf2	equ	0xFDF
 11930                           postinc2	equ	0xFDE
 11931                           fsr2h	equ	0xFDA
 11932                           fsr2l	equ	0xFD9
 11933                           status	equ	0xFD8
 11934                           
 11935 ;; *************** function _Do_Beep_Good *****************
 11936 ;; Defined at:
 11937 ;;		line 72 in file "Utils.c"
 11938 ;; Parameters:    Size  Location     Type
 11939 ;;		None
 11940 ;; Auto vars:     Size  Location     Type
 11941 ;;		None
 11942 ;; Return value:  Size  Location     Type
 11943 ;;		None               void
 11944 ;; Registers used:
 11945 ;;		wreg, status,2, status,0, cstack
 11946 ;; Tracked objects:
 11947 ;;		On entry : 0/0
 11948 ;;		On exit  : 0/0
 11949 ;;		Unchanged: 0/0
 11950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11951 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11952 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11953 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11954 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11955 ;;Total ram usage:        0 bytes
 11956 ;; Hardware stack levels used:    1
 11957 ;; Hardware stack levels required when called:    6
 11958 ;; This function calls:
 11959 ;;		_Activate_Buzzer_2KHz
 11960 ;;		_Deactivate_Buzzer
 11961 ;;		_Wait_One_Sec
 11962 ;;		_do_update_pwm
 11963 ;; This function is called by:
 11964 ;;		_main
 11965 ;;		_Do_Setup_Time
 11966 ;;		_Do_Setup_Heater_Temp
 11967 ;;		_Do_Setup_Alarm_Time
 11968 ;; This function uses a non-reentrant model
 11969 ;;
 11970                           
 11971                           	psect	text61
 11972  003B74                     __ptext61:
 11973                           	opt stack 0
 11974  003B74                     _Do_Beep_Good:
 11975                           	opt stack 23
 11976                           
 11977                           ;Utils.c: 75: Activate_Buzzer_2KHz();
 11978                           
 11979                           ;incstack = 0
 11980  003B74  EC2B  F01E         	call	_Activate_Buzzer_2KHz	;wreg free
 11981                           
 11982                           ;Utils.c: 76: Wait_One_Sec();
 11983  003B78  EC34  F01D         	call	_Wait_One_Sec	;wreg free
 11984                           
 11985                           ;Utils.c: 77: Deactivate_Buzzer();
 11986  003B7C  ECC1  F01E         	call	_Deactivate_Buzzer	;wreg free
 11987                           
 11988                           ;Utils.c: 78: Wait_One_Sec();
 11989  003B80  EC34  F01D         	call	_Wait_One_Sec	;wreg free
 11990                           
 11991                           ;Utils.c: 79: do_update_pwm(duty_cycle);
 11992  003B84  505D               	movf	_duty_cycle,w,c
 11993  003B86  EC49  F014         	call	_do_update_pwm
 11994  003B8A  0012               	return		;funcret
 11995  003B8C                     __end_of_Do_Beep_Good:
 11996                           	opt stack 0
 11997                           tblptru	equ	0xFF8
 11998                           tblptrh	equ	0xFF7
 11999                           tblptrl	equ	0xFF6
 12000                           tablat	equ	0xFF5
 12001                           prodh	equ	0xFF4
 12002                           prodl	equ	0xFF3
 12003                           intcon	equ	0xFF2
 12004                           intcon2	equ	0xFF1
 12005                           postinc0	equ	0xFEE
 12006                           wreg	equ	0xFE8
 12007                           postdec1	equ	0xFE5
 12008                           fsr1l	equ	0xFE1
 12009                           indf2	equ	0xFDF
 12010                           postinc2	equ	0xFDE
 12011                           fsr2h	equ	0xFDA
 12012                           fsr2l	equ	0xFD9
 12013                           status	equ	0xFD8
 12014                           
 12015 ;; *************** function _Activate_Buzzer_2KHz *****************
 12016 ;; Defined at:
 12017 ;;		line 113 in file "Utils.c"
 12018 ;; Parameters:    Size  Location     Type
 12019 ;;		None
 12020 ;; Auto vars:     Size  Location     Type
 12021 ;;		None
 12022 ;; Return value:  Size  Location     Type
 12023 ;;		None               void
 12024 ;; Registers used:
 12025 ;;		wreg, status,2
 12026 ;; Tracked objects:
 12027 ;;		On entry : 0/0
 12028 ;;		On exit  : 0/0
 12029 ;;		Unchanged: 0/0
 12030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12031 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12032 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12033 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12034 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12035 ;;Total ram usage:        0 bytes
 12036 ;; Hardware stack levels used:    1
 12037 ;; Hardware stack levels required when called:    3
 12038 ;; This function calls:
 12039 ;;		Nothing
 12040 ;; This function is called by:
 12041 ;;		_Do_Beep_Good
 12042 ;; This function uses a non-reentrant model
 12043 ;;
 12044                           
 12045                           	psect	text62
 12046  003C56                     __ptext62:
 12047                           	opt stack 0
 12048  003C56                     _Activate_Buzzer_2KHz:
 12049                           	opt stack 25
 12050                           
 12051                           ;Utils.c: 115: PR2 = 0b11111001 ;
 12052                           
 12053                           ;incstack = 0
 12054  003C56  0EF9               	movlw	249
 12055  003C58  6ECB               	movwf	4043,c	;volatile
 12056                           
 12057                           ;Utils.c: 116: T2CON = 0b00000101 ;
 12058  003C5A  0E05               	movlw	5
 12059  003C5C  6ECA               	movwf	4042,c	;volatile
 12060                           
 12061                           ;Utils.c: 117: CCPR2L = 0b01111100 ;
 12062  003C5E  0E7C               	movlw	124
 12063  003C60  6EBB               	movwf	4027,c	;volatile
 12064                           
 12065                           ;Utils.c: 118: CCP2CON = 0b00111100 ;
 12066  003C62  0E3C               	movlw	60
 12067  003C64  6EBA               	movwf	4026,c	;volatile
 12068  003C66  0012               	return		;funcret
 12069  003C68                     __end_of_Activate_Buzzer_2KHz:
 12070                           	opt stack 0
 12071                           tblptru	equ	0xFF8
 12072                           tblptrh	equ	0xFF7
 12073                           tblptrl	equ	0xFF6
 12074                           tablat	equ	0xFF5
 12075                           prodh	equ	0xFF4
 12076                           prodl	equ	0xFF3
 12077                           intcon	equ	0xFF2
 12078                           intcon2	equ	0xFF1
 12079                           postinc0	equ	0xFEE
 12080                           wreg	equ	0xFE8
 12081                           postdec1	equ	0xFE5
 12082                           fsr1l	equ	0xFE1
 12083                           indf2	equ	0xFDF
 12084                           postinc2	equ	0xFDE
 12085                           fsr2h	equ	0xFDA
 12086                           fsr2l	equ	0xFD9
 12087                           status	equ	0xFD8
 12088                           
 12089 ;; *************** function _Do_Beep_Bad *****************
 12090 ;; Defined at:
 12091 ;;		line 82 in file "Utils.c"
 12092 ;; Parameters:    Size  Location     Type
 12093 ;;		None
 12094 ;; Auto vars:     Size  Location     Type
 12095 ;;		None
 12096 ;; Return value:  Size  Location     Type
 12097 ;;		None               void
 12098 ;; Registers used:
 12099 ;;		wreg, status,2, status,0, cstack
 12100 ;; Tracked objects:
 12101 ;;		On entry : 0/0
 12102 ;;		On exit  : 0/0
 12103 ;;		Unchanged: 0/0
 12104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12105 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12106 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12107 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12108 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12109 ;;Total ram usage:        0 bytes
 12110 ;; Hardware stack levels used:    1
 12111 ;; Hardware stack levels required when called:    6
 12112 ;; This function calls:
 12113 ;;		_Activate_Buzzer_500Hz
 12114 ;;		_Deactivate_Buzzer
 12115 ;;		_Wait_One_Sec
 12116 ;;		_do_update_pwm
 12117 ;; This function is called by:
 12118 ;;		_main
 12119 ;;		_Do_Setup_Time
 12120 ;;		_Do_Setup_Heater_Temp
 12121 ;;		_Do_Setup_Alarm_Time
 12122 ;; This function uses a non-reentrant model
 12123 ;;
 12124                           
 12125                           	psect	text63
 12126  003B8C                     __ptext63:
 12127                           	opt stack 0
 12128  003B8C                     _Do_Beep_Bad:
 12129                           	opt stack 23
 12130                           
 12131                           ;Utils.c: 85: Activate_Buzzer_500Hz();
 12132                           
 12133                           ;incstack = 0
 12134  003B8C  EC34  F01E         	call	_Activate_Buzzer_500Hz	;wreg free
 12135                           
 12136                           ;Utils.c: 86: Wait_One_Sec();
 12137  003B90  EC34  F01D         	call	_Wait_One_Sec	;wreg free
 12138                           
 12139                           ;Utils.c: 87: Deactivate_Buzzer();
 12140  003B94  ECC1  F01E         	call	_Deactivate_Buzzer	;wreg free
 12141                           
 12142                           ;Utils.c: 88: Wait_One_Sec();
 12143  003B98  EC34  F01D         	call	_Wait_One_Sec	;wreg free
 12144                           
 12145                           ;Utils.c: 89: do_update_pwm(duty_cycle);
 12146  003B9C  505D               	movf	_duty_cycle,w,c
 12147  003B9E  EC49  F014         	call	_do_update_pwm
 12148  003BA2  0012               	return		;funcret
 12149  003BA4                     __end_of_Do_Beep_Bad:
 12150                           	opt stack 0
 12151                           tblptru	equ	0xFF8
 12152                           tblptrh	equ	0xFF7
 12153                           tblptrl	equ	0xFF6
 12154                           tablat	equ	0xFF5
 12155                           prodh	equ	0xFF4
 12156                           prodl	equ	0xFF3
 12157                           intcon	equ	0xFF2
 12158                           intcon2	equ	0xFF1
 12159                           postinc0	equ	0xFEE
 12160                           wreg	equ	0xFE8
 12161                           postdec1	equ	0xFE5
 12162                           fsr1l	equ	0xFE1
 12163                           indf2	equ	0xFDF
 12164                           postinc2	equ	0xFDE
 12165                           fsr2h	equ	0xFDA
 12166                           fsr2l	equ	0xFD9
 12167                           status	equ	0xFD8
 12168                           
 12169 ;; *************** function _do_update_pwm *****************
 12170 ;; Defined at:
 12171 ;;		line 135 in file "Utils.c"
 12172 ;; Parameters:    Size  Location     Type
 12173 ;;  duty_cycle      1    wreg     unsigned char 
 12174 ;; Auto vars:     Size  Location     Type
 12175 ;;  duty_cycle      1   64[COMRAM] unsigned char 
 12176 ;;  dc_f            3   61[COMRAM] float 
 12177 ;;  dc_I            2   65[COMRAM] int 
 12178 ;; Return value:  Size  Location     Type
 12179 ;;		None               void
 12180 ;; Registers used:
 12181 ;;		wreg, status,2, status,0, cstack
 12182 ;; Tracked objects:
 12183 ;;		On entry : 0/0
 12184 ;;		On exit  : 0/0
 12185 ;;		Unchanged: 0/0
 12186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12187 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12188 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12189 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12190 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12191 ;;Total ram usage:        9 bytes
 12192 ;; Hardware stack levels used:    1
 12193 ;; Hardware stack levels required when called:    5
 12194 ;; This function calls:
 12195 ;;		___ftdiv
 12196 ;;		___ftmul
 12197 ;;		___fttol
 12198 ;;		___lbtoft
 12199 ;; This function is called by:
 12200 ;;		_Monitor_Heater
 12201 ;;		_Do_Beep_Good
 12202 ;;		_Do_Beep_Bad
 12203 ;;		_Test_Alarm
 12204 ;;		_Turn_On_Fan
 12205 ;;		_Do_Beep
 12206 ;; This function uses a non-reentrant model
 12207 ;;
 12208                           
 12209                           	psect	text64
 12210  002892                     __ptext64:
 12211                           	opt stack 0
 12212  002892                     _do_update_pwm:
 12213                           	opt stack 24
 12214                           
 12215                           ;incstack = 0
 12216                           ;do_update_pwm@duty_cycle stored from wreg
 12217  002892  6E41               	movwf	do_update_pwm@duty_cycle,c
 12218                           
 12219                           ;Utils.c: 137: float dc_f;
 12220                           ;Utils.c: 138: int dc_I;
 12221                           ;Utils.c: 139: PR2 = 0b00000100 ;
 12222  002894  0E04               	movlw	4
 12223  002896  6ECB               	movwf	4043,c	;volatile
 12224                           
 12225                           ;Utils.c: 140: T2CON = 0b00000111 ;
 12226  002898  0E07               	movlw	7
 12227  00289A  6ECA               	movwf	4042,c	;volatile
 12228                           
 12229                           ;Utils.c: 141: dc_f = ( 4.0 * duty_cycle / 20.0) ;
 12230  00289C  0E00               	movlw	0
 12231  00289E  6E20               	movwf	___ftmul@f2,c
 12232  0028A0  0E80               	movlw	128
 12233  0028A2  6E21               	movwf	___ftmul@f2+1,c
 12234  0028A4  0E40               	movlw	64
 12235  0028A6  6E22               	movwf	___ftmul@f2+2,c
 12236  0028A8  5041               	movf	do_update_pwm@duty_cycle,w,c
 12237  0028AA  ECEE  F01C         	call	___lbtoft
 12238  0028AE  C019  F01D         	movff	?___lbtoft,___ftmul@f1
 12239  0028B2  C01A  F01E         	movff	?___lbtoft+1,___ftmul@f1+1
 12240  0028B6  C01B  F01F         	movff	?___lbtoft+2,___ftmul@f1+2
 12241  0028BA  EC25  F00F         	call	___ftmul	;wreg free
 12242  0028BE  C01D  F02C         	movff	?___ftmul,___ftdiv@f1
 12243  0028C2  C01E  F02D         	movff	?___ftmul+1,___ftdiv@f1+1
 12244  0028C6  C01F  F02E         	movff	?___ftmul+2,___ftdiv@f1+2
 12245  0028CA  0E00               	movlw	0
 12246  0028CC  6E2F               	movwf	___ftdiv@f2,c
 12247  0028CE  0EA0               	movlw	160
 12248  0028D0  6E30               	movwf	___ftdiv@f2+1,c
 12249  0028D2  0E41               	movlw	65
 12250  0028D4  6E31               	movwf	___ftdiv@f2+2,c
 12251  0028D6  EC7F  F011         	call	___ftdiv	;wreg free
 12252  0028DA  C02C  F03E         	movff	?___ftdiv,do_update_pwm@dc_f
 12253  0028DE  C02D  F03F         	movff	?___ftdiv+1,do_update_pwm@dc_f+1
 12254  0028E2  C02E  F040         	movff	?___ftdiv+2,do_update_pwm@dc_f+2
 12255                           
 12256                           ;Utils.c: 142: dc_I = (int) dc_f;
 12257  0028E6  C03E  F02C         	movff	do_update_pwm@dc_f,___fttol@f1
 12258  0028EA  C03F  F02D         	movff	do_update_pwm@dc_f+1,___fttol@f1+1
 12259  0028EE  C040  F02E         	movff	do_update_pwm@dc_f+2,___fttol@f1+2
 12260  0028F2  EC0C  F011         	call	___fttol	;wreg free
 12261  0028F6  C02C  F042         	movff	?___fttol,do_update_pwm@dc_I
 12262  0028FA  C02D  F043         	movff	?___fttol+1,do_update_pwm@dc_I+1
 12263                           
 12264                           ;Utils.c: 143: if (dc_I > duty_cycle) dc_I++;
 12265  0028FE  5041               	movf	do_update_pwm@duty_cycle,w,c
 12266  002900  6E3B               	movwf	??_do_update_pwm& (0+255),c
 12267  002902  6A3C               	clrf	(??_do_update_pwm+1)& (0+255),c
 12268  002904  5042               	movf	do_update_pwm@dc_I,w,c
 12269  002906  5C3B               	subwf	??_do_update_pwm,w,c
 12270  002908  503C               	movf	??_do_update_pwm+1,w,c
 12271  00290A  0A80               	xorlw	128
 12272  00290C  6E3D               	movwf	(??_do_update_pwm+2)& (0+255),c
 12273  00290E  5043               	movf	do_update_pwm@dc_I+1,w,c
 12274  002910  0A80               	xorlw	128
 12275  002912  583D               	subwfb	(??_do_update_pwm+2)& (0+255),w,c
 12276  002914  B0D8               	btfsc	status,0,c
 12277  002916  D003               	goto	l8903
 12278  002918  4A42               	infsnz	do_update_pwm@dc_I,f,c
 12279  00291A  2A43               	incf	do_update_pwm@dc_I+1,f,c
 12280  00291C  D000               	goto	l8903
 12281  00291E                     l8903:
 12282                           
 12283                           ;Utils.c: 144: CCP1CON = ((dc_I & 0x03) << 4) | 0b00001100;
 12284  00291E  C042  F03B         	movff	do_update_pwm@dc_I,??_do_update_pwm
 12285  002922  0E03               	movlw	3
 12286  002924  163B               	andwf	??_do_update_pwm,f,c
 12287  002926  383B               	swapf	??_do_update_pwm,w,c
 12288  002928  0BF0               	andlw	240
 12289  00292A  090C               	iorlw	12
 12290  00292C  6EBD               	movwf	4029,c	;volatile
 12291                           
 12292                           ;Utils.c: 145: CCPR1L = (dc_I) >> 2;
 12293  00292E  C042  F03B         	movff	do_update_pwm@dc_I,??_do_update_pwm
 12294  002932  C043  F03C         	movff	do_update_pwm@dc_I+1,??_do_update_pwm+1
 12295  002936  343C               	rlcf	??_do_update_pwm+1,w,c
 12296  002938  323C               	rrcf	??_do_update_pwm+1,f,c
 12297  00293A  323B               	rrcf	??_do_update_pwm,f,c
 12298  00293C  343C               	rlcf	??_do_update_pwm+1,w,c
 12299  00293E  323C               	rrcf	??_do_update_pwm+1,f,c
 12300  002940  323B               	rrcf	??_do_update_pwm,f,c
 12301  002942  503B               	movf	??_do_update_pwm,w,c
 12302  002944  6EBE               	movwf	4030,c	;volatile
 12303  002946  0012               	return		;funcret
 12304  002948                     __end_of_do_update_pwm:
 12305                           	opt stack 0
 12306                           tblptru	equ	0xFF8
 12307                           tblptrh	equ	0xFF7
 12308                           tblptrl	equ	0xFF6
 12309                           tablat	equ	0xFF5
 12310                           prodh	equ	0xFF4
 12311                           prodl	equ	0xFF3
 12312                           intcon	equ	0xFF2
 12313                           intcon2	equ	0xFF1
 12314                           postinc0	equ	0xFEE
 12315                           wreg	equ	0xFE8
 12316                           postdec1	equ	0xFE5
 12317                           fsr1l	equ	0xFE1
 12318                           indf2	equ	0xFDF
 12319                           postinc2	equ	0xFDE
 12320                           fsr2h	equ	0xFDA
 12321                           fsr2l	equ	0xFD9
 12322                           status	equ	0xFD8
 12323                           
 12324 ;; *************** function ___lbtoft *****************
 12325 ;; Defined at:
 12326 ;;		line 27 in file "E:\XC8\sources\common\lbtoft.c"
 12327 ;; Parameters:    Size  Location     Type
 12328 ;;  c               1    wreg     unsigned char 
 12329 ;; Auto vars:     Size  Location     Type
 12330 ;;  c               1   27[COMRAM] unsigned char 
 12331 ;; Return value:  Size  Location     Type
 12332 ;;                  3   24[COMRAM] float 
 12333 ;; Registers used:
 12334 ;;		wreg, status,2, status,0, cstack
 12335 ;; Tracked objects:
 12336 ;;		On entry : 0/0
 12337 ;;		On exit  : 0/0
 12338 ;;		Unchanged: 0/0
 12339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12340 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12341 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12342 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12343 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12344 ;;Total ram usage:        4 bytes
 12345 ;; Hardware stack levels used:    1
 12346 ;; Hardware stack levels required when called:    4
 12347 ;; This function calls:
 12348 ;;		___ftpack
 12349 ;; This function is called by:
 12350 ;;		_do_update_pwm
 12351 ;; This function uses a non-reentrant model
 12352 ;;
 12353                           
 12354                           	psect	text65
 12355  0039DC                     __ptext65:
 12356                           	opt stack 0
 12357  0039DC                     ___lbtoft:
 12358                           	opt stack 24
 12359                           
 12360                           ;incstack = 0
 12361                           ;___lbtoft@c stored from wreg
 12362  0039DC  6E1C               	movwf	___lbtoft@c,c
 12363  0039DE  501C               	movf	___lbtoft@c,w,c
 12364  0039E0  6E11               	movwf	___ftpack@arg,c
 12365  0039E2  6A12               	clrf	___ftpack@arg+1,c
 12366  0039E4  6A13               	clrf	___ftpack@arg+2,c
 12367  0039E6  0E8E               	movlw	142
 12368  0039E8  6E14               	movwf	___ftpack@exp,c
 12369  0039EA  0E00               	movlw	0
 12370  0039EC  6E15               	movwf	___ftpack@sign,c
 12371  0039EE  EC2B  F013         	call	___ftpack	;wreg free
 12372  0039F2  C011  F019         	movff	?___ftpack,?___lbtoft
 12373  0039F6  C012  F01A         	movff	?___ftpack+1,?___lbtoft+1
 12374  0039FA  C013  F01B         	movff	?___ftpack+2,?___lbtoft+2
 12375  0039FE  D000               	goto	l1930
 12376  003A00                     l1930:
 12377  003A00  0012               	return		;funcret
 12378  003A02                     __end_of___lbtoft:
 12379                           	opt stack 0
 12380                           tblptru	equ	0xFF8
 12381                           tblptrh	equ	0xFF7
 12382                           tblptrl	equ	0xFF6
 12383                           tablat	equ	0xFF5
 12384                           prodh	equ	0xFF4
 12385                           prodl	equ	0xFF3
 12386                           intcon	equ	0xFF2
 12387                           intcon2	equ	0xFF1
 12388                           postinc0	equ	0xFEE
 12389                           wreg	equ	0xFE8
 12390                           postdec1	equ	0xFE5
 12391                           fsr1l	equ	0xFE1
 12392                           indf2	equ	0xFDF
 12393                           postinc2	equ	0xFDE
 12394                           fsr2h	equ	0xFDA
 12395                           fsr2l	equ	0xFD9
 12396                           status	equ	0xFD8
 12397                           
 12398 ;; *************** function ___fttol *****************
 12399 ;; Defined at:
 12400 ;;		line 44 in file "E:\XC8\sources\common\fttol.c"
 12401 ;; Parameters:    Size  Location     Type
 12402 ;;  f1              3   43[COMRAM] float 
 12403 ;; Auto vars:     Size  Location     Type
 12404 ;;  lval            4   53[COMRAM] unsigned long 
 12405 ;;  exp1            1   57[COMRAM] unsigned char 
 12406 ;;  sign1           1   52[COMRAM] unsigned char 
 12407 ;; Return value:  Size  Location     Type
 12408 ;;                  4   43[COMRAM] long 
 12409 ;; Registers used:
 12410 ;;		wreg, status,2, status,0
 12411 ;; Tracked objects:
 12412 ;;		On entry : 0/0
 12413 ;;		On exit  : 0/0
 12414 ;;		Unchanged: 0/0
 12415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12416 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12417 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12418 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12419 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12420 ;;Total ram usage:       15 bytes
 12421 ;; Hardware stack levels used:    1
 12422 ;; Hardware stack levels required when called:    3
 12423 ;; This function calls:
 12424 ;;		Nothing
 12425 ;; This function is called by:
 12426 ;;		_Update_Screen
 12427 ;;		_do_update_pwm
 12428 ;; This function uses a non-reentrant model
 12429 ;;
 12430                           
 12431                           	psect	text66
 12432  002218                     __ptext66:
 12433                           	opt stack 0
 12434  002218                     ___fttol:
 12435                           	opt stack 26
 12436                           
 12437                           ;incstack = 0
 12438  002218  C02E  F030         	movff	___fttol@f1+2,??___fttol
 12439  00221C  6A31               	clrf	(??___fttol+1)& (0+255),c
 12440  00221E  6A32               	clrf	(??___fttol+2)& (0+255),c
 12441  002220  342D               	rlcf	___fttol@f1+1,w,c
 12442  002222  3630               	rlcf	??___fttol& (0+255),f,c
 12443  002224  E301               	bnc	u6271
 12444  002226  8031               	bsf	(??___fttol+1)& (0+255),0,c
 12445  002228                     u6271:
 12446  002228  5030               	movf	??___fttol,w,c
 12447  00222A  6E3A               	movwf	___fttol@exp1,c
 12448  00222C  503A               	movf	___fttol@exp1,w,c
 12449  00222E  A4D8               	btfss	status,2,c
 12450  002230  D002               	goto	l8697
 12451  002232  D039               	goto	l8721
 12452  002234  D063               	goto	l1889
 12453  002236                     l8697:
 12454  002236  0E17               	movlw	23
 12455  002238  6E30               	movwf	??___fttol& (0+255),c
 12456  00223A  C02C  F031         	movff	___fttol@f1,??___fttol+1
 12457  00223E  C02D  F032         	movff	___fttol@f1+1,??___fttol+2
 12458  002242  C02E  F033         	movff	___fttol@f1+2,??___fttol+3
 12459  002246  2830               	incf	??___fttol,w,c
 12460  002248  6E34               	movwf	(??___fttol+4)& (0+255),c
 12461  00224A  D004               	goto	u6290
 12462  00224C                     u6295:
 12463  00224C  90D8               	bcf	status,0,c
 12464  00224E  3233               	rrcf	??___fttol+3,f,c
 12465  002250  3232               	rrcf	??___fttol+2,f,c
 12466  002252  3231               	rrcf	??___fttol+1,f,c
 12467  002254                     u6290:
 12468  002254  2E34               	decfsz	(??___fttol+4)& (0+255),f,c
 12469  002256  D7FA               	goto	u6295
 12470  002258  5031               	movf	??___fttol+1,w,c
 12471  00225A  6E35               	movwf	___fttol@sign1,c
 12472  00225C  8E2D               	bsf	___fttol@f1+1,7,c
 12473  00225E  0EFF               	movlw	255
 12474  002260  162C               	andwf	___fttol@f1,f,c
 12475  002262  0EFF               	movlw	255
 12476  002264  162D               	andwf	___fttol@f1+1,f,c
 12477  002266  0E00               	movlw	0
 12478  002268  162E               	andwf	___fttol@f1+2,f,c
 12479  00226A  502C               	movf	___fttol@f1,w,c
 12480  00226C  6E36               	movwf	___fttol@lval,c
 12481  00226E  502D               	movf	___fttol@f1+1,w,c
 12482  002270  6E37               	movwf	___fttol@lval+1,c
 12483  002272  502E               	movf	___fttol@f1+2,w,c
 12484  002274  6E38               	movwf	___fttol@lval+2,c
 12485  002276  6A39               	clrf	___fttol@lval+3,c
 12486  002278  0E8E               	movlw	142
 12487  00227A  5E3A               	subwf	___fttol@exp1,f,c
 12488  00227C  AE3A               	btfss	___fttol@exp1,7,c
 12489  00227E  D010               	goto	l8719
 12490  002280  503A               	movf	___fttol@exp1,w,c
 12491  002282  0A80               	xorlw	128
 12492  002284  0F8F               	addlw	143
 12493  002286  B0D8               	btfsc	status,0,c
 12494  002288  D003               	goto	l8715
 12495  00228A  D00D               	goto	l8721
 12496  00228C  D037               	goto	l1889
 12497  00228E  D000               	goto	l8715
 12498  002290                     l8715:
 12499  002290  90D8               	bcf	status,0,c
 12500  002292  3239               	rrcf	___fttol@lval+3,f,c
 12501  002294  3238               	rrcf	___fttol@lval+2,f,c
 12502  002296  3237               	rrcf	___fttol@lval+1,f,c
 12503  002298  3236               	rrcf	___fttol@lval,f,c
 12504  00229A  3E3A               	incfsz	___fttol@exp1,f,c
 12505  00229C  D7F9               	goto	l8715
 12506  00229E  D019               	goto	l8729
 12507  0022A0                     l8719:
 12508  0022A0  0E17               	movlw	23
 12509  0022A2  643A               	cpfsgt	___fttol@exp1,c
 12510  0022A4  D011               	goto	l8727
 12511  0022A6                     l8721:
 12512  0022A6  0E00               	movlw	0
 12513  0022A8  6E2C               	movwf	?___fttol,c
 12514  0022AA  0E00               	movlw	0
 12515  0022AC  6E2D               	movwf	?___fttol+1,c
 12516  0022AE  0E00               	movlw	0
 12517  0022B0  6E2E               	movwf	?___fttol+2,c
 12518  0022B2  0E00               	movlw	0
 12519  0022B4  6E2F               	movwf	?___fttol+3,c
 12520  0022B6  D022               	goto	l1889
 12521  0022B8  D007               	goto	l8727
 12522  0022BA                     l8725:
 12523  0022BA  90D8               	bcf	status,0,c
 12524  0022BC  3636               	rlcf	___fttol@lval,f,c
 12525  0022BE  3637               	rlcf	___fttol@lval+1,f,c
 12526  0022C0  3638               	rlcf	___fttol@lval+2,f,c
 12527  0022C2  3639               	rlcf	___fttol@lval+3,f,c
 12528  0022C4  063A               	decf	___fttol@exp1,f,c
 12529  0022C6  D000               	goto	l8727
 12530  0022C8                     l8727:
 12531  0022C8  503A               	movf	___fttol@exp1,w,c
 12532  0022CA  B4D8               	btfsc	status,2,c
 12533  0022CC  D002               	goto	l8729
 12534  0022CE  D7F5               	goto	l8725
 12535  0022D0  D000               	goto	l8729
 12536  0022D2                     l8729:
 12537  0022D2  5035               	movf	___fttol@sign1,w,c
 12538  0022D4  B4D8               	btfsc	status,2,c
 12539  0022D6  D009               	goto	l8733
 12540  0022D8  1E39               	comf	___fttol@lval+3,f,c
 12541  0022DA  1E38               	comf	___fttol@lval+2,f,c
 12542  0022DC  1E37               	comf	___fttol@lval+1,f,c
 12543  0022DE  6C36               	negf	___fttol@lval,c
 12544  0022E0  0E00               	movlw	0
 12545  0022E2  2237               	addwfc	___fttol@lval+1,f,c
 12546  0022E4  2238               	addwfc	___fttol@lval+2,f,c
 12547  0022E6  2239               	addwfc	___fttol@lval+3,f,c
 12548  0022E8  D000               	goto	l8733
 12549  0022EA                     l8733:
 12550  0022EA  C036  F02C         	movff	___fttol@lval,?___fttol
 12551  0022EE  C037  F02D         	movff	___fttol@lval+1,?___fttol+1
 12552  0022F2  C038  F02E         	movff	___fttol@lval+2,?___fttol+2
 12553  0022F6  C039  F02F         	movff	___fttol@lval+3,?___fttol+3
 12554  0022FA  D000               	goto	l1889
 12555  0022FC                     l1889:
 12556  0022FC  0012               	return		;funcret
 12557  0022FE                     __end_of___fttol:
 12558                           	opt stack 0
 12559                           tblptru	equ	0xFF8
 12560                           tblptrh	equ	0xFF7
 12561                           tblptrl	equ	0xFF6
 12562                           tablat	equ	0xFF5
 12563                           prodh	equ	0xFF4
 12564                           prodl	equ	0xFF3
 12565                           intcon	equ	0xFF2
 12566                           intcon2	equ	0xFF1
 12567                           postinc0	equ	0xFEE
 12568                           wreg	equ	0xFE8
 12569                           postdec1	equ	0xFE5
 12570                           fsr1l	equ	0xFE1
 12571                           indf2	equ	0xFDF
 12572                           postinc2	equ	0xFDE
 12573                           fsr2h	equ	0xFDA
 12574                           fsr2l	equ	0xFD9
 12575                           status	equ	0xFD8
 12576                           
 12577 ;; *************** function ___ftmul *****************
 12578 ;; Defined at:
 12579 ;;		line 62 in file "E:\XC8\sources\common\ftmul.c"
 12580 ;; Parameters:    Size  Location     Type
 12581 ;;  f1              3   28[COMRAM] float 
 12582 ;;  f2              3   31[COMRAM] float 
 12583 ;; Auto vars:     Size  Location     Type
 12584 ;;  f3_as_produc    3   38[COMRAM] unsigned um
 12585 ;;  sign            1   42[COMRAM] unsigned char 
 12586 ;;  cntr            1   41[COMRAM] unsigned char 
 12587 ;;  exp             1   37[COMRAM] unsigned char 
 12588 ;; Return value:  Size  Location     Type
 12589 ;;                  3   28[COMRAM] float 
 12590 ;; Registers used:
 12591 ;;		wreg, status,2, status,0, cstack
 12592 ;; Tracked objects:
 12593 ;;		On entry : 0/0
 12594 ;;		On exit  : 0/0
 12595 ;;		Unchanged: 0/0
 12596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12597 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12598 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12599 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12600 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12601 ;;Total ram usage:       15 bytes
 12602 ;; Hardware stack levels used:    1
 12603 ;; Hardware stack levels required when called:    4
 12604 ;; This function calls:
 12605 ;;		___ftpack
 12606 ;; This function is called by:
 12607 ;;		_Update_Screen
 12608 ;;		_do_update_pwm
 12609 ;; This function uses a non-reentrant model
 12610 ;;
 12611                           
 12612                           	psect	text67
 12613  001E4A                     __ptext67:
 12614                           	opt stack 0
 12615  001E4A                     ___ftmul:
 12616                           	opt stack 25
 12617                           
 12618                           ;incstack = 0
 12619  001E4A  C01F  F023         	movff	___ftmul@f1+2,??___ftmul
 12620  001E4E  6A24               	clrf	(??___ftmul+1)& (0+255),c
 12621  001E50  6A25               	clrf	(??___ftmul+2)& (0+255),c
 12622  001E52  341E               	rlcf	___ftmul@f1+1,w,c
 12623  001E54  3623               	rlcf	??___ftmul& (0+255),f,c
 12624  001E56  E301               	bnc	u6211
 12625  001E58  8024               	bsf	(??___ftmul+1)& (0+255),0,c
 12626  001E5A                     u6211:
 12627  001E5A  5023               	movf	??___ftmul,w,c
 12628  001E5C  6E26               	movwf	___ftmul@exp,c
 12629  001E5E  5026               	movf	___ftmul@exp,w,c
 12630  001E60  A4D8               	btfss	status,2,c
 12631  001E62  D002               	goto	l8649
 12632  001E64  D00E               	goto	l8651
 12633  001E66  D06C               	goto	l1868
 12634  001E68                     l8649:
 12635  001E68  C022  F023         	movff	___ftmul@f2+2,??___ftmul
 12636  001E6C  6A24               	clrf	(??___ftmul+1)& (0+255),c
 12637  001E6E  6A25               	clrf	(??___ftmul+2)& (0+255),c
 12638  001E70  3421               	rlcf	___ftmul@f2+1,w,c
 12639  001E72  3623               	rlcf	??___ftmul& (0+255),f,c
 12640  001E74  E301               	bnc	u6231
 12641  001E76  8024               	bsf	(??___ftmul+1)& (0+255),0,c
 12642  001E78                     u6231:
 12643  001E78  5023               	movf	??___ftmul,w,c
 12644  001E7A  6E2B               	movwf	___ftmul@sign,c
 12645  001E7C  502B               	movf	___ftmul@sign,w,c
 12646  001E7E  A4D8               	btfss	status,2,c
 12647  001E80  D007               	goto	l8655
 12648  001E82                     l8651:
 12649  001E82  0E00               	movlw	0
 12650  001E84  6E1D               	movwf	?___ftmul,c
 12651  001E86  0E00               	movlw	0
 12652  001E88  6E1E               	movwf	?___ftmul+1,c
 12653  001E8A  0E00               	movlw	0
 12654  001E8C  6E1F               	movwf	?___ftmul+2,c
 12655  001E8E  D058               	goto	l1868
 12656  001E90                     l8655:
 12657  001E90  502B               	movf	___ftmul@sign,w,c
 12658  001E92  0F7B               	addlw	123
 12659  001E94  2626               	addwf	___ftmul@exp,f,c
 12660  001E96  C01F  F02B         	movff	___ftmul@f1+2,___ftmul@sign
 12661  001E9A  5022               	movf	___ftmul@f2+2,w,c
 12662  001E9C  1A2B               	xorwf	___ftmul@sign,f,c
 12663  001E9E  0E80               	movlw	128
 12664  001EA0  162B               	andwf	___ftmul@sign,f,c
 12665  001EA2  8E1E               	bsf	___ftmul@f1+1,7,c
 12666  001EA4  8E21               	bsf	___ftmul@f2+1,7,c
 12667  001EA6  0EFF               	movlw	255
 12668  001EA8  1620               	andwf	___ftmul@f2,f,c
 12669  001EAA  0EFF               	movlw	255
 12670  001EAC  1621               	andwf	___ftmul@f2+1,f,c
 12671  001EAE  0E00               	movlw	0
 12672  001EB0  1622               	andwf	___ftmul@f2+2,f,c
 12673  001EB2  0E00               	movlw	0
 12674  001EB4  6E27               	movwf	___ftmul@f3_as_product,c
 12675  001EB6  0E00               	movlw	0
 12676  001EB8  6E28               	movwf	___ftmul@f3_as_product+1,c
 12677  001EBA  0E00               	movlw	0
 12678  001EBC  6E29               	movwf	___ftmul@f3_as_product+2,c
 12679  001EBE  0E07               	movlw	7
 12680  001EC0  6E2A               	movwf	___ftmul@cntr,c
 12681  001EC2  D000               	goto	l8669
 12682  001EC4                     l8669:
 12683  001EC4  A01D               	btfss	___ftmul@f1,0,c
 12684  001EC6  D007               	goto	l8673
 12685  001EC8  5020               	movf	___ftmul@f2,w,c
 12686  001ECA  2627               	addwf	___ftmul@f3_as_product,f,c
 12687  001ECC  5021               	movf	___ftmul@f2+1,w,c
 12688  001ECE  2228               	addwfc	___ftmul@f3_as_product+1,f,c
 12689  001ED0  5022               	movf	___ftmul@f2+2,w,c
 12690  001ED2  2229               	addwfc	___ftmul@f3_as_product+2,f,c
 12691  001ED4  D000               	goto	l8673
 12692  001ED6                     l8673:
 12693  001ED6  90D8               	bcf	status,0,c
 12694  001ED8  321F               	rrcf	___ftmul@f1+2,f,c
 12695  001EDA  321E               	rrcf	___ftmul@f1+1,f,c
 12696  001EDC  321D               	rrcf	___ftmul@f1,f,c
 12697  001EDE  90D8               	bcf	status,0,c
 12698  001EE0  3620               	rlcf	___ftmul@f2,f,c
 12699  001EE2  3621               	rlcf	___ftmul@f2+1,f,c
 12700  001EE4  3622               	rlcf	___ftmul@f2+2,f,c
 12701  001EE6  2E2A               	decfsz	___ftmul@cntr,f,c
 12702  001EE8  D7ED               	goto	l8669
 12703  001EEA  D000               	goto	l8677
 12704  001EEC                     l8677:
 12705  001EEC  0E09               	movlw	9
 12706  001EEE  6E2A               	movwf	___ftmul@cntr,c
 12707  001EF0  D000               	goto	l8679
 12708  001EF2                     l8679:
 12709  001EF2  A01D               	btfss	___ftmul@f1,0,c
 12710  001EF4  D007               	goto	l8683
 12711  001EF6  5020               	movf	___ftmul@f2,w,c
 12712  001EF8  2627               	addwf	___ftmul@f3_as_product,f,c
 12713  001EFA  5021               	movf	___ftmul@f2+1,w,c
 12714  001EFC  2228               	addwfc	___ftmul@f3_as_product+1,f,c
 12715  001EFE  5022               	movf	___ftmul@f2+2,w,c
 12716  001F00  2229               	addwfc	___ftmul@f3_as_product+2,f,c
 12717  001F02  D000               	goto	l8683
 12718  001F04                     l8683:
 12719  001F04  90D8               	bcf	status,0,c
 12720  001F06  321F               	rrcf	___ftmul@f1+2,f,c
 12721  001F08  321E               	rrcf	___ftmul@f1+1,f,c
 12722  001F0A  321D               	rrcf	___ftmul@f1,f,c
 12723  001F0C  90D8               	bcf	status,0,c
 12724  001F0E  3229               	rrcf	___ftmul@f3_as_product+2,f,c
 12725  001F10  3228               	rrcf	___ftmul@f3_as_product+1,f,c
 12726  001F12  3227               	rrcf	___ftmul@f3_as_product,f,c
 12727  001F14  2E2A               	decfsz	___ftmul@cntr,f,c
 12728  001F16  D7ED               	goto	l8679
 12729  001F18  D000               	goto	l8687
 12730  001F1A                     l8687:
 12731  001F1A  C027  F011         	movff	___ftmul@f3_as_product,___ftpack@arg
 12732  001F1E  C028  F012         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 12733  001F22  C029  F013         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 12734  001F26  C026  F014         	movff	___ftmul@exp,___ftpack@exp
 12735  001F2A  C02B  F015         	movff	___ftmul@sign,___ftpack@sign
 12736  001F2E  EC2B  F013         	call	___ftpack	;wreg free
 12737  001F32  C011  F01D         	movff	?___ftpack,?___ftmul
 12738  001F36  C012  F01E         	movff	?___ftpack+1,?___ftmul+1
 12739  001F3A  C013  F01F         	movff	?___ftpack+2,?___ftmul+2
 12740  001F3E  D000               	goto	l1868
 12741  001F40                     l1868:
 12742  001F40  0012               	return		;funcret
 12743  001F42                     __end_of___ftmul:
 12744                           	opt stack 0
 12745                           tblptru	equ	0xFF8
 12746                           tblptrh	equ	0xFF7
 12747                           tblptrl	equ	0xFF6
 12748                           tablat	equ	0xFF5
 12749                           prodh	equ	0xFF4
 12750                           prodl	equ	0xFF3
 12751                           intcon	equ	0xFF2
 12752                           intcon2	equ	0xFF1
 12753                           postinc0	equ	0xFEE
 12754                           wreg	equ	0xFE8
 12755                           postdec1	equ	0xFE5
 12756                           fsr1l	equ	0xFE1
 12757                           indf2	equ	0xFDF
 12758                           postinc2	equ	0xFDE
 12759                           fsr2h	equ	0xFDA
 12760                           fsr2l	equ	0xFD9
 12761                           status	equ	0xFD8
 12762                           
 12763 ;; *************** function ___ftdiv *****************
 12764 ;; Defined at:
 12765 ;;		line 54 in file "E:\XC8\sources\common\ftdiv.c"
 12766 ;; Parameters:    Size  Location     Type
 12767 ;;  f1              3   43[COMRAM] float 
 12768 ;;  f2              3   46[COMRAM] float 
 12769 ;; Auto vars:     Size  Location     Type
 12770 ;;  f3              3   53[COMRAM] float 
 12771 ;;  sign            1   57[COMRAM] unsigned char 
 12772 ;;  exp             1   56[COMRAM] unsigned char 
 12773 ;;  cntr            1   52[COMRAM] unsigned char 
 12774 ;; Return value:  Size  Location     Type
 12775 ;;                  3   43[COMRAM] float 
 12776 ;; Registers used:
 12777 ;;		wreg, status,2, status,0, cstack
 12778 ;; Tracked objects:
 12779 ;;		On entry : 0/0
 12780 ;;		On exit  : 0/0
 12781 ;;		Unchanged: 0/0
 12782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12783 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12784 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12785 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12786 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12787 ;;Total ram usage:       15 bytes
 12788 ;; Hardware stack levels used:    1
 12789 ;; Hardware stack levels required when called:    4
 12790 ;; This function calls:
 12791 ;;		___ftpack
 12792 ;; This function is called by:
 12793 ;;		_do_update_pwm
 12794 ;;		_read_volt
 12795 ;; This function uses a non-reentrant model
 12796 ;;
 12797                           
 12798                           	psect	text68
 12799  0022FE                     __ptext68:
 12800                           	opt stack 0
 12801  0022FE                     ___ftdiv:
 12802                           	opt stack 25
 12803                           
 12804                           ;incstack = 0
 12805  0022FE  C02E  F032         	movff	___ftdiv@f1+2,??___ftdiv
 12806  002302  6A33               	clrf	(??___ftdiv+1)& (0+255),c
 12807  002304  6A34               	clrf	(??___ftdiv+2)& (0+255),c
 12808  002306  342D               	rlcf	___ftdiv@f1+1,w,c
 12809  002308  3632               	rlcf	??___ftdiv& (0+255),f,c
 12810  00230A  E301               	bnc	u6161
 12811  00230C  8033               	bsf	(??___ftdiv+1)& (0+255),0,c
 12812  00230E                     u6161:
 12813  00230E  5032               	movf	??___ftdiv,w,c
 12814  002310  6E39               	movwf	___ftdiv@exp,c
 12815  002312  5039               	movf	___ftdiv@exp,w,c
 12816  002314  A4D8               	btfss	status,2,c
 12817  002316  D002               	goto	l8603
 12818  002318  D00E               	goto	l8605
 12819  00231A  D061               	goto	l1853
 12820  00231C                     l8603:
 12821  00231C  C031  F032         	movff	___ftdiv@f2+2,??___ftdiv
 12822  002320  6A33               	clrf	(??___ftdiv+1)& (0+255),c
 12823  002322  6A34               	clrf	(??___ftdiv+2)& (0+255),c
 12824  002324  3430               	rlcf	___ftdiv@f2+1,w,c
 12825  002326  3632               	rlcf	??___ftdiv& (0+255),f,c
 12826  002328  E301               	bnc	u6181
 12827  00232A  8033               	bsf	(??___ftdiv+1)& (0+255),0,c
 12828  00232C                     u6181:
 12829  00232C  5032               	movf	??___ftdiv,w,c
 12830  00232E  6E3A               	movwf	___ftdiv@sign,c
 12831  002330  503A               	movf	___ftdiv@sign,w,c
 12832  002332  A4D8               	btfss	status,2,c
 12833  002334  D007               	goto	l8609
 12834  002336                     l8605:
 12835  002336  0E00               	movlw	0
 12836  002338  6E2C               	movwf	?___ftdiv,c
 12837  00233A  0E00               	movlw	0
 12838  00233C  6E2D               	movwf	?___ftdiv+1,c
 12839  00233E  0E00               	movlw	0
 12840  002340  6E2E               	movwf	?___ftdiv+2,c
 12841  002342  D04D               	goto	l1853
 12842  002344                     l8609:
 12843  002344  0E00               	movlw	0
 12844  002346  6E36               	movwf	___ftdiv@f3,c
 12845  002348  0E00               	movlw	0
 12846  00234A  6E37               	movwf	___ftdiv@f3+1,c
 12847  00234C  0E00               	movlw	0
 12848  00234E  6E38               	movwf	___ftdiv@f3+2,c
 12849  002350  503A               	movf	___ftdiv@sign,w,c
 12850  002352  0F89               	addlw	137
 12851  002354  5E39               	subwf	___ftdiv@exp,f,c
 12852  002356  C02E  F03A         	movff	___ftdiv@f1+2,___ftdiv@sign
 12853  00235A  5031               	movf	___ftdiv@f2+2,w,c
 12854  00235C  1A3A               	xorwf	___ftdiv@sign,f,c
 12855  00235E  0E80               	movlw	128
 12856  002360  163A               	andwf	___ftdiv@sign,f,c
 12857  002362  8E2D               	bsf	___ftdiv@f1+1,7,c
 12858  002364  0EFF               	movlw	255
 12859  002366  162C               	andwf	___ftdiv@f1,f,c
 12860  002368  0EFF               	movlw	255
 12861  00236A  162D               	andwf	___ftdiv@f1+1,f,c
 12862  00236C  0E00               	movlw	0
 12863  00236E  162E               	andwf	___ftdiv@f1+2,f,c
 12864  002370  8E30               	bsf	___ftdiv@f2+1,7,c
 12865  002372  0EFF               	movlw	255
 12866  002374  162F               	andwf	___ftdiv@f2,f,c
 12867  002376  0EFF               	movlw	255
 12868  002378  1630               	andwf	___ftdiv@f2+1,f,c
 12869  00237A  0E00               	movlw	0
 12870  00237C  1631               	andwf	___ftdiv@f2+2,f,c
 12871  00237E  0E18               	movlw	24
 12872  002380  6E35               	movwf	___ftdiv@cntr,c
 12873  002382  D000               	goto	l8629
 12874  002384                     l8629:
 12875  002384  90D8               	bcf	status,0,c
 12876  002386  3636               	rlcf	___ftdiv@f3,f,c
 12877  002388  3637               	rlcf	___ftdiv@f3+1,f,c
 12878  00238A  3638               	rlcf	___ftdiv@f3+2,f,c
 12879  00238C  502F               	movf	___ftdiv@f2,w,c
 12880  00238E  5C2C               	subwf	___ftdiv@f1,w,c
 12881  002390  5030               	movf	___ftdiv@f2+1,w,c
 12882  002392  582D               	subwfb	___ftdiv@f1+1,w,c
 12883  002394  5031               	movf	___ftdiv@f2+2,w,c
 12884  002396  582E               	subwfb	___ftdiv@f1+2,w,c
 12885  002398  A0D8               	btfss	status,0,c
 12886  00239A  D007               	goto	l1856
 12887  00239C  502F               	movf	___ftdiv@f2,w,c
 12888  00239E  5E2C               	subwf	___ftdiv@f1,f,c
 12889  0023A0  5030               	movf	___ftdiv@f2+1,w,c
 12890  0023A2  5A2D               	subwfb	___ftdiv@f1+1,f,c
 12891  0023A4  5031               	movf	___ftdiv@f2+2,w,c
 12892  0023A6  5A2E               	subwfb	___ftdiv@f1+2,f,c
 12893  0023A8  8036               	bsf	___ftdiv@f3,0,c
 12894  0023AA                     l1856:
 12895  0023AA  90D8               	bcf	status,0,c
 12896  0023AC  362C               	rlcf	___ftdiv@f1,f,c
 12897  0023AE  362D               	rlcf	___ftdiv@f1+1,f,c
 12898  0023B0  362E               	rlcf	___ftdiv@f1+2,f,c
 12899  0023B2  2E35               	decfsz	___ftdiv@cntr,f,c
 12900  0023B4  D7E7               	goto	l8629
 12901  0023B6  D000               	goto	l8639
 12902  0023B8                     l8639:
 12903  0023B8  C036  F011         	movff	___ftdiv@f3,___ftpack@arg
 12904  0023BC  C037  F012         	movff	___ftdiv@f3+1,___ftpack@arg+1
 12905  0023C0  C038  F013         	movff	___ftdiv@f3+2,___ftpack@arg+2
 12906  0023C4  C039  F014         	movff	___ftdiv@exp,___ftpack@exp
 12907  0023C8  C03A  F015         	movff	___ftdiv@sign,___ftpack@sign
 12908  0023CC  EC2B  F013         	call	___ftpack	;wreg free
 12909  0023D0  C011  F02C         	movff	?___ftpack,?___ftdiv
 12910  0023D4  C012  F02D         	movff	?___ftpack+1,?___ftdiv+1
 12911  0023D8  C013  F02E         	movff	?___ftpack+2,?___ftdiv+2
 12912  0023DC  D000               	goto	l1853
 12913  0023DE                     l1853:
 12914  0023DE  0012               	return		;funcret
 12915  0023E0                     __end_of___ftdiv:
 12916                           	opt stack 0
 12917                           tblptru	equ	0xFF8
 12918                           tblptrh	equ	0xFF7
 12919                           tblptrl	equ	0xFF6
 12920                           tablat	equ	0xFF5
 12921                           prodh	equ	0xFF4
 12922                           prodl	equ	0xFF3
 12923                           intcon	equ	0xFF2
 12924                           intcon2	equ	0xFF1
 12925                           postinc0	equ	0xFEE
 12926                           wreg	equ	0xFE8
 12927                           postdec1	equ	0xFE5
 12928                           fsr1l	equ	0xFE1
 12929                           indf2	equ	0xFDF
 12930                           postinc2	equ	0xFDE
 12931                           fsr2h	equ	0xFDA
 12932                           fsr2l	equ	0xFD9
 12933                           status	equ	0xFD8
 12934                           
 12935 ;; *************** function ___ftpack *****************
 12936 ;; Defined at:
 12937 ;;		line 62 in file "E:\XC8\sources\common\float.c"
 12938 ;; Parameters:    Size  Location     Type
 12939 ;;  arg             3   16[COMRAM] unsigned um
 12940 ;;  exp             1   19[COMRAM] unsigned char 
 12941 ;;  sign            1   20[COMRAM] unsigned char 
 12942 ;; Auto vars:     Size  Location     Type
 12943 ;;		None
 12944 ;; Return value:  Size  Location     Type
 12945 ;;                  3   16[COMRAM] float 
 12946 ;; Registers used:
 12947 ;;		wreg, status,2, status,0
 12948 ;; Tracked objects:
 12949 ;;		On entry : 0/0
 12950 ;;		On exit  : 0/0
 12951 ;;		Unchanged: 0/0
 12952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12953 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12954 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12955 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12956 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12957 ;;Total ram usage:        8 bytes
 12958 ;; Hardware stack levels used:    1
 12959 ;; Hardware stack levels required when called:    3
 12960 ;; This function calls:
 12961 ;;		Nothing
 12962 ;; This function is called by:
 12963 ;;		___awtoft
 12964 ;;		___ftdiv
 12965 ;;		___ftmul
 12966 ;;		___lbtoft
 12967 ;; This function uses a non-reentrant model
 12968 ;;
 12969                           
 12970                           	psect	text69
 12971  002656                     __ptext69:
 12972                           	opt stack 0
 12973  002656                     ___ftpack:
 12974                           	opt stack 25
 12975                           
 12976                           ;incstack = 0
 12977  002656  5014               	movf	___ftpack@exp,w,c
 12978  002658  B4D8               	btfsc	status,2,c
 12979  00265A  D005               	goto	l8183
 12980  00265C  5011               	movf	___ftpack@arg,w,c
 12981  00265E  1012               	iorwf	___ftpack@arg+1,w,c
 12982  002660  1013               	iorwf	___ftpack@arg+2,w,c
 12983  002662  A4D8               	btfss	status,2,c
 12984  002664  D00E               	goto	l8189
 12985  002666                     l8183:
 12986  002666  0E00               	movlw	0
 12987  002668  6E11               	movwf	?___ftpack,c
 12988  00266A  0E00               	movlw	0
 12989  00266C  6E12               	movwf	?___ftpack+1,c
 12990  00266E  0E00               	movlw	0
 12991  002670  6E13               	movwf	?___ftpack+2,c
 12992  002672  D053               	goto	l1781
 12993  002674  D006               	goto	l8189
 12994  002676                     l8187:
 12995  002676  2A14               	incf	___ftpack@exp,f,c
 12996  002678  90D8               	bcf	status,0,c
 12997  00267A  3213               	rrcf	___ftpack@arg+2,f,c
 12998  00267C  3212               	rrcf	___ftpack@arg+1,f,c
 12999  00267E  3211               	rrcf	___ftpack@arg,f,c
 13000  002680  D000               	goto	l8189
 13001  002682                     l8189:
 13002  002682  0E00               	movlw	0
 13003  002684  1411               	andwf	___ftpack@arg,w,c
 13004  002686  6E16               	movwf	??___ftpack& (0+255),c
 13005  002688  0E00               	movlw	0
 13006  00268A  1412               	andwf	___ftpack@arg+1,w,c
 13007  00268C  6E17               	movwf	(??___ftpack+1)& (0+255),c
 13008  00268E  0EFE               	movlw	254
 13009  002690  1413               	andwf	___ftpack@arg+2,w,c
 13010  002692  6E18               	movwf	(??___ftpack+2)& (0+255),c
 13011  002694  5016               	movf	??___ftpack,w,c
 13012  002696  1017               	iorwf	??___ftpack+1,w,c
 13013  002698  1018               	iorwf	??___ftpack+2,w,c
 13014  00269A  B4D8               	btfsc	status,2,c
 13015  00269C  D00E               	goto	l8195
 13016  00269E  D7EB               	goto	l8187
 13017  0026A0  D00C               	goto	l8195
 13018  0026A2                     l8191:
 13019  0026A2  2A14               	incf	___ftpack@exp,f,c
 13020  0026A4  0E01               	movlw	1
 13021  0026A6  2611               	addwf	___ftpack@arg,f,c
 13022  0026A8  0E00               	movlw	0
 13023  0026AA  2212               	addwfc	___ftpack@arg+1,f,c
 13024  0026AC  0E00               	movlw	0
 13025  0026AE  2213               	addwfc	___ftpack@arg+2,f,c
 13026  0026B0  90D8               	bcf	status,0,c
 13027  0026B2  3213               	rrcf	___ftpack@arg+2,f,c
 13028  0026B4  3212               	rrcf	___ftpack@arg+1,f,c
 13029  0026B6  3211               	rrcf	___ftpack@arg,f,c
 13030  0026B8  D000               	goto	l8195
 13031  0026BA                     l8195:
 13032  0026BA  0E00               	movlw	0
 13033  0026BC  1411               	andwf	___ftpack@arg,w,c
 13034  0026BE  6E16               	movwf	??___ftpack& (0+255),c
 13035  0026C0  0E00               	movlw	0
 13036  0026C2  1412               	andwf	___ftpack@arg+1,w,c
 13037  0026C4  6E17               	movwf	(??___ftpack+1)& (0+255),c
 13038  0026C6  0EFF               	movlw	255
 13039  0026C8  1413               	andwf	___ftpack@arg+2,w,c
 13040  0026CA  6E18               	movwf	(??___ftpack+2)& (0+255),c
 13041  0026CC  5016               	movf	??___ftpack,w,c
 13042  0026CE  1017               	iorwf	??___ftpack+1,w,c
 13043  0026D0  1018               	iorwf	??___ftpack+2,w,c
 13044  0026D2  B4D8               	btfsc	status,2,c
 13045  0026D4  D008               	goto	l8199
 13046  0026D6  D7E5               	goto	l8191
 13047  0026D8  D006               	goto	l8199
 13048  0026DA                     l8197:
 13049  0026DA  0614               	decf	___ftpack@exp,f,c
 13050  0026DC  90D8               	bcf	status,0,c
 13051  0026DE  3611               	rlcf	___ftpack@arg,f,c
 13052  0026E0  3612               	rlcf	___ftpack@arg+1,f,c
 13053  0026E2  3613               	rlcf	___ftpack@arg+2,f,c
 13054  0026E4  D000               	goto	l8199
 13055  0026E6                     l8199:
 13056  0026E6  BE12               	btfsc	___ftpack@arg+1,7,c
 13057  0026E8  D004               	goto	l1792
 13058  0026EA  0E02               	movlw	2
 13059  0026EC  6014               	cpfslt	___ftpack@exp,c
 13060  0026EE  D7F5               	goto	l8197
 13061  0026F0  D000               	goto	l1792
 13062  0026F2                     l1792:
 13063  0026F2  B014               	btfsc	___ftpack@exp,0,c
 13064  0026F4  D002               	goto	l8205
 13065  0026F6  9E12               	bcf	___ftpack@arg+1,7,c
 13066  0026F8  D000               	goto	l8205
 13067  0026FA                     l8205:
 13068  0026FA  90D8               	bcf	status,0,c
 13069  0026FC  3214               	rrcf	___ftpack@exp,f,c
 13070  0026FE  5014               	movf	___ftpack@exp,w,c
 13071  002700  1213               	iorwf	___ftpack@arg+2,f,c
 13072  002702  5015               	movf	___ftpack@sign,w,c
 13073  002704  B4D8               	btfsc	status,2,c
 13074  002706  D002               	goto	l8211
 13075  002708  8E13               	bsf	___ftpack@arg+2,7,c
 13076  00270A  D000               	goto	l8211
 13077  00270C                     l8211:
 13078  00270C  C011  F011         	movff	___ftpack@arg,?___ftpack
 13079  002710  C012  F012         	movff	___ftpack@arg+1,?___ftpack+1
 13080  002714  C013  F013         	movff	___ftpack@arg+2,?___ftpack+2
 13081  002718  D000               	goto	l1781
 13082  00271A                     l1781:
 13083  00271A  0012               	return		;funcret
 13084  00271C                     __end_of___ftpack:
 13085                           	opt stack 0
 13086                           tblptru	equ	0xFF8
 13087                           tblptrh	equ	0xFF7
 13088                           tblptrl	equ	0xFF6
 13089                           tablat	equ	0xFF5
 13090                           prodh	equ	0xFF4
 13091                           prodl	equ	0xFF3
 13092                           intcon	equ	0xFF2
 13093                           intcon2	equ	0xFF1
 13094                           postinc0	equ	0xFEE
 13095                           wreg	equ	0xFE8
 13096                           postdec1	equ	0xFE5
 13097                           fsr1l	equ	0xFE1
 13098                           indf2	equ	0xFDF
 13099                           postinc2	equ	0xFDE
 13100                           fsr2h	equ	0xFDA
 13101                           fsr2l	equ	0xFD9
 13102                           status	equ	0xFD8
 13103                           
 13104 ;; *************** function _Deactivate_Buzzer *****************
 13105 ;; Defined at:
 13106 ;;		line 129 in file "Utils.c"
 13107 ;; Parameters:    Size  Location     Type
 13108 ;;		None
 13109 ;; Auto vars:     Size  Location     Type
 13110 ;;		None
 13111 ;; Return value:  Size  Location     Type
 13112 ;;		None               void
 13113 ;; Registers used:
 13114 ;;		wreg, status,2
 13115 ;; Tracked objects:
 13116 ;;		On entry : 0/0
 13117 ;;		On exit  : 0/0
 13118 ;;		Unchanged: 0/0
 13119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13120 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13121 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13122 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13123 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13124 ;;Total ram usage:        0 bytes
 13125 ;; Hardware stack levels used:    1
 13126 ;; Hardware stack levels required when called:    3
 13127 ;; This function calls:
 13128 ;;		Nothing
 13129 ;; This function is called by:
 13130 ;;		_Do_Beep_Good
 13131 ;;		_Do_Beep_Bad
 13132 ;;		_Test_Alarm
 13133 ;;		_Do_Beep
 13134 ;; This function uses a non-reentrant model
 13135 ;;
 13136                           
 13137                           	psect	text70
 13138  003D82                     __ptext70:
 13139                           	opt stack 0
 13140  003D82                     _Deactivate_Buzzer:
 13141                           	opt stack 26
 13142                           
 13143                           ;Utils.c: 131: CCP2CON = 0x0;
 13144                           
 13145                           ;incstack = 0
 13146  003D82  0E00               	movlw	0
 13147  003D84  6EBA               	movwf	4026,c	;volatile
 13148                           
 13149                           ;Utils.c: 132: PORTBbits.RB3 = 0;
 13150  003D86  9681               	bcf	3969,3,c	;volatile
 13151  003D88  0012               	return		;funcret
 13152  003D8A                     __end_of_Deactivate_Buzzer:
 13153                           	opt stack 0
 13154                           tblptru	equ	0xFF8
 13155                           tblptrh	equ	0xFF7
 13156                           tblptrl	equ	0xFF6
 13157                           tablat	equ	0xFF5
 13158                           prodh	equ	0xFF4
 13159                           prodl	equ	0xFF3
 13160                           intcon	equ	0xFF2
 13161                           intcon2	equ	0xFF1
 13162                           postinc0	equ	0xFEE
 13163                           wreg	equ	0xFE8
 13164                           postdec1	equ	0xFE5
 13165                           fsr1l	equ	0xFE1
 13166                           indf2	equ	0xFDF
 13167                           postinc2	equ	0xFDE
 13168                           fsr2h	equ	0xFDA
 13169                           fsr2l	equ	0xFD9
 13170                           status	equ	0xFD8
 13171                           
 13172 ;; *************** function _Activate_Buzzer_500Hz *****************
 13173 ;; Defined at:
 13174 ;;		line 105 in file "Utils.c"
 13175 ;; Parameters:    Size  Location     Type
 13176 ;;		None
 13177 ;; Auto vars:     Size  Location     Type
 13178 ;;		None
 13179 ;; Return value:  Size  Location     Type
 13180 ;;		None               void
 13181 ;; Registers used:
 13182 ;;		wreg, status,2
 13183 ;; Tracked objects:
 13184 ;;		On entry : 0/0
 13185 ;;		On exit  : 0/0
 13186 ;;		Unchanged: 0/0
 13187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13188 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13189 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13190 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13191 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13192 ;;Total ram usage:        0 bytes
 13193 ;; Hardware stack levels used:    1
 13194 ;; Hardware stack levels required when called:    3
 13195 ;; This function calls:
 13196 ;;		Nothing
 13197 ;; This function is called by:
 13198 ;;		_Do_Beep_Bad
 13199 ;; This function uses a non-reentrant model
 13200 ;;
 13201                           
 13202                           	psect	text71
 13203  003C68                     __ptext71:
 13204                           	opt stack 0
 13205  003C68                     _Activate_Buzzer_500Hz:
 13206                           	opt stack 25
 13207                           
 13208                           ;Utils.c: 107: PR2 = 0b11111001 ;
 13209                           
 13210                           ;incstack = 0
 13211  003C68  0EF9               	movlw	249
 13212  003C6A  6ECB               	movwf	4043,c	;volatile
 13213                           
 13214                           ;Utils.c: 108: T2CON = 0b00000111 ;
 13215  003C6C  0E07               	movlw	7
 13216  003C6E  6ECA               	movwf	4042,c	;volatile
 13217                           
 13218                           ;Utils.c: 109: CCPR2L = 0b01111100 ;
 13219  003C70  0E7C               	movlw	124
 13220  003C72  6EBB               	movwf	4027,c	;volatile
 13221                           
 13222                           ;Utils.c: 110: CCP2CON = 0b00111100 ;
 13223  003C74  0E3C               	movlw	60
 13224  003C76  6EBA               	movwf	4026,c	;volatile
 13225  003C78  0012               	return		;funcret
 13226  003C7A                     __end_of_Activate_Buzzer_500Hz:
 13227                           	opt stack 0
 13228                           tblptru	equ	0xFF8
 13229                           tblptrh	equ	0xFF7
 13230                           tblptrl	equ	0xFF6
 13231                           tablat	equ	0xFF5
 13232                           prodh	equ	0xFF4
 13233                           prodl	equ	0xFF3
 13234                           intcon	equ	0xFF2
 13235                           intcon2	equ	0xFF1
 13236                           postinc0	equ	0xFEE
 13237                           wreg	equ	0xFE8
 13238                           postdec1	equ	0xFE5
 13239                           fsr1l	equ	0xFE1
 13240                           indf2	equ	0xFDF
 13241                           postinc2	equ	0xFDE
 13242                           fsr2h	equ	0xFDA
 13243                           fsr2l	equ	0xFD9
 13244                           status	equ	0xFD8
 13245                           
 13246 ;; *************** function _Decrease_Alarm_Time *****************
 13247 ;; Defined at:
 13248 ;;		line 89 in file "Setup_Alarm.c"
 13249 ;; Parameters:    Size  Location     Type
 13250 ;;		None
 13251 ;; Auto vars:     Size  Location     Type
 13252 ;;		None
 13253 ;; Return value:  Size  Location     Type
 13254 ;;		None               void
 13255 ;; Registers used:
 13256 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13257 ;; Tracked objects:
 13258 ;;		On entry : 0/0
 13259 ;;		On exit  : 0/0
 13260 ;;		Unchanged: 0/0
 13261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13262 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13263 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13264 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13265 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13266 ;;Total ram usage:        0 bytes
 13267 ;; Hardware stack levels used:    1
 13268 ;; Hardware stack levels required when called:   11
 13269 ;; This function calls:
 13270 ;;		_Update_Setup_Alarm_Time_Screen
 13271 ;; This function is called by:
 13272 ;;		_Do_Setup_Alarm_Time
 13273 ;; This function uses a non-reentrant model
 13274 ;;
 13275                           
 13276                           	psect	text72
 13277  0035F6                     __ptext72:
 13278                           	opt stack 0
 13279  0035F6                     _Decrease_Alarm_Time:
 13280                           	opt stack 18
 13281                           
 13282                           ;Setup_Alarm.c: 91: switch (Select_Alarm_Field)
 13283                           
 13284                           ;incstack = 0
 13285  0035F6  D015               	goto	l9393
 13286  0035F8                     l9373:
 13287                           
 13288                           ;Setup_Alarm.c: 94: if (setup_alarm_hour == 0) setup_alarm_hour = 23;
 13289  0035F8  5064               	movf	_setup_alarm_hour,w,c
 13290  0035FA  A4D8               	btfss	status,2,c
 13291  0035FC  D003               	goto	l9377
 13292  0035FE  0E17               	movlw	23
 13293  003600  6E64               	movwf	_setup_alarm_hour,c
 13294  003602  D01A               	goto	l9395
 13295  003604                     l9377:
 13296                           
 13297                           ;Setup_Alarm.c: 95: else --setup_alarm_hour;
 13298  003604  0664               	decf	_setup_alarm_hour,f,c
 13299                           
 13300                           ;Setup_Alarm.c: 96: break;
 13301  003606  D018               	goto	l9395
 13302  003608                     l9379:
 13303                           
 13304                           ;Setup_Alarm.c: 99: if (setup_alarm_minute == 0) setup_alarm_minute = 59;
 13305  003608  5065               	movf	_setup_alarm_minute,w,c
 13306  00360A  B4D8               	btfsc	status,2,c
 13307  00360C  D005               	goto	l9387
 13308                           
 13309                           ;Setup_Alarm.c: 100: else --setup_alarm_minute;
 13310  00360E  0665               	decf	_setup_alarm_minute,f,c
 13311                           
 13312                           ;Setup_Alarm.c: 101: break;
 13313  003610  D013               	goto	l9395
 13314  003612                     l9385:
 13315                           
 13316                           ;Setup_Alarm.c: 105: if (setup_alarm_second == 0) setup_alarm_minute = 59;
 13317  003612  5066               	movf	_setup_alarm_second,w,c
 13318  003614  A4D8               	btfss	status,2,c
 13319  003616  D003               	goto	l9389
 13320  003618                     l9387:
 13321  003618  0E3B               	movlw	59
 13322  00361A  6E65               	movwf	_setup_alarm_minute,c
 13323  00361C  D00D               	goto	l9395
 13324  00361E                     l9389:
 13325                           
 13326                           ;Setup_Alarm.c: 106: else --setup_alarm_second;
 13327  00361E  0666               	decf	_setup_alarm_second,f,c
 13328                           
 13329                           ;Setup_Alarm.c: 112: }
 13330                           
 13331                           ;Setup_Alarm.c: 111: break;
 13332                           
 13333                           ;Setup_Alarm.c: 110: default:
 13334                           
 13335                           ;Setup_Alarm.c: 107: break;
 13336  003620  D00B               	goto	l9395
 13337  003622                     l9393:
 13338  003622  5053               	movf	_Select_Alarm_Field,w,c
 13339                           
 13340                           ; Switch size 1, requested type "space"
 13341                           ; Number of cases is 3, Range of values is 0 to 2
 13342                           ; switch strategies available:
 13343                           ; Name         Instructions Cycles
 13344                           ; simple_byte           10     6 (average)
 13345                           ;	Chosen strategy is simple_byte
 13346  003624  0A00               	xorlw	0	; case 0
 13347  003626  B4D8               	btfsc	status,2,c
 13348  003628  D7E7               	goto	l9373
 13349  00362A  0A01               	xorlw	1	; case 1
 13350  00362C  B4D8               	btfsc	status,2,c
 13351  00362E  D7EC               	goto	l9379
 13352  003630  0A03               	xorlw	3	; case 2
 13353  003632  B4D8               	btfsc	status,2,c
 13354  003634  D7EE               	goto	l9385
 13355  003636  D000               	goto	l9395
 13356  003638                     l9395:
 13357                           
 13358                           ;Setup_Alarm.c: 113: Update_Setup_Alarm_Time_Screen();
 13359  003638  EC93  F010         	call	_Update_Setup_Alarm_Time_Screen	;wreg free
 13360  00363C  0012               	return		;funcret
 13361  00363E                     __end_of_Decrease_Alarm_Time:
 13362                           	opt stack 0
 13363                           tblptru	equ	0xFF8
 13364                           tblptrh	equ	0xFF7
 13365                           tblptrl	equ	0xFF6
 13366                           tablat	equ	0xFF5
 13367                           prodh	equ	0xFF4
 13368                           prodl	equ	0xFF3
 13369                           intcon	equ	0xFF2
 13370                           intcon2	equ	0xFF1
 13371                           postinc0	equ	0xFEE
 13372                           wreg	equ	0xFE8
 13373                           postdec1	equ	0xFE5
 13374                           fsr1l	equ	0xFE1
 13375                           indf2	equ	0xFDF
 13376                           postinc2	equ	0xFDE
 13377                           fsr2h	equ	0xFDA
 13378                           fsr2l	equ	0xFD9
 13379                           status	equ	0xFD8
 13380                           
 13381 ;; *************** function _Update_Setup_Alarm_Time_Screen *****************
 13382 ;; Defined at:
 13383 ;;		line 167 in file "Setup_Alarm.c"
 13384 ;; Parameters:    Size  Location     Type
 13385 ;;		None
 13386 ;; Auto vars:     Size  Location     Type
 13387 ;;		None
 13388 ;; Return value:  Size  Location     Type
 13389 ;;		None               void
 13390 ;; Registers used:
 13391 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13392 ;; Tracked objects:
 13393 ;;		On entry : 0/0
 13394 ;;		On exit  : 0/0
 13395 ;;		Unchanged: 0/0
 13396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13398 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13399 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13400 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13401 ;;Total ram usage:        0 bytes
 13402 ;; Hardware stack levels used:    1
 13403 ;; Hardware stack levels required when called:   10
 13404 ;; This function calls:
 13405 ;;		___awdiv
 13406 ;;		___awmod
 13407 ;;		_drawtext
 13408 ;;		_printf
 13409 ;; This function is called by:
 13410 ;;		_Do_Setup_Alarm_Time
 13411 ;;		_Increase_Alarm_Time
 13412 ;;		_Decrease_Alarm_Time
 13413 ;; This function uses a non-reentrant model
 13414 ;;
 13415                           
 13416                           	psect	text73
 13417  002126                     __ptext73:
 13418                           	opt stack 0
 13419  002126                     _Update_Setup_Alarm_Time_Screen:
 13420                           	opt stack 19
 13421                           
 13422                           ;Setup_Alarm.c: 169: printf ("%x:%x:%x\r\n", setup_alarm_hour,setup_alarm_minute,setup_a
      +                          larm_second);
 13423                           
 13424                           ;incstack = 0
 13425  002126  0E94               	movlw	low STR_37
 13426  002128  6E1D               	movwf	printf@f,c
 13427  00212A  0EFF               	movlw	high STR_37
 13428  00212C  6E1E               	movwf	printf@f+1,c
 13429  00212E  C064  F01F         	movff	_setup_alarm_hour,?_printf+2
 13430  002132  6A20               	clrf	?_printf+3,c
 13431  002134  C065  F021         	movff	_setup_alarm_minute,?_printf+4
 13432  002138  6A22               	clrf	?_printf+5,c
 13433  00213A  C066  F023         	movff	_setup_alarm_second,?_printf+6
 13434  00213E  6A24               	clrf	?_printf+7,c
 13435  002140  EC05  F005         	call	_printf	;wreg free
 13436                           
 13437                           ;Setup_Alarm.c: 170: setup_alarm_time[0] = (setup_alarm_hour/10) + '0';
 13438  002144  C064  F13C         	movff	_setup_alarm_hour,___awdiv@dividend
 13439  002148  0101               	movlb	1	; () banked
 13440  00214A  6B3D               	clrf	(___awdiv@dividend+1)& (0+255),b
 13441  00214C  0E00               	movlw	0
 13442  00214E  0101               	movlb	1	; () banked
 13443  002150  6F3F               	movwf	(___awdiv@divisor+1)& (0+255),b
 13444  002152  0E0A               	movlw	10
 13445  002154  6F3E               	movwf	___awdiv@divisor& (0+255),b
 13446  002156  EC5E  F012         	call	___awdiv	;wreg free
 13447  00215A  0101               	movlb	1	; () banked
 13448  00215C  513C               	movf	?___awdiv& (0+255),w,b
 13449  00215E  0F30               	addlw	48
 13450  002160  0100               	movlb	0	; () banked
 13451  002162  6F94               	movwf	_setup_alarm_time& (0+255),b
 13452                           
 13453                           ; BSR set to: 0
 13454                           ;Setup_Alarm.c: 171: setup_alarm_time[1] = (setup_alarm_hour%10) + '0';
 13455  002164  C064  F03B         	movff	_setup_alarm_hour,___awmod@dividend
 13456  002168  6A3C               	clrf	___awmod@dividend+1,c
 13457  00216A  0E00               	movlw	0
 13458  00216C  6E3E               	movwf	___awmod@divisor+1,c
 13459  00216E  0E0A               	movlw	10
 13460  002170  6E3D               	movwf	___awmod@divisor,c
 13461  002172  EC36  F017         	call	___awmod	;wreg free
 13462  002176  503B               	movf	?___awmod,w,c
 13463  002178  0F30               	addlw	48
 13464  00217A  0100               	movlb	0	; () banked
 13465  00217C  6F95               	movwf	(_setup_alarm_time+1)& (0+255),b
 13466                           
 13467                           ; BSR set to: 0
 13468                           ;Setup_Alarm.c: 173: setup_alarm_time[3] = (setup_alarm_minute/10) + '0';
 13469  00217E  C065  F13C         	movff	_setup_alarm_minute,___awdiv@dividend
 13470  002182  0101               	movlb	1	; () banked
 13471  002184  6B3D               	clrf	(___awdiv@dividend+1)& (0+255),b
 13472  002186  0E00               	movlw	0
 13473  002188  0101               	movlb	1	; () banked
 13474  00218A  6F3F               	movwf	(___awdiv@divisor+1)& (0+255),b
 13475  00218C  0E0A               	movlw	10
 13476  00218E  6F3E               	movwf	___awdiv@divisor& (0+255),b
 13477  002190  EC5E  F012         	call	___awdiv	;wreg free
 13478  002194  0101               	movlb	1	; () banked
 13479  002196  513C               	movf	?___awdiv& (0+255),w,b
 13480  002198  0F30               	addlw	48
 13481  00219A  0100               	movlb	0	; () banked
 13482  00219C  6F97               	movwf	(_setup_alarm_time+3)& (0+255),b
 13483                           
 13484                           ; BSR set to: 0
 13485                           ;Setup_Alarm.c: 174: setup_alarm_time[4] = (setup_alarm_minute%10) + '0';
 13486  00219E  C065  F03B         	movff	_setup_alarm_minute,___awmod@dividend
 13487  0021A2  6A3C               	clrf	___awmod@dividend+1,c
 13488  0021A4  0E00               	movlw	0
 13489  0021A6  6E3E               	movwf	___awmod@divisor+1,c
 13490  0021A8  0E0A               	movlw	10
 13491  0021AA  6E3D               	movwf	___awmod@divisor,c
 13492  0021AC  EC36  F017         	call	___awmod	;wreg free
 13493  0021B0  503B               	movf	?___awmod,w,c
 13494  0021B2  0F30               	addlw	48
 13495  0021B4  0100               	movlb	0	; () banked
 13496  0021B6  6F98               	movwf	(_setup_alarm_time+4)& (0+255),b
 13497                           
 13498                           ; BSR set to: 0
 13499                           ;Setup_Alarm.c: 176: setup_alarm_time[6] = (setup_alarm_second/10) + '0';
 13500  0021B8  C066  F13C         	movff	_setup_alarm_second,___awdiv@dividend
 13501  0021BC  0101               	movlb	1	; () banked
 13502  0021BE  6B3D               	clrf	(___awdiv@dividend+1)& (0+255),b
 13503  0021C0  0E00               	movlw	0
 13504  0021C2  0101               	movlb	1	; () banked
 13505  0021C4  6F3F               	movwf	(___awdiv@divisor+1)& (0+255),b
 13506  0021C6  0E0A               	movlw	10
 13507  0021C8  6F3E               	movwf	___awdiv@divisor& (0+255),b
 13508  0021CA  EC5E  F012         	call	___awdiv	;wreg free
 13509  0021CE  0101               	movlb	1	; () banked
 13510  0021D0  513C               	movf	?___awdiv& (0+255),w,b
 13511  0021D2  0F30               	addlw	48
 13512  0021D4  0100               	movlb	0	; () banked
 13513  0021D6  6F9A               	movwf	(_setup_alarm_time+6)& (0+255),b
 13514                           
 13515                           ; BSR set to: 0
 13516                           ;Setup_Alarm.c: 177: setup_alarm_time[7] = (setup_alarm_second%10) + '0';
 13517  0021D8  C066  F03B         	movff	_setup_alarm_second,___awmod@dividend
 13518  0021DC  6A3C               	clrf	___awmod@dividend+1,c
 13519  0021DE  0E00               	movlw	0
 13520  0021E0  6E3E               	movwf	___awmod@divisor+1,c
 13521  0021E2  0E0A               	movlw	10
 13522  0021E4  6E3D               	movwf	___awmod@divisor,c
 13523  0021E6  EC36  F017         	call	___awmod	;wreg free
 13524  0021EA  503B               	movf	?___awmod,w,c
 13525  0021EC  0F30               	addlw	48
 13526  0021EE  0100               	movlb	0	; () banked
 13527  0021F0  6F9B               	movwf	(_setup_alarm_time+7)& (0+255),b
 13528                           
 13529                           ;Setup_Alarm.c: 178: drawtext(15, 52, setup_alarm_time, 0x07FF, 0x0000, 2);
 13530  0021F2  0E34               	movlw	52
 13531  0021F4  6E39               	movwf	drawtext@y,c
 13532  0021F6  0E94               	movlw	low _setup_alarm_time
 13533  0021F8  6E3A               	movwf	drawtext@_text,c
 13534  0021FA  0E00               	movlw	high _setup_alarm_time
 13535  0021FC  6E3B               	movwf	drawtext@_text+1,c
 13536  0021FE  0E07               	movlw	7
 13537  002200  6E3D               	movwf	drawtext@color+1,c
 13538  002202  683C               	setf	drawtext@color,c
 13539  002204  0E00               	movlw	0
 13540  002206  6E3F               	movwf	drawtext@bg+1,c
 13541  002208  0E00               	movlw	0
 13542  00220A  6E3E               	movwf	drawtext@bg,c
 13543  00220C  0E02               	movlw	2
 13544  00220E  6E40               	movwf	drawtext@size,c
 13545  002210  0E0F               	movlw	15
 13546  002212  EC92  F00D         	call	_drawtext
 13547  002216  0012               	return		;funcret
 13548  002218                     __end_of_Update_Setup_Alarm_Time_Screen:
 13549                           	opt stack 0
 13550                           tblptru	equ	0xFF8
 13551                           tblptrh	equ	0xFF7
 13552                           tblptrl	equ	0xFF6
 13553                           tablat	equ	0xFF5
 13554                           prodh	equ	0xFF4
 13555                           prodl	equ	0xFF3
 13556                           intcon	equ	0xFF2
 13557                           intcon2	equ	0xFF1
 13558                           postinc0	equ	0xFEE
 13559                           wreg	equ	0xFE8
 13560                           postdec1	equ	0xFE5
 13561                           fsr1l	equ	0xFE1
 13562                           indf2	equ	0xFDF
 13563                           postinc2	equ	0xFDE
 13564                           fsr2h	equ	0xFDA
 13565                           fsr2l	equ	0xFD9
 13566                           status	equ	0xFD8
 13567                           
 13568 ;; *************** function _printf *****************
 13569 ;; Defined at:
 13570 ;;		line 464 in file "E:\XC8\sources\common\doprnt.c"
 13571 ;; Parameters:    Size  Location     Type
 13572 ;;  f               2   28[COMRAM] PTR const unsigned char 
 13573 ;;		 -> STR_37(11), STR_24(20), STR_23(25), STR_22(22), 
 13574 ;;		 -> STR_21(30), STR_20(22), STR_19(16), 
 13575 ;; Auto vars:     Size  Location     Type
 13576 ;;  idx             1   46[COMRAM] unsigned char 
 13577 ;;  tmpval          4    0        struct .
 13578 ;;  cp              3    0        PTR const unsigned char 
 13579 ;;  width           2   53[COMRAM] int 
 13580 ;;  val             2   50[COMRAM] unsigned int 
 13581 ;;  ap              2   47[COMRAM] PTR void [1]
 13582 ;;		 -> ?_printf(2), 
 13583 ;;  len             2    0        unsigned int 
 13584 ;;  c               1   55[COMRAM] char 
 13585 ;;  flag            1   52[COMRAM] unsigned char 
 13586 ;;  prec            1   49[COMRAM] char 
 13587 ;; Return value:  Size  Location     Type
 13588 ;;                  2   28[COMRAM] int 
 13589 ;; Registers used:
 13590 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13591 ;; Tracked objects:
 13592 ;;		On entry : 0/0
 13593 ;;		On exit  : 0/0
 13594 ;;		Unchanged: 0/0
 13595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13596 ;;      Params:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13597 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13598 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13599 ;;      Totals:        28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13600 ;;Total ram usage:       28 bytes
 13601 ;; Hardware stack levels used:    1
 13602 ;; Hardware stack levels required when called:    4
 13603 ;; This function calls:
 13604 ;;		___lwdiv
 13605 ;;		___lwmod
 13606 ;;		___wmul
 13607 ;;		_isdigit
 13608 ;;		_putch
 13609 ;; This function is called by:
 13610 ;;		_check_for_button_input
 13611 ;;		_main
 13612 ;;		_Update_Setup_Alarm_Time_Screen
 13613 ;; This function uses a non-reentrant model
 13614 ;;
 13615                           
 13616                           	psect	text74
 13617  000A0A                     __ptext74:
 13618                           	opt stack 0
 13619  000A0A                     _printf:
 13620                           	opt stack 26
 13621                           
 13622                           ;doprnt.c: 466: va_list ap;
 13623                           ;doprnt.c: 499: signed char c;
 13624                           ;doprnt.c: 501: int width;
 13625                           ;doprnt.c: 506: signed char prec;
 13626                           ;doprnt.c: 508: unsigned char flag;
 13627                           ;doprnt.c: 523: union {
 13628                           ;doprnt.c: 524: unsigned long vd;
 13629                           ;doprnt.c: 525: double integ;
 13630                           ;doprnt.c: 526: } tmpval;
 13631                           ;doprnt.c: 528: unsigned int val;
 13632                           ;doprnt.c: 529: unsigned len;
 13633                           ;doprnt.c: 530: const char * cp;
 13634                           ;doprnt.c: 533: *ap = __va_start();
 13635                           
 13636                           ;incstack = 0
 13637  000A0A  0E1F               	movlw	low (?_printf+2)
 13638  000A0C  6E30               	movwf	printf@ap,c
 13639  000A0E  0E00               	movlw	high (?_printf+2)
 13640  000A10  6E31               	movwf	printf@ap+1,c
 13641                           
 13642                           ;doprnt.c: 536: while(c = *f++) {
 13643  000A12  D199               	goto	l8595
 13644  000A14                     l8469:
 13645                           
 13646                           ;doprnt.c: 538: if(c != '%')
 13647  000A14  0E25               	movlw	37
 13648  000A16  1838               	xorwf	printf@c,w,c
 13649  000A18  B4D8               	btfsc	status,2,c
 13650  000A1A  D004               	goto	l8473
 13651                           
 13652                           ;doprnt.c: 540: {
 13653                           ;doprnt.c: 541: (putch(c) );
 13654  000A1C  5038               	movf	printf@c,w,c
 13655  000A1E  EC88  F01E         	call	_putch
 13656                           
 13657                           ;doprnt.c: 542: continue;
 13658  000A22  D191               	goto	l8595
 13659  000A24                     l8473:
 13660                           
 13661                           ;doprnt.c: 543: }
 13662                           ;doprnt.c: 546: width = 0;
 13663  000A24  0E00               	movlw	0
 13664  000A26  6E37               	movwf	printf@width+1,c
 13665  000A28  0E00               	movlw	0
 13666  000A2A  6E36               	movwf	printf@width,c
 13667                           
 13668                           ;doprnt.c: 548: flag = 0;
 13669  000A2C  0E00               	movlw	0
 13670  000A2E  6E35               	movwf	printf@flag,c
 13671                           
 13672                           ;doprnt.c: 551: switch(*f) {
 13673                           
 13674                           ;doprnt.c: 550: for(;;) {
 13675  000A30  D005               	goto	l8479
 13676  000A32                     l8475:
 13677                           
 13678                           ;doprnt.c: 580: flag |= 0x04;
 13679  000A32  8435               	bsf	printf@flag,2,c
 13680                           
 13681                           ;doprnt.c: 581: f++;
 13682  000A34  4A1D               	infsnz	printf@f,f,c
 13683  000A36  2A1E               	incf	printf@f+1,f,c
 13684                           
 13685                           ;doprnt.c: 582: continue;
 13686  000A38  D001               	goto	l8479
 13687                           
 13688                           ;doprnt.c: 584: }
 13689  000A3A  D00B               	goto	l8481
 13690  000A3C                     l8479:
 13691  000A3C  C01D  FFF6         	movff	printf@f,tblptrl
 13692  000A40  C01E  FFF7         	movff	printf@f+1,tblptrh
 13693  000A44                     	if	0	;tblptru may be non-zero
 13694  000A44                     	endif
 13695  000A44                     	if	0	;tblptru may be non-zero
 13696  000A44                     	endif
 13697  000A44  0008               	tblrd		*
 13698  000A46  50F5               	movf	tablat,w,c
 13699                           
 13700                           ; Switch size 1, requested type "space"
 13701                           ; Number of cases is 1, Range of values is 48 to 48
 13702                           ; switch strategies available:
 13703                           ; Name         Instructions Cycles
 13704                           ; simple_byte            4     3 (average)
 13705                           ;	Chosen strategy is simple_byte
 13706  000A48  0A30               	xorlw	48	; case 48
 13707  000A4A  B4D8               	btfsc	status,2,c
 13708  000A4C  D7F2               	goto	l8475
 13709                           
 13710                           ;doprnt.c: 585: break;
 13711  000A4E  D001               	goto	l8481
 13712                           
 13713                           ;doprnt.c: 586: }
 13714  000A50  D7F5               	goto	l8479
 13715  000A52                     l8481:
 13716                           
 13717                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 13718  000A52  C01D  FFF6         	movff	printf@f,tblptrl
 13719  000A56  C01E  FFF7         	movff	printf@f+1,tblptrh
 13720  000A5A                     	if	0	;tblptru may be non-zero
 13721  000A5A                     	endif
 13722  000A5A                     	if	0	;tblptru may be non-zero
 13723  000A5A                     	endif
 13724  000A5A  0008               	tblrd		*
 13725  000A5C  50F5               	movf	tablat,w,c
 13726  000A5E  EC13  F01D         	call	_isdigit
 13727  000A62  A0D8               	btfss	status,0,c
 13728  000A64  D03B               	goto	l8497
 13729                           
 13730                           ;doprnt.c: 598: width = 0;
 13731  000A66  0E00               	movlw	0
 13732  000A68  6E37               	movwf	printf@width+1,c
 13733  000A6A  0E00               	movlw	0
 13734  000A6C  6E36               	movwf	printf@width,c
 13735  000A6E  D000               	goto	l8485
 13736  000A70                     l8485:
 13737                           
 13738                           ;doprnt.c: 600: width *= 10;
 13739  000A70  C036  F011         	movff	printf@width,___wmul@multiplier
 13740  000A74  C037  F012         	movff	printf@width+1,___wmul@multiplier+1
 13741  000A78  0E00               	movlw	0
 13742  000A7A  6E14               	movwf	___wmul@multiplicand+1,c
 13743  000A7C  0E0A               	movlw	10
 13744  000A7E  6E13               	movwf	___wmul@multiplicand,c
 13745  000A80  ECC7  F01C         	call	___wmul	;wreg free
 13746  000A84  C011  F036         	movff	?___wmul,printf@width
 13747  000A88  C012  F037         	movff	?___wmul+1,printf@width+1
 13748                           
 13749                           ;doprnt.c: 601: width += *f++ - '0';
 13750  000A8C  0ED0               	movlw	208
 13751  000A8E  6E2B               	movwf	??_printf& (0+255),c
 13752  000A90  0EFF               	movlw	255
 13753  000A92  6E2C               	movwf	(??_printf+1)& (0+255),c
 13754  000A94  C01D  FFF6         	movff	printf@f,tblptrl
 13755  000A98  C01E  FFF7         	movff	printf@f+1,tblptrh
 13756  000A9C                     	if	0	;tblptru may be non-zero
 13757  000A9C                     	endif
 13758  000A9C                     	if	0	;tblptru may be non-zero
 13759  000A9C                     	endif
 13760  000A9C  0008               	tblrd		*
 13761  000A9E  50F5               	movf	tablat,w,c
 13762  000AA0  6E2D               	movwf	(??_printf+2)& (0+255),c
 13763  000AA2  6A2E               	clrf	(??_printf+3)& (0+255),c
 13764  000AA4  502B               	movf	??_printf,w,c
 13765  000AA6  262D               	addwf	??_printf+2,f,c
 13766  000AA8  502C               	movf	??_printf+1,w,c
 13767  000AAA  222E               	addwfc	??_printf+3,f,c
 13768  000AAC  502D               	movf	??_printf+2,w,c
 13769  000AAE  2636               	addwf	printf@width,f,c
 13770  000AB0  502E               	movf	??_printf+3,w,c
 13771  000AB2  2237               	addwfc	printf@width+1,f,c
 13772  000AB4  4A1D               	infsnz	printf@f,f,c
 13773  000AB6  2A1E               	incf	printf@f+1,f,c
 13774                           
 13775                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 13776  000AB8  C01D  FFF6         	movff	printf@f,tblptrl
 13777  000ABC  C01E  FFF7         	movff	printf@f+1,tblptrh
 13778  000AC0                     	if	0	;tblptru may be non-zero
 13779  000AC0                     	endif
 13780  000AC0                     	if	0	;tblptru may be non-zero
 13781  000AC0                     	endif
 13782  000AC0  0008               	tblrd		*
 13783  000AC2  50F5               	movf	tablat,w,c
 13784  000AC4  EC13  F01D         	call	_isdigit
 13785  000AC8  A0D8               	btfss	status,0,c
 13786  000ACA  D008               	goto	l8497
 13787  000ACC  D7D1               	goto	l8485
 13788                           
 13789                           ;doprnt.c: 608: }
 13790                           ;doprnt.c: 635: switch(c = *f++) {
 13791  000ACE  D006               	goto	l8497
 13792                           
 13793                           ;doprnt.c: 638: goto alldone;
 13794                           
 13795                           ;doprnt.c: 637: case 0:
 13796  000AD0  D148               	goto	l1437
 13797                           
 13798                           ;doprnt.c: 698: case 'i':
 13799                           ;doprnt.c: 699: break;
 13800                           
 13801                           ;doprnt.c: 697: case 'd':
 13802  000AD2  D01B               	goto	l1400
 13803  000AD4                     l8493:
 13804                           
 13805                           ;doprnt.c: 721: flag |= 0x80;
 13806  000AD4  8E35               	bsf	printf@flag,7,c
 13807                           
 13808                           ;doprnt.c: 723: break;
 13809  000AD6  D019               	goto	l1400
 13810                           
 13811                           ;doprnt.c: 813: continue;
 13812                           
 13813                           ;doprnt.c: 802: default:
 13814  000AD8  D136               	goto	l8595
 13815                           
 13816                           ;doprnt.c: 822: }
 13817  000ADA  D017               	goto	l1400
 13818  000ADC                     l8497:
 13819  000ADC  C01D  FFF6         	movff	printf@f,tblptrl
 13820  000AE0  C01E  FFF7         	movff	printf@f+1,tblptrh
 13821  000AE4  4A1D               	infsnz	printf@f,f,c
 13822  000AE6  2A1E               	incf	printf@f+1,f,c
 13823  000AE8                     	if	0	;tblptru may be non-zero
 13824  000AE8                     	endif
 13825  000AE8                     	if	0	;tblptru may be non-zero
 13826  000AE8                     	endif
 13827  000AE8  0008               	tblrd		*
 13828  000AEA  CFF5 F038          	movff	tablat,printf@c
 13829  000AEE  5038               	movf	printf@c,w,c
 13830                           
 13831                           ; Switch size 1, requested type "space"
 13832                           ; Number of cases is 4, Range of values is 0 to 120
 13833                           ; switch strategies available:
 13834                           ; Name         Instructions Cycles
 13835                           ; simple_byte           13     7 (average)
 13836                           ;	Chosen strategy is simple_byte
 13837  000AF0  0A00               	xorlw	0	; case 0
 13838  000AF2  B4D8               	btfsc	status,2,c
 13839  000AF4  D136               	goto	l1437
 13840  000AF6  0A64               	xorlw	100	; case 100
 13841  000AF8  B4D8               	btfsc	status,2,c
 13842  000AFA  D007               	goto	l1400
 13843  000AFC  0A0D               	xorlw	13	; case 105
 13844  000AFE  B4D8               	btfsc	status,2,c
 13845  000B00  D004               	goto	l1400
 13846  000B02  0A11               	xorlw	17	; case 120
 13847  000B04  B4D8               	btfsc	status,2,c
 13848  000B06  D7E6               	goto	l8493
 13849  000B08  D11E               	goto	l8595
 13850  000B0A                     l1400:
 13851                           
 13852                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
 13853  000B0A  BE35               	btfsc	printf@flag,7,c
 13854  000B0C  D015               	goto	l8509
 13855                           
 13856                           ;doprnt.c: 1253: {
 13857                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 13858  000B0E  C030  FFD9         	movff	printf@ap,fsr2l
 13859  000B12  C031  FFDA         	movff	printf@ap+1,fsr2h
 13860  000B16  CFDE F033          	movff	postinc2,printf@val
 13861  000B1A  CFDD F034          	movff	postdec2,printf@val+1
 13862  000B1E  0E02               	movlw	2
 13863  000B20  2630               	addwf	printf@ap,f,c
 13864  000B22  0E00               	movlw	0
 13865  000B24  2231               	addwfc	printf@ap+1,f,c
 13866                           
 13867                           ;doprnt.c: 1261: if((int)val < 0) {
 13868  000B26  AE34               	btfss	printf@val+1,7,c
 13869  000B28  D04E               	goto	l8543
 13870                           
 13871                           ;doprnt.c: 1262: flag |= 0x03;
 13872  000B2A  0E03               	movlw	3
 13873  000B2C  1235               	iorwf	printf@flag,f,c
 13874                           
 13875                           ;doprnt.c: 1263: val = -val;
 13876  000B2E  6C33               	negf	printf@val,c
 13877  000B30  1E34               	comf	printf@val+1,f,c
 13878  000B32  B0D8               	btfsc	status,0,c
 13879  000B34  2A34               	incf	printf@val+1,f,c
 13880                           
 13881                           ;doprnt.c: 1264: }
 13882                           ;doprnt.c: 1266: }
 13883  000B36  D047               	goto	l8543
 13884  000B38                     l8509:
 13885                           
 13886                           ;doprnt.c: 1268: else
 13887                           ;doprnt.c: 1273: {
 13888                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 13889  000B38  C030  FFD9         	movff	printf@ap,fsr2l
 13890  000B3C  C031  FFDA         	movff	printf@ap+1,fsr2h
 13891  000B40  CFDE F033          	movff	postinc2,printf@val
 13892  000B44  CFDD F034          	movff	postdec2,printf@val+1
 13893  000B48  0E02               	movlw	2
 13894  000B4A  2630               	addwf	printf@ap,f,c
 13895  000B4C  0E00               	movlw	0
 13896  000B4E  2231               	addwfc	printf@ap+1,f,c
 13897                           
 13898                           ;doprnt.c: 1287: }
 13899                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
 13900  000B50  D03A               	goto	l8543
 13901  000B52                     l8513:
 13902                           
 13903                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 13904  000B52  0E01               	movlw	1
 13905  000B54  6E38               	movwf	printf@c,c
 13906  000B56                     l8515:
 13907  000B56  0E05               	movlw	5
 13908  000B58  1838               	xorwf	printf@c,w,c
 13909  000B5A  B4D8               	btfsc	status,2,c
 13910  000B5C  D03D               	goto	l8545
 13911  000B5E  D001               	goto	l8519
 13912  000B60  D03B               	goto	l8545
 13913  000B62                     l8519:
 13914                           
 13915                           ;doprnt.c: 1306: if(val < dpowers[c])
 13916  000B62  5038               	movf	printf@c,w,c
 13917  000B64  0D02               	mullw	2
 13918  000B66  0E68               	movlw	low _dpowers
 13919  000B68  24F3               	addwf	prodl,w,c
 13920  000B6A  6EF6               	movwf	tblptrl,c
 13921  000B6C  0EFE               	movlw	high _dpowers
 13922  000B6E  20F4               	addwfc	prodh,w,c
 13923  000B70  6EF7               	movwf	tblptrh,c
 13924  000B72                     	if	0	;There are less than 3 active tblptr bytes
 13925  000B72                     	endif
 13926  000B72  0009               	tblrd		*+
 13927  000B74  50F5               	movf	tablat,w,c
 13928  000B76  5C33               	subwf	printf@val,w,c
 13929  000B78  0009               	tblrd		*+
 13930  000B7A  50F5               	movf	tablat,w,c
 13931  000B7C  5834               	subwfb	printf@val+1,w,c
 13932  000B7E  A0D8               	btfss	status,0,c
 13933  000B80  D02B               	goto	l8545
 13934  000B82  D001               	goto	l8523
 13935                           
 13936                           ;doprnt.c: 1307: break;
 13937  000B84  D029               	goto	l8545
 13938  000B86                     l8523:
 13939  000B86  2A38               	incf	printf@c,f,c
 13940  000B88  D7E6               	goto	l8515
 13941                           
 13942                           ;doprnt.c: 1309: break;
 13943  000B8A  D026               	goto	l8545
 13944  000B8C                     l8527:
 13945                           
 13946                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 13947  000B8C  0E01               	movlw	1
 13948  000B8E  6E38               	movwf	printf@c,c
 13949  000B90                     l8529:
 13950  000B90  0E04               	movlw	4
 13951  000B92  1838               	xorwf	printf@c,w,c
 13952  000B94  B4D8               	btfsc	status,2,c
 13953  000B96  D020               	goto	l8545
 13954  000B98  D001               	goto	l8533
 13955  000B9A  D01E               	goto	l8545
 13956  000B9C                     l8533:
 13957                           
 13958                           ;doprnt.c: 1317: if(val < hexpowers[c])
 13959  000B9C  5038               	movf	printf@c,w,c
 13960  000B9E  0D02               	mullw	2
 13961  000BA0  0E72               	movlw	low _hexpowers
 13962  000BA2  24F3               	addwf	prodl,w,c
 13963  000BA4  6EF6               	movwf	tblptrl,c
 13964  000BA6  0EFE               	movlw	high _hexpowers
 13965  000BA8  20F4               	addwfc	prodh,w,c
 13966  000BAA  6EF7               	movwf	tblptrh,c
 13967  000BAC                     	if	0	;There are less than 3 active tblptr bytes
 13968  000BAC                     	endif
 13969  000BAC  0009               	tblrd		*+
 13970  000BAE  50F5               	movf	tablat,w,c
 13971  000BB0  5C33               	subwf	printf@val,w,c
 13972  000BB2  0009               	tblrd		*+
 13973  000BB4  50F5               	movf	tablat,w,c
 13974  000BB6  5834               	subwfb	printf@val+1,w,c
 13975  000BB8  A0D8               	btfss	status,0,c
 13976  000BBA  D00E               	goto	l8545
 13977  000BBC  D001               	goto	l8537
 13978                           
 13979                           ;doprnt.c: 1318: break;
 13980  000BBE  D00C               	goto	l8545
 13981  000BC0                     l8537:
 13982  000BC0  2A38               	incf	printf@c,f,c
 13983  000BC2  D7E6               	goto	l8529
 13984                           
 13985                           ;doprnt.c: 1336: }
 13986                           
 13987                           ;doprnt.c: 1320: break;
 13988  000BC4  D009               	goto	l8545
 13989  000BC6                     l8543:
 13990  000BC6  5035               	movf	printf@flag,w,c
 13991  000BC8  0B80               	andlw	128
 13992                           
 13993                           ; Switch size 1, requested type "space"
 13994                           ; Number of cases is 2, Range of values is 0 to 128
 13995                           ; switch strategies available:
 13996                           ; Name         Instructions Cycles
 13997                           ; simple_byte            7     4 (average)
 13998                           ;	Chosen strategy is simple_byte
 13999  000BCA  0A00               	xorlw	0	; case 0
 14000  000BCC  B4D8               	btfsc	status,2,c
 14001  000BCE  D7C1               	goto	l8513
 14002  000BD0  0A80               	xorlw	128	; case 128
 14003  000BD2  B4D8               	btfsc	status,2,c
 14004  000BD4  D7DB               	goto	l8527
 14005  000BD6  D000               	goto	l8545
 14006  000BD8                     l8545:
 14007                           
 14008                           ;doprnt.c: 1345: if(width && flag & 0x03)
 14009  000BD8  5036               	movf	printf@width,w,c
 14010  000BDA  1037               	iorwf	printf@width+1,w,c
 14011  000BDC  B4D8               	btfsc	status,2,c
 14012  000BDE  D00A               	goto	l8551
 14013  000BE0  C035  F02B         	movff	printf@flag,??_printf
 14014  000BE4  0E03               	movlw	3
 14015  000BE6  162B               	andwf	??_printf,f,c
 14016  000BE8  B4D8               	btfsc	status,2,c
 14017  000BEA  D004               	goto	l8551
 14018                           
 14019                           ;doprnt.c: 1346: width--;
 14020  000BEC  0636               	decf	printf@width,f,c
 14021  000BEE  A0D8               	btfss	status,0,c
 14022  000BF0  0637               	decf	printf@width+1,f,c
 14023  000BF2  D000               	goto	l8551
 14024  000BF4                     l8551:
 14025                           
 14026                           ;doprnt.c: 1381: if(width > c)
 14027  000BF4  0E80               	movlw	128
 14028  000BF6  BE38               	btfsc	printf@c,7,c
 14029  000BF8  0E7F               	movlw	127
 14030  000BFA  6E2B               	movwf	??_printf& (0+255),c
 14031  000BFC  5036               	movf	printf@width,w,c
 14032  000BFE  5C38               	subwf	printf@c,w,c
 14033  000C00  5037               	movf	printf@width+1,w,c
 14034  000C02  0A80               	xorlw	128
 14035  000C04  582B               	subwfb	??_printf& (0+255),w,c
 14036  000C06  B0D8               	btfsc	status,0,c
 14037  000C08  D007               	goto	l8555
 14038                           
 14039                           ;doprnt.c: 1382: width -= c;
 14040  000C0A  5038               	movf	printf@c,w,c
 14041  000C0C  5E36               	subwf	printf@width,f,c
 14042  000C0E  0E00               	movlw	0
 14043  000C10  BE38               	btfsc	printf@c,7,c
 14044  000C12  0EFF               	movlw	255
 14045  000C14  5A37               	subwfb	printf@width+1,f,c
 14046  000C16  D005               	goto	l8557
 14047  000C18                     l8555:
 14048                           
 14049                           ;doprnt.c: 1383: else
 14050                           ;doprnt.c: 1384: width = 0;
 14051  000C18  0E00               	movlw	0
 14052  000C1A  6E37               	movwf	printf@width+1,c
 14053  000C1C  0E00               	movlw	0
 14054  000C1E  6E36               	movwf	printf@width,c
 14055  000C20  D000               	goto	l8557
 14056  000C22                     l8557:
 14057                           
 14058                           ;doprnt.c: 1387: if(flag & 0x04) {
 14059  000C22  A435               	btfss	printf@flag,2,c
 14060  000C24  D01A               	goto	l8569
 14061                           
 14062                           ;doprnt.c: 1392: if(flag & 0x03)
 14063  000C26  C035  F02B         	movff	printf@flag,??_printf
 14064  000C2A  0E03               	movlw	3
 14065  000C2C  162B               	andwf	??_printf,f,c
 14066  000C2E  B4D8               	btfsc	status,2,c
 14067  000C30  D004               	goto	l8563
 14068                           
 14069                           ;doprnt.c: 1393: (putch('-') );
 14070  000C32  0E2D               	movlw	45
 14071  000C34  EC88  F01E         	call	_putch
 14072  000C38  D000               	goto	l8563
 14073  000C3A                     l8563:
 14074                           
 14075                           ;doprnt.c: 1415: if(width)
 14076  000C3A  5036               	movf	printf@width,w,c
 14077  000C3C  1037               	iorwf	printf@width+1,w,c
 14078  000C3E  B4D8               	btfsc	status,2,c
 14079  000C40  D026               	goto	l8579
 14080  000C42                     l8565:
 14081                           
 14082                           ;doprnt.c: 1417: (putch('0') );
 14083  000C42  0E30               	movlw	48
 14084  000C44  EC88  F01E         	call	_putch
 14085                           
 14086                           ;doprnt.c: 1418: while(--width);
 14087  000C48  0636               	decf	printf@width,f,c
 14088  000C4A  A0D8               	btfss	status,0,c
 14089  000C4C  0637               	decf	printf@width+1,f,c
 14090  000C4E  5036               	movf	printf@width,w,c
 14091  000C50  1037               	iorwf	printf@width+1,w,c
 14092  000C52  B4D8               	btfsc	status,2,c
 14093  000C54  D01C               	goto	l8579
 14094  000C56  D7F5               	goto	l8565
 14095                           
 14096                           ;doprnt.c: 1420: } else
 14097  000C58  D01A               	goto	l8579
 14098  000C5A                     l8569:
 14099                           
 14100                           ;doprnt.c: 1422: {
 14101                           ;doprnt.c: 1424: if(width
 14102                           ;doprnt.c: 1428: )
 14103  000C5A  5036               	movf	printf@width,w,c
 14104  000C5C  1037               	iorwf	printf@width+1,w,c
 14105  000C5E  B4D8               	btfsc	status,2,c
 14106  000C60  D00C               	goto	l8575
 14107  000C62                     l8571:
 14108                           
 14109                           ;doprnt.c: 1430: (putch(' ') );
 14110  000C62  0E20               	movlw	32
 14111  000C64  EC88  F01E         	call	_putch
 14112                           
 14113                           ;doprnt.c: 1431: while(--width);
 14114  000C68  0636               	decf	printf@width,f,c
 14115  000C6A  A0D8               	btfss	status,0,c
 14116  000C6C  0637               	decf	printf@width+1,f,c
 14117  000C6E  5036               	movf	printf@width,w,c
 14118  000C70  1037               	iorwf	printf@width+1,w,c
 14119  000C72  B4D8               	btfsc	status,2,c
 14120  000C74  D002               	goto	l8575
 14121  000C76  D7F5               	goto	l8571
 14122  000C78  D000               	goto	l8575
 14123  000C7A                     l8575:
 14124                           
 14125                           ;doprnt.c: 1438: if(flag & 0x03)
 14126  000C7A  C035  F02B         	movff	printf@flag,??_printf
 14127  000C7E  0E03               	movlw	3
 14128  000C80  162B               	andwf	??_printf,f,c
 14129  000C82  B4D8               	btfsc	status,2,c
 14130  000C84  D004               	goto	l8579
 14131                           
 14132                           ;doprnt.c: 1439: (putch('-') );
 14133  000C86  0E2D               	movlw	45
 14134  000C88  EC88  F01E         	call	_putch
 14135  000C8C  D000               	goto	l8579
 14136  000C8E                     l8579:
 14137                           
 14138                           ;doprnt.c: 1469: }
 14139                           ;doprnt.c: 1472: prec = c;
 14140  000C8E  C038  F032         	movff	printf@c,printf@prec
 14141                           
 14142                           ;doprnt.c: 1474: while(prec--) {
 14143  000C92  D053               	goto	l8593
 14144                           
 14145                           ;doprnt.c: 1476: switch((unsigned char)(flag & 0x80))
 14146  000C94  D045               	goto	l8589
 14147  000C96                     l8581:
 14148                           
 14149                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 14150  000C96  5032               	movf	printf@prec,w,c
 14151  000C98  0D02               	mullw	2
 14152  000C9A  0E68               	movlw	low _dpowers
 14153  000C9C  24F3               	addwf	prodl,w,c
 14154  000C9E  6EF6               	movwf	tblptrl,c
 14155  000CA0  0EFE               	movlw	high _dpowers
 14156  000CA2  20F4               	addwfc	prodh,w,c
 14157  000CA4  6EF7               	movwf	tblptrh,c
 14158  000CA6                     	if	0	;There are less than 3 active tblptr bytes
 14159  000CA6                     	endif
 14160  000CA6  0009               	tblrd		*+
 14161  000CA8  CFF5 F013          	movff	tablat,___lwdiv@divisor
 14162  000CAC  000A               	tblrd		*-
 14163  000CAE  CFF5 F014          	movff	tablat,___lwdiv@divisor+1
 14164  000CB2  C033  F011         	movff	printf@val,___lwdiv@dividend
 14165  000CB6  C034  F012         	movff	printf@val+1,___lwdiv@dividend+1
 14166  000CBA  EC93  F019         	call	___lwdiv	;wreg free
 14167  000CBE  C011  F018         	movff	?___lwdiv,___lwmod@dividend
 14168  000CC2  C012  F019         	movff	?___lwdiv+1,___lwmod@dividend+1
 14169  000CC6  0E00               	movlw	0
 14170  000CC8  6E1B               	movwf	___lwmod@divisor+1,c
 14171  000CCA  0E0A               	movlw	10
 14172  000CCC  6E1A               	movwf	___lwmod@divisor,c
 14173  000CCE  ECB0  F01A         	call	___lwmod	;wreg free
 14174  000CD2  5018               	movf	?___lwmod,w,c
 14175  000CD4  0F30               	addlw	48
 14176  000CD6  6E38               	movwf	printf@c,c
 14177                           
 14178                           ;doprnt.c: 1491: break;
 14179  000CD8  D02C               	goto	l8591
 14180  000CDA                     l8583:
 14181                           
 14182                           ;doprnt.c: 1499: {
 14183                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 14184  000CDA  C033  F011         	movff	printf@val,___lwdiv@dividend
 14185  000CDE  C034  F012         	movff	printf@val+1,___lwdiv@dividend+1
 14186  000CE2  5032               	movf	printf@prec,w,c
 14187  000CE4  0D02               	mullw	2
 14188  000CE6  0E72               	movlw	low _hexpowers
 14189  000CE8  24F3               	addwf	prodl,w,c
 14190  000CEA  6EF6               	movwf	tblptrl,c
 14191  000CEC  0EFE               	movlw	high _hexpowers
 14192  000CEE  20F4               	addwfc	prodh,w,c
 14193  000CF0  6EF7               	movwf	tblptrh,c
 14194  000CF2                     	if	0	;There are less than 3 active tblptr bytes
 14195  000CF2                     	endif
 14196  000CF2  0009               	tblrd		*+
 14197  000CF4  CFF5 F013          	movff	tablat,___lwdiv@divisor
 14198  000CF8  000A               	tblrd		*-
 14199  000CFA  CFF5 F014          	movff	tablat,___lwdiv@divisor+1
 14200  000CFE  EC93  F019         	call	___lwdiv	;wreg free
 14201  000D02  5011               	movf	?___lwdiv,w,c
 14202  000D04  0B0F               	andlw	15
 14203  000D06  6E2F               	movwf	printf@idx,c
 14204                           
 14205                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 14206  000D08  502F               	movf	printf@idx,w,c
 14207  000D0A  0D01               	mullw	1
 14208  000D0C  0E2F               	movlw	low STR_38
 14209  000D0E  24F3               	addwf	prodl,w,c
 14210  000D10  6EF6               	movwf	tblptrl,c
 14211  000D12  0EFF               	movlw	high STR_38
 14212  000D14  20F4               	addwfc	prodh,w,c
 14213  000D16  6EF7               	movwf	tblptrh,c
 14214  000D18                     	if	0	;There are less than 3 active tblptr bytes
 14215  000D18                     	endif
 14216  000D18  0008               	tblrd		*
 14217  000D1A  CFF5 F038          	movff	tablat,printf@c
 14218                           
 14219                           ;doprnt.c: 1523: }
 14220                           
 14221                           ;doprnt.c: 1508: }
 14222                           ;doprnt.c: 1510: break;
 14223  000D1E  D009               	goto	l8591
 14224  000D20                     l8589:
 14225  000D20  5035               	movf	printf@flag,w,c
 14226  000D22  0B80               	andlw	128
 14227                           
 14228                           ; Switch size 1, requested type "space"
 14229                           ; Number of cases is 2, Range of values is 0 to 128
 14230                           ; switch strategies available:
 14231                           ; Name         Instructions Cycles
 14232                           ; simple_byte            7     4 (average)
 14233                           ;	Chosen strategy is simple_byte
 14234  000D24  0A00               	xorlw	0	; case 0
 14235  000D26  B4D8               	btfsc	status,2,c
 14236  000D28  D7B6               	goto	l8581
 14237  000D2A  0A80               	xorlw	128	; case 128
 14238  000D2C  B4D8               	btfsc	status,2,c
 14239  000D2E  D7D5               	goto	l8583
 14240  000D30  D000               	goto	l8591
 14241  000D32                     l8591:
 14242                           
 14243                           ;doprnt.c: 1524: (putch(c) );
 14244  000D32  5038               	movf	printf@c,w,c
 14245  000D34  EC88  F01E         	call	_putch
 14246  000D38  D000               	goto	l8593
 14247  000D3A                     l8593:
 14248  000D3A  0632               	decf	printf@prec,f,c
 14249  000D3C  2832               	incf	printf@prec,w,c
 14250  000D3E  B4D8               	btfsc	status,2,c
 14251  000D40  D002               	goto	l8595
 14252  000D42  D7EE               	goto	l8589
 14253  000D44  D000               	goto	l8595
 14254  000D46                     l8595:
 14255  000D46  C01D  FFF6         	movff	printf@f,tblptrl
 14256  000D4A  C01E  FFF7         	movff	printf@f+1,tblptrh
 14257  000D4E  4A1D               	infsnz	printf@f,f,c
 14258  000D50  2A1E               	incf	printf@f+1,f,c
 14259  000D52                     	if	0	;tblptru may be non-zero
 14260  000D52                     	endif
 14261  000D52                     	if	0	;tblptru may be non-zero
 14262  000D52                     	endif
 14263  000D52  0008               	tblrd		*
 14264  000D54  CFF5 F038          	movff	tablat,printf@c
 14265  000D58  5038               	movf	printf@c,w,c
 14266  000D5A  B4D8               	btfsc	status,2,c
 14267  000D5C  D002               	goto	l1437
 14268  000D5E  D65A               	goto	l8469
 14269  000D60  D000               	goto	l1437
 14270  000D62                     l1437:
 14271  000D62  0012               	return		;funcret
 14272  000D64                     __end_of_printf:
 14273                           	opt stack 0
 14274                           tblptru	equ	0xFF8
 14275                           tblptrh	equ	0xFF7
 14276                           tblptrl	equ	0xFF6
 14277                           tablat	equ	0xFF5
 14278                           prodh	equ	0xFF4
 14279                           prodl	equ	0xFF3
 14280                           intcon	equ	0xFF2
 14281                           intcon2	equ	0xFF1
 14282                           postinc0	equ	0xFEE
 14283                           wreg	equ	0xFE8
 14284                           postdec1	equ	0xFE5
 14285                           fsr1l	equ	0xFE1
 14286                           indf2	equ	0xFDF
 14287                           postinc2	equ	0xFDE
 14288                           postdec2	equ	0xFDD
 14289                           fsr2h	equ	0xFDA
 14290                           fsr2l	equ	0xFD9
 14291                           status	equ	0xFD8
 14292                           
 14293 ;; *************** function _putch *****************
 14294 ;; Defined at:
 14295 ;;		line 88 in file "LabFinal.c"
 14296 ;; Parameters:    Size  Location     Type
 14297 ;;  c               1    wreg     unsigned char 
 14298 ;; Auto vars:     Size  Location     Type
 14299 ;;  c               1   16[COMRAM] unsigned char 
 14300 ;; Return value:  Size  Location     Type
 14301 ;;		None               void
 14302 ;; Registers used:
 14303 ;;		wreg
 14304 ;; Tracked objects:
 14305 ;;		On entry : 0/0
 14306 ;;		On exit  : 0/0
 14307 ;;		Unchanged: 0/0
 14308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14310 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14311 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14312 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14313 ;;Total ram usage:        1 bytes
 14314 ;; Hardware stack levels used:    1
 14315 ;; Hardware stack levels required when called:    3
 14316 ;; This function calls:
 14317 ;;		Nothing
 14318 ;; This function is called by:
 14319 ;;		_printf
 14320 ;; This function uses a non-reentrant model
 14321 ;;
 14322                           
 14323                           	psect	text75
 14324  003D10                     __ptext75:
 14325                           	opt stack 0
 14326  003D10                     _putch:
 14327                           	opt stack 26
 14328                           
 14329                           ;incstack = 0
 14330                           ;putch@c stored from wreg
 14331  003D10  6E11               	movwf	putch@c,c
 14332                           
 14333                           ;LabFinal.c: 90: while (!TRMT);
 14334  003D12  D000               	goto	l946
 14335  003D14                     l946:
 14336  003D14  A2AC               	btfss	4012,1,c	;volatile
 14337  003D16  D7FE               	goto	l946
 14338                           
 14339                           ;LabFinal.c: 91: TXREG = c;
 14340  003D18  C011  FFAD         	movff	putch@c,4013	;volatile
 14341  003D1C  0012               	return		;funcret
 14342  003D1E                     __end_of_putch:
 14343                           	opt stack 0
 14344                           tblptru	equ	0xFF8
 14345                           tblptrh	equ	0xFF7
 14346                           tblptrl	equ	0xFF6
 14347                           tablat	equ	0xFF5
 14348                           prodh	equ	0xFF4
 14349                           prodl	equ	0xFF3
 14350                           intcon	equ	0xFF2
 14351                           intcon2	equ	0xFF1
 14352                           postinc0	equ	0xFEE
 14353                           wreg	equ	0xFE8
 14354                           postdec1	equ	0xFE5
 14355                           fsr1l	equ	0xFE1
 14356                           indf2	equ	0xFDF
 14357                           postinc2	equ	0xFDE
 14358                           postdec2	equ	0xFDD
 14359                           fsr2h	equ	0xFDA
 14360                           fsr2l	equ	0xFD9
 14361                           status	equ	0xFD8
 14362                           
 14363 ;; *************** function _isdigit *****************
 14364 ;; Defined at:
 14365 ;;		line 8 in file "E:\XC8\sources\common\isdigit.c"
 14366 ;; Parameters:    Size  Location     Type
 14367 ;;  c               1    wreg     unsigned char 
 14368 ;; Auto vars:     Size  Location     Type
 14369 ;;  c               1   18[COMRAM] unsigned char 
 14370 ;; Return value:  Size  Location     Type
 14371 ;;		None               void
 14372 ;; Registers used:
 14373 ;;		wreg, status,2, status,0
 14374 ;; Tracked objects:
 14375 ;;		On entry : 0/0
 14376 ;;		On exit  : 0/0
 14377 ;;		Unchanged: 0/0
 14378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14379 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14380 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14381 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14382 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14383 ;;Total ram usage:        3 bytes
 14384 ;; Hardware stack levels used:    1
 14385 ;; Hardware stack levels required when called:    3
 14386 ;; This function calls:
 14387 ;;		Nothing
 14388 ;; This function is called by:
 14389 ;;		_printf
 14390 ;; This function uses a non-reentrant model
 14391 ;;
 14392                           
 14393                           	psect	text76
 14394  003A26                     __ptext76:
 14395                           	opt stack 0
 14396  003A26                     _isdigit:
 14397                           	opt stack 26
 14398                           
 14399                           ;incstack = 0
 14400                           ;isdigit@c stored from wreg
 14401  003A26  6E13               	movwf	isdigit@c,c
 14402  003A28  0E00               	movlw	0
 14403  003A2A  6E12               	movwf	_isdigit$2956,c
 14404  003A2C  0E3A               	movlw	58
 14405  003A2E  6013               	cpfslt	isdigit@c,c
 14406  003A30  D006               	goto	l5349
 14407  003A32  0E2F               	movlw	47
 14408  003A34  6413               	cpfsgt	isdigit@c,c
 14409  003A36  D003               	goto	l5349
 14410  003A38  0E01               	movlw	1
 14411  003A3A  6E12               	movwf	_isdigit$2956,c
 14412  003A3C  D000               	goto	l5349
 14413  003A3E                     l5349:
 14414  003A3E  C012  F011         	movff	_isdigit$2956,??_isdigit
 14415  003A42  3011               	rrcf	??_isdigit,w,c
 14416  003A44  D000               	goto	l1904
 14417  003A46                     l1904:
 14418  003A46  0012               	return		;funcret
 14419  003A48                     __end_of_isdigit:
 14420                           	opt stack 0
 14421                           tblptru	equ	0xFF8
 14422                           tblptrh	equ	0xFF7
 14423                           tblptrl	equ	0xFF6
 14424                           tablat	equ	0xFF5
 14425                           prodh	equ	0xFF4
 14426                           prodl	equ	0xFF3
 14427                           intcon	equ	0xFF2
 14428                           intcon2	equ	0xFF1
 14429                           postinc0	equ	0xFEE
 14430                           wreg	equ	0xFE8
 14431                           postdec1	equ	0xFE5
 14432                           fsr1l	equ	0xFE1
 14433                           indf2	equ	0xFDF
 14434                           postinc2	equ	0xFDE
 14435                           postdec2	equ	0xFDD
 14436                           fsr2h	equ	0xFDA
 14437                           fsr2l	equ	0xFD9
 14438                           status	equ	0xFD8
 14439                           
 14440 ;; *************** function ___lwmod *****************
 14441 ;; Defined at:
 14442 ;;		line 8 in file "E:\XC8\sources\common\lwmod.c"
 14443 ;; Parameters:    Size  Location     Type
 14444 ;;  dividend        2   23[COMRAM] unsigned int 
 14445 ;;  divisor         2   25[COMRAM] unsigned int 
 14446 ;; Auto vars:     Size  Location     Type
 14447 ;;  counter         1   27[COMRAM] unsigned char 
 14448 ;; Return value:  Size  Location     Type
 14449 ;;                  2   23[COMRAM] unsigned int 
 14450 ;; Registers used:
 14451 ;;		wreg, status,2, status,0
 14452 ;; Tracked objects:
 14453 ;;		On entry : 0/0
 14454 ;;		On exit  : 0/0
 14455 ;;		Unchanged: 0/0
 14456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14457 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14458 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14459 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14460 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14461 ;;Total ram usage:        5 bytes
 14462 ;; Hardware stack levels used:    1
 14463 ;; Hardware stack levels required when called:    3
 14464 ;; This function calls:
 14465 ;;		Nothing
 14466 ;; This function is called by:
 14467 ;;		_printf
 14468 ;; This function uses a non-reentrant model
 14469 ;;
 14470                           
 14471                           	psect	text77
 14472  003560                     __ptext77:
 14473                           	opt stack 0
 14474  003560                     ___lwmod:
 14475                           	opt stack 26
 14476                           
 14477                           ;incstack = 0
 14478  003560  501A               	movf	___lwmod@divisor,w,c
 14479  003562  101B               	iorwf	___lwmod@divisor+1,w,c
 14480  003564  B4D8               	btfsc	status,2,c
 14481  003566  D01D               	goto	l2006
 14482  003568  0E01               	movlw	1
 14483  00356A  6E1C               	movwf	___lwmod@counter,c
 14484  00356C  D005               	goto	l5497
 14485  00356E                     l5495:
 14486  00356E  90D8               	bcf	status,0,c
 14487  003570  361A               	rlcf	___lwmod@divisor,f,c
 14488  003572  361B               	rlcf	___lwmod@divisor+1,f,c
 14489  003574  2A1C               	incf	___lwmod@counter,f,c
 14490  003576  D000               	goto	l5497
 14491  003578                     l5497:
 14492  003578  BE1B               	btfsc	___lwmod@divisor+1,7,c
 14493  00357A  D002               	goto	l5499
 14494  00357C  D7F8               	goto	l5495
 14495  00357E  D000               	goto	l5499
 14496  003580                     l5499:
 14497  003580  501A               	movf	___lwmod@divisor,w,c
 14498  003582  5C18               	subwf	___lwmod@dividend,w,c
 14499  003584  501B               	movf	___lwmod@divisor+1,w,c
 14500  003586  5819               	subwfb	___lwmod@dividend+1,w,c
 14501  003588  A0D8               	btfss	status,0,c
 14502  00358A  D005               	goto	l5503
 14503  00358C  501A               	movf	___lwmod@divisor,w,c
 14504  00358E  5E18               	subwf	___lwmod@dividend,f,c
 14505  003590  501B               	movf	___lwmod@divisor+1,w,c
 14506  003592  5A19               	subwfb	___lwmod@dividend+1,f,c
 14507  003594  D000               	goto	l5503
 14508  003596                     l5503:
 14509  003596  90D8               	bcf	status,0,c
 14510  003598  321B               	rrcf	___lwmod@divisor+1,f,c
 14511  00359A  321A               	rrcf	___lwmod@divisor,f,c
 14512  00359C  2E1C               	decfsz	___lwmod@counter,f,c
 14513  00359E  D7F0               	goto	l5499
 14514  0035A0  D000               	goto	l2006
 14515  0035A2                     l2006:
 14516  0035A2  C018  F018         	movff	___lwmod@dividend,?___lwmod
 14517  0035A6  C019  F019         	movff	___lwmod@dividend+1,?___lwmod+1
 14518  0035AA  0012               	return		;funcret
 14519  0035AC                     __end_of___lwmod:
 14520                           	opt stack 0
 14521                           tblptru	equ	0xFF8
 14522                           tblptrh	equ	0xFF7
 14523                           tblptrl	equ	0xFF6
 14524                           tablat	equ	0xFF5
 14525                           prodh	equ	0xFF4
 14526                           prodl	equ	0xFF3
 14527                           intcon	equ	0xFF2
 14528                           intcon2	equ	0xFF1
 14529                           postinc0	equ	0xFEE
 14530                           wreg	equ	0xFE8
 14531                           postdec1	equ	0xFE5
 14532                           fsr1l	equ	0xFE1
 14533                           indf2	equ	0xFDF
 14534                           postinc2	equ	0xFDE
 14535                           postdec2	equ	0xFDD
 14536                           fsr2h	equ	0xFDA
 14537                           fsr2l	equ	0xFD9
 14538                           status	equ	0xFD8
 14539                           
 14540 ;; *************** function ___lwdiv *****************
 14541 ;; Defined at:
 14542 ;;		line 8 in file "E:\XC8\sources\common\lwdiv.c"
 14543 ;; Parameters:    Size  Location     Type
 14544 ;;  dividend        2   16[COMRAM] unsigned int 
 14545 ;;  divisor         2   18[COMRAM] unsigned int 
 14546 ;; Auto vars:     Size  Location     Type
 14547 ;;  quotient        2   20[COMRAM] unsigned int 
 14548 ;;  counter         1   22[COMRAM] unsigned char 
 14549 ;; Return value:  Size  Location     Type
 14550 ;;                  2   16[COMRAM] unsigned int 
 14551 ;; Registers used:
 14552 ;;		wreg, status,2, status,0
 14553 ;; Tracked objects:
 14554 ;;		On entry : 0/0
 14555 ;;		On exit  : 0/0
 14556 ;;		Unchanged: 0/0
 14557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14558 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14559 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14560 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14561 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14562 ;;Total ram usage:        7 bytes
 14563 ;; Hardware stack levels used:    1
 14564 ;; Hardware stack levels required when called:    3
 14565 ;; This function calls:
 14566 ;;		Nothing
 14567 ;; This function is called by:
 14568 ;;		_printf
 14569 ;; This function uses a non-reentrant model
 14570 ;;
 14571                           
 14572                           	psect	text78
 14573  003326                     __ptext78:
 14574                           	opt stack 0
 14575  003326                     ___lwdiv:
 14576                           	opt stack 26
 14577                           
 14578                           ;incstack = 0
 14579  003326  0E00               	movlw	0
 14580  003328  6E16               	movwf	___lwdiv@quotient+1,c
 14581  00332A  0E00               	movlw	0
 14582  00332C  6E15               	movwf	___lwdiv@quotient,c
 14583  00332E  5013               	movf	___lwdiv@divisor,w,c
 14584  003330  1014               	iorwf	___lwdiv@divisor+1,w,c
 14585  003332  B4D8               	btfsc	status,2,c
 14586  003334  D021               	goto	l1996
 14587  003336  0E01               	movlw	1
 14588  003338  6E17               	movwf	___lwdiv@counter,c
 14589  00333A  D005               	goto	l5477
 14590  00333C                     l5475:
 14591  00333C  90D8               	bcf	status,0,c
 14592  00333E  3613               	rlcf	___lwdiv@divisor,f,c
 14593  003340  3614               	rlcf	___lwdiv@divisor+1,f,c
 14594  003342  2A17               	incf	___lwdiv@counter,f,c
 14595  003344  D000               	goto	l5477
 14596  003346                     l5477:
 14597  003346  BE14               	btfsc	___lwdiv@divisor+1,7,c
 14598  003348  D002               	goto	l5479
 14599  00334A  D7F8               	goto	l5475
 14600  00334C  D000               	goto	l5479
 14601  00334E                     l5479:
 14602  00334E  90D8               	bcf	status,0,c
 14603  003350  3615               	rlcf	___lwdiv@quotient,f,c
 14604  003352  3616               	rlcf	___lwdiv@quotient+1,f,c
 14605  003354  5013               	movf	___lwdiv@divisor,w,c
 14606  003356  5C11               	subwf	___lwdiv@dividend,w,c
 14607  003358  5014               	movf	___lwdiv@divisor+1,w,c
 14608  00335A  5812               	subwfb	___lwdiv@dividend+1,w,c
 14609  00335C  A0D8               	btfss	status,0,c
 14610  00335E  D006               	goto	l5487
 14611  003360  5013               	movf	___lwdiv@divisor,w,c
 14612  003362  5E11               	subwf	___lwdiv@dividend,f,c
 14613  003364  5014               	movf	___lwdiv@divisor+1,w,c
 14614  003366  5A12               	subwfb	___lwdiv@dividend+1,f,c
 14615  003368  8015               	bsf	___lwdiv@quotient,0,c
 14616  00336A  D000               	goto	l5487
 14617  00336C                     l5487:
 14618  00336C  90D8               	bcf	status,0,c
 14619  00336E  3214               	rrcf	___lwdiv@divisor+1,f,c
 14620  003370  3213               	rrcf	___lwdiv@divisor,f,c
 14621  003372  2E17               	decfsz	___lwdiv@counter,f,c
 14622  003374  D7EC               	goto	l5479
 14623  003376  D000               	goto	l1996
 14624  003378                     l1996:
 14625  003378  C015  F011         	movff	___lwdiv@quotient,?___lwdiv
 14626  00337C  C016  F012         	movff	___lwdiv@quotient+1,?___lwdiv+1
 14627  003380  0012               	return		;funcret
 14628  003382                     __end_of___lwdiv:
 14629                           	opt stack 0
 14630                           tblptru	equ	0xFF8
 14631                           tblptrh	equ	0xFF7
 14632                           tblptrl	equ	0xFF6
 14633                           tablat	equ	0xFF5
 14634                           prodh	equ	0xFF4
 14635                           prodl	equ	0xFF3
 14636                           intcon	equ	0xFF2
 14637                           intcon2	equ	0xFF1
 14638                           postinc0	equ	0xFEE
 14639                           wreg	equ	0xFE8
 14640                           postdec1	equ	0xFE5
 14641                           fsr1l	equ	0xFE1
 14642                           indf2	equ	0xFDF
 14643                           postinc2	equ	0xFDE
 14644                           postdec2	equ	0xFDD
 14645                           fsr2h	equ	0xFDA
 14646                           fsr2l	equ	0xFD9
 14647                           status	equ	0xFD8
 14648                           
 14649 ;; *************** function _drawtext *****************
 14650 ;; Defined at:
 14651 ;;		line 474 in file "ST7735_TFT.c"
 14652 ;; Parameters:    Size  Location     Type
 14653 ;;  x               1    wreg     unsigned char 
 14654 ;;  y               1   56[COMRAM] unsigned char 
 14655 ;;  _text           2   57[COMRAM] PTR unsigned char 
 14656 ;;		 -> NULL(0), setup_alarm_time(9), setup_heater_set_text(5), setup_date(9), 
 14657 ;;		 -> setup_time(9), RPM_Txt(5), Volt_Txt(6), DC_Txt(4), 
 14658 ;;		 -> RTC_ALARM_Txt(2), Heater_SW_Txt(4), Heater_Set_Temp_Txt(5), Alarm_SW_Txt(4), 
 14659 ;;		 -> alarm_time(9), date(9), time(9), tempF(4), 
 14660 ;;		 -> tempC(4), 
 14661 ;;  color           2   59[COMRAM] unsigned int 
 14662 ;;  bg              2   61[COMRAM] unsigned int 
 14663 ;;  size            1   63[COMRAM] unsigned char 
 14664 ;; Auto vars:     Size  Location     Type
 14665 ;;  x               1    0[BANK1 ] unsigned char 
 14666 ;;  i               2    3[BANK1 ] unsigned int 
 14667 ;;  textsize        2    1[BANK1 ] unsigned int 
 14668 ;;  cursor_x        1    6[BANK1 ] unsigned char 
 14669 ;;  cursor_y        1    5[BANK1 ] unsigned char 
 14670 ;; Return value:  Size  Location     Type
 14671 ;;		None               void
 14672 ;; Registers used:
 14673 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14674 ;; Tracked objects:
 14675 ;;		On entry : 0/0
 14676 ;;		On exit  : 0/0
 14677 ;;		Unchanged: 0/0
 14678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14679 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14680 ;;      Locals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14681 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14682 ;;      Totals:        10       0       7       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14683 ;;Total ram usage:       17 bytes
 14684 ;; Hardware stack levels used:    1
 14685 ;; Hardware stack levels required when called:    9
 14686 ;; This function calls:
 14687 ;;		_drawChar
 14688 ;;		_strlen
 14689 ;; This function is called by:
 14690 ;;		_Initialize_Screen
 14691 ;;		_Update_Screen
 14692 ;;		_Initialize_Setup_Time_Screen
 14693 ;;		_Update_Setup_Time_Screen
 14694 ;;		_Initialize_Setup_Heater_Screen
 14695 ;;		_Update_Setup_Heater_Screen
 14696 ;;		_Initialize_Setup_Alarm_Time_Screen
 14697 ;;		_Update_Setup_Alarm_Time_Screen
 14698 ;; This function uses a non-reentrant model
 14699 ;;
 14700                           
 14701                           	psect	text79
 14702  001B24                     __ptext79:
 14703                           	opt stack 0
 14704  001B24                     _drawtext:
 14705                           	opt stack 20
 14706                           
 14707                           ;incstack = 0
 14708                           ;drawtext@x stored from wreg
 14709  001B24  0101               	movlb	1	; () banked
 14710  001B26  6F3C               	movwf	drawtext@x& (0+255),b
 14711                           
 14712                           ; BSR set to: 1
 14713                           ;ST7735_TFT.c: 476: unsigned char cursor_x, cursor_y;
 14714                           ;ST7735_TFT.c: 477: unsigned int textsize, i;
 14715                           ;ST7735_TFT.c: 478: cursor_x = x, cursor_y = y;
 14716  001B28  C13C  F142         	movff	drawtext@x,drawtext@cursor_x
 14717                           
 14718                           ; BSR set to: 1
 14719  001B2C  C039  F141         	movff	drawtext@y,drawtext@cursor_y
 14720                           
 14721                           ; BSR set to: 1
 14722                           ;ST7735_TFT.c: 479: textsize = strlen(_text);
 14723  001B30  C03A  F011         	movff	drawtext@_text,strlen@s
 14724  001B34  C03B  F012         	movff	drawtext@_text+1,strlen@s+1
 14725  001B38  ECA3  F01B         	call	_strlen	;wreg free
 14726  001B3C  C011  F13D         	movff	?_strlen,drawtext@textsize
 14727  001B40  C012  F13E         	movff	?_strlen+1,drawtext@textsize+1
 14728                           
 14729                           ;ST7735_TFT.c: 480: for(i = 0; i < textsize; i++){
 14730  001B44  0E00               	movlw	0
 14731  001B46  0101               	movlb	1	; () banked
 14732  001B48  6F40               	movwf	(drawtext@i+1)& (0+255),b
 14733  001B4A  0E00               	movlw	0
 14734  001B4C  6F3F               	movwf	drawtext@i& (0+255),b
 14735  001B4E  D066               	goto	l8393
 14736  001B50                     l8367:
 14737                           
 14738                           ; BSR set to: 1
 14739                           ;ST7735_TFT.c: 481: if(wrap && ((cursor_x + size * 5) > 128)){
 14740  001B50  0100               	movlb	0	; () banked
 14741  001B52  5181               	movf	_wrap& (0+255),w,b
 14742  001B54  0100               	movlb	0	; () banked
 14743  001B56  B4D8               	btfsc	status,2,c
 14744  001B58  D034               	goto	l8383
 14745                           
 14746                           ; BSR set to: 0
 14747  001B5A  5040               	movf	drawtext@size,w,c
 14748  001B5C  0D05               	mullw	5
 14749  001B5E  0101               	movlb	1	; () banked
 14750  001B60  5142               	movf	drawtext@cursor_x& (0+255),w,b
 14751  001B62  6E41               	movwf	??_drawtext& (0+255),c
 14752  001B64  6A42               	clrf	(??_drawtext+1)& (0+255),c
 14753  001B66  50F3               	movf	prodl,w,c
 14754  001B68  2641               	addwf	??_drawtext,f,c
 14755  001B6A  50F4               	movf	prodh,w,c
 14756  001B6C  2242               	addwfc	??_drawtext+1,f,c
 14757  001B6E  BE42               	btfsc	??_drawtext+1,7,c
 14758  001B70  D028               	goto	l8383
 14759  001B72  5042               	movf	??_drawtext+1,w,c
 14760  001B74  E104               	bnz	u5850
 14761  001B76  0E81               	movlw	129
 14762  001B78  5C41               	subwf	??_drawtext,w,c
 14763  001B7A  A0D8               	btfss	status,0,c
 14764  001B7C  D022               	goto	l8383
 14765  001B7E                     u5850:
 14766                           
 14767                           ; BSR set to: 1
 14768                           ;ST7735_TFT.c: 482: cursor_x = 0;
 14769  001B7E  0E00               	movlw	0
 14770  001B80  0101               	movlb	1	; () banked
 14771  001B82  6F42               	movwf	drawtext@cursor_x& (0+255),b
 14772                           
 14773                           ; BSR set to: 1
 14774                           ;ST7735_TFT.c: 483: cursor_y = cursor_y + size * 7 + 3 ;
 14775  001B84  5040               	movf	drawtext@size,w,c
 14776  001B86  0D07               	mullw	7
 14777  001B88  50F3               	movf	prodl,w,c
 14778  001B8A  0101               	movlb	1	; () banked
 14779  001B8C  2541               	addwf	drawtext@cursor_y& (0+255),w,b
 14780  001B8E  0F03               	addlw	3
 14781  001B90  0101               	movlb	1	; () banked
 14782  001B92  6F41               	movwf	drawtext@cursor_y& (0+255),b
 14783                           
 14784                           ; BSR set to: 1
 14785                           ;ST7735_TFT.c: 484: if(cursor_y > 160) cursor_y = 160;
 14786  001B94  0EA0               	movlw	160
 14787  001B96  0101               	movlb	1	; () banked
 14788  001B98  6541               	cpfsgt	drawtext@cursor_y& (0+255),b
 14789  001B9A  D004               	goto	l8379
 14790                           
 14791                           ; BSR set to: 1
 14792  001B9C  0EA0               	movlw	160
 14793  001B9E  0101               	movlb	1	; () banked
 14794  001BA0  6F41               	movwf	drawtext@cursor_y& (0+255),b
 14795  001BA2  D000               	goto	l8379
 14796  001BA4                     l8379:
 14797                           
 14798                           ; BSR set to: 1
 14799                           ;ST7735_TFT.c: 485: if(_text[i] == 0x20) goto _skip; }
 14800  001BA4  0101               	movlb	1	; () banked
 14801  001BA6  513F               	movf	drawtext@i& (0+255),w,b
 14802  001BA8  243A               	addwf	drawtext@_text,w,c
 14803  001BAA  6ED9               	movwf	fsr2l,c
 14804  001BAC  0101               	movlb	1	; () banked
 14805  001BAE  5140               	movf	(drawtext@i+1)& (0+255),w,b
 14806  001BB0  203B               	addwfc	drawtext@_text+1,w,c
 14807  001BB2  6EDA               	movwf	fsr2h,c
 14808  001BB4  0E20               	movlw	32
 14809  001BB6  18DE               	xorwf	postinc2,w,c
 14810  001BB8  B4D8               	btfsc	status,2,c
 14811  001BBA  D02C               	goto	l8391
 14812  001BBC  D002               	goto	l8383
 14813                           
 14814                           ; BSR set to: 1
 14815  001BBE  D02A               	goto	l8391
 14816                           
 14817                           ; BSR set to: 1
 14818  001BC0  D000               	goto	l8383
 14819  001BC2                     l8383:
 14820                           
 14821                           ;ST7735_TFT.c: 486: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
 14822  001BC2  C141  F02E         	movff	drawtext@cursor_y,drawChar@y
 14823  001BC6  0101               	movlb	1	; () banked
 14824  001BC8  513F               	movf	drawtext@i& (0+255),w,b
 14825  001BCA  243A               	addwf	drawtext@_text,w,c
 14826  001BCC  6ED9               	movwf	fsr2l,c
 14827  001BCE  0101               	movlb	1	; () banked
 14828  001BD0  5140               	movf	(drawtext@i+1)& (0+255),w,b
 14829  001BD2  203B               	addwfc	drawtext@_text+1,w,c
 14830  001BD4  6EDA               	movwf	fsr2h,c
 14831  001BD6  50DF               	movf	indf2,w,c
 14832  001BD8  6E2F               	movwf	drawChar@c,c
 14833  001BDA  C03C  F030         	movff	drawtext@color,drawChar@color
 14834  001BDE  C03D  F031         	movff	drawtext@color+1,drawChar@color+1
 14835  001BE2  C03E  F032         	movff	drawtext@bg,drawChar@bg
 14836  001BE6  C03F  F033         	movff	drawtext@bg+1,drawChar@bg+1
 14837  001BEA  C040  F034         	movff	drawtext@size,drawChar@size
 14838  001BEE  0101               	movlb	1	; () banked
 14839  001BF0  5142               	movf	drawtext@cursor_x& (0+255),w,b
 14840  001BF2  ECCD  F00B         	call	_drawChar
 14841                           
 14842                           ;ST7735_TFT.c: 487: cursor_x = cursor_x + size * 6;
 14843  001BF6  5040               	movf	drawtext@size,w,c
 14844  001BF8  0D06               	mullw	6
 14845  001BFA  50F3               	movf	prodl,w,c
 14846  001BFC  0101               	movlb	1	; () banked
 14847  001BFE  2542               	addwf	drawtext@cursor_x& (0+255),w,b
 14848  001C00  0101               	movlb	1	; () banked
 14849  001C02  6F42               	movwf	drawtext@cursor_x& (0+255),b
 14850                           
 14851                           ; BSR set to: 1
 14852                           ;ST7735_TFT.c: 488: if(cursor_x > 128) cursor_x = 128;
 14853  001C04  0E80               	movlw	128
 14854  001C06  0101               	movlb	1	; () banked
 14855  001C08  6542               	cpfsgt	drawtext@cursor_x& (0+255),b
 14856  001C0A  D004               	goto	l8391
 14857                           
 14858                           ; BSR set to: 1
 14859  001C0C  0E80               	movlw	128
 14860  001C0E  0101               	movlb	1	; () banked
 14861  001C10  6F42               	movwf	drawtext@cursor_x& (0+255),b
 14862                           
 14863                           ; BSR set to: 1
 14864  001C12  D000               	goto	l8391
 14865  001C14                     l8391:
 14866                           
 14867                           ; BSR set to: 1
 14868  001C14  0101               	movlb	1	; () banked
 14869  001C16  4B3F               	infsnz	drawtext@i& (0+255),f,b
 14870  001C18  2B40               	incf	(drawtext@i+1)& (0+255),f,b
 14871  001C1A  D000               	goto	l8393
 14872  001C1C                     l8393:
 14873                           
 14874                           ; BSR set to: 1
 14875  001C1C  0101               	movlb	1	; () banked
 14876  001C1E  513D               	movf	drawtext@textsize& (0+255),w,b
 14877  001C20  0101               	movlb	1	; () banked
 14878  001C22  5D3F               	subwf	drawtext@i& (0+255),w,b
 14879  001C24  0101               	movlb	1	; () banked
 14880  001C26  513E               	movf	(drawtext@textsize+1)& (0+255),w,b
 14881  001C28  0101               	movlb	1	; () banked
 14882  001C2A  5940               	subwfb	(drawtext@i+1)& (0+255),w,b
 14883  001C2C  A0D8               	btfss	status,0,c
 14884  001C2E  D790               	goto	l8367
 14885                           
 14886                           ; BSR set to: 1
 14887                           
 14888                           ; BSR set to: 1
 14889  001C30  0012               	return		;funcret
 14890  001C32                     __end_of_drawtext:
 14891                           	opt stack 0
 14892                           tblptru	equ	0xFF8
 14893                           tblptrh	equ	0xFF7
 14894                           tblptrl	equ	0xFF6
 14895                           tablat	equ	0xFF5
 14896                           prodh	equ	0xFF4
 14897                           prodl	equ	0xFF3
 14898                           intcon	equ	0xFF2
 14899                           intcon2	equ	0xFF1
 14900                           postinc0	equ	0xFEE
 14901                           wreg	equ	0xFE8
 14902                           postdec1	equ	0xFE5
 14903                           fsr1l	equ	0xFE1
 14904                           indf2	equ	0xFDF
 14905                           postinc2	equ	0xFDE
 14906                           postdec2	equ	0xFDD
 14907                           fsr2h	equ	0xFDA
 14908                           fsr2l	equ	0xFD9
 14909                           status	equ	0xFD8
 14910                           
 14911 ;; *************** function _strlen *****************
 14912 ;; Defined at:
 14913 ;;		line 4 in file "E:\XC8\sources\common\strlen.c"
 14914 ;; Parameters:    Size  Location     Type
 14915 ;;  s               2   16[COMRAM] PTR const unsigned char 
 14916 ;;		 -> NULL(0), setup_alarm_time(9), setup_heater_set_text(5), setup_date(9), 
 14917 ;;		 -> setup_time(9), RPM_Txt(5), Volt_Txt(6), DC_Txt(4), 
 14918 ;;		 -> RTC_ALARM_Txt(2), Heater_SW_Txt(4), Heater_Set_Temp_Txt(5), Alarm_SW_Txt(4), 
 14919 ;;		 -> alarm_time(9), date(9), time(9), tempF(4), 
 14920 ;;		 -> tempC(4), 
 14921 ;; Auto vars:     Size  Location     Type
 14922 ;;  cp              2   20[COMRAM] PTR const unsigned char 
 14923 ;;		 -> NULL(0), setup_alarm_time(9), setup_heater_set_text(5), setup_date(9), 
 14924 ;;		 -> setup_time(9), RPM_Txt(5), Volt_Txt(6), DC_Txt(4), 
 14925 ;;		 -> RTC_ALARM_Txt(2), Heater_SW_Txt(4), Heater_Set_Temp_Txt(5), Alarm_SW_Txt(4), 
 14926 ;;		 -> alarm_time(9), date(9), time(9), tempF(4), 
 14927 ;;		 -> tempC(4), 
 14928 ;; Return value:  Size  Location     Type
 14929 ;;                  2   16[COMRAM] unsigned int 
 14930 ;; Registers used:
 14931 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14932 ;; Tracked objects:
 14933 ;;		On entry : 0/0
 14934 ;;		On exit  : 0/0
 14935 ;;		Unchanged: 0/0
 14936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14937 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14938 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14939 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14940 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14941 ;;Total ram usage:        6 bytes
 14942 ;; Hardware stack levels used:    1
 14943 ;; Hardware stack levels required when called:    3
 14944 ;; This function calls:
 14945 ;;		Nothing
 14946 ;; This function is called by:
 14947 ;;		_drawtext
 14948 ;; This function uses a non-reentrant model
 14949 ;;
 14950                           
 14951                           	psect	text80
 14952  003746                     __ptext80:
 14953                           	opt stack 0
 14954  003746                     _strlen:
 14955                           	opt stack 25
 14956                           
 14957                           ; BSR set to: 1
 14958                           ;incstack = 0
 14959  003746  C011  F015         	movff	strlen@s,strlen@cp
 14960  00374A  C012  F016         	movff	strlen@s+1,strlen@cp+1
 14961  00374E  D003               	goto	l8133
 14962  003750                     l8131:
 14963  003750  4A15               	infsnz	strlen@cp,f,c
 14964  003752  2A16               	incf	strlen@cp+1,f,c
 14965  003754  D000               	goto	l8133
 14966  003756                     l8133:
 14967  003756  C015  FFD9         	movff	strlen@cp,fsr2l
 14968  00375A  C016  FFDA         	movff	strlen@cp+1,fsr2h
 14969  00375E  50DF               	movf	indf2,w,c
 14970  003760  A4D8               	btfss	status,2,c
 14971  003762  D7F6               	goto	l8131
 14972  003764  C011  F013         	movff	strlen@s,??_strlen
 14973  003768  C012  F014         	movff	strlen@s+1,??_strlen+1
 14974  00376C  1E13               	comf	??_strlen,f,c
 14975  00376E  1E14               	comf	??_strlen+1,f,c
 14976  003770  4A13               	infsnz	??_strlen,f,c
 14977  003772  2A14               	incf	??_strlen+1,f,c
 14978  003774  5015               	movf	strlen@cp,w,c
 14979  003776  2413               	addwf	??_strlen,w,c
 14980  003778  6E11               	movwf	?_strlen,c
 14981  00377A  5016               	movf	strlen@cp+1,w,c
 14982  00377C  2014               	addwfc	??_strlen+1,w,c
 14983  00377E  6E12               	movwf	?_strlen+1,c
 14984  003780  D000               	goto	l2035
 14985  003782                     l2035:
 14986  003782  0012               	return		;funcret
 14987  003784                     __end_of_strlen:
 14988                           	opt stack 0
 14989                           tblptru	equ	0xFF8
 14990                           tblptrh	equ	0xFF7
 14991                           tblptrl	equ	0xFF6
 14992                           tablat	equ	0xFF5
 14993                           prodh	equ	0xFF4
 14994                           prodl	equ	0xFF3
 14995                           intcon	equ	0xFF2
 14996                           intcon2	equ	0xFF1
 14997                           postinc0	equ	0xFEE
 14998                           wreg	equ	0xFE8
 14999                           postdec1	equ	0xFE5
 15000                           fsr1l	equ	0xFE1
 15001                           indf2	equ	0xFDF
 15002                           postinc2	equ	0xFDE
 15003                           postdec2	equ	0xFDD
 15004                           fsr2h	equ	0xFDA
 15005                           fsr2l	equ	0xFD9
 15006                           status	equ	0xFD8
 15007                           
 15008 ;; *************** function _drawChar *****************
 15009 ;; Defined at:
 15010 ;;		line 447 in file "ST7735_TFT.c"
 15011 ;; Parameters:    Size  Location     Type
 15012 ;;  x               1    wreg     unsigned char 
 15013 ;;  y               1   45[COMRAM] unsigned char 
 15014 ;;  c               1   46[COMRAM] unsigned char 
 15015 ;;  color           2   47[COMRAM] unsigned int 
 15016 ;;  bg              2   49[COMRAM] unsigned int 
 15017 ;;  size            1   51[COMRAM] unsigned char 
 15018 ;; Auto vars:     Size  Location     Type
 15019 ;;  x               1   53[COMRAM] unsigned char 
 15020 ;;  line            1   52[COMRAM] unsigned char 
 15021 ;;  i               1   55[COMRAM] unsigned char 
 15022 ;;  j               1   54[COMRAM] unsigned char 
 15023 ;; Return value:  Size  Location     Type
 15024 ;;		None               void
 15025 ;; Registers used:
 15026 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15027 ;; Tracked objects:
 15028 ;;		On entry : 0/0
 15029 ;;		On exit  : 0/0
 15030 ;;		Unchanged: 0/0
 15031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15032 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15033 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15034 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15035 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15036 ;;Total ram usage:       11 bytes
 15037 ;; Hardware stack levels used:    1
 15038 ;; Hardware stack levels required when called:    8
 15039 ;; This function calls:
 15040 ;;		___wmul
 15041 ;;		_drawPixel
 15042 ;;		_fillRect
 15043 ;; This function is called by:
 15044 ;;		_drawtext
 15045 ;; This function uses a non-reentrant model
 15046 ;;
 15047                           
 15048                           	psect	text81
 15049  00179A                     __ptext81:
 15050                           	opt stack 0
 15051  00179A                     _drawChar:
 15052                           	opt stack 20
 15053                           
 15054                           ;incstack = 0
 15055                           ;drawChar@x stored from wreg
 15056  00179A  6E36               	movwf	drawChar@x,c
 15057                           
 15058                           ;ST7735_TFT.c: 449: char i, j;
 15059                           ;ST7735_TFT.c: 450: if((x >= 128) || (y >= 160))
 15060  00179C  0E80               	movlw	128
 15061  00179E  6036               	cpfslt	drawChar@x,c
 15062  0017A0  D0A6               	goto	l422
 15063  0017A2  0E9F               	movlw	159
 15064  0017A4  642E               	cpfsgt	drawChar@y,c
 15065  0017A6  D001               	goto	l8079
 15066                           
 15067                           ;ST7735_TFT.c: 451: return;
 15068  0017A8  D0A2               	goto	l422
 15069  0017AA                     l8079:
 15070                           
 15071                           ;ST7735_TFT.c: 452: if(size < 1) size = 1;
 15072  0017AA  5034               	movf	drawChar@size,w,c
 15073  0017AC  A4D8               	btfss	status,2,c
 15074  0017AE  D003               	goto	l8083
 15075  0017B0  0E01               	movlw	1
 15076  0017B2  6E34               	movwf	drawChar@size,c
 15077  0017B4  D000               	goto	l8083
 15078  0017B6                     l8083:
 15079                           
 15080                           ;ST7735_TFT.c: 453: if((c < ' ') || (c > '~'))
 15081  0017B6  0E1F               	movlw	31
 15082  0017B8  642F               	cpfsgt	drawChar@c,c
 15083  0017BA  D004               	goto	l8087
 15084  0017BC  0E7E               	movlw	126
 15085  0017BE  642F               	cpfsgt	drawChar@c,c
 15086  0017C0  D003               	goto	l424
 15087  0017C2  D000               	goto	l8087
 15088  0017C4                     l8087:
 15089                           
 15090                           ;ST7735_TFT.c: 454: c = '?';
 15091  0017C4  0E3F               	movlw	63
 15092  0017C6  6E2F               	movwf	drawChar@c,c
 15093  0017C8                     l424:
 15094                           
 15095                           ;ST7735_TFT.c: 455: for(i=0; i<5; i++ ) {
 15096  0017C8  0E00               	movlw	0
 15097  0017CA  6E38               	movwf	drawChar@i,c
 15098  0017CC                     l8089:
 15099  0017CC  0E04               	movlw	4
 15100  0017CE  6438               	cpfsgt	drawChar@i,c
 15101  0017D0  D001               	goto	l8093
 15102  0017D2  D08D               	goto	l422
 15103  0017D4                     l8093:
 15104                           
 15105                           ;ST7735_TFT.c: 456: unsigned char line;
 15106                           ;ST7735_TFT.c: 457: if(c < 'S')
 15107  0017D4  0E53               	movlw	83
 15108  0017D6  602F               	cpfslt	drawChar@c,c
 15109  0017D8  D015               	goto	l8097
 15110                           
 15111                           ;ST7735_TFT.c: 458: line = font[(c - 32)*5 + i];
 15112  0017DA  0EE0               	movlw	224
 15113  0017DC  242F               	addwf	drawChar@c,w,c
 15114  0017DE  6E11               	movwf	___wmul@multiplier,c
 15115  0017E0  6A12               	clrf	___wmul@multiplier+1,c
 15116  0017E2  0EFF               	movlw	255
 15117  0017E4  2212               	addwfc	___wmul@multiplier+1,f,c
 15118  0017E6  0E00               	movlw	0
 15119  0017E8  6E14               	movwf	___wmul@multiplicand+1,c
 15120  0017EA  0E05               	movlw	5
 15121  0017EC  6E13               	movwf	___wmul@multiplicand,c
 15122  0017EE  ECC7  F01C         	call	___wmul	;wreg free
 15123  0017F2  5038               	movf	drawChar@i,w,c
 15124  0017F4  2611               	addwf	?___wmul,f,c
 15125  0017F6  0E00               	movlw	0
 15126  0017F8  2212               	addwfc	?___wmul+1,f,c
 15127  0017FA  0E8D               	movlw	low _font
 15128  0017FC  2411               	addwf	?___wmul,w,c
 15129  0017FE  6EF6               	movwf	tblptrl,c
 15130  001800  0EFC               	movlw	high _font
 15131  001802  D014               	goto	L7
 15132  001804                     l8097:
 15133                           
 15134                           ;ST7735_TFT.c: 459: else
 15135                           ;ST7735_TFT.c: 460: line = font2[(c - 'S')*5 + i];
 15136  001804  0EAD               	movlw	173
 15137  001806  242F               	addwf	drawChar@c,w,c
 15138  001808  6E11               	movwf	___wmul@multiplier,c
 15139  00180A  6A12               	clrf	___wmul@multiplier+1,c
 15140  00180C  0EFF               	movlw	255
 15141  00180E  2212               	addwfc	___wmul@multiplier+1,f,c
 15142  001810  0E00               	movlw	0
 15143  001812  6E14               	movwf	___wmul@multiplicand+1,c
 15144  001814  0E05               	movlw	5
 15145  001816  6E13               	movwf	___wmul@multiplicand,c
 15146  001818  ECC7  F01C         	call	___wmul	;wreg free
 15147  00181C  5038               	movf	drawChar@i,w,c
 15148  00181E  2611               	addwf	?___wmul,f,c
 15149  001820  0E00               	movlw	0
 15150  001822  2212               	addwfc	?___wmul+1,f,c
 15151  001824  0E8C               	movlw	low _font2
 15152  001826  2411               	addwf	?___wmul,w,c
 15153  001828  6EF6               	movwf	tblptrl,c
 15154  00182A  0EFD               	movlw	high _font2
 15155  00182C                     L7:
 15156  00182C  2012               	addwfc	?___wmul+1,w,c
 15157  00182E  6EF7               	movwf	tblptrh,c
 15158  001830                     	if	0	;There are less than 3 active tblptr bytes
 15159  001830                     	endif
 15160  001830  0008               	tblrd		*
 15161  001832  CFF5 F035          	movff	tablat,drawChar@line
 15162  001836  D000               	goto	l8099
 15163  001838                     l8099:
 15164                           
 15165                           ;ST7735_TFT.c: 461: for(j=0; j<7; j++, line >>= 1) {
 15166  001838  0E00               	movlw	0
 15167  00183A  6E37               	movwf	drawChar@j,c
 15168  00183C                     l8101:
 15169  00183C  0E06               	movlw	6
 15170  00183E  6437               	cpfsgt	drawChar@j,c
 15171  001840  D001               	goto	l431
 15172  001842  D053               	goto	l8125
 15173  001844                     l431:
 15174                           
 15175                           ;ST7735_TFT.c: 462: if(line & 0x01) {
 15176  001844  A035               	btfss	drawChar@line,0,c
 15177  001846  D023               	goto	l8111
 15178                           
 15179                           ;ST7735_TFT.c: 463: if(size == 1) drawPixel(x+i, y+j, color);
 15180  001848  0434               	decf	drawChar@size,w,c
 15181  00184A  A4D8               	btfss	status,2,c
 15182  00184C  D00C               	goto	l8109
 15183  00184E  502E               	movf	drawChar@y,w,c
 15184  001850  2437               	addwf	drawChar@j,w,c
 15185  001852  6E18               	movwf	drawPixel@y,c
 15186  001854  C030  F019         	movff	drawChar@color,drawPixel@color
 15187  001858  C031  F01A         	movff	drawChar@color+1,drawPixel@color+1
 15188  00185C  5036               	movf	drawChar@x,w,c
 15189  00185E  2438               	addwf	drawChar@i,w,c
 15190  001860  EC85  F01C         	call	_drawPixel
 15191  001864  D03E               	goto	l8119
 15192  001866                     l8109:
 15193                           
 15194                           ;ST7735_TFT.c: 464: else fillRect(x+(i*size), y+(j*size), size, size, color);
 15195  001866  5037               	movf	drawChar@j,w,c
 15196  001868  0234               	mulwf	drawChar@size,c
 15197  00186A  50F3               	movf	prodl,w,c
 15198  00186C  242E               	addwf	drawChar@y,w,c
 15199  00186E  6E23               	movwf	fillRect@y,c
 15200  001870  C034  F024         	movff	drawChar@size,fillRect@w
 15201  001874  C034  F025         	movff	drawChar@size,fillRect@h
 15202  001878  C030  F026         	movff	drawChar@color,fillRect@color
 15203  00187C  C031  F027         	movff	drawChar@color+1,fillRect@color+1
 15204  001880  5038               	movf	drawChar@i,w,c
 15205  001882  0234               	mulwf	drawChar@size,c
 15206  001884  50F3               	movf	prodl,w,c
 15207  001886  2436               	addwf	drawChar@x,w,c
 15208  001888  ECD6  F01A         	call	_fillRect
 15209                           
 15210                           ;ST7735_TFT.c: 465: }
 15211  00188C  D02A               	goto	l8119
 15212  00188E                     l8111:
 15213                           
 15214                           ;ST7735_TFT.c: 466: else if(bg != color) {
 15215  00188E  5030               	movf	drawChar@color,w,c
 15216  001890  1832               	xorwf	drawChar@bg,w,c
 15217  001892  E104               	bnz	u5510
 15218  001894  5031               	movf	drawChar@color+1,w,c
 15219  001896  1833               	xorwf	drawChar@bg+1,w,c
 15220  001898  B4D8               	btfsc	status,2,c
 15221  00189A  D023               	goto	l8119
 15222  00189C                     u5510:
 15223                           
 15224                           ;ST7735_TFT.c: 467: if(size == 1) drawPixel(x+i, y+j, bg);
 15225  00189C  0434               	decf	drawChar@size,w,c
 15226  00189E  A4D8               	btfss	status,2,c
 15227  0018A0  D00C               	goto	l8117
 15228  0018A2  502E               	movf	drawChar@y,w,c
 15229  0018A4  2437               	addwf	drawChar@j,w,c
 15230  0018A6  6E18               	movwf	drawPixel@y,c
 15231  0018A8  C032  F019         	movff	drawChar@bg,drawPixel@color
 15232  0018AC  C033  F01A         	movff	drawChar@bg+1,drawPixel@color+1
 15233  0018B0  5036               	movf	drawChar@x,w,c
 15234  0018B2  2438               	addwf	drawChar@i,w,c
 15235  0018B4  EC85  F01C         	call	_drawPixel
 15236  0018B8  D014               	goto	l8119
 15237  0018BA                     l8117:
 15238                           
 15239                           ;ST7735_TFT.c: 468: else fillRect(x+i*size, y+j*size, size, size, bg);
 15240  0018BA  5037               	movf	drawChar@j,w,c
 15241  0018BC  0234               	mulwf	drawChar@size,c
 15242  0018BE  50F3               	movf	prodl,w,c
 15243  0018C0  242E               	addwf	drawChar@y,w,c
 15244  0018C2  6E23               	movwf	fillRect@y,c
 15245  0018C4  C034  F024         	movff	drawChar@size,fillRect@w
 15246  0018C8  C034  F025         	movff	drawChar@size,fillRect@h
 15247  0018CC  C032  F026         	movff	drawChar@bg,fillRect@color
 15248  0018D0  C033  F027         	movff	drawChar@bg+1,fillRect@color+1
 15249  0018D4  5038               	movf	drawChar@i,w,c
 15250  0018D6  0234               	mulwf	drawChar@size,c
 15251  0018D8  50F3               	movf	prodl,w,c
 15252  0018DA  2436               	addwf	drawChar@x,w,c
 15253  0018DC  ECD6  F01A         	call	_fillRect
 15254  0018E0  D000               	goto	l8119
 15255  0018E2                     l8119:
 15256  0018E2  2A37               	incf	drawChar@j,f,c
 15257  0018E4  90D8               	bcf	status,0,c
 15258  0018E6  3235               	rrcf	drawChar@line,f,c
 15259  0018E8  D7A9               	goto	l8101
 15260  0018EA                     l8125:
 15261  0018EA  2A38               	incf	drawChar@i,f,c
 15262  0018EC  D76F               	goto	l8089
 15263  0018EE                     l422:
 15264  0018EE  0012               	return		;funcret
 15265  0018F0                     __end_of_drawChar:
 15266                           	opt stack 0
 15267                           tblptru	equ	0xFF8
 15268                           tblptrh	equ	0xFF7
 15269                           tblptrl	equ	0xFF6
 15270                           tablat	equ	0xFF5
 15271                           prodh	equ	0xFF4
 15272                           prodl	equ	0xFF3
 15273                           intcon	equ	0xFF2
 15274                           intcon2	equ	0xFF1
 15275                           postinc0	equ	0xFEE
 15276                           wreg	equ	0xFE8
 15277                           postdec1	equ	0xFE5
 15278                           fsr1l	equ	0xFE1
 15279                           indf2	equ	0xFDF
 15280                           postinc2	equ	0xFDE
 15281                           postdec2	equ	0xFDD
 15282                           fsr2h	equ	0xFDA
 15283                           fsr2l	equ	0xFD9
 15284                           status	equ	0xFD8
 15285                           
 15286 ;; *************** function _fillRect *****************
 15287 ;; Defined at:
 15288 ;;		line 437 in file "ST7735_TFT.c"
 15289 ;; Parameters:    Size  Location     Type
 15290 ;;  x               1    wreg     unsigned char 
 15291 ;;  y               1   34[COMRAM] unsigned char 
 15292 ;;  w               1   35[COMRAM] unsigned char 
 15293 ;;  h               1   36[COMRAM] unsigned char 
 15294 ;;  color           2   37[COMRAM] unsigned int 
 15295 ;; Auto vars:     Size  Location     Type
 15296 ;;  x               1   42[COMRAM] unsigned char 
 15297 ;;  i               2   43[COMRAM] int 
 15298 ;; Return value:  Size  Location     Type
 15299 ;;		None               void
 15300 ;; Registers used:
 15301 ;;		wreg, status,2, status,0, cstack
 15302 ;; Tracked objects:
 15303 ;;		On entry : 0/0
 15304 ;;		On exit  : 0/0
 15305 ;;		Unchanged: 0/0
 15306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15307 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15308 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15309 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15310 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15311 ;;Total ram usage:       11 bytes
 15312 ;; Hardware stack levels used:    1
 15313 ;; Hardware stack levels required when called:    7
 15314 ;; This function calls:
 15315 ;;		_drawFastVLine
 15316 ;; This function is called by:
 15317 ;;		_drawChar
 15318 ;;		_Initialize_Setup_Time_Screen
 15319 ;;		_Update_Setup_Screen_Cursor_Forward
 15320 ;;		_Update_Setup_Screen_Cursor_Backward
 15321 ;;		_Initialize_Setup_Alarm_Time_Screen
 15322 ;; This function uses a non-reentrant model
 15323 ;;
 15324                           
 15325                           	psect	text82
 15326  0035AC                     __ptext82:
 15327                           	opt stack 0
 15328  0035AC                     _fillRect:
 15329                           	opt stack 20
 15330                           
 15331                           ;incstack = 0
 15332                           ;fillRect@x stored from wreg
 15333  0035AC  6E2B               	movwf	fillRect@x,c
 15334                           
 15335                           ;ST7735_TFT.c: 439: signed int i;
 15336                           ;ST7735_TFT.c: 441: for (i = x; i < x + w; i++)
 15337  0035AE  C02B  F02C         	movff	fillRect@x,fillRect@i
 15338  0035B2  6A2D               	clrf	fillRect@i+1,c
 15339  0035B4  D00E               	goto	l7901
 15340  0035B6                     l7897:
 15341                           
 15342                           ;ST7735_TFT.c: 442: {
 15343                           ;ST7735_TFT.c: 443: drawFastVLine(i, y, h, color);
 15344  0035B6  C023  F018         	movff	fillRect@y,drawFastVLine@y
 15345  0035BA  C025  F019         	movff	fillRect@h,drawFastVLine@h
 15346  0035BE  C026  F01A         	movff	fillRect@color,drawFastVLine@color
 15347  0035C2  C027  F01B         	movff	fillRect@color+1,drawFastVLine@color+1
 15348  0035C6  502C               	movf	fillRect@i,w,c
 15349  0035C8  ECB0  F016         	call	_drawFastVLine
 15350  0035CC  4A2C               	infsnz	fillRect@i,f,c
 15351  0035CE  2A2D               	incf	fillRect@i+1,f,c
 15352  0035D0  D000               	goto	l7901
 15353  0035D2                     l7901:
 15354  0035D2  5024               	movf	fillRect@w,w,c
 15355  0035D4  C02B  F028         	movff	fillRect@x,??_fillRect
 15356  0035D8  6A29               	clrf	(??_fillRect+1)& (0+255),c
 15357  0035DA  2628               	addwf	??_fillRect,f,c
 15358  0035DC  0E00               	movlw	0
 15359  0035DE  2229               	addwfc	??_fillRect+1,f,c
 15360  0035E0  5028               	movf	??_fillRect,w,c
 15361  0035E2  5C2C               	subwf	fillRect@i,w,c
 15362  0035E4  502D               	movf	fillRect@i+1,w,c
 15363  0035E6  0A80               	xorlw	128
 15364  0035E8  6E2A               	movwf	(??_fillRect+2)& (0+255),c
 15365  0035EA  5029               	movf	??_fillRect+1,w,c
 15366  0035EC  0A80               	xorlw	128
 15367  0035EE  582A               	subwfb	(??_fillRect+2)& (0+255),w,c
 15368  0035F0  A0D8               	btfss	status,0,c
 15369  0035F2  D7E1               	goto	l7897
 15370  0035F4  0012               	return		;funcret
 15371  0035F6                     __end_of_fillRect:
 15372                           	opt stack 0
 15373                           tblptru	equ	0xFF8
 15374                           tblptrh	equ	0xFF7
 15375                           tblptrl	equ	0xFF6
 15376                           tablat	equ	0xFF5
 15377                           prodh	equ	0xFF4
 15378                           prodl	equ	0xFF3
 15379                           intcon	equ	0xFF2
 15380                           intcon2	equ	0xFF1
 15381                           postinc0	equ	0xFEE
 15382                           wreg	equ	0xFE8
 15383                           postdec1	equ	0xFE5
 15384                           fsr1l	equ	0xFE1
 15385                           indf2	equ	0xFDF
 15386                           postinc2	equ	0xFDE
 15387                           postdec2	equ	0xFDD
 15388                           fsr2h	equ	0xFDA
 15389                           fsr2l	equ	0xFD9
 15390                           status	equ	0xFD8
 15391                           
 15392 ;; *************** function _drawFastVLine *****************
 15393 ;; Defined at:
 15394 ;;		line 416 in file "ST7735_TFT.c"
 15395 ;; Parameters:    Size  Location     Type
 15396 ;;  x               1    wreg     unsigned char 
 15397 ;;  y               1   23[COMRAM] unsigned char 
 15398 ;;  h               1   24[COMRAM] unsigned char 
 15399 ;;  color           2   25[COMRAM] unsigned int 
 15400 ;; Auto vars:     Size  Location     Type
 15401 ;;  x               1   33[COMRAM] unsigned char 
 15402 ;;  lo              1   32[COMRAM] unsigned char 
 15403 ;;  hi              1   31[COMRAM] unsigned char 
 15404 ;; Return value:  Size  Location     Type
 15405 ;;		None               void
 15406 ;; Registers used:
 15407 ;;		wreg, status,2, status,0, cstack
 15408 ;; Tracked objects:
 15409 ;;		On entry : 0/0
 15410 ;;		On exit  : 0/0
 15411 ;;		Unchanged: 0/0
 15412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15413 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15414 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15415 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15416 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15417 ;;Total ram usage:       11 bytes
 15418 ;; Hardware stack levels used:    1
 15419 ;; Hardware stack levels required when called:    6
 15420 ;; This function calls:
 15421 ;;		_setAddrWindow
 15422 ;;		_spiwrite
 15423 ;; This function is called by:
 15424 ;;		_fillRect
 15425 ;;		_fillCircleHelper
 15426 ;;		_fillCircle
 15427 ;;		_drawRect
 15428 ;; This function uses a non-reentrant model
 15429 ;;
 15430                           
 15431                           	psect	text83
 15432  002D60                     __ptext83:
 15433                           	opt stack 0
 15434  002D60                     _drawFastVLine:
 15435                           	opt stack 20
 15436                           
 15437                           ;incstack = 0
 15438                           ;drawFastVLine@x stored from wreg
 15439  002D60  6E22               	movwf	drawFastVLine@x,c
 15440                           
 15441                           ;ST7735_TFT.c: 418: unsigned char hi, lo;
 15442                           ;ST7735_TFT.c: 419: if((x >= 128) || (y >= 160))
 15443  002D62  0E80               	movlw	128
 15444  002D64  6022               	cpfslt	drawFastVLine@x,c
 15445  002D66  D03F               	goto	l406
 15446  002D68  0E9F               	movlw	159
 15447  002D6A  6418               	cpfsgt	drawFastVLine@y,c
 15448  002D6C  D001               	goto	l7835
 15449                           
 15450                           ;ST7735_TFT.c: 420: return;
 15451  002D6E  D03B               	goto	l406
 15452  002D70                     l7835:
 15453                           
 15454                           ;ST7735_TFT.c: 421: if((y + h - 1) >= 160)
 15455  002D70  0EFF               	movlw	255
 15456  002D72  6E1C               	movwf	??_drawFastVLine& (0+255),c
 15457  002D74  0EFF               	movlw	255
 15458  002D76  6E1D               	movwf	(??_drawFastVLine+1)& (0+255),c
 15459  002D78  5019               	movf	drawFastVLine@h,w,c
 15460  002D7A  C018  F01E         	movff	drawFastVLine@y,??_drawFastVLine+2
 15461  002D7E  6A1F               	clrf	(??_drawFastVLine+3)& (0+255),c
 15462  002D80  261E               	addwf	??_drawFastVLine+2,f,c
 15463  002D82  0E00               	movlw	0
 15464  002D84  221F               	addwfc	??_drawFastVLine+3,f,c
 15465  002D86  501C               	movf	??_drawFastVLine,w,c
 15466  002D88  261E               	addwf	??_drawFastVLine+2,f,c
 15467  002D8A  501D               	movf	??_drawFastVLine+1,w,c
 15468  002D8C  221F               	addwfc	??_drawFastVLine+3,f,c
 15469  002D8E  BE1F               	btfsc	??_drawFastVLine+3,7,c
 15470  002D90  D00B               	goto	l7839
 15471  002D92  501F               	movf	??_drawFastVLine+3,w,c
 15472  002D94  E104               	bnz	u5280
 15473  002D96  0EA0               	movlw	160
 15474  002D98  5C1E               	subwf	??_drawFastVLine+2,w,c
 15475  002D9A  A0D8               	btfss	status,0,c
 15476  002D9C  D005               	goto	l7839
 15477  002D9E                     u5280:
 15478                           
 15479                           ;ST7735_TFT.c: 422: h = 160 - y;
 15480  002D9E  5018               	movf	drawFastVLine@y,w,c
 15481  002DA0  0800               	sublw	0
 15482  002DA2  0FA0               	addlw	160
 15483  002DA4  6E19               	movwf	drawFastVLine@h,c
 15484  002DA6  D000               	goto	l7839
 15485  002DA8                     l7839:
 15486                           
 15487                           ;ST7735_TFT.c: 423: hi = color >> 8; lo = color;
 15488  002DA8  501B               	movf	drawFastVLine@color+1,w,c
 15489  002DAA  6E20               	movwf	drawFastVLine@hi,c
 15490  002DAC  C01A  F021         	movff	drawFastVLine@color,drawFastVLine@lo
 15491                           
 15492                           ;ST7735_TFT.c: 424: setAddrWindow(x, y, x, y + h - 1);
 15493  002DB0  C018  F014         	movff	drawFastVLine@y,setAddrWindow@y0
 15494  002DB4  C022  F015         	movff	drawFastVLine@x,setAddrWindow@x1
 15495  002DB8  5018               	movf	drawFastVLine@y,w,c
 15496  002DBA  2419               	addwf	drawFastVLine@h,w,c
 15497  002DBC  6E1C               	movwf	??_drawFastVLine& (0+255),c
 15498  002DBE  041C               	decf	??_drawFastVLine,w,c
 15499  002DC0  6E16               	movwf	setAddrWindow@y1,c
 15500  002DC2  5022               	movf	drawFastVLine@x,w,c
 15501  002DC4  EC63  F01A         	call	_setAddrWindow
 15502                           
 15503                           ;ST7735_TFT.c: 425: PORTDbits.RD0 = 1;
 15504  002DC8  8083               	bsf	3971,0,c	;volatile
 15505                           
 15506                           ;ST7735_TFT.c: 426: PORTDbits.RD1 = 0;
 15507  002DCA  9283               	bcf	3971,1,c	;volatile
 15508                           
 15509                           ;ST7735_TFT.c: 428: while (h--) {
 15510  002DCC  D007               	goto	l7851
 15511  002DCE                     l7849:
 15512                           
 15513                           ;ST7735_TFT.c: 429: spiwrite(hi);
 15514  002DCE  5020               	movf	drawFastVLine@hi,w,c
 15515  002DD0  EC05  F01E         	call	_spiwrite
 15516                           
 15517                           ;ST7735_TFT.c: 430: spiwrite(lo);
 15518  002DD4  5021               	movf	drawFastVLine@lo,w,c
 15519  002DD6  EC05  F01E         	call	_spiwrite
 15520  002DDA  D000               	goto	l7851
 15521  002DDC                     l7851:
 15522  002DDC  0619               	decf	drawFastVLine@h,f,c
 15523  002DDE  2819               	incf	drawFastVLine@h,w,c
 15524  002DE0  A4D8               	btfss	status,2,c
 15525  002DE2  D7F5               	goto	l7849
 15526                           
 15527                           ;ST7735_TFT.c: 431: }
 15528                           ;ST7735_TFT.c: 432: PORTDbits.RD1 = 1;
 15529  002DE4  8283               	bsf	3971,1,c	;volatile
 15530  002DE6                     l406:
 15531  002DE6  0012               	return		;funcret
 15532  002DE8                     __end_of_drawFastVLine:
 15533                           	opt stack 0
 15534                           tblptru	equ	0xFF8
 15535                           tblptrh	equ	0xFF7
 15536                           tblptrl	equ	0xFF6
 15537                           tablat	equ	0xFF5
 15538                           prodh	equ	0xFF4
 15539                           prodl	equ	0xFF3
 15540                           intcon	equ	0xFF2
 15541                           intcon2	equ	0xFF1
 15542                           postinc0	equ	0xFEE
 15543                           wreg	equ	0xFE8
 15544                           postdec1	equ	0xFE5
 15545                           fsr1l	equ	0xFE1
 15546                           indf2	equ	0xFDF
 15547                           postinc2	equ	0xFDE
 15548                           postdec2	equ	0xFDD
 15549                           fsr2h	equ	0xFDA
 15550                           fsr2l	equ	0xFD9
 15551                           status	equ	0xFD8
 15552                           
 15553 ;; *************** function _drawPixel *****************
 15554 ;; Defined at:
 15555 ;;		line 407 in file "ST7735_TFT.c"
 15556 ;; Parameters:    Size  Location     Type
 15557 ;;  x               1    wreg     unsigned char 
 15558 ;;  y               1   23[COMRAM] unsigned char 
 15559 ;;  color           2   24[COMRAM] unsigned int 
 15560 ;; Auto vars:     Size  Location     Type
 15561 ;;  x               1   26[COMRAM] unsigned char 
 15562 ;; Return value:  Size  Location     Type
 15563 ;;		None               void
 15564 ;; Registers used:
 15565 ;;		wreg, status,2, status,0, cstack
 15566 ;; Tracked objects:
 15567 ;;		On entry : 0/0
 15568 ;;		On exit  : 0/0
 15569 ;;		Unchanged: 0/0
 15570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15571 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15572 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15573 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15574 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15575 ;;Total ram usage:        4 bytes
 15576 ;; Hardware stack levels used:    1
 15577 ;; Hardware stack levels required when called:    6
 15578 ;; This function calls:
 15579 ;;		_setAddrWindow
 15580 ;;		_write_data
 15581 ;; This function is called by:
 15582 ;;		_drawChar
 15583 ;;		_drawCircle
 15584 ;;		_drawCircleHelper
 15585 ;; This function uses a non-reentrant model
 15586 ;;
 15587                           
 15588                           	psect	text84
 15589  00390A                     __ptext84:
 15590                           	opt stack 0
 15591  00390A                     _drawPixel:
 15592                           	opt stack 21
 15593                           
 15594                           ;incstack = 0
 15595                           ;drawPixel@x stored from wreg
 15596  00390A  6E1B               	movwf	drawPixel@x,c
 15597                           
 15598                           ;ST7735_TFT.c: 409: if((x >= 128) || (y >= 160))
 15599  00390C  0E80               	movlw	128
 15600  00390E  601B               	cpfslt	drawPixel@x,c
 15601  003910  D013               	goto	l400
 15602  003912  0E9F               	movlw	159
 15603  003914  6418               	cpfsgt	drawPixel@y,c
 15604  003916  D001               	goto	l7889
 15605                           
 15606                           ;ST7735_TFT.c: 410: return;
 15607  003918  D00F               	goto	l400
 15608  00391A                     l7889:
 15609                           
 15610                           ;ST7735_TFT.c: 411: setAddrWindow(x,y,x+1,y+1);
 15611  00391A  C018  F014         	movff	drawPixel@y,setAddrWindow@y0
 15612  00391E  281B               	incf	drawPixel@x,w,c
 15613  003920  6E15               	movwf	setAddrWindow@x1,c
 15614  003922  2818               	incf	drawPixel@y,w,c
 15615  003924  6E16               	movwf	setAddrWindow@y1,c
 15616  003926  501B               	movf	drawPixel@x,w,c
 15617  003928  EC63  F01A         	call	_setAddrWindow
 15618                           
 15619                           ;ST7735_TFT.c: 412: write_data(color >> 8);
 15620  00392C  501A               	movf	drawPixel@color+1,w,c
 15621  00392E  EC78  F01E         	call	_write_data
 15622                           
 15623                           ;ST7735_TFT.c: 413: write_data(color & 0xFF);
 15624  003932  5019               	movf	drawPixel@color,w,c
 15625  003934  EC78  F01E         	call	_write_data
 15626  003938                     l400:
 15627  003938  0012               	return		;funcret
 15628  00393A                     __end_of_drawPixel:
 15629                           	opt stack 0
 15630                           tblptru	equ	0xFF8
 15631                           tblptrh	equ	0xFF7
 15632                           tblptrl	equ	0xFF6
 15633                           tablat	equ	0xFF5
 15634                           prodh	equ	0xFF4
 15635                           prodl	equ	0xFF3
 15636                           intcon	equ	0xFF2
 15637                           intcon2	equ	0xFF1
 15638                           postinc0	equ	0xFEE
 15639                           wreg	equ	0xFE8
 15640                           postdec1	equ	0xFE5
 15641                           fsr1l	equ	0xFE1
 15642                           indf2	equ	0xFDF
 15643                           postinc2	equ	0xFDE
 15644                           postdec2	equ	0xFDD
 15645                           fsr2h	equ	0xFDA
 15646                           fsr2l	equ	0xFD9
 15647                           status	equ	0xFD8
 15648                           
 15649 ;; *************** function _setAddrWindow *****************
 15650 ;; Defined at:
 15651 ;;		line 392 in file "ST7735_TFT.c"
 15652 ;; Parameters:    Size  Location     Type
 15653 ;;  x0              1    wreg     unsigned char 
 15654 ;;  y0              1   19[COMRAM] unsigned char 
 15655 ;;  x1              1   20[COMRAM] unsigned char 
 15656 ;;  y1              1   21[COMRAM] unsigned char 
 15657 ;; Auto vars:     Size  Location     Type
 15658 ;;  x0              1   22[COMRAM] unsigned char 
 15659 ;; Return value:  Size  Location     Type
 15660 ;;		None               void
 15661 ;; Registers used:
 15662 ;;		wreg, status,2, status,0, cstack
 15663 ;; Tracked objects:
 15664 ;;		On entry : 0/0
 15665 ;;		On exit  : 0/0
 15666 ;;		Unchanged: 0/0
 15667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15668 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15669 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15670 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15671 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15672 ;;Total ram usage:        4 bytes
 15673 ;; Hardware stack levels used:    1
 15674 ;; Hardware stack levels required when called:    5
 15675 ;; This function calls:
 15676 ;;		_write_command
 15677 ;;		_write_data
 15678 ;; This function is called by:
 15679 ;;		_drawPixel
 15680 ;;		_drawFastVLine
 15681 ;;		_fillRectangle
 15682 ;;		_drawFastHLine
 15683 ;; This function uses a non-reentrant model
 15684 ;;
 15685                           
 15686                           	psect	text85
 15687  0034C6                     __ptext85:
 15688                           	opt stack 0
 15689  0034C6                     _setAddrWindow:
 15690                           	opt stack 20
 15691                           
 15692                           ;incstack = 0
 15693                           ;setAddrWindow@x0 stored from wreg
 15694  0034C6  6E17               	movwf	setAddrWindow@x0,c
 15695                           
 15696                           ;ST7735_TFT.c: 394: write_command(0x2A);
 15697  0034C8  0E2A               	movlw	42
 15698  0034CA  EC80  F01E         	call	_write_command
 15699                           
 15700                           ;ST7735_TFT.c: 395: write_data(0);
 15701  0034CE  0E00               	movlw	0
 15702  0034D0  EC78  F01E         	call	_write_data
 15703                           
 15704                           ;ST7735_TFT.c: 396: write_data(x0 + colstart);
 15705  0034D4  5017               	movf	setAddrWindow@x0,w,c
 15706  0034D6  245A               	addwf	_colstart,w,c
 15707  0034D8  EC78  F01E         	call	_write_data
 15708                           
 15709                           ;ST7735_TFT.c: 397: write_data(0);
 15710  0034DC  0E00               	movlw	0
 15711  0034DE  EC78  F01E         	call	_write_data
 15712                           
 15713                           ;ST7735_TFT.c: 398: write_data(x1 + colstart);
 15714  0034E2  5015               	movf	setAddrWindow@x1,w,c
 15715  0034E4  245A               	addwf	_colstart,w,c
 15716  0034E6  EC78  F01E         	call	_write_data
 15717                           
 15718                           ;ST7735_TFT.c: 399: write_command(0x2B);
 15719  0034EA  0E2B               	movlw	43
 15720  0034EC  EC80  F01E         	call	_write_command
 15721                           
 15722                           ;ST7735_TFT.c: 400: write_data(0);
 15723  0034F0  0E00               	movlw	0
 15724  0034F2  EC78  F01E         	call	_write_data
 15725                           
 15726                           ;ST7735_TFT.c: 401: write_data(y0 + rowstart);
 15727  0034F6  5014               	movf	setAddrWindow@y0,w,c
 15728  0034F8  2462               	addwf	_rowstart,w,c
 15729  0034FA  EC78  F01E         	call	_write_data
 15730                           
 15731                           ;ST7735_TFT.c: 402: write_data(0);
 15732  0034FE  0E00               	movlw	0
 15733  003500  EC78  F01E         	call	_write_data
 15734                           
 15735                           ;ST7735_TFT.c: 403: write_data(y1 + rowstart);
 15736  003504  5016               	movf	setAddrWindow@y1,w,c
 15737  003506  2462               	addwf	_rowstart,w,c
 15738  003508  EC78  F01E         	call	_write_data
 15739                           
 15740                           ;ST7735_TFT.c: 404: write_command(0x2C);
 15741  00350C  0E2C               	movlw	44
 15742  00350E  EC80  F01E         	call	_write_command
 15743  003512  0012               	return		;funcret
 15744  003514                     __end_of_setAddrWindow:
 15745                           	opt stack 0
 15746                           tblptru	equ	0xFF8
 15747                           tblptrh	equ	0xFF7
 15748                           tblptrl	equ	0xFF6
 15749                           tablat	equ	0xFF5
 15750                           prodh	equ	0xFF4
 15751                           prodl	equ	0xFF3
 15752                           intcon	equ	0xFF2
 15753                           intcon2	equ	0xFF1
 15754                           postinc0	equ	0xFEE
 15755                           wreg	equ	0xFE8
 15756                           postdec1	equ	0xFE5
 15757                           fsr1l	equ	0xFE1
 15758                           indf2	equ	0xFDF
 15759                           postinc2	equ	0xFDE
 15760                           postdec2	equ	0xFDD
 15761                           fsr2h	equ	0xFDA
 15762                           fsr2l	equ	0xFD9
 15763                           status	equ	0xFD8
 15764                           
 15765 ;; *************** function _write_data *****************
 15766 ;; Defined at:
 15767 ;;		line 209 in file "ST7735_TFT.c"
 15768 ;; Parameters:    Size  Location     Type
 15769 ;;  data_           1    wreg     unsigned char 
 15770 ;; Auto vars:     Size  Location     Type
 15771 ;;  data_           1   18[COMRAM] unsigned char 
 15772 ;; Return value:  Size  Location     Type
 15773 ;;		None               void
 15774 ;; Registers used:
 15775 ;;		wreg, status,2, cstack
 15776 ;; Tracked objects:
 15777 ;;		On entry : 0/0
 15778 ;;		On exit  : 0/0
 15779 ;;		Unchanged: 0/0
 15780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15781 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15782 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15783 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15784 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15785 ;;Total ram usage:        1 bytes
 15786 ;; Hardware stack levels used:    1
 15787 ;; Hardware stack levels required when called:    4
 15788 ;; This function calls:
 15789 ;;		_spiwrite
 15790 ;; This function is called by:
 15791 ;;		_Rcmd1
 15792 ;;		_Rcmd2red
 15793 ;;		_Rcmd3
 15794 ;;		_setAddrWindow
 15795 ;;		_drawPixel
 15796 ;;		_TFT_GreenTab_Initialize
 15797 ;;		_Bcmd
 15798 ;;		_setScrollDefinition
 15799 ;;		_Rcmd2green
 15800 ;;		_VerticalScroll
 15801 ;; This function uses a non-reentrant model
 15802 ;;
 15803                           
 15804                           	psect	text86
 15805  003CF0                     __ptext86:
 15806                           	opt stack 0
 15807  003CF0                     _write_data:
 15808                           	opt stack 20
 15809                           
 15810                           ;incstack = 0
 15811                           ;write_data@data_ stored from wreg
 15812  003CF0  6E13               	movwf	write_data@data_,c
 15813                           
 15814                           ;ST7735_TFT.c: 211: PORTDbits.RD1 = 0;
 15815  003CF2  9283               	bcf	3971,1,c	;volatile
 15816                           
 15817                           ;ST7735_TFT.c: 212: PORTDbits.RD0 = 1;
 15818  003CF4  8083               	bsf	3971,0,c	;volatile
 15819                           
 15820                           ;ST7735_TFT.c: 213: spiwrite(data_);
 15821  003CF6  5013               	movf	write_data@data_,w,c
 15822  003CF8  EC05  F01E         	call	_spiwrite
 15823                           
 15824                           ;ST7735_TFT.c: 214: PORTDbits.RD1 = 1;
 15825  003CFC  8283               	bsf	3971,1,c	;volatile
 15826  003CFE  0012               	return		;funcret
 15827  003D00                     __end_of_write_data:
 15828                           	opt stack 0
 15829                           tblptru	equ	0xFF8
 15830                           tblptrh	equ	0xFF7
 15831                           tblptrl	equ	0xFF6
 15832                           tablat	equ	0xFF5
 15833                           prodh	equ	0xFF4
 15834                           prodl	equ	0xFF3
 15835                           intcon	equ	0xFF2
 15836                           intcon2	equ	0xFF1
 15837                           postinc0	equ	0xFEE
 15838                           wreg	equ	0xFE8
 15839                           postdec1	equ	0xFE5
 15840                           fsr1l	equ	0xFE1
 15841                           indf2	equ	0xFDF
 15842                           postinc2	equ	0xFDE
 15843                           postdec2	equ	0xFDD
 15844                           fsr2h	equ	0xFDA
 15845                           fsr2l	equ	0xFD9
 15846                           status	equ	0xFD8
 15847                           
 15848 ;; *************** function _write_command *****************
 15849 ;; Defined at:
 15850 ;;		line 198 in file "ST7735_TFT.c"
 15851 ;; Parameters:    Size  Location     Type
 15852 ;;  cmd_            1    wreg     unsigned char 
 15853 ;; Auto vars:     Size  Location     Type
 15854 ;;  cmd_            1   18[COMRAM] unsigned char 
 15855 ;; Return value:  Size  Location     Type
 15856 ;;		None               void
 15857 ;; Registers used:
 15858 ;;		wreg, status,2, cstack
 15859 ;; Tracked objects:
 15860 ;;		On entry : 0/0
 15861 ;;		On exit  : 0/0
 15862 ;;		Unchanged: 0/0
 15863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15864 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15865 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15866 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15867 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15868 ;;Total ram usage:        1 bytes
 15869 ;; Hardware stack levels used:    1
 15870 ;; Hardware stack levels required when called:    4
 15871 ;; This function calls:
 15872 ;;		_spiwrite
 15873 ;; This function is called by:
 15874 ;;		_Rcmd1
 15875 ;;		_Rcmd2red
 15876 ;;		_Rcmd3
 15877 ;;		_setAddrWindow
 15878 ;;		_TFT_GreenTab_Initialize
 15879 ;;		_Bcmd
 15880 ;;		_setScrollDefinition
 15881 ;;		_Rcmd2green
 15882 ;;		_VerticalScroll
 15883 ;; This function uses a non-reentrant model
 15884 ;;
 15885                           
 15886                           	psect	text87
 15887  003D00                     __ptext87:
 15888                           	opt stack 0
 15889  003D00                     _write_command:
 15890                           	opt stack 20
 15891                           
 15892                           ;incstack = 0
 15893                           ;write_command@cmd_ stored from wreg
 15894  003D00  6E13               	movwf	write_command@cmd_,c
 15895                           
 15896                           ;ST7735_TFT.c: 200: PORTDbits.RD1 = 0;
 15897  003D02  9283               	bcf	3971,1,c	;volatile
 15898                           
 15899                           ;ST7735_TFT.c: 202: PORTDbits.RD0 = 0;
 15900  003D04  9083               	bcf	3971,0,c	;volatile
 15901                           
 15902                           ;ST7735_TFT.c: 203: spiwrite(cmd_);
 15903  003D06  5013               	movf	write_command@cmd_,w,c
 15904  003D08  EC05  F01E         	call	_spiwrite
 15905                           
 15906                           ;ST7735_TFT.c: 205: PORTDbits.RD1 = 1;
 15907  003D0C  8283               	bsf	3971,1,c	;volatile
 15908  003D0E  0012               	return		;funcret
 15909  003D10                     __end_of_write_command:
 15910                           	opt stack 0
 15911                           tblptru	equ	0xFF8
 15912                           tblptrh	equ	0xFF7
 15913                           tblptrl	equ	0xFF6
 15914                           tablat	equ	0xFF5
 15915                           prodh	equ	0xFF4
 15916                           prodl	equ	0xFF3
 15917                           intcon	equ	0xFF2
 15918                           intcon2	equ	0xFF1
 15919                           postinc0	equ	0xFEE
 15920                           wreg	equ	0xFE8
 15921                           postdec1	equ	0xFE5
 15922                           fsr1l	equ	0xFE1
 15923                           indf2	equ	0xFDF
 15924                           postinc2	equ	0xFDE
 15925                           postdec2	equ	0xFDD
 15926                           fsr2h	equ	0xFDA
 15927                           fsr2l	equ	0xFD9
 15928                           status	equ	0xFD8
 15929                           
 15930 ;; *************** function _spiwrite *****************
 15931 ;; Defined at:
 15932 ;;		line 189 in file "ST7735_TFT.c"
 15933 ;; Parameters:    Size  Location     Type
 15934 ;;  spidata         1    wreg     unsigned char 
 15935 ;; Auto vars:     Size  Location     Type
 15936 ;;  spidata         1   17[COMRAM] unsigned char 
 15937 ;;  x               1   16[COMRAM] unsigned char 
 15938 ;; Return value:  Size  Location     Type
 15939 ;;		None               void
 15940 ;; Registers used:
 15941 ;;		wreg
 15942 ;; Tracked objects:
 15943 ;;		On entry : 0/0
 15944 ;;		On exit  : 0/0
 15945 ;;		Unchanged: 0/0
 15946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15947 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15948 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15949 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15950 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15951 ;;Total ram usage:        2 bytes
 15952 ;; Hardware stack levels used:    1
 15953 ;; Hardware stack levels required when called:    3
 15954 ;; This function calls:
 15955 ;;		Nothing
 15956 ;; This function is called by:
 15957 ;;		_write_command
 15958 ;;		_write_data
 15959 ;;		_drawFastVLine
 15960 ;;		_fillRectangle
 15961 ;;		_drawFastHLine
 15962 ;; This function uses a non-reentrant model
 15963 ;;
 15964                           
 15965                           	psect	text88
 15966  003C0A                     __ptext88:
 15967                           	opt stack 0
 15968  003C0A                     _spiwrite:
 15969                           	opt stack 22
 15970                           
 15971                           ;incstack = 0
 15972                           ;spiwrite@spidata stored from wreg
 15973  003C0A  6E12               	movwf	spiwrite@spidata,c
 15974                           
 15975                           ;ST7735_TFT.c: 191: char x;
 15976                           ;ST7735_TFT.c: 192: PIR1bits.SSPIF = 0;
 15977  003C0C  969E               	bcf	3998,3,c	;volatile
 15978                           
 15979                           ;ST7735_TFT.c: 193: x = SSPBUF;
 15980  003C0E  CFC9 F011          	movff	4041,spiwrite@x	;volatile
 15981                           
 15982                           ;ST7735_TFT.c: 194: SSPBUF = spidata;
 15983  003C12  C012  FFC9         	movff	spiwrite@spidata,4041	;volatile
 15984                           
 15985                           ;ST7735_TFT.c: 195: while (!SSPSTATbits.BF);
 15986  003C16  D000               	goto	l356
 15987  003C18                     l356:
 15988  003C18  A0C7               	btfss	4039,0,c	;volatile
 15989  003C1A  D7FE               	goto	l356
 15990  003C1C  0012               	return		;funcret
 15991  003C1E                     __end_of_spiwrite:
 15992                           	opt stack 0
 15993                           tblptru	equ	0xFF8
 15994                           tblptrh	equ	0xFF7
 15995                           tblptrl	equ	0xFF6
 15996                           tablat	equ	0xFF5
 15997                           prodh	equ	0xFF4
 15998                           prodl	equ	0xFF3
 15999                           intcon	equ	0xFF2
 16000                           intcon2	equ	0xFF1
 16001                           postinc0	equ	0xFEE
 16002                           wreg	equ	0xFE8
 16003                           postdec1	equ	0xFE5
 16004                           fsr1l	equ	0xFE1
 16005                           indf2	equ	0xFDF
 16006                           postinc2	equ	0xFDE
 16007                           postdec2	equ	0xFDD
 16008                           fsr2h	equ	0xFDA
 16009                           fsr2l	equ	0xFD9
 16010                           status	equ	0xFD8
 16011                           
 16012 ;; *************** function ___wmul *****************
 16013 ;; Defined at:
 16014 ;;		line 15 in file "E:\XC8\sources\common\Umul16.c"
 16015 ;; Parameters:    Size  Location     Type
 16016 ;;  multiplier      2   16[COMRAM] unsigned int 
 16017 ;;  multiplicand    2   18[COMRAM] unsigned int 
 16018 ;; Auto vars:     Size  Location     Type
 16019 ;;  product         2   20[COMRAM] unsigned int 
 16020 ;; Return value:  Size  Location     Type
 16021 ;;                  2   16[COMRAM] unsigned int 
 16022 ;; Registers used:
 16023 ;;		wreg, status,2, status,0, prodl, prodh
 16024 ;; Tracked objects:
 16025 ;;		On entry : 0/0
 16026 ;;		On exit  : 0/0
 16027 ;;		Unchanged: 0/0
 16028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16029 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16030 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16031 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16032 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16033 ;;Total ram usage:        6 bytes
 16034 ;; Hardware stack levels used:    1
 16035 ;; Hardware stack levels required when called:    3
 16036 ;; This function calls:
 16037 ;;		Nothing
 16038 ;; This function is called by:
 16039 ;;		_get_RPM
 16040 ;;		_delay_ms
 16041 ;;		_drawChar
 16042 ;;		_read_volt
 16043 ;;		_main
 16044 ;;		_printf
 16045 ;; This function uses a non-reentrant model
 16046 ;;
 16047                           
 16048                           	psect	text89
 16049  00398E                     __ptext89:
 16050                           	opt stack 0
 16051  00398E                     ___wmul:
 16052                           	opt stack 26
 16053                           
 16054                           ;incstack = 0
 16055  00398E  5011               	movf	___wmul@multiplier,w,c
 16056  003990  0213               	mulwf	___wmul@multiplicand,c
 16057  003992  CFF3 F015          	movff	prodl,___wmul@product
 16058  003996  CFF4 F016          	movff	prodh,___wmul@product+1
 16059  00399A  5011               	movf	___wmul@multiplier,w,c
 16060  00399C  0214               	mulwf	___wmul@multiplicand+1,c
 16061  00399E  50F3               	movf	prodl,w,c
 16062  0039A0  2616               	addwf	___wmul@product+1,f,c
 16063  0039A2  5012               	movf	___wmul@multiplier+1,w,c
 16064  0039A4  0213               	mulwf	___wmul@multiplicand,c
 16065  0039A6  50F3               	movf	prodl,w,c
 16066  0039A8  2616               	addwf	___wmul@product+1,f,c
 16067  0039AA  C015  F011         	movff	___wmul@product,?___wmul
 16068  0039AE  C016  F012         	movff	___wmul@product+1,?___wmul+1
 16069  0039B2  D000               	goto	l1473
 16070  0039B4                     l1473:
 16071  0039B4  0012               	return		;funcret
 16072  0039B6                     __end_of___wmul:
 16073                           	opt stack 0
 16074                           tblptru	equ	0xFF8
 16075                           tblptrh	equ	0xFF7
 16076                           tblptrl	equ	0xFF6
 16077                           tablat	equ	0xFF5
 16078                           prodh	equ	0xFF4
 16079                           prodl	equ	0xFF3
 16080                           intcon	equ	0xFF2
 16081                           intcon2	equ	0xFF1
 16082                           postinc0	equ	0xFEE
 16083                           wreg	equ	0xFE8
 16084                           postdec1	equ	0xFE5
 16085                           fsr1l	equ	0xFE1
 16086                           indf2	equ	0xFDF
 16087                           postinc2	equ	0xFDE
 16088                           postdec2	equ	0xFDD
 16089                           fsr2h	equ	0xFDA
 16090                           fsr2l	equ	0xFD9
 16091                           status	equ	0xFD8
 16092                           
 16093 ;; *************** function ___awmod *****************
 16094 ;; Defined at:
 16095 ;;		line 8 in file "E:\XC8\sources\common\awmod.c"
 16096 ;; Parameters:    Size  Location     Type
 16097 ;;  dividend        2   58[COMRAM] int 
 16098 ;;  divisor         2   60[COMRAM] int 
 16099 ;; Auto vars:     Size  Location     Type
 16100 ;;  sign            1   63[COMRAM] unsigned char 
 16101 ;;  counter         1   62[COMRAM] unsigned char 
 16102 ;; Return value:  Size  Location     Type
 16103 ;;                  2   58[COMRAM] int 
 16104 ;; Registers used:
 16105 ;;		wreg, status,2, status,0
 16106 ;; Tracked objects:
 16107 ;;		On entry : 0/0
 16108 ;;		On exit  : 0/0
 16109 ;;		Unchanged: 0/0
 16110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16111 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16112 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16113 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16114 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16115 ;;Total ram usage:        6 bytes
 16116 ;; Hardware stack levels used:    1
 16117 ;; Hardware stack levels required when called:    3
 16118 ;; This function calls:
 16119 ;;		Nothing
 16120 ;; This function is called by:
 16121 ;;		_Update_Screen
 16122 ;;		_dec_2_bcd
 16123 ;;		_Update_Setup_Time_Screen
 16124 ;;		_Update_Setup_Heater_Screen
 16125 ;;		_Update_Setup_Alarm_Time_Screen
 16126 ;; This function uses a non-reentrant model
 16127 ;;
 16128                           
 16129                           	psect	text90
 16130  002E6C                     __ptext90:
 16131                           	opt stack 0
 16132  002E6C                     ___awmod:
 16133                           	opt stack 26
 16134                           
 16135                           ;incstack = 0
 16136  002E6C  0E00               	movlw	0
 16137  002E6E  6E40               	movwf	___awmod@sign,c
 16138  002E70  AE3C               	btfss	___awmod@dividend+1,7,c
 16139  002E72  D007               	goto	l8267
 16140  002E74  6C3B               	negf	___awmod@dividend,c
 16141  002E76  1E3C               	comf	___awmod@dividend+1,f,c
 16142  002E78  B0D8               	btfsc	status,0,c
 16143  002E7A  2A3C               	incf	___awmod@dividend+1,f,c
 16144  002E7C  0E01               	movlw	1
 16145  002E7E  6E40               	movwf	___awmod@sign,c
 16146  002E80  D000               	goto	l8267
 16147  002E82                     l8267:
 16148  002E82  AE3E               	btfss	___awmod@divisor+1,7,c
 16149  002E84  D005               	goto	l8271
 16150  002E86  6C3D               	negf	___awmod@divisor,c
 16151  002E88  1E3E               	comf	___awmod@divisor+1,f,c
 16152  002E8A  B0D8               	btfsc	status,0,c
 16153  002E8C  2A3E               	incf	___awmod@divisor+1,f,c
 16154  002E8E  D000               	goto	l8271
 16155  002E90                     l8271:
 16156  002E90  503D               	movf	___awmod@divisor,w,c
 16157  002E92  103E               	iorwf	___awmod@divisor+1,w,c
 16158  002E94  B4D8               	btfsc	status,2,c
 16159  002E96  D01D               	goto	l8287
 16160  002E98  0E01               	movlw	1
 16161  002E9A  6E3F               	movwf	___awmod@counter,c
 16162  002E9C  D005               	goto	l8277
 16163  002E9E                     l8275:
 16164  002E9E  90D8               	bcf	status,0,c
 16165  002EA0  363D               	rlcf	___awmod@divisor,f,c
 16166  002EA2  363E               	rlcf	___awmod@divisor+1,f,c
 16167  002EA4  2A3F               	incf	___awmod@counter,f,c
 16168  002EA6  D000               	goto	l8277
 16169  002EA8                     l8277:
 16170  002EA8  BE3E               	btfsc	___awmod@divisor+1,7,c
 16171  002EAA  D002               	goto	l8279
 16172  002EAC  D7F8               	goto	l8275
 16173  002EAE  D000               	goto	l8279
 16174  002EB0                     l8279:
 16175  002EB0  503D               	movf	___awmod@divisor,w,c
 16176  002EB2  5C3B               	subwf	___awmod@dividend,w,c
 16177  002EB4  503E               	movf	___awmod@divisor+1,w,c
 16178  002EB6  583C               	subwfb	___awmod@dividend+1,w,c
 16179  002EB8  A0D8               	btfss	status,0,c
 16180  002EBA  D005               	goto	l8283
 16181  002EBC  503D               	movf	___awmod@divisor,w,c
 16182  002EBE  5E3B               	subwf	___awmod@dividend,f,c
 16183  002EC0  503E               	movf	___awmod@divisor+1,w,c
 16184  002EC2  5A3C               	subwfb	___awmod@dividend+1,f,c
 16185  002EC4  D000               	goto	l8283
 16186  002EC6                     l8283:
 16187  002EC6  90D8               	bcf	status,0,c
 16188  002EC8  323E               	rrcf	___awmod@divisor+1,f,c
 16189  002ECA  323D               	rrcf	___awmod@divisor,f,c
 16190  002ECC  2E3F               	decfsz	___awmod@counter,f,c
 16191  002ECE  D7F0               	goto	l8279
 16192  002ED0  D000               	goto	l8287
 16193  002ED2                     l8287:
 16194  002ED2  5040               	movf	___awmod@sign,w,c
 16195  002ED4  B4D8               	btfsc	status,2,c
 16196  002ED6  D005               	goto	l8291
 16197  002ED8  6C3B               	negf	___awmod@dividend,c
 16198  002EDA  1E3C               	comf	___awmod@dividend+1,f,c
 16199  002EDC  B0D8               	btfsc	status,0,c
 16200  002EDE  2A3C               	incf	___awmod@dividend+1,f,c
 16201  002EE0  D000               	goto	l8291
 16202  002EE2                     l8291:
 16203  002EE2  C03B  F03B         	movff	___awmod@dividend,?___awmod
 16204  002EE6  C03C  F03C         	movff	___awmod@dividend+1,?___awmod+1
 16205  002EEA  D000               	goto	l1679
 16206  002EEC                     l1679:
 16207  002EEC  0012               	return		;funcret
 16208  002EEE                     __end_of___awmod:
 16209                           	opt stack 0
 16210                           tblptru	equ	0xFF8
 16211                           tblptrh	equ	0xFF7
 16212                           tblptrl	equ	0xFF6
 16213                           tablat	equ	0xFF5
 16214                           prodh	equ	0xFF4
 16215                           prodl	equ	0xFF3
 16216                           intcon	equ	0xFF2
 16217                           intcon2	equ	0xFF1
 16218                           postinc0	equ	0xFEE
 16219                           wreg	equ	0xFE8
 16220                           postdec1	equ	0xFE5
 16221                           fsr1l	equ	0xFE1
 16222                           indf2	equ	0xFDF
 16223                           postinc2	equ	0xFDE
 16224                           postdec2	equ	0xFDD
 16225                           fsr2h	equ	0xFDA
 16226                           fsr2l	equ	0xFD9
 16227                           status	equ	0xFD8
 16228                           
 16229 ;; *************** function ___awdiv *****************
 16230 ;; Defined at:
 16231 ;;		line 8 in file "E:\XC8\sources\common\awdiv.c"
 16232 ;; Parameters:    Size  Location     Type
 16233 ;;  dividend        2    0[BANK1 ] int 
 16234 ;;  divisor         2    2[BANK1 ] int 
 16235 ;; Auto vars:     Size  Location     Type
 16236 ;;  quotient        2    6[BANK1 ] int 
 16237 ;;  sign            1    5[BANK1 ] unsigned char 
 16238 ;;  counter         1    4[BANK1 ] unsigned char 
 16239 ;; Return value:  Size  Location     Type
 16240 ;;                  2    0[BANK1 ] int 
 16241 ;; Registers used:
 16242 ;;		wreg, status,2, status,0
 16243 ;; Tracked objects:
 16244 ;;		On entry : 0/0
 16245 ;;		On exit  : 0/0
 16246 ;;		Unchanged: 0/0
 16247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16248 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16249 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16250 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16251 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16252 ;;Total ram usage:        8 bytes
 16253 ;; Hardware stack levels used:    1
 16254 ;; Hardware stack levels required when called:    3
 16255 ;; This function calls:
 16256 ;;		Nothing
 16257 ;; This function is called by:
 16258 ;;		_get_RPM
 16259 ;;		_Update_Screen
 16260 ;;		_dec_2_bcd
 16261 ;;		_main
 16262 ;;		_Update_Setup_Time_Screen
 16263 ;;		_Update_Setup_Heater_Screen
 16264 ;;		_Update_Setup_Alarm_Time_Screen
 16265 ;; This function uses a non-reentrant model
 16266 ;;
 16267                           
 16268                           	psect	text91
 16269  0024BC                     __ptext91:
 16270                           	opt stack 0
 16271  0024BC                     ___awdiv:
 16272                           	opt stack 26
 16273                           
 16274                           ;incstack = 0
 16275  0024BC  0E00               	movlw	0
 16276  0024BE  0101               	movlb	1	; () banked
 16277  0024C0  6F41               	movwf	___awdiv@sign& (0+255),b
 16278                           
 16279                           ; BSR set to: 1
 16280  0024C2  0101               	movlb	1	; () banked
 16281  0024C4  AF3F               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 16282  0024C6  D009               	goto	l8223
 16283                           
 16284                           ; BSR set to: 1
 16285  0024C8  0101               	movlb	1	; () banked
 16286  0024CA  6D3E               	negf	___awdiv@divisor& (0+255),b
 16287  0024CC  1F3F               	comf	(___awdiv@divisor+1)& (0+255),f,b
 16288  0024CE  B0D8               	btfsc	status,0,c
 16289  0024D0  2B3F               	incf	(___awdiv@divisor+1)& (0+255),f,b
 16290                           
 16291                           ; BSR set to: 1
 16292  0024D2  0E01               	movlw	1
 16293  0024D4  0101               	movlb	1	; () banked
 16294  0024D6  6F41               	movwf	___awdiv@sign& (0+255),b
 16295  0024D8  D000               	goto	l8223
 16296  0024DA                     l8223:
 16297                           
 16298                           ; BSR set to: 1
 16299  0024DA  0101               	movlb	1	; () banked
 16300  0024DC  AF3D               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 16301  0024DE  D009               	goto	l8229
 16302                           
 16303                           ; BSR set to: 1
 16304  0024E0  0101               	movlb	1	; () banked
 16305  0024E2  6D3C               	negf	___awdiv@dividend& (0+255),b
 16306  0024E4  1F3D               	comf	(___awdiv@dividend+1)& (0+255),f,b
 16307  0024E6  B0D8               	btfsc	status,0,c
 16308  0024E8  2B3D               	incf	(___awdiv@dividend+1)& (0+255),f,b
 16309                           
 16310                           ; BSR set to: 1
 16311  0024EA  0E01               	movlw	1
 16312  0024EC  0101               	movlb	1	; () banked
 16313  0024EE  1B41               	xorwf	___awdiv@sign& (0+255),f,b
 16314  0024F0  D000               	goto	l8229
 16315  0024F2                     l8229:
 16316                           
 16317                           ; BSR set to: 1
 16318  0024F2  0E00               	movlw	0
 16319  0024F4  0101               	movlb	1	; () banked
 16320  0024F6  6F43               	movwf	(___awdiv@quotient+1)& (0+255),b
 16321  0024F8  0E00               	movlw	0
 16322  0024FA  6F42               	movwf	___awdiv@quotient& (0+255),b
 16323                           
 16324                           ; BSR set to: 1
 16325  0024FC  0101               	movlb	1	; () banked
 16326  0024FE  513E               	movf	___awdiv@divisor& (0+255),w,b
 16327  002500  0101               	movlb	1	; () banked
 16328  002502  113F               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 16329  002504  B4D8               	btfsc	status,2,c
 16330  002506  D031               	goto	l8251
 16331                           
 16332                           ; BSR set to: 1
 16333  002508  0E01               	movlw	1
 16334  00250A  0101               	movlb	1	; () banked
 16335  00250C  6F40               	movwf	___awdiv@counter& (0+255),b
 16336  00250E  D007               	goto	l8237
 16337  002510                     l8235:
 16338                           
 16339                           ; BSR set to: 1
 16340  002510  0101               	movlb	1	; () banked
 16341  002512  90D8               	bcf	status,0,c
 16342  002514  373E               	rlcf	___awdiv@divisor& (0+255),f,b
 16343  002516  373F               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 16344  002518  0101               	movlb	1	; () banked
 16345  00251A  2B40               	incf	___awdiv@counter& (0+255),f,b
 16346  00251C  D000               	goto	l8237
 16347  00251E                     l8237:
 16348                           
 16349                           ; BSR set to: 1
 16350  00251E  0101               	movlb	1	; () banked
 16351  002520  BF3F               	btfsc	(___awdiv@divisor+1)& (0+255),7,b
 16352  002522  D002               	goto	l8239
 16353  002524  D7F5               	goto	l8235
 16354                           
 16355                           ; BSR set to: 1
 16356  002526  D000               	goto	l8239
 16357  002528                     l8239:
 16358                           
 16359                           ; BSR set to: 1
 16360  002528  0101               	movlb	1	; () banked
 16361  00252A  90D8               	bcf	status,0,c
 16362  00252C  3742               	rlcf	___awdiv@quotient& (0+255),f,b
 16363  00252E  3743               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 16364                           
 16365                           ; BSR set to: 1
 16366  002530  0101               	movlb	1	; () banked
 16367  002532  513E               	movf	___awdiv@divisor& (0+255),w,b
 16368  002534  0101               	movlb	1	; () banked
 16369  002536  5D3C               	subwf	___awdiv@dividend& (0+255),w,b
 16370  002538  0101               	movlb	1	; () banked
 16371  00253A  513F               	movf	(___awdiv@divisor+1)& (0+255),w,b
 16372  00253C  0101               	movlb	1	; () banked
 16373  00253E  593D               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 16374  002540  A0D8               	btfss	status,0,c
 16375  002542  D00B               	goto	l8247
 16376                           
 16377                           ; BSR set to: 1
 16378  002544  0101               	movlb	1	; () banked
 16379  002546  513E               	movf	___awdiv@divisor& (0+255),w,b
 16380  002548  0101               	movlb	1	; () banked
 16381  00254A  5F3C               	subwf	___awdiv@dividend& (0+255),f,b
 16382  00254C  0101               	movlb	1	; () banked
 16383  00254E  513F               	movf	(___awdiv@divisor+1)& (0+255),w,b
 16384  002550  0101               	movlb	1	; () banked
 16385  002552  5B3D               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 16386                           
 16387                           ; BSR set to: 1
 16388  002554  0101               	movlb	1	; () banked
 16389  002556  8142               	bsf	___awdiv@quotient& (0+255),0,b
 16390  002558  D000               	goto	l8247
 16391  00255A                     l8247:
 16392                           
 16393                           ; BSR set to: 1
 16394  00255A  0101               	movlb	1	; () banked
 16395  00255C  90D8               	bcf	status,0,c
 16396  00255E  333F               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 16397  002560  333E               	rrcf	___awdiv@divisor& (0+255),f,b
 16398                           
 16399                           ; BSR set to: 1
 16400  002562  0101               	movlb	1	; () banked
 16401  002564  2F40               	decfsz	___awdiv@counter& (0+255),f,b
 16402  002566  D7E0               	goto	l8239
 16403                           
 16404                           ; BSR set to: 1
 16405  002568  D000               	goto	l8251
 16406  00256A                     l8251:
 16407                           
 16408                           ; BSR set to: 1
 16409  00256A  0101               	movlb	1	; () banked
 16410  00256C  5141               	movf	___awdiv@sign& (0+255),w,b
 16411  00256E  0101               	movlb	1	; () banked
 16412  002570  B4D8               	btfsc	status,2,c
 16413  002572  D006               	goto	l8255
 16414                           
 16415                           ; BSR set to: 1
 16416  002574  0101               	movlb	1	; () banked
 16417  002576  6D42               	negf	___awdiv@quotient& (0+255),b
 16418  002578  1F43               	comf	(___awdiv@quotient+1)& (0+255),f,b
 16419  00257A  B0D8               	btfsc	status,0,c
 16420  00257C  2B43               	incf	(___awdiv@quotient+1)& (0+255),f,b
 16421  00257E  D000               	goto	l8255
 16422  002580                     l8255:
 16423                           
 16424                           ; BSR set to: 1
 16425  002580  C142  F13C         	movff	___awdiv@quotient,?___awdiv
 16426  002584  C143  F13D         	movff	___awdiv@quotient+1,?___awdiv+1
 16427  002588  D000               	goto	l1666
 16428  00258A                     l1666:
 16429                           
 16430                           ; BSR set to: 1
 16431  00258A  0012               	return		;funcret
 16432  00258C                     __end_of___awdiv:
 16433                           	opt stack 0
 16434                           tblptru	equ	0xFF8
 16435                           tblptrh	equ	0xFF7
 16436                           tblptrl	equ	0xFF6
 16437                           tablat	equ	0xFF5
 16438                           prodh	equ	0xFF4
 16439                           prodl	equ	0xFF3
 16440                           intcon	equ	0xFF2
 16441                           intcon2	equ	0xFF1
 16442                           postinc0	equ	0xFEE
 16443                           wreg	equ	0xFE8
 16444                           postdec1	equ	0xFE5
 16445                           fsr1l	equ	0xFE1
 16446                           indf2	equ	0xFDF
 16447                           postinc2	equ	0xFDE
 16448                           postdec2	equ	0xFDD
 16449                           fsr2h	equ	0xFDA
 16450                           fsr2l	equ	0xFD9
 16451                           status	equ	0xFD8
 16452                           
 16453 ;; *************** function _Do_Init *****************
 16454 ;; Defined at:
 16455 ;;		line 102 in file "LabFinal.c"
 16456 ;; Parameters:    Size  Location     Type
 16457 ;;		None
 16458 ;; Auto vars:     Size  Location     Type
 16459 ;;		None
 16460 ;; Return value:  Size  Location     Type
 16461 ;;		None               void
 16462 ;; Registers used:
 16463 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16464 ;; Tracked objects:
 16465 ;;		On entry : 0/0
 16466 ;;		On exit  : 0/0
 16467 ;;		Unchanged: 0/0
 16468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16469 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16470 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16472 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16473 ;;Total ram usage:        0 bytes
 16474 ;; Hardware stack levels used:    1
 16475 ;; Hardware stack levels required when called:    7
 16476 ;; This function calls:
 16477 ;;		_DS1621_Init
 16478 ;;		_I2C_Init
 16479 ;;		_Init_ADC
 16480 ;;		_Init_Interrupt
 16481 ;;		_Set_RGB_Color
 16482 ;;		_Turn_Off_Fan
 16483 ;;		_init_UART
 16484 ;; This function is called by:
 16485 ;;		_main
 16486 ;; This function uses a non-reentrant model
 16487 ;;
 16488                           
 16489                           	psect	text92
 16490  002FE0                     __ptext92:
 16491                           	opt stack 0
 16492  002FE0                     _Do_Init:
 16493                           	opt stack 23
 16494                           
 16495                           ;LabFinal.c: 104: init_UART();
 16496                           
 16497                           ; BSR set to: 1
 16498                           ;incstack = 0
 16499  002FE0  EC0F  F01E         	call	_init_UART	;wreg free
 16500                           
 16501                           ;LabFinal.c: 105: Init_ADC();
 16502  002FE4  EC8F  F01E         	call	_Init_ADC	;wreg free
 16503                           
 16504                           ;LabFinal.c: 106: OSCCON=0x70;
 16505  002FE8  0E70               	movlw	112
 16506  002FEA  6ED3               	movwf	4051,c	;volatile
 16507                           
 16508                           ;LabFinal.c: 108: ADCON1=0x0E;
 16509  002FEC  0E0E               	movlw	14
 16510  002FEE  6EC1               	movwf	4033,c	;volatile
 16511                           
 16512                           ;LabFinal.c: 109: TRISA = 0x01;
 16513  002FF0  0E01               	movlw	1
 16514  002FF2  6E92               	movwf	3986,c	;volatile
 16515                           
 16516                           ;LabFinal.c: 110: TRISB = 0x07;
 16517  002FF4  0E07               	movlw	7
 16518  002FF6  6E93               	movwf	3987,c	;volatile
 16519                           
 16520                           ;LabFinal.c: 112: TRISC = 0x03;
 16521  002FF8  0E03               	movlw	3
 16522  002FFA  6E94               	movwf	3988,c	;volatile
 16523                           
 16524                           ;LabFinal.c: 114: TRISD = 0x00;
 16525  002FFC  0E00               	movlw	0
 16526  002FFE  6E95               	movwf	3989,c	;volatile
 16527                           
 16528                           ;LabFinal.c: 115: TRISE = 0x00;
 16529  003000  0E00               	movlw	0
 16530  003002  6E96               	movwf	3990,c	;volatile
 16531                           
 16532                           ;LabFinal.c: 116: PORTE = 0x00;
 16533  003004  0E00               	movlw	0
 16534  003006  6E84               	movwf	3972,c	;volatile
 16535                           
 16536                           ;LabFinal.c: 118: HEATER = 0;
 16537  003008  0E00               	movlw	0
 16538  00300A  6E50               	movwf	_HEATER,c
 16539                           
 16540                           ;LabFinal.c: 119: RBPU=0;
 16541  00300C  9EF1               	bcf	intcon2,7,c	;volatile
 16542                           
 16543                           ;LabFinal.c: 121: TMR3L = 0x00;
 16544  00300E  0E00               	movlw	0
 16545  003010  6EB2               	movwf	4018,c	;volatile
 16546                           
 16547                           ;LabFinal.c: 122: T3CON = 0x03;
 16548  003012  0E03               	movlw	3
 16549  003014  6EB1               	movwf	4017,c	;volatile
 16550                           
 16551                           ;LabFinal.c: 123: I2C_Init(100000);
 16552  003016  0EA0               	movlw	160
 16553  003018  6E11               	movwf	I2C_Init@c,c
 16554  00301A  0E86               	movlw	134
 16555  00301C  6E12               	movwf	I2C_Init@c+1,c
 16556  00301E  0E01               	movlw	1
 16557  003020  6E13               	movwf	I2C_Init@c+2,c
 16558  003022  0E00               	movlw	0
 16559  003024  6E14               	movwf	I2C_Init@c+3,c
 16560  003026  ECA8  F01E         	call	_I2C_Init	;wreg free
 16561                           
 16562                           ;LabFinal.c: 125: DS1621_Init();
 16563  00302A  EC54  F01D         	call	_DS1621_Init	;wreg free
 16564                           
 16565                           ;LabFinal.c: 126: Init_Interrupt();
 16566  00302E  EC64  F01B         	call	_Init_Interrupt	;wreg free
 16567                           
 16568                           ;LabFinal.c: 127: Turn_Off_Fan();
 16569  003032  EC96  F01E         	call	_Turn_Off_Fan	;wreg free
 16570                           
 16571                           ;LabFinal.c: 128: heater_set_temp = 75;
 16572  003036  0E4B               	movlw	75
 16573  003038  6E6F               	movwf	_heater_set_temp,c
 16574                           
 16575                           ;LabFinal.c: 129: FAN = 0;
 16576  00303A  0E00               	movlw	0
 16577  00303C  0100               	movlb	0	; () banked
 16578  00303E  6FF6               	movwf	_FAN& (0+255),b
 16579                           
 16580                           ; BSR set to: 0
 16581                           ;LabFinal.c: 130: ALARMEN=0;
 16582  003040  0E00               	movlw	0
 16583  003042  6E45               	movwf	_ALARMEN+1,c
 16584  003044  0E00               	movlw	0
 16585  003046  6E44               	movwf	_ALARMEN,c
 16586                           
 16587                           ; BSR set to: 0
 16588                           ;LabFinal.c: 132: Set_RGB_Color(0);
 16589  003048  0E00               	movlw	0
 16590  00304A  EC01  F01D         	call	_Set_RGB_Color
 16591  00304E  0012               	return		;funcret
 16592  003050                     __end_of_Do_Init:
 16593                           	opt stack 0
 16594                           tblptru	equ	0xFF8
 16595                           tblptrh	equ	0xFF7
 16596                           tblptrl	equ	0xFF6
 16597                           tablat	equ	0xFF5
 16598                           prodh	equ	0xFF4
 16599                           prodl	equ	0xFF3
 16600                           intcon	equ	0xFF2
 16601                           intcon2	equ	0xFF1
 16602                           postinc0	equ	0xFEE
 16603                           wreg	equ	0xFE8
 16604                           postdec1	equ	0xFE5
 16605                           fsr1l	equ	0xFE1
 16606                           indf2	equ	0xFDF
 16607                           postinc2	equ	0xFDE
 16608                           postdec2	equ	0xFDD
 16609                           fsr2h	equ	0xFDA
 16610                           fsr2l	equ	0xFD9
 16611                           status	equ	0xFD8
 16612                           
 16613 ;; *************** function _init_UART *****************
 16614 ;; Defined at:
 16615 ;;		line 94 in file "LabFinal.c"
 16616 ;; Parameters:    Size  Location     Type
 16617 ;;		None
 16618 ;; Auto vars:     Size  Location     Type
 16619 ;;		None
 16620 ;; Return value:  Size  Location     Type
 16621 ;;		None               void
 16622 ;; Registers used:
 16623 ;;		wreg, status,2, cstack
 16624 ;; Tracked objects:
 16625 ;;		On entry : 0/0
 16626 ;;		On exit  : 0/0
 16627 ;;		Unchanged: 0/0
 16628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16629 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16630 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16631 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16632 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16633 ;;Total ram usage:        0 bytes
 16634 ;; Hardware stack levels used:    1
 16635 ;; Hardware stack levels required when called:    4
 16636 ;; This function calls:
 16637 ;;		_OpenUSART
 16638 ;; This function is called by:
 16639 ;;		_Do_Init
 16640 ;; This function uses a non-reentrant model
 16641 ;;
 16642                           
 16643                           	psect	text93
 16644  003C1E                     __ptext93:
 16645                           	opt stack 0
 16646  003C1E                     _init_UART:
 16647                           	opt stack 25
 16648                           
 16649                           ;LabFinal.c: 96: OpenUSART (0b01111111 & 0b10111111 & 0b11111110 & 0b11111101 & 0b111111
      +                          11 & 0b11111111, 25);
 16650                           
 16651                           ;incstack = 0
 16652  003C1E  0E00               	movlw	0
 16653  003C20  6E12               	movwf	OpenUSART@spbrg+1,c
 16654  003C22  0E19               	movlw	25
 16655  003C24  6E11               	movwf	OpenUSART@spbrg,c
 16656  003C26  0E3C               	movlw	60
 16657  003C28  EC28  F018         	call	_OpenUSART
 16658                           
 16659                           ;LabFinal.c: 97: OSCCON = 0x70;
 16660  003C2C  0E70               	movlw	112
 16661  003C2E  6ED3               	movwf	4051,c	;volatile
 16662  003C30  0012               	return		;funcret
 16663  003C32                     __end_of_init_UART:
 16664                           	opt stack 0
 16665                           tblptru	equ	0xFF8
 16666                           tblptrh	equ	0xFF7
 16667                           tblptrl	equ	0xFF6
 16668                           tablat	equ	0xFF5
 16669                           prodh	equ	0xFF4
 16670                           prodl	equ	0xFF3
 16671                           intcon	equ	0xFF2
 16672                           intcon2	equ	0xFF1
 16673                           postinc0	equ	0xFEE
 16674                           wreg	equ	0xFE8
 16675                           postdec1	equ	0xFE5
 16676                           fsr1l	equ	0xFE1
 16677                           indf2	equ	0xFDF
 16678                           postinc2	equ	0xFDE
 16679                           postdec2	equ	0xFDD
 16680                           fsr2h	equ	0xFDA
 16681                           fsr2l	equ	0xFD9
 16682                           status	equ	0xFD8
 16683                           
 16684 ;; *************** function _OpenUSART *****************
 16685 ;; Defined at:
 16686 ;;		line 73 in file "E:\XC8\sources\pic18\plib\USART\uopen.c"
 16687 ;; Parameters:    Size  Location     Type
 16688 ;;  config          1    wreg     unsigned char 
 16689 ;;  spbrg           2   16[COMRAM] unsigned int 
 16690 ;; Auto vars:     Size  Location     Type
 16691 ;;  config          1   18[COMRAM] unsigned char 
 16692 ;; Return value:  Size  Location     Type
 16693 ;;		None               void
 16694 ;; Registers used:
 16695 ;;		wreg, status,2
 16696 ;; Tracked objects:
 16697 ;;		On entry : 0/0
 16698 ;;		On exit  : 0/0
 16699 ;;		Unchanged: 0/0
 16700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16701 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16702 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16703 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16704 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16705 ;;Total ram usage:        3 bytes
 16706 ;; Hardware stack levels used:    1
 16707 ;; Hardware stack levels required when called:    3
 16708 ;; This function calls:
 16709 ;;		Nothing
 16710 ;; This function is called by:
 16711 ;;		_init_UART
 16712 ;; This function uses a non-reentrant model
 16713 ;;
 16714                           
 16715                           	psect	text94
 16716  003050                     __ptext94:
 16717                           	opt stack 0
 16718  003050                     _OpenUSART:
 16719                           	opt stack 25
 16720                           
 16721                           ;incstack = 0
 16722                           ;OpenUSART@config stored from wreg
 16723  003050  6E13               	movwf	OpenUSART@config,c
 16724  003052  0E00               	movlw	0
 16725  003054  6EAC               	movwf	4012,c	;volatile
 16726  003056  0E00               	movlw	0
 16727  003058  6EAB               	movwf	4011,c	;volatile
 16728  00305A  A013               	btfss	OpenUSART@config,0,c
 16729  00305C  D002               	goto	l6199
 16730  00305E  88AC               	bsf	4012,4,c	;volatile
 16731  003060  D000               	goto	l6199
 16732  003062                     l6199:
 16733  003062  A213               	btfss	OpenUSART@config,1,c
 16734  003064  D003               	goto	l6203
 16735  003066  8CAC               	bsf	4012,6,c	;volatile
 16736  003068  8CAB               	bsf	4011,6,c	;volatile
 16737  00306A  D000               	goto	l6203
 16738  00306C                     l6203:
 16739  00306C  A413               	btfss	OpenUSART@config,2,c
 16740  00306E  D002               	goto	l6207
 16741  003070  8EAC               	bsf	4012,7,c	;volatile
 16742  003072  D000               	goto	l6207
 16743  003074                     l6207:
 16744  003074  A613               	btfss	OpenUSART@config,3,c
 16745  003076  D002               	goto	l1461
 16746  003078  88AB               	bsf	4011,4,c	;volatile
 16747  00307A  D002               	goto	l6211
 16748  00307C                     l1461:
 16749  00307C  8AAB               	bsf	4011,5,c	;volatile
 16750  00307E  D000               	goto	l6211
 16751  003080                     l6211:
 16752  003080  B813               	btfsc	OpenUSART@config,4,c
 16753  003082  84AC               	bsf	4012,2,c	;volatile
 16754  003084  989E               	bcf	3998,4,c	;volatile
 16755  003086  AA13               	btfss	OpenUSART@config,5,c
 16756  003088  D002               	goto	l6219
 16757  00308A  86AB               	bsf	4011,3,c	;volatile
 16758  00308C  D000               	goto	l6219
 16759  00308E                     l6219:
 16760  00308E  AC13               	btfss	OpenUSART@config,6,c
 16761  003090  D002               	goto	l1465
 16762  003092  8A9D               	bsf	3997,5,c	;volatile
 16763  003094  D001               	goto	l1466
 16764  003096                     l1465:
 16765  003096  9A9D               	bcf	3997,5,c	;volatile
 16766  003098                     l1466:
 16767  003098  9A9E               	bcf	3998,5,c	;volatile
 16768  00309A  AE13               	btfss	OpenUSART@config,7,c
 16769  00309C  D002               	goto	l1467
 16770  00309E  889D               	bsf	3997,4,c	;volatile
 16771  0030A0  D001               	goto	l1468
 16772  0030A2                     l1467:
 16773  0030A2  989D               	bcf	3997,4,c	;volatile
 16774  0030A4                     l1468:
 16775  0030A4  C011  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
 16776  0030A8  5012               	movf	OpenUSART@spbrg+1,w,c
 16777  0030AA  6EB0               	movwf	4016,c	;volatile
 16778  0030AC  8AAC               	bsf	4012,5,c	;volatile
 16779  0030AE  8EAB               	bsf	4011,7,c	;volatile
 16780  0030B0  9C94               	bcf	3988,6,c	;volatile
 16781  0030B2  8E94               	bsf	3988,7,c	;volatile
 16782  0030B4  B8AC               	btfsc	4012,4,c	;volatile
 16783  0030B6  BEAC               	btfsc	4012,7,c	;volatile
 16784  0030B8  D002               	goto	l1470
 16785  0030BA  8C94               	bsf	3988,6,c	;volatile
 16786  0030BC  D000               	goto	l1470
 16787  0030BE                     l1470:
 16788  0030BE  0012               	return		;funcret
 16789  0030C0                     __end_of_OpenUSART:
 16790                           	opt stack 0
 16791                           tblptru	equ	0xFF8
 16792                           tblptrh	equ	0xFF7
 16793                           tblptrl	equ	0xFF6
 16794                           tablat	equ	0xFF5
 16795                           prodh	equ	0xFF4
 16796                           prodl	equ	0xFF3
 16797                           intcon	equ	0xFF2
 16798                           intcon2	equ	0xFF1
 16799                           postinc0	equ	0xFEE
 16800                           wreg	equ	0xFE8
 16801                           postdec1	equ	0xFE5
 16802                           fsr1l	equ	0xFE1
 16803                           indf2	equ	0xFDF
 16804                           postinc2	equ	0xFDE
 16805                           postdec2	equ	0xFDD
 16806                           fsr2h	equ	0xFDA
 16807                           fsr2l	equ	0xFD9
 16808                           status	equ	0xFD8
 16809                           
 16810 ;; *************** function _Turn_Off_Fan *****************
 16811 ;; Defined at:
 16812 ;;		line 65 in file "Fan_Support.c"
 16813 ;; Parameters:    Size  Location     Type
 16814 ;;		None
 16815 ;; Auto vars:     Size  Location     Type
 16816 ;;		None
 16817 ;; Return value:  Size  Location     Type
 16818 ;;		None               void
 16819 ;; Registers used:
 16820 ;;		wreg, status,2
 16821 ;; Tracked objects:
 16822 ;;		On entry : 0/0
 16823 ;;		On exit  : 0/0
 16824 ;;		Unchanged: 0/0
 16825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16826 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16827 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16828 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16829 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16830 ;;Total ram usage:        0 bytes
 16831 ;; Hardware stack levels used:    1
 16832 ;; Hardware stack levels required when called:    3
 16833 ;; This function calls:
 16834 ;;		Nothing
 16835 ;; This function is called by:
 16836 ;;		_Do_Init
 16837 ;; This function uses a non-reentrant model
 16838 ;;
 16839                           
 16840                           	psect	text95
 16841  003D2C                     __ptext95:
 16842                           	opt stack 0
 16843  003D2C                     _Turn_Off_Fan:
 16844                           	opt stack 26
 16845                           
 16846                           ;Fan_Support.c: 68: FAN = 0;
 16847                           
 16848                           ;incstack = 0
 16849  003D2C  0E00               	movlw	0
 16850  003D2E  0100               	movlb	0	; () banked
 16851  003D30  6FF6               	movwf	_FAN& (0+255),b
 16852                           
 16853                           ; BSR set to: 0
 16854                           ;Fan_Support.c: 69: PORTAbits.RA5 = 0;
 16855  003D32  9A80               	bcf	3968,5,c	;volatile
 16856                           
 16857                           ; BSR set to: 0
 16858                           ;Fan_Support.c: 70: PORTEbits.RE2 = 0;
 16859  003D34  9484               	bcf	3972,2,c	;volatile
 16860                           
 16861                           ; BSR set to: 0
 16862  003D36  0012               	return		;funcret
 16863  003D38                     __end_of_Turn_Off_Fan:
 16864                           	opt stack 0
 16865                           tblptru	equ	0xFF8
 16866                           tblptrh	equ	0xFF7
 16867                           tblptrl	equ	0xFF6
 16868                           tablat	equ	0xFF5
 16869                           prodh	equ	0xFF4
 16870                           prodl	equ	0xFF3
 16871                           intcon	equ	0xFF2
 16872                           intcon2	equ	0xFF1
 16873                           postinc0	equ	0xFEE
 16874                           wreg	equ	0xFE8
 16875                           postdec1	equ	0xFE5
 16876                           fsr1l	equ	0xFE1
 16877                           indf2	equ	0xFDF
 16878                           postinc2	equ	0xFDE
 16879                           postdec2	equ	0xFDD
 16880                           fsr2h	equ	0xFDA
 16881                           fsr2l	equ	0xFD9
 16882                           status	equ	0xFD8
 16883                           
 16884 ;; *************** function _Set_RGB_Color *****************
 16885 ;; Defined at:
 16886 ;;		line 148 in file "Utils.c"
 16887 ;; Parameters:    Size  Location     Type
 16888 ;;  color           1    wreg     unsigned char 
 16889 ;; Auto vars:     Size  Location     Type
 16890 ;;  color           1   18[COMRAM] unsigned char 
 16891 ;;  temp_preserv    1   19[COMRAM] unsigned char 
 16892 ;; Return value:  Size  Location     Type
 16893 ;;		None               void
 16894 ;; Registers used:
 16895 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16896 ;; Tracked objects:
 16897 ;;		On entry : 0/0
 16898 ;;		On exit  : 0/0
 16899 ;;		Unchanged: 0/0
 16900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16901 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16902 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16903 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16904 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16905 ;;Total ram usage:        2 bytes
 16906 ;; Hardware stack levels used:    1
 16907 ;; Hardware stack levels required when called:    4
 16908 ;; This function calls:
 16909 ;;		_Wait_One_Sec
 16910 ;; This function is called by:
 16911 ;;		_Do_Init
 16912 ;;		_Test_Alarm
 16913 ;; This function uses a non-reentrant model
 16914 ;;
 16915                           
 16916                           	psect	text96
 16917  003A02                     __ptext96:
 16918                           	opt stack 0
 16919  003A02                     _Set_RGB_Color:
 16920                           	opt stack 25
 16921                           
 16922                           ; BSR set to: 0
 16923                           ;incstack = 0
 16924                           ;Set_RGB_Color@color stored from wreg
 16925  003A02  6E13               	movwf	Set_RGB_Color@color,c
 16926                           
 16927                           ;Utils.c: 150: char temp_preserved = PORTA & 0x20;
 16928  003A04  5080               	movf	3968,w,c	;volatile
 16929  003A06  0B20               	andlw	32
 16930  003A08  6E14               	movwf	Set_RGB_Color@temp_preserved,c
 16931                           
 16932                           ;Utils.c: 152: PORTA = D1[color] | temp_preserved;
 16933  003A0A  5013               	movf	Set_RGB_Color@color,w,c
 16934  003A0C  0D01               	mullw	1
 16935  003A0E  0E34               	movlw	low _D1
 16936  003A10  24F3               	addwf	prodl,w,c
 16937  003A12  6ED9               	movwf	fsr2l,c
 16938  003A14  0E01               	movlw	high _D1
 16939  003A16  20F4               	addwfc	prodh,w,c
 16940  003A18  6EDA               	movwf	fsr2h,c
 16941  003A1A  50DF               	movf	indf2,w,c
 16942  003A1C  1014               	iorwf	Set_RGB_Color@temp_preserved,w,c
 16943  003A1E  6E80               	movwf	3968,c	;volatile
 16944                           
 16945                           ;Utils.c: 153: Wait_One_Sec();
 16946  003A20  EC34  F01D         	call	_Wait_One_Sec	;wreg free
 16947  003A24  0012               	return		;funcret
 16948  003A26                     __end_of_Set_RGB_Color:
 16949                           	opt stack 0
 16950                           tblptru	equ	0xFF8
 16951                           tblptrh	equ	0xFF7
 16952                           tblptrl	equ	0xFF6
 16953                           tablat	equ	0xFF5
 16954                           prodh	equ	0xFF4
 16955                           prodl	equ	0xFF3
 16956                           intcon	equ	0xFF2
 16957                           intcon2	equ	0xFF1
 16958                           postinc0	equ	0xFEE
 16959                           wreg	equ	0xFE8
 16960                           postdec1	equ	0xFE5
 16961                           fsr1l	equ	0xFE1
 16962                           indf2	equ	0xFDF
 16963                           postinc2	equ	0xFDE
 16964                           postdec2	equ	0xFDD
 16965                           fsr2h	equ	0xFDA
 16966                           fsr2l	equ	0xFD9
 16967                           status	equ	0xFD8
 16968                           
 16969 ;; *************** function _Wait_One_Sec *****************
 16970 ;; Defined at:
 16971 ;;		line 92 in file "Utils.c"
 16972 ;; Parameters:    Size  Location     Type
 16973 ;;		None
 16974 ;; Auto vars:     Size  Location     Type
 16975 ;;  k               2   16[COMRAM] int 
 16976 ;; Return value:  Size  Location     Type
 16977 ;;		None               void
 16978 ;; Registers used:
 16979 ;;		wreg, status,2, status,0
 16980 ;; Tracked objects:
 16981 ;;		On entry : 0/0
 16982 ;;		On exit  : 0/0
 16983 ;;		Unchanged: 0/0
 16984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16985 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16986 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16987 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16988 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16989 ;;Total ram usage:        2 bytes
 16990 ;; Hardware stack levels used:    1
 16991 ;; Hardware stack levels required when called:    3
 16992 ;; This function calls:
 16993 ;;		Nothing
 16994 ;; This function is called by:
 16995 ;;		_Do_Beep_Good
 16996 ;;		_Do_Beep_Bad
 16997 ;;		_Set_RGB_Color
 16998 ;;		_Do_Beep
 16999 ;; This function uses a non-reentrant model
 17000 ;;
 17001                           
 17002                           	psect	text97
 17003  003A68                     __ptext97:
 17004                           	opt stack 0
 17005  003A68                     _Wait_One_Sec:
 17006                           	opt stack 25
 17007                           
 17008                           ;Utils.c: 94: for (int k=0;k<0xffff;k++);
 17009                           
 17010                           ;incstack = 0
 17011  003A68  0E00               	movlw	0
 17012  003A6A  6E12               	movwf	Wait_One_Sec@k+1,c
 17013  003A6C  0E00               	movlw	0
 17014  003A6E  6E11               	movwf	Wait_One_Sec@k,c
 17015  003A70                     l6169:
 17016  003A70  2811               	incf	Wait_One_Sec@k,w,c
 17017  003A72  E105               	bnz	l6173
 17018  003A74  2812               	incf	Wait_One_Sec@k+1,w,c
 17019  003A76  B4D8               	btfsc	status,2,c
 17020  003A78  D006               	goto	l699
 17021  003A7A  D001               	goto	l6173
 17022  003A7C  D004               	goto	l699
 17023  003A7E                     l6173:
 17024  003A7E  4A11               	infsnz	Wait_One_Sec@k,f,c
 17025  003A80  2A12               	incf	Wait_One_Sec@k+1,f,c
 17026  003A82  D7F6               	goto	l6169
 17027  003A84  D7FC               	goto	l6173
 17028  003A86                     l699:
 17029  003A86  0012               	return		;funcret
 17030  003A88                     __end_of_Wait_One_Sec:
 17031                           	opt stack 0
 17032                           tblptru	equ	0xFF8
 17033                           tblptrh	equ	0xFF7
 17034                           tblptrl	equ	0xFF6
 17035                           tablat	equ	0xFF5
 17036                           prodh	equ	0xFF4
 17037                           prodl	equ	0xFF3
 17038                           intcon	equ	0xFF2
 17039                           intcon2	equ	0xFF1
 17040                           postinc0	equ	0xFEE
 17041                           wreg	equ	0xFE8
 17042                           postdec1	equ	0xFE5
 17043                           fsr1l	equ	0xFE1
 17044                           indf2	equ	0xFDF
 17045                           postinc2	equ	0xFDE
 17046                           postdec2	equ	0xFDD
 17047                           fsr2h	equ	0xFDA
 17048                           fsr2l	equ	0xFD9
 17049                           status	equ	0xFD8
 17050                           
 17051 ;; *************** function _Init_Interrupt *****************
 17052 ;; Defined at:
 17053 ;;		line 17 in file "Interrupt.c"
 17054 ;; Parameters:    Size  Location     Type
 17055 ;;		None
 17056 ;; Auto vars:     Size  Location     Type
 17057 ;;		None
 17058 ;; Return value:  Size  Location     Type
 17059 ;;		None               void
 17060 ;; Registers used:
 17061 ;;		wreg, status,2
 17062 ;; Tracked objects:
 17063 ;;		On entry : 0/0
 17064 ;;		On exit  : 0/0
 17065 ;;		Unchanged: 0/0
 17066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17067 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17068 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17069 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17070 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17071 ;;Total ram usage:        0 bytes
 17072 ;; Hardware stack levels used:    1
 17073 ;; Hardware stack levels required when called:    3
 17074 ;; This function calls:
 17075 ;;		Nothing
 17076 ;; This function is called by:
 17077 ;;		_Do_Init
 17078 ;; This function uses a non-reentrant model
 17079 ;;
 17080                           
 17081                           	psect	text98
 17082  0036C8                     __ptext98:
 17083                           	opt stack 0
 17084  0036C8                     _Init_Interrupt:
 17085                           	opt stack 26
 17086                           
 17087                           ;Interrupt.c: 20: INTCONbits.INT0IF = 0 ;
 17088                           
 17089                           ;incstack = 0
 17090  0036C8  92F2               	bcf	intcon,1,c	;volatile
 17091                           
 17092                           ;Interrupt.c: 21: INTCON3bits.INT1IF = 0;
 17093  0036CA  90F0               	bcf	intcon3,0,c	;volatile
 17094                           
 17095                           ;Interrupt.c: 22: INTCON3bits.INT2IF = 0;
 17096  0036CC  92F0               	bcf	intcon3,1,c	;volatile
 17097                           
 17098                           ;Interrupt.c: 23: INTCONbits.INT0IE = 1;
 17099  0036CE  88F2               	bsf	intcon,4,c	;volatile
 17100                           
 17101                           ;Interrupt.c: 24: INTCON3bits.INT1IE = 1;
 17102  0036D0  86F0               	bsf	intcon3,3,c	;volatile
 17103                           
 17104                           ;Interrupt.c: 25: INTCON3bits.INT2IE = 1;
 17105  0036D2  88F0               	bsf	intcon3,4,c	;volatile
 17106                           
 17107                           ;Interrupt.c: 26: INTCON2bits.INTEDG0 = 0;
 17108  0036D4  9CF1               	bcf	intcon2,6,c	;volatile
 17109                           
 17110                           ;Interrupt.c: 27: INTCON2bits.INTEDG1 = 0;
 17111  0036D6  9AF1               	bcf	intcon2,5,c	;volatile
 17112                           
 17113                           ;Interrupt.c: 28: INTCON2bits.INTEDG2 = 0;
 17114  0036D8  98F1               	bcf	intcon2,4,c	;volatile
 17115                           
 17116                           ;Interrupt.c: 29: TMR1H = 0;
 17117  0036DA  0E00               	movlw	0
 17118  0036DC  6ECF               	movwf	4047,c	;volatile
 17119                           
 17120                           ;Interrupt.c: 30: TMR1L = 0;
 17121  0036DE  0E00               	movlw	0
 17122  0036E0  6ECE               	movwf	4046,c	;volatile
 17123                           
 17124                           ;Interrupt.c: 31: PIR1bits.TMR1IF = 0;
 17125  0036E2  909E               	bcf	3998,0,c	;volatile
 17126                           
 17127                           ;Interrupt.c: 32: PIE1bits.TMR1IE = 1;
 17128  0036E4  809D               	bsf	3997,0,c	;volatile
 17129                           
 17130                           ;Interrupt.c: 33: INTCONbits.PEIE = 1;
 17131  0036E6  8CF2               	bsf	intcon,6,c	;volatile
 17132                           
 17133                           ;Interrupt.c: 34: INTCONbits.GIE = 1;
 17134  0036E8  8EF2               	bsf	intcon,7,c	;volatile
 17135                           
 17136                           ;Interrupt.c: 35: nec_ok = 0;
 17137  0036EA  0E00               	movlw	0
 17138  0036EC  0100               	movlb	0	; () banked
 17139  0036EE  6FF3               	movwf	(_nec_ok+1)& (0+255),b
 17140  0036F0  0E00               	movlw	0
 17141  0036F2  6FF2               	movwf	_nec_ok& (0+255),b
 17142                           
 17143                           ;Interrupt.c: 36: Nec_code = 0x0;
 17144  0036F4  0E00               	movlw	0
 17145  0036F6  0100               	movlb	0	; () banked
 17146  0036F8  6FE3               	movwf	_Nec_code& (0+255),b
 17147  0036FA  0E00               	movlw	0
 17148  0036FC  6FE4               	movwf	(_Nec_code+1)& (0+255),b
 17149  0036FE  0E00               	movlw	0
 17150  003700  6FE5               	movwf	(_Nec_code+2)& (0+255),b
 17151  003702  0E00               	movlw	0
 17152  003704  6FE6               	movwf	(_Nec_code+3)& (0+255),b
 17153                           
 17154                           ; BSR set to: 0
 17155  003706  0012               	return		;funcret
 17156  003708                     __end_of_Init_Interrupt:
 17157                           	opt stack 0
 17158                           tblptru	equ	0xFF8
 17159                           tblptrh	equ	0xFF7
 17160                           tblptrl	equ	0xFF6
 17161                           tablat	equ	0xFF5
 17162                           prodh	equ	0xFF4
 17163                           prodl	equ	0xFF3
 17164                           intcon	equ	0xFF2
 17165                           intcon2	equ	0xFF1
 17166                           intcon3	equ	0xFF0
 17167                           postinc0	equ	0xFEE
 17168                           wreg	equ	0xFE8
 17169                           postdec1	equ	0xFE5
 17170                           fsr1l	equ	0xFE1
 17171                           indf2	equ	0xFDF
 17172                           postinc2	equ	0xFDE
 17173                           postdec2	equ	0xFDD
 17174                           fsr2h	equ	0xFDA
 17175                           fsr2l	equ	0xFD9
 17176                           status	equ	0xFD8
 17177                           
 17178 ;; *************** function _Init_ADC *****************
 17179 ;; Defined at:
 17180 ;;		line 175 in file "Utils.c"
 17181 ;; Parameters:    Size  Location     Type
 17182 ;;		None
 17183 ;; Auto vars:     Size  Location     Type
 17184 ;;		None
 17185 ;; Return value:  Size  Location     Type
 17186 ;;		None               void
 17187 ;; Registers used:
 17188 ;;		wreg, status,2
 17189 ;; Tracked objects:
 17190 ;;		On entry : 0/0
 17191 ;;		On exit  : 0/0
 17192 ;;		Unchanged: 0/0
 17193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17194 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17195 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17196 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17197 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17198 ;;Total ram usage:        0 bytes
 17199 ;; Hardware stack levels used:    1
 17200 ;; Hardware stack levels required when called:    3
 17201 ;; This function calls:
 17202 ;;		Nothing
 17203 ;; This function is called by:
 17204 ;;		_Do_Init
 17205 ;; This function uses a non-reentrant model
 17206 ;;
 17207                           
 17208                           	psect	text99
 17209  003D1E                     __ptext99:
 17210                           	opt stack 0
 17211  003D1E                     _Init_ADC:
 17212                           	opt stack 26
 17213                           
 17214                           ;Utils.c: 177: ADCON0 = 0x01;
 17215                           
 17216                           ; BSR set to: 0
 17217                           ;incstack = 0
 17218  003D1E  0E01               	movlw	1
 17219  003D20  6EC2               	movwf	4034,c	;volatile
 17220                           
 17221                           ;Utils.c: 178: ADCON1= 0x0E;
 17222  003D22  0E0E               	movlw	14
 17223  003D24  6EC1               	movwf	4033,c	;volatile
 17224                           
 17225                           ;Utils.c: 179: ADCON2= 0xA9;
 17226  003D26  0EA9               	movlw	169
 17227  003D28  6EC0               	movwf	4032,c	;volatile
 17228  003D2A  0012               	return		;funcret
 17229  003D2C                     __end_of_Init_ADC:
 17230                           	opt stack 0
 17231                           tblptru	equ	0xFF8
 17232                           tblptrh	equ	0xFF7
 17233                           tblptrl	equ	0xFF6
 17234                           tablat	equ	0xFF5
 17235                           prodh	equ	0xFF4
 17236                           prodl	equ	0xFF3
 17237                           intcon	equ	0xFF2
 17238                           intcon2	equ	0xFF1
 17239                           intcon3	equ	0xFF0
 17240                           postinc0	equ	0xFEE
 17241                           wreg	equ	0xFE8
 17242                           postdec1	equ	0xFE5
 17243                           fsr1l	equ	0xFE1
 17244                           indf2	equ	0xFDF
 17245                           postinc2	equ	0xFDE
 17246                           postdec2	equ	0xFDD
 17247                           fsr2h	equ	0xFDA
 17248                           fsr2l	equ	0xFD9
 17249                           status	equ	0xFD8
 17250                           
 17251 ;; *************** function _I2C_Init *****************
 17252 ;; Defined at:
 17253 ;;		line 10 in file "I2C.c"
 17254 ;; Parameters:    Size  Location     Type
 17255 ;;  c               4   16[COMRAM] unsigned long 
 17256 ;; Auto vars:     Size  Location     Type
 17257 ;;		None
 17258 ;; Return value:  Size  Location     Type
 17259 ;;		None               void
 17260 ;; Registers used:
 17261 ;;		wreg, cstack
 17262 ;; Tracked objects:
 17263 ;;		On entry : 0/0
 17264 ;;		On exit  : 0/0
 17265 ;;		Unchanged: 0/0
 17266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17267 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17268 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17269 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17270 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17271 ;;Total ram usage:        4 bytes
 17272 ;; Hardware stack levels used:    1
 17273 ;; Hardware stack levels required when called:    4
 17274 ;; This function calls:
 17275 ;;		_i2cHighScl
 17276 ;;		_i2cHighSda
 17277 ;; This function is called by:
 17278 ;;		_Do_Init
 17279 ;; This function uses a non-reentrant model
 17280 ;;
 17281                           
 17282                           	psect	text100
 17283  003D50                     __ptext100:
 17284                           	opt stack 0
 17285  003D50                     _I2C_Init:
 17286                           	opt stack 25
 17287                           
 17288                           ;I2C.c: 12: i2cHighScl();
 17289                           
 17290                           ;incstack = 0
 17291  003D50  EC9C  F01E         	call	_i2cHighScl	;wreg free
 17292                           
 17293                           ;I2C.c: 13: i2cHighSda();
 17294  003D54  ECC9  F01E         	call	_i2cHighSda	;wreg free
 17295  003D58  0012               	return		;funcret
 17296  003D5A                     __end_of_I2C_Init:
 17297                           	opt stack 0
 17298                           tblptru	equ	0xFF8
 17299                           tblptrh	equ	0xFF7
 17300                           tblptrl	equ	0xFF6
 17301                           tablat	equ	0xFF5
 17302                           prodh	equ	0xFF4
 17303                           prodl	equ	0xFF3
 17304                           intcon	equ	0xFF2
 17305                           intcon2	equ	0xFF1
 17306                           intcon3	equ	0xFF0
 17307                           postinc0	equ	0xFEE
 17308                           wreg	equ	0xFE8
 17309                           postdec1	equ	0xFE5
 17310                           fsr1l	equ	0xFE1
 17311                           indf2	equ	0xFDF
 17312                           postinc2	equ	0xFDE
 17313                           postdec2	equ	0xFDD
 17314                           fsr2h	equ	0xFDA
 17315                           fsr2l	equ	0xFD9
 17316                           status	equ	0xFD8
 17317                           
 17318 ;; *************** function _DS1621_Init *****************
 17319 ;; Defined at:
 17320 ;;		line 22 in file "I2C_Support.c"
 17321 ;; Parameters:    Size  Location     Type
 17322 ;;		None
 17323 ;; Auto vars:     Size  Location     Type
 17324 ;;  Device          1   21[COMRAM] unsigned char 
 17325 ;; Return value:  Size  Location     Type
 17326 ;;		None               void
 17327 ;; Registers used:
 17328 ;;		wreg, status,2, status,0, cstack
 17329 ;; Tracked objects:
 17330 ;;		On entry : 0/0
 17331 ;;		On exit  : 0/0
 17332 ;;		Unchanged: 0/0
 17333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17335 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17336 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17337 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17338 ;;Total ram usage:        1 bytes
 17339 ;; Hardware stack levels used:    1
 17340 ;; Hardware stack levels required when called:    6
 17341 ;; This function calls:
 17342 ;;		_I2C_Write_Cmd_Only
 17343 ;;		_I2C_Write_Cmd_Write_Data
 17344 ;; This function is called by:
 17345 ;;		_Do_Init
 17346 ;; This function uses a non-reentrant model
 17347 ;;
 17348                           
 17349                           	psect	text101
 17350  003AA8                     __ptext101:
 17351                           	opt stack 0
 17352  003AA8                     _DS1621_Init:
 17353                           	opt stack 23
 17354                           
 17355                           ;I2C_Support.c: 24: char Device = 0x48;
 17356                           
 17357                           ;incstack = 0
 17358  003AA8  0E48               	movlw	72
 17359  003AAA  6E16               	movwf	DS1621_Init@Device,c
 17360                           
 17361                           ;I2C_Support.c: 25: I2C_Write_Cmd_Write_Data (Device, 0xAC, 0x02);
 17362  003AAC  0EAC               	movlw	172
 17363  003AAE  6E13               	movwf	I2C_Write_Cmd_Write_Data@Cmd,c
 17364  003AB0  0E02               	movlw	2
 17365  003AB2  6E14               	movwf	I2C_Write_Cmd_Write_Data@Data_Out,c
 17366  003AB4  5016               	movf	DS1621_Init@Device,w,c
 17367  003AB6  EC44  F01D         	call	_I2C_Write_Cmd_Write_Data
 17368                           
 17369                           ;I2C_Support.c: 26: I2C_Write_Cmd_Only(Device, 0xEE);
 17370  003ABA  0EEE               	movlw	238
 17371  003ABC  6E13               	movwf	I2C_Write_Cmd_Only@Cmd,c
 17372  003ABE  5016               	movf	DS1621_Init@Device,w,c
 17373  003AC0  EC71  F01D         	call	_I2C_Write_Cmd_Only
 17374  003AC4  0012               	return		;funcret
 17375  003AC6                     __end_of_DS1621_Init:
 17376                           	opt stack 0
 17377                           tblptru	equ	0xFF8
 17378                           tblptrh	equ	0xFF7
 17379                           tblptrl	equ	0xFF6
 17380                           tablat	equ	0xFF5
 17381                           prodh	equ	0xFF4
 17382                           prodl	equ	0xFF3
 17383                           intcon	equ	0xFF2
 17384                           intcon2	equ	0xFF1
 17385                           intcon3	equ	0xFF0
 17386                           postinc0	equ	0xFEE
 17387                           wreg	equ	0xFE8
 17388                           postdec1	equ	0xFE5
 17389                           fsr1l	equ	0xFE1
 17390                           indf2	equ	0xFDF
 17391                           postinc2	equ	0xFDE
 17392                           postdec2	equ	0xFDD
 17393                           fsr2h	equ	0xFDA
 17394                           fsr2l	equ	0xFD9
 17395                           status	equ	0xFD8
 17396                           
 17397 ;; *************** function _I2C_Write_Cmd_Write_Data *****************
 17398 ;; Defined at:
 17399 ;;		line 148 in file "I2C.c"
 17400 ;; Parameters:    Size  Location     Type
 17401 ;;  Device          1    wreg     unsigned char 
 17402 ;;  Cmd             1   18[COMRAM] unsigned char 
 17403 ;;  Data_Out        1   19[COMRAM] unsigned char 
 17404 ;; Auto vars:     Size  Location     Type
 17405 ;;  Device          1   20[COMRAM] unsigned char 
 17406 ;; Return value:  Size  Location     Type
 17407 ;;		None               void
 17408 ;; Registers used:
 17409 ;;		wreg, status,2, status,0, cstack
 17410 ;; Tracked objects:
 17411 ;;		On entry : 0/0
 17412 ;;		On exit  : 0/0
 17413 ;;		Unchanged: 0/0
 17414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17415 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17416 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17417 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17418 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17419 ;;Total ram usage:        3 bytes
 17420 ;; Hardware stack levels used:    1
 17421 ;; Hardware stack levels required when called:    5
 17422 ;; This function calls:
 17423 ;;		_I2C_Start
 17424 ;;		_I2C_Stop
 17425 ;;		_I2C_Write
 17426 ;; This function is called by:
 17427 ;;		_DS1621_Init
 17428 ;; This function uses a non-reentrant model
 17429 ;;
 17430                           
 17431                           	psect	text102
 17432  003A88                     __ptext102:
 17433                           	opt stack 0
 17434  003A88                     _I2C_Write_Cmd_Write_Data:
 17435                           	opt stack 23
 17436                           
 17437                           ;incstack = 0
 17438                           ;I2C_Write_Cmd_Write_Data@Device stored from wreg
 17439  003A88  6E15               	movwf	I2C_Write_Cmd_Write_Data@Device,c
 17440                           
 17441                           ;I2C.c: 150: I2C_Start();
 17442  003A8A  EC46  F01E         	call	_I2C_Start	;wreg free
 17443                           
 17444                           ;I2C.c: 151: I2C_Write((Device << 1) | 0);
 17445  003A8E  5015               	movf	I2C_Write_Cmd_Write_Data@Device,w,c
 17446  003A90  2415               	addwf	I2C_Write_Cmd_Write_Data@Device,w,c
 17447  003A92  ECC2  F01B         	call	_I2C_Write
 17448                           
 17449                           ;I2C.c: 152: I2C_Write(Cmd);
 17450  003A96  5013               	movf	I2C_Write_Cmd_Write_Data@Cmd,w,c
 17451  003A98  ECC2  F01B         	call	_I2C_Write
 17452                           
 17453                           ;I2C.c: 153: I2C_Write(Data_Out);
 17454  003A9C  5014               	movf	I2C_Write_Cmd_Write_Data@Data_Out,w,c
 17455  003A9E  ECC2  F01B         	call	_I2C_Write
 17456                           
 17457                           ;I2C.c: 154: I2C_Stop();
 17458  003AA2  EC3D  F01E         	call	_I2C_Stop	;wreg free
 17459  003AA6  0012               	return		;funcret
 17460  003AA8                     __end_of_I2C_Write_Cmd_Write_Data:
 17461                           	opt stack 0
 17462                           tblptru	equ	0xFF8
 17463                           tblptrh	equ	0xFF7
 17464                           tblptrl	equ	0xFF6
 17465                           tablat	equ	0xFF5
 17466                           prodh	equ	0xFF4
 17467                           prodl	equ	0xFF3
 17468                           intcon	equ	0xFF2
 17469                           intcon2	equ	0xFF1
 17470                           intcon3	equ	0xFF0
 17471                           postinc0	equ	0xFEE
 17472                           wreg	equ	0xFE8
 17473                           postdec1	equ	0xFE5
 17474                           fsr1l	equ	0xFE1
 17475                           indf2	equ	0xFDF
 17476                           postinc2	equ	0xFDE
 17477                           postdec2	equ	0xFDD
 17478                           fsr2h	equ	0xFDA
 17479                           fsr2l	equ	0xFD9
 17480                           status	equ	0xFD8
 17481                           
 17482 ;; *************** function _I2C_Write_Cmd_Only *****************
 17483 ;; Defined at:
 17484 ;;		line 140 in file "I2C.c"
 17485 ;; Parameters:    Size  Location     Type
 17486 ;;  Device          1    wreg     unsigned char 
 17487 ;;  Cmd             1   18[COMRAM] unsigned char 
 17488 ;; Auto vars:     Size  Location     Type
 17489 ;;  Device          1   19[COMRAM] unsigned char 
 17490 ;; Return value:  Size  Location     Type
 17491 ;;		None               void
 17492 ;; Registers used:
 17493 ;;		wreg, status,2, status,0, cstack
 17494 ;; Tracked objects:
 17495 ;;		On entry : 0/0
 17496 ;;		On exit  : 0/0
 17497 ;;		Unchanged: 0/0
 17498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17499 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17500 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17501 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17502 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17503 ;;Total ram usage:        2 bytes
 17504 ;; Hardware stack levels used:    1
 17505 ;; Hardware stack levels required when called:    5
 17506 ;; This function calls:
 17507 ;;		_I2C_Start
 17508 ;;		_I2C_Stop
 17509 ;;		_I2C_Write
 17510 ;; This function is called by:
 17511 ;;		_DS1621_Init
 17512 ;; This function uses a non-reentrant model
 17513 ;;
 17514                           
 17515                           	psect	text103
 17516  003AE2                     __ptext103:
 17517                           	opt stack 0
 17518  003AE2                     _I2C_Write_Cmd_Only:
 17519                           	opt stack 23
 17520                           
 17521                           ;incstack = 0
 17522                           ;I2C_Write_Cmd_Only@Device stored from wreg
 17523  003AE2  6E14               	movwf	I2C_Write_Cmd_Only@Device,c
 17524                           
 17525                           ;I2C.c: 142: I2C_Start();
 17526  003AE4  EC46  F01E         	call	_I2C_Start	;wreg free
 17527                           
 17528                           ;I2C.c: 143: I2C_Write((Device << 1) | 0);
 17529  003AE8  5014               	movf	I2C_Write_Cmd_Only@Device,w,c
 17530  003AEA  2414               	addwf	I2C_Write_Cmd_Only@Device,w,c
 17531  003AEC  ECC2  F01B         	call	_I2C_Write
 17532                           
 17533                           ;I2C.c: 144: I2C_Write(Cmd);
 17534  003AF0  5013               	movf	I2C_Write_Cmd_Only@Cmd,w,c
 17535  003AF2  ECC2  F01B         	call	_I2C_Write
 17536                           
 17537                           ;I2C.c: 145: I2C_Stop();
 17538  003AF6  EC3D  F01E         	call	_I2C_Stop	;wreg free
 17539  003AFA  0012               	return		;funcret
 17540  003AFC                     __end_of_I2C_Write_Cmd_Only:
 17541                           	opt stack 0
 17542                           tblptru	equ	0xFF8
 17543                           tblptrh	equ	0xFF7
 17544                           tblptrl	equ	0xFF6
 17545                           tablat	equ	0xFF5
 17546                           prodh	equ	0xFF4
 17547                           prodl	equ	0xFF3
 17548                           intcon	equ	0xFF2
 17549                           intcon2	equ	0xFF1
 17550                           intcon3	equ	0xFF0
 17551                           postinc0	equ	0xFEE
 17552                           wreg	equ	0xFE8
 17553                           postdec1	equ	0xFE5
 17554                           fsr1l	equ	0xFE1
 17555                           indf2	equ	0xFDF
 17556                           postinc2	equ	0xFDE
 17557                           postdec2	equ	0xFDD
 17558                           fsr2h	equ	0xFDA
 17559                           fsr2l	equ	0xFD9
 17560                           status	equ	0xFD8
 17561                           
 17562 ;; *************** function _DS1621_Read_Temp *****************
 17563 ;; Defined at:
 17564 ;;		line 32 in file "I2C_Support.c"
 17565 ;; Parameters:    Size  Location     Type
 17566 ;;		None
 17567 ;; Auto vars:     Size  Location     Type
 17568 ;;  Device          1   23[COMRAM] unsigned char 
 17569 ;;  Data_Ret        1   22[COMRAM] unsigned char 
 17570 ;;  Cmd             1   21[COMRAM] unsigned char 
 17571 ;; Return value:  Size  Location     Type
 17572 ;;                  2   19[COMRAM] int 
 17573 ;; Registers used:
 17574 ;;		wreg, status,2, status,0, cstack
 17575 ;; Tracked objects:
 17576 ;;		On entry : 0/0
 17577 ;;		On exit  : 0/0
 17578 ;;		Unchanged: 0/0
 17579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17580 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17581 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17582 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17583 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17584 ;;Total ram usage:        5 bytes
 17585 ;; Hardware stack levels used:    1
 17586 ;; Hardware stack levels required when called:    6
 17587 ;; This function calls:
 17588 ;;		_I2C_ReStart
 17589 ;;		_I2C_Read
 17590 ;;		_I2C_Start
 17591 ;;		_I2C_Stop
 17592 ;;		_I2C_Write
 17593 ;; This function is called by:
 17594 ;;		_main
 17595 ;; This function uses a non-reentrant model
 17596 ;;
 17597                           
 17598                           	psect	text104
 17599  00383A                     __ptext104:
 17600                           	opt stack 0
 17601  00383A                     _DS1621_Read_Temp:
 17602                           	opt stack 24
 17603                           
 17604                           ;I2C_Support.c: 34: char Device = 0x48;
 17605                           
 17606                           ;incstack = 0
 17607  00383A  0E48               	movlw	72
 17608  00383C  6E18               	movwf	DS1621_Read_Temp@Device,c
 17609                           
 17610                           ;I2C_Support.c: 35: char Cmd = 0xAA;
 17611  00383E  0EAA               	movlw	170
 17612  003840  6E16               	movwf	DS1621_Read_Temp@Cmd,c
 17613                           
 17614                           ;I2C_Support.c: 37: char Data_Ret;
 17615                           ;I2C_Support.c: 38: I2C_Start();
 17616  003842  EC46  F01E         	call	_I2C_Start	;wreg free
 17617                           
 17618                           ;I2C_Support.c: 39: I2C_Write((Device << 1) | 0);
 17619  003846  5018               	movf	DS1621_Read_Temp@Device,w,c
 17620  003848  2418               	addwf	DS1621_Read_Temp@Device,w,c
 17621  00384A  ECC2  F01B         	call	_I2C_Write
 17622                           
 17623                           ;I2C_Support.c: 40: I2C_Write(Cmd);
 17624  00384E  5016               	movf	DS1621_Read_Temp@Cmd,w,c
 17625  003850  ECC2  F01B         	call	_I2C_Write
 17626                           
 17627                           ;I2C_Support.c: 41: I2C_ReStart();
 17628  003854  ECD2  F01D         	call	_I2C_ReStart	;wreg free
 17629                           
 17630                           ;I2C_Support.c: 42: I2C_Write((Device << 1) | 1);
 17631  003858  80D8               	bsf	status,0,c
 17632  00385A  3418               	rlcf	DS1621_Read_Temp@Device,w,c
 17633  00385C  ECC2  F01B         	call	_I2C_Write
 17634                           
 17635                           ;I2C_Support.c: 43: Data_Ret = I2C_Read(0);
 17636  003860  0E00               	movlw	0
 17637  003862  EC1F  F01B         	call	_I2C_Read
 17638  003866  6E17               	movwf	DS1621_Read_Temp@Data_Ret,c
 17639                           
 17640                           ;I2C_Support.c: 44: I2C_Stop();
 17641  003868  EC3D  F01E         	call	_I2C_Stop	;wreg free
 17642                           
 17643                           ;I2C_Support.c: 45: return Data_Ret;
 17644  00386C  C017  F014         	movff	DS1621_Read_Temp@Data_Ret,?_DS1621_Read_Temp
 17645  003870  6A15               	clrf	?_DS1621_Read_Temp+1,c
 17646  003872  D000               	goto	l151
 17647  003874                     l151:
 17648  003874  0012               	return		;funcret
 17649  003876                     __end_of_DS1621_Read_Temp:
 17650                           	opt stack 0
 17651                           tblptru	equ	0xFF8
 17652                           tblptrh	equ	0xFF7
 17653                           tblptrl	equ	0xFF6
 17654                           tablat	equ	0xFF5
 17655                           prodh	equ	0xFF4
 17656                           prodl	equ	0xFF3
 17657                           intcon	equ	0xFF2
 17658                           intcon2	equ	0xFF1
 17659                           intcon3	equ	0xFF0
 17660                           postinc0	equ	0xFEE
 17661                           wreg	equ	0xFE8
 17662                           postdec1	equ	0xFE5
 17663                           fsr1l	equ	0xFE1
 17664                           indf2	equ	0xFDF
 17665                           postinc2	equ	0xFDE
 17666                           postdec2	equ	0xFDD
 17667                           fsr2h	equ	0xFDA
 17668                           fsr2l	equ	0xFD9
 17669                           status	equ	0xFD8
 17670                           
 17671 ;; *************** function _I2C_Write *****************
 17672 ;; Defined at:
 17673 ;;		line 37 in file "I2C.c"
 17674 ;; Parameters:    Size  Location     Type
 17675 ;;  outByte         1    wreg     unsigned char 
 17676 ;; Auto vars:     Size  Location     Type
 17677 ;;  outByte         1   16[COMRAM] unsigned char 
 17678 ;;  n               1   17[COMRAM] unsigned char 
 17679 ;; Return value:  Size  Location     Type
 17680 ;;		None               void
 17681 ;; Registers used:
 17682 ;;		wreg, status,2, status,0, cstack
 17683 ;; Tracked objects:
 17684 ;;		On entry : 0/0
 17685 ;;		On exit  : 0/0
 17686 ;;		Unchanged: 0/0
 17687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17688 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17689 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17690 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17691 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17692 ;;Total ram usage:        2 bytes
 17693 ;; Hardware stack levels used:    1
 17694 ;; Hardware stack levels required when called:    4
 17695 ;; This function calls:
 17696 ;;		_i2cHighScl
 17697 ;;		_i2cHighSda
 17698 ;;		_i2cLowScl
 17699 ;;		_i2cLowSda
 17700 ;; This function is called by:
 17701 ;;		_DS1621_Read_Temp
 17702 ;;		_DS3231_Read_Time
 17703 ;;		_DS3231_Write_Time
 17704 ;;		_DS3231_Read_Alarm_Time
 17705 ;;		_DS3231_Init
 17706 ;;		_DS3231_Write_Alarm_Time
 17707 ;;		_I2C_Write_Address_Read_One_Byte
 17708 ;;		_I2C_Write_Address_Write_One_Byte
 17709 ;;		_I2C_Write_Cmd_Only
 17710 ;;		_I2C_Write_Cmd_Write_Data
 17711 ;;		_DS3231_Read_Temp
 17712 ;;		_DS3231_Setup_Time
 17713 ;;		_I2C_Write_Cmd_Read_One_Byte
 17714 ;; This function uses a non-reentrant model
 17715 ;;
 17716                           
 17717                           	psect	text105
 17718  003784                     __ptext105:
 17719                           	opt stack 0
 17720  003784                     _I2C_Write:
 17721                           	opt stack 23
 17722                           
 17723                           ;incstack = 0
 17724                           ;I2C_Write@outByte stored from wreg
 17725  003784  6E11               	movwf	I2C_Write@outByte,c
 17726                           
 17727                           ;I2C.c: 39: unsigned char n;
 17728                           ;I2C.c: 40: for(n=0; n<8; n++)
 17729  003786  0E00               	movlw	0
 17730  003788  6E12               	movwf	I2C_Write@n,c
 17731  00378A                     l7913:
 17732  00378A  0E07               	movlw	7
 17733  00378C  6412               	cpfsgt	I2C_Write@n,c
 17734  00378E  D001               	goto	l211
 17735  003790  D011               	goto	l7931
 17736  003792                     l211:
 17737                           
 17738                           ;I2C.c: 41: {
 17739                           ;I2C.c: 42: if(outByte&0x80) i2cHighSda();
 17740  003792  AE11               	btfss	I2C_Write@outByte,7,c
 17741  003794  D003               	goto	l7919
 17742  003796  ECC9  F01E         	call	_i2cHighSda	;wreg free
 17743  00379A  D003               	goto	l7921
 17744  00379C                     l7919:
 17745                           
 17746                           ;I2C.c: 43: else i2cLowSda();
 17747  00379C  ECB2  F01E         	call	_i2cLowSda	;wreg free
 17748  0037A0  D000               	goto	l7921
 17749  0037A2                     l7921:
 17750                           
 17751                           ;I2C.c: 44: i2cHighScl();
 17752  0037A2  EC9C  F01E         	call	_i2cHighScl	;wreg free
 17753                           
 17754                           ;I2C.c: 45: i2cLowScl();
 17755  0037A6  ECC5  F01E         	call	_i2cLowScl	;wreg free
 17756                           
 17757                           ;I2C.c: 46: outByte = outByte << 1;
 17758  0037AA  5011               	movf	I2C_Write@outByte,w,c
 17759  0037AC  2411               	addwf	I2C_Write@outByte,w,c
 17760  0037AE  6E11               	movwf	I2C_Write@outByte,c
 17761  0037B0  2A12               	incf	I2C_Write@n,f,c
 17762  0037B2  D7EB               	goto	l7913
 17763  0037B4                     l7931:
 17764                           
 17765                           ;I2C.c: 47: }
 17766                           ;I2C.c: 48: i2cHighSda();
 17767  0037B4  ECC9  F01E         	call	_i2cHighSda	;wreg free
 17768                           
 17769                           ;I2C.c: 49: i2cHighScl();
 17770  0037B8  EC9C  F01E         	call	_i2cHighScl	;wreg free
 17771                           
 17772                           ;I2C.c: 50: i2cLowScl();
 17773  0037BC  ECC5  F01E         	call	_i2cLowScl	;wreg free
 17774  0037C0  0012               	return		;funcret
 17775  0037C2                     __end_of_I2C_Write:
 17776                           	opt stack 0
 17777                           tblptru	equ	0xFF8
 17778                           tblptrh	equ	0xFF7
 17779                           tblptrl	equ	0xFF6
 17780                           tablat	equ	0xFF5
 17781                           prodh	equ	0xFF4
 17782                           prodl	equ	0xFF3
 17783                           intcon	equ	0xFF2
 17784                           intcon2	equ	0xFF1
 17785                           intcon3	equ	0xFF0
 17786                           postinc0	equ	0xFEE
 17787                           wreg	equ	0xFE8
 17788                           postdec1	equ	0xFE5
 17789                           fsr1l	equ	0xFE1
 17790                           indf2	equ	0xFDF
 17791                           postinc2	equ	0xFDE
 17792                           postdec2	equ	0xFDD
 17793                           fsr2h	equ	0xFDA
 17794                           fsr2l	equ	0xFD9
 17795                           status	equ	0xFD8
 17796                           
 17797 ;; *************** function _I2C_Stop *****************
 17798 ;; Defined at:
 17799 ;;		line 84 in file "I2C.c"
 17800 ;; Parameters:    Size  Location     Type
 17801 ;;		None
 17802 ;; Auto vars:     Size  Location     Type
 17803 ;;		None
 17804 ;; Return value:  Size  Location     Type
 17805 ;;		None               void
 17806 ;; Registers used:
 17807 ;;		wreg, cstack
 17808 ;; Tracked objects:
 17809 ;;		On entry : 0/0
 17810 ;;		On exit  : 0/0
 17811 ;;		Unchanged: 0/0
 17812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17813 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17814 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17815 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17816 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17817 ;;Total ram usage:        0 bytes
 17818 ;; Hardware stack levels used:    1
 17819 ;; Hardware stack levels required when called:    4
 17820 ;; This function calls:
 17821 ;;		_i2cHighScl
 17822 ;;		_i2cHighSda
 17823 ;;		_i2cLowScl
 17824 ;;		_i2cLowSda
 17825 ;; This function is called by:
 17826 ;;		_DS1621_Read_Temp
 17827 ;;		_DS3231_Read_Time
 17828 ;;		_DS3231_Write_Time
 17829 ;;		_DS3231_Read_Alarm_Time
 17830 ;;		_DS3231_Init
 17831 ;;		_DS3231_Write_Alarm_Time
 17832 ;;		_I2C_Write_Address_Read_One_Byte
 17833 ;;		_I2C_Write_Address_Write_One_Byte
 17834 ;;		_I2C_Write_Cmd_Only
 17835 ;;		_I2C_Write_Cmd_Write_Data
 17836 ;;		_DS3231_Read_Temp
 17837 ;;		_DS3231_Setup_Time
 17838 ;;		_I2C_Write_Cmd_Read_One_Byte
 17839 ;; This function uses a non-reentrant model
 17840 ;;
 17841                           
 17842                           	psect	text106
 17843  003C7A                     __ptext106:
 17844                           	opt stack 0
 17845  003C7A                     _I2C_Stop:
 17846                           	opt stack 23
 17847                           
 17848                           ;I2C.c: 86: i2cLowScl();
 17849                           
 17850                           ;incstack = 0
 17851  003C7A  ECC5  F01E         	call	_i2cLowScl	;wreg free
 17852                           
 17853                           ;I2C.c: 87: i2cLowSda();
 17854  003C7E  ECB2  F01E         	call	_i2cLowSda	;wreg free
 17855                           
 17856                           ;I2C.c: 88: i2cHighScl();
 17857  003C82  EC9C  F01E         	call	_i2cHighScl	;wreg free
 17858                           
 17859                           ;I2C.c: 89: i2cHighSda();
 17860  003C86  ECC9  F01E         	call	_i2cHighSda	;wreg free
 17861  003C8A  0012               	return		;funcret
 17862  003C8C                     __end_of_I2C_Stop:
 17863                           	opt stack 0
 17864                           tblptru	equ	0xFF8
 17865                           tblptrh	equ	0xFF7
 17866                           tblptrl	equ	0xFF6
 17867                           tablat	equ	0xFF5
 17868                           prodh	equ	0xFF4
 17869                           prodl	equ	0xFF3
 17870                           intcon	equ	0xFF2
 17871                           intcon2	equ	0xFF1
 17872                           intcon3	equ	0xFF0
 17873                           postinc0	equ	0xFEE
 17874                           wreg	equ	0xFE8
 17875                           postdec1	equ	0xFE5
 17876                           fsr1l	equ	0xFE1
 17877                           indf2	equ	0xFDF
 17878                           postinc2	equ	0xFDE
 17879                           postdec2	equ	0xFDD
 17880                           fsr2h	equ	0xFDA
 17881                           fsr2l	equ	0xFD9
 17882                           status	equ	0xFD8
 17883                           
 17884 ;; *************** function _I2C_Start *****************
 17885 ;; Defined at:
 17886 ;;		line 67 in file "I2C.c"
 17887 ;; Parameters:    Size  Location     Type
 17888 ;;		None
 17889 ;; Auto vars:     Size  Location     Type
 17890 ;;		None
 17891 ;; Return value:  Size  Location     Type
 17892 ;;		None               void
 17893 ;; Registers used:
 17894 ;;		wreg, cstack
 17895 ;; Tracked objects:
 17896 ;;		On entry : 0/0
 17897 ;;		On exit  : 0/0
 17898 ;;		Unchanged: 0/0
 17899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17900 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17901 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17902 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17903 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17904 ;;Total ram usage:        0 bytes
 17905 ;; Hardware stack levels used:    1
 17906 ;; Hardware stack levels required when called:    4
 17907 ;; This function calls:
 17908 ;;		_i2cHighScl
 17909 ;;		_i2cHighSda
 17910 ;;		_i2cLowScl
 17911 ;;		_i2cLowSda
 17912 ;; This function is called by:
 17913 ;;		_DS1621_Read_Temp
 17914 ;;		_DS3231_Read_Time
 17915 ;;		_DS3231_Write_Time
 17916 ;;		_DS3231_Read_Alarm_Time
 17917 ;;		_DS3231_Init
 17918 ;;		_DS3231_Write_Alarm_Time
 17919 ;;		_I2C_Write_Address_Read_One_Byte
 17920 ;;		_I2C_Write_Address_Write_One_Byte
 17921 ;;		_I2C_Write_Cmd_Only
 17922 ;;		_I2C_Write_Cmd_Write_Data
 17923 ;;		_DS3231_Read_Temp
 17924 ;;		_DS3231_Setup_Time
 17925 ;;		_I2C_Write_Cmd_Read_One_Byte
 17926 ;; This function uses a non-reentrant model
 17927 ;;
 17928                           
 17929                           	psect	text107
 17930  003C8C                     __ptext107:
 17931                           	opt stack 0
 17932  003C8C                     _I2C_Start:
 17933                           	opt stack 23
 17934                           
 17935                           ;I2C.c: 69: i2cHighSda();
 17936                           
 17937                           ;incstack = 0
 17938  003C8C  ECC9  F01E         	call	_i2cHighSda	;wreg free
 17939                           
 17940                           ;I2C.c: 70: i2cHighScl();
 17941  003C90  EC9C  F01E         	call	_i2cHighScl	;wreg free
 17942                           
 17943                           ;I2C.c: 71: i2cLowSda();
 17944  003C94  ECB2  F01E         	call	_i2cLowSda	;wreg free
 17945                           
 17946                           ;I2C.c: 72: i2cLowScl();
 17947  003C98  ECC5  F01E         	call	_i2cLowScl	;wreg free
 17948  003C9C  0012               	return		;funcret
 17949  003C9E                     __end_of_I2C_Start:
 17950                           	opt stack 0
 17951                           tblptru	equ	0xFF8
 17952                           tblptrh	equ	0xFF7
 17953                           tblptrl	equ	0xFF6
 17954                           tablat	equ	0xFF5
 17955                           prodh	equ	0xFF4
 17956                           prodl	equ	0xFF3
 17957                           intcon	equ	0xFF2
 17958                           intcon2	equ	0xFF1
 17959                           intcon3	equ	0xFF0
 17960                           postinc0	equ	0xFEE
 17961                           wreg	equ	0xFE8
 17962                           postdec1	equ	0xFE5
 17963                           fsr1l	equ	0xFE1
 17964                           indf2	equ	0xFDF
 17965                           postinc2	equ	0xFDE
 17966                           postdec2	equ	0xFDD
 17967                           fsr2h	equ	0xFDA
 17968                           fsr2l	equ	0xFD9
 17969                           status	equ	0xFD8
 17970                           
 17971 ;; *************** function _I2C_Read *****************
 17972 ;; Defined at:
 17973 ;;		line 16 in file "I2C.c"
 17974 ;; Parameters:    Size  Location     Type
 17975 ;;  ack             1    wreg     unsigned char 
 17976 ;; Auto vars:     Size  Location     Type
 17977 ;;  ack             1   16[COMRAM] unsigned char 
 17978 ;;  inByte          1   18[COMRAM] unsigned char 
 17979 ;;  n               1   17[COMRAM] unsigned char 
 17980 ;; Return value:  Size  Location     Type
 17981 ;;                  1    wreg      unsigned char 
 17982 ;; Registers used:
 17983 ;;		wreg, status,2, status,0, cstack
 17984 ;; Tracked objects:
 17985 ;;		On entry : 0/0
 17986 ;;		On exit  : 0/0
 17987 ;;		Unchanged: 0/0
 17988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17989 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17990 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17991 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17992 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17993 ;;Total ram usage:        3 bytes
 17994 ;; Hardware stack levels used:    1
 17995 ;; Hardware stack levels required when called:    5
 17996 ;; This function calls:
 17997 ;;		_i2cAck
 17998 ;;		_i2cHighScl
 17999 ;;		_i2cHighSda
 18000 ;;		_i2cLowScl
 18001 ;;		_i2cNack
 18002 ;; This function is called by:
 18003 ;;		_DS1621_Read_Temp
 18004 ;;		_DS3231_Read_Time
 18005 ;;		_DS3231_Read_Alarm_Time
 18006 ;;		_DS3231_Init
 18007 ;;		_I2C_Write_Address_Read_One_Byte
 18008 ;;		_DS3231_Read_Temp
 18009 ;;		_I2C_Write_Cmd_Read_One_Byte
 18010 ;; This function uses a non-reentrant model
 18011 ;;
 18012                           
 18013                           	psect	text108
 18014  00363E                     __ptext108:
 18015                           	opt stack 0
 18016  00363E                     _I2C_Read:
 18017                           	opt stack 22
 18018                           
 18019                           ;incstack = 0
 18020                           ;I2C_Read@ack stored from wreg
 18021  00363E  6E11               	movwf	I2C_Read@ack,c
 18022                           
 18023                           ;I2C.c: 18: unsigned char inByte, n;
 18024                           ;I2C.c: 19: i2cHighSda();
 18025  003640  ECC9  F01E         	call	_i2cHighSda	;wreg free
 18026                           
 18027                           ;I2C.c: 20: for (n=0; n<8; n++)
 18028  003644  0E00               	movlw	0
 18029  003646  6E12               	movwf	I2C_Read@n,c
 18030  003648                     l7949:
 18031  003648  0E07               	movlw	7
 18032  00364A  6412               	cpfsgt	I2C_Read@n,c
 18033  00364C  D001               	goto	l7953
 18034  00364E  D00F               	goto	l7967
 18035  003650                     l7953:
 18036                           
 18037                           ;I2C.c: 21: {
 18038                           ;I2C.c: 22: i2cHighScl();
 18039  003650  EC9C  F01E         	call	_i2cHighScl	;wreg free
 18040                           
 18041                           ;I2C.c: 24: if (PORTBbits.RB5)
 18042  003654  AA81               	btfss	3969,5,c	;volatile
 18043  003656  D003               	goto	l7959
 18044                           
 18045                           ;I2C.c: 25: inByte = (inByte << 1) | 0x01;
 18046  003658  80D8               	bsf	status,0,c
 18047  00365A  3613               	rlcf	I2C_Read@inByte,f,c
 18048  00365C  D004               	goto	l7961
 18049  00365E                     l7959:
 18050                           
 18051                           ;I2C.c: 26: else
 18052                           ;I2C.c: 27: inByte = inByte << 1;
 18053  00365E  5013               	movf	I2C_Read@inByte,w,c
 18054  003660  2413               	addwf	I2C_Read@inByte,w,c
 18055  003662  6E13               	movwf	I2C_Read@inByte,c
 18056  003664  D000               	goto	l7961
 18057  003666                     l7961:
 18058                           
 18059                           ;I2C.c: 28: i2cLowScl();
 18060  003666  ECC5  F01E         	call	_i2cLowScl	;wreg free
 18061  00366A  2A12               	incf	I2C_Read@n,f,c
 18062  00366C  D7ED               	goto	l7949
 18063  00366E                     l7967:
 18064                           
 18065                           ;I2C.c: 29: }
 18066                           ;I2C.c: 30: if (ack) i2cAck();
 18067  00366E  5011               	movf	I2C_Read@ack,w,c
 18068  003670  B4D8               	btfsc	status,2,c
 18069  003672  D003               	goto	l7971
 18070  003674  EC4F  F01E         	call	_i2cAck	;wreg free
 18071  003678  D003               	goto	l7973
 18072  00367A                     l7971:
 18073                           
 18074                           ;I2C.c: 31: else i2cNack();
 18075  00367A  ECAD  F01E         	call	_i2cNack	;wreg free
 18076  00367E  D000               	goto	l7973
 18077  003680                     l7973:
 18078                           
 18079                           ;I2C.c: 34: return(inByte);
 18080  003680  5013               	movf	I2C_Read@inByte,w,c
 18081  003682  D000               	goto	l208
 18082  003684                     l208:
 18083  003684  0012               	return		;funcret
 18084  003686                     __end_of_I2C_Read:
 18085                           	opt stack 0
 18086                           tblptru	equ	0xFF8
 18087                           tblptrh	equ	0xFF7
 18088                           tblptrl	equ	0xFF6
 18089                           tablat	equ	0xFF5
 18090                           prodh	equ	0xFF4
 18091                           prodl	equ	0xFF3
 18092                           intcon	equ	0xFF2
 18093                           intcon2	equ	0xFF1
 18094                           intcon3	equ	0xFF0
 18095                           postinc0	equ	0xFEE
 18096                           wreg	equ	0xFE8
 18097                           postdec1	equ	0xFE5
 18098                           fsr1l	equ	0xFE1
 18099                           indf2	equ	0xFDF
 18100                           postinc2	equ	0xFDE
 18101                           postdec2	equ	0xFDD
 18102                           fsr2h	equ	0xFDA
 18103                           fsr2l	equ	0xFD9
 18104                           status	equ	0xFD8
 18105                           
 18106 ;; *************** function _i2cNack *****************
 18107 ;; Defined at:
 18108 ;;		line 53 in file "I2C.c"
 18109 ;; Parameters:    Size  Location     Type
 18110 ;;		None
 18111 ;; Auto vars:     Size  Location     Type
 18112 ;;		None
 18113 ;; Return value:  Size  Location     Type
 18114 ;;		None               void
 18115 ;; Registers used:
 18116 ;;		wreg, cstack
 18117 ;; Tracked objects:
 18118 ;;		On entry : 0/0
 18119 ;;		On exit  : 0/0
 18120 ;;		Unchanged: 0/0
 18121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18122 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18123 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18124 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18125 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18126 ;;Total ram usage:        0 bytes
 18127 ;; Hardware stack levels used:    1
 18128 ;; Hardware stack levels required when called:    4
 18129 ;; This function calls:
 18130 ;;		_i2cHighScl
 18131 ;;		_i2cLowScl
 18132 ;; This function is called by:
 18133 ;;		_I2C_Read
 18134 ;; This function uses a non-reentrant model
 18135 ;;
 18136                           
 18137                           	psect	text109
 18138  003D5A                     __ptext109:
 18139                           	opt stack 0
 18140  003D5A                     _i2cNack:
 18141                           	opt stack 22
 18142                           
 18143                           ;I2C.c: 55: i2cHighScl();
 18144                           
 18145                           ;incstack = 0
 18146  003D5A  EC9C  F01E         	call	_i2cHighScl	;wreg free
 18147                           
 18148                           ;I2C.c: 56: i2cLowScl();
 18149  003D5E  ECC5  F01E         	call	_i2cLowScl	;wreg free
 18150  003D62  0012               	return		;funcret
 18151  003D64                     __end_of_i2cNack:
 18152                           	opt stack 0
 18153                           tblptru	equ	0xFF8
 18154                           tblptrh	equ	0xFF7
 18155                           tblptrl	equ	0xFF6
 18156                           tablat	equ	0xFF5
 18157                           prodh	equ	0xFF4
 18158                           prodl	equ	0xFF3
 18159                           intcon	equ	0xFF2
 18160                           intcon2	equ	0xFF1
 18161                           intcon3	equ	0xFF0
 18162                           postinc0	equ	0xFEE
 18163                           wreg	equ	0xFE8
 18164                           postdec1	equ	0xFE5
 18165                           fsr1l	equ	0xFE1
 18166                           indf2	equ	0xFDF
 18167                           postinc2	equ	0xFDE
 18168                           postdec2	equ	0xFDD
 18169                           fsr2h	equ	0xFDA
 18170                           fsr2l	equ	0xFD9
 18171                           status	equ	0xFD8
 18172                           
 18173 ;; *************** function _i2cAck *****************
 18174 ;; Defined at:
 18175 ;;		line 59 in file "I2C.c"
 18176 ;; Parameters:    Size  Location     Type
 18177 ;;		None
 18178 ;; Auto vars:     Size  Location     Type
 18179 ;;		None
 18180 ;; Return value:  Size  Location     Type
 18181 ;;		None               void
 18182 ;; Registers used:
 18183 ;;		wreg, cstack
 18184 ;; Tracked objects:
 18185 ;;		On entry : 0/0
 18186 ;;		On exit  : 0/0
 18187 ;;		Unchanged: 0/0
 18188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18189 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18190 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18191 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18192 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18193 ;;Total ram usage:        0 bytes
 18194 ;; Hardware stack levels used:    1
 18195 ;; Hardware stack levels required when called:    4
 18196 ;; This function calls:
 18197 ;;		_i2cHighScl
 18198 ;;		_i2cHighSda
 18199 ;;		_i2cLowScl
 18200 ;;		_i2cLowSda
 18201 ;; This function is called by:
 18202 ;;		_I2C_Read
 18203 ;; This function uses a non-reentrant model
 18204 ;;
 18205                           
 18206                           	psect	text110
 18207  003C9E                     __ptext110:
 18208                           	opt stack 0
 18209  003C9E                     _i2cAck:
 18210                           	opt stack 22
 18211                           
 18212                           ;I2C.c: 61: i2cLowSda();
 18213                           
 18214                           ;incstack = 0
 18215  003C9E  ECB2  F01E         	call	_i2cLowSda	;wreg free
 18216                           
 18217                           ;I2C.c: 62: i2cHighScl();
 18218  003CA2  EC9C  F01E         	call	_i2cHighScl	;wreg free
 18219                           
 18220                           ;I2C.c: 63: i2cLowScl();
 18221  003CA6  ECC5  F01E         	call	_i2cLowScl	;wreg free
 18222                           
 18223                           ;I2C.c: 64: i2cHighSda();
 18224  003CAA  ECC9  F01E         	call	_i2cHighSda	;wreg free
 18225  003CAE  0012               	return		;funcret
 18226  003CB0                     __end_of_i2cAck:
 18227                           	opt stack 0
 18228                           tblptru	equ	0xFF8
 18229                           tblptrh	equ	0xFF7
 18230                           tblptrl	equ	0xFF6
 18231                           tablat	equ	0xFF5
 18232                           prodh	equ	0xFF4
 18233                           prodl	equ	0xFF3
 18234                           intcon	equ	0xFF2
 18235                           intcon2	equ	0xFF1
 18236                           intcon3	equ	0xFF0
 18237                           postinc0	equ	0xFEE
 18238                           wreg	equ	0xFE8
 18239                           postdec1	equ	0xFE5
 18240                           fsr1l	equ	0xFE1
 18241                           indf2	equ	0xFDF
 18242                           postinc2	equ	0xFDE
 18243                           postdec2	equ	0xFDD
 18244                           fsr2h	equ	0xFDA
 18245                           fsr2l	equ	0xFD9
 18246                           status	equ	0xFD8
 18247                           
 18248 ;; *************** function _I2C_ReStart *****************
 18249 ;; Defined at:
 18250 ;;		line 75 in file "I2C.c"
 18251 ;; Parameters:    Size  Location     Type
 18252 ;;		None
 18253 ;; Auto vars:     Size  Location     Type
 18254 ;;		None
 18255 ;; Return value:  Size  Location     Type
 18256 ;;		None               void
 18257 ;; Registers used:
 18258 ;;		wreg, cstack
 18259 ;; Tracked objects:
 18260 ;;		On entry : 0/0
 18261 ;;		On exit  : 0/0
 18262 ;;		Unchanged: 0/0
 18263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18265 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18267 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18268 ;;Total ram usage:        0 bytes
 18269 ;; Hardware stack levels used:    1
 18270 ;; Hardware stack levels required when called:    4
 18271 ;; This function calls:
 18272 ;;		_i2cHighScl
 18273 ;;		_i2cHighSda
 18274 ;;		_i2cLowScl
 18275 ;;		_i2cLowSda
 18276 ;; This function is called by:
 18277 ;;		_DS1621_Read_Temp
 18278 ;;		_DS3231_Read_Time
 18279 ;;		_DS3231_Read_Alarm_Time
 18280 ;;		_DS3231_Init
 18281 ;;		_I2C_Write_Address_Read_One_Byte
 18282 ;;		_DS3231_Read_Temp
 18283 ;;		_I2C_Write_Cmd_Read_One_Byte
 18284 ;; This function uses a non-reentrant model
 18285 ;;
 18286                           
 18287                           	psect	text111
 18288  003BA4                     __ptext111:
 18289                           	opt stack 0
 18290  003BA4                     _I2C_ReStart:
 18291                           	opt stack 23
 18292                           
 18293                           ;I2C.c: 77: i2cLowScl();
 18294                           
 18295                           ;incstack = 0
 18296  003BA4  ECC5  F01E         	call	_i2cLowScl	;wreg free
 18297                           
 18298                           ;I2C.c: 78: i2cHighSda();
 18299  003BA8  ECC9  F01E         	call	_i2cHighSda	;wreg free
 18300                           
 18301                           ;I2C.c: 79: i2cHighScl();
 18302  003BAC  EC9C  F01E         	call	_i2cHighScl	;wreg free
 18303                           
 18304                           ;I2C.c: 80: i2cLowSda();
 18305  003BB0  ECB2  F01E         	call	_i2cLowSda	;wreg free
 18306                           
 18307                           ;I2C.c: 81: i2cLowScl();
 18308  003BB4  ECC5  F01E         	call	_i2cLowScl	;wreg free
 18309  003BB8  0012               	return		;funcret
 18310  003BBA                     __end_of_I2C_ReStart:
 18311                           	opt stack 0
 18312                           tblptru	equ	0xFF8
 18313                           tblptrh	equ	0xFF7
 18314                           tblptrl	equ	0xFF6
 18315                           tablat	equ	0xFF5
 18316                           prodh	equ	0xFF4
 18317                           prodl	equ	0xFF3
 18318                           intcon	equ	0xFF2
 18319                           intcon2	equ	0xFF1
 18320                           intcon3	equ	0xFF0
 18321                           postinc0	equ	0xFEE
 18322                           wreg	equ	0xFE8
 18323                           postdec1	equ	0xFE5
 18324                           fsr1l	equ	0xFE1
 18325                           indf2	equ	0xFDF
 18326                           postinc2	equ	0xFDE
 18327                           postdec2	equ	0xFDD
 18328                           fsr2h	equ	0xFDA
 18329                           fsr2l	equ	0xFD9
 18330                           status	equ	0xFD8
 18331                           
 18332 ;; *************** function _i2cLowSda *****************
 18333 ;; Defined at:
 18334 ;;		line 98 in file "I2C.c"
 18335 ;; Parameters:    Size  Location     Type
 18336 ;;		None
 18337 ;; Auto vars:     Size  Location     Type
 18338 ;;		None
 18339 ;; Return value:  Size  Location     Type
 18340 ;;		None               void
 18341 ;; Registers used:
 18342 ;;		None
 18343 ;; Tracked objects:
 18344 ;;		On entry : 0/0
 18345 ;;		On exit  : 0/0
 18346 ;;		Unchanged: 0/0
 18347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18348 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18349 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18350 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18351 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18352 ;;Total ram usage:        0 bytes
 18353 ;; Hardware stack levels used:    1
 18354 ;; Hardware stack levels required when called:    3
 18355 ;; This function calls:
 18356 ;;		Nothing
 18357 ;; This function is called by:
 18358 ;;		_I2C_Write
 18359 ;;		_i2cAck
 18360 ;;		_I2C_Start
 18361 ;;		_I2C_ReStart
 18362 ;;		_I2C_Stop
 18363 ;; This function uses a non-reentrant model
 18364 ;;
 18365                           
 18366                           	psect	text112
 18367  003D64                     __ptext112:
 18368                           	opt stack 0
 18369  003D64                     _i2cLowSda:
 18370                           	opt stack 23
 18371                           
 18372                           ;I2C.c: 100: PORTBbits.RB5 = 0;
 18373                           
 18374                           ;incstack = 0
 18375  003D64  9A81               	bcf	3969,5,c	;volatile
 18376                           
 18377                           ;I2C.c: 101: TRISBbits.RB5 = 0;
 18378  003D66  9A93               	bcf	3987,5,c	;volatile
 18379                           
 18380                           ;I2C.c: 102: _delay((unsigned long)((2)*(8000000/4000000.0)));
 18381  003D68  D000               	nop2		;2 cycle nop
 18382  003D6A  D000               	nop2		;2 cycle nop
 18383  003D6C  0012               	return		;funcret
 18384  003D6E                     __end_of_i2cLowSda:
 18385                           	opt stack 0
 18386                           tblptru	equ	0xFF8
 18387                           tblptrh	equ	0xFF7
 18388                           tblptrl	equ	0xFF6
 18389                           tablat	equ	0xFF5
 18390                           prodh	equ	0xFF4
 18391                           prodl	equ	0xFF3
 18392                           intcon	equ	0xFF2
 18393                           intcon2	equ	0xFF1
 18394                           intcon3	equ	0xFF0
 18395                           postinc0	equ	0xFEE
 18396                           wreg	equ	0xFE8
 18397                           postdec1	equ	0xFE5
 18398                           fsr1l	equ	0xFE1
 18399                           indf2	equ	0xFDF
 18400                           postinc2	equ	0xFDE
 18401                           postdec2	equ	0xFDD
 18402                           fsr2h	equ	0xFDA
 18403                           fsr2l	equ	0xFD9
 18404                           status	equ	0xFD8
 18405                           
 18406 ;; *************** function _i2cLowScl *****************
 18407 ;; Defined at:
 18408 ;;		line 111 in file "I2C.c"
 18409 ;; Parameters:    Size  Location     Type
 18410 ;;		None
 18411 ;; Auto vars:     Size  Location     Type
 18412 ;;		None
 18413 ;; Return value:  Size  Location     Type
 18414 ;;		None               void
 18415 ;; Registers used:
 18416 ;;		None
 18417 ;; Tracked objects:
 18418 ;;		On entry : 0/0
 18419 ;;		On exit  : 0/0
 18420 ;;		Unchanged: 0/0
 18421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18422 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18423 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18424 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18425 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18426 ;;Total ram usage:        0 bytes
 18427 ;; Hardware stack levels used:    1
 18428 ;; Hardware stack levels required when called:    3
 18429 ;; This function calls:
 18430 ;;		Nothing
 18431 ;; This function is called by:
 18432 ;;		_I2C_Read
 18433 ;;		_I2C_Write
 18434 ;;		_i2cNack
 18435 ;;		_i2cAck
 18436 ;;		_I2C_Start
 18437 ;;		_I2C_ReStart
 18438 ;;		_I2C_Stop
 18439 ;; This function uses a non-reentrant model
 18440 ;;
 18441                           
 18442                           	psect	text113
 18443  003D8A                     __ptext113:
 18444                           	opt stack 0
 18445  003D8A                     _i2cLowScl:
 18446                           	opt stack 23
 18447                           
 18448                           ;I2C.c: 113: PORTBbits.RB4 = 0;
 18449                           
 18450                           ;incstack = 0
 18451  003D8A  9881               	bcf	3969,4,c	;volatile
 18452                           
 18453                           ;I2C.c: 114: TRISBbits.RB4 = 0;
 18454  003D8C  9893               	bcf	3987,4,c	;volatile
 18455                           
 18456                           ;I2C.c: 115: _delay((unsigned long)((1)*(8000000/4000000.0)));
 18457  003D8E  D000               	nop2		;2 cycle nop
 18458  003D90  0012               	return		;funcret
 18459  003D92                     __end_of_i2cLowScl:
 18460                           	opt stack 0
 18461                           tblptru	equ	0xFF8
 18462                           tblptrh	equ	0xFF7
 18463                           tblptrl	equ	0xFF6
 18464                           tablat	equ	0xFF5
 18465                           prodh	equ	0xFF4
 18466                           prodl	equ	0xFF3
 18467                           intcon	equ	0xFF2
 18468                           intcon2	equ	0xFF1
 18469                           intcon3	equ	0xFF0
 18470                           postinc0	equ	0xFEE
 18471                           wreg	equ	0xFE8
 18472                           postdec1	equ	0xFE5
 18473                           fsr1l	equ	0xFE1
 18474                           indf2	equ	0xFDF
 18475                           postinc2	equ	0xFDE
 18476                           postdec2	equ	0xFDD
 18477                           fsr2h	equ	0xFDA
 18478                           fsr2l	equ	0xFD9
 18479                           status	equ	0xFD8
 18480                           
 18481 ;; *************** function _i2cHighSda *****************
 18482 ;; Defined at:
 18483 ;;		line 92 in file "I2C.c"
 18484 ;; Parameters:    Size  Location     Type
 18485 ;;		None
 18486 ;; Auto vars:     Size  Location     Type
 18487 ;;		None
 18488 ;; Return value:  Size  Location     Type
 18489 ;;		None               void
 18490 ;; Registers used:
 18491 ;;		None
 18492 ;; Tracked objects:
 18493 ;;		On entry : 0/0
 18494 ;;		On exit  : 0/0
 18495 ;;		Unchanged: 0/0
 18496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18497 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18498 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18499 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18500 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18501 ;;Total ram usage:        0 bytes
 18502 ;; Hardware stack levels used:    1
 18503 ;; Hardware stack levels required when called:    3
 18504 ;; This function calls:
 18505 ;;		Nothing
 18506 ;; This function is called by:
 18507 ;;		_I2C_Init
 18508 ;;		_I2C_Read
 18509 ;;		_I2C_Write
 18510 ;;		_i2cAck
 18511 ;;		_I2C_Start
 18512 ;;		_I2C_ReStart
 18513 ;;		_I2C_Stop
 18514 ;; This function uses a non-reentrant model
 18515 ;;
 18516                           
 18517                           	psect	text114
 18518  003D92                     __ptext114:
 18519                           	opt stack 0
 18520  003D92                     _i2cHighSda:
 18521                           	opt stack 23
 18522                           
 18523                           ;I2C.c: 94: TRISBbits.RB5 = 1;
 18524                           
 18525                           ;incstack = 0
 18526  003D92  8A93               	bsf	3987,5,c	;volatile
 18527                           
 18528                           ;I2C.c: 95: _delay((unsigned long)((2)*(8000000/4000000.0)));
 18529  003D94  D000               	nop2		;2 cycle nop
 18530  003D96  D000               	nop2		;2 cycle nop
 18531  003D98  0012               	return		;funcret
 18532  003D9A                     __end_of_i2cHighSda:
 18533                           	opt stack 0
 18534                           tblptru	equ	0xFF8
 18535                           tblptrh	equ	0xFF7
 18536                           tblptrl	equ	0xFF6
 18537                           tablat	equ	0xFF5
 18538                           prodh	equ	0xFF4
 18539                           prodl	equ	0xFF3
 18540                           intcon	equ	0xFF2
 18541                           intcon2	equ	0xFF1
 18542                           intcon3	equ	0xFF0
 18543                           postinc0	equ	0xFEE
 18544                           wreg	equ	0xFE8
 18545                           postdec1	equ	0xFE5
 18546                           fsr1l	equ	0xFE1
 18547                           indf2	equ	0xFDF
 18548                           postinc2	equ	0xFDE
 18549                           postdec2	equ	0xFDD
 18550                           fsr2h	equ	0xFDA
 18551                           fsr2l	equ	0xFD9
 18552                           status	equ	0xFD8
 18553                           
 18554 ;; *************** function _i2cHighScl *****************
 18555 ;; Defined at:
 18556 ;;		line 105 in file "I2C.c"
 18557 ;; Parameters:    Size  Location     Type
 18558 ;;		None
 18559 ;; Auto vars:     Size  Location     Type
 18560 ;;		None
 18561 ;; Return value:  Size  Location     Type
 18562 ;;		None               void
 18563 ;; Registers used:
 18564 ;;		wreg
 18565 ;; Tracked objects:
 18566 ;;		On entry : 0/0
 18567 ;;		On exit  : 0/0
 18568 ;;		Unchanged: 0/0
 18569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18570 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18571 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18572 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18573 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18574 ;;Total ram usage:        0 bytes
 18575 ;; Hardware stack levels used:    1
 18576 ;; Hardware stack levels required when called:    3
 18577 ;; This function calls:
 18578 ;;		Nothing
 18579 ;; This function is called by:
 18580 ;;		_I2C_Init
 18581 ;;		_I2C_Read
 18582 ;;		_I2C_Write
 18583 ;;		_i2cNack
 18584 ;;		_i2cAck
 18585 ;;		_I2C_Start
 18586 ;;		_I2C_ReStart
 18587 ;;		_I2C_Stop
 18588 ;; This function uses a non-reentrant model
 18589 ;;
 18590                           
 18591                           	psect	text115
 18592  003D38                     __ptext115:
 18593                           	opt stack 0
 18594  003D38                     _i2cHighScl:
 18595                           	opt stack 23
 18596                           
 18597                           ;I2C.c: 107: TRISBbits.RB4 = 1;
 18598                           
 18599                           ;incstack = 0
 18600  003D38  8893               	bsf	3987,4,c	;volatile
 18601                           
 18602                           ;I2C.c: 108: _delay((unsigned long)((10)*(8000000/4000000.0)));
 18603  003D3A  0E06               	movlw	6
 18604  003D3C                     u7377:
 18605  003D3C  2EE8               	decfsz	wreg,f,c
 18606  003D3E  D7FE               	goto	u7377
 18607  003D40  D000               	nop2		;nop
 18608  003D42  0012               	return		;funcret
 18609  003D44                     __end_of_i2cHighScl:
 18610                           	opt stack 0
 18611                           tblptru	equ	0xFF8
 18612                           tblptrh	equ	0xFF7
 18613                           tblptrl	equ	0xFF6
 18614                           tablat	equ	0xFF5
 18615                           prodh	equ	0xFF4
 18616                           prodl	equ	0xFF3
 18617                           intcon	equ	0xFF2
 18618                           intcon2	equ	0xFF1
 18619                           intcon3	equ	0xFF0
 18620                           postinc0	equ	0xFEE
 18621                           wreg	equ	0xFE8
 18622                           postdec1	equ	0xFE5
 18623                           fsr1l	equ	0xFE1
 18624                           indf2	equ	0xFDF
 18625                           postinc2	equ	0xFDE
 18626                           postdec2	equ	0xFDD
 18627                           fsr2h	equ	0xFDA
 18628                           fsr2l	equ	0xFD9
 18629                           status	equ	0xFD8
 18630                           
 18631 ;; *************** function _chkisr *****************
 18632 ;; Defined at:
 18633 ;;		line 40 in file "Interrupt.c"
 18634 ;; Parameters:    Size  Location     Type
 18635 ;;		None
 18636 ;; Auto vars:     Size  Location     Type
 18637 ;;		None
 18638 ;; Return value:  Size  Location     Type
 18639 ;;		None               void
 18640 ;; Registers used:
 18641 ;;		wreg, status,2, status,0, cstack
 18642 ;; Tracked objects:
 18643 ;;		On entry : 0/0
 18644 ;;		On exit  : 0/0
 18645 ;;		Unchanged: 0/0
 18646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18647 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18648 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18649 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18650 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18651 ;;Total ram usage:       14 bytes
 18652 ;; Hardware stack levels used:    1
 18653 ;; Hardware stack levels required when called:    2
 18654 ;; This function calls:
 18655 ;;		_INT0_isr
 18656 ;;		_INT1_isr
 18657 ;;		_INT2_isr
 18658 ;;		_TIMER1_isr
 18659 ;; This function is called by:
 18660 ;;		Interrupt level 2
 18661 ;; This function uses a non-reentrant model
 18662 ;;
 18663                           
 18664                           	psect	intcode
 18665  000008                     __pintcode:
 18666                           	opt stack 0
 18667  000008                     _chkisr:
 18668                           	opt stack 18
 18669                           
 18670                           ;incstack = 0
 18671  000008  CFFA F003          	movff	pclath,??_chkisr
 18672  00000C  CFFB F004          	movff	pclatu,??_chkisr+1
 18673  000010  CFE9 F005          	movff	fsr0l,??_chkisr+2
 18674  000014  ED68  F016         	call	int_func,f	;refresh shadow registers
 18675                           pclatu	equ	0xFFB
 18676                           pclath	equ	0xFFA
 18677                           tblptru	equ	0xFF8
 18678                           tblptrh	equ	0xFF7
 18679                           tblptrl	equ	0xFF6
 18680                           tablat	equ	0xFF5
 18681                           prodh	equ	0xFF4
 18682                           prodl	equ	0xFF3
 18683                           intcon	equ	0xFF2
 18684                           intcon2	equ	0xFF1
 18685                           intcon3	equ	0xFF0
 18686                           postinc0	equ	0xFEE
 18687                           fsr0l	equ	0xFE9
 18688                           wreg	equ	0xFE8
 18689                           postdec1	equ	0xFE5
 18690                           fsr1l	equ	0xFE1
 18691                           indf2	equ	0xFDF
 18692                           postinc2	equ	0xFDE
 18693                           postdec2	equ	0xFDD
 18694                           fsr2h	equ	0xFDA
 18695                           fsr2l	equ	0xFD9
 18696                           status	equ	0xFD8
 18697                           
 18698                           	psect	intcode_body
 18699  002CD0                     __pintcode_body:
 18700                           	opt stack 18
 18701  002CD0                     int_func:
 18702                           	opt stack 18
 18703  002CD0  0006               	pop		; remove dummy address from shadow register refresh
 18704  002CD2  CFEA F006          	movff	fsr0h,??_chkisr+3
 18705  002CD6  CFE1 F007          	movff	fsr1l,??_chkisr+4
 18706  002CDA  CFE2 F008          	movff	fsr1h,??_chkisr+5
 18707  002CDE  CFD9 F009          	movff	fsr2l,??_chkisr+6
 18708  002CE2  CFDA F00A          	movff	fsr2h,??_chkisr+7
 18709  002CE6  CFF3 F00B          	movff	prodl,??_chkisr+8
 18710  002CEA  CFF4 F00C          	movff	prodh,??_chkisr+9
 18711  002CEE  CFF6 F00D          	movff	tblptrl,??_chkisr+10
 18712  002CF2  CFF7 F00E          	movff	tblptrh,??_chkisr+11
 18713  002CF6  CFF8 F00F          	movff	tblptru,??_chkisr+12
 18714  002CFA  CFF5 F010          	movff	tablat,??_chkisr+13
 18715                           
 18716                           ;Interrupt.c: 43: if (INTCONbits.INT0IF == 1) INT0_isr();
 18717  002CFE  A2F2               	btfss	intcon,1,c	;volatile
 18718  002D00  D003               	goto	i2l7397
 18719  002D02  EC11  F00B         	call	_INT0_isr	;wreg free
 18720  002D06  D000               	goto	i2l7397
 18721  002D08                     i2l7397:
 18722                           
 18723                           ;Interrupt.c: 44: if (INTCON3bits.INT1IF == 1) INT1_isr();
 18724  002D08  A0F0               	btfss	intcon3,0,c	;volatile
 18725  002D0A  D003               	goto	i2l7401
 18726  002D0C  ECBC  F01E         	call	_INT1_isr	;wreg free
 18727  002D10  D000               	goto	i2l7401
 18728  002D12                     i2l7401:
 18729                           
 18730                           ;Interrupt.c: 45: if (INTCON3bits.INT2IF == 1) INT2_isr();
 18731  002D12  A2F0               	btfss	intcon3,1,c	;volatile
 18732  002D14  D003               	goto	i2l7405
 18733  002D16  ECB7  F01E         	call	_INT2_isr	;wreg free
 18734  002D1A  D000               	goto	i2l7405
 18735  002D1C                     i2l7405:
 18736                           
 18737                           ;Interrupt.c: 47: if (PIR1bits.TMR1IF == 1) TIMER1_isr();
 18738  002D1C  A09E               	btfss	3998,0,c	;volatile
 18739  002D1E  D003               	goto	i2l52
 18740  002D20  ECA2  F01E         	call	_TIMER1_isr	;wreg free
 18741  002D24  D000               	goto	i2l52
 18742  002D26                     i2l52:
 18743  002D26  C010  FFF5         	movff	??_chkisr+13,tablat
 18744  002D2A  C00F  FFF8         	movff	??_chkisr+12,tblptru
 18745  002D2E  C00E  FFF7         	movff	??_chkisr+11,tblptrh
 18746  002D32  C00D  FFF6         	movff	??_chkisr+10,tblptrl
 18747  002D36  C00C  FFF4         	movff	??_chkisr+9,prodh
 18748  002D3A  C00B  FFF3         	movff	??_chkisr+8,prodl
 18749  002D3E  C00A  FFDA         	movff	??_chkisr+7,fsr2h
 18750  002D42  C009  FFD9         	movff	??_chkisr+6,fsr2l
 18751  002D46  C008  FFE2         	movff	??_chkisr+5,fsr1h
 18752  002D4A  C007  FFE1         	movff	??_chkisr+4,fsr1l
 18753  002D4E  C006  FFEA         	movff	??_chkisr+3,fsr0h
 18754  002D52  C005  FFE9         	movff	??_chkisr+2,fsr0l
 18755  002D56  C004  FFFB         	movff	??_chkisr+1,pclatu
 18756  002D5A  C003  FFFA         	movff	??_chkisr,pclath
 18757  002D5E  0011               	retfie		f
 18758  002D60                     __end_of_chkisr:
 18759                           	opt stack 0
 18760                           pclatu	equ	0xFFB
 18761                           pclath	equ	0xFFA
 18762                           tblptru	equ	0xFF8
 18763                           tblptrh	equ	0xFF7
 18764                           tblptrl	equ	0xFF6
 18765                           tablat	equ	0xFF5
 18766                           prodh	equ	0xFF4
 18767                           prodl	equ	0xFF3
 18768                           intcon	equ	0xFF2
 18769                           intcon2	equ	0xFF1
 18770                           intcon3	equ	0xFF0
 18771                           postinc0	equ	0xFEE
 18772                           fsr0h	equ	0xFEA
 18773                           fsr0l	equ	0xFE9
 18774                           wreg	equ	0xFE8
 18775                           postdec1	equ	0xFE5
 18776                           fsr1h	equ	0xFE2
 18777                           fsr1l	equ	0xFE1
 18778                           indf2	equ	0xFDF
 18779                           postinc2	equ	0xFDE
 18780                           postdec2	equ	0xFDD
 18781                           fsr2h	equ	0xFDA
 18782                           fsr2l	equ	0xFD9
 18783                           status	equ	0xFD8
 18784                           
 18785 ;; *************** function _TIMER1_isr *****************
 18786 ;; Defined at:
 18787 ;;		line 51 in file "Interrupt.c"
 18788 ;; Parameters:    Size  Location     Type
 18789 ;;		None
 18790 ;; Auto vars:     Size  Location     Type
 18791 ;;		None
 18792 ;; Return value:  Size  Location     Type
 18793 ;;		None               void
 18794 ;; Registers used:
 18795 ;;		wreg, status,2
 18796 ;; Tracked objects:
 18797 ;;		On entry : 0/0
 18798 ;;		On exit  : 0/0
 18799 ;;		Unchanged: 0/0
 18800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18801 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18802 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18803 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18804 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18805 ;;Total ram usage:        0 bytes
 18806 ;; Hardware stack levels used:    1
 18807 ;; This function calls:
 18808 ;;		Nothing
 18809 ;; This function is called by:
 18810 ;;		_chkisr
 18811 ;; This function uses a non-reentrant model
 18812 ;;
 18813                           
 18814                           	psect	text117
 18815  003D44                     __ptext117:
 18816                           	opt stack 0
 18817  003D44                     _TIMER1_isr:
 18818                           	opt stack 19
 18819                           
 18820                           ;Interrupt.c: 53: Nec_state = 0;
 18821                           
 18822                           ;incstack = 0
 18823  003D44  0E00               	movlw	0
 18824  003D46  6E52               	movwf	_Nec_state,c
 18825                           
 18826                           ;Interrupt.c: 54: INTCON2bits.INTEDG0 = 0;
 18827  003D48  9CF1               	bcf	intcon2,6,c	;volatile
 18828                           
 18829                           ;Interrupt.c: 55: T1CONbits.TMR1ON = 0;
 18830  003D4A  90CD               	bcf	4045,0,c	;volatile
 18831                           
 18832                           ;Interrupt.c: 56: PIR1bits.TMR1IF = 0;
 18833  003D4C  909E               	bcf	3998,0,c	;volatile
 18834  003D4E  0012               	return		;funcret
 18835  003D50                     __end_of_TIMER1_isr:
 18836                           	opt stack 0
 18837                           pclatu	equ	0xFFB
 18838                           pclath	equ	0xFFA
 18839                           tblptru	equ	0xFF8
 18840                           tblptrh	equ	0xFF7
 18841                           tblptrl	equ	0xFF6
 18842                           tablat	equ	0xFF5
 18843                           prodh	equ	0xFF4
 18844                           prodl	equ	0xFF3
 18845                           intcon	equ	0xFF2
 18846                           intcon2	equ	0xFF1
 18847                           intcon3	equ	0xFF0
 18848                           postinc0	equ	0xFEE
 18849                           fsr0h	equ	0xFEA
 18850                           fsr0l	equ	0xFE9
 18851                           wreg	equ	0xFE8
 18852                           postdec1	equ	0xFE5
 18853                           fsr1h	equ	0xFE2
 18854                           fsr1l	equ	0xFE1
 18855                           indf2	equ	0xFDF
 18856                           postinc2	equ	0xFDE
 18857                           postdec2	equ	0xFDD
 18858                           fsr2h	equ	0xFDA
 18859                           fsr2l	equ	0xFD9
 18860                           status	equ	0xFD8
 18861                           
 18862 ;; *************** function _INT2_isr *****************
 18863 ;; Defined at:
 18864 ;;		line 172 in file "Interrupt.c"
 18865 ;; Parameters:    Size  Location     Type
 18866 ;;		None
 18867 ;; Auto vars:     Size  Location     Type
 18868 ;;		None
 18869 ;; Return value:  Size  Location     Type
 18870 ;;		None               void
 18871 ;; Registers used:
 18872 ;;		wreg, status,2
 18873 ;; Tracked objects:
 18874 ;;		On entry : 0/0
 18875 ;;		On exit  : 0/0
 18876 ;;		Unchanged: 0/0
 18877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18878 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18879 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18880 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18881 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18882 ;;Total ram usage:        0 bytes
 18883 ;; Hardware stack levels used:    1
 18884 ;; This function calls:
 18885 ;;		Nothing
 18886 ;; This function is called by:
 18887 ;;		_chkisr
 18888 ;; This function uses a non-reentrant model
 18889 ;;
 18890                           
 18891                           	psect	text118
 18892  003D6E                     __ptext118:
 18893                           	opt stack 0
 18894  003D6E                     _INT2_isr:
 18895                           	opt stack 19
 18896                           
 18897                           ;Interrupt.c: 175: INTCON3bits.INT2IF=0;
 18898                           
 18899                           ;incstack = 0
 18900  003D6E  92F0               	bcf	intcon3,1,c	;volatile
 18901                           
 18902                           ;Interrupt.c: 176: INT2_flag = 1;
 18903  003D70  0E01               	movlw	1
 18904  003D72  0100               	movlb	0	; () banked
 18905  003D74  6FF8               	movwf	_INT2_flag& (0+255),b
 18906                           
 18907                           ; BSR set to: 0
 18908  003D76  0012               	return		;funcret
 18909  003D78                     __end_of_INT2_isr:
 18910                           	opt stack 0
 18911                           pclatu	equ	0xFFB
 18912                           pclath	equ	0xFFA
 18913                           tblptru	equ	0xFF8
 18914                           tblptrh	equ	0xFF7
 18915                           tblptrl	equ	0xFF6
 18916                           tablat	equ	0xFF5
 18917                           prodh	equ	0xFF4
 18918                           prodl	equ	0xFF3
 18919                           intcon	equ	0xFF2
 18920                           intcon2	equ	0xFF1
 18921                           intcon3	equ	0xFF0
 18922                           postinc0	equ	0xFEE
 18923                           fsr0h	equ	0xFEA
 18924                           fsr0l	equ	0xFE9
 18925                           wreg	equ	0xFE8
 18926                           postdec1	equ	0xFE5
 18927                           fsr1h	equ	0xFE2
 18928                           fsr1l	equ	0xFE1
 18929                           indf2	equ	0xFDF
 18930                           postinc2	equ	0xFDE
 18931                           postdec2	equ	0xFDD
 18932                           fsr2h	equ	0xFDA
 18933                           fsr2l	equ	0xFD9
 18934                           status	equ	0xFD8
 18935                           
 18936 ;; *************** function _INT1_isr *****************
 18937 ;; Defined at:
 18938 ;;		line 165 in file "Interrupt.c"
 18939 ;; Parameters:    Size  Location     Type
 18940 ;;		None
 18941 ;; Auto vars:     Size  Location     Type
 18942 ;;		None
 18943 ;; Return value:  Size  Location     Type
 18944 ;;		None               void
 18945 ;; Registers used:
 18946 ;;		wreg, status,2
 18947 ;; Tracked objects:
 18948 ;;		On entry : 0/0
 18949 ;;		On exit  : 0/0
 18950 ;;		Unchanged: 0/0
 18951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18952 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18953 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18954 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18955 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18956 ;;Total ram usage:        0 bytes
 18957 ;; Hardware stack levels used:    1
 18958 ;; This function calls:
 18959 ;;		Nothing
 18960 ;; This function is called by:
 18961 ;;		_chkisr
 18962 ;; This function uses a non-reentrant model
 18963 ;;
 18964                           
 18965                           	psect	text119
 18966  003D78                     __ptext119:
 18967                           	opt stack 0
 18968  003D78                     _INT1_isr:
 18969                           	opt stack 19
 18970                           
 18971                           ;Interrupt.c: 168: INTCON3bits.INT1IF=0;
 18972                           
 18973                           ; BSR set to: 0
 18974                           ;incstack = 0
 18975  003D78  90F0               	bcf	intcon3,0,c	;volatile
 18976                           
 18977                           ;Interrupt.c: 169: INT1_flag = 1;
 18978  003D7A  0E01               	movlw	1
 18979  003D7C  0100               	movlb	0	; () banked
 18980  003D7E  6FF7               	movwf	_INT1_flag& (0+255),b
 18981                           
 18982                           ; BSR set to: 0
 18983  003D80  0012               	return		;funcret
 18984  003D82                     __end_of_INT1_isr:
 18985                           	opt stack 0
 18986                           pclatu	equ	0xFFB
 18987                           pclath	equ	0xFFA
 18988                           tblptru	equ	0xFF8
 18989                           tblptrh	equ	0xFF7
 18990                           tblptrl	equ	0xFF6
 18991                           tablat	equ	0xFF5
 18992                           prodh	equ	0xFF4
 18993                           prodl	equ	0xFF3
 18994                           intcon	equ	0xFF2
 18995                           intcon2	equ	0xFF1
 18996                           intcon3	equ	0xFF0
 18997                           postinc0	equ	0xFEE
 18998                           fsr0h	equ	0xFEA
 18999                           fsr0l	equ	0xFE9
 19000                           wreg	equ	0xFE8
 19001                           postdec1	equ	0xFE5
 19002                           fsr1h	equ	0xFE2
 19003                           fsr1l	equ	0xFE1
 19004                           indf2	equ	0xFDF
 19005                           postinc2	equ	0xFDE
 19006                           postdec2	equ	0xFDD
 19007                           fsr2h	equ	0xFDA
 19008                           fsr2l	equ	0xFD9
 19009                           status	equ	0xFD8
 19010                           
 19011 ;; *************** function _INT0_isr *****************
 19012 ;; Defined at:
 19013 ;;		line 65 in file "Interrupt.c"
 19014 ;; Parameters:    Size  Location     Type
 19015 ;;		None
 19016 ;; Auto vars:     Size  Location     Type
 19017 ;;		None
 19018 ;; Return value:  Size  Location     Type
 19019 ;;		None               void
 19020 ;; Registers used:
 19021 ;;		wreg, status,2, status,0, cstack
 19022 ;; Tracked objects:
 19023 ;;		On entry : 0/0
 19024 ;;		On exit  : 0/0
 19025 ;;		Unchanged: 0/0
 19026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19027 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19028 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19029 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19030 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19031 ;;Total ram usage:        2 bytes
 19032 ;; Hardware stack levels used:    1
 19033 ;; Hardware stack levels required when called:    1
 19034 ;; This function calls:
 19035 ;;		_force_nec_state0
 19036 ;; This function is called by:
 19037 ;;		_chkisr
 19038 ;; This function uses a non-reentrant model
 19039 ;;
 19040                           
 19041                           	psect	text120
 19042  001622                     __ptext120:
 19043                           	opt stack 0
 19044  001622                     _INT0_isr:
 19045                           	opt stack 18
 19046                           
 19047                           ;Interrupt.c: 69: INTCONbits.INT0IF = 0;
 19048                           
 19049                           ; BSR set to: 0
 19050                           ;incstack = 0
 19051  001622  92F2               	bcf	intcon,1,c	;volatile
 19052                           
 19053                           ;Interrupt.c: 70: if (Nec_state != 0)
 19054  001624  5052               	movf	_Nec_state,w,c
 19055  001626  B4D8               	btfsc	status,2,c
 19056  001628  D0A6               	goto	i2l6875
 19057                           
 19058                           ;Interrupt.c: 71: {
 19059                           ;Interrupt.c: 72: Time_Elapsed = (TMR1H << 8) | TMR1L;
 19060  00162A  50CE               	movf	4046,w,c	;volatile
 19061  00162C  CFCF F001          	movff	4047,??_INT0_isr	;volatile
 19062  001630  6A02               	clrf	(??_INT0_isr+1)& (0+255),c
 19063  001632  C001  F002         	movff	??_INT0_isr,??_INT0_isr+1
 19064  001636  6A01               	clrf	??_INT0_isr,c
 19065  001638  1001               	iorwf	??_INT0_isr,w,c
 19066  00163A  6E4A               	movwf	_Time_Elapsed,c
 19067  00163C  5002               	movf	??_INT0_isr+1,w,c
 19068  00163E  6E4B               	movwf	_Time_Elapsed+1,c
 19069                           
 19070                           ;Interrupt.c: 73: TMR1H = 0;
 19071  001640  0E00               	movlw	0
 19072  001642  6ECF               	movwf	4047,c	;volatile
 19073                           
 19074                           ;Interrupt.c: 74: TMR1L = 0;
 19075  001644  0E00               	movlw	0
 19076  001646  6ECE               	movwf	4046,c	;volatile
 19077                           
 19078                           ;Interrupt.c: 75: }
 19079                           ;Interrupt.c: 77: switch(Nec_state)
 19080  001648  D096               	goto	i2l6875
 19081  00164A                     i2l6803:
 19082                           
 19083                           ;Interrupt.c: 80: {
 19084                           ;Interrupt.c: 81: TMR1H = 0;
 19085  00164A  0E00               	movlw	0
 19086  00164C  6ECF               	movwf	4047,c	;volatile
 19087                           
 19088                           ;Interrupt.c: 82: TMR1L = 0;
 19089  00164E  0E00               	movlw	0
 19090  001650  6ECE               	movwf	4046,c	;volatile
 19091                           
 19092                           ;Interrupt.c: 83: PIR1bits.TMR1IF = 0;
 19093  001652  909E               	bcf	3998,0,c	;volatile
 19094                           
 19095                           ;Interrupt.c: 84: T1CON= 0x90;
 19096  001654  0E90               	movlw	144
 19097  001656  6ECD               	movwf	4045,c	;volatile
 19098                           
 19099                           ;Interrupt.c: 85: T1CONbits.TMR1ON = 1;
 19100  001658  80CD               	bsf	4045,0,c	;volatile
 19101                           
 19102                           ;Interrupt.c: 86: bit_count = 0;
 19103  00165A  0E00               	movlw	0
 19104  00165C  0100               	movlb	0	; () banked
 19105  00165E  6FFD               	movwf	_bit_count& (0+255),b
 19106                           
 19107                           ;Interrupt.c: 87: Nec_code = 0;
 19108  001660  0E00               	movlw	0
 19109  001662  0100               	movlb	0	; () banked
 19110  001664  6FE3               	movwf	_Nec_code& (0+255),b
 19111  001666  0E00               	movlw	0
 19112  001668  6FE4               	movwf	(_Nec_code+1)& (0+255),b
 19113  00166A  0E00               	movlw	0
 19114  00166C  6FE5               	movwf	(_Nec_code+2)& (0+255),b
 19115  00166E  0E00               	movlw	0
 19116  001670  6FE6               	movwf	(_Nec_code+3)& (0+255),b
 19117                           
 19118                           ;Interrupt.c: 88: Nec_state = 1;
 19119  001672  0E01               	movlw	1
 19120  001674  6E52               	movwf	_Nec_state,c
 19121  001676  D027               	goto	i2l6833
 19122                           
 19123                           ; BSR set to: 0
 19124                           ;Interrupt.c: 90: return;
 19125                           
 19126                           ; BSR set to: 0
 19127                           ;Interrupt.c: 89: INTCON2bits.INTEDG0 = 1;
 19128  001678  D08F               	goto	i2l64
 19129  00167A                     i2l6813:
 19130                           
 19131                           ;Interrupt.c: 94: {
 19132                           ;Interrupt.c: 95: if (Time_Elapsed > 8500 && Time_Elapsed < 9500)
 19133  00167A  0E35               	movlw	53
 19134  00167C  5C4A               	subwf	_Time_Elapsed,w,c
 19135  00167E  0E21               	movlw	33
 19136  001680  584B               	subwfb	_Time_Elapsed+1,w,c
 19137  001682  A0D8               	btfss	status,0,c
 19138  001684  D009               	goto	i2l6819
 19139  001686  0E1C               	movlw	28
 19140  001688  5C4A               	subwf	_Time_Elapsed,w,c
 19141  00168A  0E25               	movlw	37
 19142  00168C  584B               	subwfb	_Time_Elapsed+1,w,c
 19143  00168E  B0D8               	btfsc	status,0,c
 19144  001690  D003               	goto	i2l6819
 19145                           
 19146                           ;Interrupt.c: 96: {
 19147                           ;Interrupt.c: 97: Nec_state = 2;
 19148  001692  0E02               	movlw	2
 19149  001694  6E52               	movwf	_Nec_state,c
 19150                           
 19151                           ;Interrupt.c: 98: }
 19152  001696  D02A               	goto	i2l6845
 19153  001698                     i2l6819:
 19154                           
 19155                           ;Interrupt.c: 99: else
 19156                           ;Interrupt.c: 100: {
 19157                           ;Interrupt.c: 101: force_nec_state0();
 19158  001698  ECCD  F01E         	call	_force_nec_state0	;wreg free
 19159  00169C  D027               	goto	i2l6845
 19160  00169E  D026               	goto	i2l6845
 19161                           
 19162                           ;Interrupt.c: 104: return;
 19163                           
 19164                           ;Interrupt.c: 102: }
 19165                           ;Interrupt.c: 103: INTCON2bits.INTEDG0 = 0;
 19166  0016A0  D07B               	goto	i2l64
 19167  0016A2                     i2l6825:
 19168                           
 19169                           ;Interrupt.c: 108: {
 19170                           ;Interrupt.c: 109: if (Time_Elapsed > 4000 && Time_Elapsed < 5000 )
 19171  0016A2  0EA1               	movlw	161
 19172  0016A4  5C4A               	subwf	_Time_Elapsed,w,c
 19173  0016A6  0E0F               	movlw	15
 19174  0016A8  584B               	subwfb	_Time_Elapsed+1,w,c
 19175  0016AA  A0D8               	btfss	status,0,c
 19176  0016AC  D009               	goto	i2l6831
 19177  0016AE  0E88               	movlw	136
 19178  0016B0  5C4A               	subwf	_Time_Elapsed,w,c
 19179  0016B2  0E13               	movlw	19
 19180  0016B4  584B               	subwfb	_Time_Elapsed+1,w,c
 19181  0016B6  B0D8               	btfsc	status,0,c
 19182  0016B8  D003               	goto	i2l6831
 19183                           
 19184                           ;Interrupt.c: 110: {
 19185                           ;Interrupt.c: 111: Nec_state = 3;
 19186  0016BA  0E03               	movlw	3
 19187  0016BC  6E52               	movwf	_Nec_state,c
 19188                           
 19189                           ;Interrupt.c: 112: }
 19190  0016BE  D003               	goto	i2l6833
 19191  0016C0                     i2l6831:
 19192                           
 19193                           ;Interrupt.c: 113: else
 19194                           ;Interrupt.c: 114: {
 19195                           ;Interrupt.c: 115: force_nec_state0();
 19196  0016C0  ECCD  F01E         	call	_force_nec_state0	;wreg free
 19197  0016C4  D000               	goto	i2l6833
 19198  0016C6                     i2l6833:
 19199                           
 19200                           ;Interrupt.c: 116: }
 19201                           ;Interrupt.c: 117: INTCON2bits.INTEDG0 = 1;
 19202  0016C6  8CF1               	bsf	intcon2,6,c	;volatile
 19203                           
 19204                           ;Interrupt.c: 118: return;
 19205  0016C8  D067               	goto	i2l64
 19206  0016CA                     i2l6837:
 19207                           
 19208                           ;Interrupt.c: 122: {
 19209                           ;Interrupt.c: 123: if (Time_Elapsed > 400 && Time_Elapsed < 700)
 19210  0016CA  0E91               	movlw	145
 19211  0016CC  5C4A               	subwf	_Time_Elapsed,w,c
 19212  0016CE  0E01               	movlw	1
 19213  0016D0  584B               	subwfb	_Time_Elapsed+1,w,c
 19214  0016D2  A0D8               	btfss	status,0,c
 19215  0016D4  D008               	goto	i2l6843
 19216  0016D6  0EBC               	movlw	188
 19217  0016D8  5C4A               	subwf	_Time_Elapsed,w,c
 19218  0016DA  0E02               	movlw	2
 19219  0016DC  584B               	subwfb	_Time_Elapsed+1,w,c
 19220  0016DE  B0D8               	btfsc	status,0,c
 19221  0016E0  D002               	goto	i2l6843
 19222                           
 19223                           ;Interrupt.c: 124: {
 19224                           ;Interrupt.c: 125: Nec_state = 4;
 19225  0016E2  0E04               	movlw	4
 19226  0016E4  D7D7               	goto	L8
 19227  0016E6                     i2l6843:
 19228                           
 19229                           ;Interrupt.c: 127: else
 19230                           ;Interrupt.c: 128: {
 19231                           ;Interrupt.c: 129: force_nec_state0();
 19232  0016E6  ECCD  F01E         	call	_force_nec_state0	;wreg free
 19233  0016EA  D000               	goto	i2l6845
 19234  0016EC                     i2l6845:
 19235                           
 19236                           ;Interrupt.c: 130: }
 19237                           ;Interrupt.c: 131: INTCON2bits.INTEDG0 = 0;
 19238  0016EC  9CF1               	bcf	intcon2,6,c	;volatile
 19239                           
 19240                           ;Interrupt.c: 132: return;
 19241  0016EE  D054               	goto	i2l64
 19242  0016F0                     i2l6849:
 19243                           
 19244                           ;Interrupt.c: 136: {
 19245                           ;Interrupt.c: 137: if (Time_Elapsed >= 400 && Time_Elapsed <= 1800)
 19246  0016F0  0E90               	movlw	144
 19247  0016F2  5C4A               	subwf	_Time_Elapsed,w,c
 19248  0016F4  0E01               	movlw	1
 19249  0016F6  584B               	subwfb	_Time_Elapsed+1,w,c
 19250  0016F8  A0D8               	btfss	status,0,c
 19251  0016FA  D036               	goto	i2l6865
 19252  0016FC  0E09               	movlw	9
 19253  0016FE  5C4A               	subwf	_Time_Elapsed,w,c
 19254  001700  0E07               	movlw	7
 19255  001702  584B               	subwfb	_Time_Elapsed+1,w,c
 19256  001704  B0D8               	btfsc	status,0,c
 19257  001706  D030               	goto	i2l6865
 19258                           
 19259                           ;Interrupt.c: 138: {
 19260                           ;Interrupt.c: 139: Nec_code = Nec_code<<1;
 19261  001708  90D8               	bcf	status,0,c
 19262  00170A  0100               	movlb	0	; () banked
 19263  00170C  35E3               	rlcf	_Nec_code& (0+255),w,b
 19264  00170E  0100               	movlb	0	; () banked
 19265  001710  6FE3               	movwf	_Nec_code& (0+255),b
 19266  001712  0100               	movlb	0	; () banked
 19267  001714  35E4               	rlcf	(_Nec_code+1)& (0+255),w,b
 19268  001716  0100               	movlb	0	; () banked
 19269  001718  6FE4               	movwf	(_Nec_code+1)& (0+255),b
 19270  00171A  0100               	movlb	0	; () banked
 19271  00171C  35E5               	rlcf	(_Nec_code+2)& (0+255),w,b
 19272  00171E  0100               	movlb	0	; () banked
 19273  001720  6FE5               	movwf	(_Nec_code+2)& (0+255),b
 19274  001722  0100               	movlb	0	; () banked
 19275  001724  35E6               	rlcf	(_Nec_code+3)& (0+255),w,b
 19276  001726  0100               	movlb	0	; () banked
 19277  001728  6FE6               	movwf	(_Nec_code+3)& (0+255),b
 19278                           
 19279                           ;Interrupt.c: 140: if ( Time_Elapsed > 1000)
 19280  00172A  0EE9               	movlw	233
 19281  00172C  5C4A               	subwf	_Time_Elapsed,w,c
 19282  00172E  0E03               	movlw	3
 19283  001730  584B               	subwfb	_Time_Elapsed+1,w,c
 19284  001732  A0D8               	btfss	status,0,c
 19285  001734  D008               	goto	i2l6857
 19286                           
 19287                           ; BSR set to: 0
 19288                           ;Interrupt.c: 141: {
 19289                           ;Interrupt.c: 142: Nec_code++;
 19290  001736  0E01               	movlw	1
 19291  001738  0100               	movlb	0	; () banked
 19292  00173A  27E3               	addwf	_Nec_code& (0+255),f,b
 19293  00173C  0E00               	movlw	0
 19294  00173E  23E4               	addwfc	(_Nec_code+1)& (0+255),f,b
 19295  001740  23E5               	addwfc	(_Nec_code+2)& (0+255),f,b
 19296  001742  23E6               	addwfc	(_Nec_code+3)& (0+255),f,b
 19297  001744  D000               	goto	i2l6857
 19298  001746                     i2l6857:
 19299                           
 19300                           ; BSR set to: 0
 19301                           ;Interrupt.c: 143: }
 19302                           ;Interrupt.c: 144: bit_count++;
 19303  001746  0100               	movlb	0	; () banked
 19304  001748  2BFD               	incf	_bit_count& (0+255),f,b
 19305                           
 19306                           ; BSR set to: 0
 19307                           ;Interrupt.c: 145: if(bit_count > 31)
 19308  00174A  0E1F               	movlw	31
 19309  00174C  0100               	movlb	0	; () banked
 19310  00174E  65FD               	cpfsgt	_bit_count& (0+255),b
 19311  001750  D008               	goto	i2l77
 19312                           
 19313                           ; BSR set to: 0
 19314                           ;Interrupt.c: 146: {
 19315                           ;Interrupt.c: 147: nec_ok = 1;
 19316  001752  0E00               	movlw	0
 19317  001754  0100               	movlb	0	; () banked
 19318  001756  6FF3               	movwf	(_nec_ok+1)& (0+255),b
 19319  001758  0E01               	movlw	1
 19320  00175A  6FF2               	movwf	_nec_ok& (0+255),b
 19321                           
 19322                           ; BSR set to: 0
 19323                           ;Interrupt.c: 148: INTCONbits.INT0IE = 0;
 19324  00175C  98F2               	bcf	intcon,4,c	;volatile
 19325                           
 19326                           ;Interrupt.c: 149: Nec_state = 0;
 19327  00175E  0E00               	movlw	0
 19328  001760  6E52               	movwf	_Nec_state,c
 19329  001762                     i2l77:
 19330                           
 19331                           ; BSR set to: 0
 19332                           ;Interrupt.c: 150: }
 19333                           ;Interrupt.c: 151: Nec_state = 3;
 19334  001762  0E03               	movlw	3
 19335  001764  6E52               	movwf	_Nec_state,c
 19336                           
 19337                           ;Interrupt.c: 152: }
 19338  001766  D003               	goto	i2l6867
 19339  001768                     i2l6865:
 19340                           
 19341                           ;Interrupt.c: 153: else
 19342                           ;Interrupt.c: 154: {
 19343                           ;Interrupt.c: 155: force_nec_state0();
 19344  001768  ECCD  F01E         	call	_force_nec_state0	;wreg free
 19345  00176C  D000               	goto	i2l6867
 19346  00176E                     i2l6867:
 19347                           
 19348                           ;Interrupt.c: 156: }
 19349                           ;Interrupt.c: 157: INTCON2bits.INTEDG0 = 1;
 19350  00176E  8CF1               	bsf	intcon2,6,c	;volatile
 19351                           
 19352                           ;Interrupt.c: 158: Nec_code1 = (char) ((Nec_code >> 8));
 19353  001770  C0E4  F051         	movff	_Nec_code+1,_Nec_code1
 19354                           
 19355                           ;Interrupt.c: 160: }
 19356                           ;Interrupt.c: 161: }
 19357                           
 19358                           ;Interrupt.c: 159: return;
 19359  001774  D011               	goto	i2l64
 19360  001776                     i2l6875:
 19361  001776  5052               	movf	_Nec_state,w,c
 19362                           
 19363                           ; Switch size 1, requested type "space"
 19364                           ; Number of cases is 5, Range of values is 0 to 4
 19365                           ; switch strategies available:
 19366                           ; Name         Instructions Cycles
 19367                           ; simple_byte           16     9 (average)
 19368                           ;	Chosen strategy is simple_byte
 19369  001778  0A00               	xorlw	0	; case 0
 19370  00177A  B4D8               	btfsc	status,2,c
 19371  00177C  D766               	goto	i2l6803
 19372  00177E  0A01               	xorlw	1	; case 1
 19373  001780  B4D8               	btfsc	status,2,c
 19374  001782  D77B               	goto	i2l6813
 19375  001784  0A03               	xorlw	3	; case 2
 19376  001786  B4D8               	btfsc	status,2,c
 19377  001788  D78C               	goto	i2l6825
 19378  00178A  0A01               	xorlw	1	; case 3
 19379  00178C  B4D8               	btfsc	status,2,c
 19380  00178E  D79D               	goto	i2l6837
 19381  001790  0A07               	xorlw	7	; case 4
 19382  001792  B4D8               	btfsc	status,2,c
 19383  001794  D7AD               	goto	i2l6849
 19384  001796  D000               	goto	i2l64
 19385  001798                     i2l64:
 19386  001798  0012               	return		;funcret
 19387  00179A                     __end_of_INT0_isr:
 19388                           	opt stack 0
 19389                           pclatu	equ	0xFFB
 19390                           pclath	equ	0xFFA
 19391                           tblptru	equ	0xFF8
 19392                           tblptrh	equ	0xFF7
 19393                           tblptrl	equ	0xFF6
 19394                           tablat	equ	0xFF5
 19395                           prodh	equ	0xFF4
 19396                           prodl	equ	0xFF3
 19397                           intcon	equ	0xFF2
 19398                           intcon2	equ	0xFF1
 19399                           intcon3	equ	0xFF0
 19400                           postinc0	equ	0xFEE
 19401                           fsr0h	equ	0xFEA
 19402                           fsr0l	equ	0xFE9
 19403                           wreg	equ	0xFE8
 19404                           postdec1	equ	0xFE5
 19405                           fsr1h	equ	0xFE2
 19406                           fsr1l	equ	0xFE1
 19407                           indf2	equ	0xFDF
 19408                           postinc2	equ	0xFDE
 19409                           postdec2	equ	0xFDD
 19410                           fsr2h	equ	0xFDA
 19411                           fsr2l	equ	0xFD9
 19412                           status	equ	0xFD8
 19413                           
 19414 ;; *************** function _force_nec_state0 *****************
 19415 ;; Defined at:
 19416 ;;		line 59 in file "Interrupt.c"
 19417 ;; Parameters:    Size  Location     Type
 19418 ;;		None
 19419 ;; Auto vars:     Size  Location     Type
 19420 ;;		None
 19421 ;; Return value:  Size  Location     Type
 19422 ;;		None               void
 19423 ;; Registers used:
 19424 ;;		wreg, status,2
 19425 ;; Tracked objects:
 19426 ;;		On entry : 0/0
 19427 ;;		On exit  : 0/0
 19428 ;;		Unchanged: 0/0
 19429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19430 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19431 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19432 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19433 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19434 ;;Total ram usage:        0 bytes
 19435 ;; Hardware stack levels used:    1
 19436 ;; This function calls:
 19437 ;;		Nothing
 19438 ;; This function is called by:
 19439 ;;		_INT0_isr
 19440 ;; This function uses a non-reentrant model
 19441 ;;
 19442                           
 19443                           	psect	text121
 19444  003D9A                     __ptext121:
 19445                           	opt stack 0
 19446  003D9A                     _force_nec_state0:
 19447                           	opt stack 18
 19448                           
 19449                           ;Interrupt.c: 61: Nec_state=0;
 19450                           
 19451                           ;incstack = 0
 19452  003D9A  0E00               	movlw	0
 19453  003D9C  6E52               	movwf	_Nec_state,c
 19454                           
 19455                           ;Interrupt.c: 62: T1CONbits.TMR1ON = 0;
 19456  003D9E  90CD               	bcf	4045,0,c	;volatile
 19457  003DA0  0012               	return		;funcret
 19458  003DA2                     __end_of_force_nec_state0:
 19459                           	opt stack 0
 19460                           pclatu	equ	0xFFB
 19461                           pclath	equ	0xFFA
 19462                           tblptru	equ	0xFF8
 19463                           tblptrh	equ	0xFF7
 19464                           tblptrl	equ	0xFF6
 19465                           tablat	equ	0xFF5
 19466                           prodh	equ	0xFF4
 19467                           prodl	equ	0xFF3
 19468                           intcon	equ	0xFF2
 19469                           intcon2	equ	0xFF1
 19470                           intcon3	equ	0xFF0
 19471                           postinc0	equ	0xFEE
 19472                           fsr0h	equ	0xFEA
 19473                           fsr0l	equ	0xFE9
 19474                           wreg	equ	0xFE8
 19475                           postdec1	equ	0xFE5
 19476                           fsr1h	equ	0xFE2
 19477                           fsr1l	equ	0xFE1
 19478                           indf2	equ	0xFDF
 19479                           postinc2	equ	0xFDE
 19480                           postdec2	equ	0xFDD
 19481                           fsr2h	equ	0xFDA
 19482                           fsr2l	equ	0xFD9
 19483                           status	equ	0xFD8
 19484                           pclatu	equ	0xFFB
 19485                           pclath	equ	0xFFA
 19486                           tblptru	equ	0xFF8
 19487                           tblptrh	equ	0xFF7
 19488                           tblptrl	equ	0xFF6
 19489                           tablat	equ	0xFF5
 19490                           prodh	equ	0xFF4
 19491                           prodl	equ	0xFF3
 19492                           intcon	equ	0xFF2
 19493                           intcon2	equ	0xFF1
 19494                           intcon3	equ	0xFF0
 19495                           postinc0	equ	0xFEE
 19496                           fsr0h	equ	0xFEA
 19497                           fsr0l	equ	0xFE9
 19498                           wreg	equ	0xFE8
 19499                           postdec1	equ	0xFE5
 19500                           fsr1h	equ	0xFE2
 19501                           fsr1l	equ	0xFE1
 19502                           indf2	equ	0xFDF
 19503                           postinc2	equ	0xFDE
 19504                           postdec2	equ	0xFDD
 19505                           fsr2h	equ	0xFDA
 19506                           fsr2l	equ	0xFD9
 19507                           status	equ	0xFD8
 19508                           
 19509                           	psect	rparam
 19510  0000                     pclatu	equ	0xFFB
 19511                           pclath	equ	0xFFA
 19512                           tblptru	equ	0xFF8
 19513                           tblptrh	equ	0xFF7
 19514                           tblptrl	equ	0xFF6
 19515                           tablat	equ	0xFF5
 19516                           prodh	equ	0xFF4
 19517                           prodl	equ	0xFF3
 19518                           intcon	equ	0xFF2
 19519                           intcon2	equ	0xFF1
 19520                           intcon3	equ	0xFF0
 19521                           postinc0	equ	0xFEE
 19522                           fsr0h	equ	0xFEA
 19523                           fsr0l	equ	0xFE9
 19524                           wreg	equ	0xFE8
 19525                           postdec1	equ	0xFE5
 19526                           fsr1h	equ	0xFE2
 19527                           fsr1l	equ	0xFE1
 19528                           indf2	equ	0xFDF
 19529                           postinc2	equ	0xFDE
 19530                           postdec2	equ	0xFDD
 19531                           fsr2h	equ	0xFDA
 19532                           fsr2l	equ	0xFD9
 19533                           status	equ	0xFD8


Data Sizes:
    Strings     388
    Constant    493
    Data        160
    BSS         70
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     67     111
    BANK0           128      2     128
    BANK1           256     15      75
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 9
		 -> NULL(NULL[0]), setup_alarm_time(BANK0[9]), setup_heater_set_text(BANK0[5]), setup_date(BANK0[9]), 
		 -> setup_time(BANK0[9]), RPM_Txt(BANK0[5]), Volt_Txt(BANK0[6]), DC_Txt(BANK0[4]), 
		 -> RTC_ALARM_Txt(BANK0[2]), Heater_SW_Txt(BANK0[4]), Heater_Set_Temp_Txt(BANK0[5]), Alarm_SW_Txt(BANK0[4]), 
		 -> alarm_time(BANK0[9]), date(BANK0[9]), time(BANK0[9]), tempF(BANK0[4]), 
		 -> tempC(BANK0[4]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 9
		 -> NULL(NULL[0]), setup_alarm_time(BANK0[9]), setup_heater_set_text(BANK0[5]), setup_date(BANK0[9]), 
		 -> setup_time(BANK0[9]), RPM_Txt(BANK0[5]), Volt_Txt(BANK0[6]), DC_Txt(BANK0[4]), 
		 -> RTC_ALARM_Txt(BANK0[2]), Heater_SW_Txt(BANK0[4]), Heater_Set_Temp_Txt(BANK0[5]), Alarm_SW_Txt(BANK0[4]), 
		 -> alarm_time(BANK0[9]), date(BANK0[9]), time(BANK0[9]), tempF(BANK0[4]), 
		 -> tempC(BANK0[4]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_36(CODE[5]), STR_35(CODE[8]), STR_34(CODE[8]), STR_33(CODE[20]), 
		 -> STR_32(CODE[16]), STR_31(CODE[10]), STR_30(CODE[11]), STR_29(CODE[21]), 
		 -> STR_28(CODE[5]), STR_27(CODE[5]), STR_26(CODE[12]), STR_25(CODE[21]), 
		 -> STR_18(CODE[4]), STR_17(CODE[4]), STR_16(CODE[4]), STR_15(CODE[4]), 
		 -> STR_14(CODE[4]), STR_13(CODE[5]), STR_12(CODE[3]), STR_11(CODE[3]), 
		 -> STR_10(CODE[7]), STR_9(CODE[13]), STR_8(CODE[9]), STR_7(CODE[11]), 
		 -> STR_6(CODE[5]), STR_5(CODE[5]), STR_4(CODE[2]), STR_3(CODE[3]), 
		 -> STR_2(CODE[12]), STR_1(CODE[15]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> NULL(NULL[0]), Heater_SW_Txt(BANK0[4]), Alarm_SW_Txt(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> NULL(NULL[0]), Heater_SW_Txt(BANK0[4]), Alarm_SW_Txt(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 30
		 -> STR_37(CODE[11]), STR_24(CODE[20]), STR_23(CODE[25]), STR_22(CODE[22]), 
		 -> STR_21(CODE[30]), STR_20(CODE[22]), STR_19(CODE[16]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> NULL(NULL[0]), Heater_SW_Txt(BANK0[4]), Alarm_SW_Txt(BANK0[4]), 

    txt	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 9
		 -> NULL(NULL[0]), setup_alarm_time(BANK0[9]), setup_heater_set_text(BANK0[5]), setup_date(BANK0[9]), 
		 -> setup_time(BANK0[9]), RPM_Txt(BANK0[5]), Volt_Txt(BANK0[6]), DC_Txt(BANK0[4]), 
		 -> RTC_ALARM_Txt(BANK0[2]), Heater_SW_Txt(BANK0[4]), Heater_Set_Temp_Txt(BANK0[5]), Alarm_SW_Txt(BANK0[4]), 
		 -> alarm_time(BANK0[9]), date(BANK0[9]), time(BANK0[9]), tempF(BANK0[4]), 
		 -> tempC(BANK0[4]), 


Critical Paths under _main in COMRAM

    _Update_Screen->_drawtext
    _Test_Alarm->_do_update_pwm
    _read_volt->___ftdiv
    ___awtoft->___ftpack
    _DS3231_Turn_On_Alarm->_DS3231_Init
    _DS3231_Turn_Off_Alarm->_DS3231_Init
    _DS3231_Init->_I2C_Write_Address_Read_One_Byte
    _I2C_Write_Address_Write_One_Byte->_I2C_Write
    _I2C_Write_Address_Read_One_Byte->_I2C_Read
    _Monitor_Heater->_do_update_pwm
    _Initialize_Setup_Time_Screen->_drawtext
    _Go_Prev_Field->_Update_Setup_Screen_Cursor_Backward
    _Go_Next_Field->_Update_Setup_Screen_Cursor_Forward
    _DS3231_Write_Time->_dec_2_bcd
    _Update_Setup_Time_Screen->_drawtext
    _Initialize_Setup_Heater_Screen->_drawtext
    _Update_Setup_Heater_Screen->_drawtext
    _check_for_button_input->_printf
    _Initialize_Setup_Alarm_Time_Screen->_drawtext
    _Go_Prev_Alarm_Field->_Update_Setup_Screen_Cursor_Backward
    _Update_Setup_Screen_Cursor_Backward->_fillRect
    _Go_Next_Alarm_Field->_Update_Setup_Screen_Cursor_Forward
    _Update_Setup_Screen_Cursor_Forward->_fillRect
    _Initialize_Screen->_drawtext
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawCircle->_drawPixel
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul
    _DS3231_Write_Alarm_Time->_dec_2_bcd
    _dec_2_bcd->___awmod
    _DS3231_Read_Time->_I2C_Read
    _DS3231_Read_Alarm_Time->_I2C_Read
    _Do_Beep_Good->_do_update_pwm
    _Do_Beep_Bad->_do_update_pwm
    _do_update_pwm->___ftdiv
    _do_update_pwm->___fttol
    ___lbtoft->___ftpack
    ___fttol->___ftmul
    ___ftmul->___lbtoft
    ___ftdiv->___ftmul
    _Update_Setup_Alarm_Time_Screen->_drawtext
    _printf->___lwmod
    ___lwmod->___lwdiv
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _write_data->_spiwrite
    _write_command->_spiwrite
    ___awmod->___fttol
    ___awdiv->___awmod
    _Do_Init->_DS1621_Init
    _init_UART->_OpenUSART
    _Set_RGB_Color->_Wait_One_Sec
    _DS1621_Init->_I2C_Write_Cmd_Write_Data
    _I2C_Write_Cmd_Write_Data->_I2C_Write
    _I2C_Write_Cmd_Only->_I2C_Write
    _DS1621_Read_Temp->_I2C_Read

Critical Paths under _chkisr in COMRAM

    _chkisr->_INT0_isr

Critical Paths under _main in BANK0

    _main->_Do_Setup_Heater_Temp
    _main->_Update_Screen
    _main->_get_RPM
    _DS3231_Write_Time->_dec_2_bcd
    _DS3231_Write_Alarm_Time->_dec_2_bcd

Critical Paths under _chkisr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_Update_Screen
    _get_RPM->___awdiv
    _Update_Screen->___awdiv
    _Initialize_Setup_Time_Screen->_drawtext
    _Do_Save_New_Time->_DS3231_Write_Time
    _DS3231_Write_Time->_dec_2_bcd
    _Update_Setup_Time_Screen->___awdiv
    _Do_Setup_Heater_Temp->_Update_Setup_Heater_Screen
    _Initialize_Setup_Heater_Screen->_drawtext
    _Increase_Heater_Temp->_Update_Setup_Heater_Screen
    _Decrease_Heater_Temp->_Update_Setup_Heater_Screen
    _Update_Setup_Heater_Screen->___awdiv
    _Initialize_Setup_Alarm_Time_Screen->_drawtext
    _Do_Save_New_Alarm_Time->_DS3231_Write_Alarm_Time
    _Initialize_Screen->_drawtext
    _DS3231_Write_Alarm_Time->_dec_2_bcd
    _dec_2_bcd->___awdiv
    _Update_Setup_Alarm_Time_Screen->___awdiv

Critical Paths under _chkisr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _chkisr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _chkisr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _chkisr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _chkisr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _chkisr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _chkisr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _chkisr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _chkisr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _chkisr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _chkisr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _chkisr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _chkisr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _chkisr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _chkisr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0 1148177
                                             13 BANK1      2     2      0
                   _DS1621_Read_Temp
             _DS3231_Read_Alarm_Time
                   _DS3231_Read_Time
              _DS3231_Turn_Off_Alarm
                        _Do_Beep_Bad
                       _Do_Beep_Good
                            _Do_Init
                _Do_Setup_Alarm_Time
               _Do_Setup_Heater_Temp
                      _Do_Setup_Time
                  _Initialize_Screen
                     _Monitor_Heater
                        _Set_RPM_RGB
                         _Test_Alarm
                      _Toggle_Heater
                      _Update_Screen
                            ___awdiv
                             ___wmul
             _check_for_button_input
                            _get_RPM
                             _printf
                          _read_volt
 ---------------------------------------------------------------------------------
 (1) _get_RPM                                              4     2      2    4871
                                             64 COMRAM     2     0      2
                                              0 BANK0      2     2      0
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Update_Screen                                        7     7      0   48219
                                              0 BANK0      2     2      0
                                              8 BANK1      5     5      0
                            ___awdiv
                            ___awmod
                            ___ftmul
                            ___fttol
                           _drawtext
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _Toggle_Heater                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Test_Alarm                                           0     0      0   24333
               _Activate_Buzzer_4KHz
              _DS3231_Turn_Off_Alarm
               _DS3231_Turn_On_Alarm
                  _Deactivate_Buzzer
                      _Set_RGB_Color
                             ___ftge
                      _do_update_pwm
                          _read_volt
 ---------------------------------------------------------------------------------
 (1) _read_volt                                            8     5      3    6337
                                             58 COMRAM     8     5      3
                           ___awtoft
                            ___ftdiv
                             ___wmul
                       _get_full_ADC
 ---------------------------------------------------------------------------------
 (2) _get_full_ADC                                         6     4      2      23
                                             16 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3    2266
                                             24 COMRAM     4     1      3
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     242
                                             16 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (2) _DS3231_Turn_On_Alarm                                 5     5      0    4432
                                             26 COMRAM     5     5      0
                        _DS3231_Init
    _I2C_Write_Address_Read_One_Byte
   _I2C_Write_Address_Write_One_Byte
 ---------------------------------------------------------------------------------
 (2) _DS3231_Turn_Off_Alarm                                5     5      0    4432
                                             26 COMRAM     5     5      0
                        _DS3231_Init
    _I2C_Write_Address_Read_One_Byte
   _I2C_Write_Address_Write_One_Byte
 ---------------------------------------------------------------------------------
 (3) _DS3231_Init                                          4     4      0    2380
                                             22 COMRAM     4     4      0
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
    _I2C_Write_Address_Read_One_Byte
   _I2C_Write_Address_Write_One_Byte
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Address_Write_One_Byte                     3     1      2     876
                                             18 COMRAM     3     1      2
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Address_Read_One_Byte                      3     2      1     783
                                             19 COMRAM     3     2      1
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (2) _Activate_Buzzer_4KHz                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Set_RPM_RGB                                          2     0      2     185
                                             16 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _Monitor_Heater                                       0     0      0    9038
                      _do_update_pwm
                     _get_duty_cycle
 ---------------------------------------------------------------------------------
 (2) _get_duty_cycle                                       8     4      4     239
                                             16 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _Do_Setup_Time                                        0     0      0  331761
                   _DS3231_Read_Time
                      _Decrease_Time
                        _Do_Beep_Bad
                       _Do_Beep_Good
                   _Do_Save_New_Time
                    _Exit_Time_Setup
                      _Go_Next_Field
                      _Go_Prev_Field
                      _Increase_Time
       _Initialize_Setup_Time_Screen
           _Update_Setup_Time_Screen
                          _bcd_2_dec
             _check_for_button_input
 ---------------------------------------------------------------------------------
 (2) _Initialize_Setup_Time_Screen                         0     0      0   50423
                           _drawtext
                           _fillRect
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _Increase_Time                                        0     0      0   40379
           _Update_Setup_Time_Screen
 ---------------------------------------------------------------------------------
 (2) _Go_Prev_Field                                        0     0      0   11627
_Update_Setup_Screen_Cursor_Backward
 ---------------------------------------------------------------------------------
 (2) _Go_Next_Field                                        0     0      0   11658
 _Update_Setup_Screen_Cursor_Forward
 ---------------------------------------------------------------------------------
 (2) _Exit_Time_Setup                                      0     0      0   53507
                   _DS3231_Read_Time
                  _Initialize_Screen
 ---------------------------------------------------------------------------------
 (2) _Do_Save_New_Time                                     0     0      0   61312
                   _DS3231_Read_Time
                  _DS3231_Write_Time
                  _Initialize_Screen
 ---------------------------------------------------------------------------------
 (3) _DS3231_Write_Time                                    2     2      0    7805
                                             11 BANK1      2     2      0
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
                          _dec_2_bcd
 ---------------------------------------------------------------------------------
 (2) _Decrease_Time                                        0     0      0   40379
           _Update_Setup_Time_Screen
 ---------------------------------------------------------------------------------
 (2) _Update_Setup_Time_Screen                             0     0      0   40379
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (1) _Do_Setup_Heater_Temp                                 2     2      0  289324
                                              0 BANK0      2     2      0
               _Decrease_Heater_Temp
                        _Do_Beep_Bad
                       _Do_Beep_Good
            _Do_Save_New_Heater_Temp
             _Exit_Setup_Heater_Temp
               _Increase_Heater_Temp
     _Initialize_Setup_Heater_Screen
         _Update_Setup_Heater_Screen
             _check_for_button_input
 ---------------------------------------------------------------------------------
 (2) _Initialize_Setup_Heater_Screen                       0     0      0   39267
                           _drawtext
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _Increase_Heater_Temp                                 0     0      0   40481
         _Update_Setup_Heater_Screen
 ---------------------------------------------------------------------------------
 (2) _Exit_Setup_Heater_Temp                               0     0      0   53507
                   _DS3231_Read_Time
                  _Initialize_Screen
 ---------------------------------------------------------------------------------
 (2) _Do_Save_New_Heater_Temp                              0     0      0   53507
                   _DS3231_Read_Time
                  _Initialize_Screen
 ---------------------------------------------------------------------------------
 (2) _Decrease_Heater_Temp                                 0     0      0   40481
         _Update_Setup_Heater_Screen
 ---------------------------------------------------------------------------------
 (2) _Update_Setup_Heater_Screen                           3     3      0   40481
                                              8 BANK1      3     3      0
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (1) _Do_Setup_Alarm_Time                                  0     0      0  343952
             _DS3231_Read_Alarm_Time
                _Decrease_Alarm_Time
                        _Do_Beep_Bad
                       _Do_Beep_Good
             _Do_Save_New_Alarm_Time
              _Exit_Setup_Alarm_Time
                _Go_Next_Alarm_Field
                _Go_Prev_Alarm_Field
                _Increase_Alarm_Time
 _Initialize_Setup_Alarm_Time_Screen
     _Update_Setup_Alarm_Time_Screen
                          _bcd_2_dec
             _check_for_button_input
 ---------------------------------------------------------------------------------
 (1) _check_for_button_input                               3     3      0    3910
                                             56 COMRAM     3     3      0
                             _printf
 ---------------------------------------------------------------------------------
 (2) _bcd_2_dec                                            5     5      0      67
                                             16 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (2) _Initialize_Setup_Alarm_Time_Screen                   0     0      0   50423
                           _drawtext
                           _fillRect
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _Increase_Alarm_Time                                  0     0      0   44156
     _Update_Setup_Alarm_Time_Screen
 ---------------------------------------------------------------------------------
 (2) _Go_Prev_Alarm_Field                                  0     0      0   11627
_Update_Setup_Screen_Cursor_Backward
 ---------------------------------------------------------------------------------
 (3) _Update_Setup_Screen_Cursor_Backward                  3     3      0   11627
                                             45 COMRAM     3     3      0
                           _fillRect
 ---------------------------------------------------------------------------------
 (2) _Go_Next_Alarm_Field                                  0     0      0   11658
 _Update_Setup_Screen_Cursor_Forward
 ---------------------------------------------------------------------------------
 (3) _Update_Setup_Screen_Cursor_Forward                   3     3      0   11658
                                             45 COMRAM     3     3      0
                           _fillRect
 ---------------------------------------------------------------------------------
 (2) _Exit_Setup_Alarm_Time                                0     0      0   53507
                   _DS3231_Read_Time
                  _Initialize_Screen
 ---------------------------------------------------------------------------------
 (2) _Do_Save_New_Alarm_Time                               0     0      0   62172
             _DS3231_Read_Alarm_Time
                   _DS3231_Read_Time
            _DS3231_Write_Alarm_Time
                  _Initialize_Screen
 ---------------------------------------------------------------------------------
 (1) _Initialize_Screen                                    0     0      0   53077
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                         _drawCircle
                           _drawtext
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4    4009
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _fillScreen                                           2     0      2    2387
                                             35 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (3) _fillRectangle                                       12     7      5    2096
                                             23 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _drawCircle                                          20    12      8    6744
                                             27 COMRAM    20    12      8
                          _drawPixel
 ---------------------------------------------------------------------------------
 (2) _TFT_GreenTab_Initialize                              0     0      0    4884
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd3                                                0     0      0    2312
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd2red                                             0     0      0     130
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd1                                                0     0      0    2312
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _LCD_Reset                                            0     0      0    2182
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             6     4      2    2182
                                             22 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _DS3231_Write_Alarm_Time                              2     2      0    8235
                                             11 BANK1      2     2      0
                   _DS3231_Read_Time
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
                          _dec_2_bcd
 ---------------------------------------------------------------------------------
 (4) _dec_2_bcd                                            7     5      2    7604
                                             64 COMRAM     2     0      2
                                              0 BANK0      2     2      0
                                              8 BANK1      3     3      0
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) _DS3231_Read_Time                                     2     2      0     430
                                             19 COMRAM     2     2      0
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _DS3231_Read_Alarm_Time                               2     2      0     430
                                             19 COMRAM     2     2      0
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (2) _Do_Beep_Good                                         0     0      0    8845
               _Activate_Buzzer_2KHz
                  _Deactivate_Buzzer
                       _Wait_One_Sec
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (3) _Activate_Buzzer_2KHz                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Do_Beep_Bad                                          0     0      0    8845
              _Activate_Buzzer_500Hz
                  _Deactivate_Buzzer
                       _Wait_One_Sec
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (2) _do_update_pwm                                        9     9      0    8799
                                             58 COMRAM     9     9      0
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (3) ___lbtoft                                             4     1      3    2099
                                             24 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     631
                                             43 COMRAM    15    11      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    3036
                                             28 COMRAM    15     9      6
                           ___ftpack
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    2838
                                             43 COMRAM    15     9      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2068
                                             16 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) _Deactivate_Buzzer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Activate_Buzzer_500Hz                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Decrease_Alarm_Time                                  0     0      0   44156
     _Update_Setup_Alarm_Time_Screen
 ---------------------------------------------------------------------------------
 (2) _Update_Setup_Alarm_Time_Screen                       0     0      0   44156
                            ___awdiv
                            ___awmod
                           _drawtext
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              37    23     14    3777
                                             28 COMRAM    28    14     14
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      22
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             16 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     265
                                             23 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     374
                                             16 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _drawtext                                            17     9      8   32871
                                             56 COMRAM    10     2      8
                                              0 BANK1      7     7      0
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _strlen                                               6     4      2     195
                                             16 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) _drawChar                                            11     4      7   18314
                                             45 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (4) _fillRect                                            11     6      5   11156
                                             34 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (5) _drawFastVLine                                       11     7      4    3102
                                             23 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (4) _drawPixel                                            4     1      3    4207
                                             23 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (6) _setAddrWindow                                        4     1      3    1034
                                             19 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (7) _write_data                                           1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (7) _write_command                                        1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (6) _spiwrite                                             2     2      0      34
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1142
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    3813
                                             58 COMRAM     6     2      4
                            ___ftmul (ARG)
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    3695
                                              0 BANK1      8     4      4
                            ___awmod (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Do_Init                                              0     0      0    1110
                        _DS1621_Init
                           _I2C_Init
                           _Init_ADC
                     _Init_Interrupt
                      _Set_RGB_Color
                       _Turn_Off_Fan
                          _init_UART
 ---------------------------------------------------------------------------------
 (2) _init_UART                                            0     0      0     273
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (3) _OpenUSART                                            3     1      2     273
                                             16 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _Turn_Off_Fan                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Set_RGB_Color                                        2     2      0      91
                                             18 COMRAM     2     2      0
                       _Wait_One_Sec
 ---------------------------------------------------------------------------------
 (3) _Wait_One_Sec                                         2     2      0      46
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _Init_Interrupt                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Init_ADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Init                                             4     0      4      65
                                             16 COMRAM     4     0      4
                         _i2cHighScl
                         _i2cHighSda
 ---------------------------------------------------------------------------------
 (2) _DS1621_Init                                          1     1      0     681
                                             21 COMRAM     1     1      0
                 _I2C_Write_Cmd_Only
           _I2C_Write_Cmd_Write_Data
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Write_Data                             3     1      2     356
                                             18 COMRAM     3     1      2
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Only                                   2     1      1     260
                                             18 COMRAM     2     1      1
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DS1621_Read_Temp                                     5     3      2     464
                                             19 COMRAM     5     3      2
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Write                                            2     2      0     133
                                             16 COMRAM     2     2      0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Stop                                             0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Start                                            0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Read                                             3     3      0     198
                                             16 COMRAM     3     3      0
                             _i2cAck
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                            _i2cNack
 ---------------------------------------------------------------------------------
 (5) _i2cNack                                              0     0      0       0
                         _i2cHighScl
                          _i2cLowScl
 ---------------------------------------------------------------------------------
 (5) _i2cAck                                               0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_ReStart                                          0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (5) _i2cLowSda                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2cLowScl                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2cHighSda                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2cHighScl                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _chkisr                                             14    14      0       0
                                              2 COMRAM    14    14      0
                           _INT0_isr
                           _INT1_isr
                           _INT2_isr
                         _TIMER1_isr
 ---------------------------------------------------------------------------------
 (12) _TIMER1_isr                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _INT2_isr                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _INT1_isr                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _INT0_isr                                            2     2      0       0
                                              0 COMRAM     2     2      0
                   _force_nec_state0
 ---------------------------------------------------------------------------------
 (13) _force_nec_state0                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DS1621_Read_Temp
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Read_Alarm_Time
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Read_Time
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Turn_Off_Alarm
     _DS3231_Init
       _I2C_ReStart
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Read
         _i2cAck
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cNack
           _i2cHighScl
           _i2cLowScl
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write_Address_Read_One_Byte
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Address_Write_One_Byte
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _I2C_Write_Address_Read_One_Byte
       _I2C_ReStart
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Read
         _i2cAck
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cNack
           _i2cHighScl
           _i2cLowScl
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
     _I2C_Write_Address_Write_One_Byte
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
   _Do_Beep_Bad
     _Activate_Buzzer_500Hz
     _Deactivate_Buzzer
     _Wait_One_Sec
     _do_update_pwm
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftmul
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
       ___lbtoft
         ___ftpack
   _Do_Beep_Good
     _Activate_Buzzer_2KHz
     _Deactivate_Buzzer
     _Wait_One_Sec
     _do_update_pwm
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftmul
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
       ___lbtoft
         ___ftpack
   _Do_Init
     _DS1621_Init
       _I2C_Write_Cmd_Only
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Cmd_Write_Data
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _I2C_Init
       _i2cHighScl
       _i2cHighSda
     _Init_ADC
     _Init_Interrupt
     _Set_RGB_Color
       _Wait_One_Sec
     _Turn_Off_Fan
     _init_UART
       _OpenUSART
   _Do_Setup_Alarm_Time
     _DS3231_Read_Alarm_Time
       _I2C_ReStart
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Read
         _i2cAck
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cNack
           _i2cHighScl
           _i2cLowScl
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
     _Decrease_Alarm_Time
       _Update_Setup_Alarm_Time_Screen
         ___awdiv
           ___awmod (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
           ___wmul (ARG)
         ___awmod
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
           _putch
     _Do_Beep_Bad
       _Activate_Buzzer_500Hz
       _Deactivate_Buzzer
       _Wait_One_Sec
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
         ___lbtoft
           ___ftpack
     _Do_Beep_Good
       _Activate_Buzzer_2KHz
       _Deactivate_Buzzer
       _Wait_One_Sec
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
         ___lbtoft
           ___ftpack
     _Do_Save_New_Alarm_Time
       _DS3231_Read_Alarm_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _DS3231_Write_Alarm_Time
         _DS3231_Read_Time
           _I2C_ReStart
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Read
             _i2cAck
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cNack
               _i2cHighScl
               _i2cLowScl
           _I2C_Start
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Stop
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Write
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _dec_2_bcd
           ___awdiv
             ___awmod (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___ftpack
                   ___lbtoft (ARG)
                     ___ftpack
             ___wmul (ARG)
           ___awmod
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
     _Exit_Setup_Alarm_Time
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
     _Go_Next_Alarm_Field
       _Update_Setup_Screen_Cursor_Forward
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
     _Go_Prev_Alarm_Field
       _Update_Setup_Screen_Cursor_Backward
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
     _Increase_Alarm_Time
       _Update_Setup_Alarm_Time_Screen
         ___awdiv
           ___awmod (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
           ___wmul (ARG)
         ___awmod
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
           _putch
     _Initialize_Setup_Alarm_Time_Screen
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
       _fillRect
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _fillScreen
         _fillRectangle
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _strcpy
     _Update_Setup_Alarm_Time_Screen
       ___awdiv
         ___awmod (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
         ___wmul (ARG)
       ___awmod
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
     _bcd_2_dec
     _check_for_button_input
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
   _Do_Setup_Heater_Temp
     _Decrease_Heater_Temp
       _Update_Setup_Heater_Screen
         ___awdiv
           ___awmod (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
           ___wmul (ARG)
         ___awmod
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Do_Beep_Bad
       _Activate_Buzzer_500Hz
       _Deactivate_Buzzer
       _Wait_One_Sec
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
         ___lbtoft
           ___ftpack
     _Do_Beep_Good
       _Activate_Buzzer_2KHz
       _Deactivate_Buzzer
       _Wait_One_Sec
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
         ___lbtoft
           ___ftpack
     _Do_Save_New_Heater_Temp
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
     _Exit_Setup_Heater_Temp
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
     _Increase_Heater_Temp
       _Update_Setup_Heater_Screen
         ___awdiv
           ___awmod (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
           ___wmul (ARG)
         ___awmod
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Initialize_Setup_Heater_Screen
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
       _fillScreen
         _fillRectangle
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _strcpy
     _Update_Setup_Heater_Screen
       ___awdiv
         ___awmod (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
         ___wmul (ARG)
       ___awmod
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
     _check_for_button_input
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
   _Do_Setup_Time
     _DS3231_Read_Time
       _I2C_ReStart
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Read
         _i2cAck
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cNack
           _i2cHighScl
           _i2cLowScl
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
     _Decrease_Time
       _Update_Setup_Time_Screen
         ___awdiv
           ___awmod (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
           ___wmul (ARG)
         ___awmod
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Do_Beep_Bad
       _Activate_Buzzer_500Hz
       _Deactivate_Buzzer
       _Wait_One_Sec
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
         ___lbtoft
           ___ftpack
     _Do_Beep_Good
       _Activate_Buzzer_2KHz
       _Deactivate_Buzzer
       _Wait_One_Sec
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
         ___lbtoft
           ___ftpack
     _Do_Save_New_Time
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _DS3231_Write_Time
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _dec_2_bcd
           ___awdiv
             ___awmod (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___ftpack
                   ___lbtoft (ARG)
                     ___ftpack
             ___wmul (ARG)
           ___awmod
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
     _Exit_Time_Setup
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
     _Go_Next_Field
       _Update_Setup_Screen_Cursor_Forward
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
     _Go_Prev_Field
       _Update_Setup_Screen_Cursor_Backward
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
     _Increase_Time
       _Update_Setup_Time_Screen
         ___awdiv
           ___awmod (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
           ___wmul (ARG)
         ___awmod
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Initialize_Setup_Time_Screen
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
       _fillRect
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _fillScreen
         _fillRectangle
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _strcpy
     _Update_Setup_Time_Screen
       ___awdiv
         ___awmod (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
         ___wmul (ARG)
       ___awmod
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
     _bcd_2_dec
     _check_for_button_input
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
   _Initialize_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawCircle
       _drawPixel
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_data
           _spiwrite
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   _Monitor_Heater
     _do_update_pwm
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftmul
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
       ___lbtoft
         ___ftpack
     _get_duty_cycle
   _Set_RPM_RGB
   _Test_Alarm
     _Activate_Buzzer_4KHz
     _DS3231_Turn_Off_Alarm
       _DS3231_Init
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write_Address_Read_One_Byte
           _I2C_ReStart
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Read
             _i2cAck
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cNack
               _i2cHighScl
               _i2cLowScl
           _I2C_Start
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Stop
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Write
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
         _I2C_Write_Address_Write_One_Byte
           _I2C_Start
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Stop
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Write
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
       _I2C_Write_Address_Read_One_Byte
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Address_Write_One_Byte
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _DS3231_Turn_On_Alarm
       _DS3231_Init
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write_Address_Read_One_Byte
           _I2C_ReStart
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Read
             _i2cAck
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cNack
               _i2cHighScl
               _i2cLowScl
           _I2C_Start
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Stop
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Write
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
         _I2C_Write_Address_Write_One_Byte
           _I2C_Start
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Stop
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Write
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
       _I2C_Write_Address_Read_One_Byte
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Address_Write_One_Byte
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _Deactivate_Buzzer
     _Set_RGB_Color
       _Wait_One_Sec
     ___ftge
     _do_update_pwm
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftmul
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
       ___lbtoft
         ___ftpack
     _read_volt
       ___awtoft
         ___ftpack
         ___wmul (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___wmul
       _get_full_ADC
   _Toggle_Heater
   _Update_Screen
     ___awdiv
       ___awmod (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
       ___wmul (ARG)
     ___awmod
       ___ftmul (ARG)
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
     ___ftmul
       ___ftpack
       ___lbtoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _strcpy
   ___awdiv
     ___awmod (ARG)
       ___ftmul (ARG)
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
     ___wmul (ARG)
   ___wmul
   _check_for_button_input
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
   _get_RPM
     ___awdiv
       ___awmod (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
       ___wmul (ARG)
     ___wmul
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
   _read_volt
     ___awtoft
       ___ftpack
       ___wmul (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
         ___wmul (ARG)
       ___ftmul (ARG)
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___wmul (ARG)
     ___wmul
     _get_full_ADC

 _chkisr (ROOT)
   _INT0_isr
     _force_nec_state0
   _INT1_isr
   _INT2_isr
   _TIMER1_isr

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      F      4B       7       29.3%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      2      80       5      100.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     43      6F       1       87.4%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     13A      34        0.0%
DATA                 0      0     13A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Fri Dec 03 16:35:58 2021

                                 drawCircle@f 002A                                   drawCircle@r 0020  
                                 drawCircle@x 002C                                   drawCircle@y 002E  
                          __size_of_I2C_Start 0012                                   _SSPSTATbits 000FC7  
                          __size_of_I2C_Write 003E                                  drawCircle@x0 001C  
                                drawCircle@y0 001E                                            _D1 0134  
                __size_of_Do_Setup_Alarm_Time 00BE                                  ___awdiv@sign 0141  
                               read_volt@volt 003E                           ___wmul@multiplicand 0013  
                             ??_Update_Screen 00FE                                           l211 3792  
                                         l151 3874                                           l311 312A  
                                         l208 3684                                           l400 3938  
                                         l245 38A6                                           l406 2DE6  
                                         l422 18EE                                           l431 1844  
                                         l424 17C8                                           l281 31F8  
                                         l346 3470                                           l283 31EE  
                                         l356 3C18                                           l460 2426  
                                         l470 138E                                           l462 2496  
                                         l463 24B8                                           l287 3902  
                                         l295 36C6                                           l289 3908  
                                         l459 24BA                                           l724 325C  
                                         l727 39D6                                           l729 39DA  
                                         l682 3962                                           l685 3192  
                                         l678 2CCE                                           _FAN 00F6  
                                         l946 3D14                                           l699 3A86  
                                         l984 1A12                                           _PR2 000FCB  
                              read_volt@nStep 0041                          DS3231_Init@Address_7 0017  
                        DS3231_Init@Address_E 0018                                           _day 005B  
                           _Deactivate_Buzzer 3D82                          __size_of_I2C_ReStart 0016  
                   __size_of_Do_Save_New_Time 0014                                           _dow 005C  
                                         _nbr 00F0                                           _rpm 004C  
                       __size_of_Turn_Off_Fan 000C                                           _rps 00F4  
                                         _txt 004E                                  ___awmod@sign 0040  
                                         prod 000FF3                                           wreg 000FE8  
                               _Increase_Time 2BB0                  __size_of_Go_Next_Alarm_Field 0018  
                          ?_Deactivate_Buzzer 0001                   __end_of_Decrease_Alarm_Time 363E  
      Update_Setup_Screen_Cursor_Forward@xinc 0030        Update_Setup_Screen_Cursor_Forward@yinc 002F  
                             ??_fillRectangle 001D                                  __CFG_LVP$OFF 000000  
                     _TFT_GreenTab_Initialize 3964                                  ___ftdiv@cntr 0035  
                                ___ftdiv@sign 003A                                  __CFG_WDT$OFF 000000  
                              drawFastVLine@h 0019                                          l2006 35A2  
                                        l1400 0B0A                                          l1160 12CA  
                                        l2035 3782                                          l1149 1116  
                              drawFastVLine@x 0022                                          l1461 307C  
                                        l1437 0D62                                drawFastVLine@y 0018  
                                        l1470 30BE                                          l1465 3096  
                                        l1473 39B4                                          l1466 3098  
                                        l1467 30A2                                          l1468 30A4  
                                        l1904 3A46                                          l1666 258A  
                                        l1930 3A00                                          l1691 3838  
                                        l1781 271A                                          l1853 23DE  
                                        l1862 2A88                                          l1679 2EEC  
                                        l1792 26F2                                          l1856 23AA  
                                        l6211 3080                                          l6203 306C  
                                        l1868 1F40                                          l6207 3074  
                                        l5503 3596                                          l1889 22FC  
                                        l6219 308E                                          l6403 31B2  
                                        l1996 3378                                          l6173 3A7E  
                                        l8101 183C                                          l5349 3A3E  
              I2C_Write_Cmd_Write_Data@Device 0015                                          l8111 188E  
                                        l6169 3A70                                          l9001 1226  
                                        l8131 3750                                          l5475 333C  
                                        l8211 270C                                          l9011 12A2  
                                        l6187 39BA                                          l8117 18BA  
                                        l8109 1866                                          l8125 18EA  
                                        l8133 3756                                          l5477 3346  
                                        l8205 26FA                                          l9005 1266  
                                        l6199 3062                                          l8223 24DA  
                                        l8119 18E2                                          l5487 336C  
                                        l5479 334E                                          l5495 356E  
                                        l8143 23F0                                          l5497 3578  
                                        l8161 248C                                          l9105 2C76  
                                        l9201 2DFA                                          l8235 2510  
                                        l8251 256A                                          l8083 17B6  
                                        l5499 3580                                          l9115 2CAC  
                                        l9211 2E16                                          l8237 251E  
                                        l8229 24F2                                          l8093 17D4  
                                        l8413 1374                                          l8165 249A  
                                        l8149 245E                                          l9109 2C8A  
                                        l9213 2E1A                                          l9205 2E06  
                                        l9045 3814                                          l8255 2580  
                                        l8247 255A                                          l8239 2528  
                                        l8271 2E90                                          l8087 17C4  
                                        l8079 17AA                                          l8191 26A2  
                                        l8183 2666                                          l8175 24B4  
                                        l9119 2CB4                                          l9223 2E36  
                                        l9207 2E0A                                          l9231 2E66  
                                        l8097 1804                                          l8089 17CC  
                                        l8513 0B52                                          l8441 1464  
                                        l8169 24A4                                          l9129 2CCA  
                                        l9225 2E3A                                          l9217 2E26  
                                        l9241 2BC2                                          l8291 2EE2  
                                        l8283 2EC6                                          l8275 2E9E  
                                        l8267 2E82                                          l8099 1838  
                                        l8523 0B86                                          l8515 0B56  
                                        l8195 26BA                                          l8187 2676  
                                        l8603 231C                                          l9411 349A  
                                        l9315 3C04                                          l9323 3BDC  
                                        l9219 2E2A                                          l9235 2BB2  
                                        l6931 30F0                                          l8277 2EA8  
                                        l7901 35D2                                          l8533 0B9C  
                                        l8509 0B38                                          l8197 26DA  
                                        l8189 2682                                          l8605 2336  
                                        l9405 348A                                          l9421 34C0  
                                        l9229 2E3E                                          l9253 2BE2  
                                        l6925 30CC                                          l8279 2EB0  
                                        l8287 2ED2                                          l8391 1C14  
                                        l8383 1BC2                                          l8367 1B50  
                                        l8551 0BF4                                          l8527 0B8C  
                                        l8519 0B62                                          l8543 0BC6  
                                        l8199 26E6                                          l8463 38B2  
                                        l9175 3B08                                          l9247 2BD2  
                                        l6935 3110                                          l6783 2A58  
                                        l7921 37A2                                          l7913 378A  
                                        l8393 1C1C                                          l8537 0BC0  
                                        l8529 0B90                                          l8545 0BD8  
                                        l8481 0A52                                          l8473 0A24  
                                        l8609 2344                                          l8721 22A6  
                                        l8465 38BC                                          l9353 3B38  
                                        l9185 3B24                                          l9177 3B0C  
                                        l9265 2C02                                          l9273 2C12  
                                        l6937 3114                                          l6929 30EA  
                                        l7931 37B4                                          l7851 2DDC  
                                        l7835 2D70                                          l8379 1BA4  
                                        l8571 0C62                                          l8563 0C3A  
                                        l8555 0C18                                          l8475 0A32  
                                        l8651 1E82                                          l8715 2290  
                                        l9363 3B54                                          l9355 3B3C  
                                        l9419 34AA                                          l9195 2DEA  
                                        l9259 2BF2                                          l9275 2C3A  
                                        l6779 2A26                                          l9611 02F2  
                                        l9603 02CC                                          l8581 0C96  
                                        l8565 0C42                                          l8557 0C22  
                                        l8493 0AD4                                          l8485 0A70  
                                        l8469 0A14                                          l9373 35F8  
                                        l8629 2384                                          l8733 22EA  
                                        l8725 22BA                                          l6789 2A84  
                                        l9605 02E2                                          l7919 379C  
                                        l7839 2DA8                                          l8583 0CDA  
                                        l8591 0D32                                          l8575 0C7A  
                                        l8479 0A3C                                          l8639 23B8  
                                        l8655 1E90                                          l8727 22C8  
                                        l8719 22A0                                          l8903 291E  
                                        l9199 2DF6                                          l9551 015C  
                                        l9535 00AA                                          l7961 3666  
                                        l7953 3650                                          l7849 2DCE  
                                        l8593 0D3A                                          l8569 0C5A  
                                        l8497 0ADC                                          l9385 3612  
                                        l9377 3604                                          l9393 3622  
                                        l8673 1ED6                                          l8649 1E68  
                                        l8729 22D2                                          l9721 1940  
                                        l9609 02EA                                          l9545 0118  
                                        l9529 0066                                          l7971 367A  
                                        l8579 0C8E                                          l8595 0D46  
                                        l9387 3618                                          l9379 3608  
                                        l9395 3638                                          l8683 1F04  
                                        l9811 2642                                          l9803 2626  
                                        l9723 194C                                          l7973 3680  
                                        l7949 3648                                          l8589 0D20  
                                        l9389 361E                                          l8677 1EEC  
                                        l8669 1EC4                                          l9901 2AEE  
                                        l9813 2646                                          l9733 1974  
                                        l9709 1914                                          l7959 365E  
                                        l7967 366E                                          l8687 1F1A  
                                        l8679 1EF2                                          l9399 347A  
                                        l9911 2B0E                                          l9807 2634  
                                        l9815 264C                                          l9743 19B0  
                                        l9591 022E                                          l7889 391A  
                                        l7897 35B6                                          l8697 2236  
                                        l9905 2AFC                                          l9913 2B14  
                                        l9593 0244                                          l8963 0F6A  
                                        l8973 1038                                          l9861 27AA  
                                        l9853 278E                                          l9837 2758  
                                        l9909 2B0A                                          l8967 0FC6  
                                        l8991 115A                                          l9871 27CA  
                                        l9791 25FC                                          STR_1 FF60  
                                        STR_2 FF88                                          l8977 1074  
                                        l8969 0FFC                                          l8985 10EE  
                                        l9865 27B8                                          l9857 279C  
                                        l9849 2780                                          l9873 27D0  
                                        STR_3 FFF5                                          STR_4 FFEF  
                                        l8979 10AE                                          l8995 1196  
                                        l9883 2A9E                                          l9795 260A  
                                        l9779 25D4                                          STR_5 FFB0  
                                        STR_6 FFDF                                          l8989 1124  
                                        l9869 27C6                                          STR_7 FFAA  
                                        STR_8 FFBF                                          l8999 11EC  
                                        l9799 2618                                          STR_9 FF6F  
                                        l9897 2AE0                                          u4420 3CBA  
                                        u4430 3CBC                                          u4450 30DA  
                                        u6211 1E5A                                          u5510 189C  
                                        u6231 1E78                                          u5280 2D9E  
                                        u6161 230E                                          u6181 232C  
                                        u6271 2228                                          u7320 0E8C  
                                        u6290 2254                                          i2l52 2D26  
                                        u5580 241E                                          u3980 31E4  
                                        u5590 2454                                          u7350 0F52  
                                        u6295 224C                                          i2l64 1798  
                __end_of_Activate_Buzzer_2KHz 3C68                                          u7360 0F54  
                                        u7328 0E90                                          u5850 1B7E  
                                        i2l77 1762                                          u7377 3D3C  
                                        _RBPU 007F8F                                          u6870 19A4  
                __end_of_Activate_Buzzer_4KHz 3C44                                          _TRMT 007D61  
                    ??_Do_Save_New_Alarm_Time 0043                         _setup_heater_set_temp 0068  
                                _DS1621_tempC 0046                                  _DS1621_tempF 0048  
                       _setup_heater_set_text 00C8                           ??_Deactivate_Buzzer 0011  
                                        _date 008B                                          _main 0D64  
                                        _font FC8D       Update_Setup_Screen_Cursor_Backward@xinc 0030  
                                ___ftpack@arg 0011       Update_Setup_Screen_Cursor_Backward@yinc 002F  
                                        _hour 005F                                  ___ftpack@exp 0014  
                            __end_of_I2C_Init 3D5A                              __end_of_I2C_Read 3686  
                                        _time 00AF                                          _year 006E  
                                        fsr0h 000FEA                                          fsr1h 000FE2  
                              ??_get_full_ADC 0013                                          fsr0l 000FE9  
                                        fsr2h 000FDA                                          fsr1l 000FE1  
                                        indf2 000FDF                                          fsr2l 000FD9  
                                        _wrap 0081                                          _volt 00E7  
                            __end_of_I2C_Stop 3C8C                        ?_DS3231_Turn_Off_Alarm 0001  
                                        pclat 000FFA                            __size_of_LCD_Reset 0012  
                                        prodh 000FF4                                          prodl 000FF3  
                                        start 0018                   __size_of_I2C_Write_Cmd_Only 001A  
                              _Monitor_Heater 38DA                               __end_of_Do_Init 3050  
                                 _Do_Beep_Bad 3B8C                               ??_drawFastVLine 001C  
                                ___ftmul@cntr 002A                               __end_of_i2cNack 3D64  
                                ___param_bank 000010                                  ___ftmul@sign 002B  
     Update_Setup_Screen_Cursor_Forward@field 002E                                  ___fttol@exp1 003A  
                   ??_DS3231_Write_Alarm_Time 0043                         __size_of_Do_Beep_Good 0018  
                                _Turn_Off_Fan 3D2C                                  ___fttol@lval 0036  
             __size_of_Exit_Setup_Heater_Temp 0010                                   ?_TIMER1_isr 0001  
                            __end_of_INT0_isr 179A                              __end_of_INT1_isr 3D82  
                            __end_of_INT2_isr 3D78                                         l10233 0D7A  
                                       l10247 0DF2                                         l10281 0F0A  
                                       l10273 0EF6                                         l10265 0ED6  
                                       l10291 0F38                                         l10285 0F14  
                                       l10277 0F00                                         l10269 0EEC  
                                       l10289 0F1A                __size_of_Activate_Buzzer_500Hz 0012  
                   __end_of_Deactivate_Buzzer 3D8A                               ??_do_update_pwm 003B  
                             drawFastVLine@hi 0020                               drawFastVLine@lo 0021  
               __end_of_Activate_Buzzer_500Hz 3C7A                                         ?_main 0001  
                             __end_of___awdiv 258C                               drawCircle@ddF_x 0026  
                                       STR_10 FFD8                               drawCircle@ddF_y 0028  
                                       STR_11 FFF8                                         STR_12 FFFB  
                                       STR_20 FEC7                                         STR_13 FFE4  
                                       STR_21 FE7A                                         STR_14 FFF1  
                                       STR_30 FF9F                                         STR_22 FEB1  
                                       STR_15 FFE9                                         STR_31 FFB5  
                                       STR_23 FE98                                         STR_16 FFED  
                                       STR_32 FF40                                         STR_24 FF1B  
                                       STR_17 FFE9                                         STR_33 FF07  
                                       STR_25 FEF2                                         STR_18 FFED  
                                       STR_34 FFC8                                         STR_26 FF7C  
                                       STR_27 FFB0                                         STR_35 FFD0  
                                       STR_19 FF50                                         STR_36 FFB0  
                                       STR_28 FFDF                               __end_of___awmod 2EEE  
                                       STR_37 FF94                                         STR_29 FEDD  
                                       STR_38 FF2F                               __end_of___ftdiv 23E0  
                             __end_of___ftmul 1F42                                         _T0CON 000FD5  
                             ___awdiv@divisor 013E                                         _T1CON 000FCD  
                             __end_of___fttol 22FE                                         _T2CON 000FCA  
                                       _T3CON 000FB1                 __size_of_Do_Setup_Heater_Temp 0094  
                             __end_of___lwdiv 3382                               __end_of___lwmod 35AC  
                             ___awdiv@counter 0140                               drawCircle@color 0022  
                                       _RCSTA 000FAB                                         _TMR0H 000FD7  
                                       _TMR1H 000FCF                                         _TMR0L 000FD6  
                                       _TMR1L 000FCE                                         _TMR3L 000FB2  
                                       _SPBRG 000FAF                                         _PORTA 000F80  
                                       _PORTE 000F84                                ?_Increase_Time 0001  
                                       _TRISA 000F92                                         _TRISB 000F93  
                                       _TRISC 000F94                                         _TRISD 000F95  
                                       _TRISE 000F96                                         _TXREG 000FAD  
                                       _TXSTA 000FAC                               __end_of_get_RPM 36C8  
                                       _Rcmd1 1A14                                         _Rcmd3 2034  
    Update_Setup_Screen_Cursor_Backward@field 002E                                    _i2cHighSda 3D92  
                                  _i2cHighScl 3D38                                  bcd_2_dec@bcd 0015  
                                bcd_2_dec@dec 0013                                 ___awtoft@sign 001C  
                             __end_of_dpowers FE72                                         _color 00EE  
                                       _font2 FD8C                                         _found 005E  
                             __end_of_isdigit 3A48                                         _tempC 00D9  
                                       _tempF 00DD                                         _month 0061  
                               ___ftpack@sign 0015                                         _putch 3D10  
                           __end_of_I2C_Start 3C9E                             __end_of_I2C_Write 37C2  
                              __CFG_BOREN$OFF 000000                                         tablat 000FF5  
                      __end_of_Monitor_Heater 390A                                         status 000FD8  
                           ?_DS1621_Read_Temp 0014                                  _Do_Beep_Good 3B74  
             __size_of_check_for_button_input 0090                         __end_of_Go_Next_Field 3B2C  
                             write_data@data_ 0013                            ??_DS1621_Read_Temp 0016  
                          Set_RGB_Color@color 0013                               __initialization 2F6C  
                               ??_Set_RPM_RGB 0013                                  __end_of_main 0F5E  
                                __end_of_font FD8C                      ?_Do_Save_New_Heater_Temp 0001  
                __end_of_Decrease_Heater_Temp 3C0A                              __end_of_Init_ADC 3D2C  
                            get_duty_cycle@dc 0017                              __end_of_Rcmd2red 3746  
                          _Select_Alarm_Field 0053                                        ??_main 0149  
                               ___fttol@sign1 0035                                 __activetblptr 000002  
                           ?_DS3231_Read_Time 0001                             __end_of_LCD_Reset 3C56  
     I2C_Write_Address_Write_One_Byte@Address 0013                         __end_of_Go_Prev_Field 3B14  
                   ??_TFT_GreenTab_Initialize 001D                   ?_Update_Setup_Heater_Screen 0001  
                  ??_Update_Setup_Time_Screen 0043                                _Init_Interrupt 36C8  
                          ??_DS3231_Read_Time 0014                                        ?_Rcmd1 0001  
                                      ?_Rcmd3 0001                                     I2C_Init@c 0011  
                         _In_Alarm_Time_Setup 00F9                                     I2C_Read@n 0012  
                 DS3231_Turn_Off_Alarm@Device 001F                                        _ADCON0 000FC2  
                                      _ADCON1 000FC1                                        _ADCON2 000FC0  
                         DS1621_Read_Temp@Cmd 0016                                        _ADRESH 000FC4  
                                      _ADRESL 000FC3                                        _CCPR1L 000FBE  
                                      _CCPR2L 000FBB                              ___awdiv@dividend 013C  
                      _Exit_Setup_Heater_Temp 3CD0                            __size_of_i2cLowSda 000A  
                          __size_of_i2cLowScl 0008                              __end_of___awtoft 383A  
                                      _HEATER 0050                                        ?_putch 0001  
                            __end_of___ftpack 271C                              __end_of___lbtoft 3A02  
                                      _DC_Txt 00D1                 __size_of_Increase_Heater_Temp 0014  
                                   ??_Do_Init 0017                                        i2l7401 2D12  
                                      i2l7405 2D1C                                        i2l6803 164A  
                                      i2l6813 167A                                        i2l6831 16C0  
                                      i2l6833 16C6                                        i2l6825 16A2  
                                      i2l6843 16E6                                        i2l6819 1698  
                                      i2l6845 16EC                                        i2l6837 16CA  
                                      i2l7397 2D08                                        i2l6857 1746  
                                      i2l6865 1768                                        i2l6849 16F0  
                                      i2l6867 176E                                        i2l6875 1776  
                                      _OSCCON 000FD3               __size_of_Do_Save_New_Alarm_Time 0018  
                         __size_of_TIMER1_isr 000C                                        _SPBRGH 000FB0  
                             ?_Monitor_Heater 0001                                        _SSPBUF 000FC9  
                                   ??_i2cNack 0011                                  _Alarm_SW_Txt 00CD  
                            _force_nec_state0 3D9A                              __end_of_delay_ms 3478  
                                      _i2cAck 3C9E              ??_Initialize_Setup_Heater_Screen 0043  
             ?_Initialize_Setup_Heater_Screen 0001                  __size_of_Go_Prev_Alarm_Field 0018  
                            __end_of_fillRect 35F6                              __end_of_drawChar 18F0  
                          __size_of_OpenUSART 0070                                        ___ftge 29F4  
                 __end_of_Increase_Alarm_Time 34C6                          DS3231_Init@control_E 0019  
                                      ___wmul 398E                                     ??___awdiv 0041  
                            __end_of_drawtext 1C32                                     ??___awmod 003F  
                                   ??___ftdiv 0032                                    _Test_Alarm 18F0  
                                   ??___ftmul 0023                                     ??___fttol 0030  
                                      _chkisr 0008                                     ??___lwdiv 0015  
                                      _array1 011F                                     ??___lwmod 001C  
                                      _buffer 0100                __size_of_Exit_Setup_Alarm_Time 0010  
                                      _nec_ok 00F2                 __end_of_Exit_Setup_Alarm_Time 3CF0  
                                      clear_0 2F72                                        clear_1 2F7E  
                            ___awdiv@quotient 0142                                        _minute 0060  
                                      _second 0063                               ___awmod@divisor 003D  
                        _Activate_Buzzer_2KHz 3C56                          _Activate_Buzzer_4KHz 3C32  
                                   ??_get_RPM 0043                    __size_of_Deactivate_Buzzer 0008  
                             ___awmod@counter 003F                                        _printf 0A0A  
                                drawtext@size 0040                               ??_Increase_Time 0043  
                                      _strcpy 38A8                                        _strlen 3746  
                       ___ftmul@f3_as_product 0027                        __end_of_Init_Interrupt 3708  
                         __end_of_Set_RPM_RGB 312C                          __end_of_get_full_ADC 39DC  
                      _check_for_button_input 2C40                              _Do_Save_New_Time 3BBA  
                                __pdataCOMRAM 006F                                     ??_isdigit 0011  
                                   ?_I2C_Init 0011                                     ?_I2C_Read 0001  
                      get_duty_cycle@set_temp 0013                                     ?_I2C_Stop 0001  
                                __mediumconst FC8C                                        tblptrh 000FF7  
                                      tblptrl 000FF6                                        tblptru 000FF8  
            __end_of_I2C_Write_Cmd_Write_Data 3AA8                                   ?_i2cHighSda 0001  
                                 ?_i2cHighScl 0001                                        putch@c 0011  
                      __size_of_Set_RGB_Color 0024                              __end_of_spiwrite 3C1E  
                    __size_of_Exit_Time_Setup 0010                            __size_of_bcd_2_dec 002A  
                         _Do_Setup_Alarm_Time 271C                                    __accesstop 0080  
                     __end_of__initialization 2FD6                              ??_get_duty_cycle 0015  
       I2C_Write_Address_Read_One_Byte@Device 0016                            __size_of_dec_2_bcd 0068  
                                  ___ftge@ff1 0011                                    ___ftge@ff2 0014  
                                   ?_INT0_isr 0001                                     ?_INT1_isr 0001  
                                   ?_INT2_isr 0001                            _setup_alarm_minute 0065  
                          _setup_alarm_second 0066                                 ___rparam_used 000001  
                                  ___ftdiv@f1 002C               __end_of_Do_Save_New_Heater_Temp 3BF6  
                                  ___ftdiv@f2 002F                                    ___ftdiv@f3 0036  
                                  ___awtoft@c 0019                                    ___lbtoft@c 001C  
                         _Go_Next_Alarm_Field 3B44                                    ___ftmul@f1 001D  
                                  ___ftmul@f2 0020                                    ___fttol@f1 002C  
                               __end_of_Rcmd1 1B24                                 __end_of_Rcmd3 2126  
                              __pcstackCOMRAM 0001                 DS3231_Turn_On_Alarm@Address_E 001B  
               DS3231_Turn_On_Alarm@Address_F 001C                                  __pidataBANK0 32C2  
                                __pidataBANK1 37C2                                 __end_of_font2 FE68  
                           __end_of_i2cLowSda 3D6E                             __end_of_i2cLowScl 3D92  
                        ?_Do_Setup_Alarm_Time 0001                                 __end_of_putch 3D1E  
                       ?_Activate_Buzzer_2KHz 0001                         ?_Activate_Buzzer_4KHz 0001  
                      _Do_Save_New_Alarm_Time 3B5C                                drawPixel@color 0019  
                                dec_2_bcd@bcd 0144                                  dec_2_bcd@dec 0146  
                      __size_of_Decrease_Time 0084                               ?_Init_Interrupt 0001  
                      __size_of_write_command 0010                                    ??_I2C_Init 0015  
                                  ??_I2C_Read 0011                                  _alarm_minute 0058  
                                _alarm_second 0059              ??_Update_Setup_Alarm_Time_Screen 0043  
             ?_Update_Setup_Alarm_Time_Screen 0001                  __end_of_DS3231_Turn_On_Alarm 33D4  
                                  ??_I2C_Stop 0011                          ?_Go_Next_Alarm_Field 0001  
                                     ??_Rcmd1 001D                                       ??_Rcmd3 001D  
                          __size_of_drawPixel 0030                             __end_of_OpenUSART 30C0  
                                     ??_putch 0011                          _Decrease_Heater_Temp 3BF6  
                     ??_DS3231_Turn_Off_Alarm 001B                                    __pbssBANK0 00E3  
                            _setup_alarm_hour 0064                                     ?_Init_ADC 0001  
                            _setup_alarm_time 0094          __end_of_Initialize_Setup_Time_Screen 1D3E  
       __size_of_Initialize_Setup_Time_Screen 010C                  _Initialize_Setup_Time_Screen 1C32  
                               ??_DS1621_Init 0016                                 ??_DS3231_Init 0017  
                                   ?_Rcmd2red 0001                         __end_of_Toggle_Heater 3CC0  
                          __size_of_init_UART 0014                               spiwrite@spidata 0012  
                                  _alarm_date 0056                                    ??_INT0_isr 0001  
                                  ??_INT1_isr 0001                                    ??_INT2_isr 0001  
                                  _alarm_mode 00EC                                    _alarm_hour 0057  
                                  _alarm_time 0082                                 ?_Wait_One_Sec 0001  
    I2C_Write_Address_Write_One_Byte@Data_Out 0014                                       ?_i2cAck 0001  
                                ?_Do_Beep_Bad 0001                            __size_of_read_volt 0064  
                          __CFG_CCP2MX$PORTBE 000000                                 _Set_RGB_Color 3A02  
                              I2C_Read@inByte 0013                                       ?___ftge 0011  
         __size_of_Update_Setup_Heater_Screen 00AC                    DS3231_Turn_On_Alarm@Device 001F  
                                     ?___wmul 0011                           __size_of_i2cHighSda 0008  
                         __size_of_i2cHighScl 000C                                   _Set_RPM_RGB 30C0  
                                 ?_Test_Alarm 0001                         ??_Do_Setup_Alarm_Time 0044  
                                     ?_chkisr 0001                               _heater_set_temp 006F  
                      __size_of_setAddrWindow 004E                             __end_of_bcd_2_dec 3964  
                                     _CCP1CON 000FBD              I2C_Write_Cmd_Write_Data@Data_Out 0014  
                                     _CCP2CON 000FBA                        __size_of_Do_Setup_Time 00CA  
                                ??_TIMER1_isr 0001                                 ??_I2C_ReStart 0011  
                                     _ALARMEN 0044                                     ?___awtoft 0019  
                                   ?___ftpack 0011                                     ?___lbtoft 0019  
                                  I2C_Write@n 0012                                       ?_printf 001D  
                                     ?_strcpy 0011                                       ?_strlen 0011  
                           __end_of_dec_2_bcd 3194                                    _fillScreen 3AC6  
                                     _MATCHED 00EA                         __end_of_Update_Screen 068A  
                    ??_DS3231_Read_Alarm_Time 0014                                    _drawCircle 12CC  
                       ??_Go_Next_Alarm_Field 0031                                     ?_delay_ms 0017  
                                   ?_fillRect 0023                                     ?_drawChar 002E  
                                     _SSPCON1 000FC6                         ?_Decrease_Heater_Temp 0001  
                                     _SSPSTAT 000FC7                                       _RPM_Txt 00C3  
                       __end_of_fillRectangle 24BC                                     ?_drawtext 0039  
                                  ??_Init_ADC 0011                                       _Do_Init 2FE0  
                    _I2C_Write_Cmd_Write_Data 3A88                    __end_of_I2C_Write_Cmd_Only 3AFC  
                                  ??_Rcmd2red 0014                  __end_of_Do_Setup_Heater_Temp 2B1E  
                      DS1621_Read_Temp@Device 0018                                 _Decrease_Time 2DE8  
                              ??_Wait_One_Sec 0011                                       _i2cNack 3D5A  
                          __end_of_TIMER1_isr 3D50                 ?_Initialize_Setup_Time_Screen 0001  
                __size_of_Decrease_Alarm_Time 0048                                 _write_command 3D00  
                                   _I2C_Start 3C8C                                     _I2C_Write 3784  
                           ??_Exit_Time_Setup 0043                               __size_of_i2cAck 0012  
                                     __Hparam 0000                                       __Lparam 0000  
                              ?_Set_RGB_Color 0001                           __end_of_DS1621_Init 3AC6  
                         __end_of_DS3231_Init 2892                             __end_of_drawPixel 393A  
                       __end_of_drawFastVLine 2DE8                               __size_of___ftge 0096  
                                     ___awdiv 24BC                                       ___awmod 2E6C  
                                     ___ftdiv 22FE                               __size_of___wmul 0028  
                      ??_Activate_Buzzer_2KHz 0011                                       ___ftmul 1E4A  
                      ??_Activate_Buzzer_4KHz 0011                                       ___fttol 2218  
                                     ___lwdiv 3326                                       ___lwmod 3560  
                       __size_of_get_full_ADC 0026                               __size_of_chkisr 2D58  
                                   ?_spiwrite 0001                                       __pcinit 2F6C  
                                  ??___awtoft 001C                                    ??___ftpack 0016  
                                  ??___lbtoft 001C                                       __ramtop 1000  
                                     _get_RPM 3686                                       __ptext0 0D64  
                                     __ptext1 3686                                       __ptext2 001C  
                                     __ptext3 3CB0                                       __ptext4 18F0  
                                     __ptext5 31FA                     __size_of_DS1621_Read_Temp 003C  
                                     __ptext6 39B6                                       __ptext7 37FE  
                                     __ptext8 29F4                                       __ptext9 3382  
                             __size_of_printf 035A                             __end_of_init_UART 3C32  
                                   _T0CONbits 000FD5                               __size_of_strcpy 0032  
                             __size_of_strlen 003E                             __end_of_hexpowers FE7A  
                    __end_of_force_nec_state0 3DA2                                     _T1CONbits 000FCD  
                                     _dpowers FE68                         __end_of_do_update_pwm 2948  
                                     _isdigit 3A26                         _Activate_Buzzer_500Hz 3C68  
                            ___awmod@dividend 003B                                    _duty_cycle 005D  
                     ?_Exit_Setup_Heater_Temp 0001                           _Go_Prev_Alarm_Field 3B2C  
                           __end_of_read_volt 325E                                    ??_delay_ms 0019  
                         __end_of_I2C_ReStart 3BBA              __size_of_Do_Save_New_Heater_Temp 0014  
                               drawtext@_text 003A                                 drawtext@color 003C  
                            ??_Monitor_Heater 0044                                    ??_fillRect 0028  
                                  ??_drawChar 0035                                     _LCD_Reset 3C44  
                           _DS3231_Write_Time 2B1E                                 _setAddrWindow 34C6  
                              __pintcode_body 2CD0                                 Wait_One_Sec@k 0011  
                                  delay_ms@ms 0017                          end_of_initialization 2FD6  
                               _Do_Setup_Time 258C                                     _INT1_flag 00F7  
                         __size_of_Test_Alarm 0124                                     _INT2_flag 00F8  
                                  ??_drawtext 0041                            ?_DS3231_Write_Time 0001  
                              ?_Decrease_Time 0001                 DS3231_Turn_On_Alarm@control_E 001D  
               DS3231_Turn_On_Alarm@control_F 001E                                ?_write_command 0001  
                               __Lmediumconst FC8C                     __size_of_DS3231_Read_Time 0064  
                                     int_func 2CD0                       DS3231_Read_Time@Address 0014  
                    DS3231_Write_Time@Address 0148                                    ?_I2C_Start 0001  
                                  ?_I2C_Write 0001                                    get_RPM@RPS 00FE  
                    __end_of_Do_Save_New_Time 3BCE                                  _get_full_ADC 39B6  
                         ??_DS3231_Write_Time 0043                          ?_Go_Prev_Alarm_Field 0001  
                     check_for_button_input@j 003A                      ?_DS3231_Write_Alarm_Time 0001  
                                  _tempSecond 0080                          _DS3231_Turn_On_Alarm 3382  
                                   _RCSTAbits 000FAB                                       printf@c 0038  
                                     printf@f 001D                                       postdec1 000FE5  
                                     postdec2 000FDD                                       postinc0 000FEE  
                                     postinc2 000FDE                  __end_of_Increase_Heater_Temp 3BE2  
                                  ??_spiwrite 0011                       ?_check_for_button_input 0001  
                                     strlen@s 0011                   I2C_Write_Cmd_Write_Data@Cmd 0013  
                                   _PORTAbits 000F80                              drawtext@cursor_x 0142  
                            drawtext@cursor_y 0141                                     _PORTBbits 000F81  
                                   _PORTCbits 000F82                                     _PORTDbits 000F83  
                                   _PORTEbits 000F84                              I2C_Write@outByte 0011  
      __end_of_Initialize_Setup_Heater_Screen 2034       __size_of_Initialize_Setup_Heater_Screen 00F2  
              _Initialize_Setup_Heater_Screen 1F42                                    _setup_date 009D  
                                 ?_fillScreen 0024                __end_of_Exit_Setup_Heater_Temp 3CE0  
                                  _setup_hour 0069                                    _setup_time 00A6  
                                  _setup_year 006D                                   ?_drawCircle 001C  
             __size_of_DS3231_Read_Alarm_Time 004C                                    drawChar@bg 0032  
                   __end_of_DS3231_Write_Time 2BB0                DS3231_Turn_Off_Alarm@Address_E 001B  
              DS3231_Turn_Off_Alarm@Address_F 001C                                     _TRISBbits 000F93  
                                   _TRISCbits 000F94                        __size_of_Go_Next_Field 0018  
      I2C_Write_Address_Read_One_Byte@Address 0014                                  ??_i2cHighSda 0011  
                                ??_i2cHighScl 0011                        ??_Decrease_Heater_Temp 0043  
                           __size_of_I2C_Init 000A                             __size_of_I2C_Read 0048  
                           __size_of_I2C_Stop 0012                                ?_setAddrWindow 0014  
                                  ?_LCD_Reset 0001                                ?_Do_Setup_Time 0001  
                        _In_Heater_Temp_Setup 00FA                              drawtext@textsize 013D  
                                  drawPixel@x 001B                                    drawPixel@y 0018  
                          _Update_Screen$3325 0144                                   _DS1621_Init 3AA8  
                                 _DS3231_Init 27DA                                   ___ftdiv@exp 0039  
                                 printf@width 0036                                     _TXSTAbits 000FAC  
                             ??_Set_RGB_Color 0013                         ??_Go_Prev_Alarm_Field 0031  
           __size_of_Update_Setup_Time_Screen 01A8                            get_full_ADC@result 0015  
                   ?_Update_Setup_Time_Screen 0001                         ?_DS3231_Turn_On_Alarm 0001  
                           __size_of_INT0_isr 0178                             __size_of_INT1_isr 000A  
                           __size_of_INT2_isr 000A                                __end_of_i2cAck 3CB0  
                                 ___ftmul@exp 0026                        __size_of_Go_Prev_Field 0018  
              ??_Initialize_Setup_Time_Screen 0043                       ?_Do_Save_New_Alarm_Time 0001  
                        __size_of_Do_Beep_Bad 0018                      DS1621_Read_Temp@Data_Ret 0017  
              __end_of_check_for_button_input 2CD0                              ??_Init_Interrupt 0011  
          Update_Setup_Heater_Screen@dc_char1 0144            Update_Setup_Heater_Screen@dc_char2 0145  
          Update_Setup_Heater_Screen@dc_char3 0146                            __end_of_i2cHighSda 3D9A  
                              __end_of___ftge 2A8A                            __end_of_i2cHighScl 3D44  
                              __end_of___wmul 39B6                                 delay_ms@count 001B  
                                  _write_data 3CF0                                 __pidataCOMRAM 3DA2  
                              __end_of_chkisr 2D60                      ?_TFT_GreenTab_Initialize 0001  
                                 _I2C_ReStart 3BA4                                    drawtext@bg 003E  
                       _Exit_Setup_Alarm_Time 3CE0                        ?_Activate_Buzzer_500Hz 0001  
                                   _Nec_code1 0051                                     _i2cLowSda 3D64  
                        _Do_Setup_Heater_Temp 2A8A                                     _i2cLowScl 3D8A  
                __size_of_Increase_Alarm_Time 004E                          __end_of_Wait_One_Sec 3A88  
                              __end_of_printf 0D64                         __end_of_Increase_Time 2C40  
                              __end_of_strcpy 38DA                                __end_of_strlen 3784  
                                   _Nec_state 0052                           start_initialization 2F6C  
                      Update_Screen@neg_tempF 0146                               ??_Decrease_Time 0043  
                          get_duty_cycle@temp 0011                               ??_write_command 0013  
             __end_of_DS3231_Write_Alarm_Time 2F6C                                     _OpenUSART 3050  
              __size_of_DS3231_Turn_Off_Alarm 0052                  DS3231_Read_Alarm_Time@Device 0015  
               __end_of_DS3231_Turn_Off_Alarm 3426                              __CFG_OSC$INTIO67 000000  
                                 ??_I2C_Start 0011                             __size_of_Init_ADC 000E  
                                 ??_I2C_Write 0011                        _DS3231_Read_Alarm_Time 3514  
                                    ??_i2cAck 0011                             __size_of_Rcmd2red 003E  
                         __size_of_fillScreen 001C       I2C_Write_Address_Read_One_Byte@Data_Ret 0015  
              __end_of_Do_Save_New_Alarm_Time 3B74                           __size_of_drawCircle 01AE  
                               _Go_Next_Field 3B14                                      ??___ftge 0017  
                                    ??___wmul 0015                                  ?_Set_RPM_RGB 0011  
                                ??_Test_Alarm 0044                                 ?_Turn_Off_Fan 0001  
                                    ??_chkisr 0003                                   __pdataBANK0 0080  
                                 __pdataBANK1 0100                               setAddrWindow@x0 0017  
                             setAddrWindow@x1 0015                               setAddrWindow@y0 0014  
                             setAddrWindow@y1 0016                                      ??_printf 002B  
                            _DS1621_Read_Temp 383A                         ?_Do_Setup_Heater_Temp 0001  
                                    ??_strcpy 0015                                      ??_strlen 0013  
                                  ?_i2cLowSda 0001                                    ?_i2cLowScl 0001  
                         _Decrease_Alarm_Time 35F6                                     _bcd_2_dec 393A  
                           __size_of___awtoft 003C                             __size_of___ftpack 00C6  
                           __size_of___lbtoft 0026                       _Do_Save_New_Heater_Temp 3BE2  
                                 __pbssCOMRAM 0044                    ??_I2C_Write_Cmd_Write_Data 0015  
                  __size_of_DS3231_Write_Time 0092                               ??_setAddrWindow 0017  
                               __pcstackBANK0 00FE                                 __pcstackBANK1 013C  
                               _Go_Prev_Field 3AFC                               ??_Do_Setup_Time 0044  
                                   _dec_2_bcd 312C                               _Exit_Time_Setup 3CC0  
                                 ??_LCD_Reset 001D                                  _isdigit$2956 0012  
                           __size_of_delay_ms 0052                                 _Heater_SW_Txt 00D5  
                        _Increase_Heater_Temp 3BCE                                      ?_Do_Init 0001  
                           __size_of_fillRect 004A                             __size_of_drawChar 0156  
                          __end_of_Test_Alarm 1A14                                    ?_OpenUSART 0011  
                            _DS3231_Read_Time 325E                           _Heater_Set_Temp_Txt 00BE  
                                    ?_i2cNack 0001                          ?_Decrease_Alarm_Time 0001  
                           __size_of_drawtext 010E                                 ?_Do_Beep_Good 0001  
                      ??_DS3231_Turn_On_Alarm 001B   __end_of_Update_Setup_Screen_Cursor_Backward 12CC  
__size_of_Update_Setup_Screen_Cursor_Backward 01B4         ??_Update_Setup_Screen_Cursor_Backward 002E  
        ?_Update_Setup_Screen_Cursor_Backward 0001           _Update_Setup_Screen_Cursor_Backward 1118  
                 __end_of_Do_Setup_Alarm_Time 27DA                                ?_Go_Next_Field 0001  
                            ___lwdiv@dividend 0011                                   I2C_Read@ack 0011  
                                   _bit_count 00FD                                     __pintcode 0008  
             __end_of_TFT_GreenTab_Initialize 398E                                ??_Turn_Off_Fan 0011  
                               __pmediumconst FC8C                                      ?___awdiv 013C  
                                   __ptext100 3D50                                     __ptext101 3AA8  
                                   __ptext110 3C9E                                     __ptext102 3A88  
                                   __ptext111 3BA4                                     __ptext103 3AE2  
                                   __ptext120 1622                                     __ptext112 3D64  
                                   __ptext104 383A                                     __ptext121 3D9A  
                                   __ptext113 3D8A                                     __ptext105 3784  
                                   __ptext114 3D92                                     __ptext106 3C7A  
                                   __ptext115 3D38                                     __ptext107 3C8C  
                                   __ptext108 363E                                     __ptext117 3D44  
                                   __ptext109 3D5A                                     __ptext118 3D6E  
                                   __ptext119 3D78                                      ?___awmod 003B  
                                    ?___ftdiv 002C                                      ?___ftmul 001D  
                                    ?___fttol 002C                       __size_of_get_duty_cycle 0066  
                                   __tft_type 0055                                      ?___lwdiv 0011  
                          _I2C_Write_Cmd_Only 3AE2                                      ?___lwmod 0018  
                 __end_of_Go_Next_Alarm_Field 3B5C                DS3231_Turn_Off_Alarm@control_E 001D  
              DS3231_Turn_Off_Alarm@control_F 001E                            drawFastVLine@color 001A  
                                 ?_write_data 0001                        ?_Exit_Setup_Alarm_Time 0001  
                                   _drawPixel 390A                                      ?_get_RPM 0041  
                           __size_of_spiwrite 0014                                    ?_bcd_2_dec 0001  
                      __size_of_Toggle_Heater 0010                           ?_I2C_Write_Cmd_Only 0013  
                           ?_force_nec_state0 0001                                      ?_isdigit 0001  
                                    _I2C_Init 3D50                                      _I2C_Read 363E  
                              ?_Go_Prev_Field 0001                                      _I2C_Stop 3C7A  
                           _Initialize_Screen 068A                                __size_of_Rcmd1 0110  
                              __size_of_Rcmd3 00F2                  ??_Update_Setup_Heater_Screen 0043  
                                   _init_UART 3C1E                                    ?_dec_2_bcd 0041  
                          ??_force_nec_state0 0001                      I2C_Write_Cmd_Only@Device 0014  
                                   _hexpowers FE72                            ?_Initialize_Screen 0001  
                            ___lwdiv@quotient 0015                                __size_of_putch 000E  
                                   _read_volt 31FA                         ?_Increase_Heater_Temp 0001  
    __end_of_I2C_Write_Address_Write_One_Byte 3A68     __size_of_I2C_Write_Address_Write_One_Byte 0020  
          ??_I2C_Write_Address_Write_One_Byte 0015             ?_I2C_Write_Address_Write_One_Byte 0013  
            _I2C_Write_Address_Write_One_Byte 3A48                         ??_Decrease_Alarm_Time 0043  
                              ___wmul@product 0015                                ??_Do_Beep_Good 0044  
                         ??_Initialize_Screen 0043                                  _Select_Field 0054  
                                    _INT0_isr 1622                                      _INT1_isr 3D78  
                                    _INT2_isr 3D6E                          ??_I2C_Write_Cmd_Only 0014  
                                    _PIE1bits 000F9D                             ?_Do_Save_New_Time 0001  
                      __size_of_Update_Screen 066E                        DS3231_Read_Time@Device 0015  
                     DS3231_Write_Time@Device 0147                                      _PIR1bits 000F9E  
                               _In_Time_Setup 00FB                            ??_Do_Save_New_Time 0043  
                       __size_of_Wait_One_Sec 0020                                     _setup_day 0067  
                           DS1621_Init@Device 0016                                     fillRect@h 0025  
                                   fillRect@i 002C                                     fillRect@w 0024  
                                   fillRect@x 002B                                     fillRect@y 0023  
                      ??_Do_Setup_Heater_Temp 00FE                                     drawChar@c 002F  
                                   drawChar@i 0038                                     drawChar@j 0037  
                                   drawChar@x 0036                                     drawChar@y 002E  
               __size_of_Activate_Buzzer_2KHz 0012                 __size_of_Activate_Buzzer_4KHz 0012  
                                  ?_drawPixel 0018                        __size_of_fillRectangle 00DC  
                   ??_Do_Save_New_Heater_Temp 0043                                    _ADCON0bits 000FC2  
                     __end_of_Exit_Time_Setup 3CD0                             ___wmul@multiplier 0011  
                   __end_of_Initialize_Screen 0A0A                                   ??_i2cLowSda 0011  
                                 ??_i2cLowScl 0011                 DS3231_Read_Alarm_Time@Address 0014  
                                ??_fillScreen 0026              __size_of_DS3231_Write_Alarm_Time 007E  
                                ??_drawCircle 0024                                    printf@flag 0035  
                                  printf@prec 0032                                    ?_init_UART 0001  
            __end_of_Update_Setup_Time_Screen 1622                                   _INTCON2bits 000FF1  
     __end_of_I2C_Write_Address_Read_One_Byte 38A8      __size_of_I2C_Write_Address_Read_One_Byte 0032  
           ??_I2C_Write_Address_Read_One_Byte 0015              ?_I2C_Write_Address_Read_One_Byte 0014  
             _I2C_Write_Address_Read_One_Byte 3876                                   _INTCON3bits 000FF0  
                                   copy_data0 2F98                                     copy_data1 2FB8  
                                   drawtext@i 013F                        __size_of_drawFastVLine 0088  
                                   drawtext@x 013C                                     drawtext@y 0039  
                                  ?_read_volt 003B                   Set_RGB_Color@temp_preserved 0014  
                                    _Nec_code 00E3                                      _Init_ADC 3D1E  
                           write_command@cmd_ 0013    __end_of_Initialize_Setup_Alarm_Time_Screen 1E4A  
 __size_of_Initialize_Setup_Alarm_Time_Screen 010C          ??_Initialize_Setup_Alarm_Time_Screen 0043  
         ?_Initialize_Setup_Alarm_Time_Screen 0001            _Initialize_Setup_Alarm_Time_Screen 1D3E  
                                 ??_OpenUSART 0013                                  ?_DS1621_Init 0001  
                                    _Rcmd2red 3708                              __size_of_Do_Init 0070  
                         __size_of_write_data 0010                                  ?_DS3231_Init 0001  
                             ??_Go_Next_Field 0031                               OpenUSART@config 0013  
      I2C_Write_Address_Write_One_Byte@Device 0015                                 _Toggle_Heater 3CB0  
                                _Time_Elapsed 004A                           _Increase_Alarm_Time 3478  
                            __size_of_i2cNack 000A                                 _RTC_ALARM_Txt 00E1  
                                _Wait_One_Sec 3A68                                      __Hrparam 0000  
                      __size_of_do_update_pwm 00B6                            __end_of_fillScreen 3AE2  
                                    __Lrparam 0000                            __end_of_drawCircle 147A  
                     ??_Activate_Buzzer_500Hz 0011                              __size_of___awdiv 00D0  
                            __size_of___awmod 0082                              __size_of___ftdiv 00E2  
                            __size_of___ftmul 00F8                              __size_of___fttol 00E6  
                            __size_of___lwdiv 005C                                      _Volt_Txt 00B8  
                            __size_of___lwmod 004C                          __size_of_Set_RPM_RGB 006C  
                                    ___awtoft 37FE                                      ___ftpack 2656  
                                    ___lbtoft 39DC                                  ?_I2C_ReStart 0001  
                             ??_Go_Prev_Field 0031                              __size_of_get_RPM 0042  
                                 ??_bcd_2_dec 0011                          ?_Increase_Alarm_Time 0001  
                               _Update_Screen 001C                              __size_of_isdigit 0022  
                                    _delay_ms 3426                               ___lwdiv@divisor 0013  
                                 ??_dec_2_bcd 00FE                               ___lwdiv@counter 0017  
                                    __ptext10 33D4                                      __ptext11 27DA  
                                    __ptext20 2BB0                                      __ptext12 3A48  
                                    __ptext21 3AFC                                      __ptext13 3876  
                                    __ptext30 3BCE                                      __ptext22 3B14  
                                    __ptext14 3C32                                      __ptext31 3CD0  
                                    __ptext23 3CC0                                      __ptext15 30C0  
                                    __ptext40 3B2C                                      __ptext32 3BE2  
                                    __ptext24 3BBA                                      __ptext16 38DA  
                                    __ptext41 1118                                      __ptext33 3BF6  
                                    __ptext25 2B1E                                      __ptext17 3194  
                                    __ptext50 12CC                                      __ptext42 3B44  
                                    __ptext34 2948                                      __ptext26 2DE8  
                                    __ptext18 258C                                      __ptext51 3964  
                                    __ptext43 0F5E                                      __ptext35 271C  
                                    __ptext27 147A                                      __ptext19 1C32  
                                    __ptext60 3514                                      __ptext52 2034  
                                    __ptext44 3CE0                                      __ptext36 2C40  
                                    __ptext28 2A8A                                      __ptext61 3B74  
                                    __ptext53 3708                                      __ptext45 3B5C  
                                    __ptext37 393A                                      __ptext29 1F42  
                                    __ptext70 3D82                                      __ptext62 3C56  
                                    __ptext54 1A14                                      __ptext46 068A  
                                    __ptext38 1D3E                                      __ptext71 3C68  
                                    __ptext63 3B8C                                      __ptext55 3C44  
                                    __ptext47 38A8                                      __ptext39 3478  
                                    __ptext80 3746                                      __ptext72 35F6  
                                    __ptext64 2892                                      __ptext56 3426  
                                    __ptext48 3AC6                                      __ptext81 179A  
                                    __ptext73 2126                                      __ptext65 39DC  
                                    __ptext57 2EEE                                      __ptext49 23E0  
                                    __ptext90 2E6C                                      __ptext82 35AC  
                                    __ptext74 0A0A                                      __ptext66 2218  
                                    __ptext58 312C                                      __ptext91 24BC  
                                    __ptext83 2D60                                      __ptext75 3D10  
                                    __ptext67 1E4A                                      __ptext59 325E  
                                    __ptext92 2FE0                                      __ptext84 390A  
                                    __ptext76 3A26                                      __ptext68 22FE  
                                    __ptext93 3C1E                                      __ptext85 34C6  
                                    __ptext77 3560                                      __ptext69 2656  
                                    __ptext94 3050                                      __ptext86 3CF0  
                                    __ptext78 3326                                      __ptext95 3D2C  
                                    __ptext87 3D00                                      __ptext79 1B24  
                                    __ptext96 3A02                                      __ptext88 3C0A  
                                    __ptext97 3A68                                      __ptext89 398E  
                                    __ptext98 36C8                                      __ptext99 3D1E  
                      ??_Increase_Heater_Temp 0043                                      _fillRect 35AC  
                                    _drawChar 179A                          __end_of_Turn_Off_Fan 3D38  
            __size_of_TFT_GreenTab_Initialize 002A                 __size_of_Decrease_Heater_Temp 0014  
  __end_of_Update_Setup_Screen_Cursor_Forward 1118   __size_of_Update_Setup_Screen_Cursor_Forward 01BA  
        ??_Update_Setup_Screen_Cursor_Forward 002E           ?_Update_Setup_Screen_Cursor_Forward 0001  
          _Update_Setup_Screen_Cursor_Forward 0F5E                                      _colstart 005A  
                 __end_of_Go_Prev_Alarm_Field 3B44                                      _drawtext 1B24  
                                  strcpy@from 0013                       ?_DS3231_Read_Alarm_Time 0001  
                               _fillRectangle 23E0                DS3231_Write_Alarm_Time@Address 0148  
                              ?_Toggle_Heater 0001                      __end_of_DS1621_Read_Temp 3876  
                               __size_of_main 01FA                                 ??_Do_Beep_Bad 0044  
                     __size_of_Monitor_Heater 0030                         __end_of_Set_RGB_Color 3A26  
                             fillRectangle@hi 0021                               fillRectangle@lo 0022  
               Update_Screen@neg_DS1621_tempC 0148                                _get_duty_cycle 3194  
                               _drawFastVLine 2D60                                     printf@idx 002F  
                                    _spiwrite 3C0A                                     printf@val 0033  
                           DS3231_Init@Device 001A                                   ??_drawPixel 001B  
                                    _rowstart 0062                      __end_of_DS3231_Read_Time 32C2  
                       ??_Increase_Alarm_Time 0043                    __size_of_Initialize_Screen 0380  
                            ?_Exit_Time_Setup 0001                          __end_of_Do_Beep_Good 3B8C  
                              ?_Update_Screen 0001                                    _INTCONbits 000FF2  
          __end_of_Update_Setup_Heater_Screen 29F4                    _Update_Setup_Heater_Screen 2948  
                               _do_update_pwm 2892                                OpenUSART@spbrg 0011  
                                 ??_init_UART 0014                                      isdigit@c 0013  
              __end_of_DS3231_Read_Alarm_Time 3560                                   ??_read_volt 003E  
                                   spiwrite@x 0011                                      intlevel2 0000  
                              ?_fillRectangle 0018                         __end_of_Decrease_Time 2E6C  
                    _Update_Setup_Time_Screen 147A                              ___lwmod@dividend 0018  
                       __end_of_write_command 3D10                               fillScreen@color 0024  
                       _DS3231_Turn_Off_Alarm 33D4                 DS3231_Write_Alarm_Time@Device 0147  
                     do_update_pwm@duty_cycle 0041                        __end_of_get_duty_cycle 31FA  
                      __size_of_Increase_Time 0090                      _Select_Heater_Temp_Field 00FC  
                              fillRectangle@h 001A                                fillRectangle@w 0019  
                              fillRectangle@x 0023                                fillRectangle@y 0018  
                     ??_Exit_Setup_Alarm_Time 0043                                ?_drawFastVLine 0018  
                                    printf@ap 0030                      ??_Exit_Setup_Heater_Temp 0043  
                         __end_of_Do_Beep_Bad 3BA4                                  ??_write_data 0013  
                                  _TIMER1_isr 3D44                                 fillRect@color 0026  
                     _DS3231_Write_Alarm_Time 2EEE                                ?_do_update_pwm 0001  
                             ___lwmod@divisor 001A                                      strcpy@cp 0015  
                                    strlen@cp 0015                                      strcpy@to 0011  
                       I2C_Write_Cmd_Only@Cmd 0013                               ___lwmod@counter 001C  
                                _setup_minute 006A                                  _setup_second 006C  
                     __size_of_Init_Interrupt 0040                         __end_of_setAddrWindow 3514  
                       __end_of_Do_Setup_Time 2656                            fillRectangle@color 001B  
                             ??_Toggle_Heater 0011                             do_update_pwm@dc_I 0042  
                           do_update_pwm@dc_f 003E                                 drawChar@color 0030  
                                 _setup_month 006B                                Set_RPM_RGB@rpm 0011  
                          __end_of_write_data 3D00                     __size_of_force_nec_state0 0008  
                                drawChar@line 0035                                 ?_get_full_ADC 0011  
                    ??_check_for_button_input 0039                                  drawChar@size 0034  
           __size_of_I2C_Write_Cmd_Write_Data 0020                          __size_of_DS1621_Init 001E  
                   ?_I2C_Write_Cmd_Write_Data 0013                          __size_of_DS3231_Init 00B8  
                             ?_get_duty_cycle 0011                 __size_of_DS3231_Turn_On_Alarm 0052  
      __end_of_Update_Setup_Alarm_Time_Screen 2218       __size_of_Update_Setup_Alarm_Time_Screen 00F2  
              _Update_Setup_Alarm_Time_Screen 2126  
