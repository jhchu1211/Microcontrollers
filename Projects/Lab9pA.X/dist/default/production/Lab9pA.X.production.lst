

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Fri Oct 29 23:18:59 2021

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    53                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    58                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    59  0000                     
    60                           	psect	idataCOMRAM
    61  0016AE                     __pidataCOMRAM:
    62                           	opt stack 0
    63                           
    64                           ;initializer for _array1
    65  0016AE  A2                 	db	162
    66  0016AF  62                 	db	98
    67  0016B0  E2                 	db	226
    68  0016B1  22                 	db	34
    69  0016B2  02                 	db	2
    70  0016B3  C2                 	db	194
    71  0016B4  E0                 	db	224
    72  0016B5  A8                 	db	168
    73  0016B6  90                 	db	144
    74  0016B7  68                 	db	104
    75  0016B8  98                 	db	152
    76  0016B9  B0                 	db	176
    77  0016BA  30                 	db	48
    78  0016BB  18                 	db	24
    79  0016BC  7A                 	db	122
    80  0016BD  10                 	db	16
    81  0016BE  38                 	db	56
    82  0016BF  5A                 	db	90
    83  0016C0  42                 	db	66
    84  0016C1  4A                 	db	74
    85  0016C2  52                 	db	82
    86                           
    87                           ;initializer for _wrap
    88  0016C3  01                 	db	1
    89                           
    90                           	psect	idataBANK0
    91  0014E6                     __pidataBANK0:
    92                           	opt stack 0
    93                           
    94                           ;initializer for _d1
    95  0014E6  02                 	db	2
    96  0014E7  00                 	db	0
    97  0014E8  00                 	db	0
    98  0014E9  10                 	db	16
    99  0014EA  00                 	db	0
   100  0014EB  00                 	db	0
   101  0014EC  12                 	db	18
   102  0014ED  00                 	db	0
   103  0014EE  00                 	db	0
   104  0014EF  16                 	db	22
   105  0014F0  00                 	db	0
   106  0014F1  00                 	db	0
   107  0014F2  16                 	db	22
   108  0014F3  00                 	db	0
   109  0014F4  00                 	db	0
   110  0014F5  16                 	db	22
   111  0014F6  00                 	db	0
   112  0014F7  00                 	db	0
   113  0014F8  16                 	db	22
   114  0014F9  00                 	db	0
   115  0014FA  00                 	db	0
   116                           
   117                           ;initializer for _d2
   118  0014FB  00                 	db	0
   119  0014FC  10                 	db	16
   120  0014FD  00                 	db	0
   121  0014FE  00                 	db	0
   122  0014FF  04                 	db	4
   123  001500  00                 	db	0
   124  001501  00                 	db	0
   125  001502  14                 	db	20
   126  001503  00                 	db	0
   127  001504  00                 	db	0
   128  001505  16                 	db	22
   129  001506  00                 	db	0
   130  001507  00                 	db	0
   131  001508  16                 	db	22
   132  001509  00                 	db	0
   133  00150A  00                 	db	0
   134  00150B  16                 	db	22
   135  00150C  00                 	db	0
   136  00150D  00                 	db	0
   137  00150E  16                 	db	22
   138  00150F  00                 	db	0
   139                           
   140                           ;initializer for _d3
   141  001510  00                 	db	0
   142  001511  00                 	db	0
   143  001512  04                 	db	4
   144  001513  00                 	db	0
   145  001514  00                 	db	0
   146  001515  10                 	db	16
   147  001516  00                 	db	0
   148  001517  00                 	db	0
   149  001518  24                 	db	36
   150  001519  00                 	db	0
   151  00151A  00                 	db	0
   152  00151B  34                 	db	52
   153  00151C  00                 	db	0
   154  00151D  00                 	db	0
   155  00151E  34                 	db	52
   156  00151F  00                 	db	0
   157  001520  00                 	db	0
   158  001521  34                 	db	52
   159  001522  00                 	db	0
   160  001523  00                 	db	0
   161  001524  34                 	db	52
   162                           
   163                           	psect	idataBANK1
   164  0011D0                     __pidataBANK1:
   165                           	opt stack 0
   166                           
   167                           ;initializer for _color
   168  0011D0  F800               	dw	63488
   169  0011D2  F800               	dw	63488
   170  0011D4  F800               	dw	63488
   171  0011D6  001F               	dw	31
   172  0011D8  001F               	dw	31
   173  0011DA  07E0               	dw	2016
   174  0011DC  F81F               	dw	63519
   175  0011DE  F81F               	dw	63519
   176  0011E0  F81F               	dw	63519
   177  0011E2  0000               	dw	0
   178  0011E4  0000               	dw	0
   179  0011E6  0000               	dw	0
   180  0011E8  0000               	dw	0
   181  0011EA  0000               	dw	0
   182  0011EC  0000               	dw	0
   183  0011EE  0000               	dw	0
   184  0011F0  0000               	dw	0
   185  0011F2  0000               	dw	0
   186  0011F4  0000               	dw	0
   187  0011F6  0000               	dw	0
   188  0011F8  0000               	dw	0
   189                           
   190                           ;initializer for _txt1
   191  0011FA  43                 	db	67
   192  0011FB  48                 	db	72
   193  0011FC  2D                 	db	45
   194  0011FD  00                 	db	0
   195  0011FE  43                 	db	67
   196  0011FF  48                 	db	72
   197  001200  20                 	db	32
   198  001201  00                 	db	0
   199  001202  43                 	db	67
   200  001203  48                 	db	72
   201  001204  2B                 	db	43
   202  001205  00                 	db	0
   203  001206  7C                 	db	124
   204  001207  3C                 	db	60
   205  001208  3C                 	db	60
   206  001209  00                 	db	0
   207  00120A  3E                 	db	62
   208  00120B  3E                 	db	62
   209  00120C  7C                 	db	124
   210  00120D  00                 	db	0
   211  00120E  3E                 	db	62
   212  00120F  7C                 	db	124
   213  001210  7C                 	db	124
   214  001211  00                 	db	0
   215  001212  20                 	db	32
   216  001213  2D                 	db	45
   217  001214  20                 	db	32
   218  001215  00                 	db	0
   219  001216  20                 	db	32
   220  001217  2B                 	db	43
   221  001218  20                 	db	32
   222  001219  00                 	db	0
   223  00121A  45                 	db	69
   224  00121B  51                 	db	81
   225  00121C  20                 	db	32
   226  00121D  00                 	db	0
   227  00121E  20                 	db	32
   228  00121F  30                 	db	48
   229  001220  20                 	db	32
   230  001221  00                 	db	0
   231  001222  31                 	db	49
   232  001223  30                 	db	48
   233  001224  30                 	db	48
   234  001225  00                 	db	0
   235  001226  32                 	db	50
   236  001227  30                 	db	48
   237  001228  30                 	db	48
   238  001229  00                 	db	0
   239  00122A  20                 	db	32
   240  00122B  31                 	db	49
   241  00122C  20                 	db	32
   242  00122D  00                 	db	0
   243  00122E  20                 	db	32
   244  00122F  32                 	db	50
   245  001230  20                 	db	32
   246  001231  00                 	db	0
   247  001232  20                 	db	32
   248  001233  33                 	db	51
   249  001234  20                 	db	32
   250  001235  00                 	db	0
   251  001236  20                 	db	32
   252  001237  34                 	db	52
   253  001238  20                 	db	32
   254  001239  00                 	db	0
   255  00123A  20                 	db	32
   256  00123B  35                 	db	53
   257  00123C  20                 	db	32
   258  00123D  00                 	db	0
   259  00123E  20                 	db	32
   260  00123F  36                 	db	54
   261  001240  20                 	db	32
   262  001241  00                 	db	0
   263  001242  20                 	db	32
   264  001243  37                 	db	55
   265  001244  20                 	db	32
   266  001245  00                 	db	0
   267  001246  20                 	db	32
   268  001247  38                 	db	56
   269  001248  20                 	db	32
   270  001249  00                 	db	0
   271  00124A  20                 	db	32
   272  00124B  39                 	db	57
   273  00124C  20                 	db	32
   274  00124D  00                 	db	0
   275                           
   276                           	psect	mediumconst
   277  00FD7E                     __pmediumconst:
   278                           	opt stack 0
   279  00FD7E  00                 	db	0
   280  00FD7F                     _font:
   281                           	opt stack 0
   282  00FD7F  00                 	db	0
   283  00FD80  00                 	db	0
   284  00FD81  00                 	db	0
   285  00FD82  00                 	db	0
   286  00FD83  00                 	db	0
   287  00FD84  00                 	db	0
   288  00FD85  00                 	db	0
   289  00FD86  5F                 	db	95
   290  00FD87  00                 	db	0
   291  00FD88  00                 	db	0
   292  00FD89  00                 	db	0
   293  00FD8A  07                 	db	7
   294  00FD8B  00                 	db	0
   295  00FD8C  07                 	db	7
   296  00FD8D  00                 	db	0
   297  00FD8E  14                 	db	20
   298  00FD8F  7F                 	db	127
   299  00FD90  14                 	db	20
   300  00FD91  7F                 	db	127
   301  00FD92  14                 	db	20
   302  00FD93  24                 	db	36
   303  00FD94  2A                 	db	42
   304  00FD95  7F                 	db	127
   305  00FD96  2A                 	db	42
   306  00FD97  12                 	db	18
   307  00FD98  23                 	db	35
   308  00FD99  13                 	db	19
   309  00FD9A  08                 	db	8
   310  00FD9B  64                 	db	100
   311  00FD9C  62                 	db	98
   312  00FD9D  36                 	db	54
   313  00FD9E  49                 	db	73
   314  00FD9F  56                 	db	86
   315  00FDA0  20                 	db	32
   316  00FDA1  50                 	db	80
   317  00FDA2  00                 	db	0
   318  00FDA3  08                 	db	8
   319  00FDA4  07                 	db	7
   320  00FDA5  03                 	db	3
   321  00FDA6  00                 	db	0
   322  00FDA7  00                 	db	0
   323  00FDA8  1C                 	db	28
   324  00FDA9  22                 	db	34
   325  00FDAA  41                 	db	65
   326  00FDAB  00                 	db	0
   327  00FDAC  00                 	db	0
   328  00FDAD  41                 	db	65
   329  00FDAE  22                 	db	34
   330  00FDAF  1C                 	db	28
   331  00FDB0  00                 	db	0
   332  00FDB1  2A                 	db	42
   333  00FDB2  1C                 	db	28
   334  00FDB3  7F                 	db	127
   335  00FDB4  1C                 	db	28
   336  00FDB5  2A                 	db	42
   337  00FDB6  08                 	db	8
   338  00FDB7  08                 	db	8
   339  00FDB8  3E                 	db	62
   340  00FDB9  08                 	db	8
   341  00FDBA  08                 	db	8
   342  00FDBB  00                 	db	0
   343  00FDBC  80                 	db	128
   344  00FDBD  70                 	db	112
   345  00FDBE  30                 	db	48
   346  00FDBF  00                 	db	0
   347  00FDC0  08                 	db	8
   348  00FDC1  08                 	db	8
   349  00FDC2  08                 	db	8
   350  00FDC3  08                 	db	8
   351  00FDC4  08                 	db	8
   352  00FDC5  00                 	db	0
   353  00FDC6  00                 	db	0
   354  00FDC7  60                 	db	96
   355  00FDC8  60                 	db	96
   356  00FDC9  00                 	db	0
   357  00FDCA  20                 	db	32
   358  00FDCB  10                 	db	16
   359  00FDCC  08                 	db	8
   360  00FDCD  04                 	db	4
   361  00FDCE  02                 	db	2
   362  00FDCF  3E                 	db	62
   363  00FDD0  51                 	db	81
   364  00FDD1  49                 	db	73
   365  00FDD2  45                 	db	69
   366  00FDD3  3E                 	db	62
   367  00FDD4  00                 	db	0
   368  00FDD5  42                 	db	66
   369  00FDD6  7F                 	db	127
   370  00FDD7  40                 	db	64
   371  00FDD8  00                 	db	0
   372  00FDD9  72                 	db	114
   373  00FDDA  49                 	db	73
   374  00FDDB  49                 	db	73
   375  00FDDC  49                 	db	73
   376  00FDDD  46                 	db	70
   377  00FDDE  21                 	db	33
   378  00FDDF  41                 	db	65
   379  00FDE0  49                 	db	73
   380  00FDE1  4D                 	db	77
   381  00FDE2  33                 	db	51
   382  00FDE3  18                 	db	24
   383  00FDE4  14                 	db	20
   384  00FDE5  12                 	db	18
   385  00FDE6  7F                 	db	127
   386  00FDE7  10                 	db	16
   387  00FDE8  27                 	db	39
   388  00FDE9  45                 	db	69
   389  00FDEA  45                 	db	69
   390  00FDEB  45                 	db	69
   391  00FDEC  39                 	db	57
   392  00FDED  3C                 	db	60
   393  00FDEE  4A                 	db	74
   394  00FDEF  49                 	db	73
   395  00FDF0  49                 	db	73
   396  00FDF1  31                 	db	49
   397  00FDF2  41                 	db	65
   398  00FDF3  21                 	db	33
   399  00FDF4  11                 	db	17
   400  00FDF5  09                 	db	9
   401  00FDF6  07                 	db	7
   402  00FDF7  36                 	db	54
   403  00FDF8  49                 	db	73
   404  00FDF9  49                 	db	73
   405  00FDFA  49                 	db	73
   406  00FDFB  36                 	db	54
   407  00FDFC  46                 	db	70
   408  00FDFD  49                 	db	73
   409  00FDFE  49                 	db	73
   410  00FDFF  29                 	db	41
   411  00FE00  1E                 	db	30
   412  00FE01  00                 	db	0
   413  00FE02  00                 	db	0
   414  00FE03  14                 	db	20
   415  00FE04  00                 	db	0
   416  00FE05  00                 	db	0
   417  00FE06  00                 	db	0
   418  00FE07  40                 	db	64
   419  00FE08  34                 	db	52
   420  00FE09  00                 	db	0
   421  00FE0A  00                 	db	0
   422  00FE0B  00                 	db	0
   423  00FE0C  08                 	db	8
   424  00FE0D  14                 	db	20
   425  00FE0E  22                 	db	34
   426  00FE0F  41                 	db	65
   427  00FE10  14                 	db	20
   428  00FE11  14                 	db	20
   429  00FE12  14                 	db	20
   430  00FE13  14                 	db	20
   431  00FE14  14                 	db	20
   432  00FE15  00                 	db	0
   433  00FE16  41                 	db	65
   434  00FE17  22                 	db	34
   435  00FE18  14                 	db	20
   436  00FE19  08                 	db	8
   437  00FE1A  02                 	db	2
   438  00FE1B  01                 	db	1
   439  00FE1C  59                 	db	89
   440  00FE1D  09                 	db	9
   441  00FE1E  06                 	db	6
   442  00FE1F  3E                 	db	62
   443  00FE20  41                 	db	65
   444  00FE21  5D                 	db	93
   445  00FE22  59                 	db	89
   446  00FE23  4E                 	db	78
   447  00FE24  7C                 	db	124
   448  00FE25  12                 	db	18
   449  00FE26  11                 	db	17
   450  00FE27  12                 	db	18
   451  00FE28  7C                 	db	124
   452  00FE29  7F                 	db	127
   453  00FE2A  49                 	db	73
   454  00FE2B  49                 	db	73
   455  00FE2C  49                 	db	73
   456  00FE2D  36                 	db	54
   457  00FE2E  3E                 	db	62
   458  00FE2F  41                 	db	65
   459  00FE30  41                 	db	65
   460  00FE31  41                 	db	65
   461  00FE32  22                 	db	34
   462  00FE33  7F                 	db	127
   463  00FE34  41                 	db	65
   464  00FE35  41                 	db	65
   465  00FE36  41                 	db	65
   466  00FE37  3E                 	db	62
   467  00FE38  7F                 	db	127
   468  00FE39  49                 	db	73
   469  00FE3A  49                 	db	73
   470  00FE3B  49                 	db	73
   471  00FE3C  41                 	db	65
   472  00FE3D  7F                 	db	127
   473  00FE3E  09                 	db	9
   474  00FE3F  09                 	db	9
   475  00FE40  09                 	db	9
   476  00FE41  01                 	db	1
   477  00FE42  3E                 	db	62
   478  00FE43  41                 	db	65
   479  00FE44  41                 	db	65
   480  00FE45  51                 	db	81
   481  00FE46  73                 	db	115
   482  00FE47  7F                 	db	127
   483  00FE48  08                 	db	8
   484  00FE49  08                 	db	8
   485  00FE4A  08                 	db	8
   486  00FE4B  7F                 	db	127
   487  00FE4C  00                 	db	0
   488  00FE4D  41                 	db	65
   489  00FE4E  7F                 	db	127
   490  00FE4F  41                 	db	65
   491  00FE50  00                 	db	0
   492  00FE51  20                 	db	32
   493  00FE52  40                 	db	64
   494  00FE53  41                 	db	65
   495  00FE54  3F                 	db	63
   496  00FE55  01                 	db	1
   497  00FE56  7F                 	db	127
   498  00FE57  08                 	db	8
   499  00FE58  14                 	db	20
   500  00FE59  22                 	db	34
   501  00FE5A  41                 	db	65
   502  00FE5B  7F                 	db	127
   503  00FE5C  40                 	db	64
   504  00FE5D  40                 	db	64
   505  00FE5E  40                 	db	64
   506  00FE5F  40                 	db	64
   507  00FE60  7F                 	db	127
   508  00FE61  02                 	db	2
   509  00FE62  1C                 	db	28
   510  00FE63  02                 	db	2
   511  00FE64  7F                 	db	127
   512  00FE65  7F                 	db	127
   513  00FE66  04                 	db	4
   514  00FE67  08                 	db	8
   515  00FE68  10                 	db	16
   516  00FE69  7F                 	db	127
   517  00FE6A  3E                 	db	62
   518  00FE6B  41                 	db	65
   519  00FE6C  41                 	db	65
   520  00FE6D  41                 	db	65
   521  00FE6E  3E                 	db	62
   522  00FE6F  7F                 	db	127
   523  00FE70  09                 	db	9
   524  00FE71  09                 	db	9
   525  00FE72  09                 	db	9
   526  00FE73  06                 	db	6
   527  00FE74  3E                 	db	62
   528  00FE75  41                 	db	65
   529  00FE76  51                 	db	81
   530  00FE77  21                 	db	33
   531  00FE78  5E                 	db	94
   532  00FE79  7F                 	db	127
   533  00FE7A  09                 	db	9
   534  00FE7B  19                 	db	25
   535  00FE7C  29                 	db	41
   536  00FE7D  46                 	db	70
   537  00FE7E                     __end_of_font:
   538                           	opt stack 0
   539  00FE7E                     _font2:
   540                           	opt stack 0
   541  00FE7E  26                 	db	38
   542  00FE7F  49                 	db	73
   543  00FE80  49                 	db	73
   544  00FE81  49                 	db	73
   545  00FE82  32                 	db	50
   546  00FE83  03                 	db	3
   547  00FE84  01                 	db	1
   548  00FE85  7F                 	db	127
   549  00FE86  01                 	db	1
   550  00FE87  03                 	db	3
   551  00FE88  3F                 	db	63
   552  00FE89  40                 	db	64
   553  00FE8A  40                 	db	64
   554  00FE8B  40                 	db	64
   555  00FE8C  3F                 	db	63
   556  00FE8D  1F                 	db	31
   557  00FE8E  20                 	db	32
   558  00FE8F  40                 	db	64
   559  00FE90  20                 	db	32
   560  00FE91  1F                 	db	31
   561  00FE92  3F                 	db	63
   562  00FE93  40                 	db	64
   563  00FE94  38                 	db	56
   564  00FE95  40                 	db	64
   565  00FE96  3F                 	db	63
   566  00FE97  63                 	db	99
   567  00FE98  14                 	db	20
   568  00FE99  08                 	db	8
   569  00FE9A  14                 	db	20
   570  00FE9B  63                 	db	99
   571  00FE9C  03                 	db	3
   572  00FE9D  04                 	db	4
   573  00FE9E  78                 	db	120
   574  00FE9F  04                 	db	4
   575  00FEA0  03                 	db	3
   576  00FEA1  61                 	db	97
   577  00FEA2  59                 	db	89
   578  00FEA3  49                 	db	73
   579  00FEA4  4D                 	db	77
   580  00FEA5  43                 	db	67
   581  00FEA6  00                 	db	0
   582  00FEA7  7F                 	db	127
   583  00FEA8  41                 	db	65
   584  00FEA9  41                 	db	65
   585  00FEAA  41                 	db	65
   586  00FEAB  02                 	db	2
   587  00FEAC  04                 	db	4
   588  00FEAD  08                 	db	8
   589  00FEAE  10                 	db	16
   590  00FEAF  20                 	db	32
   591  00FEB0  00                 	db	0
   592  00FEB1  41                 	db	65
   593  00FEB2  41                 	db	65
   594  00FEB3  41                 	db	65
   595  00FEB4  7F                 	db	127
   596  00FEB5  04                 	db	4
   597  00FEB6  02                 	db	2
   598  00FEB7  01                 	db	1
   599  00FEB8  02                 	db	2
   600  00FEB9  04                 	db	4
   601  00FEBA  40                 	db	64
   602  00FEBB  40                 	db	64
   603  00FEBC  40                 	db	64
   604  00FEBD  40                 	db	64
   605  00FEBE  40                 	db	64
   606  00FEBF  00                 	db	0
   607  00FEC0  03                 	db	3
   608  00FEC1  07                 	db	7
   609  00FEC2  08                 	db	8
   610  00FEC3  00                 	db	0
   611  00FEC4  20                 	db	32
   612  00FEC5  54                 	db	84
   613  00FEC6  54                 	db	84
   614  00FEC7  78                 	db	120
   615  00FEC8  40                 	db	64
   616  00FEC9  7F                 	db	127
   617  00FECA  28                 	db	40
   618  00FECB  44                 	db	68
   619  00FECC  44                 	db	68
   620  00FECD  38                 	db	56
   621  00FECE  38                 	db	56
   622  00FECF  44                 	db	68
   623  00FED0  44                 	db	68
   624  00FED1  44                 	db	68
   625  00FED2  28                 	db	40
   626  00FED3  38                 	db	56
   627  00FED4  44                 	db	68
   628  00FED5  44                 	db	68
   629  00FED6  28                 	db	40
   630  00FED7  7F                 	db	127
   631  00FED8  38                 	db	56
   632  00FED9  54                 	db	84
   633  00FEDA  54                 	db	84
   634  00FEDB  54                 	db	84
   635  00FEDC  18                 	db	24
   636  00FEDD  00                 	db	0
   637  00FEDE  08                 	db	8
   638  00FEDF  7E                 	db	126
   639  00FEE0  09                 	db	9
   640  00FEE1  02                 	db	2
   641  00FEE2  18                 	db	24
   642  00FEE3  A4                 	db	164
   643  00FEE4  A4                 	db	164
   644  00FEE5  9C                 	db	156
   645  00FEE6  78                 	db	120
   646  00FEE7  7F                 	db	127
   647  00FEE8  08                 	db	8
   648  00FEE9  04                 	db	4
   649  00FEEA  04                 	db	4
   650  00FEEB  78                 	db	120
   651  00FEEC  00                 	db	0
   652  00FEED  44                 	db	68
   653  00FEEE  7D                 	db	125
   654  00FEEF  40                 	db	64
   655  00FEF0  00                 	db	0
   656  00FEF1  20                 	db	32
   657  00FEF2  40                 	db	64
   658  00FEF3  40                 	db	64
   659  00FEF4  3D                 	db	61
   660  00FEF5  00                 	db	0
   661  00FEF6  7F                 	db	127
   662  00FEF7  10                 	db	16
   663  00FEF8  28                 	db	40
   664  00FEF9  44                 	db	68
   665  00FEFA  00                 	db	0
   666  00FEFB  00                 	db	0
   667  00FEFC  41                 	db	65
   668  00FEFD  7F                 	db	127
   669  00FEFE  40                 	db	64
   670  00FEFF  00                 	db	0
   671  00FF00  7C                 	db	124
   672  00FF01  04                 	db	4
   673  00FF02  78                 	db	120
   674  00FF03  04                 	db	4
   675  00FF04  78                 	db	120
   676  00FF05  7C                 	db	124
   677  00FF06  08                 	db	8
   678  00FF07  04                 	db	4
   679  00FF08  04                 	db	4
   680  00FF09  78                 	db	120
   681  00FF0A  38                 	db	56
   682  00FF0B  44                 	db	68
   683  00FF0C  44                 	db	68
   684  00FF0D  44                 	db	68
   685  00FF0E  38                 	db	56
   686  00FF0F  FC                 	db	252
   687  00FF10  18                 	db	24
   688  00FF11  24                 	db	36
   689  00FF12  24                 	db	36
   690  00FF13  18                 	db	24
   691  00FF14  18                 	db	24
   692  00FF15  24                 	db	36
   693  00FF16  24                 	db	36
   694  00FF17  18                 	db	24
   695  00FF18  FC                 	db	252
   696  00FF19  7C                 	db	124
   697  00FF1A  08                 	db	8
   698  00FF1B  04                 	db	4
   699  00FF1C  04                 	db	4
   700  00FF1D  08                 	db	8
   701  00FF1E  48                 	db	72
   702  00FF1F  54                 	db	84
   703  00FF20  54                 	db	84
   704  00FF21  54                 	db	84
   705  00FF22  24                 	db	36
   706  00FF23  04                 	db	4
   707  00FF24  04                 	db	4
   708  00FF25  3F                 	db	63
   709  00FF26  44                 	db	68
   710  00FF27  24                 	db	36
   711  00FF28  3C                 	db	60
   712  00FF29  40                 	db	64
   713  00FF2A  40                 	db	64
   714  00FF2B  20                 	db	32
   715  00FF2C  7C                 	db	124
   716  00FF2D  1C                 	db	28
   717  00FF2E  20                 	db	32
   718  00FF2F  40                 	db	64
   719  00FF30  20                 	db	32
   720  00FF31  1C                 	db	28
   721  00FF32  3C                 	db	60
   722  00FF33  40                 	db	64
   723  00FF34  30                 	db	48
   724  00FF35  40                 	db	64
   725  00FF36  3C                 	db	60
   726  00FF37  44                 	db	68
   727  00FF38  28                 	db	40
   728  00FF39  10                 	db	16
   729  00FF3A  28                 	db	40
   730  00FF3B  44                 	db	68
   731  00FF3C  4C                 	db	76
   732  00FF3D  90                 	db	144
   733  00FF3E  90                 	db	144
   734  00FF3F  90                 	db	144
   735  00FF40  7C                 	db	124
   736  00FF41  44                 	db	68
   737  00FF42  64                 	db	100
   738  00FF43  54                 	db	84
   739  00FF44  4C                 	db	76
   740  00FF45  44                 	db	68
   741  00FF46  00                 	db	0
   742  00FF47  08                 	db	8
   743  00FF48  36                 	db	54
   744  00FF49  41                 	db	65
   745  00FF4A  00                 	db	0
   746  00FF4B  00                 	db	0
   747  00FF4C  00                 	db	0
   748  00FF4D  77                 	db	119
   749  00FF4E  00                 	db	0
   750  00FF4F  00                 	db	0
   751  00FF50  00                 	db	0
   752  00FF51  41                 	db	65
   753  00FF52  36                 	db	54
   754  00FF53  08                 	db	8
   755  00FF54  00                 	db	0
   756  00FF55  02                 	db	2
   757  00FF56  01                 	db	1
   758  00FF57  02                 	db	2
   759  00FF58  04                 	db	4
   760  00FF59  02                 	db	2
   761  00FF5A                     __end_of_font2:
   762                           	opt stack 0
   763  00FF5A                     _dpowers:
   764                           	opt stack 0
   765  00FF5A  0001               	dw	1
   766  00FF5C  0000               	dw	0
   767  00FF5E  000A               	dw	10
   768  00FF60  0000               	dw	0
   769  00FF62  0064               	dw	100
   770  00FF64  0000               	dw	0
   771  00FF66  03E8               	dw	1000
   772  00FF68  0000               	dw	0
   773  00FF6A  2710               	dw	10000
   774  00FF6C  0000               	dw	0
   775  00FF6E  86A0               	dw	34464
   776  00FF70  0001               	dw	1
   777  00FF72  4240               	dw	16960
   778  00FF74  000F               	dw	15
   779  00FF76  9680               	dw	38528
   780  00FF78  0098               	dw	152
   781  00FF7A  E100               	dw	57600
   782  00FF7C  05F5               	dw	1525
   783  00FF7E  CA00               	dw	51712
   784  00FF80  3B9A               	dw	15258
   785  00FF82                     __end_of_dpowers:
   786                           	opt stack 0
   787  00FF82                     _hexpowers:
   788                           	opt stack 0
   789  00FF82  0001               	dw	1
   790  00FF84  0000               	dw	0
   791  00FF86  0010               	dw	16
   792  00FF88  0000               	dw	0
   793  00FF8A  0100               	dw	256
   794  00FF8C  0000               	dw	0
   795  00FF8E  1000               	dw	4096
   796  00FF90  0000               	dw	0
   797  00FF92  0000               	dw	0
   798  00FF94  0001               	dw	1
   799  00FF96  0000               	dw	0
   800  00FF98  0010               	dw	16
   801  00FF9A  0000               	dw	0
   802  00FF9C  0100               	dw	256
   803  00FF9E  0000               	dw	0
   804  00FFA0  1000               	dw	4096
   805  00FFA2                     __end_of_hexpowers:
   806                           	opt stack 0
   807  0000                     _ADCON1	set	4033
   808  0000                     _CCP2CON	set	4026
   809  0000                     _CCPR2L	set	4027
   810  0000                     _INTCON2bits	set	4081
   811  0000                     _INTCONbits	set	4082
   812  0000                     _OSCCON	set	4051
   813  0000                     _PIE1bits	set	3997
   814  0000                     _PIR1bits	set	3998
   815  0000                     _PIR2bits	set	4001
   816  0000                     _PORTA	set	3968
   817  0000                     _PORTB	set	3969
   818  0000                     _PORTBbits	set	3969
   819  0000                     _PORTC	set	3970
   820  0000                     _PORTDbits	set	3971
   821  0000                     _PORTEbits	set	3972
   822  0000                     _PR2	set	4043
   823  0000                     _RCSTA	set	4011
   824  0000                     _RCSTAbits	set	4011
   825  0000                     _SPBRG	set	4015
   826  0000                     _SPBRGH	set	4016
   827  0000                     _SSPBUF	set	4041
   828  0000                     _SSPCON1	set	4038
   829  0000                     _SSPSTAT	set	4039
   830  0000                     _SSPSTATbits	set	4039
   831  0000                     _T0CON	set	4053
   832  0000                     _T0CONbits	set	4053
   833  0000                     _T1CON	set	4045
   834  0000                     _T1CONbits	set	4045
   835  0000                     _T2CON	set	4042
   836  0000                     _T3CON	set	4017
   837  0000                     _T3CONbits	set	4017
   838  0000                     _TMR0H	set	4055
   839  0000                     _TMR0L	set	4054
   840  0000                     _TMR1H	set	4047
   841  0000                     _TMR1L	set	4046
   842  0000                     _TRISA	set	3986
   843  0000                     _TRISB	set	3987
   844  0000                     _TRISC	set	3988
   845  0000                     _TRISCbits	set	3988
   846  0000                     _TRISD	set	3989
   847  0000                     _TXREG	set	4013
   848  0000                     _TXSTA	set	4012
   849  0000                     _TXSTAbits	set	4012
   850  0000                     _TRMT	set	32097
   851  0000                     _nRBPU	set	32655
   852  00FFA2                     STR_1:
   853  00FFA2  4E                 	db	78	;'N'
   854  00FFA3  45                 	db	69	;'E'
   855  00FFA4  43                 	db	67	;'C'
   856  00FFA5  5F                 	db	95	;'_'
   857  00FFA6  43                 	db	67	;'C'
   858  00FFA7  6F                 	db	111	;'o'
   859  00FFA8  64                 	db	100	;'d'
   860  00FFA9  65                 	db	101	;'e'
   861  00FFAA  20                 	db	32
   862  00FFAB  3D                 	db	61	;'='
   863  00FFAC  20                 	db	32
   864  00FFAD  25                 	db	37
   865  00FFAE  30                 	db	48	;'0'
   866  00FFAF  38                 	db	56	;'8'
   867  00FFB0  6C                 	db	108	;'l'
   868  00FFB1  78                 	db	120	;'x'
   869  00FFB2  20                 	db	32
   870  00FFB3  25                 	db	37
   871  00FFB4  78                 	db	120	;'x'
   872  00FFB5  0D                 	db	13
   873  00FFB6  0A                 	db	10
   874  00FFB7  00                 	db	0
   875  00FFB8                     STR_4:
   876  00FFB8  45                 	db	69	;'E'
   877  00FFB9  43                 	db	67	;'C'
   878  00FFBA  45                 	db	69	;'E'
   879  00FFBB  33                 	db	51	;'3'
   880  00FFBC  33                 	db	51	;'3'
   881  00FFBD  30                 	db	48	;'0'
   882  00FFBE  31                 	db	49	;'1'
   883  00FFBF  4C                 	db	76	;'L'
   884  00FFC0  20                 	db	32
   885  00FFC1  46                 	db	70	;'F'
   886  00FFC2  61                 	db	97	;'a'
   887  00FFC3  6C                 	db	108	;'l'
   888  00FFC4  6C                 	db	108	;'l'
   889  00FFC5  20                 	db	32
   890  00FFC6  32                 	db	50	;'2'
   891  00FFC7  31                 	db	49	;'1'
   892  00FFC8  2D                 	db	45
   893  00FFC9  53                 	db	83	;'S'
   894  00FFCA  34                 	db	52	;'4'
   895  00FFCB  00                 	db	0
   896  00FFCC                     STR_2:
   897  00FFCC  4E                 	db	78	;'N'
   898  00FFCD  45                 	db	69	;'E'
   899  00FFCE  43                 	db	67	;'C'
   900  00FFCF  5F                 	db	95	;'_'
   901  00FFD0  43                 	db	67	;'C'
   902  00FFD1  6F                 	db	111	;'o'
   903  00FFD2  64                 	db	100	;'d'
   904  00FFD3  65                 	db	101	;'e'
   905  00FFD4  20                 	db	32
   906  00FFD5  3D                 	db	61	;'='
   907  00FFD6  20                 	db	32
   908  00FFD7  25                 	db	37
   909  00FFD8  30                 	db	48	;'0'
   910  00FFD9  38                 	db	56	;'8'
   911  00FFDA  6C                 	db	108	;'l'
   912  00FFDB  78                 	db	120	;'x'
   913  00FFDC  20                 	db	32
   914  00FFDD  25                 	db	37
   915  00FFDE  78                 	db	120	;'x'
   916  00FFDF  00                 	db	0
   917  00FFE0                     STR_6:
   918  00FFE0  30                 	db	48	;'0'
   919  00FFE1  31                 	db	49	;'1'
   920  00FFE2  32                 	db	50	;'2'
   921  00FFE3  33                 	db	51	;'3'
   922  00FFE4  34                 	db	52	;'4'
   923  00FFE5  35                 	db	53	;'5'
   924  00FFE6  36                 	db	54	;'6'
   925  00FFE7  37                 	db	55	;'7'
   926  00FFE8  38                 	db	56	;'8'
   927  00FFE9  39                 	db	57	;'9'
   928  00FFEA  61                 	db	97	;'a'
   929  00FFEB  62                 	db	98	;'b'
   930  00FFEC  63                 	db	99	;'c'
   931  00FFED  64                 	db	100	;'d'
   932  00FFEE  65                 	db	101	;'e'
   933  00FFEF  66                 	db	102	;'f'
   934  00FFF0  00                 	db	0
   935  00FFF1                     STR_5:
   936  00FFF1  4C                 	db	76	;'L'
   937  00FFF2  41                 	db	65	;'A'
   938  00FFF3  42                 	db	66	;'B'
   939  00FFF4  20                 	db	32
   940  00FFF5  39                 	db	57	;'9'
   941  00FFF6  20                 	db	32
   942  00FFF7  00                 	db	0
   943  00FFF8                     STR_3:
   944  00FFF8  25                 	db	37
   945  00FFF9  64                 	db	100	;'d'
   946  00FFFA  20                 	db	32
   947  00FFFB  0D                 	db	13
   948  00FFFC  0A                 	db	10
   949  00FFFD  00                 	db	0
   950                           
   951                           ; #config settings
   952  00FFFE  00                 	db	0	; dummy byte at the end
   953  0000                     
   954                           	psect	cinit
   955  00114E                     __pcinit:
   956                           	opt stack 0
   957  00114E                     start_initialization:
   958                           	opt stack 0
   959  00114E                     __initialization:
   960                           	opt stack 0
   961                           
   962                           ; Clear objects allocated to BANK0 (31 bytes)
   963  00114E  EE00  F0BF         	lfsr	0,__pbssBANK0
   964  001152  0E1F               	movlw	31
   965  001154                     clear_0:
   966  001154  6AEE               	clrf	postinc0,c
   967  001156  06E8               	decf	wreg,f,c
   968  001158  E1FD               	bnz	clear_0
   969                           
   970                           ; Clear objects allocated to COMRAM (19 bytes)
   971  00115A  EE00  F05D         	lfsr	0,__pbssCOMRAM
   972  00115E  0E13               	movlw	19
   973  001160                     clear_1:
   974  001160  6AEE               	clrf	postinc0,c
   975  001162  06E8               	decf	wreg,f,c
   976  001164  E1FD               	bnz	clear_1
   977                           
   978                           ; Initialize objects allocated to BANK1 (126 bytes)
   979                           ; load TBLPTR registers with __pidataBANK1
   980  001166  0ED0               	movlw	low __pidataBANK1
   981  001168  6EF6               	movwf	tblptrl,c
   982  00116A  0E11               	movlw	high __pidataBANK1
   983  00116C  6EF7               	movwf	tblptrh,c
   984  00116E  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   985  001170  6EF8               	movwf	tblptru,c
   986  001172  EE01  F000         	lfsr	0,__pdataBANK1
   987  001176  EE10 F07E          	lfsr	1,126
   988  00117A                     copy_data0:
   989  00117A  0009               	tblrd		*+
   990  00117C  CFF5 FFEE          	movff	tablat,postinc0
   991  001180  50E5               	movf	postdec1,w,c
   992  001182  50E1               	movf	fsr1l,w,c
   993  001184  E1FA               	bnz	copy_data0
   994                           
   995                           ; Initialize objects allocated to BANK0 (63 bytes)
   996                           ; load TBLPTR registers with __pidataBANK0
   997  001186  0EE6               	movlw	low __pidataBANK0
   998  001188  6EF6               	movwf	tblptrl,c
   999  00118A  0E14               	movlw	high __pidataBANK0
  1000  00118C  6EF7               	movwf	tblptrh,c
  1001  00118E  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1002  001190  6EF8               	movwf	tblptru,c
  1003  001192  EE00  F080         	lfsr	0,__pdataBANK0
  1004  001196  EE10 F03F          	lfsr	1,63
  1005  00119A                     copy_data1:
  1006  00119A  0009               	tblrd		*+
  1007  00119C  CFF5 FFEE          	movff	tablat,postinc0
  1008  0011A0  50E5               	movf	postdec1,w,c
  1009  0011A2  50E1               	movf	fsr1l,w,c
  1010  0011A4  E1FA               	bnz	copy_data1
  1011                           
  1012                           ; Initialize objects allocated to COMRAM (22 bytes)
  1013                           ; load TBLPTR registers with __pidataCOMRAM
  1014  0011A6  0EAE               	movlw	low __pidataCOMRAM
  1015  0011A8  6EF6               	movwf	tblptrl,c
  1016  0011AA  0E16               	movlw	high __pidataCOMRAM
  1017  0011AC  6EF7               	movwf	tblptrh,c
  1018  0011AE  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1019  0011B0  6EF8               	movwf	tblptru,c
  1020  0011B2  EE00  F047         	lfsr	0,__pdataCOMRAM
  1021  0011B6  EE10 F016          	lfsr	1,22
  1022  0011BA                     copy_data2:
  1023  0011BA  0009               	tblrd		*+
  1024  0011BC  CFF5 FFEE          	movff	tablat,postinc0
  1025  0011C0  50E5               	movf	postdec1,w,c
  1026  0011C2  50E1               	movf	fsr1l,w,c
  1027  0011C4  E1FA               	bnz	copy_data2
  1028  0011C6                     end_of_initialization:
  1029                           	opt stack 0
  1030  0011C6                     __end_of__initialization:
  1031                           	opt stack 0
  1032  0011C6  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1033  0011C8  6EF8               	movwf	tblptru,c
  1034  0011CA  0100               	movlb	0
  1035  0011CC  EF2F  F002         	goto	_main	;jump to C main() function
  1036                           tblptru	equ	0xFF8
  1037                           tblptrh	equ	0xFF7
  1038                           tblptrl	equ	0xFF6
  1039                           tablat	equ	0xFF5
  1040                           postinc0	equ	0xFEE
  1041                           wreg	equ	0xFE8
  1042                           postdec1	equ	0xFE5
  1043                           fsr1l	equ	0xFE1
  1044                           
  1045                           	psect	bssCOMRAM
  1046  00005D                     __pbssCOMRAM:
  1047                           	opt stack 0
  1048  00005D                     _Nec_code:
  1049                           	opt stack 0
  1050  00005D                     	ds	4
  1051  000061                     _Time_Elapsed:
  1052                           	opt stack 0
  1053  000061                     	ds	2
  1054  000063                     _nbr:
  1055                           	opt stack 0
  1056  000063                     	ds	2
  1057  000065                     _nec_ok:
  1058                           	opt stack 0
  1059  000065                     	ds	2
  1060  000067                     _txt:
  1061                           	opt stack 0
  1062  000067                     	ds	2
  1063  000069                     _Nec_code1:
  1064                           	opt stack 0
  1065  000069                     	ds	1
  1066  00006A                     _Nec_state:
  1067                           	opt stack 0
  1068  00006A                     	ds	1
  1069  00006B                     __tft_type:
  1070                           	opt stack 0
  1071  00006B                     	ds	1
  1072  00006C                     _bit_count:
  1073                           	opt stack 0
  1074  00006C                     	ds	1
  1075  00006D                     _colstart:
  1076                           	opt stack 0
  1077  00006D                     	ds	1
  1078  00006E                     _i:
  1079                           	opt stack 0
  1080  00006E                     	ds	1
  1081  00006F                     _rowstart:
  1082                           	opt stack 0
  1083  00006F                     	ds	1
  1084                           tblptru	equ	0xFF8
  1085                           tblptrh	equ	0xFF7
  1086                           tblptrl	equ	0xFF6
  1087                           tablat	equ	0xFF5
  1088                           postinc0	equ	0xFEE
  1089                           wreg	equ	0xFE8
  1090                           postdec1	equ	0xFE5
  1091                           fsr1l	equ	0xFE1
  1092                           
  1093                           	psect	dataCOMRAM
  1094  000047                     __pdataCOMRAM:
  1095                           	opt stack 0
  1096  000047                     _array1:
  1097                           	opt stack 0
  1098  000047                     	ds	21
  1099  00005C                     _wrap:
  1100                           	opt stack 0
  1101  00005C                     	ds	1
  1102                           tblptru	equ	0xFF8
  1103                           tblptrh	equ	0xFF7
  1104                           tblptrl	equ	0xFF6
  1105                           tablat	equ	0xFF5
  1106                           postinc0	equ	0xFEE
  1107                           wreg	equ	0xFE8
  1108                           postdec1	equ	0xFE5
  1109                           fsr1l	equ	0xFE1
  1110                           
  1111                           	psect	bssBANK0
  1112  0000BF                     __pbssBANK0:
  1113                           	opt stack 0
  1114  0000BF                     _buffer:
  1115                           	opt stack 0
  1116  0000BF                     	ds	31
  1117                           tblptru	equ	0xFF8
  1118                           tblptrh	equ	0xFF7
  1119                           tblptrl	equ	0xFF6
  1120                           tablat	equ	0xFF5
  1121                           postinc0	equ	0xFEE
  1122                           wreg	equ	0xFE8
  1123                           postdec1	equ	0xFE5
  1124                           fsr1l	equ	0xFE1
  1125                           
  1126                           	psect	dataBANK0
  1127  000080                     __pdataBANK0:
  1128                           	opt stack 0
  1129  000080                     _d1:
  1130                           	opt stack 0
  1131  000080                     	ds	21
  1132  000095                     _d2:
  1133                           	opt stack 0
  1134  000095                     	ds	21
  1135  0000AA                     _d3:
  1136                           	opt stack 0
  1137  0000AA                     	ds	21
  1138                           tblptru	equ	0xFF8
  1139                           tblptrh	equ	0xFF7
  1140                           tblptrl	equ	0xFF6
  1141                           tablat	equ	0xFF5
  1142                           postinc0	equ	0xFEE
  1143                           wreg	equ	0xFE8
  1144                           postdec1	equ	0xFE5
  1145                           fsr1l	equ	0xFE1
  1146                           
  1147                           	psect	dataBANK1
  1148  000100                     __pdataBANK1:
  1149                           	opt stack 0
  1150  000100                     _color:
  1151                           	opt stack 0
  1152  000100                     	ds	42
  1153  00012A                     _txt1:
  1154                           	opt stack 0
  1155  00012A                     	ds	84
  1156                           tblptru	equ	0xFF8
  1157                           tblptrh	equ	0xFF7
  1158                           tblptrl	equ	0xFF6
  1159                           tablat	equ	0xFF5
  1160                           postinc0	equ	0xFEE
  1161                           wreg	equ	0xFE8
  1162                           postdec1	equ	0xFE5
  1163                           fsr1l	equ	0xFE1
  1164                           
  1165                           	psect	cstackBANK0
  1166  0000DE                     __pcstackBANK0:
  1167                           	opt stack 0
  1168  0000DE                     drawtext@x:
  1169                           	opt stack 0
  1170                           
  1171                           ; 1 bytes @ 0x0
  1172  0000DE                     	ds	1
  1173  0000DF                     drawtext@textsize:
  1174                           	opt stack 0
  1175                           
  1176                           ; 2 bytes @ 0x1
  1177  0000DF                     	ds	2
  1178  0000E1                     drawtext@i:
  1179                           	opt stack 0
  1180                           
  1181                           ; 2 bytes @ 0x3
  1182  0000E1                     	ds	2
  1183  0000E3                     drawtext@cursor_y:
  1184                           	opt stack 0
  1185                           
  1186                           ; 1 bytes @ 0x5
  1187  0000E3                     	ds	1
  1188  0000E4                     drawtext@cursor_x:
  1189                           	opt stack 0
  1190                           
  1191                           ; 1 bytes @ 0x6
  1192  0000E4                     	ds	1
  1193                           tblptru	equ	0xFF8
  1194                           tblptrh	equ	0xFF7
  1195                           tblptrl	equ	0xFF6
  1196                           tablat	equ	0xFF5
  1197                           postinc0	equ	0xFEE
  1198                           wreg	equ	0xFE8
  1199                           postdec1	equ	0xFE5
  1200                           fsr1l	equ	0xFE1
  1201                           
  1202                           	psect	cstackCOMRAM
  1203  000001                     __pcstackCOMRAM:
  1204                           	opt stack 0
  1205  000001                     ??_INT0_isr:
  1206  000001                     
  1207                           ; 0 bytes @ 0x0
  1208  000001                     	ds	2
  1209  000003                     ??_chkisr:
  1210                           
  1211                           ; 0 bytes @ 0x2
  1212  000003                     	ds	14
  1213  000011                     ??_isdigit:
  1214  000011                     ?_strlen:
  1215                           	opt stack 0
  1216  000011                     ?___wmul:
  1217                           	opt stack 0
  1218  000011                     ?___lldiv:
  1219                           	opt stack 0
  1220  000011                     spiwrite@x:
  1221                           	opt stack 0
  1222  000011                     putch@c:
  1223                           	opt stack 0
  1224  000011                     OpenUSART@spbrg:
  1225                           	opt stack 0
  1226  000011                     ___wmul@multiplier:
  1227                           	opt stack 0
  1228  000011                     strcpy@to:
  1229                           	opt stack 0
  1230  000011                     strlen@s:
  1231                           	opt stack 0
  1232  000011                     ___lldiv@dividend:
  1233                           	opt stack 0
  1234                           
  1235                           ; 4 bytes @ 0x10
  1236  000011                     	ds	1
  1237  000012                     spiwrite@spidata:
  1238                           	opt stack 0
  1239  000012                     _isdigit$1793:
  1240                           	opt stack 0
  1241                           
  1242                           ; 1 bytes @ 0x11
  1243  000012                     	ds	1
  1244  000013                     ??_strlen:
  1245  000013                     write_command@cmd_:
  1246                           	opt stack 0
  1247  000013                     write_data@data_:
  1248                           	opt stack 0
  1249  000013                     OpenUSART@config:
  1250                           	opt stack 0
  1251  000013                     isdigit@c:
  1252                           	opt stack 0
  1253  000013                     ___wmul@multiplicand:
  1254                           	opt stack 0
  1255  000013                     strcpy@from:
  1256                           	opt stack 0
  1257                           
  1258                           ; 2 bytes @ 0x12
  1259  000013                     	ds	1
  1260  000014                     setAddrWindow@y0:
  1261                           	opt stack 0
  1262                           
  1263                           ; 1 bytes @ 0x13
  1264  000014                     	ds	1
  1265  000015                     setAddrWindow@x1:
  1266                           	opt stack 0
  1267  000015                     ___wmul@product:
  1268                           	opt stack 0
  1269  000015                     strcpy@cp:
  1270                           	opt stack 0
  1271  000015                     strlen@cp:
  1272                           	opt stack 0
  1273  000015                     ___lldiv@divisor:
  1274                           	opt stack 0
  1275                           
  1276                           ; 4 bytes @ 0x14
  1277  000015                     	ds	1
  1278  000016                     setAddrWindow@y1:
  1279                           	opt stack 0
  1280                           
  1281                           ; 1 bytes @ 0x15
  1282  000016                     	ds	1
  1283  000017                     setAddrWindow@x0:
  1284                           	opt stack 0
  1285  000017                     delay_ms@ms:
  1286                           	opt stack 0
  1287                           
  1288                           ; 2 bytes @ 0x16
  1289  000017                     	ds	1
  1290  000018                     drawPixel@y:
  1291                           	opt stack 0
  1292  000018                     drawFastVLine@y:
  1293                           	opt stack 0
  1294  000018                     fillRectangle@y:
  1295                           	opt stack 0
  1296                           
  1297                           ; 1 bytes @ 0x17
  1298  000018                     	ds	1
  1299  000019                     ??_delay_ms:
  1300  000019                     drawFastVLine@h:
  1301                           	opt stack 0
  1302  000019                     fillRectangle@w:
  1303                           	opt stack 0
  1304  000019                     drawPixel@color:
  1305                           	opt stack 0
  1306  000019                     ___lldiv@quotient:
  1307                           	opt stack 0
  1308                           
  1309                           ; 4 bytes @ 0x18
  1310  000019                     	ds	1
  1311  00001A                     fillRectangle@h:
  1312                           	opt stack 0
  1313  00001A                     drawFastVLine@color:
  1314                           	opt stack 0
  1315                           
  1316                           ; 2 bytes @ 0x19
  1317  00001A                     	ds	1
  1318  00001B                     drawPixel@x:
  1319                           	opt stack 0
  1320  00001B                     delay_ms@count:
  1321                           	opt stack 0
  1322  00001B                     fillRectangle@color:
  1323                           	opt stack 0
  1324                           
  1325                           ; 2 bytes @ 0x1A
  1326  00001B                     	ds	1
  1327  00001C                     ??_drawFastVLine:
  1328  00001C                     drawCircle@x0:
  1329                           	opt stack 0
  1330                           
  1331                           ; 2 bytes @ 0x1B
  1332  00001C                     	ds	1
  1333  00001D                     ??_fillRectangle:
  1334  00001D                     ___lldiv@counter:
  1335                           	opt stack 0
  1336                           
  1337                           ; 1 bytes @ 0x1C
  1338  00001D                     	ds	1
  1339  00001E                     ?___llmod:
  1340                           	opt stack 0
  1341  00001E                     drawCircle@y0:
  1342                           	opt stack 0
  1343  00001E                     ___llmod@dividend:
  1344                           	opt stack 0
  1345                           
  1346                           ; 4 bytes @ 0x1D
  1347  00001E                     	ds	2
  1348  000020                     drawFastVLine@hi:
  1349                           	opt stack 0
  1350  000020                     drawCircle@r:
  1351                           	opt stack 0
  1352                           
  1353                           ; 2 bytes @ 0x1F
  1354  000020                     	ds	1
  1355  000021                     drawFastVLine@lo:
  1356                           	opt stack 0
  1357  000021                     fillRectangle@hi:
  1358                           	opt stack 0
  1359                           
  1360                           ; 1 bytes @ 0x20
  1361  000021                     	ds	1
  1362  000022                     drawFastVLine@x:
  1363                           	opt stack 0
  1364  000022                     fillRectangle@lo:
  1365                           	opt stack 0
  1366  000022                     drawCircle@color:
  1367                           	opt stack 0
  1368  000022                     ___llmod@divisor:
  1369                           	opt stack 0
  1370                           
  1371                           ; 4 bytes @ 0x21
  1372  000022                     	ds	1
  1373  000023                     fillRect@y:
  1374                           	opt stack 0
  1375  000023                     fillRectangle@x:
  1376                           	opt stack 0
  1377  000023                     fillCircleHelper@x0:
  1378                           	opt stack 0
  1379                           
  1380                           ; 2 bytes @ 0x22
  1381  000023                     	ds	1
  1382  000024                     ??_drawCircle:
  1383  000024                     fillRect@w:
  1384                           	opt stack 0
  1385  000024                     fillScreen@color:
  1386                           	opt stack 0
  1387                           
  1388                           ; 2 bytes @ 0x23
  1389  000024                     	ds	1
  1390  000025                     fillRect@h:
  1391                           	opt stack 0
  1392  000025                     fillCircleHelper@y0:
  1393                           	opt stack 0
  1394                           
  1395                           ; 2 bytes @ 0x24
  1396  000025                     	ds	1
  1397  000026                     ___llmod@counter:
  1398                           	opt stack 0
  1399  000026                     fillRect@color:
  1400                           	opt stack 0
  1401  000026                     drawCircle@ddF_x:
  1402                           	opt stack 0
  1403                           
  1404                           ; 2 bytes @ 0x25
  1405  000026                     	ds	1
  1406  000027                     ?_printf:
  1407                           	opt stack 0
  1408  000027                     fillCircleHelper@r:
  1409                           	opt stack 0
  1410  000027                     printf@f:
  1411                           	opt stack 0
  1412                           
  1413                           ; 2 bytes @ 0x26
  1414  000027                     	ds	1
  1415  000028                     ??_fillRect:
  1416  000028                     drawCircle@ddF_y:
  1417                           	opt stack 0
  1418                           
  1419                           ; 2 bytes @ 0x27
  1420  000028                     	ds	1
  1421  000029                     fillCircleHelper@cornername:
  1422                           	opt stack 0
  1423                           
  1424                           ; 2 bytes @ 0x28
  1425  000029                     	ds	1
  1426  00002A                     drawCircle@f:
  1427                           	opt stack 0
  1428                           
  1429                           ; 2 bytes @ 0x29
  1430  00002A                     	ds	1
  1431  00002B                     fillRect@x:
  1432                           	opt stack 0
  1433  00002B                     fillCircleHelper@delta:
  1434                           	opt stack 0
  1435                           
  1436                           ; 2 bytes @ 0x2A
  1437  00002B                     	ds	1
  1438  00002C                     fillRect@i:
  1439                           	opt stack 0
  1440  00002C                     drawCircle@x:
  1441                           	opt stack 0
  1442                           
  1443                           ; 2 bytes @ 0x2B
  1444  00002C                     	ds	1
  1445  00002D                     fillCircleHelper@color:
  1446                           	opt stack 0
  1447                           
  1448                           ; 2 bytes @ 0x2C
  1449  00002D                     	ds	1
  1450  00002E                     drawChar@y:
  1451                           	opt stack 0
  1452  00002E                     drawCircle@y:
  1453                           	opt stack 0
  1454                           
  1455                           ; 2 bytes @ 0x2D
  1456  00002E                     	ds	1
  1457  00002F                     ??_printf:
  1458  00002F                     ??_fillCircleHelper:
  1459  00002F                     drawChar@c:
  1460                           	opt stack 0
  1461                           
  1462                           ; 1 bytes @ 0x2E
  1463  00002F                     	ds	1
  1464  000030                     drawChar@color:
  1465                           	opt stack 0
  1466                           
  1467                           ; 2 bytes @ 0x2F
  1468  000030                     	ds	1
  1469  000031                     fillCircleHelper@ddF_x:
  1470                           	opt stack 0
  1471                           
  1472                           ; 2 bytes @ 0x30
  1473  000031                     	ds	1
  1474  000032                     drawChar@bg:
  1475                           	opt stack 0
  1476                           
  1477                           ; 2 bytes @ 0x31
  1478  000032                     	ds	1
  1479  000033                     printf@idx:
  1480                           	opt stack 0
  1481  000033                     fillCircleHelper@ddF_y:
  1482                           	opt stack 0
  1483                           
  1484                           ; 2 bytes @ 0x32
  1485  000033                     	ds	1
  1486  000034                     drawChar@size:
  1487                           	opt stack 0
  1488  000034                     printf@prec:
  1489                           	opt stack 0
  1490                           
  1491                           ; 2 bytes @ 0x33
  1492  000034                     	ds	1
  1493  000035                     drawChar@line:
  1494                           	opt stack 0
  1495  000035                     fillCircleHelper@f:
  1496                           	opt stack 0
  1497                           
  1498                           ; 2 bytes @ 0x34
  1499  000035                     	ds	1
  1500  000036                     drawChar@x:
  1501                           	opt stack 0
  1502  000036                     printf@ap:
  1503                           	opt stack 0
  1504                           
  1505                           ; 2 bytes @ 0x35
  1506  000036                     	ds	1
  1507  000037                     drawChar@j:
  1508                           	opt stack 0
  1509  000037                     fillCircleHelper@x:
  1510                           	opt stack 0
  1511                           
  1512                           ; 2 bytes @ 0x36
  1513  000037                     	ds	1
  1514  000038                     drawChar@i:
  1515                           	opt stack 0
  1516  000038                     printf@val:
  1517                           	opt stack 0
  1518                           
  1519                           ; 4 bytes @ 0x37
  1520  000038                     	ds	1
  1521  000039                     drawtext@y:
  1522                           	opt stack 0
  1523  000039                     fillCircleHelper@y:
  1524                           	opt stack 0
  1525                           
  1526                           ; 2 bytes @ 0x38
  1527  000039                     	ds	1
  1528  00003A                     drawtext@_text:
  1529                           	opt stack 0
  1530                           
  1531                           ; 2 bytes @ 0x39
  1532  00003A                     	ds	1
  1533  00003B                     fillCircle@x0:
  1534                           	opt stack 0
  1535                           
  1536                           ; 2 bytes @ 0x3A
  1537  00003B                     	ds	1
  1538  00003C                     drawtext@color:
  1539                           	opt stack 0
  1540  00003C                     printf@width:
  1541                           	opt stack 0
  1542                           
  1543                           ; 2 bytes @ 0x3B
  1544  00003C                     	ds	1
  1545  00003D                     fillCircle@y0:
  1546                           	opt stack 0
  1547                           
  1548                           ; 2 bytes @ 0x3C
  1549  00003D                     	ds	1
  1550  00003E                     printf@flag:
  1551                           	opt stack 0
  1552  00003E                     drawtext@bg:
  1553                           	opt stack 0
  1554                           
  1555                           ; 2 bytes @ 0x3D
  1556  00003E                     	ds	1
  1557  00003F                     printf@c:
  1558                           	opt stack 0
  1559  00003F                     fillCircle@r:
  1560                           	opt stack 0
  1561                           
  1562                           ; 2 bytes @ 0x3E
  1563  00003F                     	ds	1
  1564  000040                     drawtext@size:
  1565                           	opt stack 0
  1566                           
  1567                           ; 1 bytes @ 0x3F
  1568  000040                     	ds	1
  1569  000041                     ??_drawtext:
  1570  000041                     fillCircle@color:
  1571                           	opt stack 0
  1572                           
  1573                           ; 2 bytes @ 0x40
  1574  000041                     	ds	2
  1575  000043                     
  1576                           ; 0 bytes @ 0x42
  1577  000043                     	ds	1
  1578  000044                     main@in:
  1579                           	opt stack 0
  1580                           
  1581                           ; 2 bytes @ 0x43
  1582  000044                     	ds	2
  1583  000046                     main@found:
  1584                           	opt stack 0
  1585                           
  1586                           ; 1 bytes @ 0x45
  1587  000046                     	ds	1
  1588                           tblptru	equ	0xFF8
  1589                           tblptrh	equ	0xFF7
  1590                           tblptrl	equ	0xFF6
  1591                           tablat	equ	0xFF5
  1592                           postinc0	equ	0xFEE
  1593                           wreg	equ	0xFE8
  1594                           postdec1	equ	0xFE5
  1595                           fsr1l	equ	0xFE1
  1596                           
  1597 ;;
  1598 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1599 ;;
  1600 ;; *************** function _main *****************
  1601 ;; Defined at:
  1602 ;;		line 230 in file "Lab9pA.c"
  1603 ;; Parameters:    Size  Location     Type
  1604 ;;		None
  1605 ;; Auto vars:     Size  Location     Type
  1606 ;;  in              2   67[COMRAM] int 
  1607 ;;  found           1   69[COMRAM] unsigned char 
  1608 ;; Return value:  Size  Location     Type
  1609 ;;		None               void
  1610 ;; Registers used:
  1611 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1612 ;; Tracked objects:
  1613 ;;		On entry : 0/0
  1614 ;;		On exit  : 0/0
  1615 ;;		Unchanged: 0/0
  1616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1617 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1618 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1619 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1620 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1621 ;;Total ram usage:        4 bytes
  1622 ;; Hardware stack levels required when called:   11
  1623 ;; This function calls:
  1624 ;;		_Activate_Buzzer
  1625 ;;		_Deactivate_Buzzer
  1626 ;;		_Initialize_Screen
  1627 ;;		_Wait_Half_Second
  1628 ;;		_drawCircle
  1629 ;;		_drawtext
  1630 ;;		_fillCircle
  1631 ;;		_init_UART
  1632 ;;		_printf
  1633 ;; This function is called by:
  1634 ;;		Startup code after reset
  1635 ;; This function uses a non-reentrant model
  1636 ;;
  1637                           
  1638                           	psect	text0
  1639  00045E                     __ptext0:
  1640                           	opt stack 0
  1641  00045E                     _main:
  1642                           	opt stack 20
  1643                           
  1644                           ;Lab9pA.c: 232: init_UART();
  1645                           
  1646                           ;incstack = 0
  1647  00045E  EC62  F00B         	call	_init_UART	;wreg free
  1648                           
  1649                           ;Lab9pA.c: 233: OSCCON = 0x70;
  1650  000462  0E70               	movlw	112
  1651  000464  6ED3               	movwf	4051,c	;volatile
  1652                           
  1653                           ;Lab9pA.c: 234: nRBPU = 0;
  1654  000466  9EF1               	bcf	intcon2,7,c	;volatile
  1655                           
  1656                           ;Lab9pA.c: 235: TRISA = 0x00;
  1657  000468  0E00               	movlw	0
  1658  00046A  6E92               	movwf	3986,c	;volatile
  1659                           
  1660                           ;Lab9pA.c: 236: TRISB = 0x01;
  1661  00046C  0E01               	movlw	1
  1662  00046E  6E93               	movwf	3987,c	;volatile
  1663                           
  1664                           ;Lab9pA.c: 237: TRISC = 0x00;
  1665  000470  0E00               	movlw	0
  1666  000472  6E94               	movwf	3988,c	;volatile
  1667                           
  1668                           ;Lab9pA.c: 238: TRISD = 0x00;
  1669  000474  0E00               	movlw	0
  1670  000476  6E95               	movwf	3989,c	;volatile
  1671                           
  1672                           ;Lab9pA.c: 239: ADCON1 = 0x0F;
  1673  000478  0E0F               	movlw	15
  1674  00047A  6EC1               	movwf	4033,c	;volatile
  1675                           
  1676                           ;Lab9pA.c: 240: Initialize_Screen();
  1677  00047C  ECD6  F007         	call	_Initialize_Screen	;wreg free
  1678                           
  1679                           ;Lab9pA.c: 241: INTCONbits.INT0IF = 0;
  1680  000480  92F2               	bcf	intcon,1,c	;volatile
  1681                           
  1682                           ;Lab9pA.c: 242: INTCON2bits.INTEDG0 = 0;
  1683  000482  9CF1               	bcf	intcon2,6,c	;volatile
  1684                           
  1685                           ;Lab9pA.c: 243: INTCONbits.INT0IE = 1;
  1686  000484  88F2               	bsf	intcon,4,c	;volatile
  1687                           
  1688                           ;Lab9pA.c: 244: TMR1H = 0;
  1689  000486  0E00               	movlw	0
  1690  000488  6ECF               	movwf	4047,c	;volatile
  1691                           
  1692                           ;Lab9pA.c: 245: TMR1L = 0;
  1693  00048A  0E00               	movlw	0
  1694  00048C  6ECE               	movwf	4046,c	;volatile
  1695                           
  1696                           ;Lab9pA.c: 246: PIR1bits.TMR1IF = 0;
  1697  00048E  909E               	bcf	3998,0,c	;volatile
  1698                           
  1699                           ;Lab9pA.c: 247: PIE1bits.TMR1IE = 1;
  1700  000490  809D               	bsf	3997,0,c	;volatile
  1701                           
  1702                           ;Lab9pA.c: 248: INTCONbits.PEIE = 1;
  1703  000492  8CF2               	bsf	intcon,6,c	;volatile
  1704                           
  1705                           ;Lab9pA.c: 249: INTCONbits.GIE = 1;
  1706  000494  8EF2               	bsf	intcon,7,c	;volatile
  1707                           
  1708                           ;Lab9pA.c: 250: nec_ok = 0;
  1709  000496  0E00               	movlw	0
  1710  000498  6E66               	movwf	_nec_ok+1,c
  1711  00049A  0E00               	movlw	0
  1712  00049C  6E65               	movwf	_nec_ok,c
  1713                           
  1714                           ;Lab9pA.c: 251: Nec_code = 0x0;
  1715  00049E  0E00               	movlw	0
  1716  0004A0  6E5D               	movwf	_Nec_code,c
  1717  0004A2  0E00               	movlw	0
  1718  0004A4  6E5E               	movwf	_Nec_code+1,c
  1719  0004A6  0E00               	movlw	0
  1720  0004A8  6E5F               	movwf	_Nec_code+2,c
  1721  0004AA  0E00               	movlw	0
  1722  0004AC  6E60               	movwf	_Nec_code+3,c
  1723  0004AE  D000               	goto	l4196
  1724  0004B0                     l4196:
  1725                           
  1726                           ;Lab9pA.c: 254: {
  1727                           ;Lab9pA.c: 255: if (nec_ok == 1)
  1728  0004B0  0465               	decf	_nec_ok,w,c
  1729  0004B2  1066               	iorwf	_nec_ok+1,w,c
  1730  0004B4  A4D8               	btfss	status,2,c
  1731  0004B6  D7FC               	goto	l4196
  1732                           
  1733                           ;Lab9pA.c: 256: {
  1734                           ;Lab9pA.c: 258: nec_ok = 0;
  1735  0004B8  0E00               	movlw	0
  1736  0004BA  6E66               	movwf	_nec_ok+1,c
  1737  0004BC  0E00               	movlw	0
  1738  0004BE  6E65               	movwf	_nec_ok,c
  1739                           
  1740                           ;Lab9pA.c: 260: Nec_code1 = (char) ((Nec_code >> 8));
  1741  0004C0  C05E  F069         	movff	_Nec_code+1,_Nec_code1
  1742                           
  1743                           ;Lab9pA.c: 261: printf ("NEC_Code = %08lx %x\r\n", Nec_code, Nec_code1);
  1744  0004C4  0EA2               	movlw	low STR_1
  1745  0004C6  6E27               	movwf	printf@f,c
  1746  0004C8  0EFF               	movlw	high STR_1
  1747  0004CA  6E28               	movwf	printf@f+1,c
  1748  0004CC  C05D  F029         	movff	_Nec_code,?_printf+2
  1749  0004D0  C05E  F02A         	movff	_Nec_code+1,?_printf+3
  1750  0004D4  C05F  F02B         	movff	_Nec_code+2,?_printf+4
  1751  0004D8  C060  F02C         	movff	_Nec_code+3,?_printf+5
  1752  0004DC  C069  F02D         	movff	_Nec_code1,?_printf+6
  1753  0004E0  6A2E               	clrf	?_printf+7,c
  1754  0004E2  EC0E  F000         	call	_printf	;wreg free
  1755                           
  1756                           ;Lab9pA.c: 262: INTCONbits.INT0IE = 1;
  1757  0004E6  88F2               	bsf	intcon,4,c	;volatile
  1758                           
  1759                           ;Lab9pA.c: 263: INTCON2bits.INTEDG0 = 0;
  1760  0004E8  9CF1               	bcf	intcon2,6,c	;volatile
  1761                           
  1762                           ;Lab9pA.c: 265: char found = 0xff;
  1763  0004EA  6846               	setf	main@found,c
  1764                           
  1765                           ;Lab9pA.c: 267: for (int in = 0; in<21;in++)
  1766  0004EC  0E00               	movlw	0
  1767  0004EE  6E45               	movwf	main@in+1,c
  1768  0004F0  0E00               	movlw	0
  1769  0004F2  6E44               	movwf	main@in,c
  1770  0004F4                     l4212:
  1771  0004F4  BE45               	btfsc	main@in+1,7,c
  1772  0004F6  D008               	goto	l4216
  1773  0004F8  5045               	movf	main@in+1,w,c
  1774  0004FA  E117               	bnz	l4224
  1775  0004FC  0E15               	movlw	21
  1776  0004FE  5C44               	subwf	main@in,w,c
  1777  000500  B0D8               	btfsc	status,0,c
  1778  000502  D013               	goto	l4224
  1779  000504  D001               	goto	l4216
  1780  000506  D011               	goto	l4224
  1781  000508                     l4216:
  1782                           
  1783                           ;Lab9pA.c: 268: {
  1784                           ;Lab9pA.c: 269: if (Nec_code1==array1[in])
  1785  000508  0E47               	movlw	low _array1
  1786  00050A  2444               	addwf	main@in,w,c
  1787  00050C  6ED9               	movwf	fsr2l,c
  1788  00050E  0E00               	movlw	high _array1
  1789  000510  2045               	addwfc	main@in+1,w,c
  1790  000512  6EDA               	movwf	fsr2h,c
  1791  000514  5069               	movf	_Nec_code1,w,c
  1792  000516  18DE               	xorwf	postinc2,w,c
  1793  000518  A4D8               	btfss	status,2,c
  1794  00051A  D003               	goto	l4220
  1795                           
  1796                           ;Lab9pA.c: 270: {
  1797                           ;Lab9pA.c: 271: found = in;
  1798  00051C  C044  F046         	movff	main@in,main@found
  1799  000520  D000               	goto	l4220
  1800  000522                     l4220:
  1801  000522  4A44               	infsnz	main@in,f,c
  1802  000524  2A45               	incf	main@in+1,f,c
  1803  000526  D7E6               	goto	l4212
  1804  000528  D000               	goto	l4224
  1805  00052A                     l4224:
  1806                           
  1807                           ;Lab9pA.c: 272: }
  1808                           ;Lab9pA.c: 273: }
  1809                           ;Lab9pA.c: 274: printf ("NEC_Code = %08lx %x", Nec_code, Nec_code1);
  1810  00052A  0ECC               	movlw	low STR_2
  1811  00052C  6E27               	movwf	printf@f,c
  1812  00052E  0EFF               	movlw	high STR_2
  1813  000530  6E28               	movwf	printf@f+1,c
  1814  000532  C05D  F029         	movff	_Nec_code,?_printf+2
  1815  000536  C05E  F02A         	movff	_Nec_code+1,?_printf+3
  1816  00053A  C05F  F02B         	movff	_Nec_code+2,?_printf+4
  1817  00053E  C060  F02C         	movff	_Nec_code+3,?_printf+5
  1818  000542  C069  F02D         	movff	_Nec_code1,?_printf+6
  1819  000546  6A2E               	clrf	?_printf+7,c
  1820  000548  EC0E  F000         	call	_printf	;wreg free
  1821                           
  1822                           ;Lab9pA.c: 275: printf ("%d \r\n", found);
  1823  00054C  0EF8               	movlw	low STR_3
  1824  00054E  6E27               	movwf	printf@f,c
  1825  000550  0EFF               	movlw	high STR_3
  1826  000552  6E28               	movwf	printf@f+1,c
  1827  000554  C046  F029         	movff	main@found,?_printf+2
  1828  000558  6A2A               	clrf	?_printf+3,c
  1829  00055A  EC0E  F000         	call	_printf	;wreg free
  1830                           
  1831                           ;Lab9pA.c: 276: if (found != 0xff)
  1832  00055E  2846               	incf	main@found,w,c
  1833  000560  B4D8               	btfsc	status,2,c
  1834  000562  D7A6               	goto	l4196
  1835                           
  1836                           ;Lab9pA.c: 277: {
  1837                           ;Lab9pA.c: 278: fillCircle(60, 80, 20, color[found]);
  1838  000564  0E00               	movlw	0
  1839  000566  6E3C               	movwf	fillCircle@x0+1,c
  1840  000568  0E3C               	movlw	60
  1841  00056A  6E3B               	movwf	fillCircle@x0,c
  1842  00056C  0E00               	movlw	0
  1843  00056E  6E3E               	movwf	fillCircle@y0+1,c
  1844  000570  0E50               	movlw	80
  1845  000572  6E3D               	movwf	fillCircle@y0,c
  1846  000574  0E00               	movlw	0
  1847  000576  6E40               	movwf	fillCircle@r+1,c
  1848  000578  0E14               	movlw	20
  1849  00057A  6E3F               	movwf	fillCircle@r,c
  1850  00057C  5046               	movf	main@found,w,c
  1851  00057E  0D02               	mullw	2
  1852  000580  0E00               	movlw	low _color
  1853  000582  24F3               	addwf	prodl,w,c
  1854  000584  6ED9               	movwf	fsr2l,c
  1855  000586  0E01               	movlw	high _color
  1856  000588  20F4               	addwfc	prodh,w,c
  1857  00058A  6EDA               	movwf	fsr2h,c
  1858  00058C  CFDE F041          	movff	postinc2,fillCircle@color
  1859  000590  CFDD F042          	movff	postdec2,fillCircle@color+1
  1860  000594  ECD5  F009         	call	_fillCircle	;wreg free
  1861                           
  1862                           ;Lab9pA.c: 279: drawCircle(60, 80, 20, 0xFFFF);
  1863  000598  0E00               	movlw	0
  1864  00059A  6E1D               	movwf	drawCircle@x0+1,c
  1865  00059C  0E3C               	movlw	60
  1866  00059E  6E1C               	movwf	drawCircle@x0,c
  1867  0005A0  0E00               	movlw	0
  1868  0005A2  6E1F               	movwf	drawCircle@y0+1,c
  1869  0005A4  0E50               	movlw	80
  1870  0005A6  6E1E               	movwf	drawCircle@y0,c
  1871  0005A8  0E00               	movlw	0
  1872  0005AA  6E21               	movwf	drawCircle@r+1,c
  1873  0005AC  0E14               	movlw	20
  1874  0005AE  6E20               	movwf	drawCircle@r,c
  1875  0005B0  0EFF               	movlw	255
  1876  0005B2  6E23               	movwf	drawCircle@color+1,c
  1877  0005B4  6822               	setf	drawCircle@color,c
  1878  0005B6  EC1D  F003         	call	_drawCircle	;wreg free
  1879                           
  1880                           ;Lab9pA.c: 280: drawtext(52, 77, txt1[found], 0xFFFF, 0x0000,1);
  1881  0005BA  0E4D               	movlw	77
  1882  0005BC  6E39               	movwf	drawtext@y,c
  1883  0005BE  5046               	movf	main@found,w,c
  1884  0005C0  0D04               	mullw	4
  1885  0005C2  0E2A               	movlw	low _txt1
  1886  0005C4  24F3               	addwf	prodl,w,c
  1887  0005C6  6E3A               	movwf	drawtext@_text,c
  1888  0005C8  0E01               	movlw	high _txt1
  1889  0005CA  20F4               	addwfc	prodh,w,c
  1890  0005CC  6E3B               	movwf	drawtext@_text+1,c
  1891  0005CE  0EFF               	movlw	255
  1892  0005D0  6E3D               	movwf	drawtext@color+1,c
  1893  0005D2  683C               	setf	drawtext@color,c
  1894  0005D4  0E00               	movlw	0
  1895  0005D6  6E3F               	movwf	drawtext@bg+1,c
  1896  0005D8  0E00               	movlw	0
  1897  0005DA  6E3E               	movwf	drawtext@bg,c
  1898  0005DC  0E01               	movlw	1
  1899  0005DE  6E40               	movwf	drawtext@size,c
  1900  0005E0  0E34               	movlw	52
  1901  0005E2  EC6A  F006         	call	_drawtext
  1902                           
  1903                           ;Lab9pA.c: 281: PORTEbits.RE1 = 1;
  1904  0005E6  8284               	bsf	3972,1,c	;volatile
  1905                           
  1906                           ;Lab9pA.c: 282: PORTA = d1[found];
  1907  0005E8  5046               	movf	main@found,w,c
  1908  0005EA  0D01               	mullw	1
  1909  0005EC  0E80               	movlw	low _d1
  1910  0005EE  24F3               	addwf	prodl,w,c
  1911  0005F0  6ED9               	movwf	fsr2l,c
  1912  0005F2  0E00               	movlw	high _d1
  1913  0005F4  20F4               	addwfc	prodh,w,c
  1914  0005F6  6EDA               	movwf	fsr2h,c
  1915  0005F8  50DF               	movf	indf2,w,c
  1916  0005FA  6E80               	movwf	3968,c	;volatile
  1917                           
  1918                           ;Lab9pA.c: 283: PORTB = d3[found];
  1919  0005FC  5046               	movf	main@found,w,c
  1920  0005FE  0D01               	mullw	1
  1921  000600  0EAA               	movlw	low _d3
  1922  000602  24F3               	addwf	prodl,w,c
  1923  000604  6ED9               	movwf	fsr2l,c
  1924  000606  0E00               	movlw	high _d3
  1925  000608  20F4               	addwfc	prodh,w,c
  1926  00060A  6EDA               	movwf	fsr2h,c
  1927  00060C  50DF               	movf	indf2,w,c
  1928  00060E  6E81               	movwf	3969,c	;volatile
  1929                           
  1930                           ;Lab9pA.c: 284: PORTC = d2[found] & 0x16;
  1931  000610  5046               	movf	main@found,w,c
  1932  000612  0D01               	mullw	1
  1933  000614  0E95               	movlw	low _d2
  1934  000616  24F3               	addwf	prodl,w,c
  1935  000618  6ED9               	movwf	fsr2l,c
  1936  00061A  0E00               	movlw	high _d2
  1937  00061C  20F4               	addwfc	prodh,w,c
  1938  00061E  6EDA               	movwf	fsr2h,c
  1939  000620  50DF               	movf	indf2,w,c
  1940  000622  0B16               	andlw	22
  1941  000624  6E82               	movwf	3970,c	;volatile
  1942                           
  1943                           ;Lab9pA.c: 285: Activate_Buzzer();
  1944  000626  EC7F  F00B         	call	_Activate_Buzzer	;wreg free
  1945                           
  1946                           ;Lab9pA.c: 286: Wait_Half_Second();
  1947  00062A  EC4A  F00B         	call	_Wait_Half_Second	;wreg free
  1948                           
  1949                           ;Lab9pA.c: 287: PORTEbits.RE1 = 0;
  1950  00062E  9284               	bcf	3972,1,c	;volatile
  1951                           
  1952                           ;Lab9pA.c: 288: Deactivate_Buzzer();
  1953  000630  ECA5  F00B         	call	_Deactivate_Buzzer	;wreg free
  1954  000634  D73D               	goto	l4196
  1955  000636  EF0C  F000         	goto	start
  1956  00063A                     __end_of_main:
  1957                           	opt stack 0
  1958                           tblptru	equ	0xFF8
  1959                           tblptrh	equ	0xFF7
  1960                           tblptrl	equ	0xFF6
  1961                           tablat	equ	0xFF5
  1962                           prodh	equ	0xFF4
  1963                           prodl	equ	0xFF3
  1964                           intcon	equ	0xFF2
  1965                           intcon2	equ	0xFF1
  1966                           postinc0	equ	0xFEE
  1967                           wreg	equ	0xFE8
  1968                           postdec1	equ	0xFE5
  1969                           fsr1l	equ	0xFE1
  1970                           indf2	equ	0xFDF
  1971                           postinc2	equ	0xFDE
  1972                           postdec2	equ	0xFDD
  1973                           fsr2h	equ	0xFDA
  1974                           fsr2l	equ	0xFD9
  1975                           status	equ	0xFD8
  1976                           
  1977 ;; *************** function _printf *****************
  1978 ;; Defined at:
  1979 ;;		line 464 in file "E:\XC8\sources\common\doprnt.c"
  1980 ;; Parameters:    Size  Location     Type
  1981 ;;  f               2   38[COMRAM] PTR const unsigned char 
  1982 ;;		 -> STR_3(6), STR_2(20), STR_1(22), 
  1983 ;; Auto vars:     Size  Location     Type
  1984 ;;  idx             1   50[COMRAM] unsigned char 
  1985 ;;  val             4   55[COMRAM] unsigned long 
  1986 ;;  tmpval          4    0        struct .
  1987 ;;  cp              3    0        PTR const unsigned char 
  1988 ;;  width           2   59[COMRAM] int 
  1989 ;;  ap              2   53[COMRAM] PTR void [1]
  1990 ;;		 -> ?_printf(2), 
  1991 ;;  prec            2   51[COMRAM] int 
  1992 ;;  len             2    0        unsigned int 
  1993 ;;  c               1   62[COMRAM] char 
  1994 ;;  flag            1   61[COMRAM] unsigned char 
  1995 ;; Return value:  Size  Location     Type
  1996 ;;                  2   38[COMRAM] int 
  1997 ;; Registers used:
  1998 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1999 ;; Tracked objects:
  2000 ;;		On entry : 0/0
  2001 ;;		On exit  : 0/0
  2002 ;;		Unchanged: 0/0
  2003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2004 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2005 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2006 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2007 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2008 ;;Total ram usage:       25 bytes
  2009 ;; Hardware stack levels used:    1
  2010 ;; Hardware stack levels required when called:    4
  2011 ;; This function calls:
  2012 ;;		___lldiv
  2013 ;;		___llmod
  2014 ;;		___wmul
  2015 ;;		_isdigit
  2016 ;;		_putch
  2017 ;; This function is called by:
  2018 ;;		_main
  2019 ;; This function uses a non-reentrant model
  2020 ;;
  2021                           
  2022                           	psect	text1
  2023  00001C                     __ptext1:
  2024                           	opt stack 0
  2025  00001C                     _printf:
  2026                           	opt stack 26
  2027                           
  2028                           ;doprnt.c: 466: va_list ap;
  2029                           ;doprnt.c: 499: signed char c;
  2030                           ;doprnt.c: 501: int width;
  2031                           ;doprnt.c: 504: int prec;
  2032                           ;doprnt.c: 508: unsigned char flag;
  2033                           ;doprnt.c: 523: union {
  2034                           ;doprnt.c: 524: unsigned long vd;
  2035                           ;doprnt.c: 525: double integ;
  2036                           ;doprnt.c: 526: } tmpval;
  2037                           ;doprnt.c: 528: unsigned long val;
  2038                           ;doprnt.c: 529: unsigned len;
  2039                           ;doprnt.c: 530: const char * cp;
  2040                           ;doprnt.c: 533: *ap = __va_start();
  2041                           
  2042                           ;incstack = 0
  2043  00001C  0E29               	movlw	low (?_printf+2)
  2044  00001E  6E36               	movwf	printf@ap,c
  2045  000020  0E00               	movlw	high (?_printf+2)
  2046  000022  6E37               	movwf	printf@ap+1,c
  2047                           
  2048                           ;doprnt.c: 536: while(c = *f++) {
  2049  000024  D20D               	goto	l3916
  2050  000026                     l3778:
  2051                           
  2052                           ;doprnt.c: 538: if(c != '%')
  2053  000026  0E25               	movlw	37
  2054  000028  183F               	xorwf	printf@c,w,c
  2055  00002A  B4D8               	btfsc	status,2,c
  2056  00002C  D004               	goto	l3782
  2057                           
  2058                           ;doprnt.c: 540: {
  2059                           ;doprnt.c: 541: (putch(c) );
  2060  00002E  503F               	movf	printf@c,w,c
  2061  000030  EC98  F00B         	call	_putch
  2062                           
  2063                           ;doprnt.c: 542: continue;
  2064  000034  D205               	goto	l3916
  2065  000036                     l3782:
  2066                           
  2067                           ;doprnt.c: 543: }
  2068                           ;doprnt.c: 546: width = 0;
  2069  000036  0E00               	movlw	0
  2070  000038  6E3D               	movwf	printf@width+1,c
  2071  00003A  0E00               	movlw	0
  2072  00003C  6E3C               	movwf	printf@width,c
  2073                           
  2074                           ;doprnt.c: 548: flag = 0;
  2075  00003E  0E00               	movlw	0
  2076  000040  6E3E               	movwf	printf@flag,c
  2077                           
  2078                           ;doprnt.c: 551: switch(*f) {
  2079                           
  2080                           ;doprnt.c: 550: for(;;) {
  2081  000042  D005               	goto	l3788
  2082  000044                     l3784:
  2083                           
  2084                           ;doprnt.c: 580: flag |= 0x04;
  2085  000044  843E               	bsf	printf@flag,2,c
  2086                           
  2087                           ;doprnt.c: 581: f++;
  2088  000046  4A27               	infsnz	printf@f,f,c
  2089  000048  2A28               	incf	printf@f+1,f,c
  2090                           
  2091                           ;doprnt.c: 582: continue;
  2092  00004A  D001               	goto	l3788
  2093                           
  2094                           ;doprnt.c: 584: }
  2095  00004C  D00B               	goto	l3790
  2096  00004E                     l3788:
  2097  00004E  C027  FFF6         	movff	printf@f,tblptrl
  2098  000052  C028  FFF7         	movff	printf@f+1,tblptrh
  2099  000056                     	if	0	;tblptru may be non-zero
  2100  000056                     	endif
  2101  000056                     	if	0	;tblptru may be non-zero
  2102  000056                     	endif
  2103  000056  0008               	tblrd		*
  2104  000058  50F5               	movf	tablat,w,c
  2105                           
  2106                           ; Switch size 1, requested type "space"
  2107                           ; Number of cases is 1, Range of values is 48 to 48
  2108                           ; switch strategies available:
  2109                           ; Name         Instructions Cycles
  2110                           ; simple_byte            4     3 (average)
  2111                           ;	Chosen strategy is simple_byte
  2112  00005A  0A30               	xorlw	48	; case 48
  2113  00005C  B4D8               	btfsc	status,2,c
  2114  00005E  D7F2               	goto	l3784
  2115                           
  2116                           ;doprnt.c: 585: break;
  2117  000060  D001               	goto	l3790
  2118                           
  2119                           ;doprnt.c: 586: }
  2120  000062  D7F5               	goto	l3788
  2121  000064                     l3790:
  2122                           
  2123                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2124  000064  C027  FFF6         	movff	printf@f,tblptrl
  2125  000068  C028  FFF7         	movff	printf@f+1,tblptrh
  2126  00006C                     	if	0	;tblptru may be non-zero
  2127  00006C                     	endif
  2128  00006C                     	if	0	;tblptru may be non-zero
  2129  00006C                     	endif
  2130  00006C  0008               	tblrd		*
  2131  00006E  50F5               	movf	tablat,w,c
  2132  000070  EC2B  F00B         	call	_isdigit
  2133  000074  A0D8               	btfss	status,0,c
  2134  000076  D03D               	goto	l3808
  2135                           
  2136                           ;doprnt.c: 598: width = 0;
  2137  000078  0E00               	movlw	0
  2138  00007A  6E3D               	movwf	printf@width+1,c
  2139  00007C  0E00               	movlw	0
  2140  00007E  6E3C               	movwf	printf@width,c
  2141  000080  D000               	goto	l3794
  2142  000082                     l3794:
  2143                           
  2144                           ;doprnt.c: 600: width *= 10;
  2145  000082  C03C  F011         	movff	printf@width,___wmul@multiplier
  2146  000086  C03D  F012         	movff	printf@width+1,___wmul@multiplier+1
  2147  00008A  0E00               	movlw	0
  2148  00008C  6E14               	movwf	___wmul@multiplicand+1,c
  2149  00008E  0E0A               	movlw	10
  2150  000090  6E13               	movwf	___wmul@multiplicand,c
  2151  000092  EC17  F00B         	call	___wmul	;wreg free
  2152  000096  C011  F03C         	movff	?___wmul,printf@width
  2153  00009A  C012  F03D         	movff	?___wmul+1,printf@width+1
  2154                           
  2155                           ;doprnt.c: 601: width += *f++ - '0';
  2156  00009E  0ED0               	movlw	208
  2157  0000A0  6E2F               	movwf	??_printf& (0+255),c
  2158  0000A2  0EFF               	movlw	255
  2159  0000A4  6E30               	movwf	(??_printf+1)& (0+255),c
  2160  0000A6  C027  FFF6         	movff	printf@f,tblptrl
  2161  0000AA  C028  FFF7         	movff	printf@f+1,tblptrh
  2162  0000AE                     	if	0	;tblptru may be non-zero
  2163  0000AE                     	endif
  2164  0000AE                     	if	0	;tblptru may be non-zero
  2165  0000AE                     	endif
  2166  0000AE  0008               	tblrd		*
  2167  0000B0  50F5               	movf	tablat,w,c
  2168  0000B2  6E31               	movwf	(??_printf+2)& (0+255),c
  2169  0000B4  6A32               	clrf	(??_printf+3)& (0+255),c
  2170  0000B6  502F               	movf	??_printf,w,c
  2171  0000B8  2631               	addwf	??_printf+2,f,c
  2172  0000BA  5030               	movf	??_printf+1,w,c
  2173  0000BC  2232               	addwfc	??_printf+3,f,c
  2174  0000BE  5031               	movf	??_printf+2,w,c
  2175  0000C0  263C               	addwf	printf@width,f,c
  2176  0000C2  5032               	movf	??_printf+3,w,c
  2177  0000C4  223D               	addwfc	printf@width+1,f,c
  2178  0000C6  4A27               	infsnz	printf@f,f,c
  2179  0000C8  2A28               	incf	printf@f+1,f,c
  2180                           
  2181                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2182  0000CA  C027  FFF6         	movff	printf@f,tblptrl
  2183  0000CE  C028  FFF7         	movff	printf@f+1,tblptrh
  2184  0000D2                     	if	0	;tblptru may be non-zero
  2185  0000D2                     	endif
  2186  0000D2                     	if	0	;tblptru may be non-zero
  2187  0000D2                     	endif
  2188  0000D2  0008               	tblrd		*
  2189  0000D4  50F5               	movf	tablat,w,c
  2190  0000D6  EC2B  F00B         	call	_isdigit
  2191  0000DA  A0D8               	btfss	status,0,c
  2192  0000DC  D00A               	goto	l3808
  2193  0000DE  D7D1               	goto	l3794
  2194                           
  2195                           ;doprnt.c: 635: switch(c = *f++) {
  2196                           
  2197                           ;doprnt.c: 608: }
  2198                           ;doprnt.c: 633: loop:
  2199  0000E0  D008               	goto	l3808
  2200                           
  2201                           ;doprnt.c: 638: goto alldone;
  2202                           
  2203                           ;doprnt.c: 637: case 0:
  2204  0000E2  D1BC               	goto	l446
  2205  0000E4                     l3802:
  2206                           
  2207                           ;doprnt.c: 643: flag |= 0x10;
  2208  0000E4  883E               	bsf	printf@flag,4,c
  2209                           
  2210                           ;doprnt.c: 644: goto loop;
  2211  0000E6  D005               	goto	l3808
  2212                           
  2213                           ;doprnt.c: 698: case 'i':
  2214                           ;doprnt.c: 699: break;
  2215                           
  2216                           ;doprnt.c: 697: case 'd':
  2217  0000E8  D01E               	goto	l405
  2218  0000EA                     l3804:
  2219                           
  2220                           ;doprnt.c: 721: flag |= 0x80;
  2221  0000EA  8E3E               	bsf	printf@flag,7,c
  2222                           
  2223                           ;doprnt.c: 723: break;
  2224  0000EC  D01C               	goto	l405
  2225                           
  2226                           ;doprnt.c: 813: continue;
  2227                           
  2228                           ;doprnt.c: 802: default:
  2229  0000EE  D1A8               	goto	l3916
  2230                           
  2231                           ;doprnt.c: 822: }
  2232  0000F0  D01A               	goto	l405
  2233  0000F2                     l3808:
  2234  0000F2  C027  FFF6         	movff	printf@f,tblptrl
  2235  0000F6  C028  FFF7         	movff	printf@f+1,tblptrh
  2236  0000FA  4A27               	infsnz	printf@f,f,c
  2237  0000FC  2A28               	incf	printf@f+1,f,c
  2238  0000FE                     	if	0	;tblptru may be non-zero
  2239  0000FE                     	endif
  2240  0000FE                     	if	0	;tblptru may be non-zero
  2241  0000FE                     	endif
  2242  0000FE  0008               	tblrd		*
  2243  000100  CFF5 F03F          	movff	tablat,printf@c
  2244  000104  503F               	movf	printf@c,w,c
  2245                           
  2246                           ; Switch size 1, requested type "space"
  2247                           ; Number of cases is 5, Range of values is 0 to 120
  2248                           ; switch strategies available:
  2249                           ; Name         Instructions Cycles
  2250                           ; simple_byte           16     9 (average)
  2251                           ;	Chosen strategy is simple_byte
  2252  000106  0A00               	xorlw	0	; case 0
  2253  000108  B4D8               	btfsc	status,2,c
  2254  00010A  D1A8               	goto	l446
  2255  00010C  0A64               	xorlw	100	; case 100
  2256  00010E  B4D8               	btfsc	status,2,c
  2257  000110  D00A               	goto	l405
  2258  000112  0A0D               	xorlw	13	; case 105
  2259  000114  B4D8               	btfsc	status,2,c
  2260  000116  D007               	goto	l405
  2261  000118  0A05               	xorlw	5	; case 108
  2262  00011A  B4D8               	btfsc	status,2,c
  2263  00011C  D7E3               	goto	l3802
  2264  00011E  0A14               	xorlw	20	; case 120
  2265  000120  B4D8               	btfsc	status,2,c
  2266  000122  D7E3               	goto	l3804
  2267  000124  D18D               	goto	l3916
  2268  000126                     l405:
  2269                           
  2270                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  2271  000126  BE3E               	btfsc	printf@flag,7,c
  2272  000128  D02F               	goto	l408
  2273                           
  2274                           ;doprnt.c: 1253: {
  2275                           ;doprnt.c: 1255: if(flag & 0x10)
  2276  00012A  A83E               	btfss	printf@flag,4,c
  2277  00012C  D00E               	goto	l3816
  2278                           
  2279                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  2280  00012E  C036  FFD9         	movff	printf@ap,fsr2l
  2281  000132  C037  FFDA         	movff	printf@ap+1,fsr2h
  2282  000136  CFDE F038          	movff	postinc2,printf@val
  2283  00013A  CFDE F039          	movff	postinc2,printf@val+1
  2284  00013E  CFDE F03A          	movff	postinc2,printf@val+2
  2285  000142  CFDE F03B          	movff	postinc2,printf@val+3
  2286  000146  0E04               	movlw	4
  2287  000148  D00E               	goto	L1
  2288  00014A                     l3816:
  2289                           
  2290                           ;doprnt.c: 1257: else
  2291                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  2292  00014A  C036  FFD9         	movff	printf@ap,fsr2l
  2293  00014E  C037  FFDA         	movff	printf@ap+1,fsr2h
  2294  000152  CFDE F038          	movff	postinc2,printf@val
  2295  000156  CFDD F039          	movff	postdec2,printf@val+1
  2296  00015A  0E00               	movlw	0
  2297  00015C  BE39               	btfsc	printf@val+1,7,c
  2298  00015E  0EFF               	movlw	-1
  2299  000160  6E3A               	movwf	printf@val+2,c
  2300  000162  6E3B               	movwf	printf@val+3,c
  2301  000164  0E02               	movlw	2
  2302  000166                     L1:
  2303  000166  2636               	addwf	printf@ap,f,c
  2304  000168  0E00               	movlw	0
  2305  00016A  2237               	addwfc	printf@ap+1,f,c
  2306  00016C  D000               	goto	l3820
  2307  00016E                     l3820:
  2308                           
  2309                           ;doprnt.c: 1261: if((long)val < 0) {
  2310  00016E  AE3B               	btfss	printf@val+3,7,c
  2311  000170  D074               	goto	l3864
  2312                           
  2313                           ;doprnt.c: 1262: flag |= 0x03;
  2314  000172  0E03               	movlw	3
  2315  000174  123E               	iorwf	printf@flag,f,c
  2316                           
  2317                           ;doprnt.c: 1263: val = -val;
  2318  000176  1E3B               	comf	printf@val+3,f,c
  2319  000178  1E3A               	comf	printf@val+2,f,c
  2320  00017A  1E39               	comf	printf@val+1,f,c
  2321  00017C  6C38               	negf	printf@val,c
  2322  00017E  0E00               	movlw	0
  2323  000180  2239               	addwfc	printf@val+1,f,c
  2324  000182  223A               	addwfc	printf@val+2,f,c
  2325  000184  223B               	addwfc	printf@val+3,f,c
  2326                           
  2327                           ;doprnt.c: 1264: }
  2328                           ;doprnt.c: 1266: }
  2329  000186  D069               	goto	l3864
  2330  000188                     l408:
  2331                           
  2332                           ;doprnt.c: 1268: else
  2333                           ;doprnt.c: 1273: {
  2334                           ;doprnt.c: 1281: if(flag & 0x10)
  2335  000188  A83E               	btfss	printf@flag,4,c
  2336  00018A  D00E               	goto	l3830
  2337                           
  2338                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  2339  00018C  C036  FFD9         	movff	printf@ap,fsr2l
  2340  000190  C037  FFDA         	movff	printf@ap+1,fsr2h
  2341  000194  CFDE F038          	movff	postinc2,printf@val
  2342  000198  CFDE F039          	movff	postinc2,printf@val+1
  2343  00019C  CFDE F03A          	movff	postinc2,printf@val+2
  2344  0001A0  CFDE F03B          	movff	postinc2,printf@val+3
  2345  0001A4  0E04               	movlw	4
  2346  0001A6  D00F               	goto	L2
  2347  0001A8                     l3830:
  2348                           
  2349                           ;doprnt.c: 1283: else
  2350                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2351  0001A8  C036  FFD9         	movff	printf@ap,fsr2l
  2352  0001AC  C037  FFDA         	movff	printf@ap+1,fsr2h
  2353  0001B0  CFDE F02F          	movff	postinc2,??_printf
  2354  0001B4  CFDD F030          	movff	postdec2,??_printf+1
  2355  0001B8  C02F  F038         	movff	??_printf,printf@val
  2356  0001BC  C030  F039         	movff	??_printf+1,printf@val+1
  2357  0001C0  6A3A               	clrf	printf@val+2,c
  2358  0001C2  6A3B               	clrf	printf@val+3,c
  2359  0001C4  0E02               	movlw	2
  2360  0001C6                     L2:
  2361  0001C6  2636               	addwf	printf@ap,f,c
  2362  0001C8  0E00               	movlw	0
  2363  0001CA  2237               	addwfc	printf@ap+1,f,c
  2364                           
  2365                           ;doprnt.c: 1287: }
  2366                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  2367  0001CC  D046               	goto	l3864
  2368  0001CE                     l3834:
  2369                           
  2370                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2371  0001CE  0E01               	movlw	1
  2372  0001D0  6E3F               	movwf	printf@c,c
  2373  0001D2                     l3836:
  2374  0001D2  0E0A               	movlw	10
  2375  0001D4  183F               	xorwf	printf@c,w,c
  2376  0001D6  B4D8               	btfsc	status,2,c
  2377  0001D8  D049               	goto	l3866
  2378  0001DA  D001               	goto	l3840
  2379  0001DC  D047               	goto	l3866
  2380  0001DE                     l3840:
  2381                           
  2382                           ;doprnt.c: 1306: if(val < dpowers[c])
  2383  0001DE  503F               	movf	printf@c,w,c
  2384  0001E0  0D04               	mullw	4
  2385  0001E2  0E5A               	movlw	low _dpowers
  2386  0001E4  24F3               	addwf	prodl,w,c
  2387  0001E6  6EF6               	movwf	tblptrl,c
  2388  0001E8  0EFF               	movlw	high _dpowers
  2389  0001EA  20F4               	addwfc	prodh,w,c
  2390  0001EC  6EF7               	movwf	tblptrh,c
  2391  0001EE                     	if	0	;There are less than 3 active tblptr bytes
  2392  0001EE                     	endif
  2393  0001EE  0009               	tblrd		*+
  2394  0001F0  50F5               	movf	tablat,w,c
  2395  0001F2  5C38               	subwf	printf@val,w,c
  2396  0001F4  0009               	tblrd		*+
  2397  0001F6  50F5               	movf	tablat,w,c
  2398  0001F8  5839               	subwfb	printf@val+1,w,c
  2399  0001FA  0009               	tblrd		*+
  2400  0001FC  50F5               	movf	tablat,w,c
  2401  0001FE  583A               	subwfb	printf@val+2,w,c
  2402  000200  0009               	tblrd		*+
  2403  000202  50F5               	movf	tablat,w,c
  2404  000204  583B               	subwfb	printf@val+3,w,c
  2405  000206  A0D8               	btfss	status,0,c
  2406  000208  D031               	goto	l3866
  2407  00020A  D001               	goto	l3844
  2408                           
  2409                           ;doprnt.c: 1307: break;
  2410  00020C  D02F               	goto	l3866
  2411  00020E                     l3844:
  2412  00020E  2A3F               	incf	printf@c,f,c
  2413  000210  D7E0               	goto	l3836
  2414                           
  2415                           ;doprnt.c: 1309: break;
  2416  000212  D02C               	goto	l3866
  2417  000214                     l3848:
  2418                           
  2419                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2420  000214  0E01               	movlw	1
  2421  000216  6E3F               	movwf	printf@c,c
  2422  000218                     l3850:
  2423  000218  0E08               	movlw	8
  2424  00021A  183F               	xorwf	printf@c,w,c
  2425  00021C  B4D8               	btfsc	status,2,c
  2426  00021E  D026               	goto	l3866
  2427  000220  D001               	goto	l3854
  2428  000222  D024               	goto	l3866
  2429  000224                     l3854:
  2430                           
  2431                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2432  000224  503F               	movf	printf@c,w,c
  2433  000226  0D04               	mullw	4
  2434  000228  0E82               	movlw	low _hexpowers
  2435  00022A  24F3               	addwf	prodl,w,c
  2436  00022C  6EF6               	movwf	tblptrl,c
  2437  00022E  0EFF               	movlw	high _hexpowers
  2438  000230  20F4               	addwfc	prodh,w,c
  2439  000232  6EF7               	movwf	tblptrh,c
  2440  000234                     	if	0	;There are less than 3 active tblptr bytes
  2441  000234                     	endif
  2442  000234  0009               	tblrd		*+
  2443  000236  50F5               	movf	tablat,w,c
  2444  000238  5C38               	subwf	printf@val,w,c
  2445  00023A  0009               	tblrd		*+
  2446  00023C  50F5               	movf	tablat,w,c
  2447  00023E  5839               	subwfb	printf@val+1,w,c
  2448  000240  0009               	tblrd		*+
  2449  000242  50F5               	movf	tablat,w,c
  2450  000244  583A               	subwfb	printf@val+2,w,c
  2451  000246  0009               	tblrd		*+
  2452  000248  50F5               	movf	tablat,w,c
  2453  00024A  583B               	subwfb	printf@val+3,w,c
  2454  00024C  A0D8               	btfss	status,0,c
  2455  00024E  D00E               	goto	l3866
  2456  000250  D001               	goto	l3858
  2457                           
  2458                           ;doprnt.c: 1318: break;
  2459  000252  D00C               	goto	l3866
  2460  000254                     l3858:
  2461  000254  2A3F               	incf	printf@c,f,c
  2462  000256  D7E0               	goto	l3850
  2463                           
  2464                           ;doprnt.c: 1336: }
  2465                           
  2466                           ;doprnt.c: 1320: break;
  2467  000258  D009               	goto	l3866
  2468  00025A                     l3864:
  2469  00025A  503E               	movf	printf@flag,w,c
  2470  00025C  0B80               	andlw	128
  2471                           
  2472                           ; Switch size 1, requested type "space"
  2473                           ; Number of cases is 2, Range of values is 0 to 128
  2474                           ; switch strategies available:
  2475                           ; Name         Instructions Cycles
  2476                           ; simple_byte            7     4 (average)
  2477                           ;	Chosen strategy is simple_byte
  2478  00025E  0A00               	xorlw	0	; case 0
  2479  000260  B4D8               	btfsc	status,2,c
  2480  000262  D7B5               	goto	l3834
  2481  000264  0A80               	xorlw	128	; case 128
  2482  000266  B4D8               	btfsc	status,2,c
  2483  000268  D7D5               	goto	l3848
  2484  00026A  D000               	goto	l3866
  2485  00026C                     l3866:
  2486                           
  2487                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2488  00026C  503C               	movf	printf@width,w,c
  2489  00026E  103D               	iorwf	printf@width+1,w,c
  2490  000270  B4D8               	btfsc	status,2,c
  2491  000272  D00A               	goto	l3872
  2492  000274  C03E  F02F         	movff	printf@flag,??_printf
  2493  000278  0E03               	movlw	3
  2494  00027A  162F               	andwf	??_printf,f,c
  2495  00027C  B4D8               	btfsc	status,2,c
  2496  00027E  D004               	goto	l3872
  2497                           
  2498                           ;doprnt.c: 1346: width--;
  2499  000280  063C               	decf	printf@width,f,c
  2500  000282  A0D8               	btfss	status,0,c
  2501  000284  063D               	decf	printf@width+1,f,c
  2502  000286  D000               	goto	l3872
  2503  000288                     l3872:
  2504                           
  2505                           ;doprnt.c: 1381: if(width > c)
  2506  000288  0E80               	movlw	128
  2507  00028A  BE3F               	btfsc	printf@c,7,c
  2508  00028C  0E7F               	movlw	127
  2509  00028E  6E2F               	movwf	??_printf& (0+255),c
  2510  000290  503C               	movf	printf@width,w,c
  2511  000292  5C3F               	subwf	printf@c,w,c
  2512  000294  503D               	movf	printf@width+1,w,c
  2513  000296  0A80               	xorlw	128
  2514  000298  582F               	subwfb	??_printf& (0+255),w,c
  2515  00029A  B0D8               	btfsc	status,0,c
  2516  00029C  D007               	goto	l3876
  2517                           
  2518                           ;doprnt.c: 1382: width -= c;
  2519  00029E  503F               	movf	printf@c,w,c
  2520  0002A0  5E3C               	subwf	printf@width,f,c
  2521  0002A2  0E00               	movlw	0
  2522  0002A4  BE3F               	btfsc	printf@c,7,c
  2523  0002A6  0EFF               	movlw	255
  2524  0002A8  5A3D               	subwfb	printf@width+1,f,c
  2525  0002AA  D005               	goto	l3878
  2526  0002AC                     l3876:
  2527                           
  2528                           ;doprnt.c: 1383: else
  2529                           ;doprnt.c: 1384: width = 0;
  2530  0002AC  0E00               	movlw	0
  2531  0002AE  6E3D               	movwf	printf@width+1,c
  2532  0002B0  0E00               	movlw	0
  2533  0002B2  6E3C               	movwf	printf@width,c
  2534  0002B4  D000               	goto	l3878
  2535  0002B6                     l3878:
  2536                           
  2537                           ;doprnt.c: 1387: if(flag & 0x04) {
  2538  0002B6  A43E               	btfss	printf@flag,2,c
  2539  0002B8  D01A               	goto	l3890
  2540                           
  2541                           ;doprnt.c: 1392: if(flag & 0x03)
  2542  0002BA  C03E  F02F         	movff	printf@flag,??_printf
  2543  0002BE  0E03               	movlw	3
  2544  0002C0  162F               	andwf	??_printf,f,c
  2545  0002C2  B4D8               	btfsc	status,2,c
  2546  0002C4  D004               	goto	l3884
  2547                           
  2548                           ;doprnt.c: 1393: (putch('-') );
  2549  0002C6  0E2D               	movlw	45
  2550  0002C8  EC98  F00B         	call	_putch
  2551  0002CC  D000               	goto	l3884
  2552  0002CE                     l3884:
  2553                           
  2554                           ;doprnt.c: 1415: if(width)
  2555  0002CE  503C               	movf	printf@width,w,c
  2556  0002D0  103D               	iorwf	printf@width+1,w,c
  2557  0002D2  B4D8               	btfsc	status,2,c
  2558  0002D4  D026               	goto	l3900
  2559  0002D6                     l3886:
  2560                           
  2561                           ;doprnt.c: 1417: (putch('0') );
  2562  0002D6  0E30               	movlw	48
  2563  0002D8  EC98  F00B         	call	_putch
  2564                           
  2565                           ;doprnt.c: 1418: while(--width);
  2566  0002DC  063C               	decf	printf@width,f,c
  2567  0002DE  A0D8               	btfss	status,0,c
  2568  0002E0  063D               	decf	printf@width+1,f,c
  2569  0002E2  503C               	movf	printf@width,w,c
  2570  0002E4  103D               	iorwf	printf@width+1,w,c
  2571  0002E6  B4D8               	btfsc	status,2,c
  2572  0002E8  D01C               	goto	l3900
  2573  0002EA  D7F5               	goto	l3886
  2574                           
  2575                           ;doprnt.c: 1420: } else
  2576  0002EC  D01A               	goto	l3900
  2577  0002EE                     l3890:
  2578                           
  2579                           ;doprnt.c: 1422: {
  2580                           ;doprnt.c: 1424: if(width
  2581                           ;doprnt.c: 1428: )
  2582  0002EE  503C               	movf	printf@width,w,c
  2583  0002F0  103D               	iorwf	printf@width+1,w,c
  2584  0002F2  B4D8               	btfsc	status,2,c
  2585  0002F4  D00C               	goto	l3896
  2586  0002F6                     l3892:
  2587                           
  2588                           ;doprnt.c: 1430: (putch(' ') );
  2589  0002F6  0E20               	movlw	32
  2590  0002F8  EC98  F00B         	call	_putch
  2591                           
  2592                           ;doprnt.c: 1431: while(--width);
  2593  0002FC  063C               	decf	printf@width,f,c
  2594  0002FE  A0D8               	btfss	status,0,c
  2595  000300  063D               	decf	printf@width+1,f,c
  2596  000302  503C               	movf	printf@width,w,c
  2597  000304  103D               	iorwf	printf@width+1,w,c
  2598  000306  B4D8               	btfsc	status,2,c
  2599  000308  D002               	goto	l3896
  2600  00030A  D7F5               	goto	l3892
  2601  00030C  D000               	goto	l3896
  2602  00030E                     l3896:
  2603                           
  2604                           ;doprnt.c: 1438: if(flag & 0x03)
  2605  00030E  C03E  F02F         	movff	printf@flag,??_printf
  2606  000312  0E03               	movlw	3
  2607  000314  162F               	andwf	??_printf,f,c
  2608  000316  B4D8               	btfsc	status,2,c
  2609  000318  D004               	goto	l3900
  2610                           
  2611                           ;doprnt.c: 1439: (putch('-') );
  2612  00031A  0E2D               	movlw	45
  2613  00031C  EC98  F00B         	call	_putch
  2614  000320  D000               	goto	l3900
  2615  000322                     l3900:
  2616                           
  2617                           ;doprnt.c: 1469: }
  2618                           ;doprnt.c: 1472: prec = c;
  2619  000322  503F               	movf	printf@c,w,c
  2620  000324  6E34               	movwf	printf@prec,c
  2621  000326  6A35               	clrf	printf@prec+1,c
  2622  000328  BE34               	btfsc	printf@prec,7,c
  2623  00032A  0635               	decf	printf@prec+1,f,c
  2624                           
  2625                           ;doprnt.c: 1474: while(prec--) {
  2626  00032C  D07F               	goto	l3914
  2627                           
  2628                           ;doprnt.c: 1476: switch((unsigned char)(flag & 0x80))
  2629  00032E  D071               	goto	l3910
  2630  000330                     l3902:
  2631                           
  2632                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2633  000330  C034  F02F         	movff	printf@prec,??_printf
  2634  000334  C035  F030         	movff	printf@prec+1,??_printf+1
  2635  000338  90D8               	bcf	status,0,c
  2636  00033A  362F               	rlcf	??_printf,f,c
  2637  00033C  3630               	rlcf	??_printf+1,f,c
  2638  00033E  90D8               	bcf	status,0,c
  2639  000340  362F               	rlcf	??_printf,f,c
  2640  000342  3630               	rlcf	??_printf+1,f,c
  2641  000344  0E5A               	movlw	low _dpowers
  2642  000346  242F               	addwf	??_printf,w,c
  2643  000348  6EF6               	movwf	tblptrl,c
  2644  00034A  0EFF               	movlw	high _dpowers
  2645  00034C  2030               	addwfc	??_printf+1,w,c
  2646  00034E  6EF7               	movwf	tblptrh,c
  2647  000350                     	if	0	;There are less than 3 active tblptr bytes
  2648  000350                     	endif
  2649  000350  0009               	tblrd		*+
  2650  000352  CFF5 F015          	movff	tablat,___lldiv@divisor
  2651  000356  0009               	tblrd		*+
  2652  000358  CFF5 F016          	movff	tablat,___lldiv@divisor+1
  2653  00035C  0009               	tblrd		*+
  2654  00035E  CFF5 F017          	movff	tablat,___lldiv@divisor+2
  2655  000362  000A               	tblrd		*-
  2656  000364  CFF5 F018          	movff	tablat,___lldiv@divisor+3
  2657  000368  C038  F011         	movff	printf@val,___lldiv@dividend
  2658  00036C  C039  F012         	movff	printf@val+1,___lldiv@dividend+1
  2659  000370  C03A  F013         	movff	printf@val+2,___lldiv@dividend+2
  2660  000374  C03B  F014         	movff	printf@val+3,___lldiv@dividend+3
  2661  000378  EC1D  F008         	call	___lldiv	;wreg free
  2662  00037C  C011  F01E         	movff	?___lldiv,___llmod@dividend
  2663  000380  C012  F01F         	movff	?___lldiv+1,___llmod@dividend+1
  2664  000384  C013  F020         	movff	?___lldiv+2,___llmod@dividend+2
  2665  000388  C014  F021         	movff	?___lldiv+3,___llmod@dividend+3
  2666  00038C  0E0A               	movlw	10
  2667  00038E  6E22               	movwf	___llmod@divisor,c
  2668  000390  0E00               	movlw	0
  2669  000392  6E23               	movwf	___llmod@divisor+1,c
  2670  000394  0E00               	movlw	0
  2671  000396  6E24               	movwf	___llmod@divisor+2,c
  2672  000398  0E00               	movlw	0
  2673  00039A  6E25               	movwf	___llmod@divisor+3,c
  2674  00039C  EC65  F009         	call	___llmod	;wreg free
  2675  0003A0  501E               	movf	?___llmod,w,c
  2676  0003A2  0F30               	addlw	48
  2677  0003A4  6E3F               	movwf	printf@c,c
  2678                           
  2679                           ;doprnt.c: 1491: break;
  2680  0003A6  D03E               	goto	l3912
  2681  0003A8                     l3904:
  2682                           
  2683                           ;doprnt.c: 1499: {
  2684                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  2685  0003A8  C038  F011         	movff	printf@val,___lldiv@dividend
  2686  0003AC  C039  F012         	movff	printf@val+1,___lldiv@dividend+1
  2687  0003B0  C03A  F013         	movff	printf@val+2,___lldiv@dividend+2
  2688  0003B4  C03B  F014         	movff	printf@val+3,___lldiv@dividend+3
  2689  0003B8  C034  F02F         	movff	printf@prec,??_printf
  2690  0003BC  C035  F030         	movff	printf@prec+1,??_printf+1
  2691  0003C0  90D8               	bcf	status,0,c
  2692  0003C2  362F               	rlcf	??_printf,f,c
  2693  0003C4  3630               	rlcf	??_printf+1,f,c
  2694  0003C6  90D8               	bcf	status,0,c
  2695  0003C8  362F               	rlcf	??_printf,f,c
  2696  0003CA  3630               	rlcf	??_printf+1,f,c
  2697  0003CC  0E82               	movlw	low _hexpowers
  2698  0003CE  242F               	addwf	??_printf,w,c
  2699  0003D0  6EF6               	movwf	tblptrl,c
  2700  0003D2  0EFF               	movlw	high _hexpowers
  2701  0003D4  2030               	addwfc	??_printf+1,w,c
  2702  0003D6  6EF7               	movwf	tblptrh,c
  2703  0003D8                     	if	0	;There are less than 3 active tblptr bytes
  2704  0003D8                     	endif
  2705  0003D8  0009               	tblrd		*+
  2706  0003DA  CFF5 F015          	movff	tablat,___lldiv@divisor
  2707  0003DE  0009               	tblrd		*+
  2708  0003E0  CFF5 F016          	movff	tablat,___lldiv@divisor+1
  2709  0003E4  0009               	tblrd		*+
  2710  0003E6  CFF5 F017          	movff	tablat,___lldiv@divisor+2
  2711  0003EA  000A               	tblrd		*-
  2712  0003EC  CFF5 F018          	movff	tablat,___lldiv@divisor+3
  2713  0003F0  EC1D  F008         	call	___lldiv	;wreg free
  2714  0003F4  5011               	movf	?___lldiv,w,c
  2715  0003F6  0B0F               	andlw	15
  2716  0003F8  6E33               	movwf	printf@idx,c
  2717                           
  2718                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  2719  0003FA  5033               	movf	printf@idx,w,c
  2720  0003FC  0D01               	mullw	1
  2721  0003FE  0EE0               	movlw	low STR_6
  2722  000400  24F3               	addwf	prodl,w,c
  2723  000402  6EF6               	movwf	tblptrl,c
  2724  000404  0EFF               	movlw	high STR_6
  2725  000406  20F4               	addwfc	prodh,w,c
  2726  000408  6EF7               	movwf	tblptrh,c
  2727  00040A                     	if	0	;There are less than 3 active tblptr bytes
  2728  00040A                     	endif
  2729  00040A  0008               	tblrd		*
  2730  00040C  CFF5 F03F          	movff	tablat,printf@c
  2731                           
  2732                           ;doprnt.c: 1523: }
  2733                           
  2734                           ;doprnt.c: 1508: }
  2735                           ;doprnt.c: 1510: break;
  2736  000410  D009               	goto	l3912
  2737  000412                     l3910:
  2738  000412  503E               	movf	printf@flag,w,c
  2739  000414  0B80               	andlw	128
  2740                           
  2741                           ; Switch size 1, requested type "space"
  2742                           ; Number of cases is 2, Range of values is 0 to 128
  2743                           ; switch strategies available:
  2744                           ; Name         Instructions Cycles
  2745                           ; simple_byte            7     4 (average)
  2746                           ;	Chosen strategy is simple_byte
  2747  000416  0A00               	xorlw	0	; case 0
  2748  000418  B4D8               	btfsc	status,2,c
  2749  00041A  D78A               	goto	l3902
  2750  00041C  0A80               	xorlw	128	; case 128
  2751  00041E  B4D8               	btfsc	status,2,c
  2752  000420  D7C3               	goto	l3904
  2753  000422  D000               	goto	l3912
  2754  000424                     l3912:
  2755                           
  2756                           ;doprnt.c: 1524: (putch(c) );
  2757  000424  503F               	movf	printf@c,w,c
  2758  000426  EC98  F00B         	call	_putch
  2759  00042A  D000               	goto	l3914
  2760  00042C                     l3914:
  2761  00042C  0634               	decf	printf@prec,f,c
  2762  00042E  A0D8               	btfss	status,0,c
  2763  000430  0635               	decf	printf@prec+1,f,c
  2764  000432  2834               	incf	printf@prec,w,c
  2765  000434  E1EE               	bnz	l3910
  2766  000436  2835               	incf	printf@prec+1,w,c
  2767  000438  B4D8               	btfsc	status,2,c
  2768  00043A  D002               	goto	l3916
  2769  00043C  D7EA               	goto	l3910
  2770  00043E  D000               	goto	l3916
  2771  000440                     l3916:
  2772  000440  C027  FFF6         	movff	printf@f,tblptrl
  2773  000444  C028  FFF7         	movff	printf@f+1,tblptrh
  2774  000448  4A27               	infsnz	printf@f,f,c
  2775  00044A  2A28               	incf	printf@f+1,f,c
  2776  00044C                     	if	0	;tblptru may be non-zero
  2777  00044C                     	endif
  2778  00044C                     	if	0	;tblptru may be non-zero
  2779  00044C                     	endif
  2780  00044C  0008               	tblrd		*
  2781  00044E  CFF5 F03F          	movff	tablat,printf@c
  2782  000452  503F               	movf	printf@c,w,c
  2783  000454  B4D8               	btfsc	status,2,c
  2784  000456  D002               	goto	l446
  2785  000458  D5E6               	goto	l3778
  2786  00045A  D000               	goto	l446
  2787  00045C                     l446:
  2788  00045C  0012               	return		;funcret
  2789  00045E                     __end_of_printf:
  2790                           	opt stack 0
  2791                           tblptru	equ	0xFF8
  2792                           tblptrh	equ	0xFF7
  2793                           tblptrl	equ	0xFF6
  2794                           tablat	equ	0xFF5
  2795                           prodh	equ	0xFF4
  2796                           prodl	equ	0xFF3
  2797                           intcon	equ	0xFF2
  2798                           intcon2	equ	0xFF1
  2799                           postinc0	equ	0xFEE
  2800                           wreg	equ	0xFE8
  2801                           postdec1	equ	0xFE5
  2802                           fsr1l	equ	0xFE1
  2803                           indf2	equ	0xFDF
  2804                           postinc2	equ	0xFDE
  2805                           postdec2	equ	0xFDD
  2806                           fsr2h	equ	0xFDA
  2807                           fsr2l	equ	0xFD9
  2808                           status	equ	0xFD8
  2809                           
  2810 ;; *************** function _putch *****************
  2811 ;; Defined at:
  2812 ;;		line 80 in file "Lab9pA.c"
  2813 ;; Parameters:    Size  Location     Type
  2814 ;;  c               1    wreg     unsigned char 
  2815 ;; Auto vars:     Size  Location     Type
  2816 ;;  c               1   16[COMRAM] unsigned char 
  2817 ;; Return value:  Size  Location     Type
  2818 ;;		None               void
  2819 ;; Registers used:
  2820 ;;		wreg
  2821 ;; Tracked objects:
  2822 ;;		On entry : 0/0
  2823 ;;		On exit  : 0/0
  2824 ;;		Unchanged: 0/0
  2825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2826 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2827 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2828 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2829 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2830 ;;Total ram usage:        1 bytes
  2831 ;; Hardware stack levels used:    1
  2832 ;; Hardware stack levels required when called:    3
  2833 ;; This function calls:
  2834 ;;		Nothing
  2835 ;; This function is called by:
  2836 ;;		_printf
  2837 ;; This function uses a non-reentrant model
  2838 ;;
  2839                           
  2840                           	psect	text2
  2841  001730                     __ptext2:
  2842                           	opt stack 0
  2843  001730                     _putch:
  2844                           	opt stack 26
  2845                           
  2846                           ;incstack = 0
  2847                           ;putch@c stored from wreg
  2848  001730  6E11               	movwf	putch@c,c
  2849                           
  2850                           ;Lab9pA.c: 82: while (!TRMT);
  2851  001732  D000               	goto	l310
  2852  001734                     l310:
  2853  001734  A2AC               	btfss	4012,1,c	;volatile
  2854  001736  D7FE               	goto	l310
  2855                           
  2856                           ;Lab9pA.c: 83: TXREG = c;
  2857  001738  C011  FFAD         	movff	putch@c,4013	;volatile
  2858  00173C  0012               	return		;funcret
  2859  00173E                     __end_of_putch:
  2860                           	opt stack 0
  2861                           tblptru	equ	0xFF8
  2862                           tblptrh	equ	0xFF7
  2863                           tblptrl	equ	0xFF6
  2864                           tablat	equ	0xFF5
  2865                           prodh	equ	0xFF4
  2866                           prodl	equ	0xFF3
  2867                           intcon	equ	0xFF2
  2868                           intcon2	equ	0xFF1
  2869                           postinc0	equ	0xFEE
  2870                           wreg	equ	0xFE8
  2871                           postdec1	equ	0xFE5
  2872                           fsr1l	equ	0xFE1
  2873                           indf2	equ	0xFDF
  2874                           postinc2	equ	0xFDE
  2875                           postdec2	equ	0xFDD
  2876                           fsr2h	equ	0xFDA
  2877                           fsr2l	equ	0xFD9
  2878                           status	equ	0xFD8
  2879                           
  2880 ;; *************** function _isdigit *****************
  2881 ;; Defined at:
  2882 ;;		line 8 in file "E:\XC8\sources\common\isdigit.c"
  2883 ;; Parameters:    Size  Location     Type
  2884 ;;  c               1    wreg     unsigned char 
  2885 ;; Auto vars:     Size  Location     Type
  2886 ;;  c               1   18[COMRAM] unsigned char 
  2887 ;; Return value:  Size  Location     Type
  2888 ;;		None               void
  2889 ;; Registers used:
  2890 ;;		wreg, status,2, status,0
  2891 ;; Tracked objects:
  2892 ;;		On entry : 0/0
  2893 ;;		On exit  : 0/0
  2894 ;;		Unchanged: 0/0
  2895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2896 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2897 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2898 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2899 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2900 ;;Total ram usage:        3 bytes
  2901 ;; Hardware stack levels used:    1
  2902 ;; Hardware stack levels required when called:    3
  2903 ;; This function calls:
  2904 ;;		Nothing
  2905 ;; This function is called by:
  2906 ;;		_printf
  2907 ;; This function uses a non-reentrant model
  2908 ;;
  2909                           
  2910                           	psect	text3
  2911  001656                     __ptext3:
  2912                           	opt stack 0
  2913  001656                     _isdigit:
  2914                           	opt stack 26
  2915                           
  2916                           ;incstack = 0
  2917                           ;isdigit@c stored from wreg
  2918  001656  6E13               	movwf	isdigit@c,c
  2919  001658  0E00               	movlw	0
  2920  00165A  6E12               	movwf	_isdigit$1793,c
  2921  00165C  0E3A               	movlw	58
  2922  00165E  6013               	cpfslt	isdigit@c,c
  2923  001660  D006               	goto	l2690
  2924  001662  0E2F               	movlw	47
  2925  001664  6413               	cpfsgt	isdigit@c,c
  2926  001666  D003               	goto	l2690
  2927  001668  0E01               	movlw	1
  2928  00166A  6E12               	movwf	_isdigit$1793,c
  2929  00166C  D000               	goto	l2690
  2930  00166E                     l2690:
  2931  00166E  C012  F011         	movff	_isdigit$1793,??_isdigit
  2932  001672  3011               	rrcf	??_isdigit,w,c
  2933  001674  D000               	goto	l913
  2934  001676                     l913:
  2935  001676  0012               	return		;funcret
  2936  001678                     __end_of_isdigit:
  2937                           	opt stack 0
  2938                           tblptru	equ	0xFF8
  2939                           tblptrh	equ	0xFF7
  2940                           tblptrl	equ	0xFF6
  2941                           tablat	equ	0xFF5
  2942                           prodh	equ	0xFF4
  2943                           prodl	equ	0xFF3
  2944                           intcon	equ	0xFF2
  2945                           intcon2	equ	0xFF1
  2946                           postinc0	equ	0xFEE
  2947                           wreg	equ	0xFE8
  2948                           postdec1	equ	0xFE5
  2949                           fsr1l	equ	0xFE1
  2950                           indf2	equ	0xFDF
  2951                           postinc2	equ	0xFDE
  2952                           postdec2	equ	0xFDD
  2953                           fsr2h	equ	0xFDA
  2954                           fsr2l	equ	0xFD9
  2955                           status	equ	0xFD8
  2956                           
  2957 ;; *************** function ___llmod *****************
  2958 ;; Defined at:
  2959 ;;		line 8 in file "E:\XC8\sources\common\llmod.c"
  2960 ;; Parameters:    Size  Location     Type
  2961 ;;  dividend        4   29[COMRAM] unsigned long 
  2962 ;;  divisor         4   33[COMRAM] unsigned long 
  2963 ;; Auto vars:     Size  Location     Type
  2964 ;;  counter         1   37[COMRAM] unsigned char 
  2965 ;; Return value:  Size  Location     Type
  2966 ;;                  4   29[COMRAM] unsigned long 
  2967 ;; Registers used:
  2968 ;;		wreg, status,2, status,0
  2969 ;; Tracked objects:
  2970 ;;		On entry : 0/0
  2971 ;;		On exit  : 0/0
  2972 ;;		Unchanged: 0/0
  2973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2974 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2975 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2976 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2977 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2978 ;;Total ram usage:        9 bytes
  2979 ;; Hardware stack levels used:    1
  2980 ;; Hardware stack levels required when called:    3
  2981 ;; This function calls:
  2982 ;;		Nothing
  2983 ;; This function is called by:
  2984 ;;		_printf
  2985 ;; This function uses a non-reentrant model
  2986 ;;
  2987                           
  2988                           	psect	text4
  2989  0012CA                     __ptext4:
  2990                           	opt stack 0
  2991  0012CA                     ___llmod:
  2992                           	opt stack 26
  2993                           
  2994                           ;incstack = 0
  2995  0012CA  5022               	movf	___llmod@divisor,w,c
  2996  0012CC  1023               	iorwf	___llmod@divisor+1,w,c
  2997  0012CE  1024               	iorwf	___llmod@divisor+2,w,c
  2998  0012D0  1025               	iorwf	___llmod@divisor+3,w,c
  2999  0012D2  B4D8               	btfsc	status,2,c
  3000  0012D4  D029               	goto	l952
  3001  0012D6  0E01               	movlw	1
  3002  0012D8  6E26               	movwf	___llmod@counter,c
  3003  0012DA  D007               	goto	l2722
  3004  0012DC                     l2720:
  3005  0012DC  90D8               	bcf	status,0,c
  3006  0012DE  3622               	rlcf	___llmod@divisor,f,c
  3007  0012E0  3623               	rlcf	___llmod@divisor+1,f,c
  3008  0012E2  3624               	rlcf	___llmod@divisor+2,f,c
  3009  0012E4  3625               	rlcf	___llmod@divisor+3,f,c
  3010  0012E6  2A26               	incf	___llmod@counter,f,c
  3011  0012E8  D000               	goto	l2722
  3012  0012EA                     l2722:
  3013  0012EA  BE25               	btfsc	___llmod@divisor+3,7,c
  3014  0012EC  D002               	goto	l2724
  3015  0012EE  D7F6               	goto	l2720
  3016  0012F0  D000               	goto	l2724
  3017  0012F2                     l2724:
  3018  0012F2  5022               	movf	___llmod@divisor,w,c
  3019  0012F4  5C1E               	subwf	___llmod@dividend,w,c
  3020  0012F6  5023               	movf	___llmod@divisor+1,w,c
  3021  0012F8  581F               	subwfb	___llmod@dividend+1,w,c
  3022  0012FA  5024               	movf	___llmod@divisor+2,w,c
  3023  0012FC  5820               	subwfb	___llmod@dividend+2,w,c
  3024  0012FE  5025               	movf	___llmod@divisor+3,w,c
  3025  001300  5821               	subwfb	___llmod@dividend+3,w,c
  3026  001302  A0D8               	btfss	status,0,c
  3027  001304  D009               	goto	l2728
  3028  001306  5022               	movf	___llmod@divisor,w,c
  3029  001308  5E1E               	subwf	___llmod@dividend,f,c
  3030  00130A  5023               	movf	___llmod@divisor+1,w,c
  3031  00130C  5A1F               	subwfb	___llmod@dividend+1,f,c
  3032  00130E  5024               	movf	___llmod@divisor+2,w,c
  3033  001310  5A20               	subwfb	___llmod@dividend+2,f,c
  3034  001312  5025               	movf	___llmod@divisor+3,w,c
  3035  001314  5A21               	subwfb	___llmod@dividend+3,f,c
  3036  001316  D000               	goto	l2728
  3037  001318                     l2728:
  3038  001318  90D8               	bcf	status,0,c
  3039  00131A  3225               	rrcf	___llmod@divisor+3,f,c
  3040  00131C  3224               	rrcf	___llmod@divisor+2,f,c
  3041  00131E  3223               	rrcf	___llmod@divisor+1,f,c
  3042  001320  3222               	rrcf	___llmod@divisor,f,c
  3043  001322  2E26               	decfsz	___llmod@counter,f,c
  3044  001324  D7E6               	goto	l2724
  3045  001326  D000               	goto	l952
  3046  001328                     l952:
  3047  001328  C01E  F01E         	movff	___llmod@dividend,?___llmod
  3048  00132C  C01F  F01F         	movff	___llmod@dividend+1,?___llmod+1
  3049  001330  C020  F020         	movff	___llmod@dividend+2,?___llmod+2
  3050  001334  C021  F021         	movff	___llmod@dividend+3,?___llmod+3
  3051  001338  0012               	return		;funcret
  3052  00133A                     __end_of___llmod:
  3053                           	opt stack 0
  3054                           tblptru	equ	0xFF8
  3055                           tblptrh	equ	0xFF7
  3056                           tblptrl	equ	0xFF6
  3057                           tablat	equ	0xFF5
  3058                           prodh	equ	0xFF4
  3059                           prodl	equ	0xFF3
  3060                           intcon	equ	0xFF2
  3061                           intcon2	equ	0xFF1
  3062                           postinc0	equ	0xFEE
  3063                           wreg	equ	0xFE8
  3064                           postdec1	equ	0xFE5
  3065                           fsr1l	equ	0xFE1
  3066                           indf2	equ	0xFDF
  3067                           postinc2	equ	0xFDE
  3068                           postdec2	equ	0xFDD
  3069                           fsr2h	equ	0xFDA
  3070                           fsr2l	equ	0xFD9
  3071                           status	equ	0xFD8
  3072                           
  3073 ;; *************** function ___lldiv *****************
  3074 ;; Defined at:
  3075 ;;		line 8 in file "E:\XC8\sources\common\lldiv.c"
  3076 ;; Parameters:    Size  Location     Type
  3077 ;;  dividend        4   16[COMRAM] unsigned long 
  3078 ;;  divisor         4   20[COMRAM] unsigned long 
  3079 ;; Auto vars:     Size  Location     Type
  3080 ;;  quotient        4   24[COMRAM] unsigned long 
  3081 ;;  counter         1   28[COMRAM] unsigned char 
  3082 ;; Return value:  Size  Location     Type
  3083 ;;                  4   16[COMRAM] unsigned long 
  3084 ;; Registers used:
  3085 ;;		wreg, status,2, status,0
  3086 ;; Tracked objects:
  3087 ;;		On entry : 0/0
  3088 ;;		On exit  : 0/0
  3089 ;;		Unchanged: 0/0
  3090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3091 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3092 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3093 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3094 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3095 ;;Total ram usage:       13 bytes
  3096 ;; Hardware stack levels used:    1
  3097 ;; Hardware stack levels required when called:    3
  3098 ;; This function calls:
  3099 ;;		Nothing
  3100 ;; This function is called by:
  3101 ;;		_printf
  3102 ;; This function uses a non-reentrant model
  3103 ;;
  3104                           
  3105                           	psect	text5
  3106  00103A                     __ptext5:
  3107                           	opt stack 0
  3108  00103A                     ___lldiv:
  3109                           	opt stack 26
  3110                           
  3111                           ;incstack = 0
  3112  00103A  0E00               	movlw	0
  3113  00103C  6E19               	movwf	___lldiv@quotient,c
  3114  00103E  0E00               	movlw	0
  3115  001040  6E1A               	movwf	___lldiv@quotient+1,c
  3116  001042  0E00               	movlw	0
  3117  001044  6E1B               	movwf	___lldiv@quotient+2,c
  3118  001046  0E00               	movlw	0
  3119  001048  6E1C               	movwf	___lldiv@quotient+3,c
  3120  00104A  5015               	movf	___lldiv@divisor,w,c
  3121  00104C  1016               	iorwf	___lldiv@divisor+1,w,c
  3122  00104E  1017               	iorwf	___lldiv@divisor+2,w,c
  3123  001050  1018               	iorwf	___lldiv@divisor+3,w,c
  3124  001052  B4D8               	btfsc	status,2,c
  3125  001054  D02F               	goto	l942
  3126  001056  0E01               	movlw	1
  3127  001058  6E1D               	movwf	___lldiv@counter,c
  3128  00105A  D007               	goto	l2702
  3129  00105C                     l2700:
  3130  00105C  90D8               	bcf	status,0,c
  3131  00105E  3615               	rlcf	___lldiv@divisor,f,c
  3132  001060  3616               	rlcf	___lldiv@divisor+1,f,c
  3133  001062  3617               	rlcf	___lldiv@divisor+2,f,c
  3134  001064  3618               	rlcf	___lldiv@divisor+3,f,c
  3135  001066  2A1D               	incf	___lldiv@counter,f,c
  3136  001068  D000               	goto	l2702
  3137  00106A                     l2702:
  3138  00106A  BE18               	btfsc	___lldiv@divisor+3,7,c
  3139  00106C  D002               	goto	l2704
  3140  00106E  D7F6               	goto	l2700
  3141  001070  D000               	goto	l2704
  3142  001072                     l2704:
  3143  001072  90D8               	bcf	status,0,c
  3144  001074  3619               	rlcf	___lldiv@quotient,f,c
  3145  001076  361A               	rlcf	___lldiv@quotient+1,f,c
  3146  001078  361B               	rlcf	___lldiv@quotient+2,f,c
  3147  00107A  361C               	rlcf	___lldiv@quotient+3,f,c
  3148  00107C  5015               	movf	___lldiv@divisor,w,c
  3149  00107E  5C11               	subwf	___lldiv@dividend,w,c
  3150  001080  5016               	movf	___lldiv@divisor+1,w,c
  3151  001082  5812               	subwfb	___lldiv@dividend+1,w,c
  3152  001084  5017               	movf	___lldiv@divisor+2,w,c
  3153  001086  5813               	subwfb	___lldiv@dividend+2,w,c
  3154  001088  5018               	movf	___lldiv@divisor+3,w,c
  3155  00108A  5814               	subwfb	___lldiv@dividend+3,w,c
  3156  00108C  A0D8               	btfss	status,0,c
  3157  00108E  D00A               	goto	l2712
  3158  001090  5015               	movf	___lldiv@divisor,w,c
  3159  001092  5E11               	subwf	___lldiv@dividend,f,c
  3160  001094  5016               	movf	___lldiv@divisor+1,w,c
  3161  001096  5A12               	subwfb	___lldiv@dividend+1,f,c
  3162  001098  5017               	movf	___lldiv@divisor+2,w,c
  3163  00109A  5A13               	subwfb	___lldiv@dividend+2,f,c
  3164  00109C  5018               	movf	___lldiv@divisor+3,w,c
  3165  00109E  5A14               	subwfb	___lldiv@dividend+3,f,c
  3166  0010A0  8019               	bsf	___lldiv@quotient,0,c
  3167  0010A2  D000               	goto	l2712
  3168  0010A4                     l2712:
  3169  0010A4  90D8               	bcf	status,0,c
  3170  0010A6  3218               	rrcf	___lldiv@divisor+3,f,c
  3171  0010A8  3217               	rrcf	___lldiv@divisor+2,f,c
  3172  0010AA  3216               	rrcf	___lldiv@divisor+1,f,c
  3173  0010AC  3215               	rrcf	___lldiv@divisor,f,c
  3174  0010AE  2E1D               	decfsz	___lldiv@counter,f,c
  3175  0010B0  D7E0               	goto	l2704
  3176  0010B2  D000               	goto	l942
  3177  0010B4                     l942:
  3178  0010B4  C019  F011         	movff	___lldiv@quotient,?___lldiv
  3179  0010B8  C01A  F012         	movff	___lldiv@quotient+1,?___lldiv+1
  3180  0010BC  C01B  F013         	movff	___lldiv@quotient+2,?___lldiv+2
  3181  0010C0  C01C  F014         	movff	___lldiv@quotient+3,?___lldiv+3
  3182  0010C4  0012               	return		;funcret
  3183  0010C6                     __end_of___lldiv:
  3184                           	opt stack 0
  3185                           tblptru	equ	0xFF8
  3186                           tblptrh	equ	0xFF7
  3187                           tblptrl	equ	0xFF6
  3188                           tablat	equ	0xFF5
  3189                           prodh	equ	0xFF4
  3190                           prodl	equ	0xFF3
  3191                           intcon	equ	0xFF2
  3192                           intcon2	equ	0xFF1
  3193                           postinc0	equ	0xFEE
  3194                           wreg	equ	0xFE8
  3195                           postdec1	equ	0xFE5
  3196                           fsr1l	equ	0xFE1
  3197                           indf2	equ	0xFDF
  3198                           postinc2	equ	0xFDE
  3199                           postdec2	equ	0xFDD
  3200                           fsr2h	equ	0xFDA
  3201                           fsr2l	equ	0xFD9
  3202                           status	equ	0xFD8
  3203                           
  3204 ;; *************** function _init_UART *****************
  3205 ;; Defined at:
  3206 ;;		line 85 in file "Lab9pA.c"
  3207 ;; Parameters:    Size  Location     Type
  3208 ;;		None
  3209 ;; Auto vars:     Size  Location     Type
  3210 ;;		None
  3211 ;; Return value:  Size  Location     Type
  3212 ;;		None               void
  3213 ;; Registers used:
  3214 ;;		wreg, status,2, cstack
  3215 ;; Tracked objects:
  3216 ;;		On entry : 0/0
  3217 ;;		On exit  : 0/0
  3218 ;;		Unchanged: 0/0
  3219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3220 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3221 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3222 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3223 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3224 ;;Total ram usage:        0 bytes
  3225 ;; Hardware stack levels used:    1
  3226 ;; Hardware stack levels required when called:    4
  3227 ;; This function calls:
  3228 ;;		_OpenUSART
  3229 ;; This function is called by:
  3230 ;;		_main
  3231 ;; This function uses a non-reentrant model
  3232 ;;
  3233                           
  3234                           	psect	text6
  3235  0016C4                     __ptext6:
  3236                           	opt stack 0
  3237  0016C4                     _init_UART:
  3238                           	opt stack 26
  3239                           
  3240                           ;Lab9pA.c: 87: OpenUSART (0b01111111 & 0b10111111 &
  3241                           ;Lab9pA.c: 88: 0b11111110 & 0b11111101 & 0b11111111 &
  3242                           ;Lab9pA.c: 89: 0b11111111, 25);
  3243                           
  3244                           ;incstack = 0
  3245  0016C4  0E00               	movlw	0
  3246  0016C6  6E12               	movwf	OpenUSART@spbrg+1,c
  3247  0016C8  0E19               	movlw	25
  3248  0016CA  6E11               	movwf	OpenUSART@spbrg,c
  3249  0016CC  0E3C               	movlw	60
  3250  0016CE  EC9D  F009         	call	_OpenUSART
  3251                           
  3252                           ;Lab9pA.c: 90: OSCCON = 0x60;
  3253  0016D2  0E60               	movlw	96
  3254  0016D4  6ED3               	movwf	4051,c	;volatile
  3255  0016D6  0012               	return		;funcret
  3256  0016D8                     __end_of_init_UART:
  3257                           	opt stack 0
  3258                           tblptru	equ	0xFF8
  3259                           tblptrh	equ	0xFF7
  3260                           tblptrl	equ	0xFF6
  3261                           tablat	equ	0xFF5
  3262                           prodh	equ	0xFF4
  3263                           prodl	equ	0xFF3
  3264                           intcon	equ	0xFF2
  3265                           intcon2	equ	0xFF1
  3266                           postinc0	equ	0xFEE
  3267                           wreg	equ	0xFE8
  3268                           postdec1	equ	0xFE5
  3269                           fsr1l	equ	0xFE1
  3270                           indf2	equ	0xFDF
  3271                           postinc2	equ	0xFDE
  3272                           postdec2	equ	0xFDD
  3273                           fsr2h	equ	0xFDA
  3274                           fsr2l	equ	0xFD9
  3275                           status	equ	0xFD8
  3276                           
  3277 ;; *************** function _OpenUSART *****************
  3278 ;; Defined at:
  3279 ;;		line 73 in file "E:\XC8\sources\pic18\plib\USART\uopen.c"
  3280 ;; Parameters:    Size  Location     Type
  3281 ;;  config          1    wreg     unsigned char 
  3282 ;;  spbrg           2   16[COMRAM] unsigned int 
  3283 ;; Auto vars:     Size  Location     Type
  3284 ;;  config          1   18[COMRAM] unsigned char 
  3285 ;; Return value:  Size  Location     Type
  3286 ;;		None               void
  3287 ;; Registers used:
  3288 ;;		wreg, status,2
  3289 ;; Tracked objects:
  3290 ;;		On entry : 0/0
  3291 ;;		On exit  : 0/0
  3292 ;;		Unchanged: 0/0
  3293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3294 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3295 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3296 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3297 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3298 ;;Total ram usage:        3 bytes
  3299 ;; Hardware stack levels used:    1
  3300 ;; Hardware stack levels required when called:    3
  3301 ;; This function calls:
  3302 ;;		Nothing
  3303 ;; This function is called by:
  3304 ;;		_init_UART
  3305 ;; This function uses a non-reentrant model
  3306 ;;
  3307                           
  3308                           	psect	text7
  3309  00133A                     __ptext7:
  3310                           	opt stack 0
  3311  00133A                     _OpenUSART:
  3312                           	opt stack 26
  3313                           
  3314                           ;incstack = 0
  3315                           ;OpenUSART@config stored from wreg
  3316  00133A  6E13               	movwf	OpenUSART@config,c
  3317  00133C  0E00               	movlw	0
  3318  00133E  6EAC               	movwf	4012,c	;volatile
  3319  001340  0E00               	movlw	0
  3320  001342  6EAB               	movwf	4011,c	;volatile
  3321  001344  A013               	btfss	OpenUSART@config,0,c
  3322  001346  D002               	goto	l2632
  3323  001348  88AC               	bsf	4012,4,c	;volatile
  3324  00134A  D000               	goto	l2632
  3325  00134C                     l2632:
  3326  00134C  A213               	btfss	OpenUSART@config,1,c
  3327  00134E  D003               	goto	l2636
  3328  001350  8CAC               	bsf	4012,6,c	;volatile
  3329  001352  8CAB               	bsf	4011,6,c	;volatile
  3330  001354  D000               	goto	l2636
  3331  001356                     l2636:
  3332  001356  A413               	btfss	OpenUSART@config,2,c
  3333  001358  D002               	goto	l2640
  3334  00135A  8EAC               	bsf	4012,7,c	;volatile
  3335  00135C  D000               	goto	l2640
  3336  00135E                     l2640:
  3337  00135E  A613               	btfss	OpenUSART@config,3,c
  3338  001360  D002               	goto	l470
  3339  001362  88AB               	bsf	4011,4,c	;volatile
  3340  001364  D002               	goto	l2644
  3341  001366                     l470:
  3342  001366  8AAB               	bsf	4011,5,c	;volatile
  3343  001368  D000               	goto	l2644
  3344  00136A                     l2644:
  3345  00136A  B813               	btfsc	OpenUSART@config,4,c
  3346  00136C  84AC               	bsf	4012,2,c	;volatile
  3347  00136E  989E               	bcf	3998,4,c	;volatile
  3348  001370  AA13               	btfss	OpenUSART@config,5,c
  3349  001372  D002               	goto	l2652
  3350  001374  86AB               	bsf	4011,3,c	;volatile
  3351  001376  D000               	goto	l2652
  3352  001378                     l2652:
  3353  001378  AC13               	btfss	OpenUSART@config,6,c
  3354  00137A  D002               	goto	l474
  3355  00137C  8A9D               	bsf	3997,5,c	;volatile
  3356  00137E  D001               	goto	l475
  3357  001380                     l474:
  3358  001380  9A9D               	bcf	3997,5,c	;volatile
  3359  001382                     l475:
  3360  001382  9A9E               	bcf	3998,5,c	;volatile
  3361  001384  AE13               	btfss	OpenUSART@config,7,c
  3362  001386  D002               	goto	l476
  3363  001388  889D               	bsf	3997,4,c	;volatile
  3364  00138A  D001               	goto	l477
  3365  00138C                     l476:
  3366  00138C  989D               	bcf	3997,4,c	;volatile
  3367  00138E                     l477:
  3368  00138E  C011  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  3369  001392  5012               	movf	OpenUSART@spbrg+1,w,c
  3370  001394  6EB0               	movwf	4016,c	;volatile
  3371  001396  8AAC               	bsf	4012,5,c	;volatile
  3372  001398  8EAB               	bsf	4011,7,c	;volatile
  3373  00139A  9C94               	bcf	3988,6,c	;volatile
  3374  00139C  8E94               	bsf	3988,7,c	;volatile
  3375  00139E  B8AC               	btfsc	4012,4,c	;volatile
  3376  0013A0  BEAC               	btfsc	4012,7,c	;volatile
  3377  0013A2  D002               	goto	l479
  3378  0013A4  8C94               	bsf	3988,6,c	;volatile
  3379  0013A6  D000               	goto	l479
  3380  0013A8                     l479:
  3381  0013A8  0012               	return		;funcret
  3382  0013AA                     __end_of_OpenUSART:
  3383                           	opt stack 0
  3384                           tblptru	equ	0xFF8
  3385                           tblptrh	equ	0xFF7
  3386                           tblptrl	equ	0xFF6
  3387                           tablat	equ	0xFF5
  3388                           prodh	equ	0xFF4
  3389                           prodl	equ	0xFF3
  3390                           intcon	equ	0xFF2
  3391                           intcon2	equ	0xFF1
  3392                           postinc0	equ	0xFEE
  3393                           wreg	equ	0xFE8
  3394                           postdec1	equ	0xFE5
  3395                           fsr1l	equ	0xFE1
  3396                           indf2	equ	0xFDF
  3397                           postinc2	equ	0xFDE
  3398                           postdec2	equ	0xFDD
  3399                           fsr2h	equ	0xFDA
  3400                           fsr2l	equ	0xFD9
  3401                           status	equ	0xFD8
  3402                           
  3403 ;; *************** function _fillCircle *****************
  3404 ;; Defined at:
  3405 ;;		line 647 in file "ST7735_TFT.c"
  3406 ;; Parameters:    Size  Location     Type
  3407 ;;  x0              2   58[COMRAM] int 
  3408 ;;  y0              2   60[COMRAM] int 
  3409 ;;  r               2   62[COMRAM] int 
  3410 ;;  color           2   64[COMRAM] unsigned int 
  3411 ;; Auto vars:     Size  Location     Type
  3412 ;;		None
  3413 ;; Return value:  Size  Location     Type
  3414 ;;		None               void
  3415 ;; Registers used:
  3416 ;;		wreg, status,2, status,0, cstack
  3417 ;; Tracked objects:
  3418 ;;		On entry : 0/0
  3419 ;;		On exit  : 0/0
  3420 ;;		Unchanged: 0/0
  3421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3422 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3423 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3424 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3425 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3426 ;;Total ram usage:        8 bytes
  3427 ;; Hardware stack levels used:    1
  3428 ;; Hardware stack levels required when called:    8
  3429 ;; This function calls:
  3430 ;;		_drawFastVLine
  3431 ;;		_fillCircleHelper
  3432 ;; This function is called by:
  3433 ;;		_main
  3434 ;; This function uses a non-reentrant model
  3435 ;;
  3436                           
  3437                           	psect	text8
  3438  0013AA                     __ptext8:
  3439                           	opt stack 0
  3440  0013AA                     _fillCircle:
  3441                           	opt stack 22
  3442                           
  3443                           ;ST7735_TFT.c: 649: drawFastVLine(x0, y0 - r, 2 * r + 1, color);
  3444                           
  3445                           ;incstack = 0
  3446  0013AA  503F               	movf	fillCircle@r,w,c
  3447  0013AC  0800               	sublw	0
  3448  0013AE  243D               	addwf	fillCircle@y0,w,c
  3449  0013B0  6E18               	movwf	drawFastVLine@y,c
  3450  0013B2  80D8               	bsf	status,0,c
  3451  0013B4  343F               	rlcf	fillCircle@r,w,c
  3452  0013B6  6E19               	movwf	drawFastVLine@h,c
  3453  0013B8  C041  F01A         	movff	fillCircle@color,drawFastVLine@color
  3454  0013BC  C042  F01B         	movff	fillCircle@color+1,drawFastVLine@color+1
  3455  0013C0  503B               	movf	fillCircle@x0,w,c
  3456  0013C2  EC63  F008         	call	_drawFastVLine
  3457                           
  3458                           ;ST7735_TFT.c: 650: fillCircleHelper(x0, y0, r, 3, 0, color);
  3459  0013C6  C03B  F023         	movff	fillCircle@x0,fillCircleHelper@x0
  3460  0013CA  C03C  F024         	movff	fillCircle@x0+1,fillCircleHelper@x0+1
  3461  0013CE  C03D  F025         	movff	fillCircle@y0,fillCircleHelper@y0
  3462  0013D2  C03E  F026         	movff	fillCircle@y0+1,fillCircleHelper@y0+1
  3463  0013D6  C03F  F027         	movff	fillCircle@r,fillCircleHelper@r
  3464  0013DA  C040  F028         	movff	fillCircle@r+1,fillCircleHelper@r+1
  3465  0013DE  0E00               	movlw	0
  3466  0013E0  6E2A               	movwf	fillCircleHelper@cornername+1,c
  3467  0013E2  0E03               	movlw	3
  3468  0013E4  6E29               	movwf	fillCircleHelper@cornername,c
  3469  0013E6  0E00               	movlw	0
  3470  0013E8  6E2C               	movwf	fillCircleHelper@delta+1,c
  3471  0013EA  0E00               	movlw	0
  3472  0013EC  6E2B               	movwf	fillCircleHelper@delta,c
  3473  0013EE  C041  F02D         	movff	fillCircle@color,fillCircleHelper@color
  3474  0013F2  C042  F02E         	movff	fillCircle@color+1,fillCircleHelper@color+1
  3475  0013F6  EC46  F005         	call	_fillCircleHelper	;wreg free
  3476  0013FA  0012               	return		;funcret
  3477  0013FC                     __end_of_fillCircle:
  3478                           	opt stack 0
  3479                           tblptru	equ	0xFF8
  3480                           tblptrh	equ	0xFF7
  3481                           tblptrl	equ	0xFF6
  3482                           tablat	equ	0xFF5
  3483                           prodh	equ	0xFF4
  3484                           prodl	equ	0xFF3
  3485                           intcon	equ	0xFF2
  3486                           intcon2	equ	0xFF1
  3487                           postinc0	equ	0xFEE
  3488                           wreg	equ	0xFE8
  3489                           postdec1	equ	0xFE5
  3490                           fsr1l	equ	0xFE1
  3491                           indf2	equ	0xFDF
  3492                           postinc2	equ	0xFDE
  3493                           postdec2	equ	0xFDD
  3494                           fsr2h	equ	0xFDA
  3495                           fsr2l	equ	0xFD9
  3496                           status	equ	0xFD8
  3497                           
  3498 ;; *************** function _fillCircleHelper *****************
  3499 ;; Defined at:
  3500 ;;		line 622 in file "ST7735_TFT.c"
  3501 ;; Parameters:    Size  Location     Type
  3502 ;;  x0              2   34[COMRAM] int 
  3503 ;;  y0              2   36[COMRAM] int 
  3504 ;;  r               2   38[COMRAM] int 
  3505 ;;  cornername      2   40[COMRAM] unsigned int 
  3506 ;;  delta           2   42[COMRAM] int 
  3507 ;;  color           2   44[COMRAM] unsigned int 
  3508 ;; Auto vars:     Size  Location     Type
  3509 ;;  y               2   56[COMRAM] int 
  3510 ;;  x               2   54[COMRAM] int 
  3511 ;;  f               2   52[COMRAM] int 
  3512 ;;  ddF_y           2   50[COMRAM] int 
  3513 ;;  ddF_x           2   48[COMRAM] int 
  3514 ;; Return value:  Size  Location     Type
  3515 ;;		None               void
  3516 ;; Registers used:
  3517 ;;		wreg, status,2, status,0, cstack
  3518 ;; Tracked objects:
  3519 ;;		On entry : 0/0
  3520 ;;		On exit  : 0/0
  3521 ;;		Unchanged: 0/0
  3522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3523 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3524 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3525 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3526 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3527 ;;Total ram usage:       24 bytes
  3528 ;; Hardware stack levels used:    1
  3529 ;; Hardware stack levels required when called:    7
  3530 ;; This function calls:
  3531 ;;		_drawFastVLine
  3532 ;; This function is called by:
  3533 ;;		_fillCircle
  3534 ;; This function uses a non-reentrant model
  3535 ;;
  3536                           
  3537                           	psect	text9
  3538  000A8C                     __ptext9:
  3539                           	opt stack 0
  3540  000A8C                     _fillCircleHelper:
  3541                           	opt stack 22
  3542                           
  3543                           ;ST7735_TFT.c: 624: signed int f, ddF_x, ddF_y, x, y;
  3544                           ;ST7735_TFT.c: 625: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  3545                           
  3546                           ;incstack = 0
  3547  000A8C  C027  F02F         	movff	fillCircleHelper@r,??_fillCircleHelper
  3548  000A90  C028  F030         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  3549  000A94  1E2F               	comf	??_fillCircleHelper,f,c
  3550  000A96  1E30               	comf	??_fillCircleHelper+1,f,c
  3551  000A98  4A2F               	infsnz	??_fillCircleHelper,f,c
  3552  000A9A  2A30               	incf	??_fillCircleHelper+1,f,c
  3553  000A9C  0E01               	movlw	1
  3554  000A9E  242F               	addwf	??_fillCircleHelper,w,c
  3555  000AA0  6E35               	movwf	fillCircleHelper@f,c
  3556  000AA2  0E00               	movlw	0
  3557  000AA4  2030               	addwfc	??_fillCircleHelper+1,w,c
  3558  000AA6  6E36               	movwf	fillCircleHelper@f+1,c
  3559  000AA8  0E00               	movlw	0
  3560  000AAA  6E32               	movwf	fillCircleHelper@ddF_x+1,c
  3561  000AAC  0E01               	movlw	1
  3562  000AAE  6E31               	movwf	fillCircleHelper@ddF_x,c
  3563  000AB0  C027  F02F         	movff	fillCircleHelper@r,??_fillCircleHelper
  3564  000AB4  C028  F030         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  3565  000AB8  90D8               	bcf	status,0,c
  3566  000ABA  362F               	rlcf	??_fillCircleHelper,f,c
  3567  000ABC  3630               	rlcf	??_fillCircleHelper+1,f,c
  3568  000ABE  1E2F               	comf	??_fillCircleHelper,f,c
  3569  000AC0  1E30               	comf	??_fillCircleHelper+1,f,c
  3570  000AC2  4A2F               	infsnz	??_fillCircleHelper,f,c
  3571  000AC4  2A30               	incf	??_fillCircleHelper+1,f,c
  3572  000AC6  C02F  F033         	movff	??_fillCircleHelper,fillCircleHelper@ddF_y
  3573  000ACA  C030  F034         	movff	??_fillCircleHelper+1,fillCircleHelper@ddF_y+1
  3574  000ACE  0E00               	movlw	0
  3575  000AD0  6E38               	movwf	fillCircleHelper@x+1,c
  3576  000AD2  0E00               	movlw	0
  3577  000AD4  6E37               	movwf	fillCircleHelper@x,c
  3578  000AD6  C027  F039         	movff	fillCircleHelper@r,fillCircleHelper@y
  3579  000ADA  C028  F03A         	movff	fillCircleHelper@r+1,fillCircleHelper@y+1
  3580                           
  3581                           ;ST7735_TFT.c: 626: while (x<y) {
  3582  000ADE  D067               	goto	l3668
  3583  000AE0                     l3648:
  3584                           
  3585                           ;ST7735_TFT.c: 627: if (f >= 0) {
  3586  000AE0  BE36               	btfsc	fillCircleHelper@f+1,7,c
  3587  000AE2  D00B               	goto	l243
  3588                           
  3589                           ;ST7735_TFT.c: 628: y--;
  3590  000AE4  0639               	decf	fillCircleHelper@y,f,c
  3591  000AE6  A0D8               	btfss	status,0,c
  3592  000AE8  063A               	decf	fillCircleHelper@y+1,f,c
  3593                           
  3594                           ;ST7735_TFT.c: 629: ddF_y += 2;
  3595  000AEA  0E02               	movlw	2
  3596  000AEC  2633               	addwf	fillCircleHelper@ddF_y,f,c
  3597  000AEE  0E00               	movlw	0
  3598  000AF0  2234               	addwfc	fillCircleHelper@ddF_y+1,f,c
  3599                           
  3600                           ;ST7735_TFT.c: 630: f += ddF_y;
  3601  000AF2  5033               	movf	fillCircleHelper@ddF_y,w,c
  3602  000AF4  2635               	addwf	fillCircleHelper@f,f,c
  3603  000AF6  5034               	movf	fillCircleHelper@ddF_y+1,w,c
  3604  000AF8  2236               	addwfc	fillCircleHelper@f+1,f,c
  3605  000AFA                     l243:
  3606                           
  3607                           ;ST7735_TFT.c: 631: }
  3608                           ;ST7735_TFT.c: 632: x++;
  3609  000AFA  4A37               	infsnz	fillCircleHelper@x,f,c
  3610  000AFC  2A38               	incf	fillCircleHelper@x+1,f,c
  3611                           
  3612                           ;ST7735_TFT.c: 633: ddF_x += 2;
  3613  000AFE  0E02               	movlw	2
  3614  000B00  2631               	addwf	fillCircleHelper@ddF_x,f,c
  3615  000B02  0E00               	movlw	0
  3616  000B04  2232               	addwfc	fillCircleHelper@ddF_x+1,f,c
  3617                           
  3618                           ;ST7735_TFT.c: 634: f += ddF_x;
  3619  000B06  5031               	movf	fillCircleHelper@ddF_x,w,c
  3620  000B08  2635               	addwf	fillCircleHelper@f,f,c
  3621  000B0A  5032               	movf	fillCircleHelper@ddF_x+1,w,c
  3622  000B0C  2236               	addwfc	fillCircleHelper@f+1,f,c
  3623                           
  3624                           ;ST7735_TFT.c: 636: if (cornername & 0x1) {
  3625  000B0E  A029               	btfss	fillCircleHelper@cornername,0,c
  3626  000B10  D025               	goto	l3664
  3627                           
  3628                           ;ST7735_TFT.c: 637: drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
  3629  000B12  5039               	movf	fillCircleHelper@y,w,c
  3630  000B14  0800               	sublw	0
  3631  000B16  2425               	addwf	fillCircleHelper@y0,w,c
  3632  000B18  6E18               	movwf	drawFastVLine@y,c
  3633  000B1A  5039               	movf	fillCircleHelper@y,w,c
  3634  000B1C  2439               	addwf	fillCircleHelper@y,w,c
  3635  000B1E  242B               	addwf	fillCircleHelper@delta,w,c
  3636  000B20  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3637  000B22  282F               	incf	??_fillCircleHelper,w,c
  3638  000B24  6E19               	movwf	drawFastVLine@h,c
  3639  000B26  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3640  000B2A  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3641  000B2E  5023               	movf	fillCircleHelper@x0,w,c
  3642  000B30  2437               	addwf	fillCircleHelper@x,w,c
  3643  000B32  EC63  F008         	call	_drawFastVLine
  3644                           
  3645                           ;ST7735_TFT.c: 638: drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
  3646  000B36  5037               	movf	fillCircleHelper@x,w,c
  3647  000B38  0800               	sublw	0
  3648  000B3A  2425               	addwf	fillCircleHelper@y0,w,c
  3649  000B3C  6E18               	movwf	drawFastVLine@y,c
  3650  000B3E  5037               	movf	fillCircleHelper@x,w,c
  3651  000B40  2437               	addwf	fillCircleHelper@x,w,c
  3652  000B42  242B               	addwf	fillCircleHelper@delta,w,c
  3653  000B44  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3654  000B46  282F               	incf	??_fillCircleHelper,w,c
  3655  000B48  6E19               	movwf	drawFastVLine@h,c
  3656  000B4A  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3657  000B4E  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3658  000B52  5023               	movf	fillCircleHelper@x0,w,c
  3659  000B54  2439               	addwf	fillCircleHelper@y,w,c
  3660  000B56  EC63  F008         	call	_drawFastVLine
  3661  000B5A  D000               	goto	l3664
  3662  000B5C                     l3664:
  3663                           
  3664                           ;ST7735_TFT.c: 639: }
  3665                           ;ST7735_TFT.c: 640: if (cornername & 0x2) {
  3666  000B5C  A229               	btfss	fillCircleHelper@cornername,1,c
  3667  000B5E  D027               	goto	l3668
  3668                           
  3669                           ;ST7735_TFT.c: 641: drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
  3670  000B60  5039               	movf	fillCircleHelper@y,w,c
  3671  000B62  0800               	sublw	0
  3672  000B64  2425               	addwf	fillCircleHelper@y0,w,c
  3673  000B66  6E18               	movwf	drawFastVLine@y,c
  3674  000B68  5039               	movf	fillCircleHelper@y,w,c
  3675  000B6A  2439               	addwf	fillCircleHelper@y,w,c
  3676  000B6C  242B               	addwf	fillCircleHelper@delta,w,c
  3677  000B6E  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3678  000B70  282F               	incf	??_fillCircleHelper,w,c
  3679  000B72  6E19               	movwf	drawFastVLine@h,c
  3680  000B74  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3681  000B78  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3682  000B7C  5037               	movf	fillCircleHelper@x,w,c
  3683  000B7E  0800               	sublw	0
  3684  000B80  2423               	addwf	fillCircleHelper@x0,w,c
  3685  000B82  EC63  F008         	call	_drawFastVLine
  3686                           
  3687                           ;ST7735_TFT.c: 642: drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
  3688  000B86  5037               	movf	fillCircleHelper@x,w,c
  3689  000B88  0800               	sublw	0
  3690  000B8A  2425               	addwf	fillCircleHelper@y0,w,c
  3691  000B8C  6E18               	movwf	drawFastVLine@y,c
  3692  000B8E  5037               	movf	fillCircleHelper@x,w,c
  3693  000B90  2437               	addwf	fillCircleHelper@x,w,c
  3694  000B92  242B               	addwf	fillCircleHelper@delta,w,c
  3695  000B94  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3696  000B96  282F               	incf	??_fillCircleHelper,w,c
  3697  000B98  6E19               	movwf	drawFastVLine@h,c
  3698  000B9A  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3699  000B9E  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3700  000BA2  5039               	movf	fillCircleHelper@y,w,c
  3701  000BA4  0800               	sublw	0
  3702  000BA6  2423               	addwf	fillCircleHelper@x0,w,c
  3703  000BA8  EC63  F008         	call	_drawFastVLine
  3704  000BAC  D000               	goto	l3668
  3705  000BAE                     l3668:
  3706  000BAE  5039               	movf	fillCircleHelper@y,w,c
  3707  000BB0  5C37               	subwf	fillCircleHelper@x,w,c
  3708  000BB2  5038               	movf	fillCircleHelper@x+1,w,c
  3709  000BB4  0A80               	xorlw	128
  3710  000BB6  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3711  000BB8  503A               	movf	fillCircleHelper@y+1,w,c
  3712  000BBA  0A80               	xorlw	128
  3713  000BBC  582F               	subwfb	??_fillCircleHelper& (0+255),w,c
  3714  000BBE  A0D8               	btfss	status,0,c
  3715  000BC0  D78F               	goto	l3648
  3716  000BC2  0012               	return		;funcret
  3717  000BC4                     __end_of_fillCircleHelper:
  3718                           	opt stack 0
  3719                           tblptru	equ	0xFF8
  3720                           tblptrh	equ	0xFF7
  3721                           tblptrl	equ	0xFF6
  3722                           tablat	equ	0xFF5
  3723                           prodh	equ	0xFF4
  3724                           prodl	equ	0xFF3
  3725                           intcon	equ	0xFF2
  3726                           intcon2	equ	0xFF1
  3727                           postinc0	equ	0xFEE
  3728                           wreg	equ	0xFE8
  3729                           postdec1	equ	0xFE5
  3730                           fsr1l	equ	0xFE1
  3731                           indf2	equ	0xFDF
  3732                           postinc2	equ	0xFDE
  3733                           postdec2	equ	0xFDD
  3734                           fsr2h	equ	0xFDA
  3735                           fsr2l	equ	0xFD9
  3736                           status	equ	0xFD8
  3737                           
  3738 ;; *************** function _drawCircle *****************
  3739 ;; Defined at:
  3740 ;;		line 561 in file "ST7735_TFT.c"
  3741 ;; Parameters:    Size  Location     Type
  3742 ;;  x0              2   27[COMRAM] int 
  3743 ;;  y0              2   29[COMRAM] int 
  3744 ;;  r               2   31[COMRAM] int 
  3745 ;;  color           2   33[COMRAM] unsigned int 
  3746 ;; Auto vars:     Size  Location     Type
  3747 ;;  y               2   45[COMRAM] int 
  3748 ;;  x               2   43[COMRAM] int 
  3749 ;;  f               2   41[COMRAM] int 
  3750 ;;  ddF_y           2   39[COMRAM] int 
  3751 ;;  ddF_x           2   37[COMRAM] int 
  3752 ;; Return value:  Size  Location     Type
  3753 ;;		None               void
  3754 ;; Registers used:
  3755 ;;		wreg, status,2, status,0, cstack
  3756 ;; Tracked objects:
  3757 ;;		On entry : 0/0
  3758 ;;		On exit  : 0/0
  3759 ;;		Unchanged: 0/0
  3760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3761 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3762 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3763 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3764 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3765 ;;Total ram usage:       20 bytes
  3766 ;; Hardware stack levels used:    1
  3767 ;; Hardware stack levels required when called:    7
  3768 ;; This function calls:
  3769 ;;		_drawPixel
  3770 ;; This function is called by:
  3771 ;;		_main
  3772 ;; This function uses a non-reentrant model
  3773 ;;
  3774                           
  3775                           	psect	text10
  3776  00063A                     __ptext10:
  3777                           	opt stack 0
  3778  00063A                     _drawCircle:
  3779                           	opt stack 23
  3780                           
  3781                           ;ST7735_TFT.c: 563: signed int f, ddF_x, ddF_y, x, y;
  3782                           ;ST7735_TFT.c: 564: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  3783                           
  3784                           ;incstack = 0
  3785  00063A  C020  F024         	movff	drawCircle@r,??_drawCircle
  3786  00063E  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
  3787  000642  1E24               	comf	??_drawCircle,f,c
  3788  000644  1E25               	comf	??_drawCircle+1,f,c
  3789  000646  4A24               	infsnz	??_drawCircle,f,c
  3790  000648  2A25               	incf	??_drawCircle+1,f,c
  3791  00064A  0E01               	movlw	1
  3792  00064C  2424               	addwf	??_drawCircle,w,c
  3793  00064E  6E2A               	movwf	drawCircle@f,c
  3794  000650  0E00               	movlw	0
  3795  000652  2025               	addwfc	??_drawCircle+1,w,c
  3796  000654  6E2B               	movwf	drawCircle@f+1,c
  3797  000656  0E00               	movlw	0
  3798  000658  6E27               	movwf	drawCircle@ddF_x+1,c
  3799  00065A  0E01               	movlw	1
  3800  00065C  6E26               	movwf	drawCircle@ddF_x,c
  3801  00065E  C020  F024         	movff	drawCircle@r,??_drawCircle
  3802  000662  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
  3803  000666  90D8               	bcf	status,0,c
  3804  000668  3624               	rlcf	??_drawCircle,f,c
  3805  00066A  3625               	rlcf	??_drawCircle+1,f,c
  3806  00066C  1E24               	comf	??_drawCircle,f,c
  3807  00066E  1E25               	comf	??_drawCircle+1,f,c
  3808  000670  4A24               	infsnz	??_drawCircle,f,c
  3809  000672  2A25               	incf	??_drawCircle+1,f,c
  3810  000674  C024  F028         	movff	??_drawCircle,drawCircle@ddF_y
  3811  000678  C025  F029         	movff	??_drawCircle+1,drawCircle@ddF_y+1
  3812  00067C  0E00               	movlw	0
  3813  00067E  6E2D               	movwf	drawCircle@x+1,c
  3814  000680  0E00               	movlw	0
  3815  000682  6E2C               	movwf	drawCircle@x,c
  3816  000684  C020  F02E         	movff	drawCircle@r,drawCircle@y
  3817  000688  C021  F02F         	movff	drawCircle@r+1,drawCircle@y+1
  3818                           
  3819                           ;ST7735_TFT.c: 565: drawPixel(x0 , y0 + r, color);
  3820  00068C  501E               	movf	drawCircle@y0,w,c
  3821  00068E  2420               	addwf	drawCircle@r,w,c
  3822  000690  6E18               	movwf	drawPixel@y,c
  3823  000692  C022  F019         	movff	drawCircle@color,drawPixel@color
  3824  000696  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3825  00069A  501C               	movf	drawCircle@x0,w,c
  3826  00069C  ECEA  F00A         	call	_drawPixel
  3827                           
  3828                           ;ST7735_TFT.c: 566: drawPixel(x0 , y0 - r, color);
  3829  0006A0  5020               	movf	drawCircle@r,w,c
  3830  0006A2  0800               	sublw	0
  3831  0006A4  241E               	addwf	drawCircle@y0,w,c
  3832  0006A6  6E18               	movwf	drawPixel@y,c
  3833  0006A8  C022  F019         	movff	drawCircle@color,drawPixel@color
  3834  0006AC  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3835  0006B0  501C               	movf	drawCircle@x0,w,c
  3836  0006B2  ECEA  F00A         	call	_drawPixel
  3837                           
  3838                           ;ST7735_TFT.c: 567: drawPixel(x0+r, y0 , color);
  3839  0006B6  C01E  F018         	movff	drawCircle@y0,drawPixel@y
  3840  0006BA  C022  F019         	movff	drawCircle@color,drawPixel@color
  3841  0006BE  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3842  0006C2  501C               	movf	drawCircle@x0,w,c
  3843  0006C4  2420               	addwf	drawCircle@r,w,c
  3844  0006C6  ECEA  F00A         	call	_drawPixel
  3845                           
  3846                           ;ST7735_TFT.c: 568: drawPixel(x0-r, y0 , color);
  3847  0006CA  C01E  F018         	movff	drawCircle@y0,drawPixel@y
  3848  0006CE  C022  F019         	movff	drawCircle@color,drawPixel@color
  3849  0006D2  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3850  0006D6  5020               	movf	drawCircle@r,w,c
  3851  0006D8  0800               	sublw	0
  3852  0006DA  241C               	addwf	drawCircle@x0,w,c
  3853  0006DC  ECEA  F00A         	call	_drawPixel
  3854                           
  3855                           ;ST7735_TFT.c: 569: while (x < y) {
  3856  0006E0  D078               	goto	l3736
  3857  0006E2                     l3708:
  3858                           
  3859                           ;ST7735_TFT.c: 570: if (f >= 0) {
  3860  0006E2  BE2B               	btfsc	drawCircle@f+1,7,c
  3861  0006E4  D00B               	goto	l225
  3862                           
  3863                           ;ST7735_TFT.c: 571: y--;
  3864  0006E6  062E               	decf	drawCircle@y,f,c
  3865  0006E8  A0D8               	btfss	status,0,c
  3866  0006EA  062F               	decf	drawCircle@y+1,f,c
  3867                           
  3868                           ;ST7735_TFT.c: 572: ddF_y += 2;
  3869  0006EC  0E02               	movlw	2
  3870  0006EE  2628               	addwf	drawCircle@ddF_y,f,c
  3871  0006F0  0E00               	movlw	0
  3872  0006F2  2229               	addwfc	drawCircle@ddF_y+1,f,c
  3873                           
  3874                           ;ST7735_TFT.c: 573: f += ddF_y;
  3875  0006F4  5028               	movf	drawCircle@ddF_y,w,c
  3876  0006F6  262A               	addwf	drawCircle@f,f,c
  3877  0006F8  5029               	movf	drawCircle@ddF_y+1,w,c
  3878  0006FA  222B               	addwfc	drawCircle@f+1,f,c
  3879  0006FC                     l225:
  3880                           
  3881                           ;ST7735_TFT.c: 574: }
  3882                           ;ST7735_TFT.c: 575: x++;
  3883  0006FC  4A2C               	infsnz	drawCircle@x,f,c
  3884  0006FE  2A2D               	incf	drawCircle@x+1,f,c
  3885                           
  3886                           ;ST7735_TFT.c: 576: ddF_x += 2;
  3887  000700  0E02               	movlw	2
  3888  000702  2626               	addwf	drawCircle@ddF_x,f,c
  3889  000704  0E00               	movlw	0
  3890  000706  2227               	addwfc	drawCircle@ddF_x+1,f,c
  3891                           
  3892                           ;ST7735_TFT.c: 577: f += ddF_x;
  3893  000708  5026               	movf	drawCircle@ddF_x,w,c
  3894  00070A  262A               	addwf	drawCircle@f,f,c
  3895  00070C  5027               	movf	drawCircle@ddF_x+1,w,c
  3896  00070E  222B               	addwfc	drawCircle@f+1,f,c
  3897                           
  3898                           ;ST7735_TFT.c: 578: drawPixel(x0 + x, y0 + y, color);
  3899  000710  501E               	movf	drawCircle@y0,w,c
  3900  000712  242E               	addwf	drawCircle@y,w,c
  3901  000714  6E18               	movwf	drawPixel@y,c
  3902  000716  C022  F019         	movff	drawCircle@color,drawPixel@color
  3903  00071A  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3904  00071E  501C               	movf	drawCircle@x0,w,c
  3905  000720  242C               	addwf	drawCircle@x,w,c
  3906  000722  ECEA  F00A         	call	_drawPixel
  3907                           
  3908                           ;ST7735_TFT.c: 579: drawPixel(x0 - x, y0 + y, color);
  3909  000726  501E               	movf	drawCircle@y0,w,c
  3910  000728  242E               	addwf	drawCircle@y,w,c
  3911  00072A  6E18               	movwf	drawPixel@y,c
  3912  00072C  C022  F019         	movff	drawCircle@color,drawPixel@color
  3913  000730  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3914  000734  502C               	movf	drawCircle@x,w,c
  3915  000736  0800               	sublw	0
  3916  000738  241C               	addwf	drawCircle@x0,w,c
  3917  00073A  ECEA  F00A         	call	_drawPixel
  3918                           
  3919                           ;ST7735_TFT.c: 580: drawPixel(x0 + x, y0 - y, color);
  3920  00073E  502E               	movf	drawCircle@y,w,c
  3921  000740  0800               	sublw	0
  3922  000742  241E               	addwf	drawCircle@y0,w,c
  3923  000744  6E18               	movwf	drawPixel@y,c
  3924  000746  C022  F019         	movff	drawCircle@color,drawPixel@color
  3925  00074A  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3926  00074E  501C               	movf	drawCircle@x0,w,c
  3927  000750  242C               	addwf	drawCircle@x,w,c
  3928  000752  ECEA  F00A         	call	_drawPixel
  3929                           
  3930                           ;ST7735_TFT.c: 581: drawPixel(x0 - x, y0 - y, color);
  3931  000756  502E               	movf	drawCircle@y,w,c
  3932  000758  0800               	sublw	0
  3933  00075A  241E               	addwf	drawCircle@y0,w,c
  3934  00075C  6E18               	movwf	drawPixel@y,c
  3935  00075E  C022  F019         	movff	drawCircle@color,drawPixel@color
  3936  000762  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3937  000766  502C               	movf	drawCircle@x,w,c
  3938  000768  0800               	sublw	0
  3939  00076A  241C               	addwf	drawCircle@x0,w,c
  3940  00076C  ECEA  F00A         	call	_drawPixel
  3941                           
  3942                           ;ST7735_TFT.c: 582: drawPixel(x0 + y, y0 + x, color);
  3943  000770  501E               	movf	drawCircle@y0,w,c
  3944  000772  242C               	addwf	drawCircle@x,w,c
  3945  000774  6E18               	movwf	drawPixel@y,c
  3946  000776  C022  F019         	movff	drawCircle@color,drawPixel@color
  3947  00077A  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3948  00077E  501C               	movf	drawCircle@x0,w,c
  3949  000780  242E               	addwf	drawCircle@y,w,c
  3950  000782  ECEA  F00A         	call	_drawPixel
  3951                           
  3952                           ;ST7735_TFT.c: 583: drawPixel(x0 - y, y0 + x, color);
  3953  000786  501E               	movf	drawCircle@y0,w,c
  3954  000788  242C               	addwf	drawCircle@x,w,c
  3955  00078A  6E18               	movwf	drawPixel@y,c
  3956  00078C  C022  F019         	movff	drawCircle@color,drawPixel@color
  3957  000790  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3958  000794  502E               	movf	drawCircle@y,w,c
  3959  000796  0800               	sublw	0
  3960  000798  241C               	addwf	drawCircle@x0,w,c
  3961  00079A  ECEA  F00A         	call	_drawPixel
  3962                           
  3963                           ;ST7735_TFT.c: 584: drawPixel(x0 + y, y0 - x, color);
  3964  00079E  502C               	movf	drawCircle@x,w,c
  3965  0007A0  0800               	sublw	0
  3966  0007A2  241E               	addwf	drawCircle@y0,w,c
  3967  0007A4  6E18               	movwf	drawPixel@y,c
  3968  0007A6  C022  F019         	movff	drawCircle@color,drawPixel@color
  3969  0007AA  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3970  0007AE  501C               	movf	drawCircle@x0,w,c
  3971  0007B0  242E               	addwf	drawCircle@y,w,c
  3972  0007B2  ECEA  F00A         	call	_drawPixel
  3973                           
  3974                           ;ST7735_TFT.c: 585: drawPixel(x0 - y, y0 - x, color);
  3975  0007B6  502C               	movf	drawCircle@x,w,c
  3976  0007B8  0800               	sublw	0
  3977  0007BA  241E               	addwf	drawCircle@y0,w,c
  3978  0007BC  6E18               	movwf	drawPixel@y,c
  3979  0007BE  C022  F019         	movff	drawCircle@color,drawPixel@color
  3980  0007C2  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3981  0007C6  502E               	movf	drawCircle@y,w,c
  3982  0007C8  0800               	sublw	0
  3983  0007CA  241C               	addwf	drawCircle@x0,w,c
  3984  0007CC  ECEA  F00A         	call	_drawPixel
  3985  0007D0  D000               	goto	l3736
  3986  0007D2                     l3736:
  3987  0007D2  502E               	movf	drawCircle@y,w,c
  3988  0007D4  5C2C               	subwf	drawCircle@x,w,c
  3989  0007D6  502D               	movf	drawCircle@x+1,w,c
  3990  0007D8  0A80               	xorlw	128
  3991  0007DA  6E24               	movwf	??_drawCircle& (0+255),c
  3992  0007DC  502F               	movf	drawCircle@y+1,w,c
  3993  0007DE  0A80               	xorlw	128
  3994  0007E0  5824               	subwfb	??_drawCircle& (0+255),w,c
  3995  0007E2  A0D8               	btfss	status,0,c
  3996  0007E4  D77E               	goto	l3708
  3997  0007E6  0012               	return		;funcret
  3998  0007E8                     __end_of_drawCircle:
  3999                           	opt stack 0
  4000                           tblptru	equ	0xFF8
  4001                           tblptrh	equ	0xFF7
  4002                           tblptrl	equ	0xFF6
  4003                           tablat	equ	0xFF5
  4004                           prodh	equ	0xFF4
  4005                           prodl	equ	0xFF3
  4006                           intcon	equ	0xFF2
  4007                           intcon2	equ	0xFF1
  4008                           postinc0	equ	0xFEE
  4009                           wreg	equ	0xFE8
  4010                           postdec1	equ	0xFE5
  4011                           fsr1l	equ	0xFE1
  4012                           indf2	equ	0xFDF
  4013                           postinc2	equ	0xFDE
  4014                           postdec2	equ	0xFDD
  4015                           fsr2h	equ	0xFDA
  4016                           fsr2l	equ	0xFD9
  4017                           status	equ	0xFD8
  4018                           
  4019 ;; *************** function _Wait_Half_Second *****************
  4020 ;; Defined at:
  4021 ;;		line 107 in file "Lab9pA.c"
  4022 ;; Parameters:    Size  Location     Type
  4023 ;;		None
  4024 ;; Auto vars:     Size  Location     Type
  4025 ;;		None
  4026 ;; Return value:  Size  Location     Type
  4027 ;;		None               void
  4028 ;; Registers used:
  4029 ;;		wreg, status,2
  4030 ;; Tracked objects:
  4031 ;;		On entry : 0/0
  4032 ;;		On exit  : 0/0
  4033 ;;		Unchanged: 0/0
  4034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4035 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4036 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4037 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4038 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4039 ;;Total ram usage:        0 bytes
  4040 ;; Hardware stack levels used:    1
  4041 ;; Hardware stack levels required when called:    3
  4042 ;; This function calls:
  4043 ;;		Nothing
  4044 ;; This function is called by:
  4045 ;;		_main
  4046 ;; This function uses a non-reentrant model
  4047 ;;
  4048                           
  4049                           	psect	text11
  4050  001694                     __ptext11:
  4051                           	opt stack 0
  4052  001694                     _Wait_Half_Second:
  4053                           	opt stack 27
  4054                           
  4055                           ;Lab9pA.c: 109: T0CON = 0x02;
  4056                           
  4057                           ;incstack = 0
  4058  001694  0E02               	movlw	2
  4059  001696  6ED5               	movwf	4053,c	;volatile
  4060                           
  4061                           ;Lab9pA.c: 110: TMR0L = 0xDB;
  4062  001698  0EDB               	movlw	219
  4063  00169A  6ED6               	movwf	4054,c	;volatile
  4064                           
  4065                           ;Lab9pA.c: 111: TMR0H = 0x0B;
  4066  00169C  0E0B               	movlw	11
  4067  00169E  6ED7               	movwf	4055,c	;volatile
  4068                           
  4069                           ;Lab9pA.c: 112: INTCONbits.TMR0IF = 0;
  4070  0016A0  94F2               	bcf	intcon,2,c	;volatile
  4071                           
  4072                           ;Lab9pA.c: 113: T0CONbits.TMR0ON = 1;
  4073  0016A2  8ED5               	bsf	4053,7,c	;volatile
  4074                           
  4075                           ;Lab9pA.c: 114: while (INTCONbits.TMR0IF == 0);
  4076  0016A4  D000               	goto	l327
  4077  0016A6                     l327:
  4078  0016A6  A4F2               	btfss	intcon,2,c	;volatile
  4079  0016A8  D7FE               	goto	l327
  4080                           
  4081                           ;Lab9pA.c: 115: T0CONbits.TMR0ON = 0;
  4082  0016AA  9ED5               	bcf	4053,7,c	;volatile
  4083  0016AC  0012               	return		;funcret
  4084  0016AE                     __end_of_Wait_Half_Second:
  4085                           	opt stack 0
  4086                           tblptru	equ	0xFF8
  4087                           tblptrh	equ	0xFF7
  4088                           tblptrl	equ	0xFF6
  4089                           tablat	equ	0xFF5
  4090                           prodh	equ	0xFF4
  4091                           prodl	equ	0xFF3
  4092                           intcon	equ	0xFF2
  4093                           intcon2	equ	0xFF1
  4094                           postinc0	equ	0xFEE
  4095                           wreg	equ	0xFE8
  4096                           postdec1	equ	0xFE5
  4097                           fsr1l	equ	0xFE1
  4098                           indf2	equ	0xFDF
  4099                           postinc2	equ	0xFDE
  4100                           postdec2	equ	0xFDD
  4101                           fsr2h	equ	0xFDA
  4102                           fsr2l	equ	0xFD9
  4103                           status	equ	0xFD8
  4104                           
  4105 ;; *************** function _Initialize_Screen *****************
  4106 ;; Defined at:
  4107 ;;		line 296 in file "Lab9pA.c"
  4108 ;; Parameters:    Size  Location     Type
  4109 ;;		None
  4110 ;; Auto vars:     Size  Location     Type
  4111 ;;		None
  4112 ;; Return value:  Size  Location     Type
  4113 ;;		None               void
  4114 ;; Registers used:
  4115 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4116 ;; Tracked objects:
  4117 ;;		On entry : 0/0
  4118 ;;		On exit  : 0/0
  4119 ;;		Unchanged: 0/0
  4120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4121 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4122 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4123 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4124 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4125 ;;Total ram usage:        0 bytes
  4126 ;; Hardware stack levels used:    1
  4127 ;; Hardware stack levels required when called:   10
  4128 ;; This function calls:
  4129 ;;		_LCD_Reset
  4130 ;;		_TFT_GreenTab_Initialize
  4131 ;;		_drawtext
  4132 ;;		_fillScreen
  4133 ;;		_strcpy
  4134 ;; This function is called by:
  4135 ;;		_main
  4136 ;; This function uses a non-reentrant model
  4137 ;;
  4138                           
  4139                           	psect	text12
  4140  000FAC                     __ptext12:
  4141                           	opt stack 0
  4142  000FAC                     _Initialize_Screen:
  4143                           	opt stack 20
  4144                           
  4145                           ;Lab9pA.c: 298: LCD_Reset();
  4146                           
  4147                           ;incstack = 0
  4148  000FAC  EC76  F00B         	call	_LCD_Reset	;wreg free
  4149                           
  4150                           ;Lab9pA.c: 299: TFT_GreenTab_Initialize();
  4151  000FB0  EC02  F00B         	call	_TFT_GreenTab_Initialize	;wreg free
  4152                           
  4153                           ;Lab9pA.c: 300: fillScreen(0x0000);
  4154  000FB4  0E00               	movlw	0
  4155  000FB6  6E25               	movwf	fillScreen@color+1,c
  4156  000FB8  0E00               	movlw	0
  4157  000FBA  6E24               	movwf	fillScreen@color,c
  4158  000FBC  EC3C  F00B         	call	_fillScreen	;wreg free
  4159                           
  4160                           ;Lab9pA.c: 303: txt = buffer;
  4161  000FC0  0EBF               	movlw	low _buffer
  4162  000FC2  6E67               	movwf	_txt,c
  4163  000FC4  0E00               	movlw	high _buffer
  4164  000FC6  6E68               	movwf	_txt+1,c
  4165                           
  4166                           ;Lab9pA.c: 304: strcpy(txt, "ECE3301L Fall 21-S4");
  4167  000FC8  C067  F011         	movff	_txt,strcpy@to
  4168  000FCC  C068  F012         	movff	_txt+1,strcpy@to+1
  4169  000FD0  0EB8               	movlw	low STR_4
  4170  000FD2  6E13               	movwf	strcpy@from,c
  4171  000FD4  0EFF               	movlw	high STR_4
  4172  000FD6  6E14               	movwf	strcpy@from+1,c
  4173  000FD8  ECD1  F00A         	call	_strcpy	;wreg free
  4174                           
  4175                           ;Lab9pA.c: 305: drawtext(2, 2, txt, 0xFFFF, 0x0000, 1);
  4176  000FDC  0E02               	movlw	2
  4177  000FDE  6E39               	movwf	drawtext@y,c
  4178  000FE0  C067  F03A         	movff	_txt,drawtext@_text
  4179  000FE4  C068  F03B         	movff	_txt+1,drawtext@_text+1
  4180  000FE8  0EFF               	movlw	255
  4181  000FEA  6E3D               	movwf	drawtext@color+1,c
  4182  000FEC  683C               	setf	drawtext@color,c
  4183  000FEE  0E00               	movlw	0
  4184  000FF0  6E3F               	movwf	drawtext@bg+1,c
  4185  000FF2  0E00               	movlw	0
  4186  000FF4  6E3E               	movwf	drawtext@bg,c
  4187  000FF6  0E01               	movlw	1
  4188  000FF8  6E40               	movwf	drawtext@size,c
  4189  000FFA  0E02               	movlw	2
  4190  000FFC  EC6A  F006         	call	_drawtext
  4191                           
  4192                           ;Lab9pA.c: 307: strcpy(txt, "LAB 9 ");
  4193  001000  C067  F011         	movff	_txt,strcpy@to
  4194  001004  C068  F012         	movff	_txt+1,strcpy@to+1
  4195  001008  0EF1               	movlw	low STR_5
  4196  00100A  6E13               	movwf	strcpy@from,c
  4197  00100C  0EFF               	movlw	high STR_5
  4198  00100E  6E14               	movwf	strcpy@from+1,c
  4199  001010  ECD1  F00A         	call	_strcpy	;wreg free
  4200                           
  4201                           ;Lab9pA.c: 308: drawtext(50, 10, txt, 0xFFFF, 0x0000, 1);
  4202  001014  0E0A               	movlw	10
  4203  001016  6E39               	movwf	drawtext@y,c
  4204  001018  C067  F03A         	movff	_txt,drawtext@_text
  4205  00101C  C068  F03B         	movff	_txt+1,drawtext@_text+1
  4206  001020  0EFF               	movlw	255
  4207  001022  6E3D               	movwf	drawtext@color+1,c
  4208  001024  683C               	setf	drawtext@color,c
  4209  001026  0E00               	movlw	0
  4210  001028  6E3F               	movwf	drawtext@bg+1,c
  4211  00102A  0E00               	movlw	0
  4212  00102C  6E3E               	movwf	drawtext@bg,c
  4213  00102E  0E01               	movlw	1
  4214  001030  6E40               	movwf	drawtext@size,c
  4215  001032  0E32               	movlw	50
  4216  001034  EC6A  F006         	call	_drawtext
  4217  001038  0012               	return		;funcret
  4218  00103A                     __end_of_Initialize_Screen:
  4219                           	opt stack 0
  4220                           tblptru	equ	0xFF8
  4221                           tblptrh	equ	0xFF7
  4222                           tblptrl	equ	0xFF6
  4223                           tablat	equ	0xFF5
  4224                           prodh	equ	0xFF4
  4225                           prodl	equ	0xFF3
  4226                           intcon	equ	0xFF2
  4227                           intcon2	equ	0xFF1
  4228                           postinc0	equ	0xFEE
  4229                           wreg	equ	0xFE8
  4230                           postdec1	equ	0xFE5
  4231                           fsr1l	equ	0xFE1
  4232                           indf2	equ	0xFDF
  4233                           postinc2	equ	0xFDE
  4234                           postdec2	equ	0xFDD
  4235                           fsr2h	equ	0xFDA
  4236                           fsr2l	equ	0xFD9
  4237                           status	equ	0xFD8
  4238                           
  4239 ;; *************** function _strcpy *****************
  4240 ;; Defined at:
  4241 ;;		line 8 in file "E:\XC8\sources\common\strcpy.c"
  4242 ;; Parameters:    Size  Location     Type
  4243 ;;  to              2   16[COMRAM] PTR unsigned char 
  4244 ;;		 -> NULL(0), buffer(31), 
  4245 ;;  from            2   18[COMRAM] PTR const unsigned char 
  4246 ;;		 -> STR_5(7), STR_4(20), 
  4247 ;; Auto vars:     Size  Location     Type
  4248 ;;  cp              2   20[COMRAM] PTR unsigned char 
  4249 ;;		 -> NULL(0), buffer(31), 
  4250 ;; Return value:  Size  Location     Type
  4251 ;;                  2   16[COMRAM] PTR unsigned char 
  4252 ;; Registers used:
  4253 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  4254 ;; Tracked objects:
  4255 ;;		On entry : 0/0
  4256 ;;		On exit  : 0/0
  4257 ;;		Unchanged: 0/0
  4258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4259 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4260 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4261 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4262 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4263 ;;Total ram usage:        6 bytes
  4264 ;; Hardware stack levels used:    1
  4265 ;; Hardware stack levels required when called:    3
  4266 ;; This function calls:
  4267 ;;		Nothing
  4268 ;; This function is called by:
  4269 ;;		_Initialize_Screen
  4270 ;; This function uses a non-reentrant model
  4271 ;;
  4272                           
  4273                           	psect	text13
  4274  0015A2                     __ptext13:
  4275                           	opt stack 0
  4276  0015A2                     _strcpy:
  4277                           	opt stack 26
  4278                           
  4279                           ;incstack = 0
  4280  0015A2  C011  F015         	movff	strcpy@to,strcpy@cp
  4281  0015A6  C012  F016         	movff	strcpy@to+1,strcpy@cp+1
  4282  0015AA  D005               	goto	l2680
  4283  0015AC                     l2678:
  4284  0015AC  4A15               	infsnz	strcpy@cp,f,c
  4285  0015AE  2A16               	incf	strcpy@cp+1,f,c
  4286  0015B0  4A13               	infsnz	strcpy@from,f,c
  4287  0015B2  2A14               	incf	strcpy@from+1,f,c
  4288  0015B4  D000               	goto	l2680
  4289  0015B6                     l2680:
  4290  0015B6  C013  FFF6         	movff	strcpy@from,tblptrl
  4291  0015BA  C014  FFF7         	movff	strcpy@from+1,tblptrh
  4292  0015BE                     	if	0	;tblptru may be non-zero
  4293  0015BE                     	endif
  4294  0015BE                     	if	0	;tblptru may be non-zero
  4295  0015BE                     	endif
  4296  0015BE  C015  FFD9         	movff	strcpy@cp,fsr2l
  4297  0015C2  C016  FFDA         	movff	strcpy@cp+1,fsr2h
  4298  0015C6  0008               	tblrd		*
  4299  0015C8  CFF5 FFDF          	movff	tablat,indf2
  4300  0015CC  50DF               	movf	indf2,w,c
  4301  0015CE  A4D8               	btfss	status,2,c
  4302  0015D0  D7ED               	goto	l2678
  4303                           
  4304                           ;	Return value of _strcpy is never used
  4305  0015D2  0012               	return		;funcret
  4306  0015D4                     __end_of_strcpy:
  4307                           	opt stack 0
  4308                           tblptru	equ	0xFF8
  4309                           tblptrh	equ	0xFF7
  4310                           tblptrl	equ	0xFF6
  4311                           tablat	equ	0xFF5
  4312                           prodh	equ	0xFF4
  4313                           prodl	equ	0xFF3
  4314                           intcon	equ	0xFF2
  4315                           intcon2	equ	0xFF1
  4316                           postinc0	equ	0xFEE
  4317                           wreg	equ	0xFE8
  4318                           postdec1	equ	0xFE5
  4319                           fsr1l	equ	0xFE1
  4320                           indf2	equ	0xFDF
  4321                           postinc2	equ	0xFDE
  4322                           postdec2	equ	0xFDD
  4323                           fsr2h	equ	0xFDA
  4324                           fsr2l	equ	0xFD9
  4325                           status	equ	0xFD8
  4326                           
  4327 ;; *************** function _fillScreen *****************
  4328 ;; Defined at:
  4329 ;;		line 652 in file "ST7735_TFT.c"
  4330 ;; Parameters:    Size  Location     Type
  4331 ;;  color           2   35[COMRAM] unsigned int 
  4332 ;; Auto vars:     Size  Location     Type
  4333 ;;		None
  4334 ;; Return value:  Size  Location     Type
  4335 ;;		None               void
  4336 ;; Registers used:
  4337 ;;		wreg, status,2, status,0, cstack
  4338 ;; Tracked objects:
  4339 ;;		On entry : 0/0
  4340 ;;		On exit  : 0/0
  4341 ;;		Unchanged: 0/0
  4342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4343 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4344 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4345 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4346 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4347 ;;Total ram usage:        2 bytes
  4348 ;; Hardware stack levels used:    1
  4349 ;; Hardware stack levels required when called:    7
  4350 ;; This function calls:
  4351 ;;		_fillRectangle
  4352 ;; This function is called by:
  4353 ;;		_Initialize_Screen
  4354 ;; This function uses a non-reentrant model
  4355 ;;
  4356                           
  4357                           	psect	text14
  4358  001678                     __ptext14:
  4359                           	opt stack 0
  4360  001678                     _fillScreen:
  4361                           	opt stack 22
  4362                           
  4363                           ;ST7735_TFT.c: 654: fillRectangle(0, 0, 128, 160, color);
  4364                           
  4365                           ;incstack = 0
  4366  001678  0E00               	movlw	0
  4367  00167A  6E18               	movwf	fillRectangle@y,c
  4368  00167C  0E80               	movlw	128
  4369  00167E  6E19               	movwf	fillRectangle@w,c
  4370  001680  0EA0               	movlw	160
  4371  001682  6E1A               	movwf	fillRectangle@h,c
  4372  001684  C024  F01B         	movff	fillScreen@color,fillRectangle@color
  4373  001688  C025  F01C         	movff	fillScreen@color+1,fillRectangle@color+1
  4374  00168C  0E00               	movlw	0
  4375  00168E  EC68  F007         	call	_fillRectangle
  4376  001692  0012               	return		;funcret
  4377  001694                     __end_of_fillScreen:
  4378                           	opt stack 0
  4379                           tblptru	equ	0xFF8
  4380                           tblptrh	equ	0xFF7
  4381                           tblptrl	equ	0xFF6
  4382                           tablat	equ	0xFF5
  4383                           prodh	equ	0xFF4
  4384                           prodl	equ	0xFF3
  4385                           intcon	equ	0xFF2
  4386                           intcon2	equ	0xFF1
  4387                           postinc0	equ	0xFEE
  4388                           wreg	equ	0xFE8
  4389                           postdec1	equ	0xFE5
  4390                           fsr1l	equ	0xFE1
  4391                           indf2	equ	0xFDF
  4392                           postinc2	equ	0xFDE
  4393                           postdec2	equ	0xFDD
  4394                           fsr2h	equ	0xFDA
  4395                           fsr2l	equ	0xFD9
  4396                           status	equ	0xFD8
  4397                           
  4398 ;; *************** function _fillRectangle *****************
  4399 ;; Defined at:
  4400 ;;		line 536 in file "ST7735_TFT.c"
  4401 ;; Parameters:    Size  Location     Type
  4402 ;;  x               1    wreg     unsigned char 
  4403 ;;  y               1   23[COMRAM] unsigned char 
  4404 ;;  w               1   24[COMRAM] unsigned char 
  4405 ;;  h               1   25[COMRAM] unsigned char 
  4406 ;;  color           2   26[COMRAM] unsigned int 
  4407 ;; Auto vars:     Size  Location     Type
  4408 ;;  x               1   34[COMRAM] unsigned char 
  4409 ;;  lo              1   33[COMRAM] unsigned char 
  4410 ;;  hi              1   32[COMRAM] unsigned char 
  4411 ;; Return value:  Size  Location     Type
  4412 ;;		None               void
  4413 ;; Registers used:
  4414 ;;		wreg, status,2, status,0, cstack
  4415 ;; Tracked objects:
  4416 ;;		On entry : 0/0
  4417 ;;		On exit  : 0/0
  4418 ;;		Unchanged: 0/0
  4419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4420 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4421 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4422 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4423 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4424 ;;Total ram usage:       12 bytes
  4425 ;; Hardware stack levels used:    1
  4426 ;; Hardware stack levels required when called:    6
  4427 ;; This function calls:
  4428 ;;		_setAddrWindow
  4429 ;;		_spiwrite
  4430 ;; This function is called by:
  4431 ;;		_fillScreen
  4432 ;; This function uses a non-reentrant model
  4433 ;;
  4434                           
  4435                           	psect	text15
  4436  000ED0                     __ptext15:
  4437                           	opt stack 0
  4438  000ED0                     _fillRectangle:
  4439                           	opt stack 22
  4440                           
  4441                           ;incstack = 0
  4442                           ;fillRectangle@x stored from wreg
  4443  000ED0  6E23               	movwf	fillRectangle@x,c
  4444                           
  4445                           ;ST7735_TFT.c: 538: unsigned char hi, lo;
  4446                           ;ST7735_TFT.c: 539: if((x >= 128) || (y >= 160))
  4447  000ED2  0E80               	movlw	128
  4448  000ED4  6023               	cpfslt	fillRectangle@x,c
  4449  000ED6  D069               	goto	l214
  4450  000ED8  0E9F               	movlw	159
  4451  000EDA  6418               	cpfsgt	fillRectangle@y,c
  4452  000EDC  D001               	goto	l3560
  4453                           
  4454                           ;ST7735_TFT.c: 540: return;
  4455  000EDE  D065               	goto	l214
  4456  000EE0                     l3560:
  4457                           
  4458                           ;ST7735_TFT.c: 541: if((x + w - 1) >= 128)
  4459  000EE0  0EFF               	movlw	255
  4460  000EE2  6E1D               	movwf	??_fillRectangle& (0+255),c
  4461  000EE4  0EFF               	movlw	255
  4462  000EE6  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  4463  000EE8  5019               	movf	fillRectangle@w,w,c
  4464  000EEA  C023  F01F         	movff	fillRectangle@x,??_fillRectangle+2
  4465  000EEE  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  4466  000EF0  261F               	addwf	??_fillRectangle+2,f,c
  4467  000EF2  0E00               	movlw	0
  4468  000EF4  2220               	addwfc	??_fillRectangle+3,f,c
  4469  000EF6  501D               	movf	??_fillRectangle,w,c
  4470  000EF8  261F               	addwf	??_fillRectangle+2,f,c
  4471  000EFA  501E               	movf	??_fillRectangle+1,w,c
  4472  000EFC  2220               	addwfc	??_fillRectangle+3,f,c
  4473  000EFE  BE20               	btfsc	??_fillRectangle+3,7,c
  4474  000F00  D00A               	goto	l215
  4475  000F02  5020               	movf	??_fillRectangle+3,w,c
  4476  000F04  E104               	bnz	u2640
  4477  000F06  0E80               	movlw	128
  4478  000F08  5C1F               	subwf	??_fillRectangle+2,w,c
  4479  000F0A  A0D8               	btfss	status,0,c
  4480  000F0C  D004               	goto	l215
  4481  000F0E                     u2640:
  4482                           
  4483                           ;ST7735_TFT.c: 542: w = 128 - x;
  4484  000F0E  5023               	movf	fillRectangle@x,w,c
  4485  000F10  0800               	sublw	0
  4486  000F12  0F80               	addlw	128
  4487  000F14  6E19               	movwf	fillRectangle@w,c
  4488  000F16                     l215:
  4489                           
  4490                           ;ST7735_TFT.c: 543: if((y + h - 1) >= 160)
  4491  000F16  0EFF               	movlw	255
  4492  000F18  6E1D               	movwf	??_fillRectangle& (0+255),c
  4493  000F1A  0EFF               	movlw	255
  4494  000F1C  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  4495  000F1E  501A               	movf	fillRectangle@h,w,c
  4496  000F20  C018  F01F         	movff	fillRectangle@y,??_fillRectangle+2
  4497  000F24  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  4498  000F26  261F               	addwf	??_fillRectangle+2,f,c
  4499  000F28  0E00               	movlw	0
  4500  000F2A  2220               	addwfc	??_fillRectangle+3,f,c
  4501  000F2C  501D               	movf	??_fillRectangle,w,c
  4502  000F2E  261F               	addwf	??_fillRectangle+2,f,c
  4503  000F30  501E               	movf	??_fillRectangle+1,w,c
  4504  000F32  2220               	addwfc	??_fillRectangle+3,f,c
  4505  000F34  BE20               	btfsc	??_fillRectangle+3,7,c
  4506  000F36  D00B               	goto	l3566
  4507  000F38  5020               	movf	??_fillRectangle+3,w,c
  4508  000F3A  E104               	bnz	u2650
  4509  000F3C  0EA0               	movlw	160
  4510  000F3E  5C1F               	subwf	??_fillRectangle+2,w,c
  4511  000F40  A0D8               	btfss	status,0,c
  4512  000F42  D005               	goto	l3566
  4513  000F44                     u2650:
  4514                           
  4515                           ;ST7735_TFT.c: 544: h = 160 - y;
  4516  000F44  5018               	movf	fillRectangle@y,w,c
  4517  000F46  0800               	sublw	0
  4518  000F48  0FA0               	addlw	160
  4519  000F4A  6E1A               	movwf	fillRectangle@h,c
  4520  000F4C  D000               	goto	l3566
  4521  000F4E                     l3566:
  4522                           
  4523                           ;ST7735_TFT.c: 545: setAddrWindow(x, y, x+w-1, y+h-1);
  4524  000F4E  C018  F014         	movff	fillRectangle@y,setAddrWindow@y0
  4525  000F52  5023               	movf	fillRectangle@x,w,c
  4526  000F54  2419               	addwf	fillRectangle@w,w,c
  4527  000F56  6E1D               	movwf	??_fillRectangle& (0+255),c
  4528  000F58  041D               	decf	??_fillRectangle,w,c
  4529  000F5A  6E15               	movwf	setAddrWindow@x1,c
  4530  000F5C  5018               	movf	fillRectangle@y,w,c
  4531  000F5E  241A               	addwf	fillRectangle@h,w,c
  4532  000F60  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  4533  000F62  041E               	decf	??_fillRectangle+1,w,c
  4534  000F64  6E16               	movwf	setAddrWindow@y1,c
  4535  000F66  5023               	movf	fillRectangle@x,w,c
  4536  000F68  EC27  F00A         	call	_setAddrWindow
  4537                           
  4538                           ;ST7735_TFT.c: 546: hi = color >> 8; lo = color;
  4539  000F6C  501C               	movf	fillRectangle@color+1,w,c
  4540  000F6E  6E21               	movwf	fillRectangle@hi,c
  4541  000F70  C01B  F022         	movff	fillRectangle@color,fillRectangle@lo
  4542                           
  4543                           ;ST7735_TFT.c: 547: PORTDbits.RD0 = 1;
  4544  000F74  8083               	bsf	3971,0,c	;volatile
  4545                           
  4546                           ;ST7735_TFT.c: 548: PORTDbits.RD1 = 0;
  4547  000F76  9283               	bcf	3971,1,c	;volatile
  4548                           
  4549                           ;ST7735_TFT.c: 550: for(y=h; y>0; y--) {
  4550  000F78  C01A  F018         	movff	fillRectangle@h,fillRectangle@y
  4551  000F7C                     l3578:
  4552  000F7C  5018               	movf	fillRectangle@y,w,c
  4553  000F7E  B4D8               	btfsc	status,2,c
  4554  000F80  D013               	goto	l218
  4555  000F82  D001               	goto	l217
  4556  000F84  D011               	goto	l218
  4557  000F86                     l217:
  4558                           
  4559                           ;ST7735_TFT.c: 551: for(x = w; x > 0; x--) {
  4560  000F86  C019  F023         	movff	fillRectangle@w,fillRectangle@x
  4561  000F8A                     l3582:
  4562  000F8A  5023               	movf	fillRectangle@x,w,c
  4563  000F8C  B4D8               	btfsc	status,2,c
  4564  000F8E  D00A               	goto	l3592
  4565  000F90  D001               	goto	l3586
  4566  000F92  D008               	goto	l3592
  4567  000F94                     l3586:
  4568                           
  4569                           ;ST7735_TFT.c: 552: spiwrite(hi);
  4570  000F94  5021               	movf	fillRectangle@hi,w,c
  4571  000F96  EC6C  F00B         	call	_spiwrite
  4572                           
  4573                           ;ST7735_TFT.c: 553: spiwrite(lo);
  4574  000F9A  5022               	movf	fillRectangle@lo,w,c
  4575  000F9C  EC6C  F00B         	call	_spiwrite
  4576  000FA0  0623               	decf	fillRectangle@x,f,c
  4577  000FA2  D7F3               	goto	l3582
  4578  000FA4                     l3592:
  4579  000FA4  0618               	decf	fillRectangle@y,f,c
  4580  000FA6  D7EA               	goto	l3578
  4581  000FA8                     l218:
  4582                           
  4583                           ;ST7735_TFT.c: 554: }
  4584                           ;ST7735_TFT.c: 555: }
  4585                           ;ST7735_TFT.c: 556: PORTDbits.RD1 = 1;
  4586  000FA8  8283               	bsf	3971,1,c	;volatile
  4587  000FAA                     l214:
  4588  000FAA  0012               	return		;funcret
  4589  000FAC                     __end_of_fillRectangle:
  4590                           	opt stack 0
  4591                           tblptru	equ	0xFF8
  4592                           tblptrh	equ	0xFF7
  4593                           tblptrl	equ	0xFF6
  4594                           tablat	equ	0xFF5
  4595                           prodh	equ	0xFF4
  4596                           prodl	equ	0xFF3
  4597                           intcon	equ	0xFF2
  4598                           intcon2	equ	0xFF1
  4599                           postinc0	equ	0xFEE
  4600                           wreg	equ	0xFE8
  4601                           postdec1	equ	0xFE5
  4602                           fsr1l	equ	0xFE1
  4603                           indf2	equ	0xFDF
  4604                           postinc2	equ	0xFDE
  4605                           postdec2	equ	0xFDD
  4606                           fsr2h	equ	0xFDA
  4607                           fsr2l	equ	0xFD9
  4608                           status	equ	0xFD8
  4609                           
  4610 ;; *************** function _drawtext *****************
  4611 ;; Defined at:
  4612 ;;		line 507 in file "ST7735_TFT.c"
  4613 ;; Parameters:    Size  Location     Type
  4614 ;;  x               1    wreg     unsigned char 
  4615 ;;  y               1   56[COMRAM] unsigned char 
  4616 ;;  _text           2   57[COMRAM] PTR unsigned char 
  4617 ;;		 -> NULL(0), buffer(31), txt1(84), 
  4618 ;;  color           2   59[COMRAM] unsigned int 
  4619 ;;  bg              2   61[COMRAM] unsigned int 
  4620 ;;  size            1   63[COMRAM] unsigned char 
  4621 ;; Auto vars:     Size  Location     Type
  4622 ;;  x               1    0[BANK0 ] unsigned char 
  4623 ;;  i               2    3[BANK0 ] unsigned int 
  4624 ;;  textsize        2    1[BANK0 ] unsigned int 
  4625 ;;  cursor_x        1    6[BANK0 ] unsigned char 
  4626 ;;  cursor_y        1    5[BANK0 ] unsigned char 
  4627 ;; Return value:  Size  Location     Type
  4628 ;;		None               void
  4629 ;; Registers used:
  4630 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4631 ;; Tracked objects:
  4632 ;;		On entry : 0/0
  4633 ;;		On exit  : 0/0
  4634 ;;		Unchanged: 0/0
  4635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4636 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4637 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4638 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4639 ;;      Totals:        10       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4640 ;;Total ram usage:       17 bytes
  4641 ;; Hardware stack levels used:    1
  4642 ;; Hardware stack levels required when called:    9
  4643 ;; This function calls:
  4644 ;;		_drawChar
  4645 ;;		_strlen
  4646 ;; This function is called by:
  4647 ;;		_main
  4648 ;;		_Initialize_Screen
  4649 ;; This function uses a non-reentrant model
  4650 ;;
  4651                           
  4652                           	psect	text16
  4653  000CD4                     __ptext16:
  4654                           	opt stack 0
  4655  000CD4                     _drawtext:
  4656                           	opt stack 21
  4657                           
  4658                           ;incstack = 0
  4659                           ;drawtext@x stored from wreg
  4660  000CD4  0100               	movlb	0	; () banked
  4661  000CD6  6FDE               	movwf	drawtext@x& (0+255),b
  4662                           
  4663                           ; BSR set to: 0
  4664                           ;ST7735_TFT.c: 509: unsigned char cursor_x, cursor_y;
  4665                           ;ST7735_TFT.c: 510: unsigned int textsize, i;
  4666                           ;ST7735_TFT.c: 511: cursor_x = x, cursor_y = y;
  4667  000CD8  C0DE  F0E4         	movff	drawtext@x,drawtext@cursor_x
  4668                           
  4669                           ; BSR set to: 0
  4670  000CDC  C039  F0E3         	movff	drawtext@y,drawtext@cursor_y
  4671                           
  4672                           ; BSR set to: 0
  4673                           ;ST7735_TFT.c: 512: textsize = strlen(_text);
  4674  000CE0  C03A  F011         	movff	drawtext@_text,strlen@s
  4675  000CE4  C03B  F012         	movff	drawtext@_text+1,strlen@s+1
  4676  000CE8  EC93  F00A         	call	_strlen	;wreg free
  4677  000CEC  C011  F0DF         	movff	?_strlen,drawtext@textsize
  4678  000CF0  C012  F0E0         	movff	?_strlen+1,drawtext@textsize+1
  4679                           
  4680                           ;ST7735_TFT.c: 513: for(i = 0; i < textsize; i++){
  4681  000CF4  0E00               	movlw	0
  4682  000CF6  0100               	movlb	0	; () banked
  4683  000CF8  6FE2               	movwf	(drawtext@i+1)& (0+255),b
  4684  000CFA  0E00               	movlw	0
  4685  000CFC  6FE1               	movwf	drawtext@i& (0+255),b
  4686  000CFE  D064               	goto	l3636
  4687  000D00                     l3610:
  4688                           
  4689                           ; BSR set to: 0
  4690                           ;ST7735_TFT.c: 514: if(wrap && ((cursor_x + size * 5) > 128)){
  4691  000D00  505C               	movf	_wrap,w,c
  4692  000D02  B4D8               	btfsc	status,2,c
  4693  000D04  D034               	goto	l3626
  4694                           
  4695                           ; BSR set to: 0
  4696  000D06  5040               	movf	drawtext@size,w,c
  4697  000D08  0D05               	mullw	5
  4698  000D0A  0100               	movlb	0	; () banked
  4699  000D0C  51E4               	movf	drawtext@cursor_x& (0+255),w,b
  4700  000D0E  6E41               	movwf	??_drawtext& (0+255),c
  4701  000D10  6A42               	clrf	(??_drawtext+1)& (0+255),c
  4702  000D12  50F3               	movf	prodl,w,c
  4703  000D14  2641               	addwf	??_drawtext,f,c
  4704  000D16  50F4               	movf	prodh,w,c
  4705  000D18  2242               	addwfc	??_drawtext+1,f,c
  4706  000D1A  BE42               	btfsc	??_drawtext+1,7,c
  4707  000D1C  D028               	goto	l3626
  4708  000D1E  5042               	movf	??_drawtext+1,w,c
  4709  000D20  E104               	bnz	u2710
  4710  000D22  0E81               	movlw	129
  4711  000D24  5C41               	subwf	??_drawtext,w,c
  4712  000D26  A0D8               	btfss	status,0,c
  4713  000D28  D022               	goto	l3626
  4714  000D2A                     u2710:
  4715                           
  4716                           ; BSR set to: 0
  4717                           ;ST7735_TFT.c: 515: cursor_x = 0;
  4718  000D2A  0E00               	movlw	0
  4719  000D2C  0100               	movlb	0	; () banked
  4720  000D2E  6FE4               	movwf	drawtext@cursor_x& (0+255),b
  4721                           
  4722                           ; BSR set to: 0
  4723                           ;ST7735_TFT.c: 516: cursor_y = cursor_y + size * 7 + 3 ;
  4724  000D30  5040               	movf	drawtext@size,w,c
  4725  000D32  0D07               	mullw	7
  4726  000D34  50F3               	movf	prodl,w,c
  4727  000D36  0100               	movlb	0	; () banked
  4728  000D38  25E3               	addwf	drawtext@cursor_y& (0+255),w,b
  4729  000D3A  0F03               	addlw	3
  4730  000D3C  0100               	movlb	0	; () banked
  4731  000D3E  6FE3               	movwf	drawtext@cursor_y& (0+255),b
  4732                           
  4733                           ; BSR set to: 0
  4734                           ;ST7735_TFT.c: 517: if(cursor_y > 160) cursor_y = 160;
  4735  000D40  0EA0               	movlw	160
  4736  000D42  0100               	movlb	0	; () banked
  4737  000D44  65E3               	cpfsgt	drawtext@cursor_y& (0+255),b
  4738  000D46  D004               	goto	l3622
  4739                           
  4740                           ; BSR set to: 0
  4741  000D48  0EA0               	movlw	160
  4742  000D4A  0100               	movlb	0	; () banked
  4743  000D4C  6FE3               	movwf	drawtext@cursor_y& (0+255),b
  4744  000D4E  D000               	goto	l3622
  4745  000D50                     l3622:
  4746                           
  4747                           ; BSR set to: 0
  4748                           ;ST7735_TFT.c: 518: if(_text[i] == 0x20) goto _skip; }
  4749  000D50  0100               	movlb	0	; () banked
  4750  000D52  51E1               	movf	drawtext@i& (0+255),w,b
  4751  000D54  243A               	addwf	drawtext@_text,w,c
  4752  000D56  6ED9               	movwf	fsr2l,c
  4753  000D58  0100               	movlb	0	; () banked
  4754  000D5A  51E2               	movf	(drawtext@i+1)& (0+255),w,b
  4755  000D5C  203B               	addwfc	drawtext@_text+1,w,c
  4756  000D5E  6EDA               	movwf	fsr2h,c
  4757  000D60  0E20               	movlw	32
  4758  000D62  18DE               	xorwf	postinc2,w,c
  4759  000D64  B4D8               	btfsc	status,2,c
  4760  000D66  D02C               	goto	l3634
  4761  000D68  D002               	goto	l3626
  4762                           
  4763                           ; BSR set to: 0
  4764  000D6A  D02A               	goto	l3634
  4765                           
  4766                           ; BSR set to: 0
  4767  000D6C  D000               	goto	l3626
  4768  000D6E                     l3626:
  4769                           
  4770                           ; BSR set to: 0
  4771                           ;ST7735_TFT.c: 519: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
  4772  000D6E  C0E3  F02E         	movff	drawtext@cursor_y,drawChar@y
  4773  000D72  0100               	movlb	0	; () banked
  4774  000D74  51E1               	movf	drawtext@i& (0+255),w,b
  4775  000D76  243A               	addwf	drawtext@_text,w,c
  4776  000D78  6ED9               	movwf	fsr2l,c
  4777  000D7A  0100               	movlb	0	; () banked
  4778  000D7C  51E2               	movf	(drawtext@i+1)& (0+255),w,b
  4779  000D7E  203B               	addwfc	drawtext@_text+1,w,c
  4780  000D80  6EDA               	movwf	fsr2h,c
  4781  000D82  50DF               	movf	indf2,w,c
  4782  000D84  6E2F               	movwf	drawChar@c,c
  4783  000D86  C03C  F030         	movff	drawtext@color,drawChar@color
  4784  000D8A  C03D  F031         	movff	drawtext@color+1,drawChar@color+1
  4785  000D8E  C03E  F032         	movff	drawtext@bg,drawChar@bg
  4786  000D92  C03F  F033         	movff	drawtext@bg+1,drawChar@bg+1
  4787  000D96  C040  F034         	movff	drawtext@size,drawChar@size
  4788  000D9A  0100               	movlb	0	; () banked
  4789  000D9C  51E4               	movf	drawtext@cursor_x& (0+255),w,b
  4790  000D9E  ECF4  F003         	call	_drawChar
  4791                           
  4792                           ;ST7735_TFT.c: 520: cursor_x = cursor_x + size * 6;
  4793  000DA2  5040               	movf	drawtext@size,w,c
  4794  000DA4  0D06               	mullw	6
  4795  000DA6  50F3               	movf	prodl,w,c
  4796  000DA8  0100               	movlb	0	; () banked
  4797  000DAA  25E4               	addwf	drawtext@cursor_x& (0+255),w,b
  4798  000DAC  0100               	movlb	0	; () banked
  4799  000DAE  6FE4               	movwf	drawtext@cursor_x& (0+255),b
  4800                           
  4801                           ; BSR set to: 0
  4802                           ;ST7735_TFT.c: 521: if(cursor_x > 128) cursor_x = 128;
  4803  000DB0  0E80               	movlw	128
  4804  000DB2  0100               	movlb	0	; () banked
  4805  000DB4  65E4               	cpfsgt	drawtext@cursor_x& (0+255),b
  4806  000DB6  D004               	goto	l3634
  4807                           
  4808                           ; BSR set to: 0
  4809  000DB8  0E80               	movlw	128
  4810  000DBA  0100               	movlb	0	; () banked
  4811  000DBC  6FE4               	movwf	drawtext@cursor_x& (0+255),b
  4812                           
  4813                           ; BSR set to: 0
  4814  000DBE  D000               	goto	l3634
  4815  000DC0                     l3634:
  4816                           
  4817                           ; BSR set to: 0
  4818  000DC0  0100               	movlb	0	; () banked
  4819  000DC2  4BE1               	infsnz	drawtext@i& (0+255),f,b
  4820  000DC4  2BE2               	incf	(drawtext@i+1)& (0+255),f,b
  4821  000DC6  D000               	goto	l3636
  4822  000DC8                     l3636:
  4823                           
  4824                           ; BSR set to: 0
  4825  000DC8  0100               	movlb	0	; () banked
  4826  000DCA  51DF               	movf	drawtext@textsize& (0+255),w,b
  4827  000DCC  0100               	movlb	0	; () banked
  4828  000DCE  5DE1               	subwf	drawtext@i& (0+255),w,b
  4829  000DD0  0100               	movlb	0	; () banked
  4830  000DD2  51E0               	movf	(drawtext@textsize+1)& (0+255),w,b
  4831  000DD4  0100               	movlb	0	; () banked
  4832  000DD6  59E2               	subwfb	(drawtext@i+1)& (0+255),w,b
  4833  000DD8  A0D8               	btfss	status,0,c
  4834  000DDA  D792               	goto	l3610
  4835                           
  4836                           ; BSR set to: 0
  4837                           
  4838                           ; BSR set to: 0
  4839  000DDC  0012               	return		;funcret
  4840  000DDE                     __end_of_drawtext:
  4841                           	opt stack 0
  4842                           tblptru	equ	0xFF8
  4843                           tblptrh	equ	0xFF7
  4844                           tblptrl	equ	0xFF6
  4845                           tablat	equ	0xFF5
  4846                           prodh	equ	0xFF4
  4847                           prodl	equ	0xFF3
  4848                           intcon	equ	0xFF2
  4849                           intcon2	equ	0xFF1
  4850                           postinc0	equ	0xFEE
  4851                           wreg	equ	0xFE8
  4852                           postdec1	equ	0xFE5
  4853                           fsr1l	equ	0xFE1
  4854                           indf2	equ	0xFDF
  4855                           postinc2	equ	0xFDE
  4856                           postdec2	equ	0xFDD
  4857                           fsr2h	equ	0xFDA
  4858                           fsr2l	equ	0xFD9
  4859                           status	equ	0xFD8
  4860                           
  4861 ;; *************** function _strlen *****************
  4862 ;; Defined at:
  4863 ;;		line 4 in file "E:\XC8\sources\common\strlen.c"
  4864 ;; Parameters:    Size  Location     Type
  4865 ;;  s               2   16[COMRAM] PTR const unsigned char 
  4866 ;;		 -> NULL(0), buffer(31), txt1(84), 
  4867 ;; Auto vars:     Size  Location     Type
  4868 ;;  cp              2   20[COMRAM] PTR const unsigned char 
  4869 ;;		 -> NULL(0), buffer(31), txt1(84), 
  4870 ;; Return value:  Size  Location     Type
  4871 ;;                  2   16[COMRAM] unsigned int 
  4872 ;; Registers used:
  4873 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4874 ;; Tracked objects:
  4875 ;;		On entry : 0/0
  4876 ;;		On exit  : 0/0
  4877 ;;		Unchanged: 0/0
  4878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4879 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4880 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4881 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4882 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4883 ;;Total ram usage:        6 bytes
  4884 ;; Hardware stack levels used:    1
  4885 ;; Hardware stack levels required when called:    3
  4886 ;; This function calls:
  4887 ;;		Nothing
  4888 ;; This function is called by:
  4889 ;;		_drawtext
  4890 ;; This function uses a non-reentrant model
  4891 ;;
  4892                           
  4893                           	psect	text17
  4894  001526                     __ptext17:
  4895                           	opt stack 0
  4896  001526                     _strlen:
  4897                           	opt stack 26
  4898                           
  4899                           ; BSR set to: 0
  4900                           ;incstack = 0
  4901  001526  C011  F015         	movff	strlen@s,strlen@cp
  4902  00152A  C012  F016         	movff	strlen@s+1,strlen@cp+1
  4903  00152E  D003               	goto	l3550
  4904  001530                     l3548:
  4905  001530  4A15               	infsnz	strlen@cp,f,c
  4906  001532  2A16               	incf	strlen@cp+1,f,c
  4907  001534  D000               	goto	l3550
  4908  001536                     l3550:
  4909  001536  C015  FFD9         	movff	strlen@cp,fsr2l
  4910  00153A  C016  FFDA         	movff	strlen@cp+1,fsr2h
  4911  00153E  50DF               	movf	indf2,w,c
  4912  001540  A4D8               	btfss	status,2,c
  4913  001542  D7F6               	goto	l3548
  4914  001544  C011  F013         	movff	strlen@s,??_strlen
  4915  001548  C012  F014         	movff	strlen@s+1,??_strlen+1
  4916  00154C  1E13               	comf	??_strlen,f,c
  4917  00154E  1E14               	comf	??_strlen+1,f,c
  4918  001550  4A13               	infsnz	??_strlen,f,c
  4919  001552  2A14               	incf	??_strlen+1,f,c
  4920  001554  5015               	movf	strlen@cp,w,c
  4921  001556  2413               	addwf	??_strlen,w,c
  4922  001558  6E11               	movwf	?_strlen,c
  4923  00155A  5016               	movf	strlen@cp+1,w,c
  4924  00155C  2014               	addwfc	??_strlen+1,w,c
  4925  00155E  6E12               	movwf	?_strlen+1,c
  4926  001560  D000               	goto	l1044
  4927  001562                     l1044:
  4928  001562  0012               	return		;funcret
  4929  001564                     __end_of_strlen:
  4930                           	opt stack 0
  4931                           tblptru	equ	0xFF8
  4932                           tblptrh	equ	0xFF7
  4933                           tblptrl	equ	0xFF6
  4934                           tablat	equ	0xFF5
  4935                           prodh	equ	0xFF4
  4936                           prodl	equ	0xFF3
  4937                           intcon	equ	0xFF2
  4938                           intcon2	equ	0xFF1
  4939                           postinc0	equ	0xFEE
  4940                           wreg	equ	0xFE8
  4941                           postdec1	equ	0xFE5
  4942                           fsr1l	equ	0xFE1
  4943                           indf2	equ	0xFDF
  4944                           postinc2	equ	0xFDE
  4945                           postdec2	equ	0xFDD
  4946                           fsr2h	equ	0xFDA
  4947                           fsr2l	equ	0xFD9
  4948                           status	equ	0xFD8
  4949                           
  4950 ;; *************** function _drawChar *****************
  4951 ;; Defined at:
  4952 ;;		line 480 in file "ST7735_TFT.c"
  4953 ;; Parameters:    Size  Location     Type
  4954 ;;  x               1    wreg     unsigned char 
  4955 ;;  y               1   45[COMRAM] unsigned char 
  4956 ;;  c               1   46[COMRAM] unsigned char 
  4957 ;;  color           2   47[COMRAM] unsigned int 
  4958 ;;  bg              2   49[COMRAM] unsigned int 
  4959 ;;  size            1   51[COMRAM] unsigned char 
  4960 ;; Auto vars:     Size  Location     Type
  4961 ;;  x               1   53[COMRAM] unsigned char 
  4962 ;;  line            1   52[COMRAM] unsigned char 
  4963 ;;  i               1   55[COMRAM] unsigned char 
  4964 ;;  j               1   54[COMRAM] unsigned char 
  4965 ;; Return value:  Size  Location     Type
  4966 ;;		None               void
  4967 ;; Registers used:
  4968 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4969 ;; Tracked objects:
  4970 ;;		On entry : 0/0
  4971 ;;		On exit  : 0/0
  4972 ;;		Unchanged: 0/0
  4973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4974 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4975 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4976 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4977 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4978 ;;Total ram usage:       11 bytes
  4979 ;; Hardware stack levels used:    1
  4980 ;; Hardware stack levels required when called:    8
  4981 ;; This function calls:
  4982 ;;		___wmul
  4983 ;;		_drawPixel
  4984 ;;		_fillRect
  4985 ;; This function is called by:
  4986 ;;		_drawtext
  4987 ;; This function uses a non-reentrant model
  4988 ;;
  4989                           
  4990                           	psect	text18
  4991  0007E8                     __ptext18:
  4992                           	opt stack 0
  4993  0007E8                     _drawChar:
  4994                           	opt stack 21
  4995                           
  4996                           ;incstack = 0
  4997                           ;drawChar@x stored from wreg
  4998  0007E8  6E36               	movwf	drawChar@x,c
  4999                           
  5000                           ;ST7735_TFT.c: 482: char i, j;
  5001                           ;ST7735_TFT.c: 483: if((x >= 128) || (y >= 160))
  5002  0007EA  0E80               	movlw	128
  5003  0007EC  6036               	cpfslt	drawChar@x,c
  5004  0007EE  D0A6               	goto	l177
  5005  0007F0  0E9F               	movlw	159
  5006  0007F2  642E               	cpfsgt	drawChar@y,c
  5007  0007F4  D001               	goto	l3496
  5008                           
  5009                           ;ST7735_TFT.c: 484: return;
  5010  0007F6  D0A2               	goto	l177
  5011  0007F8                     l3496:
  5012                           
  5013                           ;ST7735_TFT.c: 485: if(size < 1) size = 1;
  5014  0007F8  5034               	movf	drawChar@size,w,c
  5015  0007FA  A4D8               	btfss	status,2,c
  5016  0007FC  D003               	goto	l3500
  5017  0007FE  0E01               	movlw	1
  5018  000800  6E34               	movwf	drawChar@size,c
  5019  000802  D000               	goto	l3500
  5020  000804                     l3500:
  5021                           
  5022                           ;ST7735_TFT.c: 486: if((c < ' ') || (c > '~'))
  5023  000804  0E1F               	movlw	31
  5024  000806  642F               	cpfsgt	drawChar@c,c
  5025  000808  D004               	goto	l3504
  5026  00080A  0E7E               	movlw	126
  5027  00080C  642F               	cpfsgt	drawChar@c,c
  5028  00080E  D003               	goto	l179
  5029  000810  D000               	goto	l3504
  5030  000812                     l3504:
  5031                           
  5032                           ;ST7735_TFT.c: 487: c = '?';
  5033  000812  0E3F               	movlw	63
  5034  000814  6E2F               	movwf	drawChar@c,c
  5035  000816                     l179:
  5036                           
  5037                           ;ST7735_TFT.c: 488: for(i=0; i<5; i++ ) {
  5038  000816  0E00               	movlw	0
  5039  000818  6E38               	movwf	drawChar@i,c
  5040  00081A                     l3506:
  5041  00081A  0E04               	movlw	4
  5042  00081C  6438               	cpfsgt	drawChar@i,c
  5043  00081E  D001               	goto	l3510
  5044  000820  D08D               	goto	l177
  5045  000822                     l3510:
  5046                           
  5047                           ;ST7735_TFT.c: 489: unsigned char line;
  5048                           ;ST7735_TFT.c: 490: if(c < 'S')
  5049  000822  0E53               	movlw	83
  5050  000824  602F               	cpfslt	drawChar@c,c
  5051  000826  D015               	goto	l3514
  5052                           
  5053                           ;ST7735_TFT.c: 491: line = font[(c - 32)*5 + i];
  5054  000828  0EE0               	movlw	224
  5055  00082A  242F               	addwf	drawChar@c,w,c
  5056  00082C  6E11               	movwf	___wmul@multiplier,c
  5057  00082E  6A12               	clrf	___wmul@multiplier+1,c
  5058  000830  0EFF               	movlw	255
  5059  000832  2212               	addwfc	___wmul@multiplier+1,f,c
  5060  000834  0E00               	movlw	0
  5061  000836  6E14               	movwf	___wmul@multiplicand+1,c
  5062  000838  0E05               	movlw	5
  5063  00083A  6E13               	movwf	___wmul@multiplicand,c
  5064  00083C  EC17  F00B         	call	___wmul	;wreg free
  5065  000840  5038               	movf	drawChar@i,w,c
  5066  000842  2611               	addwf	?___wmul,f,c
  5067  000844  0E00               	movlw	0
  5068  000846  2212               	addwfc	?___wmul+1,f,c
  5069  000848  0E7F               	movlw	low _font
  5070  00084A  2411               	addwf	?___wmul,w,c
  5071  00084C  6EF6               	movwf	tblptrl,c
  5072  00084E  0EFD               	movlw	high _font
  5073  000850  D014               	goto	L3
  5074  000852                     l3514:
  5075                           
  5076                           ;ST7735_TFT.c: 492: else
  5077                           ;ST7735_TFT.c: 493: line = font2[(c - 'S')*5 + i];
  5078  000852  0EAD               	movlw	173
  5079  000854  242F               	addwf	drawChar@c,w,c
  5080  000856  6E11               	movwf	___wmul@multiplier,c
  5081  000858  6A12               	clrf	___wmul@multiplier+1,c
  5082  00085A  0EFF               	movlw	255
  5083  00085C  2212               	addwfc	___wmul@multiplier+1,f,c
  5084  00085E  0E00               	movlw	0
  5085  000860  6E14               	movwf	___wmul@multiplicand+1,c
  5086  000862  0E05               	movlw	5
  5087  000864  6E13               	movwf	___wmul@multiplicand,c
  5088  000866  EC17  F00B         	call	___wmul	;wreg free
  5089  00086A  5038               	movf	drawChar@i,w,c
  5090  00086C  2611               	addwf	?___wmul,f,c
  5091  00086E  0E00               	movlw	0
  5092  000870  2212               	addwfc	?___wmul+1,f,c
  5093  000872  0E7E               	movlw	low _font2
  5094  000874  2411               	addwf	?___wmul,w,c
  5095  000876  6EF6               	movwf	tblptrl,c
  5096  000878  0EFE               	movlw	high _font2
  5097  00087A                     L3:
  5098  00087A  2012               	addwfc	?___wmul+1,w,c
  5099  00087C  6EF7               	movwf	tblptrh,c
  5100  00087E                     	if	0	;There are less than 3 active tblptr bytes
  5101  00087E                     	endif
  5102  00087E  0008               	tblrd		*
  5103  000880  CFF5 F035          	movff	tablat,drawChar@line
  5104  000884  D000               	goto	l3516
  5105  000886                     l3516:
  5106                           
  5107                           ;ST7735_TFT.c: 494: for(j=0; j<7; j++, line >>= 1) {
  5108  000886  0E00               	movlw	0
  5109  000888  6E37               	movwf	drawChar@j,c
  5110  00088A                     l3518:
  5111  00088A  0E06               	movlw	6
  5112  00088C  6437               	cpfsgt	drawChar@j,c
  5113  00088E  D001               	goto	l186
  5114  000890  D053               	goto	l3542
  5115  000892                     l186:
  5116                           
  5117                           ;ST7735_TFT.c: 495: if(line & 0x01) {
  5118  000892  A035               	btfss	drawChar@line,0,c
  5119  000894  D023               	goto	l3528
  5120                           
  5121                           ;ST7735_TFT.c: 496: if(size == 1) drawPixel(x+i, y+j, color);
  5122  000896  0434               	decf	drawChar@size,w,c
  5123  000898  A4D8               	btfss	status,2,c
  5124  00089A  D00C               	goto	l3526
  5125  00089C  502E               	movf	drawChar@y,w,c
  5126  00089E  2437               	addwf	drawChar@j,w,c
  5127  0008A0  6E18               	movwf	drawPixel@y,c
  5128  0008A2  C030  F019         	movff	drawChar@color,drawPixel@color
  5129  0008A6  C031  F01A         	movff	drawChar@color+1,drawPixel@color+1
  5130  0008AA  5036               	movf	drawChar@x,w,c
  5131  0008AC  2438               	addwf	drawChar@i,w,c
  5132  0008AE  ECEA  F00A         	call	_drawPixel
  5133  0008B2  D03E               	goto	l3536
  5134  0008B4                     l3526:
  5135                           
  5136                           ;ST7735_TFT.c: 497: else fillRect(x+(i*size), y+(j*size), size, size, color);
  5137  0008B4  5037               	movf	drawChar@j,w,c
  5138  0008B6  0234               	mulwf	drawChar@size,c
  5139  0008B8  50F3               	movf	prodl,w,c
  5140  0008BA  242E               	addwf	drawChar@y,w,c
  5141  0008BC  6E23               	movwf	fillRect@y,c
  5142  0008BE  C034  F024         	movff	drawChar@size,fillRect@w
  5143  0008C2  C034  F025         	movff	drawChar@size,fillRect@h
  5144  0008C6  C030  F026         	movff	drawChar@color,fillRect@color
  5145  0008CA  C031  F027         	movff	drawChar@color+1,fillRect@color+1
  5146  0008CE  5038               	movf	drawChar@i,w,c
  5147  0008D0  0234               	mulwf	drawChar@size,c
  5148  0008D2  50F3               	movf	prodl,w,c
  5149  0008D4  2436               	addwf	drawChar@x,w,c
  5150  0008D6  EC4E  F00A         	call	_fillRect
  5151                           
  5152                           ;ST7735_TFT.c: 498: }
  5153  0008DA  D02A               	goto	l3536
  5154  0008DC                     l3528:
  5155                           
  5156                           ;ST7735_TFT.c: 499: else if(bg != color) {
  5157  0008DC  5030               	movf	drawChar@color,w,c
  5158  0008DE  1832               	xorwf	drawChar@bg,w,c
  5159  0008E0  E104               	bnz	u2570
  5160  0008E2  5031               	movf	drawChar@color+1,w,c
  5161  0008E4  1833               	xorwf	drawChar@bg+1,w,c
  5162  0008E6  B4D8               	btfsc	status,2,c
  5163  0008E8  D023               	goto	l3536
  5164  0008EA                     u2570:
  5165                           
  5166                           ;ST7735_TFT.c: 500: if(size == 1) drawPixel(x+i, y+j, bg);
  5167  0008EA  0434               	decf	drawChar@size,w,c
  5168  0008EC  A4D8               	btfss	status,2,c
  5169  0008EE  D00C               	goto	l3534
  5170  0008F0  502E               	movf	drawChar@y,w,c
  5171  0008F2  2437               	addwf	drawChar@j,w,c
  5172  0008F4  6E18               	movwf	drawPixel@y,c
  5173  0008F6  C032  F019         	movff	drawChar@bg,drawPixel@color
  5174  0008FA  C033  F01A         	movff	drawChar@bg+1,drawPixel@color+1
  5175  0008FE  5036               	movf	drawChar@x,w,c
  5176  000900  2438               	addwf	drawChar@i,w,c
  5177  000902  ECEA  F00A         	call	_drawPixel
  5178  000906  D014               	goto	l3536
  5179  000908                     l3534:
  5180                           
  5181                           ;ST7735_TFT.c: 501: else fillRect(x+i*size, y+j*size, size, size, bg);
  5182  000908  5037               	movf	drawChar@j,w,c
  5183  00090A  0234               	mulwf	drawChar@size,c
  5184  00090C  50F3               	movf	prodl,w,c
  5185  00090E  242E               	addwf	drawChar@y,w,c
  5186  000910  6E23               	movwf	fillRect@y,c
  5187  000912  C034  F024         	movff	drawChar@size,fillRect@w
  5188  000916  C034  F025         	movff	drawChar@size,fillRect@h
  5189  00091A  C032  F026         	movff	drawChar@bg,fillRect@color
  5190  00091E  C033  F027         	movff	drawChar@bg+1,fillRect@color+1
  5191  000922  5038               	movf	drawChar@i,w,c
  5192  000924  0234               	mulwf	drawChar@size,c
  5193  000926  50F3               	movf	prodl,w,c
  5194  000928  2436               	addwf	drawChar@x,w,c
  5195  00092A  EC4E  F00A         	call	_fillRect
  5196  00092E  D000               	goto	l3536
  5197  000930                     l3536:
  5198  000930  2A37               	incf	drawChar@j,f,c
  5199  000932  90D8               	bcf	status,0,c
  5200  000934  3235               	rrcf	drawChar@line,f,c
  5201  000936  D7A9               	goto	l3518
  5202  000938                     l3542:
  5203  000938  2A38               	incf	drawChar@i,f,c
  5204  00093A  D76F               	goto	l3506
  5205  00093C                     l177:
  5206  00093C  0012               	return		;funcret
  5207  00093E                     __end_of_drawChar:
  5208                           	opt stack 0
  5209                           tblptru	equ	0xFF8
  5210                           tblptrh	equ	0xFF7
  5211                           tblptrl	equ	0xFF6
  5212                           tablat	equ	0xFF5
  5213                           prodh	equ	0xFF4
  5214                           prodl	equ	0xFF3
  5215                           intcon	equ	0xFF2
  5216                           intcon2	equ	0xFF1
  5217                           postinc0	equ	0xFEE
  5218                           wreg	equ	0xFE8
  5219                           postdec1	equ	0xFE5
  5220                           fsr1l	equ	0xFE1
  5221                           indf2	equ	0xFDF
  5222                           postinc2	equ	0xFDE
  5223                           postdec2	equ	0xFDD
  5224                           fsr2h	equ	0xFDA
  5225                           fsr2l	equ	0xFD9
  5226                           status	equ	0xFD8
  5227                           
  5228 ;; *************** function _fillRect *****************
  5229 ;; Defined at:
  5230 ;;		line 470 in file "ST7735_TFT.c"
  5231 ;; Parameters:    Size  Location     Type
  5232 ;;  x               1    wreg     unsigned char 
  5233 ;;  y               1   34[COMRAM] unsigned char 
  5234 ;;  w               1   35[COMRAM] unsigned char 
  5235 ;;  h               1   36[COMRAM] unsigned char 
  5236 ;;  color           2   37[COMRAM] unsigned int 
  5237 ;; Auto vars:     Size  Location     Type
  5238 ;;  x               1   42[COMRAM] unsigned char 
  5239 ;;  i               2   43[COMRAM] int 
  5240 ;; Return value:  Size  Location     Type
  5241 ;;		None               void
  5242 ;; Registers used:
  5243 ;;		wreg, status,2, status,0, cstack
  5244 ;; Tracked objects:
  5245 ;;		On entry : 0/0
  5246 ;;		On exit  : 0/0
  5247 ;;		Unchanged: 0/0
  5248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5249 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5250 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5251 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5252 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5253 ;;Total ram usage:       11 bytes
  5254 ;; Hardware stack levels used:    1
  5255 ;; Hardware stack levels required when called:    7
  5256 ;; This function calls:
  5257 ;;		_drawFastVLine
  5258 ;; This function is called by:
  5259 ;;		_drawChar
  5260 ;; This function uses a non-reentrant model
  5261 ;;
  5262                           
  5263                           	psect	text19
  5264  00149C                     __ptext19:
  5265                           	opt stack 0
  5266  00149C                     _fillRect:
  5267                           	opt stack 21
  5268                           
  5269                           ;incstack = 0
  5270                           ;fillRect@x stored from wreg
  5271  00149C  6E2B               	movwf	fillRect@x,c
  5272                           
  5273                           ;ST7735_TFT.c: 472: signed int i;
  5274                           ;ST7735_TFT.c: 474: for (i = x; i < x + w; i++)
  5275  00149E  C02B  F02C         	movff	fillRect@x,fillRect@i
  5276  0014A2  6A2D               	clrf	fillRect@i+1,c
  5277  0014A4  D00E               	goto	l3398
  5278  0014A6                     l3394:
  5279                           
  5280                           ;ST7735_TFT.c: 475: {
  5281                           ;ST7735_TFT.c: 476: drawFastVLine(i, y, h, color);
  5282  0014A6  C023  F018         	movff	fillRect@y,drawFastVLine@y
  5283  0014AA  C025  F019         	movff	fillRect@h,drawFastVLine@h
  5284  0014AE  C026  F01A         	movff	fillRect@color,drawFastVLine@color
  5285  0014B2  C027  F01B         	movff	fillRect@color+1,drawFastVLine@color+1
  5286  0014B6  502C               	movf	fillRect@i,w,c
  5287  0014B8  EC63  F008         	call	_drawFastVLine
  5288  0014BC  4A2C               	infsnz	fillRect@i,f,c
  5289  0014BE  2A2D               	incf	fillRect@i+1,f,c
  5290  0014C0  D000               	goto	l3398
  5291  0014C2                     l3398:
  5292  0014C2  5024               	movf	fillRect@w,w,c
  5293  0014C4  C02B  F028         	movff	fillRect@x,??_fillRect
  5294  0014C8  6A29               	clrf	(??_fillRect+1)& (0+255),c
  5295  0014CA  2628               	addwf	??_fillRect,f,c
  5296  0014CC  0E00               	movlw	0
  5297  0014CE  2229               	addwfc	??_fillRect+1,f,c
  5298  0014D0  5028               	movf	??_fillRect,w,c
  5299  0014D2  5C2C               	subwf	fillRect@i,w,c
  5300  0014D4  502D               	movf	fillRect@i+1,w,c
  5301  0014D6  0A80               	xorlw	128
  5302  0014D8  6E2A               	movwf	(??_fillRect+2)& (0+255),c
  5303  0014DA  5029               	movf	??_fillRect+1,w,c
  5304  0014DC  0A80               	xorlw	128
  5305  0014DE  582A               	subwfb	(??_fillRect+2)& (0+255),w,c
  5306  0014E0  A0D8               	btfss	status,0,c
  5307  0014E2  D7E1               	goto	l3394
  5308  0014E4  0012               	return		;funcret
  5309  0014E6                     __end_of_fillRect:
  5310                           	opt stack 0
  5311                           tblptru	equ	0xFF8
  5312                           tblptrh	equ	0xFF7
  5313                           tblptrl	equ	0xFF6
  5314                           tablat	equ	0xFF5
  5315                           prodh	equ	0xFF4
  5316                           prodl	equ	0xFF3
  5317                           intcon	equ	0xFF2
  5318                           intcon2	equ	0xFF1
  5319                           postinc0	equ	0xFEE
  5320                           wreg	equ	0xFE8
  5321                           postdec1	equ	0xFE5
  5322                           fsr1l	equ	0xFE1
  5323                           indf2	equ	0xFDF
  5324                           postinc2	equ	0xFDE
  5325                           postdec2	equ	0xFDD
  5326                           fsr2h	equ	0xFDA
  5327                           fsr2l	equ	0xFD9
  5328                           status	equ	0xFD8
  5329                           
  5330 ;; *************** function _drawFastVLine *****************
  5331 ;; Defined at:
  5332 ;;		line 449 in file "ST7735_TFT.c"
  5333 ;; Parameters:    Size  Location     Type
  5334 ;;  x               1    wreg     unsigned char 
  5335 ;;  y               1   23[COMRAM] unsigned char 
  5336 ;;  h               1   24[COMRAM] unsigned char 
  5337 ;;  color           2   25[COMRAM] unsigned int 
  5338 ;; Auto vars:     Size  Location     Type
  5339 ;;  x               1   33[COMRAM] unsigned char 
  5340 ;;  lo              1   32[COMRAM] unsigned char 
  5341 ;;  hi              1   31[COMRAM] unsigned char 
  5342 ;; Return value:  Size  Location     Type
  5343 ;;		None               void
  5344 ;; Registers used:
  5345 ;;		wreg, status,2, status,0, cstack
  5346 ;; Tracked objects:
  5347 ;;		On entry : 0/0
  5348 ;;		On exit  : 0/0
  5349 ;;		Unchanged: 0/0
  5350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5351 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5352 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5353 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5354 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5355 ;;Total ram usage:       11 bytes
  5356 ;; Hardware stack levels used:    1
  5357 ;; Hardware stack levels required when called:    6
  5358 ;; This function calls:
  5359 ;;		_setAddrWindow
  5360 ;;		_spiwrite
  5361 ;; This function is called by:
  5362 ;;		_fillRect
  5363 ;;		_fillCircleHelper
  5364 ;;		_fillCircle
  5365 ;;		_drawRect
  5366 ;; This function uses a non-reentrant model
  5367 ;;
  5368                           
  5369                           	psect	text20
  5370  0010C6                     __ptext20:
  5371                           	opt stack 0
  5372  0010C6                     _drawFastVLine:
  5373                           	opt stack 22
  5374                           
  5375                           ;incstack = 0
  5376                           ;drawFastVLine@x stored from wreg
  5377  0010C6  6E22               	movwf	drawFastVLine@x,c
  5378                           
  5379                           ;ST7735_TFT.c: 451: unsigned char hi, lo;
  5380                           ;ST7735_TFT.c: 452: if((x >= 128) || (y >= 160))
  5381  0010C8  0E80               	movlw	128
  5382  0010CA  6022               	cpfslt	drawFastVLine@x,c
  5383  0010CC  D03F               	goto	l161
  5384  0010CE  0E9F               	movlw	159
  5385  0010D0  6418               	cpfsgt	drawFastVLine@y,c
  5386  0010D2  D001               	goto	l3344
  5387                           
  5388                           ;ST7735_TFT.c: 453: return;
  5389  0010D4  D03B               	goto	l161
  5390  0010D6                     l3344:
  5391                           
  5392                           ;ST7735_TFT.c: 454: if((y + h - 1) >= 160)
  5393  0010D6  0EFF               	movlw	255
  5394  0010D8  6E1C               	movwf	??_drawFastVLine& (0+255),c
  5395  0010DA  0EFF               	movlw	255
  5396  0010DC  6E1D               	movwf	(??_drawFastVLine+1)& (0+255),c
  5397  0010DE  5019               	movf	drawFastVLine@h,w,c
  5398  0010E0  C018  F01E         	movff	drawFastVLine@y,??_drawFastVLine+2
  5399  0010E4  6A1F               	clrf	(??_drawFastVLine+3)& (0+255),c
  5400  0010E6  261E               	addwf	??_drawFastVLine+2,f,c
  5401  0010E8  0E00               	movlw	0
  5402  0010EA  221F               	addwfc	??_drawFastVLine+3,f,c
  5403  0010EC  501C               	movf	??_drawFastVLine,w,c
  5404  0010EE  261E               	addwf	??_drawFastVLine+2,f,c
  5405  0010F0  501D               	movf	??_drawFastVLine+1,w,c
  5406  0010F2  221F               	addwfc	??_drawFastVLine+3,f,c
  5407  0010F4  BE1F               	btfsc	??_drawFastVLine+3,7,c
  5408  0010F6  D00B               	goto	l3348
  5409  0010F8  501F               	movf	??_drawFastVLine+3,w,c
  5410  0010FA  E104               	bnz	u2410
  5411  0010FC  0EA0               	movlw	160
  5412  0010FE  5C1E               	subwf	??_drawFastVLine+2,w,c
  5413  001100  A0D8               	btfss	status,0,c
  5414  001102  D005               	goto	l3348
  5415  001104                     u2410:
  5416                           
  5417                           ;ST7735_TFT.c: 455: h = 160 - y;
  5418  001104  5018               	movf	drawFastVLine@y,w,c
  5419  001106  0800               	sublw	0
  5420  001108  0FA0               	addlw	160
  5421  00110A  6E19               	movwf	drawFastVLine@h,c
  5422  00110C  D000               	goto	l3348
  5423  00110E                     l3348:
  5424                           
  5425                           ;ST7735_TFT.c: 456: hi = color >> 8; lo = color;
  5426  00110E  501B               	movf	drawFastVLine@color+1,w,c
  5427  001110  6E20               	movwf	drawFastVLine@hi,c
  5428  001112  C01A  F021         	movff	drawFastVLine@color,drawFastVLine@lo
  5429                           
  5430                           ;ST7735_TFT.c: 457: setAddrWindow(x, y, x, y + h - 1);
  5431  001116  C018  F014         	movff	drawFastVLine@y,setAddrWindow@y0
  5432  00111A  C022  F015         	movff	drawFastVLine@x,setAddrWindow@x1
  5433  00111E  5018               	movf	drawFastVLine@y,w,c
  5434  001120  2419               	addwf	drawFastVLine@h,w,c
  5435  001122  6E1C               	movwf	??_drawFastVLine& (0+255),c
  5436  001124  041C               	decf	??_drawFastVLine,w,c
  5437  001126  6E16               	movwf	setAddrWindow@y1,c
  5438  001128  5022               	movf	drawFastVLine@x,w,c
  5439  00112A  EC27  F00A         	call	_setAddrWindow
  5440                           
  5441                           ;ST7735_TFT.c: 458: PORTDbits.RD0 = 1;
  5442  00112E  8083               	bsf	3971,0,c	;volatile
  5443                           
  5444                           ;ST7735_TFT.c: 459: PORTDbits.RD1 = 0;
  5445  001130  9283               	bcf	3971,1,c	;volatile
  5446                           
  5447                           ;ST7735_TFT.c: 461: while (h--) {
  5448  001132  D007               	goto	l3360
  5449  001134                     l3358:
  5450                           
  5451                           ;ST7735_TFT.c: 462: spiwrite(hi);
  5452  001134  5020               	movf	drawFastVLine@hi,w,c
  5453  001136  EC6C  F00B         	call	_spiwrite
  5454                           
  5455                           ;ST7735_TFT.c: 463: spiwrite(lo);
  5456  00113A  5021               	movf	drawFastVLine@lo,w,c
  5457  00113C  EC6C  F00B         	call	_spiwrite
  5458  001140  D000               	goto	l3360
  5459  001142                     l3360:
  5460  001142  0619               	decf	drawFastVLine@h,f,c
  5461  001144  2819               	incf	drawFastVLine@h,w,c
  5462  001146  A4D8               	btfss	status,2,c
  5463  001148  D7F5               	goto	l3358
  5464                           
  5465                           ;ST7735_TFT.c: 464: }
  5466                           ;ST7735_TFT.c: 465: PORTDbits.RD1 = 1;
  5467  00114A  8283               	bsf	3971,1,c	;volatile
  5468  00114C                     l161:
  5469  00114C  0012               	return		;funcret
  5470  00114E                     __end_of_drawFastVLine:
  5471                           	opt stack 0
  5472                           tblptru	equ	0xFF8
  5473                           tblptrh	equ	0xFF7
  5474                           tblptrl	equ	0xFF6
  5475                           tablat	equ	0xFF5
  5476                           prodh	equ	0xFF4
  5477                           prodl	equ	0xFF3
  5478                           intcon	equ	0xFF2
  5479                           intcon2	equ	0xFF1
  5480                           postinc0	equ	0xFEE
  5481                           wreg	equ	0xFE8
  5482                           postdec1	equ	0xFE5
  5483                           fsr1l	equ	0xFE1
  5484                           indf2	equ	0xFDF
  5485                           postinc2	equ	0xFDE
  5486                           postdec2	equ	0xFDD
  5487                           fsr2h	equ	0xFDA
  5488                           fsr2l	equ	0xFD9
  5489                           status	equ	0xFD8
  5490                           
  5491 ;; *************** function _drawPixel *****************
  5492 ;; Defined at:
  5493 ;;		line 440 in file "ST7735_TFT.c"
  5494 ;; Parameters:    Size  Location     Type
  5495 ;;  x               1    wreg     unsigned char 
  5496 ;;  y               1   23[COMRAM] unsigned char 
  5497 ;;  color           2   24[COMRAM] unsigned int 
  5498 ;; Auto vars:     Size  Location     Type
  5499 ;;  x               1   26[COMRAM] unsigned char 
  5500 ;; Return value:  Size  Location     Type
  5501 ;;		None               void
  5502 ;; Registers used:
  5503 ;;		wreg, status,2, status,0, cstack
  5504 ;; Tracked objects:
  5505 ;;		On entry : 0/0
  5506 ;;		On exit  : 0/0
  5507 ;;		Unchanged: 0/0
  5508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5509 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5510 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5511 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5512 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5513 ;;Total ram usage:        4 bytes
  5514 ;; Hardware stack levels used:    1
  5515 ;; Hardware stack levels required when called:    6
  5516 ;; This function calls:
  5517 ;;		_setAddrWindow
  5518 ;;		_write_data
  5519 ;; This function is called by:
  5520 ;;		_drawChar
  5521 ;;		_drawCircle
  5522 ;;		_drawCircleHelper
  5523 ;; This function uses a non-reentrant model
  5524 ;;
  5525                           
  5526                           	psect	text21
  5527  0015D4                     __ptext21:
  5528                           	opt stack 0
  5529  0015D4                     _drawPixel:
  5530                           	opt stack 22
  5531                           
  5532                           ;incstack = 0
  5533                           ;drawPixel@x stored from wreg
  5534  0015D4  6E1B               	movwf	drawPixel@x,c
  5535                           
  5536                           ;ST7735_TFT.c: 442: if((x >= 128) || (y >= 160))
  5537  0015D6  0E80               	movlw	128
  5538  0015D8  601B               	cpfslt	drawPixel@x,c
  5539  0015DA  D013               	goto	l155
  5540  0015DC  0E9F               	movlw	159
  5541  0015DE  6418               	cpfsgt	drawPixel@y,c
  5542  0015E0  D001               	goto	l3386
  5543                           
  5544                           ;ST7735_TFT.c: 443: return;
  5545  0015E2  D00F               	goto	l155
  5546  0015E4                     l3386:
  5547                           
  5548                           ;ST7735_TFT.c: 444: setAddrWindow(x,y,x+1,y+1);
  5549  0015E4  C018  F014         	movff	drawPixel@y,setAddrWindow@y0
  5550  0015E8  281B               	incf	drawPixel@x,w,c
  5551  0015EA  6E15               	movwf	setAddrWindow@x1,c
  5552  0015EC  2818               	incf	drawPixel@y,w,c
  5553  0015EE  6E16               	movwf	setAddrWindow@y1,c
  5554  0015F0  501B               	movf	drawPixel@x,w,c
  5555  0015F2  EC27  F00A         	call	_setAddrWindow
  5556                           
  5557                           ;ST7735_TFT.c: 445: write_data(color >> 8);
  5558  0015F6  501A               	movf	drawPixel@color+1,w,c
  5559  0015F8  EC88  F00B         	call	_write_data
  5560                           
  5561                           ;ST7735_TFT.c: 446: write_data(color & 0xFF);
  5562  0015FC  5019               	movf	drawPixel@color,w,c
  5563  0015FE  EC88  F00B         	call	_write_data
  5564  001602                     l155:
  5565  001602  0012               	return		;funcret
  5566  001604                     __end_of_drawPixel:
  5567                           	opt stack 0
  5568                           tblptru	equ	0xFF8
  5569                           tblptrh	equ	0xFF7
  5570                           tblptrl	equ	0xFF6
  5571                           tablat	equ	0xFF5
  5572                           prodh	equ	0xFF4
  5573                           prodl	equ	0xFF3
  5574                           intcon	equ	0xFF2
  5575                           intcon2	equ	0xFF1
  5576                           postinc0	equ	0xFEE
  5577                           wreg	equ	0xFE8
  5578                           postdec1	equ	0xFE5
  5579                           fsr1l	equ	0xFE1
  5580                           indf2	equ	0xFDF
  5581                           postinc2	equ	0xFDE
  5582                           postdec2	equ	0xFDD
  5583                           fsr2h	equ	0xFDA
  5584                           fsr2l	equ	0xFD9
  5585                           status	equ	0xFD8
  5586                           
  5587 ;; *************** function _setAddrWindow *****************
  5588 ;; Defined at:
  5589 ;;		line 425 in file "ST7735_TFT.c"
  5590 ;; Parameters:    Size  Location     Type
  5591 ;;  x0              1    wreg     unsigned char 
  5592 ;;  y0              1   19[COMRAM] unsigned char 
  5593 ;;  x1              1   20[COMRAM] unsigned char 
  5594 ;;  y1              1   21[COMRAM] unsigned char 
  5595 ;; Auto vars:     Size  Location     Type
  5596 ;;  x0              1   22[COMRAM] unsigned char 
  5597 ;; Return value:  Size  Location     Type
  5598 ;;		None               void
  5599 ;; Registers used:
  5600 ;;		wreg, status,2, status,0, cstack
  5601 ;; Tracked objects:
  5602 ;;		On entry : 0/0
  5603 ;;		On exit  : 0/0
  5604 ;;		Unchanged: 0/0
  5605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5606 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5607 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5608 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5609 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5610 ;;Total ram usage:        4 bytes
  5611 ;; Hardware stack levels used:    1
  5612 ;; Hardware stack levels required when called:    5
  5613 ;; This function calls:
  5614 ;;		_write_command
  5615 ;;		_write_data
  5616 ;; This function is called by:
  5617 ;;		_drawPixel
  5618 ;;		_drawFastVLine
  5619 ;;		_fillRectangle
  5620 ;;		_drawFastHLine
  5621 ;; This function uses a non-reentrant model
  5622 ;;
  5623                           
  5624                           	psect	text22
  5625  00144E                     __ptext22:
  5626                           	opt stack 0
  5627  00144E                     _setAddrWindow:
  5628                           	opt stack 22
  5629                           
  5630                           ;incstack = 0
  5631                           ;setAddrWindow@x0 stored from wreg
  5632  00144E  6E17               	movwf	setAddrWindow@x0,c
  5633                           
  5634                           ;ST7735_TFT.c: 427: write_command(0x2A);
  5635  001450  0E2A               	movlw	42
  5636  001452  EC90  F00B         	call	_write_command
  5637                           
  5638                           ;ST7735_TFT.c: 428: write_data(0);
  5639  001456  0E00               	movlw	0
  5640  001458  EC88  F00B         	call	_write_data
  5641                           
  5642                           ;ST7735_TFT.c: 429: write_data(x0 + colstart);
  5643  00145C  5017               	movf	setAddrWindow@x0,w,c
  5644  00145E  246D               	addwf	_colstart,w,c
  5645  001460  EC88  F00B         	call	_write_data
  5646                           
  5647                           ;ST7735_TFT.c: 430: write_data(0);
  5648  001464  0E00               	movlw	0
  5649  001466  EC88  F00B         	call	_write_data
  5650                           
  5651                           ;ST7735_TFT.c: 431: write_data(x1 + colstart);
  5652  00146A  5015               	movf	setAddrWindow@x1,w,c
  5653  00146C  246D               	addwf	_colstart,w,c
  5654  00146E  EC88  F00B         	call	_write_data
  5655                           
  5656                           ;ST7735_TFT.c: 432: write_command(0x2B);
  5657  001472  0E2B               	movlw	43
  5658  001474  EC90  F00B         	call	_write_command
  5659                           
  5660                           ;ST7735_TFT.c: 433: write_data(0);
  5661  001478  0E00               	movlw	0
  5662  00147A  EC88  F00B         	call	_write_data
  5663                           
  5664                           ;ST7735_TFT.c: 434: write_data(y0 + rowstart);
  5665  00147E  5014               	movf	setAddrWindow@y0,w,c
  5666  001480  246F               	addwf	_rowstart,w,c
  5667  001482  EC88  F00B         	call	_write_data
  5668                           
  5669                           ;ST7735_TFT.c: 435: write_data(0);
  5670  001486  0E00               	movlw	0
  5671  001488  EC88  F00B         	call	_write_data
  5672                           
  5673                           ;ST7735_TFT.c: 436: write_data(y1 + rowstart);
  5674  00148C  5016               	movf	setAddrWindow@y1,w,c
  5675  00148E  246F               	addwf	_rowstart,w,c
  5676  001490  EC88  F00B         	call	_write_data
  5677                           
  5678                           ;ST7735_TFT.c: 437: write_command(0x2C);
  5679  001494  0E2C               	movlw	44
  5680  001496  EC90  F00B         	call	_write_command
  5681  00149A  0012               	return		;funcret
  5682  00149C                     __end_of_setAddrWindow:
  5683                           	opt stack 0
  5684                           tblptru	equ	0xFF8
  5685                           tblptrh	equ	0xFF7
  5686                           tblptrl	equ	0xFF6
  5687                           tablat	equ	0xFF5
  5688                           prodh	equ	0xFF4
  5689                           prodl	equ	0xFF3
  5690                           intcon	equ	0xFF2
  5691                           intcon2	equ	0xFF1
  5692                           postinc0	equ	0xFEE
  5693                           wreg	equ	0xFE8
  5694                           postdec1	equ	0xFE5
  5695                           fsr1l	equ	0xFE1
  5696                           indf2	equ	0xFDF
  5697                           postinc2	equ	0xFDE
  5698                           postdec2	equ	0xFDD
  5699                           fsr2h	equ	0xFDA
  5700                           fsr2l	equ	0xFD9
  5701                           status	equ	0xFD8
  5702                           
  5703 ;; *************** function _TFT_GreenTab_Initialize *****************
  5704 ;; Defined at:
  5705 ;;		line 677 in file "ST7735_TFT.c"
  5706 ;; Parameters:    Size  Location     Type
  5707 ;;		None
  5708 ;; Auto vars:     Size  Location     Type
  5709 ;;		None
  5710 ;; Return value:  Size  Location     Type
  5711 ;;		None               void
  5712 ;; Registers used:
  5713 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5714 ;; Tracked objects:
  5715 ;;		On entry : 0/0
  5716 ;;		On exit  : 0/0
  5717 ;;		Unchanged: 0/0
  5718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5719 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5720 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5721 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5722 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5723 ;;Total ram usage:        0 bytes
  5724 ;; Hardware stack levels used:    1
  5725 ;; Hardware stack levels required when called:    6
  5726 ;; This function calls:
  5727 ;;		_Rcmd1
  5728 ;;		_Rcmd2red
  5729 ;;		_Rcmd3
  5730 ;;		_write_command
  5731 ;;		_write_data
  5732 ;; This function is called by:
  5733 ;;		_Initialize_Screen
  5734 ;; This function uses a non-reentrant model
  5735 ;;
  5736                           
  5737                           	psect	text23
  5738  001604                     __ptext23:
  5739                           	opt stack 0
  5740  001604                     _TFT_GreenTab_Initialize:
  5741                           	opt stack 23
  5742                           
  5743                           ;ST7735_TFT.c: 679: PORTDbits.RD1 = 1;
  5744                           
  5745                           ;incstack = 0
  5746  001604  8283               	bsf	3971,1,c	;volatile
  5747                           
  5748                           ;ST7735_TFT.c: 680: PORTDbits.RD0 = 0;
  5749  001606  9083               	bcf	3971,0,c	;volatile
  5750                           
  5751                           ;ST7735_TFT.c: 682: SSPSTAT=0x80;
  5752  001608  0E80               	movlw	128
  5753  00160A  6EC7               	movwf	4039,c	;volatile
  5754                           
  5755                           ;ST7735_TFT.c: 683: SSPCON1=0x30;
  5756  00160C  0E30               	movlw	48
  5757  00160E  6EC6               	movwf	4038,c	;volatile
  5758                           
  5759                           ;ST7735_TFT.c: 686: Rcmd1();
  5760  001610  ECE2  F005         	call	_Rcmd1	;wreg free
  5761                           
  5762                           ;ST7735_TFT.c: 687: Rcmd2red();
  5763  001614  ECB2  F00A         	call	_Rcmd2red	;wreg free
  5764                           
  5765                           ;ST7735_TFT.c: 688: Rcmd3();
  5766  001618  ECEF  F006         	call	_Rcmd3	;wreg free
  5767                           
  5768                           ;ST7735_TFT.c: 689: write_command(0x36);
  5769  00161C  0E36               	movlw	54
  5770  00161E  EC90  F00B         	call	_write_command
  5771                           
  5772                           ;ST7735_TFT.c: 690: write_data(0xC0);
  5773  001622  0EC0               	movlw	192
  5774  001624  EC88  F00B         	call	_write_data
  5775                           
  5776                           ;ST7735_TFT.c: 691: _tft_type = 1;
  5777  001628  0E01               	movlw	1
  5778  00162A  6E6B               	movwf	__tft_type,c
  5779  00162C  0012               	return		;funcret
  5780  00162E                     __end_of_TFT_GreenTab_Initialize:
  5781                           	opt stack 0
  5782                           tblptru	equ	0xFF8
  5783                           tblptrh	equ	0xFF7
  5784                           tblptrl	equ	0xFF6
  5785                           tablat	equ	0xFF5
  5786                           prodh	equ	0xFF4
  5787                           prodl	equ	0xFF3
  5788                           intcon	equ	0xFF2
  5789                           intcon2	equ	0xFF1
  5790                           postinc0	equ	0xFEE
  5791                           wreg	equ	0xFE8
  5792                           postdec1	equ	0xFE5
  5793                           fsr1l	equ	0xFE1
  5794                           indf2	equ	0xFDF
  5795                           postinc2	equ	0xFDE
  5796                           postdec2	equ	0xFDD
  5797                           fsr2h	equ	0xFDA
  5798                           fsr2l	equ	0xFD9
  5799                           status	equ	0xFD8
  5800                           
  5801 ;; *************** function _Rcmd3 *****************
  5802 ;; Defined at:
  5803 ;;		line 371 in file "ST7735_TFT.c"
  5804 ;; Parameters:    Size  Location     Type
  5805 ;;		None
  5806 ;; Auto vars:     Size  Location     Type
  5807 ;;		None
  5808 ;; Return value:  Size  Location     Type
  5809 ;;		None               void
  5810 ;; Registers used:
  5811 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5812 ;; Tracked objects:
  5813 ;;		On entry : 0/0
  5814 ;;		On exit  : 0/0
  5815 ;;		Unchanged: 0/0
  5816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5818 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5819 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5820 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5821 ;;Total ram usage:        0 bytes
  5822 ;; Hardware stack levels used:    1
  5823 ;; Hardware stack levels required when called:    5
  5824 ;; This function calls:
  5825 ;;		_delay_ms
  5826 ;;		_write_command
  5827 ;;		_write_data
  5828 ;; This function is called by:
  5829 ;;		_TFT_GreenTab_Initialize
  5830 ;;		_TFT_BlackTab_Initialize
  5831 ;; This function uses a non-reentrant model
  5832 ;;
  5833                           
  5834                           	psect	text24
  5835  000DDE                     __ptext24:
  5836                           	opt stack 0
  5837  000DDE                     _Rcmd3:
  5838                           	opt stack 23
  5839                           
  5840                           ;ST7735_TFT.c: 373: write_command(0xE0);
  5841                           
  5842                           ;incstack = 0
  5843  000DDE  0EE0               	movlw	224
  5844  000DE0  EC90  F00B         	call	_write_command
  5845                           
  5846                           ;ST7735_TFT.c: 374: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
  5847  000DE4  0E02               	movlw	2
  5848  000DE6  EC88  F00B         	call	_write_data
  5849  000DEA  0E1C               	movlw	28
  5850  000DEC  EC88  F00B         	call	_write_data
  5851  000DF0  0E07               	movlw	7
  5852  000DF2  EC88  F00B         	call	_write_data
  5853  000DF6  0E12               	movlw	18
  5854  000DF8  EC88  F00B         	call	_write_data
  5855                           
  5856                           ;ST7735_TFT.c: 375: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
  5857  000DFC  0E37               	movlw	55
  5858  000DFE  EC88  F00B         	call	_write_data
  5859  000E02  0E32               	movlw	50
  5860  000E04  EC88  F00B         	call	_write_data
  5861  000E08  0E29               	movlw	41
  5862  000E0A  EC88  F00B         	call	_write_data
  5863  000E0E  0E2D               	movlw	45
  5864  000E10  EC88  F00B         	call	_write_data
  5865                           
  5866                           ;ST7735_TFT.c: 376: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
  5867  000E14  0E29               	movlw	41
  5868  000E16  EC88  F00B         	call	_write_data
  5869  000E1A  0E25               	movlw	37
  5870  000E1C  EC88  F00B         	call	_write_data
  5871  000E20  0E2B               	movlw	43
  5872  000E22  EC88  F00B         	call	_write_data
  5873  000E26  0E39               	movlw	57
  5874  000E28  EC88  F00B         	call	_write_data
  5875                           
  5876                           ;ST7735_TFT.c: 377: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
  5877  000E2C  0E00               	movlw	0
  5878  000E2E  EC88  F00B         	call	_write_data
  5879  000E32  0E01               	movlw	1
  5880  000E34  EC88  F00B         	call	_write_data
  5881  000E38  0E03               	movlw	3
  5882  000E3A  EC88  F00B         	call	_write_data
  5883  000E3E  0E10               	movlw	16
  5884  000E40  EC88  F00B         	call	_write_data
  5885                           
  5886                           ;ST7735_TFT.c: 378: write_command(0xE1);
  5887  000E44  0EE1               	movlw	225
  5888  000E46  EC90  F00B         	call	_write_command
  5889                           
  5890                           ;ST7735_TFT.c: 379: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
  5891  000E4A  0E03               	movlw	3
  5892  000E4C  EC88  F00B         	call	_write_data
  5893  000E50  0E1D               	movlw	29
  5894  000E52  EC88  F00B         	call	_write_data
  5895  000E56  0E07               	movlw	7
  5896  000E58  EC88  F00B         	call	_write_data
  5897  000E5C  0E06               	movlw	6
  5898  000E5E  EC88  F00B         	call	_write_data
  5899                           
  5900                           ;ST7735_TFT.c: 380: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
  5901  000E62  0E2E               	movlw	46
  5902  000E64  EC88  F00B         	call	_write_data
  5903  000E68  0E2C               	movlw	44
  5904  000E6A  EC88  F00B         	call	_write_data
  5905  000E6E  0E29               	movlw	41
  5906  000E70  EC88  F00B         	call	_write_data
  5907  000E74  0E2D               	movlw	45
  5908  000E76  EC88  F00B         	call	_write_data
  5909                           
  5910                           ;ST7735_TFT.c: 381: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
  5911  000E7A  0E2E               	movlw	46
  5912  000E7C  EC88  F00B         	call	_write_data
  5913  000E80  0E2E               	movlw	46
  5914  000E82  EC88  F00B         	call	_write_data
  5915  000E86  0E37               	movlw	55
  5916  000E88  EC88  F00B         	call	_write_data
  5917  000E8C  0E3F               	movlw	63
  5918  000E8E  EC88  F00B         	call	_write_data
  5919                           
  5920                           ;ST7735_TFT.c: 382: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
  5921  000E92  0E00               	movlw	0
  5922  000E94  EC88  F00B         	call	_write_data
  5923  000E98  0E00               	movlw	0
  5924  000E9A  EC88  F00B         	call	_write_data
  5925  000E9E  0E02               	movlw	2
  5926  000EA0  EC88  F00B         	call	_write_data
  5927  000EA4  0E10               	movlw	16
  5928  000EA6  EC88  F00B         	call	_write_data
  5929                           
  5930                           ;ST7735_TFT.c: 383: write_command(0x13);
  5931  000EAA  0E13               	movlw	19
  5932  000EAC  EC90  F00B         	call	_write_command
  5933                           
  5934                           ;ST7735_TFT.c: 384: delay_ms(10);
  5935  000EB0  0E00               	movlw	0
  5936  000EB2  6E18               	movwf	delay_ms@ms+1,c
  5937  000EB4  0E0A               	movlw	10
  5938  000EB6  6E17               	movwf	delay_ms@ms,c
  5939  000EB8  ECFE  F009         	call	_delay_ms	;wreg free
  5940                           
  5941                           ;ST7735_TFT.c: 385: write_command(0x29);
  5942  000EBC  0E29               	movlw	41
  5943  000EBE  EC90  F00B         	call	_write_command
  5944                           
  5945                           ;ST7735_TFT.c: 386: delay_ms(100);
  5946  000EC2  0E00               	movlw	0
  5947  000EC4  6E18               	movwf	delay_ms@ms+1,c
  5948  000EC6  0E64               	movlw	100
  5949  000EC8  6E17               	movwf	delay_ms@ms,c
  5950  000ECA  ECFE  F009         	call	_delay_ms	;wreg free
  5951  000ECE  0012               	return		;funcret
  5952  000ED0                     __end_of_Rcmd3:
  5953                           	opt stack 0
  5954                           tblptru	equ	0xFF8
  5955                           tblptrh	equ	0xFF7
  5956                           tblptrl	equ	0xFF6
  5957                           tablat	equ	0xFF5
  5958                           prodh	equ	0xFF4
  5959                           prodl	equ	0xFF3
  5960                           intcon	equ	0xFF2
  5961                           intcon2	equ	0xFF1
  5962                           postinc0	equ	0xFEE
  5963                           wreg	equ	0xFE8
  5964                           postdec1	equ	0xFE5
  5965                           fsr1l	equ	0xFE1
  5966                           indf2	equ	0xFDF
  5967                           postinc2	equ	0xFDE
  5968                           postdec2	equ	0xFDD
  5969                           fsr2h	equ	0xFDA
  5970                           fsr2l	equ	0xFD9
  5971                           status	equ	0xFD8
  5972                           
  5973 ;; *************** function _Rcmd2red *****************
  5974 ;; Defined at:
  5975 ;;		line 361 in file "ST7735_TFT.c"
  5976 ;; Parameters:    Size  Location     Type
  5977 ;;		None
  5978 ;; Auto vars:     Size  Location     Type
  5979 ;;		None
  5980 ;; Return value:  Size  Location     Type
  5981 ;;		None               void
  5982 ;; Registers used:
  5983 ;;		wreg, status,2, cstack
  5984 ;; Tracked objects:
  5985 ;;		On entry : 0/0
  5986 ;;		On exit  : 0/0
  5987 ;;		Unchanged: 0/0
  5988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5989 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5990 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5991 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5992 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5993 ;;Total ram usage:        0 bytes
  5994 ;; Hardware stack levels used:    1
  5995 ;; Hardware stack levels required when called:    5
  5996 ;; This function calls:
  5997 ;;		_write_command
  5998 ;;		_write_data
  5999 ;; This function is called by:
  6000 ;;		_TFT_GreenTab_Initialize
  6001 ;; This function uses a non-reentrant model
  6002 ;;
  6003                           
  6004                           	psect	text25
  6005  001564                     __ptext25:
  6006                           	opt stack 0
  6007  001564                     _Rcmd2red:
  6008                           	opt stack 23
  6009                           
  6010                           ;ST7735_TFT.c: 363: write_command(0x2A);
  6011                           
  6012                           ;incstack = 0
  6013  001564  0E2A               	movlw	42
  6014  001566  EC90  F00B         	call	_write_command
  6015                           
  6016                           ;ST7735_TFT.c: 364: write_data(0x00); write_data(0x00);
  6017  00156A  0E00               	movlw	0
  6018  00156C  EC88  F00B         	call	_write_data
  6019  001570  0E00               	movlw	0
  6020  001572  EC88  F00B         	call	_write_data
  6021                           
  6022                           ;ST7735_TFT.c: 365: write_data(0x00); write_data(0x7F);
  6023  001576  0E00               	movlw	0
  6024  001578  EC88  F00B         	call	_write_data
  6025  00157C  0E7F               	movlw	127
  6026  00157E  EC88  F00B         	call	_write_data
  6027                           
  6028                           ;ST7735_TFT.c: 366: write_command(0x2B);
  6029  001582  0E2B               	movlw	43
  6030  001584  EC90  F00B         	call	_write_command
  6031                           
  6032                           ;ST7735_TFT.c: 367: write_data(0x00); write_data(0x00);
  6033  001588  0E00               	movlw	0
  6034  00158A  EC88  F00B         	call	_write_data
  6035  00158E  0E00               	movlw	0
  6036  001590  EC88  F00B         	call	_write_data
  6037                           
  6038                           ;ST7735_TFT.c: 368: write_data(0x00); write_data(0x9F);
  6039  001594  0E00               	movlw	0
  6040  001596  EC88  F00B         	call	_write_data
  6041  00159A  0E9F               	movlw	159
  6042  00159C  EC88  F00B         	call	_write_data
  6043  0015A0  0012               	return		;funcret
  6044  0015A2                     __end_of_Rcmd2red:
  6045                           	opt stack 0
  6046                           tblptru	equ	0xFF8
  6047                           tblptrh	equ	0xFF7
  6048                           tblptrl	equ	0xFF6
  6049                           tablat	equ	0xFF5
  6050                           prodh	equ	0xFF4
  6051                           prodl	equ	0xFF3
  6052                           intcon	equ	0xFF2
  6053                           intcon2	equ	0xFF1
  6054                           postinc0	equ	0xFEE
  6055                           wreg	equ	0xFE8
  6056                           postdec1	equ	0xFE5
  6057                           fsr1l	equ	0xFE1
  6058                           indf2	equ	0xFDF
  6059                           postinc2	equ	0xFDE
  6060                           postdec2	equ	0xFDD
  6061                           fsr2h	equ	0xFDA
  6062                           fsr2l	equ	0xFD9
  6063                           status	equ	0xFD8
  6064                           
  6065 ;; *************** function _Rcmd1 *****************
  6066 ;; Defined at:
  6067 ;;		line 314 in file "ST7735_TFT.c"
  6068 ;; Parameters:    Size  Location     Type
  6069 ;;		None
  6070 ;; Auto vars:     Size  Location     Type
  6071 ;;		None
  6072 ;; Return value:  Size  Location     Type
  6073 ;;		None               void
  6074 ;; Registers used:
  6075 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6076 ;; Tracked objects:
  6077 ;;		On entry : 0/0
  6078 ;;		On exit  : 0/0
  6079 ;;		Unchanged: 0/0
  6080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6081 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6082 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6083 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6084 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6085 ;;Total ram usage:        0 bytes
  6086 ;; Hardware stack levels used:    1
  6087 ;; Hardware stack levels required when called:    5
  6088 ;; This function calls:
  6089 ;;		_delay_ms
  6090 ;;		_write_command
  6091 ;;		_write_data
  6092 ;; This function is called by:
  6093 ;;		_TFT_GreenTab_Initialize
  6094 ;;		_TFT_BlackTab_Initialize
  6095 ;; This function uses a non-reentrant model
  6096 ;;
  6097                           
  6098                           	psect	text26
  6099  000BC4                     __ptext26:
  6100                           	opt stack 0
  6101  000BC4                     _Rcmd1:
  6102                           	opt stack 23
  6103                           
  6104                           ;ST7735_TFT.c: 316: write_command(0x01);
  6105                           
  6106                           ;incstack = 0
  6107  000BC4  0E01               	movlw	1
  6108  000BC6  EC90  F00B         	call	_write_command
  6109                           
  6110                           ;ST7735_TFT.c: 317: delay_ms(150);
  6111  000BCA  0E00               	movlw	0
  6112  000BCC  6E18               	movwf	delay_ms@ms+1,c
  6113  000BCE  0E96               	movlw	150
  6114  000BD0  6E17               	movwf	delay_ms@ms,c
  6115  000BD2  ECFE  F009         	call	_delay_ms	;wreg free
  6116                           
  6117                           ;ST7735_TFT.c: 318: write_command(0x11);
  6118  000BD6  0E11               	movlw	17
  6119  000BD8  EC90  F00B         	call	_write_command
  6120                           
  6121                           ;ST7735_TFT.c: 319: delay_ms(500);
  6122  000BDC  0E01               	movlw	1
  6123  000BDE  6E18               	movwf	delay_ms@ms+1,c
  6124  000BE0  0EF4               	movlw	244
  6125  000BE2  6E17               	movwf	delay_ms@ms,c
  6126  000BE4  ECFE  F009         	call	_delay_ms	;wreg free
  6127                           
  6128                           ;ST7735_TFT.c: 320: write_command(0xB1);
  6129  000BE8  0EB1               	movlw	177
  6130  000BEA  EC90  F00B         	call	_write_command
  6131                           
  6132                           ;ST7735_TFT.c: 321: write_data(0x01);
  6133  000BEE  0E01               	movlw	1
  6134  000BF0  EC88  F00B         	call	_write_data
  6135                           
  6136                           ;ST7735_TFT.c: 322: write_data(0x2C);
  6137  000BF4  0E2C               	movlw	44
  6138  000BF6  EC88  F00B         	call	_write_data
  6139                           
  6140                           ;ST7735_TFT.c: 323: write_data(0x2D);
  6141  000BFA  0E2D               	movlw	45
  6142  000BFC  EC88  F00B         	call	_write_data
  6143                           
  6144                           ;ST7735_TFT.c: 324: write_command(0xB2);
  6145  000C00  0EB2               	movlw	178
  6146  000C02  EC90  F00B         	call	_write_command
  6147                           
  6148                           ;ST7735_TFT.c: 325: write_data(0x01);
  6149  000C06  0E01               	movlw	1
  6150  000C08  EC88  F00B         	call	_write_data
  6151                           
  6152                           ;ST7735_TFT.c: 326: write_data(0x2C);
  6153  000C0C  0E2C               	movlw	44
  6154  000C0E  EC88  F00B         	call	_write_data
  6155                           
  6156                           ;ST7735_TFT.c: 327: write_data(0x2D);
  6157  000C12  0E2D               	movlw	45
  6158  000C14  EC88  F00B         	call	_write_data
  6159                           
  6160                           ;ST7735_TFT.c: 328: write_command(0xB3);
  6161  000C18  0EB3               	movlw	179
  6162  000C1A  EC90  F00B         	call	_write_command
  6163                           
  6164                           ;ST7735_TFT.c: 329: write_data(0x01);
  6165  000C1E  0E01               	movlw	1
  6166  000C20  EC88  F00B         	call	_write_data
  6167                           
  6168                           ;ST7735_TFT.c: 330: write_data(0x2C);
  6169  000C24  0E2C               	movlw	44
  6170  000C26  EC88  F00B         	call	_write_data
  6171                           
  6172                           ;ST7735_TFT.c: 331: write_data(0x2D);
  6173  000C2A  0E2D               	movlw	45
  6174  000C2C  EC88  F00B         	call	_write_data
  6175                           
  6176                           ;ST7735_TFT.c: 332: write_data(0x01);
  6177  000C30  0E01               	movlw	1
  6178  000C32  EC88  F00B         	call	_write_data
  6179                           
  6180                           ;ST7735_TFT.c: 333: write_data(0x2C);
  6181  000C36  0E2C               	movlw	44
  6182  000C38  EC88  F00B         	call	_write_data
  6183                           
  6184                           ;ST7735_TFT.c: 334: write_data(0x2D);
  6185  000C3C  0E2D               	movlw	45
  6186  000C3E  EC88  F00B         	call	_write_data
  6187                           
  6188                           ;ST7735_TFT.c: 335: write_command(0xB4);
  6189  000C42  0EB4               	movlw	180
  6190  000C44  EC90  F00B         	call	_write_command
  6191                           
  6192                           ;ST7735_TFT.c: 336: write_data(0x07);
  6193  000C48  0E07               	movlw	7
  6194  000C4A  EC88  F00B         	call	_write_data
  6195                           
  6196                           ;ST7735_TFT.c: 337: write_command(0xC0);
  6197  000C4E  0EC0               	movlw	192
  6198  000C50  EC90  F00B         	call	_write_command
  6199                           
  6200                           ;ST7735_TFT.c: 338: write_data(0xA2);
  6201  000C54  0EA2               	movlw	162
  6202  000C56  EC88  F00B         	call	_write_data
  6203                           
  6204                           ;ST7735_TFT.c: 339: write_data(0x02);
  6205  000C5A  0E02               	movlw	2
  6206  000C5C  EC88  F00B         	call	_write_data
  6207                           
  6208                           ;ST7735_TFT.c: 340: write_data(0x84);
  6209  000C60  0E84               	movlw	132
  6210  000C62  EC88  F00B         	call	_write_data
  6211                           
  6212                           ;ST7735_TFT.c: 341: write_command(0xC1);
  6213  000C66  0EC1               	movlw	193
  6214  000C68  EC90  F00B         	call	_write_command
  6215                           
  6216                           ;ST7735_TFT.c: 342: write_data(0xC5);
  6217  000C6C  0EC5               	movlw	197
  6218  000C6E  EC88  F00B         	call	_write_data
  6219                           
  6220                           ;ST7735_TFT.c: 343: write_command(0xC2);
  6221  000C72  0EC2               	movlw	194
  6222  000C74  EC90  F00B         	call	_write_command
  6223                           
  6224                           ;ST7735_TFT.c: 344: write_data(0x0A);
  6225  000C78  0E0A               	movlw	10
  6226  000C7A  EC88  F00B         	call	_write_data
  6227                           
  6228                           ;ST7735_TFT.c: 345: write_data(0x00);
  6229  000C7E  0E00               	movlw	0
  6230  000C80  EC88  F00B         	call	_write_data
  6231                           
  6232                           ;ST7735_TFT.c: 346: write_command(0xC3);
  6233  000C84  0EC3               	movlw	195
  6234  000C86  EC90  F00B         	call	_write_command
  6235                           
  6236                           ;ST7735_TFT.c: 347: write_data(0x8A);
  6237  000C8A  0E8A               	movlw	138
  6238  000C8C  EC88  F00B         	call	_write_data
  6239                           
  6240                           ;ST7735_TFT.c: 348: write_data(0x2A);
  6241  000C90  0E2A               	movlw	42
  6242  000C92  EC88  F00B         	call	_write_data
  6243                           
  6244                           ;ST7735_TFT.c: 349: write_command(0xC4);
  6245  000C96  0EC4               	movlw	196
  6246  000C98  EC90  F00B         	call	_write_command
  6247                           
  6248                           ;ST7735_TFT.c: 350: write_data(0x8A);
  6249  000C9C  0E8A               	movlw	138
  6250  000C9E  EC88  F00B         	call	_write_data
  6251                           
  6252                           ;ST7735_TFT.c: 351: write_data(0xEE);
  6253  000CA2  0EEE               	movlw	238
  6254  000CA4  EC88  F00B         	call	_write_data
  6255                           
  6256                           ;ST7735_TFT.c: 352: write_command(0xC5);
  6257  000CA8  0EC5               	movlw	197
  6258  000CAA  EC90  F00B         	call	_write_command
  6259                           
  6260                           ;ST7735_TFT.c: 353: write_data(0x0E);
  6261  000CAE  0E0E               	movlw	14
  6262  000CB0  EC88  F00B         	call	_write_data
  6263                           
  6264                           ;ST7735_TFT.c: 354: write_command(0x20);
  6265  000CB4  0E20               	movlw	32
  6266  000CB6  EC90  F00B         	call	_write_command
  6267                           
  6268                           ;ST7735_TFT.c: 355: write_command(0x36);
  6269  000CBA  0E36               	movlw	54
  6270  000CBC  EC90  F00B         	call	_write_command
  6271                           
  6272                           ;ST7735_TFT.c: 356: write_data(0xC8);
  6273  000CC0  0EC8               	movlw	200
  6274  000CC2  EC88  F00B         	call	_write_data
  6275                           
  6276                           ;ST7735_TFT.c: 357: write_command(0x3A);
  6277  000CC6  0E3A               	movlw	58
  6278  000CC8  EC90  F00B         	call	_write_command
  6279                           
  6280                           ;ST7735_TFT.c: 358: write_data(0x05);
  6281  000CCC  0E05               	movlw	5
  6282  000CCE  EC88  F00B         	call	_write_data
  6283  000CD2  0012               	return		;funcret
  6284  000CD4                     __end_of_Rcmd1:
  6285                           	opt stack 0
  6286                           tblptru	equ	0xFF8
  6287                           tblptrh	equ	0xFF7
  6288                           tblptrl	equ	0xFF6
  6289                           tablat	equ	0xFF5
  6290                           prodh	equ	0xFF4
  6291                           prodl	equ	0xFF3
  6292                           intcon	equ	0xFF2
  6293                           intcon2	equ	0xFF1
  6294                           postinc0	equ	0xFEE
  6295                           wreg	equ	0xFE8
  6296                           postdec1	equ	0xFE5
  6297                           fsr1l	equ	0xFE1
  6298                           indf2	equ	0xFDF
  6299                           postinc2	equ	0xFDE
  6300                           postdec2	equ	0xFDD
  6301                           fsr2h	equ	0xFDA
  6302                           fsr2l	equ	0xFD9
  6303                           status	equ	0xFD8
  6304                           
  6305 ;; *************** function _write_data *****************
  6306 ;; Defined at:
  6307 ;;		line 242 in file "ST7735_TFT.c"
  6308 ;; Parameters:    Size  Location     Type
  6309 ;;  data_           1    wreg     unsigned char 
  6310 ;; Auto vars:     Size  Location     Type
  6311 ;;  data_           1   18[COMRAM] unsigned char 
  6312 ;; Return value:  Size  Location     Type
  6313 ;;		None               void
  6314 ;; Registers used:
  6315 ;;		wreg, status,2, cstack
  6316 ;; Tracked objects:
  6317 ;;		On entry : 0/0
  6318 ;;		On exit  : 0/0
  6319 ;;		Unchanged: 0/0
  6320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6321 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6322 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6323 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6324 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6325 ;;Total ram usage:        1 bytes
  6326 ;; Hardware stack levels used:    1
  6327 ;; Hardware stack levels required when called:    4
  6328 ;; This function calls:
  6329 ;;		_spiwrite
  6330 ;; This function is called by:
  6331 ;;		_Rcmd1
  6332 ;;		_Rcmd2red
  6333 ;;		_Rcmd3
  6334 ;;		_setAddrWindow
  6335 ;;		_drawPixel
  6336 ;;		_TFT_GreenTab_Initialize
  6337 ;;		_Bcmd
  6338 ;;		_setScrollDefinition
  6339 ;;		_Rcmd2green
  6340 ;;		_VerticalScroll
  6341 ;; This function uses a non-reentrant model
  6342 ;;
  6343                           
  6344                           	psect	text27
  6345  001710                     __ptext27:
  6346                           	opt stack 0
  6347  001710                     _write_data:
  6348                           	opt stack 22
  6349                           
  6350                           ;incstack = 0
  6351                           ;write_data@data_ stored from wreg
  6352  001710  6E13               	movwf	write_data@data_,c
  6353                           
  6354                           ;ST7735_TFT.c: 244: PORTDbits.RD1 = 0;
  6355  001712  9283               	bcf	3971,1,c	;volatile
  6356                           
  6357                           ;ST7735_TFT.c: 245: PORTDbits.RD0 = 1;
  6358  001714  8083               	bsf	3971,0,c	;volatile
  6359                           
  6360                           ;ST7735_TFT.c: 246: spiwrite(data_);
  6361  001716  5013               	movf	write_data@data_,w,c
  6362  001718  EC6C  F00B         	call	_spiwrite
  6363                           
  6364                           ;ST7735_TFT.c: 247: PORTDbits.RD1 = 1;
  6365  00171C  8283               	bsf	3971,1,c	;volatile
  6366  00171E  0012               	return		;funcret
  6367  001720                     __end_of_write_data:
  6368                           	opt stack 0
  6369                           tblptru	equ	0xFF8
  6370                           tblptrh	equ	0xFF7
  6371                           tblptrl	equ	0xFF6
  6372                           tablat	equ	0xFF5
  6373                           prodh	equ	0xFF4
  6374                           prodl	equ	0xFF3
  6375                           intcon	equ	0xFF2
  6376                           intcon2	equ	0xFF1
  6377                           postinc0	equ	0xFEE
  6378                           wreg	equ	0xFE8
  6379                           postdec1	equ	0xFE5
  6380                           fsr1l	equ	0xFE1
  6381                           indf2	equ	0xFDF
  6382                           postinc2	equ	0xFDE
  6383                           postdec2	equ	0xFDD
  6384                           fsr2h	equ	0xFDA
  6385                           fsr2l	equ	0xFD9
  6386                           status	equ	0xFD8
  6387                           
  6388 ;; *************** function _write_command *****************
  6389 ;; Defined at:
  6390 ;;		line 231 in file "ST7735_TFT.c"
  6391 ;; Parameters:    Size  Location     Type
  6392 ;;  cmd_            1    wreg     unsigned char 
  6393 ;; Auto vars:     Size  Location     Type
  6394 ;;  cmd_            1   18[COMRAM] unsigned char 
  6395 ;; Return value:  Size  Location     Type
  6396 ;;		None               void
  6397 ;; Registers used:
  6398 ;;		wreg, status,2, cstack
  6399 ;; Tracked objects:
  6400 ;;		On entry : 0/0
  6401 ;;		On exit  : 0/0
  6402 ;;		Unchanged: 0/0
  6403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6405 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6406 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6407 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6408 ;;Total ram usage:        1 bytes
  6409 ;; Hardware stack levels used:    1
  6410 ;; Hardware stack levels required when called:    4
  6411 ;; This function calls:
  6412 ;;		_spiwrite
  6413 ;; This function is called by:
  6414 ;;		_Rcmd1
  6415 ;;		_Rcmd2red
  6416 ;;		_Rcmd3
  6417 ;;		_setAddrWindow
  6418 ;;		_TFT_GreenTab_Initialize
  6419 ;;		_Bcmd
  6420 ;;		_setScrollDefinition
  6421 ;;		_Rcmd2green
  6422 ;;		_VerticalScroll
  6423 ;; This function uses a non-reentrant model
  6424 ;;
  6425                           
  6426                           	psect	text28
  6427  001720                     __ptext28:
  6428                           	opt stack 0
  6429  001720                     _write_command:
  6430                           	opt stack 22
  6431                           
  6432                           ;incstack = 0
  6433                           ;write_command@cmd_ stored from wreg
  6434  001720  6E13               	movwf	write_command@cmd_,c
  6435                           
  6436                           ;ST7735_TFT.c: 233: PORTDbits.RD1 = 0;
  6437  001722  9283               	bcf	3971,1,c	;volatile
  6438                           
  6439                           ;ST7735_TFT.c: 235: PORTDbits.RD0 = 0;
  6440  001724  9083               	bcf	3971,0,c	;volatile
  6441                           
  6442                           ;ST7735_TFT.c: 236: spiwrite(cmd_);
  6443  001726  5013               	movf	write_command@cmd_,w,c
  6444  001728  EC6C  F00B         	call	_spiwrite
  6445                           
  6446                           ;ST7735_TFT.c: 238: PORTDbits.RD1 = 1;
  6447  00172C  8283               	bsf	3971,1,c	;volatile
  6448  00172E  0012               	return		;funcret
  6449  001730                     __end_of_write_command:
  6450                           	opt stack 0
  6451                           tblptru	equ	0xFF8
  6452                           tblptrh	equ	0xFF7
  6453                           tblptrl	equ	0xFF6
  6454                           tablat	equ	0xFF5
  6455                           prodh	equ	0xFF4
  6456                           prodl	equ	0xFF3
  6457                           intcon	equ	0xFF2
  6458                           intcon2	equ	0xFF1
  6459                           postinc0	equ	0xFEE
  6460                           wreg	equ	0xFE8
  6461                           postdec1	equ	0xFE5
  6462                           fsr1l	equ	0xFE1
  6463                           indf2	equ	0xFDF
  6464                           postinc2	equ	0xFDE
  6465                           postdec2	equ	0xFDD
  6466                           fsr2h	equ	0xFDA
  6467                           fsr2l	equ	0xFD9
  6468                           status	equ	0xFD8
  6469                           
  6470 ;; *************** function _spiwrite *****************
  6471 ;; Defined at:
  6472 ;;		line 222 in file "ST7735_TFT.c"
  6473 ;; Parameters:    Size  Location     Type
  6474 ;;  spidata         1    wreg     unsigned char 
  6475 ;; Auto vars:     Size  Location     Type
  6476 ;;  spidata         1   17[COMRAM] unsigned char 
  6477 ;;  x               1   16[COMRAM] unsigned char 
  6478 ;; Return value:  Size  Location     Type
  6479 ;;		None               void
  6480 ;; Registers used:
  6481 ;;		wreg
  6482 ;; Tracked objects:
  6483 ;;		On entry : 0/0
  6484 ;;		On exit  : 0/0
  6485 ;;		Unchanged: 0/0
  6486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6487 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6488 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6489 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6490 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6491 ;;Total ram usage:        2 bytes
  6492 ;; Hardware stack levels used:    1
  6493 ;; Hardware stack levels required when called:    3
  6494 ;; This function calls:
  6495 ;;		Nothing
  6496 ;; This function is called by:
  6497 ;;		_write_command
  6498 ;;		_write_data
  6499 ;;		_drawFastVLine
  6500 ;;		_fillRectangle
  6501 ;;		_drawFastHLine
  6502 ;; This function uses a non-reentrant model
  6503 ;;
  6504                           
  6505                           	psect	text29
  6506  0016D8                     __ptext29:
  6507                           	opt stack 0
  6508  0016D8                     _spiwrite:
  6509                           	opt stack 24
  6510                           
  6511                           ;incstack = 0
  6512                           ;spiwrite@spidata stored from wreg
  6513  0016D8  6E12               	movwf	spiwrite@spidata,c
  6514                           
  6515                           ;ST7735_TFT.c: 224: char x;
  6516                           ;ST7735_TFT.c: 225: PIR1bits.SSPIF = 0;
  6517  0016DA  969E               	bcf	3998,3,c	;volatile
  6518                           
  6519                           ;ST7735_TFT.c: 226: x = SSPBUF;
  6520  0016DC  CFC9 F011          	movff	4041,spiwrite@x	;volatile
  6521                           
  6522                           ;ST7735_TFT.c: 227: SSPBUF = spidata;
  6523  0016E0  C012  FFC9         	movff	spiwrite@spidata,4041	;volatile
  6524                           
  6525                           ;ST7735_TFT.c: 228: while (!SSPSTATbits.BF);
  6526  0016E4  D000               	goto	l111
  6527  0016E6                     l111:
  6528  0016E6  A0C7               	btfss	4039,0,c	;volatile
  6529  0016E8  D7FE               	goto	l111
  6530  0016EA  0012               	return		;funcret
  6531  0016EC                     __end_of_spiwrite:
  6532                           	opt stack 0
  6533                           tblptru	equ	0xFF8
  6534                           tblptrh	equ	0xFF7
  6535                           tblptrl	equ	0xFF6
  6536                           tablat	equ	0xFF5
  6537                           prodh	equ	0xFF4
  6538                           prodl	equ	0xFF3
  6539                           intcon	equ	0xFF2
  6540                           intcon2	equ	0xFF1
  6541                           postinc0	equ	0xFEE
  6542                           wreg	equ	0xFE8
  6543                           postdec1	equ	0xFE5
  6544                           fsr1l	equ	0xFE1
  6545                           indf2	equ	0xFDF
  6546                           postinc2	equ	0xFDE
  6547                           postdec2	equ	0xFDD
  6548                           fsr2h	equ	0xFDA
  6549                           fsr2l	equ	0xFD9
  6550                           status	equ	0xFD8
  6551                           
  6552 ;; *************** function _LCD_Reset *****************
  6553 ;; Defined at:
  6554 ;;		line 250 in file "ST7735_TFT.c"
  6555 ;; Parameters:    Size  Location     Type
  6556 ;;		None
  6557 ;; Auto vars:     Size  Location     Type
  6558 ;;		None
  6559 ;; Return value:  Size  Location     Type
  6560 ;;		None               void
  6561 ;; Registers used:
  6562 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6563 ;; Tracked objects:
  6564 ;;		On entry : 0/0
  6565 ;;		On exit  : 0/0
  6566 ;;		Unchanged: 0/0
  6567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6568 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6569 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6570 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6571 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6572 ;;Total ram usage:        0 bytes
  6573 ;; Hardware stack levels used:    1
  6574 ;; Hardware stack levels required when called:    5
  6575 ;; This function calls:
  6576 ;;		_delay_ms
  6577 ;; This function is called by:
  6578 ;;		_Initialize_Screen
  6579 ;; This function uses a non-reentrant model
  6580 ;;
  6581                           
  6582                           	psect	text30
  6583  0016EC                     __ptext30:
  6584                           	opt stack 0
  6585  0016EC                     _LCD_Reset:
  6586                           	opt stack 24
  6587                           
  6588                           ;ST7735_TFT.c: 252: PORTDbits.RD2 = 0;
  6589                           
  6590                           ;incstack = 0
  6591  0016EC  9483               	bcf	3971,2,c	;volatile
  6592                           
  6593                           ;ST7735_TFT.c: 253: delay_ms(100);
  6594  0016EE  0E00               	movlw	0
  6595  0016F0  6E18               	movwf	delay_ms@ms+1,c
  6596  0016F2  0E64               	movlw	100
  6597  0016F4  6E17               	movwf	delay_ms@ms,c
  6598  0016F6  ECFE  F009         	call	_delay_ms	;wreg free
  6599                           
  6600                           ;ST7735_TFT.c: 254: PORTDbits.RD2 = 1;
  6601  0016FA  8483               	bsf	3971,2,c	;volatile
  6602  0016FC  0012               	return		;funcret
  6603  0016FE                     __end_of_LCD_Reset:
  6604                           	opt stack 0
  6605                           tblptru	equ	0xFF8
  6606                           tblptrh	equ	0xFF7
  6607                           tblptrl	equ	0xFF6
  6608                           tablat	equ	0xFF5
  6609                           prodh	equ	0xFF4
  6610                           prodl	equ	0xFF3
  6611                           intcon	equ	0xFF2
  6612                           intcon2	equ	0xFF1
  6613                           postinc0	equ	0xFEE
  6614                           wreg	equ	0xFE8
  6615                           postdec1	equ	0xFE5
  6616                           fsr1l	equ	0xFE1
  6617                           indf2	equ	0xFDF
  6618                           postinc2	equ	0xFDE
  6619                           postdec2	equ	0xFDD
  6620                           fsr2h	equ	0xFDA
  6621                           fsr2l	equ	0xFD9
  6622                           status	equ	0xFD8
  6623                           
  6624 ;; *************** function _delay_ms *****************
  6625 ;; Defined at:
  6626 ;;		line 97 in file "ST7735_TFT.c"
  6627 ;; Parameters:    Size  Location     Type
  6628 ;;  ms              2   22[COMRAM] int 
  6629 ;; Auto vars:     Size  Location     Type
  6630 ;;  count           2   26[COMRAM] int 
  6631 ;; Return value:  Size  Location     Type
  6632 ;;		None               void
  6633 ;; Registers used:
  6634 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6635 ;; Tracked objects:
  6636 ;;		On entry : 0/0
  6637 ;;		On exit  : 0/0
  6638 ;;		Unchanged: 0/0
  6639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6640 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6641 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6642 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6643 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6644 ;;Total ram usage:        6 bytes
  6645 ;; Hardware stack levels used:    1
  6646 ;; Hardware stack levels required when called:    4
  6647 ;; This function calls:
  6648 ;;		___wmul
  6649 ;; This function is called by:
  6650 ;;		_LCD_Reset
  6651 ;;		_Rcmd1
  6652 ;;		_Rcmd3
  6653 ;;		_Bcmd
  6654 ;; This function uses a non-reentrant model
  6655 ;;
  6656                           
  6657                           	psect	text31
  6658  0013FC                     __ptext31:
  6659                           	opt stack 0
  6660  0013FC                     _delay_ms:
  6661                           	opt stack 23
  6662                           
  6663                           ;ST7735_TFT.c: 103: int count;
  6664                           ;ST7735_TFT.c: 104: count = 8000000/4000/8 * ms;
  6665                           
  6666                           ;incstack = 0
  6667  0013FC  C017  F011         	movff	delay_ms@ms,___wmul@multiplier
  6668  001400  C018  F012         	movff	delay_ms@ms+1,___wmul@multiplier+1
  6669  001404  0E00               	movlw	0
  6670  001406  6E14               	movwf	___wmul@multiplicand+1,c
  6671  001408  0EFA               	movlw	250
  6672  00140A  6E13               	movwf	___wmul@multiplicand,c
  6673  00140C  EC17  F00B         	call	___wmul	;wreg free
  6674  001410  C011  F01B         	movff	?___wmul,delay_ms@count
  6675  001414  C012  F01C         	movff	?___wmul+1,delay_ms@count+1
  6676                           
  6677                           ;ST7735_TFT.c: 105: count = (0xffff - count);
  6678  001418  C01B  F019         	movff	delay_ms@count,??_delay_ms
  6679  00141C  C01C  F01A         	movff	delay_ms@count+1,??_delay_ms+1
  6680  001420  1E19               	comf	??_delay_ms,f,c
  6681  001422  1E1A               	comf	??_delay_ms+1,f,c
  6682  001424  4A19               	infsnz	??_delay_ms,f,c
  6683  001426  2A1A               	incf	??_delay_ms+1,f,c
  6684  001428  0EFF               	movlw	255
  6685  00142A  2419               	addwf	??_delay_ms,w,c
  6686  00142C  6E1B               	movwf	delay_ms@count,c
  6687  00142E  0EFF               	movlw	255
  6688  001430  201A               	addwfc	??_delay_ms+1,w,c
  6689  001432  6E1C               	movwf	delay_ms@count+1,c
  6690                           
  6691                           ;ST7735_TFT.c: 107: T3CON = 0xb8;
  6692  001434  0EB8               	movlw	184
  6693  001436  6EB1               	movwf	4017,c	;volatile
  6694                           
  6695                           ;ST7735_TFT.c: 109: TMR0L = count & 0x00ff;
  6696  001438  C01B  FFD6         	movff	delay_ms@count,4054	;volatile
  6697                           
  6698                           ;ST7735_TFT.c: 110: TMR0H = count >> 8;
  6699  00143C  501C               	movf	delay_ms@count+1,w,c
  6700  00143E  6ED7               	movwf	4055,c	;volatile
  6701                           
  6702                           ;ST7735_TFT.c: 112: PIR2bits.TMR3IF = 0;
  6703  001440  92A1               	bcf	4001,1,c	;volatile
  6704                           
  6705                           ;ST7735_TFT.c: 113: T3CONbits.TMR3ON = 1;
  6706  001442  80B1               	bsf	4017,0,c	;volatile
  6707                           
  6708                           ;ST7735_TFT.c: 115: while (PIR2bits.TMR3IF == 0);
  6709  001444  D000               	goto	l101
  6710  001446                     l101:
  6711  001446  A2A1               	btfss	4001,1,c	;volatile
  6712  001448  D7FE               	goto	l101
  6713                           
  6714                           ;ST7735_TFT.c: 116: T3CONbits.TMR3ON = 0;
  6715  00144A  90B1               	bcf	4017,0,c	;volatile
  6716  00144C  0012               	return		;funcret
  6717  00144E                     __end_of_delay_ms:
  6718                           	opt stack 0
  6719                           tblptru	equ	0xFF8
  6720                           tblptrh	equ	0xFF7
  6721                           tblptrl	equ	0xFF6
  6722                           tablat	equ	0xFF5
  6723                           prodh	equ	0xFF4
  6724                           prodl	equ	0xFF3
  6725                           intcon	equ	0xFF2
  6726                           intcon2	equ	0xFF1
  6727                           postinc0	equ	0xFEE
  6728                           wreg	equ	0xFE8
  6729                           postdec1	equ	0xFE5
  6730                           fsr1l	equ	0xFE1
  6731                           indf2	equ	0xFDF
  6732                           postinc2	equ	0xFDE
  6733                           postdec2	equ	0xFDD
  6734                           fsr2h	equ	0xFDA
  6735                           fsr2l	equ	0xFD9
  6736                           status	equ	0xFD8
  6737                           
  6738 ;; *************** function ___wmul *****************
  6739 ;; Defined at:
  6740 ;;		line 15 in file "E:\XC8\sources\common\Umul16.c"
  6741 ;; Parameters:    Size  Location     Type
  6742 ;;  multiplier      2   16[COMRAM] unsigned int 
  6743 ;;  multiplicand    2   18[COMRAM] unsigned int 
  6744 ;; Auto vars:     Size  Location     Type
  6745 ;;  product         2   20[COMRAM] unsigned int 
  6746 ;; Return value:  Size  Location     Type
  6747 ;;                  2   16[COMRAM] unsigned int 
  6748 ;; Registers used:
  6749 ;;		wreg, status,2, status,0, prodl, prodh
  6750 ;; Tracked objects:
  6751 ;;		On entry : 0/0
  6752 ;;		On exit  : 0/0
  6753 ;;		Unchanged: 0/0
  6754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6755 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6756 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6757 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6758 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6759 ;;Total ram usage:        6 bytes
  6760 ;; Hardware stack levels used:    1
  6761 ;; Hardware stack levels required when called:    3
  6762 ;; This function calls:
  6763 ;;		Nothing
  6764 ;; This function is called by:
  6765 ;;		_delay_ms
  6766 ;;		_drawChar
  6767 ;;		_printf
  6768 ;; This function uses a non-reentrant model
  6769 ;;
  6770                           
  6771                           	psect	text32
  6772  00162E                     __ptext32:
  6773                           	opt stack 0
  6774  00162E                     ___wmul:
  6775                           	opt stack 26
  6776                           
  6777                           ;incstack = 0
  6778  00162E  5011               	movf	___wmul@multiplier,w,c
  6779  001630  0213               	mulwf	___wmul@multiplicand,c
  6780  001632  CFF3 F015          	movff	prodl,___wmul@product
  6781  001636  CFF4 F016          	movff	prodh,___wmul@product+1
  6782  00163A  5011               	movf	___wmul@multiplier,w,c
  6783  00163C  0214               	mulwf	___wmul@multiplicand+1,c
  6784  00163E  50F3               	movf	prodl,w,c
  6785  001640  2616               	addwf	___wmul@product+1,f,c
  6786  001642  5012               	movf	___wmul@multiplier+1,w,c
  6787  001644  0213               	mulwf	___wmul@multiplicand,c
  6788  001646  50F3               	movf	prodl,w,c
  6789  001648  2616               	addwf	___wmul@product+1,f,c
  6790  00164A  C015  F011         	movff	___wmul@product,?___wmul
  6791  00164E  C016  F012         	movff	___wmul@product+1,?___wmul+1
  6792  001652  D000               	goto	l482
  6793  001654                     l482:
  6794  001654  0012               	return		;funcret
  6795  001656                     __end_of___wmul:
  6796                           	opt stack 0
  6797                           tblptru	equ	0xFF8
  6798                           tblptrh	equ	0xFF7
  6799                           tblptrl	equ	0xFF6
  6800                           tablat	equ	0xFF5
  6801                           prodh	equ	0xFF4
  6802                           prodl	equ	0xFF3
  6803                           intcon	equ	0xFF2
  6804                           intcon2	equ	0xFF1
  6805                           postinc0	equ	0xFEE
  6806                           wreg	equ	0xFE8
  6807                           postdec1	equ	0xFE5
  6808                           fsr1l	equ	0xFE1
  6809                           indf2	equ	0xFDF
  6810                           postinc2	equ	0xFDE
  6811                           postdec2	equ	0xFDD
  6812                           fsr2h	equ	0xFDA
  6813                           fsr2l	equ	0xFD9
  6814                           status	equ	0xFD8
  6815                           
  6816 ;; *************** function _Deactivate_Buzzer *****************
  6817 ;; Defined at:
  6818 ;;		line 126 in file "Lab9pA.c"
  6819 ;; Parameters:    Size  Location     Type
  6820 ;;		None
  6821 ;; Auto vars:     Size  Location     Type
  6822 ;;		None
  6823 ;; Return value:  Size  Location     Type
  6824 ;;		None               void
  6825 ;; Registers used:
  6826 ;;		wreg, status,2
  6827 ;; Tracked objects:
  6828 ;;		On entry : 0/0
  6829 ;;		On exit  : 0/0
  6830 ;;		Unchanged: 0/0
  6831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6832 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6833 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6834 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6835 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6836 ;;Total ram usage:        0 bytes
  6837 ;; Hardware stack levels used:    1
  6838 ;; Hardware stack levels required when called:    3
  6839 ;; This function calls:
  6840 ;;		Nothing
  6841 ;; This function is called by:
  6842 ;;		_main
  6843 ;; This function uses a non-reentrant model
  6844 ;;
  6845                           
  6846                           	psect	text33
  6847  00174A                     __ptext33:
  6848                           	opt stack 0
  6849  00174A                     _Deactivate_Buzzer:
  6850                           	opt stack 27
  6851                           
  6852                           ;Lab9pA.c: 128: CCP2CON = 0x0;
  6853                           
  6854                           ;incstack = 0
  6855  00174A  0E00               	movlw	0
  6856  00174C  6EBA               	movwf	4026,c	;volatile
  6857                           
  6858                           ;Lab9pA.c: 129: PORTBbits.RB3 = 0;
  6859  00174E  9681               	bcf	3969,3,c	;volatile
  6860  001750  0012               	return		;funcret
  6861  001752                     __end_of_Deactivate_Buzzer:
  6862                           	opt stack 0
  6863                           tblptru	equ	0xFF8
  6864                           tblptrh	equ	0xFF7
  6865                           tblptrl	equ	0xFF6
  6866                           tablat	equ	0xFF5
  6867                           prodh	equ	0xFF4
  6868                           prodl	equ	0xFF3
  6869                           intcon	equ	0xFF2
  6870                           intcon2	equ	0xFF1
  6871                           postinc0	equ	0xFEE
  6872                           wreg	equ	0xFE8
  6873                           postdec1	equ	0xFE5
  6874                           fsr1l	equ	0xFE1
  6875                           indf2	equ	0xFDF
  6876                           postinc2	equ	0xFDE
  6877                           postdec2	equ	0xFDD
  6878                           fsr2h	equ	0xFDA
  6879                           fsr2l	equ	0xFD9
  6880                           status	equ	0xFD8
  6881                           
  6882 ;; *************** function _Activate_Buzzer *****************
  6883 ;; Defined at:
  6884 ;;		line 118 in file "Lab9pA.c"
  6885 ;; Parameters:    Size  Location     Type
  6886 ;;		None
  6887 ;; Auto vars:     Size  Location     Type
  6888 ;;		None
  6889 ;; Return value:  Size  Location     Type
  6890 ;;		None               void
  6891 ;; Registers used:
  6892 ;;		wreg, status,2
  6893 ;; Tracked objects:
  6894 ;;		On entry : 0/0
  6895 ;;		On exit  : 0/0
  6896 ;;		Unchanged: 0/0
  6897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6898 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6899 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6900 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6901 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6902 ;;Total ram usage:        0 bytes
  6903 ;; Hardware stack levels used:    1
  6904 ;; Hardware stack levels required when called:    3
  6905 ;; This function calls:
  6906 ;;		Nothing
  6907 ;; This function is called by:
  6908 ;;		_main
  6909 ;; This function uses a non-reentrant model
  6910 ;;
  6911                           
  6912                           	psect	text34
  6913  0016FE                     __ptext34:
  6914                           	opt stack 0
  6915  0016FE                     _Activate_Buzzer:
  6916                           	opt stack 27
  6917                           
  6918                           ;Lab9pA.c: 120: PR2 = 0b11111001 ;
  6919                           
  6920                           ;incstack = 0
  6921  0016FE  0EF9               	movlw	249
  6922  001700  6ECB               	movwf	4043,c	;volatile
  6923                           
  6924                           ;Lab9pA.c: 121: T2CON = 0b00000101 ;
  6925  001702  0E05               	movlw	5
  6926  001704  6ECA               	movwf	4042,c	;volatile
  6927                           
  6928                           ;Lab9pA.c: 122: CCPR2L = 0b01001010 ;
  6929  001706  0E4A               	movlw	74
  6930  001708  6EBB               	movwf	4027,c	;volatile
  6931                           
  6932                           ;Lab9pA.c: 123: CCP2CON = 0b00111100 ;
  6933  00170A  0E3C               	movlw	60
  6934  00170C  6EBA               	movwf	4026,c	;volatile
  6935  00170E  0012               	return		;funcret
  6936  001710                     __end_of_Activate_Buzzer:
  6937                           	opt stack 0
  6938                           tblptru	equ	0xFF8
  6939                           tblptrh	equ	0xFF7
  6940                           tblptrl	equ	0xFF6
  6941                           tablat	equ	0xFF5
  6942                           prodh	equ	0xFF4
  6943                           prodl	equ	0xFF3
  6944                           intcon	equ	0xFF2
  6945                           intcon2	equ	0xFF1
  6946                           postinc0	equ	0xFEE
  6947                           wreg	equ	0xFE8
  6948                           postdec1	equ	0xFE5
  6949                           fsr1l	equ	0xFE1
  6950                           indf2	equ	0xFDF
  6951                           postinc2	equ	0xFDE
  6952                           postdec2	equ	0xFDD
  6953                           fsr2h	equ	0xFDA
  6954                           fsr2l	equ	0xFD9
  6955                           status	equ	0xFD8
  6956                           
  6957 ;; *************** function _chkisr *****************
  6958 ;; Defined at:
  6959 ;;		line 93 in file "Lab9pA.c"
  6960 ;; Parameters:    Size  Location     Type
  6961 ;;		None
  6962 ;; Auto vars:     Size  Location     Type
  6963 ;;		None
  6964 ;; Return value:  Size  Location     Type
  6965 ;;		None               void
  6966 ;; Registers used:
  6967 ;;		wreg, status,2, status,0, cstack
  6968 ;; Tracked objects:
  6969 ;;		On entry : 0/0
  6970 ;;		On exit  : 0/0
  6971 ;;		Unchanged: 0/0
  6972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6973 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6974 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6975 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6976 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6977 ;;Total ram usage:       14 bytes
  6978 ;; Hardware stack levels used:    1
  6979 ;; Hardware stack levels required when called:    2
  6980 ;; This function calls:
  6981 ;;		_INT0_isr
  6982 ;;		_TIMER1_isr
  6983 ;; This function is called by:
  6984 ;;		Interrupt level 2
  6985 ;; This function uses a non-reentrant model
  6986 ;;
  6987                           
  6988                           	psect	intcode
  6989  000008                     __pintcode:
  6990                           	opt stack 0
  6991  000008                     _chkisr:
  6992                           	opt stack 20
  6993                           
  6994                           ;incstack = 0
  6995  000008  CFFA F003          	movff	pclath,??_chkisr
  6996  00000C  CFFB F004          	movff	pclatu,??_chkisr+1
  6997  000010  CFE9 F005          	movff	fsr0l,??_chkisr+2
  6998  000014  ED27  F009         	call	int_func,f	;refresh shadow registers
  6999                           pclatu	equ	0xFFB
  7000                           pclath	equ	0xFFA
  7001                           tblptru	equ	0xFF8
  7002                           tblptrh	equ	0xFF7
  7003                           tblptrl	equ	0xFF6
  7004                           tablat	equ	0xFF5
  7005                           prodh	equ	0xFF4
  7006                           prodl	equ	0xFF3
  7007                           intcon	equ	0xFF2
  7008                           intcon2	equ	0xFF1
  7009                           postinc0	equ	0xFEE
  7010                           fsr0l	equ	0xFE9
  7011                           wreg	equ	0xFE8
  7012                           postdec1	equ	0xFE5
  7013                           fsr1l	equ	0xFE1
  7014                           indf2	equ	0xFDF
  7015                           postinc2	equ	0xFDE
  7016                           postdec2	equ	0xFDD
  7017                           fsr2h	equ	0xFDA
  7018                           fsr2l	equ	0xFD9
  7019                           status	equ	0xFD8
  7020                           
  7021                           	psect	intcode_body
  7022  00124E                     __pintcode_body:
  7023                           	opt stack 20
  7024  00124E                     int_func:
  7025                           	opt stack 20
  7026  00124E  0006               	pop		; remove dummy address from shadow register refresh
  7027  001250  CFEA F006          	movff	fsr0h,??_chkisr+3
  7028  001254  CFE1 F007          	movff	fsr1l,??_chkisr+4
  7029  001258  CFE2 F008          	movff	fsr1h,??_chkisr+5
  7030  00125C  CFD9 F009          	movff	fsr2l,??_chkisr+6
  7031  001260  CFDA F00A          	movff	fsr2h,??_chkisr+7
  7032  001264  CFF3 F00B          	movff	prodl,??_chkisr+8
  7033  001268  CFF4 F00C          	movff	prodh,??_chkisr+9
  7034  00126C  CFF6 F00D          	movff	tblptrl,??_chkisr+10
  7035  001270  CFF7 F00E          	movff	tblptrh,??_chkisr+11
  7036  001274  CFF8 F00F          	movff	tblptru,??_chkisr+12
  7037  001278  CFF5 F010          	movff	tablat,??_chkisr+13
  7038                           
  7039                           ;Lab9pA.c: 95: if (PIR1bits.TMR1IF == 1) TIMER1_isr();
  7040  00127C  A09E               	btfss	3998,0,c	;volatile
  7041  00127E  D003               	goto	i2l2146
  7042  001280  EC9F  F00B         	call	_TIMER1_isr	;wreg free
  7043  001284  D000               	goto	i2l2146
  7044  001286                     i2l2146:
  7045                           
  7046                           ;Lab9pA.c: 96: if (INTCONbits.INT0IF == 1) INT0_isr();
  7047  001286  A2F2               	btfss	intcon,1,c	;volatile
  7048  001288  D003               	goto	i2l321
  7049  00128A  EC9F  F004         	call	_INT0_isr	;wreg free
  7050  00128E  D000               	goto	i2l321
  7051  001290                     i2l321:
  7052  001290  C010  FFF5         	movff	??_chkisr+13,tablat
  7053  001294  C00F  FFF8         	movff	??_chkisr+12,tblptru
  7054  001298  C00E  FFF7         	movff	??_chkisr+11,tblptrh
  7055  00129C  C00D  FFF6         	movff	??_chkisr+10,tblptrl
  7056  0012A0  C00C  FFF4         	movff	??_chkisr+9,prodh
  7057  0012A4  C00B  FFF3         	movff	??_chkisr+8,prodl
  7058  0012A8  C00A  FFDA         	movff	??_chkisr+7,fsr2h
  7059  0012AC  C009  FFD9         	movff	??_chkisr+6,fsr2l
  7060  0012B0  C008  FFE2         	movff	??_chkisr+5,fsr1h
  7061  0012B4  C007  FFE1         	movff	??_chkisr+4,fsr1l
  7062  0012B8  C006  FFEA         	movff	??_chkisr+3,fsr0h
  7063  0012BC  C005  FFE9         	movff	??_chkisr+2,fsr0l
  7064  0012C0  C004  FFFB         	movff	??_chkisr+1,pclatu
  7065  0012C4  C003  FFFA         	movff	??_chkisr,pclath
  7066  0012C8  0011               	retfie		f
  7067  0012CA                     __end_of_chkisr:
  7068                           	opt stack 0
  7069                           pclatu	equ	0xFFB
  7070                           pclath	equ	0xFFA
  7071                           tblptru	equ	0xFF8
  7072                           tblptrh	equ	0xFF7
  7073                           tblptrl	equ	0xFF6
  7074                           tablat	equ	0xFF5
  7075                           prodh	equ	0xFF4
  7076                           prodl	equ	0xFF3
  7077                           intcon	equ	0xFF2
  7078                           intcon2	equ	0xFF1
  7079                           postinc0	equ	0xFEE
  7080                           fsr0h	equ	0xFEA
  7081                           fsr0l	equ	0xFE9
  7082                           wreg	equ	0xFE8
  7083                           postdec1	equ	0xFE5
  7084                           fsr1h	equ	0xFE2
  7085                           fsr1l	equ	0xFE1
  7086                           indf2	equ	0xFDF
  7087                           postinc2	equ	0xFDE
  7088                           postdec2	equ	0xFDD
  7089                           fsr2h	equ	0xFDA
  7090                           fsr2l	equ	0xFD9
  7091                           status	equ	0xFD8
  7092                           
  7093 ;; *************** function _TIMER1_isr *****************
  7094 ;; Defined at:
  7095 ;;		line 99 in file "Lab9pA.c"
  7096 ;; Parameters:    Size  Location     Type
  7097 ;;		None
  7098 ;; Auto vars:     Size  Location     Type
  7099 ;;		None
  7100 ;; Return value:  Size  Location     Type
  7101 ;;		None               void
  7102 ;; Registers used:
  7103 ;;		wreg, status,2
  7104 ;; Tracked objects:
  7105 ;;		On entry : 0/0
  7106 ;;		On exit  : 0/0
  7107 ;;		Unchanged: 0/0
  7108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7109 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7110 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7111 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7112 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7113 ;;Total ram usage:        0 bytes
  7114 ;; Hardware stack levels used:    1
  7115 ;; This function calls:
  7116 ;;		Nothing
  7117 ;; This function is called by:
  7118 ;;		_chkisr
  7119 ;; This function uses a non-reentrant model
  7120 ;;
  7121                           
  7122                           	psect	text36
  7123  00173E                     __ptext36:
  7124                           	opt stack 0
  7125  00173E                     _TIMER1_isr:
  7126                           	opt stack 21
  7127                           
  7128                           ;Lab9pA.c: 101: Nec_state = 0;
  7129                           
  7130                           ;incstack = 0
  7131  00173E  0E00               	movlw	0
  7132  001740  6E6A               	movwf	_Nec_state,c
  7133                           
  7134                           ;Lab9pA.c: 102: INTCON2bits.INTEDG0 = 0;
  7135  001742  9CF1               	bcf	intcon2,6,c	;volatile
  7136                           
  7137                           ;Lab9pA.c: 103: T1CONbits.TMR1ON = 0;
  7138  001744  90CD               	bcf	4045,0,c	;volatile
  7139                           
  7140                           ;Lab9pA.c: 104: PIR1bits.TMR1IF = 0;
  7141  001746  909E               	bcf	3998,0,c	;volatile
  7142  001748  0012               	return		;funcret
  7143  00174A                     __end_of_TIMER1_isr:
  7144                           	opt stack 0
  7145                           pclatu	equ	0xFFB
  7146                           pclath	equ	0xFFA
  7147                           tblptru	equ	0xFF8
  7148                           tblptrh	equ	0xFF7
  7149                           tblptrl	equ	0xFF6
  7150                           tablat	equ	0xFF5
  7151                           prodh	equ	0xFF4
  7152                           prodl	equ	0xFF3
  7153                           intcon	equ	0xFF2
  7154                           intcon2	equ	0xFF1
  7155                           postinc0	equ	0xFEE
  7156                           fsr0h	equ	0xFEA
  7157                           fsr0l	equ	0xFE9
  7158                           wreg	equ	0xFE8
  7159                           postdec1	equ	0xFE5
  7160                           fsr1h	equ	0xFE2
  7161                           fsr1l	equ	0xFE1
  7162                           indf2	equ	0xFDF
  7163                           postinc2	equ	0xFDE
  7164                           postdec2	equ	0xFDD
  7165                           fsr2h	equ	0xFDA
  7166                           fsr2l	equ	0xFD9
  7167                           status	equ	0xFD8
  7168                           
  7169 ;; *************** function _INT0_isr *****************
  7170 ;; Defined at:
  7171 ;;		line 138 in file "Lab9pA.c"
  7172 ;; Parameters:    Size  Location     Type
  7173 ;;		None
  7174 ;; Auto vars:     Size  Location     Type
  7175 ;;		None
  7176 ;; Return value:  Size  Location     Type
  7177 ;;		None               void
  7178 ;; Registers used:
  7179 ;;		wreg, status,2, status,0, cstack
  7180 ;; Tracked objects:
  7181 ;;		On entry : 0/0
  7182 ;;		On exit  : 0/0
  7183 ;;		Unchanged: 0/0
  7184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7185 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7186 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7187 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7188 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7189 ;;Total ram usage:        2 bytes
  7190 ;; Hardware stack levels used:    1
  7191 ;; Hardware stack levels required when called:    1
  7192 ;; This function calls:
  7193 ;;		_force_nec_state0
  7194 ;; This function is called by:
  7195 ;;		_chkisr
  7196 ;; This function uses a non-reentrant model
  7197 ;;
  7198                           
  7199                           	psect	text37
  7200  00093E                     __ptext37:
  7201                           	opt stack 0
  7202  00093E                     _INT0_isr:
  7203                           	opt stack 20
  7204                           
  7205                           ;Lab9pA.c: 140: INTCONbits.INT0IF = 0;
  7206                           
  7207                           ;incstack = 0
  7208  00093E  92F2               	bcf	intcon,1,c	;volatile
  7209                           
  7210                           ;Lab9pA.c: 141: if (Nec_state != 0)
  7211  000940  506A               	movf	_Nec_state,w,c
  7212  000942  B4D8               	btfsc	status,2,c
  7213  000944  D091               	goto	i2l1734
  7214                           
  7215                           ;Lab9pA.c: 142: {
  7216                           ;Lab9pA.c: 143: Time_Elapsed = (TMR1H << 8) | TMR1L;
  7217  000946  50CE               	movf	4046,w,c	;volatile
  7218  000948  CFCF F001          	movff	4047,??_INT0_isr	;volatile
  7219  00094C  6A02               	clrf	(??_INT0_isr+1)& (0+255),c
  7220  00094E  C001  F002         	movff	??_INT0_isr,??_INT0_isr+1
  7221  000952  6A01               	clrf	??_INT0_isr,c
  7222  000954  1001               	iorwf	??_INT0_isr,w,c
  7223  000956  6E61               	movwf	_Time_Elapsed,c
  7224  000958  5002               	movf	??_INT0_isr+1,w,c
  7225  00095A  6E62               	movwf	_Time_Elapsed+1,c
  7226                           
  7227                           ;Lab9pA.c: 144: TMR1H = 0;
  7228  00095C  0E00               	movlw	0
  7229  00095E  6ECF               	movwf	4047,c	;volatile
  7230                           
  7231                           ;Lab9pA.c: 145: TMR1L = 0;
  7232  000960  0E00               	movlw	0
  7233  000962  6ECE               	movwf	4046,c	;volatile
  7234                           
  7235                           ;Lab9pA.c: 146: }
  7236                           ;Lab9pA.c: 148: switch(Nec_state)
  7237  000964  D081               	goto	i2l1734
  7238  000966                     i2l1674:
  7239                           
  7240                           ;Lab9pA.c: 151: {
  7241                           ;Lab9pA.c: 153: TMR1H = 0;
  7242  000966  0E00               	movlw	0
  7243  000968  6ECF               	movwf	4047,c	;volatile
  7244                           
  7245                           ;Lab9pA.c: 154: TMR1L = 0;
  7246  00096A  0E00               	movlw	0
  7247  00096C  6ECE               	movwf	4046,c	;volatile
  7248                           
  7249                           ;Lab9pA.c: 155: PIR1bits.TMR1IF = 0;
  7250  00096E  909E               	bcf	3998,0,c	;volatile
  7251                           
  7252                           ;Lab9pA.c: 156: T1CON= 0x90;
  7253  000970  0E90               	movlw	144
  7254  000972  6ECD               	movwf	4045,c	;volatile
  7255                           
  7256                           ;Lab9pA.c: 157: T1CONbits.TMR1ON = 1;
  7257  000974  80CD               	bsf	4045,0,c	;volatile
  7258                           
  7259                           ;Lab9pA.c: 158: bit_count = 0;
  7260  000976  0E00               	movlw	0
  7261  000978  6E6C               	movwf	_bit_count,c
  7262                           
  7263                           ;Lab9pA.c: 159: Nec_code = 0;
  7264  00097A  0E00               	movlw	0
  7265  00097C  6E5D               	movwf	_Nec_code,c
  7266  00097E  0E00               	movlw	0
  7267  000980  6E5E               	movwf	_Nec_code+1,c
  7268  000982  0E00               	movlw	0
  7269  000984  6E5F               	movwf	_Nec_code+2,c
  7270  000986  0E00               	movlw	0
  7271  000988  6E60               	movwf	_Nec_code+3,c
  7272                           
  7273                           ;Lab9pA.c: 160: Nec_state = 1;
  7274  00098A  0E01               	movlw	1
  7275  00098C  D01F               	goto	L4
  7276  00098E                     i2l1680:
  7277                           
  7278                           ;Lab9pA.c: 161: INTCON2bits.INTEDG0 = 1;
  7279  00098E  8CF1               	bsf	intcon2,6,c	;volatile
  7280                           
  7281                           ;Lab9pA.c: 162: return;
  7282  000990  D07C               	goto	i2l345
  7283  000992                     i2l1684:
  7284                           
  7285                           ;Lab9pA.c: 166: {
  7286                           ;Lab9pA.c: 167: if((Time_Elapsed > 8500) && (Time_Elapsed < 9500) )
  7287  000992  0E35               	movlw	53
  7288  000994  5C61               	subwf	_Time_Elapsed,w,c
  7289  000996  0E21               	movlw	33
  7290  000998  5862               	subwfb	_Time_Elapsed+1,w,c
  7291  00099A  A0D8               	btfss	status,0,c
  7292  00099C  D076               	goto	i2l345
  7293  00099E  0E1C               	movlw	28
  7294  0009A0  5C61               	subwf	_Time_Elapsed,w,c
  7295  0009A2  0E25               	movlw	37
  7296  0009A4  5862               	subwfb	_Time_Elapsed+1,w,c
  7297  0009A6  B0D8               	btfsc	status,0,c
  7298  0009A8  D070               	goto	i2l345
  7299                           
  7300                           ;Lab9pA.c: 168: {
  7301                           ;Lab9pA.c: 169: Nec_state = 2;
  7302  0009AA  0E02               	movlw	2
  7303  0009AC  D01F               	goto	L5
  7304  0009AE                     i2l1690:
  7305                           
  7306                           ;Lab9pA.c: 170: INTCON2bits.INTEDG0 = 0;
  7307  0009AE  9CF1               	bcf	intcon2,6,c	;volatile
  7308                           
  7309                           ;Lab9pA.c: 171: }
  7310                           ;Lab9pA.c: 172: return;
  7311  0009B0  D06C               	goto	i2l345
  7312  0009B2                     i2l1694:
  7313                           
  7314                           ;Lab9pA.c: 177: {
  7315                           ;Lab9pA.c: 178: if((Time_Elapsed > 4000) && (Time_Elapsed < 5000) )
  7316  0009B2  0EA1               	movlw	161
  7317  0009B4  5C61               	subwf	_Time_Elapsed,w,c
  7318  0009B6  0E0F               	movlw	15
  7319  0009B8  5862               	subwfb	_Time_Elapsed+1,w,c
  7320  0009BA  A0D8               	btfss	status,0,c
  7321  0009BC  D066               	goto	i2l345
  7322  0009BE  0E88               	movlw	136
  7323  0009C0  5C61               	subwf	_Time_Elapsed,w,c
  7324  0009C2  0E13               	movlw	19
  7325  0009C4  5862               	subwfb	_Time_Elapsed+1,w,c
  7326  0009C6  B0D8               	btfsc	status,0,c
  7327  0009C8  D060               	goto	i2l345
  7328                           
  7329                           ;Lab9pA.c: 179: {
  7330                           ;Lab9pA.c: 180: Nec_state = 3;
  7331  0009CA  0E03               	movlw	3
  7332  0009CC                     L4:
  7333  0009CC  6E6A               	movwf	_Nec_state,c
  7334  0009CE  D7DF               	goto	i2l1680
  7335                           
  7336                           ;Lab9pA.c: 182: }
  7337                           ;Lab9pA.c: 183: return;
  7338                           
  7339                           ;Lab9pA.c: 181: INTCON2bits.INTEDG0 = 1;
  7340  0009D0  D05C               	goto	i2l345
  7341  0009D2                     i2l1704:
  7342                           
  7343                           ;Lab9pA.c: 187: {
  7344                           ;Lab9pA.c: 188: if((Time_Elapsed > 400) && (Time_Elapsed < 700) )
  7345  0009D2  0E91               	movlw	145
  7346  0009D4  5C61               	subwf	_Time_Elapsed,w,c
  7347  0009D6  0E01               	movlw	1
  7348  0009D8  5862               	subwfb	_Time_Elapsed+1,w,c
  7349  0009DA  A0D8               	btfss	status,0,c
  7350  0009DC  D056               	goto	i2l345
  7351  0009DE  0EBC               	movlw	188
  7352  0009E0  5C61               	subwf	_Time_Elapsed,w,c
  7353  0009E2  0E02               	movlw	2
  7354  0009E4  5862               	subwfb	_Time_Elapsed+1,w,c
  7355  0009E6  B0D8               	btfsc	status,0,c
  7356  0009E8  D050               	goto	i2l345
  7357                           
  7358                           ;Lab9pA.c: 189: {
  7359                           ;Lab9pA.c: 190: Nec_state = 4;
  7360  0009EA  0E04               	movlw	4
  7361  0009EC                     L5:
  7362  0009EC  6E6A               	movwf	_Nec_state,c
  7363  0009EE  D7DF               	goto	i2l1690
  7364                           
  7365                           ;Lab9pA.c: 192: }
  7366                           ;Lab9pA.c: 193: return;
  7367                           
  7368                           ;Lab9pA.c: 191: INTCON2bits.INTEDG0 = 0;
  7369  0009F0  D04C               	goto	i2l345
  7370  0009F2                     i2l1714:
  7371                           
  7372                           ;Lab9pA.c: 197: {
  7373                           ;Lab9pA.c: 198: if((Time_Elapsed > 400) && (Time_Elapsed < 1800) )
  7374  0009F2  0E91               	movlw	145
  7375  0009F4  5C61               	subwf	_Time_Elapsed,w,c
  7376  0009F6  0E01               	movlw	1
  7377  0009F8  5862               	subwfb	_Time_Elapsed+1,w,c
  7378  0009FA  A0D8               	btfss	status,0,c
  7379  0009FC  D030               	goto	i2l1726
  7380  0009FE  0E08               	movlw	8
  7381  000A00  5C61               	subwf	_Time_Elapsed,w,c
  7382  000A02  0E07               	movlw	7
  7383  000A04  5862               	subwfb	_Time_Elapsed+1,w,c
  7384  000A06  B0D8               	btfsc	status,0,c
  7385  000A08  D02A               	goto	i2l1726
  7386                           
  7387                           ;Lab9pA.c: 199: {
  7388                           ;Lab9pA.c: 200: Nec_code = Nec_code << 1;
  7389  000A0A  90D8               	bcf	status,0,c
  7390  000A0C  345D               	rlcf	_Nec_code,w,c
  7391  000A0E  6E5D               	movwf	_Nec_code,c
  7392  000A10  345E               	rlcf	_Nec_code+1,w,c
  7393  000A12  6E5E               	movwf	_Nec_code+1,c
  7394  000A14  345F               	rlcf	_Nec_code+2,w,c
  7395  000A16  6E5F               	movwf	_Nec_code+2,c
  7396  000A18  3460               	rlcf	_Nec_code+3,w,c
  7397  000A1A  6E60               	movwf	_Nec_code+3,c
  7398                           
  7399                           ;Lab9pA.c: 201: if(Time_Elapsed > 1000)
  7400  000A1C  0EE9               	movlw	233
  7401  000A1E  5C61               	subwf	_Time_Elapsed,w,c
  7402  000A20  0E03               	movlw	3
  7403  000A22  5862               	subwfb	_Time_Elapsed+1,w,c
  7404  000A24  A0D8               	btfss	status,0,c
  7405  000A26  D00C               	goto	i2l354
  7406                           
  7407                           ;Lab9pA.c: 202: {
  7408                           ;Lab9pA.c: 203: Nec_code = Nec_code + 1;
  7409  000A28  0E01               	movlw	1
  7410  000A2A  245D               	addwf	_Nec_code,w,c
  7411  000A2C  6E5D               	movwf	_Nec_code,c
  7412  000A2E  0E00               	movlw	0
  7413  000A30  205E               	addwfc	_Nec_code+1,w,c
  7414  000A32  6E5E               	movwf	_Nec_code+1,c
  7415  000A34  0E00               	movlw	0
  7416  000A36  205F               	addwfc	_Nec_code+2,w,c
  7417  000A38  6E5F               	movwf	_Nec_code+2,c
  7418  000A3A  0E00               	movlw	0
  7419  000A3C  2060               	addwfc	_Nec_code+3,w,c
  7420  000A3E  6E60               	movwf	_Nec_code+3,c
  7421  000A40                     i2l354:
  7422                           
  7423                           ;Lab9pA.c: 204: }
  7424                           ;Lab9pA.c: 205: bit_count = bit_count +1;
  7425  000A40  286C               	incf	_bit_count,w,c
  7426  000A42  6E6C               	movwf	_bit_count,c
  7427                           
  7428                           ;Lab9pA.c: 206: if(bit_count > 31)
  7429  000A44  0E1F               	movlw	31
  7430  000A46  646C               	cpfsgt	_bit_count,c
  7431  000A48  D007               	goto	i2l355
  7432                           
  7433                           ;Lab9pA.c: 207: {
  7434                           ;Lab9pA.c: 208: nec_ok = 1;
  7435  000A4A  0E00               	movlw	0
  7436  000A4C  6E66               	movwf	_nec_ok+1,c
  7437  000A4E  0E01               	movlw	1
  7438  000A50  6E65               	movwf	_nec_ok,c
  7439                           
  7440                           ;Lab9pA.c: 209: INTCONbits.INT0IE = 0;
  7441  000A52  98F2               	bcf	intcon,4,c	;volatile
  7442                           
  7443                           ;Lab9pA.c: 210: Nec_state = 0;
  7444  000A54  0E00               	movlw	0
  7445  000A56  6E6A               	movwf	_Nec_state,c
  7446  000A58                     i2l355:
  7447                           
  7448                           ;Lab9pA.c: 211: }
  7449                           ;Lab9pA.c: 212: Nec_state = 3;
  7450  000A58  0E03               	movlw	3
  7451  000A5A  6E6A               	movwf	_Nec_state,c
  7452                           
  7453                           ;Lab9pA.c: 213: }
  7454  000A5C  D798               	goto	i2l1680
  7455  000A5E                     i2l1726:
  7456                           
  7457                           ;Lab9pA.c: 214: else
  7458                           ;Lab9pA.c: 215: {
  7459                           ;Lab9pA.c: 217: force_nec_state0();
  7460  000A5E  ECA9  F00B         	call	_force_nec_state0	;wreg free
  7461  000A62  D795               	goto	i2l1680
  7462  000A64  D794               	goto	i2l1680
  7463                           
  7464                           ;Lab9pA.c: 221: }
  7465                           ;Lab9pA.c: 224: }
  7466                           
  7467                           ;Lab9pA.c: 220: return;
  7468                           
  7469                           ;Lab9pA.c: 218: }
  7470                           ;Lab9pA.c: 219: INTCON2bits.INTEDG0 = 1;
  7471  000A66  D011               	goto	i2l345
  7472  000A68                     i2l1734:
  7473  000A68  506A               	movf	_Nec_state,w,c
  7474                           
  7475                           ; Switch size 1, requested type "space"
  7476                           ; Number of cases is 5, Range of values is 0 to 4
  7477                           ; switch strategies available:
  7478                           ; Name         Instructions Cycles
  7479                           ; simple_byte           16     9 (average)
  7480                           ;	Chosen strategy is simple_byte
  7481  000A6A  0A00               	xorlw	0	; case 0
  7482  000A6C  B4D8               	btfsc	status,2,c
  7483  000A6E  D77B               	goto	i2l1674
  7484  000A70  0A01               	xorlw	1	; case 1
  7485  000A72  B4D8               	btfsc	status,2,c
  7486  000A74  D78E               	goto	i2l1684
  7487  000A76  0A03               	xorlw	3	; case 2
  7488  000A78  B4D8               	btfsc	status,2,c
  7489  000A7A  D79B               	goto	i2l1694
  7490  000A7C  0A01               	xorlw	1	; case 3
  7491  000A7E  B4D8               	btfsc	status,2,c
  7492  000A80  D7A8               	goto	i2l1704
  7493  000A82  0A07               	xorlw	7	; case 4
  7494  000A84  B4D8               	btfsc	status,2,c
  7495  000A86  D7B5               	goto	i2l1714
  7496  000A88  D000               	goto	i2l345
  7497  000A8A                     i2l345:
  7498  000A8A  0012               	return		;funcret
  7499  000A8C                     __end_of_INT0_isr:
  7500                           	opt stack 0
  7501                           pclatu	equ	0xFFB
  7502                           pclath	equ	0xFFA
  7503                           tblptru	equ	0xFF8
  7504                           tblptrh	equ	0xFF7
  7505                           tblptrl	equ	0xFF6
  7506                           tablat	equ	0xFF5
  7507                           prodh	equ	0xFF4
  7508                           prodl	equ	0xFF3
  7509                           intcon	equ	0xFF2
  7510                           intcon2	equ	0xFF1
  7511                           postinc0	equ	0xFEE
  7512                           fsr0h	equ	0xFEA
  7513                           fsr0l	equ	0xFE9
  7514                           wreg	equ	0xFE8
  7515                           postdec1	equ	0xFE5
  7516                           fsr1h	equ	0xFE2
  7517                           fsr1l	equ	0xFE1
  7518                           indf2	equ	0xFDF
  7519                           postinc2	equ	0xFDE
  7520                           postdec2	equ	0xFDD
  7521                           fsr2h	equ	0xFDA
  7522                           fsr2l	equ	0xFD9
  7523                           status	equ	0xFD8
  7524                           
  7525 ;; *************** function _force_nec_state0 *****************
  7526 ;; Defined at:
  7527 ;;		line 132 in file "Lab9pA.c"
  7528 ;; Parameters:    Size  Location     Type
  7529 ;;		None
  7530 ;; Auto vars:     Size  Location     Type
  7531 ;;		None
  7532 ;; Return value:  Size  Location     Type
  7533 ;;		None               void
  7534 ;; Registers used:
  7535 ;;		wreg, status,2
  7536 ;; Tracked objects:
  7537 ;;		On entry : 0/0
  7538 ;;		On exit  : 0/0
  7539 ;;		Unchanged: 0/0
  7540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7541 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7542 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7543 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7544 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7545 ;;Total ram usage:        0 bytes
  7546 ;; Hardware stack levels used:    1
  7547 ;; This function calls:
  7548 ;;		Nothing
  7549 ;; This function is called by:
  7550 ;;		_INT0_isr
  7551 ;; This function uses a non-reentrant model
  7552 ;;
  7553                           
  7554                           	psect	text38
  7555  001752                     __ptext38:
  7556                           	opt stack 0
  7557  001752                     _force_nec_state0:
  7558                           	opt stack 20
  7559                           
  7560                           ;Lab9pA.c: 134: Nec_state=0;
  7561                           
  7562                           ;incstack = 0
  7563  001752  0E00               	movlw	0
  7564  001754  6E6A               	movwf	_Nec_state,c
  7565                           
  7566                           ;Lab9pA.c: 135: T1CONbits.TMR1ON = 0;
  7567  001756  90CD               	bcf	4045,0,c	;volatile
  7568  001758  0012               	return		;funcret
  7569  00175A                     __end_of_force_nec_state0:
  7570                           	opt stack 0
  7571                           pclatu	equ	0xFFB
  7572                           pclath	equ	0xFFA
  7573                           tblptru	equ	0xFF8
  7574                           tblptrh	equ	0xFF7
  7575                           tblptrl	equ	0xFF6
  7576                           tablat	equ	0xFF5
  7577                           prodh	equ	0xFF4
  7578                           prodl	equ	0xFF3
  7579                           intcon	equ	0xFF2
  7580                           intcon2	equ	0xFF1
  7581                           postinc0	equ	0xFEE
  7582                           fsr0h	equ	0xFEA
  7583                           fsr0l	equ	0xFE9
  7584                           wreg	equ	0xFE8
  7585                           postdec1	equ	0xFE5
  7586                           fsr1h	equ	0xFE2
  7587                           fsr1l	equ	0xFE1
  7588                           indf2	equ	0xFDF
  7589                           postinc2	equ	0xFDE
  7590                           postdec2	equ	0xFDD
  7591                           fsr2h	equ	0xFDA
  7592                           fsr2l	equ	0xFD9
  7593                           status	equ	0xFD8
  7594                           pclatu	equ	0xFFB
  7595                           pclath	equ	0xFFA
  7596                           tblptru	equ	0xFF8
  7597                           tblptrh	equ	0xFF7
  7598                           tblptrl	equ	0xFF6
  7599                           tablat	equ	0xFF5
  7600                           prodh	equ	0xFF4
  7601                           prodl	equ	0xFF3
  7602                           intcon	equ	0xFF2
  7603                           intcon2	equ	0xFF1
  7604                           postinc0	equ	0xFEE
  7605                           fsr0h	equ	0xFEA
  7606                           fsr0l	equ	0xFE9
  7607                           wreg	equ	0xFE8
  7608                           postdec1	equ	0xFE5
  7609                           fsr1h	equ	0xFE2
  7610                           fsr1l	equ	0xFE1
  7611                           indf2	equ	0xFDF
  7612                           postinc2	equ	0xFDE
  7613                           postdec2	equ	0xFDD
  7614                           fsr2h	equ	0xFDA
  7615                           fsr2l	equ	0xFD9
  7616                           status	equ	0xFD8
  7617                           
  7618                           	psect	rparam
  7619  0000                     pclatu	equ	0xFFB
  7620                           pclath	equ	0xFFA
  7621                           tblptru	equ	0xFF8
  7622                           tblptrh	equ	0xFF7
  7623                           tblptrl	equ	0xFF6
  7624                           tablat	equ	0xFF5
  7625                           prodh	equ	0xFF4
  7626                           prodl	equ	0xFF3
  7627                           intcon	equ	0xFF2
  7628                           intcon2	equ	0xFF1
  7629                           postinc0	equ	0xFEE
  7630                           fsr0h	equ	0xFEA
  7631                           fsr0l	equ	0xFE9
  7632                           wreg	equ	0xFE8
  7633                           postdec1	equ	0xFE5
  7634                           fsr1h	equ	0xFE2
  7635                           fsr1l	equ	0xFE1
  7636                           indf2	equ	0xFDF
  7637                           postinc2	equ	0xFDE
  7638                           postdec2	equ	0xFDD
  7639                           fsr2h	equ	0xFDA
  7640                           fsr2l	equ	0xFD9
  7641                           status	equ	0xFD8


Data Sizes:
    Strings     92
    Constant    547
    Data        211
    BSS         50
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     70     111
    BANK0           128      7     101
    BANK1           256      0     126
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 84
		 -> NULL(NULL[0]), buffer(BANK0[31]), txt1(BANK1[84]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 84
		 -> NULL(NULL[0]), buffer(BANK0[31]), txt1(BANK1[84]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_5(CODE[7]), STR_4(CODE[20]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_3(CODE[6]), STR_2(CODE[20]), STR_1(CODE[22]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    txt	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 84
		 -> NULL(NULL[0]), buffer(BANK0[31]), txt1(BANK1[84]), 


Critical Paths under _main in COMRAM

    _main->_drawtext
    _main->_fillCircle
    _printf->___llmod
    ___llmod->___lldiv
    _init_UART->_OpenUSART
    _fillCircle->_fillCircleHelper
    _fillCircleHelper->_drawFastVLine
    _drawCircle->_drawPixel
    _Initialize_Screen->_drawtext
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _write_data->_spiwrite
    _write_command->_spiwrite
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul

Critical Paths under _chkisr in COMRAM

    _chkisr->_INT0_isr

Critical Paths under _main in BANK0

    _main->_drawtext
    _Initialize_Screen->_drawtext

Critical Paths under _chkisr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _chkisr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _chkisr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _chkisr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _chkisr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _chkisr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _chkisr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _chkisr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _chkisr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _chkisr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _chkisr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _chkisr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _chkisr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _chkisr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _chkisr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _chkisr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   52147
                                             66 COMRAM     4     4      0
                    _Activate_Buzzer
                  _Deactivate_Buzzer
                  _Initialize_Screen
                   _Wait_Half_Second
                         _drawCircle
                           _drawtext
                         _fillCircle
                          _init_UART
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              34    26      8    3266
                                             38 COMRAM    25    17      8
                            ___lldiv
                            ___llmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      22
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             16 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     265
                                             29 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     374
                                             16 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _init_UART                                            0     0      0     273
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            3     1      2     273
                                             16 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _fillCircle                                           8     0      8    8344
                                             58 COMRAM     8     0      8
                      _drawFastVLine
                   _fillCircleHelper
 ---------------------------------------------------------------------------------
 (2) _fillCircleHelper                                    24    12     12    4703
                                             34 COMRAM    24    12     12
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (1) _drawCircle                                          20    12      8    6484
                                             27 COMRAM    20    12      8
                          _drawPixel
 ---------------------------------------------------------------------------------
 (1) _Wait_Half_Second                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Initialize_Screen                                    0     0      0   20901
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                           _drawtext
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4     287
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _fillScreen                                           2     0      2    2192
                                             35 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (3) _fillRectangle                                       12     7      5    2096
                                             23 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (1) _drawtext                                            17     9      8   12526
                                             56 COMRAM    10     2      8
                                              0 BANK0      7     7      0
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               6     4      2     195
                                             16 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _drawChar                                            11     4      7   10644
                                             45 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (3) _fillRect                                            11     6      5    3876
                                             34 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (3) _drawFastVLine                                       11     7      4    3102
                                             23 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (3) _drawPixel                                            4     1      3    4207
                                             23 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (4) _setAddrWindow                                        4     1      3    1034
                                             19 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _TFT_GreenTab_Initialize                              0     0      0    4104
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd3                                                0     0      0    1922
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd2red                                             0     0      0     130
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd1                                                0     0      0    1922
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (5) _write_data                                           1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (5) _write_command                                        1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (4) _spiwrite                                             2     2      0      34
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _LCD_Reset                                            0     0      0    1792
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             6     4      2    1792
                                             22 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     752
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _Deactivate_Buzzer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Activate_Buzzer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _chkisr                                              14    14      0       0
                                              2 COMRAM    14    14      0
                           _INT0_isr
                         _TIMER1_isr
 ---------------------------------------------------------------------------------
 (10) _TIMER1_isr                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _INT0_isr                                            2     2      0       0
                                              0 COMRAM     2     2      0
                   _force_nec_state0
 ---------------------------------------------------------------------------------
 (11) _force_nec_state0                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Activate_Buzzer
   _Deactivate_Buzzer
   _Initialize_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   _Wait_Half_Second
   _drawCircle
     _drawPixel
       _setAddrWindow
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_data
         _spiwrite
   _drawtext
     _drawChar
       ___wmul
       _drawPixel
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_data
           _spiwrite
       _fillRect
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
     _strlen
   _fillCircle
     _drawFastVLine
       _setAddrWindow
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _spiwrite
     _fillCircleHelper
       _drawFastVLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
   _init_UART
     _OpenUSART
   _printf
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___wmul
     _isdigit
     _putch

 _chkisr (ROOT)
   _INT0_isr
     _force_nec_state0
   _TIMER1_isr

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      7E       7       49.2%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      7      65       5       78.9%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     46      6F       1       87.4%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     152      34        0.0%
DATA                 0      0     152       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Fri Oct 29 23:18:59 2021

                     drawCircle@f 002A                       drawCircle@r 0020  
                     drawCircle@x 002C                       drawCircle@y 002E  
                               _i 006E                       _SSPSTATbits 000FC7  
                    drawCircle@x0 001C                      drawCircle@y0 001E  
                              _d1 0080                                _d2 0095  
                              _d3 00AA               ___wmul@multiplicand 0013  
                             l101 1446                               l111 16E6  
                             l214 0FAA                               l310 1734  
                             l215 0F16                               l161 114C  
                             l217 0F86                               l225 06FC  
                             l218 0FA8                               l155 1602  
                             l243 0AFA                               l405 0126  
                             l327 16A6                               l408 0188  
                             l177 093C                               l186 0892  
                             l179 0816                               l470 1366  
                             l446 045C                               l482 1654  
                             l474 1380                               l475 1382  
                             l476 138C                               l477 138E  
                             l479 13A8                               l913 1676  
                             l942 10B4                               l952 1328  
               ?_Wait_Half_Second 0001                               _PR2 000FCB  
               _Deactivate_Buzzer 174A                               _nbr 0063  
                             _txt 0067                               prod 000FF3  
                             wreg 000FE8                ??_Wait_Half_Second 0011  
              ?_Deactivate_Buzzer 0001                   ??_fillRectangle 001D  
                    __CFG_LVP$OFF 000000           _TFT_GreenTab_Initialize 1604  
                    __CFG_WDT$OFF 000000                              l1044 1562  
                  drawFastVLine@h 0019                    drawFastVLine@x 0022  
                  drawFastVLine@y 0018                              l3500 0804  
                            l2700 105C                              l4220 0522  
                            l4212 04F4                              l3510 0822  
                            l2702 106A                              l3360 1142  
                            l3344 10D6                              l3504 0812  
                            l2640 135E                              l2632 134C  
                            l2712 10A4                              l2704 1072  
                            l2720 12DC                              l4224 052A  
                            l4216 0508                              l3514 0852  
                            l3506 081A                              l3610 0D00  
                            l2722 12EA                              l3348 110E  
                            l3516 0886                              l2652 1378  
                            l2644 136A                              l2636 1356  
                            l2724 12F2                              l3358 1134  
                            l3534 0908                              l3526 08B4  
                            l3542 0938                              l3518 088A  
                            l3550 1536                              l3622 0D50  
                            l3536 0930                              l3528 08DC  
                            l3560 0EE0                              l2680 15B6  
                            l2728 1318                              l3386 15E4  
                            l3394 14A6                              l3634 0DC0  
                            l3626 0D6E                              l2690 166E  
                            l3802 00E4                              l3548 1530  
                            l3636 0DC8                              l3708 06E2  
                            l3900 0322                              l3820 016E  
                            l3804 00EA                              l4196 04B0  
                            l3398 14C2                              l3582 0F8A  
                            l3566 0F4E                              l2678 15AC  
                            l3902 0330                              l3910 0412  
                            l3830 01A8                              l3496 07F8  
                            l3592 0FA4                              l3736 07D2  
                            l3664 0B5C                              l3648 0AE0  
                            l3904 03A8                              l3912 0424  
                            l3840 01DE                              l3816 014A  
                            l3808 00F2                              l3586 0F94  
                            l3578 0F7C                              l3914 042C  
                            l3850 0218                              l3834 01CE  
                            l3668 0BAE                              l3844 020E  
                            l3836 01D2                              l3916 0440  
                            l3854 0224                              l3790 0064  
                            l3782 0036                              l3872 0288  
                            l3848 0214                              l3864 025A  
                            l3784 0044                              l3890 02EE  
                            l3858 0254                              l3866 026C  
                            l3794 0082                              l3778 0026  
                            l3892 02F6                              l3884 02CE  
                            l3876 02AC                              l3788 004E  
                            l3886 02D6                              l3878 02B6  
                            l3896 030E                              STR_1 FFA2  
                            STR_2 FFCC                              STR_3 FFF8  
                            STR_4 FFB8                              STR_5 FFF1  
                            STR_6 FFE0                              u2410 1104  
                            u2710 0D2A                              u2640 0F0E  
                            u2570 08EA                              u2650 0F44  
                            _TRMT 007D61               ??_Deactivate_Buzzer 0011  
                            _main 045E                              _font FD7F  
                            fsr0h 000FEA                              _txt1 012A  
                            fsr1h 000FE2                              fsr0l 000FE9  
                            fsr2h 000FDA                              fsr1l 000FE1  
                            indf2 000FDF                              fsr2l 000FD9  
                            _wrap 005C                              pclat 000FFA  
              __size_of_LCD_Reset 0012                              prodh 000FF4  
                            prodl 000FF3                              start 0018  
                 ??_drawFastVLine 001C                      ___param_bank 000010  
                     ?_TIMER1_isr 0001                  __end_of_INT0_isr 0A8C  
       __end_of_Deactivate_Buzzer 1752                   drawFastVLine@hi 0020  
                 drawFastVLine@lo 0021                             ?_main 0001  
                 drawCircle@ddF_x 0026                   drawCircle@ddF_y 0028  
                 __end_of___lldiv 10C6                             _T0CON 000FD5  
                           _T1CON 000FCD                   __end_of___llmod 133A  
                           _T2CON 000FCA                             _T3CON 000FB1  
                           i2l321 1290                             i2l345 0A8A  
                           i2l354 0A40                             i2l355 0A58  
                 drawCircle@color 0022                             _RCSTA 000FAB  
                           _TMR0H 000FD7                             _TMR1H 000FCF  
                           _TMR0L 000FD6                             _TMR1L 000FCE  
                           _SPBRG 000FAF                             _PORTA 000F80  
                           _PORTB 000F81                             _PORTC 000F82  
                           _TRISA 000F92                             _TRISB 000F93  
                           _TRISC 000F94                             _TRISD 000F95  
                           _TXREG 000FAD                             _TXSTA 000FAC  
                           _Rcmd1 0BC4                             _Rcmd3 0DDE  
                           _nRBPU 007F8F                   __end_of_dpowers FF82  
                           _color 0100                             _font2 FE7E  
           fillCircleHelper@ddF_x 0031             fillCircleHelper@ddF_y 0033  
                 __end_of_isdigit 1678             fillCircleHelper@delta 002B  
                           _putch 1730             fillCircleHelper@color 002D  
                  __CFG_BOREN$OFF 000000                             tablat 000FF5  
                           status 000FD8                   write_data@data_ 0013  
                 __initialization 114E                      __end_of_main 063A  
                    __end_of_font FE7E                  __end_of_Rcmd2red 15A2  
                          ??_main 0043                     __activetblptr 000002  
               __end_of_LCD_Reset 16FE         ??_TFT_GreenTab_Initialize 001D  
                          ?_Rcmd1 0001                            ?_Rcmd3 0001  
                          _ADCON1 000FC1                  ___llmod@dividend 001E  
                          _CCPR2L 000FBB                            ?_putch 0001  
                          i2l2146 1286                            i2l1704 09D2  
                          i2l1714 09F2                            i2l1726 0A5E  
                          i2l1734 0A68                            i2l1680 098E  
                          i2l1690 09AE                            i2l1674 0966  
                          i2l1684 0992                            i2l1694 09B2  
                          _OSCCON 000FD3               __size_of_TIMER1_isr 000C  
                          _SPBRGH 000FB0                            _SSPBUF 000FC9  
                _force_nec_state0 1752                  __end_of_delay_ms 144E  
                __end_of_fillRect 14E6                  __end_of_drawChar 093E  
              __size_of_OpenUSART 0070          __size_of_Activate_Buzzer 0012  
                          ___wmul 162E         __size_of_fillCircleHelper 0138  
                __end_of_drawtext 0DDE                         ??___lldiv 0019  
                       ??___llmod 0026                            _chkisr 0008  
                          _array1 0047                            _buffer 00BF  
                          _nec_ok 0065                            clear_0 1154  
                          clear_1 1160        __size_of_Deactivate_Buzzer 0008  
                          _printf 001C                      drawtext@size 0040  
                          main@in 0044                            _strcpy 15A2  
                          _strlen 1526                      __pdataCOMRAM 0047  
                       ??_isdigit 0011                      __mediumconst FD7E  
                          tblptrh 000FF7                            tblptrl 000FF6  
                          tblptru 000FF8                            putch@c 0011  
                __end_of_spiwrite 16EC                        __accesstop 0080  
         __end_of__initialization 11C6                         ?_INT0_isr 0001  
                   ___rparam_used 000001                     __end_of_Rcmd1 0CD4  
                   __end_of_Rcmd3 0ED0                    __pcstackCOMRAM 0001  
                    __pidataBANK0 14E6                      __pidataBANK1 11D0  
                   __end_of_font2 FF5A                     __end_of_putch 173E  
                  drawPixel@color 0019            __size_of_write_command 0010  
      fillCircleHelper@cornername 0029                           ??_Rcmd1 001D  
                         ??_Rcmd3 001D                __size_of_drawPixel 0030  
               __end_of_OpenUSART 13AA                           ??_putch 0011  
                      __pbssBANK0 00BF                         ?_Rcmd2red 0001  
              __size_of_init_UART 0014         __size_of_Wait_Half_Second 001A  
                 spiwrite@spidata 0012                        ??_INT0_isr 0001  
              __CFG_CCP2MX$PORTBE 000000                           ?___wmul 0011  
                         ?_chkisr 0001            __size_of_setAddrWindow 004E  
                         _CCP2CON 000FBA                      ??_TIMER1_isr 0001  
                      _fillCircle 13AA                           ?_printf 0027  
                         ?_strcpy 0011                           ?_strlen 0011  
               ??_Activate_Buzzer 0011                        _fillScreen 1678  
                      _drawCircle 063A                         ?_delay_ms 0017  
                       ?_fillRect 0023                         ?_drawChar 002E  
                         _SSPCON1 000FC6                           _SSPSTAT 000FC7  
           __end_of_fillRectangle 0FAC                         ?_drawtext 0039  
                      ??_Rcmd2red 0014                __end_of_TIMER1_isr 174A  
                   _write_command 1720                           __Hparam 0000  
                         __Lparam 0000                 __end_of_drawPixel 1604  
           __end_of_drawFastVLine 114E                  _fillCircleHelper 0A8C  
                         ___lldiv 103A                   __size_of___wmul 0028  
                         ___llmod 12CA                   __size_of_chkisr 12C2  
                       ?_spiwrite 0001                           __pcinit 114E  
                         __ramtop 1000                           __ptext0 045E  
                         __ptext1 001C                           __ptext2 1730  
                         __ptext3 1656                           __ptext4 12CA  
                         __ptext5 103A                           __ptext6 16C4  
                         __ptext7 133A                           __ptext8 13AA  
                         __ptext9 0A8C                   __size_of_printf 0442  
               __end_of_init_UART 16D8                         _T0CONbits 000FD5  
                 __size_of_strcpy 0032                   __size_of_strlen 003E  
               __end_of_hexpowers FFA2          __end_of_force_nec_state0 175A  
                       _T1CONbits 000FCD                           _dpowers FF5A  
                         _isdigit 1656                         _T3CONbits 000FB1  
                      ??_delay_ms 0019                     drawtext@_text 003A  
                   drawtext@color 003C                        ??_fillRect 0028  
                      ??_drawChar 0035                         _LCD_Reset 16EC  
                   _setAddrWindow 144E                    __pintcode_body 124E  
                      delay_ms@ms 0017              end_of_initialization 11C6  
                      ??_drawtext 0041                    ?_write_command 0001  
                   __Lmediumconst FD7E                           int_func 124E  
                 ___lldiv@divisor 0015                   ___lldiv@counter 001D  
                       _RCSTAbits 000FAB                           printf@c 003F  
                         printf@f 0027                           postdec1 000FE5  
                         postdec2 000FDD                           postinc0 000FEE  
                         postinc2 000FDE                        ??_spiwrite 0011  
                         strlen@s 0011                   fillCircle@color 0041  
                     ?_fillCircle 003B                  drawtext@cursor_x 00E4  
                drawtext@cursor_y 00E3                         _PORTBbits 000F81  
                       _PORTDbits 000F83                         _PORTEbits 000F84  
                     ?_fillScreen 0024                       ?_drawCircle 001C  
                      drawChar@bg 0032                         _TRISCbits 000F94  
                  ?_setAddrWindow 0014                        ?_LCD_Reset 0001  
                drawtext@textsize 00DF                        drawPixel@x 001B  
                      drawPixel@y 0018                  _Wait_Half_Second 1694  
                     printf@width 003C                         _TXSTAbits 000FAC  
               __size_of_INT0_isr 014E                    __end_of___wmul 1656  
                   delay_ms@count 001B                        _write_data 1710  
                   __pidataCOMRAM 16AE                    __end_of_chkisr 12CA  
        ?_TFT_GreenTab_Initialize 0001                        drawtext@bg 003E  
                       _Nec_code1 0069                    __end_of_printf 045E  
                  __end_of_strcpy 15D4                    __end_of_strlen 1564  
                       _Nec_state 006A               start_initialization 114E  
                 ??_write_command 0013                         _OpenUSART 133A  
             __size_of_fillCircle 0052                   ___llmod@divisor 0022  
                __CFG_OSC$INTIO67 000000                   ___llmod@counter 0026  
               __size_of_Rcmd2red 003E               __size_of_fillScreen 001C  
             __size_of_drawCircle 01AE                   _Activate_Buzzer 16FE  
                        ??___wmul 0015                          ??_chkisr 0003  
                     __pdataBANK0 0080                       __pdataBANK1 0100  
                 setAddrWindow@x0 0017                   setAddrWindow@x1 0015  
                 setAddrWindow@y0 0014                   setAddrWindow@y1 0016  
                        ??_printf 002F                          ??_strcpy 0015  
                        ??_strlen 0013                       __pbssCOMRAM 005D  
                 ??_setAddrWindow 0017                     __pcstackBANK0 00DE  
                     ??_LCD_Reset 001D                      _isdigit$1793 0012  
        __end_of_fillCircleHelper 0BC4                 __size_of_delay_ms 0052  
               __size_of_fillRect 004A                 __size_of_drawChar 0156  
                      ?_OpenUSART 0011                 __size_of_drawtext 010A  
                       _bit_count 006C                         __pintcode 0008  
 __end_of_TFT_GreenTab_Initialize 162E                     __pmediumconst FD7E  
                        ?___lldiv 0011                          ?___llmod 001E  
                       __tft_type 006B                drawFastVLine@color 001A  
                     ?_write_data 0001                         _drawPixel 15D4  
               __size_of_spiwrite 0014                 ?_force_nec_state0 0001  
                        ?_isdigit 0001                 _Initialize_Screen 0FAC  
                  __size_of_Rcmd1 0110                    __size_of_Rcmd3 00F2  
                       _init_UART 16C4                ??_force_nec_state0 0001  
                       _hexpowers FF82                ?_Initialize_Screen 0001  
                  __size_of_putch 000E           __end_of_Activate_Buzzer 1710  
                  ___wmul@product 0015               ??_Initialize_Screen 0043  
                        _INT0_isr 093E                          _PIE1bits 000F9D  
                        _PIR1bits 000F9E                          _PIR2bits 000FA1  
                       fillRect@h 0025                         fillRect@i 002C  
                       fillRect@w 0024                         fillRect@x 002B  
                       fillRect@y 0023                         drawChar@c 002F  
                       drawChar@i 0038                         drawChar@j 0037  
                    ??_fillCircle 0043                         drawChar@x 0036  
                       drawChar@y 002E                        ?_drawPixel 0018  
          __size_of_fillRectangle 00DC          __end_of_Wait_Half_Second 16AE  
               ___wmul@multiplier 0011         __end_of_Initialize_Screen 103A  
                    ??_fillScreen 0026                      ??_drawCircle 0024  
                      printf@flag 003E                        printf@prec 0034  
                       main@found 0046                        ?_init_UART 0001  
                     _INTCON2bits 000FF1                         copy_data0 117A  
                       copy_data1 119A                         copy_data2 11BA  
                       drawtext@i 00E1            __size_of_drawFastVLine 0088  
                       drawtext@x 00DE                         drawtext@y 0039  
                        _Nec_code 005D                 write_command@cmd_ 0013  
                     ??_OpenUSART 0013                          _Rcmd2red 1564  
             __size_of_write_data 0010                   OpenUSART@config 0013  
                    _Time_Elapsed 0061                __end_of_fillCircle 13FC  
                        __Hrparam 0000                __end_of_fillScreen 1694  
                        __Lrparam 0000                __end_of_drawCircle 07E8  
                __size_of___lldiv 008C                  __size_of___llmod 0070  
                __size_of_isdigit 0022                          _delay_ms 13FC  
                        __ptext10 063A                          __ptext11 1694  
                        __ptext20 10C6                          __ptext12 0FAC  
                        __ptext21 15D4                          __ptext13 15A2  
                        __ptext30 16EC                          __ptext22 144E  
                        __ptext14 1678                          __ptext31 13FC  
                        __ptext23 1604                          __ptext15 0ED0  
                        __ptext32 162E                          __ptext24 0DDE  
                        __ptext16 0CD4                          __ptext33 174A  
                        __ptext25 1564                          __ptext17 1526  
                        __ptext34 16FE                          __ptext26 0BC4  
                        __ptext18 07E8                          __ptext27 1710  
                        __ptext19 149C                          __ptext36 173E  
                        __ptext28 1720                          __ptext37 093E  
                        __ptext29 16D8                          __ptext38 1752  
                        _fillRect 149C                          _drawChar 07E8  
__size_of_TFT_GreenTab_Initialize 002A                          _colstart 006D  
                        _drawtext 0CD4                        strcpy@from 0013  
                   _fillRectangle 0ED0                  ?_Activate_Buzzer 0001  
                   __size_of_main 01DC                   fillRectangle@hi 0021  
                 fillRectangle@lo 0022                     _drawFastVLine 10C6  
                       printf@idx 0033                          _spiwrite 16D8  
                       printf@val 0038                       ??_drawPixel 001B  
                        _rowstart 006F                fillCircleHelper@x0 0023  
              fillCircleHelper@y0 0025        __size_of_Initialize_Screen 008E  
                      _INTCONbits 000FF2                    OpenUSART@spbrg 0011  
                     ??_init_UART 0014                          isdigit@c 0013  
               ?_fillCircleHelper 0023                         spiwrite@x 0011  
                        intlevel2 0000                    ?_fillRectangle 0018  
              ??_fillCircleHelper 002F             __end_of_write_command 1730  
                ___lldiv@dividend 0011                   fillScreen@color 0024  
                    fillCircle@x0 003B                      fillCircle@y0 003D  
                  fillRectangle@h 001A                    fillRectangle@w 0019  
                  fillRectangle@x 0023                    fillRectangle@y 0018  
                  ?_drawFastVLine 0018                          printf@ap 0036  
               fillCircleHelper@f 0035                 fillCircleHelper@r 0027  
               fillCircleHelper@x 0037                 fillCircleHelper@y 0039  
                    ??_write_data 0013                        _TIMER1_isr 173E  
                   fillRect@color 0026                  ___lldiv@quotient 0019  
                        strcpy@cp 0015                          strlen@cp 0015  
                        strcpy@to 0011                       fillCircle@r 003F  
           __end_of_setAddrWindow 149C                fillRectangle@color 001B  
                   drawChar@color 0030                __end_of_write_data 1720  
       __size_of_force_nec_state0 0008                      drawChar@line 0035  
                    drawChar@size 0034  
