

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Fri Oct 15 11:39:12 2021

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    72                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    73                           	psect	text57,global,reloc=2,class=CODE,delta=1
    74                           	psect	text58,global,reloc=2,class=CODE,delta=1
    75                           	psect	text59,global,reloc=2,class=CODE,delta=1
    76                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    77                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    78  0000                     
    79                           	psect	idataCOMRAM
    80  0025EC                     __pidataCOMRAM:
    81                           	opt stack 0
    82                           
    83                           ;initializer for _wrap
    84  0025EC  01                 	db	1
    85                           
    86                           ;initializer for _EWLT_Count
    87  0025ED  30                 	db	48
    88  0025EE  30                 	db	48
    89  0025EF  00                 	db	0
    90                           
    91                           ;initializer for _EW_Count
    92  0025F0  30                 	db	48
    93  0025F1  30                 	db	48
    94  0025F2  00                 	db	0
    95                           
    96                           ;initializer for _Act_Mode_Txt
    97  0025F3  44                 	db	68
    98  0025F4  00                 	db	0
    99                           
   100                           ;initializer for _FlashingR_Txt
   101  0025F5  30                 	db	48
   102  0025F6  00                 	db	0
   103                           
   104                           ;initializer for _FlashingS_Txt
   105  0025F7  30                 	db	48
   106  0025F8  00                 	db	0
   107                           
   108                           ;initializer for _SW_EWLT_Txt
   109  0025F9  30                 	db	48
   110  0025FA  00                 	db	0
   111                           
   112                           ;initializer for _SW_EWPED_Txt
   113  0025FB  30                 	db	48
   114  0025FC  00                 	db	0
   115                           
   116                           ;initializer for _SW_MODE_Txt
   117  0025FD  44                 	db	68
   118  0025FE  00                 	db	0
   119                           
   120                           ;initializer for _SW_NSLT_Txt
   121  0025FF  30                 	db	48
   122  002600  00                 	db	0
   123                           
   124                           ;initializer for _SW_NSPED_Txt
   125  002601  30                 	db	48
   126  002602  00                 	db	0
   127                           
   128                           	psect	idataBANK0
   129  0026A2                     __pidataBANK0:
   130                           	opt stack 0
   131                           
   132                           ;initializer for _NSLT_Count
   133  0026A2  30                 	db	48
   134  0026A3  30                 	db	48
   135  0026A4  00                 	db	0
   136                           
   137                           ;initializer for _NS_Count
   138  0026A5  30                 	db	48
   139  0026A6  30                 	db	48
   140  0026A7  00                 	db	0
   141                           
   142                           ;initializer for _PED_EW_Count
   143  0026A8  30                 	db	48
   144  0026A9  30                 	db	48
   145  0026AA  00                 	db	0
   146                           
   147                           ;initializer for _PED_NS_Count
   148  0026AB  30                 	db	48
   149  0026AC  30                 	db	48
   150  0026AD  00                 	db	0
   151                           
   152                           	psect	mediumconst
   153  00FDBC                     __pmediumconst:
   154                           	opt stack 0
   155  00FDBC  00                 	db	0
   156  00FDBD                     _font:
   157                           	opt stack 0
   158  00FDBD  00                 	db	0
   159  00FDBE  00                 	db	0
   160  00FDBF  00                 	db	0
   161  00FDC0  00                 	db	0
   162  00FDC1  00                 	db	0
   163  00FDC2  00                 	db	0
   164  00FDC3  00                 	db	0
   165  00FDC4  5F                 	db	95
   166  00FDC5  00                 	db	0
   167  00FDC6  00                 	db	0
   168  00FDC7  00                 	db	0
   169  00FDC8  07                 	db	7
   170  00FDC9  00                 	db	0
   171  00FDCA  07                 	db	7
   172  00FDCB  00                 	db	0
   173  00FDCC  14                 	db	20
   174  00FDCD  7F                 	db	127
   175  00FDCE  14                 	db	20
   176  00FDCF  7F                 	db	127
   177  00FDD0  14                 	db	20
   178  00FDD1  24                 	db	36
   179  00FDD2  2A                 	db	42
   180  00FDD3  7F                 	db	127
   181  00FDD4  2A                 	db	42
   182  00FDD5  12                 	db	18
   183  00FDD6  23                 	db	35
   184  00FDD7  13                 	db	19
   185  00FDD8  08                 	db	8
   186  00FDD9  64                 	db	100
   187  00FDDA  62                 	db	98
   188  00FDDB  36                 	db	54
   189  00FDDC  49                 	db	73
   190  00FDDD  56                 	db	86
   191  00FDDE  20                 	db	32
   192  00FDDF  50                 	db	80
   193  00FDE0  00                 	db	0
   194  00FDE1  08                 	db	8
   195  00FDE2  07                 	db	7
   196  00FDE3  03                 	db	3
   197  00FDE4  00                 	db	0
   198  00FDE5  00                 	db	0
   199  00FDE6  1C                 	db	28
   200  00FDE7  22                 	db	34
   201  00FDE8  41                 	db	65
   202  00FDE9  00                 	db	0
   203  00FDEA  00                 	db	0
   204  00FDEB  41                 	db	65
   205  00FDEC  22                 	db	34
   206  00FDED  1C                 	db	28
   207  00FDEE  00                 	db	0
   208  00FDEF  2A                 	db	42
   209  00FDF0  1C                 	db	28
   210  00FDF1  7F                 	db	127
   211  00FDF2  1C                 	db	28
   212  00FDF3  2A                 	db	42
   213  00FDF4  08                 	db	8
   214  00FDF5  08                 	db	8
   215  00FDF6  3E                 	db	62
   216  00FDF7  08                 	db	8
   217  00FDF8  08                 	db	8
   218  00FDF9  00                 	db	0
   219  00FDFA  80                 	db	128
   220  00FDFB  70                 	db	112
   221  00FDFC  30                 	db	48
   222  00FDFD  00                 	db	0
   223  00FDFE  08                 	db	8
   224  00FDFF  08                 	db	8
   225  00FE00  08                 	db	8
   226  00FE01  08                 	db	8
   227  00FE02  08                 	db	8
   228  00FE03  00                 	db	0
   229  00FE04  00                 	db	0
   230  00FE05  60                 	db	96
   231  00FE06  60                 	db	96
   232  00FE07  00                 	db	0
   233  00FE08  20                 	db	32
   234  00FE09  10                 	db	16
   235  00FE0A  08                 	db	8
   236  00FE0B  04                 	db	4
   237  00FE0C  02                 	db	2
   238  00FE0D  3E                 	db	62
   239  00FE0E  51                 	db	81
   240  00FE0F  49                 	db	73
   241  00FE10  45                 	db	69
   242  00FE11  3E                 	db	62
   243  00FE12  00                 	db	0
   244  00FE13  42                 	db	66
   245  00FE14  7F                 	db	127
   246  00FE15  40                 	db	64
   247  00FE16  00                 	db	0
   248  00FE17  72                 	db	114
   249  00FE18  49                 	db	73
   250  00FE19  49                 	db	73
   251  00FE1A  49                 	db	73
   252  00FE1B  46                 	db	70
   253  00FE1C  21                 	db	33
   254  00FE1D  41                 	db	65
   255  00FE1E  49                 	db	73
   256  00FE1F  4D                 	db	77
   257  00FE20  33                 	db	51
   258  00FE21  18                 	db	24
   259  00FE22  14                 	db	20
   260  00FE23  12                 	db	18
   261  00FE24  7F                 	db	127
   262  00FE25  10                 	db	16
   263  00FE26  27                 	db	39
   264  00FE27  45                 	db	69
   265  00FE28  45                 	db	69
   266  00FE29  45                 	db	69
   267  00FE2A  39                 	db	57
   268  00FE2B  3C                 	db	60
   269  00FE2C  4A                 	db	74
   270  00FE2D  49                 	db	73
   271  00FE2E  49                 	db	73
   272  00FE2F  31                 	db	49
   273  00FE30  41                 	db	65
   274  00FE31  21                 	db	33
   275  00FE32  11                 	db	17
   276  00FE33  09                 	db	9
   277  00FE34  07                 	db	7
   278  00FE35  36                 	db	54
   279  00FE36  49                 	db	73
   280  00FE37  49                 	db	73
   281  00FE38  49                 	db	73
   282  00FE39  36                 	db	54
   283  00FE3A  46                 	db	70
   284  00FE3B  49                 	db	73
   285  00FE3C  49                 	db	73
   286  00FE3D  29                 	db	41
   287  00FE3E  1E                 	db	30
   288  00FE3F  00                 	db	0
   289  00FE40  00                 	db	0
   290  00FE41  14                 	db	20
   291  00FE42  00                 	db	0
   292  00FE43  00                 	db	0
   293  00FE44  00                 	db	0
   294  00FE45  40                 	db	64
   295  00FE46  34                 	db	52
   296  00FE47  00                 	db	0
   297  00FE48  00                 	db	0
   298  00FE49  00                 	db	0
   299  00FE4A  08                 	db	8
   300  00FE4B  14                 	db	20
   301  00FE4C  22                 	db	34
   302  00FE4D  41                 	db	65
   303  00FE4E  14                 	db	20
   304  00FE4F  14                 	db	20
   305  00FE50  14                 	db	20
   306  00FE51  14                 	db	20
   307  00FE52  14                 	db	20
   308  00FE53  00                 	db	0
   309  00FE54  41                 	db	65
   310  00FE55  22                 	db	34
   311  00FE56  14                 	db	20
   312  00FE57  08                 	db	8
   313  00FE58  02                 	db	2
   314  00FE59  01                 	db	1
   315  00FE5A  59                 	db	89
   316  00FE5B  09                 	db	9
   317  00FE5C  06                 	db	6
   318  00FE5D  3E                 	db	62
   319  00FE5E  41                 	db	65
   320  00FE5F  5D                 	db	93
   321  00FE60  59                 	db	89
   322  00FE61  4E                 	db	78
   323  00FE62  7C                 	db	124
   324  00FE63  12                 	db	18
   325  00FE64  11                 	db	17
   326  00FE65  12                 	db	18
   327  00FE66  7C                 	db	124
   328  00FE67  7F                 	db	127
   329  00FE68  49                 	db	73
   330  00FE69  49                 	db	73
   331  00FE6A  49                 	db	73
   332  00FE6B  36                 	db	54
   333  00FE6C  3E                 	db	62
   334  00FE6D  41                 	db	65
   335  00FE6E  41                 	db	65
   336  00FE6F  41                 	db	65
   337  00FE70  22                 	db	34
   338  00FE71  7F                 	db	127
   339  00FE72  41                 	db	65
   340  00FE73  41                 	db	65
   341  00FE74  41                 	db	65
   342  00FE75  3E                 	db	62
   343  00FE76  7F                 	db	127
   344  00FE77  49                 	db	73
   345  00FE78  49                 	db	73
   346  00FE79  49                 	db	73
   347  00FE7A  41                 	db	65
   348  00FE7B  7F                 	db	127
   349  00FE7C  09                 	db	9
   350  00FE7D  09                 	db	9
   351  00FE7E  09                 	db	9
   352  00FE7F  01                 	db	1
   353  00FE80  3E                 	db	62
   354  00FE81  41                 	db	65
   355  00FE82  41                 	db	65
   356  00FE83  51                 	db	81
   357  00FE84  73                 	db	115
   358  00FE85  7F                 	db	127
   359  00FE86  08                 	db	8
   360  00FE87  08                 	db	8
   361  00FE88  08                 	db	8
   362  00FE89  7F                 	db	127
   363  00FE8A  00                 	db	0
   364  00FE8B  41                 	db	65
   365  00FE8C  7F                 	db	127
   366  00FE8D  41                 	db	65
   367  00FE8E  00                 	db	0
   368  00FE8F  20                 	db	32
   369  00FE90  40                 	db	64
   370  00FE91  41                 	db	65
   371  00FE92  3F                 	db	63
   372  00FE93  01                 	db	1
   373  00FE94  7F                 	db	127
   374  00FE95  08                 	db	8
   375  00FE96  14                 	db	20
   376  00FE97  22                 	db	34
   377  00FE98  41                 	db	65
   378  00FE99  7F                 	db	127
   379  00FE9A  40                 	db	64
   380  00FE9B  40                 	db	64
   381  00FE9C  40                 	db	64
   382  00FE9D  40                 	db	64
   383  00FE9E  7F                 	db	127
   384  00FE9F  02                 	db	2
   385  00FEA0  1C                 	db	28
   386  00FEA1  02                 	db	2
   387  00FEA2  7F                 	db	127
   388  00FEA3  7F                 	db	127
   389  00FEA4  04                 	db	4
   390  00FEA5  08                 	db	8
   391  00FEA6  10                 	db	16
   392  00FEA7  7F                 	db	127
   393  00FEA8  3E                 	db	62
   394  00FEA9  41                 	db	65
   395  00FEAA  41                 	db	65
   396  00FEAB  41                 	db	65
   397  00FEAC  3E                 	db	62
   398  00FEAD  7F                 	db	127
   399  00FEAE  09                 	db	9
   400  00FEAF  09                 	db	9
   401  00FEB0  09                 	db	9
   402  00FEB1  06                 	db	6
   403  00FEB2  3E                 	db	62
   404  00FEB3  41                 	db	65
   405  00FEB4  51                 	db	81
   406  00FEB5  21                 	db	33
   407  00FEB6  5E                 	db	94
   408  00FEB7  7F                 	db	127
   409  00FEB8  09                 	db	9
   410  00FEB9  19                 	db	25
   411  00FEBA  29                 	db	41
   412  00FEBB  46                 	db	70
   413  00FEBC                     __end_of_font:
   414                           	opt stack 0
   415  00FEBC                     _font2:
   416                           	opt stack 0
   417  00FEBC  26                 	db	38
   418  00FEBD  49                 	db	73
   419  00FEBE  49                 	db	73
   420  00FEBF  49                 	db	73
   421  00FEC0  32                 	db	50
   422  00FEC1  03                 	db	3
   423  00FEC2  01                 	db	1
   424  00FEC3  7F                 	db	127
   425  00FEC4  01                 	db	1
   426  00FEC5  03                 	db	3
   427  00FEC6  3F                 	db	63
   428  00FEC7  40                 	db	64
   429  00FEC8  40                 	db	64
   430  00FEC9  40                 	db	64
   431  00FECA  3F                 	db	63
   432  00FECB  1F                 	db	31
   433  00FECC  20                 	db	32
   434  00FECD  40                 	db	64
   435  00FECE  20                 	db	32
   436  00FECF  1F                 	db	31
   437  00FED0  3F                 	db	63
   438  00FED1  40                 	db	64
   439  00FED2  38                 	db	56
   440  00FED3  40                 	db	64
   441  00FED4  3F                 	db	63
   442  00FED5  63                 	db	99
   443  00FED6  14                 	db	20
   444  00FED7  08                 	db	8
   445  00FED8  14                 	db	20
   446  00FED9  63                 	db	99
   447  00FEDA  03                 	db	3
   448  00FEDB  04                 	db	4
   449  00FEDC  78                 	db	120
   450  00FEDD  04                 	db	4
   451  00FEDE  03                 	db	3
   452  00FEDF  61                 	db	97
   453  00FEE0  59                 	db	89
   454  00FEE1  49                 	db	73
   455  00FEE2  4D                 	db	77
   456  00FEE3  43                 	db	67
   457  00FEE4  00                 	db	0
   458  00FEE5  7F                 	db	127
   459  00FEE6  41                 	db	65
   460  00FEE7  41                 	db	65
   461  00FEE8  41                 	db	65
   462  00FEE9  02                 	db	2
   463  00FEEA  04                 	db	4
   464  00FEEB  08                 	db	8
   465  00FEEC  10                 	db	16
   466  00FEED  20                 	db	32
   467  00FEEE  00                 	db	0
   468  00FEEF  41                 	db	65
   469  00FEF0  41                 	db	65
   470  00FEF1  41                 	db	65
   471  00FEF2  7F                 	db	127
   472  00FEF3  04                 	db	4
   473  00FEF4  02                 	db	2
   474  00FEF5  01                 	db	1
   475  00FEF6  02                 	db	2
   476  00FEF7  04                 	db	4
   477  00FEF8  40                 	db	64
   478  00FEF9  40                 	db	64
   479  00FEFA  40                 	db	64
   480  00FEFB  40                 	db	64
   481  00FEFC  40                 	db	64
   482  00FEFD  00                 	db	0
   483  00FEFE  03                 	db	3
   484  00FEFF  07                 	db	7
   485  00FF00  08                 	db	8
   486  00FF01  00                 	db	0
   487  00FF02  20                 	db	32
   488  00FF03  54                 	db	84
   489  00FF04  54                 	db	84
   490  00FF05  78                 	db	120
   491  00FF06  40                 	db	64
   492  00FF07  7F                 	db	127
   493  00FF08  28                 	db	40
   494  00FF09  44                 	db	68
   495  00FF0A  44                 	db	68
   496  00FF0B  38                 	db	56
   497  00FF0C  38                 	db	56
   498  00FF0D  44                 	db	68
   499  00FF0E  44                 	db	68
   500  00FF0F  44                 	db	68
   501  00FF10  28                 	db	40
   502  00FF11  38                 	db	56
   503  00FF12  44                 	db	68
   504  00FF13  44                 	db	68
   505  00FF14  28                 	db	40
   506  00FF15  7F                 	db	127
   507  00FF16  38                 	db	56
   508  00FF17  54                 	db	84
   509  00FF18  54                 	db	84
   510  00FF19  54                 	db	84
   511  00FF1A  18                 	db	24
   512  00FF1B  00                 	db	0
   513  00FF1C  08                 	db	8
   514  00FF1D  7E                 	db	126
   515  00FF1E  09                 	db	9
   516  00FF1F  02                 	db	2
   517  00FF20  18                 	db	24
   518  00FF21  A4                 	db	164
   519  00FF22  A4                 	db	164
   520  00FF23  9C                 	db	156
   521  00FF24  78                 	db	120
   522  00FF25  7F                 	db	127
   523  00FF26  08                 	db	8
   524  00FF27  04                 	db	4
   525  00FF28  04                 	db	4
   526  00FF29  78                 	db	120
   527  00FF2A  00                 	db	0
   528  00FF2B  44                 	db	68
   529  00FF2C  7D                 	db	125
   530  00FF2D  40                 	db	64
   531  00FF2E  00                 	db	0
   532  00FF2F  20                 	db	32
   533  00FF30  40                 	db	64
   534  00FF31  40                 	db	64
   535  00FF32  3D                 	db	61
   536  00FF33  00                 	db	0
   537  00FF34  7F                 	db	127
   538  00FF35  10                 	db	16
   539  00FF36  28                 	db	40
   540  00FF37  44                 	db	68
   541  00FF38  00                 	db	0
   542  00FF39  00                 	db	0
   543  00FF3A  41                 	db	65
   544  00FF3B  7F                 	db	127
   545  00FF3C  40                 	db	64
   546  00FF3D  00                 	db	0
   547  00FF3E  7C                 	db	124
   548  00FF3F  04                 	db	4
   549  00FF40  78                 	db	120
   550  00FF41  04                 	db	4
   551  00FF42  78                 	db	120
   552  00FF43  7C                 	db	124
   553  00FF44  08                 	db	8
   554  00FF45  04                 	db	4
   555  00FF46  04                 	db	4
   556  00FF47  78                 	db	120
   557  00FF48  38                 	db	56
   558  00FF49  44                 	db	68
   559  00FF4A  44                 	db	68
   560  00FF4B  44                 	db	68
   561  00FF4C  38                 	db	56
   562  00FF4D  FC                 	db	252
   563  00FF4E  18                 	db	24
   564  00FF4F  24                 	db	36
   565  00FF50  24                 	db	36
   566  00FF51  18                 	db	24
   567  00FF52  18                 	db	24
   568  00FF53  24                 	db	36
   569  00FF54  24                 	db	36
   570  00FF55  18                 	db	24
   571  00FF56  FC                 	db	252
   572  00FF57  7C                 	db	124
   573  00FF58  08                 	db	8
   574  00FF59  04                 	db	4
   575  00FF5A  04                 	db	4
   576  00FF5B  08                 	db	8
   577  00FF5C  48                 	db	72
   578  00FF5D  54                 	db	84
   579  00FF5E  54                 	db	84
   580  00FF5F  54                 	db	84
   581  00FF60  24                 	db	36
   582  00FF61  04                 	db	4
   583  00FF62  04                 	db	4
   584  00FF63  3F                 	db	63
   585  00FF64  44                 	db	68
   586  00FF65  24                 	db	36
   587  00FF66  3C                 	db	60
   588  00FF67  40                 	db	64
   589  00FF68  40                 	db	64
   590  00FF69  20                 	db	32
   591  00FF6A  7C                 	db	124
   592  00FF6B  1C                 	db	28
   593  00FF6C  20                 	db	32
   594  00FF6D  40                 	db	64
   595  00FF6E  20                 	db	32
   596  00FF6F  1C                 	db	28
   597  00FF70  3C                 	db	60
   598  00FF71  40                 	db	64
   599  00FF72  30                 	db	48
   600  00FF73  40                 	db	64
   601  00FF74  3C                 	db	60
   602  00FF75  44                 	db	68
   603  00FF76  28                 	db	40
   604  00FF77  10                 	db	16
   605  00FF78  28                 	db	40
   606  00FF79  44                 	db	68
   607  00FF7A  4C                 	db	76
   608  00FF7B  90                 	db	144
   609  00FF7C  90                 	db	144
   610  00FF7D  90                 	db	144
   611  00FF7E  7C                 	db	124
   612  00FF7F  44                 	db	68
   613  00FF80  64                 	db	100
   614  00FF81  54                 	db	84
   615  00FF82  4C                 	db	76
   616  00FF83  44                 	db	68
   617  00FF84  00                 	db	0
   618  00FF85  08                 	db	8
   619  00FF86  36                 	db	54
   620  00FF87  41                 	db	65
   621  00FF88  00                 	db	0
   622  00FF89  00                 	db	0
   623  00FF8A  00                 	db	0
   624  00FF8B  77                 	db	119
   625  00FF8C  00                 	db	0
   626  00FF8D  00                 	db	0
   627  00FF8E  00                 	db	0
   628  00FF8F  41                 	db	65
   629  00FF90  36                 	db	54
   630  00FF91  08                 	db	8
   631  00FF92  00                 	db	0
   632  00FF93  02                 	db	2
   633  00FF94  01                 	db	1
   634  00FF95  02                 	db	2
   635  00FF96  04                 	db	4
   636  00FF97  02                 	db	2
   637  00FF98                     __end_of_font2:
   638                           	opt stack 0
   639  0000                     _ADCON0	set	4034
   640  0000                     _ADCON0bits	set	4034
   641  0000                     _ADCON1	set	4033
   642  0000                     _ADCON2	set	4032
   643  0000                     _ADRESH	set	4036
   644  0000                     _ADRESL	set	4035
   645  0000                     _CCP2CON	set	4026
   646  0000                     _CCPR2L	set	4027
   647  0000                     _INTCON2bits	set	4081
   648  0000                     _INTCON3bits	set	4080
   649  0000                     _INTCONbits	set	4082
   650  0000                     _OSCCON	set	4051
   651  0000                     _PIE1bits	set	3997
   652  0000                     _PIR1bits	set	3998
   653  0000                     _PIR2bits	set	4001
   654  0000                     _PORTAbits	set	3968
   655  0000                     _PORTBbits	set	3969
   656  0000                     _PORTDbits	set	3971
   657  0000                     _PORTEbits	set	3972
   658  0000                     _PR2	set	4043
   659  0000                     _RCSTA	set	4011
   660  0000                     _RCSTAbits	set	4011
   661  0000                     _SPBRG	set	4015
   662  0000                     _SPBRGH	set	4016
   663  0000                     _SSPBUF	set	4041
   664  0000                     _SSPCON1	set	4038
   665  0000                     _SSPSTAT	set	4039
   666  0000                     _SSPSTATbits	set	4039
   667  0000                     _T0CON	set	4053
   668  0000                     _T0CONbits	set	4053
   669  0000                     _T2CON	set	4042
   670  0000                     _T3CON	set	4017
   671  0000                     _T3CONbits	set	4017
   672  0000                     _TMR0H	set	4055
   673  0000                     _TMR0L	set	4054
   674  0000                     _TRISA	set	3986
   675  0000                     _TRISB	set	3987
   676  0000                     _TRISC	set	3988
   677  0000                     _TRISCbits	set	3988
   678  0000                     _TRISD	set	3989
   679  0000                     _TRISE	set	3990
   680  0000                     _TXREG	set	4013
   681  0000                     _TXSTA	set	4012
   682  0000                     _TXSTAbits	set	4012
   683  0000                     _RBPU	set	32655
   684  0000                     _TRMT	set	32097
   685  00FF98                     STR_12:
   686  00FF98  45                 	db	69	;'E'
   687  00FF99  57                 	db	87	;'W'
   688  00FF9A  50                 	db	80	;'P'
   689  00FF9B  20                 	db	32
   690  00FF9C  45                 	db	69	;'E'
   691  00FF9D  57                 	db	87	;'W'
   692  00FF9E  4C                 	db	76	;'L'
   693  00FF9F  54                 	db	84	;'T'
   694  00FFA0  20                 	db	32
   695  00FFA1  4E                 	db	78	;'N'
   696  00FFA2  53                 	db	83	;'S'
   697  00FFA3  50                 	db	80	;'P'
   698  00FFA4  20                 	db	32
   699  00FFA5  4E                 	db	78	;'N'
   700  00FFA6  53                 	db	83	;'S'
   701  00FFA7  4C                 	db	76	;'L'
   702  00FFA8  54                 	db	84	;'T'
   703  00FFA9  20                 	db	32
   704  00FFAA  4D                 	db	77	;'M'
   705  00FFAB  52                 	db	82	;'R'
   706  00FFAC  00                 	db	0
   707  00FFAD                     STR_1:
   708  00FFAD  45                 	db	69	;'E'
   709  00FFAE  43                 	db	67	;'C'
   710  00FFAF  45                 	db	69	;'E'
   711  00FFB0  33                 	db	51	;'3'
   712  00FFB1  33                 	db	51	;'3'
   713  00FFB2  30                 	db	48	;'0'
   714  00FFB3  31                 	db	49	;'1'
   715  00FFB4  4C                 	db	76	;'L'
   716  00FFB5  20                 	db	32
   717  00FFB6  46                 	db	70	;'F'
   718  00FFB7  61                 	db	97	;'a'
   719  00FFB8  6C                 	db	108	;'l'
   720  00FFB9  6C                 	db	108	;'l'
   721  00FFBA  20                 	db	32
   722  00FFBB  32                 	db	50	;'2'
   723  00FFBC  31                 	db	49	;'1'
   724  00FFBD  2D                 	db	45
   725  00FFBE  53                 	db	83	;'S'
   726  00FFBF  34                 	db	52	;'4'
   727  00FFC0  00                 	db	0
   728  00FFC1                     STR_8:
   729  00FFC1  4E                 	db	78	;'N'
   730  00FFC2  4F                 	db	79	;'O'
   731  00FFC3  52                 	db	82	;'R'
   732  00FFC4  54                 	db	84	;'T'
   733  00FFC5  48                 	db	72	;'H'
   734  00FFC6  2F                 	db	47
   735  00FFC7  53                 	db	83	;'S'
   736  00FFC8  4F                 	db	79	;'O'
   737  00FFC9  55                 	db	85	;'U'
   738  00FFCA  54                 	db	84	;'T'
   739  00FFCB  48                 	db	72	;'H'
   740  00FFCC  00                 	db	0
   741  00FFCD                     STR_6:
   742  00FFCD  45                 	db	69	;'E'
   743  00FFCE  41                 	db	65	;'A'
   744  00FFCF  53                 	db	83	;'S'
   745  00FFD0  54                 	db	84	;'T'
   746  00FFD1  2F                 	db	47
   747  00FFD2  57                 	db	87	;'W'
   748  00FFD3  45                 	db	69	;'E'
   749  00FFD4  53                 	db	83	;'S'
   750  00FFD5  54                 	db	84	;'T'
   751  00FFD6  00                 	db	0
   752  00FFD7                     STR_9:
   753  00FFD7  4E                 	db	78	;'N'
   754  00FFD8  2F                 	db	47
   755  00FFD9  53                 	db	83	;'S'
   756  00FFDA  20                 	db	32
   757  00FFDB  4C                 	db	76	;'L'
   758  00FFDC  54                 	db	84	;'T'
   759  00FFDD  00                 	db	0
   760  00FFDE                     STR_7:
   761  00FFDE  45                 	db	69	;'E'
   762  00FFDF  2F                 	db	47
   763  00FFE0  57                 	db	87	;'W'
   764  00FFE1  20                 	db	32
   765  00FFE2  4C                 	db	76	;'L'
   766  00FFE3  54                 	db	84	;'T'
   767  00FFE4  00                 	db	0
   768  00FFE5                     STR_2:
   769  00FFE5  4D                 	db	77	;'M'
   770  00FFE6  6F                 	db	111	;'o'
   771  00FFE7  64                 	db	100	;'d'
   772  00FFE8  65                 	db	101	;'e'
   773  00FFE9  3A                 	db	58	;':'
   774  00FFEA  00                 	db	0
   775  00FFEB                     STR_3:
   776  00FFEB  46                 	db	70	;'F'
   777  00FFEC  52                 	db	82	;'R'
   778  00FFED  3A                 	db	58	;':'
   779  00FFEE  00                 	db	0
   780  00FFEF                     STR_4:
   781  00FFEF  46                 	db	70	;'F'
   782  00FFF0  53                 	db	83	;'S'
   783  00FFF1  3A                 	db	58	;':'
   784  00FFF2  00                 	db	0
   785  00FFF3                     STR_11:
   786  00FFF3  50                 	db	80	;'P'
   787  00FFF4  4E                 	db	78	;'N'
   788  00FFF5  53                 	db	83	;'S'
   789  00FFF6  00                 	db	0
   790  00FFF7                     STR_10:
   791  00FFF7  50                 	db	80	;'P'
   792  00FFF8  45                 	db	69	;'E'
   793  00FFF9  57                 	db	87	;'W'
   794  00FFFA  00                 	db	0
   795  00FFFB                     STR_14:
   796  00FFFB  20                 	db	32
   797  00FFFC  00                 	db	0
   798  00FFFD                     STR_5:
   799  00FFFD  2A                 	db	42
   800  00FFFE  00                 	db	0
   801  0000                     
   802                           ; #config settings
   803  00FFFF  00                 	db	0	; dummy byte at the end
   804  0000                     
   805                           	psect	cinit
   806  0020AE                     __pcinit:
   807                           	opt stack 0
   808  0020AE                     start_initialization:
   809                           	opt stack 0
   810  0020AE                     __initialization:
   811                           	opt stack 0
   812                           
   813                           ; Clear objects allocated to BANK0 (39 bytes)
   814  0020AE  EE00  F080         	lfsr	0,__pbssBANK0
   815  0020B2  0E27               	movlw	39
   816  0020B4                     clear_0:
   817  0020B4  6AEE               	clrf	postinc0,c
   818  0020B6  06E8               	decf	wreg,f,c
   819  0020B8  E1FD               	bnz	clear_0
   820                           
   821                           ; Clear objects allocated to COMRAM (25 bytes)
   822  0020BA  EE00  F042         	lfsr	0,__pbssCOMRAM
   823  0020BE  0E19               	movlw	25
   824  0020C0                     clear_1:
   825  0020C0  6AEE               	clrf	postinc0,c
   826  0020C2  06E8               	decf	wreg,f,c
   827  0020C4  E1FD               	bnz	clear_1
   828                           
   829                           ; Initialize objects allocated to BANK0 (12 bytes)
   830                           ; load TBLPTR registers with __pidataBANK0
   831  0020C6  0EA2               	movlw	low __pidataBANK0
   832  0020C8  6EF6               	movwf	tblptrl,c
   833  0020CA  0E26               	movlw	high __pidataBANK0
   834  0020CC  6EF7               	movwf	tblptrh,c
   835  0020CE  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   836  0020D0  6EF8               	movwf	tblptru,c
   837  0020D2  EE00  F0B4         	lfsr	0,__pdataBANK0
   838  0020D6  EE10 F00C          	lfsr	1,12
   839  0020DA                     copy_data0:
   840  0020DA  0009               	tblrd		*+
   841  0020DC  CFF5 FFEE          	movff	tablat,postinc0
   842  0020E0  50E5               	movf	postdec1,w,c
   843  0020E2  50E1               	movf	fsr1l,w,c
   844  0020E4  E1FA               	bnz	copy_data0
   845                           
   846                           ; Initialize objects allocated to COMRAM (23 bytes)
   847                           ; load TBLPTR registers with __pidataCOMRAM
   848  0020E6  0EEC               	movlw	low __pidataCOMRAM
   849  0020E8  6EF6               	movwf	tblptrl,c
   850  0020EA  0E25               	movlw	high __pidataCOMRAM
   851  0020EC  6EF7               	movwf	tblptrh,c
   852  0020EE  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   853  0020F0  6EF8               	movwf	tblptru,c
   854  0020F2  EE00  F05B         	lfsr	0,__pdataCOMRAM
   855  0020F6  EE10 F017          	lfsr	1,23
   856  0020FA                     copy_data1:
   857  0020FA  0009               	tblrd		*+
   858  0020FC  CFF5 FFEE          	movff	tablat,postinc0
   859  002100  50E5               	movf	postdec1,w,c
   860  002102  50E1               	movf	fsr1l,w,c
   861  002104  E1FA               	bnz	copy_data1
   862  002106                     end_of_initialization:
   863                           	opt stack 0
   864  002106                     __end_of__initialization:
   865                           	opt stack 0
   866  002106  0E00               	movlw	low (__Lmediumconst shr (0+16))
   867  002108  6EF8               	movwf	tblptru,c
   868  00210A  0100               	movlb	0
   869  00210C  EF3C  F00D         	goto	_main	;jump to C main() function
   870                           tblptru	equ	0xFF8
   871                           tblptrh	equ	0xFF7
   872                           tblptrl	equ	0xFF6
   873                           tablat	equ	0xFF5
   874                           postinc0	equ	0xFEE
   875                           wreg	equ	0xFE8
   876                           postdec1	equ	0xFE5
   877                           fsr1l	equ	0xFE1
   878                           
   879                           	psect	bssCOMRAM
   880  000042                     __pbssCOMRAM:
   881                           	opt stack 0
   882  000042                     _volt:
   883                           	opt stack 0
   884  000042                     	ds	3
   885  000045                     _MODE:
   886                           	opt stack 0
   887  000045                     	ds	2
   888  000047                     _txt:
   889                           	opt stack 0
   890  000047                     	ds	2
   891  000049                     _Count:
   892                           	opt stack 0
   893  000049                     	ds	1
   894  00004A                     _EW_PED_SW:
   895                           	opt stack 0
   896  00004A                     	ds	1
   897  00004B                     _FLASHING:
   898                           	opt stack 0
   899  00004B                     	ds	1
   900  00004C                     _FLASHING_REQUEST:
   901                           	opt stack 0
   902  00004C                     	ds	1
   903  00004D                     _NS_PED_SW:
   904                           	opt stack 0
   905  00004D                     	ds	1
   906  00004E                     _PED_Count:
   907                           	opt stack 0
   908  00004E                     	ds	1
   909  00004F                     _SW_EWLT:
   910                           	opt stack 0
   911  00004F                     	ds	1
   912  000050                     _SW_EWPED:
   913                           	opt stack 0
   914  000050                     	ds	1
   915  000051                     _SW_FLASHING:
   916                           	opt stack 0
   917  000051                     	ds	1
   918  000052                     _SW_FLASHING_REQUEST:
   919                           	opt stack 0
   920  000052                     	ds	1
   921  000053                     _SW_MODE:
   922                           	opt stack 0
   923  000053                     	ds	1
   924  000054                     _SW_NSLT:
   925                           	opt stack 0
   926  000054                     	ds	1
   927  000055                     _SW_NSPED:
   928                           	opt stack 0
   929  000055                     	ds	1
   930  000056                     __tft_type:
   931                           	opt stack 0
   932  000056                     	ds	1
   933  000057                     _colstart:
   934                           	opt stack 0
   935  000057                     	ds	1
   936  000058                     _dir:
   937                           	opt stack 0
   938  000058                     	ds	1
   939  000059                     _direction:
   940                           	opt stack 0
   941  000059                     	ds	1
   942  00005A                     _rowstart:
   943                           	opt stack 0
   944  00005A                     	ds	1
   945                           tblptru	equ	0xFF8
   946                           tblptrh	equ	0xFF7
   947                           tblptrl	equ	0xFF6
   948                           tablat	equ	0xFF5
   949                           postinc0	equ	0xFEE
   950                           wreg	equ	0xFE8
   951                           postdec1	equ	0xFE5
   952                           fsr1l	equ	0xFE1
   953                           
   954                           	psect	dataCOMRAM
   955  00005B                     __pdataCOMRAM:
   956                           	opt stack 0
   957  00005B                     _wrap:
   958                           	opt stack 0
   959  00005B                     	ds	1
   960  00005C                     _EWLT_Count:
   961                           	opt stack 0
   962  00005C                     	ds	3
   963  00005F                     _EW_Count:
   964                           	opt stack 0
   965  00005F                     	ds	3
   966  000062                     _Act_Mode_Txt:
   967                           	opt stack 0
   968  000062                     	ds	2
   969  000064                     _FlashingR_Txt:
   970                           	opt stack 0
   971  000064                     	ds	2
   972  000066                     _FlashingS_Txt:
   973                           	opt stack 0
   974  000066                     	ds	2
   975  000068                     _SW_EWLT_Txt:
   976                           	opt stack 0
   977  000068                     	ds	2
   978  00006A                     _SW_EWPED_Txt:
   979                           	opt stack 0
   980  00006A                     	ds	2
   981  00006C                     _SW_MODE_Txt:
   982                           	opt stack 0
   983  00006C                     	ds	2
   984  00006E                     _SW_NSLT_Txt:
   985                           	opt stack 0
   986  00006E                     	ds	2
   987  000070                     _SW_NSPED_Txt:
   988                           	opt stack 0
   989  000070                     	ds	2
   990                           tblptru	equ	0xFF8
   991                           tblptrh	equ	0xFF7
   992                           tblptrl	equ	0xFF6
   993                           tablat	equ	0xFF5
   994                           postinc0	equ	0xFEE
   995                           wreg	equ	0xFE8
   996                           postdec1	equ	0xFE5
   997                           fsr1l	equ	0xFE1
   998                           
   999                           	psect	bssBANK0
  1000  000080                     __pbssBANK0:
  1001                           	opt stack 0
  1002  000080                     _INT0_flag:
  1003                           	opt stack 0
  1004  000080                     	ds	2
  1005  000082                     _INT1_flag:
  1006                           	opt stack 0
  1007  000082                     	ds	2
  1008  000084                     _INT2_flag:
  1009                           	opt stack 0
  1010  000084                     	ds	2
  1011  000086                     _nbr:
  1012                           	opt stack 0
  1013  000086                     	ds	2
  1014  000088                     _buffer:
  1015                           	opt stack 0
  1016  000088                     	ds	31
  1017                           tblptru	equ	0xFF8
  1018                           tblptrh	equ	0xFF7
  1019                           tblptrl	equ	0xFF6
  1020                           tablat	equ	0xFF5
  1021                           postinc0	equ	0xFEE
  1022                           wreg	equ	0xFE8
  1023                           postdec1	equ	0xFE5
  1024                           fsr1l	equ	0xFE1
  1025                           
  1026                           	psect	dataBANK0
  1027  0000B4                     __pdataBANK0:
  1028                           	opt stack 0
  1029  0000B4                     _NSLT_Count:
  1030                           	opt stack 0
  1031  0000B4                     	ds	3
  1032  0000B7                     _NS_Count:
  1033                           	opt stack 0
  1034  0000B7                     	ds	3
  1035  0000BA                     _PED_EW_Count:
  1036                           	opt stack 0
  1037  0000BA                     	ds	3
  1038  0000BD                     _PED_NS_Count:
  1039                           	opt stack 0
  1040  0000BD                     	ds	3
  1041                           tblptru	equ	0xFF8
  1042                           tblptrh	equ	0xFF7
  1043                           tblptrl	equ	0xFF6
  1044                           tablat	equ	0xFF5
  1045                           postinc0	equ	0xFEE
  1046                           wreg	equ	0xFE8
  1047                           postdec1	equ	0xFE5
  1048                           fsr1l	equ	0xFE1
  1049                           
  1050                           	psect	cstackBANK0
  1051  0000A7                     __pcstackBANK0:
  1052                           	opt stack 0
  1053  0000A7                     drawtext@x:
  1054                           	opt stack 0
  1055  0000A7                     update_LCD_color@direction:
  1056                           	opt stack 0
  1057                           
  1058                           ; 1 bytes @ 0x0
  1059  0000A7                     	ds	1
  1060  0000A8                     update_LCD_color@Circle_Y:
  1061                           	opt stack 0
  1062  0000A8                     drawtext@textsize:
  1063                           	opt stack 0
  1064                           
  1065                           ; 2 bytes @ 0x1
  1066  0000A8                     	ds	1
  1067  0000A9                     Set_NS@color:
  1068                           	opt stack 0
  1069  0000A9                     Set_NS_LT@color:
  1070                           	opt stack 0
  1071  0000A9                     Set_EW@color:
  1072                           	opt stack 0
  1073  0000A9                     Set_EW_LT@color:
  1074                           	opt stack 0
  1075                           
  1076                           ; 1 bytes @ 0x2
  1077  0000A9                     	ds	1
  1078  0000AA                     drawtext@i:
  1079                           	opt stack 0
  1080                           
  1081                           ; 2 bytes @ 0x3
  1082  0000AA                     	ds	2
  1083  0000AC                     drawtext@cursor_y:
  1084                           	opt stack 0
  1085                           
  1086                           ; 1 bytes @ 0x5
  1087  0000AC                     	ds	1
  1088  0000AD                     drawtext@cursor_x:
  1089                           	opt stack 0
  1090                           
  1091                           ; 1 bytes @ 0x6
  1092  0000AD                     	ds	1
  1093  0000AE                     update_LCD_count@direction:
  1094                           	opt stack 0
  1095  0000AE                     update_LCD_PED_Count@direction:
  1096                           	opt stack 0
  1097  0000AE                     update_LCD_misc@nStep:
  1098                           	opt stack 0
  1099                           
  1100                           ; 2 bytes @ 0x7
  1101  0000AE                     	ds	1
  1102  0000AF                     PED_Control@Num_Sec:
  1103                           	opt stack 0
  1104                           
  1105                           ; 1 bytes @ 0x8
  1106  0000AF                     	ds	1
  1107  0000B0                     PED_Control@direction:
  1108                           	opt stack 0
  1109  0000B0                     Wait_N_Seconds@seconds:
  1110                           	opt stack 0
  1111                           
  1112                           ; 1 bytes @ 0x9
  1113  0000B0                     	ds	1
  1114  0000B1                     PED_Control@i:
  1115                           	opt stack 0
  1116  0000B1                     Wait_N_Seconds@I:
  1117                           	opt stack 0
  1118                           
  1119                           ; 1 bytes @ 0xA
  1120  0000B1                     	ds	1
  1121  0000B2                     main@nStep:
  1122                           	opt stack 0
  1123                           
  1124                           ; 2 bytes @ 0xB
  1125  0000B2                     	ds	2
  1126                           tblptru	equ	0xFF8
  1127                           tblptrh	equ	0xFF7
  1128                           tblptrl	equ	0xFF6
  1129                           tablat	equ	0xFF5
  1130                           postinc0	equ	0xFEE
  1131                           wreg	equ	0xFE8
  1132                           postdec1	equ	0xFE5
  1133                           fsr1l	equ	0xFE1
  1134                           
  1135                           	psect	cstackCOMRAM
  1136  000001                     __pcstackCOMRAM:
  1137                           	opt stack 0
  1138  000001                     ??_chkisr:
  1139  000001                     
  1140                           ; 0 bytes @ 0x0
  1141  000001                     	ds	14
  1142  00000F                     ?_strlen:
  1143                           	opt stack 0
  1144  00000F                     ?_get_full_ADC:
  1145                           	opt stack 0
  1146  00000F                     ?___wmul:
  1147                           	opt stack 0
  1148  00000F                     ?___awdiv:
  1149                           	opt stack 0
  1150  00000F                     ?___awmod:
  1151                           	opt stack 0
  1152  00000F                     ?___ftpack:
  1153                           	opt stack 0
  1154  00000F                     spiwrite@x:
  1155                           	opt stack 0
  1156  00000F                     OpenUSART@spbrg:
  1157                           	opt stack 0
  1158  00000F                     ___wmul@multiplier:
  1159                           	opt stack 0
  1160  00000F                     ___awdiv@dividend:
  1161                           	opt stack 0
  1162  00000F                     ___awmod@dividend:
  1163                           	opt stack 0
  1164  00000F                     strcpy@to:
  1165                           	opt stack 0
  1166  00000F                     strlen@s:
  1167                           	opt stack 0
  1168  00000F                     ___ftpack@arg:
  1169                           	opt stack 0
  1170  00000F                     ___ftge@ff1:
  1171                           	opt stack 0
  1172                           
  1173                           ; 3 bytes @ 0xE
  1174  00000F                     	ds	1
  1175  000010                     spiwrite@spidata:
  1176                           	opt stack 0
  1177                           
  1178                           ; 1 bytes @ 0xF
  1179  000010                     	ds	1
  1180  000011                     ??_strlen:
  1181  000011                     ??_get_full_ADC:
  1182  000011                     write_command@cmd_:
  1183                           	opt stack 0
  1184  000011                     write_data@data_:
  1185                           	opt stack 0
  1186  000011                     OpenUSART@config:
  1187                           	opt stack 0
  1188  000011                     ___wmul@multiplicand:
  1189                           	opt stack 0
  1190  000011                     ___awdiv@divisor:
  1191                           	opt stack 0
  1192  000011                     ___awmod@divisor:
  1193                           	opt stack 0
  1194  000011                     strcpy@from:
  1195                           	opt stack 0
  1196                           
  1197                           ; 2 bytes @ 0x10
  1198  000011                     	ds	1
  1199  000012                     setAddrWindow@y0:
  1200                           	opt stack 0
  1201  000012                     ___ftpack@exp:
  1202                           	opt stack 0
  1203  000012                     ___ftge@ff2:
  1204                           	opt stack 0
  1205                           
  1206                           ; 3 bytes @ 0x11
  1207  000012                     	ds	1
  1208  000013                     setAddrWindow@x1:
  1209                           	opt stack 0
  1210  000013                     ___awdiv@counter:
  1211                           	opt stack 0
  1212  000013                     ___awmod@counter:
  1213                           	opt stack 0
  1214  000013                     ___ftpack@sign:
  1215                           	opt stack 0
  1216  000013                     get_full_ADC@result:
  1217                           	opt stack 0
  1218  000013                     ___wmul@product:
  1219                           	opt stack 0
  1220  000013                     strcpy@cp:
  1221                           	opt stack 0
  1222  000013                     strlen@cp:
  1223                           	opt stack 0
  1224                           
  1225                           ; 2 bytes @ 0x12
  1226  000013                     	ds	1
  1227  000014                     ??___ftpack:
  1228  000014                     setAddrWindow@y1:
  1229                           	opt stack 0
  1230  000014                     ___awdiv@sign:
  1231                           	opt stack 0
  1232  000014                     ___awmod@sign:
  1233                           	opt stack 0
  1234                           
  1235                           ; 1 bytes @ 0x13
  1236  000014                     	ds	1
  1237  000015                     ??___ftge:
  1238  000015                     setAddrWindow@x0:
  1239                           	opt stack 0
  1240  000015                     delay_ms@ms:
  1241                           	opt stack 0
  1242  000015                     ___awdiv@quotient:
  1243                           	opt stack 0
  1244                           
  1245                           ; 2 bytes @ 0x14
  1246  000015                     	ds	1
  1247  000016                     drawPixel@y:
  1248                           	opt stack 0
  1249  000016                     drawFastVLine@y:
  1250                           	opt stack 0
  1251  000016                     fillRectangle@y:
  1252                           	opt stack 0
  1253  000016                     drawFastHLine@y:
  1254                           	opt stack 0
  1255                           
  1256                           ; 1 bytes @ 0x15
  1257  000016                     	ds	1
  1258  000017                     ??_delay_ms:
  1259  000017                     ?___awtoft:
  1260                           	opt stack 0
  1261  000017                     drawFastVLine@h:
  1262                           	opt stack 0
  1263  000017                     fillRectangle@w:
  1264                           	opt stack 0
  1265  000017                     drawFastHLine@w:
  1266                           	opt stack 0
  1267  000017                     drawPixel@color:
  1268                           	opt stack 0
  1269  000017                     ___awtoft@c:
  1270                           	opt stack 0
  1271                           
  1272                           ; 2 bytes @ 0x16
  1273  000017                     	ds	1
  1274  000018                     fillRectangle@h:
  1275                           	opt stack 0
  1276  000018                     drawFastVLine@color:
  1277                           	opt stack 0
  1278  000018                     drawFastHLine@color:
  1279                           	opt stack 0
  1280                           
  1281                           ; 2 bytes @ 0x17
  1282  000018                     	ds	1
  1283  000019                     drawPixel@x:
  1284                           	opt stack 0
  1285  000019                     delay_ms@count:
  1286                           	opt stack 0
  1287  000019                     fillRectangle@color:
  1288                           	opt stack 0
  1289                           
  1290                           ; 2 bytes @ 0x18
  1291  000019                     	ds	1
  1292  00001A                     ??_drawFastVLine:
  1293  00001A                     ??_drawFastHLine:
  1294  00001A                     ___awtoft@sign:
  1295                           	opt stack 0
  1296  00001A                     drawCircle@x0:
  1297                           	opt stack 0
  1298                           
  1299                           ; 2 bytes @ 0x19
  1300  00001A                     	ds	1
  1301  00001B                     ??_fillRectangle:
  1302  00001B                     ?___ftdiv:
  1303                           	opt stack 0
  1304  00001B                     ___ftdiv@f1:
  1305                           	opt stack 0
  1306                           
  1307                           ; 3 bytes @ 0x1A
  1308  00001B                     	ds	1
  1309  00001C                     drawCircle@y0:
  1310                           	opt stack 0
  1311                           
  1312                           ; 2 bytes @ 0x1B
  1313  00001C                     	ds	2
  1314  00001E                     drawFastVLine@hi:
  1315                           	opt stack 0
  1316  00001E                     drawFastHLine@hi:
  1317                           	opt stack 0
  1318  00001E                     drawCircle@r:
  1319                           	opt stack 0
  1320  00001E                     ___ftdiv@f2:
  1321                           	opt stack 0
  1322                           
  1323                           ; 3 bytes @ 0x1D
  1324  00001E                     	ds	1
  1325  00001F                     drawFastVLine@lo:
  1326                           	opt stack 0
  1327  00001F                     fillRectangle@hi:
  1328                           	opt stack 0
  1329  00001F                     drawFastHLine@lo:
  1330                           	opt stack 0
  1331                           
  1332                           ; 1 bytes @ 0x1E
  1333  00001F                     	ds	1
  1334  000020                     drawFastVLine@x:
  1335                           	opt stack 0
  1336  000020                     fillRectangle@lo:
  1337                           	opt stack 0
  1338  000020                     drawFastHLine@x:
  1339                           	opt stack 0
  1340  000020                     drawCircle@color:
  1341                           	opt stack 0
  1342                           
  1343                           ; 2 bytes @ 0x1F
  1344  000020                     	ds	1
  1345  000021                     ??___ftdiv:
  1346  000021                     fillRect@y:
  1347                           	opt stack 0
  1348  000021                     fillRectangle@x:
  1349                           	opt stack 0
  1350  000021                     fillCircleHelper@x0:
  1351                           	opt stack 0
  1352  000021                     drawRect@x:
  1353                           	opt stack 0
  1354                           
  1355                           ; 2 bytes @ 0x20
  1356  000021                     	ds	1
  1357  000022                     ??_drawCircle:
  1358  000022                     fillRect@w:
  1359                           	opt stack 0
  1360  000022                     fillScreen@color:
  1361                           	opt stack 0
  1362                           
  1363                           ; 2 bytes @ 0x21
  1364  000022                     	ds	1
  1365  000023                     fillRect@h:
  1366                           	opt stack 0
  1367  000023                     fillCircleHelper@y0:
  1368                           	opt stack 0
  1369  000023                     drawRect@y:
  1370                           	opt stack 0
  1371                           
  1372                           ; 2 bytes @ 0x22
  1373  000023                     	ds	1
  1374  000024                     ___ftdiv@cntr:
  1375                           	opt stack 0
  1376  000024                     fillRect@color:
  1377                           	opt stack 0
  1378  000024                     drawCircle@ddF_x:
  1379                           	opt stack 0
  1380                           
  1381                           ; 2 bytes @ 0x23
  1382  000024                     	ds	1
  1383  000025                     fillCircleHelper@r:
  1384                           	opt stack 0
  1385  000025                     drawRect@w:
  1386                           	opt stack 0
  1387  000025                     ___ftdiv@f3:
  1388                           	opt stack 0
  1389                           
  1390                           ; 3 bytes @ 0x24
  1391  000025                     	ds	1
  1392  000026                     ??_fillRect:
  1393  000026                     drawCircle@ddF_y:
  1394                           	opt stack 0
  1395                           
  1396                           ; 2 bytes @ 0x25
  1397  000026                     	ds	1
  1398  000027                     fillCircleHelper@cornername:
  1399                           	opt stack 0
  1400  000027                     drawRect@h:
  1401                           	opt stack 0
  1402                           
  1403                           ; 2 bytes @ 0x26
  1404  000027                     	ds	1
  1405  000028                     ___ftdiv@exp:
  1406                           	opt stack 0
  1407  000028                     drawCircle@f:
  1408                           	opt stack 0
  1409                           
  1410                           ; 2 bytes @ 0x27
  1411  000028                     	ds	1
  1412  000029                     fillRect@x:
  1413                           	opt stack 0
  1414  000029                     ___ftdiv@sign:
  1415                           	opt stack 0
  1416  000029                     fillCircleHelper@delta:
  1417                           	opt stack 0
  1418  000029                     drawRect@color:
  1419                           	opt stack 0
  1420                           
  1421                           ; 2 bytes @ 0x28
  1422  000029                     	ds	1
  1423  00002A                     fillRect@i:
  1424                           	opt stack 0
  1425  00002A                     drawCircle@x:
  1426                           	opt stack 0
  1427                           
  1428                           ; 2 bytes @ 0x29
  1429  00002A                     	ds	1
  1430  00002B                     ??_drawRect:
  1431  00002B                     fillCircleHelper@color:
  1432                           	opt stack 0
  1433                           
  1434                           ; 2 bytes @ 0x2A
  1435  00002B                     	ds	1
  1436  00002C                     drawChar@y:
  1437                           	opt stack 0
  1438  00002C                     drawCircle@y:
  1439                           	opt stack 0
  1440                           
  1441                           ; 2 bytes @ 0x2B
  1442  00002C                     	ds	1
  1443  00002D                     ??_fillCircleHelper:
  1444  00002D                     drawChar@c:
  1445                           	opt stack 0
  1446                           
  1447                           ; 1 bytes @ 0x2C
  1448  00002D                     	ds	1
  1449  00002E                     drawChar@color:
  1450                           	opt stack 0
  1451                           
  1452                           ; 2 bytes @ 0x2D
  1453  00002E                     	ds	1
  1454  00002F                     fillCircleHelper@ddF_x:
  1455                           	opt stack 0
  1456                           
  1457                           ; 2 bytes @ 0x2E
  1458  00002F                     	ds	1
  1459  000030                     drawChar@bg:
  1460                           	opt stack 0
  1461                           
  1462                           ; 2 bytes @ 0x2F
  1463  000030                     	ds	1
  1464  000031                     fillCircleHelper@ddF_y:
  1465                           	opt stack 0
  1466                           
  1467                           ; 2 bytes @ 0x30
  1468  000031                     	ds	1
  1469  000032                     drawChar@size:
  1470                           	opt stack 0
  1471                           
  1472                           ; 1 bytes @ 0x31
  1473  000032                     	ds	1
  1474  000033                     drawChar@line:
  1475                           	opt stack 0
  1476  000033                     fillCircleHelper@f:
  1477                           	opt stack 0
  1478                           
  1479                           ; 2 bytes @ 0x32
  1480  000033                     	ds	1
  1481  000034                     drawChar@x:
  1482                           	opt stack 0
  1483                           
  1484                           ; 1 bytes @ 0x33
  1485  000034                     	ds	1
  1486  000035                     drawChar@j:
  1487                           	opt stack 0
  1488  000035                     fillCircleHelper@x:
  1489                           	opt stack 0
  1490                           
  1491                           ; 2 bytes @ 0x34
  1492  000035                     	ds	1
  1493  000036                     drawChar@i:
  1494                           	opt stack 0
  1495                           
  1496                           ; 1 bytes @ 0x35
  1497  000036                     	ds	1
  1498  000037                     drawtext@y:
  1499                           	opt stack 0
  1500  000037                     fillCircleHelper@y:
  1501                           	opt stack 0
  1502                           
  1503                           ; 2 bytes @ 0x36
  1504  000037                     	ds	1
  1505  000038                     drawtext@_text:
  1506                           	opt stack 0
  1507                           
  1508                           ; 2 bytes @ 0x37
  1509  000038                     	ds	1
  1510  000039                     fillCircle@x0:
  1511                           	opt stack 0
  1512                           
  1513                           ; 2 bytes @ 0x38
  1514  000039                     	ds	1
  1515  00003A                     drawtext@color:
  1516                           	opt stack 0
  1517                           
  1518                           ; 2 bytes @ 0x39
  1519  00003A                     	ds	1
  1520  00003B                     fillCircle@y0:
  1521                           	opt stack 0
  1522                           
  1523                           ; 2 bytes @ 0x3A
  1524  00003B                     	ds	1
  1525  00003C                     drawtext@bg:
  1526                           	opt stack 0
  1527                           
  1528                           ; 2 bytes @ 0x3B
  1529  00003C                     	ds	1
  1530  00003D                     fillCircle@r:
  1531                           	opt stack 0
  1532                           
  1533                           ; 2 bytes @ 0x3C
  1534  00003D                     	ds	1
  1535  00003E                     drawtext@size:
  1536                           	opt stack 0
  1537                           
  1538                           ; 1 bytes @ 0x3D
  1539  00003E                     	ds	1
  1540  00003F                     ??_drawtext:
  1541  00003F                     fillCircle@color:
  1542                           	opt stack 0
  1543                           
  1544                           ; 2 bytes @ 0x3E
  1545  00003F                     	ds	2
  1546  000041                     update_LCD_color@color:
  1547                           	opt stack 0
  1548  000041                     update_LCD_count@count:
  1549                           	opt stack 0
  1550  000041                     update_LCD_PED_Count@count:
  1551                           	opt stack 0
  1552                           
  1553                           ; 1 bytes @ 0x40
  1554  000041                     	ds	1
  1555  000042                     tblptru	equ	0xFF8
  1556                           tblptrh	equ	0xFF7
  1557                           tblptrl	equ	0xFF6
  1558                           tablat	equ	0xFF5
  1559                           postinc0	equ	0xFEE
  1560                           wreg	equ	0xFE8
  1561                           postdec1	equ	0xFE5
  1562                           fsr1l	equ	0xFE1
  1563                           
  1564                           ; 0 bytes @ 0x41
  1565 ;;
  1566 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1567 ;;
  1568 ;; *************** function _main *****************
  1569 ;; Defined at:
  1570 ;;		line 324 in file "Lab8pC.c"
  1571 ;; Parameters:    Size  Location     Type
  1572 ;;		None
  1573 ;; Auto vars:     Size  Location     Type
  1574 ;;  nStep           2   11[BANK0 ] int 
  1575 ;; Return value:  Size  Location     Type
  1576 ;;		None               void
  1577 ;; Registers used:
  1578 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1579 ;; Tracked objects:
  1580 ;;		On entry : 0/0
  1581 ;;		On exit  : 0/0
  1582 ;;		Unchanged: 0/0
  1583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1584 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1585 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1586 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1587 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1588 ;;Total ram usage:        2 bytes
  1589 ;; Hardware stack levels required when called:   13
  1590 ;; This function calls:
  1591 ;;		_Day_Mode
  1592 ;;		_Init_ADC
  1593 ;;		_Initialize_Screen
  1594 ;;		_Night_Mode
  1595 ;;		___awtoft
  1596 ;;		___ftdiv
  1597 ;;		___ftge
  1598 ;;		___wmul
  1599 ;;		_get_full_ADC
  1600 ;;		_init_IO
  1601 ;;		_init_UART
  1602 ;; This function is called by:
  1603 ;;		Startup code after reset
  1604 ;; This function uses a non-reentrant model
  1605 ;;
  1606                           
  1607                           	psect	text0
  1608  001A78                     __ptext0:
  1609                           	opt stack 0
  1610  001A78                     _main:
  1611                           	opt stack 18
  1612                           
  1613                           ;Lab8pC.c: 326: init_IO();
  1614                           
  1615                           ;incstack = 0
  1616  001A78  EC8A  F012         	call	_init_IO	;wreg free
  1617                           
  1618                           ;Lab8pC.c: 327: Init_ADC();
  1619  001A7C  EC4A  F013         	call	_Init_ADC	;wreg free
  1620                           
  1621                           ;Lab8pC.c: 328: init_UART();
  1622  001A80  EC02  F013         	call	_init_UART	;wreg free
  1623                           
  1624                           ;Lab8pC.c: 329: OSCCON = 0x70;
  1625  001A84  0E70               	movlw	112
  1626  001A86  6ED3               	movwf	4051,c	;volatile
  1627                           
  1628                           ;Lab8pC.c: 330: RBPU = 0;
  1629  001A88  9EF1               	bcf	intcon2,7,c	;volatile
  1630                           
  1631                           ;Lab8pC.c: 332: Initialize_Screen();
  1632  001A8A  EC0E  F000         	call	_Initialize_Screen	;wreg free
  1633                           
  1634                           ;Lab8pC.c: 335: int nStep = get_full_ADC();
  1635  001A8E  ECC8  F012         	call	_get_full_ADC	;wreg free
  1636  001A92  C00F  F0B2         	movff	?_get_full_ADC,main@nStep
  1637  001A96  C010  F0B3         	movff	?_get_full_ADC+1,main@nStep+1
  1638                           
  1639                           ;Lab8pC.c: 336: volt = nStep * 5 /1024.0;
  1640  001A9A  C0B2  F00F         	movff	main@nStep,___wmul@multiplier
  1641  001A9E  C0B3  F010         	movff	main@nStep+1,___wmul@multiplier+1
  1642  001AA2  0E00               	movlw	0
  1643  001AA4  6E12               	movwf	___wmul@multiplicand+1,c
  1644  001AA6  0E05               	movlw	5
  1645  001AA8  6E11               	movwf	___wmul@multiplicand,c
  1646  001AAA  ECB4  F012         	call	___wmul	;wreg free
  1647  001AAE  C00F  F017         	movff	?___wmul,___awtoft@c
  1648  001AB2  C010  F018         	movff	?___wmul+1,___awtoft@c+1
  1649  001AB6  EC20  F012         	call	___awtoft	;wreg free
  1650  001ABA  C017  F01B         	movff	?___awtoft,___ftdiv@f1
  1651  001ABE  C018  F01C         	movff	?___awtoft+1,___ftdiv@f1+1
  1652  001AC2  C019  F01D         	movff	?___awtoft+2,___ftdiv@f1+2
  1653  001AC6  0E00               	movlw	0
  1654  001AC8  6E1E               	movwf	___ftdiv@f2,c
  1655  001ACA  0E80               	movlw	128
  1656  001ACC  6E1F               	movwf	___ftdiv@f2+1,c
  1657  001ACE  0E44               	movlw	68
  1658  001AD0  6E20               	movwf	___ftdiv@f2+2,c
  1659  001AD2  ECCB  F00A         	call	___ftdiv	;wreg free
  1660  001AD6  C01B  F042         	movff	?___ftdiv,_volt
  1661  001ADA  C01C  F043         	movff	?___ftdiv+1,_volt+1
  1662  001ADE  C01D  F044         	movff	?___ftdiv+2,_volt+2
  1663                           
  1664                           ;Lab8pC.c: 337: SW_MODE = volt < 2.5 ? 1:0;
  1665  001AE2  C042  F00F         	movff	_volt,___ftge@ff1
  1666  001AE6  C043  F010         	movff	_volt+1,___ftge@ff1+1
  1667  001AEA  C044  F011         	movff	_volt+2,___ftge@ff1+2
  1668  001AEE  0E00               	movlw	0
  1669  001AF0  6E12               	movwf	___ftge@ff2,c
  1670  001AF2  0E20               	movlw	32
  1671  001AF4  6E13               	movwf	___ftge@ff2+1,c
  1672  001AF6  0E40               	movlw	64
  1673  001AF8  6E14               	movwf	___ftge@ff2+2,c
  1674  001AFA  ECDC  F00D         	call	___ftge	;wreg free
  1675  001AFE  B0D8               	btfsc	status,0,c
  1676  001B00  D002               	goto	u4020
  1677  001B02  0E01               	movlw	1
  1678  001B04  D001               	goto	u4030
  1679  001B06                     u4020:
  1680  001B06  0E00               	movlw	0
  1681  001B08                     u4030:
  1682  001B08  6E53               	movwf	_SW_MODE,c
  1683  001B0A  D000               	goto	l5621
  1684  001B0C                     l5621:
  1685                           
  1686                           ;Lab8pC.c: 340: {
  1687                           ;Lab8pC.c: 341: if (SW_MODE)
  1688  001B0C  5053               	movf	_SW_MODE,w,c
  1689  001B0E  B4D8               	btfsc	status,2,c
  1690  001B10  D003               	goto	l5625
  1691                           
  1692                           ;Lab8pC.c: 342: {
  1693                           ;Lab8pC.c: 343: Day_Mode();
  1694  001B12  ECAA  F00B         	call	_Day_Mode	;wreg free
  1695                           
  1696                           ;Lab8pC.c: 344: }
  1697  001B16  D7FA               	goto	l5621
  1698  001B18                     l5625:
  1699                           
  1700                           ;Lab8pC.c: 345: else
  1701                           ;Lab8pC.c: 346: {
  1702                           ;Lab8pC.c: 347: Night_Mode();
  1703  001B18  ECE0  F00C         	call	_Night_Mode	;wreg free
  1704  001B1C  D7F7               	goto	l5621
  1705  001B1E  EF0C  F000         	goto	start
  1706  001B22                     __end_of_main:
  1707                           	opt stack 0
  1708                           tblptru	equ	0xFF8
  1709                           tblptrh	equ	0xFF7
  1710                           tblptrl	equ	0xFF6
  1711                           tablat	equ	0xFF5
  1712                           intcon2	equ	0xFF1
  1713                           postinc0	equ	0xFEE
  1714                           wreg	equ	0xFE8
  1715                           postdec1	equ	0xFE5
  1716                           fsr1l	equ	0xFE1
  1717                           status	equ	0xFD8
  1718                           
  1719 ;; *************** function _init_UART *****************
  1720 ;; Defined at:
  1721 ;;		line 310 in file "Lab8pC.c"
  1722 ;; Parameters:    Size  Location     Type
  1723 ;;		None
  1724 ;; Auto vars:     Size  Location     Type
  1725 ;;		None
  1726 ;; Return value:  Size  Location     Type
  1727 ;;		None               void
  1728 ;; Registers used:
  1729 ;;		wreg, status,2, cstack
  1730 ;; Tracked objects:
  1731 ;;		On entry : 0/0
  1732 ;;		On exit  : 0/0
  1733 ;;		Unchanged: 0/0
  1734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1735 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1736 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1737 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1738 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1739 ;;Total ram usage:        0 bytes
  1740 ;; Hardware stack levels used:    1
  1741 ;; Hardware stack levels required when called:    3
  1742 ;; This function calls:
  1743 ;;		_OpenUSART
  1744 ;; This function is called by:
  1745 ;;		_main
  1746 ;; This function uses a non-reentrant model
  1747 ;;
  1748                           
  1749                           	psect	text1
  1750  002604                     __ptext1:
  1751                           	opt stack 0
  1752  002604                     _init_UART:
  1753                           	opt stack 27
  1754                           
  1755                           ;Lab8pC.c: 312: OpenUSART (0b01111111 & 0b10111111 &
  1756                           ;Lab8pC.c: 313: 0b11111110 & 0b11111101 & 0b11111111 &
  1757                           ;Lab8pC.c: 314: 0b11111111, 25);
  1758                           
  1759                           ;incstack = 0
  1760  002604  0E00               	movlw	0
  1761  002606  6E10               	movwf	OpenUSART@spbrg+1,c
  1762  002608  0E19               	movlw	25
  1763  00260A  6E0F               	movwf	OpenUSART@spbrg,c
  1764  00260C  0E3C               	movlw	60
  1765  00260E  ECB7  F00F         	call	_OpenUSART
  1766                           
  1767                           ;Lab8pC.c: 315: OSCCON = 0x60;
  1768  002612  0E60               	movlw	96
  1769  002614  6ED3               	movwf	4051,c	;volatile
  1770  002616  0012               	return		;funcret
  1771  002618                     __end_of_init_UART:
  1772                           	opt stack 0
  1773                           tblptru	equ	0xFF8
  1774                           tblptrh	equ	0xFF7
  1775                           tblptrl	equ	0xFF6
  1776                           tablat	equ	0xFF5
  1777                           intcon2	equ	0xFF1
  1778                           postinc0	equ	0xFEE
  1779                           wreg	equ	0xFE8
  1780                           postdec1	equ	0xFE5
  1781                           fsr1l	equ	0xFE1
  1782                           status	equ	0xFD8
  1783                           
  1784 ;; *************** function _OpenUSART *****************
  1785 ;; Defined at:
  1786 ;;		line 73 in file "E:\XC8\sources\pic18\plib\USART\uopen.c"
  1787 ;; Parameters:    Size  Location     Type
  1788 ;;  config          1    wreg     unsigned char 
  1789 ;;  spbrg           2   14[COMRAM] unsigned int 
  1790 ;; Auto vars:     Size  Location     Type
  1791 ;;  config          1   16[COMRAM] unsigned char 
  1792 ;; Return value:  Size  Location     Type
  1793 ;;		None               void
  1794 ;; Registers used:
  1795 ;;		wreg, status,2
  1796 ;; Tracked objects:
  1797 ;;		On entry : 0/0
  1798 ;;		On exit  : 0/0
  1799 ;;		Unchanged: 0/0
  1800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1801 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1802 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1803 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1804 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1805 ;;Total ram usage:        3 bytes
  1806 ;; Hardware stack levels used:    1
  1807 ;; Hardware stack levels required when called:    2
  1808 ;; This function calls:
  1809 ;;		Nothing
  1810 ;; This function is called by:
  1811 ;;		_init_UART
  1812 ;; This function uses a non-reentrant model
  1813 ;;
  1814                           
  1815                           	psect	text2
  1816  001F6E                     __ptext2:
  1817                           	opt stack 0
  1818  001F6E                     _OpenUSART:
  1819                           	opt stack 27
  1820                           
  1821                           ;incstack = 0
  1822                           ;OpenUSART@config stored from wreg
  1823  001F6E  6E11               	movwf	OpenUSART@config,c
  1824  001F70  0E00               	movlw	0
  1825  001F72  6EAC               	movwf	4012,c	;volatile
  1826  001F74  0E00               	movlw	0
  1827  001F76  6EAB               	movwf	4011,c	;volatile
  1828  001F78  A011               	btfss	OpenUSART@config,0,c
  1829  001F7A  D002               	goto	l5049
  1830  001F7C  88AC               	bsf	4012,4,c	;volatile
  1831  001F7E  D000               	goto	l5049
  1832  001F80                     l5049:
  1833  001F80  A211               	btfss	OpenUSART@config,1,c
  1834  001F82  D003               	goto	l5053
  1835  001F84  8CAC               	bsf	4012,6,c	;volatile
  1836  001F86  8CAB               	bsf	4011,6,c	;volatile
  1837  001F88  D000               	goto	l5053
  1838  001F8A                     l5053:
  1839  001F8A  A411               	btfss	OpenUSART@config,2,c
  1840  001F8C  D002               	goto	l5057
  1841  001F8E  8EAC               	bsf	4012,7,c	;volatile
  1842  001F90  D000               	goto	l5057
  1843  001F92                     l5057:
  1844  001F92  A611               	btfss	OpenUSART@config,3,c
  1845  001F94  D002               	goto	l584
  1846  001F96  88AB               	bsf	4011,4,c	;volatile
  1847  001F98  D002               	goto	l5061
  1848  001F9A                     l584:
  1849  001F9A  8AAB               	bsf	4011,5,c	;volatile
  1850  001F9C  D000               	goto	l5061
  1851  001F9E                     l5061:
  1852  001F9E  B811               	btfsc	OpenUSART@config,4,c
  1853  001FA0  84AC               	bsf	4012,2,c	;volatile
  1854  001FA2  989E               	bcf	3998,4,c	;volatile
  1855  001FA4  AA11               	btfss	OpenUSART@config,5,c
  1856  001FA6  D002               	goto	l5069
  1857  001FA8  86AB               	bsf	4011,3,c	;volatile
  1858  001FAA  D000               	goto	l5069
  1859  001FAC                     l5069:
  1860  001FAC  AC11               	btfss	OpenUSART@config,6,c
  1861  001FAE  D002               	goto	l588
  1862  001FB0  8A9D               	bsf	3997,5,c	;volatile
  1863  001FB2  D001               	goto	l589
  1864  001FB4                     l588:
  1865  001FB4  9A9D               	bcf	3997,5,c	;volatile
  1866  001FB6                     l589:
  1867  001FB6  9A9E               	bcf	3998,5,c	;volatile
  1868  001FB8  AE11               	btfss	OpenUSART@config,7,c
  1869  001FBA  D002               	goto	l590
  1870  001FBC  889D               	bsf	3997,4,c	;volatile
  1871  001FBE  D001               	goto	l591
  1872  001FC0                     l590:
  1873  001FC0  989D               	bcf	3997,4,c	;volatile
  1874  001FC2                     l591:
  1875  001FC2  C00F  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  1876  001FC6  5010               	movf	OpenUSART@spbrg+1,w,c
  1877  001FC8  6EB0               	movwf	4016,c	;volatile
  1878  001FCA  8AAC               	bsf	4012,5,c	;volatile
  1879  001FCC  8EAB               	bsf	4011,7,c	;volatile
  1880  001FCE  9C94               	bcf	3988,6,c	;volatile
  1881  001FD0  8E94               	bsf	3988,7,c	;volatile
  1882  001FD2  B8AC               	btfsc	4012,4,c	;volatile
  1883  001FD4  BEAC               	btfsc	4012,7,c	;volatile
  1884  001FD6  D002               	goto	l593
  1885  001FD8  8C94               	bsf	3988,6,c	;volatile
  1886  001FDA  D000               	goto	l593
  1887  001FDC                     l593:
  1888  001FDC  0012               	return		;funcret
  1889  001FDE                     __end_of_OpenUSART:
  1890                           	opt stack 0
  1891                           tblptru	equ	0xFF8
  1892                           tblptrh	equ	0xFF7
  1893                           tblptrl	equ	0xFF6
  1894                           tablat	equ	0xFF5
  1895                           intcon2	equ	0xFF1
  1896                           postinc0	equ	0xFEE
  1897                           wreg	equ	0xFE8
  1898                           postdec1	equ	0xFE5
  1899                           fsr1l	equ	0xFE1
  1900                           status	equ	0xFD8
  1901                           
  1902 ;; *************** function _init_IO *****************
  1903 ;; Defined at:
  1904 ;;		line 353 in file "Lab8pC.c"
  1905 ;; Parameters:    Size  Location     Type
  1906 ;;		None
  1907 ;; Auto vars:     Size  Location     Type
  1908 ;;		None
  1909 ;; Return value:  Size  Location     Type
  1910 ;;		None               void
  1911 ;; Registers used:
  1912 ;;		wreg, status,2
  1913 ;; Tracked objects:
  1914 ;;		On entry : 0/0
  1915 ;;		On exit  : 0/0
  1916 ;;		Unchanged: 0/0
  1917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1918 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1919 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1920 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1921 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1922 ;;Total ram usage:        0 bytes
  1923 ;; Hardware stack levels used:    1
  1924 ;; Hardware stack levels required when called:    2
  1925 ;; This function calls:
  1926 ;;		Nothing
  1927 ;; This function is called by:
  1928 ;;		_main
  1929 ;; This function uses a non-reentrant model
  1930 ;;
  1931                           
  1932                           	psect	text3
  1933  002514                     __ptext3:
  1934                           	opt stack 0
  1935  002514                     _init_IO:
  1936                           	opt stack 28
  1937                           
  1938                           ;Lab8pC.c: 355: TRISA = 0x31;
  1939                           
  1940                           ;incstack = 0
  1941  002514  0E31               	movlw	49
  1942  002516  6E92               	movwf	3986,c	;volatile
  1943                           
  1944                           ;Lab8pC.c: 356: TRISB = 0x07;
  1945  002518  0E07               	movlw	7
  1946  00251A  6E93               	movwf	3987,c	;volatile
  1947                           
  1948                           ;Lab8pC.c: 357: TRISC = 0x00;
  1949  00251C  0E00               	movlw	0
  1950  00251E  6E94               	movwf	3988,c	;volatile
  1951                           
  1952                           ;Lab8pC.c: 358: TRISD = 0x00;
  1953  002520  0E00               	movlw	0
  1954  002522  6E95               	movwf	3989,c	;volatile
  1955                           
  1956                           ;Lab8pC.c: 359: TRISE = 0x00;
  1957  002524  0E00               	movlw	0
  1958  002526  6E96               	movwf	3990,c	;volatile
  1959                           
  1960                           ;Lab8pC.c: 361: INTCONbits.INT0IF = 0 ;
  1961  002528  92F2               	bcf	intcon,1,c	;volatile
  1962                           
  1963                           ;Lab8pC.c: 362: INTCON3bits.INT1IF = 0;
  1964  00252A  90F0               	bcf	intcon3,0,c	;volatile
  1965                           
  1966                           ;Lab8pC.c: 363: INTCON3bits.INT2IF =0;
  1967  00252C  92F0               	bcf	intcon3,1,c	;volatile
  1968                           
  1969                           ;Lab8pC.c: 364: INTCON2bits.INTEDG0=0 ;
  1970  00252E  9CF1               	bcf	intcon2,6,c	;volatile
  1971                           
  1972                           ;Lab8pC.c: 365: INTCON2bits.INTEDG1=0;
  1973  002530  9AF1               	bcf	intcon2,5,c	;volatile
  1974                           
  1975                           ;Lab8pC.c: 366: INTCON2bits.INTEDG2=1;
  1976  002532  88F1               	bsf	intcon2,4,c	;volatile
  1977                           
  1978                           ;Lab8pC.c: 367: INTCONbits.INT0IE =1;
  1979  002534  88F2               	bsf	intcon,4,c	;volatile
  1980                           
  1981                           ;Lab8pC.c: 368: INTCON3bits.INT1IE=1;
  1982  002536  86F0               	bsf	intcon3,3,c	;volatile
  1983                           
  1984                           ;Lab8pC.c: 369: INTCON3bits.INT2IE=1;
  1985  002538  88F0               	bsf	intcon3,4,c	;volatile
  1986                           
  1987                           ;Lab8pC.c: 370: INTCONbits.GIE=1;
  1988  00253A  8EF2               	bsf	intcon,7,c	;volatile
  1989  00253C  0012               	return		;funcret
  1990  00253E                     __end_of_init_IO:
  1991                           	opt stack 0
  1992                           tblptru	equ	0xFF8
  1993                           tblptrh	equ	0xFF7
  1994                           tblptrl	equ	0xFF6
  1995                           tablat	equ	0xFF5
  1996                           intcon	equ	0xFF2
  1997                           intcon2	equ	0xFF1
  1998                           intcon3	equ	0xFF0
  1999                           postinc0	equ	0xFEE
  2000                           wreg	equ	0xFE8
  2001                           postdec1	equ	0xFE5
  2002                           fsr1l	equ	0xFE1
  2003                           status	equ	0xFD8
  2004                           
  2005 ;; *************** function _Night_Mode *****************
  2006 ;; Defined at:
  2007 ;;		line 525 in file "Lab8pC.c"
  2008 ;; Parameters:    Size  Location     Type
  2009 ;;		None
  2010 ;; Auto vars:     Size  Location     Type
  2011 ;;		None
  2012 ;; Return value:  Size  Location     Type
  2013 ;;		None               void
  2014 ;; Registers used:
  2015 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2016 ;; Tracked objects:
  2017 ;;		On entry : 0/0
  2018 ;;		On exit  : 0/0
  2019 ;;		Unchanged: 0/0
  2020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2021 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2022 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2023 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2024 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2025 ;;Total ram usage:        0 bytes
  2026 ;; Hardware stack levels used:    1
  2027 ;; Hardware stack levels required when called:   12
  2028 ;; This function calls:
  2029 ;;		_Do_Flashing
  2030 ;;		_Set_EW
  2031 ;;		_Set_EW_LT
  2032 ;;		_Set_NS
  2033 ;;		_Set_NS_LT
  2034 ;;		_Wait_N_Seconds
  2035 ;; This function is called by:
  2036 ;;		_main
  2037 ;; This function uses a non-reentrant model
  2038 ;;
  2039                           
  2040                           	psect	text4
  2041  0019C0                     __ptext4:
  2042                           	opt stack 0
  2043  0019C0                     _Night_Mode:
  2044                           	opt stack 18
  2045                           
  2046                           ;Lab8pC.c: 527: MODE = 0;
  2047                           
  2048                           ;incstack = 0
  2049  0019C0  0E00               	movlw	0
  2050  0019C2  6E46               	movwf	_MODE+1,c
  2051  0019C4  0E00               	movlw	0
  2052  0019C6  6E45               	movwf	_MODE,c
  2053                           
  2054                           ;Lab8pC.c: 528: PORTEbits.RE1 = 0;
  2055  0019C8  9284               	bcf	3972,1,c	;volatile
  2056                           
  2057                           ;Lab8pC.c: 529: FLASHING_REQUEST=0;
  2058  0019CA  0E00               	movlw	0
  2059  0019CC  6E4C               	movwf	_FLASHING_REQUEST,c
  2060                           
  2061                           ;Lab8pC.c: 530: Act_Mode_Txt[0] = 'N';
  2062  0019CE  0E4E               	movlw	78
  2063  0019D0  6E62               	movwf	_Act_Mode_Txt,c
  2064  0019D2                     l495:
  2065                           
  2066                           ;Lab8pC.c: 533: {
  2067                           ;Lab8pC.c: 534: NS_PED_SW=0;
  2068  0019D2  0E00               	movlw	0
  2069  0019D4  6E4D               	movwf	_NS_PED_SW,c
  2070                           
  2071                           ;Lab8pC.c: 535: EW_PED_SW=0;
  2072  0019D6  0E00               	movlw	0
  2073  0019D8  6E4A               	movwf	_EW_PED_SW,c
  2074                           
  2075                           ;Lab8pC.c: 536: Set_EW(1);
  2076  0019DA  0E01               	movlw	1
  2077  0019DC  ECBE  F011         	call	_Set_EW
  2078                           
  2079                           ;Lab8pC.c: 537: Set_EW_LT(1);
  2080  0019E0  0E01               	movlw	1
  2081  0019E2  EC9A  F011         	call	_Set_EW_LT
  2082                           
  2083                           ;Lab8pC.c: 538: Set_NS_LT(1);
  2084  0019E6  0E01               	movlw	1
  2085  0019E8  EC52  F011         	call	_Set_NS_LT
  2086                           
  2087                           ;Lab8pC.c: 539: Set_NS(2);
  2088  0019EC  0E02               	movlw	2
  2089  0019EE  EC76  F011         	call	_Set_NS
  2090                           
  2091                           ;Lab8pC.c: 540: Wait_N_Seconds(9);
  2092  0019F2  0E09               	movlw	9
  2093  0019F4  EC3E  F012         	call	_Wait_N_Seconds
  2094                           
  2095                           ;Lab8pC.c: 541: Set_NS(3);
  2096  0019F8  0E03               	movlw	3
  2097  0019FA  EC76  F011         	call	_Set_NS
  2098                           
  2099                           ;Lab8pC.c: 542: Wait_N_Seconds(3);
  2100  0019FE  0E03               	movlw	3
  2101  001A00  EC3E  F012         	call	_Wait_N_Seconds
  2102                           
  2103                           ;Lab8pC.c: 543: Set_NS(1);
  2104  001A04  0E01               	movlw	1
  2105  001A06  EC76  F011         	call	_Set_NS
  2106                           
  2107                           ;Lab8pC.c: 544: if (PORTAbits.RA4==1)
  2108  001A0A  A880               	btfss	3968,4,c	;volatile
  2109  001A0C  D010               	goto	l5353
  2110                           
  2111                           ;Lab8pC.c: 545: {
  2112                           ;Lab8pC.c: 546: Set_EW_LT(2);
  2113  001A0E  0E02               	movlw	2
  2114  001A10  EC9A  F011         	call	_Set_EW_LT
  2115                           
  2116                           ;Lab8pC.c: 547: Wait_N_Seconds(7);
  2117  001A14  0E07               	movlw	7
  2118  001A16  EC3E  F012         	call	_Wait_N_Seconds
  2119                           
  2120                           ;Lab8pC.c: 548: Set_EW_LT(3);
  2121  001A1A  0E03               	movlw	3
  2122  001A1C  EC9A  F011         	call	_Set_EW_LT
  2123                           
  2124                           ;Lab8pC.c: 549: Wait_N_Seconds(3);
  2125  001A20  0E03               	movlw	3
  2126  001A22  EC3E  F012         	call	_Wait_N_Seconds
  2127                           
  2128                           ;Lab8pC.c: 550: Set_EW_LT(1);
  2129  001A26  0E01               	movlw	1
  2130  001A28  EC9A  F011         	call	_Set_EW_LT
  2131  001A2C  D000               	goto	l5353
  2132  001A2E                     l5353:
  2133                           
  2134                           ;Lab8pC.c: 551: }
  2135                           ;Lab8pC.c: 552: Set_EW(2);
  2136  001A2E  0E02               	movlw	2
  2137  001A30  ECBE  F011         	call	_Set_EW
  2138                           
  2139                           ;Lab8pC.c: 553: Wait_N_Seconds(9);
  2140  001A34  0E09               	movlw	9
  2141  001A36  EC3E  F012         	call	_Wait_N_Seconds
  2142                           
  2143                           ;Lab8pC.c: 554: Set_EW(3);
  2144  001A3A  0E03               	movlw	3
  2145  001A3C  ECBE  F011         	call	_Set_EW
  2146                           
  2147                           ;Lab8pC.c: 555: Wait_N_Seconds(3);
  2148  001A40  0E03               	movlw	3
  2149  001A42  EC3E  F012         	call	_Wait_N_Seconds
  2150                           
  2151                           ;Lab8pC.c: 556: Set_EW(1);
  2152  001A46  0E01               	movlw	1
  2153  001A48  ECBE  F011         	call	_Set_EW
  2154                           
  2155                           ;Lab8pC.c: 557: if(PORTAbits.RA5==1)
  2156  001A4C  AA80               	btfss	3968,5,c	;volatile
  2157  001A4E  D011               	goto	l5369
  2158                           
  2159                           ;Lab8pC.c: 558: {
  2160                           ;Lab8pC.c: 559: Set_NS_LT(2);
  2161  001A50  0E02               	movlw	2
  2162  001A52  EC52  F011         	call	_Set_NS_LT
  2163                           
  2164                           ;Lab8pC.c: 560: Wait_N_Seconds(7);
  2165  001A56  0E07               	movlw	7
  2166  001A58  EC3E  F012         	call	_Wait_N_Seconds
  2167                           
  2168                           ;Lab8pC.c: 561: Set_NS_LT(3);
  2169  001A5C  0E03               	movlw	3
  2170  001A5E  EC52  F011         	call	_Set_NS_LT
  2171                           
  2172                           ;Lab8pC.c: 562: Wait_N_Seconds(3);
  2173  001A62  0E03               	movlw	3
  2174  001A64  EC3E  F012         	call	_Wait_N_Seconds
  2175                           
  2176                           ;Lab8pC.c: 563: Set_NS_LT(1);
  2177  001A68  0E01               	movlw	1
  2178  001A6A  EC52  F011         	call	_Set_NS_LT
  2179                           
  2180                           ;Lab8pC.c: 564: }
  2181                           ;Lab8pC.c: 565: break;
  2182  001A6E  D001               	goto	l5369
  2183  001A70  D7B0               	goto	l495
  2184  001A72                     l5369:
  2185                           
  2186                           ;Lab8pC.c: 566: }
  2187                           ;Lab8pC.c: 567: Do_Flashing();
  2188  001A72  ECEF  F00F         	call	_Do_Flashing	;wreg free
  2189  001A76  0012               	return		;funcret
  2190  001A78                     __end_of_Night_Mode:
  2191                           	opt stack 0
  2192                           tblptru	equ	0xFF8
  2193                           tblptrh	equ	0xFF7
  2194                           tblptrl	equ	0xFF6
  2195                           tablat	equ	0xFF5
  2196                           intcon	equ	0xFF2
  2197                           intcon2	equ	0xFF1
  2198                           intcon3	equ	0xFF0
  2199                           postinc0	equ	0xFEE
  2200                           wreg	equ	0xFE8
  2201                           postdec1	equ	0xFE5
  2202                           fsr1l	equ	0xFE1
  2203                           status	equ	0xFD8
  2204                           
  2205 ;; *************** function _Initialize_Screen *****************
  2206 ;; Defined at:
  2207 ;;		line 166 in file "Lab8pC.c"
  2208 ;; Parameters:    Size  Location     Type
  2209 ;;		None
  2210 ;; Auto vars:     Size  Location     Type
  2211 ;;		None
  2212 ;; Return value:  Size  Location     Type
  2213 ;;		None               void
  2214 ;; Registers used:
  2215 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2216 ;; Tracked objects:
  2217 ;;		On entry : 0/0
  2218 ;;		On exit  : 0/0
  2219 ;;		Unchanged: 0/0
  2220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2221 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2222 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2223 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2224 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2225 ;;Total ram usage:        0 bytes
  2226 ;; Hardware stack levels used:    1
  2227 ;; Hardware stack levels required when called:    9
  2228 ;; This function calls:
  2229 ;;		_LCD_Reset
  2230 ;;		_TFT_GreenTab_Initialize
  2231 ;;		_drawCircle
  2232 ;;		_drawRect
  2233 ;;		_drawtext
  2234 ;;		_fillCircle
  2235 ;;		_fillScreen
  2236 ;;		_strcpy
  2237 ;; This function is called by:
  2238 ;;		_main
  2239 ;; This function uses a non-reentrant model
  2240 ;;
  2241                           
  2242                           	psect	text5
  2243  00001C                     __ptext5:
  2244                           	opt stack 0
  2245  00001C                     _Initialize_Screen:
  2246                           	opt stack 21
  2247                           
  2248                           ;Lab8pC.c: 168: LCD_Reset();
  2249                           
  2250                           ;incstack = 0
  2251  00001C  EC16  F013         	call	_LCD_Reset	;wreg free
  2252                           
  2253                           ;Lab8pC.c: 169: TFT_GreenTab_Initialize();
  2254  000020  EC9F  F012         	call	_TFT_GreenTab_Initialize	;wreg free
  2255                           
  2256                           ;Lab8pC.c: 170: fillScreen(0x0000);
  2257  000024  0E00               	movlw	0
  2258  000026  6E23               	movwf	fillScreen@color+1,c
  2259  000028  0E00               	movlw	0
  2260  00002A  6E22               	movwf	fillScreen@color,c
  2261  00002C  ECDB  F012         	call	_fillScreen	;wreg free
  2262                           
  2263                           ;Lab8pC.c: 173: txt = buffer;
  2264  000030  0E88               	movlw	low _buffer
  2265  000032  6E47               	movwf	_txt,c
  2266  000034  0E00               	movlw	high _buffer
  2267  000036  6E48               	movwf	_txt+1,c
  2268                           
  2269                           ;Lab8pC.c: 174: strcpy(txt, "ECE3301L Fall 21-S4");
  2270  000038  C047  F00F         	movff	_txt,strcpy@to
  2271  00003C  C048  F010         	movff	_txt+1,strcpy@to+1
  2272  000040  0EAD               	movlw	low STR_1
  2273  000042  6E11               	movwf	strcpy@from,c
  2274  000044  0EFF               	movlw	high STR_1
  2275  000046  6E12               	movwf	strcpy@from+1,c
  2276  000048  EC59  F012         	call	_strcpy	;wreg free
  2277                           
  2278                           ;Lab8pC.c: 175: drawtext(2, 2, txt, 0xFFFF, 0x0000, 1);
  2279  00004C  0E02               	movlw	2
  2280  00004E  6E37               	movwf	drawtext@y,c
  2281  000050  C047  F038         	movff	_txt,drawtext@_text
  2282  000054  C048  F039         	movff	_txt+1,drawtext@_text+1
  2283  000058  0EFF               	movlw	255
  2284  00005A  6E3B               	movwf	drawtext@color+1,c
  2285  00005C  683A               	setf	drawtext@color,c
  2286  00005E  0E00               	movlw	0
  2287  000060  6E3D               	movwf	drawtext@bg+1,c
  2288  000062  0E00               	movlw	0
  2289  000064  6E3C               	movwf	drawtext@bg,c
  2290  000066  0E01               	movlw	1
  2291  000068  6E3E               	movwf	drawtext@size,c
  2292  00006A  0E02               	movlw	2
  2293  00006C  ECCD  F009         	call	_drawtext
  2294                           
  2295                           ;Lab8pC.c: 178: strcpy(txt, "Mode:");
  2296  000070  C047  F00F         	movff	_txt,strcpy@to
  2297  000074  C048  F010         	movff	_txt+1,strcpy@to+1
  2298  000078  0EE5               	movlw	low STR_2
  2299  00007A  6E11               	movwf	strcpy@from,c
  2300  00007C  0EFF               	movlw	high STR_2
  2301  00007E  6E12               	movwf	strcpy@from+1,c
  2302  000080  EC59  F012         	call	_strcpy	;wreg free
  2303                           
  2304                           ;Lab8pC.c: 179: drawtext(2, 10, txt, 0xFFFF, 0x0000, 1);
  2305  000084  0E0A               	movlw	10
  2306  000086  6E37               	movwf	drawtext@y,c
  2307  000088  C047  F038         	movff	_txt,drawtext@_text
  2308  00008C  C048  F039         	movff	_txt+1,drawtext@_text+1
  2309  000090  0EFF               	movlw	255
  2310  000092  6E3B               	movwf	drawtext@color+1,c
  2311  000094  683A               	setf	drawtext@color,c
  2312  000096  0E00               	movlw	0
  2313  000098  6E3D               	movwf	drawtext@bg+1,c
  2314  00009A  0E00               	movlw	0
  2315  00009C  6E3C               	movwf	drawtext@bg,c
  2316  00009E  0E01               	movlw	1
  2317  0000A0  6E3E               	movwf	drawtext@size,c
  2318  0000A2  0E02               	movlw	2
  2319  0000A4  ECCD  F009         	call	_drawtext
  2320                           
  2321                           ;Lab8pC.c: 180: drawtext(35,10, Act_Mode_Txt, 0xFFFF, 0x0000, 1);
  2322  0000A8  0E0A               	movlw	10
  2323  0000AA  6E37               	movwf	drawtext@y,c
  2324  0000AC  0E62               	movlw	low _Act_Mode_Txt
  2325  0000AE  6E38               	movwf	drawtext@_text,c
  2326  0000B0  0E00               	movlw	high _Act_Mode_Txt
  2327  0000B2  6E39               	movwf	drawtext@_text+1,c
  2328  0000B4  0EFF               	movlw	255
  2329  0000B6  6E3B               	movwf	drawtext@color+1,c
  2330  0000B8  683A               	setf	drawtext@color,c
  2331  0000BA  0E00               	movlw	0
  2332  0000BC  6E3D               	movwf	drawtext@bg+1,c
  2333  0000BE  0E00               	movlw	0
  2334  0000C0  6E3C               	movwf	drawtext@bg,c
  2335  0000C2  0E01               	movlw	1
  2336  0000C4  6E3E               	movwf	drawtext@size,c
  2337  0000C6  0E23               	movlw	35
  2338  0000C8  ECCD  F009         	call	_drawtext
  2339                           
  2340                           ;Lab8pC.c: 183: strcpy(txt, "FR:");
  2341  0000CC  C047  F00F         	movff	_txt,strcpy@to
  2342  0000D0  C048  F010         	movff	_txt+1,strcpy@to+1
  2343  0000D4  0EEB               	movlw	low STR_3
  2344  0000D6  6E11               	movwf	strcpy@from,c
  2345  0000D8  0EFF               	movlw	high STR_3
  2346  0000DA  6E12               	movwf	strcpy@from+1,c
  2347  0000DC  EC59  F012         	call	_strcpy	;wreg free
  2348                           
  2349                           ;Lab8pC.c: 184: drawtext(50, 10, txt, 0xFFFF, 0x0000, 1);
  2350  0000E0  0E0A               	movlw	10
  2351  0000E2  6E37               	movwf	drawtext@y,c
  2352  0000E4  C047  F038         	movff	_txt,drawtext@_text
  2353  0000E8  C048  F039         	movff	_txt+1,drawtext@_text+1
  2354  0000EC  0EFF               	movlw	255
  2355  0000EE  6E3B               	movwf	drawtext@color+1,c
  2356  0000F0  683A               	setf	drawtext@color,c
  2357  0000F2  0E00               	movlw	0
  2358  0000F4  6E3D               	movwf	drawtext@bg+1,c
  2359  0000F6  0E00               	movlw	0
  2360  0000F8  6E3C               	movwf	drawtext@bg,c
  2361  0000FA  0E01               	movlw	1
  2362  0000FC  6E3E               	movwf	drawtext@size,c
  2363  0000FE  0E32               	movlw	50
  2364  000100  ECCD  F009         	call	_drawtext
  2365                           
  2366                           ;Lab8pC.c: 185: drawtext(70, 10, FlashingR_Txt, 0xFFFF, 0x0000, 1);
  2367  000104  0E0A               	movlw	10
  2368  000106  6E37               	movwf	drawtext@y,c
  2369  000108  0E64               	movlw	low _FlashingR_Txt
  2370  00010A  6E38               	movwf	drawtext@_text,c
  2371  00010C  0E00               	movlw	high _FlashingR_Txt
  2372  00010E  6E39               	movwf	drawtext@_text+1,c
  2373  000110  0EFF               	movlw	255
  2374  000112  6E3B               	movwf	drawtext@color+1,c
  2375  000114  683A               	setf	drawtext@color,c
  2376  000116  0E00               	movlw	0
  2377  000118  6E3D               	movwf	drawtext@bg+1,c
  2378  00011A  0E00               	movlw	0
  2379  00011C  6E3C               	movwf	drawtext@bg,c
  2380  00011E  0E01               	movlw	1
  2381  000120  6E3E               	movwf	drawtext@size,c
  2382  000122  0E46               	movlw	70
  2383  000124  ECCD  F009         	call	_drawtext
  2384                           
  2385                           ;Lab8pC.c: 188: strcpy(txt, "FS:");
  2386  000128  C047  F00F         	movff	_txt,strcpy@to
  2387  00012C  C048  F010         	movff	_txt+1,strcpy@to+1
  2388  000130  0EEF               	movlw	low STR_4
  2389  000132  6E11               	movwf	strcpy@from,c
  2390  000134  0EFF               	movlw	high STR_4
  2391  000136  6E12               	movwf	strcpy@from+1,c
  2392  000138  EC59  F012         	call	_strcpy	;wreg free
  2393                           
  2394                           ;Lab8pC.c: 189: drawtext(80, 10, txt, 0xFFFF, 0x0000, 1);
  2395  00013C  0E0A               	movlw	10
  2396  00013E  6E37               	movwf	drawtext@y,c
  2397  000140  C047  F038         	movff	_txt,drawtext@_text
  2398  000144  C048  F039         	movff	_txt+1,drawtext@_text+1
  2399  000148  0EFF               	movlw	255
  2400  00014A  6E3B               	movwf	drawtext@color+1,c
  2401  00014C  683A               	setf	drawtext@color,c
  2402  00014E  0E00               	movlw	0
  2403  000150  6E3D               	movwf	drawtext@bg+1,c
  2404  000152  0E00               	movlw	0
  2405  000154  6E3C               	movwf	drawtext@bg,c
  2406  000156  0E01               	movlw	1
  2407  000158  6E3E               	movwf	drawtext@size,c
  2408  00015A  0E50               	movlw	80
  2409  00015C  ECCD  F009         	call	_drawtext
  2410                           
  2411                           ;Lab8pC.c: 190: drawtext(100, 10, FlashingS_Txt, 0xFFFF, 0x0000, 1);
  2412  000160  0E0A               	movlw	10
  2413  000162  6E37               	movwf	drawtext@y,c
  2414  000164  0E66               	movlw	low _FlashingS_Txt
  2415  000166  6E38               	movwf	drawtext@_text,c
  2416  000168  0E00               	movlw	high _FlashingS_Txt
  2417  00016A  6E39               	movwf	drawtext@_text+1,c
  2418  00016C  0EFF               	movlw	255
  2419  00016E  6E3B               	movwf	drawtext@color+1,c
  2420  000170  683A               	setf	drawtext@color,c
  2421  000172  0E00               	movlw	0
  2422  000174  6E3D               	movwf	drawtext@bg+1,c
  2423  000176  0E00               	movlw	0
  2424  000178  6E3C               	movwf	drawtext@bg,c
  2425  00017A  0E01               	movlw	1
  2426  00017C  6E3E               	movwf	drawtext@size,c
  2427  00017E  0E64               	movlw	100
  2428  000180  ECCD  F009         	call	_drawtext
  2429                           
  2430                           ;Lab8pC.c: 193: strcpy(txt, "*");
  2431  000184  C047  F00F         	movff	_txt,strcpy@to
  2432  000188  C048  F010         	movff	_txt+1,strcpy@to+1
  2433  00018C  0EFD               	movlw	low STR_5
  2434  00018E  6E11               	movwf	strcpy@from,c
  2435  000190  0EFF               	movlw	high STR_5
  2436  000192  6E12               	movwf	strcpy@from+1,c
  2437  000194  EC59  F012         	call	_strcpy	;wreg free
  2438                           
  2439                           ;Lab8pC.c: 194: drawtext(120, 10, txt, 0xFFFF, 0x0000, 1);
  2440  000198  0E0A               	movlw	10
  2441  00019A  6E37               	movwf	drawtext@y,c
  2442  00019C  C047  F038         	movff	_txt,drawtext@_text
  2443  0001A0  C048  F039         	movff	_txt+1,drawtext@_text+1
  2444  0001A4  0EFF               	movlw	255
  2445  0001A6  6E3B               	movwf	drawtext@color+1,c
  2446  0001A8  683A               	setf	drawtext@color,c
  2447  0001AA  0E00               	movlw	0
  2448  0001AC  6E3D               	movwf	drawtext@bg+1,c
  2449  0001AE  0E00               	movlw	0
  2450  0001B0  6E3C               	movwf	drawtext@bg,c
  2451  0001B2  0E01               	movlw	1
  2452  0001B4  6E3E               	movwf	drawtext@size,c
  2453  0001B6  0E78               	movlw	120
  2454  0001B8  ECCD  F009         	call	_drawtext
  2455                           
  2456                           ;Lab8pC.c: 197: strcpy(txt, "EAST/WEST");
  2457  0001BC  C047  F00F         	movff	_txt,strcpy@to
  2458  0001C0  C048  F010         	movff	_txt+1,strcpy@to+1
  2459  0001C4  0ECD               	movlw	low STR_6
  2460  0001C6  6E11               	movwf	strcpy@from,c
  2461  0001C8  0EFF               	movlw	high STR_6
  2462  0001CA  6E12               	movwf	strcpy@from+1,c
  2463  0001CC  EC59  F012         	call	_strcpy	;wreg free
  2464                           
  2465                           ;Lab8pC.c: 198: drawtext (30, 20, txt, 0x07FF, 0x0000, 1);
  2466  0001D0  0E14               	movlw	20
  2467  0001D2  6E37               	movwf	drawtext@y,c
  2468  0001D4  C047  F038         	movff	_txt,drawtext@_text
  2469  0001D8  C048  F039         	movff	_txt+1,drawtext@_text+1
  2470  0001DC  0E07               	movlw	7
  2471  0001DE  6E3B               	movwf	drawtext@color+1,c
  2472  0001E0  683A               	setf	drawtext@color,c
  2473  0001E2  0E00               	movlw	0
  2474  0001E4  6E3D               	movwf	drawtext@bg+1,c
  2475  0001E6  0E00               	movlw	0
  2476  0001E8  6E3C               	movwf	drawtext@bg,c
  2477  0001EA  0E01               	movlw	1
  2478  0001EC  6E3E               	movwf	drawtext@size,c
  2479  0001EE  0E1E               	movlw	30
  2480  0001F0  ECCD  F009         	call	_drawtext
  2481                           
  2482                           ;Lab8pC.c: 199: drawRect (30, 20 + 15-8, 60, 18, 0x07FF);
  2483  0001F4  0E00               	movlw	0
  2484  0001F6  6E22               	movwf	drawRect@x+1,c
  2485  0001F8  0E1E               	movlw	30
  2486  0001FA  6E21               	movwf	drawRect@x,c
  2487  0001FC  0E00               	movlw	0
  2488  0001FE  6E24               	movwf	drawRect@y+1,c
  2489  000200  0E1B               	movlw	27
  2490  000202  6E23               	movwf	drawRect@y,c
  2491  000204  0E00               	movlw	0
  2492  000206  6E26               	movwf	drawRect@w+1,c
  2493  000208  0E3C               	movlw	60
  2494  00020A  6E25               	movwf	drawRect@w,c
  2495  00020C  0E00               	movlw	0
  2496  00020E  6E28               	movwf	drawRect@h+1,c
  2497  000210  0E12               	movlw	18
  2498  000212  6E27               	movwf	drawRect@h,c
  2499  000214  0E07               	movlw	7
  2500  000216  6E2A               	movwf	drawRect@color+1,c
  2501  000218  6829               	setf	drawRect@color,c
  2502  00021A  EC24  F010         	call	_drawRect	;wreg free
  2503                           
  2504                           ;Lab8pC.c: 200: drawCircle(40, 20 + 15, 7, 0xF800);
  2505  00021E  0E00               	movlw	0
  2506  000220  6E1B               	movwf	drawCircle@x0+1,c
  2507  000222  0E28               	movlw	40
  2508  000224  6E1A               	movwf	drawCircle@x0,c
  2509  000226  0E00               	movlw	0
  2510  000228  6E1D               	movwf	drawCircle@y0+1,c
  2511  00022A  0E23               	movlw	35
  2512  00022C  6E1C               	movwf	drawCircle@y0,c
  2513  00022E  0E00               	movlw	0
  2514  000230  6E1F               	movwf	drawCircle@r+1,c
  2515  000232  0E07               	movlw	7
  2516  000234  6E1E               	movwf	drawCircle@r,c
  2517  000236  0EF8               	movlw	248
  2518  000238  6E21               	movwf	drawCircle@color+1,c
  2519  00023A  0E00               	movlw	0
  2520  00023C  6E20               	movwf	drawCircle@color,c
  2521  00023E  EC62  F006         	call	_drawCircle	;wreg free
  2522                           
  2523                           ;Lab8pC.c: 201: drawCircle(60, 20 + 15, 7, 0xFFE0);
  2524  000242  0E00               	movlw	0
  2525  000244  6E1B               	movwf	drawCircle@x0+1,c
  2526  000246  0E3C               	movlw	60
  2527  000248  6E1A               	movwf	drawCircle@x0,c
  2528  00024A  0E00               	movlw	0
  2529  00024C  6E1D               	movwf	drawCircle@y0+1,c
  2530  00024E  0E23               	movlw	35
  2531  000250  6E1C               	movwf	drawCircle@y0,c
  2532  000252  0E00               	movlw	0
  2533  000254  6E1F               	movwf	drawCircle@r+1,c
  2534  000256  0E07               	movlw	7
  2535  000258  6E1E               	movwf	drawCircle@r,c
  2536  00025A  0EFF               	movlw	255
  2537  00025C  6E21               	movwf	drawCircle@color+1,c
  2538  00025E  0EE0               	movlw	224
  2539  000260  6E20               	movwf	drawCircle@color,c
  2540  000262  EC62  F006         	call	_drawCircle	;wreg free
  2541                           
  2542                           ;Lab8pC.c: 202: fillCircle(80, 20 + 15, 7, 0x07E0);
  2543  000266  0E00               	movlw	0
  2544  000268  6E3A               	movwf	fillCircle@x0+1,c
  2545  00026A  0E50               	movlw	80
  2546  00026C  6E39               	movwf	fillCircle@x0,c
  2547  00026E  0E00               	movlw	0
  2548  000270  6E3C               	movwf	fillCircle@y0+1,c
  2549  000272  0E23               	movlw	35
  2550  000274  6E3B               	movwf	fillCircle@y0,c
  2551  000276  0E00               	movlw	0
  2552  000278  6E3E               	movwf	fillCircle@r+1,c
  2553  00027A  0E07               	movlw	7
  2554  00027C  6E3D               	movwf	fillCircle@r,c
  2555  00027E  0E07               	movlw	7
  2556  000280  6E40               	movwf	fillCircle@color+1,c
  2557  000282  0EE0               	movlw	224
  2558  000284  6E3F               	movwf	fillCircle@color,c
  2559  000286  ECDD  F010         	call	_fillCircle	;wreg free
  2560                           
  2561                           ;Lab8pC.c: 203: drawtext (100, 20 + 10, EW_Count, 0x07FF, 0x0000, 2);
  2562  00028A  0E1E               	movlw	30
  2563  00028C  6E37               	movwf	drawtext@y,c
  2564  00028E  0E5F               	movlw	low _EW_Count
  2565  000290  6E38               	movwf	drawtext@_text,c
  2566  000292  0E00               	movlw	high _EW_Count
  2567  000294  6E39               	movwf	drawtext@_text+1,c
  2568  000296  0E07               	movlw	7
  2569  000298  6E3B               	movwf	drawtext@color+1,c
  2570  00029A  683A               	setf	drawtext@color,c
  2571  00029C  0E00               	movlw	0
  2572  00029E  6E3D               	movwf	drawtext@bg+1,c
  2573  0002A0  0E00               	movlw	0
  2574  0002A2  6E3C               	movwf	drawtext@bg,c
  2575  0002A4  0E02               	movlw	2
  2576  0002A6  6E3E               	movwf	drawtext@size,c
  2577  0002A8  0E64               	movlw	100
  2578  0002AA  ECCD  F009         	call	_drawtext
  2579                           
  2580                           ;Lab8pC.c: 207: strcpy(txt, "E/W LT");
  2581  0002AE  C047  F00F         	movff	_txt,strcpy@to
  2582  0002B2  C048  F010         	movff	_txt+1,strcpy@to+1
  2583  0002B6  0EDE               	movlw	low STR_7
  2584  0002B8  6E11               	movwf	strcpy@from,c
  2585  0002BA  0EFF               	movlw	high STR_7
  2586  0002BC  6E12               	movwf	strcpy@from+1,c
  2587  0002BE  EC59  F012         	call	_strcpy	;wreg free
  2588                           
  2589                           ;Lab8pC.c: 208: drawtext (30, 50, txt, 0xFFFF, 0x0000, 1);
  2590  0002C2  0E32               	movlw	50
  2591  0002C4  6E37               	movwf	drawtext@y,c
  2592  0002C6  C047  F038         	movff	_txt,drawtext@_text
  2593  0002CA  C048  F039         	movff	_txt+1,drawtext@_text+1
  2594  0002CE  0EFF               	movlw	255
  2595  0002D0  6E3B               	movwf	drawtext@color+1,c
  2596  0002D2  683A               	setf	drawtext@color,c
  2597  0002D4  0E00               	movlw	0
  2598  0002D6  6E3D               	movwf	drawtext@bg+1,c
  2599  0002D8  0E00               	movlw	0
  2600  0002DA  6E3C               	movwf	drawtext@bg,c
  2601  0002DC  0E01               	movlw	1
  2602  0002DE  6E3E               	movwf	drawtext@size,c
  2603  0002E0  0E1E               	movlw	30
  2604  0002E2  ECCD  F009         	call	_drawtext
  2605                           
  2606                           ;Lab8pC.c: 209: drawRect (30, 50 + 15-8, 60, 18, 0xFFFF);
  2607  0002E6  0E00               	movlw	0
  2608  0002E8  6E22               	movwf	drawRect@x+1,c
  2609  0002EA  0E1E               	movlw	30
  2610  0002EC  6E21               	movwf	drawRect@x,c
  2611  0002EE  0E00               	movlw	0
  2612  0002F0  6E24               	movwf	drawRect@y+1,c
  2613  0002F2  0E39               	movlw	57
  2614  0002F4  6E23               	movwf	drawRect@y,c
  2615  0002F6  0E00               	movlw	0
  2616  0002F8  6E26               	movwf	drawRect@w+1,c
  2617  0002FA  0E3C               	movlw	60
  2618  0002FC  6E25               	movwf	drawRect@w,c
  2619  0002FE  0E00               	movlw	0
  2620  000300  6E28               	movwf	drawRect@h+1,c
  2621  000302  0E12               	movlw	18
  2622  000304  6E27               	movwf	drawRect@h,c
  2623  000306  0EFF               	movlw	255
  2624  000308  6E2A               	movwf	drawRect@color+1,c
  2625  00030A  6829               	setf	drawRect@color,c
  2626  00030C  EC24  F010         	call	_drawRect	;wreg free
  2627                           
  2628                           ;Lab8pC.c: 210: fillCircle(40, 50 + 15, 7, 0xF800);
  2629  000310  0E00               	movlw	0
  2630  000312  6E3A               	movwf	fillCircle@x0+1,c
  2631  000314  0E28               	movlw	40
  2632  000316  6E39               	movwf	fillCircle@x0,c
  2633  000318  0E00               	movlw	0
  2634  00031A  6E3C               	movwf	fillCircle@y0+1,c
  2635  00031C  0E41               	movlw	65
  2636  00031E  6E3B               	movwf	fillCircle@y0,c
  2637  000320  0E00               	movlw	0
  2638  000322  6E3E               	movwf	fillCircle@r+1,c
  2639  000324  0E07               	movlw	7
  2640  000326  6E3D               	movwf	fillCircle@r,c
  2641  000328  0EF8               	movlw	248
  2642  00032A  6E40               	movwf	fillCircle@color+1,c
  2643  00032C  0E00               	movlw	0
  2644  00032E  6E3F               	movwf	fillCircle@color,c
  2645  000330  ECDD  F010         	call	_fillCircle	;wreg free
  2646                           
  2647                           ;Lab8pC.c: 211: drawCircle(60, 50 + 15, 7, 0xFFE0);
  2648  000334  0E00               	movlw	0
  2649  000336  6E1B               	movwf	drawCircle@x0+1,c
  2650  000338  0E3C               	movlw	60
  2651  00033A  6E1A               	movwf	drawCircle@x0,c
  2652  00033C  0E00               	movlw	0
  2653  00033E  6E1D               	movwf	drawCircle@y0+1,c
  2654  000340  0E41               	movlw	65
  2655  000342  6E1C               	movwf	drawCircle@y0,c
  2656  000344  0E00               	movlw	0
  2657  000346  6E1F               	movwf	drawCircle@r+1,c
  2658  000348  0E07               	movlw	7
  2659  00034A  6E1E               	movwf	drawCircle@r,c
  2660  00034C  0EFF               	movlw	255
  2661  00034E  6E21               	movwf	drawCircle@color+1,c
  2662  000350  0EE0               	movlw	224
  2663  000352  6E20               	movwf	drawCircle@color,c
  2664  000354  EC62  F006         	call	_drawCircle	;wreg free
  2665                           
  2666                           ;Lab8pC.c: 212: drawCircle(80, 50 + 15, 7, 0x07E0);
  2667  000358  0E00               	movlw	0
  2668  00035A  6E1B               	movwf	drawCircle@x0+1,c
  2669  00035C  0E50               	movlw	80
  2670  00035E  6E1A               	movwf	drawCircle@x0,c
  2671  000360  0E00               	movlw	0
  2672  000362  6E1D               	movwf	drawCircle@y0+1,c
  2673  000364  0E41               	movlw	65
  2674  000366  6E1C               	movwf	drawCircle@y0,c
  2675  000368  0E00               	movlw	0
  2676  00036A  6E1F               	movwf	drawCircle@r+1,c
  2677  00036C  0E07               	movlw	7
  2678  00036E  6E1E               	movwf	drawCircle@r,c
  2679  000370  0E07               	movlw	7
  2680  000372  6E21               	movwf	drawCircle@color+1,c
  2681  000374  0EE0               	movlw	224
  2682  000376  6E20               	movwf	drawCircle@color,c
  2683  000378  EC62  F006         	call	_drawCircle	;wreg free
  2684                           
  2685                           ;Lab8pC.c: 213: drawtext (100, 50 + 10, EWLT_Count, 0xFFFF, 0x0000, 2);
  2686  00037C  0E3C               	movlw	60
  2687  00037E  6E37               	movwf	drawtext@y,c
  2688  000380  0E5C               	movlw	low _EWLT_Count
  2689  000382  6E38               	movwf	drawtext@_text,c
  2690  000384  0E00               	movlw	high _EWLT_Count
  2691  000386  6E39               	movwf	drawtext@_text+1,c
  2692  000388  0EFF               	movlw	255
  2693  00038A  6E3B               	movwf	drawtext@color+1,c
  2694  00038C  683A               	setf	drawtext@color,c
  2695  00038E  0E00               	movlw	0
  2696  000390  6E3D               	movwf	drawtext@bg+1,c
  2697  000392  0E00               	movlw	0
  2698  000394  6E3C               	movwf	drawtext@bg,c
  2699  000396  0E02               	movlw	2
  2700  000398  6E3E               	movwf	drawtext@size,c
  2701  00039A  0E64               	movlw	100
  2702  00039C  ECCD  F009         	call	_drawtext
  2703                           
  2704                           ;Lab8pC.c: 216: strcpy(txt, "NORTH/SOUTH");
  2705  0003A0  C047  F00F         	movff	_txt,strcpy@to
  2706  0003A4  C048  F010         	movff	_txt+1,strcpy@to+1
  2707  0003A8  0EC1               	movlw	low STR_8
  2708  0003AA  6E11               	movwf	strcpy@from,c
  2709  0003AC  0EFF               	movlw	high STR_8
  2710  0003AE  6E12               	movwf	strcpy@from+1,c
  2711  0003B0  EC59  F012         	call	_strcpy	;wreg free
  2712                           
  2713                           ;Lab8pC.c: 217: drawtext (30, 80 , txt, 0x001F, 0x0000, 1);
  2714  0003B4  0E50               	movlw	80
  2715  0003B6  6E37               	movwf	drawtext@y,c
  2716  0003B8  C047  F038         	movff	_txt,drawtext@_text
  2717  0003BC  C048  F039         	movff	_txt+1,drawtext@_text+1
  2718  0003C0  0E00               	movlw	0
  2719  0003C2  6E3B               	movwf	drawtext@color+1,c
  2720  0003C4  0E1F               	movlw	31
  2721  0003C6  6E3A               	movwf	drawtext@color,c
  2722  0003C8  0E00               	movlw	0
  2723  0003CA  6E3D               	movwf	drawtext@bg+1,c
  2724  0003CC  0E00               	movlw	0
  2725  0003CE  6E3C               	movwf	drawtext@bg,c
  2726  0003D0  0E01               	movlw	1
  2727  0003D2  6E3E               	movwf	drawtext@size,c
  2728  0003D4  0E1E               	movlw	30
  2729  0003D6  ECCD  F009         	call	_drawtext
  2730                           
  2731                           ;Lab8pC.c: 218: drawRect (30, 80 + 15-8, 60, 18, 0x001F);
  2732  0003DA  0E00               	movlw	0
  2733  0003DC  6E22               	movwf	drawRect@x+1,c
  2734  0003DE  0E1E               	movlw	30
  2735  0003E0  6E21               	movwf	drawRect@x,c
  2736  0003E2  0E00               	movlw	0
  2737  0003E4  6E24               	movwf	drawRect@y+1,c
  2738  0003E6  0E57               	movlw	87
  2739  0003E8  6E23               	movwf	drawRect@y,c
  2740  0003EA  0E00               	movlw	0
  2741  0003EC  6E26               	movwf	drawRect@w+1,c
  2742  0003EE  0E3C               	movlw	60
  2743  0003F0  6E25               	movwf	drawRect@w,c
  2744  0003F2  0E00               	movlw	0
  2745  0003F4  6E28               	movwf	drawRect@h+1,c
  2746  0003F6  0E12               	movlw	18
  2747  0003F8  6E27               	movwf	drawRect@h,c
  2748  0003FA  0E00               	movlw	0
  2749  0003FC  6E2A               	movwf	drawRect@color+1,c
  2750  0003FE  0E1F               	movlw	31
  2751  000400  6E29               	movwf	drawRect@color,c
  2752  000402  EC24  F010         	call	_drawRect	;wreg free
  2753                           
  2754                           ;Lab8pC.c: 219: fillCircle(40, 80 + 15 , 7, 0xF800);
  2755  000406  0E00               	movlw	0
  2756  000408  6E3A               	movwf	fillCircle@x0+1,c
  2757  00040A  0E28               	movlw	40
  2758  00040C  6E39               	movwf	fillCircle@x0,c
  2759  00040E  0E00               	movlw	0
  2760  000410  6E3C               	movwf	fillCircle@y0+1,c
  2761  000412  0E5F               	movlw	95
  2762  000414  6E3B               	movwf	fillCircle@y0,c
  2763  000416  0E00               	movlw	0
  2764  000418  6E3E               	movwf	fillCircle@r+1,c
  2765  00041A  0E07               	movlw	7
  2766  00041C  6E3D               	movwf	fillCircle@r,c
  2767  00041E  0EF8               	movlw	248
  2768  000420  6E40               	movwf	fillCircle@color+1,c
  2769  000422  0E00               	movlw	0
  2770  000424  6E3F               	movwf	fillCircle@color,c
  2771  000426  ECDD  F010         	call	_fillCircle	;wreg free
  2772                           
  2773                           ;Lab8pC.c: 220: drawCircle(60, 80 + 15 , 7, 0xFFE0);
  2774  00042A  0E00               	movlw	0
  2775  00042C  6E1B               	movwf	drawCircle@x0+1,c
  2776  00042E  0E3C               	movlw	60
  2777  000430  6E1A               	movwf	drawCircle@x0,c
  2778  000432  0E00               	movlw	0
  2779  000434  6E1D               	movwf	drawCircle@y0+1,c
  2780  000436  0E5F               	movlw	95
  2781  000438  6E1C               	movwf	drawCircle@y0,c
  2782  00043A  0E00               	movlw	0
  2783  00043C  6E1F               	movwf	drawCircle@r+1,c
  2784  00043E  0E07               	movlw	7
  2785  000440  6E1E               	movwf	drawCircle@r,c
  2786  000442  0EFF               	movlw	255
  2787  000444  6E21               	movwf	drawCircle@color+1,c
  2788  000446  0EE0               	movlw	224
  2789  000448  6E20               	movwf	drawCircle@color,c
  2790  00044A  EC62  F006         	call	_drawCircle	;wreg free
  2791                           
  2792                           ;Lab8pC.c: 221: drawCircle(80, 80 + 15 , 7, 0x07E0);
  2793  00044E  0E00               	movlw	0
  2794  000450  6E1B               	movwf	drawCircle@x0+1,c
  2795  000452  0E50               	movlw	80
  2796  000454  6E1A               	movwf	drawCircle@x0,c
  2797  000456  0E00               	movlw	0
  2798  000458  6E1D               	movwf	drawCircle@y0+1,c
  2799  00045A  0E5F               	movlw	95
  2800  00045C  6E1C               	movwf	drawCircle@y0,c
  2801  00045E  0E00               	movlw	0
  2802  000460  6E1F               	movwf	drawCircle@r+1,c
  2803  000462  0E07               	movlw	7
  2804  000464  6E1E               	movwf	drawCircle@r,c
  2805  000466  0E07               	movlw	7
  2806  000468  6E21               	movwf	drawCircle@color+1,c
  2807  00046A  0EE0               	movlw	224
  2808  00046C  6E20               	movwf	drawCircle@color,c
  2809  00046E  EC62  F006         	call	_drawCircle	;wreg free
  2810                           
  2811                           ;Lab8pC.c: 222: drawtext (100, 80 + 10, NS_Count, 0x001F, 0x0000, 2);
  2812  000472  0E5A               	movlw	90
  2813  000474  6E37               	movwf	drawtext@y,c
  2814  000476  0EB7               	movlw	low _NS_Count
  2815  000478  6E38               	movwf	drawtext@_text,c
  2816  00047A  0E00               	movlw	high _NS_Count
  2817  00047C  6E39               	movwf	drawtext@_text+1,c
  2818  00047E  0E00               	movlw	0
  2819  000480  6E3B               	movwf	drawtext@color+1,c
  2820  000482  0E1F               	movlw	31
  2821  000484  6E3A               	movwf	drawtext@color,c
  2822  000486  0E00               	movlw	0
  2823  000488  6E3D               	movwf	drawtext@bg+1,c
  2824  00048A  0E00               	movlw	0
  2825  00048C  6E3C               	movwf	drawtext@bg,c
  2826  00048E  0E02               	movlw	2
  2827  000490  6E3E               	movwf	drawtext@size,c
  2828  000492  0E64               	movlw	100
  2829  000494  ECCD  F009         	call	_drawtext
  2830                           
  2831                           ;Lab8pC.c: 225: strcpy(txt, "N/S LT");
  2832  000498  C047  F00F         	movff	_txt,strcpy@to
  2833  00049C  C048  F010         	movff	_txt+1,strcpy@to+1
  2834  0004A0  0ED7               	movlw	low STR_9
  2835  0004A2  6E11               	movwf	strcpy@from,c
  2836  0004A4  0EFF               	movlw	high STR_9
  2837  0004A6  6E12               	movwf	strcpy@from+1,c
  2838  0004A8  EC59  F012         	call	_strcpy	;wreg free
  2839                           
  2840                           ;Lab8pC.c: 226: drawtext (30, 110, txt, 0xF81F, 0x0000, 1);
  2841  0004AC  0E6E               	movlw	110
  2842  0004AE  6E37               	movwf	drawtext@y,c
  2843  0004B0  C047  F038         	movff	_txt,drawtext@_text
  2844  0004B4  C048  F039         	movff	_txt+1,drawtext@_text+1
  2845  0004B8  0EF8               	movlw	248
  2846  0004BA  6E3B               	movwf	drawtext@color+1,c
  2847  0004BC  0E1F               	movlw	31
  2848  0004BE  6E3A               	movwf	drawtext@color,c
  2849  0004C0  0E00               	movlw	0
  2850  0004C2  6E3D               	movwf	drawtext@bg+1,c
  2851  0004C4  0E00               	movlw	0
  2852  0004C6  6E3C               	movwf	drawtext@bg,c
  2853  0004C8  0E01               	movlw	1
  2854  0004CA  6E3E               	movwf	drawtext@size,c
  2855  0004CC  0E1E               	movlw	30
  2856  0004CE  ECCD  F009         	call	_drawtext
  2857                           
  2858                           ;Lab8pC.c: 227: drawRect (30, 110 + 15-8, 60, 18, 0xF81F);
  2859  0004D2  0E00               	movlw	0
  2860  0004D4  6E22               	movwf	drawRect@x+1,c
  2861  0004D6  0E1E               	movlw	30
  2862  0004D8  6E21               	movwf	drawRect@x,c
  2863  0004DA  0E00               	movlw	0
  2864  0004DC  6E24               	movwf	drawRect@y+1,c
  2865  0004DE  0E75               	movlw	117
  2866  0004E0  6E23               	movwf	drawRect@y,c
  2867  0004E2  0E00               	movlw	0
  2868  0004E4  6E26               	movwf	drawRect@w+1,c
  2869  0004E6  0E3C               	movlw	60
  2870  0004E8  6E25               	movwf	drawRect@w,c
  2871  0004EA  0E00               	movlw	0
  2872  0004EC  6E28               	movwf	drawRect@h+1,c
  2873  0004EE  0E12               	movlw	18
  2874  0004F0  6E27               	movwf	drawRect@h,c
  2875  0004F2  0EF8               	movlw	248
  2876  0004F4  6E2A               	movwf	drawRect@color+1,c
  2877  0004F6  0E1F               	movlw	31
  2878  0004F8  6E29               	movwf	drawRect@color,c
  2879  0004FA  EC24  F010         	call	_drawRect	;wreg free
  2880                           
  2881                           ;Lab8pC.c: 228: fillCircle(40, 110 + 15, 7, 0xF800);
  2882  0004FE  0E00               	movlw	0
  2883  000500  6E3A               	movwf	fillCircle@x0+1,c
  2884  000502  0E28               	movlw	40
  2885  000504  6E39               	movwf	fillCircle@x0,c
  2886  000506  0E00               	movlw	0
  2887  000508  6E3C               	movwf	fillCircle@y0+1,c
  2888  00050A  0E7D               	movlw	125
  2889  00050C  6E3B               	movwf	fillCircle@y0,c
  2890  00050E  0E00               	movlw	0
  2891  000510  6E3E               	movwf	fillCircle@r+1,c
  2892  000512  0E07               	movlw	7
  2893  000514  6E3D               	movwf	fillCircle@r,c
  2894  000516  0EF8               	movlw	248
  2895  000518  6E40               	movwf	fillCircle@color+1,c
  2896  00051A  0E00               	movlw	0
  2897  00051C  6E3F               	movwf	fillCircle@color,c
  2898  00051E  ECDD  F010         	call	_fillCircle	;wreg free
  2899                           
  2900                           ;Lab8pC.c: 229: drawCircle(60, 110 + 15, 7, 0xFFE0);
  2901  000522  0E00               	movlw	0
  2902  000524  6E1B               	movwf	drawCircle@x0+1,c
  2903  000526  0E3C               	movlw	60
  2904  000528  6E1A               	movwf	drawCircle@x0,c
  2905  00052A  0E00               	movlw	0
  2906  00052C  6E1D               	movwf	drawCircle@y0+1,c
  2907  00052E  0E7D               	movlw	125
  2908  000530  6E1C               	movwf	drawCircle@y0,c
  2909  000532  0E00               	movlw	0
  2910  000534  6E1F               	movwf	drawCircle@r+1,c
  2911  000536  0E07               	movlw	7
  2912  000538  6E1E               	movwf	drawCircle@r,c
  2913  00053A  0EFF               	movlw	255
  2914  00053C  6E21               	movwf	drawCircle@color+1,c
  2915  00053E  0EE0               	movlw	224
  2916  000540  6E20               	movwf	drawCircle@color,c
  2917  000542  EC62  F006         	call	_drawCircle	;wreg free
  2918                           
  2919                           ;Lab8pC.c: 230: drawCircle(80, 110 + 15, 7, 0x07E0);
  2920  000546  0E00               	movlw	0
  2921  000548  6E1B               	movwf	drawCircle@x0+1,c
  2922  00054A  0E50               	movlw	80
  2923  00054C  6E1A               	movwf	drawCircle@x0,c
  2924  00054E  0E00               	movlw	0
  2925  000550  6E1D               	movwf	drawCircle@y0+1,c
  2926  000552  0E7D               	movlw	125
  2927  000554  6E1C               	movwf	drawCircle@y0,c
  2928  000556  0E00               	movlw	0
  2929  000558  6E1F               	movwf	drawCircle@r+1,c
  2930  00055A  0E07               	movlw	7
  2931  00055C  6E1E               	movwf	drawCircle@r,c
  2932  00055E  0E07               	movlw	7
  2933  000560  6E21               	movwf	drawCircle@color+1,c
  2934  000562  0EE0               	movlw	224
  2935  000564  6E20               	movwf	drawCircle@color,c
  2936  000566  EC62  F006         	call	_drawCircle	;wreg free
  2937                           
  2938                           ;Lab8pC.c: 231: drawtext (100, 110 + 10, NSLT_Count, 0xF81F, 0x0000, 2);
  2939  00056A  0E78               	movlw	120
  2940  00056C  6E37               	movwf	drawtext@y,c
  2941  00056E  0EB4               	movlw	low _NSLT_Count
  2942  000570  6E38               	movwf	drawtext@_text,c
  2943  000572  0E00               	movlw	high _NSLT_Count
  2944  000574  6E39               	movwf	drawtext@_text+1,c
  2945  000576  0EF8               	movlw	248
  2946  000578  6E3B               	movwf	drawtext@color+1,c
  2947  00057A  0E1F               	movlw	31
  2948  00057C  6E3A               	movwf	drawtext@color,c
  2949  00057E  0E00               	movlw	0
  2950  000580  6E3D               	movwf	drawtext@bg+1,c
  2951  000582  0E00               	movlw	0
  2952  000584  6E3C               	movwf	drawtext@bg,c
  2953  000586  0E02               	movlw	2
  2954  000588  6E3E               	movwf	drawtext@size,c
  2955  00058A  0E64               	movlw	100
  2956  00058C  ECCD  F009         	call	_drawtext
  2957                           
  2958                           ;Lab8pC.c: 234: drawtext(2, 30, PED_EW_Count, 0x07FF, 0x0000, 2);
  2959  000590  0E1E               	movlw	30
  2960  000592  6E37               	movwf	drawtext@y,c
  2961  000594  0EBA               	movlw	low _PED_EW_Count
  2962  000596  6E38               	movwf	drawtext@_text,c
  2963  000598  0E00               	movlw	high _PED_EW_Count
  2964  00059A  6E39               	movwf	drawtext@_text+1,c
  2965  00059C  0E07               	movlw	7
  2966  00059E  6E3B               	movwf	drawtext@color+1,c
  2967  0005A0  683A               	setf	drawtext@color,c
  2968  0005A2  0E00               	movlw	0
  2969  0005A4  6E3D               	movwf	drawtext@bg+1,c
  2970  0005A6  0E00               	movlw	0
  2971  0005A8  6E3C               	movwf	drawtext@bg,c
  2972  0005AA  0E02               	movlw	2
  2973  0005AC  6E3E               	movwf	drawtext@size,c
  2974  0005AE  0E02               	movlw	2
  2975  0005B0  ECCD  F009         	call	_drawtext
  2976                           
  2977                           ;Lab8pC.c: 235: strcpy(txt, "PEW");
  2978  0005B4  C047  F00F         	movff	_txt,strcpy@to
  2979  0005B8  C048  F010         	movff	_txt+1,strcpy@to+1
  2980  0005BC  0EF7               	movlw	low STR_10
  2981  0005BE  6E11               	movwf	strcpy@from,c
  2982  0005C0  0EFF               	movlw	high STR_10
  2983  0005C2  6E12               	movwf	strcpy@from+1,c
  2984  0005C4  EC59  F012         	call	_strcpy	;wreg free
  2985                           
  2986                           ;Lab8pC.c: 236: drawtext(3, 20, txt, 0x07FF, 0x0000, 1);
  2987  0005C8  0E14               	movlw	20
  2988  0005CA  6E37               	movwf	drawtext@y,c
  2989  0005CC  C047  F038         	movff	_txt,drawtext@_text
  2990  0005D0  C048  F039         	movff	_txt+1,drawtext@_text+1
  2991  0005D4  0E07               	movlw	7
  2992  0005D6  6E3B               	movwf	drawtext@color+1,c
  2993  0005D8  683A               	setf	drawtext@color,c
  2994  0005DA  0E00               	movlw	0
  2995  0005DC  6E3D               	movwf	drawtext@bg+1,c
  2996  0005DE  0E00               	movlw	0
  2997  0005E0  6E3C               	movwf	drawtext@bg,c
  2998  0005E2  0E01               	movlw	1
  2999  0005E4  6E3E               	movwf	drawtext@size,c
  3000  0005E6  0E03               	movlw	3
  3001  0005E8  ECCD  F009         	call	_drawtext
  3002                           
  3003                           ;Lab8pC.c: 239: strcpy(txt, "PNS");
  3004  0005EC  C047  F00F         	movff	_txt,strcpy@to
  3005  0005F0  C048  F010         	movff	_txt+1,strcpy@to+1
  3006  0005F4  0EF3               	movlw	low STR_11
  3007  0005F6  6E11               	movwf	strcpy@from,c
  3008  0005F8  0EFF               	movlw	high STR_11
  3009  0005FA  6E12               	movwf	strcpy@from+1,c
  3010  0005FC  EC59  F012         	call	_strcpy	;wreg free
  3011                           
  3012                           ;Lab8pC.c: 240: drawtext(3, 80, txt, 0x001F, 0x0000, 1);
  3013  000600  0E50               	movlw	80
  3014  000602  6E37               	movwf	drawtext@y,c
  3015  000604  C047  F038         	movff	_txt,drawtext@_text
  3016  000608  C048  F039         	movff	_txt+1,drawtext@_text+1
  3017  00060C  0E00               	movlw	0
  3018  00060E  6E3B               	movwf	drawtext@color+1,c
  3019  000610  0E1F               	movlw	31
  3020  000612  6E3A               	movwf	drawtext@color,c
  3021  000614  0E00               	movlw	0
  3022  000616  6E3D               	movwf	drawtext@bg+1,c
  3023  000618  0E00               	movlw	0
  3024  00061A  6E3C               	movwf	drawtext@bg,c
  3025  00061C  0E01               	movlw	1
  3026  00061E  6E3E               	movwf	drawtext@size,c
  3027  000620  0E03               	movlw	3
  3028  000622  ECCD  F009         	call	_drawtext
  3029                           
  3030                           ;Lab8pC.c: 241: drawtext(2, 90, PED_NS_Count, 0x001F, 0x0000, 2);
  3031  000626  0E5A               	movlw	90
  3032  000628  6E37               	movwf	drawtext@y,c
  3033  00062A  0EBD               	movlw	low _PED_NS_Count
  3034  00062C  6E38               	movwf	drawtext@_text,c
  3035  00062E  0E00               	movlw	high _PED_NS_Count
  3036  000630  6E39               	movwf	drawtext@_text+1,c
  3037  000632  0E00               	movlw	0
  3038  000634  6E3B               	movwf	drawtext@color+1,c
  3039  000636  0E1F               	movlw	31
  3040  000638  6E3A               	movwf	drawtext@color,c
  3041  00063A  0E00               	movlw	0
  3042  00063C  6E3D               	movwf	drawtext@bg+1,c
  3043  00063E  0E00               	movlw	0
  3044  000640  6E3C               	movwf	drawtext@bg,c
  3045  000642  0E02               	movlw	2
  3046  000644  6E3E               	movwf	drawtext@size,c
  3047  000646  0E02               	movlw	2
  3048  000648  ECCD  F009         	call	_drawtext
  3049                           
  3050                           ;Lab8pC.c: 244: strcpy(txt, "EWP EWLT NSP NSLT MR");
  3051  00064C  C047  F00F         	movff	_txt,strcpy@to
  3052  000650  C048  F010         	movff	_txt+1,strcpy@to+1
  3053  000654  0E98               	movlw	low STR_12
  3054  000656  6E11               	movwf	strcpy@from,c
  3055  000658  0EFF               	movlw	high STR_12
  3056  00065A  6E12               	movwf	strcpy@from+1,c
  3057  00065C  EC59  F012         	call	_strcpy	;wreg free
  3058                           
  3059                           ;Lab8pC.c: 245: drawtext(1, 140, txt, 0xFFFF, 0x0000, 1);
  3060  000660  0E8C               	movlw	140
  3061  000662  6E37               	movwf	drawtext@y,c
  3062  000664  C047  F038         	movff	_txt,drawtext@_text
  3063  000668  C048  F039         	movff	_txt+1,drawtext@_text+1
  3064  00066C  0EFF               	movlw	255
  3065  00066E  6E3B               	movwf	drawtext@color+1,c
  3066  000670  683A               	setf	drawtext@color,c
  3067  000672  0E00               	movlw	0
  3068  000674  6E3D               	movwf	drawtext@bg+1,c
  3069  000676  0E00               	movlw	0
  3070  000678  6E3C               	movwf	drawtext@bg,c
  3071  00067A  0E01               	movlw	1
  3072  00067C  6E3E               	movwf	drawtext@size,c
  3073  00067E  0E01               	movlw	1
  3074  000680  ECCD  F009         	call	_drawtext
  3075                           
  3076                           ;Lab8pC.c: 246: drawtext(6, 140+9, SW_EWPED_Txt, 0xFFFF, 0x0000, 1);
  3077  000684  0E95               	movlw	149
  3078  000686  6E37               	movwf	drawtext@y,c
  3079  000688  0E6A               	movlw	low _SW_EWPED_Txt
  3080  00068A  6E38               	movwf	drawtext@_text,c
  3081  00068C  0E00               	movlw	high _SW_EWPED_Txt
  3082  00068E  6E39               	movwf	drawtext@_text+1,c
  3083  000690  0EFF               	movlw	255
  3084  000692  6E3B               	movwf	drawtext@color+1,c
  3085  000694  683A               	setf	drawtext@color,c
  3086  000696  0E00               	movlw	0
  3087  000698  6E3D               	movwf	drawtext@bg+1,c
  3088  00069A  0E00               	movlw	0
  3089  00069C  6E3C               	movwf	drawtext@bg,c
  3090  00069E  0E01               	movlw	1
  3091  0006A0  6E3E               	movwf	drawtext@size,c
  3092  0006A2  0E06               	movlw	6
  3093  0006A4  ECCD  F009         	call	_drawtext
  3094                           
  3095                           ;Lab8pC.c: 247: drawtext(32, 140+9, SW_EWLT_Txt, 0xFFFF, 0x0000, 1);
  3096  0006A8  0E95               	movlw	149
  3097  0006AA  6E37               	movwf	drawtext@y,c
  3098  0006AC  0E68               	movlw	low _SW_EWLT_Txt
  3099  0006AE  6E38               	movwf	drawtext@_text,c
  3100  0006B0  0E00               	movlw	high _SW_EWLT_Txt
  3101  0006B2  6E39               	movwf	drawtext@_text+1,c
  3102  0006B4  0EFF               	movlw	255
  3103  0006B6  6E3B               	movwf	drawtext@color+1,c
  3104  0006B8  683A               	setf	drawtext@color,c
  3105  0006BA  0E00               	movlw	0
  3106  0006BC  6E3D               	movwf	drawtext@bg+1,c
  3107  0006BE  0E00               	movlw	0
  3108  0006C0  6E3C               	movwf	drawtext@bg,c
  3109  0006C2  0E01               	movlw	1
  3110  0006C4  6E3E               	movwf	drawtext@size,c
  3111  0006C6  0E20               	movlw	32
  3112  0006C8  ECCD  F009         	call	_drawtext
  3113                           
  3114                           ;Lab8pC.c: 248: drawtext(58, 140+9, SW_NSPED_Txt, 0xFFFF, 0x0000, 1);
  3115  0006CC  0E95               	movlw	149
  3116  0006CE  6E37               	movwf	drawtext@y,c
  3117  0006D0  0E70               	movlw	low _SW_NSPED_Txt
  3118  0006D2  6E38               	movwf	drawtext@_text,c
  3119  0006D4  0E00               	movlw	high _SW_NSPED_Txt
  3120  0006D6  6E39               	movwf	drawtext@_text+1,c
  3121  0006D8  0EFF               	movlw	255
  3122  0006DA  6E3B               	movwf	drawtext@color+1,c
  3123  0006DC  683A               	setf	drawtext@color,c
  3124  0006DE  0E00               	movlw	0
  3125  0006E0  6E3D               	movwf	drawtext@bg+1,c
  3126  0006E2  0E00               	movlw	0
  3127  0006E4  6E3C               	movwf	drawtext@bg,c
  3128  0006E6  0E01               	movlw	1
  3129  0006E8  6E3E               	movwf	drawtext@size,c
  3130  0006EA  0E3A               	movlw	58
  3131  0006EC  ECCD  F009         	call	_drawtext
  3132                           
  3133                           ;Lab8pC.c: 249: drawtext(87, 140+9, SW_NSLT_Txt, 0xFFFF, 0x0000, 1);
  3134  0006F0  0E95               	movlw	149
  3135  0006F2  6E37               	movwf	drawtext@y,c
  3136  0006F4  0E6E               	movlw	low _SW_NSLT_Txt
  3137  0006F6  6E38               	movwf	drawtext@_text,c
  3138  0006F8  0E00               	movlw	high _SW_NSLT_Txt
  3139  0006FA  6E39               	movwf	drawtext@_text+1,c
  3140  0006FC  0EFF               	movlw	255
  3141  0006FE  6E3B               	movwf	drawtext@color+1,c
  3142  000700  683A               	setf	drawtext@color,c
  3143  000702  0E00               	movlw	0
  3144  000704  6E3D               	movwf	drawtext@bg+1,c
  3145  000706  0E00               	movlw	0
  3146  000708  6E3C               	movwf	drawtext@bg,c
  3147  00070A  0E01               	movlw	1
  3148  00070C  6E3E               	movwf	drawtext@size,c
  3149  00070E  0E57               	movlw	87
  3150  000710  ECCD  F009         	call	_drawtext
  3151                           
  3152                           ;Lab8pC.c: 251: drawtext(112,140+9, SW_MODE_Txt, 0xFFFF, 0x0000, 1);
  3153  000714  0E95               	movlw	149
  3154  000716  6E37               	movwf	drawtext@y,c
  3155  000718  0E6C               	movlw	low _SW_MODE_Txt
  3156  00071A  6E38               	movwf	drawtext@_text,c
  3157  00071C  0E00               	movlw	high _SW_MODE_Txt
  3158  00071E  6E39               	movwf	drawtext@_text+1,c
  3159  000720  0EFF               	movlw	255
  3160  000722  6E3B               	movwf	drawtext@color+1,c
  3161  000724  683A               	setf	drawtext@color,c
  3162  000726  0E00               	movlw	0
  3163  000728  6E3D               	movwf	drawtext@bg+1,c
  3164  00072A  0E00               	movlw	0
  3165  00072C  6E3C               	movwf	drawtext@bg,c
  3166  00072E  0E01               	movlw	1
  3167  000730  6E3E               	movwf	drawtext@size,c
  3168  000732  0E70               	movlw	112
  3169  000734  ECCD  F009         	call	_drawtext
  3170  000738  0012               	return		;funcret
  3171  00073A                     __end_of_Initialize_Screen:
  3172                           	opt stack 0
  3173                           tblptru	equ	0xFF8
  3174                           tblptrh	equ	0xFF7
  3175                           tblptrl	equ	0xFF6
  3176                           tablat	equ	0xFF5
  3177                           intcon	equ	0xFF2
  3178                           intcon2	equ	0xFF1
  3179                           intcon3	equ	0xFF0
  3180                           postinc0	equ	0xFEE
  3181                           wreg	equ	0xFE8
  3182                           postdec1	equ	0xFE5
  3183                           fsr1l	equ	0xFE1
  3184                           status	equ	0xFD8
  3185                           
  3186 ;; *************** function _fillScreen *****************
  3187 ;; Defined at:
  3188 ;;		line 652 in file "ST7735_TFT.c"
  3189 ;; Parameters:    Size  Location     Type
  3190 ;;  color           2   33[COMRAM] unsigned int 
  3191 ;; Auto vars:     Size  Location     Type
  3192 ;;		None
  3193 ;; Return value:  Size  Location     Type
  3194 ;;		None               void
  3195 ;; Registers used:
  3196 ;;		wreg, status,2, status,0, cstack
  3197 ;; Tracked objects:
  3198 ;;		On entry : 0/0
  3199 ;;		On exit  : 0/0
  3200 ;;		Unchanged: 0/0
  3201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3202 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3203 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3204 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3205 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3206 ;;Total ram usage:        2 bytes
  3207 ;; Hardware stack levels used:    1
  3208 ;; Hardware stack levels required when called:    6
  3209 ;; This function calls:
  3210 ;;		_fillRectangle
  3211 ;; This function is called by:
  3212 ;;		_Initialize_Screen
  3213 ;; This function uses a non-reentrant model
  3214 ;;
  3215                           
  3216                           	psect	text6
  3217  0025B6                     __ptext6:
  3218                           	opt stack 0
  3219  0025B6                     _fillScreen:
  3220                           	opt stack 23
  3221                           
  3222                           ;ST7735_TFT.c: 654: fillRectangle(0, 0, 128, 160, color);
  3223                           
  3224                           ;incstack = 0
  3225  0025B6  0E00               	movlw	0
  3226  0025B8  6E16               	movwf	fillRectangle@y,c
  3227  0025BA  0E80               	movlw	128
  3228  0025BC  6E17               	movwf	fillRectangle@w,c
  3229  0025BE  0EA0               	movlw	160
  3230  0025C0  6E18               	movwf	fillRectangle@h,c
  3231  0025C2  C022  F019         	movff	fillScreen@color,fillRectangle@color
  3232  0025C6  C023  F01A         	movff	fillScreen@color+1,fillRectangle@color+1
  3233  0025CA  0E00               	movlw	0
  3234  0025CC  EC3C  F00B         	call	_fillRectangle
  3235  0025D0  0012               	return		;funcret
  3236  0025D2                     __end_of_fillScreen:
  3237                           	opt stack 0
  3238                           tblptru	equ	0xFF8
  3239                           tblptrh	equ	0xFF7
  3240                           tblptrl	equ	0xFF6
  3241                           tablat	equ	0xFF5
  3242                           intcon	equ	0xFF2
  3243                           intcon2	equ	0xFF1
  3244                           intcon3	equ	0xFF0
  3245                           postinc0	equ	0xFEE
  3246                           wreg	equ	0xFE8
  3247                           postdec1	equ	0xFE5
  3248                           fsr1l	equ	0xFE1
  3249                           status	equ	0xFD8
  3250                           
  3251 ;; *************** function _fillRectangle *****************
  3252 ;; Defined at:
  3253 ;;		line 536 in file "ST7735_TFT.c"
  3254 ;; Parameters:    Size  Location     Type
  3255 ;;  x               1    wreg     unsigned char 
  3256 ;;  y               1   21[COMRAM] unsigned char 
  3257 ;;  w               1   22[COMRAM] unsigned char 
  3258 ;;  h               1   23[COMRAM] unsigned char 
  3259 ;;  color           2   24[COMRAM] unsigned int 
  3260 ;; Auto vars:     Size  Location     Type
  3261 ;;  x               1   32[COMRAM] unsigned char 
  3262 ;;  lo              1   31[COMRAM] unsigned char 
  3263 ;;  hi              1   30[COMRAM] unsigned char 
  3264 ;; Return value:  Size  Location     Type
  3265 ;;		None               void
  3266 ;; Registers used:
  3267 ;;		wreg, status,2, status,0, cstack
  3268 ;; Tracked objects:
  3269 ;;		On entry : 0/0
  3270 ;;		On exit  : 0/0
  3271 ;;		Unchanged: 0/0
  3272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3273 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3274 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3275 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3276 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3277 ;;Total ram usage:       12 bytes
  3278 ;; Hardware stack levels used:    1
  3279 ;; Hardware stack levels required when called:    5
  3280 ;; This function calls:
  3281 ;;		_setAddrWindow
  3282 ;;		_spiwrite
  3283 ;; This function is called by:
  3284 ;;		_fillScreen
  3285 ;; This function uses a non-reentrant model
  3286 ;;
  3287                           
  3288                           	psect	text7
  3289  001678                     __ptext7:
  3290                           	opt stack 0
  3291  001678                     _fillRectangle:
  3292                           	opt stack 23
  3293                           
  3294                           ;incstack = 0
  3295                           ;fillRectangle@x stored from wreg
  3296  001678  6E21               	movwf	fillRectangle@x,c
  3297                           
  3298                           ;ST7735_TFT.c: 538: unsigned char hi, lo;
  3299                           ;ST7735_TFT.c: 539: if((x >= 128) || (y >= 160))
  3300  00167A  0E80               	movlw	128
  3301  00167C  6021               	cpfslt	fillRectangle@x,c
  3302  00167E  D069               	goto	l240
  3303  001680  0E9F               	movlw	159
  3304  001682  6416               	cpfsgt	fillRectangle@y,c
  3305  001684  D001               	goto	l4825
  3306                           
  3307                           ;ST7735_TFT.c: 540: return;
  3308  001686  D065               	goto	l240
  3309  001688                     l4825:
  3310                           
  3311                           ;ST7735_TFT.c: 541: if((x + w - 1) >= 128)
  3312  001688  0EFF               	movlw	255
  3313  00168A  6E1B               	movwf	??_fillRectangle& (0+255),c
  3314  00168C  0EFF               	movlw	255
  3315  00168E  6E1C               	movwf	(??_fillRectangle+1)& (0+255),c
  3316  001690  5017               	movf	fillRectangle@w,w,c
  3317  001692  C021  F01D         	movff	fillRectangle@x,??_fillRectangle+2
  3318  001696  6A1E               	clrf	(??_fillRectangle+3)& (0+255),c
  3319  001698  261D               	addwf	??_fillRectangle+2,f,c
  3320  00169A  0E00               	movlw	0
  3321  00169C  221E               	addwfc	??_fillRectangle+3,f,c
  3322  00169E  501B               	movf	??_fillRectangle,w,c
  3323  0016A0  261D               	addwf	??_fillRectangle+2,f,c
  3324  0016A2  501C               	movf	??_fillRectangle+1,w,c
  3325  0016A4  221E               	addwfc	??_fillRectangle+3,f,c
  3326  0016A6  BE1E               	btfsc	??_fillRectangle+3,7,c
  3327  0016A8  D00A               	goto	l241
  3328  0016AA  501E               	movf	??_fillRectangle+3,w,c
  3329  0016AC  E104               	bnz	u3550
  3330  0016AE  0E80               	movlw	128
  3331  0016B0  5C1D               	subwf	??_fillRectangle+2,w,c
  3332  0016B2  A0D8               	btfss	status,0,c
  3333  0016B4  D004               	goto	l241
  3334  0016B6                     u3550:
  3335                           
  3336                           ;ST7735_TFT.c: 542: w = 128 - x;
  3337  0016B6  5021               	movf	fillRectangle@x,w,c
  3338  0016B8  0800               	sublw	0
  3339  0016BA  0F80               	addlw	128
  3340  0016BC  6E17               	movwf	fillRectangle@w,c
  3341  0016BE                     l241:
  3342                           
  3343                           ;ST7735_TFT.c: 543: if((y + h - 1) >= 160)
  3344  0016BE  0EFF               	movlw	255
  3345  0016C0  6E1B               	movwf	??_fillRectangle& (0+255),c
  3346  0016C2  0EFF               	movlw	255
  3347  0016C4  6E1C               	movwf	(??_fillRectangle+1)& (0+255),c
  3348  0016C6  5018               	movf	fillRectangle@h,w,c
  3349  0016C8  C016  F01D         	movff	fillRectangle@y,??_fillRectangle+2
  3350  0016CC  6A1E               	clrf	(??_fillRectangle+3)& (0+255),c
  3351  0016CE  261D               	addwf	??_fillRectangle+2,f,c
  3352  0016D0  0E00               	movlw	0
  3353  0016D2  221E               	addwfc	??_fillRectangle+3,f,c
  3354  0016D4  501B               	movf	??_fillRectangle,w,c
  3355  0016D6  261D               	addwf	??_fillRectangle+2,f,c
  3356  0016D8  501C               	movf	??_fillRectangle+1,w,c
  3357  0016DA  221E               	addwfc	??_fillRectangle+3,f,c
  3358  0016DC  BE1E               	btfsc	??_fillRectangle+3,7,c
  3359  0016DE  D00B               	goto	l4831
  3360  0016E0  501E               	movf	??_fillRectangle+3,w,c
  3361  0016E2  E104               	bnz	u3560
  3362  0016E4  0EA0               	movlw	160
  3363  0016E6  5C1D               	subwf	??_fillRectangle+2,w,c
  3364  0016E8  A0D8               	btfss	status,0,c
  3365  0016EA  D005               	goto	l4831
  3366  0016EC                     u3560:
  3367                           
  3368                           ;ST7735_TFT.c: 544: h = 160 - y;
  3369  0016EC  5016               	movf	fillRectangle@y,w,c
  3370  0016EE  0800               	sublw	0
  3371  0016F0  0FA0               	addlw	160
  3372  0016F2  6E18               	movwf	fillRectangle@h,c
  3373  0016F4  D000               	goto	l4831
  3374  0016F6                     l4831:
  3375                           
  3376                           ;ST7735_TFT.c: 545: setAddrWindow(x, y, x+w-1, y+h-1);
  3377  0016F6  C016  F012         	movff	fillRectangle@y,setAddrWindow@y0
  3378  0016FA  5021               	movf	fillRectangle@x,w,c
  3379  0016FC  2417               	addwf	fillRectangle@w,w,c
  3380  0016FE  6E1B               	movwf	??_fillRectangle& (0+255),c
  3381  001700  041B               	decf	??_fillRectangle,w,c
  3382  001702  6E13               	movwf	setAddrWindow@x1,c
  3383  001704  5016               	movf	fillRectangle@y,w,c
  3384  001706  2418               	addwf	fillRectangle@h,w,c
  3385  001708  6E1C               	movwf	(??_fillRectangle+1)& (0+255),c
  3386  00170A  041C               	decf	??_fillRectangle+1,w,c
  3387  00170C  6E14               	movwf	setAddrWindow@y1,c
  3388  00170E  5021               	movf	fillRectangle@x,w,c
  3389  001710  EC06  F011         	call	_setAddrWindow
  3390                           
  3391                           ;ST7735_TFT.c: 546: hi = color >> 8; lo = color;
  3392  001714  501A               	movf	fillRectangle@color+1,w,c
  3393  001716  6E1F               	movwf	fillRectangle@hi,c
  3394  001718  C019  F020         	movff	fillRectangle@color,fillRectangle@lo
  3395                           
  3396                           ;ST7735_TFT.c: 547: PORTDbits.RD0 = 1;
  3397  00171C  8083               	bsf	3971,0,c	;volatile
  3398                           
  3399                           ;ST7735_TFT.c: 548: PORTDbits.RD1 = 0;
  3400  00171E  9283               	bcf	3971,1,c	;volatile
  3401                           
  3402                           ;ST7735_TFT.c: 550: for(y=h; y>0; y--) {
  3403  001720  C018  F016         	movff	fillRectangle@h,fillRectangle@y
  3404  001724                     l4843:
  3405  001724  5016               	movf	fillRectangle@y,w,c
  3406  001726  B4D8               	btfsc	status,2,c
  3407  001728  D013               	goto	l244
  3408  00172A  D001               	goto	l243
  3409  00172C  D011               	goto	l244
  3410  00172E                     l243:
  3411                           
  3412                           ;ST7735_TFT.c: 551: for(x = w; x > 0; x--) {
  3413  00172E  C017  F021         	movff	fillRectangle@w,fillRectangle@x
  3414  001732                     l4847:
  3415  001732  5021               	movf	fillRectangle@x,w,c
  3416  001734  B4D8               	btfsc	status,2,c
  3417  001736  D00A               	goto	l4857
  3418  001738  D001               	goto	l4851
  3419  00173A  D008               	goto	l4857
  3420  00173C                     l4851:
  3421                           
  3422                           ;ST7735_TFT.c: 552: spiwrite(hi);
  3423  00173C  501F               	movf	fillRectangle@hi,w,c
  3424  00173E  EC0C  F013         	call	_spiwrite
  3425                           
  3426                           ;ST7735_TFT.c: 553: spiwrite(lo);
  3427  001742  5020               	movf	fillRectangle@lo,w,c
  3428  001744  EC0C  F013         	call	_spiwrite
  3429  001748  0621               	decf	fillRectangle@x,f,c
  3430  00174A  D7F3               	goto	l4847
  3431  00174C                     l4857:
  3432  00174C  0616               	decf	fillRectangle@y,f,c
  3433  00174E  D7EA               	goto	l4843
  3434  001750                     l244:
  3435                           
  3436                           ;ST7735_TFT.c: 554: }
  3437                           ;ST7735_TFT.c: 555: }
  3438                           ;ST7735_TFT.c: 556: PORTDbits.RD1 = 1;
  3439  001750  8283               	bsf	3971,1,c	;volatile
  3440  001752                     l240:
  3441  001752  0012               	return		;funcret
  3442  001754                     __end_of_fillRectangle:
  3443                           	opt stack 0
  3444                           tblptru	equ	0xFF8
  3445                           tblptrh	equ	0xFF7
  3446                           tblptrl	equ	0xFF6
  3447                           tablat	equ	0xFF5
  3448                           intcon	equ	0xFF2
  3449                           intcon2	equ	0xFF1
  3450                           intcon3	equ	0xFF0
  3451                           postinc0	equ	0xFEE
  3452                           wreg	equ	0xFE8
  3453                           postdec1	equ	0xFE5
  3454                           fsr1l	equ	0xFE1
  3455                           status	equ	0xFD8
  3456                           
  3457 ;; *************** function _drawRect *****************
  3458 ;; Defined at:
  3459 ;;		line 718 in file "ST7735_TFT.c"
  3460 ;; Parameters:    Size  Location     Type
  3461 ;;  x               2   32[COMRAM] unsigned int 
  3462 ;;  y               2   34[COMRAM] unsigned int 
  3463 ;;  w               2   36[COMRAM] unsigned int 
  3464 ;;  h               2   38[COMRAM] unsigned int 
  3465 ;;  color           2   40[COMRAM] unsigned int 
  3466 ;; Auto vars:     Size  Location     Type
  3467 ;;		None
  3468 ;; Return value:  Size  Location     Type
  3469 ;;		None               void
  3470 ;; Registers used:
  3471 ;;		wreg, status,2, status,0, cstack
  3472 ;; Tracked objects:
  3473 ;;		On entry : 0/0
  3474 ;;		On exit  : 0/0
  3475 ;;		Unchanged: 0/0
  3476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3477 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3478 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3479 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3480 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3481 ;;Total ram usage:       11 bytes
  3482 ;; Hardware stack levels used:    1
  3483 ;; Hardware stack levels required when called:    6
  3484 ;; This function calls:
  3485 ;;		_drawFastHLine
  3486 ;;		_drawFastVLine
  3487 ;; This function is called by:
  3488 ;;		_Initialize_Screen
  3489 ;; This function uses a non-reentrant model
  3490 ;;
  3491                           
  3492                           	psect	text8
  3493  002048                     __ptext8:
  3494                           	opt stack 0
  3495  002048                     _drawRect:
  3496                           	opt stack 23
  3497                           
  3498                           ;ST7735_TFT.c: 720: drawFastHLine(x, y, w, color);
  3499                           
  3500                           ;incstack = 0
  3501  002048  C023  F016         	movff	drawRect@y,drawFastHLine@y
  3502  00204C  C025  F017         	movff	drawRect@w,drawFastHLine@w
  3503  002050  C029  F018         	movff	drawRect@color,drawFastHLine@color
  3504  002054  C02A  F019         	movff	drawRect@color+1,drawFastHLine@color+1
  3505  002058  5021               	movf	drawRect@x,w,c
  3506  00205A  EC27  F00E         	call	_drawFastHLine
  3507                           
  3508                           ;ST7735_TFT.c: 721: drawFastHLine(x, y + h - 1, w, color);
  3509  00205E  5023               	movf	drawRect@y,w,c
  3510  002060  2427               	addwf	drawRect@h,w,c
  3511  002062  6E2B               	movwf	??_drawRect& (0+255),c
  3512  002064  042B               	decf	??_drawRect,w,c
  3513  002066  6E16               	movwf	drawFastHLine@y,c
  3514  002068  C025  F017         	movff	drawRect@w,drawFastHLine@w
  3515  00206C  C029  F018         	movff	drawRect@color,drawFastHLine@color
  3516  002070  C02A  F019         	movff	drawRect@color+1,drawFastHLine@color+1
  3517  002074  5021               	movf	drawRect@x,w,c
  3518  002076  EC27  F00E         	call	_drawFastHLine
  3519                           
  3520                           ;ST7735_TFT.c: 722: drawFastVLine(x, y, h, color);
  3521  00207A  C023  F016         	movff	drawRect@y,drawFastVLine@y
  3522  00207E  C027  F017         	movff	drawRect@h,drawFastVLine@h
  3523  002082  C029  F018         	movff	drawRect@color,drawFastVLine@color
  3524  002086  C02A  F019         	movff	drawRect@color+1,drawFastVLine@color+1
  3525  00208A  5021               	movf	drawRect@x,w,c
  3526  00208C  EC6B  F00E         	call	_drawFastVLine
  3527                           
  3528                           ;ST7735_TFT.c: 723: drawFastVLine(x + w - 1, y, h, color);
  3529  002090  C023  F016         	movff	drawRect@y,drawFastVLine@y
  3530  002094  C027  F017         	movff	drawRect@h,drawFastVLine@h
  3531  002098  C029  F018         	movff	drawRect@color,drawFastVLine@color
  3532  00209C  C02A  F019         	movff	drawRect@color+1,drawFastVLine@color+1
  3533  0020A0  5021               	movf	drawRect@x,w,c
  3534  0020A2  2425               	addwf	drawRect@w,w,c
  3535  0020A4  6E2B               	movwf	??_drawRect& (0+255),c
  3536  0020A6  042B               	decf	??_drawRect,w,c
  3537  0020A8  EC6B  F00E         	call	_drawFastVLine
  3538  0020AC  0012               	return		;funcret
  3539  0020AE                     __end_of_drawRect:
  3540                           	opt stack 0
  3541                           tblptru	equ	0xFF8
  3542                           tblptrh	equ	0xFF7
  3543                           tblptrl	equ	0xFF6
  3544                           tablat	equ	0xFF5
  3545                           intcon	equ	0xFF2
  3546                           intcon2	equ	0xFF1
  3547                           intcon3	equ	0xFF0
  3548                           postinc0	equ	0xFEE
  3549                           wreg	equ	0xFE8
  3550                           postdec1	equ	0xFE5
  3551                           fsr1l	equ	0xFE1
  3552                           status	equ	0xFD8
  3553                           
  3554 ;; *************** function _drawFastHLine *****************
  3555 ;; Defined at:
  3556 ;;		line 657 in file "ST7735_TFT.c"
  3557 ;; Parameters:    Size  Location     Type
  3558 ;;  x               1    wreg     unsigned char 
  3559 ;;  y               1   21[COMRAM] unsigned char 
  3560 ;;  w               1   22[COMRAM] unsigned char 
  3561 ;;  color           2   23[COMRAM] unsigned int 
  3562 ;; Auto vars:     Size  Location     Type
  3563 ;;  x               1   31[COMRAM] unsigned char 
  3564 ;;  lo              1   30[COMRAM] unsigned char 
  3565 ;;  hi              1   29[COMRAM] unsigned char 
  3566 ;; Return value:  Size  Location     Type
  3567 ;;		None               void
  3568 ;; Registers used:
  3569 ;;		wreg, status,2, status,0, cstack
  3570 ;; Tracked objects:
  3571 ;;		On entry : 0/0
  3572 ;;		On exit  : 0/0
  3573 ;;		Unchanged: 0/0
  3574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3575 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3576 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3577 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3578 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3579 ;;Total ram usage:       11 bytes
  3580 ;; Hardware stack levels used:    1
  3581 ;; Hardware stack levels required when called:    5
  3582 ;; This function calls:
  3583 ;;		_setAddrWindow
  3584 ;;		_spiwrite
  3585 ;; This function is called by:
  3586 ;;		_drawRect
  3587 ;; This function uses a non-reentrant model
  3588 ;;
  3589                           
  3590                           	psect	text9
  3591  001C4E                     __ptext9:
  3592                           	opt stack 0
  3593  001C4E                     _drawFastHLine:
  3594                           	opt stack 23
  3595                           
  3596                           ;incstack = 0
  3597                           ;drawFastHLine@x stored from wreg
  3598  001C4E  6E20               	movwf	drawFastHLine@x,c
  3599                           
  3600                           ;ST7735_TFT.c: 659: unsigned char hi, lo;
  3601                           ;ST7735_TFT.c: 660: if((x >= 128) || (y >= 160))
  3602  001C50  0E80               	movlw	128
  3603  001C52  6020               	cpfslt	drawFastHLine@x,c
  3604  001C54  D03F               	goto	l285
  3605  001C56  0E9F               	movlw	159
  3606  001C58  6416               	cpfsgt	drawFastHLine@y,c
  3607  001C5A  D001               	goto	l4865
  3608                           
  3609                           ;ST7735_TFT.c: 661: return;
  3610  001C5C  D03B               	goto	l285
  3611  001C5E                     l4865:
  3612                           
  3613                           ;ST7735_TFT.c: 662: if((x + w - 1) >= 128)
  3614  001C5E  0EFF               	movlw	255
  3615  001C60  6E1A               	movwf	??_drawFastHLine& (0+255),c
  3616  001C62  0EFF               	movlw	255
  3617  001C64  6E1B               	movwf	(??_drawFastHLine+1)& (0+255),c
  3618  001C66  5017               	movf	drawFastHLine@w,w,c
  3619  001C68  C020  F01C         	movff	drawFastHLine@x,??_drawFastHLine+2
  3620  001C6C  6A1D               	clrf	(??_drawFastHLine+3)& (0+255),c
  3621  001C6E  261C               	addwf	??_drawFastHLine+2,f,c
  3622  001C70  0E00               	movlw	0
  3623  001C72  221D               	addwfc	??_drawFastHLine+3,f,c
  3624  001C74  501A               	movf	??_drawFastHLine,w,c
  3625  001C76  261C               	addwf	??_drawFastHLine+2,f,c
  3626  001C78  501B               	movf	??_drawFastHLine+1,w,c
  3627  001C7A  221D               	addwfc	??_drawFastHLine+3,f,c
  3628  001C7C  BE1D               	btfsc	??_drawFastHLine+3,7,c
  3629  001C7E  D00B               	goto	l4869
  3630  001C80  501D               	movf	??_drawFastHLine+3,w,c
  3631  001C82  E104               	bnz	u3630
  3632  001C84  0E80               	movlw	128
  3633  001C86  5C1C               	subwf	??_drawFastHLine+2,w,c
  3634  001C88  A0D8               	btfss	status,0,c
  3635  001C8A  D005               	goto	l4869
  3636  001C8C                     u3630:
  3637                           
  3638                           ;ST7735_TFT.c: 663: w = 128 - x;
  3639  001C8C  5020               	movf	drawFastHLine@x,w,c
  3640  001C8E  0800               	sublw	0
  3641  001C90  0F80               	addlw	128
  3642  001C92  6E17               	movwf	drawFastHLine@w,c
  3643  001C94  D000               	goto	l4869
  3644  001C96                     l4869:
  3645                           
  3646                           ;ST7735_TFT.c: 664: hi = color >> 8; lo = color;
  3647  001C96  5019               	movf	drawFastHLine@color+1,w,c
  3648  001C98  6E1E               	movwf	drawFastHLine@hi,c
  3649  001C9A  C018  F01F         	movff	drawFastHLine@color,drawFastHLine@lo
  3650                           
  3651                           ;ST7735_TFT.c: 665: setAddrWindow(x, y, x + w - 1, y);
  3652  001C9E  C016  F012         	movff	drawFastHLine@y,setAddrWindow@y0
  3653  001CA2  5020               	movf	drawFastHLine@x,w,c
  3654  001CA4  2417               	addwf	drawFastHLine@w,w,c
  3655  001CA6  6E1A               	movwf	??_drawFastHLine& (0+255),c
  3656  001CA8  041A               	decf	??_drawFastHLine,w,c
  3657  001CAA  6E13               	movwf	setAddrWindow@x1,c
  3658  001CAC  C016  F014         	movff	drawFastHLine@y,setAddrWindow@y1
  3659  001CB0  5020               	movf	drawFastHLine@x,w,c
  3660  001CB2  EC06  F011         	call	_setAddrWindow
  3661                           
  3662                           ;ST7735_TFT.c: 666: PORTDbits.RD0 = 1;
  3663  001CB6  8083               	bsf	3971,0,c	;volatile
  3664                           
  3665                           ;ST7735_TFT.c: 667: PORTDbits.RD1 = 0;
  3666  001CB8  9283               	bcf	3971,1,c	;volatile
  3667                           
  3668                           ;ST7735_TFT.c: 669: while (w--) {
  3669  001CBA  D007               	goto	l4881
  3670  001CBC                     l4879:
  3671                           
  3672                           ;ST7735_TFT.c: 670: spiwrite(hi);
  3673  001CBC  501E               	movf	drawFastHLine@hi,w,c
  3674  001CBE  EC0C  F013         	call	_spiwrite
  3675                           
  3676                           ;ST7735_TFT.c: 671: spiwrite(lo);
  3677  001CC2  501F               	movf	drawFastHLine@lo,w,c
  3678  001CC4  EC0C  F013         	call	_spiwrite
  3679  001CC8  D000               	goto	l4881
  3680  001CCA                     l4881:
  3681  001CCA  0617               	decf	drawFastHLine@w,f,c
  3682  001CCC  2817               	incf	drawFastHLine@w,w,c
  3683  001CCE  A4D8               	btfss	status,2,c
  3684  001CD0  D7F5               	goto	l4879
  3685                           
  3686                           ;ST7735_TFT.c: 672: }
  3687                           ;ST7735_TFT.c: 673: PORTDbits.RD1 = 1;
  3688  001CD2  8283               	bsf	3971,1,c	;volatile
  3689  001CD4                     l285:
  3690  001CD4  0012               	return		;funcret
  3691  001CD6                     __end_of_drawFastHLine:
  3692                           	opt stack 0
  3693                           tblptru	equ	0xFF8
  3694                           tblptrh	equ	0xFF7
  3695                           tblptrl	equ	0xFF6
  3696                           tablat	equ	0xFF5
  3697                           intcon	equ	0xFF2
  3698                           intcon2	equ	0xFF1
  3699                           intcon3	equ	0xFF0
  3700                           postinc0	equ	0xFEE
  3701                           wreg	equ	0xFE8
  3702                           postdec1	equ	0xFE5
  3703                           fsr1l	equ	0xFE1
  3704                           status	equ	0xFD8
  3705                           
  3706 ;; *************** function _TFT_GreenTab_Initialize *****************
  3707 ;; Defined at:
  3708 ;;		line 677 in file "ST7735_TFT.c"
  3709 ;; Parameters:    Size  Location     Type
  3710 ;;		None
  3711 ;; Auto vars:     Size  Location     Type
  3712 ;;		None
  3713 ;; Return value:  Size  Location     Type
  3714 ;;		None               void
  3715 ;; Registers used:
  3716 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3717 ;; Tracked objects:
  3718 ;;		On entry : 0/0
  3719 ;;		On exit  : 0/0
  3720 ;;		Unchanged: 0/0
  3721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3722 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3723 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3724 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3725 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3726 ;;Total ram usage:        0 bytes
  3727 ;; Hardware stack levels used:    1
  3728 ;; Hardware stack levels required when called:    5
  3729 ;; This function calls:
  3730 ;;		_Rcmd1
  3731 ;;		_Rcmd2red
  3732 ;;		_Rcmd3
  3733 ;;		_write_command
  3734 ;;		_write_data
  3735 ;; This function is called by:
  3736 ;;		_Initialize_Screen
  3737 ;; This function uses a non-reentrant model
  3738 ;;
  3739                           
  3740                           	psect	text10
  3741  00253E                     __ptext10:
  3742                           	opt stack 0
  3743  00253E                     _TFT_GreenTab_Initialize:
  3744                           	opt stack 24
  3745                           
  3746                           ;ST7735_TFT.c: 679: PORTDbits.RD1 = 1;
  3747                           
  3748                           ;incstack = 0
  3749  00253E  8283               	bsf	3971,1,c	;volatile
  3750                           
  3751                           ;ST7735_TFT.c: 680: PORTDbits.RD0 = 0;
  3752  002540  9083               	bcf	3971,0,c	;volatile
  3753                           
  3754                           ;ST7735_TFT.c: 682: SSPSTAT=0x80;
  3755  002542  0E80               	movlw	128
  3756  002544  6EC7               	movwf	4039,c	;volatile
  3757                           
  3758                           ;ST7735_TFT.c: 683: SSPCON1=0x30;
  3759  002546  0E30               	movlw	48
  3760  002548  6EC6               	movwf	4038,c	;volatile
  3761                           
  3762                           ;ST7735_TFT.c: 686: Rcmd1();
  3763  00254A  EC45  F009         	call	_Rcmd1	;wreg free
  3764                           
  3765                           ;ST7735_TFT.c: 687: Rcmd2red();
  3766  00254E  ECE2  F011         	call	_Rcmd2red	;wreg free
  3767                           
  3768                           ;ST7735_TFT.c: 688: Rcmd3();
  3769  002552  EC52  F00A         	call	_Rcmd3	;wreg free
  3770                           
  3771                           ;ST7735_TFT.c: 689: write_command(0x36);
  3772  002556  0E36               	movlw	54
  3773  002558  EC42  F013         	call	_write_command
  3774                           
  3775                           ;ST7735_TFT.c: 690: write_data(0xC0);
  3776  00255C  0EC0               	movlw	192
  3777  00255E  EC3A  F013         	call	_write_data
  3778                           
  3779                           ;ST7735_TFT.c: 691: _tft_type = 1;
  3780  002562  0E01               	movlw	1
  3781  002564  6E56               	movwf	__tft_type,c
  3782  002566  0012               	return		;funcret
  3783  002568                     __end_of_TFT_GreenTab_Initialize:
  3784                           	opt stack 0
  3785                           tblptru	equ	0xFF8
  3786                           tblptrh	equ	0xFF7
  3787                           tblptrl	equ	0xFF6
  3788                           tablat	equ	0xFF5
  3789                           intcon	equ	0xFF2
  3790                           intcon2	equ	0xFF1
  3791                           intcon3	equ	0xFF0
  3792                           postinc0	equ	0xFEE
  3793                           wreg	equ	0xFE8
  3794                           postdec1	equ	0xFE5
  3795                           fsr1l	equ	0xFE1
  3796                           status	equ	0xFD8
  3797                           
  3798 ;; *************** function _Rcmd3 *****************
  3799 ;; Defined at:
  3800 ;;		line 371 in file "ST7735_TFT.c"
  3801 ;; Parameters:    Size  Location     Type
  3802 ;;		None
  3803 ;; Auto vars:     Size  Location     Type
  3804 ;;		None
  3805 ;; Return value:  Size  Location     Type
  3806 ;;		None               void
  3807 ;; Registers used:
  3808 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3809 ;; Tracked objects:
  3810 ;;		On entry : 0/0
  3811 ;;		On exit  : 0/0
  3812 ;;		Unchanged: 0/0
  3813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3814 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3815 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3816 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3817 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3818 ;;Total ram usage:        0 bytes
  3819 ;; Hardware stack levels used:    1
  3820 ;; Hardware stack levels required when called:    4
  3821 ;; This function calls:
  3822 ;;		_delay_ms
  3823 ;;		_write_command
  3824 ;;		_write_data
  3825 ;; This function is called by:
  3826 ;;		_TFT_GreenTab_Initialize
  3827 ;;		_TFT_BlackTab_Initialize
  3828 ;; This function uses a non-reentrant model
  3829 ;;
  3830                           
  3831                           	psect	text11
  3832  0014A4                     __ptext11:
  3833                           	opt stack 0
  3834  0014A4                     _Rcmd3:
  3835                           	opt stack 24
  3836                           
  3837                           ;ST7735_TFT.c: 373: write_command(0xE0);
  3838                           
  3839                           ;incstack = 0
  3840  0014A4  0EE0               	movlw	224
  3841  0014A6  EC42  F013         	call	_write_command
  3842                           
  3843                           ;ST7735_TFT.c: 374: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
  3844  0014AA  0E02               	movlw	2
  3845  0014AC  EC3A  F013         	call	_write_data
  3846  0014B0  0E1C               	movlw	28
  3847  0014B2  EC3A  F013         	call	_write_data
  3848  0014B6  0E07               	movlw	7
  3849  0014B8  EC3A  F013         	call	_write_data
  3850  0014BC  0E12               	movlw	18
  3851  0014BE  EC3A  F013         	call	_write_data
  3852                           
  3853                           ;ST7735_TFT.c: 375: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
  3854  0014C2  0E37               	movlw	55
  3855  0014C4  EC3A  F013         	call	_write_data
  3856  0014C8  0E32               	movlw	50
  3857  0014CA  EC3A  F013         	call	_write_data
  3858  0014CE  0E29               	movlw	41
  3859  0014D0  EC3A  F013         	call	_write_data
  3860  0014D4  0E2D               	movlw	45
  3861  0014D6  EC3A  F013         	call	_write_data
  3862                           
  3863                           ;ST7735_TFT.c: 376: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
  3864  0014DA  0E29               	movlw	41
  3865  0014DC  EC3A  F013         	call	_write_data
  3866  0014E0  0E25               	movlw	37
  3867  0014E2  EC3A  F013         	call	_write_data
  3868  0014E6  0E2B               	movlw	43
  3869  0014E8  EC3A  F013         	call	_write_data
  3870  0014EC  0E39               	movlw	57
  3871  0014EE  EC3A  F013         	call	_write_data
  3872                           
  3873                           ;ST7735_TFT.c: 377: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
  3874  0014F2  0E00               	movlw	0
  3875  0014F4  EC3A  F013         	call	_write_data
  3876  0014F8  0E01               	movlw	1
  3877  0014FA  EC3A  F013         	call	_write_data
  3878  0014FE  0E03               	movlw	3
  3879  001500  EC3A  F013         	call	_write_data
  3880  001504  0E10               	movlw	16
  3881  001506  EC3A  F013         	call	_write_data
  3882                           
  3883                           ;ST7735_TFT.c: 378: write_command(0xE1);
  3884  00150A  0EE1               	movlw	225
  3885  00150C  EC42  F013         	call	_write_command
  3886                           
  3887                           ;ST7735_TFT.c: 379: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
  3888  001510  0E03               	movlw	3
  3889  001512  EC3A  F013         	call	_write_data
  3890  001516  0E1D               	movlw	29
  3891  001518  EC3A  F013         	call	_write_data
  3892  00151C  0E07               	movlw	7
  3893  00151E  EC3A  F013         	call	_write_data
  3894  001522  0E06               	movlw	6
  3895  001524  EC3A  F013         	call	_write_data
  3896                           
  3897                           ;ST7735_TFT.c: 380: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
  3898  001528  0E2E               	movlw	46
  3899  00152A  EC3A  F013         	call	_write_data
  3900  00152E  0E2C               	movlw	44
  3901  001530  EC3A  F013         	call	_write_data
  3902  001534  0E29               	movlw	41
  3903  001536  EC3A  F013         	call	_write_data
  3904  00153A  0E2D               	movlw	45
  3905  00153C  EC3A  F013         	call	_write_data
  3906                           
  3907                           ;ST7735_TFT.c: 381: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
  3908  001540  0E2E               	movlw	46
  3909  001542  EC3A  F013         	call	_write_data
  3910  001546  0E2E               	movlw	46
  3911  001548  EC3A  F013         	call	_write_data
  3912  00154C  0E37               	movlw	55
  3913  00154E  EC3A  F013         	call	_write_data
  3914  001552  0E3F               	movlw	63
  3915  001554  EC3A  F013         	call	_write_data
  3916                           
  3917                           ;ST7735_TFT.c: 382: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
  3918  001558  0E00               	movlw	0
  3919  00155A  EC3A  F013         	call	_write_data
  3920  00155E  0E00               	movlw	0
  3921  001560  EC3A  F013         	call	_write_data
  3922  001564  0E02               	movlw	2
  3923  001566  EC3A  F013         	call	_write_data
  3924  00156A  0E10               	movlw	16
  3925  00156C  EC3A  F013         	call	_write_data
  3926                           
  3927                           ;ST7735_TFT.c: 383: write_command(0x13);
  3928  001570  0E13               	movlw	19
  3929  001572  EC42  F013         	call	_write_command
  3930                           
  3931                           ;ST7735_TFT.c: 384: delay_ms(10);
  3932  001576  0E00               	movlw	0
  3933  001578  6E16               	movwf	delay_ms@ms+1,c
  3934  00157A  0E0A               	movlw	10
  3935  00157C  6E15               	movwf	delay_ms@ms,c
  3936  00157E  ECB4  F010         	call	_delay_ms	;wreg free
  3937                           
  3938                           ;ST7735_TFT.c: 385: write_command(0x29);
  3939  001582  0E29               	movlw	41
  3940  001584  EC42  F013         	call	_write_command
  3941                           
  3942                           ;ST7735_TFT.c: 386: delay_ms(100);
  3943  001588  0E00               	movlw	0
  3944  00158A  6E16               	movwf	delay_ms@ms+1,c
  3945  00158C  0E64               	movlw	100
  3946  00158E  6E15               	movwf	delay_ms@ms,c
  3947  001590  ECB4  F010         	call	_delay_ms	;wreg free
  3948  001594  0012               	return		;funcret
  3949  001596                     __end_of_Rcmd3:
  3950                           	opt stack 0
  3951                           tblptru	equ	0xFF8
  3952                           tblptrh	equ	0xFF7
  3953                           tblptrl	equ	0xFF6
  3954                           tablat	equ	0xFF5
  3955                           intcon	equ	0xFF2
  3956                           intcon2	equ	0xFF1
  3957                           intcon3	equ	0xFF0
  3958                           postinc0	equ	0xFEE
  3959                           wreg	equ	0xFE8
  3960                           postdec1	equ	0xFE5
  3961                           fsr1l	equ	0xFE1
  3962                           status	equ	0xFD8
  3963                           
  3964 ;; *************** function _Rcmd2red *****************
  3965 ;; Defined at:
  3966 ;;		line 361 in file "ST7735_TFT.c"
  3967 ;; Parameters:    Size  Location     Type
  3968 ;;		None
  3969 ;; Auto vars:     Size  Location     Type
  3970 ;;		None
  3971 ;; Return value:  Size  Location     Type
  3972 ;;		None               void
  3973 ;; Registers used:
  3974 ;;		wreg, status,2, cstack
  3975 ;; Tracked objects:
  3976 ;;		On entry : 0/0
  3977 ;;		On exit  : 0/0
  3978 ;;		Unchanged: 0/0
  3979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3980 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3981 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3982 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3983 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3984 ;;Total ram usage:        0 bytes
  3985 ;; Hardware stack levels used:    1
  3986 ;; Hardware stack levels required when called:    4
  3987 ;; This function calls:
  3988 ;;		_write_command
  3989 ;;		_write_data
  3990 ;; This function is called by:
  3991 ;;		_TFT_GreenTab_Initialize
  3992 ;; This function uses a non-reentrant model
  3993 ;;
  3994                           
  3995                           	psect	text12
  3996  0023C4                     __ptext12:
  3997                           	opt stack 0
  3998  0023C4                     _Rcmd2red:
  3999                           	opt stack 24
  4000                           
  4001                           ;ST7735_TFT.c: 363: write_command(0x2A);
  4002                           
  4003                           ;incstack = 0
  4004  0023C4  0E2A               	movlw	42
  4005  0023C6  EC42  F013         	call	_write_command
  4006                           
  4007                           ;ST7735_TFT.c: 364: write_data(0x00); write_data(0x00);
  4008  0023CA  0E00               	movlw	0
  4009  0023CC  EC3A  F013         	call	_write_data
  4010  0023D0  0E00               	movlw	0
  4011  0023D2  EC3A  F013         	call	_write_data
  4012                           
  4013                           ;ST7735_TFT.c: 365: write_data(0x00); write_data(0x7F);
  4014  0023D6  0E00               	movlw	0
  4015  0023D8  EC3A  F013         	call	_write_data
  4016  0023DC  0E7F               	movlw	127
  4017  0023DE  EC3A  F013         	call	_write_data
  4018                           
  4019                           ;ST7735_TFT.c: 366: write_command(0x2B);
  4020  0023E2  0E2B               	movlw	43
  4021  0023E4  EC42  F013         	call	_write_command
  4022                           
  4023                           ;ST7735_TFT.c: 367: write_data(0x00); write_data(0x00);
  4024  0023E8  0E00               	movlw	0
  4025  0023EA  EC3A  F013         	call	_write_data
  4026  0023EE  0E00               	movlw	0
  4027  0023F0  EC3A  F013         	call	_write_data
  4028                           
  4029                           ;ST7735_TFT.c: 368: write_data(0x00); write_data(0x9F);
  4030  0023F4  0E00               	movlw	0
  4031  0023F6  EC3A  F013         	call	_write_data
  4032  0023FA  0E9F               	movlw	159
  4033  0023FC  EC3A  F013         	call	_write_data
  4034  002400  0012               	return		;funcret
  4035  002402                     __end_of_Rcmd2red:
  4036                           	opt stack 0
  4037                           tblptru	equ	0xFF8
  4038                           tblptrh	equ	0xFF7
  4039                           tblptrl	equ	0xFF6
  4040                           tablat	equ	0xFF5
  4041                           intcon	equ	0xFF2
  4042                           intcon2	equ	0xFF1
  4043                           intcon3	equ	0xFF0
  4044                           postinc0	equ	0xFEE
  4045                           wreg	equ	0xFE8
  4046                           postdec1	equ	0xFE5
  4047                           fsr1l	equ	0xFE1
  4048                           status	equ	0xFD8
  4049                           
  4050 ;; *************** function _Rcmd1 *****************
  4051 ;; Defined at:
  4052 ;;		line 314 in file "ST7735_TFT.c"
  4053 ;; Parameters:    Size  Location     Type
  4054 ;;		None
  4055 ;; Auto vars:     Size  Location     Type
  4056 ;;		None
  4057 ;; Return value:  Size  Location     Type
  4058 ;;		None               void
  4059 ;; Registers used:
  4060 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4061 ;; Tracked objects:
  4062 ;;		On entry : 0/0
  4063 ;;		On exit  : 0/0
  4064 ;;		Unchanged: 0/0
  4065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4066 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4067 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4068 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4069 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4070 ;;Total ram usage:        0 bytes
  4071 ;; Hardware stack levels used:    1
  4072 ;; Hardware stack levels required when called:    4
  4073 ;; This function calls:
  4074 ;;		_delay_ms
  4075 ;;		_write_command
  4076 ;;		_write_data
  4077 ;; This function is called by:
  4078 ;;		_TFT_GreenTab_Initialize
  4079 ;;		_TFT_BlackTab_Initialize
  4080 ;; This function uses a non-reentrant model
  4081 ;;
  4082                           
  4083                           	psect	text13
  4084  00128A                     __ptext13:
  4085                           	opt stack 0
  4086  00128A                     _Rcmd1:
  4087                           	opt stack 24
  4088                           
  4089                           ;ST7735_TFT.c: 316: write_command(0x01);
  4090                           
  4091                           ;incstack = 0
  4092  00128A  0E01               	movlw	1
  4093  00128C  EC42  F013         	call	_write_command
  4094                           
  4095                           ;ST7735_TFT.c: 317: delay_ms(150);
  4096  001290  0E00               	movlw	0
  4097  001292  6E16               	movwf	delay_ms@ms+1,c
  4098  001294  0E96               	movlw	150
  4099  001296  6E15               	movwf	delay_ms@ms,c
  4100  001298  ECB4  F010         	call	_delay_ms	;wreg free
  4101                           
  4102                           ;ST7735_TFT.c: 318: write_command(0x11);
  4103  00129C  0E11               	movlw	17
  4104  00129E  EC42  F013         	call	_write_command
  4105                           
  4106                           ;ST7735_TFT.c: 319: delay_ms(500);
  4107  0012A2  0E01               	movlw	1
  4108  0012A4  6E16               	movwf	delay_ms@ms+1,c
  4109  0012A6  0EF4               	movlw	244
  4110  0012A8  6E15               	movwf	delay_ms@ms,c
  4111  0012AA  ECB4  F010         	call	_delay_ms	;wreg free
  4112                           
  4113                           ;ST7735_TFT.c: 320: write_command(0xB1);
  4114  0012AE  0EB1               	movlw	177
  4115  0012B0  EC42  F013         	call	_write_command
  4116                           
  4117                           ;ST7735_TFT.c: 321: write_data(0x01);
  4118  0012B4  0E01               	movlw	1
  4119  0012B6  EC3A  F013         	call	_write_data
  4120                           
  4121                           ;ST7735_TFT.c: 322: write_data(0x2C);
  4122  0012BA  0E2C               	movlw	44
  4123  0012BC  EC3A  F013         	call	_write_data
  4124                           
  4125                           ;ST7735_TFT.c: 323: write_data(0x2D);
  4126  0012C0  0E2D               	movlw	45
  4127  0012C2  EC3A  F013         	call	_write_data
  4128                           
  4129                           ;ST7735_TFT.c: 324: write_command(0xB2);
  4130  0012C6  0EB2               	movlw	178
  4131  0012C8  EC42  F013         	call	_write_command
  4132                           
  4133                           ;ST7735_TFT.c: 325: write_data(0x01);
  4134  0012CC  0E01               	movlw	1
  4135  0012CE  EC3A  F013         	call	_write_data
  4136                           
  4137                           ;ST7735_TFT.c: 326: write_data(0x2C);
  4138  0012D2  0E2C               	movlw	44
  4139  0012D4  EC3A  F013         	call	_write_data
  4140                           
  4141                           ;ST7735_TFT.c: 327: write_data(0x2D);
  4142  0012D8  0E2D               	movlw	45
  4143  0012DA  EC3A  F013         	call	_write_data
  4144                           
  4145                           ;ST7735_TFT.c: 328: write_command(0xB3);
  4146  0012DE  0EB3               	movlw	179
  4147  0012E0  EC42  F013         	call	_write_command
  4148                           
  4149                           ;ST7735_TFT.c: 329: write_data(0x01);
  4150  0012E4  0E01               	movlw	1
  4151  0012E6  EC3A  F013         	call	_write_data
  4152                           
  4153                           ;ST7735_TFT.c: 330: write_data(0x2C);
  4154  0012EA  0E2C               	movlw	44
  4155  0012EC  EC3A  F013         	call	_write_data
  4156                           
  4157                           ;ST7735_TFT.c: 331: write_data(0x2D);
  4158  0012F0  0E2D               	movlw	45
  4159  0012F2  EC3A  F013         	call	_write_data
  4160                           
  4161                           ;ST7735_TFT.c: 332: write_data(0x01);
  4162  0012F6  0E01               	movlw	1
  4163  0012F8  EC3A  F013         	call	_write_data
  4164                           
  4165                           ;ST7735_TFT.c: 333: write_data(0x2C);
  4166  0012FC  0E2C               	movlw	44
  4167  0012FE  EC3A  F013         	call	_write_data
  4168                           
  4169                           ;ST7735_TFT.c: 334: write_data(0x2D);
  4170  001302  0E2D               	movlw	45
  4171  001304  EC3A  F013         	call	_write_data
  4172                           
  4173                           ;ST7735_TFT.c: 335: write_command(0xB4);
  4174  001308  0EB4               	movlw	180
  4175  00130A  EC42  F013         	call	_write_command
  4176                           
  4177                           ;ST7735_TFT.c: 336: write_data(0x07);
  4178  00130E  0E07               	movlw	7
  4179  001310  EC3A  F013         	call	_write_data
  4180                           
  4181                           ;ST7735_TFT.c: 337: write_command(0xC0);
  4182  001314  0EC0               	movlw	192
  4183  001316  EC42  F013         	call	_write_command
  4184                           
  4185                           ;ST7735_TFT.c: 338: write_data(0xA2);
  4186  00131A  0EA2               	movlw	162
  4187  00131C  EC3A  F013         	call	_write_data
  4188                           
  4189                           ;ST7735_TFT.c: 339: write_data(0x02);
  4190  001320  0E02               	movlw	2
  4191  001322  EC3A  F013         	call	_write_data
  4192                           
  4193                           ;ST7735_TFT.c: 340: write_data(0x84);
  4194  001326  0E84               	movlw	132
  4195  001328  EC3A  F013         	call	_write_data
  4196                           
  4197                           ;ST7735_TFT.c: 341: write_command(0xC1);
  4198  00132C  0EC1               	movlw	193
  4199  00132E  EC42  F013         	call	_write_command
  4200                           
  4201                           ;ST7735_TFT.c: 342: write_data(0xC5);
  4202  001332  0EC5               	movlw	197
  4203  001334  EC3A  F013         	call	_write_data
  4204                           
  4205                           ;ST7735_TFT.c: 343: write_command(0xC2);
  4206  001338  0EC2               	movlw	194
  4207  00133A  EC42  F013         	call	_write_command
  4208                           
  4209                           ;ST7735_TFT.c: 344: write_data(0x0A);
  4210  00133E  0E0A               	movlw	10
  4211  001340  EC3A  F013         	call	_write_data
  4212                           
  4213                           ;ST7735_TFT.c: 345: write_data(0x00);
  4214  001344  0E00               	movlw	0
  4215  001346  EC3A  F013         	call	_write_data
  4216                           
  4217                           ;ST7735_TFT.c: 346: write_command(0xC3);
  4218  00134A  0EC3               	movlw	195
  4219  00134C  EC42  F013         	call	_write_command
  4220                           
  4221                           ;ST7735_TFT.c: 347: write_data(0x8A);
  4222  001350  0E8A               	movlw	138
  4223  001352  EC3A  F013         	call	_write_data
  4224                           
  4225                           ;ST7735_TFT.c: 348: write_data(0x2A);
  4226  001356  0E2A               	movlw	42
  4227  001358  EC3A  F013         	call	_write_data
  4228                           
  4229                           ;ST7735_TFT.c: 349: write_command(0xC4);
  4230  00135C  0EC4               	movlw	196
  4231  00135E  EC42  F013         	call	_write_command
  4232                           
  4233                           ;ST7735_TFT.c: 350: write_data(0x8A);
  4234  001362  0E8A               	movlw	138
  4235  001364  EC3A  F013         	call	_write_data
  4236                           
  4237                           ;ST7735_TFT.c: 351: write_data(0xEE);
  4238  001368  0EEE               	movlw	238
  4239  00136A  EC3A  F013         	call	_write_data
  4240                           
  4241                           ;ST7735_TFT.c: 352: write_command(0xC5);
  4242  00136E  0EC5               	movlw	197
  4243  001370  EC42  F013         	call	_write_command
  4244                           
  4245                           ;ST7735_TFT.c: 353: write_data(0x0E);
  4246  001374  0E0E               	movlw	14
  4247  001376  EC3A  F013         	call	_write_data
  4248                           
  4249                           ;ST7735_TFT.c: 354: write_command(0x20);
  4250  00137A  0E20               	movlw	32
  4251  00137C  EC42  F013         	call	_write_command
  4252                           
  4253                           ;ST7735_TFT.c: 355: write_command(0x36);
  4254  001380  0E36               	movlw	54
  4255  001382  EC42  F013         	call	_write_command
  4256                           
  4257                           ;ST7735_TFT.c: 356: write_data(0xC8);
  4258  001386  0EC8               	movlw	200
  4259  001388  EC3A  F013         	call	_write_data
  4260                           
  4261                           ;ST7735_TFT.c: 357: write_command(0x3A);
  4262  00138C  0E3A               	movlw	58
  4263  00138E  EC42  F013         	call	_write_command
  4264                           
  4265                           ;ST7735_TFT.c: 358: write_data(0x05);
  4266  001392  0E05               	movlw	5
  4267  001394  EC3A  F013         	call	_write_data
  4268  001398  0012               	return		;funcret
  4269  00139A                     __end_of_Rcmd1:
  4270                           	opt stack 0
  4271                           tblptru	equ	0xFF8
  4272                           tblptrh	equ	0xFF7
  4273                           tblptrl	equ	0xFF6
  4274                           tablat	equ	0xFF5
  4275                           intcon	equ	0xFF2
  4276                           intcon2	equ	0xFF1
  4277                           intcon3	equ	0xFF0
  4278                           postinc0	equ	0xFEE
  4279                           wreg	equ	0xFE8
  4280                           postdec1	equ	0xFE5
  4281                           fsr1l	equ	0xFE1
  4282                           status	equ	0xFD8
  4283                           
  4284 ;; *************** function _LCD_Reset *****************
  4285 ;; Defined at:
  4286 ;;		line 250 in file "ST7735_TFT.c"
  4287 ;; Parameters:    Size  Location     Type
  4288 ;;		None
  4289 ;; Auto vars:     Size  Location     Type
  4290 ;;		None
  4291 ;; Return value:  Size  Location     Type
  4292 ;;		None               void
  4293 ;; Registers used:
  4294 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4295 ;; Tracked objects:
  4296 ;;		On entry : 0/0
  4297 ;;		On exit  : 0/0
  4298 ;;		Unchanged: 0/0
  4299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4300 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4301 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4302 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4303 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4304 ;;Total ram usage:        0 bytes
  4305 ;; Hardware stack levels used:    1
  4306 ;; Hardware stack levels required when called:    4
  4307 ;; This function calls:
  4308 ;;		_delay_ms
  4309 ;; This function is called by:
  4310 ;;		_Initialize_Screen
  4311 ;; This function uses a non-reentrant model
  4312 ;;
  4313                           
  4314                           	psect	text14
  4315  00262C                     __ptext14:
  4316                           	opt stack 0
  4317  00262C                     _LCD_Reset:
  4318                           	opt stack 25
  4319                           
  4320                           ;ST7735_TFT.c: 252: PORTDbits.RD2 = 0;
  4321                           
  4322                           ;incstack = 0
  4323  00262C  9483               	bcf	3971,2,c	;volatile
  4324                           
  4325                           ;ST7735_TFT.c: 253: delay_ms(100);
  4326  00262E  0E00               	movlw	0
  4327  002630  6E16               	movwf	delay_ms@ms+1,c
  4328  002632  0E64               	movlw	100
  4329  002634  6E15               	movwf	delay_ms@ms,c
  4330  002636  ECB4  F010         	call	_delay_ms	;wreg free
  4331                           
  4332                           ;ST7735_TFT.c: 254: PORTDbits.RD2 = 1;
  4333  00263A  8483               	bsf	3971,2,c	;volatile
  4334  00263C  0012               	return		;funcret
  4335  00263E                     __end_of_LCD_Reset:
  4336                           	opt stack 0
  4337                           tblptru	equ	0xFF8
  4338                           tblptrh	equ	0xFF7
  4339                           tblptrl	equ	0xFF6
  4340                           tablat	equ	0xFF5
  4341                           intcon	equ	0xFF2
  4342                           intcon2	equ	0xFF1
  4343                           intcon3	equ	0xFF0
  4344                           postinc0	equ	0xFEE
  4345                           wreg	equ	0xFE8
  4346                           postdec1	equ	0xFE5
  4347                           fsr1l	equ	0xFE1
  4348                           status	equ	0xFD8
  4349                           
  4350 ;; *************** function _delay_ms *****************
  4351 ;; Defined at:
  4352 ;;		line 97 in file "ST7735_TFT.c"
  4353 ;; Parameters:    Size  Location     Type
  4354 ;;  ms              2   20[COMRAM] int 
  4355 ;; Auto vars:     Size  Location     Type
  4356 ;;  count           2   24[COMRAM] int 
  4357 ;; Return value:  Size  Location     Type
  4358 ;;		None               void
  4359 ;; Registers used:
  4360 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4361 ;; Tracked objects:
  4362 ;;		On entry : 0/0
  4363 ;;		On exit  : 0/0
  4364 ;;		Unchanged: 0/0
  4365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4366 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4367 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4368 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4369 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4370 ;;Total ram usage:        6 bytes
  4371 ;; Hardware stack levels used:    1
  4372 ;; Hardware stack levels required when called:    3
  4373 ;; This function calls:
  4374 ;;		___wmul
  4375 ;; This function is called by:
  4376 ;;		_LCD_Reset
  4377 ;;		_Rcmd1
  4378 ;;		_Rcmd3
  4379 ;;		_Bcmd
  4380 ;; This function uses a non-reentrant model
  4381 ;;
  4382                           
  4383                           	psect	text15
  4384  002168                     __ptext15:
  4385                           	opt stack 0
  4386  002168                     _delay_ms:
  4387                           	opt stack 24
  4388                           
  4389                           ;ST7735_TFT.c: 103: int count;
  4390                           ;ST7735_TFT.c: 104: count = 8000000/4000/8 * ms;
  4391                           
  4392                           ;incstack = 0
  4393  002168  C015  F00F         	movff	delay_ms@ms,___wmul@multiplier
  4394  00216C  C016  F010         	movff	delay_ms@ms+1,___wmul@multiplier+1
  4395  002170  0E00               	movlw	0
  4396  002172  6E12               	movwf	___wmul@multiplicand+1,c
  4397  002174  0EFA               	movlw	250
  4398  002176  6E11               	movwf	___wmul@multiplicand,c
  4399  002178  ECB4  F012         	call	___wmul	;wreg free
  4400  00217C  C00F  F019         	movff	?___wmul,delay_ms@count
  4401  002180  C010  F01A         	movff	?___wmul+1,delay_ms@count+1
  4402                           
  4403                           ;ST7735_TFT.c: 105: count = (0xffff - count);
  4404  002184  C019  F017         	movff	delay_ms@count,??_delay_ms
  4405  002188  C01A  F018         	movff	delay_ms@count+1,??_delay_ms+1
  4406  00218C  1E17               	comf	??_delay_ms,f,c
  4407  00218E  1E18               	comf	??_delay_ms+1,f,c
  4408  002190  4A17               	infsnz	??_delay_ms,f,c
  4409  002192  2A18               	incf	??_delay_ms+1,f,c
  4410  002194  0EFF               	movlw	255
  4411  002196  2417               	addwf	??_delay_ms,w,c
  4412  002198  6E19               	movwf	delay_ms@count,c
  4413  00219A  0EFF               	movlw	255
  4414  00219C  2018               	addwfc	??_delay_ms+1,w,c
  4415  00219E  6E1A               	movwf	delay_ms@count+1,c
  4416                           
  4417                           ;ST7735_TFT.c: 107: T3CON = 0xb8;
  4418  0021A0  0EB8               	movlw	184
  4419  0021A2  6EB1               	movwf	4017,c	;volatile
  4420                           
  4421                           ;ST7735_TFT.c: 109: TMR0L = count & 0x00ff;
  4422  0021A4  C019  FFD6         	movff	delay_ms@count,4054	;volatile
  4423                           
  4424                           ;ST7735_TFT.c: 110: TMR0H = count >> 8;
  4425  0021A8  501A               	movf	delay_ms@count+1,w,c
  4426  0021AA  6ED7               	movwf	4055,c	;volatile
  4427                           
  4428                           ;ST7735_TFT.c: 112: PIR2bits.TMR3IF = 0;
  4429  0021AC  92A1               	bcf	4001,1,c	;volatile
  4430                           
  4431                           ;ST7735_TFT.c: 113: T3CONbits.TMR3ON = 1;
  4432  0021AE  80B1               	bsf	4017,0,c	;volatile
  4433                           
  4434                           ;ST7735_TFT.c: 115: while (PIR2bits.TMR3IF == 0);
  4435  0021B0  D000               	goto	l127
  4436  0021B2                     l127:
  4437  0021B2  A2A1               	btfss	4001,1,c	;volatile
  4438  0021B4  D7FE               	goto	l127
  4439                           
  4440                           ;ST7735_TFT.c: 116: T3CONbits.TMR3ON = 0;
  4441  0021B6  90B1               	bcf	4017,0,c	;volatile
  4442  0021B8  0012               	return		;funcret
  4443  0021BA                     __end_of_delay_ms:
  4444                           	opt stack 0
  4445                           tblptru	equ	0xFF8
  4446                           tblptrh	equ	0xFF7
  4447                           tblptrl	equ	0xFF6
  4448                           tablat	equ	0xFF5
  4449                           intcon	equ	0xFF2
  4450                           intcon2	equ	0xFF1
  4451                           intcon3	equ	0xFF0
  4452                           postinc0	equ	0xFEE
  4453                           wreg	equ	0xFE8
  4454                           postdec1	equ	0xFE5
  4455                           fsr1l	equ	0xFE1
  4456                           status	equ	0xFD8
  4457                           
  4458 ;; *************** function _Init_ADC *****************
  4459 ;; Defined at:
  4460 ;;		line 374 in file "Lab8pC.c"
  4461 ;; Parameters:    Size  Location     Type
  4462 ;;		None
  4463 ;; Auto vars:     Size  Location     Type
  4464 ;;		None
  4465 ;; Return value:  Size  Location     Type
  4466 ;;		None               void
  4467 ;; Registers used:
  4468 ;;		wreg, status,2
  4469 ;; Tracked objects:
  4470 ;;		On entry : 0/0
  4471 ;;		On exit  : 0/0
  4472 ;;		Unchanged: 0/0
  4473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4474 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4475 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4476 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4477 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4478 ;;Total ram usage:        0 bytes
  4479 ;; Hardware stack levels used:    1
  4480 ;; Hardware stack levels required when called:    2
  4481 ;; This function calls:
  4482 ;;		Nothing
  4483 ;; This function is called by:
  4484 ;;		_main
  4485 ;; This function uses a non-reentrant model
  4486 ;;
  4487                           
  4488                           	psect	text16
  4489  002694                     __ptext16:
  4490                           	opt stack 0
  4491  002694                     _Init_ADC:
  4492                           	opt stack 28
  4493                           
  4494                           ;Lab8pC.c: 376: ADCON0 = 0x01;
  4495                           
  4496                           ;incstack = 0
  4497  002694  0E01               	movlw	1
  4498  002696  6EC2               	movwf	4034,c	;volatile
  4499                           
  4500                           ;Lab8pC.c: 377: ADCON1= 0x0E;
  4501  002698  0E0E               	movlw	14
  4502  00269A  6EC1               	movwf	4033,c	;volatile
  4503                           
  4504                           ;Lab8pC.c: 378: ADCON2= 0xA9;
  4505  00269C  0EA9               	movlw	169
  4506  00269E  6EC0               	movwf	4032,c	;volatile
  4507  0026A0  0012               	return		;funcret
  4508  0026A2                     __end_of_Init_ADC:
  4509                           	opt stack 0
  4510                           tblptru	equ	0xFF8
  4511                           tblptrh	equ	0xFF7
  4512                           tblptrl	equ	0xFF6
  4513                           tablat	equ	0xFF5
  4514                           intcon	equ	0xFF2
  4515                           intcon2	equ	0xFF1
  4516                           intcon3	equ	0xFF0
  4517                           postinc0	equ	0xFEE
  4518                           wreg	equ	0xFE8
  4519                           postdec1	equ	0xFE5
  4520                           fsr1l	equ	0xFE1
  4521                           status	equ	0xFD8
  4522                           
  4523 ;; *************** function _Day_Mode *****************
  4524 ;; Defined at:
  4525 ;;		line 474 in file "Lab8pC.c"
  4526 ;; Parameters:    Size  Location     Type
  4527 ;;		None
  4528 ;; Auto vars:     Size  Location     Type
  4529 ;;		None
  4530 ;; Return value:  Size  Location     Type
  4531 ;;		None               void
  4532 ;; Registers used:
  4533 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4534 ;; Tracked objects:
  4535 ;;		On entry : 0/0
  4536 ;;		On exit  : 0/0
  4537 ;;		Unchanged: 0/0
  4538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4539 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4540 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4541 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4542 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4543 ;;Total ram usage:        0 bytes
  4544 ;; Hardware stack levels used:    1
  4545 ;; Hardware stack levels required when called:   12
  4546 ;; This function calls:
  4547 ;;		_Do_Flashing
  4548 ;;		_PED_Control
  4549 ;;		_Set_EW
  4550 ;;		_Set_EW_LT
  4551 ;;		_Set_NS
  4552 ;;		_Set_NS_LT
  4553 ;;		_Wait_N_Seconds
  4554 ;; This function is called by:
  4555 ;;		_main
  4556 ;; This function uses a non-reentrant model
  4557 ;;
  4558                           
  4559                           	psect	text17
  4560  001754                     __ptext17:
  4561                           	opt stack 0
  4562  001754                     _Day_Mode:
  4563                           	opt stack 18
  4564                           
  4565                           ;Lab8pC.c: 476: MODE = 1;
  4566                           
  4567                           ;incstack = 0
  4568  001754  0E00               	movlw	0
  4569  001756  6E46               	movwf	_MODE+1,c
  4570  001758  0E01               	movlw	1
  4571  00175A  6E45               	movwf	_MODE,c
  4572                           
  4573                           ;Lab8pC.c: 477: PORTEbits.RE1 = 1;
  4574  00175C  8284               	bsf	3972,1,c	;volatile
  4575                           
  4576                           ;Lab8pC.c: 478: FLASHING_REQUEST=0;
  4577  00175E  0E00               	movlw	0
  4578  001760  6E4C               	movwf	_FLASHING_REQUEST,c
  4579                           
  4580                           ;Lab8pC.c: 479: Act_Mode_Txt[0] = 'D';
  4581  001762  0E44               	movlw	68
  4582  001764  6E62               	movwf	_Act_Mode_Txt,c
  4583  001766  D000               	goto	l5275
  4584  001768                     l5275:
  4585                           
  4586                           ;Lab8pC.c: 482: {
  4587                           ;Lab8pC.c: 484: Set_EW(1);
  4588  001768  0E01               	movlw	1
  4589  00176A  ECBE  F011         	call	_Set_EW
  4590                           
  4591                           ;Lab8pC.c: 485: Set_EW_LT(1);
  4592  00176E  0E01               	movlw	1
  4593  001770  EC9A  F011         	call	_Set_EW_LT
  4594                           
  4595                           ;Lab8pC.c: 486: Set_NS_LT(1);
  4596  001774  0E01               	movlw	1
  4597  001776  EC52  F011         	call	_Set_NS_LT
  4598                           
  4599                           ;Lab8pC.c: 487: Set_NS(2);
  4600  00177A  0E02               	movlw	2
  4601  00177C  EC76  F011         	call	_Set_NS
  4602                           
  4603                           ;Lab8pC.c: 488: if(NS_PED_SW==1)
  4604  001780  044D               	decf	_NS_PED_SW,w,c
  4605  001782  A4D8               	btfss	status,2,c
  4606  001784  D006               	goto	l486
  4607                           
  4608                           ;Lab8pC.c: 489: {
  4609                           ;Lab8pC.c: 490: PED_Control(2,7);
  4610  001786  0E07               	movlw	7
  4611  001788  0100               	movlb	0	; () banked
  4612  00178A  6FAF               	movwf	PED_Control@Num_Sec& (0+255),b
  4613  00178C  0E02               	movlw	2
  4614  00178E  EC88  F010         	call	_PED_Control
  4615  001792                     l486:
  4616                           
  4617                           ;Lab8pC.c: 491: }
  4618                           ;Lab8pC.c: 492: Wait_N_Seconds(9);
  4619  001792  0E09               	movlw	9
  4620  001794  EC3E  F012         	call	_Wait_N_Seconds
  4621                           
  4622                           ;Lab8pC.c: 493: Set_NS(3);
  4623  001798  0E03               	movlw	3
  4624  00179A  EC76  F011         	call	_Set_NS
  4625                           
  4626                           ;Lab8pC.c: 494: Wait_N_Seconds(3);
  4627  00179E  0E03               	movlw	3
  4628  0017A0  EC3E  F012         	call	_Wait_N_Seconds
  4629                           
  4630                           ;Lab8pC.c: 495: Set_NS(1);
  4631  0017A4  0E01               	movlw	1
  4632  0017A6  EC76  F011         	call	_Set_NS
  4633                           
  4634                           ;Lab8pC.c: 496: if(PORTAbits.RA4==1)
  4635  0017AA  A880               	btfss	3968,4,c	;volatile
  4636  0017AC  D010               	goto	l5301
  4637                           
  4638                           ;Lab8pC.c: 497: {
  4639                           ;Lab8pC.c: 498: Set_EW_LT(2);
  4640  0017AE  0E02               	movlw	2
  4641  0017B0  EC9A  F011         	call	_Set_EW_LT
  4642                           
  4643                           ;Lab8pC.c: 499: Wait_N_Seconds(7);
  4644  0017B4  0E07               	movlw	7
  4645  0017B6  EC3E  F012         	call	_Wait_N_Seconds
  4646                           
  4647                           ;Lab8pC.c: 500: Set_EW_LT(3);
  4648  0017BA  0E03               	movlw	3
  4649  0017BC  EC9A  F011         	call	_Set_EW_LT
  4650                           
  4651                           ;Lab8pC.c: 501: Wait_N_Seconds(3);
  4652  0017C0  0E03               	movlw	3
  4653  0017C2  EC3E  F012         	call	_Wait_N_Seconds
  4654                           
  4655                           ;Lab8pC.c: 502: Set_EW_LT(1);
  4656  0017C6  0E01               	movlw	1
  4657  0017C8  EC9A  F011         	call	_Set_EW_LT
  4658  0017CC  D000               	goto	l5301
  4659  0017CE                     l5301:
  4660                           
  4661                           ;Lab8pC.c: 503: }
  4662                           ;Lab8pC.c: 504: Set_EW(2);
  4663  0017CE  0E02               	movlw	2
  4664  0017D0  ECBE  F011         	call	_Set_EW
  4665                           
  4666                           ;Lab8pC.c: 505: if (EW_PED_SW==1)
  4667  0017D4  044A               	decf	_EW_PED_SW,w,c
  4668  0017D6  A4D8               	btfss	status,2,c
  4669  0017D8  D006               	goto	l488
  4670                           
  4671                           ;Lab8pC.c: 506: {
  4672                           ;Lab8pC.c: 507: PED_Control(0,9);
  4673  0017DA  0E09               	movlw	9
  4674  0017DC  0100               	movlb	0	; () banked
  4675  0017DE  6FAF               	movwf	PED_Control@Num_Sec& (0+255),b
  4676  0017E0  0E00               	movlw	0
  4677  0017E2  EC88  F010         	call	_PED_Control
  4678  0017E6                     l488:
  4679                           
  4680                           ;Lab8pC.c: 508: }
  4681                           ;Lab8pC.c: 509: Wait_N_Seconds(8);
  4682  0017E6  0E08               	movlw	8
  4683  0017E8  EC3E  F012         	call	_Wait_N_Seconds
  4684                           
  4685                           ;Lab8pC.c: 510: Set_EW(3);
  4686  0017EC  0E03               	movlw	3
  4687  0017EE  ECBE  F011         	call	_Set_EW
  4688                           
  4689                           ;Lab8pC.c: 511: Wait_N_Seconds(3);
  4690  0017F2  0E03               	movlw	3
  4691  0017F4  EC3E  F012         	call	_Wait_N_Seconds
  4692                           
  4693                           ;Lab8pC.c: 512: Set_EW(1);
  4694  0017F8  0E01               	movlw	1
  4695  0017FA  ECBE  F011         	call	_Set_EW
  4696                           
  4697                           ;Lab8pC.c: 513: if(PORTAbits.RA5==1)
  4698  0017FE  AA80               	btfss	3968,5,c	;volatile
  4699  001800  D011               	goto	l5321
  4700                           
  4701                           ;Lab8pC.c: 514: {
  4702                           ;Lab8pC.c: 515: Set_NS_LT(2);
  4703  001802  0E02               	movlw	2
  4704  001804  EC52  F011         	call	_Set_NS_LT
  4705                           
  4706                           ;Lab8pC.c: 516: Wait_N_Seconds(7);
  4707  001808  0E07               	movlw	7
  4708  00180A  EC3E  F012         	call	_Wait_N_Seconds
  4709                           
  4710                           ;Lab8pC.c: 517: Set_NS_LT(3);
  4711  00180E  0E03               	movlw	3
  4712  001810  EC52  F011         	call	_Set_NS_LT
  4713                           
  4714                           ;Lab8pC.c: 518: Wait_N_Seconds(3);
  4715  001814  0E03               	movlw	3
  4716  001816  EC3E  F012         	call	_Wait_N_Seconds
  4717                           
  4718                           ;Lab8pC.c: 519: Set_NS_LT(1);
  4719  00181A  0E01               	movlw	1
  4720  00181C  EC52  F011         	call	_Set_NS_LT
  4721                           
  4722                           ;Lab8pC.c: 520: }
  4723                           ;Lab8pC.c: 521: break;
  4724  001820  D001               	goto	l5321
  4725  001822  D7A2               	goto	l5275
  4726  001824                     l5321:
  4727                           
  4728                           ;Lab8pC.c: 522: }
  4729                           ;Lab8pC.c: 523: Do_Flashing();
  4730  001824  ECEF  F00F         	call	_Do_Flashing	;wreg free
  4731  001828  0012               	return		;funcret
  4732  00182A                     __end_of_Day_Mode:
  4733                           	opt stack 0
  4734                           tblptru	equ	0xFF8
  4735                           tblptrh	equ	0xFF7
  4736                           tblptrl	equ	0xFF6
  4737                           tablat	equ	0xFF5
  4738                           intcon	equ	0xFF2
  4739                           intcon2	equ	0xFF1
  4740                           intcon3	equ	0xFF0
  4741                           postinc0	equ	0xFEE
  4742                           wreg	equ	0xFE8
  4743                           postdec1	equ	0xFE5
  4744                           fsr1l	equ	0xFE1
  4745                           status	equ	0xFD8
  4746                           
  4747 ;; *************** function _Wait_N_Seconds *****************
  4748 ;; Defined at:
  4749 ;;		line 618 in file "Lab8pC.c"
  4750 ;; Parameters:    Size  Location     Type
  4751 ;;  seconds         1    wreg     unsigned char 
  4752 ;; Auto vars:     Size  Location     Type
  4753 ;;  seconds         1    9[BANK0 ] unsigned char 
  4754 ;;  I               1   10[BANK0 ] unsigned char 
  4755 ;; Return value:  Size  Location     Type
  4756 ;;		None               void
  4757 ;; Registers used:
  4758 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4759 ;; Tracked objects:
  4760 ;;		On entry : 0/0
  4761 ;;		On exit  : 0/0
  4762 ;;		Unchanged: 0/0
  4763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4764 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4765 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4766 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4767 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4768 ;;Total ram usage:        2 bytes
  4769 ;; Hardware stack levels used:    1
  4770 ;; Hardware stack levels required when called:   11
  4771 ;; This function calls:
  4772 ;;		_Wait_One_Second
  4773 ;;		_update_LCD_count
  4774 ;; This function is called by:
  4775 ;;		_Day_Mode
  4776 ;;		_Night_Mode
  4777 ;; This function uses a non-reentrant model
  4778 ;;
  4779                           
  4780                           	psect	text18
  4781  00247C                     __ptext18:
  4782                           	opt stack 0
  4783  00247C                     _Wait_N_Seconds:
  4784                           	opt stack 18
  4785                           
  4786                           ;incstack = 0
  4787                           ;Wait_N_Seconds@seconds stored from wreg
  4788  00247C  0100               	movlb	0	; () banked
  4789  00247E  6FB0               	movwf	Wait_N_Seconds@seconds& (0+255),b
  4790                           
  4791                           ; BSR set to: 0
  4792                           ;Lab8pC.c: 620: char I;
  4793                           ;Lab8pC.c: 621: for (I = seconds; I> 0; I--)
  4794  002480  C0B0  F0B1         	movff	Wait_N_Seconds@seconds,Wait_N_Seconds@I
  4795  002484                     l5115:
  4796                           
  4797                           ; BSR set to: 0
  4798  002484  0100               	movlb	0	; () banked
  4799  002486  51B1               	movf	Wait_N_Seconds@I& (0+255),w,b
  4800  002488  0100               	movlb	0	; () banked
  4801  00248A  B4D8               	btfsc	status,2,c
  4802  00248C  D00C               	goto	l5125
  4803  00248E  D001               	goto	l5119
  4804                           
  4805                           ; BSR set to: 0
  4806  002490  D00A               	goto	l5125
  4807  002492                     l5119:
  4808                           
  4809                           ; BSR set to: 0
  4810                           ;Lab8pC.c: 622: {
  4811                           ;Lab8pC.c: 624: update_LCD_count(direction, I);
  4812  002492  C0B1  F041         	movff	Wait_N_Seconds@I,update_LCD_count@count
  4813  002496  5059               	movf	_direction,w,c
  4814  002498  EC39  F007         	call	_update_LCD_count
  4815                           
  4816                           ;Lab8pC.c: 625: Wait_One_Second();
  4817  00249C  EC76  F00F         	call	_Wait_One_Second	;wreg free
  4818  0024A0  0100               	movlb	0	; () banked
  4819  0024A2  07B1               	decf	Wait_N_Seconds@I& (0+255),f,b
  4820  0024A4  D7EF               	goto	l5115
  4821  0024A6                     l5125:
  4822                           
  4823                           ; BSR set to: 0
  4824                           ;Lab8pC.c: 626: }
  4825                           ;Lab8pC.c: 627: update_LCD_count(direction, 0);
  4826  0024A6  0E00               	movlw	0
  4827  0024A8  6E41               	movwf	update_LCD_count@count,c
  4828  0024AA  5059               	movf	_direction,w,c
  4829  0024AC  EC39  F007         	call	_update_LCD_count
  4830  0024B0  0012               	return		;funcret
  4831  0024B2                     __end_of_Wait_N_Seconds:
  4832                           	opt stack 0
  4833                           tblptru	equ	0xFF8
  4834                           tblptrh	equ	0xFF7
  4835                           tblptrl	equ	0xFF6
  4836                           tablat	equ	0xFF5
  4837                           intcon	equ	0xFF2
  4838                           intcon2	equ	0xFF1
  4839                           intcon3	equ	0xFF0
  4840                           postinc0	equ	0xFEE
  4841                           wreg	equ	0xFE8
  4842                           postdec1	equ	0xFE5
  4843                           fsr1l	equ	0xFE1
  4844                           status	equ	0xFD8
  4845                           
  4846 ;; *************** function _update_LCD_count *****************
  4847 ;; Defined at:
  4848 ;;		line 673 in file "Lab8pC.c"
  4849 ;; Parameters:    Size  Location     Type
  4850 ;;  direction       1    wreg     unsigned char 
  4851 ;;  count           1   64[COMRAM] unsigned char 
  4852 ;; Auto vars:     Size  Location     Type
  4853 ;;  direction       1    7[BANK0 ] unsigned char 
  4854 ;; Return value:  Size  Location     Type
  4855 ;;		None               void
  4856 ;; Registers used:
  4857 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4858 ;; Tracked objects:
  4859 ;;		On entry : 0/0
  4860 ;;		On exit  : 0/0
  4861 ;;		Unchanged: 0/0
  4862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4863 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4864 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4865 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4866 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4867 ;;Total ram usage:        2 bytes
  4868 ;; Hardware stack levels used:    1
  4869 ;; Hardware stack levels required when called:    9
  4870 ;; This function calls:
  4871 ;;		___awdiv
  4872 ;;		___awmod
  4873 ;;		_drawtext
  4874 ;; This function is called by:
  4875 ;;		_Wait_N_Seconds
  4876 ;; This function uses a non-reentrant model
  4877 ;;
  4878                           
  4879                           	psect	text19
  4880  000E72                     __ptext19:
  4881                           	opt stack 0
  4882  000E72                     _update_LCD_count:
  4883                           	opt stack 19
  4884                           
  4885                           ;incstack = 0
  4886                           ;update_LCD_count@direction stored from wreg
  4887  000E72  0100               	movlb	0	; () banked
  4888  000E74  6FAE               	movwf	update_LCD_count@direction& (0+255),b
  4889                           
  4890                           ; BSR set to: 0
  4891                           ;Lab8pC.c: 675: switch (direction)
  4892  000E76  D0B2               	goto	l4983
  4893  000E78                     l4965:
  4894                           
  4895                           ; BSR set to: 0
  4896                           ;Lab8pC.c: 678: EW_Count[0] = count/10 + '0';
  4897  000E78  C041  F00F         	movff	update_LCD_count@count,___awdiv@dividend
  4898  000E7C  6A10               	clrf	___awdiv@dividend+1,c
  4899  000E7E  0E00               	movlw	0
  4900  000E80  6E12               	movwf	___awdiv@divisor+1,c
  4901  000E82  0E0A               	movlw	10
  4902  000E84  6E11               	movwf	___awdiv@divisor,c
  4903  000E86  EC91  F00D         	call	___awdiv	;wreg free
  4904  000E8A  500F               	movf	?___awdiv,w,c
  4905  000E8C  0F30               	addlw	48
  4906  000E8E  6E5F               	movwf	_EW_Count,c
  4907                           
  4908                           ;Lab8pC.c: 679: EW_Count[1] = count%10 + '0';
  4909  000E90  C041  F00F         	movff	update_LCD_count@count,___awmod@dividend
  4910  000E94  6A10               	clrf	___awmod@dividend+1,c
  4911  000E96  0E00               	movlw	0
  4912  000E98  6E12               	movwf	___awmod@divisor+1,c
  4913  000E9A  0E0A               	movlw	10
  4914  000E9C  6E11               	movwf	___awmod@divisor,c
  4915  000E9E  EC35  F00F         	call	___awmod	;wreg free
  4916  000EA2  500F               	movf	?___awmod,w,c
  4917  000EA4  0F30               	addlw	48
  4918  000EA6  6E60               	movwf	_EW_Count+1,c
  4919                           
  4920                           ;Lab8pC.c: 680: drawtext(100, 20 + 10, EW_Count, 0x07FF, 0x0000, 2);
  4921  000EA8  0E1E               	movlw	30
  4922  000EAA  6E37               	movwf	drawtext@y,c
  4923  000EAC  0E5F               	movlw	low _EW_Count
  4924  000EAE  6E38               	movwf	drawtext@_text,c
  4925  000EB0  0E00               	movlw	high _EW_Count
  4926  000EB2  6E39               	movwf	drawtext@_text+1,c
  4927  000EB4  0E07               	movlw	7
  4928  000EB6  6E3B               	movwf	drawtext@color+1,c
  4929  000EB8  683A               	setf	drawtext@color,c
  4930  000EBA  0E00               	movlw	0
  4931  000EBC  6E3D               	movwf	drawtext@bg+1,c
  4932  000EBE  0E00               	movlw	0
  4933  000EC0  6E3C               	movwf	drawtext@bg,c
  4934  000EC2  0E02               	movlw	2
  4935  000EC4  6E3E               	movwf	drawtext@size,c
  4936  000EC6  0E64               	movlw	100
  4937  000EC8  ECCD  F009         	call	_drawtext
  4938                           
  4939                           ;Lab8pC.c: 681: break;
  4940  000ECC  D096               	goto	l536
  4941  000ECE                     l4969:
  4942                           
  4943                           ;Lab8pC.c: 684: NSLT_Count[0] = count/10 + '0';
  4944  000ECE  C041  F00F         	movff	update_LCD_count@count,___awdiv@dividend
  4945  000ED2  6A10               	clrf	___awdiv@dividend+1,c
  4946  000ED4  0E00               	movlw	0
  4947  000ED6  6E12               	movwf	___awdiv@divisor+1,c
  4948  000ED8  0E0A               	movlw	10
  4949  000EDA  6E11               	movwf	___awdiv@divisor,c
  4950  000EDC  EC91  F00D         	call	___awdiv	;wreg free
  4951  000EE0  500F               	movf	?___awdiv,w,c
  4952  000EE2  0F30               	addlw	48
  4953  000EE4  0100               	movlb	0	; () banked
  4954  000EE6  6FB4               	movwf	_NSLT_Count& (0+255),b
  4955                           
  4956                           ;Lab8pC.c: 685: NSLT_Count[1] = count%10 + '0';
  4957  000EE8  C041  F00F         	movff	update_LCD_count@count,___awmod@dividend
  4958  000EEC  6A10               	clrf	___awmod@dividend+1,c
  4959  000EEE  0E00               	movlw	0
  4960  000EF0  6E12               	movwf	___awmod@divisor+1,c
  4961  000EF2  0E0A               	movlw	10
  4962  000EF4  6E11               	movwf	___awmod@divisor,c
  4963  000EF6  EC35  F00F         	call	___awmod	;wreg free
  4964  000EFA  500F               	movf	?___awmod,w,c
  4965  000EFC  0F30               	addlw	48
  4966  000EFE  0100               	movlb	0	; () banked
  4967  000F00  6FB5               	movwf	(_NSLT_Count+1)& (0+255),b
  4968                           
  4969                           ; BSR set to: 0
  4970                           ;Lab8pC.c: 686: drawtext(100, 110 + 10, NSLT_Count,
  4971                           ;Lab8pC.c: 687: 0xF81F, 0x0000, 2);
  4972  000F02  0E78               	movlw	120
  4973  000F04  6E37               	movwf	drawtext@y,c
  4974  000F06  0EB4               	movlw	low _NSLT_Count
  4975  000F08  6E38               	movwf	drawtext@_text,c
  4976  000F0A  0E00               	movlw	high _NSLT_Count
  4977  000F0C  6E39               	movwf	drawtext@_text+1,c
  4978  000F0E  0EF8               	movlw	248
  4979  000F10  6E3B               	movwf	drawtext@color+1,c
  4980  000F12  0E1F               	movlw	31
  4981  000F14  6E3A               	movwf	drawtext@color,c
  4982  000F16  0E00               	movlw	0
  4983  000F18  6E3D               	movwf	drawtext@bg+1,c
  4984  000F1A  0E00               	movlw	0
  4985  000F1C  6E3C               	movwf	drawtext@bg,c
  4986  000F1E  0E02               	movlw	2
  4987  000F20  6E3E               	movwf	drawtext@size,c
  4988  000F22  0E64               	movlw	100
  4989  000F24  ECCD  F009         	call	_drawtext
  4990                           
  4991                           ;Lab8pC.c: 688: break;
  4992  000F28  D068               	goto	l536
  4993  000F2A                     l4973:
  4994                           
  4995                           ;Lab8pC.c: 690: NS_Count[0] = count/10 + '0';
  4996  000F2A  C041  F00F         	movff	update_LCD_count@count,___awdiv@dividend
  4997  000F2E  6A10               	clrf	___awdiv@dividend+1,c
  4998  000F30  0E00               	movlw	0
  4999  000F32  6E12               	movwf	___awdiv@divisor+1,c
  5000  000F34  0E0A               	movlw	10
  5001  000F36  6E11               	movwf	___awdiv@divisor,c
  5002  000F38  EC91  F00D         	call	___awdiv	;wreg free
  5003  000F3C  500F               	movf	?___awdiv,w,c
  5004  000F3E  0F30               	addlw	48
  5005  000F40  0100               	movlb	0	; () banked
  5006  000F42  6FB7               	movwf	_NS_Count& (0+255),b
  5007                           
  5008                           ;Lab8pC.c: 691: NS_Count[1] = count%10 + '0';
  5009  000F44  C041  F00F         	movff	update_LCD_count@count,___awmod@dividend
  5010  000F48  6A10               	clrf	___awmod@dividend+1,c
  5011  000F4A  0E00               	movlw	0
  5012  000F4C  6E12               	movwf	___awmod@divisor+1,c
  5013  000F4E  0E0A               	movlw	10
  5014  000F50  6E11               	movwf	___awmod@divisor,c
  5015  000F52  EC35  F00F         	call	___awmod	;wreg free
  5016  000F56  500F               	movf	?___awmod,w,c
  5017  000F58  0F30               	addlw	48
  5018  000F5A  0100               	movlb	0	; () banked
  5019  000F5C  6FB8               	movwf	(_NS_Count+1)& (0+255),b
  5020                           
  5021                           ; BSR set to: 0
  5022                           ;Lab8pC.c: 692: drawtext(100, 80 + 10, NS_Count, 0x001F, 0x0000, 2);
  5023  000F5E  0E5A               	movlw	90
  5024  000F60  6E37               	movwf	drawtext@y,c
  5025  000F62  0EB7               	movlw	low _NS_Count
  5026  000F64  6E38               	movwf	drawtext@_text,c
  5027  000F66  0E00               	movlw	high _NS_Count
  5028  000F68  6E39               	movwf	drawtext@_text+1,c
  5029  000F6A  0E00               	movlw	0
  5030  000F6C  6E3B               	movwf	drawtext@color+1,c
  5031  000F6E  0E1F               	movlw	31
  5032  000F70  6E3A               	movwf	drawtext@color,c
  5033  000F72  0E00               	movlw	0
  5034  000F74  6E3D               	movwf	drawtext@bg+1,c
  5035  000F76  0E00               	movlw	0
  5036  000F78  6E3C               	movwf	drawtext@bg,c
  5037  000F7A  0E02               	movlw	2
  5038  000F7C  6E3E               	movwf	drawtext@size,c
  5039  000F7E  0E64               	movlw	100
  5040  000F80  ECCD  F009         	call	_drawtext
  5041                           
  5042                           ;Lab8pC.c: 693: break;
  5043  000F84  D03A               	goto	l536
  5044  000F86                     l4977:
  5045                           
  5046                           ;Lab8pC.c: 695: EWLT_Count[0] = count/10 + '0';
  5047  000F86  C041  F00F         	movff	update_LCD_count@count,___awdiv@dividend
  5048  000F8A  6A10               	clrf	___awdiv@dividend+1,c
  5049  000F8C  0E00               	movlw	0
  5050  000F8E  6E12               	movwf	___awdiv@divisor+1,c
  5051  000F90  0E0A               	movlw	10
  5052  000F92  6E11               	movwf	___awdiv@divisor,c
  5053  000F94  EC91  F00D         	call	___awdiv	;wreg free
  5054  000F98  500F               	movf	?___awdiv,w,c
  5055  000F9A  0F30               	addlw	48
  5056  000F9C  6E5C               	movwf	_EWLT_Count,c
  5057                           
  5058                           ;Lab8pC.c: 696: EWLT_Count[1] = count%10 + '0';
  5059  000F9E  C041  F00F         	movff	update_LCD_count@count,___awmod@dividend
  5060  000FA2  6A10               	clrf	___awmod@dividend+1,c
  5061  000FA4  0E00               	movlw	0
  5062  000FA6  6E12               	movwf	___awmod@divisor+1,c
  5063  000FA8  0E0A               	movlw	10
  5064  000FAA  6E11               	movwf	___awmod@divisor,c
  5065  000FAC  EC35  F00F         	call	___awmod	;wreg free
  5066  000FB0  500F               	movf	?___awmod,w,c
  5067  000FB2  0F30               	addlw	48
  5068  000FB4  6E5D               	movwf	_EWLT_Count+1,c
  5069                           
  5070                           ;Lab8pC.c: 697: drawtext(100, 50 + 10, EWLT_Count,
  5071                           ;Lab8pC.c: 698: 0xFFFF, 0x0000, 2);
  5072  000FB6  0E3C               	movlw	60
  5073  000FB8  6E37               	movwf	drawtext@y,c
  5074  000FBA  0E5C               	movlw	low _EWLT_Count
  5075  000FBC  6E38               	movwf	drawtext@_text,c
  5076  000FBE  0E00               	movlw	high _EWLT_Count
  5077  000FC0  6E39               	movwf	drawtext@_text+1,c
  5078  000FC2  0EFF               	movlw	255
  5079  000FC4  6E3B               	movwf	drawtext@color+1,c
  5080  000FC6  683A               	setf	drawtext@color,c
  5081  000FC8  0E00               	movlw	0
  5082  000FCA  6E3D               	movwf	drawtext@bg+1,c
  5083  000FCC  0E00               	movlw	0
  5084  000FCE  6E3C               	movwf	drawtext@bg,c
  5085  000FD0  0E02               	movlw	2
  5086  000FD2  6E3E               	movwf	drawtext@size,c
  5087  000FD4  0E64               	movlw	100
  5088  000FD6  ECCD  F009         	call	_drawtext
  5089                           
  5090                           ;Lab8pC.c: 700: }
  5091                           
  5092                           ;Lab8pC.c: 699: break;
  5093  000FDA  D00F               	goto	l536
  5094  000FDC                     l4983:
  5095  000FDC  0100               	movlb	0	; () banked
  5096  000FDE  51AE               	movf	update_LCD_count@direction& (0+255),w,b
  5097                           
  5098                           ; Switch size 1, requested type "space"
  5099                           ; Number of cases is 4, Range of values is 0 to 3
  5100                           ; switch strategies available:
  5101                           ; Name         Instructions Cycles
  5102                           ; simple_byte           13     7 (average)
  5103                           ;	Chosen strategy is simple_byte
  5104  000FE0  0A00               	xorlw	0	; case 0
  5105  000FE2  B4D8               	btfsc	status,2,c
  5106  000FE4  D749               	goto	l4965
  5107  000FE6  0A01               	xorlw	1	; case 1
  5108  000FE8  B4D8               	btfsc	status,2,c
  5109  000FEA  D7CD               	goto	l4977
  5110  000FEC  0A03               	xorlw	3	; case 2
  5111  000FEE  B4D8               	btfsc	status,2,c
  5112  000FF0  D79C               	goto	l4973
  5113  000FF2  0A01               	xorlw	1	; case 3
  5114  000FF4  B4D8               	btfsc	status,2,c
  5115  000FF6  D76B               	goto	l4969
  5116  000FF8  D000               	goto	l536
  5117  000FFA                     l536:
  5118  000FFA  0012               	return		;funcret
  5119  000FFC                     __end_of_update_LCD_count:
  5120                           	opt stack 0
  5121                           tblptru	equ	0xFF8
  5122                           tblptrh	equ	0xFF7
  5123                           tblptrl	equ	0xFF6
  5124                           tablat	equ	0xFF5
  5125                           intcon	equ	0xFF2
  5126                           intcon2	equ	0xFF1
  5127                           intcon3	equ	0xFF0
  5128                           postinc0	equ	0xFEE
  5129                           wreg	equ	0xFE8
  5130                           postdec1	equ	0xFE5
  5131                           fsr1l	equ	0xFE1
  5132                           status	equ	0xFD8
  5133                           
  5134 ;; *************** function _PED_Control *****************
  5135 ;; Defined at:
  5136 ;;		line 458 in file "Lab8pC.c"
  5137 ;; Parameters:    Size  Location     Type
  5138 ;;  direction       1    wreg     unsigned char 
  5139 ;;  Num_Sec         1    8[BANK0 ] unsigned char 
  5140 ;; Auto vars:     Size  Location     Type
  5141 ;;  direction       1    9[BANK0 ] unsigned char 
  5142 ;;  i               1   10[BANK0 ] unsigned char 
  5143 ;; Return value:  Size  Location     Type
  5144 ;;		None               void
  5145 ;; Registers used:
  5146 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5147 ;; Tracked objects:
  5148 ;;		On entry : 0/0
  5149 ;;		On exit  : 0/0
  5150 ;;		Unchanged: 0/0
  5151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5152 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5153 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5154 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5155 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5156 ;;Total ram usage:        3 bytes
  5157 ;; Hardware stack levels used:    1
  5158 ;; Hardware stack levels required when called:   10
  5159 ;; This function calls:
  5160 ;;		_Wait_One_Second_With_Beep
  5161 ;;		_update_LCD_PED_Count
  5162 ;; This function is called by:
  5163 ;;		_Day_Mode
  5164 ;; This function uses a non-reentrant model
  5165 ;;
  5166                           
  5167                           	psect	text20
  5168  002110                     __ptext20:
  5169                           	opt stack 0
  5170  002110                     _PED_Control:
  5171                           	opt stack 19
  5172                           
  5173                           ;incstack = 0
  5174                           ;PED_Control@direction stored from wreg
  5175  002110  0100               	movlb	0	; () banked
  5176  002112  6FB0               	movwf	PED_Control@direction& (0+255),b
  5177                           
  5178                           ; BSR set to: 0
  5179                           ;Lab8pC.c: 460: for(char i = Num_Sec-1;i>0; i--)
  5180  002114  0100               	movlb	0	; () banked
  5181  002116  05AF               	decf	PED_Control@Num_Sec& (0+255),w,b
  5182  002118  0100               	movlb	0	; () banked
  5183  00211A  6FB1               	movwf	PED_Control@i& (0+255),b
  5184  00211C                     l5095:
  5185                           
  5186                           ; BSR set to: 0
  5187  00211C  0100               	movlb	0	; () banked
  5188  00211E  51B1               	movf	PED_Control@i& (0+255),w,b
  5189  002120  0100               	movlb	0	; () banked
  5190  002122  B4D8               	btfsc	status,2,c
  5191  002124  D00D               	goto	l5105
  5192  002126  D001               	goto	l5099
  5193                           
  5194                           ; BSR set to: 0
  5195  002128  D00B               	goto	l5105
  5196  00212A                     l5099:
  5197                           
  5198                           ; BSR set to: 0
  5199                           ;Lab8pC.c: 461: {
  5200                           ;Lab8pC.c: 462: update_LCD_PED_Count(direction, i);
  5201  00212A  C0B1  F041         	movff	PED_Control@i,update_LCD_PED_Count@count
  5202  00212E  0100               	movlb	0	; () banked
  5203  002130  51B0               	movf	PED_Control@direction& (0+255),w,b
  5204  002132  EC15  F00C         	call	_update_LCD_PED_Count
  5205                           
  5206                           ;Lab8pC.c: 463: Wait_One_Second_With_Beep();
  5207  002136  ECAF  F00E         	call	_Wait_One_Second_With_Beep	;wreg free
  5208  00213A  0100               	movlb	0	; () banked
  5209  00213C  07B1               	decf	PED_Control@i& (0+255),f,b
  5210  00213E  D7EE               	goto	l5095
  5211  002140                     l5105:
  5212                           
  5213                           ; BSR set to: 0
  5214                           ;Lab8pC.c: 464: }
  5215                           ;Lab8pC.c: 466: update_LCD_PED_Count(direction, 0);
  5216  002140  0E00               	movlw	0
  5217  002142  6E41               	movwf	update_LCD_PED_Count@count,c
  5218  002144  0100               	movlb	0	; () banked
  5219  002146  51B0               	movf	PED_Control@direction& (0+255),w,b
  5220  002148  EC15  F00C         	call	_update_LCD_PED_Count
  5221                           
  5222                           ;Lab8pC.c: 467: Wait_One_Second_With_Beep();
  5223  00214C  ECAF  F00E         	call	_Wait_One_Second_With_Beep	;wreg free
  5224                           
  5225                           ;Lab8pC.c: 468: if (direction ==2)
  5226  002150  0E02               	movlw	2
  5227  002152  0100               	movlb	0	; () banked
  5228  002154  19B0               	xorwf	PED_Control@direction& (0+255),w,b
  5229  002156  A4D8               	btfss	status,2,c
  5230  002158  D003               	goto	l5111
  5231                           
  5232                           ; BSR set to: 0
  5233                           ;Lab8pC.c: 469: NS_PED_SW=0;
  5234  00215A  0E00               	movlw	0
  5235  00215C  6E4D               	movwf	_NS_PED_SW,c
  5236  00215E  D003               	goto	l482
  5237  002160                     l5111:
  5238                           
  5239                           ; BSR set to: 0
  5240                           ;Lab8pC.c: 470: else
  5241                           ;Lab8pC.c: 471: EW_PED_SW=0;
  5242  002160  0E00               	movlw	0
  5243  002162  6E4A               	movwf	_EW_PED_SW,c
  5244  002164  D000               	goto	l482
  5245  002166                     l482:
  5246                           
  5247                           ; BSR set to: 0
  5248  002166  0012               	return		;funcret
  5249  002168                     __end_of_PED_Control:
  5250                           	opt stack 0
  5251                           tblptru	equ	0xFF8
  5252                           tblptrh	equ	0xFF7
  5253                           tblptrl	equ	0xFF6
  5254                           tablat	equ	0xFF5
  5255                           intcon	equ	0xFF2
  5256                           intcon2	equ	0xFF1
  5257                           intcon3	equ	0xFF0
  5258                           postinc0	equ	0xFEE
  5259                           wreg	equ	0xFE8
  5260                           postdec1	equ	0xFE5
  5261                           fsr1l	equ	0xFE1
  5262                           status	equ	0xFD8
  5263                           
  5264 ;; *************** function _update_LCD_PED_Count *****************
  5265 ;; Defined at:
  5266 ;;		line 703 in file "Lab8pC.c"
  5267 ;; Parameters:    Size  Location     Type
  5268 ;;  direction       1    wreg     unsigned char 
  5269 ;;  count           1   64[COMRAM] unsigned char 
  5270 ;; Auto vars:     Size  Location     Type
  5271 ;;  direction       1    7[BANK0 ] unsigned char 
  5272 ;; Return value:  Size  Location     Type
  5273 ;;		None               void
  5274 ;; Registers used:
  5275 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5276 ;; Tracked objects:
  5277 ;;		On entry : 0/0
  5278 ;;		On exit  : 0/0
  5279 ;;		Unchanged: 0/0
  5280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5281 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5282 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5283 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5284 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5285 ;;Total ram usage:        2 bytes
  5286 ;; Hardware stack levels used:    1
  5287 ;; Hardware stack levels required when called:    9
  5288 ;; This function calls:
  5289 ;;		___awdiv
  5290 ;;		___awmod
  5291 ;;		_drawtext
  5292 ;; This function is called by:
  5293 ;;		_PED_Control
  5294 ;; This function uses a non-reentrant model
  5295 ;;
  5296                           
  5297                           	psect	text21
  5298  00182A                     __ptext21:
  5299                           	opt stack 0
  5300  00182A                     _update_LCD_PED_Count:
  5301                           	opt stack 19
  5302                           
  5303                           ; BSR set to: 0
  5304                           ;incstack = 0
  5305                           ;update_LCD_PED_Count@direction stored from wreg
  5306  00182A  0100               	movlb	0	; () banked
  5307  00182C  6FAE               	movwf	update_LCD_PED_Count@direction& (0+255),b
  5308                           
  5309                           ; BSR set to: 0
  5310                           ;Lab8pC.c: 705: switch (direction)
  5311  00182E  D05B               	goto	l4943
  5312  001830                     l4933:
  5313                           
  5314                           ; BSR set to: 0
  5315                           ;Lab8pC.c: 708: PED_EW_Count[0] = count/10 + '0';
  5316  001830  C041  F00F         	movff	update_LCD_PED_Count@count,___awdiv@dividend
  5317  001834  6A10               	clrf	___awdiv@dividend+1,c
  5318  001836  0E00               	movlw	0
  5319  001838  6E12               	movwf	___awdiv@divisor+1,c
  5320  00183A  0E0A               	movlw	10
  5321  00183C  6E11               	movwf	___awdiv@divisor,c
  5322  00183E  EC91  F00D         	call	___awdiv	;wreg free
  5323  001842  500F               	movf	?___awdiv,w,c
  5324  001844  0F30               	addlw	48
  5325  001846  0100               	movlb	0	; () banked
  5326  001848  6FBA               	movwf	_PED_EW_Count& (0+255),b
  5327                           
  5328                           ;Lab8pC.c: 709: PED_EW_Count[1] = count%10 + '0';
  5329  00184A  C041  F00F         	movff	update_LCD_PED_Count@count,___awmod@dividend
  5330  00184E  6A10               	clrf	___awmod@dividend+1,c
  5331  001850  0E00               	movlw	0
  5332  001852  6E12               	movwf	___awmod@divisor+1,c
  5333  001854  0E0A               	movlw	10
  5334  001856  6E11               	movwf	___awmod@divisor,c
  5335  001858  EC35  F00F         	call	___awmod	;wreg free
  5336  00185C  500F               	movf	?___awmod,w,c
  5337  00185E  0F30               	addlw	48
  5338  001860  0100               	movlb	0	; () banked
  5339  001862  6FBB               	movwf	(_PED_EW_Count+1)& (0+255),b
  5340                           
  5341                           ; BSR set to: 0
  5342                           ;Lab8pC.c: 710: drawtext(2, 30, PED_EW_Count, 0x07FF, 0x0000, 2);
  5343  001864  0E1E               	movlw	30
  5344  001866  6E37               	movwf	drawtext@y,c
  5345  001868  0EBA               	movlw	low _PED_EW_Count
  5346  00186A  6E38               	movwf	drawtext@_text,c
  5347  00186C  0E00               	movlw	high _PED_EW_Count
  5348  00186E  6E39               	movwf	drawtext@_text+1,c
  5349  001870  0E07               	movlw	7
  5350  001872  6E3B               	movwf	drawtext@color+1,c
  5351  001874  683A               	setf	drawtext@color,c
  5352  001876  0E00               	movlw	0
  5353  001878  6E3D               	movwf	drawtext@bg+1,c
  5354  00187A  0E00               	movlw	0
  5355  00187C  6E3C               	movwf	drawtext@bg,c
  5356  00187E  0E02               	movlw	2
  5357  001880  6E3E               	movwf	drawtext@size,c
  5358  001882  0E02               	movlw	2
  5359  001884  ECCD  F009         	call	_drawtext
  5360                           
  5361                           ;Lab8pC.c: 711: break;
  5362  001888  D037               	goto	l543
  5363  00188A                     l4937:
  5364                           
  5365                           ;Lab8pC.c: 713: PED_NS_Count[0] = count/10 + '0';
  5366  00188A  C041  F00F         	movff	update_LCD_PED_Count@count,___awdiv@dividend
  5367  00188E  6A10               	clrf	___awdiv@dividend+1,c
  5368  001890  0E00               	movlw	0
  5369  001892  6E12               	movwf	___awdiv@divisor+1,c
  5370  001894  0E0A               	movlw	10
  5371  001896  6E11               	movwf	___awdiv@divisor,c
  5372  001898  EC91  F00D         	call	___awdiv	;wreg free
  5373  00189C  500F               	movf	?___awdiv,w,c
  5374  00189E  0F30               	addlw	48
  5375  0018A0  0100               	movlb	0	; () banked
  5376  0018A2  6FBD               	movwf	_PED_NS_Count& (0+255),b
  5377                           
  5378                           ;Lab8pC.c: 714: PED_NS_Count[1] = count%10 + '0';
  5379  0018A4  C041  F00F         	movff	update_LCD_PED_Count@count,___awmod@dividend
  5380  0018A8  6A10               	clrf	___awmod@dividend+1,c
  5381  0018AA  0E00               	movlw	0
  5382  0018AC  6E12               	movwf	___awmod@divisor+1,c
  5383  0018AE  0E0A               	movlw	10
  5384  0018B0  6E11               	movwf	___awmod@divisor,c
  5385  0018B2  EC35  F00F         	call	___awmod	;wreg free
  5386  0018B6  500F               	movf	?___awmod,w,c
  5387  0018B8  0F30               	addlw	48
  5388  0018BA  0100               	movlb	0	; () banked
  5389  0018BC  6FBE               	movwf	(_PED_NS_Count+1)& (0+255),b
  5390                           
  5391                           ; BSR set to: 0
  5392                           ;Lab8pC.c: 715: drawtext(2, 90, PED_NS_Count,0x001F, 0x0000, 2);
  5393  0018BE  0E5A               	movlw	90
  5394  0018C0  6E37               	movwf	drawtext@y,c
  5395  0018C2  0EBD               	movlw	low _PED_NS_Count
  5396  0018C4  6E38               	movwf	drawtext@_text,c
  5397  0018C6  0E00               	movlw	high _PED_NS_Count
  5398  0018C8  6E39               	movwf	drawtext@_text+1,c
  5399  0018CA  0E00               	movlw	0
  5400  0018CC  6E3B               	movwf	drawtext@color+1,c
  5401  0018CE  0E1F               	movlw	31
  5402  0018D0  6E3A               	movwf	drawtext@color,c
  5403  0018D2  0E00               	movlw	0
  5404  0018D4  6E3D               	movwf	drawtext@bg+1,c
  5405  0018D6  0E00               	movlw	0
  5406  0018D8  6E3C               	movwf	drawtext@bg,c
  5407  0018DA  0E02               	movlw	2
  5408  0018DC  6E3E               	movwf	drawtext@size,c
  5409  0018DE  0E02               	movlw	2
  5410  0018E0  ECCD  F009         	call	_drawtext
  5411                           
  5412                           ;Lab8pC.c: 719: }
  5413                           
  5414                           ;Lab8pC.c: 716: break;
  5415  0018E4  D009               	goto	l543
  5416  0018E6                     l4943:
  5417  0018E6  0100               	movlb	0	; () banked
  5418  0018E8  51AE               	movf	update_LCD_PED_Count@direction& (0+255),w,b
  5419                           
  5420                           ; Switch size 1, requested type "space"
  5421                           ; Number of cases is 2, Range of values is 0 to 2
  5422                           ; switch strategies available:
  5423                           ; Name         Instructions Cycles
  5424                           ; simple_byte            7     4 (average)
  5425                           ;	Chosen strategy is simple_byte
  5426  0018EA  0A00               	xorlw	0	; case 0
  5427  0018EC  B4D8               	btfsc	status,2,c
  5428  0018EE  D7A0               	goto	l4933
  5429  0018F0  0A02               	xorlw	2	; case 2
  5430  0018F2  B4D8               	btfsc	status,2,c
  5431  0018F4  D7CA               	goto	l4937
  5432  0018F6  D000               	goto	l543
  5433  0018F8                     l543:
  5434  0018F8  0012               	return		;funcret
  5435  0018FA                     __end_of_update_LCD_PED_Count:
  5436                           	opt stack 0
  5437                           tblptru	equ	0xFF8
  5438                           tblptrh	equ	0xFF7
  5439                           tblptrl	equ	0xFF6
  5440                           tablat	equ	0xFF5
  5441                           intcon	equ	0xFF2
  5442                           intcon2	equ	0xFF1
  5443                           intcon3	equ	0xFF0
  5444                           postinc0	equ	0xFEE
  5445                           wreg	equ	0xFE8
  5446                           postdec1	equ	0xFE5
  5447                           fsr1l	equ	0xFE1
  5448                           status	equ	0xFD8
  5449                           
  5450 ;; *************** function ___awmod *****************
  5451 ;; Defined at:
  5452 ;;		line 8 in file "E:\XC8\sources\common\awmod.c"
  5453 ;; Parameters:    Size  Location     Type
  5454 ;;  dividend        2   14[COMRAM] int 
  5455 ;;  divisor         2   16[COMRAM] int 
  5456 ;; Auto vars:     Size  Location     Type
  5457 ;;  sign            1   19[COMRAM] unsigned char 
  5458 ;;  counter         1   18[COMRAM] unsigned char 
  5459 ;; Return value:  Size  Location     Type
  5460 ;;                  2   14[COMRAM] int 
  5461 ;; Registers used:
  5462 ;;		wreg, status,2, status,0
  5463 ;; Tracked objects:
  5464 ;;		On entry : 0/0
  5465 ;;		On exit  : 0/0
  5466 ;;		Unchanged: 0/0
  5467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5468 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5469 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5470 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5471 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5472 ;;Total ram usage:        6 bytes
  5473 ;; Hardware stack levels used:    1
  5474 ;; Hardware stack levels required when called:    2
  5475 ;; This function calls:
  5476 ;;		Nothing
  5477 ;; This function is called by:
  5478 ;;		_update_LCD_count
  5479 ;;		_update_LCD_PED_Count
  5480 ;; This function uses a non-reentrant model
  5481 ;;
  5482                           
  5483                           	psect	text22
  5484  001E6A                     __ptext22:
  5485                           	opt stack 0
  5486  001E6A                     ___awmod:
  5487                           	opt stack 25
  5488                           
  5489                           ;incstack = 0
  5490  001E6A  0E00               	movlw	0
  5491  001E6C  6E14               	movwf	___awmod@sign,c
  5492  001E6E  AE10               	btfss	___awmod@dividend+1,7,c
  5493  001E70  D007               	goto	l4701
  5494  001E72  6C0F               	negf	___awmod@dividend,c
  5495  001E74  1E10               	comf	___awmod@dividend+1,f,c
  5496  001E76  B0D8               	btfsc	status,0,c
  5497  001E78  2A10               	incf	___awmod@dividend+1,f,c
  5498  001E7A  0E01               	movlw	1
  5499  001E7C  6E14               	movwf	___awmod@sign,c
  5500  001E7E  D000               	goto	l4701
  5501  001E80                     l4701:
  5502  001E80  AE12               	btfss	___awmod@divisor+1,7,c
  5503  001E82  D005               	goto	l4705
  5504  001E84  6C11               	negf	___awmod@divisor,c
  5505  001E86  1E12               	comf	___awmod@divisor+1,f,c
  5506  001E88  B0D8               	btfsc	status,0,c
  5507  001E8A  2A12               	incf	___awmod@divisor+1,f,c
  5508  001E8C  D000               	goto	l4705
  5509  001E8E                     l4705:
  5510  001E8E  5011               	movf	___awmod@divisor,w,c
  5511  001E90  1012               	iorwf	___awmod@divisor+1,w,c
  5512  001E92  B4D8               	btfsc	status,2,c
  5513  001E94  D01D               	goto	l4721
  5514  001E96  0E01               	movlw	1
  5515  001E98  6E13               	movwf	___awmod@counter,c
  5516  001E9A  D005               	goto	l4711
  5517  001E9C                     l4709:
  5518  001E9C  90D8               	bcf	status,0,c
  5519  001E9E  3611               	rlcf	___awmod@divisor,f,c
  5520  001EA0  3612               	rlcf	___awmod@divisor+1,f,c
  5521  001EA2  2A13               	incf	___awmod@counter,f,c
  5522  001EA4  D000               	goto	l4711
  5523  001EA6                     l4711:
  5524  001EA6  BE12               	btfsc	___awmod@divisor+1,7,c
  5525  001EA8  D002               	goto	l4713
  5526  001EAA  D7F8               	goto	l4709
  5527  001EAC  D000               	goto	l4713
  5528  001EAE                     l4713:
  5529  001EAE  5011               	movf	___awmod@divisor,w,c
  5530  001EB0  5C0F               	subwf	___awmod@dividend,w,c
  5531  001EB2  5012               	movf	___awmod@divisor+1,w,c
  5532  001EB4  5810               	subwfb	___awmod@dividend+1,w,c
  5533  001EB6  A0D8               	btfss	status,0,c
  5534  001EB8  D005               	goto	l4717
  5535  001EBA  5011               	movf	___awmod@divisor,w,c
  5536  001EBC  5E0F               	subwf	___awmod@dividend,f,c
  5537  001EBE  5012               	movf	___awmod@divisor+1,w,c
  5538  001EC0  5A10               	subwfb	___awmod@dividend+1,f,c
  5539  001EC2  D000               	goto	l4717
  5540  001EC4                     l4717:
  5541  001EC4  90D8               	bcf	status,0,c
  5542  001EC6  3212               	rrcf	___awmod@divisor+1,f,c
  5543  001EC8  3211               	rrcf	___awmod@divisor,f,c
  5544  001ECA  2E13               	decfsz	___awmod@counter,f,c
  5545  001ECC  D7F0               	goto	l4713
  5546  001ECE  D000               	goto	l4721
  5547  001ED0                     l4721:
  5548  001ED0  5014               	movf	___awmod@sign,w,c
  5549  001ED2  B4D8               	btfsc	status,2,c
  5550  001ED4  D005               	goto	l4725
  5551  001ED6  6C0F               	negf	___awmod@dividend,c
  5552  001ED8  1E10               	comf	___awmod@dividend+1,f,c
  5553  001EDA  B0D8               	btfsc	status,0,c
  5554  001EDC  2A10               	incf	___awmod@dividend+1,f,c
  5555  001EDE  D000               	goto	l4725
  5556  001EE0                     l4725:
  5557  001EE0  C00F  F00F         	movff	___awmod@dividend,?___awmod
  5558  001EE4  C010  F010         	movff	___awmod@dividend+1,?___awmod+1
  5559  001EE8  D000               	goto	l802
  5560  001EEA                     l802:
  5561  001EEA  0012               	return		;funcret
  5562  001EEC                     __end_of___awmod:
  5563                           	opt stack 0
  5564                           tblptru	equ	0xFF8
  5565                           tblptrh	equ	0xFF7
  5566                           tblptrl	equ	0xFF6
  5567                           tablat	equ	0xFF5
  5568                           intcon	equ	0xFF2
  5569                           intcon2	equ	0xFF1
  5570                           intcon3	equ	0xFF0
  5571                           postinc0	equ	0xFEE
  5572                           wreg	equ	0xFE8
  5573                           postdec1	equ	0xFE5
  5574                           fsr1l	equ	0xFE1
  5575                           status	equ	0xFD8
  5576                           
  5577 ;; *************** function ___awdiv *****************
  5578 ;; Defined at:
  5579 ;;		line 8 in file "E:\XC8\sources\common\awdiv.c"
  5580 ;; Parameters:    Size  Location     Type
  5581 ;;  dividend        2   14[COMRAM] int 
  5582 ;;  divisor         2   16[COMRAM] int 
  5583 ;; Auto vars:     Size  Location     Type
  5584 ;;  quotient        2   20[COMRAM] int 
  5585 ;;  sign            1   19[COMRAM] unsigned char 
  5586 ;;  counter         1   18[COMRAM] unsigned char 
  5587 ;; Return value:  Size  Location     Type
  5588 ;;                  2   14[COMRAM] int 
  5589 ;; Registers used:
  5590 ;;		wreg, status,2, status,0
  5591 ;; Tracked objects:
  5592 ;;		On entry : 0/0
  5593 ;;		On exit  : 0/0
  5594 ;;		Unchanged: 0/0
  5595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5596 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5597 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5598 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5599 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5600 ;;Total ram usage:        8 bytes
  5601 ;; Hardware stack levels used:    1
  5602 ;; Hardware stack levels required when called:    2
  5603 ;; This function calls:
  5604 ;;		Nothing
  5605 ;; This function is called by:
  5606 ;;		_update_LCD_count
  5607 ;;		_update_LCD_PED_Count
  5608 ;; This function uses a non-reentrant model
  5609 ;;
  5610                           
  5611                           	psect	text23
  5612  001B22                     __ptext23:
  5613                           	opt stack 0
  5614  001B22                     ___awdiv:
  5615                           	opt stack 25
  5616                           
  5617                           ;incstack = 0
  5618  001B22  0E00               	movlw	0
  5619  001B24  6E14               	movwf	___awdiv@sign,c
  5620  001B26  AE12               	btfss	___awdiv@divisor+1,7,c
  5621  001B28  D007               	goto	l4657
  5622  001B2A  6C11               	negf	___awdiv@divisor,c
  5623  001B2C  1E12               	comf	___awdiv@divisor+1,f,c
  5624  001B2E  B0D8               	btfsc	status,0,c
  5625  001B30  2A12               	incf	___awdiv@divisor+1,f,c
  5626  001B32  0E01               	movlw	1
  5627  001B34  6E14               	movwf	___awdiv@sign,c
  5628  001B36  D000               	goto	l4657
  5629  001B38                     l4657:
  5630  001B38  AE10               	btfss	___awdiv@dividend+1,7,c
  5631  001B3A  D007               	goto	l4663
  5632  001B3C  6C0F               	negf	___awdiv@dividend,c
  5633  001B3E  1E10               	comf	___awdiv@dividend+1,f,c
  5634  001B40  B0D8               	btfsc	status,0,c
  5635  001B42  2A10               	incf	___awdiv@dividend+1,f,c
  5636  001B44  0E01               	movlw	1
  5637  001B46  1A14               	xorwf	___awdiv@sign,f,c
  5638  001B48  D000               	goto	l4663
  5639  001B4A                     l4663:
  5640  001B4A  0E00               	movlw	0
  5641  001B4C  6E16               	movwf	___awdiv@quotient+1,c
  5642  001B4E  0E00               	movlw	0
  5643  001B50  6E15               	movwf	___awdiv@quotient,c
  5644  001B52  5011               	movf	___awdiv@divisor,w,c
  5645  001B54  1012               	iorwf	___awdiv@divisor+1,w,c
  5646  001B56  B4D8               	btfsc	status,2,c
  5647  001B58  D021               	goto	l4685
  5648  001B5A  0E01               	movlw	1
  5649  001B5C  6E13               	movwf	___awdiv@counter,c
  5650  001B5E  D005               	goto	l4671
  5651  001B60                     l4669:
  5652  001B60  90D8               	bcf	status,0,c
  5653  001B62  3611               	rlcf	___awdiv@divisor,f,c
  5654  001B64  3612               	rlcf	___awdiv@divisor+1,f,c
  5655  001B66  2A13               	incf	___awdiv@counter,f,c
  5656  001B68  D000               	goto	l4671
  5657  001B6A                     l4671:
  5658  001B6A  BE12               	btfsc	___awdiv@divisor+1,7,c
  5659  001B6C  D002               	goto	l4673
  5660  001B6E  D7F8               	goto	l4669
  5661  001B70  D000               	goto	l4673
  5662  001B72                     l4673:
  5663  001B72  90D8               	bcf	status,0,c
  5664  001B74  3615               	rlcf	___awdiv@quotient,f,c
  5665  001B76  3616               	rlcf	___awdiv@quotient+1,f,c
  5666  001B78  5011               	movf	___awdiv@divisor,w,c
  5667  001B7A  5C0F               	subwf	___awdiv@dividend,w,c
  5668  001B7C  5012               	movf	___awdiv@divisor+1,w,c
  5669  001B7E  5810               	subwfb	___awdiv@dividend+1,w,c
  5670  001B80  A0D8               	btfss	status,0,c
  5671  001B82  D006               	goto	l4681
  5672  001B84  5011               	movf	___awdiv@divisor,w,c
  5673  001B86  5E0F               	subwf	___awdiv@dividend,f,c
  5674  001B88  5012               	movf	___awdiv@divisor+1,w,c
  5675  001B8A  5A10               	subwfb	___awdiv@dividend+1,f,c
  5676  001B8C  8015               	bsf	___awdiv@quotient,0,c
  5677  001B8E  D000               	goto	l4681
  5678  001B90                     l4681:
  5679  001B90  90D8               	bcf	status,0,c
  5680  001B92  3212               	rrcf	___awdiv@divisor+1,f,c
  5681  001B94  3211               	rrcf	___awdiv@divisor,f,c
  5682  001B96  2E13               	decfsz	___awdiv@counter,f,c
  5683  001B98  D7EC               	goto	l4673
  5684  001B9A  D000               	goto	l4685
  5685  001B9C                     l4685:
  5686  001B9C  5014               	movf	___awdiv@sign,w,c
  5687  001B9E  B4D8               	btfsc	status,2,c
  5688  001BA0  D005               	goto	l4689
  5689  001BA2  6C15               	negf	___awdiv@quotient,c
  5690  001BA4  1E16               	comf	___awdiv@quotient+1,f,c
  5691  001BA6  B0D8               	btfsc	status,0,c
  5692  001BA8  2A16               	incf	___awdiv@quotient+1,f,c
  5693  001BAA  D000               	goto	l4689
  5694  001BAC                     l4689:
  5695  001BAC  C015  F00F         	movff	___awdiv@quotient,?___awdiv
  5696  001BB0  C016  F010         	movff	___awdiv@quotient+1,?___awdiv+1
  5697  001BB4  D000               	goto	l789
  5698  001BB6                     l789:
  5699  001BB6  0012               	return		;funcret
  5700  001BB8                     __end_of___awdiv:
  5701                           	opt stack 0
  5702                           tblptru	equ	0xFF8
  5703                           tblptrh	equ	0xFF7
  5704                           tblptrl	equ	0xFF6
  5705                           tablat	equ	0xFF5
  5706                           intcon	equ	0xFF2
  5707                           intcon2	equ	0xFF1
  5708                           intcon3	equ	0xFF0
  5709                           postinc0	equ	0xFEE
  5710                           wreg	equ	0xFE8
  5711                           postdec1	equ	0xFE5
  5712                           fsr1l	equ	0xFE1
  5713                           status	equ	0xFD8
  5714                           
  5715 ;; *************** function _Wait_One_Second_With_Beep *****************
  5716 ;; Defined at:
  5717 ;;		line 593 in file "Lab8pC.c"
  5718 ;; Parameters:    Size  Location     Type
  5719 ;;		None
  5720 ;; Auto vars:     Size  Location     Type
  5721 ;;		None
  5722 ;; Return value:  Size  Location     Type
  5723 ;;		None               void
  5724 ;; Registers used:
  5725 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5726 ;; Tracked objects:
  5727 ;;		On entry : 0/0
  5728 ;;		On exit  : 0/0
  5729 ;;		Unchanged: 0/0
  5730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5731 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5732 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5733 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5734 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5735 ;;Total ram usage:        0 bytes
  5736 ;; Hardware stack levels used:    1
  5737 ;; Hardware stack levels required when called:    9
  5738 ;; This function calls:
  5739 ;;		_Activate_Buzzer
  5740 ;;		_Deactivate_Buzzer
  5741 ;;		_Wait_Half_Second
  5742 ;;		_drawtext
  5743 ;;		_strcpy
  5744 ;; This function is called by:
  5745 ;;		_PED_Control
  5746 ;; This function uses a non-reentrant model
  5747 ;;
  5748                           
  5749                           	psect	text24
  5750  001D5E                     __ptext24:
  5751                           	opt stack 0
  5752  001D5E                     _Wait_One_Second_With_Beep:
  5753                           	opt stack 19
  5754                           
  5755                           ;Lab8pC.c: 595: PORTDbits.RD7 = 1;
  5756                           
  5757                           ;incstack = 0
  5758  001D5E  8E83               	bsf	3971,7,c	;volatile
  5759                           
  5760                           ;Lab8pC.c: 596: Activate_Buzzer();
  5761  001D60  EC1F  F013         	call	_Activate_Buzzer	;wreg free
  5762                           
  5763                           ;Lab8pC.c: 597: strcpy(txt,"*");
  5764  001D64  C047  F00F         	movff	_txt,strcpy@to
  5765  001D68  C048  F010         	movff	_txt+1,strcpy@to+1
  5766  001D6C  0EFD               	movlw	low STR_5
  5767  001D6E  6E11               	movwf	strcpy@from,c
  5768  001D70  0EFF               	movlw	high STR_5
  5769  001D72  6E12               	movwf	strcpy@from+1,c
  5770  001D74  EC59  F012         	call	_strcpy	;wreg free
  5771                           
  5772                           ;Lab8pC.c: 598: drawtext(120,10,txt,0xFFFF,0x0000,1);
  5773  001D78  0E0A               	movlw	10
  5774  001D7A  6E37               	movwf	drawtext@y,c
  5775  001D7C  C047  F038         	movff	_txt,drawtext@_text
  5776  001D80  C048  F039         	movff	_txt+1,drawtext@_text+1
  5777  001D84  0EFF               	movlw	255
  5778  001D86  6E3B               	movwf	drawtext@color+1,c
  5779  001D88  683A               	setf	drawtext@color,c
  5780  001D8A  0E00               	movlw	0
  5781  001D8C  6E3D               	movwf	drawtext@bg+1,c
  5782  001D8E  0E00               	movlw	0
  5783  001D90  6E3C               	movwf	drawtext@bg,c
  5784  001D92  0E01               	movlw	1
  5785  001D94  6E3E               	movwf	drawtext@size,c
  5786  001D96  0E78               	movlw	120
  5787  001D98  ECCD  F009         	call	_drawtext
  5788                           
  5789                           ;Lab8pC.c: 599: Wait_Half_Second();
  5790  001D9C  ECE9  F012         	call	_Wait_Half_Second	;wreg free
  5791                           
  5792                           ;Lab8pC.c: 600: PORTDbits.RD7 = 0;
  5793  001DA0  9E83               	bcf	3971,7,c	;volatile
  5794                           
  5795                           ;Lab8pC.c: 601: strcpy(txt," ");
  5796  001DA2  C047  F00F         	movff	_txt,strcpy@to
  5797  001DA6  C048  F010         	movff	_txt+1,strcpy@to+1
  5798  001DAA  0EFB               	movlw	low STR_14
  5799  001DAC  6E11               	movwf	strcpy@from,c
  5800  001DAE  0EFF               	movlw	high STR_14
  5801  001DB0  6E12               	movwf	strcpy@from+1,c
  5802  001DB2  EC59  F012         	call	_strcpy	;wreg free
  5803                           
  5804                           ;Lab8pC.c: 602: drawtext(120,10,txt,0xFFFF,0x0000,1);
  5805  001DB6  0E0A               	movlw	10
  5806  001DB8  6E37               	movwf	drawtext@y,c
  5807  001DBA  C047  F038         	movff	_txt,drawtext@_text
  5808  001DBE  C048  F039         	movff	_txt+1,drawtext@_text+1
  5809  001DC2  0EFF               	movlw	255
  5810  001DC4  6E3B               	movwf	drawtext@color+1,c
  5811  001DC6  683A               	setf	drawtext@color,c
  5812  001DC8  0E00               	movlw	0
  5813  001DCA  6E3D               	movwf	drawtext@bg+1,c
  5814  001DCC  0E00               	movlw	0
  5815  001DCE  6E3C               	movwf	drawtext@bg,c
  5816  001DD0  0E01               	movlw	1
  5817  001DD2  6E3E               	movwf	drawtext@size,c
  5818  001DD4  0E78               	movlw	120
  5819  001DD6  ECCD  F009         	call	_drawtext
  5820                           
  5821                           ;Lab8pC.c: 603: Deactivate_Buzzer ();
  5822  001DDA  EC57  F013         	call	_Deactivate_Buzzer	;wreg free
  5823                           
  5824                           ;Lab8pC.c: 604: Wait_Half_Second();
  5825  001DDE  ECE9  F012         	call	_Wait_Half_Second	;wreg free
  5826  001DE2  0012               	return		;funcret
  5827  001DE4                     __end_of_Wait_One_Second_With_Beep:
  5828                           	opt stack 0
  5829                           tblptru	equ	0xFF8
  5830                           tblptrh	equ	0xFF7
  5831                           tblptrl	equ	0xFF6
  5832                           tablat	equ	0xFF5
  5833                           intcon	equ	0xFF2
  5834                           intcon2	equ	0xFF1
  5835                           intcon3	equ	0xFF0
  5836                           postinc0	equ	0xFEE
  5837                           wreg	equ	0xFE8
  5838                           postdec1	equ	0xFE5
  5839                           fsr1l	equ	0xFE1
  5840                           status	equ	0xFD8
  5841                           
  5842 ;; *************** function _Deactivate_Buzzer *****************
  5843 ;; Defined at:
  5844 ;;		line 452 in file "Lab8pC.c"
  5845 ;; Parameters:    Size  Location     Type
  5846 ;;		None
  5847 ;; Auto vars:     Size  Location     Type
  5848 ;;		None
  5849 ;; Return value:  Size  Location     Type
  5850 ;;		None               void
  5851 ;; Registers used:
  5852 ;;		wreg, status,2
  5853 ;; Tracked objects:
  5854 ;;		On entry : 0/0
  5855 ;;		On exit  : 0/0
  5856 ;;		Unchanged: 0/0
  5857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5858 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5859 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5860 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5861 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5862 ;;Total ram usage:        0 bytes
  5863 ;; Hardware stack levels used:    1
  5864 ;; Hardware stack levels required when called:    2
  5865 ;; This function calls:
  5866 ;;		Nothing
  5867 ;; This function is called by:
  5868 ;;		_Wait_One_Second_With_Beep
  5869 ;; This function uses a non-reentrant model
  5870 ;;
  5871                           
  5872                           	psect	text25
  5873  0026AE                     __ptext25:
  5874                           	opt stack 0
  5875  0026AE                     _Deactivate_Buzzer:
  5876                           	opt stack 25
  5877                           
  5878                           ;Lab8pC.c: 454: CCP2CON = 0x0;
  5879                           
  5880                           ;incstack = 0
  5881  0026AE  0E00               	movlw	0
  5882  0026B0  6EBA               	movwf	4026,c	;volatile
  5883                           
  5884                           ;Lab8pC.c: 455: PORTBbits.RB3 = 0;
  5885  0026B2  9681               	bcf	3969,3,c	;volatile
  5886  0026B4  0012               	return		;funcret
  5887  0026B6                     __end_of_Deactivate_Buzzer:
  5888                           	opt stack 0
  5889                           tblptru	equ	0xFF8
  5890                           tblptrh	equ	0xFF7
  5891                           tblptrl	equ	0xFF6
  5892                           tablat	equ	0xFF5
  5893                           intcon	equ	0xFF2
  5894                           intcon2	equ	0xFF1
  5895                           intcon3	equ	0xFF0
  5896                           postinc0	equ	0xFEE
  5897                           wreg	equ	0xFE8
  5898                           postdec1	equ	0xFE5
  5899                           fsr1l	equ	0xFE1
  5900                           status	equ	0xFD8
  5901                           
  5902 ;; *************** function _Activate_Buzzer *****************
  5903 ;; Defined at:
  5904 ;;		line 444 in file "Lab8pC.c"
  5905 ;; Parameters:    Size  Location     Type
  5906 ;;		None
  5907 ;; Auto vars:     Size  Location     Type
  5908 ;;		None
  5909 ;; Return value:  Size  Location     Type
  5910 ;;		None               void
  5911 ;; Registers used:
  5912 ;;		wreg, status,2
  5913 ;; Tracked objects:
  5914 ;;		On entry : 0/0
  5915 ;;		On exit  : 0/0
  5916 ;;		Unchanged: 0/0
  5917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5918 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5919 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5920 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5921 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5922 ;;Total ram usage:        0 bytes
  5923 ;; Hardware stack levels used:    1
  5924 ;; Hardware stack levels required when called:    2
  5925 ;; This function calls:
  5926 ;;		Nothing
  5927 ;; This function is called by:
  5928 ;;		_Wait_One_Second_With_Beep
  5929 ;; This function uses a non-reentrant model
  5930 ;;
  5931                           
  5932                           	psect	text26
  5933  00263E                     __ptext26:
  5934                           	opt stack 0
  5935  00263E                     _Activate_Buzzer:
  5936                           	opt stack 25
  5937                           
  5938                           ;Lab8pC.c: 446: PR2 = 0b11111001 ;
  5939                           
  5940                           ;incstack = 0
  5941  00263E  0EF9               	movlw	249
  5942  002640  6ECB               	movwf	4043,c	;volatile
  5943                           
  5944                           ;Lab8pC.c: 447: T2CON = 0b00000101 ;
  5945  002642  0E05               	movlw	5
  5946  002644  6ECA               	movwf	4042,c	;volatile
  5947                           
  5948                           ;Lab8pC.c: 448: CCPR2L = 0b01001010 ;
  5949  002646  0E4A               	movlw	74
  5950  002648  6EBB               	movwf	4027,c	;volatile
  5951                           
  5952                           ;Lab8pC.c: 449: CCP2CON = 0b00111100 ;
  5953  00264A  0E3C               	movlw	60
  5954  00264C  6EBA               	movwf	4026,c	;volatile
  5955  00264E  0012               	return		;funcret
  5956  002650                     __end_of_Activate_Buzzer:
  5957                           	opt stack 0
  5958                           tblptru	equ	0xFF8
  5959                           tblptrh	equ	0xFF7
  5960                           tblptrl	equ	0xFF6
  5961                           tablat	equ	0xFF5
  5962                           intcon	equ	0xFF2
  5963                           intcon2	equ	0xFF1
  5964                           intcon3	equ	0xFF0
  5965                           postinc0	equ	0xFEE
  5966                           wreg	equ	0xFE8
  5967                           postdec1	equ	0xFE5
  5968                           fsr1l	equ	0xFE1
  5969                           status	equ	0xFD8
  5970                           
  5971 ;; *************** function _Do_Flashing *****************
  5972 ;; Defined at:
  5973 ;;		line 271 in file "Lab8pC.c"
  5974 ;; Parameters:    Size  Location     Type
  5975 ;;		None
  5976 ;; Auto vars:     Size  Location     Type
  5977 ;;		None
  5978 ;; Return value:  Size  Location     Type
  5979 ;;		None               void
  5980 ;; Registers used:
  5981 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5982 ;; Tracked objects:
  5983 ;;		On entry : 0/0
  5984 ;;		On exit  : 0/0
  5985 ;;		Unchanged: 0/0
  5986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5987 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5988 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5989 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5990 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5991 ;;Total ram usage:        0 bytes
  5992 ;; Hardware stack levels used:    1
  5993 ;; Hardware stack levels required when called:   11
  5994 ;; This function calls:
  5995 ;;		_Set_EW
  5996 ;;		_Set_EW_LT
  5997 ;;		_Set_NS
  5998 ;;		_Set_NS_LT
  5999 ;;		_Wait_One_Second
  6000 ;; This function is called by:
  6001 ;;		_Day_Mode
  6002 ;;		_Night_Mode
  6003 ;; This function uses a non-reentrant model
  6004 ;;
  6005                           
  6006                           	psect	text27
  6007  001FDE                     __ptext27:
  6008                           	opt stack 0
  6009  001FDE                     _Do_Flashing:
  6010                           	opt stack 18
  6011                           
  6012                           ;Lab8pC.c: 273: if(FLASHING_REQUEST==1)
  6013                           
  6014                           ;incstack = 0
  6015  001FDE  044C               	decf	_FLASHING_REQUEST,w,c
  6016  001FE0  A4D8               	btfss	status,2,c
  6017  001FE2  D031               	goto	l398
  6018                           
  6019                           ;Lab8pC.c: 274: {
  6020                           ;Lab8pC.c: 275: FLASHING=1;
  6021  001FE4  0E01               	movlw	1
  6022  001FE6  6E4B               	movwf	_FLASHING,c
  6023                           
  6024                           ;Lab8pC.c: 276: FLASHING_REQUEST=0;
  6025  001FE8  0E00               	movlw	0
  6026  001FEA  6E4C               	movwf	_FLASHING_REQUEST,c
  6027                           
  6028                           ;Lab8pC.c: 277: while(FLASHING==1)
  6029  001FEC  D027               	goto	l5041
  6030  001FEE                     l5015:
  6031                           
  6032                           ;Lab8pC.c: 278: {
  6033                           ;Lab8pC.c: 279: if(FLASHING_REQUEST==1)
  6034  001FEE  044C               	decf	_FLASHING_REQUEST,w,c
  6035  001FF0  A4D8               	btfss	status,2,c
  6036  001FF2  D005               	goto	l5019
  6037                           
  6038                           ;Lab8pC.c: 280: {
  6039                           ;Lab8pC.c: 281: FLASHING_REQUEST=0;
  6040  001FF4  0E00               	movlw	0
  6041  001FF6  6E4C               	movwf	_FLASHING_REQUEST,c
  6042                           
  6043                           ;Lab8pC.c: 282: FLASHING=0;
  6044  001FF8  0E00               	movlw	0
  6045  001FFA  6E4B               	movwf	_FLASHING,c
  6046                           
  6047                           ;Lab8pC.c: 283: }
  6048  001FFC  D01F               	goto	l5041
  6049  001FFE                     l5019:
  6050                           
  6051                           ;Lab8pC.c: 284: else
  6052                           ;Lab8pC.c: 285: {
  6053                           ;Lab8pC.c: 286: FLASHING=1;
  6054  001FFE  0E01               	movlw	1
  6055  002000  6E4B               	movwf	_FLASHING,c
  6056                           
  6057                           ;Lab8pC.c: 287: Set_EW(1);
  6058  002002  0E01               	movlw	1
  6059  002004  ECBE  F011         	call	_Set_EW
  6060                           
  6061                           ;Lab8pC.c: 288: Set_EW_LT(1);
  6062  002008  0E01               	movlw	1
  6063  00200A  EC9A  F011         	call	_Set_EW_LT
  6064                           
  6065                           ;Lab8pC.c: 289: Set_NS_LT(1);
  6066  00200E  0E01               	movlw	1
  6067  002010  EC52  F011         	call	_Set_NS_LT
  6068                           
  6069                           ;Lab8pC.c: 290: Set_NS(1);
  6070  002014  0E01               	movlw	1
  6071  002016  EC76  F011         	call	_Set_NS
  6072                           
  6073                           ;Lab8pC.c: 291: Wait_One_Second();
  6074  00201A  EC76  F00F         	call	_Wait_One_Second	;wreg free
  6075                           
  6076                           ;Lab8pC.c: 292: Set_EW(0);
  6077  00201E  0E00               	movlw	0
  6078  002020  ECBE  F011         	call	_Set_EW
  6079                           
  6080                           ;Lab8pC.c: 293: Set_EW_LT(0);
  6081  002024  0E00               	movlw	0
  6082  002026  EC9A  F011         	call	_Set_EW_LT
  6083                           
  6084                           ;Lab8pC.c: 294: Set_NS_LT(0);
  6085  00202A  0E00               	movlw	0
  6086  00202C  EC52  F011         	call	_Set_NS_LT
  6087                           
  6088                           ;Lab8pC.c: 295: Set_NS(0);
  6089  002030  0E00               	movlw	0
  6090  002032  EC76  F011         	call	_Set_NS
  6091                           
  6092                           ;Lab8pC.c: 296: Wait_One_Second();
  6093  002036  EC76  F00F         	call	_Wait_One_Second	;wreg free
  6094  00203A  D000               	goto	l5041
  6095  00203C                     l5041:
  6096  00203C  044B               	decf	_FLASHING,w,c
  6097  00203E  A4D8               	btfss	status,2,c
  6098  002040  D002               	goto	l398
  6099  002042  D7D5               	goto	l5015
  6100  002044  D000               	goto	l398
  6101  002046                     l398:
  6102  002046  0012               	return		;funcret
  6103  002048                     __end_of_Do_Flashing:
  6104                           	opt stack 0
  6105                           tblptru	equ	0xFF8
  6106                           tblptrh	equ	0xFF7
  6107                           tblptrl	equ	0xFF6
  6108                           tablat	equ	0xFF5
  6109                           intcon	equ	0xFF2
  6110                           intcon2	equ	0xFF1
  6111                           intcon3	equ	0xFF0
  6112                           postinc0	equ	0xFEE
  6113                           wreg	equ	0xFE8
  6114                           postdec1	equ	0xFE5
  6115                           fsr1l	equ	0xFE1
  6116                           status	equ	0xFD8
  6117                           
  6118 ;; *************** function _Wait_One_Second *****************
  6119 ;; Defined at:
  6120 ;;		line 579 in file "Lab8pC.c"
  6121 ;; Parameters:    Size  Location     Type
  6122 ;;		None
  6123 ;; Auto vars:     Size  Location     Type
  6124 ;;		None
  6125 ;; Return value:  Size  Location     Type
  6126 ;;		None               void
  6127 ;; Registers used:
  6128 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6129 ;; Tracked objects:
  6130 ;;		On entry : 0/0
  6131 ;;		On exit  : 0/0
  6132 ;;		Unchanged: 0/0
  6133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6134 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6135 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6136 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6137 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6138 ;;Total ram usage:        0 bytes
  6139 ;; Hardware stack levels used:    1
  6140 ;; Hardware stack levels required when called:   10
  6141 ;; This function calls:
  6142 ;;		_Wait_Half_Second
  6143 ;;		_drawtext
  6144 ;;		_strcpy
  6145 ;;		_update_LCD_misc
  6146 ;; This function is called by:
  6147 ;;		_Do_Flashing
  6148 ;;		_Wait_N_Seconds
  6149 ;; This function uses a non-reentrant model
  6150 ;;
  6151                           
  6152                           	psect	text28
  6153  001EEC                     __ptext28:
  6154                           	opt stack 0
  6155  001EEC                     _Wait_One_Second:
  6156                           	opt stack 18
  6157                           
  6158                           ;Lab8pC.c: 581: PORTDbits.RD7 = 1;
  6159                           
  6160                           ;incstack = 0
  6161  001EEC  8E83               	bsf	3971,7,c	;volatile
  6162                           
  6163                           ;Lab8pC.c: 582: strcpy(txt,"*");
  6164  001EEE  C047  F00F         	movff	_txt,strcpy@to
  6165  001EF2  C048  F010         	movff	_txt+1,strcpy@to+1
  6166  001EF6  0EFD               	movlw	low STR_5
  6167  001EF8  6E11               	movwf	strcpy@from,c
  6168  001EFA  0EFF               	movlw	high STR_5
  6169  001EFC  6E12               	movwf	strcpy@from+1,c
  6170  001EFE  EC59  F012         	call	_strcpy	;wreg free
  6171                           
  6172                           ;Lab8pC.c: 583: drawtext(120,10,txt,0xFFFF,0x0000,1);
  6173  001F02  0E0A               	movlw	10
  6174  001F04  6E37               	movwf	drawtext@y,c
  6175  001F06  C047  F038         	movff	_txt,drawtext@_text
  6176  001F0A  C048  F039         	movff	_txt+1,drawtext@_text+1
  6177  001F0E  0EFF               	movlw	255
  6178  001F10  6E3B               	movwf	drawtext@color+1,c
  6179  001F12  683A               	setf	drawtext@color,c
  6180  001F14  0E00               	movlw	0
  6181  001F16  6E3D               	movwf	drawtext@bg+1,c
  6182  001F18  0E00               	movlw	0
  6183  001F1A  6E3C               	movwf	drawtext@bg,c
  6184  001F1C  0E01               	movlw	1
  6185  001F1E  6E3E               	movwf	drawtext@size,c
  6186  001F20  0E78               	movlw	120
  6187  001F22  ECCD  F009         	call	_drawtext
  6188                           
  6189                           ;Lab8pC.c: 584: Wait_Half_Second();
  6190  001F26  ECE9  F012         	call	_Wait_Half_Second	;wreg free
  6191                           
  6192                           ;Lab8pC.c: 586: PORTDbits.RD7 = 0;
  6193  001F2A  9E83               	bcf	3971,7,c	;volatile
  6194                           
  6195                           ;Lab8pC.c: 587: strcpy(txt," ");
  6196  001F2C  C047  F00F         	movff	_txt,strcpy@to
  6197  001F30  C048  F010         	movff	_txt+1,strcpy@to+1
  6198  001F34  0EFB               	movlw	low STR_14
  6199  001F36  6E11               	movwf	strcpy@from,c
  6200  001F38  0EFF               	movlw	high STR_14
  6201  001F3A  6E12               	movwf	strcpy@from+1,c
  6202  001F3C  EC59  F012         	call	_strcpy	;wreg free
  6203                           
  6204                           ;Lab8pC.c: 588: drawtext(120,10,txt,0xFFFF,0x0000,1);
  6205  001F40  0E0A               	movlw	10
  6206  001F42  6E37               	movwf	drawtext@y,c
  6207  001F44  C047  F038         	movff	_txt,drawtext@_text
  6208  001F48  C048  F039         	movff	_txt+1,drawtext@_text+1
  6209  001F4C  0EFF               	movlw	255
  6210  001F4E  6E3B               	movwf	drawtext@color+1,c
  6211  001F50  683A               	setf	drawtext@color,c
  6212  001F52  0E00               	movlw	0
  6213  001F54  6E3D               	movwf	drawtext@bg+1,c
  6214  001F56  0E00               	movlw	0
  6215  001F58  6E3C               	movwf	drawtext@bg,c
  6216  001F5A  0E01               	movlw	1
  6217  001F5C  6E3E               	movwf	drawtext@size,c
  6218  001F5E  0E78               	movlw	120
  6219  001F60  ECCD  F009         	call	_drawtext
  6220                           
  6221                           ;Lab8pC.c: 589: Wait_Half_Second();
  6222  001F64  ECE9  F012         	call	_Wait_Half_Second	;wreg free
  6223                           
  6224                           ;Lab8pC.c: 590: update_LCD_misc();
  6225  001F68  EC51  F005         	call	_update_LCD_misc	;wreg free
  6226  001F6C  0012               	return		;funcret
  6227  001F6E                     __end_of_Wait_One_Second:
  6228                           	opt stack 0
  6229                           tblptru	equ	0xFF8
  6230                           tblptrh	equ	0xFF7
  6231                           tblptrl	equ	0xFF6
  6232                           tablat	equ	0xFF5
  6233                           intcon	equ	0xFF2
  6234                           intcon2	equ	0xFF1
  6235                           intcon3	equ	0xFF0
  6236                           postinc0	equ	0xFEE
  6237                           wreg	equ	0xFE8
  6238                           postdec1	equ	0xFE5
  6239                           fsr1l	equ	0xFE1
  6240                           status	equ	0xFD8
  6241                           
  6242 ;; *************** function _update_LCD_misc *****************
  6243 ;; Defined at:
  6244 ;;		line 723 in file "Lab8pC.c"
  6245 ;; Parameters:    Size  Location     Type
  6246 ;;		None
  6247 ;; Auto vars:     Size  Location     Type
  6248 ;;  nStep           2    7[BANK0 ] int 
  6249 ;; Return value:  Size  Location     Type
  6250 ;;		None               void
  6251 ;; Registers used:
  6252 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6253 ;; Tracked objects:
  6254 ;;		On entry : 0/0
  6255 ;;		On exit  : 0/0
  6256 ;;		Unchanged: 0/0
  6257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6259 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6260 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6261 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6262 ;;Total ram usage:        2 bytes
  6263 ;; Hardware stack levels used:    1
  6264 ;; Hardware stack levels required when called:    9
  6265 ;; This function calls:
  6266 ;;		___awtoft
  6267 ;;		___ftdiv
  6268 ;;		___ftge
  6269 ;;		___wmul
  6270 ;;		_drawtext
  6271 ;;		_get_full_ADC
  6272 ;; This function is called by:
  6273 ;;		_Wait_One_Second
  6274 ;; This function uses a non-reentrant model
  6275 ;;
  6276                           
  6277                           	psect	text29
  6278  000AA2                     __ptext29:
  6279                           	opt stack 0
  6280  000AA2                     _update_LCD_misc:
  6281                           	opt stack 18
  6282                           
  6283                           ;Lab8pC.c: 725: int nStep = get_full_ADC();
  6284                           
  6285                           ;incstack = 0
  6286  000AA2  ECC8  F012         	call	_get_full_ADC	;wreg free
  6287  000AA6  C00F  F0AE         	movff	?_get_full_ADC,update_LCD_misc@nStep
  6288  000AAA  C010  F0AF         	movff	?_get_full_ADC+1,update_LCD_misc@nStep+1
  6289                           
  6290                           ;Lab8pC.c: 726: volt = nStep * 5 /1024.0;
  6291  000AAE  C0AE  F00F         	movff	update_LCD_misc@nStep,___wmul@multiplier
  6292  000AB2  C0AF  F010         	movff	update_LCD_misc@nStep+1,___wmul@multiplier+1
  6293  000AB6  0E00               	movlw	0
  6294  000AB8  6E12               	movwf	___wmul@multiplicand+1,c
  6295  000ABA  0E05               	movlw	5
  6296  000ABC  6E11               	movwf	___wmul@multiplicand,c
  6297  000ABE  ECB4  F012         	call	___wmul	;wreg free
  6298  000AC2  C00F  F017         	movff	?___wmul,___awtoft@c
  6299  000AC6  C010  F018         	movff	?___wmul+1,___awtoft@c+1
  6300  000ACA  EC20  F012         	call	___awtoft	;wreg free
  6301  000ACE  C017  F01B         	movff	?___awtoft,___ftdiv@f1
  6302  000AD2  C018  F01C         	movff	?___awtoft+1,___ftdiv@f1+1
  6303  000AD6  C019  F01D         	movff	?___awtoft+2,___ftdiv@f1+2
  6304  000ADA  0E00               	movlw	0
  6305  000ADC  6E1E               	movwf	___ftdiv@f2,c
  6306  000ADE  0E80               	movlw	128
  6307  000AE0  6E1F               	movwf	___ftdiv@f2+1,c
  6308  000AE2  0E44               	movlw	68
  6309  000AE4  6E20               	movwf	___ftdiv@f2+2,c
  6310  000AE6  ECCB  F00A         	call	___ftdiv	;wreg free
  6311  000AEA  C01B  F042         	movff	?___ftdiv,_volt
  6312  000AEE  C01C  F043         	movff	?___ftdiv+1,_volt+1
  6313  000AF2  C01D  F044         	movff	?___ftdiv+2,_volt+2
  6314                           
  6315                           ;Lab8pC.c: 727: SW_MODE = volt < 2.5 ? 1:0;
  6316  000AF6  C042  F00F         	movff	_volt,___ftge@ff1
  6317  000AFA  C043  F010         	movff	_volt+1,___ftge@ff1+1
  6318  000AFE  C044  F011         	movff	_volt+2,___ftge@ff1+2
  6319  000B02  0E00               	movlw	0
  6320  000B04  6E12               	movwf	___ftge@ff2,c
  6321  000B06  0E20               	movlw	32
  6322  000B08  6E13               	movwf	___ftge@ff2+1,c
  6323  000B0A  0E40               	movlw	64
  6324  000B0C  6E14               	movwf	___ftge@ff2+2,c
  6325  000B0E  ECDC  F00D         	call	___ftge	;wreg free
  6326  000B12  B0D8               	btfsc	status,0,c
  6327  000B14  D002               	goto	u3320
  6328  000B16  0E01               	movlw	1
  6329  000B18  D001               	goto	u3330
  6330  000B1A                     u3320:
  6331  000B1A  0E00               	movlw	0
  6332  000B1C                     u3330:
  6333  000B1C  6E53               	movwf	_SW_MODE,c
  6334                           
  6335                           ;Lab8pC.c: 729: SW_EWPED = EW_PED_SW;
  6336  000B1E  C04A  F050         	movff	_EW_PED_SW,_SW_EWPED
  6337                           
  6338                           ;Lab8pC.c: 730: SW_EWLT = PORTAbits.RA4;
  6339  000B22  0E00               	movlw	0
  6340  000B24  B880               	btfsc	3968,4,c	;volatile
  6341  000B26  0E01               	movlw	1
  6342  000B28  6E4F               	movwf	_SW_EWLT,c
  6343                           
  6344                           ;Lab8pC.c: 731: SW_NSPED = NS_PED_SW;
  6345  000B2A  C04D  F055         	movff	_NS_PED_SW,_SW_NSPED
  6346                           
  6347                           ;Lab8pC.c: 732: SW_NSLT = PORTAbits.RA5;
  6348  000B2E  0E00               	movlw	0
  6349  000B30  BA80               	btfsc	3968,5,c	;volatile
  6350  000B32  0E01               	movlw	1
  6351  000B34  6E54               	movwf	_SW_NSLT,c
  6352                           
  6353                           ;Lab8pC.c: 733: SW_FLASHING_REQUEST = FLASHING_REQUEST;
  6354  000B36  C04C  F052         	movff	_FLASHING_REQUEST,_SW_FLASHING_REQUEST
  6355                           
  6356                           ;Lab8pC.c: 734: SW_FLASHING = FLASHING;
  6357  000B3A  C04B  F051         	movff	_FLASHING,_SW_FLASHING
  6358                           
  6359                           ;Lab8pC.c: 736: if (SW_MODE == 0) SW_MODE_Txt[0]= 'N'; else SW_MODE_Txt[0] = 'D';
  6360  000B3E  5053               	movf	_SW_MODE,w,c
  6361  000B40  A4D8               	btfss	status,2,c
  6362  000B42  D002               	goto	l4607
  6363  000B44  0E4E               	movlw	78
  6364  000B46  D001               	goto	L1
  6365  000B48                     l4607:
  6366  000B48  0E44               	movlw	68
  6367  000B4A                     L1:
  6368  000B4A  6E6C               	movwf	_SW_MODE_Txt,c
  6369                           
  6370                           ;Lab8pC.c: 737: if (SW_NSPED == 0) SW_NSPED_Txt[0] = '0'; else SW_NSPED_Txt[0] = '1';
  6371  000B4C  5055               	movf	_SW_NSPED,w,c
  6372  000B4E  A4D8               	btfss	status,2,c
  6373  000B50  D002               	goto	l4611
  6374  000B52  0E30               	movlw	48
  6375  000B54  D001               	goto	L2
  6376  000B56                     l4611:
  6377  000B56  0E31               	movlw	49
  6378  000B58                     L2:
  6379  000B58  6E70               	movwf	_SW_NSPED_Txt,c
  6380                           
  6381                           ;Lab8pC.c: 738: if (SW_NSLT == 0) SW_NSLT_Txt[0] = '0'; else SW_NSLT_Txt[0] = '1';
  6382  000B5A  5054               	movf	_SW_NSLT,w,c
  6383  000B5C  A4D8               	btfss	status,2,c
  6384  000B5E  D002               	goto	l4615
  6385  000B60  0E30               	movlw	48
  6386  000B62  D001               	goto	L3
  6387  000B64                     l4615:
  6388  000B64  0E31               	movlw	49
  6389  000B66                     L3:
  6390  000B66  6E6E               	movwf	_SW_NSLT_Txt,c
  6391                           
  6392                           ;Lab8pC.c: 739: if (SW_EWPED == 0) SW_EWPED_Txt[0] = '0'; else SW_EWPED_Txt[0] = '1';
  6393  000B68  5050               	movf	_SW_EWPED,w,c
  6394  000B6A  A4D8               	btfss	status,2,c
  6395  000B6C  D002               	goto	l4619
  6396  000B6E  0E30               	movlw	48
  6397  000B70  D001               	goto	L4
  6398  000B72                     l4619:
  6399  000B72  0E31               	movlw	49
  6400  000B74                     L4:
  6401  000B74  6E6A               	movwf	_SW_EWPED_Txt,c
  6402                           
  6403                           ;Lab8pC.c: 740: if (SW_EWLT == 0) SW_EWLT_Txt[0] = '0'; else SW_EWLT_Txt[0] = '1';
  6404  000B76  504F               	movf	_SW_EWLT,w,c
  6405  000B78  A4D8               	btfss	status,2,c
  6406  000B7A  D002               	goto	l4623
  6407  000B7C  0E30               	movlw	48
  6408  000B7E  D001               	goto	L5
  6409  000B80                     l4623:
  6410  000B80  0E31               	movlw	49
  6411  000B82                     L5:
  6412  000B82  6E68               	movwf	_SW_EWLT_Txt,c
  6413                           
  6414                           ;Lab8pC.c: 741: if (SW_FLASHING_REQUEST == 0) FlashingR_Txt[0] = '0'; else FlashingR_Txt
      +                          [0] = '1';
  6415  000B84  5052               	movf	_SW_FLASHING_REQUEST,w,c
  6416  000B86  A4D8               	btfss	status,2,c
  6417  000B88  D002               	goto	l4627
  6418  000B8A  0E30               	movlw	48
  6419  000B8C  D001               	goto	L6
  6420  000B8E                     l4627:
  6421  000B8E  0E31               	movlw	49
  6422  000B90                     L6:
  6423  000B90  6E64               	movwf	_FlashingR_Txt,c
  6424                           
  6425                           ;Lab8pC.c: 742: if (SW_FLASHING == 0) FlashingS_Txt[0] = '0'; else FlashingS_Txt[0] = '1
      +                          ';
  6426  000B92  5051               	movf	_SW_FLASHING,w,c
  6427  000B94  A4D8               	btfss	status,2,c
  6428  000B96  D002               	goto	l4631
  6429  000B98  0E30               	movlw	48
  6430  000B9A  D001               	goto	L7
  6431  000B9C                     l4631:
  6432  000B9C  0E31               	movlw	49
  6433  000B9E                     L7:
  6434  000B9E  6E66               	movwf	_FlashingS_Txt,c
  6435  000BA0  D000               	goto	l4633
  6436  000BA2                     l4633:
  6437                           
  6438                           ;Lab8pC.c: 745: drawtext(35,10, Act_Mode_Txt, 0xFFFF, 0x0000, 1);
  6439  000BA2  0E0A               	movlw	10
  6440  000BA4  6E37               	movwf	drawtext@y,c
  6441  000BA6  0E62               	movlw	low _Act_Mode_Txt
  6442  000BA8  6E38               	movwf	drawtext@_text,c
  6443  000BAA  0E00               	movlw	high _Act_Mode_Txt
  6444  000BAC  6E39               	movwf	drawtext@_text+1,c
  6445  000BAE  0EFF               	movlw	255
  6446  000BB0  6E3B               	movwf	drawtext@color+1,c
  6447  000BB2  683A               	setf	drawtext@color,c
  6448  000BB4  0E00               	movlw	0
  6449  000BB6  6E3D               	movwf	drawtext@bg+1,c
  6450  000BB8  0E00               	movlw	0
  6451  000BBA  6E3C               	movwf	drawtext@bg,c
  6452  000BBC  0E01               	movlw	1
  6453  000BBE  6E3E               	movwf	drawtext@size,c
  6454  000BC0  0E23               	movlw	35
  6455  000BC2  ECCD  F009         	call	_drawtext
  6456                           
  6457                           ;Lab8pC.c: 746: drawtext(70, 10, FlashingR_Txt, 0xFFFF, 0x0000, 1);
  6458  000BC6  0E0A               	movlw	10
  6459  000BC8  6E37               	movwf	drawtext@y,c
  6460  000BCA  0E64               	movlw	low _FlashingR_Txt
  6461  000BCC  6E38               	movwf	drawtext@_text,c
  6462  000BCE  0E00               	movlw	high _FlashingR_Txt
  6463  000BD0  6E39               	movwf	drawtext@_text+1,c
  6464  000BD2  0EFF               	movlw	255
  6465  000BD4  6E3B               	movwf	drawtext@color+1,c
  6466  000BD6  683A               	setf	drawtext@color,c
  6467  000BD8  0E00               	movlw	0
  6468  000BDA  6E3D               	movwf	drawtext@bg+1,c
  6469  000BDC  0E00               	movlw	0
  6470  000BDE  6E3C               	movwf	drawtext@bg,c
  6471  000BE0  0E01               	movlw	1
  6472  000BE2  6E3E               	movwf	drawtext@size,c
  6473  000BE4  0E46               	movlw	70
  6474  000BE6  ECCD  F009         	call	_drawtext
  6475                           
  6476                           ;Lab8pC.c: 747: drawtext(100, 10, FlashingS_Txt, 0xFFFF, 0x0000, 1);
  6477  000BEA  0E0A               	movlw	10
  6478  000BEC  6E37               	movwf	drawtext@y,c
  6479  000BEE  0E66               	movlw	low _FlashingS_Txt
  6480  000BF0  6E38               	movwf	drawtext@_text,c
  6481  000BF2  0E00               	movlw	high _FlashingS_Txt
  6482  000BF4  6E39               	movwf	drawtext@_text+1,c
  6483  000BF6  0EFF               	movlw	255
  6484  000BF8  6E3B               	movwf	drawtext@color+1,c
  6485  000BFA  683A               	setf	drawtext@color,c
  6486  000BFC  0E00               	movlw	0
  6487  000BFE  6E3D               	movwf	drawtext@bg+1,c
  6488  000C00  0E00               	movlw	0
  6489  000C02  6E3C               	movwf	drawtext@bg,c
  6490  000C04  0E01               	movlw	1
  6491  000C06  6E3E               	movwf	drawtext@size,c
  6492  000C08  0E64               	movlw	100
  6493  000C0A  ECCD  F009         	call	_drawtext
  6494                           
  6495                           ;Lab8pC.c: 748: drawtext(6, 140+9, SW_EWPED_Txt, 0xFFFF, 0x0000, 1);
  6496  000C0E  0E95               	movlw	149
  6497  000C10  6E37               	movwf	drawtext@y,c
  6498  000C12  0E6A               	movlw	low _SW_EWPED_Txt
  6499  000C14  6E38               	movwf	drawtext@_text,c
  6500  000C16  0E00               	movlw	high _SW_EWPED_Txt
  6501  000C18  6E39               	movwf	drawtext@_text+1,c
  6502  000C1A  0EFF               	movlw	255
  6503  000C1C  6E3B               	movwf	drawtext@color+1,c
  6504  000C1E  683A               	setf	drawtext@color,c
  6505  000C20  0E00               	movlw	0
  6506  000C22  6E3D               	movwf	drawtext@bg+1,c
  6507  000C24  0E00               	movlw	0
  6508  000C26  6E3C               	movwf	drawtext@bg,c
  6509  000C28  0E01               	movlw	1
  6510  000C2A  6E3E               	movwf	drawtext@size,c
  6511  000C2C  0E06               	movlw	6
  6512  000C2E  ECCD  F009         	call	_drawtext
  6513                           
  6514                           ;Lab8pC.c: 749: drawtext(32, 140+9, SW_EWLT_Txt, 0xFFFF, 0x0000, 1);
  6515  000C32  0E95               	movlw	149
  6516  000C34  6E37               	movwf	drawtext@y,c
  6517  000C36  0E68               	movlw	low _SW_EWLT_Txt
  6518  000C38  6E38               	movwf	drawtext@_text,c
  6519  000C3A  0E00               	movlw	high _SW_EWLT_Txt
  6520  000C3C  6E39               	movwf	drawtext@_text+1,c
  6521  000C3E  0EFF               	movlw	255
  6522  000C40  6E3B               	movwf	drawtext@color+1,c
  6523  000C42  683A               	setf	drawtext@color,c
  6524  000C44  0E00               	movlw	0
  6525  000C46  6E3D               	movwf	drawtext@bg+1,c
  6526  000C48  0E00               	movlw	0
  6527  000C4A  6E3C               	movwf	drawtext@bg,c
  6528  000C4C  0E01               	movlw	1
  6529  000C4E  6E3E               	movwf	drawtext@size,c
  6530  000C50  0E20               	movlw	32
  6531  000C52  ECCD  F009         	call	_drawtext
  6532                           
  6533                           ;Lab8pC.c: 750: drawtext(58, 140+9, SW_NSPED_Txt, 0xFFFF, 0x0000, 1);
  6534  000C56  0E95               	movlw	149
  6535  000C58  6E37               	movwf	drawtext@y,c
  6536  000C5A  0E70               	movlw	low _SW_NSPED_Txt
  6537  000C5C  6E38               	movwf	drawtext@_text,c
  6538  000C5E  0E00               	movlw	high _SW_NSPED_Txt
  6539  000C60  6E39               	movwf	drawtext@_text+1,c
  6540  000C62  0EFF               	movlw	255
  6541  000C64  6E3B               	movwf	drawtext@color+1,c
  6542  000C66  683A               	setf	drawtext@color,c
  6543  000C68  0E00               	movlw	0
  6544  000C6A  6E3D               	movwf	drawtext@bg+1,c
  6545  000C6C  0E00               	movlw	0
  6546  000C6E  6E3C               	movwf	drawtext@bg,c
  6547  000C70  0E01               	movlw	1
  6548  000C72  6E3E               	movwf	drawtext@size,c
  6549  000C74  0E3A               	movlw	58
  6550  000C76  ECCD  F009         	call	_drawtext
  6551                           
  6552                           ;Lab8pC.c: 751: drawtext(87, 140+9, SW_NSLT_Txt, 0xFFFF, 0x0000, 1);
  6553  000C7A  0E95               	movlw	149
  6554  000C7C  6E37               	movwf	drawtext@y,c
  6555  000C7E  0E6E               	movlw	low _SW_NSLT_Txt
  6556  000C80  6E38               	movwf	drawtext@_text,c
  6557  000C82  0E00               	movlw	high _SW_NSLT_Txt
  6558  000C84  6E39               	movwf	drawtext@_text+1,c
  6559  000C86  0EFF               	movlw	255
  6560  000C88  6E3B               	movwf	drawtext@color+1,c
  6561  000C8A  683A               	setf	drawtext@color,c
  6562  000C8C  0E00               	movlw	0
  6563  000C8E  6E3D               	movwf	drawtext@bg+1,c
  6564  000C90  0E00               	movlw	0
  6565  000C92  6E3C               	movwf	drawtext@bg,c
  6566  000C94  0E01               	movlw	1
  6567  000C96  6E3E               	movwf	drawtext@size,c
  6568  000C98  0E57               	movlw	87
  6569  000C9A  ECCD  F009         	call	_drawtext
  6570                           
  6571                           ;Lab8pC.c: 752: drawtext(112, 140+9, SW_MODE_Txt, 0xFFFF, 0x0000, 1);
  6572  000C9E  0E95               	movlw	149
  6573  000CA0  6E37               	movwf	drawtext@y,c
  6574  000CA2  0E6C               	movlw	low _SW_MODE_Txt
  6575  000CA4  6E38               	movwf	drawtext@_text,c
  6576  000CA6  0E00               	movlw	high _SW_MODE_Txt
  6577  000CA8  6E39               	movwf	drawtext@_text+1,c
  6578  000CAA  0EFF               	movlw	255
  6579  000CAC  6E3B               	movwf	drawtext@color+1,c
  6580  000CAE  683A               	setf	drawtext@color,c
  6581  000CB0  0E00               	movlw	0
  6582  000CB2  6E3D               	movwf	drawtext@bg+1,c
  6583  000CB4  0E00               	movlw	0
  6584  000CB6  6E3C               	movwf	drawtext@bg,c
  6585  000CB8  0E01               	movlw	1
  6586  000CBA  6E3E               	movwf	drawtext@size,c
  6587  000CBC  0E70               	movlw	112
  6588  000CBE  ECCD  F009         	call	_drawtext
  6589  000CC2  0012               	return		;funcret
  6590  000CC4                     __end_of_update_LCD_misc:
  6591                           	opt stack 0
  6592                           tblptru	equ	0xFF8
  6593                           tblptrh	equ	0xFF7
  6594                           tblptrl	equ	0xFF6
  6595                           tablat	equ	0xFF5
  6596                           intcon	equ	0xFF2
  6597                           intcon2	equ	0xFF1
  6598                           intcon3	equ	0xFF0
  6599                           postinc0	equ	0xFEE
  6600                           wreg	equ	0xFE8
  6601                           postdec1	equ	0xFE5
  6602                           fsr1l	equ	0xFE1
  6603                           status	equ	0xFD8
  6604                           
  6605 ;; *************** function _get_full_ADC *****************
  6606 ;; Defined at:
  6607 ;;		line 381 in file "Lab8pC.c"
  6608 ;; Parameters:    Size  Location     Type
  6609 ;;		None
  6610 ;; Auto vars:     Size  Location     Type
  6611 ;;  result          2   18[COMRAM] unsigned int 
  6612 ;; Return value:  Size  Location     Type
  6613 ;;                  2   14[COMRAM] unsigned int 
  6614 ;; Registers used:
  6615 ;;		wreg, status,2, status,0
  6616 ;; Tracked objects:
  6617 ;;		On entry : 0/0
  6618 ;;		On exit  : 0/0
  6619 ;;		Unchanged: 0/0
  6620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6621 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6622 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6623 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6624 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6625 ;;Total ram usage:        6 bytes
  6626 ;; Hardware stack levels used:    1
  6627 ;; Hardware stack levels required when called:    2
  6628 ;; This function calls:
  6629 ;;		Nothing
  6630 ;; This function is called by:
  6631 ;;		_main
  6632 ;;		_update_LCD_misc
  6633 ;; This function uses a non-reentrant model
  6634 ;;
  6635                           
  6636                           	psect	text30
  6637  002590                     __ptext30:
  6638                           	opt stack 0
  6639  002590                     _get_full_ADC:
  6640                           	opt stack 28
  6641                           
  6642                           ;Lab8pC.c: 383: unsigned int result;
  6643                           ;Lab8pC.c: 384: ADCON0bits.GO=1;
  6644                           
  6645                           ;incstack = 0
  6646  002590  82C2               	bsf	4034,1,c	;volatile
  6647                           
  6648                           ;Lab8pC.c: 385: while(ADCON0bits.DONE==1);
  6649  002592  D000               	goto	l430
  6650  002594                     l430:
  6651  002594  B2C2               	btfsc	4034,1,c	;volatile
  6652  002596  D7FE               	goto	l430
  6653                           
  6654                           ;Lab8pC.c: 386: result = (ADRESH * 0x100) + ADRESL;
  6655  002598  50C4               	movf	4036,w,c	;volatile
  6656  00259A  6E12               	movwf	(??_get_full_ADC+1)& (0+255),c
  6657  00259C  6A11               	clrf	??_get_full_ADC& (0+255),c
  6658  00259E  50C3               	movf	4035,w,c	;volatile
  6659  0025A0  2411               	addwf	??_get_full_ADC,w,c
  6660  0025A2  6E13               	movwf	get_full_ADC@result,c
  6661  0025A4  0E00               	movlw	0
  6662  0025A6  2012               	addwfc	??_get_full_ADC+1,w,c
  6663  0025A8  6E14               	movwf	get_full_ADC@result+1,c
  6664                           
  6665                           ;Lab8pC.c: 388: return result;
  6666  0025AA  C013  F00F         	movff	get_full_ADC@result,?_get_full_ADC
  6667  0025AE  C014  F010         	movff	get_full_ADC@result+1,?_get_full_ADC+1
  6668  0025B2  D000               	goto	l433
  6669  0025B4                     l433:
  6670  0025B4  0012               	return		;funcret
  6671  0025B6                     __end_of_get_full_ADC:
  6672                           	opt stack 0
  6673                           tblptru	equ	0xFF8
  6674                           tblptrh	equ	0xFF7
  6675                           tblptrl	equ	0xFF6
  6676                           tablat	equ	0xFF5
  6677                           intcon	equ	0xFF2
  6678                           intcon2	equ	0xFF1
  6679                           intcon3	equ	0xFF0
  6680                           postinc0	equ	0xFEE
  6681                           wreg	equ	0xFE8
  6682                           postdec1	equ	0xFE5
  6683                           fsr1l	equ	0xFE1
  6684                           status	equ	0xFD8
  6685                           
  6686 ;; *************** function _drawtext *****************
  6687 ;; Defined at:
  6688 ;;		line 507 in file "ST7735_TFT.c"
  6689 ;; Parameters:    Size  Location     Type
  6690 ;;  x               1    wreg     unsigned char 
  6691 ;;  y               1   54[COMRAM] unsigned char 
  6692 ;;  _text           2   55[COMRAM] PTR unsigned char 
  6693 ;;		 -> NULL(0), SW_MODE_Txt(2), SW_NSLT_Txt(2), SW_NSPED_Txt(2), 
  6694 ;;		 -> SW_EWLT_Txt(2), SW_EWPED_Txt(2), PED_NS_Count(3), PED_EW_Count(3), 
  6695 ;;		 -> NSLT_Count(3), NS_Count(3), EWLT_Count(3), EW_Count(3), 
  6696 ;;		 -> FlashingS_Txt(2), FlashingR_Txt(2), Act_Mode_Txt(2), buffer(31), 
  6697 ;;  color           2   57[COMRAM] unsigned int 
  6698 ;;  bg              2   59[COMRAM] unsigned int 
  6699 ;;  size            1   61[COMRAM] unsigned char 
  6700 ;; Auto vars:     Size  Location     Type
  6701 ;;  x               1    0[BANK0 ] unsigned char 
  6702 ;;  i               2    3[BANK0 ] unsigned int 
  6703 ;;  textsize        2    1[BANK0 ] unsigned int 
  6704 ;;  cursor_x        1    6[BANK0 ] unsigned char 
  6705 ;;  cursor_y        1    5[BANK0 ] unsigned char 
  6706 ;; Return value:  Size  Location     Type
  6707 ;;		None               void
  6708 ;; Registers used:
  6709 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6710 ;; Tracked objects:
  6711 ;;		On entry : 0/0
  6712 ;;		On exit  : 0/0
  6713 ;;		Unchanged: 0/0
  6714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6715 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6716 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6717 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6718 ;;      Totals:        10       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6719 ;;Total ram usage:       17 bytes
  6720 ;; Hardware stack levels used:    1
  6721 ;; Hardware stack levels required when called:    8
  6722 ;; This function calls:
  6723 ;;		_drawChar
  6724 ;;		_strlen
  6725 ;; This function is called by:
  6726 ;;		_Initialize_Screen
  6727 ;;		_Wait_One_Second
  6728 ;;		_Wait_One_Second_With_Beep
  6729 ;;		_update_LCD_count
  6730 ;;		_update_LCD_PED_Count
  6731 ;;		_update_LCD_misc
  6732 ;; This function uses a non-reentrant model
  6733 ;;
  6734                           
  6735                           	psect	text31
  6736  00139A                     __ptext31:
  6737                           	opt stack 0
  6738  00139A                     _drawtext:
  6739                           	opt stack 19
  6740                           
  6741                           ;incstack = 0
  6742                           ;drawtext@x stored from wreg
  6743  00139A  0100               	movlb	0	; () banked
  6744  00139C  6FA7               	movwf	drawtext@x& (0+255),b
  6745                           
  6746                           ; BSR set to: 0
  6747                           ;ST7735_TFT.c: 509: unsigned char cursor_x, cursor_y;
  6748                           ;ST7735_TFT.c: 510: unsigned int textsize, i;
  6749                           ;ST7735_TFT.c: 511: cursor_x = x, cursor_y = y;
  6750  00139E  C0A7  F0AD         	movff	drawtext@x,drawtext@cursor_x
  6751                           
  6752                           ; BSR set to: 0
  6753  0013A2  C037  F0AC         	movff	drawtext@y,drawtext@cursor_y
  6754                           
  6755                           ; BSR set to: 0
  6756                           ;ST7735_TFT.c: 512: textsize = strlen(_text);
  6757  0013A6  C038  F00F         	movff	drawtext@_text,strlen@s
  6758  0013AA  C039  F010         	movff	drawtext@_text+1,strlen@s+1
  6759  0013AE  EC01  F012         	call	_strlen	;wreg free
  6760  0013B2  C00F  F0A8         	movff	?_strlen,drawtext@textsize
  6761  0013B6  C010  F0A9         	movff	?_strlen+1,drawtext@textsize+1
  6762                           
  6763                           ;ST7735_TFT.c: 513: for(i = 0; i < textsize; i++){
  6764  0013BA  0E00               	movlw	0
  6765  0013BC  0100               	movlb	0	; () banked
  6766  0013BE  6FAB               	movwf	(drawtext@i+1)& (0+255),b
  6767  0013C0  0E00               	movlw	0
  6768  0013C2  6FAA               	movwf	drawtext@i& (0+255),b
  6769  0013C4  D064               	goto	l4399
  6770  0013C6                     l4373:
  6771                           
  6772                           ; BSR set to: 0
  6773                           ;ST7735_TFT.c: 514: if(wrap && ((cursor_x + size * 5) > 128)){
  6774  0013C6  505B               	movf	_wrap,w,c
  6775  0013C8  B4D8               	btfsc	status,2,c
  6776  0013CA  D034               	goto	l4389
  6777                           
  6778                           ; BSR set to: 0
  6779  0013CC  503E               	movf	drawtext@size,w,c
  6780  0013CE  0D05               	mullw	5
  6781  0013D0  0100               	movlb	0	; () banked
  6782  0013D2  51AD               	movf	drawtext@cursor_x& (0+255),w,b
  6783  0013D4  6E3F               	movwf	??_drawtext& (0+255),c
  6784  0013D6  6A40               	clrf	(??_drawtext+1)& (0+255),c
  6785  0013D8  50F3               	movf	prodl,w,c
  6786  0013DA  263F               	addwf	??_drawtext,f,c
  6787  0013DC  50F4               	movf	prodh,w,c
  6788  0013DE  2240               	addwfc	??_drawtext+1,f,c
  6789  0013E0  BE40               	btfsc	??_drawtext+1,7,c
  6790  0013E2  D028               	goto	l4389
  6791  0013E4  5040               	movf	??_drawtext+1,w,c
  6792  0013E6  E104               	bnz	u3080
  6793  0013E8  0E81               	movlw	129
  6794  0013EA  5C3F               	subwf	??_drawtext,w,c
  6795  0013EC  A0D8               	btfss	status,0,c
  6796  0013EE  D022               	goto	l4389
  6797  0013F0                     u3080:
  6798                           
  6799                           ; BSR set to: 0
  6800                           ;ST7735_TFT.c: 515: cursor_x = 0;
  6801  0013F0  0E00               	movlw	0
  6802  0013F2  0100               	movlb	0	; () banked
  6803  0013F4  6FAD               	movwf	drawtext@cursor_x& (0+255),b
  6804                           
  6805                           ; BSR set to: 0
  6806                           ;ST7735_TFT.c: 516: cursor_y = cursor_y + size * 7 + 3 ;
  6807  0013F6  503E               	movf	drawtext@size,w,c
  6808  0013F8  0D07               	mullw	7
  6809  0013FA  50F3               	movf	prodl,w,c
  6810  0013FC  0100               	movlb	0	; () banked
  6811  0013FE  25AC               	addwf	drawtext@cursor_y& (0+255),w,b
  6812  001400  0F03               	addlw	3
  6813  001402  0100               	movlb	0	; () banked
  6814  001404  6FAC               	movwf	drawtext@cursor_y& (0+255),b
  6815                           
  6816                           ; BSR set to: 0
  6817                           ;ST7735_TFT.c: 517: if(cursor_y > 160) cursor_y = 160;
  6818  001406  0EA0               	movlw	160
  6819  001408  0100               	movlb	0	; () banked
  6820  00140A  65AC               	cpfsgt	drawtext@cursor_y& (0+255),b
  6821  00140C  D004               	goto	l4385
  6822                           
  6823                           ; BSR set to: 0
  6824  00140E  0EA0               	movlw	160
  6825  001410  0100               	movlb	0	; () banked
  6826  001412  6FAC               	movwf	drawtext@cursor_y& (0+255),b
  6827  001414  D000               	goto	l4385
  6828  001416                     l4385:
  6829                           
  6830                           ; BSR set to: 0
  6831                           ;ST7735_TFT.c: 518: if(_text[i] == 0x20) goto _skip; }
  6832  001416  0100               	movlb	0	; () banked
  6833  001418  51AA               	movf	drawtext@i& (0+255),w,b
  6834  00141A  2438               	addwf	drawtext@_text,w,c
  6835  00141C  6ED9               	movwf	fsr2l,c
  6836  00141E  0100               	movlb	0	; () banked
  6837  001420  51AB               	movf	(drawtext@i+1)& (0+255),w,b
  6838  001422  2039               	addwfc	drawtext@_text+1,w,c
  6839  001424  6EDA               	movwf	fsr2h,c
  6840  001426  0E20               	movlw	32
  6841  001428  18DE               	xorwf	postinc2,w,c
  6842  00142A  B4D8               	btfsc	status,2,c
  6843  00142C  D02C               	goto	l4397
  6844  00142E  D002               	goto	l4389
  6845                           
  6846                           ; BSR set to: 0
  6847  001430  D02A               	goto	l4397
  6848                           
  6849                           ; BSR set to: 0
  6850  001432  D000               	goto	l4389
  6851  001434                     l4389:
  6852                           
  6853                           ; BSR set to: 0
  6854                           ;ST7735_TFT.c: 519: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
  6855  001434  C0AC  F02C         	movff	drawtext@cursor_y,drawChar@y
  6856  001438  0100               	movlb	0	; () banked
  6857  00143A  51AA               	movf	drawtext@i& (0+255),w,b
  6858  00143C  2438               	addwf	drawtext@_text,w,c
  6859  00143E  6ED9               	movwf	fsr2l,c
  6860  001440  0100               	movlb	0	; () banked
  6861  001442  51AB               	movf	(drawtext@i+1)& (0+255),w,b
  6862  001444  2039               	addwfc	drawtext@_text+1,w,c
  6863  001446  6EDA               	movwf	fsr2h,c
  6864  001448  50DF               	movf	indf2,w,c
  6865  00144A  6E2D               	movwf	drawChar@c,c
  6866  00144C  C03A  F02E         	movff	drawtext@color,drawChar@color
  6867  001450  C03B  F02F         	movff	drawtext@color+1,drawChar@color+1
  6868  001454  C03C  F030         	movff	drawtext@bg,drawChar@bg
  6869  001458  C03D  F031         	movff	drawtext@bg+1,drawChar@bg+1
  6870  00145C  C03E  F032         	movff	drawtext@size,drawChar@size
  6871  001460  0100               	movlb	0	; () banked
  6872  001462  51AD               	movf	drawtext@cursor_x& (0+255),w,b
  6873  001464  ECFE  F007         	call	_drawChar
  6874                           
  6875                           ;ST7735_TFT.c: 520: cursor_x = cursor_x + size * 6;
  6876  001468  503E               	movf	drawtext@size,w,c
  6877  00146A  0D06               	mullw	6
  6878  00146C  50F3               	movf	prodl,w,c
  6879  00146E  0100               	movlb	0	; () banked
  6880  001470  25AD               	addwf	drawtext@cursor_x& (0+255),w,b
  6881  001472  0100               	movlb	0	; () banked
  6882  001474  6FAD               	movwf	drawtext@cursor_x& (0+255),b
  6883                           
  6884                           ; BSR set to: 0
  6885                           ;ST7735_TFT.c: 521: if(cursor_x > 128) cursor_x = 128;
  6886  001476  0E80               	movlw	128
  6887  001478  0100               	movlb	0	; () banked
  6888  00147A  65AD               	cpfsgt	drawtext@cursor_x& (0+255),b
  6889  00147C  D004               	goto	l4397
  6890                           
  6891                           ; BSR set to: 0
  6892  00147E  0E80               	movlw	128
  6893  001480  0100               	movlb	0	; () banked
  6894  001482  6FAD               	movwf	drawtext@cursor_x& (0+255),b
  6895                           
  6896                           ; BSR set to: 0
  6897  001484  D000               	goto	l4397
  6898  001486                     l4397:
  6899                           
  6900                           ; BSR set to: 0
  6901  001486  0100               	movlb	0	; () banked
  6902  001488  4BAA               	infsnz	drawtext@i& (0+255),f,b
  6903  00148A  2BAB               	incf	(drawtext@i+1)& (0+255),f,b
  6904  00148C  D000               	goto	l4399
  6905  00148E                     l4399:
  6906                           
  6907                           ; BSR set to: 0
  6908  00148E  0100               	movlb	0	; () banked
  6909  001490  51A8               	movf	drawtext@textsize& (0+255),w,b
  6910  001492  0100               	movlb	0	; () banked
  6911  001494  5DAA               	subwf	drawtext@i& (0+255),w,b
  6912  001496  0100               	movlb	0	; () banked
  6913  001498  51A9               	movf	(drawtext@textsize+1)& (0+255),w,b
  6914  00149A  0100               	movlb	0	; () banked
  6915  00149C  59AB               	subwfb	(drawtext@i+1)& (0+255),w,b
  6916  00149E  A0D8               	btfss	status,0,c
  6917  0014A0  D792               	goto	l4373
  6918                           
  6919                           ; BSR set to: 0
  6920                           
  6921                           ; BSR set to: 0
  6922  0014A2  0012               	return		;funcret
  6923  0014A4                     __end_of_drawtext:
  6924                           	opt stack 0
  6925                           tblptru	equ	0xFF8
  6926                           tblptrh	equ	0xFF7
  6927                           tblptrl	equ	0xFF6
  6928                           tablat	equ	0xFF5
  6929                           prodh	equ	0xFF4
  6930                           prodl	equ	0xFF3
  6931                           intcon	equ	0xFF2
  6932                           intcon2	equ	0xFF1
  6933                           intcon3	equ	0xFF0
  6934                           postinc0	equ	0xFEE
  6935                           wreg	equ	0xFE8
  6936                           postdec1	equ	0xFE5
  6937                           fsr1l	equ	0xFE1
  6938                           indf2	equ	0xFDF
  6939                           postinc2	equ	0xFDE
  6940                           fsr2h	equ	0xFDA
  6941                           fsr2l	equ	0xFD9
  6942                           status	equ	0xFD8
  6943                           
  6944 ;; *************** function _strlen *****************
  6945 ;; Defined at:
  6946 ;;		line 4 in file "E:\XC8\sources\common\strlen.c"
  6947 ;; Parameters:    Size  Location     Type
  6948 ;;  s               2   14[COMRAM] PTR const unsigned char 
  6949 ;;		 -> NULL(0), SW_MODE_Txt(2), SW_NSLT_Txt(2), SW_NSPED_Txt(2), 
  6950 ;;		 -> SW_EWLT_Txt(2), SW_EWPED_Txt(2), PED_NS_Count(3), PED_EW_Count(3), 
  6951 ;;		 -> NSLT_Count(3), NS_Count(3), EWLT_Count(3), EW_Count(3), 
  6952 ;;		 -> FlashingS_Txt(2), FlashingR_Txt(2), Act_Mode_Txt(2), buffer(31), 
  6953 ;; Auto vars:     Size  Location     Type
  6954 ;;  cp              2   18[COMRAM] PTR const unsigned char 
  6955 ;;		 -> NULL(0), SW_MODE_Txt(2), SW_NSLT_Txt(2), SW_NSPED_Txt(2), 
  6956 ;;		 -> SW_EWLT_Txt(2), SW_EWPED_Txt(2), PED_NS_Count(3), PED_EW_Count(3), 
  6957 ;;		 -> NSLT_Count(3), NS_Count(3), EWLT_Count(3), EW_Count(3), 
  6958 ;;		 -> FlashingS_Txt(2), FlashingR_Txt(2), Act_Mode_Txt(2), buffer(31), 
  6959 ;; Return value:  Size  Location     Type
  6960 ;;                  2   14[COMRAM] unsigned int 
  6961 ;; Registers used:
  6962 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6963 ;; Tracked objects:
  6964 ;;		On entry : 0/0
  6965 ;;		On exit  : 0/0
  6966 ;;		Unchanged: 0/0
  6967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6968 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6969 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6970 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6971 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6972 ;;Total ram usage:        6 bytes
  6973 ;; Hardware stack levels used:    1
  6974 ;; Hardware stack levels required when called:    2
  6975 ;; This function calls:
  6976 ;;		Nothing
  6977 ;; This function is called by:
  6978 ;;		_drawtext
  6979 ;; This function uses a non-reentrant model
  6980 ;;
  6981                           
  6982                           	psect	text32
  6983  002402                     __ptext32:
  6984                           	opt stack 0
  6985  002402                     _strlen:
  6986                           	opt stack 24
  6987                           
  6988                           ; BSR set to: 0
  6989                           ;incstack = 0
  6990  002402  C00F  F013         	movff	strlen@s,strlen@cp
  6991  002406  C010  F014         	movff	strlen@s+1,strlen@cp+1
  6992  00240A  D003               	goto	l4291
  6993  00240C                     l4289:
  6994  00240C  4A13               	infsnz	strlen@cp,f,c
  6995  00240E  2A14               	incf	strlen@cp+1,f,c
  6996  002410  D000               	goto	l4291
  6997  002412                     l4291:
  6998  002412  C013  FFD9         	movff	strlen@cp,fsr2l
  6999  002416  C014  FFDA         	movff	strlen@cp+1,fsr2h
  7000  00241A  50DF               	movf	indf2,w,c
  7001  00241C  A4D8               	btfss	status,2,c
  7002  00241E  D7F6               	goto	l4289
  7003  002420  C00F  F011         	movff	strlen@s,??_strlen
  7004  002424  C010  F012         	movff	strlen@s+1,??_strlen+1
  7005  002428  1E11               	comf	??_strlen,f,c
  7006  00242A  1E12               	comf	??_strlen+1,f,c
  7007  00242C  4A11               	infsnz	??_strlen,f,c
  7008  00242E  2A12               	incf	??_strlen+1,f,c
  7009  002430  5013               	movf	strlen@cp,w,c
  7010  002432  2411               	addwf	??_strlen,w,c
  7011  002434  6E0F               	movwf	?_strlen,c
  7012  002436  5014               	movf	strlen@cp+1,w,c
  7013  002438  2012               	addwfc	??_strlen+1,w,c
  7014  00243A  6E10               	movwf	?_strlen+1,c
  7015  00243C  D000               	goto	l1153
  7016  00243E                     l1153:
  7017  00243E  0012               	return		;funcret
  7018  002440                     __end_of_strlen:
  7019                           	opt stack 0
  7020                           tblptru	equ	0xFF8
  7021                           tblptrh	equ	0xFF7
  7022                           tblptrl	equ	0xFF6
  7023                           tablat	equ	0xFF5
  7024                           prodh	equ	0xFF4
  7025                           prodl	equ	0xFF3
  7026                           intcon	equ	0xFF2
  7027                           intcon2	equ	0xFF1
  7028                           intcon3	equ	0xFF0
  7029                           postinc0	equ	0xFEE
  7030                           wreg	equ	0xFE8
  7031                           postdec1	equ	0xFE5
  7032                           fsr1l	equ	0xFE1
  7033                           indf2	equ	0xFDF
  7034                           postinc2	equ	0xFDE
  7035                           fsr2h	equ	0xFDA
  7036                           fsr2l	equ	0xFD9
  7037                           status	equ	0xFD8
  7038                           
  7039 ;; *************** function _drawChar *****************
  7040 ;; Defined at:
  7041 ;;		line 480 in file "ST7735_TFT.c"
  7042 ;; Parameters:    Size  Location     Type
  7043 ;;  x               1    wreg     unsigned char 
  7044 ;;  y               1   43[COMRAM] unsigned char 
  7045 ;;  c               1   44[COMRAM] unsigned char 
  7046 ;;  color           2   45[COMRAM] unsigned int 
  7047 ;;  bg              2   47[COMRAM] unsigned int 
  7048 ;;  size            1   49[COMRAM] unsigned char 
  7049 ;; Auto vars:     Size  Location     Type
  7050 ;;  x               1   51[COMRAM] unsigned char 
  7051 ;;  line            1   50[COMRAM] unsigned char 
  7052 ;;  i               1   53[COMRAM] unsigned char 
  7053 ;;  j               1   52[COMRAM] unsigned char 
  7054 ;; Return value:  Size  Location     Type
  7055 ;;		None               void
  7056 ;; Registers used:
  7057 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7058 ;; Tracked objects:
  7059 ;;		On entry : 0/0
  7060 ;;		On exit  : 0/0
  7061 ;;		Unchanged: 0/0
  7062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7063 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7064 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7065 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7066 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7067 ;;Total ram usage:       11 bytes
  7068 ;; Hardware stack levels used:    1
  7069 ;; Hardware stack levels required when called:    7
  7070 ;; This function calls:
  7071 ;;		___wmul
  7072 ;;		_drawPixel
  7073 ;;		_fillRect
  7074 ;; This function is called by:
  7075 ;;		_drawtext
  7076 ;; This function uses a non-reentrant model
  7077 ;;
  7078                           
  7079                           	psect	text33
  7080  000FFC                     __ptext33:
  7081                           	opt stack 0
  7082  000FFC                     _drawChar:
  7083                           	opt stack 19
  7084                           
  7085                           ;incstack = 0
  7086                           ;drawChar@x stored from wreg
  7087  000FFC  6E34               	movwf	drawChar@x,c
  7088                           
  7089                           ;ST7735_TFT.c: 482: char i, j;
  7090                           ;ST7735_TFT.c: 483: if((x >= 128) || (y >= 160))
  7091  000FFE  0E80               	movlw	128
  7092  001000  6034               	cpfslt	drawChar@x,c
  7093  001002  D0A6               	goto	l203
  7094  001004  0E9F               	movlw	159
  7095  001006  642C               	cpfsgt	drawChar@y,c
  7096  001008  D001               	goto	l4237
  7097                           
  7098                           ;ST7735_TFT.c: 484: return;
  7099  00100A  D0A2               	goto	l203
  7100  00100C                     l4237:
  7101                           
  7102                           ;ST7735_TFT.c: 485: if(size < 1) size = 1;
  7103  00100C  5032               	movf	drawChar@size,w,c
  7104  00100E  A4D8               	btfss	status,2,c
  7105  001010  D003               	goto	l4241
  7106  001012  0E01               	movlw	1
  7107  001014  6E32               	movwf	drawChar@size,c
  7108  001016  D000               	goto	l4241
  7109  001018                     l4241:
  7110                           
  7111                           ;ST7735_TFT.c: 486: if((c < ' ') || (c > '~'))
  7112  001018  0E1F               	movlw	31
  7113  00101A  642D               	cpfsgt	drawChar@c,c
  7114  00101C  D004               	goto	l4245
  7115  00101E  0E7E               	movlw	126
  7116  001020  642D               	cpfsgt	drawChar@c,c
  7117  001022  D003               	goto	l205
  7118  001024  D000               	goto	l4245
  7119  001026                     l4245:
  7120                           
  7121                           ;ST7735_TFT.c: 487: c = '?';
  7122  001026  0E3F               	movlw	63
  7123  001028  6E2D               	movwf	drawChar@c,c
  7124  00102A                     l205:
  7125                           
  7126                           ;ST7735_TFT.c: 488: for(i=0; i<5; i++ ) {
  7127  00102A  0E00               	movlw	0
  7128  00102C  6E36               	movwf	drawChar@i,c
  7129  00102E                     l4247:
  7130  00102E  0E04               	movlw	4
  7131  001030  6436               	cpfsgt	drawChar@i,c
  7132  001032  D001               	goto	l4251
  7133  001034  D08D               	goto	l203
  7134  001036                     l4251:
  7135                           
  7136                           ;ST7735_TFT.c: 489: unsigned char line;
  7137                           ;ST7735_TFT.c: 490: if(c < 'S')
  7138  001036  0E53               	movlw	83
  7139  001038  602D               	cpfslt	drawChar@c,c
  7140  00103A  D015               	goto	l4255
  7141                           
  7142                           ;ST7735_TFT.c: 491: line = font[(c - 32)*5 + i];
  7143  00103C  0EE0               	movlw	224
  7144  00103E  242D               	addwf	drawChar@c,w,c
  7145  001040  6E0F               	movwf	___wmul@multiplier,c
  7146  001042  6A10               	clrf	___wmul@multiplier+1,c
  7147  001044  0EFF               	movlw	255
  7148  001046  2210               	addwfc	___wmul@multiplier+1,f,c
  7149  001048  0E00               	movlw	0
  7150  00104A  6E12               	movwf	___wmul@multiplicand+1,c
  7151  00104C  0E05               	movlw	5
  7152  00104E  6E11               	movwf	___wmul@multiplicand,c
  7153  001050  ECB4  F012         	call	___wmul	;wreg free
  7154  001054  5036               	movf	drawChar@i,w,c
  7155  001056  260F               	addwf	?___wmul,f,c
  7156  001058  0E00               	movlw	0
  7157  00105A  2210               	addwfc	?___wmul+1,f,c
  7158  00105C  0EBD               	movlw	low _font
  7159  00105E  240F               	addwf	?___wmul,w,c
  7160  001060  6EF6               	movwf	tblptrl,c
  7161  001062  0EFD               	movlw	high _font
  7162  001064  D014               	goto	L8
  7163  001066                     l4255:
  7164                           
  7165                           ;ST7735_TFT.c: 492: else
  7166                           ;ST7735_TFT.c: 493: line = font2[(c - 'S')*5 + i];
  7167  001066  0EAD               	movlw	173
  7168  001068  242D               	addwf	drawChar@c,w,c
  7169  00106A  6E0F               	movwf	___wmul@multiplier,c
  7170  00106C  6A10               	clrf	___wmul@multiplier+1,c
  7171  00106E  0EFF               	movlw	255
  7172  001070  2210               	addwfc	___wmul@multiplier+1,f,c
  7173  001072  0E00               	movlw	0
  7174  001074  6E12               	movwf	___wmul@multiplicand+1,c
  7175  001076  0E05               	movlw	5
  7176  001078  6E11               	movwf	___wmul@multiplicand,c
  7177  00107A  ECB4  F012         	call	___wmul	;wreg free
  7178  00107E  5036               	movf	drawChar@i,w,c
  7179  001080  260F               	addwf	?___wmul,f,c
  7180  001082  0E00               	movlw	0
  7181  001084  2210               	addwfc	?___wmul+1,f,c
  7182  001086  0EBC               	movlw	low _font2
  7183  001088  240F               	addwf	?___wmul,w,c
  7184  00108A  6EF6               	movwf	tblptrl,c
  7185  00108C  0EFE               	movlw	high _font2
  7186  00108E                     L8:
  7187  00108E  2010               	addwfc	?___wmul+1,w,c
  7188  001090  6EF7               	movwf	tblptrh,c
  7189  001092                     	if	0	;There are less than 3 active tblptr bytes
  7190  001092                     	endif
  7191  001092  0008               	tblrd		*
  7192  001094  CFF5 F033          	movff	tablat,drawChar@line
  7193  001098  D000               	goto	l4257
  7194  00109A                     l4257:
  7195                           
  7196                           ;ST7735_TFT.c: 494: for(j=0; j<7; j++, line >>= 1) {
  7197  00109A  0E00               	movlw	0
  7198  00109C  6E35               	movwf	drawChar@j,c
  7199  00109E                     l4259:
  7200  00109E  0E06               	movlw	6
  7201  0010A0  6435               	cpfsgt	drawChar@j,c
  7202  0010A2  D001               	goto	l212
  7203  0010A4  D053               	goto	l4283
  7204  0010A6                     l212:
  7205                           
  7206                           ;ST7735_TFT.c: 495: if(line & 0x01) {
  7207  0010A6  A033               	btfss	drawChar@line,0,c
  7208  0010A8  D023               	goto	l4269
  7209                           
  7210                           ;ST7735_TFT.c: 496: if(size == 1) drawPixel(x+i, y+j, color);
  7211  0010AA  0432               	decf	drawChar@size,w,c
  7212  0010AC  A4D8               	btfss	status,2,c
  7213  0010AE  D00C               	goto	l4267
  7214  0010B0  502C               	movf	drawChar@y,w,c
  7215  0010B2  2435               	addwf	drawChar@j,w,c
  7216  0010B4  6E16               	movwf	drawPixel@y,c
  7217  0010B6  C02E  F017         	movff	drawChar@color,drawPixel@color
  7218  0010BA  C02F  F018         	movff	drawChar@color+1,drawPixel@color+1
  7219  0010BE  5034               	movf	drawChar@x,w,c
  7220  0010C0  2436               	addwf	drawChar@i,w,c
  7221  0010C2  EC72  F012         	call	_drawPixel
  7222  0010C6  D03E               	goto	l4277
  7223  0010C8                     l4267:
  7224                           
  7225                           ;ST7735_TFT.c: 497: else fillRect(x+(i*size), y+(j*size), size, size, color);
  7226  0010C8  5035               	movf	drawChar@j,w,c
  7227  0010CA  0232               	mulwf	drawChar@size,c
  7228  0010CC  50F3               	movf	prodl,w,c
  7229  0010CE  242C               	addwf	drawChar@y,w,c
  7230  0010D0  6E21               	movwf	fillRect@y,c
  7231  0010D2  C032  F022         	movff	drawChar@size,fillRect@w
  7232  0010D6  C032  F023         	movff	drawChar@size,fillRect@h
  7233  0010DA  C02E  F024         	movff	drawChar@color,fillRect@color
  7234  0010DE  C02F  F025         	movff	drawChar@color+1,fillRect@color+1
  7235  0010E2  5036               	movf	drawChar@i,w,c
  7236  0010E4  0232               	mulwf	drawChar@size,c
  7237  0010E6  50F3               	movf	prodl,w,c
  7238  0010E8  2434               	addwf	drawChar@x,w,c
  7239  0010EA  EC2D  F011         	call	_fillRect
  7240                           
  7241                           ;ST7735_TFT.c: 498: }
  7242  0010EE  D02A               	goto	l4277
  7243  0010F0                     l4269:
  7244                           
  7245                           ;ST7735_TFT.c: 499: else if(bg != color) {
  7246  0010F0  502E               	movf	drawChar@color,w,c
  7247  0010F2  1830               	xorwf	drawChar@bg,w,c
  7248  0010F4  E104               	bnz	u2900
  7249  0010F6  502F               	movf	drawChar@color+1,w,c
  7250  0010F8  1831               	xorwf	drawChar@bg+1,w,c
  7251  0010FA  B4D8               	btfsc	status,2,c
  7252  0010FC  D023               	goto	l4277
  7253  0010FE                     u2900:
  7254                           
  7255                           ;ST7735_TFT.c: 500: if(size == 1) drawPixel(x+i, y+j, bg);
  7256  0010FE  0432               	decf	drawChar@size,w,c
  7257  001100  A4D8               	btfss	status,2,c
  7258  001102  D00C               	goto	l4275
  7259  001104  502C               	movf	drawChar@y,w,c
  7260  001106  2435               	addwf	drawChar@j,w,c
  7261  001108  6E16               	movwf	drawPixel@y,c
  7262  00110A  C030  F017         	movff	drawChar@bg,drawPixel@color
  7263  00110E  C031  F018         	movff	drawChar@bg+1,drawPixel@color+1
  7264  001112  5034               	movf	drawChar@x,w,c
  7265  001114  2436               	addwf	drawChar@i,w,c
  7266  001116  EC72  F012         	call	_drawPixel
  7267  00111A  D014               	goto	l4277
  7268  00111C                     l4275:
  7269                           
  7270                           ;ST7735_TFT.c: 501: else fillRect(x+i*size, y+j*size, size, size, bg);
  7271  00111C  5035               	movf	drawChar@j,w,c
  7272  00111E  0232               	mulwf	drawChar@size,c
  7273  001120  50F3               	movf	prodl,w,c
  7274  001122  242C               	addwf	drawChar@y,w,c
  7275  001124  6E21               	movwf	fillRect@y,c
  7276  001126  C032  F022         	movff	drawChar@size,fillRect@w
  7277  00112A  C032  F023         	movff	drawChar@size,fillRect@h
  7278  00112E  C030  F024         	movff	drawChar@bg,fillRect@color
  7279  001132  C031  F025         	movff	drawChar@bg+1,fillRect@color+1
  7280  001136  5036               	movf	drawChar@i,w,c
  7281  001138  0232               	mulwf	drawChar@size,c
  7282  00113A  50F3               	movf	prodl,w,c
  7283  00113C  2434               	addwf	drawChar@x,w,c
  7284  00113E  EC2D  F011         	call	_fillRect
  7285  001142  D000               	goto	l4277
  7286  001144                     l4277:
  7287  001144  2A35               	incf	drawChar@j,f,c
  7288  001146  90D8               	bcf	status,0,c
  7289  001148  3233               	rrcf	drawChar@line,f,c
  7290  00114A  D7A9               	goto	l4259
  7291  00114C                     l4283:
  7292  00114C  2A36               	incf	drawChar@i,f,c
  7293  00114E  D76F               	goto	l4247
  7294  001150                     l203:
  7295  001150  0012               	return		;funcret
  7296  001152                     __end_of_drawChar:
  7297                           	opt stack 0
  7298                           tblptru	equ	0xFF8
  7299                           tblptrh	equ	0xFF7
  7300                           tblptrl	equ	0xFF6
  7301                           tablat	equ	0xFF5
  7302                           prodh	equ	0xFF4
  7303                           prodl	equ	0xFF3
  7304                           intcon	equ	0xFF2
  7305                           intcon2	equ	0xFF1
  7306                           intcon3	equ	0xFF0
  7307                           postinc0	equ	0xFEE
  7308                           wreg	equ	0xFE8
  7309                           postdec1	equ	0xFE5
  7310                           fsr1l	equ	0xFE1
  7311                           indf2	equ	0xFDF
  7312                           postinc2	equ	0xFDE
  7313                           fsr2h	equ	0xFDA
  7314                           fsr2l	equ	0xFD9
  7315                           status	equ	0xFD8
  7316                           
  7317 ;; *************** function _fillRect *****************
  7318 ;; Defined at:
  7319 ;;		line 470 in file "ST7735_TFT.c"
  7320 ;; Parameters:    Size  Location     Type
  7321 ;;  x               1    wreg     unsigned char 
  7322 ;;  y               1   32[COMRAM] unsigned char 
  7323 ;;  w               1   33[COMRAM] unsigned char 
  7324 ;;  h               1   34[COMRAM] unsigned char 
  7325 ;;  color           2   35[COMRAM] unsigned int 
  7326 ;; Auto vars:     Size  Location     Type
  7327 ;;  x               1   40[COMRAM] unsigned char 
  7328 ;;  i               2   41[COMRAM] int 
  7329 ;; Return value:  Size  Location     Type
  7330 ;;		None               void
  7331 ;; Registers used:
  7332 ;;		wreg, status,2, status,0, cstack
  7333 ;; Tracked objects:
  7334 ;;		On entry : 0/0
  7335 ;;		On exit  : 0/0
  7336 ;;		Unchanged: 0/0
  7337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7338 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7339 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7340 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7341 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7342 ;;Total ram usage:       11 bytes
  7343 ;; Hardware stack levels used:    1
  7344 ;; Hardware stack levels required when called:    6
  7345 ;; This function calls:
  7346 ;;		_drawFastVLine
  7347 ;; This function is called by:
  7348 ;;		_drawChar
  7349 ;; This function uses a non-reentrant model
  7350 ;;
  7351                           
  7352                           	psect	text34
  7353  00225A                     __ptext34:
  7354                           	opt stack 0
  7355  00225A                     _fillRect:
  7356                           	opt stack 19
  7357                           
  7358                           ;incstack = 0
  7359                           ;fillRect@x stored from wreg
  7360  00225A  6E29               	movwf	fillRect@x,c
  7361                           
  7362                           ;ST7735_TFT.c: 472: signed int i;
  7363                           ;ST7735_TFT.c: 474: for (i = x; i < x + w; i++)
  7364  00225C  C029  F02A         	movff	fillRect@x,fillRect@i
  7365  002260  6A2B               	clrf	fillRect@i+1,c
  7366  002262  D00E               	goto	l4225
  7367  002264                     l4221:
  7368                           
  7369                           ;ST7735_TFT.c: 475: {
  7370                           ;ST7735_TFT.c: 476: drawFastVLine(i, y, h, color);
  7371  002264  C021  F016         	movff	fillRect@y,drawFastVLine@y
  7372  002268  C023  F017         	movff	fillRect@h,drawFastVLine@h
  7373  00226C  C024  F018         	movff	fillRect@color,drawFastVLine@color
  7374  002270  C025  F019         	movff	fillRect@color+1,drawFastVLine@color+1
  7375  002274  502A               	movf	fillRect@i,w,c
  7376  002276  EC6B  F00E         	call	_drawFastVLine
  7377  00227A  4A2A               	infsnz	fillRect@i,f,c
  7378  00227C  2A2B               	incf	fillRect@i+1,f,c
  7379  00227E  D000               	goto	l4225
  7380  002280                     l4225:
  7381  002280  5022               	movf	fillRect@w,w,c
  7382  002282  C029  F026         	movff	fillRect@x,??_fillRect
  7383  002286  6A27               	clrf	(??_fillRect+1)& (0+255),c
  7384  002288  2626               	addwf	??_fillRect,f,c
  7385  00228A  0E00               	movlw	0
  7386  00228C  2227               	addwfc	??_fillRect+1,f,c
  7387  00228E  5026               	movf	??_fillRect,w,c
  7388  002290  5C2A               	subwf	fillRect@i,w,c
  7389  002292  502B               	movf	fillRect@i+1,w,c
  7390  002294  0A80               	xorlw	128
  7391  002296  6E28               	movwf	(??_fillRect+2)& (0+255),c
  7392  002298  5027               	movf	??_fillRect+1,w,c
  7393  00229A  0A80               	xorlw	128
  7394  00229C  5828               	subwfb	(??_fillRect+2)& (0+255),w,c
  7395  00229E  A0D8               	btfss	status,0,c
  7396  0022A0  D7E1               	goto	l4221
  7397  0022A2  0012               	return		;funcret
  7398  0022A4                     __end_of_fillRect:
  7399                           	opt stack 0
  7400                           tblptru	equ	0xFF8
  7401                           tblptrh	equ	0xFF7
  7402                           tblptrl	equ	0xFF6
  7403                           tablat	equ	0xFF5
  7404                           prodh	equ	0xFF4
  7405                           prodl	equ	0xFF3
  7406                           intcon	equ	0xFF2
  7407                           intcon2	equ	0xFF1
  7408                           intcon3	equ	0xFF0
  7409                           postinc0	equ	0xFEE
  7410                           wreg	equ	0xFE8
  7411                           postdec1	equ	0xFE5
  7412                           fsr1l	equ	0xFE1
  7413                           indf2	equ	0xFDF
  7414                           postinc2	equ	0xFDE
  7415                           fsr2h	equ	0xFDA
  7416                           fsr2l	equ	0xFD9
  7417                           status	equ	0xFD8
  7418                           
  7419 ;; *************** function ___wmul *****************
  7420 ;; Defined at:
  7421 ;;		line 15 in file "E:\XC8\sources\common\Umul16.c"
  7422 ;; Parameters:    Size  Location     Type
  7423 ;;  multiplier      2   14[COMRAM] unsigned int 
  7424 ;;  multiplicand    2   16[COMRAM] unsigned int 
  7425 ;; Auto vars:     Size  Location     Type
  7426 ;;  product         2   18[COMRAM] unsigned int 
  7427 ;; Return value:  Size  Location     Type
  7428 ;;                  2   14[COMRAM] unsigned int 
  7429 ;; Registers used:
  7430 ;;		wreg, status,2, status,0, prodl, prodh
  7431 ;; Tracked objects:
  7432 ;;		On entry : 0/0
  7433 ;;		On exit  : 0/0
  7434 ;;		Unchanged: 0/0
  7435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7436 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7437 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7438 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7439 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7440 ;;Total ram usage:        6 bytes
  7441 ;; Hardware stack levels used:    1
  7442 ;; Hardware stack levels required when called:    2
  7443 ;; This function calls:
  7444 ;;		Nothing
  7445 ;; This function is called by:
  7446 ;;		_delay_ms
  7447 ;;		_drawChar
  7448 ;;		_main
  7449 ;;		_update_LCD_misc
  7450 ;; This function uses a non-reentrant model
  7451 ;;
  7452                           
  7453                           	psect	text35
  7454  002568                     __ptext35:
  7455                           	opt stack 0
  7456  002568                     ___wmul:
  7457                           	opt stack 28
  7458                           
  7459                           ;incstack = 0
  7460  002568  500F               	movf	___wmul@multiplier,w,c
  7461  00256A  0211               	mulwf	___wmul@multiplicand,c
  7462  00256C  CFF3 F013          	movff	prodl,___wmul@product
  7463  002570  CFF4 F014          	movff	prodh,___wmul@product+1
  7464  002574  500F               	movf	___wmul@multiplier,w,c
  7465  002576  0212               	mulwf	___wmul@multiplicand+1,c
  7466  002578  50F3               	movf	prodl,w,c
  7467  00257A  2614               	addwf	___wmul@product+1,f,c
  7468  00257C  5010               	movf	___wmul@multiplier+1,w,c
  7469  00257E  0211               	mulwf	___wmul@multiplicand,c
  7470  002580  50F3               	movf	prodl,w,c
  7471  002582  2614               	addwf	___wmul@product+1,f,c
  7472  002584  C013  F00F         	movff	___wmul@product,?___wmul
  7473  002588  C014  F010         	movff	___wmul@product+1,?___wmul+1
  7474  00258C  D000               	goto	l596
  7475  00258E                     l596:
  7476  00258E  0012               	return		;funcret
  7477  002590                     __end_of___wmul:
  7478                           	opt stack 0
  7479                           tblptru	equ	0xFF8
  7480                           tblptrh	equ	0xFF7
  7481                           tblptrl	equ	0xFF6
  7482                           tablat	equ	0xFF5
  7483                           prodh	equ	0xFF4
  7484                           prodl	equ	0xFF3
  7485                           intcon	equ	0xFF2
  7486                           intcon2	equ	0xFF1
  7487                           intcon3	equ	0xFF0
  7488                           postinc0	equ	0xFEE
  7489                           wreg	equ	0xFE8
  7490                           postdec1	equ	0xFE5
  7491                           fsr1l	equ	0xFE1
  7492                           indf2	equ	0xFDF
  7493                           postinc2	equ	0xFDE
  7494                           fsr2h	equ	0xFDA
  7495                           fsr2l	equ	0xFD9
  7496                           status	equ	0xFD8
  7497                           
  7498 ;; *************** function ___ftge *****************
  7499 ;; Defined at:
  7500 ;;		line 4 in file "E:\XC8\sources\common\ftge.c"
  7501 ;; Parameters:    Size  Location     Type
  7502 ;;  ff1             3   14[COMRAM] float 
  7503 ;;  ff2             3   17[COMRAM] float 
  7504 ;; Auto vars:     Size  Location     Type
  7505 ;;		None
  7506 ;; Return value:  Size  Location     Type
  7507 ;;		None               void
  7508 ;; Registers used:
  7509 ;;		wreg, status,2, status,0
  7510 ;; Tracked objects:
  7511 ;;		On entry : 0/0
  7512 ;;		On exit  : 0/0
  7513 ;;		Unchanged: 0/0
  7514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7515 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7516 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7517 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7518 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7519 ;;Total ram usage:        9 bytes
  7520 ;; Hardware stack levels used:    1
  7521 ;; Hardware stack levels required when called:    2
  7522 ;; This function calls:
  7523 ;;		Nothing
  7524 ;; This function is called by:
  7525 ;;		_main
  7526 ;;		_update_LCD_misc
  7527 ;; This function uses a non-reentrant model
  7528 ;;
  7529                           
  7530                           	psect	text36
  7531  001BB8                     __ptext36:
  7532                           	opt stack 0
  7533  001BB8                     ___ftge:
  7534                           	opt stack 28
  7535                           
  7536                           ;incstack = 0
  7537  001BB8  AE11               	btfss	___ftge@ff1+2,7,c
  7538  001BBA  D017               	goto	l4521
  7539  001BBC  C00F  F015         	movff	___ftge@ff1,??___ftge
  7540  001BC0  C010  F016         	movff	___ftge@ff1+1,??___ftge+1
  7541  001BC4  C011  F017         	movff	___ftge@ff1+2,??___ftge+2
  7542  001BC8  1E15               	comf	??___ftge,f,c
  7543  001BCA  1E16               	comf	??___ftge+1,f,c
  7544  001BCC  1E17               	comf	??___ftge+2,f,c
  7545  001BCE  2A15               	incf	??___ftge,f,c
  7546  001BD0  0E00               	movlw	0
  7547  001BD2  2216               	addwfc	??___ftge+1,f,c
  7548  001BD4  2217               	addwfc	??___ftge+2,f,c
  7549  001BD6  0E00               	movlw	0
  7550  001BD8  2415               	addwf	??___ftge,w,c
  7551  001BDA  6E0F               	movwf	___ftge@ff1,c
  7552  001BDC  0E00               	movlw	0
  7553  001BDE  2016               	addwfc	??___ftge+1,w,c
  7554  001BE0  6E10               	movwf	___ftge@ff1+1,c
  7555  001BE2  0E80               	movlw	128
  7556  001BE4  2017               	addwfc	??___ftge+2,w,c
  7557  001BE6  6E11               	movwf	___ftge@ff1+2,c
  7558  001BE8  D000               	goto	l4521
  7559  001BEA                     l4521:
  7560  001BEA  AE14               	btfss	___ftge@ff2+2,7,c
  7561  001BEC  D017               	goto	l4525
  7562  001BEE  C012  F015         	movff	___ftge@ff2,??___ftge
  7563  001BF2  C013  F016         	movff	___ftge@ff2+1,??___ftge+1
  7564  001BF6  C014  F017         	movff	___ftge@ff2+2,??___ftge+2
  7565  001BFA  1E15               	comf	??___ftge,f,c
  7566  001BFC  1E16               	comf	??___ftge+1,f,c
  7567  001BFE  1E17               	comf	??___ftge+2,f,c
  7568  001C00  2A15               	incf	??___ftge,f,c
  7569  001C02  0E00               	movlw	0
  7570  001C04  2216               	addwfc	??___ftge+1,f,c
  7571  001C06  2217               	addwfc	??___ftge+2,f,c
  7572  001C08  0E00               	movlw	0
  7573  001C0A  2415               	addwf	??___ftge,w,c
  7574  001C0C  6E12               	movwf	___ftge@ff2,c
  7575  001C0E  0E00               	movlw	0
  7576  001C10  2016               	addwfc	??___ftge+1,w,c
  7577  001C12  6E13               	movwf	___ftge@ff2+1,c
  7578  001C14  0E80               	movlw	128
  7579  001C16  2017               	addwfc	??___ftge+2,w,c
  7580  001C18  6E14               	movwf	___ftge@ff2+2,c
  7581  001C1A  D000               	goto	l4525
  7582  001C1C                     l4525:
  7583  001C1C  0E00               	movlw	0
  7584  001C1E  1A0F               	xorwf	___ftge@ff1,f,c
  7585  001C20  0E00               	movlw	0
  7586  001C22  1A10               	xorwf	___ftge@ff1+1,f,c
  7587  001C24  0E80               	movlw	128
  7588  001C26  1A11               	xorwf	___ftge@ff1+2,f,c
  7589  001C28  0E00               	movlw	0
  7590  001C2A  1A12               	xorwf	___ftge@ff2,f,c
  7591  001C2C  0E00               	movlw	0
  7592  001C2E  1A13               	xorwf	___ftge@ff2+1,f,c
  7593  001C30  0E80               	movlw	128
  7594  001C32  1A14               	xorwf	___ftge@ff2+2,f,c
  7595  001C34  5012               	movf	___ftge@ff2,w,c
  7596  001C36  5C0F               	subwf	___ftge@ff1,w,c
  7597  001C38  5013               	movf	___ftge@ff2+1,w,c
  7598  001C3A  5810               	subwfb	___ftge@ff1+1,w,c
  7599  001C3C  5014               	movf	___ftge@ff2+2,w,c
  7600  001C3E  5811               	subwfb	___ftge@ff1+2,w,c
  7601  001C40  B0D8               	btfsc	status,0,c
  7602  001C42  D002               	goto	l4531
  7603  001C44  90D8               	bcf	status,0,c
  7604  001C46  D002               	goto	l985
  7605  001C48                     l4531:
  7606  001C48  80D8               	bsf	status,0,c
  7607  001C4A  D000               	goto	l985
  7608  001C4C                     l985:
  7609  001C4C  0012               	return		;funcret
  7610  001C4E                     __end_of___ftge:
  7611                           	opt stack 0
  7612                           tblptru	equ	0xFF8
  7613                           tblptrh	equ	0xFF7
  7614                           tblptrl	equ	0xFF6
  7615                           tablat	equ	0xFF5
  7616                           prodh	equ	0xFF4
  7617                           prodl	equ	0xFF3
  7618                           intcon	equ	0xFF2
  7619                           intcon2	equ	0xFF1
  7620                           intcon3	equ	0xFF0
  7621                           postinc0	equ	0xFEE
  7622                           wreg	equ	0xFE8
  7623                           postdec1	equ	0xFE5
  7624                           fsr1l	equ	0xFE1
  7625                           indf2	equ	0xFDF
  7626                           postinc2	equ	0xFDE
  7627                           fsr2h	equ	0xFDA
  7628                           fsr2l	equ	0xFD9
  7629                           status	equ	0xFD8
  7630                           
  7631 ;; *************** function ___ftdiv *****************
  7632 ;; Defined at:
  7633 ;;		line 54 in file "E:\XC8\sources\common\ftdiv.c"
  7634 ;; Parameters:    Size  Location     Type
  7635 ;;  f1              3   26[COMRAM] float 
  7636 ;;  f2              3   29[COMRAM] float 
  7637 ;; Auto vars:     Size  Location     Type
  7638 ;;  f3              3   36[COMRAM] float 
  7639 ;;  sign            1   40[COMRAM] unsigned char 
  7640 ;;  exp             1   39[COMRAM] unsigned char 
  7641 ;;  cntr            1   35[COMRAM] unsigned char 
  7642 ;; Return value:  Size  Location     Type
  7643 ;;                  3   26[COMRAM] float 
  7644 ;; Registers used:
  7645 ;;		wreg, status,2, status,0, cstack
  7646 ;; Tracked objects:
  7647 ;;		On entry : 0/0
  7648 ;;		On exit  : 0/0
  7649 ;;		Unchanged: 0/0
  7650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7651 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7652 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7653 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7654 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7655 ;;Total ram usage:       15 bytes
  7656 ;; Hardware stack levels used:    1
  7657 ;; Hardware stack levels required when called:    3
  7658 ;; This function calls:
  7659 ;;		___ftpack
  7660 ;; This function is called by:
  7661 ;;		_main
  7662 ;;		_update_LCD_misc
  7663 ;; This function uses a non-reentrant model
  7664 ;;
  7665                           
  7666                           	psect	text37
  7667  001596                     __ptext37:
  7668                           	opt stack 0
  7669  001596                     ___ftdiv:
  7670                           	opt stack 27
  7671                           
  7672                           ;incstack = 0
  7673  001596  C01D  F021         	movff	___ftdiv@f1+2,??___ftdiv
  7674  00159A  6A22               	clrf	(??___ftdiv+1)& (0+255),c
  7675  00159C  6A23               	clrf	(??___ftdiv+2)& (0+255),c
  7676  00159E  341C               	rlcf	___ftdiv@f1+1,w,c
  7677  0015A0  3621               	rlcf	??___ftdiv& (0+255),f,c
  7678  0015A2  E301               	bnc	u3161
  7679  0015A4  8022               	bsf	(??___ftdiv+1)& (0+255),0,c
  7680  0015A6                     u3161:
  7681  0015A6  5021               	movf	??___ftdiv,w,c
  7682  0015A8  6E28               	movwf	___ftdiv@exp,c
  7683  0015AA  5028               	movf	___ftdiv@exp,w,c
  7684  0015AC  A4D8               	btfss	status,2,c
  7685  0015AE  D002               	goto	l4465
  7686  0015B0  D00E               	goto	l4467
  7687  0015B2  D061               	goto	l976
  7688  0015B4                     l4465:
  7689  0015B4  C020  F021         	movff	___ftdiv@f2+2,??___ftdiv
  7690  0015B8  6A22               	clrf	(??___ftdiv+1)& (0+255),c
  7691  0015BA  6A23               	clrf	(??___ftdiv+2)& (0+255),c
  7692  0015BC  341F               	rlcf	___ftdiv@f2+1,w,c
  7693  0015BE  3621               	rlcf	??___ftdiv& (0+255),f,c
  7694  0015C0  E301               	bnc	u3181
  7695  0015C2  8022               	bsf	(??___ftdiv+1)& (0+255),0,c
  7696  0015C4                     u3181:
  7697  0015C4  5021               	movf	??___ftdiv,w,c
  7698  0015C6  6E29               	movwf	___ftdiv@sign,c
  7699  0015C8  5029               	movf	___ftdiv@sign,w,c
  7700  0015CA  A4D8               	btfss	status,2,c
  7701  0015CC  D007               	goto	l4471
  7702  0015CE                     l4467:
  7703  0015CE  0E00               	movlw	0
  7704  0015D0  6E1B               	movwf	?___ftdiv,c
  7705  0015D2  0E00               	movlw	0
  7706  0015D4  6E1C               	movwf	?___ftdiv+1,c
  7707  0015D6  0E00               	movlw	0
  7708  0015D8  6E1D               	movwf	?___ftdiv+2,c
  7709  0015DA  D04D               	goto	l976
  7710  0015DC                     l4471:
  7711  0015DC  0E00               	movlw	0
  7712  0015DE  6E25               	movwf	___ftdiv@f3,c
  7713  0015E0  0E00               	movlw	0
  7714  0015E2  6E26               	movwf	___ftdiv@f3+1,c
  7715  0015E4  0E00               	movlw	0
  7716  0015E6  6E27               	movwf	___ftdiv@f3+2,c
  7717  0015E8  5029               	movf	___ftdiv@sign,w,c
  7718  0015EA  0F89               	addlw	137
  7719  0015EC  5E28               	subwf	___ftdiv@exp,f,c
  7720  0015EE  C01D  F029         	movff	___ftdiv@f1+2,___ftdiv@sign
  7721  0015F2  5020               	movf	___ftdiv@f2+2,w,c
  7722  0015F4  1A29               	xorwf	___ftdiv@sign,f,c
  7723  0015F6  0E80               	movlw	128
  7724  0015F8  1629               	andwf	___ftdiv@sign,f,c
  7725  0015FA  8E1C               	bsf	___ftdiv@f1+1,7,c
  7726  0015FC  0EFF               	movlw	255
  7727  0015FE  161B               	andwf	___ftdiv@f1,f,c
  7728  001600  0EFF               	movlw	255
  7729  001602  161C               	andwf	___ftdiv@f1+1,f,c
  7730  001604  0E00               	movlw	0
  7731  001606  161D               	andwf	___ftdiv@f1+2,f,c
  7732  001608  8E1F               	bsf	___ftdiv@f2+1,7,c
  7733  00160A  0EFF               	movlw	255
  7734  00160C  161E               	andwf	___ftdiv@f2,f,c
  7735  00160E  0EFF               	movlw	255
  7736  001610  161F               	andwf	___ftdiv@f2+1,f,c
  7737  001612  0E00               	movlw	0
  7738  001614  1620               	andwf	___ftdiv@f2+2,f,c
  7739  001616  0E18               	movlw	24
  7740  001618  6E24               	movwf	___ftdiv@cntr,c
  7741  00161A  D000               	goto	l4491
  7742  00161C                     l4491:
  7743  00161C  90D8               	bcf	status,0,c
  7744  00161E  3625               	rlcf	___ftdiv@f3,f,c
  7745  001620  3626               	rlcf	___ftdiv@f3+1,f,c
  7746  001622  3627               	rlcf	___ftdiv@f3+2,f,c
  7747  001624  501E               	movf	___ftdiv@f2,w,c
  7748  001626  5C1B               	subwf	___ftdiv@f1,w,c
  7749  001628  501F               	movf	___ftdiv@f2+1,w,c
  7750  00162A  581C               	subwfb	___ftdiv@f1+1,w,c
  7751  00162C  5020               	movf	___ftdiv@f2+2,w,c
  7752  00162E  581D               	subwfb	___ftdiv@f1+2,w,c
  7753  001630  A0D8               	btfss	status,0,c
  7754  001632  D007               	goto	l979
  7755  001634  501E               	movf	___ftdiv@f2,w,c
  7756  001636  5E1B               	subwf	___ftdiv@f1,f,c
  7757  001638  501F               	movf	___ftdiv@f2+1,w,c
  7758  00163A  5A1C               	subwfb	___ftdiv@f1+1,f,c
  7759  00163C  5020               	movf	___ftdiv@f2+2,w,c
  7760  00163E  5A1D               	subwfb	___ftdiv@f1+2,f,c
  7761  001640  8025               	bsf	___ftdiv@f3,0,c
  7762  001642                     l979:
  7763  001642  90D8               	bcf	status,0,c
  7764  001644  361B               	rlcf	___ftdiv@f1,f,c
  7765  001646  361C               	rlcf	___ftdiv@f1+1,f,c
  7766  001648  361D               	rlcf	___ftdiv@f1+2,f,c
  7767  00164A  2E24               	decfsz	___ftdiv@cntr,f,c
  7768  00164C  D7E7               	goto	l4491
  7769  00164E  D000               	goto	l4501
  7770  001650                     l4501:
  7771  001650  C025  F00F         	movff	___ftdiv@f3,___ftpack@arg
  7772  001654  C026  F010         	movff	___ftdiv@f3+1,___ftpack@arg+1
  7773  001658  C027  F011         	movff	___ftdiv@f3+2,___ftpack@arg+2
  7774  00165C  C028  F012         	movff	___ftdiv@exp,___ftpack@exp
  7775  001660  C029  F013         	movff	___ftdiv@sign,___ftpack@sign
  7776  001664  EC7D  F00C         	call	___ftpack	;wreg free
  7777  001668  C00F  F01B         	movff	?___ftpack,?___ftdiv
  7778  00166C  C010  F01C         	movff	?___ftpack+1,?___ftdiv+1
  7779  001670  C011  F01D         	movff	?___ftpack+2,?___ftdiv+2
  7780  001674  D000               	goto	l976
  7781  001676                     l976:
  7782  001676  0012               	return		;funcret
  7783  001678                     __end_of___ftdiv:
  7784                           	opt stack 0
  7785                           tblptru	equ	0xFF8
  7786                           tblptrh	equ	0xFF7
  7787                           tblptrl	equ	0xFF6
  7788                           tablat	equ	0xFF5
  7789                           prodh	equ	0xFF4
  7790                           prodl	equ	0xFF3
  7791                           intcon	equ	0xFF2
  7792                           intcon2	equ	0xFF1
  7793                           intcon3	equ	0xFF0
  7794                           postinc0	equ	0xFEE
  7795                           wreg	equ	0xFE8
  7796                           postdec1	equ	0xFE5
  7797                           fsr1l	equ	0xFE1
  7798                           indf2	equ	0xFDF
  7799                           postinc2	equ	0xFDE
  7800                           fsr2h	equ	0xFDA
  7801                           fsr2l	equ	0xFD9
  7802                           status	equ	0xFD8
  7803                           
  7804 ;; *************** function ___awtoft *****************
  7805 ;; Defined at:
  7806 ;;		line 32 in file "E:\XC8\sources\common\awtoft.c"
  7807 ;; Parameters:    Size  Location     Type
  7808 ;;  c               2   22[COMRAM] int 
  7809 ;; Auto vars:     Size  Location     Type
  7810 ;;  sign            1   25[COMRAM] unsigned char 
  7811 ;; Return value:  Size  Location     Type
  7812 ;;                  3   22[COMRAM] float 
  7813 ;; Registers used:
  7814 ;;		wreg, status,2, status,0, cstack
  7815 ;; Tracked objects:
  7816 ;;		On entry : 0/0
  7817 ;;		On exit  : 0/0
  7818 ;;		Unchanged: 0/0
  7819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7820 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7821 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7822 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7823 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7824 ;;Total ram usage:        4 bytes
  7825 ;; Hardware stack levels used:    1
  7826 ;; Hardware stack levels required when called:    3
  7827 ;; This function calls:
  7828 ;;		___ftpack
  7829 ;; This function is called by:
  7830 ;;		_main
  7831 ;;		_update_LCD_misc
  7832 ;; This function uses a non-reentrant model
  7833 ;;
  7834                           
  7835                           	psect	text38
  7836  002440                     __ptext38:
  7837                           	opt stack 0
  7838  002440                     ___awtoft:
  7839                           	opt stack 27
  7840                           
  7841                           ;incstack = 0
  7842  002440  0E00               	movlw	0
  7843  002442  6E1A               	movwf	___awtoft@sign,c
  7844  002444  AE18               	btfss	___awtoft@c+1,7,c
  7845  002446  D007               	goto	l4513
  7846  002448  6C17               	negf	___awtoft@c,c
  7847  00244A  1E18               	comf	___awtoft@c+1,f,c
  7848  00244C  B0D8               	btfsc	status,0,c
  7849  00244E  2A18               	incf	___awtoft@c+1,f,c
  7850  002450  0E01               	movlw	1
  7851  002452  6E1A               	movwf	___awtoft@sign,c
  7852  002454  D000               	goto	l4513
  7853  002456                     l4513:
  7854  002456  C017  F00F         	movff	___awtoft@c,___ftpack@arg
  7855  00245A  C018  F010         	movff	___awtoft@c+1,___ftpack@arg+1
  7856  00245E  6A11               	clrf	___ftpack@arg+2,c
  7857  002460  0E8E               	movlw	142
  7858  002462  6E12               	movwf	___ftpack@exp,c
  7859  002464  C01A  F013         	movff	___awtoft@sign,___ftpack@sign
  7860  002468  EC7D  F00C         	call	___ftpack	;wreg free
  7861  00246C  C00F  F017         	movff	?___ftpack,?___awtoft
  7862  002470  C010  F018         	movff	?___ftpack+1,?___awtoft+1
  7863  002474  C011  F019         	movff	?___ftpack+2,?___awtoft+2
  7864  002478  D000               	goto	l814
  7865  00247A                     l814:
  7866  00247A  0012               	return		;funcret
  7867  00247C                     __end_of___awtoft:
  7868                           	opt stack 0
  7869                           tblptru	equ	0xFF8
  7870                           tblptrh	equ	0xFF7
  7871                           tblptrl	equ	0xFF6
  7872                           tablat	equ	0xFF5
  7873                           prodh	equ	0xFF4
  7874                           prodl	equ	0xFF3
  7875                           intcon	equ	0xFF2
  7876                           intcon2	equ	0xFF1
  7877                           intcon3	equ	0xFF0
  7878                           postinc0	equ	0xFEE
  7879                           wreg	equ	0xFE8
  7880                           postdec1	equ	0xFE5
  7881                           fsr1l	equ	0xFE1
  7882                           indf2	equ	0xFDF
  7883                           postinc2	equ	0xFDE
  7884                           fsr2h	equ	0xFDA
  7885                           fsr2l	equ	0xFD9
  7886                           status	equ	0xFD8
  7887                           
  7888 ;; *************** function ___ftpack *****************
  7889 ;; Defined at:
  7890 ;;		line 62 in file "E:\XC8\sources\common\float.c"
  7891 ;; Parameters:    Size  Location     Type
  7892 ;;  arg             3   14[COMRAM] unsigned um
  7893 ;;  exp             1   17[COMRAM] unsigned char 
  7894 ;;  sign            1   18[COMRAM] unsigned char 
  7895 ;; Auto vars:     Size  Location     Type
  7896 ;;		None
  7897 ;; Return value:  Size  Location     Type
  7898 ;;                  3   14[COMRAM] float 
  7899 ;; Registers used:
  7900 ;;		wreg, status,2, status,0
  7901 ;; Tracked objects:
  7902 ;;		On entry : 0/0
  7903 ;;		On exit  : 0/0
  7904 ;;		Unchanged: 0/0
  7905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7906 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7907 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7908 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7909 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7910 ;;Total ram usage:        8 bytes
  7911 ;; Hardware stack levels used:    1
  7912 ;; Hardware stack levels required when called:    2
  7913 ;; This function calls:
  7914 ;;		Nothing
  7915 ;; This function is called by:
  7916 ;;		___awtoft
  7917 ;;		___ftdiv
  7918 ;; This function uses a non-reentrant model
  7919 ;;
  7920                           
  7921                           	psect	text39
  7922  0018FA                     __ptext39:
  7923                           	opt stack 0
  7924  0018FA                     ___ftpack:
  7925                           	opt stack 27
  7926                           
  7927                           ;incstack = 0
  7928  0018FA  5012               	movf	___ftpack@exp,w,c
  7929  0018FC  B4D8               	btfsc	status,2,c
  7930  0018FE  D005               	goto	l4333
  7931  001900  500F               	movf	___ftpack@arg,w,c
  7932  001902  1010               	iorwf	___ftpack@arg+1,w,c
  7933  001904  1011               	iorwf	___ftpack@arg+2,w,c
  7934  001906  A4D8               	btfss	status,2,c
  7935  001908  D00E               	goto	l4339
  7936  00190A                     l4333:
  7937  00190A  0E00               	movlw	0
  7938  00190C  6E0F               	movwf	?___ftpack,c
  7939  00190E  0E00               	movlw	0
  7940  001910  6E10               	movwf	?___ftpack+1,c
  7941  001912  0E00               	movlw	0
  7942  001914  6E11               	movwf	?___ftpack+2,c
  7943  001916  D053               	goto	l904
  7944  001918  D006               	goto	l4339
  7945  00191A                     l4337:
  7946  00191A  2A12               	incf	___ftpack@exp,f,c
  7947  00191C  90D8               	bcf	status,0,c
  7948  00191E  3211               	rrcf	___ftpack@arg+2,f,c
  7949  001920  3210               	rrcf	___ftpack@arg+1,f,c
  7950  001922  320F               	rrcf	___ftpack@arg,f,c
  7951  001924  D000               	goto	l4339
  7952  001926                     l4339:
  7953  001926  0E00               	movlw	0
  7954  001928  140F               	andwf	___ftpack@arg,w,c
  7955  00192A  6E14               	movwf	??___ftpack& (0+255),c
  7956  00192C  0E00               	movlw	0
  7957  00192E  1410               	andwf	___ftpack@arg+1,w,c
  7958  001930  6E15               	movwf	(??___ftpack+1)& (0+255),c
  7959  001932  0EFE               	movlw	254
  7960  001934  1411               	andwf	___ftpack@arg+2,w,c
  7961  001936  6E16               	movwf	(??___ftpack+2)& (0+255),c
  7962  001938  5014               	movf	??___ftpack,w,c
  7963  00193A  1015               	iorwf	??___ftpack+1,w,c
  7964  00193C  1016               	iorwf	??___ftpack+2,w,c
  7965  00193E  B4D8               	btfsc	status,2,c
  7966  001940  D00E               	goto	l4345
  7967  001942  D7EB               	goto	l4337
  7968  001944  D00C               	goto	l4345
  7969  001946                     l4341:
  7970  001946  2A12               	incf	___ftpack@exp,f,c
  7971  001948  0E01               	movlw	1
  7972  00194A  260F               	addwf	___ftpack@arg,f,c
  7973  00194C  0E00               	movlw	0
  7974  00194E  2210               	addwfc	___ftpack@arg+1,f,c
  7975  001950  0E00               	movlw	0
  7976  001952  2211               	addwfc	___ftpack@arg+2,f,c
  7977  001954  90D8               	bcf	status,0,c
  7978  001956  3211               	rrcf	___ftpack@arg+2,f,c
  7979  001958  3210               	rrcf	___ftpack@arg+1,f,c
  7980  00195A  320F               	rrcf	___ftpack@arg,f,c
  7981  00195C  D000               	goto	l4345
  7982  00195E                     l4345:
  7983  00195E  0E00               	movlw	0
  7984  001960  140F               	andwf	___ftpack@arg,w,c
  7985  001962  6E14               	movwf	??___ftpack& (0+255),c
  7986  001964  0E00               	movlw	0
  7987  001966  1410               	andwf	___ftpack@arg+1,w,c
  7988  001968  6E15               	movwf	(??___ftpack+1)& (0+255),c
  7989  00196A  0EFF               	movlw	255
  7990  00196C  1411               	andwf	___ftpack@arg+2,w,c
  7991  00196E  6E16               	movwf	(??___ftpack+2)& (0+255),c
  7992  001970  5014               	movf	??___ftpack,w,c
  7993  001972  1015               	iorwf	??___ftpack+1,w,c
  7994  001974  1016               	iorwf	??___ftpack+2,w,c
  7995  001976  B4D8               	btfsc	status,2,c
  7996  001978  D008               	goto	l4349
  7997  00197A  D7E5               	goto	l4341
  7998  00197C  D006               	goto	l4349
  7999  00197E                     l4347:
  8000  00197E  0612               	decf	___ftpack@exp,f,c
  8001  001980  90D8               	bcf	status,0,c
  8002  001982  360F               	rlcf	___ftpack@arg,f,c
  8003  001984  3610               	rlcf	___ftpack@arg+1,f,c
  8004  001986  3611               	rlcf	___ftpack@arg+2,f,c
  8005  001988  D000               	goto	l4349
  8006  00198A                     l4349:
  8007  00198A  BE10               	btfsc	___ftpack@arg+1,7,c
  8008  00198C  D004               	goto	l915
  8009  00198E  0E02               	movlw	2
  8010  001990  6012               	cpfslt	___ftpack@exp,c
  8011  001992  D7F5               	goto	l4347
  8012  001994  D000               	goto	l915
  8013  001996                     l915:
  8014  001996  B012               	btfsc	___ftpack@exp,0,c
  8015  001998  D002               	goto	l4355
  8016  00199A  9E10               	bcf	___ftpack@arg+1,7,c
  8017  00199C  D000               	goto	l4355
  8018  00199E                     l4355:
  8019  00199E  90D8               	bcf	status,0,c
  8020  0019A0  3212               	rrcf	___ftpack@exp,f,c
  8021  0019A2  5012               	movf	___ftpack@exp,w,c
  8022  0019A4  1211               	iorwf	___ftpack@arg+2,f,c
  8023  0019A6  5013               	movf	___ftpack@sign,w,c
  8024  0019A8  B4D8               	btfsc	status,2,c
  8025  0019AA  D002               	goto	l4361
  8026  0019AC  8E11               	bsf	___ftpack@arg+2,7,c
  8027  0019AE  D000               	goto	l4361
  8028  0019B0                     l4361:
  8029  0019B0  C00F  F00F         	movff	___ftpack@arg,?___ftpack
  8030  0019B4  C010  F010         	movff	___ftpack@arg+1,?___ftpack+1
  8031  0019B8  C011  F011         	movff	___ftpack@arg+2,?___ftpack+2
  8032  0019BC  D000               	goto	l904
  8033  0019BE                     l904:
  8034  0019BE  0012               	return		;funcret
  8035  0019C0                     __end_of___ftpack:
  8036                           	opt stack 0
  8037                           tblptru	equ	0xFF8
  8038                           tblptrh	equ	0xFF7
  8039                           tblptrl	equ	0xFF6
  8040                           tablat	equ	0xFF5
  8041                           prodh	equ	0xFF4
  8042                           prodl	equ	0xFF3
  8043                           intcon	equ	0xFF2
  8044                           intcon2	equ	0xFF1
  8045                           intcon3	equ	0xFF0
  8046                           postinc0	equ	0xFEE
  8047                           wreg	equ	0xFE8
  8048                           postdec1	equ	0xFE5
  8049                           fsr1l	equ	0xFE1
  8050                           indf2	equ	0xFDF
  8051                           postinc2	equ	0xFDE
  8052                           fsr2h	equ	0xFDA
  8053                           fsr2l	equ	0xFD9
  8054                           status	equ	0xFD8
  8055                           
  8056 ;; *************** function _strcpy *****************
  8057 ;; Defined at:
  8058 ;;		line 8 in file "E:\XC8\sources\common\strcpy.c"
  8059 ;; Parameters:    Size  Location     Type
  8060 ;;  to              2   14[COMRAM] PTR unsigned char 
  8061 ;;		 -> NULL(0), buffer(31), 
  8062 ;;  from            2   16[COMRAM] PTR const unsigned char 
  8063 ;;		 -> STR_16(2), STR_15(2), STR_14(2), STR_13(2), 
  8064 ;;		 -> STR_12(21), STR_11(4), STR_10(4), STR_9(7), 
  8065 ;;		 -> STR_8(12), STR_7(7), STR_6(10), STR_5(2), 
  8066 ;;		 -> STR_4(4), STR_3(4), STR_2(6), STR_1(20), 
  8067 ;; Auto vars:     Size  Location     Type
  8068 ;;  cp              2   18[COMRAM] PTR unsigned char 
  8069 ;;		 -> NULL(0), buffer(31), 
  8070 ;; Return value:  Size  Location     Type
  8071 ;;                  2   14[COMRAM] PTR unsigned char 
  8072 ;; Registers used:
  8073 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  8074 ;; Tracked objects:
  8075 ;;		On entry : 0/0
  8076 ;;		On exit  : 0/0
  8077 ;;		Unchanged: 0/0
  8078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8079 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8080 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8081 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8082 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8083 ;;Total ram usage:        6 bytes
  8084 ;; Hardware stack levels used:    1
  8085 ;; Hardware stack levels required when called:    2
  8086 ;; This function calls:
  8087 ;;		Nothing
  8088 ;; This function is called by:
  8089 ;;		_Initialize_Screen
  8090 ;;		_Wait_One_Second
  8091 ;;		_Wait_One_Second_With_Beep
  8092 ;; This function uses a non-reentrant model
  8093 ;;
  8094                           
  8095                           	psect	text40
  8096  0024B2                     __ptext40:
  8097                           	opt stack 0
  8098  0024B2                     _strcpy:
  8099                           	opt stack 25
  8100                           
  8101                           ;incstack = 0
  8102  0024B2  C00F  F013         	movff	strcpy@to,strcpy@cp
  8103  0024B6  C010  F014         	movff	strcpy@to+1,strcpy@cp+1
  8104  0024BA  D005               	goto	l4553
  8105  0024BC                     l4551:
  8106  0024BC  4A13               	infsnz	strcpy@cp,f,c
  8107  0024BE  2A14               	incf	strcpy@cp+1,f,c
  8108  0024C0  4A11               	infsnz	strcpy@from,f,c
  8109  0024C2  2A12               	incf	strcpy@from+1,f,c
  8110  0024C4  D000               	goto	l4553
  8111  0024C6                     l4553:
  8112  0024C6  C011  FFF6         	movff	strcpy@from,tblptrl
  8113  0024CA  C012  FFF7         	movff	strcpy@from+1,tblptrh
  8114  0024CE                     	if	0	;tblptru may be non-zero
  8115  0024CE                     	endif
  8116  0024CE                     	if	0	;tblptru may be non-zero
  8117  0024CE                     	endif
  8118  0024CE  C013  FFD9         	movff	strcpy@cp,fsr2l
  8119  0024D2  C014  FFDA         	movff	strcpy@cp+1,fsr2h
  8120  0024D6  0008               	tblrd		*
  8121  0024D8  CFF5 FFDF          	movff	tablat,indf2
  8122  0024DC  50DF               	movf	indf2,w,c
  8123  0024DE  A4D8               	btfss	status,2,c
  8124  0024E0  D7ED               	goto	l4551
  8125                           
  8126                           ;	Return value of _strcpy is never used
  8127  0024E2  0012               	return		;funcret
  8128  0024E4                     __end_of_strcpy:
  8129                           	opt stack 0
  8130                           tblptru	equ	0xFF8
  8131                           tblptrh	equ	0xFF7
  8132                           tblptrl	equ	0xFF6
  8133                           tablat	equ	0xFF5
  8134                           prodh	equ	0xFF4
  8135                           prodl	equ	0xFF3
  8136                           intcon	equ	0xFF2
  8137                           intcon2	equ	0xFF1
  8138                           intcon3	equ	0xFF0
  8139                           postinc0	equ	0xFEE
  8140                           wreg	equ	0xFE8
  8141                           postdec1	equ	0xFE5
  8142                           fsr1l	equ	0xFE1
  8143                           indf2	equ	0xFDF
  8144                           postinc2	equ	0xFDE
  8145                           fsr2h	equ	0xFDA
  8146                           fsr2l	equ	0xFD9
  8147                           status	equ	0xFD8
  8148                           
  8149 ;; *************** function _Wait_Half_Second *****************
  8150 ;; Defined at:
  8151 ;;		line 607 in file "Lab8pC.c"
  8152 ;; Parameters:    Size  Location     Type
  8153 ;;		None
  8154 ;; Auto vars:     Size  Location     Type
  8155 ;;		None
  8156 ;; Return value:  Size  Location     Type
  8157 ;;		None               void
  8158 ;; Registers used:
  8159 ;;		wreg, status,2
  8160 ;; Tracked objects:
  8161 ;;		On entry : 0/0
  8162 ;;		On exit  : 0/0
  8163 ;;		Unchanged: 0/0
  8164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8165 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8166 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8167 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8168 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8169 ;;Total ram usage:        0 bytes
  8170 ;; Hardware stack levels used:    1
  8171 ;; Hardware stack levels required when called:    2
  8172 ;; This function calls:
  8173 ;;		Nothing
  8174 ;; This function is called by:
  8175 ;;		_Wait_One_Second
  8176 ;;		_Wait_One_Second_With_Beep
  8177 ;;		_Old_Wait_One_Second
  8178 ;; This function uses a non-reentrant model
  8179 ;;
  8180                           
  8181                           	psect	text41
  8182  0025D2                     __ptext41:
  8183                           	opt stack 0
  8184  0025D2                     _Wait_Half_Second:
  8185                           	opt stack 25
  8186                           
  8187                           ;Lab8pC.c: 609: T0CON = 0x03;
  8188                           
  8189                           ;incstack = 0
  8190  0025D2  0E03               	movlw	3
  8191  0025D4  6ED5               	movwf	4053,c	;volatile
  8192                           
  8193                           ;Lab8pC.c: 610: TMR0L = 0xDB;
  8194  0025D6  0EDB               	movlw	219
  8195  0025D8  6ED6               	movwf	4054,c	;volatile
  8196                           
  8197                           ;Lab8pC.c: 611: TMR0H = 0x0B;
  8198  0025DA  0E0B               	movlw	11
  8199  0025DC  6ED7               	movwf	4055,c	;volatile
  8200                           
  8201                           ;Lab8pC.c: 612: INTCONbits.TMR0IF = 0;
  8202  0025DE  94F2               	bcf	intcon,2,c	;volatile
  8203                           
  8204                           ;Lab8pC.c: 613: T0CONbits.TMR0ON = 1;
  8205  0025E0  8ED5               	bsf	4053,7,c	;volatile
  8206                           
  8207                           ;Lab8pC.c: 614: while (INTCONbits.TMR0IF == 0);
  8208  0025E2  D000               	goto	l512
  8209  0025E4                     l512:
  8210  0025E4  A4F2               	btfss	intcon,2,c	;volatile
  8211  0025E6  D7FE               	goto	l512
  8212                           
  8213                           ;Lab8pC.c: 615: T0CONbits.TMR0ON = 0;
  8214  0025E8  9ED5               	bcf	4053,7,c	;volatile
  8215  0025EA  0012               	return		;funcret
  8216  0025EC                     __end_of_Wait_Half_Second:
  8217                           	opt stack 0
  8218                           tblptru	equ	0xFF8
  8219                           tblptrh	equ	0xFF7
  8220                           tblptrl	equ	0xFF6
  8221                           tablat	equ	0xFF5
  8222                           prodh	equ	0xFF4
  8223                           prodl	equ	0xFF3
  8224                           intcon	equ	0xFF2
  8225                           intcon2	equ	0xFF1
  8226                           intcon3	equ	0xFF0
  8227                           postinc0	equ	0xFEE
  8228                           wreg	equ	0xFE8
  8229                           postdec1	equ	0xFE5
  8230                           fsr1l	equ	0xFE1
  8231                           indf2	equ	0xFDF
  8232                           postinc2	equ	0xFDE
  8233                           fsr2h	equ	0xFDA
  8234                           fsr2l	equ	0xFD9
  8235                           status	equ	0xFD8
  8236                           
  8237 ;; *************** function _Set_NS_LT *****************
  8238 ;; Defined at:
  8239 ;;		line 405 in file "Lab8pC.c"
  8240 ;; Parameters:    Size  Location     Type
  8241 ;;  color           1    wreg     unsigned char 
  8242 ;; Auto vars:     Size  Location     Type
  8243 ;;  color           1    2[BANK0 ] unsigned char 
  8244 ;; Return value:  Size  Location     Type
  8245 ;;		None               void
  8246 ;; Registers used:
  8247 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8248 ;; Tracked objects:
  8249 ;;		On entry : 0/0
  8250 ;;		On exit  : 0/0
  8251 ;;		Unchanged: 0/0
  8252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8253 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8254 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8255 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8256 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8257 ;;Total ram usage:        1 bytes
  8258 ;; Hardware stack levels used:    1
  8259 ;; Hardware stack levels required when called:    9
  8260 ;; This function calls:
  8261 ;;		_update_LCD_color
  8262 ;; This function is called by:
  8263 ;;		_Do_Flashing
  8264 ;;		_Day_Mode
  8265 ;;		_Night_Mode
  8266 ;; This function uses a non-reentrant model
  8267 ;;
  8268                           
  8269                           	psect	text42
  8270  0022A4                     __ptext42:
  8271                           	opt stack 0
  8272  0022A4                     _Set_NS_LT:
  8273                           	opt stack 20
  8274                           
  8275                           ;incstack = 0
  8276                           ;Set_NS_LT@color stored from wreg
  8277  0022A4  0100               	movlb	0	; () banked
  8278  0022A6  6FA9               	movwf	Set_NS_LT@color& (0+255),b
  8279                           
  8280                           ; BSR set to: 0
  8281                           ;Lab8pC.c: 407: direction = 3;
  8282  0022A8  0E03               	movlw	3
  8283  0022AA  6E59               	movwf	_direction,c
  8284                           
  8285                           ; BSR set to: 0
  8286                           ;Lab8pC.c: 408: update_LCD_color(direction, color);
  8287  0022AC  C0A9  F041         	movff	Set_NS_LT@color,update_LCD_color@color
  8288  0022B0  5059               	movf	_direction,w,c
  8289  0022B2  EC9D  F003         	call	_update_LCD_color
  8290                           
  8291                           ;Lab8pC.c: 409: switch (color)
  8292  0022B6  D00A               	goto	l4905
  8293  0022B8                     l446:
  8294                           
  8295                           ; BSR set to: 0
  8296  0022B8  9881               	bcf	3969,4,c	;volatile
  8297  0022BA  D001               	goto	L9
  8298  0022BC                     l448:
  8299                           
  8300                           ; BSR set to: 0
  8301  0022BC  8881               	bsf	3969,4,c	;volatile
  8302  0022BE                     L9:
  8303  0022BE  9A81               	bcf	3969,5,c	;volatile
  8304  0022C0  D014               	goto	l451
  8305  0022C2                     l449:
  8306                           
  8307                           ; BSR set to: 0
  8308  0022C2  9881               	bcf	3969,4,c	;volatile
  8309  0022C4  D001               	goto	L10
  8310  0022C6                     l450:
  8311                           
  8312                           ; BSR set to: 0
  8313  0022C6  8881               	bsf	3969,4,c	;volatile
  8314  0022C8                     L10:
  8315  0022C8  8A81               	bsf	3969,5,c	;volatile
  8316                           
  8317                           ; BSR set to: 0
  8318                           ;Lab8pC.c: 415: }
  8319  0022CA  D00F               	goto	l451
  8320  0022CC                     l4905:
  8321  0022CC  0100               	movlb	0	; () banked
  8322  0022CE  51A9               	movf	Set_NS_LT@color& (0+255),w,b
  8323                           
  8324                           ; Switch size 1, requested type "space"
  8325                           ; Number of cases is 4, Range of values is 0 to 3
  8326                           ; switch strategies available:
  8327                           ; Name         Instructions Cycles
  8328                           ; simple_byte           13     7 (average)
  8329                           ;	Chosen strategy is simple_byte
  8330  0022D0  0A00               	xorlw	0	; case 0
  8331  0022D2  B4D8               	btfsc	status,2,c
  8332  0022D4  D7F1               	goto	l446
  8333  0022D6  0A01               	xorlw	1	; case 1
  8334  0022D8  B4D8               	btfsc	status,2,c
  8335  0022DA  D7F0               	goto	l448
  8336  0022DC  0A03               	xorlw	3	; case 2
  8337  0022DE  B4D8               	btfsc	status,2,c
  8338  0022E0  D7F0               	goto	l449
  8339  0022E2  0A01               	xorlw	1	; case 3
  8340  0022E4  B4D8               	btfsc	status,2,c
  8341  0022E6  D7EF               	goto	l450
  8342  0022E8  D000               	goto	l451
  8343  0022EA                     l451:
  8344                           
  8345                           ; BSR set to: 0
  8346  0022EA  0012               	return		;funcret
  8347  0022EC                     __end_of_Set_NS_LT:
  8348                           	opt stack 0
  8349                           tblptru	equ	0xFF8
  8350                           tblptrh	equ	0xFF7
  8351                           tblptrl	equ	0xFF6
  8352                           tablat	equ	0xFF5
  8353                           prodh	equ	0xFF4
  8354                           prodl	equ	0xFF3
  8355                           intcon	equ	0xFF2
  8356                           intcon2	equ	0xFF1
  8357                           intcon3	equ	0xFF0
  8358                           postinc0	equ	0xFEE
  8359                           wreg	equ	0xFE8
  8360                           postdec1	equ	0xFE5
  8361                           fsr1l	equ	0xFE1
  8362                           indf2	equ	0xFDF
  8363                           postinc2	equ	0xFDE
  8364                           fsr2h	equ	0xFDA
  8365                           fsr2l	equ	0xFD9
  8366                           status	equ	0xFD8
  8367                           
  8368 ;; *************** function _Set_NS *****************
  8369 ;; Defined at:
  8370 ;;		line 391 in file "Lab8pC.c"
  8371 ;; Parameters:    Size  Location     Type
  8372 ;;  color           1    wreg     unsigned char 
  8373 ;; Auto vars:     Size  Location     Type
  8374 ;;  color           1    2[BANK0 ] unsigned char 
  8375 ;; Return value:  Size  Location     Type
  8376 ;;		None               void
  8377 ;; Registers used:
  8378 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8379 ;; Tracked objects:
  8380 ;;		On entry : 0/0
  8381 ;;		On exit  : 0/0
  8382 ;;		Unchanged: 0/0
  8383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8384 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8385 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8386 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8387 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8388 ;;Total ram usage:        1 bytes
  8389 ;; Hardware stack levels used:    1
  8390 ;; Hardware stack levels required when called:    9
  8391 ;; This function calls:
  8392 ;;		_update_LCD_color
  8393 ;; This function is called by:
  8394 ;;		_Do_Flashing
  8395 ;;		_Day_Mode
  8396 ;;		_Night_Mode
  8397 ;; This function uses a non-reentrant model
  8398 ;;
  8399                           
  8400                           	psect	text43
  8401  0022EC                     __ptext43:
  8402                           	opt stack 0
  8403  0022EC                     _Set_NS:
  8404                           	opt stack 20
  8405                           
  8406                           ; BSR set to: 0
  8407                           ;incstack = 0
  8408                           ;Set_NS@color stored from wreg
  8409  0022EC  0100               	movlb	0	; () banked
  8410  0022EE  6FA9               	movwf	Set_NS@color& (0+255),b
  8411                           
  8412                           ; BSR set to: 0
  8413                           ;Lab8pC.c: 393: direction = 2;
  8414  0022F0  0E02               	movlw	2
  8415  0022F2  6E59               	movwf	_direction,c
  8416                           
  8417                           ; BSR set to: 0
  8418                           ;Lab8pC.c: 394: update_LCD_color(direction, color);
  8419  0022F4  C0A9  F041         	movff	Set_NS@color,update_LCD_color@color
  8420  0022F8  5059               	movf	_direction,w,c
  8421  0022FA  EC9D  F003         	call	_update_LCD_color
  8422                           
  8423                           ;Lab8pC.c: 396: switch (color)
  8424  0022FE  D00A               	goto	l4913
  8425  002300                     l437:
  8426                           
  8427                           ; BSR set to: 0
  8428  002300  9280               	bcf	3968,1,c	;volatile
  8429  002302  D001               	goto	L11
  8430  002304                     l439:
  8431                           
  8432                           ; BSR set to: 0
  8433  002304  8280               	bsf	3968,1,c	;volatile
  8434  002306                     L11:
  8435  002306  9480               	bcf	3968,2,c	;volatile
  8436  002308  D014               	goto	l442
  8437  00230A                     l440:
  8438                           
  8439                           ; BSR set to: 0
  8440  00230A  9280               	bcf	3968,1,c	;volatile
  8441  00230C  D001               	goto	L12
  8442  00230E                     l441:
  8443                           
  8444                           ; BSR set to: 0
  8445  00230E  8280               	bsf	3968,1,c	;volatile
  8446  002310                     L12:
  8447  002310  8480               	bsf	3968,2,c	;volatile
  8448                           
  8449                           ; BSR set to: 0
  8450                           ;Lab8pC.c: 402: }
  8451  002312  D00F               	goto	l442
  8452  002314                     l4913:
  8453  002314  0100               	movlb	0	; () banked
  8454  002316  51A9               	movf	Set_NS@color& (0+255),w,b
  8455                           
  8456                           ; Switch size 1, requested type "space"
  8457                           ; Number of cases is 4, Range of values is 0 to 3
  8458                           ; switch strategies available:
  8459                           ; Name         Instructions Cycles
  8460                           ; simple_byte           13     7 (average)
  8461                           ;	Chosen strategy is simple_byte
  8462  002318  0A00               	xorlw	0	; case 0
  8463  00231A  B4D8               	btfsc	status,2,c
  8464  00231C  D7F1               	goto	l437
  8465  00231E  0A01               	xorlw	1	; case 1
  8466  002320  B4D8               	btfsc	status,2,c
  8467  002322  D7F0               	goto	l439
  8468  002324  0A03               	xorlw	3	; case 2
  8469  002326  B4D8               	btfsc	status,2,c
  8470  002328  D7F0               	goto	l440
  8471  00232A  0A01               	xorlw	1	; case 3
  8472  00232C  B4D8               	btfsc	status,2,c
  8473  00232E  D7EF               	goto	l441
  8474  002330  D000               	goto	l442
  8475  002332                     l442:
  8476                           
  8477                           ; BSR set to: 0
  8478  002332  0012               	return		;funcret
  8479  002334                     __end_of_Set_NS:
  8480                           	opt stack 0
  8481                           tblptru	equ	0xFF8
  8482                           tblptrh	equ	0xFF7
  8483                           tblptrl	equ	0xFF6
  8484                           tablat	equ	0xFF5
  8485                           prodh	equ	0xFF4
  8486                           prodl	equ	0xFF3
  8487                           intcon	equ	0xFF2
  8488                           intcon2	equ	0xFF1
  8489                           intcon3	equ	0xFF0
  8490                           postinc0	equ	0xFEE
  8491                           wreg	equ	0xFE8
  8492                           postdec1	equ	0xFE5
  8493                           fsr1l	equ	0xFE1
  8494                           indf2	equ	0xFDF
  8495                           postinc2	equ	0xFDE
  8496                           fsr2h	equ	0xFDA
  8497                           fsr2l	equ	0xFD9
  8498                           status	equ	0xFD8
  8499                           
  8500 ;; *************** function _Set_EW_LT *****************
  8501 ;; Defined at:
  8502 ;;		line 431 in file "Lab8pC.c"
  8503 ;; Parameters:    Size  Location     Type
  8504 ;;  color           1    wreg     unsigned char 
  8505 ;; Auto vars:     Size  Location     Type
  8506 ;;  color           1    2[BANK0 ] unsigned char 
  8507 ;; Return value:  Size  Location     Type
  8508 ;;		None               void
  8509 ;; Registers used:
  8510 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8511 ;; Tracked objects:
  8512 ;;		On entry : 0/0
  8513 ;;		On exit  : 0/0
  8514 ;;		Unchanged: 0/0
  8515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8516 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8517 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8518 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8519 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8520 ;;Total ram usage:        1 bytes
  8521 ;; Hardware stack levels used:    1
  8522 ;; Hardware stack levels required when called:    9
  8523 ;; This function calls:
  8524 ;;		_update_LCD_color
  8525 ;; This function is called by:
  8526 ;;		_Do_Flashing
  8527 ;;		_Day_Mode
  8528 ;;		_Night_Mode
  8529 ;; This function uses a non-reentrant model
  8530 ;;
  8531                           
  8532                           	psect	text44
  8533  002334                     __ptext44:
  8534                           	opt stack 0
  8535  002334                     _Set_EW_LT:
  8536                           	opt stack 20
  8537                           
  8538                           ; BSR set to: 0
  8539                           ;incstack = 0
  8540                           ;Set_EW_LT@color stored from wreg
  8541  002334  0100               	movlb	0	; () banked
  8542  002336  6FA9               	movwf	Set_EW_LT@color& (0+255),b
  8543                           
  8544                           ; BSR set to: 0
  8545                           ;Lab8pC.c: 433: direction = 1;
  8546  002338  0E01               	movlw	1
  8547  00233A  6E59               	movwf	_direction,c
  8548                           
  8549                           ; BSR set to: 0
  8550                           ;Lab8pC.c: 434: update_LCD_color(direction, color);
  8551  00233C  C0A9  F041         	movff	Set_EW_LT@color,update_LCD_color@color
  8552  002340  5059               	movf	_direction,w,c
  8553  002342  EC9D  F003         	call	_update_LCD_color
  8554                           
  8555                           ;Lab8pC.c: 435: switch (color)
  8556  002346  D00A               	goto	l4897
  8557  002348                     l464:
  8558                           
  8559                           ; BSR set to: 0
  8560  002348  9084               	bcf	3972,0,c	;volatile
  8561  00234A  D001               	goto	L13
  8562  00234C                     l466:
  8563                           
  8564                           ; BSR set to: 0
  8565  00234C  8084               	bsf	3972,0,c	;volatile
  8566  00234E                     L13:
  8567  00234E  9484               	bcf	3972,2,c	;volatile
  8568  002350  D014               	goto	l469
  8569  002352                     l467:
  8570                           
  8571                           ; BSR set to: 0
  8572  002352  9084               	bcf	3972,0,c	;volatile
  8573  002354  D001               	goto	L14
  8574  002356                     l468:
  8575                           
  8576                           ; BSR set to: 0
  8577  002356  8084               	bsf	3972,0,c	;volatile
  8578  002358                     L14:
  8579  002358  8484               	bsf	3972,2,c	;volatile
  8580                           
  8581                           ; BSR set to: 0
  8582                           ;Lab8pC.c: 441: }
  8583  00235A  D00F               	goto	l469
  8584  00235C                     l4897:
  8585  00235C  0100               	movlb	0	; () banked
  8586  00235E  51A9               	movf	Set_EW_LT@color& (0+255),w,b
  8587                           
  8588                           ; Switch size 1, requested type "space"
  8589                           ; Number of cases is 4, Range of values is 0 to 3
  8590                           ; switch strategies available:
  8591                           ; Name         Instructions Cycles
  8592                           ; simple_byte           13     7 (average)
  8593                           ;	Chosen strategy is simple_byte
  8594  002360  0A00               	xorlw	0	; case 0
  8595  002362  B4D8               	btfsc	status,2,c
  8596  002364  D7F1               	goto	l464
  8597  002366  0A01               	xorlw	1	; case 1
  8598  002368  B4D8               	btfsc	status,2,c
  8599  00236A  D7F0               	goto	l466
  8600  00236C  0A03               	xorlw	3	; case 2
  8601  00236E  B4D8               	btfsc	status,2,c
  8602  002370  D7F0               	goto	l467
  8603  002372  0A01               	xorlw	1	; case 3
  8604  002374  B4D8               	btfsc	status,2,c
  8605  002376  D7EF               	goto	l468
  8606  002378  D000               	goto	l469
  8607  00237A                     l469:
  8608                           
  8609                           ; BSR set to: 0
  8610  00237A  0012               	return		;funcret
  8611  00237C                     __end_of_Set_EW_LT:
  8612                           	opt stack 0
  8613                           tblptru	equ	0xFF8
  8614                           tblptrh	equ	0xFF7
  8615                           tblptrl	equ	0xFF6
  8616                           tablat	equ	0xFF5
  8617                           prodh	equ	0xFF4
  8618                           prodl	equ	0xFF3
  8619                           intcon	equ	0xFF2
  8620                           intcon2	equ	0xFF1
  8621                           intcon3	equ	0xFF0
  8622                           postinc0	equ	0xFEE
  8623                           wreg	equ	0xFE8
  8624                           postdec1	equ	0xFE5
  8625                           fsr1l	equ	0xFE1
  8626                           indf2	equ	0xFDF
  8627                           postinc2	equ	0xFDE
  8628                           fsr2h	equ	0xFDA
  8629                           fsr2l	equ	0xFD9
  8630                           status	equ	0xFD8
  8631                           
  8632 ;; *************** function _Set_EW *****************
  8633 ;; Defined at:
  8634 ;;		line 418 in file "Lab8pC.c"
  8635 ;; Parameters:    Size  Location     Type
  8636 ;;  color           1    wreg     unsigned char 
  8637 ;; Auto vars:     Size  Location     Type
  8638 ;;  color           1    2[BANK0 ] unsigned char 
  8639 ;; Return value:  Size  Location     Type
  8640 ;;		None               void
  8641 ;; Registers used:
  8642 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8643 ;; Tracked objects:
  8644 ;;		On entry : 0/0
  8645 ;;		On exit  : 0/0
  8646 ;;		Unchanged: 0/0
  8647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8648 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8649 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8650 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8651 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8652 ;;Total ram usage:        1 bytes
  8653 ;; Hardware stack levels used:    1
  8654 ;; Hardware stack levels required when called:    9
  8655 ;; This function calls:
  8656 ;;		_update_LCD_color
  8657 ;; This function is called by:
  8658 ;;		_Do_Flashing
  8659 ;;		_Day_Mode
  8660 ;;		_Night_Mode
  8661 ;; This function uses a non-reentrant model
  8662 ;;
  8663                           
  8664                           	psect	text45
  8665  00237C                     __ptext45:
  8666                           	opt stack 0
  8667  00237C                     _Set_EW:
  8668                           	opt stack 20
  8669                           
  8670                           ; BSR set to: 0
  8671                           ;incstack = 0
  8672                           ;Set_EW@color stored from wreg
  8673  00237C  0100               	movlb	0	; () banked
  8674  00237E  6FA9               	movwf	Set_EW@color& (0+255),b
  8675                           
  8676                           ; BSR set to: 0
  8677                           ;Lab8pC.c: 420: direction = 0;
  8678  002380  0E00               	movlw	0
  8679  002382  6E59               	movwf	_direction,c
  8680                           
  8681                           ; BSR set to: 0
  8682                           ;Lab8pC.c: 421: update_LCD_color(direction, color);
  8683  002384  C0A9  F041         	movff	Set_EW@color,update_LCD_color@color
  8684  002388  5059               	movf	_direction,w,c
  8685  00238A  EC9D  F003         	call	_update_LCD_color
  8686                           
  8687                           ;Lab8pC.c: 422: switch (color)
  8688  00238E  D00A               	goto	l4889
  8689  002390                     l455:
  8690                           
  8691                           ; BSR set to: 0
  8692  002390  9C81               	bcf	3969,6,c	;volatile
  8693  002392  D001               	goto	L15
  8694  002394                     l457:
  8695                           
  8696                           ; BSR set to: 0
  8697  002394  8C81               	bsf	3969,6,c	;volatile
  8698  002396                     L15:
  8699  002396  9E81               	bcf	3969,7,c	;volatile
  8700  002398  D014               	goto	l460
  8701  00239A                     l458:
  8702                           
  8703                           ; BSR set to: 0
  8704  00239A  9C81               	bcf	3969,6,c	;volatile
  8705  00239C  D001               	goto	L16
  8706  00239E                     l459:
  8707                           
  8708                           ; BSR set to: 0
  8709  00239E  8C81               	bsf	3969,6,c	;volatile
  8710  0023A0                     L16:
  8711  0023A0  8E81               	bsf	3969,7,c	;volatile
  8712                           
  8713                           ; BSR set to: 0
  8714                           ;Lab8pC.c: 428: }
  8715  0023A2  D00F               	goto	l460
  8716  0023A4                     l4889:
  8717  0023A4  0100               	movlb	0	; () banked
  8718  0023A6  51A9               	movf	Set_EW@color& (0+255),w,b
  8719                           
  8720                           ; Switch size 1, requested type "space"
  8721                           ; Number of cases is 4, Range of values is 0 to 3
  8722                           ; switch strategies available:
  8723                           ; Name         Instructions Cycles
  8724                           ; simple_byte           13     7 (average)
  8725                           ;	Chosen strategy is simple_byte
  8726  0023A8  0A00               	xorlw	0	; case 0
  8727  0023AA  B4D8               	btfsc	status,2,c
  8728  0023AC  D7F1               	goto	l455
  8729  0023AE  0A01               	xorlw	1	; case 1
  8730  0023B0  B4D8               	btfsc	status,2,c
  8731  0023B2  D7F0               	goto	l457
  8732  0023B4  0A03               	xorlw	3	; case 2
  8733  0023B6  B4D8               	btfsc	status,2,c
  8734  0023B8  D7F0               	goto	l458
  8735  0023BA  0A01               	xorlw	1	; case 3
  8736  0023BC  B4D8               	btfsc	status,2,c
  8737  0023BE  D7EF               	goto	l459
  8738  0023C0  D000               	goto	l460
  8739  0023C2                     l460:
  8740                           
  8741                           ; BSR set to: 0
  8742  0023C2  0012               	return		;funcret
  8743  0023C4                     __end_of_Set_EW:
  8744                           	opt stack 0
  8745                           tblptru	equ	0xFF8
  8746                           tblptrh	equ	0xFF7
  8747                           tblptrl	equ	0xFF6
  8748                           tablat	equ	0xFF5
  8749                           prodh	equ	0xFF4
  8750                           prodl	equ	0xFF3
  8751                           intcon	equ	0xFF2
  8752                           intcon2	equ	0xFF1
  8753                           intcon3	equ	0xFF0
  8754                           postinc0	equ	0xFEE
  8755                           wreg	equ	0xFE8
  8756                           postdec1	equ	0xFE5
  8757                           fsr1l	equ	0xFE1
  8758                           indf2	equ	0xFDF
  8759                           postinc2	equ	0xFDE
  8760                           fsr2h	equ	0xFDA
  8761                           fsr2l	equ	0xFD9
  8762                           status	equ	0xFD8
  8763                           
  8764 ;; *************** function _update_LCD_color *****************
  8765 ;; Defined at:
  8766 ;;		line 630 in file "Lab8pC.c"
  8767 ;; Parameters:    Size  Location     Type
  8768 ;;  direction       1    wreg     unsigned char 
  8769 ;;  color           1   64[COMRAM] unsigned char 
  8770 ;; Auto vars:     Size  Location     Type
  8771 ;;  direction       1    0[BANK0 ] unsigned char 
  8772 ;;  Circle_Y        1    1[BANK0 ] unsigned char 
  8773 ;; Return value:  Size  Location     Type
  8774 ;;		None               void
  8775 ;; Registers used:
  8776 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8777 ;; Tracked objects:
  8778 ;;		On entry : 0/0
  8779 ;;		On exit  : 0/0
  8780 ;;		Unchanged: 0/0
  8781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8782 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8783 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8784 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8785 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8786 ;;Total ram usage:        3 bytes
  8787 ;; Hardware stack levels used:    1
  8788 ;; Hardware stack levels required when called:    8
  8789 ;; This function calls:
  8790 ;;		_drawCircle
  8791 ;;		_fillCircle
  8792 ;; This function is called by:
  8793 ;;		_Set_NS
  8794 ;;		_Set_NS_LT
  8795 ;;		_Set_EW
  8796 ;;		_Set_EW_LT
  8797 ;; This function uses a non-reentrant model
  8798 ;;
  8799                           
  8800                           	psect	text46
  8801  00073A                     __ptext46:
  8802                           	opt stack 0
  8803  00073A                     _update_LCD_color:
  8804                           	opt stack 20
  8805                           
  8806                           ; BSR set to: 0
  8807                           ;incstack = 0
  8808                           ;update_LCD_color@direction stored from wreg
  8809  00073A  0100               	movlb	0	; () banked
  8810  00073C  6FA7               	movwf	update_LCD_color@direction& (0+255),b
  8811                           
  8812                           ; BSR set to: 0
  8813                           ;Lab8pC.c: 632: char Circle_Y;
  8814                           ;Lab8pC.c: 633: Circle_Y = 20 + 15 + direction * 30;
  8815  00073E  0100               	movlb	0	; () banked
  8816  000740  51A7               	movf	update_LCD_color@direction& (0+255),w,b
  8817  000742  0D1E               	mullw	30
  8818  000744  50F3               	movf	prodl,w,c
  8819  000746  0F23               	addlw	35
  8820  000748  0100               	movlb	0	; () banked
  8821  00074A  6FA8               	movwf	update_LCD_color@Circle_Y& (0+255),b
  8822                           
  8823                           ; BSR set to: 0
  8824                           ;Lab8pC.c: 635: if (color == 0)
  8825  00074C  5041               	movf	update_LCD_color@color,w,c
  8826  00074E  A4D8               	btfss	status,2,c
  8827  000750  D067               	goto	l4561
  8828                           
  8829                           ; BSR set to: 0
  8830                           ;Lab8pC.c: 636: {
  8831                           ;Lab8pC.c: 637: fillCircle(40, Circle_Y, 7, 0x0000);
  8832  000752  0E00               	movlw	0
  8833  000754  6E3A               	movwf	fillCircle@x0+1,c
  8834  000756  0E28               	movlw	40
  8835  000758  6E39               	movwf	fillCircle@x0,c
  8836  00075A  C0A8  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  8837  00075E  6A3C               	clrf	fillCircle@y0+1,c
  8838  000760  0E00               	movlw	0
  8839  000762  6E3E               	movwf	fillCircle@r+1,c
  8840  000764  0E07               	movlw	7
  8841  000766  6E3D               	movwf	fillCircle@r,c
  8842  000768  0E00               	movlw	0
  8843  00076A  6E40               	movwf	fillCircle@color+1,c
  8844  00076C  0E00               	movlw	0
  8845  00076E  6E3F               	movwf	fillCircle@color,c
  8846  000770  ECDD  F010         	call	_fillCircle	;wreg free
  8847                           
  8848                           ;Lab8pC.c: 638: fillCircle(60, Circle_Y, 7, 0x0000);
  8849  000774  0E00               	movlw	0
  8850  000776  6E3A               	movwf	fillCircle@x0+1,c
  8851  000778  0E3C               	movlw	60
  8852  00077A  6E39               	movwf	fillCircle@x0,c
  8853  00077C  C0A8  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  8854  000780  6A3C               	clrf	fillCircle@y0+1,c
  8855  000782  0E00               	movlw	0
  8856  000784  6E3E               	movwf	fillCircle@r+1,c
  8857  000786  0E07               	movlw	7
  8858  000788  6E3D               	movwf	fillCircle@r,c
  8859  00078A  0E00               	movlw	0
  8860  00078C  6E40               	movwf	fillCircle@color+1,c
  8861  00078E  0E00               	movlw	0
  8862  000790  6E3F               	movwf	fillCircle@color,c
  8863  000792  ECDD  F010         	call	_fillCircle	;wreg free
  8864                           
  8865                           ;Lab8pC.c: 639: fillCircle(80, Circle_Y, 7, 0x0000);
  8866  000796  0E00               	movlw	0
  8867  000798  6E3A               	movwf	fillCircle@x0+1,c
  8868  00079A  0E50               	movlw	80
  8869  00079C  6E39               	movwf	fillCircle@x0,c
  8870  00079E  C0A8  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  8871  0007A2  6A3C               	clrf	fillCircle@y0+1,c
  8872  0007A4  0E00               	movlw	0
  8873  0007A6  6E3E               	movwf	fillCircle@r+1,c
  8874  0007A8  0E07               	movlw	7
  8875  0007AA  6E3D               	movwf	fillCircle@r,c
  8876  0007AC  0E00               	movlw	0
  8877  0007AE  6E40               	movwf	fillCircle@color+1,c
  8878  0007B0  0E00               	movlw	0
  8879  0007B2  6E3F               	movwf	fillCircle@color,c
  8880  0007B4  ECDD  F010         	call	_fillCircle	;wreg free
  8881                           
  8882                           ;Lab8pC.c: 640: drawCircle(40, Circle_Y, 7, 0xF800);
  8883  0007B8  0E00               	movlw	0
  8884  0007BA  6E1B               	movwf	drawCircle@x0+1,c
  8885  0007BC  0E28               	movlw	40
  8886  0007BE  6E1A               	movwf	drawCircle@x0,c
  8887  0007C0  C0A8  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  8888  0007C4  6A1D               	clrf	drawCircle@y0+1,c
  8889  0007C6  0E00               	movlw	0
  8890  0007C8  6E1F               	movwf	drawCircle@r+1,c
  8891  0007CA  0E07               	movlw	7
  8892  0007CC  6E1E               	movwf	drawCircle@r,c
  8893  0007CE  0EF8               	movlw	248
  8894  0007D0  6E21               	movwf	drawCircle@color+1,c
  8895  0007D2  0E00               	movlw	0
  8896  0007D4  6E20               	movwf	drawCircle@color,c
  8897  0007D6  EC62  F006         	call	_drawCircle	;wreg free
  8898                           
  8899                           ;Lab8pC.c: 641: drawCircle(60, Circle_Y, 7, 0xFFE0);
  8900  0007DA  0E00               	movlw	0
  8901  0007DC  6E1B               	movwf	drawCircle@x0+1,c
  8902  0007DE  0E3C               	movlw	60
  8903  0007E0  6E1A               	movwf	drawCircle@x0,c
  8904  0007E2  C0A8  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  8905  0007E6  6A1D               	clrf	drawCircle@y0+1,c
  8906  0007E8  0E00               	movlw	0
  8907  0007EA  6E1F               	movwf	drawCircle@r+1,c
  8908  0007EC  0E07               	movlw	7
  8909  0007EE  6E1E               	movwf	drawCircle@r,c
  8910  0007F0  0EFF               	movlw	255
  8911  0007F2  6E21               	movwf	drawCircle@color+1,c
  8912  0007F4  0EE0               	movlw	224
  8913  0007F6  6E20               	movwf	drawCircle@color,c
  8914  0007F8  EC62  F006         	call	_drawCircle	;wreg free
  8915                           
  8916                           ;Lab8pC.c: 642: drawCircle(80, Circle_Y, 7, 0x07E0);
  8917  0007FC  0E00               	movlw	0
  8918  0007FE  6E1B               	movwf	drawCircle@x0+1,c
  8919  000800  0E50               	movlw	80
  8920  000802  6E1A               	movwf	drawCircle@x0,c
  8921  000804  C0A8  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  8922  000808  6A1D               	clrf	drawCircle@y0+1,c
  8923  00080A  0E00               	movlw	0
  8924  00080C  6E1F               	movwf	drawCircle@r+1,c
  8925  00080E  0E07               	movlw	7
  8926  000810  6E1E               	movwf	drawCircle@r,c
  8927  000812  0E07               	movlw	7
  8928  000814  6E21               	movwf	drawCircle@color+1,c
  8929  000816  0EE0               	movlw	224
  8930  000818  6E20               	movwf	drawCircle@color,c
  8931  00081A  EC62  F006         	call	_drawCircle	;wreg free
  8932  00081E  D000               	goto	l4561
  8933  000820                     l4561:
  8934                           
  8935                           ;Lab8pC.c: 643: }
  8936                           ;Lab8pC.c: 644: if (color == 1)
  8937  000820  0441               	decf	update_LCD_color@color,w,c
  8938  000822  A4D8               	btfss	status,2,c
  8939  000824  D067               	goto	l4565
  8940                           
  8941                           ;Lab8pC.c: 645: {
  8942                           ;Lab8pC.c: 646: fillCircle(40, Circle_Y, 7, 0xF800);
  8943  000826  0E00               	movlw	0
  8944  000828  6E3A               	movwf	fillCircle@x0+1,c
  8945  00082A  0E28               	movlw	40
  8946  00082C  6E39               	movwf	fillCircle@x0,c
  8947  00082E  C0A8  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  8948  000832  6A3C               	clrf	fillCircle@y0+1,c
  8949  000834  0E00               	movlw	0
  8950  000836  6E3E               	movwf	fillCircle@r+1,c
  8951  000838  0E07               	movlw	7
  8952  00083A  6E3D               	movwf	fillCircle@r,c
  8953  00083C  0EF8               	movlw	248
  8954  00083E  6E40               	movwf	fillCircle@color+1,c
  8955  000840  0E00               	movlw	0
  8956  000842  6E3F               	movwf	fillCircle@color,c
  8957  000844  ECDD  F010         	call	_fillCircle	;wreg free
  8958                           
  8959                           ;Lab8pC.c: 647: fillCircle(60, Circle_Y, 7, 0x0000);
  8960  000848  0E00               	movlw	0
  8961  00084A  6E3A               	movwf	fillCircle@x0+1,c
  8962  00084C  0E3C               	movlw	60
  8963  00084E  6E39               	movwf	fillCircle@x0,c
  8964  000850  C0A8  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  8965  000854  6A3C               	clrf	fillCircle@y0+1,c
  8966  000856  0E00               	movlw	0
  8967  000858  6E3E               	movwf	fillCircle@r+1,c
  8968  00085A  0E07               	movlw	7
  8969  00085C  6E3D               	movwf	fillCircle@r,c
  8970  00085E  0E00               	movlw	0
  8971  000860  6E40               	movwf	fillCircle@color+1,c
  8972  000862  0E00               	movlw	0
  8973  000864  6E3F               	movwf	fillCircle@color,c
  8974  000866  ECDD  F010         	call	_fillCircle	;wreg free
  8975                           
  8976                           ;Lab8pC.c: 648: fillCircle(80, Circle_Y, 7, 0x0000);
  8977  00086A  0E00               	movlw	0
  8978  00086C  6E3A               	movwf	fillCircle@x0+1,c
  8979  00086E  0E50               	movlw	80
  8980  000870  6E39               	movwf	fillCircle@x0,c
  8981  000872  C0A8  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  8982  000876  6A3C               	clrf	fillCircle@y0+1,c
  8983  000878  0E00               	movlw	0
  8984  00087A  6E3E               	movwf	fillCircle@r+1,c
  8985  00087C  0E07               	movlw	7
  8986  00087E  6E3D               	movwf	fillCircle@r,c
  8987  000880  0E00               	movlw	0
  8988  000882  6E40               	movwf	fillCircle@color+1,c
  8989  000884  0E00               	movlw	0
  8990  000886  6E3F               	movwf	fillCircle@color,c
  8991  000888  ECDD  F010         	call	_fillCircle	;wreg free
  8992                           
  8993                           ;Lab8pC.c: 649: drawCircle(40, Circle_Y, 7, 0xF800);
  8994  00088C  0E00               	movlw	0
  8995  00088E  6E1B               	movwf	drawCircle@x0+1,c
  8996  000890  0E28               	movlw	40
  8997  000892  6E1A               	movwf	drawCircle@x0,c
  8998  000894  C0A8  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  8999  000898  6A1D               	clrf	drawCircle@y0+1,c
  9000  00089A  0E00               	movlw	0
  9001  00089C  6E1F               	movwf	drawCircle@r+1,c
  9002  00089E  0E07               	movlw	7
  9003  0008A0  6E1E               	movwf	drawCircle@r,c
  9004  0008A2  0EF8               	movlw	248
  9005  0008A4  6E21               	movwf	drawCircle@color+1,c
  9006  0008A6  0E00               	movlw	0
  9007  0008A8  6E20               	movwf	drawCircle@color,c
  9008  0008AA  EC62  F006         	call	_drawCircle	;wreg free
  9009                           
  9010                           ;Lab8pC.c: 650: drawCircle(60, Circle_Y, 7, 0xFFE0);
  9011  0008AE  0E00               	movlw	0
  9012  0008B0  6E1B               	movwf	drawCircle@x0+1,c
  9013  0008B2  0E3C               	movlw	60
  9014  0008B4  6E1A               	movwf	drawCircle@x0,c
  9015  0008B6  C0A8  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  9016  0008BA  6A1D               	clrf	drawCircle@y0+1,c
  9017  0008BC  0E00               	movlw	0
  9018  0008BE  6E1F               	movwf	drawCircle@r+1,c
  9019  0008C0  0E07               	movlw	7
  9020  0008C2  6E1E               	movwf	drawCircle@r,c
  9021  0008C4  0EFF               	movlw	255
  9022  0008C6  6E21               	movwf	drawCircle@color+1,c
  9023  0008C8  0EE0               	movlw	224
  9024  0008CA  6E20               	movwf	drawCircle@color,c
  9025  0008CC  EC62  F006         	call	_drawCircle	;wreg free
  9026                           
  9027                           ;Lab8pC.c: 651: drawCircle(80, Circle_Y, 7, 0x07E0);
  9028  0008D0  0E00               	movlw	0
  9029  0008D2  6E1B               	movwf	drawCircle@x0+1,c
  9030  0008D4  0E50               	movlw	80
  9031  0008D6  6E1A               	movwf	drawCircle@x0,c
  9032  0008D8  C0A8  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  9033  0008DC  6A1D               	clrf	drawCircle@y0+1,c
  9034  0008DE  0E00               	movlw	0
  9035  0008E0  6E1F               	movwf	drawCircle@r+1,c
  9036  0008E2  0E07               	movlw	7
  9037  0008E4  6E1E               	movwf	drawCircle@r,c
  9038  0008E6  0E07               	movlw	7
  9039  0008E8  6E21               	movwf	drawCircle@color+1,c
  9040  0008EA  0EE0               	movlw	224
  9041  0008EC  6E20               	movwf	drawCircle@color,c
  9042  0008EE  EC62  F006         	call	_drawCircle	;wreg free
  9043  0008F2  D000               	goto	l4565
  9044  0008F4                     l4565:
  9045                           
  9046                           ;Lab8pC.c: 652: }
  9047                           ;Lab8pC.c: 653: if (color == 3)
  9048  0008F4  0E03               	movlw	3
  9049  0008F6  1841               	xorwf	update_LCD_color@color,w,c
  9050  0008F8  A4D8               	btfss	status,2,c
  9051  0008FA  D067               	goto	l4569
  9052                           
  9053                           ;Lab8pC.c: 654: {
  9054                           ;Lab8pC.c: 655: fillCircle(40, Circle_Y, 7, 0x0000);
  9055  0008FC  0E00               	movlw	0
  9056  0008FE  6E3A               	movwf	fillCircle@x0+1,c
  9057  000900  0E28               	movlw	40
  9058  000902  6E39               	movwf	fillCircle@x0,c
  9059  000904  C0A8  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  9060  000908  6A3C               	clrf	fillCircle@y0+1,c
  9061  00090A  0E00               	movlw	0
  9062  00090C  6E3E               	movwf	fillCircle@r+1,c
  9063  00090E  0E07               	movlw	7
  9064  000910  6E3D               	movwf	fillCircle@r,c
  9065  000912  0E00               	movlw	0
  9066  000914  6E40               	movwf	fillCircle@color+1,c
  9067  000916  0E00               	movlw	0
  9068  000918  6E3F               	movwf	fillCircle@color,c
  9069  00091A  ECDD  F010         	call	_fillCircle	;wreg free
  9070                           
  9071                           ;Lab8pC.c: 656: fillCircle(60, Circle_Y, 7, 0xFFE0);
  9072  00091E  0E00               	movlw	0
  9073  000920  6E3A               	movwf	fillCircle@x0+1,c
  9074  000922  0E3C               	movlw	60
  9075  000924  6E39               	movwf	fillCircle@x0,c
  9076  000926  C0A8  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  9077  00092A  6A3C               	clrf	fillCircle@y0+1,c
  9078  00092C  0E00               	movlw	0
  9079  00092E  6E3E               	movwf	fillCircle@r+1,c
  9080  000930  0E07               	movlw	7
  9081  000932  6E3D               	movwf	fillCircle@r,c
  9082  000934  0EFF               	movlw	255
  9083  000936  6E40               	movwf	fillCircle@color+1,c
  9084  000938  0EE0               	movlw	224
  9085  00093A  6E3F               	movwf	fillCircle@color,c
  9086  00093C  ECDD  F010         	call	_fillCircle	;wreg free
  9087                           
  9088                           ;Lab8pC.c: 657: fillCircle(80, Circle_Y, 7, 0x0000);
  9089  000940  0E00               	movlw	0
  9090  000942  6E3A               	movwf	fillCircle@x0+1,c
  9091  000944  0E50               	movlw	80
  9092  000946  6E39               	movwf	fillCircle@x0,c
  9093  000948  C0A8  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  9094  00094C  6A3C               	clrf	fillCircle@y0+1,c
  9095  00094E  0E00               	movlw	0
  9096  000950  6E3E               	movwf	fillCircle@r+1,c
  9097  000952  0E07               	movlw	7
  9098  000954  6E3D               	movwf	fillCircle@r,c
  9099  000956  0E00               	movlw	0
  9100  000958  6E40               	movwf	fillCircle@color+1,c
  9101  00095A  0E00               	movlw	0
  9102  00095C  6E3F               	movwf	fillCircle@color,c
  9103  00095E  ECDD  F010         	call	_fillCircle	;wreg free
  9104                           
  9105                           ;Lab8pC.c: 658: drawCircle(40, Circle_Y, 7, 0xF800);
  9106  000962  0E00               	movlw	0
  9107  000964  6E1B               	movwf	drawCircle@x0+1,c
  9108  000966  0E28               	movlw	40
  9109  000968  6E1A               	movwf	drawCircle@x0,c
  9110  00096A  C0A8  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  9111  00096E  6A1D               	clrf	drawCircle@y0+1,c
  9112  000970  0E00               	movlw	0
  9113  000972  6E1F               	movwf	drawCircle@r+1,c
  9114  000974  0E07               	movlw	7
  9115  000976  6E1E               	movwf	drawCircle@r,c
  9116  000978  0EF8               	movlw	248
  9117  00097A  6E21               	movwf	drawCircle@color+1,c
  9118  00097C  0E00               	movlw	0
  9119  00097E  6E20               	movwf	drawCircle@color,c
  9120  000980  EC62  F006         	call	_drawCircle	;wreg free
  9121                           
  9122                           ;Lab8pC.c: 659: drawCircle(60, Circle_Y, 7, 0xFFE0);
  9123  000984  0E00               	movlw	0
  9124  000986  6E1B               	movwf	drawCircle@x0+1,c
  9125  000988  0E3C               	movlw	60
  9126  00098A  6E1A               	movwf	drawCircle@x0,c
  9127  00098C  C0A8  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  9128  000990  6A1D               	clrf	drawCircle@y0+1,c
  9129  000992  0E00               	movlw	0
  9130  000994  6E1F               	movwf	drawCircle@r+1,c
  9131  000996  0E07               	movlw	7
  9132  000998  6E1E               	movwf	drawCircle@r,c
  9133  00099A  0EFF               	movlw	255
  9134  00099C  6E21               	movwf	drawCircle@color+1,c
  9135  00099E  0EE0               	movlw	224
  9136  0009A0  6E20               	movwf	drawCircle@color,c
  9137  0009A2  EC62  F006         	call	_drawCircle	;wreg free
  9138                           
  9139                           ;Lab8pC.c: 660: drawCircle(80, Circle_Y, 7, 0x07E0);
  9140  0009A6  0E00               	movlw	0
  9141  0009A8  6E1B               	movwf	drawCircle@x0+1,c
  9142  0009AA  0E50               	movlw	80
  9143  0009AC  6E1A               	movwf	drawCircle@x0,c
  9144  0009AE  C0A8  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  9145  0009B2  6A1D               	clrf	drawCircle@y0+1,c
  9146  0009B4  0E00               	movlw	0
  9147  0009B6  6E1F               	movwf	drawCircle@r+1,c
  9148  0009B8  0E07               	movlw	7
  9149  0009BA  6E1E               	movwf	drawCircle@r,c
  9150  0009BC  0E07               	movlw	7
  9151  0009BE  6E21               	movwf	drawCircle@color+1,c
  9152  0009C0  0EE0               	movlw	224
  9153  0009C2  6E20               	movwf	drawCircle@color,c
  9154  0009C4  EC62  F006         	call	_drawCircle	;wreg free
  9155  0009C8  D000               	goto	l4569
  9156  0009CA                     l4569:
  9157                           
  9158                           ;Lab8pC.c: 661: }
  9159                           ;Lab8pC.c: 662: if (color == 2)
  9160  0009CA  0E02               	movlw	2
  9161  0009CC  1841               	xorwf	update_LCD_color@color,w,c
  9162  0009CE  A4D8               	btfss	status,2,c
  9163  0009D0  D067               	goto	l527
  9164                           
  9165                           ;Lab8pC.c: 663: {
  9166                           ;Lab8pC.c: 664: fillCircle(40, Circle_Y, 7, 0x0000);
  9167  0009D2  0E00               	movlw	0
  9168  0009D4  6E3A               	movwf	fillCircle@x0+1,c
  9169  0009D6  0E28               	movlw	40
  9170  0009D8  6E39               	movwf	fillCircle@x0,c
  9171  0009DA  C0A8  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  9172  0009DE  6A3C               	clrf	fillCircle@y0+1,c
  9173  0009E0  0E00               	movlw	0
  9174  0009E2  6E3E               	movwf	fillCircle@r+1,c
  9175  0009E4  0E07               	movlw	7
  9176  0009E6  6E3D               	movwf	fillCircle@r,c
  9177  0009E8  0E00               	movlw	0
  9178  0009EA  6E40               	movwf	fillCircle@color+1,c
  9179  0009EC  0E00               	movlw	0
  9180  0009EE  6E3F               	movwf	fillCircle@color,c
  9181  0009F0  ECDD  F010         	call	_fillCircle	;wreg free
  9182                           
  9183                           ;Lab8pC.c: 665: fillCircle(60, Circle_Y, 7, 0x0000);
  9184  0009F4  0E00               	movlw	0
  9185  0009F6  6E3A               	movwf	fillCircle@x0+1,c
  9186  0009F8  0E3C               	movlw	60
  9187  0009FA  6E39               	movwf	fillCircle@x0,c
  9188  0009FC  C0A8  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  9189  000A00  6A3C               	clrf	fillCircle@y0+1,c
  9190  000A02  0E00               	movlw	0
  9191  000A04  6E3E               	movwf	fillCircle@r+1,c
  9192  000A06  0E07               	movlw	7
  9193  000A08  6E3D               	movwf	fillCircle@r,c
  9194  000A0A  0E00               	movlw	0
  9195  000A0C  6E40               	movwf	fillCircle@color+1,c
  9196  000A0E  0E00               	movlw	0
  9197  000A10  6E3F               	movwf	fillCircle@color,c
  9198  000A12  ECDD  F010         	call	_fillCircle	;wreg free
  9199                           
  9200                           ;Lab8pC.c: 666: fillCircle(80, Circle_Y, 7, 0x07E0);
  9201  000A16  0E00               	movlw	0
  9202  000A18  6E3A               	movwf	fillCircle@x0+1,c
  9203  000A1A  0E50               	movlw	80
  9204  000A1C  6E39               	movwf	fillCircle@x0,c
  9205  000A1E  C0A8  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  9206  000A22  6A3C               	clrf	fillCircle@y0+1,c
  9207  000A24  0E00               	movlw	0
  9208  000A26  6E3E               	movwf	fillCircle@r+1,c
  9209  000A28  0E07               	movlw	7
  9210  000A2A  6E3D               	movwf	fillCircle@r,c
  9211  000A2C  0E07               	movlw	7
  9212  000A2E  6E40               	movwf	fillCircle@color+1,c
  9213  000A30  0EE0               	movlw	224
  9214  000A32  6E3F               	movwf	fillCircle@color,c
  9215  000A34  ECDD  F010         	call	_fillCircle	;wreg free
  9216                           
  9217                           ;Lab8pC.c: 667: drawCircle(40, Circle_Y, 7, 0xF800);
  9218  000A38  0E00               	movlw	0
  9219  000A3A  6E1B               	movwf	drawCircle@x0+1,c
  9220  000A3C  0E28               	movlw	40
  9221  000A3E  6E1A               	movwf	drawCircle@x0,c
  9222  000A40  C0A8  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  9223  000A44  6A1D               	clrf	drawCircle@y0+1,c
  9224  000A46  0E00               	movlw	0
  9225  000A48  6E1F               	movwf	drawCircle@r+1,c
  9226  000A4A  0E07               	movlw	7
  9227  000A4C  6E1E               	movwf	drawCircle@r,c
  9228  000A4E  0EF8               	movlw	248
  9229  000A50  6E21               	movwf	drawCircle@color+1,c
  9230  000A52  0E00               	movlw	0
  9231  000A54  6E20               	movwf	drawCircle@color,c
  9232  000A56  EC62  F006         	call	_drawCircle	;wreg free
  9233                           
  9234                           ;Lab8pC.c: 668: drawCircle(60, Circle_Y, 7, 0xFFE0);
  9235  000A5A  0E00               	movlw	0
  9236  000A5C  6E1B               	movwf	drawCircle@x0+1,c
  9237  000A5E  0E3C               	movlw	60
  9238  000A60  6E1A               	movwf	drawCircle@x0,c
  9239  000A62  C0A8  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  9240  000A66  6A1D               	clrf	drawCircle@y0+1,c
  9241  000A68  0E00               	movlw	0
  9242  000A6A  6E1F               	movwf	drawCircle@r+1,c
  9243  000A6C  0E07               	movlw	7
  9244  000A6E  6E1E               	movwf	drawCircle@r,c
  9245  000A70  0EFF               	movlw	255
  9246  000A72  6E21               	movwf	drawCircle@color+1,c
  9247  000A74  0EE0               	movlw	224
  9248  000A76  6E20               	movwf	drawCircle@color,c
  9249  000A78  EC62  F006         	call	_drawCircle	;wreg free
  9250                           
  9251                           ;Lab8pC.c: 669: drawCircle(80, Circle_Y, 7, 0x07E0);
  9252  000A7C  0E00               	movlw	0
  9253  000A7E  6E1B               	movwf	drawCircle@x0+1,c
  9254  000A80  0E50               	movlw	80
  9255  000A82  6E1A               	movwf	drawCircle@x0,c
  9256  000A84  C0A8  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  9257  000A88  6A1D               	clrf	drawCircle@y0+1,c
  9258  000A8A  0E00               	movlw	0
  9259  000A8C  6E1F               	movwf	drawCircle@r+1,c
  9260  000A8E  0E07               	movlw	7
  9261  000A90  6E1E               	movwf	drawCircle@r,c
  9262  000A92  0E07               	movlw	7
  9263  000A94  6E21               	movwf	drawCircle@color+1,c
  9264  000A96  0EE0               	movlw	224
  9265  000A98  6E20               	movwf	drawCircle@color,c
  9266  000A9A  EC62  F006         	call	_drawCircle	;wreg free
  9267  000A9E  D000               	goto	l527
  9268  000AA0                     l527:
  9269  000AA0  0012               	return		;funcret
  9270  000AA2                     __end_of_update_LCD_color:
  9271                           	opt stack 0
  9272                           tblptru	equ	0xFF8
  9273                           tblptrh	equ	0xFF7
  9274                           tblptrl	equ	0xFF6
  9275                           tablat	equ	0xFF5
  9276                           prodh	equ	0xFF4
  9277                           prodl	equ	0xFF3
  9278                           intcon	equ	0xFF2
  9279                           intcon2	equ	0xFF1
  9280                           intcon3	equ	0xFF0
  9281                           postinc0	equ	0xFEE
  9282                           wreg	equ	0xFE8
  9283                           postdec1	equ	0xFE5
  9284                           fsr1l	equ	0xFE1
  9285                           indf2	equ	0xFDF
  9286                           postinc2	equ	0xFDE
  9287                           fsr2h	equ	0xFDA
  9288                           fsr2l	equ	0xFD9
  9289                           status	equ	0xFD8
  9290                           
  9291 ;; *************** function _fillCircle *****************
  9292 ;; Defined at:
  9293 ;;		line 647 in file "ST7735_TFT.c"
  9294 ;; Parameters:    Size  Location     Type
  9295 ;;  x0              2   56[COMRAM] int 
  9296 ;;  y0              2   58[COMRAM] int 
  9297 ;;  r               2   60[COMRAM] int 
  9298 ;;  color           2   62[COMRAM] unsigned int 
  9299 ;; Auto vars:     Size  Location     Type
  9300 ;;		None
  9301 ;; Return value:  Size  Location     Type
  9302 ;;		None               void
  9303 ;; Registers used:
  9304 ;;		wreg, status,2, status,0, cstack
  9305 ;; Tracked objects:
  9306 ;;		On entry : 0/0
  9307 ;;		On exit  : 0/0
  9308 ;;		Unchanged: 0/0
  9309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9310 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9311 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9312 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9313 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9314 ;;Total ram usage:        8 bytes
  9315 ;; Hardware stack levels used:    1
  9316 ;; Hardware stack levels required when called:    7
  9317 ;; This function calls:
  9318 ;;		_drawFastVLine
  9319 ;;		_fillCircleHelper
  9320 ;; This function is called by:
  9321 ;;		_Initialize_Screen
  9322 ;;		_update_LCD_color
  9323 ;; This function uses a non-reentrant model
  9324 ;;
  9325                           
  9326                           	psect	text47
  9327  0021BA                     __ptext47:
  9328                           	opt stack 0
  9329  0021BA                     _fillCircle:
  9330                           	opt stack 20
  9331                           
  9332                           ;ST7735_TFT.c: 649: drawFastVLine(x0, y0 - r, 2 * r + 1, color);
  9333                           
  9334                           ;incstack = 0
  9335  0021BA  503D               	movf	fillCircle@r,w,c
  9336  0021BC  0800               	sublw	0
  9337  0021BE  243B               	addwf	fillCircle@y0,w,c
  9338  0021C0  6E16               	movwf	drawFastVLine@y,c
  9339  0021C2  80D8               	bsf	status,0,c
  9340  0021C4  343D               	rlcf	fillCircle@r,w,c
  9341  0021C6  6E17               	movwf	drawFastVLine@h,c
  9342  0021C8  C03F  F018         	movff	fillCircle@color,drawFastVLine@color
  9343  0021CC  C040  F019         	movff	fillCircle@color+1,drawFastVLine@color+1
  9344  0021D0  5039               	movf	fillCircle@x0,w,c
  9345  0021D2  EC6B  F00E         	call	_drawFastVLine
  9346                           
  9347                           ;ST7735_TFT.c: 650: fillCircleHelper(x0, y0, r, 3, 0, color);
  9348  0021D6  C039  F021         	movff	fillCircle@x0,fillCircleHelper@x0
  9349  0021DA  C03A  F022         	movff	fillCircle@x0+1,fillCircleHelper@x0+1
  9350  0021DE  C03B  F023         	movff	fillCircle@y0,fillCircleHelper@y0
  9351  0021E2  C03C  F024         	movff	fillCircle@y0+1,fillCircleHelper@y0+1
  9352  0021E6  C03D  F025         	movff	fillCircle@r,fillCircleHelper@r
  9353  0021EA  C03E  F026         	movff	fillCircle@r+1,fillCircleHelper@r+1
  9354  0021EE  0E00               	movlw	0
  9355  0021F0  6E28               	movwf	fillCircleHelper@cornername+1,c
  9356  0021F2  0E03               	movlw	3
  9357  0021F4  6E27               	movwf	fillCircleHelper@cornername,c
  9358  0021F6  0E00               	movlw	0
  9359  0021F8  6E2A               	movwf	fillCircleHelper@delta+1,c
  9360  0021FA  0E00               	movlw	0
  9361  0021FC  6E29               	movwf	fillCircleHelper@delta,c
  9362  0021FE  C03F  F02B         	movff	fillCircle@color,fillCircleHelper@color
  9363  002202  C040  F02C         	movff	fillCircle@color+1,fillCircleHelper@color+1
  9364  002206  ECA9  F008         	call	_fillCircleHelper	;wreg free
  9365  00220A  0012               	return		;funcret
  9366  00220C                     __end_of_fillCircle:
  9367                           	opt stack 0
  9368                           tblptru	equ	0xFF8
  9369                           tblptrh	equ	0xFF7
  9370                           tblptrl	equ	0xFF6
  9371                           tablat	equ	0xFF5
  9372                           prodh	equ	0xFF4
  9373                           prodl	equ	0xFF3
  9374                           intcon	equ	0xFF2
  9375                           intcon2	equ	0xFF1
  9376                           intcon3	equ	0xFF0
  9377                           postinc0	equ	0xFEE
  9378                           wreg	equ	0xFE8
  9379                           postdec1	equ	0xFE5
  9380                           fsr1l	equ	0xFE1
  9381                           indf2	equ	0xFDF
  9382                           postinc2	equ	0xFDE
  9383                           fsr2h	equ	0xFDA
  9384                           fsr2l	equ	0xFD9
  9385                           status	equ	0xFD8
  9386                           
  9387 ;; *************** function _fillCircleHelper *****************
  9388 ;; Defined at:
  9389 ;;		line 622 in file "ST7735_TFT.c"
  9390 ;; Parameters:    Size  Location     Type
  9391 ;;  x0              2   32[COMRAM] int 
  9392 ;;  y0              2   34[COMRAM] int 
  9393 ;;  r               2   36[COMRAM] int 
  9394 ;;  cornername      2   38[COMRAM] unsigned int 
  9395 ;;  delta           2   40[COMRAM] int 
  9396 ;;  color           2   42[COMRAM] unsigned int 
  9397 ;; Auto vars:     Size  Location     Type
  9398 ;;  y               2   54[COMRAM] int 
  9399 ;;  x               2   52[COMRAM] int 
  9400 ;;  f               2   50[COMRAM] int 
  9401 ;;  ddF_y           2   48[COMRAM] int 
  9402 ;;  ddF_x           2   46[COMRAM] int 
  9403 ;; Return value:  Size  Location     Type
  9404 ;;		None               void
  9405 ;; Registers used:
  9406 ;;		wreg, status,2, status,0, cstack
  9407 ;; Tracked objects:
  9408 ;;		On entry : 0/0
  9409 ;;		On exit  : 0/0
  9410 ;;		Unchanged: 0/0
  9411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9412 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9413 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9414 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9415 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9416 ;;Total ram usage:       24 bytes
  9417 ;; Hardware stack levels used:    1
  9418 ;; Hardware stack levels required when called:    6
  9419 ;; This function calls:
  9420 ;;		_drawFastVLine
  9421 ;; This function is called by:
  9422 ;;		_fillCircle
  9423 ;; This function uses a non-reentrant model
  9424 ;;
  9425                           
  9426                           	psect	text48
  9427  001152                     __ptext48:
  9428                           	opt stack 0
  9429  001152                     _fillCircleHelper:
  9430                           	opt stack 20
  9431                           
  9432                           ;ST7735_TFT.c: 624: signed int f, ddF_x, ddF_y, x, y;
  9433                           ;ST7735_TFT.c: 625: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  9434                           
  9435                           ;incstack = 0
  9436  001152  C025  F02D         	movff	fillCircleHelper@r,??_fillCircleHelper
  9437  001156  C026  F02E         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  9438  00115A  1E2D               	comf	??_fillCircleHelper,f,c
  9439  00115C  1E2E               	comf	??_fillCircleHelper+1,f,c
  9440  00115E  4A2D               	infsnz	??_fillCircleHelper,f,c
  9441  001160  2A2E               	incf	??_fillCircleHelper+1,f,c
  9442  001162  0E01               	movlw	1
  9443  001164  242D               	addwf	??_fillCircleHelper,w,c
  9444  001166  6E33               	movwf	fillCircleHelper@f,c
  9445  001168  0E00               	movlw	0
  9446  00116A  202E               	addwfc	??_fillCircleHelper+1,w,c
  9447  00116C  6E34               	movwf	fillCircleHelper@f+1,c
  9448  00116E  0E00               	movlw	0
  9449  001170  6E30               	movwf	fillCircleHelper@ddF_x+1,c
  9450  001172  0E01               	movlw	1
  9451  001174  6E2F               	movwf	fillCircleHelper@ddF_x,c
  9452  001176  C025  F02D         	movff	fillCircleHelper@r,??_fillCircleHelper
  9453  00117A  C026  F02E         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  9454  00117E  90D8               	bcf	status,0,c
  9455  001180  362D               	rlcf	??_fillCircleHelper,f,c
  9456  001182  362E               	rlcf	??_fillCircleHelper+1,f,c
  9457  001184  1E2D               	comf	??_fillCircleHelper,f,c
  9458  001186  1E2E               	comf	??_fillCircleHelper+1,f,c
  9459  001188  4A2D               	infsnz	??_fillCircleHelper,f,c
  9460  00118A  2A2E               	incf	??_fillCircleHelper+1,f,c
  9461  00118C  C02D  F031         	movff	??_fillCircleHelper,fillCircleHelper@ddF_y
  9462  001190  C02E  F032         	movff	??_fillCircleHelper+1,fillCircleHelper@ddF_y+1
  9463  001194  0E00               	movlw	0
  9464  001196  6E36               	movwf	fillCircleHelper@x+1,c
  9465  001198  0E00               	movlw	0
  9466  00119A  6E35               	movwf	fillCircleHelper@x,c
  9467  00119C  C025  F037         	movff	fillCircleHelper@r,fillCircleHelper@y
  9468  0011A0  C026  F038         	movff	fillCircleHelper@r+1,fillCircleHelper@y+1
  9469                           
  9470                           ;ST7735_TFT.c: 626: while (x<y) {
  9471  0011A4  D067               	goto	l4327
  9472  0011A6                     l4307:
  9473                           
  9474                           ;ST7735_TFT.c: 627: if (f >= 0) {
  9475  0011A6  BE34               	btfsc	fillCircleHelper@f+1,7,c
  9476  0011A8  D00B               	goto	l269
  9477                           
  9478                           ;ST7735_TFT.c: 628: y--;
  9479  0011AA  0637               	decf	fillCircleHelper@y,f,c
  9480  0011AC  A0D8               	btfss	status,0,c
  9481  0011AE  0638               	decf	fillCircleHelper@y+1,f,c
  9482                           
  9483                           ;ST7735_TFT.c: 629: ddF_y += 2;
  9484  0011B0  0E02               	movlw	2
  9485  0011B2  2631               	addwf	fillCircleHelper@ddF_y,f,c
  9486  0011B4  0E00               	movlw	0
  9487  0011B6  2232               	addwfc	fillCircleHelper@ddF_y+1,f,c
  9488                           
  9489                           ;ST7735_TFT.c: 630: f += ddF_y;
  9490  0011B8  5031               	movf	fillCircleHelper@ddF_y,w,c
  9491  0011BA  2633               	addwf	fillCircleHelper@f,f,c
  9492  0011BC  5032               	movf	fillCircleHelper@ddF_y+1,w,c
  9493  0011BE  2234               	addwfc	fillCircleHelper@f+1,f,c
  9494  0011C0                     l269:
  9495                           
  9496                           ;ST7735_TFT.c: 631: }
  9497                           ;ST7735_TFT.c: 632: x++;
  9498  0011C0  4A35               	infsnz	fillCircleHelper@x,f,c
  9499  0011C2  2A36               	incf	fillCircleHelper@x+1,f,c
  9500                           
  9501                           ;ST7735_TFT.c: 633: ddF_x += 2;
  9502  0011C4  0E02               	movlw	2
  9503  0011C6  262F               	addwf	fillCircleHelper@ddF_x,f,c
  9504  0011C8  0E00               	movlw	0
  9505  0011CA  2230               	addwfc	fillCircleHelper@ddF_x+1,f,c
  9506                           
  9507                           ;ST7735_TFT.c: 634: f += ddF_x;
  9508  0011CC  502F               	movf	fillCircleHelper@ddF_x,w,c
  9509  0011CE  2633               	addwf	fillCircleHelper@f,f,c
  9510  0011D0  5030               	movf	fillCircleHelper@ddF_x+1,w,c
  9511  0011D2  2234               	addwfc	fillCircleHelper@f+1,f,c
  9512                           
  9513                           ;ST7735_TFT.c: 636: if (cornername & 0x1) {
  9514  0011D4  A027               	btfss	fillCircleHelper@cornername,0,c
  9515  0011D6  D025               	goto	l4323
  9516                           
  9517                           ;ST7735_TFT.c: 637: drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
  9518  0011D8  5037               	movf	fillCircleHelper@y,w,c
  9519  0011DA  0800               	sublw	0
  9520  0011DC  2423               	addwf	fillCircleHelper@y0,w,c
  9521  0011DE  6E16               	movwf	drawFastVLine@y,c
  9522  0011E0  5037               	movf	fillCircleHelper@y,w,c
  9523  0011E2  2437               	addwf	fillCircleHelper@y,w,c
  9524  0011E4  2429               	addwf	fillCircleHelper@delta,w,c
  9525  0011E6  6E2D               	movwf	??_fillCircleHelper& (0+255),c
  9526  0011E8  282D               	incf	??_fillCircleHelper,w,c
  9527  0011EA  6E17               	movwf	drawFastVLine@h,c
  9528  0011EC  C02B  F018         	movff	fillCircleHelper@color,drawFastVLine@color
  9529  0011F0  C02C  F019         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  9530  0011F4  5021               	movf	fillCircleHelper@x0,w,c
  9531  0011F6  2435               	addwf	fillCircleHelper@x,w,c
  9532  0011F8  EC6B  F00E         	call	_drawFastVLine
  9533                           
  9534                           ;ST7735_TFT.c: 638: drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
  9535  0011FC  5035               	movf	fillCircleHelper@x,w,c
  9536  0011FE  0800               	sublw	0
  9537  001200  2423               	addwf	fillCircleHelper@y0,w,c
  9538  001202  6E16               	movwf	drawFastVLine@y,c
  9539  001204  5035               	movf	fillCircleHelper@x,w,c
  9540  001206  2435               	addwf	fillCircleHelper@x,w,c
  9541  001208  2429               	addwf	fillCircleHelper@delta,w,c
  9542  00120A  6E2D               	movwf	??_fillCircleHelper& (0+255),c
  9543  00120C  282D               	incf	??_fillCircleHelper,w,c
  9544  00120E  6E17               	movwf	drawFastVLine@h,c
  9545  001210  C02B  F018         	movff	fillCircleHelper@color,drawFastVLine@color
  9546  001214  C02C  F019         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  9547  001218  5021               	movf	fillCircleHelper@x0,w,c
  9548  00121A  2437               	addwf	fillCircleHelper@y,w,c
  9549  00121C  EC6B  F00E         	call	_drawFastVLine
  9550  001220  D000               	goto	l4323
  9551  001222                     l4323:
  9552                           
  9553                           ;ST7735_TFT.c: 639: }
  9554                           ;ST7735_TFT.c: 640: if (cornername & 0x2) {
  9555  001222  A227               	btfss	fillCircleHelper@cornername,1,c
  9556  001224  D027               	goto	l4327
  9557                           
  9558                           ;ST7735_TFT.c: 641: drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
  9559  001226  5037               	movf	fillCircleHelper@y,w,c
  9560  001228  0800               	sublw	0
  9561  00122A  2423               	addwf	fillCircleHelper@y0,w,c
  9562  00122C  6E16               	movwf	drawFastVLine@y,c
  9563  00122E  5037               	movf	fillCircleHelper@y,w,c
  9564  001230  2437               	addwf	fillCircleHelper@y,w,c
  9565  001232  2429               	addwf	fillCircleHelper@delta,w,c
  9566  001234  6E2D               	movwf	??_fillCircleHelper& (0+255),c
  9567  001236  282D               	incf	??_fillCircleHelper,w,c
  9568  001238  6E17               	movwf	drawFastVLine@h,c
  9569  00123A  C02B  F018         	movff	fillCircleHelper@color,drawFastVLine@color
  9570  00123E  C02C  F019         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  9571  001242  5035               	movf	fillCircleHelper@x,w,c
  9572  001244  0800               	sublw	0
  9573  001246  2421               	addwf	fillCircleHelper@x0,w,c
  9574  001248  EC6B  F00E         	call	_drawFastVLine
  9575                           
  9576                           ;ST7735_TFT.c: 642: drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
  9577  00124C  5035               	movf	fillCircleHelper@x,w,c
  9578  00124E  0800               	sublw	0
  9579  001250  2423               	addwf	fillCircleHelper@y0,w,c
  9580  001252  6E16               	movwf	drawFastVLine@y,c
  9581  001254  5035               	movf	fillCircleHelper@x,w,c
  9582  001256  2435               	addwf	fillCircleHelper@x,w,c
  9583  001258  2429               	addwf	fillCircleHelper@delta,w,c
  9584  00125A  6E2D               	movwf	??_fillCircleHelper& (0+255),c
  9585  00125C  282D               	incf	??_fillCircleHelper,w,c
  9586  00125E  6E17               	movwf	drawFastVLine@h,c
  9587  001260  C02B  F018         	movff	fillCircleHelper@color,drawFastVLine@color
  9588  001264  C02C  F019         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  9589  001268  5037               	movf	fillCircleHelper@y,w,c
  9590  00126A  0800               	sublw	0
  9591  00126C  2421               	addwf	fillCircleHelper@x0,w,c
  9592  00126E  EC6B  F00E         	call	_drawFastVLine
  9593  001272  D000               	goto	l4327
  9594  001274                     l4327:
  9595  001274  5037               	movf	fillCircleHelper@y,w,c
  9596  001276  5C35               	subwf	fillCircleHelper@x,w,c
  9597  001278  5036               	movf	fillCircleHelper@x+1,w,c
  9598  00127A  0A80               	xorlw	128
  9599  00127C  6E2D               	movwf	??_fillCircleHelper& (0+255),c
  9600  00127E  5038               	movf	fillCircleHelper@y+1,w,c
  9601  001280  0A80               	xorlw	128
  9602  001282  582D               	subwfb	??_fillCircleHelper& (0+255),w,c
  9603  001284  A0D8               	btfss	status,0,c
  9604  001286  D78F               	goto	l4307
  9605  001288  0012               	return		;funcret
  9606  00128A                     __end_of_fillCircleHelper:
  9607                           	opt stack 0
  9608                           tblptru	equ	0xFF8
  9609                           tblptrh	equ	0xFF7
  9610                           tblptrl	equ	0xFF6
  9611                           tablat	equ	0xFF5
  9612                           prodh	equ	0xFF4
  9613                           prodl	equ	0xFF3
  9614                           intcon	equ	0xFF2
  9615                           intcon2	equ	0xFF1
  9616                           intcon3	equ	0xFF0
  9617                           postinc0	equ	0xFEE
  9618                           wreg	equ	0xFE8
  9619                           postdec1	equ	0xFE5
  9620                           fsr1l	equ	0xFE1
  9621                           indf2	equ	0xFDF
  9622                           postinc2	equ	0xFDE
  9623                           fsr2h	equ	0xFDA
  9624                           fsr2l	equ	0xFD9
  9625                           status	equ	0xFD8
  9626                           
  9627 ;; *************** function _drawFastVLine *****************
  9628 ;; Defined at:
  9629 ;;		line 449 in file "ST7735_TFT.c"
  9630 ;; Parameters:    Size  Location     Type
  9631 ;;  x               1    wreg     unsigned char 
  9632 ;;  y               1   21[COMRAM] unsigned char 
  9633 ;;  h               1   22[COMRAM] unsigned char 
  9634 ;;  color           2   23[COMRAM] unsigned int 
  9635 ;; Auto vars:     Size  Location     Type
  9636 ;;  x               1   31[COMRAM] unsigned char 
  9637 ;;  lo              1   30[COMRAM] unsigned char 
  9638 ;;  hi              1   29[COMRAM] unsigned char 
  9639 ;; Return value:  Size  Location     Type
  9640 ;;		None               void
  9641 ;; Registers used:
  9642 ;;		wreg, status,2, status,0, cstack
  9643 ;; Tracked objects:
  9644 ;;		On entry : 0/0
  9645 ;;		On exit  : 0/0
  9646 ;;		Unchanged: 0/0
  9647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9648 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9649 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9650 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9651 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9652 ;;Total ram usage:       11 bytes
  9653 ;; Hardware stack levels used:    1
  9654 ;; Hardware stack levels required when called:    5
  9655 ;; This function calls:
  9656 ;;		_setAddrWindow
  9657 ;;		_spiwrite
  9658 ;; This function is called by:
  9659 ;;		_fillRect
  9660 ;;		_fillCircleHelper
  9661 ;;		_fillCircle
  9662 ;;		_drawRect
  9663 ;; This function uses a non-reentrant model
  9664 ;;
  9665                           
  9666                           	psect	text49
  9667  001CD6                     __ptext49:
  9668                           	opt stack 0
  9669  001CD6                     _drawFastVLine:
  9670                           	opt stack 19
  9671                           
  9672                           ;incstack = 0
  9673                           ;drawFastVLine@x stored from wreg
  9674  001CD6  6E20               	movwf	drawFastVLine@x,c
  9675                           
  9676                           ;ST7735_TFT.c: 451: unsigned char hi, lo;
  9677                           ;ST7735_TFT.c: 452: if((x >= 128) || (y >= 160))
  9678  001CD8  0E80               	movlw	128
  9679  001CDA  6020               	cpfslt	drawFastVLine@x,c
  9680  001CDC  D03F               	goto	l187
  9681  001CDE  0E9F               	movlw	159
  9682  001CE0  6416               	cpfsgt	drawFastVLine@y,c
  9683  001CE2  D001               	goto	l4191
  9684                           
  9685                           ;ST7735_TFT.c: 453: return;
  9686  001CE4  D03B               	goto	l187
  9687  001CE6                     l4191:
  9688                           
  9689                           ;ST7735_TFT.c: 454: if((y + h - 1) >= 160)
  9690  001CE6  0EFF               	movlw	255
  9691  001CE8  6E1A               	movwf	??_drawFastVLine& (0+255),c
  9692  001CEA  0EFF               	movlw	255
  9693  001CEC  6E1B               	movwf	(??_drawFastVLine+1)& (0+255),c
  9694  001CEE  5017               	movf	drawFastVLine@h,w,c
  9695  001CF0  C016  F01C         	movff	drawFastVLine@y,??_drawFastVLine+2
  9696  001CF4  6A1D               	clrf	(??_drawFastVLine+3)& (0+255),c
  9697  001CF6  261C               	addwf	??_drawFastVLine+2,f,c
  9698  001CF8  0E00               	movlw	0
  9699  001CFA  221D               	addwfc	??_drawFastVLine+3,f,c
  9700  001CFC  501A               	movf	??_drawFastVLine,w,c
  9701  001CFE  261C               	addwf	??_drawFastVLine+2,f,c
  9702  001D00  501B               	movf	??_drawFastVLine+1,w,c
  9703  001D02  221D               	addwfc	??_drawFastVLine+3,f,c
  9704  001D04  BE1D               	btfsc	??_drawFastVLine+3,7,c
  9705  001D06  D00B               	goto	l4195
  9706  001D08  501D               	movf	??_drawFastVLine+3,w,c
  9707  001D0A  E104               	bnz	u2750
  9708  001D0C  0EA0               	movlw	160
  9709  001D0E  5C1C               	subwf	??_drawFastVLine+2,w,c
  9710  001D10  A0D8               	btfss	status,0,c
  9711  001D12  D005               	goto	l4195
  9712  001D14                     u2750:
  9713                           
  9714                           ;ST7735_TFT.c: 455: h = 160 - y;
  9715  001D14  5016               	movf	drawFastVLine@y,w,c
  9716  001D16  0800               	sublw	0
  9717  001D18  0FA0               	addlw	160
  9718  001D1A  6E17               	movwf	drawFastVLine@h,c
  9719  001D1C  D000               	goto	l4195
  9720  001D1E                     l4195:
  9721                           
  9722                           ;ST7735_TFT.c: 456: hi = color >> 8; lo = color;
  9723  001D1E  5019               	movf	drawFastVLine@color+1,w,c
  9724  001D20  6E1E               	movwf	drawFastVLine@hi,c
  9725  001D22  C018  F01F         	movff	drawFastVLine@color,drawFastVLine@lo
  9726                           
  9727                           ;ST7735_TFT.c: 457: setAddrWindow(x, y, x, y + h - 1);
  9728  001D26  C016  F012         	movff	drawFastVLine@y,setAddrWindow@y0
  9729  001D2A  C020  F013         	movff	drawFastVLine@x,setAddrWindow@x1
  9730  001D2E  5016               	movf	drawFastVLine@y,w,c
  9731  001D30  2417               	addwf	drawFastVLine@h,w,c
  9732  001D32  6E1A               	movwf	??_drawFastVLine& (0+255),c
  9733  001D34  041A               	decf	??_drawFastVLine,w,c
  9734  001D36  6E14               	movwf	setAddrWindow@y1,c
  9735  001D38  5020               	movf	drawFastVLine@x,w,c
  9736  001D3A  EC06  F011         	call	_setAddrWindow
  9737                           
  9738                           ;ST7735_TFT.c: 458: PORTDbits.RD0 = 1;
  9739  001D3E  8083               	bsf	3971,0,c	;volatile
  9740                           
  9741                           ;ST7735_TFT.c: 459: PORTDbits.RD1 = 0;
  9742  001D40  9283               	bcf	3971,1,c	;volatile
  9743                           
  9744                           ;ST7735_TFT.c: 461: while (h--) {
  9745  001D42  D007               	goto	l4207
  9746  001D44                     l4205:
  9747                           
  9748                           ;ST7735_TFT.c: 462: spiwrite(hi);
  9749  001D44  501E               	movf	drawFastVLine@hi,w,c
  9750  001D46  EC0C  F013         	call	_spiwrite
  9751                           
  9752                           ;ST7735_TFT.c: 463: spiwrite(lo);
  9753  001D4A  501F               	movf	drawFastVLine@lo,w,c
  9754  001D4C  EC0C  F013         	call	_spiwrite
  9755  001D50  D000               	goto	l4207
  9756  001D52                     l4207:
  9757  001D52  0617               	decf	drawFastVLine@h,f,c
  9758  001D54  2817               	incf	drawFastVLine@h,w,c
  9759  001D56  A4D8               	btfss	status,2,c
  9760  001D58  D7F5               	goto	l4205
  9761                           
  9762                           ;ST7735_TFT.c: 464: }
  9763                           ;ST7735_TFT.c: 465: PORTDbits.RD1 = 1;
  9764  001D5A  8283               	bsf	3971,1,c	;volatile
  9765  001D5C                     l187:
  9766  001D5C  0012               	return		;funcret
  9767  001D5E                     __end_of_drawFastVLine:
  9768                           	opt stack 0
  9769                           tblptru	equ	0xFF8
  9770                           tblptrh	equ	0xFF7
  9771                           tblptrl	equ	0xFF6
  9772                           tablat	equ	0xFF5
  9773                           prodh	equ	0xFF4
  9774                           prodl	equ	0xFF3
  9775                           intcon	equ	0xFF2
  9776                           intcon2	equ	0xFF1
  9777                           intcon3	equ	0xFF0
  9778                           postinc0	equ	0xFEE
  9779                           wreg	equ	0xFE8
  9780                           postdec1	equ	0xFE5
  9781                           fsr1l	equ	0xFE1
  9782                           indf2	equ	0xFDF
  9783                           postinc2	equ	0xFDE
  9784                           fsr2h	equ	0xFDA
  9785                           fsr2l	equ	0xFD9
  9786                           status	equ	0xFD8
  9787                           
  9788 ;; *************** function _drawCircle *****************
  9789 ;; Defined at:
  9790 ;;		line 561 in file "ST7735_TFT.c"
  9791 ;; Parameters:    Size  Location     Type
  9792 ;;  x0              2   25[COMRAM] int 
  9793 ;;  y0              2   27[COMRAM] int 
  9794 ;;  r               2   29[COMRAM] int 
  9795 ;;  color           2   31[COMRAM] unsigned int 
  9796 ;; Auto vars:     Size  Location     Type
  9797 ;;  y               2   43[COMRAM] int 
  9798 ;;  x               2   41[COMRAM] int 
  9799 ;;  f               2   39[COMRAM] int 
  9800 ;;  ddF_y           2   37[COMRAM] int 
  9801 ;;  ddF_x           2   35[COMRAM] int 
  9802 ;; Return value:  Size  Location     Type
  9803 ;;		None               void
  9804 ;; Registers used:
  9805 ;;		wreg, status,2, status,0, cstack
  9806 ;; Tracked objects:
  9807 ;;		On entry : 0/0
  9808 ;;		On exit  : 0/0
  9809 ;;		Unchanged: 0/0
  9810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9811 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9812 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9813 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9814 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9815 ;;Total ram usage:       20 bytes
  9816 ;; Hardware stack levels used:    1
  9817 ;; Hardware stack levels required when called:    6
  9818 ;; This function calls:
  9819 ;;		_drawPixel
  9820 ;; This function is called by:
  9821 ;;		_Initialize_Screen
  9822 ;;		_update_LCD_color
  9823 ;; This function uses a non-reentrant model
  9824 ;;
  9825                           
  9826                           	psect	text50
  9827  000CC4                     __ptext50:
  9828                           	opt stack 0
  9829  000CC4                     _drawCircle:
  9830                           	opt stack 21
  9831                           
  9832                           ;ST7735_TFT.c: 563: signed int f, ddF_x, ddF_y, x, y;
  9833                           ;ST7735_TFT.c: 564: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  9834                           
  9835                           ;incstack = 0
  9836  000CC4  C01E  F022         	movff	drawCircle@r,??_drawCircle
  9837  000CC8  C01F  F023         	movff	drawCircle@r+1,??_drawCircle+1
  9838  000CCC  1E22               	comf	??_drawCircle,f,c
  9839  000CCE  1E23               	comf	??_drawCircle+1,f,c
  9840  000CD0  4A22               	infsnz	??_drawCircle,f,c
  9841  000CD2  2A23               	incf	??_drawCircle+1,f,c
  9842  000CD4  0E01               	movlw	1
  9843  000CD6  2422               	addwf	??_drawCircle,w,c
  9844  000CD8  6E28               	movwf	drawCircle@f,c
  9845  000CDA  0E00               	movlw	0
  9846  000CDC  2023               	addwfc	??_drawCircle+1,w,c
  9847  000CDE  6E29               	movwf	drawCircle@f+1,c
  9848  000CE0  0E00               	movlw	0
  9849  000CE2  6E25               	movwf	drawCircle@ddF_x+1,c
  9850  000CE4  0E01               	movlw	1
  9851  000CE6  6E24               	movwf	drawCircle@ddF_x,c
  9852  000CE8  C01E  F022         	movff	drawCircle@r,??_drawCircle
  9853  000CEC  C01F  F023         	movff	drawCircle@r+1,??_drawCircle+1
  9854  000CF0  90D8               	bcf	status,0,c
  9855  000CF2  3622               	rlcf	??_drawCircle,f,c
  9856  000CF4  3623               	rlcf	??_drawCircle+1,f,c
  9857  000CF6  1E22               	comf	??_drawCircle,f,c
  9858  000CF8  1E23               	comf	??_drawCircle+1,f,c
  9859  000CFA  4A22               	infsnz	??_drawCircle,f,c
  9860  000CFC  2A23               	incf	??_drawCircle+1,f,c
  9861  000CFE  C022  F026         	movff	??_drawCircle,drawCircle@ddF_y
  9862  000D02  C023  F027         	movff	??_drawCircle+1,drawCircle@ddF_y+1
  9863  000D06  0E00               	movlw	0
  9864  000D08  6E2B               	movwf	drawCircle@x+1,c
  9865  000D0A  0E00               	movlw	0
  9866  000D0C  6E2A               	movwf	drawCircle@x,c
  9867  000D0E  C01E  F02C         	movff	drawCircle@r,drawCircle@y
  9868  000D12  C01F  F02D         	movff	drawCircle@r+1,drawCircle@y+1
  9869                           
  9870                           ;ST7735_TFT.c: 565: drawPixel(x0 , y0 + r, color);
  9871  000D16  501C               	movf	drawCircle@y0,w,c
  9872  000D18  241E               	addwf	drawCircle@r,w,c
  9873  000D1A  6E16               	movwf	drawPixel@y,c
  9874  000D1C  C020  F017         	movff	drawCircle@color,drawPixel@color
  9875  000D20  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  9876  000D24  501A               	movf	drawCircle@x0,w,c
  9877  000D26  EC72  F012         	call	_drawPixel
  9878                           
  9879                           ;ST7735_TFT.c: 566: drawPixel(x0 , y0 - r, color);
  9880  000D2A  501E               	movf	drawCircle@r,w,c
  9881  000D2C  0800               	sublw	0
  9882  000D2E  241C               	addwf	drawCircle@y0,w,c
  9883  000D30  6E16               	movwf	drawPixel@y,c
  9884  000D32  C020  F017         	movff	drawCircle@color,drawPixel@color
  9885  000D36  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  9886  000D3A  501A               	movf	drawCircle@x0,w,c
  9887  000D3C  EC72  F012         	call	_drawPixel
  9888                           
  9889                           ;ST7735_TFT.c: 567: drawPixel(x0+r, y0 , color);
  9890  000D40  C01C  F016         	movff	drawCircle@y0,drawPixel@y
  9891  000D44  C020  F017         	movff	drawCircle@color,drawPixel@color
  9892  000D48  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  9893  000D4C  501A               	movf	drawCircle@x0,w,c
  9894  000D4E  241E               	addwf	drawCircle@r,w,c
  9895  000D50  EC72  F012         	call	_drawPixel
  9896                           
  9897                           ;ST7735_TFT.c: 568: drawPixel(x0-r, y0 , color);
  9898  000D54  C01C  F016         	movff	drawCircle@y0,drawPixel@y
  9899  000D58  C020  F017         	movff	drawCircle@color,drawPixel@color
  9900  000D5C  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  9901  000D60  501E               	movf	drawCircle@r,w,c
  9902  000D62  0800               	sublw	0
  9903  000D64  241A               	addwf	drawCircle@x0,w,c
  9904  000D66  EC72  F012         	call	_drawPixel
  9905                           
  9906                           ;ST7735_TFT.c: 569: while (x < y) {
  9907  000D6A  D078               	goto	l4447
  9908  000D6C                     l4419:
  9909                           
  9910                           ;ST7735_TFT.c: 570: if (f >= 0) {
  9911  000D6C  BE29               	btfsc	drawCircle@f+1,7,c
  9912  000D6E  D00B               	goto	l251
  9913                           
  9914                           ;ST7735_TFT.c: 571: y--;
  9915  000D70  062C               	decf	drawCircle@y,f,c
  9916  000D72  A0D8               	btfss	status,0,c
  9917  000D74  062D               	decf	drawCircle@y+1,f,c
  9918                           
  9919                           ;ST7735_TFT.c: 572: ddF_y += 2;
  9920  000D76  0E02               	movlw	2
  9921  000D78  2626               	addwf	drawCircle@ddF_y,f,c
  9922  000D7A  0E00               	movlw	0
  9923  000D7C  2227               	addwfc	drawCircle@ddF_y+1,f,c
  9924                           
  9925                           ;ST7735_TFT.c: 573: f += ddF_y;
  9926  000D7E  5026               	movf	drawCircle@ddF_y,w,c
  9927  000D80  2628               	addwf	drawCircle@f,f,c
  9928  000D82  5027               	movf	drawCircle@ddF_y+1,w,c
  9929  000D84  2229               	addwfc	drawCircle@f+1,f,c
  9930  000D86                     l251:
  9931                           
  9932                           ;ST7735_TFT.c: 574: }
  9933                           ;ST7735_TFT.c: 575: x++;
  9934  000D86  4A2A               	infsnz	drawCircle@x,f,c
  9935  000D88  2A2B               	incf	drawCircle@x+1,f,c
  9936                           
  9937                           ;ST7735_TFT.c: 576: ddF_x += 2;
  9938  000D8A  0E02               	movlw	2
  9939  000D8C  2624               	addwf	drawCircle@ddF_x,f,c
  9940  000D8E  0E00               	movlw	0
  9941  000D90  2225               	addwfc	drawCircle@ddF_x+1,f,c
  9942                           
  9943                           ;ST7735_TFT.c: 577: f += ddF_x;
  9944  000D92  5024               	movf	drawCircle@ddF_x,w,c
  9945  000D94  2628               	addwf	drawCircle@f,f,c
  9946  000D96  5025               	movf	drawCircle@ddF_x+1,w,c
  9947  000D98  2229               	addwfc	drawCircle@f+1,f,c
  9948                           
  9949                           ;ST7735_TFT.c: 578: drawPixel(x0 + x, y0 + y, color);
  9950  000D9A  501C               	movf	drawCircle@y0,w,c
  9951  000D9C  242C               	addwf	drawCircle@y,w,c
  9952  000D9E  6E16               	movwf	drawPixel@y,c
  9953  000DA0  C020  F017         	movff	drawCircle@color,drawPixel@color
  9954  000DA4  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  9955  000DA8  501A               	movf	drawCircle@x0,w,c
  9956  000DAA  242A               	addwf	drawCircle@x,w,c
  9957  000DAC  EC72  F012         	call	_drawPixel
  9958                           
  9959                           ;ST7735_TFT.c: 579: drawPixel(x0 - x, y0 + y, color);
  9960  000DB0  501C               	movf	drawCircle@y0,w,c
  9961  000DB2  242C               	addwf	drawCircle@y,w,c
  9962  000DB4  6E16               	movwf	drawPixel@y,c
  9963  000DB6  C020  F017         	movff	drawCircle@color,drawPixel@color
  9964  000DBA  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  9965  000DBE  502A               	movf	drawCircle@x,w,c
  9966  000DC0  0800               	sublw	0
  9967  000DC2  241A               	addwf	drawCircle@x0,w,c
  9968  000DC4  EC72  F012         	call	_drawPixel
  9969                           
  9970                           ;ST7735_TFT.c: 580: drawPixel(x0 + x, y0 - y, color);
  9971  000DC8  502C               	movf	drawCircle@y,w,c
  9972  000DCA  0800               	sublw	0
  9973  000DCC  241C               	addwf	drawCircle@y0,w,c
  9974  000DCE  6E16               	movwf	drawPixel@y,c
  9975  000DD0  C020  F017         	movff	drawCircle@color,drawPixel@color
  9976  000DD4  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  9977  000DD8  501A               	movf	drawCircle@x0,w,c
  9978  000DDA  242A               	addwf	drawCircle@x,w,c
  9979  000DDC  EC72  F012         	call	_drawPixel
  9980                           
  9981                           ;ST7735_TFT.c: 581: drawPixel(x0 - x, y0 - y, color);
  9982  000DE0  502C               	movf	drawCircle@y,w,c
  9983  000DE2  0800               	sublw	0
  9984  000DE4  241C               	addwf	drawCircle@y0,w,c
  9985  000DE6  6E16               	movwf	drawPixel@y,c
  9986  000DE8  C020  F017         	movff	drawCircle@color,drawPixel@color
  9987  000DEC  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  9988  000DF0  502A               	movf	drawCircle@x,w,c
  9989  000DF2  0800               	sublw	0
  9990  000DF4  241A               	addwf	drawCircle@x0,w,c
  9991  000DF6  EC72  F012         	call	_drawPixel
  9992                           
  9993                           ;ST7735_TFT.c: 582: drawPixel(x0 + y, y0 + x, color);
  9994  000DFA  501C               	movf	drawCircle@y0,w,c
  9995  000DFC  242A               	addwf	drawCircle@x,w,c
  9996  000DFE  6E16               	movwf	drawPixel@y,c
  9997  000E00  C020  F017         	movff	drawCircle@color,drawPixel@color
  9998  000E04  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  9999  000E08  501A               	movf	drawCircle@x0,w,c
 10000  000E0A  242C               	addwf	drawCircle@y,w,c
 10001  000E0C  EC72  F012         	call	_drawPixel
 10002                           
 10003                           ;ST7735_TFT.c: 583: drawPixel(x0 - y, y0 + x, color);
 10004  000E10  501C               	movf	drawCircle@y0,w,c
 10005  000E12  242A               	addwf	drawCircle@x,w,c
 10006  000E14  6E16               	movwf	drawPixel@y,c
 10007  000E16  C020  F017         	movff	drawCircle@color,drawPixel@color
 10008  000E1A  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
 10009  000E1E  502C               	movf	drawCircle@y,w,c
 10010  000E20  0800               	sublw	0
 10011  000E22  241A               	addwf	drawCircle@x0,w,c
 10012  000E24  EC72  F012         	call	_drawPixel
 10013                           
 10014                           ;ST7735_TFT.c: 584: drawPixel(x0 + y, y0 - x, color);
 10015  000E28  502A               	movf	drawCircle@x,w,c
 10016  000E2A  0800               	sublw	0
 10017  000E2C  241C               	addwf	drawCircle@y0,w,c
 10018  000E2E  6E16               	movwf	drawPixel@y,c
 10019  000E30  C020  F017         	movff	drawCircle@color,drawPixel@color
 10020  000E34  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
 10021  000E38  501A               	movf	drawCircle@x0,w,c
 10022  000E3A  242C               	addwf	drawCircle@y,w,c
 10023  000E3C  EC72  F012         	call	_drawPixel
 10024                           
 10025                           ;ST7735_TFT.c: 585: drawPixel(x0 - y, y0 - x, color);
 10026  000E40  502A               	movf	drawCircle@x,w,c
 10027  000E42  0800               	sublw	0
 10028  000E44  241C               	addwf	drawCircle@y0,w,c
 10029  000E46  6E16               	movwf	drawPixel@y,c
 10030  000E48  C020  F017         	movff	drawCircle@color,drawPixel@color
 10031  000E4C  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
 10032  000E50  502C               	movf	drawCircle@y,w,c
 10033  000E52  0800               	sublw	0
 10034  000E54  241A               	addwf	drawCircle@x0,w,c
 10035  000E56  EC72  F012         	call	_drawPixel
 10036  000E5A  D000               	goto	l4447
 10037  000E5C                     l4447:
 10038  000E5C  502C               	movf	drawCircle@y,w,c
 10039  000E5E  5C2A               	subwf	drawCircle@x,w,c
 10040  000E60  502B               	movf	drawCircle@x+1,w,c
 10041  000E62  0A80               	xorlw	128
 10042  000E64  6E22               	movwf	??_drawCircle& (0+255),c
 10043  000E66  502D               	movf	drawCircle@y+1,w,c
 10044  000E68  0A80               	xorlw	128
 10045  000E6A  5822               	subwfb	??_drawCircle& (0+255),w,c
 10046  000E6C  A0D8               	btfss	status,0,c
 10047  000E6E  D77E               	goto	l4419
 10048  000E70  0012               	return		;funcret
 10049  000E72                     __end_of_drawCircle:
 10050                           	opt stack 0
 10051                           tblptru	equ	0xFF8
 10052                           tblptrh	equ	0xFF7
 10053                           tblptrl	equ	0xFF6
 10054                           tablat	equ	0xFF5
 10055                           prodh	equ	0xFF4
 10056                           prodl	equ	0xFF3
 10057                           intcon	equ	0xFF2
 10058                           intcon2	equ	0xFF1
 10059                           intcon3	equ	0xFF0
 10060                           postinc0	equ	0xFEE
 10061                           wreg	equ	0xFE8
 10062                           postdec1	equ	0xFE5
 10063                           fsr1l	equ	0xFE1
 10064                           indf2	equ	0xFDF
 10065                           postinc2	equ	0xFDE
 10066                           fsr2h	equ	0xFDA
 10067                           fsr2l	equ	0xFD9
 10068                           status	equ	0xFD8
 10069                           
 10070 ;; *************** function _drawPixel *****************
 10071 ;; Defined at:
 10072 ;;		line 440 in file "ST7735_TFT.c"
 10073 ;; Parameters:    Size  Location     Type
 10074 ;;  x               1    wreg     unsigned char 
 10075 ;;  y               1   21[COMRAM] unsigned char 
 10076 ;;  color           2   22[COMRAM] unsigned int 
 10077 ;; Auto vars:     Size  Location     Type
 10078 ;;  x               1   24[COMRAM] unsigned char 
 10079 ;; Return value:  Size  Location     Type
 10080 ;;		None               void
 10081 ;; Registers used:
 10082 ;;		wreg, status,2, status,0, cstack
 10083 ;; Tracked objects:
 10084 ;;		On entry : 0/0
 10085 ;;		On exit  : 0/0
 10086 ;;		Unchanged: 0/0
 10087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10088 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10089 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10090 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10091 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10092 ;;Total ram usage:        4 bytes
 10093 ;; Hardware stack levels used:    1
 10094 ;; Hardware stack levels required when called:    5
 10095 ;; This function calls:
 10096 ;;		_setAddrWindow
 10097 ;;		_write_data
 10098 ;; This function is called by:
 10099 ;;		_drawChar
 10100 ;;		_drawCircle
 10101 ;;		_drawCircleHelper
 10102 ;; This function uses a non-reentrant model
 10103 ;;
 10104                           
 10105                           	psect	text51
 10106  0024E4                     __ptext51:
 10107                           	opt stack 0
 10108  0024E4                     _drawPixel:
 10109                           	opt stack 20
 10110                           
 10111                           ;incstack = 0
 10112                           ;drawPixel@x stored from wreg
 10113  0024E4  6E19               	movwf	drawPixel@x,c
 10114                           
 10115                           ;ST7735_TFT.c: 442: if((x >= 128) || (y >= 160))
 10116  0024E6  0E80               	movlw	128
 10117  0024E8  6019               	cpfslt	drawPixel@x,c
 10118  0024EA  D013               	goto	l181
 10119  0024EC  0E9F               	movlw	159
 10120  0024EE  6416               	cpfsgt	drawPixel@y,c
 10121  0024F0  D001               	goto	l4213
 10122                           
 10123                           ;ST7735_TFT.c: 443: return;
 10124  0024F2  D00F               	goto	l181
 10125  0024F4                     l4213:
 10126                           
 10127                           ;ST7735_TFT.c: 444: setAddrWindow(x,y,x+1,y+1);
 10128  0024F4  C016  F012         	movff	drawPixel@y,setAddrWindow@y0
 10129  0024F8  2819               	incf	drawPixel@x,w,c
 10130  0024FA  6E13               	movwf	setAddrWindow@x1,c
 10131  0024FC  2816               	incf	drawPixel@y,w,c
 10132  0024FE  6E14               	movwf	setAddrWindow@y1,c
 10133  002500  5019               	movf	drawPixel@x,w,c
 10134  002502  EC06  F011         	call	_setAddrWindow
 10135                           
 10136                           ;ST7735_TFT.c: 445: write_data(color >> 8);
 10137  002506  5018               	movf	drawPixel@color+1,w,c
 10138  002508  EC3A  F013         	call	_write_data
 10139                           
 10140                           ;ST7735_TFT.c: 446: write_data(color & 0xFF);
 10141  00250C  5017               	movf	drawPixel@color,w,c
 10142  00250E  EC3A  F013         	call	_write_data
 10143  002512                     l181:
 10144  002512  0012               	return		;funcret
 10145  002514                     __end_of_drawPixel:
 10146                           	opt stack 0
 10147                           tblptru	equ	0xFF8
 10148                           tblptrh	equ	0xFF7
 10149                           tblptrl	equ	0xFF6
 10150                           tablat	equ	0xFF5
 10151                           prodh	equ	0xFF4
 10152                           prodl	equ	0xFF3
 10153                           intcon	equ	0xFF2
 10154                           intcon2	equ	0xFF1
 10155                           intcon3	equ	0xFF0
 10156                           postinc0	equ	0xFEE
 10157                           wreg	equ	0xFE8
 10158                           postdec1	equ	0xFE5
 10159                           fsr1l	equ	0xFE1
 10160                           indf2	equ	0xFDF
 10161                           postinc2	equ	0xFDE
 10162                           fsr2h	equ	0xFDA
 10163                           fsr2l	equ	0xFD9
 10164                           status	equ	0xFD8
 10165                           
 10166 ;; *************** function _setAddrWindow *****************
 10167 ;; Defined at:
 10168 ;;		line 425 in file "ST7735_TFT.c"
 10169 ;; Parameters:    Size  Location     Type
 10170 ;;  x0              1    wreg     unsigned char 
 10171 ;;  y0              1   17[COMRAM] unsigned char 
 10172 ;;  x1              1   18[COMRAM] unsigned char 
 10173 ;;  y1              1   19[COMRAM] unsigned char 
 10174 ;; Auto vars:     Size  Location     Type
 10175 ;;  x0              1   20[COMRAM] unsigned char 
 10176 ;; Return value:  Size  Location     Type
 10177 ;;		None               void
 10178 ;; Registers used:
 10179 ;;		wreg, status,2, status,0, cstack
 10180 ;; Tracked objects:
 10181 ;;		On entry : 0/0
 10182 ;;		On exit  : 0/0
 10183 ;;		Unchanged: 0/0
 10184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10185 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10186 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10187 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10188 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10189 ;;Total ram usage:        4 bytes
 10190 ;; Hardware stack levels used:    1
 10191 ;; Hardware stack levels required when called:    4
 10192 ;; This function calls:
 10193 ;;		_write_command
 10194 ;;		_write_data
 10195 ;; This function is called by:
 10196 ;;		_drawPixel
 10197 ;;		_drawFastVLine
 10198 ;;		_fillRectangle
 10199 ;;		_drawFastHLine
 10200 ;; This function uses a non-reentrant model
 10201 ;;
 10202                           
 10203                           	psect	text52
 10204  00220C                     __ptext52:
 10205                           	opt stack 0
 10206  00220C                     _setAddrWindow:
 10207                           	opt stack 19
 10208                           
 10209                           ;incstack = 0
 10210                           ;setAddrWindow@x0 stored from wreg
 10211  00220C  6E15               	movwf	setAddrWindow@x0,c
 10212                           
 10213                           ;ST7735_TFT.c: 427: write_command(0x2A);
 10214  00220E  0E2A               	movlw	42
 10215  002210  EC42  F013         	call	_write_command
 10216                           
 10217                           ;ST7735_TFT.c: 428: write_data(0);
 10218  002214  0E00               	movlw	0
 10219  002216  EC3A  F013         	call	_write_data
 10220                           
 10221                           ;ST7735_TFT.c: 429: write_data(x0 + colstart);
 10222  00221A  5015               	movf	setAddrWindow@x0,w,c
 10223  00221C  2457               	addwf	_colstart,w,c
 10224  00221E  EC3A  F013         	call	_write_data
 10225                           
 10226                           ;ST7735_TFT.c: 430: write_data(0);
 10227  002222  0E00               	movlw	0
 10228  002224  EC3A  F013         	call	_write_data
 10229                           
 10230                           ;ST7735_TFT.c: 431: write_data(x1 + colstart);
 10231  002228  5013               	movf	setAddrWindow@x1,w,c
 10232  00222A  2457               	addwf	_colstart,w,c
 10233  00222C  EC3A  F013         	call	_write_data
 10234                           
 10235                           ;ST7735_TFT.c: 432: write_command(0x2B);
 10236  002230  0E2B               	movlw	43
 10237  002232  EC42  F013         	call	_write_command
 10238                           
 10239                           ;ST7735_TFT.c: 433: write_data(0);
 10240  002236  0E00               	movlw	0
 10241  002238  EC3A  F013         	call	_write_data
 10242                           
 10243                           ;ST7735_TFT.c: 434: write_data(y0 + rowstart);
 10244  00223C  5012               	movf	setAddrWindow@y0,w,c
 10245  00223E  245A               	addwf	_rowstart,w,c
 10246  002240  EC3A  F013         	call	_write_data
 10247                           
 10248                           ;ST7735_TFT.c: 435: write_data(0);
 10249  002244  0E00               	movlw	0
 10250  002246  EC3A  F013         	call	_write_data
 10251                           
 10252                           ;ST7735_TFT.c: 436: write_data(y1 + rowstart);
 10253  00224A  5014               	movf	setAddrWindow@y1,w,c
 10254  00224C  245A               	addwf	_rowstart,w,c
 10255  00224E  EC3A  F013         	call	_write_data
 10256                           
 10257                           ;ST7735_TFT.c: 437: write_command(0x2C);
 10258  002252  0E2C               	movlw	44
 10259  002254  EC42  F013         	call	_write_command
 10260  002258  0012               	return		;funcret
 10261  00225A                     __end_of_setAddrWindow:
 10262                           	opt stack 0
 10263                           tblptru	equ	0xFF8
 10264                           tblptrh	equ	0xFF7
 10265                           tblptrl	equ	0xFF6
 10266                           tablat	equ	0xFF5
 10267                           prodh	equ	0xFF4
 10268                           prodl	equ	0xFF3
 10269                           intcon	equ	0xFF2
 10270                           intcon2	equ	0xFF1
 10271                           intcon3	equ	0xFF0
 10272                           postinc0	equ	0xFEE
 10273                           wreg	equ	0xFE8
 10274                           postdec1	equ	0xFE5
 10275                           fsr1l	equ	0xFE1
 10276                           indf2	equ	0xFDF
 10277                           postinc2	equ	0xFDE
 10278                           fsr2h	equ	0xFDA
 10279                           fsr2l	equ	0xFD9
 10280                           status	equ	0xFD8
 10281                           
 10282 ;; *************** function _write_data *****************
 10283 ;; Defined at:
 10284 ;;		line 242 in file "ST7735_TFT.c"
 10285 ;; Parameters:    Size  Location     Type
 10286 ;;  data_           1    wreg     unsigned char 
 10287 ;; Auto vars:     Size  Location     Type
 10288 ;;  data_           1   16[COMRAM] unsigned char 
 10289 ;; Return value:  Size  Location     Type
 10290 ;;		None               void
 10291 ;; Registers used:
 10292 ;;		wreg, status,2, cstack
 10293 ;; Tracked objects:
 10294 ;;		On entry : 0/0
 10295 ;;		On exit  : 0/0
 10296 ;;		Unchanged: 0/0
 10297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10298 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10299 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10300 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10301 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10302 ;;Total ram usage:        1 bytes
 10303 ;; Hardware stack levels used:    1
 10304 ;; Hardware stack levels required when called:    3
 10305 ;; This function calls:
 10306 ;;		_spiwrite
 10307 ;; This function is called by:
 10308 ;;		_Rcmd1
 10309 ;;		_Rcmd2red
 10310 ;;		_Rcmd3
 10311 ;;		_setAddrWindow
 10312 ;;		_drawPixel
 10313 ;;		_TFT_GreenTab_Initialize
 10314 ;;		_Bcmd
 10315 ;;		_setScrollDefinition
 10316 ;;		_Rcmd2green
 10317 ;;		_VerticalScroll
 10318 ;; This function uses a non-reentrant model
 10319 ;;
 10320                           
 10321                           	psect	text53
 10322  002674                     __ptext53:
 10323                           	opt stack 0
 10324  002674                     _write_data:
 10325                           	opt stack 19
 10326                           
 10327                           ;incstack = 0
 10328                           ;write_data@data_ stored from wreg
 10329  002674  6E11               	movwf	write_data@data_,c
 10330                           
 10331                           ;ST7735_TFT.c: 244: PORTDbits.RD1 = 0;
 10332  002676  9283               	bcf	3971,1,c	;volatile
 10333                           
 10334                           ;ST7735_TFT.c: 245: PORTDbits.RD0 = 1;
 10335  002678  8083               	bsf	3971,0,c	;volatile
 10336                           
 10337                           ;ST7735_TFT.c: 246: spiwrite(data_);
 10338  00267A  5011               	movf	write_data@data_,w,c
 10339  00267C  EC0C  F013         	call	_spiwrite
 10340                           
 10341                           ;ST7735_TFT.c: 247: PORTDbits.RD1 = 1;
 10342  002680  8283               	bsf	3971,1,c	;volatile
 10343  002682  0012               	return		;funcret
 10344  002684                     __end_of_write_data:
 10345                           	opt stack 0
 10346                           tblptru	equ	0xFF8
 10347                           tblptrh	equ	0xFF7
 10348                           tblptrl	equ	0xFF6
 10349                           tablat	equ	0xFF5
 10350                           prodh	equ	0xFF4
 10351                           prodl	equ	0xFF3
 10352                           intcon	equ	0xFF2
 10353                           intcon2	equ	0xFF1
 10354                           intcon3	equ	0xFF0
 10355                           postinc0	equ	0xFEE
 10356                           wreg	equ	0xFE8
 10357                           postdec1	equ	0xFE5
 10358                           fsr1l	equ	0xFE1
 10359                           indf2	equ	0xFDF
 10360                           postinc2	equ	0xFDE
 10361                           fsr2h	equ	0xFDA
 10362                           fsr2l	equ	0xFD9
 10363                           status	equ	0xFD8
 10364                           
 10365 ;; *************** function _write_command *****************
 10366 ;; Defined at:
 10367 ;;		line 231 in file "ST7735_TFT.c"
 10368 ;; Parameters:    Size  Location     Type
 10369 ;;  cmd_            1    wreg     unsigned char 
 10370 ;; Auto vars:     Size  Location     Type
 10371 ;;  cmd_            1   16[COMRAM] unsigned char 
 10372 ;; Return value:  Size  Location     Type
 10373 ;;		None               void
 10374 ;; Registers used:
 10375 ;;		wreg, status,2, cstack
 10376 ;; Tracked objects:
 10377 ;;		On entry : 0/0
 10378 ;;		On exit  : 0/0
 10379 ;;		Unchanged: 0/0
 10380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10381 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10382 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10383 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10384 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10385 ;;Total ram usage:        1 bytes
 10386 ;; Hardware stack levels used:    1
 10387 ;; Hardware stack levels required when called:    3
 10388 ;; This function calls:
 10389 ;;		_spiwrite
 10390 ;; This function is called by:
 10391 ;;		_Rcmd1
 10392 ;;		_Rcmd2red
 10393 ;;		_Rcmd3
 10394 ;;		_setAddrWindow
 10395 ;;		_TFT_GreenTab_Initialize
 10396 ;;		_Bcmd
 10397 ;;		_setScrollDefinition
 10398 ;;		_Rcmd2green
 10399 ;;		_VerticalScroll
 10400 ;; This function uses a non-reentrant model
 10401 ;;
 10402                           
 10403                           	psect	text54
 10404  002684                     __ptext54:
 10405                           	opt stack 0
 10406  002684                     _write_command:
 10407                           	opt stack 19
 10408                           
 10409                           ;incstack = 0
 10410                           ;write_command@cmd_ stored from wreg
 10411  002684  6E11               	movwf	write_command@cmd_,c
 10412                           
 10413                           ;ST7735_TFT.c: 233: PORTDbits.RD1 = 0;
 10414  002686  9283               	bcf	3971,1,c	;volatile
 10415                           
 10416                           ;ST7735_TFT.c: 235: PORTDbits.RD0 = 0;
 10417  002688  9083               	bcf	3971,0,c	;volatile
 10418                           
 10419                           ;ST7735_TFT.c: 236: spiwrite(cmd_);
 10420  00268A  5011               	movf	write_command@cmd_,w,c
 10421  00268C  EC0C  F013         	call	_spiwrite
 10422                           
 10423                           ;ST7735_TFT.c: 238: PORTDbits.RD1 = 1;
 10424  002690  8283               	bsf	3971,1,c	;volatile
 10425  002692  0012               	return		;funcret
 10426  002694                     __end_of_write_command:
 10427                           	opt stack 0
 10428                           tblptru	equ	0xFF8
 10429                           tblptrh	equ	0xFF7
 10430                           tblptrl	equ	0xFF6
 10431                           tablat	equ	0xFF5
 10432                           prodh	equ	0xFF4
 10433                           prodl	equ	0xFF3
 10434                           intcon	equ	0xFF2
 10435                           intcon2	equ	0xFF1
 10436                           intcon3	equ	0xFF0
 10437                           postinc0	equ	0xFEE
 10438                           wreg	equ	0xFE8
 10439                           postdec1	equ	0xFE5
 10440                           fsr1l	equ	0xFE1
 10441                           indf2	equ	0xFDF
 10442                           postinc2	equ	0xFDE
 10443                           fsr2h	equ	0xFDA
 10444                           fsr2l	equ	0xFD9
 10445                           status	equ	0xFD8
 10446                           
 10447 ;; *************** function _spiwrite *****************
 10448 ;; Defined at:
 10449 ;;		line 222 in file "ST7735_TFT.c"
 10450 ;; Parameters:    Size  Location     Type
 10451 ;;  spidata         1    wreg     unsigned char 
 10452 ;; Auto vars:     Size  Location     Type
 10453 ;;  spidata         1   15[COMRAM] unsigned char 
 10454 ;;  x               1   14[COMRAM] unsigned char 
 10455 ;; Return value:  Size  Location     Type
 10456 ;;		None               void
 10457 ;; Registers used:
 10458 ;;		wreg
 10459 ;; Tracked objects:
 10460 ;;		On entry : 0/0
 10461 ;;		On exit  : 0/0
 10462 ;;		Unchanged: 0/0
 10463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10464 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10465 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10466 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10467 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10468 ;;Total ram usage:        2 bytes
 10469 ;; Hardware stack levels used:    1
 10470 ;; Hardware stack levels required when called:    2
 10471 ;; This function calls:
 10472 ;;		Nothing
 10473 ;; This function is called by:
 10474 ;;		_write_command
 10475 ;;		_write_data
 10476 ;;		_drawFastVLine
 10477 ;;		_fillRectangle
 10478 ;;		_drawFastHLine
 10479 ;; This function uses a non-reentrant model
 10480 ;;
 10481                           
 10482                           	psect	text55
 10483  002618                     __ptext55:
 10484                           	opt stack 0
 10485  002618                     _spiwrite:
 10486                           	opt stack 21
 10487                           
 10488                           ;incstack = 0
 10489                           ;spiwrite@spidata stored from wreg
 10490  002618  6E10               	movwf	spiwrite@spidata,c
 10491                           
 10492                           ;ST7735_TFT.c: 224: char x;
 10493                           ;ST7735_TFT.c: 225: PIR1bits.SSPIF = 0;
 10494  00261A  969E               	bcf	3998,3,c	;volatile
 10495                           
 10496                           ;ST7735_TFT.c: 226: x = SSPBUF;
 10497  00261C  CFC9 F00F          	movff	4041,spiwrite@x	;volatile
 10498                           
 10499                           ;ST7735_TFT.c: 227: SSPBUF = spidata;
 10500  002620  C010  FFC9         	movff	spiwrite@spidata,4041	;volatile
 10501                           
 10502                           ;ST7735_TFT.c: 228: while (!SSPSTATbits.BF);
 10503  002624  D000               	goto	l137
 10504  002626                     l137:
 10505  002626  A0C7               	btfss	4039,0,c	;volatile
 10506  002628  D7FE               	goto	l137
 10507  00262A  0012               	return		;funcret
 10508  00262C                     __end_of_spiwrite:
 10509                           	opt stack 0
 10510                           tblptru	equ	0xFF8
 10511                           tblptrh	equ	0xFF7
 10512                           tblptrl	equ	0xFF6
 10513                           tablat	equ	0xFF5
 10514                           prodh	equ	0xFF4
 10515                           prodl	equ	0xFF3
 10516                           intcon	equ	0xFF2
 10517                           intcon2	equ	0xFF1
 10518                           intcon3	equ	0xFF0
 10519                           postinc0	equ	0xFEE
 10520                           wreg	equ	0xFE8
 10521                           postdec1	equ	0xFE5
 10522                           fsr1l	equ	0xFE1
 10523                           indf2	equ	0xFDF
 10524                           postinc2	equ	0xFDE
 10525                           fsr2h	equ	0xFDA
 10526                           fsr2l	equ	0xFD9
 10527                           status	equ	0xFD8
 10528                           
 10529 ;; *************** function _chkisr *****************
 10530 ;; Defined at:
 10531 ;;		line 302 in file "Lab8pC.c"
 10532 ;; Parameters:    Size  Location     Type
 10533 ;;		None
 10534 ;; Auto vars:     Size  Location     Type
 10535 ;;		None
 10536 ;; Return value:  Size  Location     Type
 10537 ;;		None               void
 10538 ;; Registers used:
 10539 ;;		wreg, status,2, status,0, cstack
 10540 ;; Tracked objects:
 10541 ;;		On entry : 0/0
 10542 ;;		On exit  : 0/0
 10543 ;;		Unchanged: 0/0
 10544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10545 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10546 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10547 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10548 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10549 ;;Total ram usage:       14 bytes
 10550 ;; Hardware stack levels used:    1
 10551 ;; Hardware stack levels required when called:    1
 10552 ;; This function calls:
 10553 ;;		_INT0_ISR
 10554 ;;		_INT1_ISR
 10555 ;;		_INT2_ISR
 10556 ;; This function is called by:
 10557 ;;		Interrupt level 2
 10558 ;; This function uses a non-reentrant model
 10559 ;;
 10560                           
 10561                           	psect	intcode
 10562  000008                     __pintcode:
 10563                           	opt stack 0
 10564  000008                     _chkisr:
 10565                           	opt stack 18
 10566                           
 10567                           ;incstack = 0
 10568  000008  CFFA F001          	movff	pclath,??_chkisr
 10569  00000C  CFFB F002          	movff	pclatu,??_chkisr+1
 10570  000010  CFE9 F003          	movff	fsr0l,??_chkisr+2
 10571  000014  EDF2  F00E         	call	int_func,f	;refresh shadow registers
 10572                           pclatu	equ	0xFFB
 10573                           pclath	equ	0xFFA
 10574                           tblptru	equ	0xFF8
 10575                           tblptrh	equ	0xFF7
 10576                           tblptrl	equ	0xFF6
 10577                           tablat	equ	0xFF5
 10578                           prodh	equ	0xFF4
 10579                           prodl	equ	0xFF3
 10580                           intcon	equ	0xFF2
 10581                           intcon2	equ	0xFF1
 10582                           intcon3	equ	0xFF0
 10583                           postinc0	equ	0xFEE
 10584                           fsr0l	equ	0xFE9
 10585                           wreg	equ	0xFE8
 10586                           postdec1	equ	0xFE5
 10587                           fsr1l	equ	0xFE1
 10588                           indf2	equ	0xFDF
 10589                           postinc2	equ	0xFDE
 10590                           fsr2h	equ	0xFDA
 10591                           fsr2l	equ	0xFD9
 10592                           status	equ	0xFD8
 10593                           
 10594                           	psect	intcode_body
 10595  001DE4                     __pintcode_body:
 10596                           	opt stack 18
 10597  001DE4                     int_func:
 10598                           	opt stack 18
 10599  001DE4  0006               	pop		; remove dummy address from shadow register refresh
 10600  001DE6  CFEA F004          	movff	fsr0h,??_chkisr+3
 10601  001DEA  CFE1 F005          	movff	fsr1l,??_chkisr+4
 10602  001DEE  CFE2 F006          	movff	fsr1h,??_chkisr+5
 10603  001DF2  CFD9 F007          	movff	fsr2l,??_chkisr+6
 10604  001DF6  CFDA F008          	movff	fsr2h,??_chkisr+7
 10605  001DFA  CFF3 F009          	movff	prodl,??_chkisr+8
 10606  001DFE  CFF4 F00A          	movff	prodh,??_chkisr+9
 10607  001E02  CFF6 F00B          	movff	tblptrl,??_chkisr+10
 10608  001E06  CFF7 F00C          	movff	tblptrh,??_chkisr+11
 10609  001E0A  CFF8 F00D          	movff	tblptru,??_chkisr+12
 10610  001E0E  CFF5 F00E          	movff	tablat,??_chkisr+13
 10611                           
 10612                           ;Lab8pC.c: 304: if (INTCONbits.INT0IF == 1) INT0_ISR();
 10613  001E12  A2F2               	btfss	intcon,1,c	;volatile
 10614  001E14  D003               	goto	i2l2677
 10615  001E16  EC31  F013         	call	_INT0_ISR	;wreg free
 10616  001E1A  D000               	goto	i2l2677
 10617  001E1C                     i2l2677:
 10618                           
 10619                           ;Lab8pC.c: 306: if (INTCON3bits.INT1IF == 1) INT1_ISR();
 10620  001E1C  A0F0               	btfss	intcon3,0,c	;volatile
 10621  001E1E  D003               	goto	i2l2681
 10622  001E20  EC28  F013         	call	_INT1_ISR	;wreg free
 10623  001E24  D000               	goto	i2l2681
 10624  001E26                     i2l2681:
 10625                           
 10626                           ;Lab8pC.c: 307: if (INTCON3bits.INT2IF == 1) INT2_ISR();
 10627  001E26  A2F0               	btfss	intcon3,1,c	;volatile
 10628  001E28  D003               	goto	i2l404
 10629  001E2A  EC5B  F013         	call	_INT2_ISR	;wreg free
 10630  001E2E  D000               	goto	i2l404
 10631  001E30                     i2l404:
 10632  001E30  C00E  FFF5         	movff	??_chkisr+13,tablat
 10633  001E34  C00D  FFF8         	movff	??_chkisr+12,tblptru
 10634  001E38  C00C  FFF7         	movff	??_chkisr+11,tblptrh
 10635  001E3C  C00B  FFF6         	movff	??_chkisr+10,tblptrl
 10636  001E40  C00A  FFF4         	movff	??_chkisr+9,prodh
 10637  001E44  C009  FFF3         	movff	??_chkisr+8,prodl
 10638  001E48  C008  FFDA         	movff	??_chkisr+7,fsr2h
 10639  001E4C  C007  FFD9         	movff	??_chkisr+6,fsr2l
 10640  001E50  C006  FFE2         	movff	??_chkisr+5,fsr1h
 10641  001E54  C005  FFE1         	movff	??_chkisr+4,fsr1l
 10642  001E58  C004  FFEA         	movff	??_chkisr+3,fsr0h
 10643  001E5C  C003  FFE9         	movff	??_chkisr+2,fsr0l
 10644  001E60  C002  FFFB         	movff	??_chkisr+1,pclatu
 10645  001E64  C001  FFFA         	movff	??_chkisr,pclath
 10646  001E68  0011               	retfie		f
 10647  001E6A                     __end_of_chkisr:
 10648                           	opt stack 0
 10649                           pclatu	equ	0xFFB
 10650                           pclath	equ	0xFFA
 10651                           tblptru	equ	0xFF8
 10652                           tblptrh	equ	0xFF7
 10653                           tblptrl	equ	0xFF6
 10654                           tablat	equ	0xFF5
 10655                           prodh	equ	0xFF4
 10656                           prodl	equ	0xFF3
 10657                           intcon	equ	0xFF2
 10658                           intcon2	equ	0xFF1
 10659                           intcon3	equ	0xFF0
 10660                           postinc0	equ	0xFEE
 10661                           fsr0h	equ	0xFEA
 10662                           fsr0l	equ	0xFE9
 10663                           wreg	equ	0xFE8
 10664                           postdec1	equ	0xFE5
 10665                           fsr1h	equ	0xFE2
 10666                           fsr1l	equ	0xFE1
 10667                           indf2	equ	0xFDF
 10668                           postinc2	equ	0xFDE
 10669                           fsr2h	equ	0xFDA
 10670                           fsr2l	equ	0xFD9
 10671                           status	equ	0xFD8
 10672                           
 10673 ;; *************** function _INT2_ISR *****************
 10674 ;; Defined at:
 10675 ;;		line 265 in file "Lab8pC.c"
 10676 ;; Parameters:    Size  Location     Type
 10677 ;;		None
 10678 ;; Auto vars:     Size  Location     Type
 10679 ;;		None
 10680 ;; Return value:  Size  Location     Type
 10681 ;;		None               void
 10682 ;; Registers used:
 10683 ;;		wreg, status,2
 10684 ;; Tracked objects:
 10685 ;;		On entry : 0/0
 10686 ;;		On exit  : 0/0
 10687 ;;		Unchanged: 0/0
 10688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10689 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10690 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10691 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10692 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10693 ;;Total ram usage:        0 bytes
 10694 ;; Hardware stack levels used:    1
 10695 ;; This function calls:
 10696 ;;		Nothing
 10697 ;; This function is called by:
 10698 ;;		_chkisr
 10699 ;; This function uses a non-reentrant model
 10700 ;;
 10701                           
 10702                           	psect	text57
 10703  0026B6                     __ptext57:
 10704                           	opt stack 0
 10705  0026B6                     _INT2_ISR:
 10706                           	opt stack 18
 10707                           
 10708                           ;Lab8pC.c: 267: INTCON3bits.INT2IF=0;
 10709                           
 10710                           ;incstack = 0
 10711  0026B6  92F0               	bcf	intcon3,1,c	;volatile
 10712                           
 10713                           ;Lab8pC.c: 268: FLASHING_REQUEST = 1;
 10714  0026B8  0E01               	movlw	1
 10715  0026BA  6E4C               	movwf	_FLASHING_REQUEST,c
 10716  0026BC  0012               	return		;funcret
 10717  0026BE                     __end_of_INT2_ISR:
 10718                           	opt stack 0
 10719                           pclatu	equ	0xFFB
 10720                           pclath	equ	0xFFA
 10721                           tblptru	equ	0xFF8
 10722                           tblptrh	equ	0xFF7
 10723                           tblptrl	equ	0xFF6
 10724                           tablat	equ	0xFF5
 10725                           prodh	equ	0xFF4
 10726                           prodl	equ	0xFF3
 10727                           intcon	equ	0xFF2
 10728                           intcon2	equ	0xFF1
 10729                           intcon3	equ	0xFF0
 10730                           postinc0	equ	0xFEE
 10731                           fsr0h	equ	0xFEA
 10732                           fsr0l	equ	0xFE9
 10733                           wreg	equ	0xFE8
 10734                           postdec1	equ	0xFE5
 10735                           fsr1h	equ	0xFE2
 10736                           fsr1l	equ	0xFE1
 10737                           indf2	equ	0xFDF
 10738                           postinc2	equ	0xFDE
 10739                           fsr2h	equ	0xFDA
 10740                           fsr2l	equ	0xFD9
 10741                           status	equ	0xFD8
 10742                           
 10743 ;; *************** function _INT1_ISR *****************
 10744 ;; Defined at:
 10745 ;;		line 259 in file "Lab8pC.c"
 10746 ;; Parameters:    Size  Location     Type
 10747 ;;		None
 10748 ;; Auto vars:     Size  Location     Type
 10749 ;;		None
 10750 ;; Return value:  Size  Location     Type
 10751 ;;		None               void
 10752 ;; Registers used:
 10753 ;;		wreg, status,2, status,0
 10754 ;; Tracked objects:
 10755 ;;		On entry : 0/0
 10756 ;;		On exit  : 0/0
 10757 ;;		Unchanged: 0/0
 10758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10759 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10760 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10761 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10762 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10763 ;;Total ram usage:        0 bytes
 10764 ;; Hardware stack levels used:    1
 10765 ;; This function calls:
 10766 ;;		Nothing
 10767 ;; This function is called by:
 10768 ;;		_chkisr
 10769 ;; This function uses a non-reentrant model
 10770 ;;
 10771                           
 10772                           	psect	text58
 10773  002650                     __ptext58:
 10774                           	opt stack 0
 10775  002650                     _INT1_ISR:
 10776                           	opt stack 18
 10777                           
 10778                           ;Lab8pC.c: 261: INTCON3bits.INT1IF=0;
 10779                           
 10780                           ;incstack = 0
 10781  002650  90F0               	bcf	intcon3,0,c	;volatile
 10782                           
 10783                           ;Lab8pC.c: 262: if(MODE==1)
 10784  002652  0445               	decf	_MODE,w,c
 10785  002654  1046               	iorwf	_MODE+1,w,c
 10786  002656  A4D8               	btfss	status,2,c
 10787  002658  D003               	goto	i2l386
 10788                           
 10789                           ;Lab8pC.c: 263: EW_PED_SW = 1;
 10790  00265A  0E01               	movlw	1
 10791  00265C  6E4A               	movwf	_EW_PED_SW,c
 10792  00265E  D000               	goto	i2l386
 10793  002660                     i2l386:
 10794  002660  0012               	return		;funcret
 10795  002662                     __end_of_INT1_ISR:
 10796                           	opt stack 0
 10797                           pclatu	equ	0xFFB
 10798                           pclath	equ	0xFFA
 10799                           tblptru	equ	0xFF8
 10800                           tblptrh	equ	0xFF7
 10801                           tblptrl	equ	0xFF6
 10802                           tablat	equ	0xFF5
 10803                           prodh	equ	0xFF4
 10804                           prodl	equ	0xFF3
 10805                           intcon	equ	0xFF2
 10806                           intcon2	equ	0xFF1
 10807                           intcon3	equ	0xFF0
 10808                           postinc0	equ	0xFEE
 10809                           fsr0h	equ	0xFEA
 10810                           fsr0l	equ	0xFE9
 10811                           wreg	equ	0xFE8
 10812                           postdec1	equ	0xFE5
 10813                           fsr1h	equ	0xFE2
 10814                           fsr1l	equ	0xFE1
 10815                           indf2	equ	0xFDF
 10816                           postinc2	equ	0xFDE
 10817                           fsr2h	equ	0xFDA
 10818                           fsr2l	equ	0xFD9
 10819                           status	equ	0xFD8
 10820                           
 10821 ;; *************** function _INT0_ISR *****************
 10822 ;; Defined at:
 10823 ;;		line 253 in file "Lab8pC.c"
 10824 ;; Parameters:    Size  Location     Type
 10825 ;;		None
 10826 ;; Auto vars:     Size  Location     Type
 10827 ;;		None
 10828 ;; Return value:  Size  Location     Type
 10829 ;;		None               void
 10830 ;; Registers used:
 10831 ;;		wreg, status,2, status,0
 10832 ;; Tracked objects:
 10833 ;;		On entry : 0/0
 10834 ;;		On exit  : 0/0
 10835 ;;		Unchanged: 0/0
 10836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10837 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10838 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10839 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10840 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10841 ;;Total ram usage:        0 bytes
 10842 ;; Hardware stack levels used:    1
 10843 ;; This function calls:
 10844 ;;		Nothing
 10845 ;; This function is called by:
 10846 ;;		_chkisr
 10847 ;; This function uses a non-reentrant model
 10848 ;;
 10849                           
 10850                           	psect	text59
 10851  002662                     __ptext59:
 10852                           	opt stack 0
 10853  002662                     _INT0_ISR:
 10854                           	opt stack 18
 10855                           
 10856                           ;Lab8pC.c: 255: INTCONbits.INT0IF=0;
 10857                           
 10858                           ;incstack = 0
 10859  002662  92F2               	bcf	intcon,1,c	;volatile
 10860                           
 10861                           ;Lab8pC.c: 256: if(MODE==1)
 10862  002664  0445               	decf	_MODE,w,c
 10863  002666  1046               	iorwf	_MODE+1,w,c
 10864  002668  A4D8               	btfss	status,2,c
 10865  00266A  D003               	goto	i2l382
 10866                           
 10867                           ;Lab8pC.c: 257: NS_PED_SW = 1;
 10868  00266C  0E01               	movlw	1
 10869  00266E  6E4D               	movwf	_NS_PED_SW,c
 10870  002670  D000               	goto	i2l382
 10871  002672                     i2l382:
 10872  002672  0012               	return		;funcret
 10873  002674                     __end_of_INT0_ISR:
 10874                           	opt stack 0
 10875                           pclatu	equ	0xFFB
 10876                           pclath	equ	0xFFA
 10877                           tblptru	equ	0xFF8
 10878                           tblptrh	equ	0xFF7
 10879                           tblptrl	equ	0xFF6
 10880                           tablat	equ	0xFF5
 10881                           prodh	equ	0xFF4
 10882                           prodl	equ	0xFF3
 10883                           intcon	equ	0xFF2
 10884                           intcon2	equ	0xFF1
 10885                           intcon3	equ	0xFF0
 10886                           postinc0	equ	0xFEE
 10887                           fsr0h	equ	0xFEA
 10888                           fsr0l	equ	0xFE9
 10889                           wreg	equ	0xFE8
 10890                           postdec1	equ	0xFE5
 10891                           fsr1h	equ	0xFE2
 10892                           fsr1l	equ	0xFE1
 10893                           indf2	equ	0xFDF
 10894                           postinc2	equ	0xFDE
 10895                           fsr2h	equ	0xFDA
 10896                           fsr2l	equ	0xFD9
 10897                           status	equ	0xFD8
 10898                           pclatu	equ	0xFFB
 10899                           pclath	equ	0xFFA
 10900                           tblptru	equ	0xFF8
 10901                           tblptrh	equ	0xFF7
 10902                           tblptrl	equ	0xFF6
 10903                           tablat	equ	0xFF5
 10904                           prodh	equ	0xFF4
 10905                           prodl	equ	0xFF3
 10906                           intcon	equ	0xFF2
 10907                           intcon2	equ	0xFF1
 10908                           intcon3	equ	0xFF0
 10909                           postinc0	equ	0xFEE
 10910                           fsr0h	equ	0xFEA
 10911                           fsr0l	equ	0xFE9
 10912                           wreg	equ	0xFE8
 10913                           postdec1	equ	0xFE5
 10914                           fsr1h	equ	0xFE2
 10915                           fsr1l	equ	0xFE1
 10916                           indf2	equ	0xFDF
 10917                           postinc2	equ	0xFDE
 10918                           fsr2h	equ	0xFDA
 10919                           fsr2l	equ	0xFD9
 10920                           status	equ	0xFD8
 10921                           
 10922                           	psect	rparam
 10923  0000                     pclatu	equ	0xFFB
 10924                           pclath	equ	0xFFA
 10925                           tblptru	equ	0xFF8
 10926                           tblptrh	equ	0xFF7
 10927                           tblptrl	equ	0xFF6
 10928                           tablat	equ	0xFF5
 10929                           prodh	equ	0xFF4
 10930                           prodl	equ	0xFF3
 10931                           intcon	equ	0xFF2
 10932                           intcon2	equ	0xFF1
 10933                           intcon3	equ	0xFF0
 10934                           postinc0	equ	0xFEE
 10935                           fsr0h	equ	0xFEA
 10936                           fsr0l	equ	0xFE9
 10937                           wreg	equ	0xFE8
 10938                           postdec1	equ	0xFE5
 10939                           fsr1h	equ	0xFE2
 10940                           fsr1l	equ	0xFE1
 10941                           indf2	equ	0xFDF
 10942                           postinc2	equ	0xFDE
 10943                           fsr2h	equ	0xFDA
 10944                           fsr2l	equ	0xFD9
 10945                           status	equ	0xFD8


Data Sizes:
    Strings     103
    Constant    475
    Data        35
    BSS         64
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     65     113
    BANK0           128     13      64
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), SW_MODE_Txt(COMRAM[2]), SW_NSLT_Txt(COMRAM[2]), SW_NSPED_Txt(COMRAM[2]), 
		 -> SW_EWLT_Txt(COMRAM[2]), SW_EWPED_Txt(COMRAM[2]), PED_NS_Count(BANK0[3]), PED_EW_Count(BANK0[3]), 
		 -> NSLT_Count(BANK0[3]), NS_Count(BANK0[3]), EWLT_Count(COMRAM[3]), EW_Count(COMRAM[3]), 
		 -> FlashingS_Txt(COMRAM[2]), FlashingR_Txt(COMRAM[2]), Act_Mode_Txt(COMRAM[2]), buffer(BANK0[31]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), SW_MODE_Txt(COMRAM[2]), SW_NSLT_Txt(COMRAM[2]), SW_NSPED_Txt(COMRAM[2]), 
		 -> SW_EWLT_Txt(COMRAM[2]), SW_EWPED_Txt(COMRAM[2]), PED_NS_Count(BANK0[3]), PED_EW_Count(BANK0[3]), 
		 -> NSLT_Count(BANK0[3]), NS_Count(BANK0[3]), EWLT_Count(COMRAM[3]), EW_Count(COMRAM[3]), 
		 -> FlashingS_Txt(COMRAM[2]), FlashingR_Txt(COMRAM[2]), Act_Mode_Txt(COMRAM[2]), buffer(BANK0[31]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_16(CODE[2]), STR_15(CODE[2]), STR_14(CODE[2]), STR_13(CODE[2]), 
		 -> STR_12(CODE[21]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[7]), 
		 -> STR_8(CODE[12]), STR_7(CODE[7]), STR_6(CODE[10]), STR_5(CODE[2]), 
		 -> STR_4(CODE[4]), STR_3(CODE[4]), STR_2(CODE[6]), STR_1(CODE[20]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    txt	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), SW_MODE_Txt(COMRAM[2]), SW_NSLT_Txt(COMRAM[2]), SW_NSPED_Txt(COMRAM[2]), 
		 -> SW_EWLT_Txt(COMRAM[2]), SW_EWPED_Txt(COMRAM[2]), PED_NS_Count(BANK0[3]), PED_EW_Count(BANK0[3]), 
		 -> NSLT_Count(BANK0[3]), NS_Count(BANK0[3]), EWLT_Count(COMRAM[3]), EW_Count(COMRAM[3]), 
		 -> FlashingS_Txt(COMRAM[2]), FlashingR_Txt(COMRAM[2]), Act_Mode_Txt(COMRAM[2]), buffer(BANK0[31]), 


Critical Paths under _main in COMRAM

    _init_UART->_OpenUSART
    _Initialize_Screen->_drawtext
    _Initialize_Screen->_fillCircle
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawRect->_drawFastHLine
    _drawRect->_drawFastVLine
    _drawFastHLine->_setAddrWindow
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul
    _Wait_N_Seconds->_update_LCD_count
    _update_LCD_count->_drawtext
    _PED_Control->_update_LCD_PED_Count
    _update_LCD_PED_Count->_drawtext
    _Wait_One_Second_With_Beep->_drawtext
    _Wait_One_Second->_drawtext
    _update_LCD_misc->_drawtext
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _Set_NS_LT->_update_LCD_color
    _Set_NS->_update_LCD_color
    _Set_EW_LT->_update_LCD_color
    _Set_EW->_update_LCD_color
    _update_LCD_color->_fillCircle
    _fillCircle->_fillCircleHelper
    _fillCircleHelper->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawCircle->_drawPixel
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _write_data->_spiwrite
    _write_command->_spiwrite

Critical Paths under _chkisr in COMRAM

    None.

Critical Paths under _main in BANK0

    _Night_Mode->_Wait_N_Seconds
    _Initialize_Screen->_drawtext
    _Day_Mode->_PED_Control
    _Day_Mode->_Wait_N_Seconds
    _update_LCD_count->_drawtext
    _PED_Control->_update_LCD_PED_Count
    _update_LCD_PED_Count->_drawtext
    _Wait_One_Second_With_Beep->_drawtext
    _Wait_One_Second->_update_LCD_misc
    _update_LCD_misc->_drawtext
    _Set_NS_LT->_update_LCD_color
    _Set_NS->_update_LCD_color
    _Set_EW_LT->_update_LCD_color
    _Set_EW->_update_LCD_color

Critical Paths under _chkisr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _chkisr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _chkisr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _chkisr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _chkisr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _chkisr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _chkisr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _chkisr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _chkisr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _chkisr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _chkisr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _chkisr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _chkisr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _chkisr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _chkisr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _chkisr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  829287
                                             11 BANK0      2     2      0
                           _Day_Mode
                           _Init_ADC
                  _Initialize_Screen
                         _Night_Mode
                           ___awtoft
                            ___ftdiv
                             ___ftge
                             ___wmul
                       _get_full_ADC
                            _init_IO
                          _init_UART
 ---------------------------------------------------------------------------------
 (1) _init_UART                                            0     0      0     375
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            3     1      2     375
                                             14 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _init_IO                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Night_Mode                                           0     0      0  349070
                        _Do_Flashing
                             _Set_EW
                          _Set_EW_LT
                             _Set_NS
                          _Set_NS_LT
                     _Wait_N_Seconds
 ---------------------------------------------------------------------------------
 (1) _Initialize_Screen                                    0     0      0   67208
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                         _drawCircle
                           _drawRect
                           _drawtext
                         _fillCircle
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _fillScreen                                           2     0      2    2192
                                             33 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (3) _fillRectangle                                       12     7      5    2096
                                             21 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _drawRect                                            11     1     10    6892
                                             32 COMRAM    11     1     10
                      _drawFastHLine
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (3) _drawFastHLine                                       11     7      4    1932
                                             21 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _TFT_GreenTab_Initialize                              0     0      0    4364
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd3                                                0     0      0    2052
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd2red                                             0     0      0     130
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd1                                                0     0      0    2052
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _LCD_Reset                                            0     0      0    1922
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             6     4      2    1922
                                             20 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Init_ADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Day_Mode                                             0     0      0  406297
                        _Do_Flashing
                        _PED_Control
                             _Set_EW
                          _Set_EW_LT
                             _Set_NS
                          _Set_NS_LT
                     _Wait_N_Seconds
 ---------------------------------------------------------------------------------
 (2) _Wait_N_Seconds                                       2     2      0   89446
                                              9 BANK0      2     2      0
                    _Wait_One_Second
                   _update_LCD_count
 ---------------------------------------------------------------------------------
 (3) _update_LCD_count                                     2     1      1   28828
                                             64 COMRAM     1     0      1
                                              7 BANK0      1     1      0
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (2) _PED_Control                                          3     2      1   57227
                                              8 BANK0      3     2      1
          _Wait_One_Second_With_Beep
               _update_LCD_PED_Count
 ---------------------------------------------------------------------------------
 (3) _update_LCD_PED_Count                                 2     1      1   28704
                                             64 COMRAM     1     0      1
                                              7 BANK0      1     1      0
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    1213
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1225
                                             14 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _Wait_One_Second_With_Beep                            0     0      0   28170
                    _Activate_Buzzer
                  _Deactivate_Buzzer
                   _Wait_Half_Second
                           _drawtext
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _Deactivate_Buzzer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Activate_Buzzer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Do_Flashing                                          0     0      0  160056
                             _Set_EW
                          _Set_EW_LT
                             _Set_NS
                          _Set_NS_LT
                    _Wait_One_Second
 ---------------------------------------------------------------------------------
 (3) _Wait_One_Second                                      0     0      0   60488
                   _Wait_Half_Second
                           _drawtext
                             _strcpy
                    _update_LCD_misc
 ---------------------------------------------------------------------------------
 (4) _update_LCD_misc                                      2     2      0   32318
                                              7 BANK0      2     2      0
                           ___awtoft
                            ___ftdiv
                             ___ftge
                             ___wmul
                           _drawtext
                       _get_full_ADC
 ---------------------------------------------------------------------------------
 (1) _get_full_ADC                                         6     4      2      34
                                             14 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (4) _drawtext                                            17     9      8   25981
                                             54 COMRAM    10     2      8
                                              0 BANK0      7     7      0
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (5) _strlen                                               6     4      2     195
                                             14 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (5) _drawChar                                            11     4      7   10774
                                             43 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (6) _fillRect                                            11     6      5    3876
                                             32 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     882
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) ___ftge                                               9     3      6     458
                                             14 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             15     9      6    2718
                                             26 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) ___awtoft                                             4     1      3    2211
                                             22 COMRAM     4     1      3
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftpack                                             8     3      5    1948
                                             14 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    2189
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) _Wait_Half_Second                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Set_NS_LT                                            1     1      0   24892
                                              2 BANK0      1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (2) _Set_NS                                               1     1      0   24892
                                              2 BANK0      1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (2) _Set_EW_LT                                            1     1      0   24892
                                              2 BANK0      1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (2) _Set_EW                                               1     1      0   24892
                                              2 BANK0      1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (3) _update_LCD_color                                     3     2      1   24830
                                             64 COMRAM     1     0      1
                                              0 BANK0      2     2      0
                         _drawCircle
                         _fillCircle
 ---------------------------------------------------------------------------------
 (4) _fillCircle                                           8     0      8   12244
                                             56 COMRAM     8     0      8
                      _drawFastVLine
                   _fillCircleHelper
 ---------------------------------------------------------------------------------
 (5) _fillCircleHelper                                    24    12     12    4703
                                             32 COMRAM    24    12     12
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (7) _drawFastVLine                                       11     7      4    3102
                                             21 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (4) _drawCircle                                          20    12      8   11424
                                             25 COMRAM    20    12      8
                          _drawPixel
 ---------------------------------------------------------------------------------
 (6) _drawPixel                                            4     1      3    4207
                                             21 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (8) _setAddrWindow                                        4     1      3    1034
                                             17 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (9) _write_data                                           1     1      0      65
                                             16 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (9) _write_command                                        1     1      0      65
                                             16 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (8) _spiwrite                                             2     2      0      34
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _chkisr                                             14    14      0       0
                                              0 COMRAM    14    14      0
                           _INT0_ISR
                           _INT1_ISR
                           _INT2_ISR
 ---------------------------------------------------------------------------------
 (13) _INT2_ISR                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _INT1_ISR                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _INT0_ISR                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Day_Mode
     _Do_Flashing
       _Set_EW
         _update_LCD_color
           _drawCircle
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
           _fillCircle
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
             _fillCircleHelper
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
       _Set_EW_LT
         _update_LCD_color
           _drawCircle
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
           _fillCircle
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
             _fillCircleHelper
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
       _Set_NS
         _update_LCD_color
           _drawCircle
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
           _fillCircle
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
             _fillCircleHelper
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
       _Set_NS_LT
         _update_LCD_color
           _drawCircle
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
           _fillCircle
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
             _fillCircleHelper
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
       _Wait_One_Second
         _Wait_Half_Second
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _strcpy
         _update_LCD_misc
           ___awtoft
             ___ftpack
             ___wmul (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftge
           ___wmul
           _drawtext
             _drawChar
               ___wmul
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _get_full_ADC
     _PED_Control
       _Wait_One_Second_With_Beep
         _Activate_Buzzer
         _Deactivate_Buzzer
         _Wait_Half_Second
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _strcpy
       _update_LCD_PED_Count
         ___awdiv
         ___awmod
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Set_EW
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_EW_LT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS_LT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Wait_N_Seconds
       _Wait_One_Second
         _Wait_Half_Second
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _strcpy
         _update_LCD_misc
           ___awtoft
             ___ftpack
             ___wmul (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftge
           ___wmul
           _drawtext
             _drawChar
               ___wmul
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _get_full_ADC
       _update_LCD_count
         ___awdiv
         ___awmod
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
   _Init_ADC
   _Initialize_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawCircle
       _drawPixel
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_data
           _spiwrite
     _drawRect
       _drawFastHLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
       _drawFastVLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillCircle
       _drawFastVLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
       _fillCircleHelper
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   _Night_Mode
     _Do_Flashing
       _Set_EW
         _update_LCD_color
           _drawCircle
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
           _fillCircle
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
             _fillCircleHelper
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
       _Set_EW_LT
         _update_LCD_color
           _drawCircle
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
           _fillCircle
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
             _fillCircleHelper
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
       _Set_NS
         _update_LCD_color
           _drawCircle
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
           _fillCircle
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
             _fillCircleHelper
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
       _Set_NS_LT
         _update_LCD_color
           _drawCircle
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
           _fillCircle
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
             _fillCircleHelper
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
       _Wait_One_Second
         _Wait_Half_Second
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _strcpy
         _update_LCD_misc
           ___awtoft
             ___ftpack
             ___wmul (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftge
           ___wmul
           _drawtext
             _drawChar
               ___wmul
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _get_full_ADC
     _Set_EW
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_EW_LT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS_LT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Wait_N_Seconds
       _Wait_One_Second
         _Wait_Half_Second
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _strcpy
         _update_LCD_misc
           ___awtoft
             ___ftpack
             ___wmul (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftge
           ___wmul
           _drawtext
             _drawChar
               ___wmul
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _get_full_ADC
       _update_LCD_count
         ___awdiv
         ___awmod
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
   ___awtoft
     ___ftpack
     ___wmul (ARG)
   ___ftdiv
     ___awtoft (ARG)
       ___ftpack
       ___wmul (ARG)
     ___ftpack (ARG)
     ___wmul (ARG)
   ___ftge
   ___wmul
   _get_full_ADC
   _init_IO
   _init_UART
     _OpenUSART

 _chkisr (ROOT)
   _INT0_ISR
   _INT1_ISR
   _INT2_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      D      40       5       50.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     41      71       1       89.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      B1      34        0.0%
DATA                 0      0      B1       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Fri Oct 15 11:39:12 2021

                       drawCircle@f 0028                         drawCircle@r 001E  
                       drawCircle@x 002A                         drawCircle@y 002C  
         _Wait_One_Second_With_Beep 1D5E                         _SSPSTATbits 000FC7  
                      drawCircle@x0 001A                        drawCircle@y0 001C  
                      ___awdiv@sign 0014                 ___wmul@multiplicand 0011  
          update_LCD_color@Circle_Y 00A8                                 l203 1150  
                               l212 10A6                                 l205 102A  
                               l127 21B2                                 l240 1752  
                               l137 2626                                 l241 16BE  
                               l251 0D86                                 l243 172E  
                               l244 1750                                 l181 2512  
                               l430 2594                                 l440 230A  
                               l512 25E4                                 l441 230E  
                               l433 25B4                                 l442 2332  
                               l450 22C6                                 l187 1D5C  
                               l451 22EA                                 l460 23C2  
                               l269 11C0                                 l437 2300  
                               l285 1CD4                                 l446 22B8  
                               l527 0AA0                                 l455 2390  
                               l439 2304                                 l543 18F8  
                               l464 2348                                 l448 22BC  
                               l536 0FFA                                 l457 2394  
                               l449 22C2                                 l458 239A  
                               l466 234C                                 l802 1EEA  
                               l482 2166                                 l459 239E  
                               l467 2352                                 l468 2356  
                               l469 237A                                 l814 247A  
                               l398 2046                                 l486 1792  
                               l590 1FC0                                 l495 19D2  
                               l591 1FC2                                 l904 19BE  
                               l488 17E6                                 l584 1F9A  
                               l593 1FDC                                 l915 1996  
                               l596 258E                                 l588 1FB4  
                               l589 1FB6                                 l789 1BB6  
                               l976 1676                                 l985 1C4C  
                               l979 1642                   ?_Wait_Half_Second 0001  
     update_LCD_PED_Count@direction 00AE                                 _PR2 000FCB  
                 _Deactivate_Buzzer 26AE                                 _dir 0058  
                               _nbr 0086                                 _txt 0047  
                    drawFastHLine@w 0017                      drawFastHLine@x 0020  
                    drawFastHLine@y 0016                        ___awmod@sign 0014  
           __end_of_update_LCD_misc 0CC4                                 wreg 000FE8  
                ??_Wait_Half_Second 000F                  ?_Deactivate_Buzzer 0001  
                   ??_fillRectangle 001B                        __CFG_LVP$OFF 000000  
           _TFT_GreenTab_Initialize 253E                        ___ftdiv@cntr 0024  
                      ___ftdiv@sign 0029                        __CFG_WDT$OFF 000000  
                    drawFastVLine@h 0017                                l1153 243E  
                    drawFastVLine@x 0020                      drawFastVLine@y 0016  
                              l4213 24F4                                l4205 1D44  
                              l4221 2264                                l4207 1D52  
                              l5015 1FEE                                l5111 2160  
                              l4225 2280                                l4241 1018  
                              l5041 203C                                l5105 2140  
                              l4323 1222                                l4307 11A6  
                              l4251 1036                                l5019 1FFE  
                              l5115 2484                                l4341 1946  
                              l4333 190A                                l4501 1650  
                              l4245 1026                                l4237 100C  
                              l5125 24A6                                l5301 17CE  
                              l5061 1F9E                                l5053 1F8A  
                              l4191 1CE6                                l4327 1274  
                              l4255 1066                                l4247 102E  
                              l5119 2492                                l4361 19B0  
                              l4345 195E                                l4337 191A  
                              l4513 2456                                l4521 1BEA  
                              l4257 109A                                l5321 1824  
                              l5057 1F92                                l5049 1F80  
                              l4419 0D6C                                l4195 1D1E  
                              l4355 199E                                l4347 197E  
                              l4339 1926                                l4531 1C48  
                              l4275 111C                                l4267 10C8  
                              l4283 114C                                l4259 109E  
                              l4291 2412                                l4611 0B56  
                              l4349 198A                                l4525 1C1C  
                              l4277 1144                                l4269 10F0  
                              l4373 13C6                                l4701 1E80  
                              l5069 1FAC                                l4447 0E5C  
                              l4551 24BC                                l4471 15DC  
                              l4631 0B9C                                l4623 0B80  
                              l4615 0B64                                l4607 0B48  
                              l4711 1EA6                                l5095 211C  
                              l4561 0820                                l4553 24C6  
                              l4465 15B4                                l4289 240C  
                              l4385 1416                                l4633 0BA2  
                              l4713 1EAE                                l4721 1ED0  
                              l4705 1E8E                                l5353 1A2E  
                              l4491 161C                                l4467 15CE  
                              l4627 0B8E                                l4619 0B72  
                              l5099 212A                                l5275 1768  
                              l4565 08F4                                l4397 1486  
                              l4389 1434                                l4725 1EE0  
                              l4717 1EC4                                l4709 1E9C  
                              l5621 1B0C                                l4399 148E  
                              l4671 1B6A                                l4663 1B4A  
                              l4831 16F6                                l4569 09CA  
                              l4913 2314                                l4905 22CC  
                              l4681 1B90                                l4673 1B72  
                              l4657 1B38                                l4825 1688  
                              l5369 1A72                                l5625 1B18  
                              l4851 173C                                l4843 1724  
                              l4669 1B60                                l4685 1B9C  
                              l4933 1830                                l4943 18E6  
                              l4847 1732                                l4689 1BAC  
                              l4937 188A                                l4881 1CCA  
                              l4865 1C5E                                l4857 174C  
                              l4973 0F2A                                l4965 0E78  
                              l4869 1C96                                l4983 0FDC  
                              l4879 1CBC                                l4889 23A4  
                              l4897 235C                                l4977 0F86  
                              l4969 0ECE                                STR_1 FFAD  
                              STR_2 FFE5                                STR_3 FFEB  
                              STR_4 FFEF                                STR_5 FFFD  
                              STR_6 FFCD                                STR_7 FFDE  
                              STR_8 FFC1                                STR_9 FFD7  
                              u4020 1B06                                u4030 1B08  
                              u3080 13F0                                u3320 0B1A  
                              u3161 15A6                                u3330 0B1C  
                              u3181 15C4                                u2900 10FE  
                              u2750 1D14                                u3630 1C8C  
                              u3550 16B6                                u3560 16EC  
                              _MODE 0045                                _RBPU 007F8F  
                              _TRMT 007D61                 ??_Deactivate_Buzzer 000F  
                              _main 1A78                                _font FDBD  
                      ___ftpack@arg 000F                        ___ftpack@exp 0012  
                              fsr0h 000FEA                                fsr1h 000FE2  
                    ??_get_full_ADC 0011                                fsr0l 000FE9  
                              fsr2h 000FDA                                fsr1l 000FE1  
                              indf2 000FDF                                fsr2l 000FD9  
                              _wrap 005B                                _volt 0042  
                   drawFastHLine@hi 001E                     drawFastHLine@lo 001F  
          __end_of_update_LCD_color 0AA2                                pclat 000FFA  
          __end_of_update_LCD_count 0FFC                  __size_of_LCD_Reset 0012  
                              prodh 000FF4                                prodl 000FF3  
                              start 0018                     ??_drawFastHLine 001A  
                       _SW_FLASHING 0051                     ??_drawFastVLine 001A  
                      ___param_bank 000010                        _Act_Mode_Txt 0062  
                  __end_of_INT0_ISR 2674                    __end_of_INT1_ISR 2662  
                  __end_of_INT2_ISR 26BE                         _Do_Flashing 1FDE  
         __end_of_Deactivate_Buzzer 26B6                     drawFastVLine@hi 001E  
                   drawFastVLine@lo 001F                         _SW_EWLT_Txt 0068  
                       _SW_MODE_Txt 006C                               ?_main 0001  
                   __end_of___awdiv 1BB8                     drawCircle@ddF_x 0024  
                             STR_10 FFF7                     drawCircle@ddF_y 0026  
                             STR_11 FFF3                               STR_12 FF98  
                             STR_13 FFFD                               STR_14 FFFB  
                             STR_15 FFFD                               STR_16 FFFB  
                   __end_of___awmod 1EEC                     __end_of___ftdiv 1678  
                             _T0CON 000FD5                     ___awdiv@divisor 0011  
                             _T2CON 000FCA                               _T3CON 000FB1  
                             i2l404 1E30                               i2l382 2672  
                             i2l386 2660                     ___awdiv@counter 0013  
                   drawCircle@color 0020                               _RCSTA 000FAB  
                             _TMR0H 000FD7                               _TMR0L 000FD6  
                             _SPBRG 000FAF                               _TRISA 000F92  
                             _TRISB 000F93                               _TRISC 000F94  
                             _TRISD 000F95                               _TRISE 000F96  
                             _TXREG 000FAD                               _TXSTA 000FAC  
                             _Count 0049                        ?_PED_Control 00AF  
                             _Rcmd1 128A                               _Rcmd3 14A4  
                       _SW_NSLT_Txt 006E                       drawRect@color 0029  
                     ___awtoft@sign 001A                     __end_of_init_IO 253E  
                             _font2 FEBC               fillCircleHelper@ddF_x 002F  
             fillCircleHelper@ddF_y 0031                   ??_Wait_One_Second 0041  
                     ___ftpack@sign 0013               fillCircleHelper@delta 0029  
             fillCircleHelper@color 002B                      __CFG_BOREN$OFF 000000  
                             tablat 000FF5                               status 000FD8  
            ??_update_LCD_PED_Count 0042                    __end_of_Day_Mode 182A  
                    _Wait_N_Seconds 247C                     write_data@data_ 0011  
                   __initialization 20AE                        __end_of_main 1B22  
                      __end_of_font FEBC                    __end_of_Init_ADC 26A2  
                  __end_of_Rcmd2red 2402                          _Night_Mode 19C0  
                            ??_main 0042                       __activetblptr 000002  
             Wait_N_Seconds@seconds 00B0                   __end_of_LCD_Reset 263E  
                      _SW_EWPED_Txt 006A           ??_TFT_GreenTab_Initialize 001B  
                  ?_update_LCD_misc 0001                              ?_Rcmd1 0001  
                            ?_Rcmd3 0001                              _ADCON0 000FC2  
                            _ADCON1 000FC1                              _ADCON2 000FC0  
                            _ADRESH 000FC4                              _ADRESL 000FC3  
                            _CCPR2L 000FBB                PED_Control@direction 00B0  
                  ___awdiv@dividend 000F                    __end_of___awtoft 247C  
                  __end_of___ftpack 19C0                              i2l2681 1E26  
                            i2l2677 1E1C                              _OSCCON 000FD3  
                            _SPBRGH 000FB0                              _SSPBUF 000FC9  
            __end_of_Wait_N_Seconds 24B2                        _SW_NSPED_Txt 0070  
                  __end_of_delay_ms 21BA                              _Set_EW 237C  
                            _Set_NS 22EC                    __end_of_fillRect 22A4  
                  __end_of_drawChar 1152                    __end_of_drawRect 20AE  
                __size_of_Set_EW_LT 0048                  __size_of_OpenUSART 0070  
                            ___ftge 1BB8                  __size_of_Set_NS_LT 0048  
          __size_of_Activate_Buzzer 0012                              ___wmul 2568  
                         ??___awdiv 0013           __size_of_fillCircleHelper 0138  
                  __end_of_drawtext 14A4                           ??___awmod 0013  
                         ??___ftdiv 0021                              _chkisr 0008  
                            _buffer 0088                              clear_0 20B4  
                            clear_1 20C0                    ___awdiv@quotient 0015  
                   ___awmod@divisor 0011          __size_of_Deactivate_Buzzer 0008  
                   ___awmod@counter 0013                        drawtext@size 003E  
                            _strcpy 24B2                              _strlen 2402  
              __end_of_get_full_ADC 25B6                           ??_init_IO 000F  
                      __pdataCOMRAM 005B  __size_of_Wait_One_Second_With_Beep 0086  
                       Set_EW@color 00A9                        __mediumconst FDBC  
                            tblptrh 000FF7                              tblptrl 000FF6  
                            tblptru 000FF8                    __end_of_spiwrite 262C  
                       Set_NS@color 00A9                          __accesstop 0080  
           __end_of__initialization 2106                           ?_INT0_ISR 0001  
                         ?_INT1_ISR 0001                           ?_INT2_ISR 0001  
                        ___ftge@ff1 000F                          ___ftge@ff2 0012  
                   ?_Wait_N_Seconds 0001                       ___rparam_used 000001  
                        ___ftdiv@f1 001B                          ___ftdiv@f2 001E  
                        ___ftdiv@f3 0025                          ___awtoft@c 0017  
                     __end_of_Rcmd1 139A                       __end_of_Rcmd3 1596  
                    __pcstackCOMRAM 0001                        __pidataBANK0 26A2  
                     __end_of_font2 FF98                         ?_Night_Mode 0001  
                    drawPixel@color 0017              __size_of_write_command 0010  
                         ?_Day_Mode 0001          fillCircleHelper@cornername 0027  
                           ??_Rcmd1 001B                             ??_Rcmd3 001B  
                __size_of_drawPixel 0030                   __end_of_Set_EW_LT 237C  
                 __end_of_OpenUSART 1FDE                   __end_of_Set_NS_LT 22EC  
              __size_of_PED_Control 0058                          __pbssBANK0 0080  
                         ?_Init_ADC 0001                           ?_Rcmd2red 0001  
                __size_of_init_UART 0014                          ??_INT0_ISR 0001  
                        ??_INT1_ISR 0001           __size_of_Wait_Half_Second 001A  
                        ??_INT2_ISR 0001                     spiwrite@spidata 0010  
                 ?_update_LCD_color 0041                   ?_update_LCD_count 0041  
                           ?_Set_EW 0001                             ?_Set_NS 0001  
                __CFG_CCP2MX$PORTBE 000000                  ??_update_LCD_color 0042  
                ??_update_LCD_count 0042                             ?___ftge 000F  
                           ?___wmul 000F                             ?_chkisr 0001  
            __size_of_setAddrWindow 004E                             _CCP2CON 000FBA  
                      ?_Do_Flashing 0001           update_LCD_PED_Count@count 0041  
                         ?___awtoft 0017                           ?___ftpack 000F  
                   _Wait_One_Second 1EEC                          _fillCircle 21BA  
                           ?_strcpy 000F                             ?_strlen 000F  
                 ??_Activate_Buzzer 000F                          _fillScreen 25B6  
                        _drawCircle 0CC4                          ??_Day_Mode 0042  
                         ?_delay_ms 0015                           ?_fillRect 0021  
         update_LCD_count@direction 00AE                           ?_drawChar 002C  
                           _SSPCON1 000FC6                           ?_drawRect 0021  
                           _SSPSTAT 000FC7               __end_of_fillRectangle 1754  
                         ?_drawtext 0037                             _SW_EWLT 004F  
                           _SW_MODE 0053                          ??_Init_ADC 000F  
                           _SW_NSLT 0054                          ??_Rcmd2red 0012  
               _SW_FLASHING_REQUEST 0052                 __size_of_Night_Mode 00B8  
                     _write_command 2684                             __Hparam 0000  
                           __Lparam 0000                     __size_of_Set_EW 0048  
                   __size_of_Set_NS 0048               __end_of_drawFastHLine 1CD6  
                 __end_of_drawPixel 2514               __end_of_drawFastVLine 1D5E  
                  _fillCircleHelper 1152                     __size_of___ftge 0096  
                           ___awdiv 1B22                             ___awmod 1E6A  
                           ___ftdiv 1596                     __size_of___wmul 0028  
             __size_of_get_full_ADC 0026                     __size_of_chkisr 1E62  
                         ?_spiwrite 0001                             __pcinit 20AE  
                        ??___awtoft 001A                          ??___ftpack 0014  
                           __ramtop 1000                             __ptext0 1A78  
                           __ptext1 2604                             __ptext2 1F6E  
                           __ptext3 2514                             __ptext4 19C0  
                           __ptext5 001C                             __ptext6 25B6  
                           __ptext7 1678                             __ptext8 2048  
                           __ptext9 1C4E                   __end_of_init_UART 2618  
                         _T0CONbits 000FD5                     __size_of_strcpy 0032  
                   __size_of_strlen 003E                             _init_IO 2514  
                         _T3CONbits 000FB1                    ___awmod@dividend 000F  
                        ??_delay_ms 0017                       drawtext@_text 0038  
                     drawtext@color 003A                          ??_fillRect 0026  
                        ??_drawChar 0033                           _LCD_Reset 262C  
                        ??_drawRect 002B                       _setAddrWindow 220C  
                    __pintcode_body 1DE4                  drawFastHLine@color 0018  
                        delay_ms@ms 0015                end_of_initialization 2106  
                         _INT0_flag 0080                           _INT1_flag 0082  
                         _INT2_flag 0084                          ??_drawtext 003F  
                    ?_write_command 0001                       __Lmediumconst FDBC  
                           int_func 1DE4                           _PED_Count 004E  
                      _get_full_ADC 2590                        PED_Control@i 00B1  
                         _EW_PED_SW 004A       __size_of_update_LCD_PED_Count 00D0  
           __end_of_Wait_One_Second 1F6E                           _RCSTAbits 000FAB  
                           postdec1 000FE5                             postinc0 000FEE  
                           postinc2 000FDE                          ??_spiwrite 000F  
                           strlen@s 000F                     fillCircle@color 003F  
                       ?_fillCircle 0039                           _PORTAbits 000F80  
                  drawtext@cursor_x 00AD                    drawtext@cursor_y 00AC  
                         _PORTBbits 000F81                           _PORTDbits 000F83  
                         _PORTEbits 000F84                         ?_fillScreen 0022  
                         _NS_PED_SW 004D                         ?_drawCircle 001A  
                        drawChar@bg 0030                           _TRISCbits 000F94  
                    ?_setAddrWindow 0012                          ?_LCD_Reset 0001  
                  ??_Wait_N_Seconds 0042                    drawtext@textsize 00A8  
          __size_of_update_LCD_misc 0222                          drawPixel@x 0019  
                        drawPixel@y 0016                    _Wait_Half_Second 25D2  
                       ___ftdiv@exp 0028                           _TXSTAbits 000FAC  
                PED_Control@Num_Sec 00AF                  get_full_ADC@result 0013  
                 __size_of_INT0_ISR 0012                   __size_of_INT1_ISR 0012  
                 __size_of_INT2_ISR 0008                      __end_of_Set_EW 23C4  
                    __end_of_Set_NS 2334                      __end_of___ftge 1C4E  
                    __end_of___wmul 2590                       delay_ms@count 0019  
                        _write_data 2674                       __pidataCOMRAM 25EC  
                    __end_of_chkisr 1E6A                        ??_Night_Mode 0042  
          ?_TFT_GreenTab_Initialize 0001                          drawtext@bg 003C  
              __size_of_Do_Flashing 006A                      __end_of_strcpy 24E4  
                    __end_of_strlen 2440                 start_initialization 20AE  
                 __size_of_Day_Mode 00D6                     ??_write_command 0011  
                         _Set_EW_LT 2334                           _OpenUSART 1F6E  
                         _Set_NS_LT 22A4                 __size_of_fillCircle 0052  
                  __CFG_OSC$INTIO67 000000                   __size_of_Init_ADC 000E  
                __end_of_Night_Mode 1A78                   __size_of_Rcmd2red 003E  
               __size_of_fillScreen 001C                     Wait_N_Seconds@I 00B1  
               __size_of_drawCircle 01AE                            ??_Set_EW 0042  
                          ??_Set_NS 0042                     _Activate_Buzzer 263E  
                  ?_Wait_One_Second 0001                            ??___ftge 0015  
                          ??___wmul 0013                            ??_chkisr 0001  
                       __pdataBANK0 00B4                     setAddrWindow@x0 0015  
                   setAddrWindow@x1 0013                     setAddrWindow@y0 0012  
                   setAddrWindow@y1 0014                            ??_strcpy 0013  
                          ??_strlen 0011                        _PED_EW_Count 00BA  
         __size_of_update_LCD_color 0368           __size_of_update_LCD_count 018A  
                 __size_of___awtoft 003C                   __size_of___ftpack 00C6  
                       __pbssCOMRAM 0042                       ??_PED_Control 0042  
                   ??_setAddrWindow 0015                       __pcstackBANK0 00A7  
                      _PED_NS_Count 00BD                         ??_LCD_Reset 001B  
          __end_of_fillCircleHelper 128A                   __size_of_delay_ms 0052  
        ?_Wait_One_Second_With_Beep 0001                   __size_of_fillRect 004A  
                 __size_of_drawChar 0156                          ?_Set_EW_LT 0001  
                        ?_OpenUSART 000F                   __size_of_drawRect 0066  
                        ?_Set_NS_LT 0001                   __size_of_drawtext 010A  
                 ??_update_LCD_misc 0041                           __pintcode 0008  
   __end_of_TFT_GreenTab_Initialize 2568                       __pmediumconst FDBC  
                          ?___awdiv 000F                            ?___awmod 000F  
                          ?___ftdiv 001B                           __tft_type 0056  
                         _direction 0059                  drawFastVLine@color 0018  
                       ?_write_data 0001                           _drawPixel 24E4  
                 __size_of_spiwrite 0014                            ?_init_IO 0001  
                 _Initialize_Screen 001C                      __size_of_Rcmd1 0110  
                    __size_of_Rcmd3 00F2                           _init_UART 2604  
                ?_Initialize_Screen 0001                            _FLASHING 004B  
 __end_of_Wait_One_Second_With_Beep 1DE4                 __end_of_PED_Control 2168  
           __end_of_Activate_Buzzer 2650                            _INT0_ISR 2662  
                          _INT1_ISR 2650                            _INT2_ISR 26B6  
                    ___wmul@product 0013                 ??_Initialize_Screen 0041  
                          _PIE1bits 000F9D                            _PIR1bits 000F9E  
                          _PIR2bits 000FA1                            _EW_Count 005F  
                         fillRect@h 0023                           fillRect@i 002A  
                         fillRect@w 0022                           fillRect@x 0029  
                         fillRect@y 0021                           drawChar@c 002D  
                         drawChar@i 0036                           drawChar@j 0035  
                      ??_fillCircle 0041                           drawChar@x 0034  
                         drawChar@y 002C                          ?_drawPixel 0016  
            __size_of_fillRectangle 00DC                            _NS_Count 00B7  
                        _ADCON0bits 000FC2            __end_of_Wait_Half_Second 25EC  
                 ___wmul@multiplier 000F           __end_of_Initialize_Screen 073A  
                      ??_fillScreen 0024                           drawRect@h 0027  
                         drawRect@w 0025                           drawRect@x 0021  
                         drawRect@y 0023                       _FlashingR_Txt 0064  
                     _FlashingS_Txt 0066                        ??_drawCircle 0022  
      __end_of_update_LCD_PED_Count 18FA                           main@nStep 00B2  
                          _SW_EWPED 0050               update_LCD_color@color 0041  
                          _Day_Mode 1754                            _SW_NSPED 0055  
         update_LCD_color@direction 00A7                          ?_init_UART 0001  
            __size_of_drawFastHLine 0088                         _INTCON2bits 000FF1  
                       _INTCON3bits 000FF0                           copy_data0 20DA  
                         copy_data1 20FA                           drawtext@i 00AA  
            __size_of_drawFastVLine 0088                           drawtext@x 00A7  
                         drawtext@y 0037                            _Init_ADC 2694  
                 write_command@cmd_ 0011                         ??_Set_EW_LT 0042  
                       ??_OpenUSART 0011                         ??_Set_NS_LT 0042  
                          _Rcmd2red 23C4                 __size_of_write_data 0010  
                   OpenUSART@config 0011                  __end_of_fillCircle 220C  
                          __Hrparam 0000                  __end_of_fillScreen 25D2  
             update_LCD_count@count 0041                            __Lrparam 0000  
                __end_of_drawCircle 0E72                    __size_of___awdiv 0096  
                  __size_of___awmod 0082                    __size_of___ftdiv 00E2  
                          ___awtoft 2440                            ___ftpack 18FA  
                  _update_LCD_color 073A                    _update_LCD_count 0E72  
                  __size_of_init_IO 002A                         _PED_Control 2110  
                          _delay_ms 2168                            __ptext10 253E  
                          __ptext11 14A4                            __ptext20 2110  
                          __ptext12 23C4                            __ptext21 182A  
                          __ptext13 128A                            __ptext30 2590  
                          __ptext22 1E6A                            __ptext14 262C  
                          __ptext31 139A                            __ptext23 1B22  
                          __ptext15 2168                            __ptext40 24B2  
                          __ptext32 2402                            __ptext24 1D5E  
                          __ptext16 2694                            __ptext41 25D2  
                          __ptext33 0FFC                            __ptext25 26AE  
                          __ptext17 1754                            __ptext50 0CC4  
                          __ptext42 22A4                            __ptext34 225A  
                          __ptext26 263E                            __ptext18 247C  
                          __ptext51 24E4                            __ptext43 22EC  
                          __ptext35 2568                            __ptext27 1FDE  
                          __ptext19 0E72                            __ptext52 220C  
                          __ptext44 2334                            __ptext36 1BB8  
                          __ptext28 1EEC                            __ptext53 2674  
                          __ptext45 237C                            __ptext37 1596  
                          __ptext29 0AA2                            __ptext54 2684  
                          __ptext46 073A                            __ptext38 2440  
                          __ptext55 2618                            __ptext47 21BA  
                          __ptext39 18FA                            __ptext48 1152  
                          __ptext57 26B6                            __ptext49 1CD6  
                          __ptext58 2650                            __ptext59 2662  
                          _fillRect 225A                            _drawChar 0FFC  
                          _drawRect 2048    __size_of_TFT_GreenTab_Initialize 002A  
                  _FLASHING_REQUEST 004C                            _colstart 0057  
                          _drawtext 139A                          strcpy@from 0011  
                     _fillRectangle 1678                    ?_Activate_Buzzer 0001  
                     __size_of_main 00AA                     fillRectangle@hi 001F  
                   fillRectangle@lo 0020                       _drawFastHLine 1C4E  
                    Set_EW_LT@color 00A9                       _drawFastVLine 1CD6  
                     ??_Do_Flashing 0042                            _spiwrite 2618  
                       ??_drawPixel 0019                            _rowstart 005A  
                fillCircleHelper@x0 0021                  fillCircleHelper@y0 0023  
        __size_of_Initialize_Screen 071E                          _INTCONbits 000FF2  
                    OpenUSART@spbrg 000F                         ??_init_UART 0012  
                        _EWLT_Count 005C                   ?_fillCircleHelper 0021  
                         spiwrite@x 000F         ??_Wait_One_Second_With_Beep 0041  
                          intlevel2 0000                     _update_LCD_misc 0AA2  
                    ?_fillRectangle 0016                  ??_fillCircleHelper 002D  
             __end_of_write_command 2694                     fillScreen@color 0022  
              update_LCD_misc@nStep 00AE                _update_LCD_PED_Count 182A  
           __size_of_Wait_N_Seconds 0036                        fillCircle@x0 0039  
                      fillCircle@y0 003B                      ?_drawFastHLine 0016  
                    fillRectangle@h 0018                      fillRectangle@w 0017  
                    fillRectangle@x 0021                      fillRectangle@y 0016  
                    ?_drawFastVLine 0016                   fillCircleHelper@f 0033  
                 fillCircleHelper@r 0025                   fillCircleHelper@x 0035  
                 fillCircleHelper@y 0037                        ??_write_data 0011  
                     fillRect@color 0024            __size_of_Wait_One_Second 0082  
                          strcpy@cp 0013                            strlen@cp 0013  
                          strcpy@to 000F                 __end_of_Do_Flashing 2048  
                        _NSLT_Count 00B4                         fillCircle@r 003D  
             __end_of_setAddrWindow 225A                  fillRectangle@color 0019  
                     drawChar@color 002E                  __end_of_write_data 2684  
                      drawChar@line 0033                      Set_NS_LT@color 00A9  
                     ?_get_full_ADC 000F                        drawChar@size 0032  
             ?_update_LCD_PED_Count 0041  
