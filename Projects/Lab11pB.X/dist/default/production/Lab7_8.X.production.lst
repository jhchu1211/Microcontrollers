

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Wed Oct 13 22:46:33 2021

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	text32,global,reloc=2,class=CODE,delta=1
    45                           	psect	text33,global,reloc=2,class=CODE,delta=1
    46                           	psect	text34,global,reloc=2,class=CODE,delta=1
    47                           	psect	text35,global,reloc=2,class=CODE,delta=1
    48                           	psect	text36,global,reloc=2,class=CODE,delta=1
    49                           	psect	text37,global,reloc=2,class=CODE,delta=1
    50                           	psect	text38,global,reloc=2,class=CODE,delta=1
    51                           	psect	text39,global,reloc=2,class=CODE,delta=1
    52                           	psect	text40,global,reloc=2,class=CODE,delta=1
    53                           	psect	text41,global,reloc=2,class=CODE,delta=1
    54                           	psect	text42,global,reloc=2,class=CODE,delta=1
    55                           	psect	text43,global,reloc=2,class=CODE,delta=1
    56                           	psect	text44,global,reloc=2,class=CODE,delta=1
    57                           	psect	text45,global,reloc=2,class=CODE,delta=1
    58                           	psect	text46,global,reloc=2,class=CODE,delta=1
    59                           	psect	text47,global,reloc=2,class=CODE,delta=1
    60                           	psect	text48,global,reloc=2,class=CODE,delta=1
    61                           	psect	text49,global,reloc=2,class=CODE,delta=1
    62                           	psect	text50,global,reloc=2,class=CODE,delta=1
    63                           	psect	text51,global,reloc=2,class=CODE,delta=1
    64                           	psect	text52,global,reloc=2,class=CODE,delta=1
    65                           	psect	text53,global,reloc=2,class=CODE,delta=1
    66                           	psect	text54,global,reloc=2,class=CODE,delta=1
    67                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    68                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    69  0000                     
    70                           	psect	idataCOMRAM
    71  00DAC9                     __pidataCOMRAM:
    72                           	opt stack 0
    73                           
    74                           ;initializer for _wrap
    75  00DAC9  01                 	db	1
    76                           
    77                           ;initializer for _EWLT_Count
    78  00DACA  30                 	db	48
    79  00DACB  30                 	db	48
    80  00DACC  00                 	db	0
    81                           
    82                           ;initializer for _EW_Count
    83  00DACD  30                 	db	48
    84  00DACE  30                 	db	48
    85  00DACF  00                 	db	0
    86                           
    87                           ;initializer for _NSLT_Count
    88  00DAD0  30                 	db	48
    89  00DAD1  30                 	db	48
    90  00DAD2  00                 	db	0
    91                           
    92                           ;initializer for _NS_Count
    93  00DAD3  30                 	db	48
    94  00DAD4  30                 	db	48
    95  00DAD5  00                 	db	0
    96                           
    97                           ;initializer for _PED_EW_Count
    98  00DAD6  30                 	db	48
    99  00DAD7  30                 	db	48
   100  00DAD8  00                 	db	0
   101                           
   102                           ;initializer for _PED_NS_Count
   103  00DAD9  30                 	db	48
   104  00DADA  30                 	db	48
   105  00DADB  00                 	db	0
   106                           
   107                           ;initializer for _Act_Mode_Txt
   108  00DADC  44                 	db	68
   109  00DADD  00                 	db	0
   110                           
   111                           ;initializer for _FlashingR_Txt
   112  00DADE  30                 	db	48
   113  00DADF  00                 	db	0
   114                           
   115                           ;initializer for _FlashingS_Txt
   116  00DAE0  30                 	db	48
   117  00DAE1  00                 	db	0
   118                           
   119                           ;initializer for _SW_EWLT_Txt
   120  00DAE2  30                 	db	48
   121  00DAE3  00                 	db	0
   122                           
   123                           ;initializer for _SW_EWPED_Txt
   124  00DAE4  30                 	db	48
   125  00DAE5  00                 	db	0
   126                           
   127                           ;initializer for _SW_MODE_Txt
   128  00DAE6  44                 	db	68
   129  00DAE7  00                 	db	0
   130                           
   131                           ;initializer for _SW_NSLT_Txt
   132  00DAE8  30                 	db	48
   133  00DAE9  00                 	db	0
   134                           
   135                           ;initializer for _SW_NSPED_Txt
   136  00DAEA  30                 	db	48
   137  00DAEB  00                 	db	0
   138                           
   139                           	psect	mediumconst
   140  00FDBC                     __pmediumconst:
   141                           	opt stack 0
   142  00FDBC  00                 	db	0
   143  00FDBD                     _font:
   144                           	opt stack 0
   145  00FDBD  00                 	db	0
   146  00FDBE  00                 	db	0
   147  00FDBF  00                 	db	0
   148  00FDC0  00                 	db	0
   149  00FDC1  00                 	db	0
   150  00FDC2  00                 	db	0
   151  00FDC3  00                 	db	0
   152  00FDC4  5F                 	db	95
   153  00FDC5  00                 	db	0
   154  00FDC6  00                 	db	0
   155  00FDC7  00                 	db	0
   156  00FDC8  07                 	db	7
   157  00FDC9  00                 	db	0
   158  00FDCA  07                 	db	7
   159  00FDCB  00                 	db	0
   160  00FDCC  14                 	db	20
   161  00FDCD  7F                 	db	127
   162  00FDCE  14                 	db	20
   163  00FDCF  7F                 	db	127
   164  00FDD0  14                 	db	20
   165  00FDD1  24                 	db	36
   166  00FDD2  2A                 	db	42
   167  00FDD3  7F                 	db	127
   168  00FDD4  2A                 	db	42
   169  00FDD5  12                 	db	18
   170  00FDD6  23                 	db	35
   171  00FDD7  13                 	db	19
   172  00FDD8  08                 	db	8
   173  00FDD9  64                 	db	100
   174  00FDDA  62                 	db	98
   175  00FDDB  36                 	db	54
   176  00FDDC  49                 	db	73
   177  00FDDD  56                 	db	86
   178  00FDDE  20                 	db	32
   179  00FDDF  50                 	db	80
   180  00FDE0  00                 	db	0
   181  00FDE1  08                 	db	8
   182  00FDE2  07                 	db	7
   183  00FDE3  03                 	db	3
   184  00FDE4  00                 	db	0
   185  00FDE5  00                 	db	0
   186  00FDE6  1C                 	db	28
   187  00FDE7  22                 	db	34
   188  00FDE8  41                 	db	65
   189  00FDE9  00                 	db	0
   190  00FDEA  00                 	db	0
   191  00FDEB  41                 	db	65
   192  00FDEC  22                 	db	34
   193  00FDED  1C                 	db	28
   194  00FDEE  00                 	db	0
   195  00FDEF  2A                 	db	42
   196  00FDF0  1C                 	db	28
   197  00FDF1  7F                 	db	127
   198  00FDF2  1C                 	db	28
   199  00FDF3  2A                 	db	42
   200  00FDF4  08                 	db	8
   201  00FDF5  08                 	db	8
   202  00FDF6  3E                 	db	62
   203  00FDF7  08                 	db	8
   204  00FDF8  08                 	db	8
   205  00FDF9  00                 	db	0
   206  00FDFA  80                 	db	128
   207  00FDFB  70                 	db	112
   208  00FDFC  30                 	db	48
   209  00FDFD  00                 	db	0
   210  00FDFE  08                 	db	8
   211  00FDFF  08                 	db	8
   212  00FE00  08                 	db	8
   213  00FE01  08                 	db	8
   214  00FE02  08                 	db	8
   215  00FE03  00                 	db	0
   216  00FE04  00                 	db	0
   217  00FE05  60                 	db	96
   218  00FE06  60                 	db	96
   219  00FE07  00                 	db	0
   220  00FE08  20                 	db	32
   221  00FE09  10                 	db	16
   222  00FE0A  08                 	db	8
   223  00FE0B  04                 	db	4
   224  00FE0C  02                 	db	2
   225  00FE0D  3E                 	db	62
   226  00FE0E  51                 	db	81
   227  00FE0F  49                 	db	73
   228  00FE10  45                 	db	69
   229  00FE11  3E                 	db	62
   230  00FE12  00                 	db	0
   231  00FE13  42                 	db	66
   232  00FE14  7F                 	db	127
   233  00FE15  40                 	db	64
   234  00FE16  00                 	db	0
   235  00FE17  72                 	db	114
   236  00FE18  49                 	db	73
   237  00FE19  49                 	db	73
   238  00FE1A  49                 	db	73
   239  00FE1B  46                 	db	70
   240  00FE1C  21                 	db	33
   241  00FE1D  41                 	db	65
   242  00FE1E  49                 	db	73
   243  00FE1F  4D                 	db	77
   244  00FE20  33                 	db	51
   245  00FE21  18                 	db	24
   246  00FE22  14                 	db	20
   247  00FE23  12                 	db	18
   248  00FE24  7F                 	db	127
   249  00FE25  10                 	db	16
   250  00FE26  27                 	db	39
   251  00FE27  45                 	db	69
   252  00FE28  45                 	db	69
   253  00FE29  45                 	db	69
   254  00FE2A  39                 	db	57
   255  00FE2B  3C                 	db	60
   256  00FE2C  4A                 	db	74
   257  00FE2D  49                 	db	73
   258  00FE2E  49                 	db	73
   259  00FE2F  31                 	db	49
   260  00FE30  41                 	db	65
   261  00FE31  21                 	db	33
   262  00FE32  11                 	db	17
   263  00FE33  09                 	db	9
   264  00FE34  07                 	db	7
   265  00FE35  36                 	db	54
   266  00FE36  49                 	db	73
   267  00FE37  49                 	db	73
   268  00FE38  49                 	db	73
   269  00FE39  36                 	db	54
   270  00FE3A  46                 	db	70
   271  00FE3B  49                 	db	73
   272  00FE3C  49                 	db	73
   273  00FE3D  29                 	db	41
   274  00FE3E  1E                 	db	30
   275  00FE3F  00                 	db	0
   276  00FE40  00                 	db	0
   277  00FE41  14                 	db	20
   278  00FE42  00                 	db	0
   279  00FE43  00                 	db	0
   280  00FE44  00                 	db	0
   281  00FE45  40                 	db	64
   282  00FE46  34                 	db	52
   283  00FE47  00                 	db	0
   284  00FE48  00                 	db	0
   285  00FE49  00                 	db	0
   286  00FE4A  08                 	db	8
   287  00FE4B  14                 	db	20
   288  00FE4C  22                 	db	34
   289  00FE4D  41                 	db	65
   290  00FE4E  14                 	db	20
   291  00FE4F  14                 	db	20
   292  00FE50  14                 	db	20
   293  00FE51  14                 	db	20
   294  00FE52  14                 	db	20
   295  00FE53  00                 	db	0
   296  00FE54  41                 	db	65
   297  00FE55  22                 	db	34
   298  00FE56  14                 	db	20
   299  00FE57  08                 	db	8
   300  00FE58  02                 	db	2
   301  00FE59  01                 	db	1
   302  00FE5A  59                 	db	89
   303  00FE5B  09                 	db	9
   304  00FE5C  06                 	db	6
   305  00FE5D  3E                 	db	62
   306  00FE5E  41                 	db	65
   307  00FE5F  5D                 	db	93
   308  00FE60  59                 	db	89
   309  00FE61  4E                 	db	78
   310  00FE62  7C                 	db	124
   311  00FE63  12                 	db	18
   312  00FE64  11                 	db	17
   313  00FE65  12                 	db	18
   314  00FE66  7C                 	db	124
   315  00FE67  7F                 	db	127
   316  00FE68  49                 	db	73
   317  00FE69  49                 	db	73
   318  00FE6A  49                 	db	73
   319  00FE6B  36                 	db	54
   320  00FE6C  3E                 	db	62
   321  00FE6D  41                 	db	65
   322  00FE6E  41                 	db	65
   323  00FE6F  41                 	db	65
   324  00FE70  22                 	db	34
   325  00FE71  7F                 	db	127
   326  00FE72  41                 	db	65
   327  00FE73  41                 	db	65
   328  00FE74  41                 	db	65
   329  00FE75  3E                 	db	62
   330  00FE76  7F                 	db	127
   331  00FE77  49                 	db	73
   332  00FE78  49                 	db	73
   333  00FE79  49                 	db	73
   334  00FE7A  41                 	db	65
   335  00FE7B  7F                 	db	127
   336  00FE7C  09                 	db	9
   337  00FE7D  09                 	db	9
   338  00FE7E  09                 	db	9
   339  00FE7F  01                 	db	1
   340  00FE80  3E                 	db	62
   341  00FE81  41                 	db	65
   342  00FE82  41                 	db	65
   343  00FE83  51                 	db	81
   344  00FE84  73                 	db	115
   345  00FE85  7F                 	db	127
   346  00FE86  08                 	db	8
   347  00FE87  08                 	db	8
   348  00FE88  08                 	db	8
   349  00FE89  7F                 	db	127
   350  00FE8A  00                 	db	0
   351  00FE8B  41                 	db	65
   352  00FE8C  7F                 	db	127
   353  00FE8D  41                 	db	65
   354  00FE8E  00                 	db	0
   355  00FE8F  20                 	db	32
   356  00FE90  40                 	db	64
   357  00FE91  41                 	db	65
   358  00FE92  3F                 	db	63
   359  00FE93  01                 	db	1
   360  00FE94  7F                 	db	127
   361  00FE95  08                 	db	8
   362  00FE96  14                 	db	20
   363  00FE97  22                 	db	34
   364  00FE98  41                 	db	65
   365  00FE99  7F                 	db	127
   366  00FE9A  40                 	db	64
   367  00FE9B  40                 	db	64
   368  00FE9C  40                 	db	64
   369  00FE9D  40                 	db	64
   370  00FE9E  7F                 	db	127
   371  00FE9F  02                 	db	2
   372  00FEA0  1C                 	db	28
   373  00FEA1  02                 	db	2
   374  00FEA2  7F                 	db	127
   375  00FEA3  7F                 	db	127
   376  00FEA4  04                 	db	4
   377  00FEA5  08                 	db	8
   378  00FEA6  10                 	db	16
   379  00FEA7  7F                 	db	127
   380  00FEA8  3E                 	db	62
   381  00FEA9  41                 	db	65
   382  00FEAA  41                 	db	65
   383  00FEAB  41                 	db	65
   384  00FEAC  3E                 	db	62
   385  00FEAD  7F                 	db	127
   386  00FEAE  09                 	db	9
   387  00FEAF  09                 	db	9
   388  00FEB0  09                 	db	9
   389  00FEB1  06                 	db	6
   390  00FEB2  3E                 	db	62
   391  00FEB3  41                 	db	65
   392  00FEB4  51                 	db	81
   393  00FEB5  21                 	db	33
   394  00FEB6  5E                 	db	94
   395  00FEB7  7F                 	db	127
   396  00FEB8  09                 	db	9
   397  00FEB9  19                 	db	25
   398  00FEBA  29                 	db	41
   399  00FEBB  46                 	db	70
   400  00FEBC                     __end_of_font:
   401                           	opt stack 0
   402  00FEBC                     _font2:
   403                           	opt stack 0
   404  00FEBC  26                 	db	38
   405  00FEBD  49                 	db	73
   406  00FEBE  49                 	db	73
   407  00FEBF  49                 	db	73
   408  00FEC0  32                 	db	50
   409  00FEC1  03                 	db	3
   410  00FEC2  01                 	db	1
   411  00FEC3  7F                 	db	127
   412  00FEC4  01                 	db	1
   413  00FEC5  03                 	db	3
   414  00FEC6  3F                 	db	63
   415  00FEC7  40                 	db	64
   416  00FEC8  40                 	db	64
   417  00FEC9  40                 	db	64
   418  00FECA  3F                 	db	63
   419  00FECB  1F                 	db	31
   420  00FECC  20                 	db	32
   421  00FECD  40                 	db	64
   422  00FECE  20                 	db	32
   423  00FECF  1F                 	db	31
   424  00FED0  3F                 	db	63
   425  00FED1  40                 	db	64
   426  00FED2  38                 	db	56
   427  00FED3  40                 	db	64
   428  00FED4  3F                 	db	63
   429  00FED5  63                 	db	99
   430  00FED6  14                 	db	20
   431  00FED7  08                 	db	8
   432  00FED8  14                 	db	20
   433  00FED9  63                 	db	99
   434  00FEDA  03                 	db	3
   435  00FEDB  04                 	db	4
   436  00FEDC  78                 	db	120
   437  00FEDD  04                 	db	4
   438  00FEDE  03                 	db	3
   439  00FEDF  61                 	db	97
   440  00FEE0  59                 	db	89
   441  00FEE1  49                 	db	73
   442  00FEE2  4D                 	db	77
   443  00FEE3  43                 	db	67
   444  00FEE4  00                 	db	0
   445  00FEE5  7F                 	db	127
   446  00FEE6  41                 	db	65
   447  00FEE7  41                 	db	65
   448  00FEE8  41                 	db	65
   449  00FEE9  02                 	db	2
   450  00FEEA  04                 	db	4
   451  00FEEB  08                 	db	8
   452  00FEEC  10                 	db	16
   453  00FEED  20                 	db	32
   454  00FEEE  00                 	db	0
   455  00FEEF  41                 	db	65
   456  00FEF0  41                 	db	65
   457  00FEF1  41                 	db	65
   458  00FEF2  7F                 	db	127
   459  00FEF3  04                 	db	4
   460  00FEF4  02                 	db	2
   461  00FEF5  01                 	db	1
   462  00FEF6  02                 	db	2
   463  00FEF7  04                 	db	4
   464  00FEF8  40                 	db	64
   465  00FEF9  40                 	db	64
   466  00FEFA  40                 	db	64
   467  00FEFB  40                 	db	64
   468  00FEFC  40                 	db	64
   469  00FEFD  00                 	db	0
   470  00FEFE  03                 	db	3
   471  00FEFF  07                 	db	7
   472  00FF00  08                 	db	8
   473  00FF01  00                 	db	0
   474  00FF02  20                 	db	32
   475  00FF03  54                 	db	84
   476  00FF04  54                 	db	84
   477  00FF05  78                 	db	120
   478  00FF06  40                 	db	64
   479  00FF07  7F                 	db	127
   480  00FF08  28                 	db	40
   481  00FF09  44                 	db	68
   482  00FF0A  44                 	db	68
   483  00FF0B  38                 	db	56
   484  00FF0C  38                 	db	56
   485  00FF0D  44                 	db	68
   486  00FF0E  44                 	db	68
   487  00FF0F  44                 	db	68
   488  00FF10  28                 	db	40
   489  00FF11  38                 	db	56
   490  00FF12  44                 	db	68
   491  00FF13  44                 	db	68
   492  00FF14  28                 	db	40
   493  00FF15  7F                 	db	127
   494  00FF16  38                 	db	56
   495  00FF17  54                 	db	84
   496  00FF18  54                 	db	84
   497  00FF19  54                 	db	84
   498  00FF1A  18                 	db	24
   499  00FF1B  00                 	db	0
   500  00FF1C  08                 	db	8
   501  00FF1D  7E                 	db	126
   502  00FF1E  09                 	db	9
   503  00FF1F  02                 	db	2
   504  00FF20  18                 	db	24
   505  00FF21  A4                 	db	164
   506  00FF22  A4                 	db	164
   507  00FF23  9C                 	db	156
   508  00FF24  78                 	db	120
   509  00FF25  7F                 	db	127
   510  00FF26  08                 	db	8
   511  00FF27  04                 	db	4
   512  00FF28  04                 	db	4
   513  00FF29  78                 	db	120
   514  00FF2A  00                 	db	0
   515  00FF2B  44                 	db	68
   516  00FF2C  7D                 	db	125
   517  00FF2D  40                 	db	64
   518  00FF2E  00                 	db	0
   519  00FF2F  20                 	db	32
   520  00FF30  40                 	db	64
   521  00FF31  40                 	db	64
   522  00FF32  3D                 	db	61
   523  00FF33  00                 	db	0
   524  00FF34  7F                 	db	127
   525  00FF35  10                 	db	16
   526  00FF36  28                 	db	40
   527  00FF37  44                 	db	68
   528  00FF38  00                 	db	0
   529  00FF39  00                 	db	0
   530  00FF3A  41                 	db	65
   531  00FF3B  7F                 	db	127
   532  00FF3C  40                 	db	64
   533  00FF3D  00                 	db	0
   534  00FF3E  7C                 	db	124
   535  00FF3F  04                 	db	4
   536  00FF40  78                 	db	120
   537  00FF41  04                 	db	4
   538  00FF42  78                 	db	120
   539  00FF43  7C                 	db	124
   540  00FF44  08                 	db	8
   541  00FF45  04                 	db	4
   542  00FF46  04                 	db	4
   543  00FF47  78                 	db	120
   544  00FF48  38                 	db	56
   545  00FF49  44                 	db	68
   546  00FF4A  44                 	db	68
   547  00FF4B  44                 	db	68
   548  00FF4C  38                 	db	56
   549  00FF4D  FC                 	db	252
   550  00FF4E  18                 	db	24
   551  00FF4F  24                 	db	36
   552  00FF50  24                 	db	36
   553  00FF51  18                 	db	24
   554  00FF52  18                 	db	24
   555  00FF53  24                 	db	36
   556  00FF54  24                 	db	36
   557  00FF55  18                 	db	24
   558  00FF56  FC                 	db	252
   559  00FF57  7C                 	db	124
   560  00FF58  08                 	db	8
   561  00FF59  04                 	db	4
   562  00FF5A  04                 	db	4
   563  00FF5B  08                 	db	8
   564  00FF5C  48                 	db	72
   565  00FF5D  54                 	db	84
   566  00FF5E  54                 	db	84
   567  00FF5F  54                 	db	84
   568  00FF60  24                 	db	36
   569  00FF61  04                 	db	4
   570  00FF62  04                 	db	4
   571  00FF63  3F                 	db	63
   572  00FF64  44                 	db	68
   573  00FF65  24                 	db	36
   574  00FF66  3C                 	db	60
   575  00FF67  40                 	db	64
   576  00FF68  40                 	db	64
   577  00FF69  20                 	db	32
   578  00FF6A  7C                 	db	124
   579  00FF6B  1C                 	db	28
   580  00FF6C  20                 	db	32
   581  00FF6D  40                 	db	64
   582  00FF6E  20                 	db	32
   583  00FF6F  1C                 	db	28
   584  00FF70  3C                 	db	60
   585  00FF71  40                 	db	64
   586  00FF72  30                 	db	48
   587  00FF73  40                 	db	64
   588  00FF74  3C                 	db	60
   589  00FF75  44                 	db	68
   590  00FF76  28                 	db	40
   591  00FF77  10                 	db	16
   592  00FF78  28                 	db	40
   593  00FF79  44                 	db	68
   594  00FF7A  4C                 	db	76
   595  00FF7B  90                 	db	144
   596  00FF7C  90                 	db	144
   597  00FF7D  90                 	db	144
   598  00FF7E  7C                 	db	124
   599  00FF7F  44                 	db	68
   600  00FF80  64                 	db	100
   601  00FF81  54                 	db	84
   602  00FF82  4C                 	db	76
   603  00FF83  44                 	db	68
   604  00FF84  00                 	db	0
   605  00FF85  08                 	db	8
   606  00FF86  36                 	db	54
   607  00FF87  41                 	db	65
   608  00FF88  00                 	db	0
   609  00FF89  00                 	db	0
   610  00FF8A  00                 	db	0
   611  00FF8B  77                 	db	119
   612  00FF8C  00                 	db	0
   613  00FF8D  00                 	db	0
   614  00FF8E  00                 	db	0
   615  00FF8F  41                 	db	65
   616  00FF90  36                 	db	54
   617  00FF91  08                 	db	8
   618  00FF92  00                 	db	0
   619  00FF93  02                 	db	2
   620  00FF94  01                 	db	1
   621  00FF95  02                 	db	2
   622  00FF96  04                 	db	4
   623  00FF97  02                 	db	2
   624  00FF98                     __end_of_font2:
   625                           	opt stack 0
   626  0000                     _ADCON0	set	4034
   627  0000                     _ADCON0bits	set	4034
   628  0000                     _ADCON1	set	4033
   629  0000                     _ADCON2	set	4032
   630  0000                     _ADRESH	set	4036
   631  0000                     _ADRESL	set	4035
   632  0000                     _CCP2CON	set	4026
   633  0000                     _CCPR2L	set	4027
   634  0000                     _INTCONbits	set	4082
   635  0000                     _OSCCON	set	4051
   636  0000                     _PIE1bits	set	3997
   637  0000                     _PIR1bits	set	3998
   638  0000                     _PIR2bits	set	4001
   639  0000                     _PORTAbits	set	3968
   640  0000                     _PORTBbits	set	3969
   641  0000                     _PORTDbits	set	3971
   642  0000                     _PORTEbits	set	3972
   643  0000                     _PR2	set	4043
   644  0000                     _RCSTA	set	4011
   645  0000                     _RCSTAbits	set	4011
   646  0000                     _SPBRG	set	4015
   647  0000                     _SPBRGH	set	4016
   648  0000                     _SSPBUF	set	4041
   649  0000                     _SSPCON1	set	4038
   650  0000                     _SSPSTAT	set	4039
   651  0000                     _SSPSTATbits	set	4039
   652  0000                     _T0CON	set	4053
   653  0000                     _T0CONbits	set	4053
   654  0000                     _T2CON	set	4042
   655  0000                     _T3CON	set	4017
   656  0000                     _T3CONbits	set	4017
   657  0000                     _TMR0H	set	4055
   658  0000                     _TMR0L	set	4054
   659  0000                     _TRISA	set	3986
   660  0000                     _TRISB	set	3987
   661  0000                     _TRISC	set	3988
   662  0000                     _TRISCbits	set	3988
   663  0000                     _TRISD	set	3989
   664  0000                     _TRISE	set	3990
   665  0000                     _TXREG	set	4013
   666  0000                     _TXSTA	set	4012
   667  0000                     _TXSTAbits	set	4012
   668  0000                     _RBPU	set	32655
   669  0000                     _TRMT	set	32097
   670  00FF98                     STR_12:
   671  00FF98  45                 	db	69	;'E'
   672  00FF99  57                 	db	87	;'W'
   673  00FF9A  50                 	db	80	;'P'
   674  00FF9B  20                 	db	32
   675  00FF9C  45                 	db	69	;'E'
   676  00FF9D  57                 	db	87	;'W'
   677  00FF9E  4C                 	db	76	;'L'
   678  00FF9F  54                 	db	84	;'T'
   679  00FFA0  20                 	db	32
   680  00FFA1  4E                 	db	78	;'N'
   681  00FFA2  53                 	db	83	;'S'
   682  00FFA3  50                 	db	80	;'P'
   683  00FFA4  20                 	db	32
   684  00FFA5  4E                 	db	78	;'N'
   685  00FFA6  53                 	db	83	;'S'
   686  00FFA7  4C                 	db	76	;'L'
   687  00FFA8  54                 	db	84	;'T'
   688  00FFA9  20                 	db	32
   689  00FFAA  4D                 	db	77	;'M'
   690  00FFAB  52                 	db	82	;'R'
   691  00FFAC  00                 	db	0
   692  00FFAD                     STR_1:
   693  00FFAD  45                 	db	69	;'E'
   694  00FFAE  43                 	db	67	;'C'
   695  00FFAF  45                 	db	69	;'E'
   696  00FFB0  33                 	db	51	;'3'
   697  00FFB1  33                 	db	51	;'3'
   698  00FFB2  30                 	db	48	;'0'
   699  00FFB3  31                 	db	49	;'1'
   700  00FFB4  4C                 	db	76	;'L'
   701  00FFB5  20                 	db	32
   702  00FFB6  46                 	db	70	;'F'
   703  00FFB7  61                 	db	97	;'a'
   704  00FFB8  6C                 	db	108	;'l'
   705  00FFB9  6C                 	db	108	;'l'
   706  00FFBA  20                 	db	32
   707  00FFBB  32                 	db	50	;'2'
   708  00FFBC  31                 	db	49	;'1'
   709  00FFBD  2D                 	db	45
   710  00FFBE  53                 	db	83	;'S'
   711  00FFBF  34                 	db	52	;'4'
   712  00FFC0  00                 	db	0
   713  00FFC1                     STR_8:
   714  00FFC1  4E                 	db	78	;'N'
   715  00FFC2  4F                 	db	79	;'O'
   716  00FFC3  52                 	db	82	;'R'
   717  00FFC4  54                 	db	84	;'T'
   718  00FFC5  48                 	db	72	;'H'
   719  00FFC6  2F                 	db	47
   720  00FFC7  53                 	db	83	;'S'
   721  00FFC8  4F                 	db	79	;'O'
   722  00FFC9  55                 	db	85	;'U'
   723  00FFCA  54                 	db	84	;'T'
   724  00FFCB  48                 	db	72	;'H'
   725  00FFCC  00                 	db	0
   726  00FFCD                     STR_6:
   727  00FFCD  45                 	db	69	;'E'
   728  00FFCE  41                 	db	65	;'A'
   729  00FFCF  53                 	db	83	;'S'
   730  00FFD0  54                 	db	84	;'T'
   731  00FFD1  2F                 	db	47
   732  00FFD2  57                 	db	87	;'W'
   733  00FFD3  45                 	db	69	;'E'
   734  00FFD4  53                 	db	83	;'S'
   735  00FFD5  54                 	db	84	;'T'
   736  00FFD6  00                 	db	0
   737  00FFD7                     STR_9:
   738  00FFD7  4E                 	db	78	;'N'
   739  00FFD8  2F                 	db	47
   740  00FFD9  53                 	db	83	;'S'
   741  00FFDA  20                 	db	32
   742  00FFDB  4C                 	db	76	;'L'
   743  00FFDC  54                 	db	84	;'T'
   744  00FFDD  00                 	db	0
   745  00FFDE                     STR_7:
   746  00FFDE  45                 	db	69	;'E'
   747  00FFDF  2F                 	db	47
   748  00FFE0  57                 	db	87	;'W'
   749  00FFE1  20                 	db	32
   750  00FFE2  4C                 	db	76	;'L'
   751  00FFE3  54                 	db	84	;'T'
   752  00FFE4  00                 	db	0
   753  00FFE5                     STR_2:
   754  00FFE5  4D                 	db	77	;'M'
   755  00FFE6  6F                 	db	111	;'o'
   756  00FFE7  64                 	db	100	;'d'
   757  00FFE8  65                 	db	101	;'e'
   758  00FFE9  3A                 	db	58	;':'
   759  00FFEA  00                 	db	0
   760  00FFEB                     STR_3:
   761  00FFEB  46                 	db	70	;'F'
   762  00FFEC  52                 	db	82	;'R'
   763  00FFED  3A                 	db	58	;':'
   764  00FFEE  00                 	db	0
   765  00FFEF                     STR_4:
   766  00FFEF  46                 	db	70	;'F'
   767  00FFF0  53                 	db	83	;'S'
   768  00FFF1  3A                 	db	58	;':'
   769  00FFF2  00                 	db	0
   770  00FFF3                     STR_11:
   771  00FFF3  50                 	db	80	;'P'
   772  00FFF4  4E                 	db	78	;'N'
   773  00FFF5  53                 	db	83	;'S'
   774  00FFF6  00                 	db	0
   775  00FFF7                     STR_10:
   776  00FFF7  50                 	db	80	;'P'
   777  00FFF8  45                 	db	69	;'E'
   778  00FFF9  57                 	db	87	;'W'
   779  00FFFA  00                 	db	0
   780  00FFFB                     STR_14:
   781  00FFFB  20                 	db	32
   782  00FFFC  00                 	db	0
   783  00FFFD                     STR_5:
   784  00FFFD  2A                 	db	42
   785  00FFFE  00                 	db	0
   786  0000                     
   787                           ; #config settings
   788  00FFFF  00                 	db	0	; dummy byte at the end
   789  0000                     
   790                           	psect	cinit
   791  00DCDE                     __pcinit:
   792                           	opt stack 0
   793  00DCDE                     start_initialization:
   794                           	opt stack 0
   795  00DCDE                     __initialization:
   796                           	opt stack 0
   797                           
   798                           ; Clear objects allocated to BANK0 (31 bytes)
   799  00DCDE  EE00  F080         	lfsr	0,__pbssBANK0
   800  00DCE2  0E1F               	movlw	31
   801  00DCE4                     clear_0:
   802  00DCE4  6AEE               	clrf	postinc0,c
   803  00DCE6  06E8               	decf	wreg,f,c
   804  00DCE8  E1FD               	bnz	clear_0
   805                           
   806                           ; Clear objects allocated to COMRAM (23 bytes)
   807  00DCEA  EE00  F064         	lfsr	0,__pbssCOMRAM
   808  00DCEE  0E17               	movlw	23
   809  00DCF0                     clear_1:
   810  00DCF0  6AEE               	clrf	postinc0,c
   811  00DCF2  06E8               	decf	wreg,f,c
   812  00DCF4  E1FD               	bnz	clear_1
   813                           
   814                           ; Initialize objects allocated to COMRAM (35 bytes)
   815                           ; load TBLPTR registers with __pidataCOMRAM
   816  00DCF6  0EC9               	movlw	low __pidataCOMRAM
   817  00DCF8  6EF6               	movwf	tblptrl,c
   818  00DCFA  0EDA               	movlw	high __pidataCOMRAM
   819  00DCFC  6EF7               	movwf	tblptrh,c
   820  00DCFE  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   821  00DD00  6EF8               	movwf	tblptru,c
   822  00DD02  EE00  F041         	lfsr	0,__pdataCOMRAM
   823  00DD06  EE10 F023          	lfsr	1,35
   824  00DD0A                     copy_data0:
   825  00DD0A  0009               	tblrd		*+
   826  00DD0C  CFF5 FFEE          	movff	tablat,postinc0
   827  00DD10  50E5               	movf	postdec1,w,c
   828  00DD12  50E1               	movf	fsr1l,w,c
   829  00DD14  E1FA               	bnz	copy_data0
   830  00DD16                     end_of_initialization:
   831                           	opt stack 0
   832  00DD16                     __end_of__initialization:
   833                           	opt stack 0
   834  00DD16  0E00               	movlw	low (__Lmediumconst shr (0+16))
   835  00DD18  6EF8               	movwf	tblptru,c
   836  00DD1A  0100               	movlb	0
   837  00DD1C  EF16  F072         	goto	_main	;jump to C main() function
   838                           tblptru	equ	0xFF8
   839                           tblptrh	equ	0xFF7
   840                           tblptrl	equ	0xFF6
   841                           tablat	equ	0xFF5
   842                           postinc0	equ	0xFEE
   843                           wreg	equ	0xFE8
   844                           postdec1	equ	0xFE5
   845                           fsr1l	equ	0xFE1
   846                           
   847                           	psect	bssCOMRAM
   848  000064                     __pbssCOMRAM:
   849                           	opt stack 0
   850  000064                     _volt:
   851                           	opt stack 0
   852  000064                     	ds	3
   853  000067                     _MODE:
   854                           	opt stack 0
   855  000067                     	ds	2
   856  000069                     _nbr:
   857                           	opt stack 0
   858  000069                     	ds	2
   859  00006B                     _txt:
   860                           	opt stack 0
   861  00006B                     	ds	2
   862  00006D                     _Count:
   863                           	opt stack 0
   864  00006D                     	ds	1
   865  00006E                     _FLASHING:
   866                           	opt stack 0
   867  00006E                     	ds	1
   868  00006F                     _FLASHING_REQUEST:
   869                           	opt stack 0
   870  00006F                     	ds	1
   871  000070                     _PED_Count:
   872                           	opt stack 0
   873  000070                     	ds	1
   874  000071                     _SW_EWLT:
   875                           	opt stack 0
   876  000071                     	ds	1
   877  000072                     _SW_EWPED:
   878                           	opt stack 0
   879  000072                     	ds	1
   880  000073                     _SW_MODE:
   881                           	opt stack 0
   882  000073                     	ds	1
   883  000074                     _SW_NSLT:
   884                           	opt stack 0
   885  000074                     	ds	1
   886  000075                     _SW_NSPED:
   887                           	opt stack 0
   888  000075                     	ds	1
   889  000076                     __tft_type:
   890                           	opt stack 0
   891  000076                     	ds	1
   892  000077                     _colstart:
   893                           	opt stack 0
   894  000077                     	ds	1
   895  000078                     _dir:
   896                           	opt stack 0
   897  000078                     	ds	1
   898  000079                     _direction:
   899                           	opt stack 0
   900  000079                     	ds	1
   901  00007A                     _rowstart:
   902                           	opt stack 0
   903  00007A                     	ds	1
   904                           tblptru	equ	0xFF8
   905                           tblptrh	equ	0xFF7
   906                           tblptrl	equ	0xFF6
   907                           tablat	equ	0xFF5
   908                           postinc0	equ	0xFEE
   909                           wreg	equ	0xFE8
   910                           postdec1	equ	0xFE5
   911                           fsr1l	equ	0xFE1
   912                           
   913                           	psect	dataCOMRAM
   914  000041                     __pdataCOMRAM:
   915                           	opt stack 0
   916  000041                     _wrap:
   917                           	opt stack 0
   918  000041                     	ds	1
   919  000042                     _EWLT_Count:
   920                           	opt stack 0
   921  000042                     	ds	3
   922  000045                     _EW_Count:
   923                           	opt stack 0
   924  000045                     	ds	3
   925  000048                     _NSLT_Count:
   926                           	opt stack 0
   927  000048                     	ds	3
   928  00004B                     _NS_Count:
   929                           	opt stack 0
   930  00004B                     	ds	3
   931  00004E                     _PED_EW_Count:
   932                           	opt stack 0
   933  00004E                     	ds	3
   934  000051                     _PED_NS_Count:
   935                           	opt stack 0
   936  000051                     	ds	3
   937  000054                     _Act_Mode_Txt:
   938                           	opt stack 0
   939  000054                     	ds	2
   940  000056                     _FlashingR_Txt:
   941                           	opt stack 0
   942  000056                     	ds	2
   943  000058                     _FlashingS_Txt:
   944                           	opt stack 0
   945  000058                     	ds	2
   946  00005A                     _SW_EWLT_Txt:
   947                           	opt stack 0
   948  00005A                     	ds	2
   949  00005C                     _SW_EWPED_Txt:
   950                           	opt stack 0
   951  00005C                     	ds	2
   952  00005E                     _SW_MODE_Txt:
   953                           	opt stack 0
   954  00005E                     	ds	2
   955  000060                     _SW_NSLT_Txt:
   956                           	opt stack 0
   957  000060                     	ds	2
   958  000062                     _SW_NSPED_Txt:
   959                           	opt stack 0
   960  000062                     	ds	2
   961                           tblptru	equ	0xFF8
   962                           tblptrh	equ	0xFF7
   963                           tblptrl	equ	0xFF6
   964                           tablat	equ	0xFF5
   965                           postinc0	equ	0xFEE
   966                           wreg	equ	0xFE8
   967                           postdec1	equ	0xFE5
   968                           fsr1l	equ	0xFE1
   969                           
   970                           	psect	bssBANK0
   971  000080                     __pbssBANK0:
   972                           	opt stack 0
   973  000080                     _buffer:
   974                           	opt stack 0
   975  000080                     	ds	31
   976                           tblptru	equ	0xFF8
   977                           tblptrh	equ	0xFF7
   978                           tblptrl	equ	0xFF6
   979                           tablat	equ	0xFF5
   980                           postinc0	equ	0xFEE
   981                           wreg	equ	0xFE8
   982                           postdec1	equ	0xFE5
   983                           fsr1l	equ	0xFE1
   984                           
   985                           	psect	cstackCOMRAM
   986  000001                     __pcstackCOMRAM:
   987                           	opt stack 0
   988  000001                     ?_strlen:
   989                           	opt stack 0
   990  000001                     ?_get_full_ADC:
   991                           	opt stack 0
   992  000001                     ?___wmul:
   993                           	opt stack 0
   994  000001                     ?___awdiv:
   995                           	opt stack 0
   996  000001                     ?___awmod:
   997                           	opt stack 0
   998  000001                     ?___ftpack:
   999                           	opt stack 0
  1000  000001                     spiwrite@x:
  1001                           	opt stack 0
  1002  000001                     OpenUSART@spbrg:
  1003                           	opt stack 0
  1004  000001                     ___wmul@multiplier:
  1005                           	opt stack 0
  1006  000001                     ___awdiv@dividend:
  1007                           	opt stack 0
  1008  000001                     ___awmod@dividend:
  1009                           	opt stack 0
  1010  000001                     strcpy@to:
  1011                           	opt stack 0
  1012  000001                     strlen@s:
  1013                           	opt stack 0
  1014  000001                     ___ftpack@arg:
  1015                           	opt stack 0
  1016  000001                     ___ftge@ff1:
  1017                           	opt stack 0
  1018                           
  1019                           ; 3 bytes @ 0x0
  1020  000001                     	ds	1
  1021  000002                     spiwrite@spidata:
  1022                           	opt stack 0
  1023                           
  1024                           ; 1 bytes @ 0x1
  1025  000002                     	ds	1
  1026  000003                     ??_strlen:
  1027  000003                     ??_get_full_ADC:
  1028  000003                     write_command@cmd_:
  1029                           	opt stack 0
  1030  000003                     write_data@data_:
  1031                           	opt stack 0
  1032  000003                     OpenUSART@config:
  1033                           	opt stack 0
  1034  000003                     ___wmul@multiplicand:
  1035                           	opt stack 0
  1036  000003                     ___awdiv@divisor:
  1037                           	opt stack 0
  1038  000003                     ___awmod@divisor:
  1039                           	opt stack 0
  1040  000003                     strcpy@from:
  1041                           	opt stack 0
  1042                           
  1043                           ; 2 bytes @ 0x2
  1044  000003                     	ds	1
  1045  000004                     setAddrWindow@y0:
  1046                           	opt stack 0
  1047  000004                     ___ftpack@exp:
  1048                           	opt stack 0
  1049  000004                     ___ftge@ff2:
  1050                           	opt stack 0
  1051                           
  1052                           ; 3 bytes @ 0x3
  1053  000004                     	ds	1
  1054  000005                     setAddrWindow@x1:
  1055                           	opt stack 0
  1056  000005                     ___awdiv@counter:
  1057                           	opt stack 0
  1058  000005                     ___awmod@counter:
  1059                           	opt stack 0
  1060  000005                     ___ftpack@sign:
  1061                           	opt stack 0
  1062  000005                     get_full_ADC@result:
  1063                           	opt stack 0
  1064  000005                     ___wmul@product:
  1065                           	opt stack 0
  1066  000005                     strcpy@cp:
  1067                           	opt stack 0
  1068  000005                     strlen@cp:
  1069                           	opt stack 0
  1070                           
  1071                           ; 2 bytes @ 0x4
  1072  000005                     	ds	1
  1073  000006                     ??___ftpack:
  1074  000006                     setAddrWindow@y1:
  1075                           	opt stack 0
  1076  000006                     ___awdiv@sign:
  1077                           	opt stack 0
  1078  000006                     ___awmod@sign:
  1079                           	opt stack 0
  1080                           
  1081                           ; 1 bytes @ 0x5
  1082  000006                     	ds	1
  1083  000007                     ??___ftge:
  1084  000007                     setAddrWindow@x0:
  1085                           	opt stack 0
  1086  000007                     delay_ms@ms:
  1087                           	opt stack 0
  1088  000007                     ___awdiv@quotient:
  1089                           	opt stack 0
  1090                           
  1091                           ; 2 bytes @ 0x6
  1092  000007                     	ds	1
  1093  000008                     drawPixel@y:
  1094                           	opt stack 0
  1095  000008                     drawFastVLine@y:
  1096                           	opt stack 0
  1097  000008                     fillRectangle@y:
  1098                           	opt stack 0
  1099  000008                     drawFastHLine@y:
  1100                           	opt stack 0
  1101                           
  1102                           ; 1 bytes @ 0x7
  1103  000008                     	ds	1
  1104  000009                     ??_delay_ms:
  1105  000009                     ?___awtoft:
  1106                           	opt stack 0
  1107  000009                     drawFastVLine@h:
  1108                           	opt stack 0
  1109  000009                     fillRectangle@w:
  1110                           	opt stack 0
  1111  000009                     drawFastHLine@w:
  1112                           	opt stack 0
  1113  000009                     drawPixel@color:
  1114                           	opt stack 0
  1115  000009                     ___awtoft@c:
  1116                           	opt stack 0
  1117                           
  1118                           ; 2 bytes @ 0x8
  1119  000009                     	ds	1
  1120  00000A                     fillRectangle@h:
  1121                           	opt stack 0
  1122  00000A                     drawFastVLine@color:
  1123                           	opt stack 0
  1124  00000A                     drawFastHLine@color:
  1125                           	opt stack 0
  1126                           
  1127                           ; 2 bytes @ 0x9
  1128  00000A                     	ds	1
  1129  00000B                     drawPixel@x:
  1130                           	opt stack 0
  1131  00000B                     delay_ms@count:
  1132                           	opt stack 0
  1133  00000B                     fillRectangle@color:
  1134                           	opt stack 0
  1135                           
  1136                           ; 2 bytes @ 0xA
  1137  00000B                     	ds	1
  1138  00000C                     ??_drawFastVLine:
  1139  00000C                     ??_drawFastHLine:
  1140  00000C                     ___awtoft@sign:
  1141                           	opt stack 0
  1142  00000C                     drawCircle@x0:
  1143                           	opt stack 0
  1144                           
  1145                           ; 2 bytes @ 0xB
  1146  00000C                     	ds	1
  1147  00000D                     ??_fillRectangle:
  1148  00000D                     ?___ftdiv:
  1149                           	opt stack 0
  1150  00000D                     ___ftdiv@f1:
  1151                           	opt stack 0
  1152                           
  1153                           ; 3 bytes @ 0xC
  1154  00000D                     	ds	1
  1155  00000E                     drawCircle@y0:
  1156                           	opt stack 0
  1157                           
  1158                           ; 2 bytes @ 0xD
  1159  00000E                     	ds	2
  1160  000010                     drawFastVLine@hi:
  1161                           	opt stack 0
  1162  000010                     drawFastHLine@hi:
  1163                           	opt stack 0
  1164  000010                     drawCircle@r:
  1165                           	opt stack 0
  1166  000010                     ___ftdiv@f2:
  1167                           	opt stack 0
  1168                           
  1169                           ; 3 bytes @ 0xF
  1170  000010                     	ds	1
  1171  000011                     drawFastVLine@lo:
  1172                           	opt stack 0
  1173  000011                     fillRectangle@hi:
  1174                           	opt stack 0
  1175  000011                     drawFastHLine@lo:
  1176                           	opt stack 0
  1177                           
  1178                           ; 1 bytes @ 0x10
  1179  000011                     	ds	1
  1180  000012                     drawFastVLine@x:
  1181                           	opt stack 0
  1182  000012                     fillRectangle@lo:
  1183                           	opt stack 0
  1184  000012                     drawFastHLine@x:
  1185                           	opt stack 0
  1186  000012                     drawCircle@color:
  1187                           	opt stack 0
  1188                           
  1189                           ; 2 bytes @ 0x11
  1190  000012                     	ds	1
  1191  000013                     ??___ftdiv:
  1192  000013                     fillRect@y:
  1193                           	opt stack 0
  1194  000013                     fillRectangle@x:
  1195                           	opt stack 0
  1196  000013                     fillCircleHelper@x0:
  1197                           	opt stack 0
  1198  000013                     drawRect@x:
  1199                           	opt stack 0
  1200                           
  1201                           ; 2 bytes @ 0x12
  1202  000013                     	ds	1
  1203  000014                     ??_drawCircle:
  1204  000014                     fillRect@w:
  1205                           	opt stack 0
  1206  000014                     fillScreen@color:
  1207                           	opt stack 0
  1208                           
  1209                           ; 2 bytes @ 0x13
  1210  000014                     	ds	1
  1211  000015                     fillRect@h:
  1212                           	opt stack 0
  1213  000015                     fillCircleHelper@y0:
  1214                           	opt stack 0
  1215  000015                     drawRect@y:
  1216                           	opt stack 0
  1217                           
  1218                           ; 2 bytes @ 0x14
  1219  000015                     	ds	1
  1220  000016                     ___ftdiv@cntr:
  1221                           	opt stack 0
  1222  000016                     fillRect@color:
  1223                           	opt stack 0
  1224  000016                     drawCircle@ddF_x:
  1225                           	opt stack 0
  1226                           
  1227                           ; 2 bytes @ 0x15
  1228  000016                     	ds	1
  1229  000017                     fillCircleHelper@r:
  1230                           	opt stack 0
  1231  000017                     drawRect@w:
  1232                           	opt stack 0
  1233  000017                     ___ftdiv@f3:
  1234                           	opt stack 0
  1235                           
  1236                           ; 3 bytes @ 0x16
  1237  000017                     	ds	1
  1238  000018                     ??_fillRect:
  1239  000018                     drawCircle@ddF_y:
  1240                           	opt stack 0
  1241                           
  1242                           ; 2 bytes @ 0x17
  1243  000018                     	ds	1
  1244  000019                     fillCircleHelper@cornername:
  1245                           	opt stack 0
  1246  000019                     drawRect@h:
  1247                           	opt stack 0
  1248                           
  1249                           ; 2 bytes @ 0x18
  1250  000019                     	ds	1
  1251  00001A                     ___ftdiv@exp:
  1252                           	opt stack 0
  1253  00001A                     drawCircle@f:
  1254                           	opt stack 0
  1255                           
  1256                           ; 2 bytes @ 0x19
  1257  00001A                     	ds	1
  1258  00001B                     fillRect@x:
  1259                           	opt stack 0
  1260  00001B                     ___ftdiv@sign:
  1261                           	opt stack 0
  1262  00001B                     fillCircleHelper@delta:
  1263                           	opt stack 0
  1264  00001B                     drawRect@color:
  1265                           	opt stack 0
  1266                           
  1267                           ; 2 bytes @ 0x1A
  1268  00001B                     	ds	1
  1269  00001C                     fillRect@i:
  1270                           	opt stack 0
  1271  00001C                     drawCircle@x:
  1272                           	opt stack 0
  1273                           
  1274                           ; 2 bytes @ 0x1B
  1275  00001C                     	ds	1
  1276  00001D                     ??_drawRect:
  1277  00001D                     fillCircleHelper@color:
  1278                           	opt stack 0
  1279                           
  1280                           ; 2 bytes @ 0x1C
  1281  00001D                     	ds	1
  1282  00001E                     drawChar@y:
  1283                           	opt stack 0
  1284  00001E                     drawCircle@y:
  1285                           	opt stack 0
  1286                           
  1287                           ; 2 bytes @ 0x1D
  1288  00001E                     	ds	1
  1289  00001F                     ??_fillCircleHelper:
  1290  00001F                     drawChar@c:
  1291                           	opt stack 0
  1292                           
  1293                           ; 1 bytes @ 0x1E
  1294  00001F                     	ds	1
  1295  000020                     drawChar@color:
  1296                           	opt stack 0
  1297                           
  1298                           ; 2 bytes @ 0x1F
  1299  000020                     	ds	1
  1300  000021                     fillCircleHelper@ddF_x:
  1301                           	opt stack 0
  1302                           
  1303                           ; 2 bytes @ 0x20
  1304  000021                     	ds	1
  1305  000022                     drawChar@bg:
  1306                           	opt stack 0
  1307                           
  1308                           ; 2 bytes @ 0x21
  1309  000022                     	ds	1
  1310  000023                     fillCircleHelper@ddF_y:
  1311                           	opt stack 0
  1312                           
  1313                           ; 2 bytes @ 0x22
  1314  000023                     	ds	1
  1315  000024                     drawChar@size:
  1316                           	opt stack 0
  1317                           
  1318                           ; 1 bytes @ 0x23
  1319  000024                     	ds	1
  1320  000025                     drawChar@line:
  1321                           	opt stack 0
  1322  000025                     fillCircleHelper@f:
  1323                           	opt stack 0
  1324                           
  1325                           ; 2 bytes @ 0x24
  1326  000025                     	ds	1
  1327  000026                     drawChar@x:
  1328                           	opt stack 0
  1329                           
  1330                           ; 1 bytes @ 0x25
  1331  000026                     	ds	1
  1332  000027                     drawChar@j:
  1333                           	opt stack 0
  1334  000027                     fillCircleHelper@x:
  1335                           	opt stack 0
  1336                           
  1337                           ; 2 bytes @ 0x26
  1338  000027                     	ds	1
  1339  000028                     drawChar@i:
  1340                           	opt stack 0
  1341                           
  1342                           ; 1 bytes @ 0x27
  1343  000028                     	ds	1
  1344  000029                     drawtext@y:
  1345                           	opt stack 0
  1346  000029                     fillCircleHelper@y:
  1347                           	opt stack 0
  1348                           
  1349                           ; 2 bytes @ 0x28
  1350  000029                     	ds	1
  1351  00002A                     drawtext@_text:
  1352                           	opt stack 0
  1353                           
  1354                           ; 2 bytes @ 0x29
  1355  00002A                     	ds	1
  1356  00002B                     fillCircle@x0:
  1357                           	opt stack 0
  1358                           
  1359                           ; 2 bytes @ 0x2A
  1360  00002B                     	ds	1
  1361  00002C                     drawtext@color:
  1362                           	opt stack 0
  1363                           
  1364                           ; 2 bytes @ 0x2B
  1365  00002C                     	ds	1
  1366  00002D                     fillCircle@y0:
  1367                           	opt stack 0
  1368                           
  1369                           ; 2 bytes @ 0x2C
  1370  00002D                     	ds	1
  1371  00002E                     drawtext@bg:
  1372                           	opt stack 0
  1373                           
  1374                           ; 2 bytes @ 0x2D
  1375  00002E                     	ds	1
  1376  00002F                     fillCircle@r:
  1377                           	opt stack 0
  1378                           
  1379                           ; 2 bytes @ 0x2E
  1380  00002F                     	ds	1
  1381  000030                     drawtext@size:
  1382                           	opt stack 0
  1383                           
  1384                           ; 1 bytes @ 0x2F
  1385  000030                     	ds	1
  1386  000031                     ??_drawtext:
  1387  000031                     fillCircle@color:
  1388                           	opt stack 0
  1389                           
  1390                           ; 2 bytes @ 0x30
  1391  000031                     	ds	2
  1392  000033                     update_LCD_color@color:
  1393                           	opt stack 0
  1394  000033                     drawtext@textsize:
  1395                           	opt stack 0
  1396                           
  1397                           ; 2 bytes @ 0x32
  1398  000033                     	ds	1
  1399  000034                     update_LCD_color@direction:
  1400                           	opt stack 0
  1401                           
  1402                           ; 1 bytes @ 0x33
  1403  000034                     	ds	1
  1404  000035                     drawtext@x:
  1405                           	opt stack 0
  1406  000035                     update_LCD_color@Circle_Y:
  1407                           	opt stack 0
  1408                           
  1409                           ; 1 bytes @ 0x34
  1410  000035                     	ds	1
  1411  000036                     Set_NS@color:
  1412                           	opt stack 0
  1413  000036                     Set_NS_LT@color:
  1414                           	opt stack 0
  1415  000036                     Set_EW@color:
  1416                           	opt stack 0
  1417  000036                     Set_EW_LT@color:
  1418                           	opt stack 0
  1419  000036                     drawtext@i:
  1420                           	opt stack 0
  1421                           
  1422                           ; 2 bytes @ 0x35
  1423  000036                     	ds	2
  1424  000038                     drawtext@cursor_y:
  1425                           	opt stack 0
  1426                           
  1427                           ; 1 bytes @ 0x37
  1428  000038                     	ds	1
  1429  000039                     drawtext@cursor_x:
  1430                           	opt stack 0
  1431                           
  1432                           ; 1 bytes @ 0x38
  1433  000039                     	ds	1
  1434  00003A                     update_LCD_count@count:
  1435                           	opt stack 0
  1436  00003A                     update_LCD_PED_Count@count:
  1437                           	opt stack 0
  1438  00003A                     update_LCD_misc@nStep:
  1439                           	opt stack 0
  1440                           
  1441                           ; 2 bytes @ 0x39
  1442  00003A                     	ds	1
  1443  00003B                     update_LCD_count@direction:
  1444                           	opt stack 0
  1445  00003B                     update_LCD_PED_Count@direction:
  1446                           	opt stack 0
  1447                           
  1448                           ; 1 bytes @ 0x3A
  1449  00003B                     	ds	1
  1450  00003C                     PED_Control@Num_Sec:
  1451                           	opt stack 0
  1452  00003C                     Wait_N_Seconds@seconds:
  1453                           	opt stack 0
  1454                           
  1455                           ; 1 bytes @ 0x3B
  1456  00003C                     	ds	1
  1457  00003D                     PED_Control@direction:
  1458                           	opt stack 0
  1459  00003D                     Wait_N_Seconds@I:
  1460                           	opt stack 0
  1461                           
  1462                           ; 1 bytes @ 0x3C
  1463  00003D                     	ds	1
  1464  00003E                     PED_Control@i:
  1465                           	opt stack 0
  1466                           
  1467                           ; 1 bytes @ 0x3D
  1468  00003E                     	ds	1
  1469  00003F                     main@nStep:
  1470                           	opt stack 0
  1471                           
  1472                           ; 2 bytes @ 0x3E
  1473  00003F                     	ds	2
  1474                           tblptru	equ	0xFF8
  1475                           tblptrh	equ	0xFF7
  1476                           tblptrl	equ	0xFF6
  1477                           tablat	equ	0xFF5
  1478                           postinc0	equ	0xFEE
  1479                           wreg	equ	0xFE8
  1480                           postdec1	equ	0xFE5
  1481                           fsr1l	equ	0xFE1
  1482                           
  1483 ;;
  1484 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1485 ;;
  1486 ;; *************** function _main *****************
  1487 ;; Defined at:
  1488 ;;		line 264 in file "Lab7-8.c"
  1489 ;; Parameters:    Size  Location     Type
  1490 ;;		None
  1491 ;; Auto vars:     Size  Location     Type
  1492 ;;  nStep           2   62[COMRAM] int 
  1493 ;; Return value:  Size  Location     Type
  1494 ;;		None               void
  1495 ;; Registers used:
  1496 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1497 ;; Tracked objects:
  1498 ;;		On entry : 0/0
  1499 ;;		On exit  : 0/0
  1500 ;;		Unchanged: 0/0
  1501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1502 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1503 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1504 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1505 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1506 ;;Total ram usage:        2 bytes
  1507 ;; Hardware stack levels required when called:   11
  1508 ;; This function calls:
  1509 ;;		_Day_Mode
  1510 ;;		_Init_ADC
  1511 ;;		_Initialize_Screen
  1512 ;;		_Night_Mode
  1513 ;;		___awtoft
  1514 ;;		___ftdiv
  1515 ;;		___ftge
  1516 ;;		___wmul
  1517 ;;		_get_full_ADC
  1518 ;;		_init_IO
  1519 ;;		_init_UART
  1520 ;; This function is called by:
  1521 ;;		Startup code after reset
  1522 ;; This function uses a non-reentrant model
  1523 ;;
  1524                           
  1525                           	psect	text0
  1526  00E42C                     __ptext0:
  1527                           	opt stack 0
  1528  00E42C                     _main:
  1529                           	opt stack 20
  1530                           
  1531                           ;Lab7-8.c: 266: init_IO();
  1532                           
  1533                           ;incstack = 0
  1534  00E42C  EC3E  F06D         	call	_init_IO	;wreg free
  1535                           
  1536                           ;Lab7-8.c: 267: Init_ADC();
  1537  00E430  ECF6  F06C         	call	_Init_ADC	;wreg free
  1538                           
  1539                           ;Lab7-8.c: 268: init_UART();
  1540  00E434  EC29  F06D         	call	_init_UART	;wreg free
  1541                           
  1542                           ;Lab7-8.c: 269: OSCCON = 0x70;
  1543  00E438  0E70               	movlw	112
  1544  00E43A  6ED3               	movwf	4051,c	;volatile
  1545                           
  1546                           ;Lab7-8.c: 270: RBPU = 0;
  1547  00E43C  9EF1               	bcf	intcon2,7,c	;volatile
  1548                           
  1549                           ;Lab7-8.c: 272: Initialize_Screen();
  1550  00E43E  EC4F  F07B         	call	_Initialize_Screen	;wreg free
  1551                           
  1552                           ;Lab7-8.c: 275: int nStep = get_full_ADC();
  1553  00E442  EC76  F06D         	call	_get_full_ADC	;wreg free
  1554  00E446  C001  F03F         	movff	?_get_full_ADC,main@nStep
  1555  00E44A  C002  F040         	movff	?_get_full_ADC+1,main@nStep+1
  1556                           
  1557                           ;Lab7-8.c: 276: volt = nStep * 5 /1024.0;
  1558  00E44E  C03F  F001         	movff	main@nStep,___wmul@multiplier
  1559  00E452  C040  F002         	movff	main@nStep+1,___wmul@multiplier+1
  1560  00E456  0E00               	movlw	0
  1561  00E458  6E04               	movwf	___wmul@multiplicand+1,c
  1562  00E45A  0E05               	movlw	5
  1563  00E45C  6E03               	movwf	___wmul@multiplicand,c
  1564  00E45E  EC89  F06D         	call	___wmul	;wreg free
  1565  00E462  C001  F009         	movff	?___wmul,___awtoft@c
  1566  00E466  C002  F00A         	movff	?___wmul+1,___awtoft@c+1
  1567  00E46A  EC13  F06E         	call	___awtoft	;wreg free
  1568  00E46E  C009  F00D         	movff	?___awtoft,___ftdiv@f1
  1569  00E472  C00A  F00E         	movff	?___awtoft+1,___ftdiv@f1+1
  1570  00E476  C00B  F00F         	movff	?___awtoft+2,___ftdiv@f1+2
  1571  00E47A  0E00               	movlw	0
  1572  00E47C  6E10               	movwf	___ftdiv@f2,c
  1573  00E47E  0E80               	movlw	128
  1574  00E480  6E11               	movwf	___ftdiv@f2+1,c
  1575  00E482  0E44               	movlw	68
  1576  00E484  6E12               	movwf	___ftdiv@f2+2,c
  1577  00E486  EC70  F074         	call	___ftdiv	;wreg free
  1578  00E48A  C00D  F064         	movff	?___ftdiv,_volt
  1579  00E48E  C00E  F065         	movff	?___ftdiv+1,_volt+1
  1580  00E492  C00F  F066         	movff	?___ftdiv+2,_volt+2
  1581                           
  1582                           ;Lab7-8.c: 277: SW_MODE = volt < 2.5 ? 1:0;
  1583  00E496  C064  F001         	movff	_volt,___ftge@ff1
  1584  00E49A  C065  F002         	movff	_volt+1,___ftge@ff1+1
  1585  00E49E  C066  F003         	movff	_volt+2,___ftge@ff1+2
  1586  00E4A2  0E00               	movlw	0
  1587  00E4A4  6E04               	movwf	___ftge@ff2,c
  1588  00E4A6  0E20               	movlw	32
  1589  00E4A8  6E05               	movwf	___ftge@ff2+1,c
  1590  00E4AA  0E40               	movlw	64
  1591  00E4AC  6E06               	movwf	___ftge@ff2+2,c
  1592  00E4AE  EC76  F071         	call	___ftge	;wreg free
  1593  00E4B2  B0D8               	btfsc	status,0,c
  1594  00E4B4  D002               	goto	u2520
  1595  00E4B6  0E01               	movlw	1
  1596  00E4B8  D001               	goto	u2530
  1597  00E4BA                     u2520:
  1598  00E4BA  0E00               	movlw	0
  1599  00E4BC                     u2530:
  1600  00E4BC  6E73               	movwf	_SW_MODE,c
  1601  00E4BE  D000               	goto	l3901
  1602  00E4C0                     l3901:
  1603                           
  1604                           ;Lab7-8.c: 280: {
  1605                           ;Lab7-8.c: 281: if (SW_MODE)
  1606  00E4C0  5073               	movf	_SW_MODE,w,c
  1607  00E4C2  B4D8               	btfsc	status,2,c
  1608  00E4C4  D003               	goto	l3905
  1609                           
  1610                           ;Lab7-8.c: 282: {
  1611                           ;Lab7-8.c: 283: Day_Mode();
  1612  00E4C6  EC30  F073         	call	_Day_Mode	;wreg free
  1613                           
  1614                           ;Lab7-8.c: 284: }
  1615  00E4CA  D7FA               	goto	l3901
  1616  00E4CC                     l3905:
  1617                           
  1618                           ;Lab7-8.c: 285: else
  1619                           ;Lab7-8.c: 286: {
  1620                           ;Lab7-8.c: 287: Night_Mode();
  1621  00E4CC  ECC1  F071         	call	_Night_Mode	;wreg free
  1622  00E4D0  D7F7               	goto	l3901
  1623  00E4D2  EF00  F000         	goto	start
  1624  00E4D6                     __end_of_main:
  1625                           	opt stack 0
  1626                           tblptru	equ	0xFF8
  1627                           tblptrh	equ	0xFF7
  1628                           tblptrl	equ	0xFF6
  1629                           tablat	equ	0xFF5
  1630                           intcon2	equ	0xFF1
  1631                           postinc0	equ	0xFEE
  1632                           wreg	equ	0xFE8
  1633                           postdec1	equ	0xFE5
  1634                           fsr1l	equ	0xFE1
  1635                           status	equ	0xFD8
  1636                           
  1637 ;; *************** function _init_UART *****************
  1638 ;; Defined at:
  1639 ;;		line 250 in file "Lab7-8.c"
  1640 ;; Parameters:    Size  Location     Type
  1641 ;;		None
  1642 ;; Auto vars:     Size  Location     Type
  1643 ;;		None
  1644 ;; Return value:  Size  Location     Type
  1645 ;;		None               void
  1646 ;; Registers used:
  1647 ;;		wreg, status,2, cstack
  1648 ;; Tracked objects:
  1649 ;;		On entry : 0/0
  1650 ;;		On exit  : 0/0
  1651 ;;		Unchanged: 0/0
  1652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1653 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1654 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1655 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1656 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1657 ;;Total ram usage:        0 bytes
  1658 ;; Hardware stack levels used:    1
  1659 ;; Hardware stack levels required when called:    1
  1660 ;; This function calls:
  1661 ;;		_OpenUSART
  1662 ;; This function is called by:
  1663 ;;		_main
  1664 ;; This function uses a non-reentrant model
  1665 ;;
  1666                           
  1667                           	psect	text1
  1668  00DA52                     __ptext1:
  1669                           	opt stack 0
  1670  00DA52                     _init_UART:
  1671                           	opt stack 29
  1672                           
  1673                           ;Lab7-8.c: 252: OpenUSART (0b01111111 & 0b10111111 &
  1674                           ;Lab7-8.c: 253: 0b11111110 & 0b11111101 & 0b11111111 &
  1675                           ;Lab7-8.c: 254: 0b11111111, 25);
  1676                           
  1677                           ;incstack = 0
  1678  00DA52  0E00               	movlw	0
  1679  00DA54  6E02               	movwf	OpenUSART@spbrg+1,c
  1680  00DA56  0E19               	movlw	25
  1681  00DA58  6E01               	movwf	OpenUSART@spbrg,c
  1682  00DA5A  0E3C               	movlw	60
  1683  00DA5C  ECE9  F06F         	call	_OpenUSART
  1684                           
  1685                           ;Lab7-8.c: 255: OSCCON = 0x60;
  1686  00DA60  0E60               	movlw	96
  1687  00DA62  6ED3               	movwf	4051,c	;volatile
  1688  00DA64  0012               	return		;funcret
  1689  00DA66                     __end_of_init_UART:
  1690                           	opt stack 0
  1691                           tblptru	equ	0xFF8
  1692                           tblptrh	equ	0xFF7
  1693                           tblptrl	equ	0xFF6
  1694                           tablat	equ	0xFF5
  1695                           intcon2	equ	0xFF1
  1696                           postinc0	equ	0xFEE
  1697                           wreg	equ	0xFE8
  1698                           postdec1	equ	0xFE5
  1699                           fsr1l	equ	0xFE1
  1700                           status	equ	0xFD8
  1701                           
  1702 ;; *************** function _OpenUSART *****************
  1703 ;; Defined at:
  1704 ;;		line 73 in file "E:\XC8\sources\pic18\plib\USART\uopen.c"
  1705 ;; Parameters:    Size  Location     Type
  1706 ;;  config          1    wreg     unsigned char 
  1707 ;;  spbrg           2    0[COMRAM] unsigned int 
  1708 ;; Auto vars:     Size  Location     Type
  1709 ;;  config          1    2[COMRAM] unsigned char 
  1710 ;; Return value:  Size  Location     Type
  1711 ;;		None               void
  1712 ;; Registers used:
  1713 ;;		wreg, status,2
  1714 ;; Tracked objects:
  1715 ;;		On entry : 0/0
  1716 ;;		On exit  : 0/0
  1717 ;;		Unchanged: 0/0
  1718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1719 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1720 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1721 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1722 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1723 ;;Total ram usage:        3 bytes
  1724 ;; Hardware stack levels used:    1
  1725 ;; This function calls:
  1726 ;;		Nothing
  1727 ;; This function is called by:
  1728 ;;		_init_UART
  1729 ;; This function uses a non-reentrant model
  1730 ;;
  1731                           
  1732                           	psect	text2
  1733  00DFD2                     __ptext2:
  1734                           	opt stack 0
  1735  00DFD2                     _OpenUSART:
  1736                           	opt stack 29
  1737                           
  1738                           ;incstack = 0
  1739                           ;OpenUSART@config stored from wreg
  1740  00DFD2  6E03               	movwf	OpenUSART@config,c
  1741  00DFD4  0E00               	movlw	0
  1742  00DFD6  6EAC               	movwf	4012,c	;volatile
  1743  00DFD8  0E00               	movlw	0
  1744  00DFDA  6EAB               	movwf	4011,c	;volatile
  1745  00DFDC  A003               	btfss	OpenUSART@config,0,c
  1746  00DFDE  D002               	goto	l3327
  1747  00DFE0  88AC               	bsf	4012,4,c	;volatile
  1748  00DFE2  D000               	goto	l3327
  1749  00DFE4                     l3327:
  1750  00DFE4  A203               	btfss	OpenUSART@config,1,c
  1751  00DFE6  D003               	goto	l3331
  1752  00DFE8  8CAC               	bsf	4012,6,c	;volatile
  1753  00DFEA  8CAB               	bsf	4011,6,c	;volatile
  1754  00DFEC  D000               	goto	l3331
  1755  00DFEE                     l3331:
  1756  00DFEE  A403               	btfss	OpenUSART@config,2,c
  1757  00DFF0  D002               	goto	l3335
  1758  00DFF2  8EAC               	bsf	4012,7,c	;volatile
  1759  00DFF4  D000               	goto	l3335
  1760  00DFF6                     l3335:
  1761  00DFF6  A603               	btfss	OpenUSART@config,3,c
  1762  00DFF8  D002               	goto	l524
  1763  00DFFA  88AB               	bsf	4011,4,c	;volatile
  1764  00DFFC  D002               	goto	l3339
  1765  00DFFE                     l524:
  1766  00DFFE  8AAB               	bsf	4011,5,c	;volatile
  1767  00E000  D000               	goto	l3339
  1768  00E002                     l3339:
  1769  00E002  B803               	btfsc	OpenUSART@config,4,c
  1770  00E004  84AC               	bsf	4012,2,c	;volatile
  1771  00E006  989E               	bcf	3998,4,c	;volatile
  1772  00E008  AA03               	btfss	OpenUSART@config,5,c
  1773  00E00A  D002               	goto	l3347
  1774  00E00C  86AB               	bsf	4011,3,c	;volatile
  1775  00E00E  D000               	goto	l3347
  1776  00E010                     l3347:
  1777  00E010  AC03               	btfss	OpenUSART@config,6,c
  1778  00E012  D002               	goto	l528
  1779  00E014  8A9D               	bsf	3997,5,c	;volatile
  1780  00E016  D001               	goto	l529
  1781  00E018                     l528:
  1782  00E018  9A9D               	bcf	3997,5,c	;volatile
  1783  00E01A                     l529:
  1784  00E01A  9A9E               	bcf	3998,5,c	;volatile
  1785  00E01C  AE03               	btfss	OpenUSART@config,7,c
  1786  00E01E  D002               	goto	l530
  1787  00E020  889D               	bsf	3997,4,c	;volatile
  1788  00E022  D001               	goto	l531
  1789  00E024                     l530:
  1790  00E024  989D               	bcf	3997,4,c	;volatile
  1791  00E026                     l531:
  1792  00E026  C001  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  1793  00E02A  5002               	movf	OpenUSART@spbrg+1,w,c
  1794  00E02C  6EB0               	movwf	4016,c	;volatile
  1795  00E02E  8AAC               	bsf	4012,5,c	;volatile
  1796  00E030  8EAB               	bsf	4011,7,c	;volatile
  1797  00E032  9C94               	bcf	3988,6,c	;volatile
  1798  00E034  8E94               	bsf	3988,7,c	;volatile
  1799  00E036  B8AC               	btfsc	4012,4,c	;volatile
  1800  00E038  BEAC               	btfsc	4012,7,c	;volatile
  1801  00E03A  D002               	goto	l533
  1802  00E03C  8C94               	bsf	3988,6,c	;volatile
  1803  00E03E  D000               	goto	l533
  1804  00E040                     l533:
  1805  00E040  0012               	return		;funcret
  1806  00E042                     __end_of_OpenUSART:
  1807                           	opt stack 0
  1808                           tblptru	equ	0xFF8
  1809                           tblptrh	equ	0xFF7
  1810                           tblptrl	equ	0xFF6
  1811                           tablat	equ	0xFF5
  1812                           intcon2	equ	0xFF1
  1813                           postinc0	equ	0xFEE
  1814                           wreg	equ	0xFE8
  1815                           postdec1	equ	0xFE5
  1816                           fsr1l	equ	0xFE1
  1817                           status	equ	0xFD8
  1818                           
  1819 ;; *************** function _init_IO *****************
  1820 ;; Defined at:
  1821 ;;		line 293 in file "Lab7-8.c"
  1822 ;; Parameters:    Size  Location     Type
  1823 ;;		None
  1824 ;; Auto vars:     Size  Location     Type
  1825 ;;		None
  1826 ;; Return value:  Size  Location     Type
  1827 ;;		None               void
  1828 ;; Registers used:
  1829 ;;		wreg, status,2
  1830 ;; Tracked objects:
  1831 ;;		On entry : 0/0
  1832 ;;		On exit  : 0/0
  1833 ;;		Unchanged: 0/0
  1834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1835 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1836 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1837 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1838 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1839 ;;Total ram usage:        0 bytes
  1840 ;; Hardware stack levels used:    1
  1841 ;; This function calls:
  1842 ;;		Nothing
  1843 ;; This function is called by:
  1844 ;;		_main
  1845 ;; This function uses a non-reentrant model
  1846 ;;
  1847                           
  1848                           	psect	text3
  1849  00DA7C                     __ptext3:
  1850                           	opt stack 0
  1851  00DA7C                     _init_IO:
  1852                           	opt stack 30
  1853                           
  1854                           ;Lab7-8.c: 295: TRISA = 0x31;
  1855                           
  1856                           ;incstack = 0
  1857  00DA7C  0E31               	movlw	49
  1858  00DA7E  6E92               	movwf	3986,c	;volatile
  1859                           
  1860                           ;Lab7-8.c: 296: TRISB = 0x03;
  1861  00DA80  0E03               	movlw	3
  1862  00DA82  6E93               	movwf	3987,c	;volatile
  1863                           
  1864                           ;Lab7-8.c: 297: TRISC = 0x00;
  1865  00DA84  0E00               	movlw	0
  1866  00DA86  6E94               	movwf	3988,c	;volatile
  1867                           
  1868                           ;Lab7-8.c: 298: TRISD = 0x00;
  1869  00DA88  0E00               	movlw	0
  1870  00DA8A  6E95               	movwf	3989,c	;volatile
  1871                           
  1872                           ;Lab7-8.c: 299: TRISE = 0x00;
  1873  00DA8C  0E00               	movlw	0
  1874  00DA8E  6E96               	movwf	3990,c	;volatile
  1875  00DA90  0012               	return		;funcret
  1876  00DA92                     __end_of_init_IO:
  1877                           	opt stack 0
  1878                           tblptru	equ	0xFF8
  1879                           tblptrh	equ	0xFF7
  1880                           tblptrl	equ	0xFF6
  1881                           tablat	equ	0xFF5
  1882                           intcon2	equ	0xFF1
  1883                           postinc0	equ	0xFEE
  1884                           wreg	equ	0xFE8
  1885                           postdec1	equ	0xFE5
  1886                           fsr1l	equ	0xFE1
  1887                           status	equ	0xFD8
  1888                           
  1889 ;; *************** function _Night_Mode *****************
  1890 ;; Defined at:
  1891 ;;		line 447 in file "Lab7-8.c"
  1892 ;; Parameters:    Size  Location     Type
  1893 ;;		None
  1894 ;; Auto vars:     Size  Location     Type
  1895 ;;		None
  1896 ;; Return value:  Size  Location     Type
  1897 ;;		None               void
  1898 ;; Registers used:
  1899 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1900 ;; Tracked objects:
  1901 ;;		On entry : 0/0
  1902 ;;		On exit  : 0/0
  1903 ;;		Unchanged: 0/0
  1904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1905 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1906 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1907 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1908 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1909 ;;Total ram usage:        0 bytes
  1910 ;; Hardware stack levels used:    1
  1911 ;; Hardware stack levels required when called:   10
  1912 ;; This function calls:
  1913 ;;		_Set_EW
  1914 ;;		_Set_EW_LT
  1915 ;;		_Set_NS
  1916 ;;		_Set_NS_LT
  1917 ;;		_Wait_N_Seconds
  1918 ;; This function is called by:
  1919 ;;		_main
  1920 ;; This function uses a non-reentrant model
  1921 ;;
  1922                           
  1923                           	psect	text4
  1924  00E382                     __ptext4:
  1925                           	opt stack 0
  1926  00E382                     _Night_Mode:
  1927                           	opt stack 20
  1928                           
  1929                           ;Lab7-8.c: 449: MODE = 0;
  1930                           
  1931                           ;incstack = 0
  1932  00E382  0E00               	movlw	0
  1933  00E384  6E68               	movwf	_MODE+1,c
  1934  00E386  0E00               	movlw	0
  1935  00E388  6E67               	movwf	_MODE,c
  1936                           
  1937                           ;Lab7-8.c: 450: PORTEbits.RE1 = 0;
  1938  00E38A  9284               	bcf	3972,1,c	;volatile
  1939                           
  1940                           ;Lab7-8.c: 451: Act_Mode_Txt[0] = 'N';
  1941  00E38C  0E4E               	movlw	78
  1942  00E38E  6E54               	movwf	_Act_Mode_Txt,c
  1943  00E390  D000               	goto	l3609
  1944  00E392                     l3609:
  1945                           
  1946                           ;Lab7-8.c: 454: {
  1947                           ;Lab7-8.c: 456: Set_EW(1);
  1948  00E392  0E01               	movlw	1
  1949  00E394  EC90  F06E         	call	_Set_EW
  1950                           
  1951                           ;Lab7-8.c: 457: Set_EW_LT(1);
  1952  00E398  0E01               	movlw	1
  1953  00E39A  ECB2  F06E         	call	_Set_EW_LT
  1954                           
  1955                           ;Lab7-8.c: 458: Set_NS_LT(1);
  1956  00E39E  0E01               	movlw	1
  1957  00E3A0  ECF6  F06E         	call	_Set_NS_LT
  1958                           
  1959                           ;Lab7-8.c: 459: Set_NS(2);
  1960  00E3A4  0E02               	movlw	2
  1961  00E3A6  ECD4  F06E         	call	_Set_NS
  1962                           
  1963                           ;Lab7-8.c: 460: Wait_N_Seconds(9);
  1964  00E3AA  0E09               	movlw	9
  1965  00E3AC  ECB2  F06D         	call	_Wait_N_Seconds
  1966                           
  1967                           ;Lab7-8.c: 461: Set_NS(3);
  1968  00E3B0  0E03               	movlw	3
  1969  00E3B2  ECD4  F06E         	call	_Set_NS
  1970                           
  1971                           ;Lab7-8.c: 462: Wait_N_Seconds(3);
  1972  00E3B6  0E03               	movlw	3
  1973  00E3B8  ECB2  F06D         	call	_Wait_N_Seconds
  1974                           
  1975                           ;Lab7-8.c: 463: Set_NS(1);
  1976  00E3BC  0E01               	movlw	1
  1977  00E3BE  ECD4  F06E         	call	_Set_NS
  1978                           
  1979                           ;Lab7-8.c: 464: if (PORTAbits.RA4==1)
  1980  00E3C2  A880               	btfss	3968,4,c	;volatile
  1981  00E3C4  D010               	goto	l3635
  1982                           
  1983                           ;Lab7-8.c: 465: {
  1984                           ;Lab7-8.c: 466: Set_EW_LT(2);
  1985  00E3C6  0E02               	movlw	2
  1986  00E3C8  ECB2  F06E         	call	_Set_EW_LT
  1987                           
  1988                           ;Lab7-8.c: 467: Wait_N_Seconds(7);
  1989  00E3CC  0E07               	movlw	7
  1990  00E3CE  ECB2  F06D         	call	_Wait_N_Seconds
  1991                           
  1992                           ;Lab7-8.c: 468: Set_EW_LT(3);
  1993  00E3D2  0E03               	movlw	3
  1994  00E3D4  ECB2  F06E         	call	_Set_EW_LT
  1995                           
  1996                           ;Lab7-8.c: 469: Wait_N_Seconds(3);
  1997  00E3D8  0E03               	movlw	3
  1998  00E3DA  ECB2  F06D         	call	_Wait_N_Seconds
  1999                           
  2000                           ;Lab7-8.c: 470: Set_EW_LT(1);
  2001  00E3DE  0E01               	movlw	1
  2002  00E3E0  ECB2  F06E         	call	_Set_EW_LT
  2003  00E3E4  D000               	goto	l3635
  2004  00E3E6                     l3635:
  2005                           
  2006                           ;Lab7-8.c: 471: }
  2007                           ;Lab7-8.c: 472: Set_EW(2);
  2008  00E3E6  0E02               	movlw	2
  2009  00E3E8  EC90  F06E         	call	_Set_EW
  2010                           
  2011                           ;Lab7-8.c: 473: Wait_N_Seconds(9);
  2012  00E3EC  0E09               	movlw	9
  2013  00E3EE  ECB2  F06D         	call	_Wait_N_Seconds
  2014                           
  2015                           ;Lab7-8.c: 474: Set_EW(3);
  2016  00E3F2  0E03               	movlw	3
  2017  00E3F4  EC90  F06E         	call	_Set_EW
  2018                           
  2019                           ;Lab7-8.c: 475: Wait_N_Seconds(3);
  2020  00E3F8  0E03               	movlw	3
  2021  00E3FA  ECB2  F06D         	call	_Wait_N_Seconds
  2022                           
  2023                           ;Lab7-8.c: 476: Set_EW(1);
  2024  00E3FE  0E01               	movlw	1
  2025  00E400  EC90  F06E         	call	_Set_EW
  2026                           
  2027                           ;Lab7-8.c: 477: if(PORTAbits.RA5==1)
  2028  00E404  AA80               	btfss	3968,5,c	;volatile
  2029  00E406  D011               	goto	l444
  2030                           
  2031                           ;Lab7-8.c: 478: {
  2032                           ;Lab7-8.c: 479: Set_NS_LT(2);
  2033  00E408  0E02               	movlw	2
  2034  00E40A  ECF6  F06E         	call	_Set_NS_LT
  2035                           
  2036                           ;Lab7-8.c: 480: Wait_N_Seconds(7);
  2037  00E40E  0E07               	movlw	7
  2038  00E410  ECB2  F06D         	call	_Wait_N_Seconds
  2039                           
  2040                           ;Lab7-8.c: 481: Set_NS_LT(3);
  2041  00E414  0E03               	movlw	3
  2042  00E416  ECF6  F06E         	call	_Set_NS_LT
  2043                           
  2044                           ;Lab7-8.c: 482: Wait_N_Seconds(3);
  2045  00E41A  0E03               	movlw	3
  2046  00E41C  ECB2  F06D         	call	_Wait_N_Seconds
  2047                           
  2048                           ;Lab7-8.c: 483: Set_NS_LT(1);
  2049  00E420  0E01               	movlw	1
  2050  00E422  ECF6  F06E         	call	_Set_NS_LT
  2051                           
  2052                           ;Lab7-8.c: 484: }
  2053                           ;Lab7-8.c: 485: break;
  2054  00E426  D001               	goto	l444
  2055  00E428  D7B4               	goto	l3609
  2056  00E42A                     l444:
  2057  00E42A  0012               	return		;funcret
  2058  00E42C                     __end_of_Night_Mode:
  2059                           	opt stack 0
  2060                           tblptru	equ	0xFF8
  2061                           tblptrh	equ	0xFF7
  2062                           tblptrl	equ	0xFF6
  2063                           tablat	equ	0xFF5
  2064                           intcon2	equ	0xFF1
  2065                           postinc0	equ	0xFEE
  2066                           wreg	equ	0xFE8
  2067                           postdec1	equ	0xFE5
  2068                           fsr1l	equ	0xFE1
  2069                           status	equ	0xFD8
  2070                           
  2071 ;; *************** function _Initialize_Screen *****************
  2072 ;; Defined at:
  2073 ;;		line 162 in file "Lab7-8.c"
  2074 ;; Parameters:    Size  Location     Type
  2075 ;;		None
  2076 ;; Auto vars:     Size  Location     Type
  2077 ;;		None
  2078 ;; Return value:  Size  Location     Type
  2079 ;;		None               void
  2080 ;; Registers used:
  2081 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2082 ;; Tracked objects:
  2083 ;;		On entry : 0/0
  2084 ;;		On exit  : 0/0
  2085 ;;		Unchanged: 0/0
  2086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2087 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2088 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2089 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2090 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2091 ;;Total ram usage:        0 bytes
  2092 ;; Hardware stack levels used:    1
  2093 ;; Hardware stack levels required when called:    7
  2094 ;; This function calls:
  2095 ;;		_LCD_Reset
  2096 ;;		_TFT_GreenTab_Initialize
  2097 ;;		_drawCircle
  2098 ;;		_drawRect
  2099 ;;		_drawtext
  2100 ;;		_fillCircle
  2101 ;;		_fillScreen
  2102 ;;		_strcpy
  2103 ;; This function is called by:
  2104 ;;		_main
  2105 ;; This function uses a non-reentrant model
  2106 ;;
  2107                           
  2108                           	psect	text5
  2109  00F69E                     __ptext5:
  2110                           	opt stack 0
  2111  00F69E                     _Initialize_Screen:
  2112                           	opt stack 23
  2113                           
  2114                           ;Lab7-8.c: 164: LCD_Reset();
  2115                           
  2116                           ;incstack = 0
  2117  00F69E  EC16  F06D         	call	_LCD_Reset	;wreg free
  2118                           
  2119                           ;Lab7-8.c: 165: TFT_GreenTab_Initialize();
  2120  00F6A2  EC9D  F06D         	call	_TFT_GreenTab_Initialize	;wreg free
  2121                           
  2122                           ;Lab7-8.c: 166: fillScreen(0x0000);
  2123  00F6A6  0E00               	movlw	0
  2124  00F6A8  6E15               	movwf	fillScreen@color+1,c
  2125  00F6AA  0E00               	movlw	0
  2126  00F6AC  6E14               	movwf	fillScreen@color,c
  2127  00F6AE  EC56  F06D         	call	_fillScreen	;wreg free
  2128                           
  2129                           ;Lab7-8.c: 169: txt = buffer;
  2130  00F6B2  0E80               	movlw	low _buffer
  2131  00F6B4  6E6B               	movwf	_txt,c
  2132  00F6B6  0E00               	movlw	high _buffer
  2133  00F6B8  6E6C               	movwf	_txt+1,c
  2134                           
  2135                           ;Lab7-8.c: 170: strcpy(txt, "ECE3301L Fall 21-S4");
  2136  00F6BA  C06B  F001         	movff	_txt,strcpy@to
  2137  00F6BE  C06C  F002         	movff	_txt+1,strcpy@to+1
  2138  00F6C2  0EAD               	movlw	low STR_1
  2139  00F6C4  6E03               	movwf	strcpy@from,c
  2140  00F6C6  0EFF               	movlw	high STR_1
  2141  00F6C8  6E04               	movwf	strcpy@from+1,c
  2142  00F6CA  ECFA  F06D         	call	_strcpy	;wreg free
  2143                           
  2144                           ;Lab7-8.c: 171: drawtext(2, 2, txt, 0xFFFF, 0x0000, 1);
  2145  00F6CE  0E02               	movlw	2
  2146  00F6D0  6E29               	movwf	drawtext@y,c
  2147  00F6D2  C06B  F02A         	movff	_txt,drawtext@_text
  2148  00F6D6  C06C  F02B         	movff	_txt+1,drawtext@_text+1
  2149  00F6DA  0EFF               	movlw	255
  2150  00F6DC  6E2D               	movwf	drawtext@color+1,c
  2151  00F6DE  682C               	setf	drawtext@color,c
  2152  00F6E0  0E00               	movlw	0
  2153  00F6E2  6E2F               	movwf	drawtext@bg+1,c
  2154  00F6E4  0E00               	movlw	0
  2155  00F6E6  6E2E               	movwf	drawtext@bg,c
  2156  00F6E8  0E01               	movlw	1
  2157  00F6EA  6E30               	movwf	drawtext@size,c
  2158  00F6EC  0E02               	movlw	2
  2159  00F6EE  EC01  F074         	call	_drawtext
  2160                           
  2161                           ;Lab7-8.c: 174: strcpy(txt, "Mode:");
  2162  00F6F2  C06B  F001         	movff	_txt,strcpy@to
  2163  00F6F6  C06C  F002         	movff	_txt+1,strcpy@to+1
  2164  00F6FA  0EE5               	movlw	low STR_2
  2165  00F6FC  6E03               	movwf	strcpy@from,c
  2166  00F6FE  0EFF               	movlw	high STR_2
  2167  00F700  6E04               	movwf	strcpy@from+1,c
  2168  00F702  ECFA  F06D         	call	_strcpy	;wreg free
  2169                           
  2170                           ;Lab7-8.c: 175: drawtext(2, 10, txt, 0xFFFF, 0x0000, 1);
  2171  00F706  0E0A               	movlw	10
  2172  00F708  6E29               	movwf	drawtext@y,c
  2173  00F70A  C06B  F02A         	movff	_txt,drawtext@_text
  2174  00F70E  C06C  F02B         	movff	_txt+1,drawtext@_text+1
  2175  00F712  0EFF               	movlw	255
  2176  00F714  6E2D               	movwf	drawtext@color+1,c
  2177  00F716  682C               	setf	drawtext@color,c
  2178  00F718  0E00               	movlw	0
  2179  00F71A  6E2F               	movwf	drawtext@bg+1,c
  2180  00F71C  0E00               	movlw	0
  2181  00F71E  6E2E               	movwf	drawtext@bg,c
  2182  00F720  0E01               	movlw	1
  2183  00F722  6E30               	movwf	drawtext@size,c
  2184  00F724  0E02               	movlw	2
  2185  00F726  EC01  F074         	call	_drawtext
  2186                           
  2187                           ;Lab7-8.c: 176: drawtext(35,10, Act_Mode_Txt, 0xFFFF, 0x0000, 1);
  2188  00F72A  0E0A               	movlw	10
  2189  00F72C  6E29               	movwf	drawtext@y,c
  2190  00F72E  0E54               	movlw	low _Act_Mode_Txt
  2191  00F730  6E2A               	movwf	drawtext@_text,c
  2192  00F732  0E00               	movlw	high _Act_Mode_Txt
  2193  00F734  6E2B               	movwf	drawtext@_text+1,c
  2194  00F736  0EFF               	movlw	255
  2195  00F738  6E2D               	movwf	drawtext@color+1,c
  2196  00F73A  682C               	setf	drawtext@color,c
  2197  00F73C  0E00               	movlw	0
  2198  00F73E  6E2F               	movwf	drawtext@bg+1,c
  2199  00F740  0E00               	movlw	0
  2200  00F742  6E2E               	movwf	drawtext@bg,c
  2201  00F744  0E01               	movlw	1
  2202  00F746  6E30               	movwf	drawtext@size,c
  2203  00F748  0E23               	movlw	35
  2204  00F74A  EC01  F074         	call	_drawtext
  2205                           
  2206                           ;Lab7-8.c: 179: strcpy(txt, "FR:");
  2207  00F74E  C06B  F001         	movff	_txt,strcpy@to
  2208  00F752  C06C  F002         	movff	_txt+1,strcpy@to+1
  2209  00F756  0EEB               	movlw	low STR_3
  2210  00F758  6E03               	movwf	strcpy@from,c
  2211  00F75A  0EFF               	movlw	high STR_3
  2212  00F75C  6E04               	movwf	strcpy@from+1,c
  2213  00F75E  ECFA  F06D         	call	_strcpy	;wreg free
  2214                           
  2215                           ;Lab7-8.c: 180: drawtext(50, 10, txt, 0xFFFF, 0x0000, 1);
  2216  00F762  0E0A               	movlw	10
  2217  00F764  6E29               	movwf	drawtext@y,c
  2218  00F766  C06B  F02A         	movff	_txt,drawtext@_text
  2219  00F76A  C06C  F02B         	movff	_txt+1,drawtext@_text+1
  2220  00F76E  0EFF               	movlw	255
  2221  00F770  6E2D               	movwf	drawtext@color+1,c
  2222  00F772  682C               	setf	drawtext@color,c
  2223  00F774  0E00               	movlw	0
  2224  00F776  6E2F               	movwf	drawtext@bg+1,c
  2225  00F778  0E00               	movlw	0
  2226  00F77A  6E2E               	movwf	drawtext@bg,c
  2227  00F77C  0E01               	movlw	1
  2228  00F77E  6E30               	movwf	drawtext@size,c
  2229  00F780  0E32               	movlw	50
  2230  00F782  EC01  F074         	call	_drawtext
  2231                           
  2232                           ;Lab7-8.c: 181: drawtext(70, 10, FlashingR_Txt, 0xFFFF, 0x0000, 1);
  2233  00F786  0E0A               	movlw	10
  2234  00F788  6E29               	movwf	drawtext@y,c
  2235  00F78A  0E56               	movlw	low _FlashingR_Txt
  2236  00F78C  6E2A               	movwf	drawtext@_text,c
  2237  00F78E  0E00               	movlw	high _FlashingR_Txt
  2238  00F790  6E2B               	movwf	drawtext@_text+1,c
  2239  00F792  0EFF               	movlw	255
  2240  00F794  6E2D               	movwf	drawtext@color+1,c
  2241  00F796  682C               	setf	drawtext@color,c
  2242  00F798  0E00               	movlw	0
  2243  00F79A  6E2F               	movwf	drawtext@bg+1,c
  2244  00F79C  0E00               	movlw	0
  2245  00F79E  6E2E               	movwf	drawtext@bg,c
  2246  00F7A0  0E01               	movlw	1
  2247  00F7A2  6E30               	movwf	drawtext@size,c
  2248  00F7A4  0E46               	movlw	70
  2249  00F7A6  EC01  F074         	call	_drawtext
  2250                           
  2251                           ;Lab7-8.c: 184: strcpy(txt, "FS:");
  2252  00F7AA  C06B  F001         	movff	_txt,strcpy@to
  2253  00F7AE  C06C  F002         	movff	_txt+1,strcpy@to+1
  2254  00F7B2  0EEF               	movlw	low STR_4
  2255  00F7B4  6E03               	movwf	strcpy@from,c
  2256  00F7B6  0EFF               	movlw	high STR_4
  2257  00F7B8  6E04               	movwf	strcpy@from+1,c
  2258  00F7BA  ECFA  F06D         	call	_strcpy	;wreg free
  2259                           
  2260                           ;Lab7-8.c: 185: drawtext(80, 10, txt, 0xFFFF, 0x0000, 1);
  2261  00F7BE  0E0A               	movlw	10
  2262  00F7C0  6E29               	movwf	drawtext@y,c
  2263  00F7C2  C06B  F02A         	movff	_txt,drawtext@_text
  2264  00F7C6  C06C  F02B         	movff	_txt+1,drawtext@_text+1
  2265  00F7CA  0EFF               	movlw	255
  2266  00F7CC  6E2D               	movwf	drawtext@color+1,c
  2267  00F7CE  682C               	setf	drawtext@color,c
  2268  00F7D0  0E00               	movlw	0
  2269  00F7D2  6E2F               	movwf	drawtext@bg+1,c
  2270  00F7D4  0E00               	movlw	0
  2271  00F7D6  6E2E               	movwf	drawtext@bg,c
  2272  00F7D8  0E01               	movlw	1
  2273  00F7DA  6E30               	movwf	drawtext@size,c
  2274  00F7DC  0E50               	movlw	80
  2275  00F7DE  EC01  F074         	call	_drawtext
  2276                           
  2277                           ;Lab7-8.c: 186: drawtext(100, 10, FlashingS_Txt, 0xFFFF, 0x0000, 1);
  2278  00F7E2  0E0A               	movlw	10
  2279  00F7E4  6E29               	movwf	drawtext@y,c
  2280  00F7E6  0E58               	movlw	low _FlashingS_Txt
  2281  00F7E8  6E2A               	movwf	drawtext@_text,c
  2282  00F7EA  0E00               	movlw	high _FlashingS_Txt
  2283  00F7EC  6E2B               	movwf	drawtext@_text+1,c
  2284  00F7EE  0EFF               	movlw	255
  2285  00F7F0  6E2D               	movwf	drawtext@color+1,c
  2286  00F7F2  682C               	setf	drawtext@color,c
  2287  00F7F4  0E00               	movlw	0
  2288  00F7F6  6E2F               	movwf	drawtext@bg+1,c
  2289  00F7F8  0E00               	movlw	0
  2290  00F7FA  6E2E               	movwf	drawtext@bg,c
  2291  00F7FC  0E01               	movlw	1
  2292  00F7FE  6E30               	movwf	drawtext@size,c
  2293  00F800  0E64               	movlw	100
  2294  00F802  EC01  F074         	call	_drawtext
  2295                           
  2296                           ;Lab7-8.c: 189: strcpy(txt, "*");
  2297  00F806  C06B  F001         	movff	_txt,strcpy@to
  2298  00F80A  C06C  F002         	movff	_txt+1,strcpy@to+1
  2299  00F80E  0EFD               	movlw	low STR_5
  2300  00F810  6E03               	movwf	strcpy@from,c
  2301  00F812  0EFF               	movlw	high STR_5
  2302  00F814  6E04               	movwf	strcpy@from+1,c
  2303  00F816  ECFA  F06D         	call	_strcpy	;wreg free
  2304                           
  2305                           ;Lab7-8.c: 190: drawtext(120, 10, txt, 0xFFFF, 0x0000, 1);
  2306  00F81A  0E0A               	movlw	10
  2307  00F81C  6E29               	movwf	drawtext@y,c
  2308  00F81E  C06B  F02A         	movff	_txt,drawtext@_text
  2309  00F822  C06C  F02B         	movff	_txt+1,drawtext@_text+1
  2310  00F826  0EFF               	movlw	255
  2311  00F828  6E2D               	movwf	drawtext@color+1,c
  2312  00F82A  682C               	setf	drawtext@color,c
  2313  00F82C  0E00               	movlw	0
  2314  00F82E  6E2F               	movwf	drawtext@bg+1,c
  2315  00F830  0E00               	movlw	0
  2316  00F832  6E2E               	movwf	drawtext@bg,c
  2317  00F834  0E01               	movlw	1
  2318  00F836  6E30               	movwf	drawtext@size,c
  2319  00F838  0E78               	movlw	120
  2320  00F83A  EC01  F074         	call	_drawtext
  2321                           
  2322                           ;Lab7-8.c: 193: strcpy(txt, "EAST/WEST");
  2323  00F83E  C06B  F001         	movff	_txt,strcpy@to
  2324  00F842  C06C  F002         	movff	_txt+1,strcpy@to+1
  2325  00F846  0ECD               	movlw	low STR_6
  2326  00F848  6E03               	movwf	strcpy@from,c
  2327  00F84A  0EFF               	movlw	high STR_6
  2328  00F84C  6E04               	movwf	strcpy@from+1,c
  2329  00F84E  ECFA  F06D         	call	_strcpy	;wreg free
  2330                           
  2331                           ;Lab7-8.c: 194: drawtext (30, 20, txt, 0x07FF, 0x0000, 1);
  2332  00F852  0E14               	movlw	20
  2333  00F854  6E29               	movwf	drawtext@y,c
  2334  00F856  C06B  F02A         	movff	_txt,drawtext@_text
  2335  00F85A  C06C  F02B         	movff	_txt+1,drawtext@_text+1
  2336  00F85E  0E07               	movlw	7
  2337  00F860  6E2D               	movwf	drawtext@color+1,c
  2338  00F862  682C               	setf	drawtext@color,c
  2339  00F864  0E00               	movlw	0
  2340  00F866  6E2F               	movwf	drawtext@bg+1,c
  2341  00F868  0E00               	movlw	0
  2342  00F86A  6E2E               	movwf	drawtext@bg,c
  2343  00F86C  0E01               	movlw	1
  2344  00F86E  6E30               	movwf	drawtext@size,c
  2345  00F870  0E1E               	movlw	30
  2346  00F872  EC01  F074         	call	_drawtext
  2347                           
  2348                           ;Lab7-8.c: 195: drawRect (30, 20 + 15-8, 60, 18, 0x07FF);
  2349  00F876  0E00               	movlw	0
  2350  00F878  6E14               	movwf	drawRect@x+1,c
  2351  00F87A  0E1E               	movlw	30
  2352  00F87C  6E13               	movwf	drawRect@x,c
  2353  00F87E  0E00               	movlw	0
  2354  00F880  6E16               	movwf	drawRect@y+1,c
  2355  00F882  0E1B               	movlw	27
  2356  00F884  6E15               	movwf	drawRect@y,c
  2357  00F886  0E00               	movlw	0
  2358  00F888  6E18               	movwf	drawRect@w+1,c
  2359  00F88A  0E3C               	movlw	60
  2360  00F88C  6E17               	movwf	drawRect@w,c
  2361  00F88E  0E00               	movlw	0
  2362  00F890  6E1A               	movwf	drawRect@h+1,c
  2363  00F892  0E12               	movlw	18
  2364  00F894  6E19               	movwf	drawRect@h,c
  2365  00F896  0E07               	movlw	7
  2366  00F898  6E1C               	movwf	drawRect@color+1,c
  2367  00F89A  681B               	setf	drawRect@color,c
  2368  00F89C  ECB6  F06F         	call	_drawRect	;wreg free
  2369                           
  2370                           ;Lab7-8.c: 196: drawCircle(40, 20 + 15, 7, 0xF800);
  2371  00F8A0  0E00               	movlw	0
  2372  00F8A2  6E0D               	movwf	drawCircle@x0+1,c
  2373  00F8A4  0E28               	movlw	40
  2374  00F8A6  6E0C               	movwf	drawCircle@x0,c
  2375  00F8A8  0E00               	movlw	0
  2376  00F8AA  6E0F               	movwf	drawCircle@y0+1,c
  2377  00F8AC  0E23               	movlw	35
  2378  00F8AE  6E0E               	movwf	drawCircle@y0,c
  2379  00F8B0  0E00               	movlw	0
  2380  00F8B2  6E11               	movwf	drawCircle@r+1,c
  2381  00F8B4  0E07               	movlw	7
  2382  00F8B6  6E10               	movwf	drawCircle@r,c
  2383  00F8B8  0EF8               	movlw	248
  2384  00F8BA  6E13               	movwf	drawCircle@color+1,c
  2385  00F8BC  0E00               	movlw	0
  2386  00F8BE  6E12               	movwf	drawCircle@color,c
  2387  00F8C0  ECE8  F077         	call	_drawCircle	;wreg free
  2388                           
  2389                           ;Lab7-8.c: 197: drawCircle(60, 20 + 15, 7, 0xFFE0);
  2390  00F8C4  0E00               	movlw	0
  2391  00F8C6  6E0D               	movwf	drawCircle@x0+1,c
  2392  00F8C8  0E3C               	movlw	60
  2393  00F8CA  6E0C               	movwf	drawCircle@x0,c
  2394  00F8CC  0E00               	movlw	0
  2395  00F8CE  6E0F               	movwf	drawCircle@y0+1,c
  2396  00F8D0  0E23               	movlw	35
  2397  00F8D2  6E0E               	movwf	drawCircle@y0,c
  2398  00F8D4  0E00               	movlw	0
  2399  00F8D6  6E11               	movwf	drawCircle@r+1,c
  2400  00F8D8  0E07               	movlw	7
  2401  00F8DA  6E10               	movwf	drawCircle@r,c
  2402  00F8DC  0EFF               	movlw	255
  2403  00F8DE  6E13               	movwf	drawCircle@color+1,c
  2404  00F8E0  0EE0               	movlw	224
  2405  00F8E2  6E12               	movwf	drawCircle@color,c
  2406  00F8E4  ECE8  F077         	call	_drawCircle	;wreg free
  2407                           
  2408                           ;Lab7-8.c: 198: fillCircle(80, 20 + 15, 7, 0x07E0);
  2409  00F8E8  0E00               	movlw	0
  2410  00F8EA  6E2C               	movwf	fillCircle@x0+1,c
  2411  00F8EC  0E50               	movlw	80
  2412  00F8EE  6E2B               	movwf	fillCircle@x0,c
  2413  00F8F0  0E00               	movlw	0
  2414  00F8F2  6E2E               	movwf	fillCircle@y0+1,c
  2415  00F8F4  0E23               	movlw	35
  2416  00F8F6  6E2D               	movwf	fillCircle@y0,c
  2417  00F8F8  0E00               	movlw	0
  2418  00F8FA  6E30               	movwf	fillCircle@r+1,c
  2419  00F8FC  0E07               	movlw	7
  2420  00F8FE  6E2F               	movwf	fillCircle@r,c
  2421  00F900  0E07               	movlw	7
  2422  00F902  6E32               	movwf	fillCircle@color+1,c
  2423  00F904  0EE0               	movlw	224
  2424  00F906  6E31               	movwf	fillCircle@color,c
  2425  00F908  EC64  F06F         	call	_fillCircle	;wreg free
  2426                           
  2427                           ;Lab7-8.c: 199: drawtext (100, 20 + 10, EW_Count, 0x07FF, 0x0000, 2);
  2428  00F90C  0E1E               	movlw	30
  2429  00F90E  6E29               	movwf	drawtext@y,c
  2430  00F910  0E45               	movlw	low _EW_Count
  2431  00F912  6E2A               	movwf	drawtext@_text,c
  2432  00F914  0E00               	movlw	high _EW_Count
  2433  00F916  6E2B               	movwf	drawtext@_text+1,c
  2434  00F918  0E07               	movlw	7
  2435  00F91A  6E2D               	movwf	drawtext@color+1,c
  2436  00F91C  682C               	setf	drawtext@color,c
  2437  00F91E  0E00               	movlw	0
  2438  00F920  6E2F               	movwf	drawtext@bg+1,c
  2439  00F922  0E00               	movlw	0
  2440  00F924  6E2E               	movwf	drawtext@bg,c
  2441  00F926  0E02               	movlw	2
  2442  00F928  6E30               	movwf	drawtext@size,c
  2443  00F92A  0E64               	movlw	100
  2444  00F92C  EC01  F074         	call	_drawtext
  2445                           
  2446                           ;Lab7-8.c: 203: strcpy(txt, "E/W LT");
  2447  00F930  C06B  F001         	movff	_txt,strcpy@to
  2448  00F934  C06C  F002         	movff	_txt+1,strcpy@to+1
  2449  00F938  0EDE               	movlw	low STR_7
  2450  00F93A  6E03               	movwf	strcpy@from,c
  2451  00F93C  0EFF               	movlw	high STR_7
  2452  00F93E  6E04               	movwf	strcpy@from+1,c
  2453  00F940  ECFA  F06D         	call	_strcpy	;wreg free
  2454                           
  2455                           ;Lab7-8.c: 204: drawtext (30, 50, txt, 0xFFFF, 0x0000, 1);
  2456  00F944  0E32               	movlw	50
  2457  00F946  6E29               	movwf	drawtext@y,c
  2458  00F948  C06B  F02A         	movff	_txt,drawtext@_text
  2459  00F94C  C06C  F02B         	movff	_txt+1,drawtext@_text+1
  2460  00F950  0EFF               	movlw	255
  2461  00F952  6E2D               	movwf	drawtext@color+1,c
  2462  00F954  682C               	setf	drawtext@color,c
  2463  00F956  0E00               	movlw	0
  2464  00F958  6E2F               	movwf	drawtext@bg+1,c
  2465  00F95A  0E00               	movlw	0
  2466  00F95C  6E2E               	movwf	drawtext@bg,c
  2467  00F95E  0E01               	movlw	1
  2468  00F960  6E30               	movwf	drawtext@size,c
  2469  00F962  0E1E               	movlw	30
  2470  00F964  EC01  F074         	call	_drawtext
  2471                           
  2472                           ;Lab7-8.c: 205: drawRect (30, 50 + 15-8, 60, 18, 0xFFFF);
  2473  00F968  0E00               	movlw	0
  2474  00F96A  6E14               	movwf	drawRect@x+1,c
  2475  00F96C  0E1E               	movlw	30
  2476  00F96E  6E13               	movwf	drawRect@x,c
  2477  00F970  0E00               	movlw	0
  2478  00F972  6E16               	movwf	drawRect@y+1,c
  2479  00F974  0E39               	movlw	57
  2480  00F976  6E15               	movwf	drawRect@y,c
  2481  00F978  0E00               	movlw	0
  2482  00F97A  6E18               	movwf	drawRect@w+1,c
  2483  00F97C  0E3C               	movlw	60
  2484  00F97E  6E17               	movwf	drawRect@w,c
  2485  00F980  0E00               	movlw	0
  2486  00F982  6E1A               	movwf	drawRect@h+1,c
  2487  00F984  0E12               	movlw	18
  2488  00F986  6E19               	movwf	drawRect@h,c
  2489  00F988  0EFF               	movlw	255
  2490  00F98A  6E1C               	movwf	drawRect@color+1,c
  2491  00F98C  681B               	setf	drawRect@color,c
  2492  00F98E  ECB6  F06F         	call	_drawRect	;wreg free
  2493                           
  2494                           ;Lab7-8.c: 206: fillCircle(40, 50 + 15, 7, 0xF800);
  2495  00F992  0E00               	movlw	0
  2496  00F994  6E2C               	movwf	fillCircle@x0+1,c
  2497  00F996  0E28               	movlw	40
  2498  00F998  6E2B               	movwf	fillCircle@x0,c
  2499  00F99A  0E00               	movlw	0
  2500  00F99C  6E2E               	movwf	fillCircle@y0+1,c
  2501  00F99E  0E41               	movlw	65
  2502  00F9A0  6E2D               	movwf	fillCircle@y0,c
  2503  00F9A2  0E00               	movlw	0
  2504  00F9A4  6E30               	movwf	fillCircle@r+1,c
  2505  00F9A6  0E07               	movlw	7
  2506  00F9A8  6E2F               	movwf	fillCircle@r,c
  2507  00F9AA  0EF8               	movlw	248
  2508  00F9AC  6E32               	movwf	fillCircle@color+1,c
  2509  00F9AE  0E00               	movlw	0
  2510  00F9B0  6E31               	movwf	fillCircle@color,c
  2511  00F9B2  EC64  F06F         	call	_fillCircle	;wreg free
  2512                           
  2513                           ;Lab7-8.c: 207: drawCircle(60, 50 + 15, 7, 0xFFE0);
  2514  00F9B6  0E00               	movlw	0
  2515  00F9B8  6E0D               	movwf	drawCircle@x0+1,c
  2516  00F9BA  0E3C               	movlw	60
  2517  00F9BC  6E0C               	movwf	drawCircle@x0,c
  2518  00F9BE  0E00               	movlw	0
  2519  00F9C0  6E0F               	movwf	drawCircle@y0+1,c
  2520  00F9C2  0E41               	movlw	65
  2521  00F9C4  6E0E               	movwf	drawCircle@y0,c
  2522  00F9C6  0E00               	movlw	0
  2523  00F9C8  6E11               	movwf	drawCircle@r+1,c
  2524  00F9CA  0E07               	movlw	7
  2525  00F9CC  6E10               	movwf	drawCircle@r,c
  2526  00F9CE  0EFF               	movlw	255
  2527  00F9D0  6E13               	movwf	drawCircle@color+1,c
  2528  00F9D2  0EE0               	movlw	224
  2529  00F9D4  6E12               	movwf	drawCircle@color,c
  2530  00F9D6  ECE8  F077         	call	_drawCircle	;wreg free
  2531                           
  2532                           ;Lab7-8.c: 208: drawCircle(80, 50 + 15, 7, 0x07E0);
  2533  00F9DA  0E00               	movlw	0
  2534  00F9DC  6E0D               	movwf	drawCircle@x0+1,c
  2535  00F9DE  0E50               	movlw	80
  2536  00F9E0  6E0C               	movwf	drawCircle@x0,c
  2537  00F9E2  0E00               	movlw	0
  2538  00F9E4  6E0F               	movwf	drawCircle@y0+1,c
  2539  00F9E6  0E41               	movlw	65
  2540  00F9E8  6E0E               	movwf	drawCircle@y0,c
  2541  00F9EA  0E00               	movlw	0
  2542  00F9EC  6E11               	movwf	drawCircle@r+1,c
  2543  00F9EE  0E07               	movlw	7
  2544  00F9F0  6E10               	movwf	drawCircle@r,c
  2545  00F9F2  0E07               	movlw	7
  2546  00F9F4  6E13               	movwf	drawCircle@color+1,c
  2547  00F9F6  0EE0               	movlw	224
  2548  00F9F8  6E12               	movwf	drawCircle@color,c
  2549  00F9FA  ECE8  F077         	call	_drawCircle	;wreg free
  2550                           
  2551                           ;Lab7-8.c: 209: drawtext (100, 50 + 10, EWLT_Count, 0xFFFF, 0x0000, 2);
  2552  00F9FE  0E3C               	movlw	60
  2553  00FA00  6E29               	movwf	drawtext@y,c
  2554  00FA02  0E42               	movlw	low _EWLT_Count
  2555  00FA04  6E2A               	movwf	drawtext@_text,c
  2556  00FA06  0E00               	movlw	high _EWLT_Count
  2557  00FA08  6E2B               	movwf	drawtext@_text+1,c
  2558  00FA0A  0EFF               	movlw	255
  2559  00FA0C  6E2D               	movwf	drawtext@color+1,c
  2560  00FA0E  682C               	setf	drawtext@color,c
  2561  00FA10  0E00               	movlw	0
  2562  00FA12  6E2F               	movwf	drawtext@bg+1,c
  2563  00FA14  0E00               	movlw	0
  2564  00FA16  6E2E               	movwf	drawtext@bg,c
  2565  00FA18  0E02               	movlw	2
  2566  00FA1A  6E30               	movwf	drawtext@size,c
  2567  00FA1C  0E64               	movlw	100
  2568  00FA1E  EC01  F074         	call	_drawtext
  2569                           
  2570                           ;Lab7-8.c: 212: strcpy(txt, "NORTH/SOUTH");
  2571  00FA22  C06B  F001         	movff	_txt,strcpy@to
  2572  00FA26  C06C  F002         	movff	_txt+1,strcpy@to+1
  2573  00FA2A  0EC1               	movlw	low STR_8
  2574  00FA2C  6E03               	movwf	strcpy@from,c
  2575  00FA2E  0EFF               	movlw	high STR_8
  2576  00FA30  6E04               	movwf	strcpy@from+1,c
  2577  00FA32  ECFA  F06D         	call	_strcpy	;wreg free
  2578                           
  2579                           ;Lab7-8.c: 213: drawtext (30, 80 , txt, 0x001F, 0x0000, 1);
  2580  00FA36  0E50               	movlw	80
  2581  00FA38  6E29               	movwf	drawtext@y,c
  2582  00FA3A  C06B  F02A         	movff	_txt,drawtext@_text
  2583  00FA3E  C06C  F02B         	movff	_txt+1,drawtext@_text+1
  2584  00FA42  0E00               	movlw	0
  2585  00FA44  6E2D               	movwf	drawtext@color+1,c
  2586  00FA46  0E1F               	movlw	31
  2587  00FA48  6E2C               	movwf	drawtext@color,c
  2588  00FA4A  0E00               	movlw	0
  2589  00FA4C  6E2F               	movwf	drawtext@bg+1,c
  2590  00FA4E  0E00               	movlw	0
  2591  00FA50  6E2E               	movwf	drawtext@bg,c
  2592  00FA52  0E01               	movlw	1
  2593  00FA54  6E30               	movwf	drawtext@size,c
  2594  00FA56  0E1E               	movlw	30
  2595  00FA58  EC01  F074         	call	_drawtext
  2596                           
  2597                           ;Lab7-8.c: 214: drawRect (30, 80 + 15-8, 60, 18, 0x001F);
  2598  00FA5C  0E00               	movlw	0
  2599  00FA5E  6E14               	movwf	drawRect@x+1,c
  2600  00FA60  0E1E               	movlw	30
  2601  00FA62  6E13               	movwf	drawRect@x,c
  2602  00FA64  0E00               	movlw	0
  2603  00FA66  6E16               	movwf	drawRect@y+1,c
  2604  00FA68  0E57               	movlw	87
  2605  00FA6A  6E15               	movwf	drawRect@y,c
  2606  00FA6C  0E00               	movlw	0
  2607  00FA6E  6E18               	movwf	drawRect@w+1,c
  2608  00FA70  0E3C               	movlw	60
  2609  00FA72  6E17               	movwf	drawRect@w,c
  2610  00FA74  0E00               	movlw	0
  2611  00FA76  6E1A               	movwf	drawRect@h+1,c
  2612  00FA78  0E12               	movlw	18
  2613  00FA7A  6E19               	movwf	drawRect@h,c
  2614  00FA7C  0E00               	movlw	0
  2615  00FA7E  6E1C               	movwf	drawRect@color+1,c
  2616  00FA80  0E1F               	movlw	31
  2617  00FA82  6E1B               	movwf	drawRect@color,c
  2618  00FA84  ECB6  F06F         	call	_drawRect	;wreg free
  2619                           
  2620                           ;Lab7-8.c: 215: fillCircle(40, 80 + 15 , 7, 0xF800);
  2621  00FA88  0E00               	movlw	0
  2622  00FA8A  6E2C               	movwf	fillCircle@x0+1,c
  2623  00FA8C  0E28               	movlw	40
  2624  00FA8E  6E2B               	movwf	fillCircle@x0,c
  2625  00FA90  0E00               	movlw	0
  2626  00FA92  6E2E               	movwf	fillCircle@y0+1,c
  2627  00FA94  0E5F               	movlw	95
  2628  00FA96  6E2D               	movwf	fillCircle@y0,c
  2629  00FA98  0E00               	movlw	0
  2630  00FA9A  6E30               	movwf	fillCircle@r+1,c
  2631  00FA9C  0E07               	movlw	7
  2632  00FA9E  6E2F               	movwf	fillCircle@r,c
  2633  00FAA0  0EF8               	movlw	248
  2634  00FAA2  6E32               	movwf	fillCircle@color+1,c
  2635  00FAA4  0E00               	movlw	0
  2636  00FAA6  6E31               	movwf	fillCircle@color,c
  2637  00FAA8  EC64  F06F         	call	_fillCircle	;wreg free
  2638                           
  2639                           ;Lab7-8.c: 216: drawCircle(60, 80 + 15 , 7, 0xFFE0);
  2640  00FAAC  0E00               	movlw	0
  2641  00FAAE  6E0D               	movwf	drawCircle@x0+1,c
  2642  00FAB0  0E3C               	movlw	60
  2643  00FAB2  6E0C               	movwf	drawCircle@x0,c
  2644  00FAB4  0E00               	movlw	0
  2645  00FAB6  6E0F               	movwf	drawCircle@y0+1,c
  2646  00FAB8  0E5F               	movlw	95
  2647  00FABA  6E0E               	movwf	drawCircle@y0,c
  2648  00FABC  0E00               	movlw	0
  2649  00FABE  6E11               	movwf	drawCircle@r+1,c
  2650  00FAC0  0E07               	movlw	7
  2651  00FAC2  6E10               	movwf	drawCircle@r,c
  2652  00FAC4  0EFF               	movlw	255
  2653  00FAC6  6E13               	movwf	drawCircle@color+1,c
  2654  00FAC8  0EE0               	movlw	224
  2655  00FACA  6E12               	movwf	drawCircle@color,c
  2656  00FACC  ECE8  F077         	call	_drawCircle	;wreg free
  2657                           
  2658                           ;Lab7-8.c: 217: drawCircle(80, 80 + 15 , 7, 0x07E0);
  2659  00FAD0  0E00               	movlw	0
  2660  00FAD2  6E0D               	movwf	drawCircle@x0+1,c
  2661  00FAD4  0E50               	movlw	80
  2662  00FAD6  6E0C               	movwf	drawCircle@x0,c
  2663  00FAD8  0E00               	movlw	0
  2664  00FADA  6E0F               	movwf	drawCircle@y0+1,c
  2665  00FADC  0E5F               	movlw	95
  2666  00FADE  6E0E               	movwf	drawCircle@y0,c
  2667  00FAE0  0E00               	movlw	0
  2668  00FAE2  6E11               	movwf	drawCircle@r+1,c
  2669  00FAE4  0E07               	movlw	7
  2670  00FAE6  6E10               	movwf	drawCircle@r,c
  2671  00FAE8  0E07               	movlw	7
  2672  00FAEA  6E13               	movwf	drawCircle@color+1,c
  2673  00FAEC  0EE0               	movlw	224
  2674  00FAEE  6E12               	movwf	drawCircle@color,c
  2675  00FAF0  ECE8  F077         	call	_drawCircle	;wreg free
  2676                           
  2677                           ;Lab7-8.c: 218: drawtext (100, 80 + 10, NS_Count, 0x001F, 0x0000, 2);
  2678  00FAF4  0E5A               	movlw	90
  2679  00FAF6  6E29               	movwf	drawtext@y,c
  2680  00FAF8  0E4B               	movlw	low _NS_Count
  2681  00FAFA  6E2A               	movwf	drawtext@_text,c
  2682  00FAFC  0E00               	movlw	high _NS_Count
  2683  00FAFE  6E2B               	movwf	drawtext@_text+1,c
  2684  00FB00  0E00               	movlw	0
  2685  00FB02  6E2D               	movwf	drawtext@color+1,c
  2686  00FB04  0E1F               	movlw	31
  2687  00FB06  6E2C               	movwf	drawtext@color,c
  2688  00FB08  0E00               	movlw	0
  2689  00FB0A  6E2F               	movwf	drawtext@bg+1,c
  2690  00FB0C  0E00               	movlw	0
  2691  00FB0E  6E2E               	movwf	drawtext@bg,c
  2692  00FB10  0E02               	movlw	2
  2693  00FB12  6E30               	movwf	drawtext@size,c
  2694  00FB14  0E64               	movlw	100
  2695  00FB16  EC01  F074         	call	_drawtext
  2696                           
  2697                           ;Lab7-8.c: 221: strcpy(txt, "N/S LT");
  2698  00FB1A  C06B  F001         	movff	_txt,strcpy@to
  2699  00FB1E  C06C  F002         	movff	_txt+1,strcpy@to+1
  2700  00FB22  0ED7               	movlw	low STR_9
  2701  00FB24  6E03               	movwf	strcpy@from,c
  2702  00FB26  0EFF               	movlw	high STR_9
  2703  00FB28  6E04               	movwf	strcpy@from+1,c
  2704  00FB2A  ECFA  F06D         	call	_strcpy	;wreg free
  2705                           
  2706                           ;Lab7-8.c: 222: drawtext (30, 110, txt, 0xF81F, 0x0000, 1);
  2707  00FB2E  0E6E               	movlw	110
  2708  00FB30  6E29               	movwf	drawtext@y,c
  2709  00FB32  C06B  F02A         	movff	_txt,drawtext@_text
  2710  00FB36  C06C  F02B         	movff	_txt+1,drawtext@_text+1
  2711  00FB3A  0EF8               	movlw	248
  2712  00FB3C  6E2D               	movwf	drawtext@color+1,c
  2713  00FB3E  0E1F               	movlw	31
  2714  00FB40  6E2C               	movwf	drawtext@color,c
  2715  00FB42  0E00               	movlw	0
  2716  00FB44  6E2F               	movwf	drawtext@bg+1,c
  2717  00FB46  0E00               	movlw	0
  2718  00FB48  6E2E               	movwf	drawtext@bg,c
  2719  00FB4A  0E01               	movlw	1
  2720  00FB4C  6E30               	movwf	drawtext@size,c
  2721  00FB4E  0E1E               	movlw	30
  2722  00FB50  EC01  F074         	call	_drawtext
  2723                           
  2724                           ;Lab7-8.c: 223: drawRect (30, 110 + 15-8, 60, 18, 0xF81F);
  2725  00FB54  0E00               	movlw	0
  2726  00FB56  6E14               	movwf	drawRect@x+1,c
  2727  00FB58  0E1E               	movlw	30
  2728  00FB5A  6E13               	movwf	drawRect@x,c
  2729  00FB5C  0E00               	movlw	0
  2730  00FB5E  6E16               	movwf	drawRect@y+1,c
  2731  00FB60  0E75               	movlw	117
  2732  00FB62  6E15               	movwf	drawRect@y,c
  2733  00FB64  0E00               	movlw	0
  2734  00FB66  6E18               	movwf	drawRect@w+1,c
  2735  00FB68  0E3C               	movlw	60
  2736  00FB6A  6E17               	movwf	drawRect@w,c
  2737  00FB6C  0E00               	movlw	0
  2738  00FB6E  6E1A               	movwf	drawRect@h+1,c
  2739  00FB70  0E12               	movlw	18
  2740  00FB72  6E19               	movwf	drawRect@h,c
  2741  00FB74  0EF8               	movlw	248
  2742  00FB76  6E1C               	movwf	drawRect@color+1,c
  2743  00FB78  0E1F               	movlw	31
  2744  00FB7A  6E1B               	movwf	drawRect@color,c
  2745  00FB7C  ECB6  F06F         	call	_drawRect	;wreg free
  2746                           
  2747                           ;Lab7-8.c: 224: fillCircle(40, 110 + 15, 7, 0xF800);
  2748  00FB80  0E00               	movlw	0
  2749  00FB82  6E2C               	movwf	fillCircle@x0+1,c
  2750  00FB84  0E28               	movlw	40
  2751  00FB86  6E2B               	movwf	fillCircle@x0,c
  2752  00FB88  0E00               	movlw	0
  2753  00FB8A  6E2E               	movwf	fillCircle@y0+1,c
  2754  00FB8C  0E7D               	movlw	125
  2755  00FB8E  6E2D               	movwf	fillCircle@y0,c
  2756  00FB90  0E00               	movlw	0
  2757  00FB92  6E30               	movwf	fillCircle@r+1,c
  2758  00FB94  0E07               	movlw	7
  2759  00FB96  6E2F               	movwf	fillCircle@r,c
  2760  00FB98  0EF8               	movlw	248
  2761  00FB9A  6E32               	movwf	fillCircle@color+1,c
  2762  00FB9C  0E00               	movlw	0
  2763  00FB9E  6E31               	movwf	fillCircle@color,c
  2764  00FBA0  EC64  F06F         	call	_fillCircle	;wreg free
  2765                           
  2766                           ;Lab7-8.c: 225: drawCircle(60, 110 + 15, 7, 0xFFE0);
  2767  00FBA4  0E00               	movlw	0
  2768  00FBA6  6E0D               	movwf	drawCircle@x0+1,c
  2769  00FBA8  0E3C               	movlw	60
  2770  00FBAA  6E0C               	movwf	drawCircle@x0,c
  2771  00FBAC  0E00               	movlw	0
  2772  00FBAE  6E0F               	movwf	drawCircle@y0+1,c
  2773  00FBB0  0E7D               	movlw	125
  2774  00FBB2  6E0E               	movwf	drawCircle@y0,c
  2775  00FBB4  0E00               	movlw	0
  2776  00FBB6  6E11               	movwf	drawCircle@r+1,c
  2777  00FBB8  0E07               	movlw	7
  2778  00FBBA  6E10               	movwf	drawCircle@r,c
  2779  00FBBC  0EFF               	movlw	255
  2780  00FBBE  6E13               	movwf	drawCircle@color+1,c
  2781  00FBC0  0EE0               	movlw	224
  2782  00FBC2  6E12               	movwf	drawCircle@color,c
  2783  00FBC4  ECE8  F077         	call	_drawCircle	;wreg free
  2784                           
  2785                           ;Lab7-8.c: 226: drawCircle(80, 110 + 15, 7, 0x07E0);
  2786  00FBC8  0E00               	movlw	0
  2787  00FBCA  6E0D               	movwf	drawCircle@x0+1,c
  2788  00FBCC  0E50               	movlw	80
  2789  00FBCE  6E0C               	movwf	drawCircle@x0,c
  2790  00FBD0  0E00               	movlw	0
  2791  00FBD2  6E0F               	movwf	drawCircle@y0+1,c
  2792  00FBD4  0E7D               	movlw	125
  2793  00FBD6  6E0E               	movwf	drawCircle@y0,c
  2794  00FBD8  0E00               	movlw	0
  2795  00FBDA  6E11               	movwf	drawCircle@r+1,c
  2796  00FBDC  0E07               	movlw	7
  2797  00FBDE  6E10               	movwf	drawCircle@r,c
  2798  00FBE0  0E07               	movlw	7
  2799  00FBE2  6E13               	movwf	drawCircle@color+1,c
  2800  00FBE4  0EE0               	movlw	224
  2801  00FBE6  6E12               	movwf	drawCircle@color,c
  2802  00FBE8  ECE8  F077         	call	_drawCircle	;wreg free
  2803                           
  2804                           ;Lab7-8.c: 227: drawtext (100, 110 + 10, NSLT_Count, 0xF81F, 0x0000, 2);
  2805  00FBEC  0E78               	movlw	120
  2806  00FBEE  6E29               	movwf	drawtext@y,c
  2807  00FBF0  0E48               	movlw	low _NSLT_Count
  2808  00FBF2  6E2A               	movwf	drawtext@_text,c
  2809  00FBF4  0E00               	movlw	high _NSLT_Count
  2810  00FBF6  6E2B               	movwf	drawtext@_text+1,c
  2811  00FBF8  0EF8               	movlw	248
  2812  00FBFA  6E2D               	movwf	drawtext@color+1,c
  2813  00FBFC  0E1F               	movlw	31
  2814  00FBFE  6E2C               	movwf	drawtext@color,c
  2815  00FC00  0E00               	movlw	0
  2816  00FC02  6E2F               	movwf	drawtext@bg+1,c
  2817  00FC04  0E00               	movlw	0
  2818  00FC06  6E2E               	movwf	drawtext@bg,c
  2819  00FC08  0E02               	movlw	2
  2820  00FC0A  6E30               	movwf	drawtext@size,c
  2821  00FC0C  0E64               	movlw	100
  2822  00FC0E  EC01  F074         	call	_drawtext
  2823                           
  2824                           ;Lab7-8.c: 230: drawtext(2, 30, PED_EW_Count, 0x07FF, 0x0000, 2);
  2825  00FC12  0E1E               	movlw	30
  2826  00FC14  6E29               	movwf	drawtext@y,c
  2827  00FC16  0E4E               	movlw	low _PED_EW_Count
  2828  00FC18  6E2A               	movwf	drawtext@_text,c
  2829  00FC1A  0E00               	movlw	high _PED_EW_Count
  2830  00FC1C  6E2B               	movwf	drawtext@_text+1,c
  2831  00FC1E  0E07               	movlw	7
  2832  00FC20  6E2D               	movwf	drawtext@color+1,c
  2833  00FC22  682C               	setf	drawtext@color,c
  2834  00FC24  0E00               	movlw	0
  2835  00FC26  6E2F               	movwf	drawtext@bg+1,c
  2836  00FC28  0E00               	movlw	0
  2837  00FC2A  6E2E               	movwf	drawtext@bg,c
  2838  00FC2C  0E02               	movlw	2
  2839  00FC2E  6E30               	movwf	drawtext@size,c
  2840  00FC30  0E02               	movlw	2
  2841  00FC32  EC01  F074         	call	_drawtext
  2842                           
  2843                           ;Lab7-8.c: 231: strcpy(txt, "PEW");
  2844  00FC36  C06B  F001         	movff	_txt,strcpy@to
  2845  00FC3A  C06C  F002         	movff	_txt+1,strcpy@to+1
  2846  00FC3E  0EF7               	movlw	low STR_10
  2847  00FC40  6E03               	movwf	strcpy@from,c
  2848  00FC42  0EFF               	movlw	high STR_10
  2849  00FC44  6E04               	movwf	strcpy@from+1,c
  2850  00FC46  ECFA  F06D         	call	_strcpy	;wreg free
  2851                           
  2852                           ;Lab7-8.c: 232: drawtext(3, 20, txt, 0x07FF, 0x0000, 1);
  2853  00FC4A  0E14               	movlw	20
  2854  00FC4C  6E29               	movwf	drawtext@y,c
  2855  00FC4E  C06B  F02A         	movff	_txt,drawtext@_text
  2856  00FC52  C06C  F02B         	movff	_txt+1,drawtext@_text+1
  2857  00FC56  0E07               	movlw	7
  2858  00FC58  6E2D               	movwf	drawtext@color+1,c
  2859  00FC5A  682C               	setf	drawtext@color,c
  2860  00FC5C  0E00               	movlw	0
  2861  00FC5E  6E2F               	movwf	drawtext@bg+1,c
  2862  00FC60  0E00               	movlw	0
  2863  00FC62  6E2E               	movwf	drawtext@bg,c
  2864  00FC64  0E01               	movlw	1
  2865  00FC66  6E30               	movwf	drawtext@size,c
  2866  00FC68  0E03               	movlw	3
  2867  00FC6A  EC01  F074         	call	_drawtext
  2868                           
  2869                           ;Lab7-8.c: 235: strcpy(txt, "PNS");
  2870  00FC6E  C06B  F001         	movff	_txt,strcpy@to
  2871  00FC72  C06C  F002         	movff	_txt+1,strcpy@to+1
  2872  00FC76  0EF3               	movlw	low STR_11
  2873  00FC78  6E03               	movwf	strcpy@from,c
  2874  00FC7A  0EFF               	movlw	high STR_11
  2875  00FC7C  6E04               	movwf	strcpy@from+1,c
  2876  00FC7E  ECFA  F06D         	call	_strcpy	;wreg free
  2877                           
  2878                           ;Lab7-8.c: 236: drawtext(3, 80, txt, 0x001F, 0x0000, 1);
  2879  00FC82  0E50               	movlw	80
  2880  00FC84  6E29               	movwf	drawtext@y,c
  2881  00FC86  C06B  F02A         	movff	_txt,drawtext@_text
  2882  00FC8A  C06C  F02B         	movff	_txt+1,drawtext@_text+1
  2883  00FC8E  0E00               	movlw	0
  2884  00FC90  6E2D               	movwf	drawtext@color+1,c
  2885  00FC92  0E1F               	movlw	31
  2886  00FC94  6E2C               	movwf	drawtext@color,c
  2887  00FC96  0E00               	movlw	0
  2888  00FC98  6E2F               	movwf	drawtext@bg+1,c
  2889  00FC9A  0E00               	movlw	0
  2890  00FC9C  6E2E               	movwf	drawtext@bg,c
  2891  00FC9E  0E01               	movlw	1
  2892  00FCA0  6E30               	movwf	drawtext@size,c
  2893  00FCA2  0E03               	movlw	3
  2894  00FCA4  EC01  F074         	call	_drawtext
  2895                           
  2896                           ;Lab7-8.c: 237: drawtext(2, 90, PED_NS_Count, 0x001F, 0x0000, 2);
  2897  00FCA8  0E5A               	movlw	90
  2898  00FCAA  6E29               	movwf	drawtext@y,c
  2899  00FCAC  0E51               	movlw	low _PED_NS_Count
  2900  00FCAE  6E2A               	movwf	drawtext@_text,c
  2901  00FCB0  0E00               	movlw	high _PED_NS_Count
  2902  00FCB2  6E2B               	movwf	drawtext@_text+1,c
  2903  00FCB4  0E00               	movlw	0
  2904  00FCB6  6E2D               	movwf	drawtext@color+1,c
  2905  00FCB8  0E1F               	movlw	31
  2906  00FCBA  6E2C               	movwf	drawtext@color,c
  2907  00FCBC  0E00               	movlw	0
  2908  00FCBE  6E2F               	movwf	drawtext@bg+1,c
  2909  00FCC0  0E00               	movlw	0
  2910  00FCC2  6E2E               	movwf	drawtext@bg,c
  2911  00FCC4  0E02               	movlw	2
  2912  00FCC6  6E30               	movwf	drawtext@size,c
  2913  00FCC8  0E02               	movlw	2
  2914  00FCCA  EC01  F074         	call	_drawtext
  2915                           
  2916                           ;Lab7-8.c: 240: strcpy(txt, "EWP EWLT NSP NSLT MR");
  2917  00FCCE  C06B  F001         	movff	_txt,strcpy@to
  2918  00FCD2  C06C  F002         	movff	_txt+1,strcpy@to+1
  2919  00FCD6  0E98               	movlw	low STR_12
  2920  00FCD8  6E03               	movwf	strcpy@from,c
  2921  00FCDA  0EFF               	movlw	high STR_12
  2922  00FCDC  6E04               	movwf	strcpy@from+1,c
  2923  00FCDE  ECFA  F06D         	call	_strcpy	;wreg free
  2924                           
  2925                           ;Lab7-8.c: 241: drawtext(1, 140, txt, 0xFFFF, 0x0000, 1);
  2926  00FCE2  0E8C               	movlw	140
  2927  00FCE4  6E29               	movwf	drawtext@y,c
  2928  00FCE6  C06B  F02A         	movff	_txt,drawtext@_text
  2929  00FCEA  C06C  F02B         	movff	_txt+1,drawtext@_text+1
  2930  00FCEE  0EFF               	movlw	255
  2931  00FCF0  6E2D               	movwf	drawtext@color+1,c
  2932  00FCF2  682C               	setf	drawtext@color,c
  2933  00FCF4  0E00               	movlw	0
  2934  00FCF6  6E2F               	movwf	drawtext@bg+1,c
  2935  00FCF8  0E00               	movlw	0
  2936  00FCFA  6E2E               	movwf	drawtext@bg,c
  2937  00FCFC  0E01               	movlw	1
  2938  00FCFE  6E30               	movwf	drawtext@size,c
  2939  00FD00  0E01               	movlw	1
  2940  00FD02  EC01  F074         	call	_drawtext
  2941                           
  2942                           ;Lab7-8.c: 242: drawtext(6, 140+9, SW_EWPED_Txt, 0xFFFF, 0x0000, 1);
  2943  00FD06  0E95               	movlw	149
  2944  00FD08  6E29               	movwf	drawtext@y,c
  2945  00FD0A  0E5C               	movlw	low _SW_EWPED_Txt
  2946  00FD0C  6E2A               	movwf	drawtext@_text,c
  2947  00FD0E  0E00               	movlw	high _SW_EWPED_Txt
  2948  00FD10  6E2B               	movwf	drawtext@_text+1,c
  2949  00FD12  0EFF               	movlw	255
  2950  00FD14  6E2D               	movwf	drawtext@color+1,c
  2951  00FD16  682C               	setf	drawtext@color,c
  2952  00FD18  0E00               	movlw	0
  2953  00FD1A  6E2F               	movwf	drawtext@bg+1,c
  2954  00FD1C  0E00               	movlw	0
  2955  00FD1E  6E2E               	movwf	drawtext@bg,c
  2956  00FD20  0E01               	movlw	1
  2957  00FD22  6E30               	movwf	drawtext@size,c
  2958  00FD24  0E06               	movlw	6
  2959  00FD26  EC01  F074         	call	_drawtext
  2960                           
  2961                           ;Lab7-8.c: 243: drawtext(32, 140+9, SW_EWLT_Txt, 0xFFFF, 0x0000, 1);
  2962  00FD2A  0E95               	movlw	149
  2963  00FD2C  6E29               	movwf	drawtext@y,c
  2964  00FD2E  0E5A               	movlw	low _SW_EWLT_Txt
  2965  00FD30  6E2A               	movwf	drawtext@_text,c
  2966  00FD32  0E00               	movlw	high _SW_EWLT_Txt
  2967  00FD34  6E2B               	movwf	drawtext@_text+1,c
  2968  00FD36  0EFF               	movlw	255
  2969  00FD38  6E2D               	movwf	drawtext@color+1,c
  2970  00FD3A  682C               	setf	drawtext@color,c
  2971  00FD3C  0E00               	movlw	0
  2972  00FD3E  6E2F               	movwf	drawtext@bg+1,c
  2973  00FD40  0E00               	movlw	0
  2974  00FD42  6E2E               	movwf	drawtext@bg,c
  2975  00FD44  0E01               	movlw	1
  2976  00FD46  6E30               	movwf	drawtext@size,c
  2977  00FD48  0E20               	movlw	32
  2978  00FD4A  EC01  F074         	call	_drawtext
  2979                           
  2980                           ;Lab7-8.c: 244: drawtext(58, 140+9, SW_NSPED_Txt, 0xFFFF, 0x0000, 1);
  2981  00FD4E  0E95               	movlw	149
  2982  00FD50  6E29               	movwf	drawtext@y,c
  2983  00FD52  0E62               	movlw	low _SW_NSPED_Txt
  2984  00FD54  6E2A               	movwf	drawtext@_text,c
  2985  00FD56  0E00               	movlw	high _SW_NSPED_Txt
  2986  00FD58  6E2B               	movwf	drawtext@_text+1,c
  2987  00FD5A  0EFF               	movlw	255
  2988  00FD5C  6E2D               	movwf	drawtext@color+1,c
  2989  00FD5E  682C               	setf	drawtext@color,c
  2990  00FD60  0E00               	movlw	0
  2991  00FD62  6E2F               	movwf	drawtext@bg+1,c
  2992  00FD64  0E00               	movlw	0
  2993  00FD66  6E2E               	movwf	drawtext@bg,c
  2994  00FD68  0E01               	movlw	1
  2995  00FD6A  6E30               	movwf	drawtext@size,c
  2996  00FD6C  0E3A               	movlw	58
  2997  00FD6E  EC01  F074         	call	_drawtext
  2998                           
  2999                           ;Lab7-8.c: 245: drawtext(87, 140+9, SW_NSLT_Txt, 0xFFFF, 0x0000, 1);
  3000  00FD72  0E95               	movlw	149
  3001  00FD74  6E29               	movwf	drawtext@y,c
  3002  00FD76  0E60               	movlw	low _SW_NSLT_Txt
  3003  00FD78  6E2A               	movwf	drawtext@_text,c
  3004  00FD7A  0E00               	movlw	high _SW_NSLT_Txt
  3005  00FD7C  6E2B               	movwf	drawtext@_text+1,c
  3006  00FD7E  0EFF               	movlw	255
  3007  00FD80  6E2D               	movwf	drawtext@color+1,c
  3008  00FD82  682C               	setf	drawtext@color,c
  3009  00FD84  0E00               	movlw	0
  3010  00FD86  6E2F               	movwf	drawtext@bg+1,c
  3011  00FD88  0E00               	movlw	0
  3012  00FD8A  6E2E               	movwf	drawtext@bg,c
  3013  00FD8C  0E01               	movlw	1
  3014  00FD8E  6E30               	movwf	drawtext@size,c
  3015  00FD90  0E57               	movlw	87
  3016  00FD92  EC01  F074         	call	_drawtext
  3017                           
  3018                           ;Lab7-8.c: 247: drawtext(112,140+9, SW_MODE_Txt, 0xFFFF, 0x0000, 1);
  3019  00FD96  0E95               	movlw	149
  3020  00FD98  6E29               	movwf	drawtext@y,c
  3021  00FD9A  0E5E               	movlw	low _SW_MODE_Txt
  3022  00FD9C  6E2A               	movwf	drawtext@_text,c
  3023  00FD9E  0E00               	movlw	high _SW_MODE_Txt
  3024  00FDA0  6E2B               	movwf	drawtext@_text+1,c
  3025  00FDA2  0EFF               	movlw	255
  3026  00FDA4  6E2D               	movwf	drawtext@color+1,c
  3027  00FDA6  682C               	setf	drawtext@color,c
  3028  00FDA8  0E00               	movlw	0
  3029  00FDAA  6E2F               	movwf	drawtext@bg+1,c
  3030  00FDAC  0E00               	movlw	0
  3031  00FDAE  6E2E               	movwf	drawtext@bg,c
  3032  00FDB0  0E01               	movlw	1
  3033  00FDB2  6E30               	movwf	drawtext@size,c
  3034  00FDB4  0E70               	movlw	112
  3035  00FDB6  EC01  F074         	call	_drawtext
  3036  00FDBA  0012               	return		;funcret
  3037  00FDBC                     __end_of_Initialize_Screen:
  3038                           	opt stack 0
  3039                           tblptru	equ	0xFF8
  3040                           tblptrh	equ	0xFF7
  3041                           tblptrl	equ	0xFF6
  3042                           tablat	equ	0xFF5
  3043                           intcon2	equ	0xFF1
  3044                           postinc0	equ	0xFEE
  3045                           wreg	equ	0xFE8
  3046                           postdec1	equ	0xFE5
  3047                           fsr1l	equ	0xFE1
  3048                           status	equ	0xFD8
  3049                           
  3050 ;; *************** function _fillScreen *****************
  3051 ;; Defined at:
  3052 ;;		line 652 in file "ST7735_TFT.c"
  3053 ;; Parameters:    Size  Location     Type
  3054 ;;  color           2   19[COMRAM] unsigned int 
  3055 ;; Auto vars:     Size  Location     Type
  3056 ;;		None
  3057 ;; Return value:  Size  Location     Type
  3058 ;;		None               void
  3059 ;; Registers used:
  3060 ;;		wreg, status,2, status,0, cstack
  3061 ;; Tracked objects:
  3062 ;;		On entry : 0/0
  3063 ;;		On exit  : 0/0
  3064 ;;		Unchanged: 0/0
  3065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3066 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3067 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3068 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3069 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3070 ;;Total ram usage:        2 bytes
  3071 ;; Hardware stack levels used:    1
  3072 ;; Hardware stack levels required when called:    4
  3073 ;; This function calls:
  3074 ;;		_fillRectangle
  3075 ;; This function is called by:
  3076 ;;		_Initialize_Screen
  3077 ;; This function uses a non-reentrant model
  3078 ;;
  3079                           
  3080                           	psect	text6
  3081  00DAAC                     __ptext6:
  3082                           	opt stack 0
  3083  00DAAC                     _fillScreen:
  3084                           	opt stack 25
  3085                           
  3086                           ;ST7735_TFT.c: 654: fillRectangle(0, 0, 128, 160, color);
  3087                           
  3088                           ;incstack = 0
  3089  00DAAC  0E00               	movlw	0
  3090  00DAAE  6E08               	movwf	fillRectangle@y,c
  3091  00DAB0  0E80               	movlw	128
  3092  00DAB2  6E09               	movwf	fillRectangle@w,c
  3093  00DAB4  0EA0               	movlw	160
  3094  00DAB6  6E0A               	movwf	fillRectangle@h,c
  3095  00DAB8  C014  F00B         	movff	fillScreen@color,fillRectangle@color
  3096  00DABC  C015  F00C         	movff	fillScreen@color+1,fillRectangle@color+1
  3097  00DAC0  0E00               	movlw	0
  3098  00DAC2  EC93  F073         	call	_fillRectangle
  3099  00DAC6  0012               	return		;funcret
  3100  00DAC8                     __end_of_fillScreen:
  3101                           	opt stack 0
  3102                           tblptru	equ	0xFF8
  3103                           tblptrh	equ	0xFF7
  3104                           tblptrl	equ	0xFF6
  3105                           tablat	equ	0xFF5
  3106                           intcon2	equ	0xFF1
  3107                           postinc0	equ	0xFEE
  3108                           wreg	equ	0xFE8
  3109                           postdec1	equ	0xFE5
  3110                           fsr1l	equ	0xFE1
  3111                           status	equ	0xFD8
  3112                           
  3113 ;; *************** function _fillRectangle *****************
  3114 ;; Defined at:
  3115 ;;		line 536 in file "ST7735_TFT.c"
  3116 ;; Parameters:    Size  Location     Type
  3117 ;;  x               1    wreg     unsigned char 
  3118 ;;  y               1    7[COMRAM] unsigned char 
  3119 ;;  w               1    8[COMRAM] unsigned char 
  3120 ;;  h               1    9[COMRAM] unsigned char 
  3121 ;;  color           2   10[COMRAM] unsigned int 
  3122 ;; Auto vars:     Size  Location     Type
  3123 ;;  x               1   18[COMRAM] unsigned char 
  3124 ;;  lo              1   17[COMRAM] unsigned char 
  3125 ;;  hi              1   16[COMRAM] unsigned char 
  3126 ;; Return value:  Size  Location     Type
  3127 ;;		None               void
  3128 ;; Registers used:
  3129 ;;		wreg, status,2, status,0, cstack
  3130 ;; Tracked objects:
  3131 ;;		On entry : 0/0
  3132 ;;		On exit  : 0/0
  3133 ;;		Unchanged: 0/0
  3134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3135 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3136 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3137 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3138 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3139 ;;Total ram usage:       12 bytes
  3140 ;; Hardware stack levels used:    1
  3141 ;; Hardware stack levels required when called:    3
  3142 ;; This function calls:
  3143 ;;		_setAddrWindow
  3144 ;;		_spiwrite
  3145 ;; This function is called by:
  3146 ;;		_fillScreen
  3147 ;; This function uses a non-reentrant model
  3148 ;;
  3149                           
  3150                           	psect	text7
  3151  00E726                     __ptext7:
  3152                           	opt stack 0
  3153  00E726                     _fillRectangle:
  3154                           	opt stack 25
  3155                           
  3156                           ;incstack = 0
  3157                           ;fillRectangle@x stored from wreg
  3158  00E726  6E13               	movwf	fillRectangle@x,c
  3159                           
  3160                           ;ST7735_TFT.c: 538: unsigned char hi, lo;
  3161                           ;ST7735_TFT.c: 539: if((x >= 128) || (y >= 160))
  3162  00E728  0E80               	movlw	128
  3163  00E72A  6013               	cpfslt	fillRectangle@x,c
  3164  00E72C  D069               	goto	l226
  3165  00E72E  0E9F               	movlw	159
  3166  00E730  6408               	cpfsgt	fillRectangle@y,c
  3167  00E732  D001               	goto	l3167
  3168                           
  3169                           ;ST7735_TFT.c: 540: return;
  3170  00E734  D065               	goto	l226
  3171  00E736                     l3167:
  3172                           
  3173                           ;ST7735_TFT.c: 541: if((x + w - 1) >= 128)
  3174  00E736  0EFF               	movlw	255
  3175  00E738  6E0D               	movwf	??_fillRectangle& (0+255),c
  3176  00E73A  0EFF               	movlw	255
  3177  00E73C  6E0E               	movwf	(??_fillRectangle+1)& (0+255),c
  3178  00E73E  5009               	movf	fillRectangle@w,w,c
  3179  00E740  C013  F00F         	movff	fillRectangle@x,??_fillRectangle+2
  3180  00E744  6A10               	clrf	(??_fillRectangle+3)& (0+255),c
  3181  00E746  260F               	addwf	??_fillRectangle+2,f,c
  3182  00E748  0E00               	movlw	0
  3183  00E74A  2210               	addwfc	??_fillRectangle+3,f,c
  3184  00E74C  500D               	movf	??_fillRectangle,w,c
  3185  00E74E  260F               	addwf	??_fillRectangle+2,f,c
  3186  00E750  500E               	movf	??_fillRectangle+1,w,c
  3187  00E752  2210               	addwfc	??_fillRectangle+3,f,c
  3188  00E754  BE10               	btfsc	??_fillRectangle+3,7,c
  3189  00E756  D00A               	goto	l227
  3190  00E758  5010               	movf	??_fillRectangle+3,w,c
  3191  00E75A  E104               	bnz	u2050
  3192  00E75C  0E80               	movlw	128
  3193  00E75E  5C0F               	subwf	??_fillRectangle+2,w,c
  3194  00E760  A0D8               	btfss	status,0,c
  3195  00E762  D004               	goto	l227
  3196  00E764                     u2050:
  3197                           
  3198                           ;ST7735_TFT.c: 542: w = 128 - x;
  3199  00E764  5013               	movf	fillRectangle@x,w,c
  3200  00E766  0800               	sublw	0
  3201  00E768  0F80               	addlw	128
  3202  00E76A  6E09               	movwf	fillRectangle@w,c
  3203  00E76C                     l227:
  3204                           
  3205                           ;ST7735_TFT.c: 543: if((y + h - 1) >= 160)
  3206  00E76C  0EFF               	movlw	255
  3207  00E76E  6E0D               	movwf	??_fillRectangle& (0+255),c
  3208  00E770  0EFF               	movlw	255
  3209  00E772  6E0E               	movwf	(??_fillRectangle+1)& (0+255),c
  3210  00E774  500A               	movf	fillRectangle@h,w,c
  3211  00E776  C008  F00F         	movff	fillRectangle@y,??_fillRectangle+2
  3212  00E77A  6A10               	clrf	(??_fillRectangle+3)& (0+255),c
  3213  00E77C  260F               	addwf	??_fillRectangle+2,f,c
  3214  00E77E  0E00               	movlw	0
  3215  00E780  2210               	addwfc	??_fillRectangle+3,f,c
  3216  00E782  500D               	movf	??_fillRectangle,w,c
  3217  00E784  260F               	addwf	??_fillRectangle+2,f,c
  3218  00E786  500E               	movf	??_fillRectangle+1,w,c
  3219  00E788  2210               	addwfc	??_fillRectangle+3,f,c
  3220  00E78A  BE10               	btfsc	??_fillRectangle+3,7,c
  3221  00E78C  D00B               	goto	l3173
  3222  00E78E  5010               	movf	??_fillRectangle+3,w,c
  3223  00E790  E104               	bnz	u2060
  3224  00E792  0EA0               	movlw	160
  3225  00E794  5C0F               	subwf	??_fillRectangle+2,w,c
  3226  00E796  A0D8               	btfss	status,0,c
  3227  00E798  D005               	goto	l3173
  3228  00E79A                     u2060:
  3229                           
  3230                           ;ST7735_TFT.c: 544: h = 160 - y;
  3231  00E79A  5008               	movf	fillRectangle@y,w,c
  3232  00E79C  0800               	sublw	0
  3233  00E79E  0FA0               	addlw	160
  3234  00E7A0  6E0A               	movwf	fillRectangle@h,c
  3235  00E7A2  D000               	goto	l3173
  3236  00E7A4                     l3173:
  3237                           
  3238                           ;ST7735_TFT.c: 545: setAddrWindow(x, y, x+w-1, y+h-1);
  3239  00E7A4  C008  F004         	movff	fillRectangle@y,setAddrWindow@y0
  3240  00E7A8  5013               	movf	fillRectangle@x,w,c
  3241  00E7AA  2409               	addwf	fillRectangle@w,w,c
  3242  00E7AC  6E0D               	movwf	??_fillRectangle& (0+255),c
  3243  00E7AE  040D               	decf	??_fillRectangle,w,c
  3244  00E7B0  6E05               	movwf	setAddrWindow@x1,c
  3245  00E7B2  5008               	movf	fillRectangle@y,w,c
  3246  00E7B4  240A               	addwf	fillRectangle@h,w,c
  3247  00E7B6  6E0E               	movwf	(??_fillRectangle+1)& (0+255),c
  3248  00E7B8  040E               	decf	??_fillRectangle+1,w,c
  3249  00E7BA  6E06               	movwf	setAddrWindow@y1,c
  3250  00E7BC  5013               	movf	fillRectangle@x,w,c
  3251  00E7BE  EC3D  F06F         	call	_setAddrWindow
  3252                           
  3253                           ;ST7735_TFT.c: 546: hi = color >> 8; lo = color;
  3254  00E7C2  500C               	movf	fillRectangle@color+1,w,c
  3255  00E7C4  6E11               	movwf	fillRectangle@hi,c
  3256  00E7C6  C00B  F012         	movff	fillRectangle@color,fillRectangle@lo
  3257                           
  3258                           ;ST7735_TFT.c: 547: PORTDbits.RD0 = 1;
  3259  00E7CA  8083               	bsf	3971,0,c	;volatile
  3260                           
  3261                           ;ST7735_TFT.c: 548: PORTDbits.RD1 = 0;
  3262  00E7CC  9283               	bcf	3971,1,c	;volatile
  3263                           
  3264                           ;ST7735_TFT.c: 550: for(y=h; y>0; y--) {
  3265  00E7CE  C00A  F008         	movff	fillRectangle@h,fillRectangle@y
  3266  00E7D2                     l3185:
  3267  00E7D2  5008               	movf	fillRectangle@y,w,c
  3268  00E7D4  B4D8               	btfsc	status,2,c
  3269  00E7D6  D013               	goto	l230
  3270  00E7D8  D001               	goto	l229
  3271  00E7DA  D011               	goto	l230
  3272  00E7DC                     l229:
  3273                           
  3274                           ;ST7735_TFT.c: 551: for(x = w; x > 0; x--) {
  3275  00E7DC  C009  F013         	movff	fillRectangle@w,fillRectangle@x
  3276  00E7E0                     l3189:
  3277  00E7E0  5013               	movf	fillRectangle@x,w,c
  3278  00E7E2  B4D8               	btfsc	status,2,c
  3279  00E7E4  D00A               	goto	l3199
  3280  00E7E6  D001               	goto	l3193
  3281  00E7E8  D008               	goto	l3199
  3282  00E7EA                     l3193:
  3283                           
  3284                           ;ST7735_TFT.c: 552: spiwrite(hi);
  3285  00E7EA  5011               	movf	fillRectangle@hi,w,c
  3286  00E7EC  EC1F  F06D         	call	_spiwrite
  3287                           
  3288                           ;ST7735_TFT.c: 553: spiwrite(lo);
  3289  00E7F0  5012               	movf	fillRectangle@lo,w,c
  3290  00E7F2  EC1F  F06D         	call	_spiwrite
  3291  00E7F6  0613               	decf	fillRectangle@x,f,c
  3292  00E7F8  D7F3               	goto	l3189
  3293  00E7FA                     l3199:
  3294  00E7FA  0608               	decf	fillRectangle@y,f,c
  3295  00E7FC  D7EA               	goto	l3185
  3296  00E7FE                     l230:
  3297                           
  3298                           ;ST7735_TFT.c: 554: }
  3299                           ;ST7735_TFT.c: 555: }
  3300                           ;ST7735_TFT.c: 556: PORTDbits.RD1 = 1;
  3301  00E7FE  8283               	bsf	3971,1,c	;volatile
  3302  00E800                     l226:
  3303  00E800  0012               	return		;funcret
  3304  00E802                     __end_of_fillRectangle:
  3305                           	opt stack 0
  3306                           tblptru	equ	0xFF8
  3307                           tblptrh	equ	0xFF7
  3308                           tblptrl	equ	0xFF6
  3309                           tablat	equ	0xFF5
  3310                           intcon2	equ	0xFF1
  3311                           postinc0	equ	0xFEE
  3312                           wreg	equ	0xFE8
  3313                           postdec1	equ	0xFE5
  3314                           fsr1l	equ	0xFE1
  3315                           status	equ	0xFD8
  3316                           
  3317 ;; *************** function _drawRect *****************
  3318 ;; Defined at:
  3319 ;;		line 718 in file "ST7735_TFT.c"
  3320 ;; Parameters:    Size  Location     Type
  3321 ;;  x               2   18[COMRAM] unsigned int 
  3322 ;;  y               2   20[COMRAM] unsigned int 
  3323 ;;  w               2   22[COMRAM] unsigned int 
  3324 ;;  h               2   24[COMRAM] unsigned int 
  3325 ;;  color           2   26[COMRAM] unsigned int 
  3326 ;; Auto vars:     Size  Location     Type
  3327 ;;		None
  3328 ;; Return value:  Size  Location     Type
  3329 ;;		None               void
  3330 ;; Registers used:
  3331 ;;		wreg, status,2, status,0, cstack
  3332 ;; Tracked objects:
  3333 ;;		On entry : 0/0
  3334 ;;		On exit  : 0/0
  3335 ;;		Unchanged: 0/0
  3336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3337 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3338 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3339 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3340 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3341 ;;Total ram usage:       11 bytes
  3342 ;; Hardware stack levels used:    1
  3343 ;; Hardware stack levels required when called:    4
  3344 ;; This function calls:
  3345 ;;		_drawFastHLine
  3346 ;;		_drawFastVLine
  3347 ;; This function is called by:
  3348 ;;		_Initialize_Screen
  3349 ;; This function uses a non-reentrant model
  3350 ;;
  3351                           
  3352                           	psect	text8
  3353  00DF6C                     __ptext8:
  3354                           	opt stack 0
  3355  00DF6C                     _drawRect:
  3356                           	opt stack 25
  3357                           
  3358                           ;ST7735_TFT.c: 720: drawFastHLine(x, y, w, color);
  3359                           
  3360                           ;incstack = 0
  3361  00DF6C  C015  F008         	movff	drawRect@y,drawFastHLine@y
  3362  00DF70  C017  F009         	movff	drawRect@w,drawFastHLine@w
  3363  00DF74  C01B  F00A         	movff	drawRect@color,drawFastHLine@color
  3364  00DF78  C01C  F00B         	movff	drawRect@color+1,drawFastHLine@color+1
  3365  00DF7C  5013               	movf	drawRect@x,w,c
  3366  00DF7E  ECE7  F070         	call	_drawFastHLine
  3367                           
  3368                           ;ST7735_TFT.c: 721: drawFastHLine(x, y + h - 1, w, color);
  3369  00DF82  5015               	movf	drawRect@y,w,c
  3370  00DF84  2419               	addwf	drawRect@h,w,c
  3371  00DF86  6E1D               	movwf	??_drawRect& (0+255),c
  3372  00DF88  041D               	decf	??_drawRect,w,c
  3373  00DF8A  6E08               	movwf	drawFastHLine@y,c
  3374  00DF8C  C017  F009         	movff	drawRect@w,drawFastHLine@w
  3375  00DF90  C01B  F00A         	movff	drawRect@color,drawFastHLine@color
  3376  00DF94  C01C  F00B         	movff	drawRect@color+1,drawFastHLine@color+1
  3377  00DF98  5013               	movf	drawRect@x,w,c
  3378  00DF9A  ECE7  F070         	call	_drawFastHLine
  3379                           
  3380                           ;ST7735_TFT.c: 722: drawFastVLine(x, y, h, color);
  3381  00DF9E  C015  F008         	movff	drawRect@y,drawFastVLine@y
  3382  00DFA2  C019  F009         	movff	drawRect@h,drawFastVLine@h
  3383  00DFA6  C01B  F00A         	movff	drawRect@color,drawFastVLine@color
  3384  00DFAA  C01C  F00B         	movff	drawRect@color+1,drawFastVLine@color+1
  3385  00DFAE  5013               	movf	drawRect@x,w,c
  3386  00DFB0  ECA3  F070         	call	_drawFastVLine
  3387                           
  3388                           ;ST7735_TFT.c: 723: drawFastVLine(x + w - 1, y, h, color);
  3389  00DFB4  C015  F008         	movff	drawRect@y,drawFastVLine@y
  3390  00DFB8  C019  F009         	movff	drawRect@h,drawFastVLine@h
  3391  00DFBC  C01B  F00A         	movff	drawRect@color,drawFastVLine@color
  3392  00DFC0  C01C  F00B         	movff	drawRect@color+1,drawFastVLine@color+1
  3393  00DFC4  5013               	movf	drawRect@x,w,c
  3394  00DFC6  2417               	addwf	drawRect@w,w,c
  3395  00DFC8  6E1D               	movwf	??_drawRect& (0+255),c
  3396  00DFCA  041D               	decf	??_drawRect,w,c
  3397  00DFCC  ECA3  F070         	call	_drawFastVLine
  3398  00DFD0  0012               	return		;funcret
  3399  00DFD2                     __end_of_drawRect:
  3400                           	opt stack 0
  3401                           tblptru	equ	0xFF8
  3402                           tblptrh	equ	0xFF7
  3403                           tblptrl	equ	0xFF6
  3404                           tablat	equ	0xFF5
  3405                           intcon2	equ	0xFF1
  3406                           postinc0	equ	0xFEE
  3407                           wreg	equ	0xFE8
  3408                           postdec1	equ	0xFE5
  3409                           fsr1l	equ	0xFE1
  3410                           status	equ	0xFD8
  3411                           
  3412 ;; *************** function _drawFastHLine *****************
  3413 ;; Defined at:
  3414 ;;		line 657 in file "ST7735_TFT.c"
  3415 ;; Parameters:    Size  Location     Type
  3416 ;;  x               1    wreg     unsigned char 
  3417 ;;  y               1    7[COMRAM] unsigned char 
  3418 ;;  w               1    8[COMRAM] unsigned char 
  3419 ;;  color           2    9[COMRAM] unsigned int 
  3420 ;; Auto vars:     Size  Location     Type
  3421 ;;  x               1   17[COMRAM] unsigned char 
  3422 ;;  lo              1   16[COMRAM] unsigned char 
  3423 ;;  hi              1   15[COMRAM] unsigned char 
  3424 ;; Return value:  Size  Location     Type
  3425 ;;		None               void
  3426 ;; Registers used:
  3427 ;;		wreg, status,2, status,0, cstack
  3428 ;; Tracked objects:
  3429 ;;		On entry : 0/0
  3430 ;;		On exit  : 0/0
  3431 ;;		Unchanged: 0/0
  3432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3433 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3434 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3435 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3436 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3437 ;;Total ram usage:       11 bytes
  3438 ;; Hardware stack levels used:    1
  3439 ;; Hardware stack levels required when called:    3
  3440 ;; This function calls:
  3441 ;;		_setAddrWindow
  3442 ;;		_spiwrite
  3443 ;; This function is called by:
  3444 ;;		_drawRect
  3445 ;; This function uses a non-reentrant model
  3446 ;;
  3447                           
  3448                           	psect	text9
  3449  00E1CE                     __ptext9:
  3450                           	opt stack 0
  3451  00E1CE                     _drawFastHLine:
  3452                           	opt stack 25
  3453                           
  3454                           ;incstack = 0
  3455                           ;drawFastHLine@x stored from wreg
  3456  00E1CE  6E12               	movwf	drawFastHLine@x,c
  3457                           
  3458                           ;ST7735_TFT.c: 659: unsigned char hi, lo;
  3459                           ;ST7735_TFT.c: 660: if((x >= 128) || (y >= 160))
  3460  00E1D0  0E80               	movlw	128
  3461  00E1D2  6012               	cpfslt	drawFastHLine@x,c
  3462  00E1D4  D03F               	goto	l271
  3463  00E1D6  0E9F               	movlw	159
  3464  00E1D8  6408               	cpfsgt	drawFastHLine@y,c
  3465  00E1DA  D001               	goto	l3207
  3466                           
  3467                           ;ST7735_TFT.c: 661: return;
  3468  00E1DC  D03B               	goto	l271
  3469  00E1DE                     l3207:
  3470                           
  3471                           ;ST7735_TFT.c: 662: if((x + w - 1) >= 128)
  3472  00E1DE  0EFF               	movlw	255
  3473  00E1E0  6E0C               	movwf	??_drawFastHLine& (0+255),c
  3474  00E1E2  0EFF               	movlw	255
  3475  00E1E4  6E0D               	movwf	(??_drawFastHLine+1)& (0+255),c
  3476  00E1E6  5009               	movf	drawFastHLine@w,w,c
  3477  00E1E8  C012  F00E         	movff	drawFastHLine@x,??_drawFastHLine+2
  3478  00E1EC  6A0F               	clrf	(??_drawFastHLine+3)& (0+255),c
  3479  00E1EE  260E               	addwf	??_drawFastHLine+2,f,c
  3480  00E1F0  0E00               	movlw	0
  3481  00E1F2  220F               	addwfc	??_drawFastHLine+3,f,c
  3482  00E1F4  500C               	movf	??_drawFastHLine,w,c
  3483  00E1F6  260E               	addwf	??_drawFastHLine+2,f,c
  3484  00E1F8  500D               	movf	??_drawFastHLine+1,w,c
  3485  00E1FA  220F               	addwfc	??_drawFastHLine+3,f,c
  3486  00E1FC  BE0F               	btfsc	??_drawFastHLine+3,7,c
  3487  00E1FE  D00B               	goto	l3211
  3488  00E200  500F               	movf	??_drawFastHLine+3,w,c
  3489  00E202  E104               	bnz	u2130
  3490  00E204  0E80               	movlw	128
  3491  00E206  5C0E               	subwf	??_drawFastHLine+2,w,c
  3492  00E208  A0D8               	btfss	status,0,c
  3493  00E20A  D005               	goto	l3211
  3494  00E20C                     u2130:
  3495                           
  3496                           ;ST7735_TFT.c: 663: w = 128 - x;
  3497  00E20C  5012               	movf	drawFastHLine@x,w,c
  3498  00E20E  0800               	sublw	0
  3499  00E210  0F80               	addlw	128
  3500  00E212  6E09               	movwf	drawFastHLine@w,c
  3501  00E214  D000               	goto	l3211
  3502  00E216                     l3211:
  3503                           
  3504                           ;ST7735_TFT.c: 664: hi = color >> 8; lo = color;
  3505  00E216  500B               	movf	drawFastHLine@color+1,w,c
  3506  00E218  6E10               	movwf	drawFastHLine@hi,c
  3507  00E21A  C00A  F011         	movff	drawFastHLine@color,drawFastHLine@lo
  3508                           
  3509                           ;ST7735_TFT.c: 665: setAddrWindow(x, y, x + w - 1, y);
  3510  00E21E  C008  F004         	movff	drawFastHLine@y,setAddrWindow@y0
  3511  00E222  5012               	movf	drawFastHLine@x,w,c
  3512  00E224  2409               	addwf	drawFastHLine@w,w,c
  3513  00E226  6E0C               	movwf	??_drawFastHLine& (0+255),c
  3514  00E228  040C               	decf	??_drawFastHLine,w,c
  3515  00E22A  6E05               	movwf	setAddrWindow@x1,c
  3516  00E22C  C008  F006         	movff	drawFastHLine@y,setAddrWindow@y1
  3517  00E230  5012               	movf	drawFastHLine@x,w,c
  3518  00E232  EC3D  F06F         	call	_setAddrWindow
  3519                           
  3520                           ;ST7735_TFT.c: 666: PORTDbits.RD0 = 1;
  3521  00E236  8083               	bsf	3971,0,c	;volatile
  3522                           
  3523                           ;ST7735_TFT.c: 667: PORTDbits.RD1 = 0;
  3524  00E238  9283               	bcf	3971,1,c	;volatile
  3525                           
  3526                           ;ST7735_TFT.c: 669: while (w--) {
  3527  00E23A  D007               	goto	l3223
  3528  00E23C                     l3221:
  3529                           
  3530                           ;ST7735_TFT.c: 670: spiwrite(hi);
  3531  00E23C  5010               	movf	drawFastHLine@hi,w,c
  3532  00E23E  EC1F  F06D         	call	_spiwrite
  3533                           
  3534                           ;ST7735_TFT.c: 671: spiwrite(lo);
  3535  00E242  5011               	movf	drawFastHLine@lo,w,c
  3536  00E244  EC1F  F06D         	call	_spiwrite
  3537  00E248  D000               	goto	l3223
  3538  00E24A                     l3223:
  3539  00E24A  0609               	decf	drawFastHLine@w,f,c
  3540  00E24C  2809               	incf	drawFastHLine@w,w,c
  3541  00E24E  A4D8               	btfss	status,2,c
  3542  00E250  D7F5               	goto	l3221
  3543                           
  3544                           ;ST7735_TFT.c: 672: }
  3545                           ;ST7735_TFT.c: 673: PORTDbits.RD1 = 1;
  3546  00E252  8283               	bsf	3971,1,c	;volatile
  3547  00E254                     l271:
  3548  00E254  0012               	return		;funcret
  3549  00E256                     __end_of_drawFastHLine:
  3550                           	opt stack 0
  3551                           tblptru	equ	0xFF8
  3552                           tblptrh	equ	0xFF7
  3553                           tblptrl	equ	0xFF6
  3554                           tablat	equ	0xFF5
  3555                           intcon2	equ	0xFF1
  3556                           postinc0	equ	0xFEE
  3557                           wreg	equ	0xFE8
  3558                           postdec1	equ	0xFE5
  3559                           fsr1l	equ	0xFE1
  3560                           status	equ	0xFD8
  3561                           
  3562 ;; *************** function _TFT_GreenTab_Initialize *****************
  3563 ;; Defined at:
  3564 ;;		line 677 in file "ST7735_TFT.c"
  3565 ;; Parameters:    Size  Location     Type
  3566 ;;		None
  3567 ;; Auto vars:     Size  Location     Type
  3568 ;;		None
  3569 ;; Return value:  Size  Location     Type
  3570 ;;		None               void
  3571 ;; Registers used:
  3572 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3573 ;; Tracked objects:
  3574 ;;		On entry : 0/0
  3575 ;;		On exit  : 0/0
  3576 ;;		Unchanged: 0/0
  3577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3578 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3579 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3580 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3581 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3582 ;;Total ram usage:        0 bytes
  3583 ;; Hardware stack levels used:    1
  3584 ;; Hardware stack levels required when called:    3
  3585 ;; This function calls:
  3586 ;;		_Rcmd1
  3587 ;;		_Rcmd2red
  3588 ;;		_Rcmd3
  3589 ;;		_write_command
  3590 ;;		_write_data
  3591 ;; This function is called by:
  3592 ;;		_Initialize_Screen
  3593 ;; This function uses a non-reentrant model
  3594 ;;
  3595                           
  3596                           	psect	text10
  3597  00DB3A                     __ptext10:
  3598                           	opt stack 0
  3599  00DB3A                     _TFT_GreenTab_Initialize:
  3600                           	opt stack 26
  3601                           
  3602                           ;ST7735_TFT.c: 679: PORTDbits.RD1 = 1;
  3603                           
  3604                           ;incstack = 0
  3605  00DB3A  8283               	bsf	3971,1,c	;volatile
  3606                           
  3607                           ;ST7735_TFT.c: 680: PORTDbits.RD0 = 0;
  3608  00DB3C  9083               	bcf	3971,0,c	;volatile
  3609                           
  3610                           ;ST7735_TFT.c: 682: SSPSTAT=0x80;
  3611  00DB3E  0E80               	movlw	128
  3612  00DB40  6EC7               	movwf	4039,c	;volatile
  3613                           
  3614                           ;ST7735_TFT.c: 683: SSPCON1=0x30;
  3615  00DB42  0E30               	movlw	48
  3616  00DB44  6EC6               	movwf	4038,c	;volatile
  3617                           
  3618                           ;ST7735_TFT.c: 686: Rcmd1();
  3619  00DB46  EC5A  F075         	call	_Rcmd1	;wreg free
  3620                           
  3621                           ;ST7735_TFT.c: 687: Rcmd2red();
  3622  00DB4A  EC50  F06E         	call	_Rcmd2red	;wreg free
  3623                           
  3624                           ;ST7735_TFT.c: 688: Rcmd3();
  3625  00DB4E  ECE1  F074         	call	_Rcmd3	;wreg free
  3626                           
  3627                           ;ST7735_TFT.c: 689: write_command(0x36);
  3628  00DB52  0E36               	movlw	54
  3629  00DB54  ECFD  F06C         	call	_write_command
  3630                           
  3631                           ;ST7735_TFT.c: 690: write_data(0xC0);
  3632  00DB58  0EC0               	movlw	192
  3633  00DB5A  EC05  F06D         	call	_write_data
  3634                           
  3635                           ;ST7735_TFT.c: 691: _tft_type = 1;
  3636  00DB5E  0E01               	movlw	1
  3637  00DB60  6E76               	movwf	__tft_type,c
  3638  00DB62  0012               	return		;funcret
  3639  00DB64                     __end_of_TFT_GreenTab_Initialize:
  3640                           	opt stack 0
  3641                           tblptru	equ	0xFF8
  3642                           tblptrh	equ	0xFF7
  3643                           tblptrl	equ	0xFF6
  3644                           tablat	equ	0xFF5
  3645                           intcon2	equ	0xFF1
  3646                           postinc0	equ	0xFEE
  3647                           wreg	equ	0xFE8
  3648                           postdec1	equ	0xFE5
  3649                           fsr1l	equ	0xFE1
  3650                           status	equ	0xFD8
  3651                           
  3652 ;; *************** function _Rcmd3 *****************
  3653 ;; Defined at:
  3654 ;;		line 371 in file "ST7735_TFT.c"
  3655 ;; Parameters:    Size  Location     Type
  3656 ;;		None
  3657 ;; Auto vars:     Size  Location     Type
  3658 ;;		None
  3659 ;; Return value:  Size  Location     Type
  3660 ;;		None               void
  3661 ;; Registers used:
  3662 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3663 ;; Tracked objects:
  3664 ;;		On entry : 0/0
  3665 ;;		On exit  : 0/0
  3666 ;;		Unchanged: 0/0
  3667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3669 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3670 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3671 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3672 ;;Total ram usage:        0 bytes
  3673 ;; Hardware stack levels used:    1
  3674 ;; Hardware stack levels required when called:    2
  3675 ;; This function calls:
  3676 ;;		_delay_ms
  3677 ;;		_write_command
  3678 ;;		_write_data
  3679 ;; This function is called by:
  3680 ;;		_TFT_GreenTab_Initialize
  3681 ;;		_TFT_BlackTab_Initialize
  3682 ;; This function uses a non-reentrant model
  3683 ;;
  3684                           
  3685                           	psect	text11
  3686  00E9C2                     __ptext11:
  3687                           	opt stack 0
  3688  00E9C2                     _Rcmd3:
  3689                           	opt stack 26
  3690                           
  3691                           ;ST7735_TFT.c: 373: write_command(0xE0);
  3692                           
  3693                           ;incstack = 0
  3694  00E9C2  0EE0               	movlw	224
  3695  00E9C4  ECFD  F06C         	call	_write_command
  3696                           
  3697                           ;ST7735_TFT.c: 374: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
  3698  00E9C8  0E02               	movlw	2
  3699  00E9CA  EC05  F06D         	call	_write_data
  3700  00E9CE  0E1C               	movlw	28
  3701  00E9D0  EC05  F06D         	call	_write_data
  3702  00E9D4  0E07               	movlw	7
  3703  00E9D6  EC05  F06D         	call	_write_data
  3704  00E9DA  0E12               	movlw	18
  3705  00E9DC  EC05  F06D         	call	_write_data
  3706                           
  3707                           ;ST7735_TFT.c: 375: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
  3708  00E9E0  0E37               	movlw	55
  3709  00E9E2  EC05  F06D         	call	_write_data
  3710  00E9E6  0E32               	movlw	50
  3711  00E9E8  EC05  F06D         	call	_write_data
  3712  00E9EC  0E29               	movlw	41
  3713  00E9EE  EC05  F06D         	call	_write_data
  3714  00E9F2  0E2D               	movlw	45
  3715  00E9F4  EC05  F06D         	call	_write_data
  3716                           
  3717                           ;ST7735_TFT.c: 376: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
  3718  00E9F8  0E29               	movlw	41
  3719  00E9FA  EC05  F06D         	call	_write_data
  3720  00E9FE  0E25               	movlw	37
  3721  00EA00  EC05  F06D         	call	_write_data
  3722  00EA04  0E2B               	movlw	43
  3723  00EA06  EC05  F06D         	call	_write_data
  3724  00EA0A  0E39               	movlw	57
  3725  00EA0C  EC05  F06D         	call	_write_data
  3726                           
  3727                           ;ST7735_TFT.c: 377: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
  3728  00EA10  0E00               	movlw	0
  3729  00EA12  EC05  F06D         	call	_write_data
  3730  00EA16  0E01               	movlw	1
  3731  00EA18  EC05  F06D         	call	_write_data
  3732  00EA1C  0E03               	movlw	3
  3733  00EA1E  EC05  F06D         	call	_write_data
  3734  00EA22  0E10               	movlw	16
  3735  00EA24  EC05  F06D         	call	_write_data
  3736                           
  3737                           ;ST7735_TFT.c: 378: write_command(0xE1);
  3738  00EA28  0EE1               	movlw	225
  3739  00EA2A  ECFD  F06C         	call	_write_command
  3740                           
  3741                           ;ST7735_TFT.c: 379: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
  3742  00EA2E  0E03               	movlw	3
  3743  00EA30  EC05  F06D         	call	_write_data
  3744  00EA34  0E1D               	movlw	29
  3745  00EA36  EC05  F06D         	call	_write_data
  3746  00EA3A  0E07               	movlw	7
  3747  00EA3C  EC05  F06D         	call	_write_data
  3748  00EA40  0E06               	movlw	6
  3749  00EA42  EC05  F06D         	call	_write_data
  3750                           
  3751                           ;ST7735_TFT.c: 380: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
  3752  00EA46  0E2E               	movlw	46
  3753  00EA48  EC05  F06D         	call	_write_data
  3754  00EA4C  0E2C               	movlw	44
  3755  00EA4E  EC05  F06D         	call	_write_data
  3756  00EA52  0E29               	movlw	41
  3757  00EA54  EC05  F06D         	call	_write_data
  3758  00EA58  0E2D               	movlw	45
  3759  00EA5A  EC05  F06D         	call	_write_data
  3760                           
  3761                           ;ST7735_TFT.c: 381: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
  3762  00EA5E  0E2E               	movlw	46
  3763  00EA60  EC05  F06D         	call	_write_data
  3764  00EA64  0E2E               	movlw	46
  3765  00EA66  EC05  F06D         	call	_write_data
  3766  00EA6A  0E37               	movlw	55
  3767  00EA6C  EC05  F06D         	call	_write_data
  3768  00EA70  0E3F               	movlw	63
  3769  00EA72  EC05  F06D         	call	_write_data
  3770                           
  3771                           ;ST7735_TFT.c: 382: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
  3772  00EA76  0E00               	movlw	0
  3773  00EA78  EC05  F06D         	call	_write_data
  3774  00EA7C  0E00               	movlw	0
  3775  00EA7E  EC05  F06D         	call	_write_data
  3776  00EA82  0E02               	movlw	2
  3777  00EA84  EC05  F06D         	call	_write_data
  3778  00EA88  0E10               	movlw	16
  3779  00EA8A  EC05  F06D         	call	_write_data
  3780                           
  3781                           ;ST7735_TFT.c: 383: write_command(0x13);
  3782  00EA8E  0E13               	movlw	19
  3783  00EA90  ECFD  F06C         	call	_write_command
  3784                           
  3785                           ;ST7735_TFT.c: 384: delay_ms(10);
  3786  00EA94  0E00               	movlw	0
  3787  00EA96  6E08               	movwf	delay_ms@ms+1,c
  3788  00EA98  0E0A               	movlw	10
  3789  00EA9A  6E07               	movwf	delay_ms@ms,c
  3790  00EA9C  EC8D  F06F         	call	_delay_ms	;wreg free
  3791                           
  3792                           ;ST7735_TFT.c: 385: write_command(0x29);
  3793  00EAA0  0E29               	movlw	41
  3794  00EAA2  ECFD  F06C         	call	_write_command
  3795                           
  3796                           ;ST7735_TFT.c: 386: delay_ms(100);
  3797  00EAA6  0E00               	movlw	0
  3798  00EAA8  6E08               	movwf	delay_ms@ms+1,c
  3799  00EAAA  0E64               	movlw	100
  3800  00EAAC  6E07               	movwf	delay_ms@ms,c
  3801  00EAAE  EC8D  F06F         	call	_delay_ms	;wreg free
  3802  00EAB2  0012               	return		;funcret
  3803  00EAB4                     __end_of_Rcmd3:
  3804                           	opt stack 0
  3805                           tblptru	equ	0xFF8
  3806                           tblptrh	equ	0xFF7
  3807                           tblptrl	equ	0xFF6
  3808                           tablat	equ	0xFF5
  3809                           intcon2	equ	0xFF1
  3810                           postinc0	equ	0xFEE
  3811                           wreg	equ	0xFE8
  3812                           postdec1	equ	0xFE5
  3813                           fsr1l	equ	0xFE1
  3814                           status	equ	0xFD8
  3815                           
  3816 ;; *************** function _Rcmd2red *****************
  3817 ;; Defined at:
  3818 ;;		line 361 in file "ST7735_TFT.c"
  3819 ;; Parameters:    Size  Location     Type
  3820 ;;		None
  3821 ;; Auto vars:     Size  Location     Type
  3822 ;;		None
  3823 ;; Return value:  Size  Location     Type
  3824 ;;		None               void
  3825 ;; Registers used:
  3826 ;;		wreg, status,2, cstack
  3827 ;; Tracked objects:
  3828 ;;		On entry : 0/0
  3829 ;;		On exit  : 0/0
  3830 ;;		Unchanged: 0/0
  3831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3832 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3833 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3834 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3835 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3836 ;;Total ram usage:        0 bytes
  3837 ;; Hardware stack levels used:    1
  3838 ;; Hardware stack levels required when called:    2
  3839 ;; This function calls:
  3840 ;;		_write_command
  3841 ;;		_write_data
  3842 ;; This function is called by:
  3843 ;;		_TFT_GreenTab_Initialize
  3844 ;; This function uses a non-reentrant model
  3845 ;;
  3846                           
  3847                           	psect	text12
  3848  00DCA0                     __ptext12:
  3849                           	opt stack 0
  3850  00DCA0                     _Rcmd2red:
  3851                           	opt stack 26
  3852                           
  3853                           ;ST7735_TFT.c: 363: write_command(0x2A);
  3854                           
  3855                           ;incstack = 0
  3856  00DCA0  0E2A               	movlw	42
  3857  00DCA2  ECFD  F06C         	call	_write_command
  3858                           
  3859                           ;ST7735_TFT.c: 364: write_data(0x00); write_data(0x00);
  3860  00DCA6  0E00               	movlw	0
  3861  00DCA8  EC05  F06D         	call	_write_data
  3862  00DCAC  0E00               	movlw	0
  3863  00DCAE  EC05  F06D         	call	_write_data
  3864                           
  3865                           ;ST7735_TFT.c: 365: write_data(0x00); write_data(0x7F);
  3866  00DCB2  0E00               	movlw	0
  3867  00DCB4  EC05  F06D         	call	_write_data
  3868  00DCB8  0E7F               	movlw	127
  3869  00DCBA  EC05  F06D         	call	_write_data
  3870                           
  3871                           ;ST7735_TFT.c: 366: write_command(0x2B);
  3872  00DCBE  0E2B               	movlw	43
  3873  00DCC0  ECFD  F06C         	call	_write_command
  3874                           
  3875                           ;ST7735_TFT.c: 367: write_data(0x00); write_data(0x00);
  3876  00DCC4  0E00               	movlw	0
  3877  00DCC6  EC05  F06D         	call	_write_data
  3878  00DCCA  0E00               	movlw	0
  3879  00DCCC  EC05  F06D         	call	_write_data
  3880                           
  3881                           ;ST7735_TFT.c: 368: write_data(0x00); write_data(0x9F);
  3882  00DCD0  0E00               	movlw	0
  3883  00DCD2  EC05  F06D         	call	_write_data
  3884  00DCD6  0E9F               	movlw	159
  3885  00DCD8  EC05  F06D         	call	_write_data
  3886  00DCDC  0012               	return		;funcret
  3887  00DCDE                     __end_of_Rcmd2red:
  3888                           	opt stack 0
  3889                           tblptru	equ	0xFF8
  3890                           tblptrh	equ	0xFF7
  3891                           tblptrl	equ	0xFF6
  3892                           tablat	equ	0xFF5
  3893                           intcon2	equ	0xFF1
  3894                           postinc0	equ	0xFEE
  3895                           wreg	equ	0xFE8
  3896                           postdec1	equ	0xFE5
  3897                           fsr1l	equ	0xFE1
  3898                           status	equ	0xFD8
  3899                           
  3900 ;; *************** function _Rcmd1 *****************
  3901 ;; Defined at:
  3902 ;;		line 314 in file "ST7735_TFT.c"
  3903 ;; Parameters:    Size  Location     Type
  3904 ;;		None
  3905 ;; Auto vars:     Size  Location     Type
  3906 ;;		None
  3907 ;; Return value:  Size  Location     Type
  3908 ;;		None               void
  3909 ;; Registers used:
  3910 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3911 ;; Tracked objects:
  3912 ;;		On entry : 0/0
  3913 ;;		On exit  : 0/0
  3914 ;;		Unchanged: 0/0
  3915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3916 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3917 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3918 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3919 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3920 ;;Total ram usage:        0 bytes
  3921 ;; Hardware stack levels used:    1
  3922 ;; Hardware stack levels required when called:    2
  3923 ;; This function calls:
  3924 ;;		_delay_ms
  3925 ;;		_write_command
  3926 ;;		_write_data
  3927 ;; This function is called by:
  3928 ;;		_TFT_GreenTab_Initialize
  3929 ;;		_TFT_BlackTab_Initialize
  3930 ;; This function uses a non-reentrant model
  3931 ;;
  3932                           
  3933                           	psect	text13
  3934  00EAB4                     __ptext13:
  3935                           	opt stack 0
  3936  00EAB4                     _Rcmd1:
  3937                           	opt stack 26
  3938                           
  3939                           ;ST7735_TFT.c: 316: write_command(0x01);
  3940                           
  3941                           ;incstack = 0
  3942  00EAB4  0E01               	movlw	1
  3943  00EAB6  ECFD  F06C         	call	_write_command
  3944                           
  3945                           ;ST7735_TFT.c: 317: delay_ms(150);
  3946  00EABA  0E00               	movlw	0
  3947  00EABC  6E08               	movwf	delay_ms@ms+1,c
  3948  00EABE  0E96               	movlw	150
  3949  00EAC0  6E07               	movwf	delay_ms@ms,c
  3950  00EAC2  EC8D  F06F         	call	_delay_ms	;wreg free
  3951                           
  3952                           ;ST7735_TFT.c: 318: write_command(0x11);
  3953  00EAC6  0E11               	movlw	17
  3954  00EAC8  ECFD  F06C         	call	_write_command
  3955                           
  3956                           ;ST7735_TFT.c: 319: delay_ms(500);
  3957  00EACC  0E01               	movlw	1
  3958  00EACE  6E08               	movwf	delay_ms@ms+1,c
  3959  00EAD0  0EF4               	movlw	244
  3960  00EAD2  6E07               	movwf	delay_ms@ms,c
  3961  00EAD4  EC8D  F06F         	call	_delay_ms	;wreg free
  3962                           
  3963                           ;ST7735_TFT.c: 320: write_command(0xB1);
  3964  00EAD8  0EB1               	movlw	177
  3965  00EADA  ECFD  F06C         	call	_write_command
  3966                           
  3967                           ;ST7735_TFT.c: 321: write_data(0x01);
  3968  00EADE  0E01               	movlw	1
  3969  00EAE0  EC05  F06D         	call	_write_data
  3970                           
  3971                           ;ST7735_TFT.c: 322: write_data(0x2C);
  3972  00EAE4  0E2C               	movlw	44
  3973  00EAE6  EC05  F06D         	call	_write_data
  3974                           
  3975                           ;ST7735_TFT.c: 323: write_data(0x2D);
  3976  00EAEA  0E2D               	movlw	45
  3977  00EAEC  EC05  F06D         	call	_write_data
  3978                           
  3979                           ;ST7735_TFT.c: 324: write_command(0xB2);
  3980  00EAF0  0EB2               	movlw	178
  3981  00EAF2  ECFD  F06C         	call	_write_command
  3982                           
  3983                           ;ST7735_TFT.c: 325: write_data(0x01);
  3984  00EAF6  0E01               	movlw	1
  3985  00EAF8  EC05  F06D         	call	_write_data
  3986                           
  3987                           ;ST7735_TFT.c: 326: write_data(0x2C);
  3988  00EAFC  0E2C               	movlw	44
  3989  00EAFE  EC05  F06D         	call	_write_data
  3990                           
  3991                           ;ST7735_TFT.c: 327: write_data(0x2D);
  3992  00EB02  0E2D               	movlw	45
  3993  00EB04  EC05  F06D         	call	_write_data
  3994                           
  3995                           ;ST7735_TFT.c: 328: write_command(0xB3);
  3996  00EB08  0EB3               	movlw	179
  3997  00EB0A  ECFD  F06C         	call	_write_command
  3998                           
  3999                           ;ST7735_TFT.c: 329: write_data(0x01);
  4000  00EB0E  0E01               	movlw	1
  4001  00EB10  EC05  F06D         	call	_write_data
  4002                           
  4003                           ;ST7735_TFT.c: 330: write_data(0x2C);
  4004  00EB14  0E2C               	movlw	44
  4005  00EB16  EC05  F06D         	call	_write_data
  4006                           
  4007                           ;ST7735_TFT.c: 331: write_data(0x2D);
  4008  00EB1A  0E2D               	movlw	45
  4009  00EB1C  EC05  F06D         	call	_write_data
  4010                           
  4011                           ;ST7735_TFT.c: 332: write_data(0x01);
  4012  00EB20  0E01               	movlw	1
  4013  00EB22  EC05  F06D         	call	_write_data
  4014                           
  4015                           ;ST7735_TFT.c: 333: write_data(0x2C);
  4016  00EB26  0E2C               	movlw	44
  4017  00EB28  EC05  F06D         	call	_write_data
  4018                           
  4019                           ;ST7735_TFT.c: 334: write_data(0x2D);
  4020  00EB2C  0E2D               	movlw	45
  4021  00EB2E  EC05  F06D         	call	_write_data
  4022                           
  4023                           ;ST7735_TFT.c: 335: write_command(0xB4);
  4024  00EB32  0EB4               	movlw	180
  4025  00EB34  ECFD  F06C         	call	_write_command
  4026                           
  4027                           ;ST7735_TFT.c: 336: write_data(0x07);
  4028  00EB38  0E07               	movlw	7
  4029  00EB3A  EC05  F06D         	call	_write_data
  4030                           
  4031                           ;ST7735_TFT.c: 337: write_command(0xC0);
  4032  00EB3E  0EC0               	movlw	192
  4033  00EB40  ECFD  F06C         	call	_write_command
  4034                           
  4035                           ;ST7735_TFT.c: 338: write_data(0xA2);
  4036  00EB44  0EA2               	movlw	162
  4037  00EB46  EC05  F06D         	call	_write_data
  4038                           
  4039                           ;ST7735_TFT.c: 339: write_data(0x02);
  4040  00EB4A  0E02               	movlw	2
  4041  00EB4C  EC05  F06D         	call	_write_data
  4042                           
  4043                           ;ST7735_TFT.c: 340: write_data(0x84);
  4044  00EB50  0E84               	movlw	132
  4045  00EB52  EC05  F06D         	call	_write_data
  4046                           
  4047                           ;ST7735_TFT.c: 341: write_command(0xC1);
  4048  00EB56  0EC1               	movlw	193
  4049  00EB58  ECFD  F06C         	call	_write_command
  4050                           
  4051                           ;ST7735_TFT.c: 342: write_data(0xC5);
  4052  00EB5C  0EC5               	movlw	197
  4053  00EB5E  EC05  F06D         	call	_write_data
  4054                           
  4055                           ;ST7735_TFT.c: 343: write_command(0xC2);
  4056  00EB62  0EC2               	movlw	194
  4057  00EB64  ECFD  F06C         	call	_write_command
  4058                           
  4059                           ;ST7735_TFT.c: 344: write_data(0x0A);
  4060  00EB68  0E0A               	movlw	10
  4061  00EB6A  EC05  F06D         	call	_write_data
  4062                           
  4063                           ;ST7735_TFT.c: 345: write_data(0x00);
  4064  00EB6E  0E00               	movlw	0
  4065  00EB70  EC05  F06D         	call	_write_data
  4066                           
  4067                           ;ST7735_TFT.c: 346: write_command(0xC3);
  4068  00EB74  0EC3               	movlw	195
  4069  00EB76  ECFD  F06C         	call	_write_command
  4070                           
  4071                           ;ST7735_TFT.c: 347: write_data(0x8A);
  4072  00EB7A  0E8A               	movlw	138
  4073  00EB7C  EC05  F06D         	call	_write_data
  4074                           
  4075                           ;ST7735_TFT.c: 348: write_data(0x2A);
  4076  00EB80  0E2A               	movlw	42
  4077  00EB82  EC05  F06D         	call	_write_data
  4078                           
  4079                           ;ST7735_TFT.c: 349: write_command(0xC4);
  4080  00EB86  0EC4               	movlw	196
  4081  00EB88  ECFD  F06C         	call	_write_command
  4082                           
  4083                           ;ST7735_TFT.c: 350: write_data(0x8A);
  4084  00EB8C  0E8A               	movlw	138
  4085  00EB8E  EC05  F06D         	call	_write_data
  4086                           
  4087                           ;ST7735_TFT.c: 351: write_data(0xEE);
  4088  00EB92  0EEE               	movlw	238
  4089  00EB94  EC05  F06D         	call	_write_data
  4090                           
  4091                           ;ST7735_TFT.c: 352: write_command(0xC5);
  4092  00EB98  0EC5               	movlw	197
  4093  00EB9A  ECFD  F06C         	call	_write_command
  4094                           
  4095                           ;ST7735_TFT.c: 353: write_data(0x0E);
  4096  00EB9E  0E0E               	movlw	14
  4097  00EBA0  EC05  F06D         	call	_write_data
  4098                           
  4099                           ;ST7735_TFT.c: 354: write_command(0x20);
  4100  00EBA4  0E20               	movlw	32
  4101  00EBA6  ECFD  F06C         	call	_write_command
  4102                           
  4103                           ;ST7735_TFT.c: 355: write_command(0x36);
  4104  00EBAA  0E36               	movlw	54
  4105  00EBAC  ECFD  F06C         	call	_write_command
  4106                           
  4107                           ;ST7735_TFT.c: 356: write_data(0xC8);
  4108  00EBB0  0EC8               	movlw	200
  4109  00EBB2  EC05  F06D         	call	_write_data
  4110                           
  4111                           ;ST7735_TFT.c: 357: write_command(0x3A);
  4112  00EBB6  0E3A               	movlw	58
  4113  00EBB8  ECFD  F06C         	call	_write_command
  4114                           
  4115                           ;ST7735_TFT.c: 358: write_data(0x05);
  4116  00EBBC  0E05               	movlw	5
  4117  00EBBE  EC05  F06D         	call	_write_data
  4118  00EBC2  0012               	return		;funcret
  4119  00EBC4                     __end_of_Rcmd1:
  4120                           	opt stack 0
  4121                           tblptru	equ	0xFF8
  4122                           tblptrh	equ	0xFF7
  4123                           tblptrl	equ	0xFF6
  4124                           tablat	equ	0xFF5
  4125                           intcon2	equ	0xFF1
  4126                           postinc0	equ	0xFEE
  4127                           wreg	equ	0xFE8
  4128                           postdec1	equ	0xFE5
  4129                           fsr1l	equ	0xFE1
  4130                           status	equ	0xFD8
  4131                           
  4132 ;; *************** function _LCD_Reset *****************
  4133 ;; Defined at:
  4134 ;;		line 250 in file "ST7735_TFT.c"
  4135 ;; Parameters:    Size  Location     Type
  4136 ;;		None
  4137 ;; Auto vars:     Size  Location     Type
  4138 ;;		None
  4139 ;; Return value:  Size  Location     Type
  4140 ;;		None               void
  4141 ;; Registers used:
  4142 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4143 ;; Tracked objects:
  4144 ;;		On entry : 0/0
  4145 ;;		On exit  : 0/0
  4146 ;;		Unchanged: 0/0
  4147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4148 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4149 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4150 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4151 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4152 ;;Total ram usage:        0 bytes
  4153 ;; Hardware stack levels used:    1
  4154 ;; Hardware stack levels required when called:    2
  4155 ;; This function calls:
  4156 ;;		_delay_ms
  4157 ;; This function is called by:
  4158 ;;		_Initialize_Screen
  4159 ;; This function uses a non-reentrant model
  4160 ;;
  4161                           
  4162                           	psect	text14
  4163  00DA2C                     __ptext14:
  4164                           	opt stack 0
  4165  00DA2C                     _LCD_Reset:
  4166                           	opt stack 27
  4167                           
  4168                           ;ST7735_TFT.c: 252: PORTDbits.RD2 = 0;
  4169                           
  4170                           ;incstack = 0
  4171  00DA2C  9483               	bcf	3971,2,c	;volatile
  4172                           
  4173                           ;ST7735_TFT.c: 253: delay_ms(100);
  4174  00DA2E  0E00               	movlw	0
  4175  00DA30  6E08               	movwf	delay_ms@ms+1,c
  4176  00DA32  0E64               	movlw	100
  4177  00DA34  6E07               	movwf	delay_ms@ms,c
  4178  00DA36  EC8D  F06F         	call	_delay_ms	;wreg free
  4179                           
  4180                           ;ST7735_TFT.c: 254: PORTDbits.RD2 = 1;
  4181  00DA3A  8483               	bsf	3971,2,c	;volatile
  4182  00DA3C  0012               	return		;funcret
  4183  00DA3E                     __end_of_LCD_Reset:
  4184                           	opt stack 0
  4185                           tblptru	equ	0xFF8
  4186                           tblptrh	equ	0xFF7
  4187                           tblptrl	equ	0xFF6
  4188                           tablat	equ	0xFF5
  4189                           intcon2	equ	0xFF1
  4190                           postinc0	equ	0xFEE
  4191                           wreg	equ	0xFE8
  4192                           postdec1	equ	0xFE5
  4193                           fsr1l	equ	0xFE1
  4194                           status	equ	0xFD8
  4195                           
  4196 ;; *************** function _delay_ms *****************
  4197 ;; Defined at:
  4198 ;;		line 97 in file "ST7735_TFT.c"
  4199 ;; Parameters:    Size  Location     Type
  4200 ;;  ms              2    6[COMRAM] int 
  4201 ;; Auto vars:     Size  Location     Type
  4202 ;;  count           2   10[COMRAM] int 
  4203 ;; Return value:  Size  Location     Type
  4204 ;;		None               void
  4205 ;; Registers used:
  4206 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4207 ;; Tracked objects:
  4208 ;;		On entry : 0/0
  4209 ;;		On exit  : 0/0
  4210 ;;		Unchanged: 0/0
  4211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4212 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4213 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4214 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4215 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4216 ;;Total ram usage:        6 bytes
  4217 ;; Hardware stack levels used:    1
  4218 ;; Hardware stack levels required when called:    1
  4219 ;; This function calls:
  4220 ;;		___wmul
  4221 ;; This function is called by:
  4222 ;;		_LCD_Reset
  4223 ;;		_Rcmd1
  4224 ;;		_Rcmd3
  4225 ;;		_Bcmd
  4226 ;; This function uses a non-reentrant model
  4227 ;;
  4228                           
  4229                           	psect	text15
  4230  00DF1A                     __ptext15:
  4231                           	opt stack 0
  4232  00DF1A                     _delay_ms:
  4233                           	opt stack 26
  4234                           
  4235                           ;ST7735_TFT.c: 103: int count;
  4236                           ;ST7735_TFT.c: 104: count = 8000000/4000/8 * ms;
  4237                           
  4238                           ;incstack = 0
  4239  00DF1A  C007  F001         	movff	delay_ms@ms,___wmul@multiplier
  4240  00DF1E  C008  F002         	movff	delay_ms@ms+1,___wmul@multiplier+1
  4241  00DF22  0E00               	movlw	0
  4242  00DF24  6E04               	movwf	___wmul@multiplicand+1,c
  4243  00DF26  0EFA               	movlw	250
  4244  00DF28  6E03               	movwf	___wmul@multiplicand,c
  4245  00DF2A  EC89  F06D         	call	___wmul	;wreg free
  4246  00DF2E  C001  F00B         	movff	?___wmul,delay_ms@count
  4247  00DF32  C002  F00C         	movff	?___wmul+1,delay_ms@count+1
  4248                           
  4249                           ;ST7735_TFT.c: 105: count = (0xffff - count);
  4250  00DF36  C00B  F009         	movff	delay_ms@count,??_delay_ms
  4251  00DF3A  C00C  F00A         	movff	delay_ms@count+1,??_delay_ms+1
  4252  00DF3E  1E09               	comf	??_delay_ms,f,c
  4253  00DF40  1E0A               	comf	??_delay_ms+1,f,c
  4254  00DF42  4A09               	infsnz	??_delay_ms,f,c
  4255  00DF44  2A0A               	incf	??_delay_ms+1,f,c
  4256  00DF46  0EFF               	movlw	255
  4257  00DF48  2409               	addwf	??_delay_ms,w,c
  4258  00DF4A  6E0B               	movwf	delay_ms@count,c
  4259  00DF4C  0EFF               	movlw	255
  4260  00DF4E  200A               	addwfc	??_delay_ms+1,w,c
  4261  00DF50  6E0C               	movwf	delay_ms@count+1,c
  4262                           
  4263                           ;ST7735_TFT.c: 107: T3CON = 0xb8;
  4264  00DF52  0EB8               	movlw	184
  4265  00DF54  6EB1               	movwf	4017,c	;volatile
  4266                           
  4267                           ;ST7735_TFT.c: 109: TMR0L = count & 0x00ff;
  4268  00DF56  C00B  FFD6         	movff	delay_ms@count,4054	;volatile
  4269                           
  4270                           ;ST7735_TFT.c: 110: TMR0H = count >> 8;
  4271  00DF5A  500C               	movf	delay_ms@count+1,w,c
  4272  00DF5C  6ED7               	movwf	4055,c	;volatile
  4273                           
  4274                           ;ST7735_TFT.c: 112: PIR2bits.TMR3IF = 0;
  4275  00DF5E  92A1               	bcf	4001,1,c	;volatile
  4276                           
  4277                           ;ST7735_TFT.c: 113: T3CONbits.TMR3ON = 1;
  4278  00DF60  80B1               	bsf	4017,0,c	;volatile
  4279                           
  4280                           ;ST7735_TFT.c: 115: while (PIR2bits.TMR3IF == 0);
  4281  00DF62  D000               	goto	l113
  4282  00DF64                     l113:
  4283  00DF64  A2A1               	btfss	4001,1,c	;volatile
  4284  00DF66  D7FE               	goto	l113
  4285                           
  4286                           ;ST7735_TFT.c: 116: T3CONbits.TMR3ON = 0;
  4287  00DF68  90B1               	bcf	4017,0,c	;volatile
  4288  00DF6A  0012               	return		;funcret
  4289  00DF6C                     __end_of_delay_ms:
  4290                           	opt stack 0
  4291                           tblptru	equ	0xFF8
  4292                           tblptrh	equ	0xFF7
  4293                           tblptrl	equ	0xFF6
  4294                           tablat	equ	0xFF5
  4295                           intcon2	equ	0xFF1
  4296                           postinc0	equ	0xFEE
  4297                           wreg	equ	0xFE8
  4298                           postdec1	equ	0xFE5
  4299                           fsr1l	equ	0xFE1
  4300                           status	equ	0xFD8
  4301                           
  4302 ;; *************** function _Init_ADC *****************
  4303 ;; Defined at:
  4304 ;;		line 302 in file "Lab7-8.c"
  4305 ;; Parameters:    Size  Location     Type
  4306 ;;		None
  4307 ;; Auto vars:     Size  Location     Type
  4308 ;;		None
  4309 ;; Return value:  Size  Location     Type
  4310 ;;		None               void
  4311 ;; Registers used:
  4312 ;;		wreg, status,2
  4313 ;; Tracked objects:
  4314 ;;		On entry : 0/0
  4315 ;;		On exit  : 0/0
  4316 ;;		Unchanged: 0/0
  4317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4318 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4319 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4320 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4321 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4322 ;;Total ram usage:        0 bytes
  4323 ;; Hardware stack levels used:    1
  4324 ;; This function calls:
  4325 ;;		Nothing
  4326 ;; This function is called by:
  4327 ;;		_main
  4328 ;; This function uses a non-reentrant model
  4329 ;;
  4330                           
  4331                           	psect	text16
  4332  00D9EC                     __ptext16:
  4333                           	opt stack 0
  4334  00D9EC                     _Init_ADC:
  4335                           	opt stack 30
  4336                           
  4337                           ;Lab7-8.c: 304: ADCON0 = 0x01;
  4338                           
  4339                           ;incstack = 0
  4340  00D9EC  0E01               	movlw	1
  4341  00D9EE  6EC2               	movwf	4034,c	;volatile
  4342                           
  4343                           ;Lab7-8.c: 305: ADCON1= 0x0E;
  4344  00D9F0  0E0E               	movlw	14
  4345  00D9F2  6EC1               	movwf	4033,c	;volatile
  4346                           
  4347                           ;Lab7-8.c: 306: ADCON2= 0xA9;
  4348  00D9F4  0EA9               	movlw	169
  4349  00D9F6  6EC0               	movwf	4032,c	;volatile
  4350  00D9F8  0012               	return		;funcret
  4351  00D9FA                     __end_of_Init_ADC:
  4352                           	opt stack 0
  4353                           tblptru	equ	0xFF8
  4354                           tblptrh	equ	0xFF7
  4355                           tblptrl	equ	0xFF6
  4356                           tablat	equ	0xFF5
  4357                           intcon2	equ	0xFF1
  4358                           postinc0	equ	0xFEE
  4359                           wreg	equ	0xFE8
  4360                           postdec1	equ	0xFE5
  4361                           fsr1l	equ	0xFE1
  4362                           status	equ	0xFD8
  4363                           
  4364 ;; *************** function _Day_Mode *****************
  4365 ;; Defined at:
  4366 ;;		line 398 in file "Lab7-8.c"
  4367 ;; Parameters:    Size  Location     Type
  4368 ;;		None
  4369 ;; Auto vars:     Size  Location     Type
  4370 ;;		None
  4371 ;; Return value:  Size  Location     Type
  4372 ;;		None               void
  4373 ;; Registers used:
  4374 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4375 ;; Tracked objects:
  4376 ;;		On entry : 0/0
  4377 ;;		On exit  : 0/0
  4378 ;;		Unchanged: 0/0
  4379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4380 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4381 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4382 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4383 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4384 ;;Total ram usage:        0 bytes
  4385 ;; Hardware stack levels used:    1
  4386 ;; Hardware stack levels required when called:   10
  4387 ;; This function calls:
  4388 ;;		_PED_Control
  4389 ;;		_Set_EW
  4390 ;;		_Set_EW_LT
  4391 ;;		_Set_NS
  4392 ;;		_Set_NS_LT
  4393 ;;		_Wait_N_Seconds
  4394 ;; This function is called by:
  4395 ;;		_main
  4396 ;; This function uses a non-reentrant model
  4397 ;;
  4398                           
  4399                           	psect	text17
  4400  00E660                     __ptext17:
  4401                           	opt stack 0
  4402  00E660                     _Day_Mode:
  4403                           	opt stack 20
  4404                           
  4405                           ;Lab7-8.c: 400: MODE = 1;
  4406                           
  4407                           ;incstack = 0
  4408  00E660  0E00               	movlw	0
  4409  00E662  6E68               	movwf	_MODE+1,c
  4410  00E664  0E01               	movlw	1
  4411  00E666  6E67               	movwf	_MODE,c
  4412                           
  4413                           ;Lab7-8.c: 401: PORTEbits.RE1 = 1;
  4414  00E668  8284               	bsf	3972,1,c	;volatile
  4415                           
  4416                           ;Lab7-8.c: 402: Act_Mode_Txt[0] = 'D';
  4417  00E66A  0E44               	movlw	68
  4418  00E66C  6E54               	movwf	_Act_Mode_Txt,c
  4419  00E66E  D000               	goto	l3559
  4420  00E670                     l3559:
  4421                           
  4422                           ;Lab7-8.c: 405: {
  4423                           ;Lab7-8.c: 407: Set_EW(1);
  4424  00E670  0E01               	movlw	1
  4425  00E672  EC90  F06E         	call	_Set_EW
  4426                           
  4427                           ;Lab7-8.c: 408: Set_EW_LT(1);
  4428  00E676  0E01               	movlw	1
  4429  00E678  ECB2  F06E         	call	_Set_EW_LT
  4430                           
  4431                           ;Lab7-8.c: 409: Set_NS_LT(1);
  4432  00E67C  0E01               	movlw	1
  4433  00E67E  ECF6  F06E         	call	_Set_NS_LT
  4434                           
  4435                           ;Lab7-8.c: 410: Set_NS(2);
  4436  00E682  0E02               	movlw	2
  4437  00E684  ECD4  F06E         	call	_Set_NS
  4438                           
  4439                           ;Lab7-8.c: 411: if(PORTBbits.RB1==1)
  4440  00E688  A281               	btfss	3969,1,c	;volatile
  4441  00E68A  D005               	goto	l430
  4442                           
  4443                           ;Lab7-8.c: 412: {
  4444                           ;Lab7-8.c: 413: PED_Control(2,7);
  4445  00E68C  0E07               	movlw	7
  4446  00E68E  6E3C               	movwf	PED_Control@Num_Sec,c
  4447  00E690  0E02               	movlw	2
  4448  00E692  ECE1  F06D         	call	_PED_Control
  4449  00E696                     l430:
  4450                           
  4451                           ;Lab7-8.c: 414: }
  4452                           ;Lab7-8.c: 415: Wait_N_Seconds(9);
  4453  00E696  0E09               	movlw	9
  4454  00E698  ECB2  F06D         	call	_Wait_N_Seconds
  4455                           
  4456                           ;Lab7-8.c: 416: Set_NS(3);
  4457  00E69C  0E03               	movlw	3
  4458  00E69E  ECD4  F06E         	call	_Set_NS
  4459                           
  4460                           ;Lab7-8.c: 417: Wait_N_Seconds(3);
  4461  00E6A2  0E03               	movlw	3
  4462  00E6A4  ECB2  F06D         	call	_Wait_N_Seconds
  4463                           
  4464                           ;Lab7-8.c: 418: Set_NS(1);
  4465  00E6A8  0E01               	movlw	1
  4466  00E6AA  ECD4  F06E         	call	_Set_NS
  4467                           
  4468                           ;Lab7-8.c: 419: if(PORTAbits.RA4==1)
  4469  00E6AE  A880               	btfss	3968,4,c	;volatile
  4470  00E6B0  D010               	goto	l3585
  4471                           
  4472                           ;Lab7-8.c: 420: {
  4473                           ;Lab7-8.c: 421: Set_EW_LT(2);
  4474  00E6B2  0E02               	movlw	2
  4475  00E6B4  ECB2  F06E         	call	_Set_EW_LT
  4476                           
  4477                           ;Lab7-8.c: 422: Wait_N_Seconds(7);
  4478  00E6B8  0E07               	movlw	7
  4479  00E6BA  ECB2  F06D         	call	_Wait_N_Seconds
  4480                           
  4481                           ;Lab7-8.c: 423: Set_EW_LT(3);
  4482  00E6BE  0E03               	movlw	3
  4483  00E6C0  ECB2  F06E         	call	_Set_EW_LT
  4484                           
  4485                           ;Lab7-8.c: 424: Wait_N_Seconds(3);
  4486  00E6C4  0E03               	movlw	3
  4487  00E6C6  ECB2  F06D         	call	_Wait_N_Seconds
  4488                           
  4489                           ;Lab7-8.c: 425: Set_EW_LT(1);
  4490  00E6CA  0E01               	movlw	1
  4491  00E6CC  ECB2  F06E         	call	_Set_EW_LT
  4492  00E6D0  D000               	goto	l3585
  4493  00E6D2                     l3585:
  4494                           
  4495                           ;Lab7-8.c: 426: }
  4496                           ;Lab7-8.c: 427: Set_EW(2);
  4497  00E6D2  0E02               	movlw	2
  4498  00E6D4  EC90  F06E         	call	_Set_EW
  4499                           
  4500                           ;Lab7-8.c: 428: if (PORTBbits.RB0==1)
  4501  00E6D8  A081               	btfss	3969,0,c	;volatile
  4502  00E6DA  D005               	goto	l432
  4503                           
  4504                           ;Lab7-8.c: 429: {
  4505                           ;Lab7-8.c: 430: PED_Control(0,9);
  4506  00E6DC  0E09               	movlw	9
  4507  00E6DE  6E3C               	movwf	PED_Control@Num_Sec,c
  4508  00E6E0  0E00               	movlw	0
  4509  00E6E2  ECE1  F06D         	call	_PED_Control
  4510  00E6E6                     l432:
  4511                           
  4512                           ;Lab7-8.c: 431: }
  4513                           ;Lab7-8.c: 432: Wait_N_Seconds(8);
  4514  00E6E6  0E08               	movlw	8
  4515  00E6E8  ECB2  F06D         	call	_Wait_N_Seconds
  4516                           
  4517                           ;Lab7-8.c: 433: Set_EW(3);
  4518  00E6EC  0E03               	movlw	3
  4519  00E6EE  EC90  F06E         	call	_Set_EW
  4520                           
  4521                           ;Lab7-8.c: 434: Wait_N_Seconds(3);
  4522  00E6F2  0E03               	movlw	3
  4523  00E6F4  ECB2  F06D         	call	_Wait_N_Seconds
  4524                           
  4525                           ;Lab7-8.c: 435: Set_EW(1);
  4526  00E6F8  0E01               	movlw	1
  4527  00E6FA  EC90  F06E         	call	_Set_EW
  4528                           
  4529                           ;Lab7-8.c: 436: if(PORTAbits.RA5==1)
  4530  00E6FE  AA80               	btfss	3968,5,c	;volatile
  4531  00E700  D011               	goto	l436
  4532                           
  4533                           ;Lab7-8.c: 437: {
  4534                           ;Lab7-8.c: 438: Set_NS_LT(2);
  4535  00E702  0E02               	movlw	2
  4536  00E704  ECF6  F06E         	call	_Set_NS_LT
  4537                           
  4538                           ;Lab7-8.c: 439: Wait_N_Seconds(7);
  4539  00E708  0E07               	movlw	7
  4540  00E70A  ECB2  F06D         	call	_Wait_N_Seconds
  4541                           
  4542                           ;Lab7-8.c: 440: Set_NS_LT(3);
  4543  00E70E  0E03               	movlw	3
  4544  00E710  ECF6  F06E         	call	_Set_NS_LT
  4545                           
  4546                           ;Lab7-8.c: 441: Wait_N_Seconds(3);
  4547  00E714  0E03               	movlw	3
  4548  00E716  ECB2  F06D         	call	_Wait_N_Seconds
  4549                           
  4550                           ;Lab7-8.c: 442: Set_NS_LT(1);
  4551  00E71A  0E01               	movlw	1
  4552  00E71C  ECF6  F06E         	call	_Set_NS_LT
  4553                           
  4554                           ;Lab7-8.c: 443: }
  4555                           ;Lab7-8.c: 444: break;
  4556  00E720  D001               	goto	l436
  4557  00E722  D7A6               	goto	l3559
  4558  00E724                     l436:
  4559  00E724  0012               	return		;funcret
  4560  00E726                     __end_of_Day_Mode:
  4561                           	opt stack 0
  4562                           tblptru	equ	0xFF8
  4563                           tblptrh	equ	0xFF7
  4564                           tblptrl	equ	0xFF6
  4565                           tablat	equ	0xFF5
  4566                           intcon2	equ	0xFF1
  4567                           postinc0	equ	0xFEE
  4568                           wreg	equ	0xFE8
  4569                           postdec1	equ	0xFE5
  4570                           fsr1l	equ	0xFE1
  4571                           status	equ	0xFD8
  4572                           
  4573 ;; *************** function _Wait_N_Seconds *****************
  4574 ;; Defined at:
  4575 ;;		line 534 in file "Lab7-8.c"
  4576 ;; Parameters:    Size  Location     Type
  4577 ;;  seconds         1    wreg     unsigned char 
  4578 ;; Auto vars:     Size  Location     Type
  4579 ;;  seconds         1   59[COMRAM] unsigned char 
  4580 ;;  I               1   60[COMRAM] unsigned char 
  4581 ;; Return value:  Size  Location     Type
  4582 ;;		None               void
  4583 ;; Registers used:
  4584 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4585 ;; Tracked objects:
  4586 ;;		On entry : 0/0
  4587 ;;		On exit  : 0/0
  4588 ;;		Unchanged: 0/0
  4589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4590 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4591 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4592 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4593 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4594 ;;Total ram usage:        2 bytes
  4595 ;; Hardware stack levels used:    1
  4596 ;; Hardware stack levels required when called:    9
  4597 ;; This function calls:
  4598 ;;		_Wait_One_Second
  4599 ;;		_update_LCD_count
  4600 ;; This function is called by:
  4601 ;;		_Day_Mode
  4602 ;;		_Night_Mode
  4603 ;; This function uses a non-reentrant model
  4604 ;;
  4605                           
  4606                           	psect	text18
  4607  00DB64                     __ptext18:
  4608                           	opt stack 0
  4609  00DB64                     _Wait_N_Seconds:
  4610                           	opt stack 20
  4611                           
  4612                           ;incstack = 0
  4613                           ;Wait_N_Seconds@seconds stored from wreg
  4614  00DB64  6E3C               	movwf	Wait_N_Seconds@seconds,c
  4615                           
  4616                           ;Lab7-8.c: 536: char I;
  4617                           ;Lab7-8.c: 537: for (I = seconds; I> 0; I--)
  4618  00DB66  C03C  F03D         	movff	Wait_N_Seconds@seconds,Wait_N_Seconds@I
  4619  00DB6A                     l3423:
  4620  00DB6A  503D               	movf	Wait_N_Seconds@I,w,c
  4621  00DB6C  B4D8               	btfsc	status,2,c
  4622  00DB6E  D00B               	goto	l3433
  4623  00DB70  D001               	goto	l3427
  4624  00DB72  D009               	goto	l3433
  4625  00DB74                     l3427:
  4626                           
  4627                           ;Lab7-8.c: 538: {
  4628                           ;Lab7-8.c: 540: update_LCD_count(direction, I);
  4629  00DB74  C03D  F03A         	movff	Wait_N_Seconds@I,update_LCD_count@count
  4630  00DB78  5079               	movf	_direction,w,c
  4631  00DB7A  EC29  F077         	call	_update_LCD_count
  4632                           
  4633                           ;Lab7-8.c: 541: Wait_One_Second();
  4634  00DB7E  EC62  F070         	call	_Wait_One_Second	;wreg free
  4635  00DB82  063D               	decf	Wait_N_Seconds@I,f,c
  4636  00DB84  D7F2               	goto	l3423
  4637  00DB86                     l3433:
  4638                           
  4639                           ;Lab7-8.c: 542: }
  4640                           ;Lab7-8.c: 543: update_LCD_count(direction, 0);
  4641  00DB86  0E00               	movlw	0
  4642  00DB88  6E3A               	movwf	update_LCD_count@count,c
  4643  00DB8A  5079               	movf	_direction,w,c
  4644  00DB8C  EC29  F077         	call	_update_LCD_count
  4645  00DB90  0012               	return		;funcret
  4646  00DB92                     __end_of_Wait_N_Seconds:
  4647                           	opt stack 0
  4648                           tblptru	equ	0xFF8
  4649                           tblptrh	equ	0xFF7
  4650                           tblptrl	equ	0xFF6
  4651                           tablat	equ	0xFF5
  4652                           intcon2	equ	0xFF1
  4653                           postinc0	equ	0xFEE
  4654                           wreg	equ	0xFE8
  4655                           postdec1	equ	0xFE5
  4656                           fsr1l	equ	0xFE1
  4657                           status	equ	0xFD8
  4658                           
  4659 ;; *************** function _update_LCD_count *****************
  4660 ;; Defined at:
  4661 ;;		line 589 in file "Lab7-8.c"
  4662 ;; Parameters:    Size  Location     Type
  4663 ;;  direction       1    wreg     unsigned char 
  4664 ;;  count           1   57[COMRAM] unsigned char 
  4665 ;; Auto vars:     Size  Location     Type
  4666 ;;  direction       1   58[COMRAM] unsigned char 
  4667 ;; Return value:  Size  Location     Type
  4668 ;;		None               void
  4669 ;; Registers used:
  4670 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4671 ;; Tracked objects:
  4672 ;;		On entry : 0/0
  4673 ;;		On exit  : 0/0
  4674 ;;		Unchanged: 0/0
  4675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4676 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4677 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4678 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4679 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4680 ;;Total ram usage:        2 bytes
  4681 ;; Hardware stack levels used:    1
  4682 ;; Hardware stack levels required when called:    7
  4683 ;; This function calls:
  4684 ;;		___awdiv
  4685 ;;		___awmod
  4686 ;;		_drawtext
  4687 ;; This function is called by:
  4688 ;;		_Wait_N_Seconds
  4689 ;; This function uses a non-reentrant model
  4690 ;;
  4691                           
  4692                           	psect	text19
  4693  00EE52                     __ptext19:
  4694                           	opt stack 0
  4695  00EE52                     _update_LCD_count:
  4696                           	opt stack 21
  4697                           
  4698                           ;incstack = 0
  4699                           ;update_LCD_count@direction stored from wreg
  4700  00EE52  6E3B               	movwf	update_LCD_count@direction,c
  4701                           
  4702                           ;Lab7-8.c: 591: switch (direction)
  4703  00EE54  D0AE               	goto	l3293
  4704  00EE56                     l3275:
  4705                           
  4706                           ;Lab7-8.c: 594: EW_Count[0] = count/10 + '0';
  4707  00EE56  C03A  F001         	movff	update_LCD_count@count,___awdiv@dividend
  4708  00EE5A  6A02               	clrf	___awdiv@dividend+1,c
  4709  00EE5C  0E00               	movlw	0
  4710  00EE5E  6E04               	movwf	___awdiv@divisor+1,c
  4711  00EE60  0E0A               	movlw	10
  4712  00EE62  6E03               	movwf	___awdiv@divisor,c
  4713  00EE64  EC2B  F071         	call	___awdiv	;wreg free
  4714  00EE68  5001               	movf	?___awdiv,w,c
  4715  00EE6A  0F30               	addlw	48
  4716  00EE6C  6E45               	movwf	_EW_Count,c
  4717                           
  4718                           ;Lab7-8.c: 595: EW_Count[1] = count%10 + '0';
  4719  00EE6E  C03A  F001         	movff	update_LCD_count@count,___awmod@dividend
  4720  00EE72  6A02               	clrf	___awmod@dividend+1,c
  4721  00EE74  0E00               	movlw	0
  4722  00EE76  6E04               	movwf	___awmod@divisor+1,c
  4723  00EE78  0E0A               	movlw	10
  4724  00EE7A  6E03               	movwf	___awmod@divisor,c
  4725  00EE7C  EC21  F070         	call	___awmod	;wreg free
  4726  00EE80  5001               	movf	?___awmod,w,c
  4727  00EE82  0F30               	addlw	48
  4728  00EE84  6E46               	movwf	_EW_Count+1,c
  4729                           
  4730                           ;Lab7-8.c: 596: drawtext(100, 20 + 10, EW_Count, 0x07FF, 0x0000, 2);
  4731  00EE86  0E1E               	movlw	30
  4732  00EE88  6E29               	movwf	drawtext@y,c
  4733  00EE8A  0E45               	movlw	low _EW_Count
  4734  00EE8C  6E2A               	movwf	drawtext@_text,c
  4735  00EE8E  0E00               	movlw	high _EW_Count
  4736  00EE90  6E2B               	movwf	drawtext@_text+1,c
  4737  00EE92  0E07               	movlw	7
  4738  00EE94  6E2D               	movwf	drawtext@color+1,c
  4739  00EE96  682C               	setf	drawtext@color,c
  4740  00EE98  0E00               	movlw	0
  4741  00EE9A  6E2F               	movwf	drawtext@bg+1,c
  4742  00EE9C  0E00               	movlw	0
  4743  00EE9E  6E2E               	movwf	drawtext@bg,c
  4744  00EEA0  0E02               	movlw	2
  4745  00EEA2  6E30               	movwf	drawtext@size,c
  4746  00EEA4  0E64               	movlw	100
  4747  00EEA6  EC01  F074         	call	_drawtext
  4748                           
  4749                           ;Lab7-8.c: 597: break;
  4750  00EEAA  D091               	goto	l480
  4751  00EEAC                     l3279:
  4752                           
  4753                           ;Lab7-8.c: 600: NSLT_Count[0] = count/10 + '0';
  4754  00EEAC  C03A  F001         	movff	update_LCD_count@count,___awdiv@dividend
  4755  00EEB0  6A02               	clrf	___awdiv@dividend+1,c
  4756  00EEB2  0E00               	movlw	0
  4757  00EEB4  6E04               	movwf	___awdiv@divisor+1,c
  4758  00EEB6  0E0A               	movlw	10
  4759  00EEB8  6E03               	movwf	___awdiv@divisor,c
  4760  00EEBA  EC2B  F071         	call	___awdiv	;wreg free
  4761  00EEBE  5001               	movf	?___awdiv,w,c
  4762  00EEC0  0F30               	addlw	48
  4763  00EEC2  6E48               	movwf	_NSLT_Count,c
  4764                           
  4765                           ;Lab7-8.c: 601: NSLT_Count[1] = count%10 + '0';
  4766  00EEC4  C03A  F001         	movff	update_LCD_count@count,___awmod@dividend
  4767  00EEC8  6A02               	clrf	___awmod@dividend+1,c
  4768  00EECA  0E00               	movlw	0
  4769  00EECC  6E04               	movwf	___awmod@divisor+1,c
  4770  00EECE  0E0A               	movlw	10
  4771  00EED0  6E03               	movwf	___awmod@divisor,c
  4772  00EED2  EC21  F070         	call	___awmod	;wreg free
  4773  00EED6  5001               	movf	?___awmod,w,c
  4774  00EED8  0F30               	addlw	48
  4775  00EEDA  6E49               	movwf	_NSLT_Count+1,c
  4776                           
  4777                           ;Lab7-8.c: 602: drawtext(100, 110 + 10, NSLT_Count,
  4778                           ;Lab7-8.c: 603: 0xF81F, 0x0000, 2);
  4779  00EEDC  0E78               	movlw	120
  4780  00EEDE  6E29               	movwf	drawtext@y,c
  4781  00EEE0  0E48               	movlw	low _NSLT_Count
  4782  00EEE2  6E2A               	movwf	drawtext@_text,c
  4783  00EEE4  0E00               	movlw	high _NSLT_Count
  4784  00EEE6  6E2B               	movwf	drawtext@_text+1,c
  4785  00EEE8  0EF8               	movlw	248
  4786  00EEEA  6E2D               	movwf	drawtext@color+1,c
  4787  00EEEC  0E1F               	movlw	31
  4788  00EEEE  6E2C               	movwf	drawtext@color,c
  4789  00EEF0  0E00               	movlw	0
  4790  00EEF2  6E2F               	movwf	drawtext@bg+1,c
  4791  00EEF4  0E00               	movlw	0
  4792  00EEF6  6E2E               	movwf	drawtext@bg,c
  4793  00EEF8  0E02               	movlw	2
  4794  00EEFA  6E30               	movwf	drawtext@size,c
  4795  00EEFC  0E64               	movlw	100
  4796  00EEFE  EC01  F074         	call	_drawtext
  4797                           
  4798                           ;Lab7-8.c: 604: break;
  4799  00EF02  D065               	goto	l480
  4800  00EF04                     l3283:
  4801                           
  4802                           ;Lab7-8.c: 606: NS_Count[0] = count/10 + '0';
  4803  00EF04  C03A  F001         	movff	update_LCD_count@count,___awdiv@dividend
  4804  00EF08  6A02               	clrf	___awdiv@dividend+1,c
  4805  00EF0A  0E00               	movlw	0
  4806  00EF0C  6E04               	movwf	___awdiv@divisor+1,c
  4807  00EF0E  0E0A               	movlw	10
  4808  00EF10  6E03               	movwf	___awdiv@divisor,c
  4809  00EF12  EC2B  F071         	call	___awdiv	;wreg free
  4810  00EF16  5001               	movf	?___awdiv,w,c
  4811  00EF18  0F30               	addlw	48
  4812  00EF1A  6E4B               	movwf	_NS_Count,c
  4813                           
  4814                           ;Lab7-8.c: 607: NS_Count[1] = count%10 + '0';
  4815  00EF1C  C03A  F001         	movff	update_LCD_count@count,___awmod@dividend
  4816  00EF20  6A02               	clrf	___awmod@dividend+1,c
  4817  00EF22  0E00               	movlw	0
  4818  00EF24  6E04               	movwf	___awmod@divisor+1,c
  4819  00EF26  0E0A               	movlw	10
  4820  00EF28  6E03               	movwf	___awmod@divisor,c
  4821  00EF2A  EC21  F070         	call	___awmod	;wreg free
  4822  00EF2E  5001               	movf	?___awmod,w,c
  4823  00EF30  0F30               	addlw	48
  4824  00EF32  6E4C               	movwf	_NS_Count+1,c
  4825                           
  4826                           ;Lab7-8.c: 608: drawtext(100, 80 + 10, NS_Count, 0x001F, 0x0000, 2);
  4827  00EF34  0E5A               	movlw	90
  4828  00EF36  6E29               	movwf	drawtext@y,c
  4829  00EF38  0E4B               	movlw	low _NS_Count
  4830  00EF3A  6E2A               	movwf	drawtext@_text,c
  4831  00EF3C  0E00               	movlw	high _NS_Count
  4832  00EF3E  6E2B               	movwf	drawtext@_text+1,c
  4833  00EF40  0E00               	movlw	0
  4834  00EF42  6E2D               	movwf	drawtext@color+1,c
  4835  00EF44  0E1F               	movlw	31
  4836  00EF46  6E2C               	movwf	drawtext@color,c
  4837  00EF48  0E00               	movlw	0
  4838  00EF4A  6E2F               	movwf	drawtext@bg+1,c
  4839  00EF4C  0E00               	movlw	0
  4840  00EF4E  6E2E               	movwf	drawtext@bg,c
  4841  00EF50  0E02               	movlw	2
  4842  00EF52  6E30               	movwf	drawtext@size,c
  4843  00EF54  0E64               	movlw	100
  4844  00EF56  EC01  F074         	call	_drawtext
  4845                           
  4846                           ;Lab7-8.c: 609: break;
  4847  00EF5A  D039               	goto	l480
  4848  00EF5C                     l3287:
  4849                           
  4850                           ;Lab7-8.c: 611: EWLT_Count[0] = count/10 + '0';
  4851  00EF5C  C03A  F001         	movff	update_LCD_count@count,___awdiv@dividend
  4852  00EF60  6A02               	clrf	___awdiv@dividend+1,c
  4853  00EF62  0E00               	movlw	0
  4854  00EF64  6E04               	movwf	___awdiv@divisor+1,c
  4855  00EF66  0E0A               	movlw	10
  4856  00EF68  6E03               	movwf	___awdiv@divisor,c
  4857  00EF6A  EC2B  F071         	call	___awdiv	;wreg free
  4858  00EF6E  5001               	movf	?___awdiv,w,c
  4859  00EF70  0F30               	addlw	48
  4860  00EF72  6E42               	movwf	_EWLT_Count,c
  4861                           
  4862                           ;Lab7-8.c: 612: EWLT_Count[1] = count%10 + '0';
  4863  00EF74  C03A  F001         	movff	update_LCD_count@count,___awmod@dividend
  4864  00EF78  6A02               	clrf	___awmod@dividend+1,c
  4865  00EF7A  0E00               	movlw	0
  4866  00EF7C  6E04               	movwf	___awmod@divisor+1,c
  4867  00EF7E  0E0A               	movlw	10
  4868  00EF80  6E03               	movwf	___awmod@divisor,c
  4869  00EF82  EC21  F070         	call	___awmod	;wreg free
  4870  00EF86  5001               	movf	?___awmod,w,c
  4871  00EF88  0F30               	addlw	48
  4872  00EF8A  6E43               	movwf	_EWLT_Count+1,c
  4873                           
  4874                           ;Lab7-8.c: 613: drawtext(100, 50 + 10, EWLT_Count,
  4875                           ;Lab7-8.c: 614: 0xFFFF, 0x0000, 2);
  4876  00EF8C  0E3C               	movlw	60
  4877  00EF8E  6E29               	movwf	drawtext@y,c
  4878  00EF90  0E42               	movlw	low _EWLT_Count
  4879  00EF92  6E2A               	movwf	drawtext@_text,c
  4880  00EF94  0E00               	movlw	high _EWLT_Count
  4881  00EF96  6E2B               	movwf	drawtext@_text+1,c
  4882  00EF98  0EFF               	movlw	255
  4883  00EF9A  6E2D               	movwf	drawtext@color+1,c
  4884  00EF9C  682C               	setf	drawtext@color,c
  4885  00EF9E  0E00               	movlw	0
  4886  00EFA0  6E2F               	movwf	drawtext@bg+1,c
  4887  00EFA2  0E00               	movlw	0
  4888  00EFA4  6E2E               	movwf	drawtext@bg,c
  4889  00EFA6  0E02               	movlw	2
  4890  00EFA8  6E30               	movwf	drawtext@size,c
  4891  00EFAA  0E64               	movlw	100
  4892  00EFAC  EC01  F074         	call	_drawtext
  4893                           
  4894                           ;Lab7-8.c: 616: }
  4895                           
  4896                           ;Lab7-8.c: 615: break;
  4897  00EFB0  D00E               	goto	l480
  4898  00EFB2                     l3293:
  4899  00EFB2  503B               	movf	update_LCD_count@direction,w,c
  4900                           
  4901                           ; Switch size 1, requested type "space"
  4902                           ; Number of cases is 4, Range of values is 0 to 3
  4903                           ; switch strategies available:
  4904                           ; Name         Instructions Cycles
  4905                           ; simple_byte           13     7 (average)
  4906                           ;	Chosen strategy is simple_byte
  4907  00EFB4  0A00               	xorlw	0	; case 0
  4908  00EFB6  B4D8               	btfsc	status,2,c
  4909  00EFB8  D74E               	goto	l3275
  4910  00EFBA  0A01               	xorlw	1	; case 1
  4911  00EFBC  B4D8               	btfsc	status,2,c
  4912  00EFBE  D7CE               	goto	l3287
  4913  00EFC0  0A03               	xorlw	3	; case 2
  4914  00EFC2  B4D8               	btfsc	status,2,c
  4915  00EFC4  D79F               	goto	l3283
  4916  00EFC6  0A01               	xorlw	1	; case 3
  4917  00EFC8  B4D8               	btfsc	status,2,c
  4918  00EFCA  D770               	goto	l3279
  4919  00EFCC  D000               	goto	l480
  4920  00EFCE                     l480:
  4921  00EFCE  0012               	return		;funcret
  4922  00EFD0                     __end_of_update_LCD_count:
  4923                           	opt stack 0
  4924                           tblptru	equ	0xFF8
  4925                           tblptrh	equ	0xFF7
  4926                           tblptrl	equ	0xFF6
  4927                           tablat	equ	0xFF5
  4928                           intcon2	equ	0xFF1
  4929                           postinc0	equ	0xFEE
  4930                           wreg	equ	0xFE8
  4931                           postdec1	equ	0xFE5
  4932                           fsr1l	equ	0xFE1
  4933                           status	equ	0xFD8
  4934                           
  4935 ;; *************** function _Wait_One_Second *****************
  4936 ;; Defined at:
  4937 ;;		line 499 in file "Lab7-8.c"
  4938 ;; Parameters:    Size  Location     Type
  4939 ;;		None
  4940 ;; Auto vars:     Size  Location     Type
  4941 ;;		None
  4942 ;; Return value:  Size  Location     Type
  4943 ;;		None               void
  4944 ;; Registers used:
  4945 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4946 ;; Tracked objects:
  4947 ;;		On entry : 0/0
  4948 ;;		On exit  : 0/0
  4949 ;;		Unchanged: 0/0
  4950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4951 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4952 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4953 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4954 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4955 ;;Total ram usage:        0 bytes
  4956 ;; Hardware stack levels used:    1
  4957 ;; Hardware stack levels required when called:    8
  4958 ;; This function calls:
  4959 ;;		_Wait_Half_Second
  4960 ;;		_drawtext
  4961 ;;		_strcpy
  4962 ;;		_update_LCD_misc
  4963 ;; This function is called by:
  4964 ;;		_Wait_N_Seconds
  4965 ;; This function uses a non-reentrant model
  4966 ;;
  4967                           
  4968                           	psect	text20
  4969  00E0C4                     __ptext20:
  4970                           	opt stack 0
  4971  00E0C4                     _Wait_One_Second:
  4972                           	opt stack 20
  4973                           
  4974                           ;Lab7-8.c: 501: PORTDbits.RD7 = 1;
  4975                           
  4976                           ;incstack = 0
  4977  00E0C4  8E83               	bsf	3971,7,c	;volatile
  4978                           
  4979                           ;Lab7-8.c: 502: strcpy(txt,"*");
  4980  00E0C6  C06B  F001         	movff	_txt,strcpy@to
  4981  00E0CA  C06C  F002         	movff	_txt+1,strcpy@to+1
  4982  00E0CE  0EFD               	movlw	low STR_5
  4983  00E0D0  6E03               	movwf	strcpy@from,c
  4984  00E0D2  0EFF               	movlw	high STR_5
  4985  00E0D4  6E04               	movwf	strcpy@from+1,c
  4986  00E0D6  ECFA  F06D         	call	_strcpy	;wreg free
  4987                           
  4988                           ;Lab7-8.c: 503: drawtext(120,10,txt,0xFFFF,0x0000,1);
  4989  00E0DA  0E0A               	movlw	10
  4990  00E0DC  6E29               	movwf	drawtext@y,c
  4991  00E0DE  C06B  F02A         	movff	_txt,drawtext@_text
  4992  00E0E2  C06C  F02B         	movff	_txt+1,drawtext@_text+1
  4993  00E0E6  0EFF               	movlw	255
  4994  00E0E8  6E2D               	movwf	drawtext@color+1,c
  4995  00E0EA  682C               	setf	drawtext@color,c
  4996  00E0EC  0E00               	movlw	0
  4997  00E0EE  6E2F               	movwf	drawtext@bg+1,c
  4998  00E0F0  0E00               	movlw	0
  4999  00E0F2  6E2E               	movwf	drawtext@bg,c
  5000  00E0F4  0E01               	movlw	1
  5001  00E0F6  6E30               	movwf	drawtext@size,c
  5002  00E0F8  0E78               	movlw	120
  5003  00E0FA  EC01  F074         	call	_drawtext
  5004                           
  5005                           ;Lab7-8.c: 504: Wait_Half_Second();
  5006  00E0FE  EC49  F06D         	call	_Wait_Half_Second	;wreg free
  5007                           
  5008                           ;Lab7-8.c: 506: PORTDbits.RD7 = 0;
  5009  00E102  9E83               	bcf	3971,7,c	;volatile
  5010                           
  5011                           ;Lab7-8.c: 507: strcpy(txt," ");
  5012  00E104  C06B  F001         	movff	_txt,strcpy@to
  5013  00E108  C06C  F002         	movff	_txt+1,strcpy@to+1
  5014  00E10C  0EFB               	movlw	low STR_14
  5015  00E10E  6E03               	movwf	strcpy@from,c
  5016  00E110  0EFF               	movlw	high STR_14
  5017  00E112  6E04               	movwf	strcpy@from+1,c
  5018  00E114  ECFA  F06D         	call	_strcpy	;wreg free
  5019                           
  5020                           ;Lab7-8.c: 508: drawtext(120,10,txt,0xFFFF,0x0000,1);
  5021  00E118  0E0A               	movlw	10
  5022  00E11A  6E29               	movwf	drawtext@y,c
  5023  00E11C  C06B  F02A         	movff	_txt,drawtext@_text
  5024  00E120  C06C  F02B         	movff	_txt+1,drawtext@_text+1
  5025  00E124  0EFF               	movlw	255
  5026  00E126  6E2D               	movwf	drawtext@color+1,c
  5027  00E128  682C               	setf	drawtext@color,c
  5028  00E12A  0E00               	movlw	0
  5029  00E12C  6E2F               	movwf	drawtext@bg+1,c
  5030  00E12E  0E00               	movlw	0
  5031  00E130  6E2E               	movwf	drawtext@bg,c
  5032  00E132  0E01               	movlw	1
  5033  00E134  6E30               	movwf	drawtext@size,c
  5034  00E136  0E78               	movlw	120
  5035  00E138  EC01  F074         	call	_drawtext
  5036                           
  5037                           ;Lab7-8.c: 509: Wait_Half_Second();
  5038  00E13C  EC49  F06D         	call	_Wait_Half_Second	;wreg free
  5039                           
  5040                           ;Lab7-8.c: 510: update_LCD_misc();
  5041  00E140  ECBF  F078         	call	_update_LCD_misc	;wreg free
  5042  00E144  0012               	return		;funcret
  5043  00E146                     __end_of_Wait_One_Second:
  5044                           	opt stack 0
  5045                           tblptru	equ	0xFF8
  5046                           tblptrh	equ	0xFF7
  5047                           tblptrl	equ	0xFF6
  5048                           tablat	equ	0xFF5
  5049                           intcon2	equ	0xFF1
  5050                           postinc0	equ	0xFEE
  5051                           wreg	equ	0xFE8
  5052                           postdec1	equ	0xFE5
  5053                           fsr1l	equ	0xFE1
  5054                           status	equ	0xFD8
  5055                           
  5056 ;; *************** function _update_LCD_misc *****************
  5057 ;; Defined at:
  5058 ;;		line 639 in file "Lab7-8.c"
  5059 ;; Parameters:    Size  Location     Type
  5060 ;;		None
  5061 ;; Auto vars:     Size  Location     Type
  5062 ;;  nStep           2   57[COMRAM] int 
  5063 ;; Return value:  Size  Location     Type
  5064 ;;		None               void
  5065 ;; Registers used:
  5066 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5067 ;; Tracked objects:
  5068 ;;		On entry : 0/0
  5069 ;;		On exit  : 0/0
  5070 ;;		Unchanged: 0/0
  5071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5072 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5073 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5074 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5075 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5076 ;;Total ram usage:        2 bytes
  5077 ;; Hardware stack levels used:    1
  5078 ;; Hardware stack levels required when called:    7
  5079 ;; This function calls:
  5080 ;;		___awtoft
  5081 ;;		___ftdiv
  5082 ;;		___ftge
  5083 ;;		___wmul
  5084 ;;		_drawtext
  5085 ;;		_get_full_ADC
  5086 ;; This function is called by:
  5087 ;;		_Wait_One_Second
  5088 ;; This function uses a non-reentrant model
  5089 ;;
  5090                           
  5091                           	psect	text21
  5092  00F17E                     __ptext21:
  5093                           	opt stack 0
  5094  00F17E                     _update_LCD_misc:
  5095                           	opt stack 20
  5096                           
  5097                           ;Lab7-8.c: 641: int nStep = get_full_ADC();
  5098                           
  5099                           ;incstack = 0
  5100  00F17E  EC76  F06D         	call	_get_full_ADC	;wreg free
  5101  00F182  C001  F03A         	movff	?_get_full_ADC,update_LCD_misc@nStep
  5102  00F186  C002  F03B         	movff	?_get_full_ADC+1,update_LCD_misc@nStep+1
  5103                           
  5104                           ;Lab7-8.c: 642: volt = nStep * 5 /1024.0;
  5105  00F18A  C03A  F001         	movff	update_LCD_misc@nStep,___wmul@multiplier
  5106  00F18E  C03B  F002         	movff	update_LCD_misc@nStep+1,___wmul@multiplier+1
  5107  00F192  0E00               	movlw	0
  5108  00F194  6E04               	movwf	___wmul@multiplicand+1,c
  5109  00F196  0E05               	movlw	5
  5110  00F198  6E03               	movwf	___wmul@multiplicand,c
  5111  00F19A  EC89  F06D         	call	___wmul	;wreg free
  5112  00F19E  C001  F009         	movff	?___wmul,___awtoft@c
  5113  00F1A2  C002  F00A         	movff	?___wmul+1,___awtoft@c+1
  5114  00F1A6  EC13  F06E         	call	___awtoft	;wreg free
  5115  00F1AA  C009  F00D         	movff	?___awtoft,___ftdiv@f1
  5116  00F1AE  C00A  F00E         	movff	?___awtoft+1,___ftdiv@f1+1
  5117  00F1B2  C00B  F00F         	movff	?___awtoft+2,___ftdiv@f1+2
  5118  00F1B6  0E00               	movlw	0
  5119  00F1B8  6E10               	movwf	___ftdiv@f2,c
  5120  00F1BA  0E80               	movlw	128
  5121  00F1BC  6E11               	movwf	___ftdiv@f2+1,c
  5122  00F1BE  0E44               	movlw	68
  5123  00F1C0  6E12               	movwf	___ftdiv@f2+2,c
  5124  00F1C2  EC70  F074         	call	___ftdiv	;wreg free
  5125  00F1C6  C00D  F064         	movff	?___ftdiv,_volt
  5126  00F1CA  C00E  F065         	movff	?___ftdiv+1,_volt+1
  5127  00F1CE  C00F  F066         	movff	?___ftdiv+2,_volt+2
  5128                           
  5129                           ;Lab7-8.c: 643: SW_MODE = volt < 2.5 ? 1:0;
  5130  00F1D2  C064  F001         	movff	_volt,___ftge@ff1
  5131  00F1D6  C065  F002         	movff	_volt+1,___ftge@ff1+1
  5132  00F1DA  C066  F003         	movff	_volt+2,___ftge@ff1+2
  5133  00F1DE  0E00               	movlw	0
  5134  00F1E0  6E04               	movwf	___ftge@ff2,c
  5135  00F1E2  0E20               	movlw	32
  5136  00F1E4  6E05               	movwf	___ftge@ff2+1,c
  5137  00F1E6  0E40               	movlw	64
  5138  00F1E8  6E06               	movwf	___ftge@ff2+2,c
  5139  00F1EA  EC76  F071         	call	___ftge	;wreg free
  5140  00F1EE  B0D8               	btfsc	status,0,c
  5141  00F1F0  D002               	goto	u1840
  5142  00F1F2  0E01               	movlw	1
  5143  00F1F4  D001               	goto	u1850
  5144  00F1F6                     u1840:
  5145  00F1F6  0E00               	movlw	0
  5146  00F1F8                     u1850:
  5147  00F1F8  6E73               	movwf	_SW_MODE,c
  5148                           
  5149                           ;Lab7-8.c: 645: SW_EWPED = PORTBbits.RB0;
  5150  00F1FA  0E00               	movlw	0
  5151  00F1FC  B081               	btfsc	3969,0,c	;volatile
  5152  00F1FE  0E01               	movlw	1
  5153  00F200  6E72               	movwf	_SW_EWPED,c
  5154                           
  5155                           ;Lab7-8.c: 646: SW_EWLT = PORTAbits.RA4;
  5156  00F202  0E00               	movlw	0
  5157  00F204  B880               	btfsc	3968,4,c	;volatile
  5158  00F206  0E01               	movlw	1
  5159  00F208  6E71               	movwf	_SW_EWLT,c
  5160                           
  5161                           ;Lab7-8.c: 647: SW_NSPED = PORTBbits.RB1;
  5162  00F20A  0E00               	movlw	0
  5163  00F20C  B281               	btfsc	3969,1,c	;volatile
  5164  00F20E  0E01               	movlw	1
  5165  00F210  6E75               	movwf	_SW_NSPED,c
  5166                           
  5167                           ;Lab7-8.c: 648: SW_NSLT = PORTAbits.RA5;
  5168  00F212  0E00               	movlw	0
  5169  00F214  BA80               	btfsc	3968,5,c	;volatile
  5170  00F216  0E01               	movlw	1
  5171  00F218  6E74               	movwf	_SW_NSLT,c
  5172                           
  5173                           ;Lab7-8.c: 650: if (SW_MODE == 0) SW_MODE_Txt[0]= 'N'; else SW_MODE_Txt[0] = 'D';
  5174  00F21A  5073               	movf	_SW_MODE,w,c
  5175  00F21C  A4D8               	btfss	status,2,c
  5176  00F21E  D002               	goto	l2961
  5177  00F220  0E4E               	movlw	78
  5178  00F222  D001               	goto	L1
  5179  00F224                     l2961:
  5180  00F224  0E44               	movlw	68
  5181  00F226                     L1:
  5182  00F226  6E5E               	movwf	_SW_MODE_Txt,c
  5183                           
  5184                           ;Lab7-8.c: 651: if (SW_NSPED == 0) SW_NSPED_Txt[0] = '0'; else SW_NSPED_Txt[0] = '1';
  5185  00F228  5075               	movf	_SW_NSPED,w,c
  5186  00F22A  A4D8               	btfss	status,2,c
  5187  00F22C  D002               	goto	l2965
  5188  00F22E  0E30               	movlw	48
  5189  00F230  D001               	goto	L2
  5190  00F232                     l2965:
  5191  00F232  0E31               	movlw	49
  5192  00F234                     L2:
  5193  00F234  6E62               	movwf	_SW_NSPED_Txt,c
  5194                           
  5195                           ;Lab7-8.c: 652: if (SW_NSLT == 0) SW_NSLT_Txt[0] = '0'; else SW_NSLT_Txt[0] = '1';
  5196  00F236  5074               	movf	_SW_NSLT,w,c
  5197  00F238  A4D8               	btfss	status,2,c
  5198  00F23A  D002               	goto	l2969
  5199  00F23C  0E30               	movlw	48
  5200  00F23E  D001               	goto	L3
  5201  00F240                     l2969:
  5202  00F240  0E31               	movlw	49
  5203  00F242                     L3:
  5204  00F242  6E60               	movwf	_SW_NSLT_Txt,c
  5205                           
  5206                           ;Lab7-8.c: 653: if (SW_EWPED == 0) SW_EWPED_Txt[0] = '0'; else SW_EWPED_Txt[0] = '1';
  5207  00F244  5072               	movf	_SW_EWPED,w,c
  5208  00F246  A4D8               	btfss	status,2,c
  5209  00F248  D002               	goto	l2973
  5210  00F24A  0E30               	movlw	48
  5211  00F24C  D001               	goto	L4
  5212  00F24E                     l2973:
  5213  00F24E  0E31               	movlw	49
  5214  00F250                     L4:
  5215  00F250  6E5C               	movwf	_SW_EWPED_Txt,c
  5216                           
  5217                           ;Lab7-8.c: 654: if (SW_EWLT == 0) SW_EWLT_Txt[0] = '0'; else SW_EWLT_Txt[0] = '1';
  5218  00F252  5071               	movf	_SW_EWLT,w,c
  5219  00F254  A4D8               	btfss	status,2,c
  5220  00F256  D002               	goto	l2977
  5221  00F258  0E30               	movlw	48
  5222  00F25A  D001               	goto	L5
  5223  00F25C                     l2977:
  5224  00F25C  0E31               	movlw	49
  5225  00F25E                     L5:
  5226  00F25E  6E5A               	movwf	_SW_EWLT_Txt,c
  5227  00F260  D000               	goto	l2979
  5228  00F262                     l2979:
  5229                           
  5230                           ;Lab7-8.c: 658: drawtext(35,10, Act_Mode_Txt, 0xFFFF, 0x0000, 1);
  5231  00F262  0E0A               	movlw	10
  5232  00F264  6E29               	movwf	drawtext@y,c
  5233  00F266  0E54               	movlw	low _Act_Mode_Txt
  5234  00F268  6E2A               	movwf	drawtext@_text,c
  5235  00F26A  0E00               	movlw	high _Act_Mode_Txt
  5236  00F26C  6E2B               	movwf	drawtext@_text+1,c
  5237  00F26E  0EFF               	movlw	255
  5238  00F270  6E2D               	movwf	drawtext@color+1,c
  5239  00F272  682C               	setf	drawtext@color,c
  5240  00F274  0E00               	movlw	0
  5241  00F276  6E2F               	movwf	drawtext@bg+1,c
  5242  00F278  0E00               	movlw	0
  5243  00F27A  6E2E               	movwf	drawtext@bg,c
  5244  00F27C  0E01               	movlw	1
  5245  00F27E  6E30               	movwf	drawtext@size,c
  5246  00F280  0E23               	movlw	35
  5247  00F282  EC01  F074         	call	_drawtext
  5248                           
  5249                           ;Lab7-8.c: 659: drawtext(6, 140+9, SW_EWPED_Txt, 0xFFFF, 0x0000, 1);
  5250  00F286  0E95               	movlw	149
  5251  00F288  6E29               	movwf	drawtext@y,c
  5252  00F28A  0E5C               	movlw	low _SW_EWPED_Txt
  5253  00F28C  6E2A               	movwf	drawtext@_text,c
  5254  00F28E  0E00               	movlw	high _SW_EWPED_Txt
  5255  00F290  6E2B               	movwf	drawtext@_text+1,c
  5256  00F292  0EFF               	movlw	255
  5257  00F294  6E2D               	movwf	drawtext@color+1,c
  5258  00F296  682C               	setf	drawtext@color,c
  5259  00F298  0E00               	movlw	0
  5260  00F29A  6E2F               	movwf	drawtext@bg+1,c
  5261  00F29C  0E00               	movlw	0
  5262  00F29E  6E2E               	movwf	drawtext@bg,c
  5263  00F2A0  0E01               	movlw	1
  5264  00F2A2  6E30               	movwf	drawtext@size,c
  5265  00F2A4  0E06               	movlw	6
  5266  00F2A6  EC01  F074         	call	_drawtext
  5267                           
  5268                           ;Lab7-8.c: 660: drawtext(32, 140+9, SW_EWLT_Txt, 0xFFFF, 0x0000, 1);
  5269  00F2AA  0E95               	movlw	149
  5270  00F2AC  6E29               	movwf	drawtext@y,c
  5271  00F2AE  0E5A               	movlw	low _SW_EWLT_Txt
  5272  00F2B0  6E2A               	movwf	drawtext@_text,c
  5273  00F2B2  0E00               	movlw	high _SW_EWLT_Txt
  5274  00F2B4  6E2B               	movwf	drawtext@_text+1,c
  5275  00F2B6  0EFF               	movlw	255
  5276  00F2B8  6E2D               	movwf	drawtext@color+1,c
  5277  00F2BA  682C               	setf	drawtext@color,c
  5278  00F2BC  0E00               	movlw	0
  5279  00F2BE  6E2F               	movwf	drawtext@bg+1,c
  5280  00F2C0  0E00               	movlw	0
  5281  00F2C2  6E2E               	movwf	drawtext@bg,c
  5282  00F2C4  0E01               	movlw	1
  5283  00F2C6  6E30               	movwf	drawtext@size,c
  5284  00F2C8  0E20               	movlw	32
  5285  00F2CA  EC01  F074         	call	_drawtext
  5286                           
  5287                           ;Lab7-8.c: 661: drawtext(58, 140+9, SW_NSPED_Txt, 0xFFFF, 0x0000, 1);
  5288  00F2CE  0E95               	movlw	149
  5289  00F2D0  6E29               	movwf	drawtext@y,c
  5290  00F2D2  0E62               	movlw	low _SW_NSPED_Txt
  5291  00F2D4  6E2A               	movwf	drawtext@_text,c
  5292  00F2D6  0E00               	movlw	high _SW_NSPED_Txt
  5293  00F2D8  6E2B               	movwf	drawtext@_text+1,c
  5294  00F2DA  0EFF               	movlw	255
  5295  00F2DC  6E2D               	movwf	drawtext@color+1,c
  5296  00F2DE  682C               	setf	drawtext@color,c
  5297  00F2E0  0E00               	movlw	0
  5298  00F2E2  6E2F               	movwf	drawtext@bg+1,c
  5299  00F2E4  0E00               	movlw	0
  5300  00F2E6  6E2E               	movwf	drawtext@bg,c
  5301  00F2E8  0E01               	movlw	1
  5302  00F2EA  6E30               	movwf	drawtext@size,c
  5303  00F2EC  0E3A               	movlw	58
  5304  00F2EE  EC01  F074         	call	_drawtext
  5305                           
  5306                           ;Lab7-8.c: 662: drawtext(87, 140+9, SW_NSLT_Txt, 0xFFFF, 0x0000, 1);
  5307  00F2F2  0E95               	movlw	149
  5308  00F2F4  6E29               	movwf	drawtext@y,c
  5309  00F2F6  0E60               	movlw	low _SW_NSLT_Txt
  5310  00F2F8  6E2A               	movwf	drawtext@_text,c
  5311  00F2FA  0E00               	movlw	high _SW_NSLT_Txt
  5312  00F2FC  6E2B               	movwf	drawtext@_text+1,c
  5313  00F2FE  0EFF               	movlw	255
  5314  00F300  6E2D               	movwf	drawtext@color+1,c
  5315  00F302  682C               	setf	drawtext@color,c
  5316  00F304  0E00               	movlw	0
  5317  00F306  6E2F               	movwf	drawtext@bg+1,c
  5318  00F308  0E00               	movlw	0
  5319  00F30A  6E2E               	movwf	drawtext@bg,c
  5320  00F30C  0E01               	movlw	1
  5321  00F30E  6E30               	movwf	drawtext@size,c
  5322  00F310  0E57               	movlw	87
  5323  00F312  EC01  F074         	call	_drawtext
  5324                           
  5325                           ;Lab7-8.c: 663: drawtext(112, 140+9, SW_MODE_Txt, 0xFFFF, 0x0000, 1);
  5326  00F316  0E95               	movlw	149
  5327  00F318  6E29               	movwf	drawtext@y,c
  5328  00F31A  0E5E               	movlw	low _SW_MODE_Txt
  5329  00F31C  6E2A               	movwf	drawtext@_text,c
  5330  00F31E  0E00               	movlw	high _SW_MODE_Txt
  5331  00F320  6E2B               	movwf	drawtext@_text+1,c
  5332  00F322  0EFF               	movlw	255
  5333  00F324  6E2D               	movwf	drawtext@color+1,c
  5334  00F326  682C               	setf	drawtext@color,c
  5335  00F328  0E00               	movlw	0
  5336  00F32A  6E2F               	movwf	drawtext@bg+1,c
  5337  00F32C  0E00               	movlw	0
  5338  00F32E  6E2E               	movwf	drawtext@bg,c
  5339  00F330  0E01               	movlw	1
  5340  00F332  6E30               	movwf	drawtext@size,c
  5341  00F334  0E70               	movlw	112
  5342  00F336  EC01  F074         	call	_drawtext
  5343  00F33A  0012               	return		;funcret
  5344  00F33C                     __end_of_update_LCD_misc:
  5345                           	opt stack 0
  5346                           tblptru	equ	0xFF8
  5347                           tblptrh	equ	0xFF7
  5348                           tblptrl	equ	0xFF6
  5349                           tablat	equ	0xFF5
  5350                           intcon2	equ	0xFF1
  5351                           postinc0	equ	0xFEE
  5352                           wreg	equ	0xFE8
  5353                           postdec1	equ	0xFE5
  5354                           fsr1l	equ	0xFE1
  5355                           status	equ	0xFD8
  5356                           
  5357 ;; *************** function _get_full_ADC *****************
  5358 ;; Defined at:
  5359 ;;		line 309 in file "Lab7-8.c"
  5360 ;; Parameters:    Size  Location     Type
  5361 ;;		None
  5362 ;; Auto vars:     Size  Location     Type
  5363 ;;  result          2    4[COMRAM] unsigned int 
  5364 ;; Return value:  Size  Location     Type
  5365 ;;                  2    0[COMRAM] unsigned int 
  5366 ;; Registers used:
  5367 ;;		wreg, status,2, status,0
  5368 ;; Tracked objects:
  5369 ;;		On entry : 0/0
  5370 ;;		On exit  : 0/0
  5371 ;;		Unchanged: 0/0
  5372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5373 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5374 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5375 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5376 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5377 ;;Total ram usage:        6 bytes
  5378 ;; Hardware stack levels used:    1
  5379 ;; This function calls:
  5380 ;;		Nothing
  5381 ;; This function is called by:
  5382 ;;		_main
  5383 ;;		_update_LCD_misc
  5384 ;; This function uses a non-reentrant model
  5385 ;;
  5386                           
  5387                           	psect	text22
  5388  00DAEC                     __ptext22:
  5389                           	opt stack 0
  5390  00DAEC                     _get_full_ADC:
  5391                           	opt stack 30
  5392                           
  5393                           ;Lab7-8.c: 311: unsigned int result;
  5394                           ;Lab7-8.c: 312: ADCON0bits.GO=1;
  5395                           
  5396                           ;incstack = 0
  5397  00DAEC  82C2               	bsf	4034,1,c	;volatile
  5398                           
  5399                           ;Lab7-8.c: 313: while(ADCON0bits.DONE==1);
  5400  00DAEE  D000               	goto	l376
  5401  00DAF0                     l376:
  5402  00DAF0  B2C2               	btfsc	4034,1,c	;volatile
  5403  00DAF2  D7FE               	goto	l376
  5404                           
  5405                           ;Lab7-8.c: 314: result = (ADRESH * 0x100) + ADRESL;
  5406  00DAF4  50C4               	movf	4036,w,c	;volatile
  5407  00DAF6  6E04               	movwf	(??_get_full_ADC+1)& (0+255),c
  5408  00DAF8  6A03               	clrf	??_get_full_ADC& (0+255),c
  5409  00DAFA  50C3               	movf	4035,w,c	;volatile
  5410  00DAFC  2403               	addwf	??_get_full_ADC,w,c
  5411  00DAFE  6E05               	movwf	get_full_ADC@result,c
  5412  00DB00  0E00               	movlw	0
  5413  00DB02  2004               	addwfc	??_get_full_ADC+1,w,c
  5414  00DB04  6E06               	movwf	get_full_ADC@result+1,c
  5415                           
  5416                           ;Lab7-8.c: 316: return result;
  5417  00DB06  C005  F001         	movff	get_full_ADC@result,?_get_full_ADC
  5418  00DB0A  C006  F002         	movff	get_full_ADC@result+1,?_get_full_ADC+1
  5419  00DB0E  D000               	goto	l379
  5420  00DB10                     l379:
  5421  00DB10  0012               	return		;funcret
  5422  00DB12                     __end_of_get_full_ADC:
  5423                           	opt stack 0
  5424                           tblptru	equ	0xFF8
  5425                           tblptrh	equ	0xFF7
  5426                           tblptrl	equ	0xFF6
  5427                           tablat	equ	0xFF5
  5428                           intcon2	equ	0xFF1
  5429                           postinc0	equ	0xFEE
  5430                           wreg	equ	0xFE8
  5431                           postdec1	equ	0xFE5
  5432                           fsr1l	equ	0xFE1
  5433                           status	equ	0xFD8
  5434                           
  5435 ;; *************** function ___ftge *****************
  5436 ;; Defined at:
  5437 ;;		line 4 in file "E:\XC8\sources\common\ftge.c"
  5438 ;; Parameters:    Size  Location     Type
  5439 ;;  ff1             3    0[COMRAM] float 
  5440 ;;  ff2             3    3[COMRAM] float 
  5441 ;; Auto vars:     Size  Location     Type
  5442 ;;		None
  5443 ;; Return value:  Size  Location     Type
  5444 ;;		None               void
  5445 ;; Registers used:
  5446 ;;		wreg, status,2, status,0
  5447 ;; Tracked objects:
  5448 ;;		On entry : 0/0
  5449 ;;		On exit  : 0/0
  5450 ;;		Unchanged: 0/0
  5451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5452 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5453 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5454 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5455 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5456 ;;Total ram usage:        9 bytes
  5457 ;; Hardware stack levels used:    1
  5458 ;; This function calls:
  5459 ;;		Nothing
  5460 ;; This function is called by:
  5461 ;;		_main
  5462 ;;		_update_LCD_misc
  5463 ;; This function uses a non-reentrant model
  5464 ;;
  5465                           
  5466                           	psect	text23
  5467  00E2EC                     __ptext23:
  5468                           	opt stack 0
  5469  00E2EC                     ___ftge:
  5470                           	opt stack 30
  5471                           
  5472                           ;incstack = 0
  5473  00E2EC  AE03               	btfss	___ftge@ff1+2,7,c
  5474  00E2EE  D017               	goto	l2859
  5475  00E2F0  C001  F007         	movff	___ftge@ff1,??___ftge
  5476  00E2F4  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  5477  00E2F8  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  5478  00E2FC  1E07               	comf	??___ftge,f,c
  5479  00E2FE  1E08               	comf	??___ftge+1,f,c
  5480  00E300  1E09               	comf	??___ftge+2,f,c
  5481  00E302  2A07               	incf	??___ftge,f,c
  5482  00E304  0E00               	movlw	0
  5483  00E306  2208               	addwfc	??___ftge+1,f,c
  5484  00E308  2209               	addwfc	??___ftge+2,f,c
  5485  00E30A  0E00               	movlw	0
  5486  00E30C  2407               	addwf	??___ftge,w,c
  5487  00E30E  6E01               	movwf	___ftge@ff1,c
  5488  00E310  0E00               	movlw	0
  5489  00E312  2008               	addwfc	??___ftge+1,w,c
  5490  00E314  6E02               	movwf	___ftge@ff1+1,c
  5491  00E316  0E80               	movlw	128
  5492  00E318  2009               	addwfc	??___ftge+2,w,c
  5493  00E31A  6E03               	movwf	___ftge@ff1+2,c
  5494  00E31C  D000               	goto	l2859
  5495  00E31E                     l2859:
  5496  00E31E  AE06               	btfss	___ftge@ff2+2,7,c
  5497  00E320  D017               	goto	l2863
  5498  00E322  C004  F007         	movff	___ftge@ff2,??___ftge
  5499  00E326  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  5500  00E32A  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  5501  00E32E  1E07               	comf	??___ftge,f,c
  5502  00E330  1E08               	comf	??___ftge+1,f,c
  5503  00E332  1E09               	comf	??___ftge+2,f,c
  5504  00E334  2A07               	incf	??___ftge,f,c
  5505  00E336  0E00               	movlw	0
  5506  00E338  2208               	addwfc	??___ftge+1,f,c
  5507  00E33A  2209               	addwfc	??___ftge+2,f,c
  5508  00E33C  0E00               	movlw	0
  5509  00E33E  2407               	addwf	??___ftge,w,c
  5510  00E340  6E04               	movwf	___ftge@ff2,c
  5511  00E342  0E00               	movlw	0
  5512  00E344  2008               	addwfc	??___ftge+1,w,c
  5513  00E346  6E05               	movwf	___ftge@ff2+1,c
  5514  00E348  0E80               	movlw	128
  5515  00E34A  2009               	addwfc	??___ftge+2,w,c
  5516  00E34C  6E06               	movwf	___ftge@ff2+2,c
  5517  00E34E  D000               	goto	l2863
  5518  00E350                     l2863:
  5519  00E350  0E00               	movlw	0
  5520  00E352  1A01               	xorwf	___ftge@ff1,f,c
  5521  00E354  0E00               	movlw	0
  5522  00E356  1A02               	xorwf	___ftge@ff1+1,f,c
  5523  00E358  0E80               	movlw	128
  5524  00E35A  1A03               	xorwf	___ftge@ff1+2,f,c
  5525  00E35C  0E00               	movlw	0
  5526  00E35E  1A04               	xorwf	___ftge@ff2,f,c
  5527  00E360  0E00               	movlw	0
  5528  00E362  1A05               	xorwf	___ftge@ff2+1,f,c
  5529  00E364  0E80               	movlw	128
  5530  00E366  1A06               	xorwf	___ftge@ff2+2,f,c
  5531  00E368  5004               	movf	___ftge@ff2,w,c
  5532  00E36A  5C01               	subwf	___ftge@ff1,w,c
  5533  00E36C  5005               	movf	___ftge@ff2+1,w,c
  5534  00E36E  5802               	subwfb	___ftge@ff1+1,w,c
  5535  00E370  5006               	movf	___ftge@ff2+2,w,c
  5536  00E372  5803               	subwfb	___ftge@ff1+2,w,c
  5537  00E374  B0D8               	btfsc	status,0,c
  5538  00E376  D002               	goto	l2869
  5539  00E378  90D8               	bcf	status,0,c
  5540  00E37A  D002               	goto	l925
  5541  00E37C                     l2869:
  5542  00E37C  80D8               	bsf	status,0,c
  5543  00E37E  D000               	goto	l925
  5544  00E380                     l925:
  5545  00E380  0012               	return		;funcret
  5546  00E382                     __end_of___ftge:
  5547                           	opt stack 0
  5548                           tblptru	equ	0xFF8
  5549                           tblptrh	equ	0xFF7
  5550                           tblptrl	equ	0xFF6
  5551                           tablat	equ	0xFF5
  5552                           intcon2	equ	0xFF1
  5553                           postinc0	equ	0xFEE
  5554                           wreg	equ	0xFE8
  5555                           postdec1	equ	0xFE5
  5556                           fsr1l	equ	0xFE1
  5557                           status	equ	0xFD8
  5558                           
  5559 ;; *************** function ___ftdiv *****************
  5560 ;; Defined at:
  5561 ;;		line 54 in file "E:\XC8\sources\common\ftdiv.c"
  5562 ;; Parameters:    Size  Location     Type
  5563 ;;  f1              3   12[COMRAM] float 
  5564 ;;  f2              3   15[COMRAM] float 
  5565 ;; Auto vars:     Size  Location     Type
  5566 ;;  f3              3   22[COMRAM] float 
  5567 ;;  sign            1   26[COMRAM] unsigned char 
  5568 ;;  exp             1   25[COMRAM] unsigned char 
  5569 ;;  cntr            1   21[COMRAM] unsigned char 
  5570 ;; Return value:  Size  Location     Type
  5571 ;;                  3   12[COMRAM] float 
  5572 ;; Registers used:
  5573 ;;		wreg, status,2, status,0, cstack
  5574 ;; Tracked objects:
  5575 ;;		On entry : 0/0
  5576 ;;		On exit  : 0/0
  5577 ;;		Unchanged: 0/0
  5578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5579 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5580 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5581 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5582 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5583 ;;Total ram usage:       15 bytes
  5584 ;; Hardware stack levels used:    1
  5585 ;; Hardware stack levels required when called:    1
  5586 ;; This function calls:
  5587 ;;		___ftpack
  5588 ;; This function is called by:
  5589 ;;		_main
  5590 ;;		_update_LCD_misc
  5591 ;; This function uses a non-reentrant model
  5592 ;;
  5593                           
  5594                           	psect	text24
  5595  00E8E0                     __ptext24:
  5596                           	opt stack 0
  5597  00E8E0                     ___ftdiv:
  5598                           	opt stack 29
  5599                           
  5600                           ;incstack = 0
  5601  00E8E0  C00F  F013         	movff	___ftdiv@f1+2,??___ftdiv
  5602  00E8E4  6A14               	clrf	(??___ftdiv+1)& (0+255),c
  5603  00E8E6  6A15               	clrf	(??___ftdiv+2)& (0+255),c
  5604  00E8E8  340E               	rlcf	___ftdiv@f1+1,w,c
  5605  00E8EA  3613               	rlcf	??___ftdiv& (0+255),f,c
  5606  00E8EC  E301               	bnc	u1711
  5607  00E8EE  8014               	bsf	(??___ftdiv+1)& (0+255),0,c
  5608  00E8F0                     u1711:
  5609  00E8F0  5013               	movf	??___ftdiv,w,c
  5610  00E8F2  6E1A               	movwf	___ftdiv@exp,c
  5611  00E8F4  501A               	movf	___ftdiv@exp,w,c
  5612  00E8F6  A4D8               	btfss	status,2,c
  5613  00E8F8  D002               	goto	l2803
  5614  00E8FA  D00E               	goto	l2805
  5615  00E8FC  D061               	goto	l916
  5616  00E8FE                     l2803:
  5617  00E8FE  C012  F013         	movff	___ftdiv@f2+2,??___ftdiv
  5618  00E902  6A14               	clrf	(??___ftdiv+1)& (0+255),c
  5619  00E904  6A15               	clrf	(??___ftdiv+2)& (0+255),c
  5620  00E906  3411               	rlcf	___ftdiv@f2+1,w,c
  5621  00E908  3613               	rlcf	??___ftdiv& (0+255),f,c
  5622  00E90A  E301               	bnc	u1731
  5623  00E90C  8014               	bsf	(??___ftdiv+1)& (0+255),0,c
  5624  00E90E                     u1731:
  5625  00E90E  5013               	movf	??___ftdiv,w,c
  5626  00E910  6E1B               	movwf	___ftdiv@sign,c
  5627  00E912  501B               	movf	___ftdiv@sign,w,c
  5628  00E914  A4D8               	btfss	status,2,c
  5629  00E916  D007               	goto	l2809
  5630  00E918                     l2805:
  5631  00E918  0E00               	movlw	0
  5632  00E91A  6E0D               	movwf	?___ftdiv,c
  5633  00E91C  0E00               	movlw	0
  5634  00E91E  6E0E               	movwf	?___ftdiv+1,c
  5635  00E920  0E00               	movlw	0
  5636  00E922  6E0F               	movwf	?___ftdiv+2,c
  5637  00E924  D04D               	goto	l916
  5638  00E926                     l2809:
  5639  00E926  0E00               	movlw	0
  5640  00E928  6E17               	movwf	___ftdiv@f3,c
  5641  00E92A  0E00               	movlw	0
  5642  00E92C  6E18               	movwf	___ftdiv@f3+1,c
  5643  00E92E  0E00               	movlw	0
  5644  00E930  6E19               	movwf	___ftdiv@f3+2,c
  5645  00E932  501B               	movf	___ftdiv@sign,w,c
  5646  00E934  0F89               	addlw	137
  5647  00E936  5E1A               	subwf	___ftdiv@exp,f,c
  5648  00E938  C00F  F01B         	movff	___ftdiv@f1+2,___ftdiv@sign
  5649  00E93C  5012               	movf	___ftdiv@f2+2,w,c
  5650  00E93E  1A1B               	xorwf	___ftdiv@sign,f,c
  5651  00E940  0E80               	movlw	128
  5652  00E942  161B               	andwf	___ftdiv@sign,f,c
  5653  00E944  8E0E               	bsf	___ftdiv@f1+1,7,c
  5654  00E946  0EFF               	movlw	255
  5655  00E948  160D               	andwf	___ftdiv@f1,f,c
  5656  00E94A  0EFF               	movlw	255
  5657  00E94C  160E               	andwf	___ftdiv@f1+1,f,c
  5658  00E94E  0E00               	movlw	0
  5659  00E950  160F               	andwf	___ftdiv@f1+2,f,c
  5660  00E952  8E11               	bsf	___ftdiv@f2+1,7,c
  5661  00E954  0EFF               	movlw	255
  5662  00E956  1610               	andwf	___ftdiv@f2,f,c
  5663  00E958  0EFF               	movlw	255
  5664  00E95A  1611               	andwf	___ftdiv@f2+1,f,c
  5665  00E95C  0E00               	movlw	0
  5666  00E95E  1612               	andwf	___ftdiv@f2+2,f,c
  5667  00E960  0E18               	movlw	24
  5668  00E962  6E16               	movwf	___ftdiv@cntr,c
  5669  00E964  D000               	goto	l2829
  5670  00E966                     l2829:
  5671  00E966  90D8               	bcf	status,0,c
  5672  00E968  3617               	rlcf	___ftdiv@f3,f,c
  5673  00E96A  3618               	rlcf	___ftdiv@f3+1,f,c
  5674  00E96C  3619               	rlcf	___ftdiv@f3+2,f,c
  5675  00E96E  5010               	movf	___ftdiv@f2,w,c
  5676  00E970  5C0D               	subwf	___ftdiv@f1,w,c
  5677  00E972  5011               	movf	___ftdiv@f2+1,w,c
  5678  00E974  580E               	subwfb	___ftdiv@f1+1,w,c
  5679  00E976  5012               	movf	___ftdiv@f2+2,w,c
  5680  00E978  580F               	subwfb	___ftdiv@f1+2,w,c
  5681  00E97A  A0D8               	btfss	status,0,c
  5682  00E97C  D007               	goto	l919
  5683  00E97E  5010               	movf	___ftdiv@f2,w,c
  5684  00E980  5E0D               	subwf	___ftdiv@f1,f,c
  5685  00E982  5011               	movf	___ftdiv@f2+1,w,c
  5686  00E984  5A0E               	subwfb	___ftdiv@f1+1,f,c
  5687  00E986  5012               	movf	___ftdiv@f2+2,w,c
  5688  00E988  5A0F               	subwfb	___ftdiv@f1+2,f,c
  5689  00E98A  8017               	bsf	___ftdiv@f3,0,c
  5690  00E98C                     l919:
  5691  00E98C  90D8               	bcf	status,0,c
  5692  00E98E  360D               	rlcf	___ftdiv@f1,f,c
  5693  00E990  360E               	rlcf	___ftdiv@f1+1,f,c
  5694  00E992  360F               	rlcf	___ftdiv@f1+2,f,c
  5695  00E994  2E16               	decfsz	___ftdiv@cntr,f,c
  5696  00E996  D7E7               	goto	l2829
  5697  00E998  D000               	goto	l2839
  5698  00E99A                     l2839:
  5699  00E99A  C017  F001         	movff	___ftdiv@f3,___ftpack@arg
  5700  00E99E  C018  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  5701  00E9A2  C019  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  5702  00E9A6  C01A  F004         	movff	___ftdiv@exp,___ftpack@exp
  5703  00E9AA  C01B  F005         	movff	___ftdiv@sign,___ftpack@sign
  5704  00E9AE  ECCD  F072         	call	___ftpack	;wreg free
  5705  00E9B2  C001  F00D         	movff	?___ftpack,?___ftdiv
  5706  00E9B6  C002  F00E         	movff	?___ftpack+1,?___ftdiv+1
  5707  00E9BA  C003  F00F         	movff	?___ftpack+2,?___ftdiv+2
  5708  00E9BE  D000               	goto	l916
  5709  00E9C0                     l916:
  5710  00E9C0  0012               	return		;funcret
  5711  00E9C2                     __end_of___ftdiv:
  5712                           	opt stack 0
  5713                           tblptru	equ	0xFF8
  5714                           tblptrh	equ	0xFF7
  5715                           tblptrl	equ	0xFF6
  5716                           tablat	equ	0xFF5
  5717                           intcon2	equ	0xFF1
  5718                           postinc0	equ	0xFEE
  5719                           wreg	equ	0xFE8
  5720                           postdec1	equ	0xFE5
  5721                           fsr1l	equ	0xFE1
  5722                           status	equ	0xFD8
  5723                           
  5724 ;; *************** function ___awtoft *****************
  5725 ;; Defined at:
  5726 ;;		line 32 in file "E:\XC8\sources\common\awtoft.c"
  5727 ;; Parameters:    Size  Location     Type
  5728 ;;  c               2    8[COMRAM] int 
  5729 ;; Auto vars:     Size  Location     Type
  5730 ;;  sign            1   11[COMRAM] unsigned char 
  5731 ;; Return value:  Size  Location     Type
  5732 ;;                  3    8[COMRAM] float 
  5733 ;; Registers used:
  5734 ;;		wreg, status,2, status,0, cstack
  5735 ;; Tracked objects:
  5736 ;;		On entry : 0/0
  5737 ;;		On exit  : 0/0
  5738 ;;		Unchanged: 0/0
  5739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5740 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5741 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5742 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5743 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5744 ;;Total ram usage:        4 bytes
  5745 ;; Hardware stack levels used:    1
  5746 ;; Hardware stack levels required when called:    1
  5747 ;; This function calls:
  5748 ;;		___ftpack
  5749 ;; This function is called by:
  5750 ;;		_main
  5751 ;;		_update_LCD_misc
  5752 ;; This function uses a non-reentrant model
  5753 ;;
  5754                           
  5755                           	psect	text25
  5756  00DC26                     __ptext25:
  5757                           	opt stack 0
  5758  00DC26                     ___awtoft:
  5759                           	opt stack 29
  5760                           
  5761                           ;incstack = 0
  5762  00DC26  0E00               	movlw	0
  5763  00DC28  6E0C               	movwf	___awtoft@sign,c
  5764  00DC2A  AE0A               	btfss	___awtoft@c+1,7,c
  5765  00DC2C  D007               	goto	l2851
  5766  00DC2E  6C09               	negf	___awtoft@c,c
  5767  00DC30  1E0A               	comf	___awtoft@c+1,f,c
  5768  00DC32  B0D8               	btfsc	status,0,c
  5769  00DC34  2A0A               	incf	___awtoft@c+1,f,c
  5770  00DC36  0E01               	movlw	1
  5771  00DC38  6E0C               	movwf	___awtoft@sign,c
  5772  00DC3A  D000               	goto	l2851
  5773  00DC3C                     l2851:
  5774  00DC3C  C009  F001         	movff	___awtoft@c,___ftpack@arg
  5775  00DC40  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  5776  00DC44  6A03               	clrf	___ftpack@arg+2,c
  5777  00DC46  0E8E               	movlw	142
  5778  00DC48  6E04               	movwf	___ftpack@exp,c
  5779  00DC4A  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  5780  00DC4E  ECCD  F072         	call	___ftpack	;wreg free
  5781  00DC52  C001  F009         	movff	?___ftpack,?___awtoft
  5782  00DC56  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  5783  00DC5A  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  5784  00DC5E  D000               	goto	l754
  5785  00DC60                     l754:
  5786  00DC60  0012               	return		;funcret
  5787  00DC62                     __end_of___awtoft:
  5788                           	opt stack 0
  5789                           tblptru	equ	0xFF8
  5790                           tblptrh	equ	0xFF7
  5791                           tblptrl	equ	0xFF6
  5792                           tablat	equ	0xFF5
  5793                           intcon2	equ	0xFF1
  5794                           postinc0	equ	0xFEE
  5795                           wreg	equ	0xFE8
  5796                           postdec1	equ	0xFE5
  5797                           fsr1l	equ	0xFE1
  5798                           status	equ	0xFD8
  5799                           
  5800 ;; *************** function ___ftpack *****************
  5801 ;; Defined at:
  5802 ;;		line 62 in file "E:\XC8\sources\common\float.c"
  5803 ;; Parameters:    Size  Location     Type
  5804 ;;  arg             3    0[COMRAM] unsigned um
  5805 ;;  exp             1    3[COMRAM] unsigned char 
  5806 ;;  sign            1    4[COMRAM] unsigned char 
  5807 ;; Auto vars:     Size  Location     Type
  5808 ;;		None
  5809 ;; Return value:  Size  Location     Type
  5810 ;;                  3    0[COMRAM] float 
  5811 ;; Registers used:
  5812 ;;		wreg, status,2, status,0
  5813 ;; Tracked objects:
  5814 ;;		On entry : 0/0
  5815 ;;		On exit  : 0/0
  5816 ;;		Unchanged: 0/0
  5817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5818 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5819 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5820 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5821 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5822 ;;Total ram usage:        8 bytes
  5823 ;; Hardware stack levels used:    1
  5824 ;; This function calls:
  5825 ;;		Nothing
  5826 ;; This function is called by:
  5827 ;;		___awtoft
  5828 ;;		___ftdiv
  5829 ;; This function uses a non-reentrant model
  5830 ;;
  5831                           
  5832                           	psect	text26
  5833  00E59A                     __ptext26:
  5834                           	opt stack 0
  5835  00E59A                     ___ftpack:
  5836                           	opt stack 29
  5837                           
  5838                           ;incstack = 0
  5839  00E59A  5004               	movf	___ftpack@exp,w,c
  5840  00E59C  B4D8               	btfsc	status,2,c
  5841  00E59E  D005               	goto	l2689
  5842  00E5A0  5001               	movf	___ftpack@arg,w,c
  5843  00E5A2  1002               	iorwf	___ftpack@arg+1,w,c
  5844  00E5A4  1003               	iorwf	___ftpack@arg+2,w,c
  5845  00E5A6  A4D8               	btfss	status,2,c
  5846  00E5A8  D00E               	goto	l2695
  5847  00E5AA                     l2689:
  5848  00E5AA  0E00               	movlw	0
  5849  00E5AC  6E01               	movwf	?___ftpack,c
  5850  00E5AE  0E00               	movlw	0
  5851  00E5B0  6E02               	movwf	?___ftpack+1,c
  5852  00E5B2  0E00               	movlw	0
  5853  00E5B4  6E03               	movwf	?___ftpack+2,c
  5854  00E5B6  D053               	goto	l844
  5855  00E5B8  D006               	goto	l2695
  5856  00E5BA                     l2693:
  5857  00E5BA  2A04               	incf	___ftpack@exp,f,c
  5858  00E5BC  90D8               	bcf	status,0,c
  5859  00E5BE  3203               	rrcf	___ftpack@arg+2,f,c
  5860  00E5C0  3202               	rrcf	___ftpack@arg+1,f,c
  5861  00E5C2  3201               	rrcf	___ftpack@arg,f,c
  5862  00E5C4  D000               	goto	l2695
  5863  00E5C6                     l2695:
  5864  00E5C6  0E00               	movlw	0
  5865  00E5C8  1401               	andwf	___ftpack@arg,w,c
  5866  00E5CA  6E06               	movwf	??___ftpack& (0+255),c
  5867  00E5CC  0E00               	movlw	0
  5868  00E5CE  1402               	andwf	___ftpack@arg+1,w,c
  5869  00E5D0  6E07               	movwf	(??___ftpack+1)& (0+255),c
  5870  00E5D2  0EFE               	movlw	254
  5871  00E5D4  1403               	andwf	___ftpack@arg+2,w,c
  5872  00E5D6  6E08               	movwf	(??___ftpack+2)& (0+255),c
  5873  00E5D8  5006               	movf	??___ftpack,w,c
  5874  00E5DA  1007               	iorwf	??___ftpack+1,w,c
  5875  00E5DC  1008               	iorwf	??___ftpack+2,w,c
  5876  00E5DE  B4D8               	btfsc	status,2,c
  5877  00E5E0  D00E               	goto	l2701
  5878  00E5E2  D7EB               	goto	l2693
  5879  00E5E4  D00C               	goto	l2701
  5880  00E5E6                     l2697:
  5881  00E5E6  2A04               	incf	___ftpack@exp,f,c
  5882  00E5E8  0E01               	movlw	1
  5883  00E5EA  2601               	addwf	___ftpack@arg,f,c
  5884  00E5EC  0E00               	movlw	0
  5885  00E5EE  2202               	addwfc	___ftpack@arg+1,f,c
  5886  00E5F0  0E00               	movlw	0
  5887  00E5F2  2203               	addwfc	___ftpack@arg+2,f,c
  5888  00E5F4  90D8               	bcf	status,0,c
  5889  00E5F6  3203               	rrcf	___ftpack@arg+2,f,c
  5890  00E5F8  3202               	rrcf	___ftpack@arg+1,f,c
  5891  00E5FA  3201               	rrcf	___ftpack@arg,f,c
  5892  00E5FC  D000               	goto	l2701
  5893  00E5FE                     l2701:
  5894  00E5FE  0E00               	movlw	0
  5895  00E600  1401               	andwf	___ftpack@arg,w,c
  5896  00E602  6E06               	movwf	??___ftpack& (0+255),c
  5897  00E604  0E00               	movlw	0
  5898  00E606  1402               	andwf	___ftpack@arg+1,w,c
  5899  00E608  6E07               	movwf	(??___ftpack+1)& (0+255),c
  5900  00E60A  0EFF               	movlw	255
  5901  00E60C  1403               	andwf	___ftpack@arg+2,w,c
  5902  00E60E  6E08               	movwf	(??___ftpack+2)& (0+255),c
  5903  00E610  5006               	movf	??___ftpack,w,c
  5904  00E612  1007               	iorwf	??___ftpack+1,w,c
  5905  00E614  1008               	iorwf	??___ftpack+2,w,c
  5906  00E616  B4D8               	btfsc	status,2,c
  5907  00E618  D008               	goto	l2705
  5908  00E61A  D7E5               	goto	l2697
  5909  00E61C  D006               	goto	l2705
  5910  00E61E                     l2703:
  5911  00E61E  0604               	decf	___ftpack@exp,f,c
  5912  00E620  90D8               	bcf	status,0,c
  5913  00E622  3601               	rlcf	___ftpack@arg,f,c
  5914  00E624  3602               	rlcf	___ftpack@arg+1,f,c
  5915  00E626  3603               	rlcf	___ftpack@arg+2,f,c
  5916  00E628  D000               	goto	l2705
  5917  00E62A                     l2705:
  5918  00E62A  BE02               	btfsc	___ftpack@arg+1,7,c
  5919  00E62C  D004               	goto	l855
  5920  00E62E  0E02               	movlw	2
  5921  00E630  6004               	cpfslt	___ftpack@exp,c
  5922  00E632  D7F5               	goto	l2703
  5923  00E634  D000               	goto	l855
  5924  00E636                     l855:
  5925  00E636  B004               	btfsc	___ftpack@exp,0,c
  5926  00E638  D002               	goto	l2711
  5927  00E63A  9E02               	bcf	___ftpack@arg+1,7,c
  5928  00E63C  D000               	goto	l2711
  5929  00E63E                     l2711:
  5930  00E63E  90D8               	bcf	status,0,c
  5931  00E640  3204               	rrcf	___ftpack@exp,f,c
  5932  00E642  5004               	movf	___ftpack@exp,w,c
  5933  00E644  1203               	iorwf	___ftpack@arg+2,f,c
  5934  00E646  5005               	movf	___ftpack@sign,w,c
  5935  00E648  B4D8               	btfsc	status,2,c
  5936  00E64A  D002               	goto	l2717
  5937  00E64C  8E03               	bsf	___ftpack@arg+2,7,c
  5938  00E64E  D000               	goto	l2717
  5939  00E650                     l2717:
  5940  00E650  C001  F001         	movff	___ftpack@arg,?___ftpack
  5941  00E654  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  5942  00E658  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  5943  00E65C  D000               	goto	l844
  5944  00E65E                     l844:
  5945  00E65E  0012               	return		;funcret
  5946  00E660                     __end_of___ftpack:
  5947                           	opt stack 0
  5948                           tblptru	equ	0xFF8
  5949                           tblptrh	equ	0xFF7
  5950                           tblptrl	equ	0xFF6
  5951                           tablat	equ	0xFF5
  5952                           intcon2	equ	0xFF1
  5953                           postinc0	equ	0xFEE
  5954                           wreg	equ	0xFE8
  5955                           postdec1	equ	0xFE5
  5956                           fsr1l	equ	0xFE1
  5957                           status	equ	0xFD8
  5958                           
  5959 ;; *************** function _strcpy *****************
  5960 ;; Defined at:
  5961 ;;		line 8 in file "E:\XC8\sources\common\strcpy.c"
  5962 ;; Parameters:    Size  Location     Type
  5963 ;;  to              2    0[COMRAM] PTR unsigned char 
  5964 ;;		 -> NULL(0), buffer(31), 
  5965 ;;  from            2    2[COMRAM] PTR const unsigned char 
  5966 ;;		 -> STR_14(2), STR_13(2), STR_12(21), STR_11(4), 
  5967 ;;		 -> STR_10(4), STR_9(7), STR_8(12), STR_7(7), 
  5968 ;;		 -> STR_6(10), STR_5(2), STR_4(4), STR_3(4), 
  5969 ;;		 -> STR_2(6), STR_1(20), 
  5970 ;; Auto vars:     Size  Location     Type
  5971 ;;  cp              2    4[COMRAM] PTR unsigned char 
  5972 ;;		 -> NULL(0), buffer(31), 
  5973 ;; Return value:  Size  Location     Type
  5974 ;;                  2    0[COMRAM] PTR unsigned char 
  5975 ;; Registers used:
  5976 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  5977 ;; Tracked objects:
  5978 ;;		On entry : 0/0
  5979 ;;		On exit  : 0/0
  5980 ;;		Unchanged: 0/0
  5981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5982 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5983 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5984 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5985 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5986 ;;Total ram usage:        6 bytes
  5987 ;; Hardware stack levels used:    1
  5988 ;; This function calls:
  5989 ;;		Nothing
  5990 ;; This function is called by:
  5991 ;;		_Initialize_Screen
  5992 ;;		_Wait_One_Second
  5993 ;; This function uses a non-reentrant model
  5994 ;;
  5995                           
  5996                           	psect	text27
  5997  00DBF4                     __ptext27:
  5998                           	opt stack 0
  5999  00DBF4                     _strcpy:
  6000                           	opt stack 27
  6001                           
  6002                           ;incstack = 0
  6003  00DBF4  C001  F005         	movff	strcpy@to,strcpy@cp
  6004  00DBF8  C002  F006         	movff	strcpy@to+1,strcpy@cp+1
  6005  00DBFC  D005               	goto	l2941
  6006  00DBFE                     l2939:
  6007  00DBFE  4A05               	infsnz	strcpy@cp,f,c
  6008  00DC00  2A06               	incf	strcpy@cp+1,f,c
  6009  00DC02  4A03               	infsnz	strcpy@from,f,c
  6010  00DC04  2A04               	incf	strcpy@from+1,f,c
  6011  00DC06  D000               	goto	l2941
  6012  00DC08                     l2941:
  6013  00DC08  C003  FFF6         	movff	strcpy@from,tblptrl
  6014  00DC0C  C004  FFF7         	movff	strcpy@from+1,tblptrh
  6015  00DC10                     	if	0	;tblptru may be non-zero
  6016  00DC10                     	endif
  6017  00DC10                     	if	0	;tblptru may be non-zero
  6018  00DC10                     	endif
  6019  00DC10  C005  FFD9         	movff	strcpy@cp,fsr2l
  6020  00DC14  C006  FFDA         	movff	strcpy@cp+1,fsr2h
  6021  00DC18  0008               	tblrd		*
  6022  00DC1A  CFF5 FFDF          	movff	tablat,indf2
  6023  00DC1E  50DF               	movf	indf2,w,c
  6024  00DC20  A4D8               	btfss	status,2,c
  6025  00DC22  D7ED               	goto	l2939
  6026                           
  6027                           ;	Return value of _strcpy is never used
  6028  00DC24  0012               	return		;funcret
  6029  00DC26                     __end_of_strcpy:
  6030                           	opt stack 0
  6031                           tblptru	equ	0xFF8
  6032                           tblptrh	equ	0xFF7
  6033                           tblptrl	equ	0xFF6
  6034                           tablat	equ	0xFF5
  6035                           intcon2	equ	0xFF1
  6036                           postinc0	equ	0xFEE
  6037                           wreg	equ	0xFE8
  6038                           postdec1	equ	0xFE5
  6039                           fsr1l	equ	0xFE1
  6040                           indf2	equ	0xFDF
  6041                           fsr2h	equ	0xFDA
  6042                           fsr2l	equ	0xFD9
  6043                           status	equ	0xFD8
  6044                           
  6045 ;; *************** function _Set_NS_LT *****************
  6046 ;; Defined at:
  6047 ;;		line 333 in file "Lab7-8.c"
  6048 ;; Parameters:    Size  Location     Type
  6049 ;;  color           1    wreg     unsigned char 
  6050 ;; Auto vars:     Size  Location     Type
  6051 ;;  color           1   53[COMRAM] unsigned char 
  6052 ;; Return value:  Size  Location     Type
  6053 ;;		None               void
  6054 ;; Registers used:
  6055 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6056 ;; Tracked objects:
  6057 ;;		On entry : 0/0
  6058 ;;		On exit  : 0/0
  6059 ;;		Unchanged: 0/0
  6060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6061 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6062 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6063 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6064 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6065 ;;Total ram usage:        1 bytes
  6066 ;; Hardware stack levels used:    1
  6067 ;; Hardware stack levels required when called:    7
  6068 ;; This function calls:
  6069 ;;		_update_LCD_color
  6070 ;; This function is called by:
  6071 ;;		_Day_Mode
  6072 ;;		_Night_Mode
  6073 ;; This function uses a non-reentrant model
  6074 ;;
  6075                           
  6076                           	psect	text28
  6077  00DDEC                     __ptext28:
  6078                           	opt stack 0
  6079  00DDEC                     _Set_NS_LT:
  6080                           	opt stack 22
  6081                           
  6082                           ;incstack = 0
  6083                           ;Set_NS_LT@color stored from wreg
  6084  00DDEC  6E36               	movwf	Set_NS_LT@color,c
  6085                           
  6086                           ;Lab7-8.c: 335: direction = 3;
  6087  00DDEE  0E03               	movlw	3
  6088  00DDF0  6E79               	movwf	_direction,c
  6089                           
  6090                           ;Lab7-8.c: 336: update_LCD_color(direction, color);
  6091  00DDF2  C036  F033         	movff	Set_NS_LT@color,update_LCD_color@color
  6092  00DDF6  5079               	movf	_direction,w,c
  6093  00DDF8  EC9E  F079         	call	_update_LCD_color
  6094                           
  6095                           ;Lab7-8.c: 337: switch (color)
  6096  00DDFC  D00A               	goto	l3385
  6097  00DDFE                     l392:
  6098  00DDFE  9881               	bcf	3969,4,c	;volatile
  6099  00DE00  D001               	goto	L6
  6100  00DE02                     l394:
  6101  00DE02  8881               	bsf	3969,4,c	;volatile
  6102  00DE04                     L6:
  6103  00DE04  9A81               	bcf	3969,5,c	;volatile
  6104  00DE06  D013               	goto	l397
  6105  00DE08                     l395:
  6106  00DE08  9881               	bcf	3969,4,c	;volatile
  6107  00DE0A  D001               	goto	L7
  6108  00DE0C                     l396:
  6109  00DE0C  8881               	bsf	3969,4,c	;volatile
  6110  00DE0E                     L7:
  6111  00DE0E  8A81               	bsf	3969,5,c	;volatile
  6112                           
  6113                           ;Lab7-8.c: 343: }
  6114  00DE10  D00E               	goto	l397
  6115  00DE12                     l3385:
  6116  00DE12  5036               	movf	Set_NS_LT@color,w,c
  6117                           
  6118                           ; Switch size 1, requested type "space"
  6119                           ; Number of cases is 4, Range of values is 0 to 3
  6120                           ; switch strategies available:
  6121                           ; Name         Instructions Cycles
  6122                           ; simple_byte           13     7 (average)
  6123                           ;	Chosen strategy is simple_byte
  6124  00DE14  0A00               	xorlw	0	; case 0
  6125  00DE16  B4D8               	btfsc	status,2,c
  6126  00DE18  D7F2               	goto	l392
  6127  00DE1A  0A01               	xorlw	1	; case 1
  6128  00DE1C  B4D8               	btfsc	status,2,c
  6129  00DE1E  D7F1               	goto	l394
  6130  00DE20  0A03               	xorlw	3	; case 2
  6131  00DE22  B4D8               	btfsc	status,2,c
  6132  00DE24  D7F1               	goto	l395
  6133  00DE26  0A01               	xorlw	1	; case 3
  6134  00DE28  B4D8               	btfsc	status,2,c
  6135  00DE2A  D7F0               	goto	l396
  6136  00DE2C  D000               	goto	l397
  6137  00DE2E                     l397:
  6138  00DE2E  0012               	return		;funcret
  6139  00DE30                     __end_of_Set_NS_LT:
  6140                           	opt stack 0
  6141                           tblptru	equ	0xFF8
  6142                           tblptrh	equ	0xFF7
  6143                           tblptrl	equ	0xFF6
  6144                           tablat	equ	0xFF5
  6145                           intcon2	equ	0xFF1
  6146                           postinc0	equ	0xFEE
  6147                           wreg	equ	0xFE8
  6148                           postdec1	equ	0xFE5
  6149                           fsr1l	equ	0xFE1
  6150                           indf2	equ	0xFDF
  6151                           fsr2h	equ	0xFDA
  6152                           fsr2l	equ	0xFD9
  6153                           status	equ	0xFD8
  6154                           
  6155 ;; *************** function _Set_NS *****************
  6156 ;; Defined at:
  6157 ;;		line 319 in file "Lab7-8.c"
  6158 ;; Parameters:    Size  Location     Type
  6159 ;;  color           1    wreg     unsigned char 
  6160 ;; Auto vars:     Size  Location     Type
  6161 ;;  color           1   53[COMRAM] unsigned char 
  6162 ;; Return value:  Size  Location     Type
  6163 ;;		None               void
  6164 ;; Registers used:
  6165 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6166 ;; Tracked objects:
  6167 ;;		On entry : 0/0
  6168 ;;		On exit  : 0/0
  6169 ;;		Unchanged: 0/0
  6170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6171 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6172 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6173 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6174 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6175 ;;Total ram usage:        1 bytes
  6176 ;; Hardware stack levels used:    1
  6177 ;; Hardware stack levels required when called:    7
  6178 ;; This function calls:
  6179 ;;		_update_LCD_color
  6180 ;; This function is called by:
  6181 ;;		_Day_Mode
  6182 ;;		_Night_Mode
  6183 ;; This function uses a non-reentrant model
  6184 ;;
  6185                           
  6186                           	psect	text29
  6187  00DDA8                     __ptext29:
  6188                           	opt stack 0
  6189  00DDA8                     _Set_NS:
  6190                           	opt stack 22
  6191                           
  6192                           ;incstack = 0
  6193                           ;Set_NS@color stored from wreg
  6194  00DDA8  6E36               	movwf	Set_NS@color,c
  6195                           
  6196                           ;Lab7-8.c: 321: direction = 2;
  6197  00DDAA  0E02               	movlw	2
  6198  00DDAC  6E79               	movwf	_direction,c
  6199                           
  6200                           ;Lab7-8.c: 322: update_LCD_color(direction, color);
  6201  00DDAE  C036  F033         	movff	Set_NS@color,update_LCD_color@color
  6202  00DDB2  5079               	movf	_direction,w,c
  6203  00DDB4  EC9E  F079         	call	_update_LCD_color
  6204                           
  6205                           ;Lab7-8.c: 324: switch (color)
  6206  00DDB8  D00A               	goto	l3377
  6207  00DDBA                     l383:
  6208  00DDBA  9280               	bcf	3968,1,c	;volatile
  6209  00DDBC  D001               	goto	L8
  6210  00DDBE                     l385:
  6211  00DDBE  8280               	bsf	3968,1,c	;volatile
  6212  00DDC0                     L8:
  6213  00DDC0  9480               	bcf	3968,2,c	;volatile
  6214  00DDC2  D013               	goto	l388
  6215  00DDC4                     l386:
  6216  00DDC4  9280               	bcf	3968,1,c	;volatile
  6217  00DDC6  D001               	goto	L9
  6218  00DDC8                     l387:
  6219  00DDC8  8280               	bsf	3968,1,c	;volatile
  6220  00DDCA                     L9:
  6221  00DDCA  8480               	bsf	3968,2,c	;volatile
  6222                           
  6223                           ;Lab7-8.c: 330: }
  6224  00DDCC  D00E               	goto	l388
  6225  00DDCE                     l3377:
  6226  00DDCE  5036               	movf	Set_NS@color,w,c
  6227                           
  6228                           ; Switch size 1, requested type "space"
  6229                           ; Number of cases is 4, Range of values is 0 to 3
  6230                           ; switch strategies available:
  6231                           ; Name         Instructions Cycles
  6232                           ; simple_byte           13     7 (average)
  6233                           ;	Chosen strategy is simple_byte
  6234  00DDD0  0A00               	xorlw	0	; case 0
  6235  00DDD2  B4D8               	btfsc	status,2,c
  6236  00DDD4  D7F2               	goto	l383
  6237  00DDD6  0A01               	xorlw	1	; case 1
  6238  00DDD8  B4D8               	btfsc	status,2,c
  6239  00DDDA  D7F1               	goto	l385
  6240  00DDDC  0A03               	xorlw	3	; case 2
  6241  00DDDE  B4D8               	btfsc	status,2,c
  6242  00DDE0  D7F1               	goto	l386
  6243  00DDE2  0A01               	xorlw	1	; case 3
  6244  00DDE4  B4D8               	btfsc	status,2,c
  6245  00DDE6  D7F0               	goto	l387
  6246  00DDE8  D000               	goto	l388
  6247  00DDEA                     l388:
  6248  00DDEA  0012               	return		;funcret
  6249  00DDEC                     __end_of_Set_NS:
  6250                           	opt stack 0
  6251                           tblptru	equ	0xFF8
  6252                           tblptrh	equ	0xFF7
  6253                           tblptrl	equ	0xFF6
  6254                           tablat	equ	0xFF5
  6255                           intcon2	equ	0xFF1
  6256                           postinc0	equ	0xFEE
  6257                           wreg	equ	0xFE8
  6258                           postdec1	equ	0xFE5
  6259                           fsr1l	equ	0xFE1
  6260                           indf2	equ	0xFDF
  6261                           fsr2h	equ	0xFDA
  6262                           fsr2l	equ	0xFD9
  6263                           status	equ	0xFD8
  6264                           
  6265 ;; *************** function _Set_EW_LT *****************
  6266 ;; Defined at:
  6267 ;;		line 359 in file "Lab7-8.c"
  6268 ;; Parameters:    Size  Location     Type
  6269 ;;  color           1    wreg     unsigned char 
  6270 ;; Auto vars:     Size  Location     Type
  6271 ;;  color           1   53[COMRAM] unsigned char 
  6272 ;; Return value:  Size  Location     Type
  6273 ;;		None               void
  6274 ;; Registers used:
  6275 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6276 ;; Tracked objects:
  6277 ;;		On entry : 0/0
  6278 ;;		On exit  : 0/0
  6279 ;;		Unchanged: 0/0
  6280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6281 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6282 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6283 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6284 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6285 ;;Total ram usage:        1 bytes
  6286 ;; Hardware stack levels used:    1
  6287 ;; Hardware stack levels required when called:    7
  6288 ;; This function calls:
  6289 ;;		_update_LCD_color
  6290 ;; This function is called by:
  6291 ;;		_Day_Mode
  6292 ;;		_Night_Mode
  6293 ;; This function uses a non-reentrant model
  6294 ;;
  6295                           
  6296                           	psect	text30
  6297  00DD64                     __ptext30:
  6298                           	opt stack 0
  6299  00DD64                     _Set_EW_LT:
  6300                           	opt stack 22
  6301                           
  6302                           ;incstack = 0
  6303                           ;Set_EW_LT@color stored from wreg
  6304  00DD64  6E36               	movwf	Set_EW_LT@color,c
  6305                           
  6306                           ;Lab7-8.c: 361: direction = 1;
  6307  00DD66  0E01               	movlw	1
  6308  00DD68  6E79               	movwf	_direction,c
  6309                           
  6310                           ;Lab7-8.c: 362: update_LCD_color(direction, color);
  6311  00DD6A  C036  F033         	movff	Set_EW_LT@color,update_LCD_color@color
  6312  00DD6E  5079               	movf	_direction,w,c
  6313  00DD70  EC9E  F079         	call	_update_LCD_color
  6314                           
  6315                           ;Lab7-8.c: 363: switch (color)
  6316  00DD74  D00A               	goto	l3401
  6317  00DD76                     l410:
  6318  00DD76  9084               	bcf	3972,0,c	;volatile
  6319  00DD78  D001               	goto	L10
  6320  00DD7A                     l412:
  6321  00DD7A  8084               	bsf	3972,0,c	;volatile
  6322  00DD7C                     L10:
  6323  00DD7C  9484               	bcf	3972,2,c	;volatile
  6324  00DD7E  D013               	goto	l415
  6325  00DD80                     l413:
  6326  00DD80  9084               	bcf	3972,0,c	;volatile
  6327  00DD82  D001               	goto	L11
  6328  00DD84                     l414:
  6329  00DD84  8084               	bsf	3972,0,c	;volatile
  6330  00DD86                     L11:
  6331  00DD86  8484               	bsf	3972,2,c	;volatile
  6332                           
  6333                           ;Lab7-8.c: 369: }
  6334  00DD88  D00E               	goto	l415
  6335  00DD8A                     l3401:
  6336  00DD8A  5036               	movf	Set_EW_LT@color,w,c
  6337                           
  6338                           ; Switch size 1, requested type "space"
  6339                           ; Number of cases is 4, Range of values is 0 to 3
  6340                           ; switch strategies available:
  6341                           ; Name         Instructions Cycles
  6342                           ; simple_byte           13     7 (average)
  6343                           ;	Chosen strategy is simple_byte
  6344  00DD8C  0A00               	xorlw	0	; case 0
  6345  00DD8E  B4D8               	btfsc	status,2,c
  6346  00DD90  D7F2               	goto	l410
  6347  00DD92  0A01               	xorlw	1	; case 1
  6348  00DD94  B4D8               	btfsc	status,2,c
  6349  00DD96  D7F1               	goto	l412
  6350  00DD98  0A03               	xorlw	3	; case 2
  6351  00DD9A  B4D8               	btfsc	status,2,c
  6352  00DD9C  D7F1               	goto	l413
  6353  00DD9E  0A01               	xorlw	1	; case 3
  6354  00DDA0  B4D8               	btfsc	status,2,c
  6355  00DDA2  D7F0               	goto	l414
  6356  00DDA4  D000               	goto	l415
  6357  00DDA6                     l415:
  6358  00DDA6  0012               	return		;funcret
  6359  00DDA8                     __end_of_Set_EW_LT:
  6360                           	opt stack 0
  6361                           tblptru	equ	0xFF8
  6362                           tblptrh	equ	0xFF7
  6363                           tblptrl	equ	0xFF6
  6364                           tablat	equ	0xFF5
  6365                           intcon2	equ	0xFF1
  6366                           postinc0	equ	0xFEE
  6367                           wreg	equ	0xFE8
  6368                           postdec1	equ	0xFE5
  6369                           fsr1l	equ	0xFE1
  6370                           indf2	equ	0xFDF
  6371                           fsr2h	equ	0xFDA
  6372                           fsr2l	equ	0xFD9
  6373                           status	equ	0xFD8
  6374                           
  6375 ;; *************** function _Set_EW *****************
  6376 ;; Defined at:
  6377 ;;		line 346 in file "Lab7-8.c"
  6378 ;; Parameters:    Size  Location     Type
  6379 ;;  color           1    wreg     unsigned char 
  6380 ;; Auto vars:     Size  Location     Type
  6381 ;;  color           1   53[COMRAM] unsigned char 
  6382 ;; Return value:  Size  Location     Type
  6383 ;;		None               void
  6384 ;; Registers used:
  6385 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6386 ;; Tracked objects:
  6387 ;;		On entry : 0/0
  6388 ;;		On exit  : 0/0
  6389 ;;		Unchanged: 0/0
  6390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6391 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6392 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6394 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6395 ;;Total ram usage:        1 bytes
  6396 ;; Hardware stack levels used:    1
  6397 ;; Hardware stack levels required when called:    7
  6398 ;; This function calls:
  6399 ;;		_update_LCD_color
  6400 ;; This function is called by:
  6401 ;;		_Day_Mode
  6402 ;;		_Night_Mode
  6403 ;; This function uses a non-reentrant model
  6404 ;;
  6405                           
  6406                           	psect	text31
  6407  00DD20                     __ptext31:
  6408                           	opt stack 0
  6409  00DD20                     _Set_EW:
  6410                           	opt stack 22
  6411                           
  6412                           ;incstack = 0
  6413                           ;Set_EW@color stored from wreg
  6414  00DD20  6E36               	movwf	Set_EW@color,c
  6415                           
  6416                           ;Lab7-8.c: 348: direction = 0;
  6417  00DD22  0E00               	movlw	0
  6418  00DD24  6E79               	movwf	_direction,c
  6419                           
  6420                           ;Lab7-8.c: 349: update_LCD_color(direction, color);
  6421  00DD26  C036  F033         	movff	Set_EW@color,update_LCD_color@color
  6422  00DD2A  5079               	movf	_direction,w,c
  6423  00DD2C  EC9E  F079         	call	_update_LCD_color
  6424                           
  6425                           ;Lab7-8.c: 350: switch (color)
  6426  00DD30  D00A               	goto	l3393
  6427  00DD32                     l401:
  6428  00DD32  9C81               	bcf	3969,6,c	;volatile
  6429  00DD34  D001               	goto	L12
  6430  00DD36                     l403:
  6431  00DD36  8C81               	bsf	3969,6,c	;volatile
  6432  00DD38                     L12:
  6433  00DD38  9E81               	bcf	3969,7,c	;volatile
  6434  00DD3A  D013               	goto	l406
  6435  00DD3C                     l404:
  6436  00DD3C  9C81               	bcf	3969,6,c	;volatile
  6437  00DD3E  D001               	goto	L13
  6438  00DD40                     l405:
  6439  00DD40  8C81               	bsf	3969,6,c	;volatile
  6440  00DD42                     L13:
  6441  00DD42  8E81               	bsf	3969,7,c	;volatile
  6442                           
  6443                           ;Lab7-8.c: 356: }
  6444  00DD44  D00E               	goto	l406
  6445  00DD46                     l3393:
  6446  00DD46  5036               	movf	Set_EW@color,w,c
  6447                           
  6448                           ; Switch size 1, requested type "space"
  6449                           ; Number of cases is 4, Range of values is 0 to 3
  6450                           ; switch strategies available:
  6451                           ; Name         Instructions Cycles
  6452                           ; simple_byte           13     7 (average)
  6453                           ;	Chosen strategy is simple_byte
  6454  00DD48  0A00               	xorlw	0	; case 0
  6455  00DD4A  B4D8               	btfsc	status,2,c
  6456  00DD4C  D7F2               	goto	l401
  6457  00DD4E  0A01               	xorlw	1	; case 1
  6458  00DD50  B4D8               	btfsc	status,2,c
  6459  00DD52  D7F1               	goto	l403
  6460  00DD54  0A03               	xorlw	3	; case 2
  6461  00DD56  B4D8               	btfsc	status,2,c
  6462  00DD58  D7F1               	goto	l404
  6463  00DD5A  0A01               	xorlw	1	; case 3
  6464  00DD5C  B4D8               	btfsc	status,2,c
  6465  00DD5E  D7F0               	goto	l405
  6466  00DD60  D000               	goto	l406
  6467  00DD62                     l406:
  6468  00DD62  0012               	return		;funcret
  6469  00DD64                     __end_of_Set_EW:
  6470                           	opt stack 0
  6471                           tblptru	equ	0xFF8
  6472                           tblptrh	equ	0xFF7
  6473                           tblptrl	equ	0xFF6
  6474                           tablat	equ	0xFF5
  6475                           intcon2	equ	0xFF1
  6476                           postinc0	equ	0xFEE
  6477                           wreg	equ	0xFE8
  6478                           postdec1	equ	0xFE5
  6479                           fsr1l	equ	0xFE1
  6480                           indf2	equ	0xFDF
  6481                           fsr2h	equ	0xFDA
  6482                           fsr2l	equ	0xFD9
  6483                           status	equ	0xFD8
  6484                           
  6485 ;; *************** function _update_LCD_color *****************
  6486 ;; Defined at:
  6487 ;;		line 546 in file "Lab7-8.c"
  6488 ;; Parameters:    Size  Location     Type
  6489 ;;  direction       1    wreg     unsigned char 
  6490 ;;  color           1   50[COMRAM] unsigned char 
  6491 ;; Auto vars:     Size  Location     Type
  6492 ;;  direction       1   51[COMRAM] unsigned char 
  6493 ;;  Circle_Y        1   52[COMRAM] unsigned char 
  6494 ;; Return value:  Size  Location     Type
  6495 ;;		None               void
  6496 ;; Registers used:
  6497 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6498 ;; Tracked objects:
  6499 ;;		On entry : 0/0
  6500 ;;		On exit  : 0/0
  6501 ;;		Unchanged: 0/0
  6502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6503 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6504 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6505 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6506 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6507 ;;Total ram usage:        3 bytes
  6508 ;; Hardware stack levels used:    1
  6509 ;; Hardware stack levels required when called:    6
  6510 ;; This function calls:
  6511 ;;		_drawCircle
  6512 ;;		_fillCircle
  6513 ;; This function is called by:
  6514 ;;		_Set_NS
  6515 ;;		_Set_NS_LT
  6516 ;;		_Set_EW
  6517 ;;		_Set_EW_LT
  6518 ;; This function uses a non-reentrant model
  6519 ;;
  6520                           
  6521                           	psect	text32
  6522  00F33C                     __ptext32:
  6523                           	opt stack 0
  6524  00F33C                     _update_LCD_color:
  6525                           	opt stack 22
  6526                           
  6527                           ;incstack = 0
  6528                           ;update_LCD_color@direction stored from wreg
  6529  00F33C  6E34               	movwf	update_LCD_color@direction,c
  6530                           
  6531                           ;Lab7-8.c: 548: char Circle_Y;
  6532                           ;Lab7-8.c: 549: Circle_Y = 20 + 15 + direction * 30;
  6533  00F33E  5034               	movf	update_LCD_color@direction,w,c
  6534  00F340  0D1E               	mullw	30
  6535  00F342  50F3               	movf	prodl,w,c
  6536  00F344  0F23               	addlw	35
  6537  00F346  6E35               	movwf	update_LCD_color@Circle_Y,c
  6538                           
  6539                           ;Lab7-8.c: 551: if (color == 0)
  6540  00F348  5033               	movf	update_LCD_color@color,w,c
  6541  00F34A  A4D8               	btfss	status,2,c
  6542  00F34C  D067               	goto	l3231
  6543                           
  6544                           ;Lab7-8.c: 552: {
  6545                           ;Lab7-8.c: 553: fillCircle(40, Circle_Y, 7, 0x0000);
  6546  00F34E  0E00               	movlw	0
  6547  00F350  6E2C               	movwf	fillCircle@x0+1,c
  6548  00F352  0E28               	movlw	40
  6549  00F354  6E2B               	movwf	fillCircle@x0,c
  6550  00F356  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6551  00F35A  6A2E               	clrf	fillCircle@y0+1,c
  6552  00F35C  0E00               	movlw	0
  6553  00F35E  6E30               	movwf	fillCircle@r+1,c
  6554  00F360  0E07               	movlw	7
  6555  00F362  6E2F               	movwf	fillCircle@r,c
  6556  00F364  0E00               	movlw	0
  6557  00F366  6E32               	movwf	fillCircle@color+1,c
  6558  00F368  0E00               	movlw	0
  6559  00F36A  6E31               	movwf	fillCircle@color,c
  6560  00F36C  EC64  F06F         	call	_fillCircle	;wreg free
  6561                           
  6562                           ;Lab7-8.c: 554: fillCircle(60, Circle_Y, 7, 0x0000);
  6563  00F370  0E00               	movlw	0
  6564  00F372  6E2C               	movwf	fillCircle@x0+1,c
  6565  00F374  0E3C               	movlw	60
  6566  00F376  6E2B               	movwf	fillCircle@x0,c
  6567  00F378  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6568  00F37C  6A2E               	clrf	fillCircle@y0+1,c
  6569  00F37E  0E00               	movlw	0
  6570  00F380  6E30               	movwf	fillCircle@r+1,c
  6571  00F382  0E07               	movlw	7
  6572  00F384  6E2F               	movwf	fillCircle@r,c
  6573  00F386  0E00               	movlw	0
  6574  00F388  6E32               	movwf	fillCircle@color+1,c
  6575  00F38A  0E00               	movlw	0
  6576  00F38C  6E31               	movwf	fillCircle@color,c
  6577  00F38E  EC64  F06F         	call	_fillCircle	;wreg free
  6578                           
  6579                           ;Lab7-8.c: 555: fillCircle(80, Circle_Y, 7, 0x0000);
  6580  00F392  0E00               	movlw	0
  6581  00F394  6E2C               	movwf	fillCircle@x0+1,c
  6582  00F396  0E50               	movlw	80
  6583  00F398  6E2B               	movwf	fillCircle@x0,c
  6584  00F39A  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6585  00F39E  6A2E               	clrf	fillCircle@y0+1,c
  6586  00F3A0  0E00               	movlw	0
  6587  00F3A2  6E30               	movwf	fillCircle@r+1,c
  6588  00F3A4  0E07               	movlw	7
  6589  00F3A6  6E2F               	movwf	fillCircle@r,c
  6590  00F3A8  0E00               	movlw	0
  6591  00F3AA  6E32               	movwf	fillCircle@color+1,c
  6592  00F3AC  0E00               	movlw	0
  6593  00F3AE  6E31               	movwf	fillCircle@color,c
  6594  00F3B0  EC64  F06F         	call	_fillCircle	;wreg free
  6595                           
  6596                           ;Lab7-8.c: 556: drawCircle(40, Circle_Y, 7, 0xF800);
  6597  00F3B4  0E00               	movlw	0
  6598  00F3B6  6E0D               	movwf	drawCircle@x0+1,c
  6599  00F3B8  0E28               	movlw	40
  6600  00F3BA  6E0C               	movwf	drawCircle@x0,c
  6601  00F3BC  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6602  00F3C0  6A0F               	clrf	drawCircle@y0+1,c
  6603  00F3C2  0E00               	movlw	0
  6604  00F3C4  6E11               	movwf	drawCircle@r+1,c
  6605  00F3C6  0E07               	movlw	7
  6606  00F3C8  6E10               	movwf	drawCircle@r,c
  6607  00F3CA  0EF8               	movlw	248
  6608  00F3CC  6E13               	movwf	drawCircle@color+1,c
  6609  00F3CE  0E00               	movlw	0
  6610  00F3D0  6E12               	movwf	drawCircle@color,c
  6611  00F3D2  ECE8  F077         	call	_drawCircle	;wreg free
  6612                           
  6613                           ;Lab7-8.c: 557: drawCircle(60, Circle_Y, 7, 0xFFE0);
  6614  00F3D6  0E00               	movlw	0
  6615  00F3D8  6E0D               	movwf	drawCircle@x0+1,c
  6616  00F3DA  0E3C               	movlw	60
  6617  00F3DC  6E0C               	movwf	drawCircle@x0,c
  6618  00F3DE  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6619  00F3E2  6A0F               	clrf	drawCircle@y0+1,c
  6620  00F3E4  0E00               	movlw	0
  6621  00F3E6  6E11               	movwf	drawCircle@r+1,c
  6622  00F3E8  0E07               	movlw	7
  6623  00F3EA  6E10               	movwf	drawCircle@r,c
  6624  00F3EC  0EFF               	movlw	255
  6625  00F3EE  6E13               	movwf	drawCircle@color+1,c
  6626  00F3F0  0EE0               	movlw	224
  6627  00F3F2  6E12               	movwf	drawCircle@color,c
  6628  00F3F4  ECE8  F077         	call	_drawCircle	;wreg free
  6629                           
  6630                           ;Lab7-8.c: 558: drawCircle(80, Circle_Y, 7, 0x07E0);
  6631  00F3F8  0E00               	movlw	0
  6632  00F3FA  6E0D               	movwf	drawCircle@x0+1,c
  6633  00F3FC  0E50               	movlw	80
  6634  00F3FE  6E0C               	movwf	drawCircle@x0,c
  6635  00F400  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6636  00F404  6A0F               	clrf	drawCircle@y0+1,c
  6637  00F406  0E00               	movlw	0
  6638  00F408  6E11               	movwf	drawCircle@r+1,c
  6639  00F40A  0E07               	movlw	7
  6640  00F40C  6E10               	movwf	drawCircle@r,c
  6641  00F40E  0E07               	movlw	7
  6642  00F410  6E13               	movwf	drawCircle@color+1,c
  6643  00F412  0EE0               	movlw	224
  6644  00F414  6E12               	movwf	drawCircle@color,c
  6645  00F416  ECE8  F077         	call	_drawCircle	;wreg free
  6646  00F41A  D000               	goto	l3231
  6647  00F41C                     l3231:
  6648                           
  6649                           ;Lab7-8.c: 559: }
  6650                           ;Lab7-8.c: 560: if (color == 1)
  6651  00F41C  0433               	decf	update_LCD_color@color,w,c
  6652  00F41E  A4D8               	btfss	status,2,c
  6653  00F420  D067               	goto	l3235
  6654                           
  6655                           ;Lab7-8.c: 561: {
  6656                           ;Lab7-8.c: 562: fillCircle(40, Circle_Y, 7, 0xF800);
  6657  00F422  0E00               	movlw	0
  6658  00F424  6E2C               	movwf	fillCircle@x0+1,c
  6659  00F426  0E28               	movlw	40
  6660  00F428  6E2B               	movwf	fillCircle@x0,c
  6661  00F42A  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6662  00F42E  6A2E               	clrf	fillCircle@y0+1,c
  6663  00F430  0E00               	movlw	0
  6664  00F432  6E30               	movwf	fillCircle@r+1,c
  6665  00F434  0E07               	movlw	7
  6666  00F436  6E2F               	movwf	fillCircle@r,c
  6667  00F438  0EF8               	movlw	248
  6668  00F43A  6E32               	movwf	fillCircle@color+1,c
  6669  00F43C  0E00               	movlw	0
  6670  00F43E  6E31               	movwf	fillCircle@color,c
  6671  00F440  EC64  F06F         	call	_fillCircle	;wreg free
  6672                           
  6673                           ;Lab7-8.c: 563: fillCircle(60, Circle_Y, 7, 0x0000);
  6674  00F444  0E00               	movlw	0
  6675  00F446  6E2C               	movwf	fillCircle@x0+1,c
  6676  00F448  0E3C               	movlw	60
  6677  00F44A  6E2B               	movwf	fillCircle@x0,c
  6678  00F44C  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6679  00F450  6A2E               	clrf	fillCircle@y0+1,c
  6680  00F452  0E00               	movlw	0
  6681  00F454  6E30               	movwf	fillCircle@r+1,c
  6682  00F456  0E07               	movlw	7
  6683  00F458  6E2F               	movwf	fillCircle@r,c
  6684  00F45A  0E00               	movlw	0
  6685  00F45C  6E32               	movwf	fillCircle@color+1,c
  6686  00F45E  0E00               	movlw	0
  6687  00F460  6E31               	movwf	fillCircle@color,c
  6688  00F462  EC64  F06F         	call	_fillCircle	;wreg free
  6689                           
  6690                           ;Lab7-8.c: 564: fillCircle(80, Circle_Y, 7, 0x0000);
  6691  00F466  0E00               	movlw	0
  6692  00F468  6E2C               	movwf	fillCircle@x0+1,c
  6693  00F46A  0E50               	movlw	80
  6694  00F46C  6E2B               	movwf	fillCircle@x0,c
  6695  00F46E  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6696  00F472  6A2E               	clrf	fillCircle@y0+1,c
  6697  00F474  0E00               	movlw	0
  6698  00F476  6E30               	movwf	fillCircle@r+1,c
  6699  00F478  0E07               	movlw	7
  6700  00F47A  6E2F               	movwf	fillCircle@r,c
  6701  00F47C  0E00               	movlw	0
  6702  00F47E  6E32               	movwf	fillCircle@color+1,c
  6703  00F480  0E00               	movlw	0
  6704  00F482  6E31               	movwf	fillCircle@color,c
  6705  00F484  EC64  F06F         	call	_fillCircle	;wreg free
  6706                           
  6707                           ;Lab7-8.c: 565: drawCircle(40, Circle_Y, 7, 0xF800);
  6708  00F488  0E00               	movlw	0
  6709  00F48A  6E0D               	movwf	drawCircle@x0+1,c
  6710  00F48C  0E28               	movlw	40
  6711  00F48E  6E0C               	movwf	drawCircle@x0,c
  6712  00F490  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6713  00F494  6A0F               	clrf	drawCircle@y0+1,c
  6714  00F496  0E00               	movlw	0
  6715  00F498  6E11               	movwf	drawCircle@r+1,c
  6716  00F49A  0E07               	movlw	7
  6717  00F49C  6E10               	movwf	drawCircle@r,c
  6718  00F49E  0EF8               	movlw	248
  6719  00F4A0  6E13               	movwf	drawCircle@color+1,c
  6720  00F4A2  0E00               	movlw	0
  6721  00F4A4  6E12               	movwf	drawCircle@color,c
  6722  00F4A6  ECE8  F077         	call	_drawCircle	;wreg free
  6723                           
  6724                           ;Lab7-8.c: 566: drawCircle(60, Circle_Y, 7, 0xFFE0);
  6725  00F4AA  0E00               	movlw	0
  6726  00F4AC  6E0D               	movwf	drawCircle@x0+1,c
  6727  00F4AE  0E3C               	movlw	60
  6728  00F4B0  6E0C               	movwf	drawCircle@x0,c
  6729  00F4B2  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6730  00F4B6  6A0F               	clrf	drawCircle@y0+1,c
  6731  00F4B8  0E00               	movlw	0
  6732  00F4BA  6E11               	movwf	drawCircle@r+1,c
  6733  00F4BC  0E07               	movlw	7
  6734  00F4BE  6E10               	movwf	drawCircle@r,c
  6735  00F4C0  0EFF               	movlw	255
  6736  00F4C2  6E13               	movwf	drawCircle@color+1,c
  6737  00F4C4  0EE0               	movlw	224
  6738  00F4C6  6E12               	movwf	drawCircle@color,c
  6739  00F4C8  ECE8  F077         	call	_drawCircle	;wreg free
  6740                           
  6741                           ;Lab7-8.c: 567: drawCircle(80, Circle_Y, 7, 0x07E0);
  6742  00F4CC  0E00               	movlw	0
  6743  00F4CE  6E0D               	movwf	drawCircle@x0+1,c
  6744  00F4D0  0E50               	movlw	80
  6745  00F4D2  6E0C               	movwf	drawCircle@x0,c
  6746  00F4D4  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6747  00F4D8  6A0F               	clrf	drawCircle@y0+1,c
  6748  00F4DA  0E00               	movlw	0
  6749  00F4DC  6E11               	movwf	drawCircle@r+1,c
  6750  00F4DE  0E07               	movlw	7
  6751  00F4E0  6E10               	movwf	drawCircle@r,c
  6752  00F4E2  0E07               	movlw	7
  6753  00F4E4  6E13               	movwf	drawCircle@color+1,c
  6754  00F4E6  0EE0               	movlw	224
  6755  00F4E8  6E12               	movwf	drawCircle@color,c
  6756  00F4EA  ECE8  F077         	call	_drawCircle	;wreg free
  6757  00F4EE  D000               	goto	l3235
  6758  00F4F0                     l3235:
  6759                           
  6760                           ;Lab7-8.c: 568: }
  6761                           ;Lab7-8.c: 569: if (color == 3)
  6762  00F4F0  0E03               	movlw	3
  6763  00F4F2  1833               	xorwf	update_LCD_color@color,w,c
  6764  00F4F4  A4D8               	btfss	status,2,c
  6765  00F4F6  D067               	goto	l3239
  6766                           
  6767                           ;Lab7-8.c: 570: {
  6768                           ;Lab7-8.c: 571: fillCircle(40, Circle_Y, 7, 0x0000);
  6769  00F4F8  0E00               	movlw	0
  6770  00F4FA  6E2C               	movwf	fillCircle@x0+1,c
  6771  00F4FC  0E28               	movlw	40
  6772  00F4FE  6E2B               	movwf	fillCircle@x0,c
  6773  00F500  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6774  00F504  6A2E               	clrf	fillCircle@y0+1,c
  6775  00F506  0E00               	movlw	0
  6776  00F508  6E30               	movwf	fillCircle@r+1,c
  6777  00F50A  0E07               	movlw	7
  6778  00F50C  6E2F               	movwf	fillCircle@r,c
  6779  00F50E  0E00               	movlw	0
  6780  00F510  6E32               	movwf	fillCircle@color+1,c
  6781  00F512  0E00               	movlw	0
  6782  00F514  6E31               	movwf	fillCircle@color,c
  6783  00F516  EC64  F06F         	call	_fillCircle	;wreg free
  6784                           
  6785                           ;Lab7-8.c: 572: fillCircle(60, Circle_Y, 7, 0xFFE0);
  6786  00F51A  0E00               	movlw	0
  6787  00F51C  6E2C               	movwf	fillCircle@x0+1,c
  6788  00F51E  0E3C               	movlw	60
  6789  00F520  6E2B               	movwf	fillCircle@x0,c
  6790  00F522  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6791  00F526  6A2E               	clrf	fillCircle@y0+1,c
  6792  00F528  0E00               	movlw	0
  6793  00F52A  6E30               	movwf	fillCircle@r+1,c
  6794  00F52C  0E07               	movlw	7
  6795  00F52E  6E2F               	movwf	fillCircle@r,c
  6796  00F530  0EFF               	movlw	255
  6797  00F532  6E32               	movwf	fillCircle@color+1,c
  6798  00F534  0EE0               	movlw	224
  6799  00F536  6E31               	movwf	fillCircle@color,c
  6800  00F538  EC64  F06F         	call	_fillCircle	;wreg free
  6801                           
  6802                           ;Lab7-8.c: 573: fillCircle(80, Circle_Y, 7, 0x0000);
  6803  00F53C  0E00               	movlw	0
  6804  00F53E  6E2C               	movwf	fillCircle@x0+1,c
  6805  00F540  0E50               	movlw	80
  6806  00F542  6E2B               	movwf	fillCircle@x0,c
  6807  00F544  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6808  00F548  6A2E               	clrf	fillCircle@y0+1,c
  6809  00F54A  0E00               	movlw	0
  6810  00F54C  6E30               	movwf	fillCircle@r+1,c
  6811  00F54E  0E07               	movlw	7
  6812  00F550  6E2F               	movwf	fillCircle@r,c
  6813  00F552  0E00               	movlw	0
  6814  00F554  6E32               	movwf	fillCircle@color+1,c
  6815  00F556  0E00               	movlw	0
  6816  00F558  6E31               	movwf	fillCircle@color,c
  6817  00F55A  EC64  F06F         	call	_fillCircle	;wreg free
  6818                           
  6819                           ;Lab7-8.c: 574: drawCircle(40, Circle_Y, 7, 0xF800);
  6820  00F55E  0E00               	movlw	0
  6821  00F560  6E0D               	movwf	drawCircle@x0+1,c
  6822  00F562  0E28               	movlw	40
  6823  00F564  6E0C               	movwf	drawCircle@x0,c
  6824  00F566  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6825  00F56A  6A0F               	clrf	drawCircle@y0+1,c
  6826  00F56C  0E00               	movlw	0
  6827  00F56E  6E11               	movwf	drawCircle@r+1,c
  6828  00F570  0E07               	movlw	7
  6829  00F572  6E10               	movwf	drawCircle@r,c
  6830  00F574  0EF8               	movlw	248
  6831  00F576  6E13               	movwf	drawCircle@color+1,c
  6832  00F578  0E00               	movlw	0
  6833  00F57A  6E12               	movwf	drawCircle@color,c
  6834  00F57C  ECE8  F077         	call	_drawCircle	;wreg free
  6835                           
  6836                           ;Lab7-8.c: 575: drawCircle(60, Circle_Y, 7, 0xFFE0);
  6837  00F580  0E00               	movlw	0
  6838  00F582  6E0D               	movwf	drawCircle@x0+1,c
  6839  00F584  0E3C               	movlw	60
  6840  00F586  6E0C               	movwf	drawCircle@x0,c
  6841  00F588  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6842  00F58C  6A0F               	clrf	drawCircle@y0+1,c
  6843  00F58E  0E00               	movlw	0
  6844  00F590  6E11               	movwf	drawCircle@r+1,c
  6845  00F592  0E07               	movlw	7
  6846  00F594  6E10               	movwf	drawCircle@r,c
  6847  00F596  0EFF               	movlw	255
  6848  00F598  6E13               	movwf	drawCircle@color+1,c
  6849  00F59A  0EE0               	movlw	224
  6850  00F59C  6E12               	movwf	drawCircle@color,c
  6851  00F59E  ECE8  F077         	call	_drawCircle	;wreg free
  6852                           
  6853                           ;Lab7-8.c: 576: drawCircle(80, Circle_Y, 7, 0x07E0);
  6854  00F5A2  0E00               	movlw	0
  6855  00F5A4  6E0D               	movwf	drawCircle@x0+1,c
  6856  00F5A6  0E50               	movlw	80
  6857  00F5A8  6E0C               	movwf	drawCircle@x0,c
  6858  00F5AA  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6859  00F5AE  6A0F               	clrf	drawCircle@y0+1,c
  6860  00F5B0  0E00               	movlw	0
  6861  00F5B2  6E11               	movwf	drawCircle@r+1,c
  6862  00F5B4  0E07               	movlw	7
  6863  00F5B6  6E10               	movwf	drawCircle@r,c
  6864  00F5B8  0E07               	movlw	7
  6865  00F5BA  6E13               	movwf	drawCircle@color+1,c
  6866  00F5BC  0EE0               	movlw	224
  6867  00F5BE  6E12               	movwf	drawCircle@color,c
  6868  00F5C0  ECE8  F077         	call	_drawCircle	;wreg free
  6869  00F5C4  D000               	goto	l3239
  6870  00F5C6                     l3239:
  6871                           
  6872                           ;Lab7-8.c: 577: }
  6873                           ;Lab7-8.c: 578: if (color == 2)
  6874  00F5C6  0E02               	movlw	2
  6875  00F5C8  1833               	xorwf	update_LCD_color@color,w,c
  6876  00F5CA  A4D8               	btfss	status,2,c
  6877  00F5CC  D067               	goto	l471
  6878                           
  6879                           ;Lab7-8.c: 579: {
  6880                           ;Lab7-8.c: 580: fillCircle(40, Circle_Y, 7, 0x0000);
  6881  00F5CE  0E00               	movlw	0
  6882  00F5D0  6E2C               	movwf	fillCircle@x0+1,c
  6883  00F5D2  0E28               	movlw	40
  6884  00F5D4  6E2B               	movwf	fillCircle@x0,c
  6885  00F5D6  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6886  00F5DA  6A2E               	clrf	fillCircle@y0+1,c
  6887  00F5DC  0E00               	movlw	0
  6888  00F5DE  6E30               	movwf	fillCircle@r+1,c
  6889  00F5E0  0E07               	movlw	7
  6890  00F5E2  6E2F               	movwf	fillCircle@r,c
  6891  00F5E4  0E00               	movlw	0
  6892  00F5E6  6E32               	movwf	fillCircle@color+1,c
  6893  00F5E8  0E00               	movlw	0
  6894  00F5EA  6E31               	movwf	fillCircle@color,c
  6895  00F5EC  EC64  F06F         	call	_fillCircle	;wreg free
  6896                           
  6897                           ;Lab7-8.c: 581: fillCircle(60, Circle_Y, 7, 0x0000);
  6898  00F5F0  0E00               	movlw	0
  6899  00F5F2  6E2C               	movwf	fillCircle@x0+1,c
  6900  00F5F4  0E3C               	movlw	60
  6901  00F5F6  6E2B               	movwf	fillCircle@x0,c
  6902  00F5F8  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6903  00F5FC  6A2E               	clrf	fillCircle@y0+1,c
  6904  00F5FE  0E00               	movlw	0
  6905  00F600  6E30               	movwf	fillCircle@r+1,c
  6906  00F602  0E07               	movlw	7
  6907  00F604  6E2F               	movwf	fillCircle@r,c
  6908  00F606  0E00               	movlw	0
  6909  00F608  6E32               	movwf	fillCircle@color+1,c
  6910  00F60A  0E00               	movlw	0
  6911  00F60C  6E31               	movwf	fillCircle@color,c
  6912  00F60E  EC64  F06F         	call	_fillCircle	;wreg free
  6913                           
  6914                           ;Lab7-8.c: 582: fillCircle(80, Circle_Y, 7, 0x07E0);
  6915  00F612  0E00               	movlw	0
  6916  00F614  6E2C               	movwf	fillCircle@x0+1,c
  6917  00F616  0E50               	movlw	80
  6918  00F618  6E2B               	movwf	fillCircle@x0,c
  6919  00F61A  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6920  00F61E  6A2E               	clrf	fillCircle@y0+1,c
  6921  00F620  0E00               	movlw	0
  6922  00F622  6E30               	movwf	fillCircle@r+1,c
  6923  00F624  0E07               	movlw	7
  6924  00F626  6E2F               	movwf	fillCircle@r,c
  6925  00F628  0E07               	movlw	7
  6926  00F62A  6E32               	movwf	fillCircle@color+1,c
  6927  00F62C  0EE0               	movlw	224
  6928  00F62E  6E31               	movwf	fillCircle@color,c
  6929  00F630  EC64  F06F         	call	_fillCircle	;wreg free
  6930                           
  6931                           ;Lab7-8.c: 583: drawCircle(40, Circle_Y, 7, 0xF800);
  6932  00F634  0E00               	movlw	0
  6933  00F636  6E0D               	movwf	drawCircle@x0+1,c
  6934  00F638  0E28               	movlw	40
  6935  00F63A  6E0C               	movwf	drawCircle@x0,c
  6936  00F63C  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6937  00F640  6A0F               	clrf	drawCircle@y0+1,c
  6938  00F642  0E00               	movlw	0
  6939  00F644  6E11               	movwf	drawCircle@r+1,c
  6940  00F646  0E07               	movlw	7
  6941  00F648  6E10               	movwf	drawCircle@r,c
  6942  00F64A  0EF8               	movlw	248
  6943  00F64C  6E13               	movwf	drawCircle@color+1,c
  6944  00F64E  0E00               	movlw	0
  6945  00F650  6E12               	movwf	drawCircle@color,c
  6946  00F652  ECE8  F077         	call	_drawCircle	;wreg free
  6947                           
  6948                           ;Lab7-8.c: 584: drawCircle(60, Circle_Y, 7, 0xFFE0);
  6949  00F656  0E00               	movlw	0
  6950  00F658  6E0D               	movwf	drawCircle@x0+1,c
  6951  00F65A  0E3C               	movlw	60
  6952  00F65C  6E0C               	movwf	drawCircle@x0,c
  6953  00F65E  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6954  00F662  6A0F               	clrf	drawCircle@y0+1,c
  6955  00F664  0E00               	movlw	0
  6956  00F666  6E11               	movwf	drawCircle@r+1,c
  6957  00F668  0E07               	movlw	7
  6958  00F66A  6E10               	movwf	drawCircle@r,c
  6959  00F66C  0EFF               	movlw	255
  6960  00F66E  6E13               	movwf	drawCircle@color+1,c
  6961  00F670  0EE0               	movlw	224
  6962  00F672  6E12               	movwf	drawCircle@color,c
  6963  00F674  ECE8  F077         	call	_drawCircle	;wreg free
  6964                           
  6965                           ;Lab7-8.c: 585: drawCircle(80, Circle_Y, 7, 0x07E0);
  6966  00F678  0E00               	movlw	0
  6967  00F67A  6E0D               	movwf	drawCircle@x0+1,c
  6968  00F67C  0E50               	movlw	80
  6969  00F67E  6E0C               	movwf	drawCircle@x0,c
  6970  00F680  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6971  00F684  6A0F               	clrf	drawCircle@y0+1,c
  6972  00F686  0E00               	movlw	0
  6973  00F688  6E11               	movwf	drawCircle@r+1,c
  6974  00F68A  0E07               	movlw	7
  6975  00F68C  6E10               	movwf	drawCircle@r,c
  6976  00F68E  0E07               	movlw	7
  6977  00F690  6E13               	movwf	drawCircle@color+1,c
  6978  00F692  0EE0               	movlw	224
  6979  00F694  6E12               	movwf	drawCircle@color,c
  6980  00F696  ECE8  F077         	call	_drawCircle	;wreg free
  6981  00F69A  D000               	goto	l471
  6982  00F69C                     l471:
  6983  00F69C  0012               	return		;funcret
  6984  00F69E                     __end_of_update_LCD_color:
  6985                           	opt stack 0
  6986                           tblptru	equ	0xFF8
  6987                           tblptrh	equ	0xFF7
  6988                           tblptrl	equ	0xFF6
  6989                           tablat	equ	0xFF5
  6990                           prodl	equ	0xFF3
  6991                           intcon2	equ	0xFF1
  6992                           postinc0	equ	0xFEE
  6993                           wreg	equ	0xFE8
  6994                           postdec1	equ	0xFE5
  6995                           fsr1l	equ	0xFE1
  6996                           indf2	equ	0xFDF
  6997                           fsr2h	equ	0xFDA
  6998                           fsr2l	equ	0xFD9
  6999                           status	equ	0xFD8
  7000                           
  7001 ;; *************** function _fillCircle *****************
  7002 ;; Defined at:
  7003 ;;		line 647 in file "ST7735_TFT.c"
  7004 ;; Parameters:    Size  Location     Type
  7005 ;;  x0              2   42[COMRAM] int 
  7006 ;;  y0              2   44[COMRAM] int 
  7007 ;;  r               2   46[COMRAM] int 
  7008 ;;  color           2   48[COMRAM] unsigned int 
  7009 ;; Auto vars:     Size  Location     Type
  7010 ;;		None
  7011 ;; Return value:  Size  Location     Type
  7012 ;;		None               void
  7013 ;; Registers used:
  7014 ;;		wreg, status,2, status,0, cstack
  7015 ;; Tracked objects:
  7016 ;;		On entry : 0/0
  7017 ;;		On exit  : 0/0
  7018 ;;		Unchanged: 0/0
  7019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7020 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7021 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7022 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7023 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7024 ;;Total ram usage:        8 bytes
  7025 ;; Hardware stack levels used:    1
  7026 ;; Hardware stack levels required when called:    5
  7027 ;; This function calls:
  7028 ;;		_drawFastVLine
  7029 ;;		_fillCircleHelper
  7030 ;; This function is called by:
  7031 ;;		_Initialize_Screen
  7032 ;;		_update_LCD_color
  7033 ;; This function uses a non-reentrant model
  7034 ;;
  7035                           
  7036                           	psect	text33
  7037  00DEC8                     __ptext33:
  7038                           	opt stack 0
  7039  00DEC8                     _fillCircle:
  7040                           	opt stack 22
  7041                           
  7042                           ;ST7735_TFT.c: 649: drawFastVLine(x0, y0 - r, 2 * r + 1, color);
  7043                           
  7044                           ;incstack = 0
  7045  00DEC8  502F               	movf	fillCircle@r,w,c
  7046  00DECA  0800               	sublw	0
  7047  00DECC  242D               	addwf	fillCircle@y0,w,c
  7048  00DECE  6E08               	movwf	drawFastVLine@y,c
  7049  00DED0  80D8               	bsf	status,0,c
  7050  00DED2  342F               	rlcf	fillCircle@r,w,c
  7051  00DED4  6E09               	movwf	drawFastVLine@h,c
  7052  00DED6  C031  F00A         	movff	fillCircle@color,drawFastVLine@color
  7053  00DEDA  C032  F00B         	movff	fillCircle@color+1,drawFastVLine@color+1
  7054  00DEDE  502B               	movf	fillCircle@x0,w,c
  7055  00DEE0  ECA3  F070         	call	_drawFastVLine
  7056                           
  7057                           ;ST7735_TFT.c: 650: fillCircleHelper(x0, y0, r, 3, 0, color);
  7058  00DEE4  C02B  F013         	movff	fillCircle@x0,fillCircleHelper@x0
  7059  00DEE8  C02C  F014         	movff	fillCircle@x0+1,fillCircleHelper@x0+1
  7060  00DEEC  C02D  F015         	movff	fillCircle@y0,fillCircleHelper@y0
  7061  00DEF0  C02E  F016         	movff	fillCircle@y0+1,fillCircleHelper@y0+1
  7062  00DEF4  C02F  F017         	movff	fillCircle@r,fillCircleHelper@r
  7063  00DEF8  C030  F018         	movff	fillCircle@r+1,fillCircleHelper@r+1
  7064  00DEFC  0E00               	movlw	0
  7065  00DEFE  6E1A               	movwf	fillCircleHelper@cornername+1,c
  7066  00DF00  0E03               	movlw	3
  7067  00DF02  6E19               	movwf	fillCircleHelper@cornername,c
  7068  00DF04  0E00               	movlw	0
  7069  00DF06  6E1C               	movwf	fillCircleHelper@delta+1,c
  7070  00DF08  0E00               	movlw	0
  7071  00DF0A  6E1B               	movwf	fillCircleHelper@delta,c
  7072  00DF0C  C031  F01D         	movff	fillCircle@color,fillCircleHelper@color
  7073  00DF10  C032  F01E         	movff	fillCircle@color+1,fillCircleHelper@color+1
  7074  00DF14  ECE2  F075         	call	_fillCircleHelper	;wreg free
  7075  00DF18  0012               	return		;funcret
  7076  00DF1A                     __end_of_fillCircle:
  7077                           	opt stack 0
  7078                           tblptru	equ	0xFF8
  7079                           tblptrh	equ	0xFF7
  7080                           tblptrl	equ	0xFF6
  7081                           tablat	equ	0xFF5
  7082                           prodl	equ	0xFF3
  7083                           intcon2	equ	0xFF1
  7084                           postinc0	equ	0xFEE
  7085                           wreg	equ	0xFE8
  7086                           postdec1	equ	0xFE5
  7087                           fsr1l	equ	0xFE1
  7088                           indf2	equ	0xFDF
  7089                           fsr2h	equ	0xFDA
  7090                           fsr2l	equ	0xFD9
  7091                           status	equ	0xFD8
  7092                           
  7093 ;; *************** function _fillCircleHelper *****************
  7094 ;; Defined at:
  7095 ;;		line 622 in file "ST7735_TFT.c"
  7096 ;; Parameters:    Size  Location     Type
  7097 ;;  x0              2   18[COMRAM] int 
  7098 ;;  y0              2   20[COMRAM] int 
  7099 ;;  r               2   22[COMRAM] int 
  7100 ;;  cornername      2   24[COMRAM] unsigned int 
  7101 ;;  delta           2   26[COMRAM] int 
  7102 ;;  color           2   28[COMRAM] unsigned int 
  7103 ;; Auto vars:     Size  Location     Type
  7104 ;;  y               2   40[COMRAM] int 
  7105 ;;  x               2   38[COMRAM] int 
  7106 ;;  f               2   36[COMRAM] int 
  7107 ;;  ddF_y           2   34[COMRAM] int 
  7108 ;;  ddF_x           2   32[COMRAM] int 
  7109 ;; Return value:  Size  Location     Type
  7110 ;;		None               void
  7111 ;; Registers used:
  7112 ;;		wreg, status,2, status,0, cstack
  7113 ;; Tracked objects:
  7114 ;;		On entry : 0/0
  7115 ;;		On exit  : 0/0
  7116 ;;		Unchanged: 0/0
  7117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7118 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7119 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7120 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7121 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7122 ;;Total ram usage:       24 bytes
  7123 ;; Hardware stack levels used:    1
  7124 ;; Hardware stack levels required when called:    4
  7125 ;; This function calls:
  7126 ;;		_drawFastVLine
  7127 ;; This function is called by:
  7128 ;;		_fillCircle
  7129 ;; This function uses a non-reentrant model
  7130 ;;
  7131                           
  7132                           	psect	text34
  7133  00EBC4                     __ptext34:
  7134                           	opt stack 0
  7135  00EBC4                     _fillCircleHelper:
  7136                           	opt stack 22
  7137                           
  7138                           ;ST7735_TFT.c: 624: signed int f, ddF_x, ddF_y, x, y;
  7139                           ;ST7735_TFT.c: 625: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  7140                           
  7141                           ;incstack = 0
  7142  00EBC4  C017  F01F         	movff	fillCircleHelper@r,??_fillCircleHelper
  7143  00EBC8  C018  F020         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  7144  00EBCC  1E1F               	comf	??_fillCircleHelper,f,c
  7145  00EBCE  1E20               	comf	??_fillCircleHelper+1,f,c
  7146  00EBD0  4A1F               	infsnz	??_fillCircleHelper,f,c
  7147  00EBD2  2A20               	incf	??_fillCircleHelper+1,f,c
  7148  00EBD4  0E01               	movlw	1
  7149  00EBD6  241F               	addwf	??_fillCircleHelper,w,c
  7150  00EBD8  6E25               	movwf	fillCircleHelper@f,c
  7151  00EBDA  0E00               	movlw	0
  7152  00EBDC  2020               	addwfc	??_fillCircleHelper+1,w,c
  7153  00EBDE  6E26               	movwf	fillCircleHelper@f+1,c
  7154  00EBE0  0E00               	movlw	0
  7155  00EBE2  6E22               	movwf	fillCircleHelper@ddF_x+1,c
  7156  00EBE4  0E01               	movlw	1
  7157  00EBE6  6E21               	movwf	fillCircleHelper@ddF_x,c
  7158  00EBE8  C017  F01F         	movff	fillCircleHelper@r,??_fillCircleHelper
  7159  00EBEC  C018  F020         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  7160  00EBF0  90D8               	bcf	status,0,c
  7161  00EBF2  361F               	rlcf	??_fillCircleHelper,f,c
  7162  00EBF4  3620               	rlcf	??_fillCircleHelper+1,f,c
  7163  00EBF6  1E1F               	comf	??_fillCircleHelper,f,c
  7164  00EBF8  1E20               	comf	??_fillCircleHelper+1,f,c
  7165  00EBFA  4A1F               	infsnz	??_fillCircleHelper,f,c
  7166  00EBFC  2A20               	incf	??_fillCircleHelper+1,f,c
  7167  00EBFE  C01F  F023         	movff	??_fillCircleHelper,fillCircleHelper@ddF_y
  7168  00EC02  C020  F024         	movff	??_fillCircleHelper+1,fillCircleHelper@ddF_y+1
  7169  00EC06  0E00               	movlw	0
  7170  00EC08  6E28               	movwf	fillCircleHelper@x+1,c
  7171  00EC0A  0E00               	movlw	0
  7172  00EC0C  6E27               	movwf	fillCircleHelper@x,c
  7173  00EC0E  C017  F029         	movff	fillCircleHelper@r,fillCircleHelper@y
  7174  00EC12  C018  F02A         	movff	fillCircleHelper@r+1,fillCircleHelper@y+1
  7175                           
  7176                           ;ST7735_TFT.c: 626: while (x<y) {
  7177  00EC16  D067               	goto	l2787
  7178  00EC18                     l2767:
  7179                           
  7180                           ;ST7735_TFT.c: 627: if (f >= 0) {
  7181  00EC18  BE26               	btfsc	fillCircleHelper@f+1,7,c
  7182  00EC1A  D00B               	goto	l255
  7183                           
  7184                           ;ST7735_TFT.c: 628: y--;
  7185  00EC1C  0629               	decf	fillCircleHelper@y,f,c
  7186  00EC1E  A0D8               	btfss	status,0,c
  7187  00EC20  062A               	decf	fillCircleHelper@y+1,f,c
  7188                           
  7189                           ;ST7735_TFT.c: 629: ddF_y += 2;
  7190  00EC22  0E02               	movlw	2
  7191  00EC24  2623               	addwf	fillCircleHelper@ddF_y,f,c
  7192  00EC26  0E00               	movlw	0
  7193  00EC28  2224               	addwfc	fillCircleHelper@ddF_y+1,f,c
  7194                           
  7195                           ;ST7735_TFT.c: 630: f += ddF_y;
  7196  00EC2A  5023               	movf	fillCircleHelper@ddF_y,w,c
  7197  00EC2C  2625               	addwf	fillCircleHelper@f,f,c
  7198  00EC2E  5024               	movf	fillCircleHelper@ddF_y+1,w,c
  7199  00EC30  2226               	addwfc	fillCircleHelper@f+1,f,c
  7200  00EC32                     l255:
  7201                           
  7202                           ;ST7735_TFT.c: 631: }
  7203                           ;ST7735_TFT.c: 632: x++;
  7204  00EC32  4A27               	infsnz	fillCircleHelper@x,f,c
  7205  00EC34  2A28               	incf	fillCircleHelper@x+1,f,c
  7206                           
  7207                           ;ST7735_TFT.c: 633: ddF_x += 2;
  7208  00EC36  0E02               	movlw	2
  7209  00EC38  2621               	addwf	fillCircleHelper@ddF_x,f,c
  7210  00EC3A  0E00               	movlw	0
  7211  00EC3C  2222               	addwfc	fillCircleHelper@ddF_x+1,f,c
  7212                           
  7213                           ;ST7735_TFT.c: 634: f += ddF_x;
  7214  00EC3E  5021               	movf	fillCircleHelper@ddF_x,w,c
  7215  00EC40  2625               	addwf	fillCircleHelper@f,f,c
  7216  00EC42  5022               	movf	fillCircleHelper@ddF_x+1,w,c
  7217  00EC44  2226               	addwfc	fillCircleHelper@f+1,f,c
  7218                           
  7219                           ;ST7735_TFT.c: 636: if (cornername & 0x1) {
  7220  00EC46  A019               	btfss	fillCircleHelper@cornername,0,c
  7221  00EC48  D025               	goto	l2783
  7222                           
  7223                           ;ST7735_TFT.c: 637: drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
  7224  00EC4A  5029               	movf	fillCircleHelper@y,w,c
  7225  00EC4C  0800               	sublw	0
  7226  00EC4E  2415               	addwf	fillCircleHelper@y0,w,c
  7227  00EC50  6E08               	movwf	drawFastVLine@y,c
  7228  00EC52  5029               	movf	fillCircleHelper@y,w,c
  7229  00EC54  2429               	addwf	fillCircleHelper@y,w,c
  7230  00EC56  241B               	addwf	fillCircleHelper@delta,w,c
  7231  00EC58  6E1F               	movwf	??_fillCircleHelper& (0+255),c
  7232  00EC5A  281F               	incf	??_fillCircleHelper,w,c
  7233  00EC5C  6E09               	movwf	drawFastVLine@h,c
  7234  00EC5E  C01D  F00A         	movff	fillCircleHelper@color,drawFastVLine@color
  7235  00EC62  C01E  F00B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  7236  00EC66  5013               	movf	fillCircleHelper@x0,w,c
  7237  00EC68  2427               	addwf	fillCircleHelper@x,w,c
  7238  00EC6A  ECA3  F070         	call	_drawFastVLine
  7239                           
  7240                           ;ST7735_TFT.c: 638: drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
  7241  00EC6E  5027               	movf	fillCircleHelper@x,w,c
  7242  00EC70  0800               	sublw	0
  7243  00EC72  2415               	addwf	fillCircleHelper@y0,w,c
  7244  00EC74  6E08               	movwf	drawFastVLine@y,c
  7245  00EC76  5027               	movf	fillCircleHelper@x,w,c
  7246  00EC78  2427               	addwf	fillCircleHelper@x,w,c
  7247  00EC7A  241B               	addwf	fillCircleHelper@delta,w,c
  7248  00EC7C  6E1F               	movwf	??_fillCircleHelper& (0+255),c
  7249  00EC7E  281F               	incf	??_fillCircleHelper,w,c
  7250  00EC80  6E09               	movwf	drawFastVLine@h,c
  7251  00EC82  C01D  F00A         	movff	fillCircleHelper@color,drawFastVLine@color
  7252  00EC86  C01E  F00B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  7253  00EC8A  5013               	movf	fillCircleHelper@x0,w,c
  7254  00EC8C  2429               	addwf	fillCircleHelper@y,w,c
  7255  00EC8E  ECA3  F070         	call	_drawFastVLine
  7256  00EC92  D000               	goto	l2783
  7257  00EC94                     l2783:
  7258                           
  7259                           ;ST7735_TFT.c: 639: }
  7260                           ;ST7735_TFT.c: 640: if (cornername & 0x2) {
  7261  00EC94  A219               	btfss	fillCircleHelper@cornername,1,c
  7262  00EC96  D027               	goto	l2787
  7263                           
  7264                           ;ST7735_TFT.c: 641: drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
  7265  00EC98  5029               	movf	fillCircleHelper@y,w,c
  7266  00EC9A  0800               	sublw	0
  7267  00EC9C  2415               	addwf	fillCircleHelper@y0,w,c
  7268  00EC9E  6E08               	movwf	drawFastVLine@y,c
  7269  00ECA0  5029               	movf	fillCircleHelper@y,w,c
  7270  00ECA2  2429               	addwf	fillCircleHelper@y,w,c
  7271  00ECA4  241B               	addwf	fillCircleHelper@delta,w,c
  7272  00ECA6  6E1F               	movwf	??_fillCircleHelper& (0+255),c
  7273  00ECA8  281F               	incf	??_fillCircleHelper,w,c
  7274  00ECAA  6E09               	movwf	drawFastVLine@h,c
  7275  00ECAC  C01D  F00A         	movff	fillCircleHelper@color,drawFastVLine@color
  7276  00ECB0  C01E  F00B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  7277  00ECB4  5027               	movf	fillCircleHelper@x,w,c
  7278  00ECB6  0800               	sublw	0
  7279  00ECB8  2413               	addwf	fillCircleHelper@x0,w,c
  7280  00ECBA  ECA3  F070         	call	_drawFastVLine
  7281                           
  7282                           ;ST7735_TFT.c: 642: drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
  7283  00ECBE  5027               	movf	fillCircleHelper@x,w,c
  7284  00ECC0  0800               	sublw	0
  7285  00ECC2  2415               	addwf	fillCircleHelper@y0,w,c
  7286  00ECC4  6E08               	movwf	drawFastVLine@y,c
  7287  00ECC6  5027               	movf	fillCircleHelper@x,w,c
  7288  00ECC8  2427               	addwf	fillCircleHelper@x,w,c
  7289  00ECCA  241B               	addwf	fillCircleHelper@delta,w,c
  7290  00ECCC  6E1F               	movwf	??_fillCircleHelper& (0+255),c
  7291  00ECCE  281F               	incf	??_fillCircleHelper,w,c
  7292  00ECD0  6E09               	movwf	drawFastVLine@h,c
  7293  00ECD2  C01D  F00A         	movff	fillCircleHelper@color,drawFastVLine@color
  7294  00ECD6  C01E  F00B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  7295  00ECDA  5029               	movf	fillCircleHelper@y,w,c
  7296  00ECDC  0800               	sublw	0
  7297  00ECDE  2413               	addwf	fillCircleHelper@x0,w,c
  7298  00ECE0  ECA3  F070         	call	_drawFastVLine
  7299  00ECE4  D000               	goto	l2787
  7300  00ECE6                     l2787:
  7301  00ECE6  5029               	movf	fillCircleHelper@y,w,c
  7302  00ECE8  5C27               	subwf	fillCircleHelper@x,w,c
  7303  00ECEA  5028               	movf	fillCircleHelper@x+1,w,c
  7304  00ECEC  0A80               	xorlw	128
  7305  00ECEE  6E1F               	movwf	??_fillCircleHelper& (0+255),c
  7306  00ECF0  502A               	movf	fillCircleHelper@y+1,w,c
  7307  00ECF2  0A80               	xorlw	128
  7308  00ECF4  581F               	subwfb	??_fillCircleHelper& (0+255),w,c
  7309  00ECF6  A0D8               	btfss	status,0,c
  7310  00ECF8  D78F               	goto	l2767
  7311  00ECFA  0012               	return		;funcret
  7312  00ECFC                     __end_of_fillCircleHelper:
  7313                           	opt stack 0
  7314                           tblptru	equ	0xFF8
  7315                           tblptrh	equ	0xFF7
  7316                           tblptrl	equ	0xFF6
  7317                           tablat	equ	0xFF5
  7318                           prodl	equ	0xFF3
  7319                           intcon2	equ	0xFF1
  7320                           postinc0	equ	0xFEE
  7321                           wreg	equ	0xFE8
  7322                           postdec1	equ	0xFE5
  7323                           fsr1l	equ	0xFE1
  7324                           indf2	equ	0xFDF
  7325                           fsr2h	equ	0xFDA
  7326                           fsr2l	equ	0xFD9
  7327                           status	equ	0xFD8
  7328                           
  7329 ;; *************** function _drawCircle *****************
  7330 ;; Defined at:
  7331 ;;		line 561 in file "ST7735_TFT.c"
  7332 ;; Parameters:    Size  Location     Type
  7333 ;;  x0              2   11[COMRAM] int 
  7334 ;;  y0              2   13[COMRAM] int 
  7335 ;;  r               2   15[COMRAM] int 
  7336 ;;  color           2   17[COMRAM] unsigned int 
  7337 ;; Auto vars:     Size  Location     Type
  7338 ;;  y               2   29[COMRAM] int 
  7339 ;;  x               2   27[COMRAM] int 
  7340 ;;  f               2   25[COMRAM] int 
  7341 ;;  ddF_y           2   23[COMRAM] int 
  7342 ;;  ddF_x           2   21[COMRAM] int 
  7343 ;; Return value:  Size  Location     Type
  7344 ;;		None               void
  7345 ;; Registers used:
  7346 ;;		wreg, status,2, status,0, cstack
  7347 ;; Tracked objects:
  7348 ;;		On entry : 0/0
  7349 ;;		On exit  : 0/0
  7350 ;;		Unchanged: 0/0
  7351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7352 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7353 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7354 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7355 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7356 ;;Total ram usage:       20 bytes
  7357 ;; Hardware stack levels used:    1
  7358 ;; Hardware stack levels required when called:    4
  7359 ;; This function calls:
  7360 ;;		_drawPixel
  7361 ;; This function is called by:
  7362 ;;		_Initialize_Screen
  7363 ;;		_update_LCD_color
  7364 ;; This function uses a non-reentrant model
  7365 ;;
  7366                           
  7367                           	psect	text35
  7368  00EFD0                     __ptext35:
  7369                           	opt stack 0
  7370  00EFD0                     _drawCircle:
  7371                           	opt stack 23
  7372                           
  7373                           ;ST7735_TFT.c: 563: signed int f, ddF_x, ddF_y, x, y;
  7374                           ;ST7735_TFT.c: 564: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  7375                           
  7376                           ;incstack = 0
  7377  00EFD0  C010  F014         	movff	drawCircle@r,??_drawCircle
  7378  00EFD4  C011  F015         	movff	drawCircle@r+1,??_drawCircle+1
  7379  00EFD8  1E14               	comf	??_drawCircle,f,c
  7380  00EFDA  1E15               	comf	??_drawCircle+1,f,c
  7381  00EFDC  4A14               	infsnz	??_drawCircle,f,c
  7382  00EFDE  2A15               	incf	??_drawCircle+1,f,c
  7383  00EFE0  0E01               	movlw	1
  7384  00EFE2  2414               	addwf	??_drawCircle,w,c
  7385  00EFE4  6E1A               	movwf	drawCircle@f,c
  7386  00EFE6  0E00               	movlw	0
  7387  00EFE8  2015               	addwfc	??_drawCircle+1,w,c
  7388  00EFEA  6E1B               	movwf	drawCircle@f+1,c
  7389  00EFEC  0E00               	movlw	0
  7390  00EFEE  6E17               	movwf	drawCircle@ddF_x+1,c
  7391  00EFF0  0E01               	movlw	1
  7392  00EFF2  6E16               	movwf	drawCircle@ddF_x,c
  7393  00EFF4  C010  F014         	movff	drawCircle@r,??_drawCircle
  7394  00EFF8  C011  F015         	movff	drawCircle@r+1,??_drawCircle+1
  7395  00EFFC  90D8               	bcf	status,0,c
  7396  00EFFE  3614               	rlcf	??_drawCircle,f,c
  7397  00F000  3615               	rlcf	??_drawCircle+1,f,c
  7398  00F002  1E14               	comf	??_drawCircle,f,c
  7399  00F004  1E15               	comf	??_drawCircle+1,f,c
  7400  00F006  4A14               	infsnz	??_drawCircle,f,c
  7401  00F008  2A15               	incf	??_drawCircle+1,f,c
  7402  00F00A  C014  F018         	movff	??_drawCircle,drawCircle@ddF_y
  7403  00F00E  C015  F019         	movff	??_drawCircle+1,drawCircle@ddF_y+1
  7404  00F012  0E00               	movlw	0
  7405  00F014  6E1D               	movwf	drawCircle@x+1,c
  7406  00F016  0E00               	movlw	0
  7407  00F018  6E1C               	movwf	drawCircle@x,c
  7408  00F01A  C010  F01E         	movff	drawCircle@r,drawCircle@y
  7409  00F01E  C011  F01F         	movff	drawCircle@r+1,drawCircle@y+1
  7410                           
  7411                           ;ST7735_TFT.c: 565: drawPixel(x0 , y0 + r, color);
  7412  00F022  500E               	movf	drawCircle@y0,w,c
  7413  00F024  2410               	addwf	drawCircle@r,w,c
  7414  00F026  6E08               	movwf	drawPixel@y,c
  7415  00F028  C012  F009         	movff	drawCircle@color,drawPixel@color
  7416  00F02C  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  7417  00F030  500C               	movf	drawCircle@x0,w,c
  7418  00F032  ECC9  F06D         	call	_drawPixel
  7419                           
  7420                           ;ST7735_TFT.c: 566: drawPixel(x0 , y0 - r, color);
  7421  00F036  5010               	movf	drawCircle@r,w,c
  7422  00F038  0800               	sublw	0
  7423  00F03A  240E               	addwf	drawCircle@y0,w,c
  7424  00F03C  6E08               	movwf	drawPixel@y,c
  7425  00F03E  C012  F009         	movff	drawCircle@color,drawPixel@color
  7426  00F042  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  7427  00F046  500C               	movf	drawCircle@x0,w,c
  7428  00F048  ECC9  F06D         	call	_drawPixel
  7429                           
  7430                           ;ST7735_TFT.c: 567: drawPixel(x0+r, y0 , color);
  7431  00F04C  C00E  F008         	movff	drawCircle@y0,drawPixel@y
  7432  00F050  C012  F009         	movff	drawCircle@color,drawPixel@color
  7433  00F054  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  7434  00F058  500C               	movf	drawCircle@x0,w,c
  7435  00F05A  2410               	addwf	drawCircle@r,w,c
  7436  00F05C  ECC9  F06D         	call	_drawPixel
  7437                           
  7438                           ;ST7735_TFT.c: 568: drawPixel(x0-r, y0 , color);
  7439  00F060  C00E  F008         	movff	drawCircle@y0,drawPixel@y
  7440  00F064  C012  F009         	movff	drawCircle@color,drawPixel@color
  7441  00F068  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  7442  00F06C  5010               	movf	drawCircle@r,w,c
  7443  00F06E  0800               	sublw	0
  7444  00F070  240C               	addwf	drawCircle@x0,w,c
  7445  00F072  ECC9  F06D         	call	_drawPixel
  7446                           
  7447                           ;ST7735_TFT.c: 569: while (x < y) {
  7448  00F076  D078               	goto	l2933
  7449  00F078                     l2905:
  7450                           
  7451                           ;ST7735_TFT.c: 570: if (f >= 0) {
  7452  00F078  BE1B               	btfsc	drawCircle@f+1,7,c
  7453  00F07A  D00B               	goto	l237
  7454                           
  7455                           ;ST7735_TFT.c: 571: y--;
  7456  00F07C  061E               	decf	drawCircle@y,f,c
  7457  00F07E  A0D8               	btfss	status,0,c
  7458  00F080  061F               	decf	drawCircle@y+1,f,c
  7459                           
  7460                           ;ST7735_TFT.c: 572: ddF_y += 2;
  7461  00F082  0E02               	movlw	2
  7462  00F084  2618               	addwf	drawCircle@ddF_y,f,c
  7463  00F086  0E00               	movlw	0
  7464  00F088  2219               	addwfc	drawCircle@ddF_y+1,f,c
  7465                           
  7466                           ;ST7735_TFT.c: 573: f += ddF_y;
  7467  00F08A  5018               	movf	drawCircle@ddF_y,w,c
  7468  00F08C  261A               	addwf	drawCircle@f,f,c
  7469  00F08E  5019               	movf	drawCircle@ddF_y+1,w,c
  7470  00F090  221B               	addwfc	drawCircle@f+1,f,c
  7471  00F092                     l237:
  7472                           
  7473                           ;ST7735_TFT.c: 574: }
  7474                           ;ST7735_TFT.c: 575: x++;
  7475  00F092  4A1C               	infsnz	drawCircle@x,f,c
  7476  00F094  2A1D               	incf	drawCircle@x+1,f,c
  7477                           
  7478                           ;ST7735_TFT.c: 576: ddF_x += 2;
  7479  00F096  0E02               	movlw	2
  7480  00F098  2616               	addwf	drawCircle@ddF_x,f,c
  7481  00F09A  0E00               	movlw	0
  7482  00F09C  2217               	addwfc	drawCircle@ddF_x+1,f,c
  7483                           
  7484                           ;ST7735_TFT.c: 577: f += ddF_x;
  7485  00F09E  5016               	movf	drawCircle@ddF_x,w,c
  7486  00F0A0  261A               	addwf	drawCircle@f,f,c
  7487  00F0A2  5017               	movf	drawCircle@ddF_x+1,w,c
  7488  00F0A4  221B               	addwfc	drawCircle@f+1,f,c
  7489                           
  7490                           ;ST7735_TFT.c: 578: drawPixel(x0 + x, y0 + y, color);
  7491  00F0A6  500E               	movf	drawCircle@y0,w,c
  7492  00F0A8  241E               	addwf	drawCircle@y,w,c
  7493  00F0AA  6E08               	movwf	drawPixel@y,c
  7494  00F0AC  C012  F009         	movff	drawCircle@color,drawPixel@color
  7495  00F0B0  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  7496  00F0B4  500C               	movf	drawCircle@x0,w,c
  7497  00F0B6  241C               	addwf	drawCircle@x,w,c
  7498  00F0B8  ECC9  F06D         	call	_drawPixel
  7499                           
  7500                           ;ST7735_TFT.c: 579: drawPixel(x0 - x, y0 + y, color);
  7501  00F0BC  500E               	movf	drawCircle@y0,w,c
  7502  00F0BE  241E               	addwf	drawCircle@y,w,c
  7503  00F0C0  6E08               	movwf	drawPixel@y,c
  7504  00F0C2  C012  F009         	movff	drawCircle@color,drawPixel@color
  7505  00F0C6  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  7506  00F0CA  501C               	movf	drawCircle@x,w,c
  7507  00F0CC  0800               	sublw	0
  7508  00F0CE  240C               	addwf	drawCircle@x0,w,c
  7509  00F0D0  ECC9  F06D         	call	_drawPixel
  7510                           
  7511                           ;ST7735_TFT.c: 580: drawPixel(x0 + x, y0 - y, color);
  7512  00F0D4  501E               	movf	drawCircle@y,w,c
  7513  00F0D6  0800               	sublw	0
  7514  00F0D8  240E               	addwf	drawCircle@y0,w,c
  7515  00F0DA  6E08               	movwf	drawPixel@y,c
  7516  00F0DC  C012  F009         	movff	drawCircle@color,drawPixel@color
  7517  00F0E0  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  7518  00F0E4  500C               	movf	drawCircle@x0,w,c
  7519  00F0E6  241C               	addwf	drawCircle@x,w,c
  7520  00F0E8  ECC9  F06D         	call	_drawPixel
  7521                           
  7522                           ;ST7735_TFT.c: 581: drawPixel(x0 - x, y0 - y, color);
  7523  00F0EC  501E               	movf	drawCircle@y,w,c
  7524  00F0EE  0800               	sublw	0
  7525  00F0F0  240E               	addwf	drawCircle@y0,w,c
  7526  00F0F2  6E08               	movwf	drawPixel@y,c
  7527  00F0F4  C012  F009         	movff	drawCircle@color,drawPixel@color
  7528  00F0F8  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  7529  00F0FC  501C               	movf	drawCircle@x,w,c
  7530  00F0FE  0800               	sublw	0
  7531  00F100  240C               	addwf	drawCircle@x0,w,c
  7532  00F102  ECC9  F06D         	call	_drawPixel
  7533                           
  7534                           ;ST7735_TFT.c: 582: drawPixel(x0 + y, y0 + x, color);
  7535  00F106  500E               	movf	drawCircle@y0,w,c
  7536  00F108  241C               	addwf	drawCircle@x,w,c
  7537  00F10A  6E08               	movwf	drawPixel@y,c
  7538  00F10C  C012  F009         	movff	drawCircle@color,drawPixel@color
  7539  00F110  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  7540  00F114  500C               	movf	drawCircle@x0,w,c
  7541  00F116  241E               	addwf	drawCircle@y,w,c
  7542  00F118  ECC9  F06D         	call	_drawPixel
  7543                           
  7544                           ;ST7735_TFT.c: 583: drawPixel(x0 - y, y0 + x, color);
  7545  00F11C  500E               	movf	drawCircle@y0,w,c
  7546  00F11E  241C               	addwf	drawCircle@x,w,c
  7547  00F120  6E08               	movwf	drawPixel@y,c
  7548  00F122  C012  F009         	movff	drawCircle@color,drawPixel@color
  7549  00F126  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  7550  00F12A  501E               	movf	drawCircle@y,w,c
  7551  00F12C  0800               	sublw	0
  7552  00F12E  240C               	addwf	drawCircle@x0,w,c
  7553  00F130  ECC9  F06D         	call	_drawPixel
  7554                           
  7555                           ;ST7735_TFT.c: 584: drawPixel(x0 + y, y0 - x, color);
  7556  00F134  501C               	movf	drawCircle@x,w,c
  7557  00F136  0800               	sublw	0
  7558  00F138  240E               	addwf	drawCircle@y0,w,c
  7559  00F13A  6E08               	movwf	drawPixel@y,c
  7560  00F13C  C012  F009         	movff	drawCircle@color,drawPixel@color
  7561  00F140  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  7562  00F144  500C               	movf	drawCircle@x0,w,c
  7563  00F146  241E               	addwf	drawCircle@y,w,c
  7564  00F148  ECC9  F06D         	call	_drawPixel
  7565                           
  7566                           ;ST7735_TFT.c: 585: drawPixel(x0 - y, y0 - x, color);
  7567  00F14C  501C               	movf	drawCircle@x,w,c
  7568  00F14E  0800               	sublw	0
  7569  00F150  240E               	addwf	drawCircle@y0,w,c
  7570  00F152  6E08               	movwf	drawPixel@y,c
  7571  00F154  C012  F009         	movff	drawCircle@color,drawPixel@color
  7572  00F158  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  7573  00F15C  501E               	movf	drawCircle@y,w,c
  7574  00F15E  0800               	sublw	0
  7575  00F160  240C               	addwf	drawCircle@x0,w,c
  7576  00F162  ECC9  F06D         	call	_drawPixel
  7577  00F166  D000               	goto	l2933
  7578  00F168                     l2933:
  7579  00F168  501E               	movf	drawCircle@y,w,c
  7580  00F16A  5C1C               	subwf	drawCircle@x,w,c
  7581  00F16C  501D               	movf	drawCircle@x+1,w,c
  7582  00F16E  0A80               	xorlw	128
  7583  00F170  6E14               	movwf	??_drawCircle& (0+255),c
  7584  00F172  501F               	movf	drawCircle@y+1,w,c
  7585  00F174  0A80               	xorlw	128
  7586  00F176  5814               	subwfb	??_drawCircle& (0+255),w,c
  7587  00F178  A0D8               	btfss	status,0,c
  7588  00F17A  D77E               	goto	l2905
  7589  00F17C  0012               	return		;funcret
  7590  00F17E                     __end_of_drawCircle:
  7591                           	opt stack 0
  7592                           tblptru	equ	0xFF8
  7593                           tblptrh	equ	0xFF7
  7594                           tblptrl	equ	0xFF6
  7595                           tablat	equ	0xFF5
  7596                           prodl	equ	0xFF3
  7597                           intcon2	equ	0xFF1
  7598                           postinc0	equ	0xFEE
  7599                           wreg	equ	0xFE8
  7600                           postdec1	equ	0xFE5
  7601                           fsr1l	equ	0xFE1
  7602                           indf2	equ	0xFDF
  7603                           fsr2h	equ	0xFDA
  7604                           fsr2l	equ	0xFD9
  7605                           status	equ	0xFD8
  7606                           
  7607 ;; *************** function _PED_Control *****************
  7608 ;; Defined at:
  7609 ;;		line 386 in file "Lab7-8.c"
  7610 ;; Parameters:    Size  Location     Type
  7611 ;;  direction       1    wreg     unsigned char 
  7612 ;;  Num_Sec         1   59[COMRAM] unsigned char 
  7613 ;; Auto vars:     Size  Location     Type
  7614 ;;  direction       1   60[COMRAM] unsigned char 
  7615 ;;  i               1   61[COMRAM] unsigned char 
  7616 ;; Return value:  Size  Location     Type
  7617 ;;		None               void
  7618 ;; Registers used:
  7619 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7620 ;; Tracked objects:
  7621 ;;		On entry : 0/0
  7622 ;;		On exit  : 0/0
  7623 ;;		Unchanged: 0/0
  7624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7625 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7626 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7627 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7628 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7629 ;;Total ram usage:        3 bytes
  7630 ;; Hardware stack levels used:    1
  7631 ;; Hardware stack levels required when called:    8
  7632 ;; This function calls:
  7633 ;;		_Wait_One_Second_With_Beep
  7634 ;;		_update_LCD_PED_Count
  7635 ;; This function is called by:
  7636 ;;		_Day_Mode
  7637 ;; This function uses a non-reentrant model
  7638 ;;
  7639                           
  7640                           	psect	text36
  7641  00DBC2                     __ptext36:
  7642                           	opt stack 0
  7643  00DBC2                     _PED_Control:
  7644                           	opt stack 21
  7645                           
  7646                           ;incstack = 0
  7647                           ;PED_Control@direction stored from wreg
  7648  00DBC2  6E3D               	movwf	PED_Control@direction,c
  7649                           
  7650                           ;Lab7-8.c: 388: for(char i = Num_Sec-1;i>0; i--)
  7651  00DBC4  043C               	decf	PED_Control@Num_Sec,w,c
  7652  00DBC6  6E3E               	movwf	PED_Control@i,c
  7653  00DBC8                     l3405:
  7654  00DBC8  503E               	movf	PED_Control@i,w,c
  7655  00DBCA  B4D8               	btfsc	status,2,c
  7656  00DBCC  D00B               	goto	l3417
  7657  00DBCE  D001               	goto	l3409
  7658  00DBD0  D009               	goto	l3417
  7659  00DBD2                     l3409:
  7660                           
  7661                           ;Lab7-8.c: 389: {
  7662                           ;Lab7-8.c: 390: update_LCD_PED_Count(direction, i);
  7663  00DBD2  C03E  F03A         	movff	PED_Control@i,update_LCD_PED_Count@count
  7664  00DBD6  503D               	movf	PED_Control@direction,w,c
  7665  00DBD8  EC6B  F072         	call	_update_LCD_PED_Count
  7666                           
  7667                           ;Lab7-8.c: 391: Wait_One_Second_With_Beep();
  7668  00DBDC  EC33  F06D         	call	_Wait_One_Second_With_Beep	;wreg free
  7669  00DBE0  063E               	decf	PED_Control@i,f,c
  7670  00DBE2  D7F2               	goto	l3405
  7671  00DBE4                     l3417:
  7672                           
  7673                           ;Lab7-8.c: 392: }
  7674                           ;Lab7-8.c: 394: update_LCD_PED_Count(direction, 0);
  7675  00DBE4  0E00               	movlw	0
  7676  00DBE6  6E3A               	movwf	update_LCD_PED_Count@count,c
  7677  00DBE8  503D               	movf	PED_Control@direction,w,c
  7678  00DBEA  EC6B  F072         	call	_update_LCD_PED_Count
  7679                           
  7680                           ;Lab7-8.c: 395: Wait_One_Second_With_Beep();
  7681  00DBEE  EC33  F06D         	call	_Wait_One_Second_With_Beep	;wreg free
  7682  00DBF2  0012               	return		;funcret
  7683  00DBF4                     __end_of_PED_Control:
  7684                           	opt stack 0
  7685                           tblptru	equ	0xFF8
  7686                           tblptrh	equ	0xFF7
  7687                           tblptrl	equ	0xFF6
  7688                           tablat	equ	0xFF5
  7689                           prodl	equ	0xFF3
  7690                           intcon2	equ	0xFF1
  7691                           postinc0	equ	0xFEE
  7692                           wreg	equ	0xFE8
  7693                           postdec1	equ	0xFE5
  7694                           fsr1l	equ	0xFE1
  7695                           indf2	equ	0xFDF
  7696                           fsr2h	equ	0xFDA
  7697                           fsr2l	equ	0xFD9
  7698                           status	equ	0xFD8
  7699                           
  7700 ;; *************** function _update_LCD_PED_Count *****************
  7701 ;; Defined at:
  7702 ;;		line 619 in file "Lab7-8.c"
  7703 ;; Parameters:    Size  Location     Type
  7704 ;;  direction       1    wreg     unsigned char 
  7705 ;;  count           1   57[COMRAM] unsigned char 
  7706 ;; Auto vars:     Size  Location     Type
  7707 ;;  direction       1   58[COMRAM] unsigned char 
  7708 ;; Return value:  Size  Location     Type
  7709 ;;		None               void
  7710 ;; Registers used:
  7711 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7712 ;; Tracked objects:
  7713 ;;		On entry : 0/0
  7714 ;;		On exit  : 0/0
  7715 ;;		Unchanged: 0/0
  7716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7717 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7718 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7719 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7720 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7721 ;;Total ram usage:        2 bytes
  7722 ;; Hardware stack levels used:    1
  7723 ;; Hardware stack levels required when called:    7
  7724 ;; This function calls:
  7725 ;;		___awdiv
  7726 ;;		___awmod
  7727 ;;		_drawtext
  7728 ;; This function is called by:
  7729 ;;		_PED_Control
  7730 ;; This function uses a non-reentrant model
  7731 ;;
  7732                           
  7733                           	psect	text37
  7734  00E4D6                     __ptext37:
  7735                           	opt stack 0
  7736  00E4D6                     _update_LCD_PED_Count:
  7737                           	opt stack 21
  7738                           
  7739                           ;incstack = 0
  7740                           ;update_LCD_PED_Count@direction stored from wreg
  7741  00E4D6  6E3B               	movwf	update_LCD_PED_Count@direction,c
  7742                           
  7743                           ;Lab7-8.c: 621: switch (direction)
  7744  00E4D8  D057               	goto	l3255
  7745  00E4DA                     l3245:
  7746                           
  7747                           ;Lab7-8.c: 624: PED_EW_Count[0] = count/10 + '0';
  7748  00E4DA  C03A  F001         	movff	update_LCD_PED_Count@count,___awdiv@dividend
  7749  00E4DE  6A02               	clrf	___awdiv@dividend+1,c
  7750  00E4E0  0E00               	movlw	0
  7751  00E4E2  6E04               	movwf	___awdiv@divisor+1,c
  7752  00E4E4  0E0A               	movlw	10
  7753  00E4E6  6E03               	movwf	___awdiv@divisor,c
  7754  00E4E8  EC2B  F071         	call	___awdiv	;wreg free
  7755  00E4EC  5001               	movf	?___awdiv,w,c
  7756  00E4EE  0F30               	addlw	48
  7757  00E4F0  6E4E               	movwf	_PED_EW_Count,c
  7758                           
  7759                           ;Lab7-8.c: 625: PED_EW_Count[1] = count%10 + '0';
  7760  00E4F2  C03A  F001         	movff	update_LCD_PED_Count@count,___awmod@dividend
  7761  00E4F6  6A02               	clrf	___awmod@dividend+1,c
  7762  00E4F8  0E00               	movlw	0
  7763  00E4FA  6E04               	movwf	___awmod@divisor+1,c
  7764  00E4FC  0E0A               	movlw	10
  7765  00E4FE  6E03               	movwf	___awmod@divisor,c
  7766  00E500  EC21  F070         	call	___awmod	;wreg free
  7767  00E504  5001               	movf	?___awmod,w,c
  7768  00E506  0F30               	addlw	48
  7769  00E508  6E4F               	movwf	_PED_EW_Count+1,c
  7770                           
  7771                           ;Lab7-8.c: 626: drawtext(2, 30, PED_EW_Count, 0x07FF, 0x0000, 2);
  7772  00E50A  0E1E               	movlw	30
  7773  00E50C  6E29               	movwf	drawtext@y,c
  7774  00E50E  0E4E               	movlw	low _PED_EW_Count
  7775  00E510  6E2A               	movwf	drawtext@_text,c
  7776  00E512  0E00               	movlw	high _PED_EW_Count
  7777  00E514  6E2B               	movwf	drawtext@_text+1,c
  7778  00E516  0E07               	movlw	7
  7779  00E518  6E2D               	movwf	drawtext@color+1,c
  7780  00E51A  682C               	setf	drawtext@color,c
  7781  00E51C  0E00               	movlw	0
  7782  00E51E  6E2F               	movwf	drawtext@bg+1,c
  7783  00E520  0E00               	movlw	0
  7784  00E522  6E2E               	movwf	drawtext@bg,c
  7785  00E524  0E02               	movlw	2
  7786  00E526  6E30               	movwf	drawtext@size,c
  7787  00E528  0E02               	movlw	2
  7788  00E52A  EC01  F074         	call	_drawtext
  7789                           
  7790                           ;Lab7-8.c: 627: break;
  7791  00E52E  D034               	goto	l487
  7792  00E530                     l3249:
  7793                           
  7794                           ;Lab7-8.c: 629: PED_NS_Count[0] = count/10 + '0';
  7795  00E530  C03A  F001         	movff	update_LCD_PED_Count@count,___awdiv@dividend
  7796  00E534  6A02               	clrf	___awdiv@dividend+1,c
  7797  00E536  0E00               	movlw	0
  7798  00E538  6E04               	movwf	___awdiv@divisor+1,c
  7799  00E53A  0E0A               	movlw	10
  7800  00E53C  6E03               	movwf	___awdiv@divisor,c
  7801  00E53E  EC2B  F071         	call	___awdiv	;wreg free
  7802  00E542  5001               	movf	?___awdiv,w,c
  7803  00E544  0F30               	addlw	48
  7804  00E546  6E51               	movwf	_PED_NS_Count,c
  7805                           
  7806                           ;Lab7-8.c: 630: PED_NS_Count[1] = count%10 + '0';
  7807  00E548  C03A  F001         	movff	update_LCD_PED_Count@count,___awmod@dividend
  7808  00E54C  6A02               	clrf	___awmod@dividend+1,c
  7809  00E54E  0E00               	movlw	0
  7810  00E550  6E04               	movwf	___awmod@divisor+1,c
  7811  00E552  0E0A               	movlw	10
  7812  00E554  6E03               	movwf	___awmod@divisor,c
  7813  00E556  EC21  F070         	call	___awmod	;wreg free
  7814  00E55A  5001               	movf	?___awmod,w,c
  7815  00E55C  0F30               	addlw	48
  7816  00E55E  6E52               	movwf	_PED_NS_Count+1,c
  7817                           
  7818                           ;Lab7-8.c: 631: drawtext(2, 90, PED_NS_Count,0x001F, 0x0000, 2);
  7819  00E560  0E5A               	movlw	90
  7820  00E562  6E29               	movwf	drawtext@y,c
  7821  00E564  0E51               	movlw	low _PED_NS_Count
  7822  00E566  6E2A               	movwf	drawtext@_text,c
  7823  00E568  0E00               	movlw	high _PED_NS_Count
  7824  00E56A  6E2B               	movwf	drawtext@_text+1,c
  7825  00E56C  0E00               	movlw	0
  7826  00E56E  6E2D               	movwf	drawtext@color+1,c
  7827  00E570  0E1F               	movlw	31
  7828  00E572  6E2C               	movwf	drawtext@color,c
  7829  00E574  0E00               	movlw	0
  7830  00E576  6E2F               	movwf	drawtext@bg+1,c
  7831  00E578  0E00               	movlw	0
  7832  00E57A  6E2E               	movwf	drawtext@bg,c
  7833  00E57C  0E02               	movlw	2
  7834  00E57E  6E30               	movwf	drawtext@size,c
  7835  00E580  0E02               	movlw	2
  7836  00E582  EC01  F074         	call	_drawtext
  7837                           
  7838                           ;Lab7-8.c: 635: }
  7839                           
  7840                           ;Lab7-8.c: 632: break;
  7841  00E586  D008               	goto	l487
  7842  00E588                     l3255:
  7843  00E588  503B               	movf	update_LCD_PED_Count@direction,w,c
  7844                           
  7845                           ; Switch size 1, requested type "space"
  7846                           ; Number of cases is 2, Range of values is 0 to 2
  7847                           ; switch strategies available:
  7848                           ; Name         Instructions Cycles
  7849                           ; simple_byte            7     4 (average)
  7850                           ;	Chosen strategy is simple_byte
  7851  00E58A  0A00               	xorlw	0	; case 0
  7852  00E58C  B4D8               	btfsc	status,2,c
  7853  00E58E  D7A5               	goto	l3245
  7854  00E590  0A02               	xorlw	2	; case 2
  7855  00E592  B4D8               	btfsc	status,2,c
  7856  00E594  D7CD               	goto	l3249
  7857  00E596  D000               	goto	l487
  7858  00E598                     l487:
  7859  00E598  0012               	return		;funcret
  7860  00E59A                     __end_of_update_LCD_PED_Count:
  7861                           	opt stack 0
  7862                           tblptru	equ	0xFF8
  7863                           tblptrh	equ	0xFF7
  7864                           tblptrl	equ	0xFF6
  7865                           tablat	equ	0xFF5
  7866                           prodl	equ	0xFF3
  7867                           intcon2	equ	0xFF1
  7868                           postinc0	equ	0xFEE
  7869                           wreg	equ	0xFE8
  7870                           postdec1	equ	0xFE5
  7871                           fsr1l	equ	0xFE1
  7872                           indf2	equ	0xFDF
  7873                           fsr2h	equ	0xFDA
  7874                           fsr2l	equ	0xFD9
  7875                           status	equ	0xFD8
  7876                           
  7877 ;; *************** function _drawtext *****************
  7878 ;; Defined at:
  7879 ;;		line 507 in file "ST7735_TFT.c"
  7880 ;; Parameters:    Size  Location     Type
  7881 ;;  x               1    wreg     unsigned char 
  7882 ;;  y               1   40[COMRAM] unsigned char 
  7883 ;;  _text           2   41[COMRAM] PTR unsigned char 
  7884 ;;		 -> NULL(0), SW_MODE_Txt(2), SW_NSLT_Txt(2), SW_NSPED_Txt(2), 
  7885 ;;		 -> SW_EWLT_Txt(2), SW_EWPED_Txt(2), PED_NS_Count(3), PED_EW_Count(3), 
  7886 ;;		 -> NSLT_Count(3), NS_Count(3), EWLT_Count(3), EW_Count(3), 
  7887 ;;		 -> FlashingS_Txt(2), FlashingR_Txt(2), Act_Mode_Txt(2), buffer(31), 
  7888 ;;  color           2   43[COMRAM] unsigned int 
  7889 ;;  bg              2   45[COMRAM] unsigned int 
  7890 ;;  size            1   47[COMRAM] unsigned char 
  7891 ;; Auto vars:     Size  Location     Type
  7892 ;;  x               1   52[COMRAM] unsigned char 
  7893 ;;  i               2   53[COMRAM] unsigned int 
  7894 ;;  textsize        2   50[COMRAM] unsigned int 
  7895 ;;  cursor_x        1   56[COMRAM] unsigned char 
  7896 ;;  cursor_y        1   55[COMRAM] unsigned char 
  7897 ;; Return value:  Size  Location     Type
  7898 ;;		None               void
  7899 ;; Registers used:
  7900 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7901 ;; Tracked objects:
  7902 ;;		On entry : 0/0
  7903 ;;		On exit  : 0/0
  7904 ;;		Unchanged: 0/0
  7905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7906 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7907 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7908 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7909 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7910 ;;Total ram usage:       17 bytes
  7911 ;; Hardware stack levels used:    1
  7912 ;; Hardware stack levels required when called:    6
  7913 ;; This function calls:
  7914 ;;		_drawChar
  7915 ;;		_strlen
  7916 ;; This function is called by:
  7917 ;;		_Initialize_Screen
  7918 ;;		_Wait_One_Second
  7919 ;;		_update_LCD_count
  7920 ;;		_update_LCD_PED_Count
  7921 ;;		_update_LCD_misc
  7922 ;; This function uses a non-reentrant model
  7923 ;;
  7924                           
  7925                           	psect	text38
  7926  00E802                     __ptext38:
  7927                           	opt stack 0
  7928  00E802                     _drawtext:
  7929                           	opt stack 21
  7930                           
  7931                           ;incstack = 0
  7932                           ;drawtext@x stored from wreg
  7933  00E802  6E35               	movwf	drawtext@x,c
  7934                           
  7935                           ;ST7735_TFT.c: 509: unsigned char cursor_x, cursor_y;
  7936                           ;ST7735_TFT.c: 510: unsigned int textsize, i;
  7937                           ;ST7735_TFT.c: 511: cursor_x = x, cursor_y = y;
  7938  00E804  C035  F039         	movff	drawtext@x,drawtext@cursor_x
  7939  00E808  C029  F038         	movff	drawtext@y,drawtext@cursor_y
  7940                           
  7941                           ;ST7735_TFT.c: 512: textsize = strlen(_text);
  7942  00E80C  C02A  F001         	movff	drawtext@_text,strlen@s
  7943  00E810  C02B  F002         	movff	drawtext@_text+1,strlen@s+1
  7944  00E814  EC31  F06E         	call	_strlen	;wreg free
  7945  00E818  C001  F033         	movff	?_strlen,drawtext@textsize
  7946  00E81C  C002  F034         	movff	?_strlen+1,drawtext@textsize+1
  7947                           
  7948                           ;ST7735_TFT.c: 513: for(i = 0; i < textsize; i++){
  7949  00E820  0E00               	movlw	0
  7950  00E822  6E37               	movwf	drawtext@i+1,c
  7951  00E824  0E00               	movlw	0
  7952  00E826  6E36               	movwf	drawtext@i,c
  7953  00E828  D054               	goto	l2755
  7954  00E82A                     l2729:
  7955                           
  7956                           ;ST7735_TFT.c: 514: if(wrap && ((cursor_x + size * 5) > 128)){
  7957  00E82A  5041               	movf	_wrap,w,c
  7958  00E82C  B4D8               	btfsc	status,2,c
  7959  00E82E  D02C               	goto	l2745
  7960  00E830  5030               	movf	drawtext@size,w,c
  7961  00E832  0D05               	mullw	5
  7962  00E834  5039               	movf	drawtext@cursor_x,w,c
  7963  00E836  6E31               	movwf	??_drawtext& (0+255),c
  7964  00E838  6A32               	clrf	(??_drawtext+1)& (0+255),c
  7965  00E83A  50F3               	movf	prodl,w,c
  7966  00E83C  2631               	addwf	??_drawtext,f,c
  7967  00E83E  50F4               	movf	prodh,w,c
  7968  00E840  2232               	addwfc	??_drawtext+1,f,c
  7969  00E842  BE32               	btfsc	??_drawtext+1,7,c
  7970  00E844  D021               	goto	l2745
  7971  00E846  5032               	movf	??_drawtext+1,w,c
  7972  00E848  E104               	bnz	u1610
  7973  00E84A  0E81               	movlw	129
  7974  00E84C  5C31               	subwf	??_drawtext,w,c
  7975  00E84E  A0D8               	btfss	status,0,c
  7976  00E850  D01B               	goto	l2745
  7977  00E852                     u1610:
  7978                           
  7979                           ;ST7735_TFT.c: 515: cursor_x = 0;
  7980  00E852  0E00               	movlw	0
  7981  00E854  6E39               	movwf	drawtext@cursor_x,c
  7982                           
  7983                           ;ST7735_TFT.c: 516: cursor_y = cursor_y + size * 7 + 3 ;
  7984  00E856  5030               	movf	drawtext@size,w,c
  7985  00E858  0D07               	mullw	7
  7986  00E85A  50F3               	movf	prodl,w,c
  7987  00E85C  2438               	addwf	drawtext@cursor_y,w,c
  7988  00E85E  0F03               	addlw	3
  7989  00E860  6E38               	movwf	drawtext@cursor_y,c
  7990                           
  7991                           ;ST7735_TFT.c: 517: if(cursor_y > 160) cursor_y = 160;
  7992  00E862  0EA0               	movlw	160
  7993  00E864  6438               	cpfsgt	drawtext@cursor_y,c
  7994  00E866  D003               	goto	l2741
  7995  00E868  0EA0               	movlw	160
  7996  00E86A  6E38               	movwf	drawtext@cursor_y,c
  7997  00E86C  D000               	goto	l2741
  7998  00E86E                     l2741:
  7999                           
  8000                           ;ST7735_TFT.c: 518: if(_text[i] == 0x20) goto _skip; }
  8001  00E86E  5036               	movf	drawtext@i,w,c
  8002  00E870  242A               	addwf	drawtext@_text,w,c
  8003  00E872  6ED9               	movwf	fsr2l,c
  8004  00E874  5037               	movf	drawtext@i+1,w,c
  8005  00E876  202B               	addwfc	drawtext@_text+1,w,c
  8006  00E878  6EDA               	movwf	fsr2h,c
  8007  00E87A  0E20               	movlw	32
  8008  00E87C  18DE               	xorwf	postinc2,w,c
  8009  00E87E  B4D8               	btfsc	status,2,c
  8010  00E880  D025               	goto	l2753
  8011  00E882  D002               	goto	l2745
  8012  00E884  D023               	goto	l2753
  8013  00E886  D000               	goto	l2745
  8014  00E888                     l2745:
  8015                           
  8016                           ;ST7735_TFT.c: 519: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
  8017  00E888  C038  F01E         	movff	drawtext@cursor_y,drawChar@y
  8018  00E88C  5036               	movf	drawtext@i,w,c
  8019  00E88E  242A               	addwf	drawtext@_text,w,c
  8020  00E890  6ED9               	movwf	fsr2l,c
  8021  00E892  5037               	movf	drawtext@i+1,w,c
  8022  00E894  202B               	addwfc	drawtext@_text+1,w,c
  8023  00E896  6EDA               	movwf	fsr2h,c
  8024  00E898  50DF               	movf	indf2,w,c
  8025  00E89A  6E1F               	movwf	drawChar@c,c
  8026  00E89C  C02C  F020         	movff	drawtext@color,drawChar@color
  8027  00E8A0  C02D  F021         	movff	drawtext@color+1,drawChar@color+1
  8028  00E8A4  C02E  F022         	movff	drawtext@bg,drawChar@bg
  8029  00E8A8  C02F  F023         	movff	drawtext@bg+1,drawChar@bg+1
  8030  00E8AC  C030  F024         	movff	drawtext@size,drawChar@size
  8031  00E8B0  5039               	movf	drawtext@cursor_x,w,c
  8032  00E8B2  EC7E  F076         	call	_drawChar
  8033                           
  8034                           ;ST7735_TFT.c: 520: cursor_x = cursor_x + size * 6;
  8035  00E8B6  5030               	movf	drawtext@size,w,c
  8036  00E8B8  0D06               	mullw	6
  8037  00E8BA  50F3               	movf	prodl,w,c
  8038  00E8BC  2439               	addwf	drawtext@cursor_x,w,c
  8039  00E8BE  6E39               	movwf	drawtext@cursor_x,c
  8040                           
  8041                           ;ST7735_TFT.c: 521: if(cursor_x > 128) cursor_x = 128;
  8042  00E8C0  0E80               	movlw	128
  8043  00E8C2  6439               	cpfsgt	drawtext@cursor_x,c
  8044  00E8C4  D003               	goto	l2753
  8045  00E8C6  0E80               	movlw	128
  8046  00E8C8  6E39               	movwf	drawtext@cursor_x,c
  8047  00E8CA  D000               	goto	l2753
  8048  00E8CC                     l2753:
  8049  00E8CC  4A36               	infsnz	drawtext@i,f,c
  8050  00E8CE  2A37               	incf	drawtext@i+1,f,c
  8051  00E8D0  D000               	goto	l2755
  8052  00E8D2                     l2755:
  8053  00E8D2  5033               	movf	drawtext@textsize,w,c
  8054  00E8D4  5C36               	subwf	drawtext@i,w,c
  8055  00E8D6  5034               	movf	drawtext@textsize+1,w,c
  8056  00E8D8  5837               	subwfb	drawtext@i+1,w,c
  8057  00E8DA  A0D8               	btfss	status,0,c
  8058  00E8DC  D7A6               	goto	l2729
  8059  00E8DE  0012               	return		;funcret
  8060  00E8E0                     __end_of_drawtext:
  8061                           	opt stack 0
  8062                           tblptru	equ	0xFF8
  8063                           tblptrh	equ	0xFF7
  8064                           tblptrl	equ	0xFF6
  8065                           tablat	equ	0xFF5
  8066                           prodh	equ	0xFF4
  8067                           prodl	equ	0xFF3
  8068                           intcon2	equ	0xFF1
  8069                           postinc0	equ	0xFEE
  8070                           wreg	equ	0xFE8
  8071                           postdec1	equ	0xFE5
  8072                           fsr1l	equ	0xFE1
  8073                           indf2	equ	0xFDF
  8074                           postinc2	equ	0xFDE
  8075                           fsr2h	equ	0xFDA
  8076                           fsr2l	equ	0xFD9
  8077                           status	equ	0xFD8
  8078                           
  8079 ;; *************** function _strlen *****************
  8080 ;; Defined at:
  8081 ;;		line 4 in file "E:\XC8\sources\common\strlen.c"
  8082 ;; Parameters:    Size  Location     Type
  8083 ;;  s               2    0[COMRAM] PTR const unsigned char 
  8084 ;;		 -> NULL(0), SW_MODE_Txt(2), SW_NSLT_Txt(2), SW_NSPED_Txt(2), 
  8085 ;;		 -> SW_EWLT_Txt(2), SW_EWPED_Txt(2), PED_NS_Count(3), PED_EW_Count(3), 
  8086 ;;		 -> NSLT_Count(3), NS_Count(3), EWLT_Count(3), EW_Count(3), 
  8087 ;;		 -> FlashingS_Txt(2), FlashingR_Txt(2), Act_Mode_Txt(2), buffer(31), 
  8088 ;; Auto vars:     Size  Location     Type
  8089 ;;  cp              2    4[COMRAM] PTR const unsigned char 
  8090 ;;		 -> NULL(0), SW_MODE_Txt(2), SW_NSLT_Txt(2), SW_NSPED_Txt(2), 
  8091 ;;		 -> SW_EWLT_Txt(2), SW_EWPED_Txt(2), PED_NS_Count(3), PED_EW_Count(3), 
  8092 ;;		 -> NSLT_Count(3), NS_Count(3), EWLT_Count(3), EW_Count(3), 
  8093 ;;		 -> FlashingS_Txt(2), FlashingR_Txt(2), Act_Mode_Txt(2), buffer(31), 
  8094 ;; Return value:  Size  Location     Type
  8095 ;;                  2    0[COMRAM] unsigned int 
  8096 ;; Registers used:
  8097 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8098 ;; Tracked objects:
  8099 ;;		On entry : 0/0
  8100 ;;		On exit  : 0/0
  8101 ;;		Unchanged: 0/0
  8102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8103 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8104 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8105 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8106 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8107 ;;Total ram usage:        6 bytes
  8108 ;; Hardware stack levels used:    1
  8109 ;; This function calls:
  8110 ;;		Nothing
  8111 ;; This function is called by:
  8112 ;;		_drawtext
  8113 ;; This function uses a non-reentrant model
  8114 ;;
  8115                           
  8116                           	psect	text39
  8117  00DC62                     __ptext39:
  8118                           	opt stack 0
  8119  00DC62                     _strlen:
  8120                           	opt stack 26
  8121                           
  8122                           ;incstack = 0
  8123  00DC62  C001  F005         	movff	strlen@s,strlen@cp
  8124  00DC66  C002  F006         	movff	strlen@s+1,strlen@cp+1
  8125  00DC6A  D003               	goto	l2679
  8126  00DC6C                     l2677:
  8127  00DC6C  4A05               	infsnz	strlen@cp,f,c
  8128  00DC6E  2A06               	incf	strlen@cp+1,f,c
  8129  00DC70  D000               	goto	l2679
  8130  00DC72                     l2679:
  8131  00DC72  C005  FFD9         	movff	strlen@cp,fsr2l
  8132  00DC76  C006  FFDA         	movff	strlen@cp+1,fsr2h
  8133  00DC7A  50DF               	movf	indf2,w,c
  8134  00DC7C  A4D8               	btfss	status,2,c
  8135  00DC7E  D7F6               	goto	l2677
  8136  00DC80  C001  F003         	movff	strlen@s,??_strlen
  8137  00DC84  C002  F004         	movff	strlen@s+1,??_strlen+1
  8138  00DC88  1E03               	comf	??_strlen,f,c
  8139  00DC8A  1E04               	comf	??_strlen+1,f,c
  8140  00DC8C  4A03               	infsnz	??_strlen,f,c
  8141  00DC8E  2A04               	incf	??_strlen+1,f,c
  8142  00DC90  5005               	movf	strlen@cp,w,c
  8143  00DC92  2403               	addwf	??_strlen,w,c
  8144  00DC94  6E01               	movwf	?_strlen,c
  8145  00DC96  5006               	movf	strlen@cp+1,w,c
  8146  00DC98  2004               	addwfc	??_strlen+1,w,c
  8147  00DC9A  6E02               	movwf	?_strlen+1,c
  8148  00DC9C  D000               	goto	l1093
  8149  00DC9E                     l1093:
  8150  00DC9E  0012               	return		;funcret
  8151  00DCA0                     __end_of_strlen:
  8152                           	opt stack 0
  8153                           tblptru	equ	0xFF8
  8154                           tblptrh	equ	0xFF7
  8155                           tblptrl	equ	0xFF6
  8156                           tablat	equ	0xFF5
  8157                           prodh	equ	0xFF4
  8158                           prodl	equ	0xFF3
  8159                           intcon2	equ	0xFF1
  8160                           postinc0	equ	0xFEE
  8161                           wreg	equ	0xFE8
  8162                           postdec1	equ	0xFE5
  8163                           fsr1l	equ	0xFE1
  8164                           indf2	equ	0xFDF
  8165                           postinc2	equ	0xFDE
  8166                           fsr2h	equ	0xFDA
  8167                           fsr2l	equ	0xFD9
  8168                           status	equ	0xFD8
  8169                           
  8170 ;; *************** function _drawChar *****************
  8171 ;; Defined at:
  8172 ;;		line 480 in file "ST7735_TFT.c"
  8173 ;; Parameters:    Size  Location     Type
  8174 ;;  x               1    wreg     unsigned char 
  8175 ;;  y               1   29[COMRAM] unsigned char 
  8176 ;;  c               1   30[COMRAM] unsigned char 
  8177 ;;  color           2   31[COMRAM] unsigned int 
  8178 ;;  bg              2   33[COMRAM] unsigned int 
  8179 ;;  size            1   35[COMRAM] unsigned char 
  8180 ;; Auto vars:     Size  Location     Type
  8181 ;;  x               1   37[COMRAM] unsigned char 
  8182 ;;  line            1   36[COMRAM] unsigned char 
  8183 ;;  i               1   39[COMRAM] unsigned char 
  8184 ;;  j               1   38[COMRAM] unsigned char 
  8185 ;; Return value:  Size  Location     Type
  8186 ;;		None               void
  8187 ;; Registers used:
  8188 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8189 ;; Tracked objects:
  8190 ;;		On entry : 0/0
  8191 ;;		On exit  : 0/0
  8192 ;;		Unchanged: 0/0
  8193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8194 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8195 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8196 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8197 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8198 ;;Total ram usage:       11 bytes
  8199 ;; Hardware stack levels used:    1
  8200 ;; Hardware stack levels required when called:    5
  8201 ;; This function calls:
  8202 ;;		___wmul
  8203 ;;		_drawPixel
  8204 ;;		_fillRect
  8205 ;; This function is called by:
  8206 ;;		_drawtext
  8207 ;; This function uses a non-reentrant model
  8208 ;;
  8209                           
  8210                           	psect	text40
  8211  00ECFC                     __ptext40:
  8212                           	opt stack 0
  8213  00ECFC                     _drawChar:
  8214                           	opt stack 21
  8215                           
  8216                           ;incstack = 0
  8217                           ;drawChar@x stored from wreg
  8218  00ECFC  6E26               	movwf	drawChar@x,c
  8219                           
  8220                           ;ST7735_TFT.c: 482: char i, j;
  8221                           ;ST7735_TFT.c: 483: if((x >= 128) || (y >= 160))
  8222  00ECFE  0E80               	movlw	128
  8223  00ED00  6026               	cpfslt	drawChar@x,c
  8224  00ED02  D0A6               	goto	l189
  8225  00ED04  0E9F               	movlw	159
  8226  00ED06  641E               	cpfsgt	drawChar@y,c
  8227  00ED08  D001               	goto	l2625
  8228                           
  8229                           ;ST7735_TFT.c: 484: return;
  8230  00ED0A  D0A2               	goto	l189
  8231  00ED0C                     l2625:
  8232                           
  8233                           ;ST7735_TFT.c: 485: if(size < 1) size = 1;
  8234  00ED0C  5024               	movf	drawChar@size,w,c
  8235  00ED0E  A4D8               	btfss	status,2,c
  8236  00ED10  D003               	goto	l2629
  8237  00ED12  0E01               	movlw	1
  8238  00ED14  6E24               	movwf	drawChar@size,c
  8239  00ED16  D000               	goto	l2629
  8240  00ED18                     l2629:
  8241                           
  8242                           ;ST7735_TFT.c: 486: if((c < ' ') || (c > '~'))
  8243  00ED18  0E1F               	movlw	31
  8244  00ED1A  641F               	cpfsgt	drawChar@c,c
  8245  00ED1C  D004               	goto	l2633
  8246  00ED1E  0E7E               	movlw	126
  8247  00ED20  641F               	cpfsgt	drawChar@c,c
  8248  00ED22  D003               	goto	l191
  8249  00ED24  D000               	goto	l2633
  8250  00ED26                     l2633:
  8251                           
  8252                           ;ST7735_TFT.c: 487: c = '?';
  8253  00ED26  0E3F               	movlw	63
  8254  00ED28  6E1F               	movwf	drawChar@c,c
  8255  00ED2A                     l191:
  8256                           
  8257                           ;ST7735_TFT.c: 488: for(i=0; i<5; i++ ) {
  8258  00ED2A  0E00               	movlw	0
  8259  00ED2C  6E28               	movwf	drawChar@i,c
  8260  00ED2E                     l2635:
  8261  00ED2E  0E04               	movlw	4
  8262  00ED30  6428               	cpfsgt	drawChar@i,c
  8263  00ED32  D001               	goto	l2639
  8264  00ED34  D08D               	goto	l189
  8265  00ED36                     l2639:
  8266                           
  8267                           ;ST7735_TFT.c: 489: unsigned char line;
  8268                           ;ST7735_TFT.c: 490: if(c < 'S')
  8269  00ED36  0E53               	movlw	83
  8270  00ED38  601F               	cpfslt	drawChar@c,c
  8271  00ED3A  D015               	goto	l2643
  8272                           
  8273                           ;ST7735_TFT.c: 491: line = font[(c - 32)*5 + i];
  8274  00ED3C  0EE0               	movlw	224
  8275  00ED3E  241F               	addwf	drawChar@c,w,c
  8276  00ED40  6E01               	movwf	___wmul@multiplier,c
  8277  00ED42  6A02               	clrf	___wmul@multiplier+1,c
  8278  00ED44  0EFF               	movlw	255
  8279  00ED46  2202               	addwfc	___wmul@multiplier+1,f,c
  8280  00ED48  0E00               	movlw	0
  8281  00ED4A  6E04               	movwf	___wmul@multiplicand+1,c
  8282  00ED4C  0E05               	movlw	5
  8283  00ED4E  6E03               	movwf	___wmul@multiplicand,c
  8284  00ED50  EC89  F06D         	call	___wmul	;wreg free
  8285  00ED54  5028               	movf	drawChar@i,w,c
  8286  00ED56  2601               	addwf	?___wmul,f,c
  8287  00ED58  0E00               	movlw	0
  8288  00ED5A  2202               	addwfc	?___wmul+1,f,c
  8289  00ED5C  0EBD               	movlw	low _font
  8290  00ED5E  2401               	addwf	?___wmul,w,c
  8291  00ED60  6EF6               	movwf	tblptrl,c
  8292  00ED62  0EFD               	movlw	high _font
  8293  00ED64  D014               	goto	L14
  8294  00ED66                     l2643:
  8295                           
  8296                           ;ST7735_TFT.c: 492: else
  8297                           ;ST7735_TFT.c: 493: line = font2[(c - 'S')*5 + i];
  8298  00ED66  0EAD               	movlw	173
  8299  00ED68  241F               	addwf	drawChar@c,w,c
  8300  00ED6A  6E01               	movwf	___wmul@multiplier,c
  8301  00ED6C  6A02               	clrf	___wmul@multiplier+1,c
  8302  00ED6E  0EFF               	movlw	255
  8303  00ED70  2202               	addwfc	___wmul@multiplier+1,f,c
  8304  00ED72  0E00               	movlw	0
  8305  00ED74  6E04               	movwf	___wmul@multiplicand+1,c
  8306  00ED76  0E05               	movlw	5
  8307  00ED78  6E03               	movwf	___wmul@multiplicand,c
  8308  00ED7A  EC89  F06D         	call	___wmul	;wreg free
  8309  00ED7E  5028               	movf	drawChar@i,w,c
  8310  00ED80  2601               	addwf	?___wmul,f,c
  8311  00ED82  0E00               	movlw	0
  8312  00ED84  2202               	addwfc	?___wmul+1,f,c
  8313  00ED86  0EBC               	movlw	low _font2
  8314  00ED88  2401               	addwf	?___wmul,w,c
  8315  00ED8A  6EF6               	movwf	tblptrl,c
  8316  00ED8C  0EFE               	movlw	high _font2
  8317  00ED8E                     L14:
  8318  00ED8E  2002               	addwfc	?___wmul+1,w,c
  8319  00ED90  6EF7               	movwf	tblptrh,c
  8320  00ED92                     	if	0	;There are less than 3 active tblptr bytes
  8321  00ED92                     	endif
  8322  00ED92  0008               	tblrd		*
  8323  00ED94  CFF5 F025          	movff	tablat,drawChar@line
  8324  00ED98  D000               	goto	l2645
  8325  00ED9A                     l2645:
  8326                           
  8327                           ;ST7735_TFT.c: 494: for(j=0; j<7; j++, line >>= 1) {
  8328  00ED9A  0E00               	movlw	0
  8329  00ED9C  6E27               	movwf	drawChar@j,c
  8330  00ED9E                     l2647:
  8331  00ED9E  0E06               	movlw	6
  8332  00EDA0  6427               	cpfsgt	drawChar@j,c
  8333  00EDA2  D001               	goto	l198
  8334  00EDA4  D053               	goto	l2671
  8335  00EDA6                     l198:
  8336                           
  8337                           ;ST7735_TFT.c: 495: if(line & 0x01) {
  8338  00EDA6  A025               	btfss	drawChar@line,0,c
  8339  00EDA8  D023               	goto	l2657
  8340                           
  8341                           ;ST7735_TFT.c: 496: if(size == 1) drawPixel(x+i, y+j, color);
  8342  00EDAA  0424               	decf	drawChar@size,w,c
  8343  00EDAC  A4D8               	btfss	status,2,c
  8344  00EDAE  D00C               	goto	l2655
  8345  00EDB0  501E               	movf	drawChar@y,w,c
  8346  00EDB2  2427               	addwf	drawChar@j,w,c
  8347  00EDB4  6E08               	movwf	drawPixel@y,c
  8348  00EDB6  C020  F009         	movff	drawChar@color,drawPixel@color
  8349  00EDBA  C021  F00A         	movff	drawChar@color+1,drawPixel@color+1
  8350  00EDBE  5026               	movf	drawChar@x,w,c
  8351  00EDC0  2428               	addwf	drawChar@i,w,c
  8352  00EDC2  ECC9  F06D         	call	_drawPixel
  8353  00EDC6  D03E               	goto	l2665
  8354  00EDC8                     l2655:
  8355                           
  8356                           ;ST7735_TFT.c: 497: else fillRect(x+(i*size), y+(j*size), size, size, color);
  8357  00EDC8  5027               	movf	drawChar@j,w,c
  8358  00EDCA  0224               	mulwf	drawChar@size,c
  8359  00EDCC  50F3               	movf	prodl,w,c
  8360  00EDCE  241E               	addwf	drawChar@y,w,c
  8361  00EDD0  6E13               	movwf	fillRect@y,c
  8362  00EDD2  C024  F014         	movff	drawChar@size,fillRect@w
  8363  00EDD6  C024  F015         	movff	drawChar@size,fillRect@h
  8364  00EDDA  C020  F016         	movff	drawChar@color,fillRect@color
  8365  00EDDE  C021  F017         	movff	drawChar@color+1,fillRect@color+1
  8366  00EDE2  5028               	movf	drawChar@i,w,c
  8367  00EDE4  0224               	mulwf	drawChar@size,c
  8368  00EDE6  50F3               	movf	prodl,w,c
  8369  00EDE8  2426               	addwf	drawChar@x,w,c
  8370  00EDEA  EC18  F06F         	call	_fillRect
  8371                           
  8372                           ;ST7735_TFT.c: 498: }
  8373  00EDEE  D02A               	goto	l2665
  8374  00EDF0                     l2657:
  8375                           
  8376                           ;ST7735_TFT.c: 499: else if(bg != color) {
  8377  00EDF0  5020               	movf	drawChar@color,w,c
  8378  00EDF2  1822               	xorwf	drawChar@bg,w,c
  8379  00EDF4  E104               	bnz	u1470
  8380  00EDF6  5021               	movf	drawChar@color+1,w,c
  8381  00EDF8  1823               	xorwf	drawChar@bg+1,w,c
  8382  00EDFA  B4D8               	btfsc	status,2,c
  8383  00EDFC  D023               	goto	l2665
  8384  00EDFE                     u1470:
  8385                           
  8386                           ;ST7735_TFT.c: 500: if(size == 1) drawPixel(x+i, y+j, bg);
  8387  00EDFE  0424               	decf	drawChar@size,w,c
  8388  00EE00  A4D8               	btfss	status,2,c
  8389  00EE02  D00C               	goto	l2663
  8390  00EE04  501E               	movf	drawChar@y,w,c
  8391  00EE06  2427               	addwf	drawChar@j,w,c
  8392  00EE08  6E08               	movwf	drawPixel@y,c
  8393  00EE0A  C022  F009         	movff	drawChar@bg,drawPixel@color
  8394  00EE0E  C023  F00A         	movff	drawChar@bg+1,drawPixel@color+1
  8395  00EE12  5026               	movf	drawChar@x,w,c
  8396  00EE14  2428               	addwf	drawChar@i,w,c
  8397  00EE16  ECC9  F06D         	call	_drawPixel
  8398  00EE1A  D014               	goto	l2665
  8399  00EE1C                     l2663:
  8400                           
  8401                           ;ST7735_TFT.c: 501: else fillRect(x+i*size, y+j*size, size, size, bg);
  8402  00EE1C  5027               	movf	drawChar@j,w,c
  8403  00EE1E  0224               	mulwf	drawChar@size,c
  8404  00EE20  50F3               	movf	prodl,w,c
  8405  00EE22  241E               	addwf	drawChar@y,w,c
  8406  00EE24  6E13               	movwf	fillRect@y,c
  8407  00EE26  C024  F014         	movff	drawChar@size,fillRect@w
  8408  00EE2A  C024  F015         	movff	drawChar@size,fillRect@h
  8409  00EE2E  C022  F016         	movff	drawChar@bg,fillRect@color
  8410  00EE32  C023  F017         	movff	drawChar@bg+1,fillRect@color+1
  8411  00EE36  5028               	movf	drawChar@i,w,c
  8412  00EE38  0224               	mulwf	drawChar@size,c
  8413  00EE3A  50F3               	movf	prodl,w,c
  8414  00EE3C  2426               	addwf	drawChar@x,w,c
  8415  00EE3E  EC18  F06F         	call	_fillRect
  8416  00EE42  D000               	goto	l2665
  8417  00EE44                     l2665:
  8418  00EE44  2A27               	incf	drawChar@j,f,c
  8419  00EE46  90D8               	bcf	status,0,c
  8420  00EE48  3225               	rrcf	drawChar@line,f,c
  8421  00EE4A  D7A9               	goto	l2647
  8422  00EE4C                     l2671:
  8423  00EE4C  2A28               	incf	drawChar@i,f,c
  8424  00EE4E  D76F               	goto	l2635
  8425  00EE50                     l189:
  8426  00EE50  0012               	return		;funcret
  8427  00EE52                     __end_of_drawChar:
  8428                           	opt stack 0
  8429                           tblptru	equ	0xFF8
  8430                           tblptrh	equ	0xFF7
  8431                           tblptrl	equ	0xFF6
  8432                           tablat	equ	0xFF5
  8433                           prodh	equ	0xFF4
  8434                           prodl	equ	0xFF3
  8435                           intcon2	equ	0xFF1
  8436                           postinc0	equ	0xFEE
  8437                           wreg	equ	0xFE8
  8438                           postdec1	equ	0xFE5
  8439                           fsr1l	equ	0xFE1
  8440                           indf2	equ	0xFDF
  8441                           postinc2	equ	0xFDE
  8442                           fsr2h	equ	0xFDA
  8443                           fsr2l	equ	0xFD9
  8444                           status	equ	0xFD8
  8445                           
  8446 ;; *************** function _fillRect *****************
  8447 ;; Defined at:
  8448 ;;		line 470 in file "ST7735_TFT.c"
  8449 ;; Parameters:    Size  Location     Type
  8450 ;;  x               1    wreg     unsigned char 
  8451 ;;  y               1   18[COMRAM] unsigned char 
  8452 ;;  w               1   19[COMRAM] unsigned char 
  8453 ;;  h               1   20[COMRAM] unsigned char 
  8454 ;;  color           2   21[COMRAM] unsigned int 
  8455 ;; Auto vars:     Size  Location     Type
  8456 ;;  x               1   26[COMRAM] unsigned char 
  8457 ;;  i               2   27[COMRAM] int 
  8458 ;; Return value:  Size  Location     Type
  8459 ;;		None               void
  8460 ;; Registers used:
  8461 ;;		wreg, status,2, status,0, cstack
  8462 ;; Tracked objects:
  8463 ;;		On entry : 0/0
  8464 ;;		On exit  : 0/0
  8465 ;;		Unchanged: 0/0
  8466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8467 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8468 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8469 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8470 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8471 ;;Total ram usage:       11 bytes
  8472 ;; Hardware stack levels used:    1
  8473 ;; Hardware stack levels required when called:    4
  8474 ;; This function calls:
  8475 ;;		_drawFastVLine
  8476 ;; This function is called by:
  8477 ;;		_drawChar
  8478 ;; This function uses a non-reentrant model
  8479 ;;
  8480                           
  8481                           	psect	text41
  8482  00DE30                     __ptext41:
  8483                           	opt stack 0
  8484  00DE30                     _fillRect:
  8485                           	opt stack 21
  8486                           
  8487                           ;incstack = 0
  8488                           ;fillRect@x stored from wreg
  8489  00DE30  6E1B               	movwf	fillRect@x,c
  8490                           
  8491                           ;ST7735_TFT.c: 472: signed int i;
  8492                           ;ST7735_TFT.c: 474: for (i = x; i < x + w; i++)
  8493  00DE32  C01B  F01C         	movff	fillRect@x,fillRect@i
  8494  00DE36  6A1D               	clrf	fillRect@i+1,c
  8495  00DE38  D00E               	goto	l2613
  8496  00DE3A                     l2609:
  8497                           
  8498                           ;ST7735_TFT.c: 475: {
  8499                           ;ST7735_TFT.c: 476: drawFastVLine(i, y, h, color);
  8500  00DE3A  C013  F008         	movff	fillRect@y,drawFastVLine@y
  8501  00DE3E  C015  F009         	movff	fillRect@h,drawFastVLine@h
  8502  00DE42  C016  F00A         	movff	fillRect@color,drawFastVLine@color
  8503  00DE46  C017  F00B         	movff	fillRect@color+1,drawFastVLine@color+1
  8504  00DE4A  501C               	movf	fillRect@i,w,c
  8505  00DE4C  ECA3  F070         	call	_drawFastVLine
  8506  00DE50  4A1C               	infsnz	fillRect@i,f,c
  8507  00DE52  2A1D               	incf	fillRect@i+1,f,c
  8508  00DE54  D000               	goto	l2613
  8509  00DE56                     l2613:
  8510  00DE56  5014               	movf	fillRect@w,w,c
  8511  00DE58  C01B  F018         	movff	fillRect@x,??_fillRect
  8512  00DE5C  6A19               	clrf	(??_fillRect+1)& (0+255),c
  8513  00DE5E  2618               	addwf	??_fillRect,f,c
  8514  00DE60  0E00               	movlw	0
  8515  00DE62  2219               	addwfc	??_fillRect+1,f,c
  8516  00DE64  5018               	movf	??_fillRect,w,c
  8517  00DE66  5C1C               	subwf	fillRect@i,w,c
  8518  00DE68  501D               	movf	fillRect@i+1,w,c
  8519  00DE6A  0A80               	xorlw	128
  8520  00DE6C  6E1A               	movwf	(??_fillRect+2)& (0+255),c
  8521  00DE6E  5019               	movf	??_fillRect+1,w,c
  8522  00DE70  0A80               	xorlw	128
  8523  00DE72  581A               	subwfb	(??_fillRect+2)& (0+255),w,c
  8524  00DE74  A0D8               	btfss	status,0,c
  8525  00DE76  D7E1               	goto	l2609
  8526  00DE78  0012               	return		;funcret
  8527  00DE7A                     __end_of_fillRect:
  8528                           	opt stack 0
  8529                           tblptru	equ	0xFF8
  8530                           tblptrh	equ	0xFF7
  8531                           tblptrl	equ	0xFF6
  8532                           tablat	equ	0xFF5
  8533                           prodh	equ	0xFF4
  8534                           prodl	equ	0xFF3
  8535                           intcon2	equ	0xFF1
  8536                           postinc0	equ	0xFEE
  8537                           wreg	equ	0xFE8
  8538                           postdec1	equ	0xFE5
  8539                           fsr1l	equ	0xFE1
  8540                           indf2	equ	0xFDF
  8541                           postinc2	equ	0xFDE
  8542                           fsr2h	equ	0xFDA
  8543                           fsr2l	equ	0xFD9
  8544                           status	equ	0xFD8
  8545                           
  8546 ;; *************** function _drawFastVLine *****************
  8547 ;; Defined at:
  8548 ;;		line 449 in file "ST7735_TFT.c"
  8549 ;; Parameters:    Size  Location     Type
  8550 ;;  x               1    wreg     unsigned char 
  8551 ;;  y               1    7[COMRAM] unsigned char 
  8552 ;;  h               1    8[COMRAM] unsigned char 
  8553 ;;  color           2    9[COMRAM] unsigned int 
  8554 ;; Auto vars:     Size  Location     Type
  8555 ;;  x               1   17[COMRAM] unsigned char 
  8556 ;;  lo              1   16[COMRAM] unsigned char 
  8557 ;;  hi              1   15[COMRAM] unsigned char 
  8558 ;; Return value:  Size  Location     Type
  8559 ;;		None               void
  8560 ;; Registers used:
  8561 ;;		wreg, status,2, status,0, cstack
  8562 ;; Tracked objects:
  8563 ;;		On entry : 0/0
  8564 ;;		On exit  : 0/0
  8565 ;;		Unchanged: 0/0
  8566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8567 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8568 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8569 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8570 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8571 ;;Total ram usage:       11 bytes
  8572 ;; Hardware stack levels used:    1
  8573 ;; Hardware stack levels required when called:    3
  8574 ;; This function calls:
  8575 ;;		_setAddrWindow
  8576 ;;		_spiwrite
  8577 ;; This function is called by:
  8578 ;;		_fillRect
  8579 ;;		_fillCircleHelper
  8580 ;;		_fillCircle
  8581 ;;		_drawRect
  8582 ;; This function uses a non-reentrant model
  8583 ;;
  8584                           
  8585                           	psect	text42
  8586  00E146                     __ptext42:
  8587                           	opt stack 0
  8588  00E146                     _drawFastVLine:
  8589                           	opt stack 21
  8590                           
  8591                           ;incstack = 0
  8592                           ;drawFastVLine@x stored from wreg
  8593  00E146  6E12               	movwf	drawFastVLine@x,c
  8594                           
  8595                           ;ST7735_TFT.c: 451: unsigned char hi, lo;
  8596                           ;ST7735_TFT.c: 452: if((x >= 128) || (y >= 160))
  8597  00E148  0E80               	movlw	128
  8598  00E14A  6012               	cpfslt	drawFastVLine@x,c
  8599  00E14C  D03F               	goto	l173
  8600  00E14E  0E9F               	movlw	159
  8601  00E150  6408               	cpfsgt	drawFastVLine@y,c
  8602  00E152  D001               	goto	l2579
  8603                           
  8604                           ;ST7735_TFT.c: 453: return;
  8605  00E154  D03B               	goto	l173
  8606  00E156                     l2579:
  8607                           
  8608                           ;ST7735_TFT.c: 454: if((y + h - 1) >= 160)
  8609  00E156  0EFF               	movlw	255
  8610  00E158  6E0C               	movwf	??_drawFastVLine& (0+255),c
  8611  00E15A  0EFF               	movlw	255
  8612  00E15C  6E0D               	movwf	(??_drawFastVLine+1)& (0+255),c
  8613  00E15E  5009               	movf	drawFastVLine@h,w,c
  8614  00E160  C008  F00E         	movff	drawFastVLine@y,??_drawFastVLine+2
  8615  00E164  6A0F               	clrf	(??_drawFastVLine+3)& (0+255),c
  8616  00E166  260E               	addwf	??_drawFastVLine+2,f,c
  8617  00E168  0E00               	movlw	0
  8618  00E16A  220F               	addwfc	??_drawFastVLine+3,f,c
  8619  00E16C  500C               	movf	??_drawFastVLine,w,c
  8620  00E16E  260E               	addwf	??_drawFastVLine+2,f,c
  8621  00E170  500D               	movf	??_drawFastVLine+1,w,c
  8622  00E172  220F               	addwfc	??_drawFastVLine+3,f,c
  8623  00E174  BE0F               	btfsc	??_drawFastVLine+3,7,c
  8624  00E176  D00B               	goto	l2583
  8625  00E178  500F               	movf	??_drawFastVLine+3,w,c
  8626  00E17A  E104               	bnz	u1320
  8627  00E17C  0EA0               	movlw	160
  8628  00E17E  5C0E               	subwf	??_drawFastVLine+2,w,c
  8629  00E180  A0D8               	btfss	status,0,c
  8630  00E182  D005               	goto	l2583
  8631  00E184                     u1320:
  8632                           
  8633                           ;ST7735_TFT.c: 455: h = 160 - y;
  8634  00E184  5008               	movf	drawFastVLine@y,w,c
  8635  00E186  0800               	sublw	0
  8636  00E188  0FA0               	addlw	160
  8637  00E18A  6E09               	movwf	drawFastVLine@h,c
  8638  00E18C  D000               	goto	l2583
  8639  00E18E                     l2583:
  8640                           
  8641                           ;ST7735_TFT.c: 456: hi = color >> 8; lo = color;
  8642  00E18E  500B               	movf	drawFastVLine@color+1,w,c
  8643  00E190  6E10               	movwf	drawFastVLine@hi,c
  8644  00E192  C00A  F011         	movff	drawFastVLine@color,drawFastVLine@lo
  8645                           
  8646                           ;ST7735_TFT.c: 457: setAddrWindow(x, y, x, y + h - 1);
  8647  00E196  C008  F004         	movff	drawFastVLine@y,setAddrWindow@y0
  8648  00E19A  C012  F005         	movff	drawFastVLine@x,setAddrWindow@x1
  8649  00E19E  5008               	movf	drawFastVLine@y,w,c
  8650  00E1A0  2409               	addwf	drawFastVLine@h,w,c
  8651  00E1A2  6E0C               	movwf	??_drawFastVLine& (0+255),c
  8652  00E1A4  040C               	decf	??_drawFastVLine,w,c
  8653  00E1A6  6E06               	movwf	setAddrWindow@y1,c
  8654  00E1A8  5012               	movf	drawFastVLine@x,w,c
  8655  00E1AA  EC3D  F06F         	call	_setAddrWindow
  8656                           
  8657                           ;ST7735_TFT.c: 458: PORTDbits.RD0 = 1;
  8658  00E1AE  8083               	bsf	3971,0,c	;volatile
  8659                           
  8660                           ;ST7735_TFT.c: 459: PORTDbits.RD1 = 0;
  8661  00E1B0  9283               	bcf	3971,1,c	;volatile
  8662                           
  8663                           ;ST7735_TFT.c: 461: while (h--) {
  8664  00E1B2  D007               	goto	l2595
  8665  00E1B4                     l2593:
  8666                           
  8667                           ;ST7735_TFT.c: 462: spiwrite(hi);
  8668  00E1B4  5010               	movf	drawFastVLine@hi,w,c
  8669  00E1B6  EC1F  F06D         	call	_spiwrite
  8670                           
  8671                           ;ST7735_TFT.c: 463: spiwrite(lo);
  8672  00E1BA  5011               	movf	drawFastVLine@lo,w,c
  8673  00E1BC  EC1F  F06D         	call	_spiwrite
  8674  00E1C0  D000               	goto	l2595
  8675  00E1C2                     l2595:
  8676  00E1C2  0609               	decf	drawFastVLine@h,f,c
  8677  00E1C4  2809               	incf	drawFastVLine@h,w,c
  8678  00E1C6  A4D8               	btfss	status,2,c
  8679  00E1C8  D7F5               	goto	l2593
  8680                           
  8681                           ;ST7735_TFT.c: 464: }
  8682                           ;ST7735_TFT.c: 465: PORTDbits.RD1 = 1;
  8683  00E1CA  8283               	bsf	3971,1,c	;volatile
  8684  00E1CC                     l173:
  8685  00E1CC  0012               	return		;funcret
  8686  00E1CE                     __end_of_drawFastVLine:
  8687                           	opt stack 0
  8688                           tblptru	equ	0xFF8
  8689                           tblptrh	equ	0xFF7
  8690                           tblptrl	equ	0xFF6
  8691                           tablat	equ	0xFF5
  8692                           prodh	equ	0xFF4
  8693                           prodl	equ	0xFF3
  8694                           intcon2	equ	0xFF1
  8695                           postinc0	equ	0xFEE
  8696                           wreg	equ	0xFE8
  8697                           postdec1	equ	0xFE5
  8698                           fsr1l	equ	0xFE1
  8699                           indf2	equ	0xFDF
  8700                           postinc2	equ	0xFDE
  8701                           fsr2h	equ	0xFDA
  8702                           fsr2l	equ	0xFD9
  8703                           status	equ	0xFD8
  8704                           
  8705 ;; *************** function _drawPixel *****************
  8706 ;; Defined at:
  8707 ;;		line 440 in file "ST7735_TFT.c"
  8708 ;; Parameters:    Size  Location     Type
  8709 ;;  x               1    wreg     unsigned char 
  8710 ;;  y               1    7[COMRAM] unsigned char 
  8711 ;;  color           2    8[COMRAM] unsigned int 
  8712 ;; Auto vars:     Size  Location     Type
  8713 ;;  x               1   10[COMRAM] unsigned char 
  8714 ;; Return value:  Size  Location     Type
  8715 ;;		None               void
  8716 ;; Registers used:
  8717 ;;		wreg, status,2, status,0, cstack
  8718 ;; Tracked objects:
  8719 ;;		On entry : 0/0
  8720 ;;		On exit  : 0/0
  8721 ;;		Unchanged: 0/0
  8722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8723 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8724 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8725 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8726 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8727 ;;Total ram usage:        4 bytes
  8728 ;; Hardware stack levels used:    1
  8729 ;; Hardware stack levels required when called:    3
  8730 ;; This function calls:
  8731 ;;		_setAddrWindow
  8732 ;;		_write_data
  8733 ;; This function is called by:
  8734 ;;		_drawChar
  8735 ;;		_drawCircle
  8736 ;;		_drawCircleHelper
  8737 ;; This function uses a non-reentrant model
  8738 ;;
  8739                           
  8740                           	psect	text43
  8741  00DB92                     __ptext43:
  8742                           	opt stack 0
  8743  00DB92                     _drawPixel:
  8744                           	opt stack 22
  8745                           
  8746                           ;incstack = 0
  8747                           ;drawPixel@x stored from wreg
  8748  00DB92  6E0B               	movwf	drawPixel@x,c
  8749                           
  8750                           ;ST7735_TFT.c: 442: if((x >= 128) || (y >= 160))
  8751  00DB94  0E80               	movlw	128
  8752  00DB96  600B               	cpfslt	drawPixel@x,c
  8753  00DB98  D013               	goto	l167
  8754  00DB9A  0E9F               	movlw	159
  8755  00DB9C  6408               	cpfsgt	drawPixel@y,c
  8756  00DB9E  D001               	goto	l2601
  8757                           
  8758                           ;ST7735_TFT.c: 443: return;
  8759  00DBA0  D00F               	goto	l167
  8760  00DBA2                     l2601:
  8761                           
  8762                           ;ST7735_TFT.c: 444: setAddrWindow(x,y,x+1,y+1);
  8763  00DBA2  C008  F004         	movff	drawPixel@y,setAddrWindow@y0
  8764  00DBA6  280B               	incf	drawPixel@x,w,c
  8765  00DBA8  6E05               	movwf	setAddrWindow@x1,c
  8766  00DBAA  2808               	incf	drawPixel@y,w,c
  8767  00DBAC  6E06               	movwf	setAddrWindow@y1,c
  8768  00DBAE  500B               	movf	drawPixel@x,w,c
  8769  00DBB0  EC3D  F06F         	call	_setAddrWindow
  8770                           
  8771                           ;ST7735_TFT.c: 445: write_data(color >> 8);
  8772  00DBB4  500A               	movf	drawPixel@color+1,w,c
  8773  00DBB6  EC05  F06D         	call	_write_data
  8774                           
  8775                           ;ST7735_TFT.c: 446: write_data(color & 0xFF);
  8776  00DBBA  5009               	movf	drawPixel@color,w,c
  8777  00DBBC  EC05  F06D         	call	_write_data
  8778  00DBC0                     l167:
  8779  00DBC0  0012               	return		;funcret
  8780  00DBC2                     __end_of_drawPixel:
  8781                           	opt stack 0
  8782                           tblptru	equ	0xFF8
  8783                           tblptrh	equ	0xFF7
  8784                           tblptrl	equ	0xFF6
  8785                           tablat	equ	0xFF5
  8786                           prodh	equ	0xFF4
  8787                           prodl	equ	0xFF3
  8788                           intcon2	equ	0xFF1
  8789                           postinc0	equ	0xFEE
  8790                           wreg	equ	0xFE8
  8791                           postdec1	equ	0xFE5
  8792                           fsr1l	equ	0xFE1
  8793                           indf2	equ	0xFDF
  8794                           postinc2	equ	0xFDE
  8795                           fsr2h	equ	0xFDA
  8796                           fsr2l	equ	0xFD9
  8797                           status	equ	0xFD8
  8798                           
  8799 ;; *************** function _setAddrWindow *****************
  8800 ;; Defined at:
  8801 ;;		line 425 in file "ST7735_TFT.c"
  8802 ;; Parameters:    Size  Location     Type
  8803 ;;  x0              1    wreg     unsigned char 
  8804 ;;  y0              1    3[COMRAM] unsigned char 
  8805 ;;  x1              1    4[COMRAM] unsigned char 
  8806 ;;  y1              1    5[COMRAM] unsigned char 
  8807 ;; Auto vars:     Size  Location     Type
  8808 ;;  x0              1    6[COMRAM] unsigned char 
  8809 ;; Return value:  Size  Location     Type
  8810 ;;		None               void
  8811 ;; Registers used:
  8812 ;;		wreg, status,2, status,0, cstack
  8813 ;; Tracked objects:
  8814 ;;		On entry : 0/0
  8815 ;;		On exit  : 0/0
  8816 ;;		Unchanged: 0/0
  8817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8818 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8819 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8820 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8821 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8822 ;;Total ram usage:        4 bytes
  8823 ;; Hardware stack levels used:    1
  8824 ;; Hardware stack levels required when called:    2
  8825 ;; This function calls:
  8826 ;;		_write_command
  8827 ;;		_write_data
  8828 ;; This function is called by:
  8829 ;;		_drawPixel
  8830 ;;		_drawFastVLine
  8831 ;;		_fillRectangle
  8832 ;;		_drawFastHLine
  8833 ;; This function uses a non-reentrant model
  8834 ;;
  8835                           
  8836                           	psect	text44
  8837  00DE7A                     __ptext44:
  8838                           	opt stack 0
  8839  00DE7A                     _setAddrWindow:
  8840                           	opt stack 21
  8841                           
  8842                           ;incstack = 0
  8843                           ;setAddrWindow@x0 stored from wreg
  8844  00DE7A  6E07               	movwf	setAddrWindow@x0,c
  8845                           
  8846                           ;ST7735_TFT.c: 427: write_command(0x2A);
  8847  00DE7C  0E2A               	movlw	42
  8848  00DE7E  ECFD  F06C         	call	_write_command
  8849                           
  8850                           ;ST7735_TFT.c: 428: write_data(0);
  8851  00DE82  0E00               	movlw	0
  8852  00DE84  EC05  F06D         	call	_write_data
  8853                           
  8854                           ;ST7735_TFT.c: 429: write_data(x0 + colstart);
  8855  00DE88  5007               	movf	setAddrWindow@x0,w,c
  8856  00DE8A  2477               	addwf	_colstart,w,c
  8857  00DE8C  EC05  F06D         	call	_write_data
  8858                           
  8859                           ;ST7735_TFT.c: 430: write_data(0);
  8860  00DE90  0E00               	movlw	0
  8861  00DE92  EC05  F06D         	call	_write_data
  8862                           
  8863                           ;ST7735_TFT.c: 431: write_data(x1 + colstart);
  8864  00DE96  5005               	movf	setAddrWindow@x1,w,c
  8865  00DE98  2477               	addwf	_colstart,w,c
  8866  00DE9A  EC05  F06D         	call	_write_data
  8867                           
  8868                           ;ST7735_TFT.c: 432: write_command(0x2B);
  8869  00DE9E  0E2B               	movlw	43
  8870  00DEA0  ECFD  F06C         	call	_write_command
  8871                           
  8872                           ;ST7735_TFT.c: 433: write_data(0);
  8873  00DEA4  0E00               	movlw	0
  8874  00DEA6  EC05  F06D         	call	_write_data
  8875                           
  8876                           ;ST7735_TFT.c: 434: write_data(y0 + rowstart);
  8877  00DEAA  5004               	movf	setAddrWindow@y0,w,c
  8878  00DEAC  247A               	addwf	_rowstart,w,c
  8879  00DEAE  EC05  F06D         	call	_write_data
  8880                           
  8881                           ;ST7735_TFT.c: 435: write_data(0);
  8882  00DEB2  0E00               	movlw	0
  8883  00DEB4  EC05  F06D         	call	_write_data
  8884                           
  8885                           ;ST7735_TFT.c: 436: write_data(y1 + rowstart);
  8886  00DEB8  5006               	movf	setAddrWindow@y1,w,c
  8887  00DEBA  247A               	addwf	_rowstart,w,c
  8888  00DEBC  EC05  F06D         	call	_write_data
  8889                           
  8890                           ;ST7735_TFT.c: 437: write_command(0x2C);
  8891  00DEC0  0E2C               	movlw	44
  8892  00DEC2  ECFD  F06C         	call	_write_command
  8893  00DEC6  0012               	return		;funcret
  8894  00DEC8                     __end_of_setAddrWindow:
  8895                           	opt stack 0
  8896                           tblptru	equ	0xFF8
  8897                           tblptrh	equ	0xFF7
  8898                           tblptrl	equ	0xFF6
  8899                           tablat	equ	0xFF5
  8900                           prodh	equ	0xFF4
  8901                           prodl	equ	0xFF3
  8902                           intcon2	equ	0xFF1
  8903                           postinc0	equ	0xFEE
  8904                           wreg	equ	0xFE8
  8905                           postdec1	equ	0xFE5
  8906                           fsr1l	equ	0xFE1
  8907                           indf2	equ	0xFDF
  8908                           postinc2	equ	0xFDE
  8909                           fsr2h	equ	0xFDA
  8910                           fsr2l	equ	0xFD9
  8911                           status	equ	0xFD8
  8912                           
  8913 ;; *************** function _write_data *****************
  8914 ;; Defined at:
  8915 ;;		line 242 in file "ST7735_TFT.c"
  8916 ;; Parameters:    Size  Location     Type
  8917 ;;  data_           1    wreg     unsigned char 
  8918 ;; Auto vars:     Size  Location     Type
  8919 ;;  data_           1    2[COMRAM] unsigned char 
  8920 ;; Return value:  Size  Location     Type
  8921 ;;		None               void
  8922 ;; Registers used:
  8923 ;;		wreg, status,2, cstack
  8924 ;; Tracked objects:
  8925 ;;		On entry : 0/0
  8926 ;;		On exit  : 0/0
  8927 ;;		Unchanged: 0/0
  8928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8929 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8930 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8931 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8932 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8933 ;;Total ram usage:        1 bytes
  8934 ;; Hardware stack levels used:    1
  8935 ;; Hardware stack levels required when called:    1
  8936 ;; This function calls:
  8937 ;;		_spiwrite
  8938 ;; This function is called by:
  8939 ;;		_Rcmd1
  8940 ;;		_Rcmd2red
  8941 ;;		_Rcmd3
  8942 ;;		_setAddrWindow
  8943 ;;		_drawPixel
  8944 ;;		_TFT_GreenTab_Initialize
  8945 ;;		_Bcmd
  8946 ;;		_setScrollDefinition
  8947 ;;		_Rcmd2green
  8948 ;;		_VerticalScroll
  8949 ;; This function uses a non-reentrant model
  8950 ;;
  8951                           
  8952                           	psect	text45
  8953  00DA0A                     __ptext45:
  8954                           	opt stack 0
  8955  00DA0A                     _write_data:
  8956                           	opt stack 21
  8957                           
  8958                           ;incstack = 0
  8959                           ;write_data@data_ stored from wreg
  8960  00DA0A  6E03               	movwf	write_data@data_,c
  8961                           
  8962                           ;ST7735_TFT.c: 244: PORTDbits.RD1 = 0;
  8963  00DA0C  9283               	bcf	3971,1,c	;volatile
  8964                           
  8965                           ;ST7735_TFT.c: 245: PORTDbits.RD0 = 1;
  8966  00DA0E  8083               	bsf	3971,0,c	;volatile
  8967                           
  8968                           ;ST7735_TFT.c: 246: spiwrite(data_);
  8969  00DA10  5003               	movf	write_data@data_,w,c
  8970  00DA12  EC1F  F06D         	call	_spiwrite
  8971                           
  8972                           ;ST7735_TFT.c: 247: PORTDbits.RD1 = 1;
  8973  00DA16  8283               	bsf	3971,1,c	;volatile
  8974  00DA18  0012               	return		;funcret
  8975  00DA1A                     __end_of_write_data:
  8976                           	opt stack 0
  8977                           tblptru	equ	0xFF8
  8978                           tblptrh	equ	0xFF7
  8979                           tblptrl	equ	0xFF6
  8980                           tablat	equ	0xFF5
  8981                           prodh	equ	0xFF4
  8982                           prodl	equ	0xFF3
  8983                           intcon2	equ	0xFF1
  8984                           postinc0	equ	0xFEE
  8985                           wreg	equ	0xFE8
  8986                           postdec1	equ	0xFE5
  8987                           fsr1l	equ	0xFE1
  8988                           indf2	equ	0xFDF
  8989                           postinc2	equ	0xFDE
  8990                           fsr2h	equ	0xFDA
  8991                           fsr2l	equ	0xFD9
  8992                           status	equ	0xFD8
  8993                           
  8994 ;; *************** function _write_command *****************
  8995 ;; Defined at:
  8996 ;;		line 231 in file "ST7735_TFT.c"
  8997 ;; Parameters:    Size  Location     Type
  8998 ;;  cmd_            1    wreg     unsigned char 
  8999 ;; Auto vars:     Size  Location     Type
  9000 ;;  cmd_            1    2[COMRAM] unsigned char 
  9001 ;; Return value:  Size  Location     Type
  9002 ;;		None               void
  9003 ;; Registers used:
  9004 ;;		wreg, status,2, cstack
  9005 ;; Tracked objects:
  9006 ;;		On entry : 0/0
  9007 ;;		On exit  : 0/0
  9008 ;;		Unchanged: 0/0
  9009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9010 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9011 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9012 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9013 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9014 ;;Total ram usage:        1 bytes
  9015 ;; Hardware stack levels used:    1
  9016 ;; Hardware stack levels required when called:    1
  9017 ;; This function calls:
  9018 ;;		_spiwrite
  9019 ;; This function is called by:
  9020 ;;		_Rcmd1
  9021 ;;		_Rcmd2red
  9022 ;;		_Rcmd3
  9023 ;;		_setAddrWindow
  9024 ;;		_TFT_GreenTab_Initialize
  9025 ;;		_Bcmd
  9026 ;;		_setScrollDefinition
  9027 ;;		_Rcmd2green
  9028 ;;		_VerticalScroll
  9029 ;; This function uses a non-reentrant model
  9030 ;;
  9031                           
  9032                           	psect	text46
  9033  00D9FA                     __ptext46:
  9034                           	opt stack 0
  9035  00D9FA                     _write_command:
  9036                           	opt stack 21
  9037                           
  9038                           ;incstack = 0
  9039                           ;write_command@cmd_ stored from wreg
  9040  00D9FA  6E03               	movwf	write_command@cmd_,c
  9041                           
  9042                           ;ST7735_TFT.c: 233: PORTDbits.RD1 = 0;
  9043  00D9FC  9283               	bcf	3971,1,c	;volatile
  9044                           
  9045                           ;ST7735_TFT.c: 235: PORTDbits.RD0 = 0;
  9046  00D9FE  9083               	bcf	3971,0,c	;volatile
  9047                           
  9048                           ;ST7735_TFT.c: 236: spiwrite(cmd_);
  9049  00DA00  5003               	movf	write_command@cmd_,w,c
  9050  00DA02  EC1F  F06D         	call	_spiwrite
  9051                           
  9052                           ;ST7735_TFT.c: 238: PORTDbits.RD1 = 1;
  9053  00DA06  8283               	bsf	3971,1,c	;volatile
  9054  00DA08  0012               	return		;funcret
  9055  00DA0A                     __end_of_write_command:
  9056                           	opt stack 0
  9057                           tblptru	equ	0xFF8
  9058                           tblptrh	equ	0xFF7
  9059                           tblptrl	equ	0xFF6
  9060                           tablat	equ	0xFF5
  9061                           prodh	equ	0xFF4
  9062                           prodl	equ	0xFF3
  9063                           intcon2	equ	0xFF1
  9064                           postinc0	equ	0xFEE
  9065                           wreg	equ	0xFE8
  9066                           postdec1	equ	0xFE5
  9067                           fsr1l	equ	0xFE1
  9068                           indf2	equ	0xFDF
  9069                           postinc2	equ	0xFDE
  9070                           fsr2h	equ	0xFDA
  9071                           fsr2l	equ	0xFD9
  9072                           status	equ	0xFD8
  9073                           
  9074 ;; *************** function _spiwrite *****************
  9075 ;; Defined at:
  9076 ;;		line 222 in file "ST7735_TFT.c"
  9077 ;; Parameters:    Size  Location     Type
  9078 ;;  spidata         1    wreg     unsigned char 
  9079 ;; Auto vars:     Size  Location     Type
  9080 ;;  spidata         1    1[COMRAM] unsigned char 
  9081 ;;  x               1    0[COMRAM] unsigned char 
  9082 ;; Return value:  Size  Location     Type
  9083 ;;		None               void
  9084 ;; Registers used:
  9085 ;;		wreg
  9086 ;; Tracked objects:
  9087 ;;		On entry : 0/0
  9088 ;;		On exit  : 0/0
  9089 ;;		Unchanged: 0/0
  9090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9091 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9092 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9093 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9094 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9095 ;;Total ram usage:        2 bytes
  9096 ;; Hardware stack levels used:    1
  9097 ;; This function calls:
  9098 ;;		Nothing
  9099 ;; This function is called by:
  9100 ;;		_write_command
  9101 ;;		_write_data
  9102 ;;		_drawFastVLine
  9103 ;;		_fillRectangle
  9104 ;;		_drawFastHLine
  9105 ;; This function uses a non-reentrant model
  9106 ;;
  9107                           
  9108                           	psect	text47
  9109  00DA3E                     __ptext47:
  9110                           	opt stack 0
  9111  00DA3E                     _spiwrite:
  9112                           	opt stack 23
  9113                           
  9114                           ;incstack = 0
  9115                           ;spiwrite@spidata stored from wreg
  9116  00DA3E  6E02               	movwf	spiwrite@spidata,c
  9117                           
  9118                           ;ST7735_TFT.c: 224: char x;
  9119                           ;ST7735_TFT.c: 225: PIR1bits.SSPIF = 0;
  9120  00DA40  969E               	bcf	3998,3,c	;volatile
  9121                           
  9122                           ;ST7735_TFT.c: 226: x = SSPBUF;
  9123  00DA42  CFC9 F001          	movff	4041,spiwrite@x	;volatile
  9124                           
  9125                           ;ST7735_TFT.c: 227: SSPBUF = spidata;
  9126  00DA46  C002  FFC9         	movff	spiwrite@spidata,4041	;volatile
  9127                           
  9128                           ;ST7735_TFT.c: 228: while (!SSPSTATbits.BF);
  9129  00DA4A  D000               	goto	l123
  9130  00DA4C                     l123:
  9131  00DA4C  A0C7               	btfss	4039,0,c	;volatile
  9132  00DA4E  D7FE               	goto	l123
  9133  00DA50  0012               	return		;funcret
  9134  00DA52                     __end_of_spiwrite:
  9135                           	opt stack 0
  9136                           tblptru	equ	0xFF8
  9137                           tblptrh	equ	0xFF7
  9138                           tblptrl	equ	0xFF6
  9139                           tablat	equ	0xFF5
  9140                           prodh	equ	0xFF4
  9141                           prodl	equ	0xFF3
  9142                           intcon2	equ	0xFF1
  9143                           postinc0	equ	0xFEE
  9144                           wreg	equ	0xFE8
  9145                           postdec1	equ	0xFE5
  9146                           fsr1l	equ	0xFE1
  9147                           indf2	equ	0xFDF
  9148                           postinc2	equ	0xFDE
  9149                           fsr2h	equ	0xFDA
  9150                           fsr2l	equ	0xFD9
  9151                           status	equ	0xFD8
  9152                           
  9153 ;; *************** function ___wmul *****************
  9154 ;; Defined at:
  9155 ;;		line 15 in file "E:\XC8\sources\common\Umul16.c"
  9156 ;; Parameters:    Size  Location     Type
  9157 ;;  multiplier      2    0[COMRAM] unsigned int 
  9158 ;;  multiplicand    2    2[COMRAM] unsigned int 
  9159 ;; Auto vars:     Size  Location     Type
  9160 ;;  product         2    4[COMRAM] unsigned int 
  9161 ;; Return value:  Size  Location     Type
  9162 ;;                  2    0[COMRAM] unsigned int 
  9163 ;; Registers used:
  9164 ;;		wreg, status,2, status,0, prodl, prodh
  9165 ;; Tracked objects:
  9166 ;;		On entry : 0/0
  9167 ;;		On exit  : 0/0
  9168 ;;		Unchanged: 0/0
  9169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9170 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9171 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9172 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9173 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9174 ;;Total ram usage:        6 bytes
  9175 ;; Hardware stack levels used:    1
  9176 ;; This function calls:
  9177 ;;		Nothing
  9178 ;; This function is called by:
  9179 ;;		_delay_ms
  9180 ;;		_drawChar
  9181 ;;		_main
  9182 ;;		_update_LCD_misc
  9183 ;; This function uses a non-reentrant model
  9184 ;;
  9185                           
  9186                           	psect	text48
  9187  00DB12                     __ptext48:
  9188                           	opt stack 0
  9189  00DB12                     ___wmul:
  9190                           	opt stack 30
  9191                           
  9192                           ;incstack = 0
  9193  00DB12  5001               	movf	___wmul@multiplier,w,c
  9194  00DB14  0203               	mulwf	___wmul@multiplicand,c
  9195  00DB16  CFF3 F005          	movff	prodl,___wmul@product
  9196  00DB1A  CFF4 F006          	movff	prodh,___wmul@product+1
  9197  00DB1E  5001               	movf	___wmul@multiplier,w,c
  9198  00DB20  0204               	mulwf	___wmul@multiplicand+1,c
  9199  00DB22  50F3               	movf	prodl,w,c
  9200  00DB24  2606               	addwf	___wmul@product+1,f,c
  9201  00DB26  5002               	movf	___wmul@multiplier+1,w,c
  9202  00DB28  0203               	mulwf	___wmul@multiplicand,c
  9203  00DB2A  50F3               	movf	prodl,w,c
  9204  00DB2C  2606               	addwf	___wmul@product+1,f,c
  9205  00DB2E  C005  F001         	movff	___wmul@product,?___wmul
  9206  00DB32  C006  F002         	movff	___wmul@product+1,?___wmul+1
  9207  00DB36  D000               	goto	l536
  9208  00DB38                     l536:
  9209  00DB38  0012               	return		;funcret
  9210  00DB3A                     __end_of___wmul:
  9211                           	opt stack 0
  9212                           tblptru	equ	0xFF8
  9213                           tblptrh	equ	0xFF7
  9214                           tblptrl	equ	0xFF6
  9215                           tablat	equ	0xFF5
  9216                           prodh	equ	0xFF4
  9217                           prodl	equ	0xFF3
  9218                           intcon2	equ	0xFF1
  9219                           postinc0	equ	0xFEE
  9220                           wreg	equ	0xFE8
  9221                           postdec1	equ	0xFE5
  9222                           fsr1l	equ	0xFE1
  9223                           indf2	equ	0xFDF
  9224                           postinc2	equ	0xFDE
  9225                           fsr2h	equ	0xFDA
  9226                           fsr2l	equ	0xFD9
  9227                           status	equ	0xFD8
  9228                           
  9229 ;; *************** function ___awmod *****************
  9230 ;; Defined at:
  9231 ;;		line 8 in file "E:\XC8\sources\common\awmod.c"
  9232 ;; Parameters:    Size  Location     Type
  9233 ;;  dividend        2    0[COMRAM] int 
  9234 ;;  divisor         2    2[COMRAM] int 
  9235 ;; Auto vars:     Size  Location     Type
  9236 ;;  sign            1    5[COMRAM] unsigned char 
  9237 ;;  counter         1    4[COMRAM] unsigned char 
  9238 ;; Return value:  Size  Location     Type
  9239 ;;                  2    0[COMRAM] int 
  9240 ;; Registers used:
  9241 ;;		wreg, status,2, status,0
  9242 ;; Tracked objects:
  9243 ;;		On entry : 0/0
  9244 ;;		On exit  : 0/0
  9245 ;;		Unchanged: 0/0
  9246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9247 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9248 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9249 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9250 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9251 ;;Total ram usage:        6 bytes
  9252 ;; Hardware stack levels used:    1
  9253 ;; This function calls:
  9254 ;;		Nothing
  9255 ;; This function is called by:
  9256 ;;		_update_LCD_count
  9257 ;;		_update_LCD_PED_Count
  9258 ;; This function uses a non-reentrant model
  9259 ;;
  9260                           
  9261                           	psect	text49
  9262  00E042                     __ptext49:
  9263                           	opt stack 0
  9264  00E042                     ___awmod:
  9265                           	opt stack 27
  9266                           
  9267                           ;incstack = 0
  9268  00E042  0E00               	movlw	0
  9269  00E044  6E06               	movwf	___awmod@sign,c
  9270  00E046  AE02               	btfss	___awmod@dividend+1,7,c
  9271  00E048  D007               	goto	l3043
  9272  00E04A  6C01               	negf	___awmod@dividend,c
  9273  00E04C  1E02               	comf	___awmod@dividend+1,f,c
  9274  00E04E  B0D8               	btfsc	status,0,c
  9275  00E050  2A02               	incf	___awmod@dividend+1,f,c
  9276  00E052  0E01               	movlw	1
  9277  00E054  6E06               	movwf	___awmod@sign,c
  9278  00E056  D000               	goto	l3043
  9279  00E058                     l3043:
  9280  00E058  AE04               	btfss	___awmod@divisor+1,7,c
  9281  00E05A  D005               	goto	l3047
  9282  00E05C  6C03               	negf	___awmod@divisor,c
  9283  00E05E  1E04               	comf	___awmod@divisor+1,f,c
  9284  00E060  B0D8               	btfsc	status,0,c
  9285  00E062  2A04               	incf	___awmod@divisor+1,f,c
  9286  00E064  D000               	goto	l3047
  9287  00E066                     l3047:
  9288  00E066  5003               	movf	___awmod@divisor,w,c
  9289  00E068  1004               	iorwf	___awmod@divisor+1,w,c
  9290  00E06A  B4D8               	btfsc	status,2,c
  9291  00E06C  D01D               	goto	l3063
  9292  00E06E  0E01               	movlw	1
  9293  00E070  6E05               	movwf	___awmod@counter,c
  9294  00E072  D005               	goto	l3053
  9295  00E074                     l3051:
  9296  00E074  90D8               	bcf	status,0,c
  9297  00E076  3603               	rlcf	___awmod@divisor,f,c
  9298  00E078  3604               	rlcf	___awmod@divisor+1,f,c
  9299  00E07A  2A05               	incf	___awmod@counter,f,c
  9300  00E07C  D000               	goto	l3053
  9301  00E07E                     l3053:
  9302  00E07E  BE04               	btfsc	___awmod@divisor+1,7,c
  9303  00E080  D002               	goto	l3055
  9304  00E082  D7F8               	goto	l3051
  9305  00E084  D000               	goto	l3055
  9306  00E086                     l3055:
  9307  00E086  5003               	movf	___awmod@divisor,w,c
  9308  00E088  5C01               	subwf	___awmod@dividend,w,c
  9309  00E08A  5004               	movf	___awmod@divisor+1,w,c
  9310  00E08C  5802               	subwfb	___awmod@dividend+1,w,c
  9311  00E08E  A0D8               	btfss	status,0,c
  9312  00E090  D005               	goto	l3059
  9313  00E092  5003               	movf	___awmod@divisor,w,c
  9314  00E094  5E01               	subwf	___awmod@dividend,f,c
  9315  00E096  5004               	movf	___awmod@divisor+1,w,c
  9316  00E098  5A02               	subwfb	___awmod@dividend+1,f,c
  9317  00E09A  D000               	goto	l3059
  9318  00E09C                     l3059:
  9319  00E09C  90D8               	bcf	status,0,c
  9320  00E09E  3204               	rrcf	___awmod@divisor+1,f,c
  9321  00E0A0  3203               	rrcf	___awmod@divisor,f,c
  9322  00E0A2  2E05               	decfsz	___awmod@counter,f,c
  9323  00E0A4  D7F0               	goto	l3055
  9324  00E0A6  D000               	goto	l3063
  9325  00E0A8                     l3063:
  9326  00E0A8  5006               	movf	___awmod@sign,w,c
  9327  00E0AA  B4D8               	btfsc	status,2,c
  9328  00E0AC  D005               	goto	l3067
  9329  00E0AE  6C01               	negf	___awmod@dividend,c
  9330  00E0B0  1E02               	comf	___awmod@dividend+1,f,c
  9331  00E0B2  B0D8               	btfsc	status,0,c
  9332  00E0B4  2A02               	incf	___awmod@dividend+1,f,c
  9333  00E0B6  D000               	goto	l3067
  9334  00E0B8                     l3067:
  9335  00E0B8  C001  F001         	movff	___awmod@dividend,?___awmod
  9336  00E0BC  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  9337  00E0C0  D000               	goto	l742
  9338  00E0C2                     l742:
  9339  00E0C2  0012               	return		;funcret
  9340  00E0C4                     __end_of___awmod:
  9341                           	opt stack 0
  9342                           tblptru	equ	0xFF8
  9343                           tblptrh	equ	0xFF7
  9344                           tblptrl	equ	0xFF6
  9345                           tablat	equ	0xFF5
  9346                           prodh	equ	0xFF4
  9347                           prodl	equ	0xFF3
  9348                           intcon2	equ	0xFF1
  9349                           postinc0	equ	0xFEE
  9350                           wreg	equ	0xFE8
  9351                           postdec1	equ	0xFE5
  9352                           fsr1l	equ	0xFE1
  9353                           indf2	equ	0xFDF
  9354                           postinc2	equ	0xFDE
  9355                           fsr2h	equ	0xFDA
  9356                           fsr2l	equ	0xFD9
  9357                           status	equ	0xFD8
  9358                           
  9359 ;; *************** function ___awdiv *****************
  9360 ;; Defined at:
  9361 ;;		line 8 in file "E:\XC8\sources\common\awdiv.c"
  9362 ;; Parameters:    Size  Location     Type
  9363 ;;  dividend        2    0[COMRAM] int 
  9364 ;;  divisor         2    2[COMRAM] int 
  9365 ;; Auto vars:     Size  Location     Type
  9366 ;;  quotient        2    6[COMRAM] int 
  9367 ;;  sign            1    5[COMRAM] unsigned char 
  9368 ;;  counter         1    4[COMRAM] unsigned char 
  9369 ;; Return value:  Size  Location     Type
  9370 ;;                  2    0[COMRAM] int 
  9371 ;; Registers used:
  9372 ;;		wreg, status,2, status,0
  9373 ;; Tracked objects:
  9374 ;;		On entry : 0/0
  9375 ;;		On exit  : 0/0
  9376 ;;		Unchanged: 0/0
  9377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9378 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9379 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9380 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9381 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9382 ;;Total ram usage:        8 bytes
  9383 ;; Hardware stack levels used:    1
  9384 ;; This function calls:
  9385 ;;		Nothing
  9386 ;; This function is called by:
  9387 ;;		_update_LCD_count
  9388 ;;		_update_LCD_PED_Count
  9389 ;; This function uses a non-reentrant model
  9390 ;;
  9391                           
  9392                           	psect	text50
  9393  00E256                     __ptext50:
  9394                           	opt stack 0
  9395  00E256                     ___awdiv:
  9396                           	opt stack 27
  9397                           
  9398                           ;incstack = 0
  9399  00E256  0E00               	movlw	0
  9400  00E258  6E06               	movwf	___awdiv@sign,c
  9401  00E25A  AE04               	btfss	___awdiv@divisor+1,7,c
  9402  00E25C  D007               	goto	l2999
  9403  00E25E  6C03               	negf	___awdiv@divisor,c
  9404  00E260  1E04               	comf	___awdiv@divisor+1,f,c
  9405  00E262  B0D8               	btfsc	status,0,c
  9406  00E264  2A04               	incf	___awdiv@divisor+1,f,c
  9407  00E266  0E01               	movlw	1
  9408  00E268  6E06               	movwf	___awdiv@sign,c
  9409  00E26A  D000               	goto	l2999
  9410  00E26C                     l2999:
  9411  00E26C  AE02               	btfss	___awdiv@dividend+1,7,c
  9412  00E26E  D007               	goto	l3005
  9413  00E270  6C01               	negf	___awdiv@dividend,c
  9414  00E272  1E02               	comf	___awdiv@dividend+1,f,c
  9415  00E274  B0D8               	btfsc	status,0,c
  9416  00E276  2A02               	incf	___awdiv@dividend+1,f,c
  9417  00E278  0E01               	movlw	1
  9418  00E27A  1A06               	xorwf	___awdiv@sign,f,c
  9419  00E27C  D000               	goto	l3005
  9420  00E27E                     l3005:
  9421  00E27E  0E00               	movlw	0
  9422  00E280  6E08               	movwf	___awdiv@quotient+1,c
  9423  00E282  0E00               	movlw	0
  9424  00E284  6E07               	movwf	___awdiv@quotient,c
  9425  00E286  5003               	movf	___awdiv@divisor,w,c
  9426  00E288  1004               	iorwf	___awdiv@divisor+1,w,c
  9427  00E28A  B4D8               	btfsc	status,2,c
  9428  00E28C  D021               	goto	l3027
  9429  00E28E  0E01               	movlw	1
  9430  00E290  6E05               	movwf	___awdiv@counter,c
  9431  00E292  D005               	goto	l3013
  9432  00E294                     l3011:
  9433  00E294  90D8               	bcf	status,0,c
  9434  00E296  3603               	rlcf	___awdiv@divisor,f,c
  9435  00E298  3604               	rlcf	___awdiv@divisor+1,f,c
  9436  00E29A  2A05               	incf	___awdiv@counter,f,c
  9437  00E29C  D000               	goto	l3013
  9438  00E29E                     l3013:
  9439  00E29E  BE04               	btfsc	___awdiv@divisor+1,7,c
  9440  00E2A0  D002               	goto	l3015
  9441  00E2A2  D7F8               	goto	l3011
  9442  00E2A4  D000               	goto	l3015
  9443  00E2A6                     l3015:
  9444  00E2A6  90D8               	bcf	status,0,c
  9445  00E2A8  3607               	rlcf	___awdiv@quotient,f,c
  9446  00E2AA  3608               	rlcf	___awdiv@quotient+1,f,c
  9447  00E2AC  5003               	movf	___awdiv@divisor,w,c
  9448  00E2AE  5C01               	subwf	___awdiv@dividend,w,c
  9449  00E2B0  5004               	movf	___awdiv@divisor+1,w,c
  9450  00E2B2  5802               	subwfb	___awdiv@dividend+1,w,c
  9451  00E2B4  A0D8               	btfss	status,0,c
  9452  00E2B6  D006               	goto	l3023
  9453  00E2B8  5003               	movf	___awdiv@divisor,w,c
  9454  00E2BA  5E01               	subwf	___awdiv@dividend,f,c
  9455  00E2BC  5004               	movf	___awdiv@divisor+1,w,c
  9456  00E2BE  5A02               	subwfb	___awdiv@dividend+1,f,c
  9457  00E2C0  8007               	bsf	___awdiv@quotient,0,c
  9458  00E2C2  D000               	goto	l3023
  9459  00E2C4                     l3023:
  9460  00E2C4  90D8               	bcf	status,0,c
  9461  00E2C6  3204               	rrcf	___awdiv@divisor+1,f,c
  9462  00E2C8  3203               	rrcf	___awdiv@divisor,f,c
  9463  00E2CA  2E05               	decfsz	___awdiv@counter,f,c
  9464  00E2CC  D7EC               	goto	l3015
  9465  00E2CE  D000               	goto	l3027
  9466  00E2D0                     l3027:
  9467  00E2D0  5006               	movf	___awdiv@sign,w,c
  9468  00E2D2  B4D8               	btfsc	status,2,c
  9469  00E2D4  D005               	goto	l3031
  9470  00E2D6  6C07               	negf	___awdiv@quotient,c
  9471  00E2D8  1E08               	comf	___awdiv@quotient+1,f,c
  9472  00E2DA  B0D8               	btfsc	status,0,c
  9473  00E2DC  2A08               	incf	___awdiv@quotient+1,f,c
  9474  00E2DE  D000               	goto	l3031
  9475  00E2E0                     l3031:
  9476  00E2E0  C007  F001         	movff	___awdiv@quotient,?___awdiv
  9477  00E2E4  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  9478  00E2E8  D000               	goto	l729
  9479  00E2EA                     l729:
  9480  00E2EA  0012               	return		;funcret
  9481  00E2EC                     __end_of___awdiv:
  9482                           	opt stack 0
  9483                           tblptru	equ	0xFF8
  9484                           tblptrh	equ	0xFF7
  9485                           tblptrl	equ	0xFF6
  9486                           tablat	equ	0xFF5
  9487                           prodh	equ	0xFF4
  9488                           prodl	equ	0xFF3
  9489                           intcon2	equ	0xFF1
  9490                           postinc0	equ	0xFEE
  9491                           wreg	equ	0xFE8
  9492                           postdec1	equ	0xFE5
  9493                           fsr1l	equ	0xFE1
  9494                           indf2	equ	0xFDF
  9495                           postinc2	equ	0xFDE
  9496                           fsr2h	equ	0xFDA
  9497                           fsr2l	equ	0xFD9
  9498                           status	equ	0xFD8
  9499                           
  9500 ;; *************** function _Wait_One_Second_With_Beep *****************
  9501 ;; Defined at:
  9502 ;;		line 513 in file "Lab7-8.c"
  9503 ;; Parameters:    Size  Location     Type
  9504 ;;		None
  9505 ;; Auto vars:     Size  Location     Type
  9506 ;;		None
  9507 ;; Return value:  Size  Location     Type
  9508 ;;		None               void
  9509 ;; Registers used:
  9510 ;;		wreg, status,2, cstack
  9511 ;; Tracked objects:
  9512 ;;		On entry : 0/0
  9513 ;;		On exit  : 0/0
  9514 ;;		Unchanged: 0/0
  9515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9516 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9517 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9518 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9519 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9520 ;;Total ram usage:        0 bytes
  9521 ;; Hardware stack levels used:    1
  9522 ;; Hardware stack levels required when called:    1
  9523 ;; This function calls:
  9524 ;;		_Activate_Buzzer
  9525 ;;		_Deactivate_Buzzer
  9526 ;;		_Wait_Half_Second
  9527 ;; This function is called by:
  9528 ;;		_PED_Control
  9529 ;; This function uses a non-reentrant model
  9530 ;;
  9531                           
  9532                           	psect	text51
  9533  00DA66                     __ptext51:
  9534                           	opt stack 0
  9535  00DA66                     _Wait_One_Second_With_Beep:
  9536                           	opt stack 27
  9537                           
  9538                           ;Lab7-8.c: 515: PORTDbits.RD7 = 1;
  9539                           
  9540                           ;incstack = 0
  9541  00DA66  8E83               	bsf	3971,7,c	;volatile
  9542                           
  9543                           ;Lab7-8.c: 516: Activate_Buzzer();
  9544  00DA68  EC0D  F06D         	call	_Activate_Buzzer	;wreg free
  9545                           
  9546                           ;Lab7-8.c: 517: Wait_Half_Second();
  9547  00DA6C  EC49  F06D         	call	_Wait_Half_Second	;wreg free
  9548                           
  9549                           ;Lab7-8.c: 518: PORTDbits.RD7 = 0;
  9550  00DA70  9E83               	bcf	3971,7,c	;volatile
  9551                           
  9552                           ;Lab7-8.c: 519: Deactivate_Buzzer ();
  9553  00DA72  ECF2  F06C         	call	_Deactivate_Buzzer	;wreg free
  9554                           
  9555                           ;Lab7-8.c: 520: Wait_Half_Second();
  9556  00DA76  EC49  F06D         	call	_Wait_Half_Second	;wreg free
  9557  00DA7A  0012               	return		;funcret
  9558  00DA7C                     __end_of_Wait_One_Second_With_Beep:
  9559                           	opt stack 0
  9560                           tblptru	equ	0xFF8
  9561                           tblptrh	equ	0xFF7
  9562                           tblptrl	equ	0xFF6
  9563                           tablat	equ	0xFF5
  9564                           prodh	equ	0xFF4
  9565                           prodl	equ	0xFF3
  9566                           intcon2	equ	0xFF1
  9567                           postinc0	equ	0xFEE
  9568                           wreg	equ	0xFE8
  9569                           postdec1	equ	0xFE5
  9570                           fsr1l	equ	0xFE1
  9571                           indf2	equ	0xFDF
  9572                           postinc2	equ	0xFDE
  9573                           fsr2h	equ	0xFDA
  9574                           fsr2l	equ	0xFD9
  9575                           status	equ	0xFD8
  9576                           
  9577 ;; *************** function _Wait_Half_Second *****************
  9578 ;; Defined at:
  9579 ;;		line 523 in file "Lab7-8.c"
  9580 ;; Parameters:    Size  Location     Type
  9581 ;;		None
  9582 ;; Auto vars:     Size  Location     Type
  9583 ;;		None
  9584 ;; Return value:  Size  Location     Type
  9585 ;;		None               void
  9586 ;; Registers used:
  9587 ;;		wreg, status,2
  9588 ;; Tracked objects:
  9589 ;;		On entry : 0/0
  9590 ;;		On exit  : 0/0
  9591 ;;		Unchanged: 0/0
  9592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9593 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9594 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9595 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9596 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9597 ;;Total ram usage:        0 bytes
  9598 ;; Hardware stack levels used:    1
  9599 ;; This function calls:
  9600 ;;		Nothing
  9601 ;; This function is called by:
  9602 ;;		_Wait_One_Second
  9603 ;;		_Wait_One_Second_With_Beep
  9604 ;;		_Old_Wait_One_Second
  9605 ;; This function uses a non-reentrant model
  9606 ;;
  9607                           
  9608                           	psect	text52
  9609  00DA92                     __ptext52:
  9610                           	opt stack 0
  9611  00DA92                     _Wait_Half_Second:
  9612                           	opt stack 27
  9613                           
  9614                           ;Lab7-8.c: 525: T0CON = 0x03;
  9615                           
  9616                           ;incstack = 0
  9617  00DA92  0E03               	movlw	3
  9618  00DA94  6ED5               	movwf	4053,c	;volatile
  9619                           
  9620                           ;Lab7-8.c: 526: TMR0L = 0xDB;
  9621  00DA96  0EDB               	movlw	219
  9622  00DA98  6ED6               	movwf	4054,c	;volatile
  9623                           
  9624                           ;Lab7-8.c: 527: TMR0H = 0x0B;
  9625  00DA9A  0E0B               	movlw	11
  9626  00DA9C  6ED7               	movwf	4055,c	;volatile
  9627                           
  9628                           ;Lab7-8.c: 528: INTCONbits.TMR0IF = 0;
  9629  00DA9E  94F2               	bcf	intcon,2,c	;volatile
  9630                           
  9631                           ;Lab7-8.c: 529: T0CONbits.TMR0ON = 1;
  9632  00DAA0  8ED5               	bsf	4053,7,c	;volatile
  9633                           
  9634                           ;Lab7-8.c: 530: while (INTCONbits.TMR0IF == 0);
  9635  00DAA2  D000               	goto	l456
  9636  00DAA4                     l456:
  9637  00DAA4  A4F2               	btfss	intcon,2,c	;volatile
  9638  00DAA6  D7FE               	goto	l456
  9639                           
  9640                           ;Lab7-8.c: 531: T0CONbits.TMR0ON = 0;
  9641  00DAA8  9ED5               	bcf	4053,7,c	;volatile
  9642  00DAAA  0012               	return		;funcret
  9643  00DAAC                     __end_of_Wait_Half_Second:
  9644                           	opt stack 0
  9645                           tblptru	equ	0xFF8
  9646                           tblptrh	equ	0xFF7
  9647                           tblptrl	equ	0xFF6
  9648                           tablat	equ	0xFF5
  9649                           prodh	equ	0xFF4
  9650                           prodl	equ	0xFF3
  9651                           intcon	equ	0xFF2
  9652                           intcon2	equ	0xFF1
  9653                           postinc0	equ	0xFEE
  9654                           wreg	equ	0xFE8
  9655                           postdec1	equ	0xFE5
  9656                           fsr1l	equ	0xFE1
  9657                           indf2	equ	0xFDF
  9658                           postinc2	equ	0xFDE
  9659                           fsr2h	equ	0xFDA
  9660                           fsr2l	equ	0xFD9
  9661                           status	equ	0xFD8
  9662                           
  9663 ;; *************** function _Deactivate_Buzzer *****************
  9664 ;; Defined at:
  9665 ;;		line 380 in file "Lab7-8.c"
  9666 ;; Parameters:    Size  Location     Type
  9667 ;;		None
  9668 ;; Auto vars:     Size  Location     Type
  9669 ;;		None
  9670 ;; Return value:  Size  Location     Type
  9671 ;;		None               void
  9672 ;; Registers used:
  9673 ;;		wreg, status,2
  9674 ;; Tracked objects:
  9675 ;;		On entry : 0/0
  9676 ;;		On exit  : 0/0
  9677 ;;		Unchanged: 0/0
  9678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9679 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9680 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9681 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9682 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9683 ;;Total ram usage:        0 bytes
  9684 ;; Hardware stack levels used:    1
  9685 ;; This function calls:
  9686 ;;		Nothing
  9687 ;; This function is called by:
  9688 ;;		_Wait_One_Second_With_Beep
  9689 ;; This function uses a non-reentrant model
  9690 ;;
  9691                           
  9692                           	psect	text53
  9693  00D9E4                     __ptext53:
  9694                           	opt stack 0
  9695  00D9E4                     _Deactivate_Buzzer:
  9696                           	opt stack 27
  9697                           
  9698                           ;Lab7-8.c: 382: CCP2CON = 0x0;
  9699                           
  9700                           ;incstack = 0
  9701  00D9E4  0E00               	movlw	0
  9702  00D9E6  6EBA               	movwf	4026,c	;volatile
  9703                           
  9704                           ;Lab7-8.c: 383: PORTBbits.RB3 = 0;
  9705  00D9E8  9681               	bcf	3969,3,c	;volatile
  9706  00D9EA  0012               	return		;funcret
  9707  00D9EC                     __end_of_Deactivate_Buzzer:
  9708                           	opt stack 0
  9709                           tblptru	equ	0xFF8
  9710                           tblptrh	equ	0xFF7
  9711                           tblptrl	equ	0xFF6
  9712                           tablat	equ	0xFF5
  9713                           prodh	equ	0xFF4
  9714                           prodl	equ	0xFF3
  9715                           intcon	equ	0xFF2
  9716                           intcon2	equ	0xFF1
  9717                           postinc0	equ	0xFEE
  9718                           wreg	equ	0xFE8
  9719                           postdec1	equ	0xFE5
  9720                           fsr1l	equ	0xFE1
  9721                           indf2	equ	0xFDF
  9722                           postinc2	equ	0xFDE
  9723                           fsr2h	equ	0xFDA
  9724                           fsr2l	equ	0xFD9
  9725                           status	equ	0xFD8
  9726                           
  9727 ;; *************** function _Activate_Buzzer *****************
  9728 ;; Defined at:
  9729 ;;		line 372 in file "Lab7-8.c"
  9730 ;; Parameters:    Size  Location     Type
  9731 ;;		None
  9732 ;; Auto vars:     Size  Location     Type
  9733 ;;		None
  9734 ;; Return value:  Size  Location     Type
  9735 ;;		None               void
  9736 ;; Registers used:
  9737 ;;		wreg, status,2
  9738 ;; Tracked objects:
  9739 ;;		On entry : 0/0
  9740 ;;		On exit  : 0/0
  9741 ;;		Unchanged: 0/0
  9742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9743 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9744 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9745 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9746 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9747 ;;Total ram usage:        0 bytes
  9748 ;; Hardware stack levels used:    1
  9749 ;; This function calls:
  9750 ;;		Nothing
  9751 ;; This function is called by:
  9752 ;;		_Wait_One_Second_With_Beep
  9753 ;; This function uses a non-reentrant model
  9754 ;;
  9755                           
  9756                           	psect	text54
  9757  00DA1A                     __ptext54:
  9758                           	opt stack 0
  9759  00DA1A                     _Activate_Buzzer:
  9760                           	opt stack 27
  9761                           
  9762                           ;Lab7-8.c: 374: PR2 = 0b11111001 ;
  9763                           
  9764                           ;incstack = 0
  9765  00DA1A  0EF9               	movlw	249
  9766  00DA1C  6ECB               	movwf	4043,c	;volatile
  9767                           
  9768                           ;Lab7-8.c: 375: T2CON = 0b00000101 ;
  9769  00DA1E  0E05               	movlw	5
  9770  00DA20  6ECA               	movwf	4042,c	;volatile
  9771                           
  9772                           ;Lab7-8.c: 376: CCPR2L = 0b01001010 ;
  9773  00DA22  0E4A               	movlw	74
  9774  00DA24  6EBB               	movwf	4027,c	;volatile
  9775                           
  9776                           ;Lab7-8.c: 377: CCP2CON = 0b00111100 ;
  9777  00DA26  0E3C               	movlw	60
  9778  00DA28  6EBA               	movwf	4026,c	;volatile
  9779  00DA2A  0012               	return		;funcret
  9780  00DA2C                     __end_of_Activate_Buzzer:
  9781                           	opt stack 0
  9782                           tblptru	equ	0xFF8
  9783                           tblptrh	equ	0xFF7
  9784                           tblptrl	equ	0xFF6
  9785                           tablat	equ	0xFF5
  9786                           prodh	equ	0xFF4
  9787                           prodl	equ	0xFF3
  9788                           intcon	equ	0xFF2
  9789                           intcon2	equ	0xFF1
  9790                           postinc0	equ	0xFEE
  9791                           wreg	equ	0xFE8
  9792                           postdec1	equ	0xFE5
  9793                           fsr1l	equ	0xFE1
  9794                           indf2	equ	0xFDF
  9795                           postinc2	equ	0xFDE
  9796                           fsr2h	equ	0xFDA
  9797                           fsr2l	equ	0xFD9
  9798                           status	equ	0xFD8
  9799                           tblptru	equ	0xFF8
  9800                           tblptrh	equ	0xFF7
  9801                           tblptrl	equ	0xFF6
  9802                           tablat	equ	0xFF5
  9803                           prodh	equ	0xFF4
  9804                           prodl	equ	0xFF3
  9805                           intcon	equ	0xFF2
  9806                           intcon2	equ	0xFF1
  9807                           postinc0	equ	0xFEE
  9808                           wreg	equ	0xFE8
  9809                           postdec1	equ	0xFE5
  9810                           fsr1l	equ	0xFE1
  9811                           indf2	equ	0xFDF
  9812                           postinc2	equ	0xFDE
  9813                           fsr2h	equ	0xFDA
  9814                           fsr2l	equ	0xFD9
  9815                           status	equ	0xFD8
  9816                           
  9817                           	psect	rparam
  9818  0000                     tblptru	equ	0xFF8
  9819                           tblptrh	equ	0xFF7
  9820                           tblptrl	equ	0xFF6
  9821                           tablat	equ	0xFF5
  9822                           prodh	equ	0xFF4
  9823                           prodl	equ	0xFF3
  9824                           intcon	equ	0xFF2
  9825                           intcon2	equ	0xFF1
  9826                           postinc0	equ	0xFEE
  9827                           wreg	equ	0xFE8
  9828                           postdec1	equ	0xFE5
  9829                           fsr1l	equ	0xFE1
  9830                           indf2	equ	0xFDF
  9831                           postinc2	equ	0xFDE
  9832                           fsr2h	equ	0xFDA
  9833                           fsr2l	equ	0xFD9
  9834                           status	equ	0xFD8


Data Sizes:
    Strings     103
    Constant    475
    Data        35
    BSS         54
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     64     122
    BANK0           128      0      31
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), SW_MODE_Txt(COMRAM[2]), SW_NSLT_Txt(COMRAM[2]), SW_NSPED_Txt(COMRAM[2]), 
		 -> SW_EWLT_Txt(COMRAM[2]), SW_EWPED_Txt(COMRAM[2]), PED_NS_Count(COMRAM[3]), PED_EW_Count(COMRAM[3]), 
		 -> NSLT_Count(COMRAM[3]), NS_Count(COMRAM[3]), EWLT_Count(COMRAM[3]), EW_Count(COMRAM[3]), 
		 -> FlashingS_Txt(COMRAM[2]), FlashingR_Txt(COMRAM[2]), Act_Mode_Txt(COMRAM[2]), buffer(BANK0[31]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), SW_MODE_Txt(COMRAM[2]), SW_NSLT_Txt(COMRAM[2]), SW_NSPED_Txt(COMRAM[2]), 
		 -> SW_EWLT_Txt(COMRAM[2]), SW_EWPED_Txt(COMRAM[2]), PED_NS_Count(COMRAM[3]), PED_EW_Count(COMRAM[3]), 
		 -> NSLT_Count(COMRAM[3]), NS_Count(COMRAM[3]), EWLT_Count(COMRAM[3]), EW_Count(COMRAM[3]), 
		 -> FlashingS_Txt(COMRAM[2]), FlashingR_Txt(COMRAM[2]), Act_Mode_Txt(COMRAM[2]), buffer(BANK0[31]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_14(CODE[2]), STR_13(CODE[2]), STR_12(CODE[21]), STR_11(CODE[4]), 
		 -> STR_10(CODE[4]), STR_9(CODE[7]), STR_8(CODE[12]), STR_7(CODE[7]), 
		 -> STR_6(CODE[10]), STR_5(CODE[2]), STR_4(CODE[4]), STR_3(CODE[4]), 
		 -> STR_2(CODE[6]), STR_1(CODE[20]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    txt	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), SW_MODE_Txt(COMRAM[2]), SW_NSLT_Txt(COMRAM[2]), SW_NSPED_Txt(COMRAM[2]), 
		 -> SW_EWLT_Txt(COMRAM[2]), SW_EWPED_Txt(COMRAM[2]), PED_NS_Count(COMRAM[3]), PED_EW_Count(COMRAM[3]), 
		 -> NSLT_Count(COMRAM[3]), NS_Count(COMRAM[3]), EWLT_Count(COMRAM[3]), EW_Count(COMRAM[3]), 
		 -> FlashingS_Txt(COMRAM[2]), FlashingR_Txt(COMRAM[2]), Act_Mode_Txt(COMRAM[2]), buffer(BANK0[31]), 


Critical Paths under _main in COMRAM

    _init_UART->_OpenUSART
    _Night_Mode->_Wait_N_Seconds
    _Initialize_Screen->_drawtext
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawRect->_drawFastHLine
    _drawRect->_drawFastVLine
    _drawFastHLine->_setAddrWindow
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul
    _Day_Mode->_PED_Control
    _Wait_N_Seconds->_update_LCD_count
    _update_LCD_count->_drawtext
    _Wait_One_Second->_update_LCD_misc
    _update_LCD_misc->_drawtext
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _Set_NS_LT->_update_LCD_color
    _Set_NS->_update_LCD_color
    _Set_EW_LT->_update_LCD_color
    _Set_EW->_update_LCD_color
    _update_LCD_color->_fillCircle
    _fillCircle->_fillCircleHelper
    _fillCircleHelper->_drawFastVLine
    _drawCircle->_drawPixel
    _PED_Control->_update_LCD_PED_Count
    _update_LCD_PED_Count->_drawtext
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _write_data->_spiwrite
    _write_command->_spiwrite

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  371402
                                             62 COMRAM     2     2      0
                           _Day_Mode
                           _Init_ADC
                  _Initialize_Screen
                         _Night_Mode
                           ___awtoft
                            ___ftdiv
                             ___ftge
                             ___wmul
                       _get_full_ADC
                            _init_IO
                          _init_UART
 ---------------------------------------------------------------------------------
 (1) _init_UART                                            0     0      0     273
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            3     1      2     273
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _init_IO                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Night_Mode                                           0     0      0  146106
                             _Set_EW
                          _Set_EW_LT
                             _Set_NS
                          _Set_NS_LT
                     _Wait_N_Seconds
 ---------------------------------------------------------------------------------
 (1) _Initialize_Screen                                    0     0      0   51838
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                         _drawCircle
                           _drawRect
                           _drawtext
                         _fillCircle
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _fillScreen                                           2     0      2    1660
                                             19 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (3) _fillRectangle                                       12     7      5    1585
                                              7 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _drawRect                                            11     1     10    5386
                                             18 COMRAM    11     1     10
                      _drawFastHLine
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (3) _drawFastHLine                                       11     7      4    1488
                                              7 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _TFT_GreenTab_Initialize                              0     0      0    3402
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd3                                                0     0      0    1611
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd2red                                             0     0      0      90
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd1                                                0     0      0    1611
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _LCD_Reset                                            0     0      0    1521
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             6     4      2    1521
                                              6 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Init_ADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Day_Mode                                             0     0      0  168075
                        _PED_Control
                             _Set_EW
                          _Set_EW_LT
                             _Set_NS
                          _Set_NS_LT
                     _Wait_N_Seconds
 ---------------------------------------------------------------------------------
 (2) _Wait_N_Seconds                                       2     2      0   67866
                                             59 COMRAM     2     2      0
                    _Wait_One_Second
                   _update_LCD_count
 ---------------------------------------------------------------------------------
 (3) _update_LCD_count                                     2     1      1   21817
                                             57 COMRAM     2     1      1
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (3) _Wait_One_Second                                      0     0      0   45959
                   _Wait_Half_Second
                           _drawtext
                             _strcpy
                    _update_LCD_misc
 ---------------------------------------------------------------------------------
 (4) _update_LCD_misc                                      2     2      0   24755
                                             57 COMRAM     2     2      0
                           ___awtoft
                            ___ftdiv
                             ___ftge
                             ___wmul
                           _drawtext
                       _get_full_ADC
 ---------------------------------------------------------------------------------
 (1) _get_full_ADC                                         6     4      2      23
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) ___ftge                                               9     3      6     348
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             15     9      6    2201
                                             12 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) ___awtoft                                             4     1      3    1826
                                              8 COMRAM     4     1      3
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftpack                                             8     3      5    1629
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    1559
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _Set_NS_LT                                            1     1      0   19560
                                             53 COMRAM     1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (2) _Set_NS                                               1     1      0   19560
                                             53 COMRAM     1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (2) _Set_EW_LT                                            1     1      0   19560
                                             53 COMRAM     1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (2) _Set_EW                                               1     1      0   19560
                                             53 COMRAM     1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (3) _update_LCD_color                                     3     2      1   19516
                                             50 COMRAM     3     2      1
                         _drawCircle
                         _fillCircle
 ---------------------------------------------------------------------------------
 (4) _fillCircle                                           8     0      8    9639
                                             42 COMRAM     8     0      8
                      _drawFastVLine
                   _fillCircleHelper
 ---------------------------------------------------------------------------------
 (5) _fillCircleHelper                                    24    12     12    3607
                                             18 COMRAM    24    12     12
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (4) _drawCircle                                          20    12      8    9026
                                             11 COMRAM    20    12      8
                          _drawPixel
 ---------------------------------------------------------------------------------
 (2) _PED_Control                                          3     2      1   21969
                                             59 COMRAM     3     2      1
          _Wait_One_Second_With_Beep
               _update_LCD_PED_Count
 ---------------------------------------------------------------------------------
 (3) _update_LCD_PED_Count                                 2     1      1   21729
                                             57 COMRAM     2     1      1
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (4) _drawtext                                            17     9      8   19645
                                             40 COMRAM    17     9      8
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (5) _strlen                                               6     4      2     143
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (5) _drawChar                                            11     4      7    8408
                                             29 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (6) _fillRect                                            11     6      5    3044
                                             18 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (7) _drawFastVLine                                       11     7      4    2442
                                              7 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (6) _drawPixel                                            4     1      3    3367
                                              7 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (8) _setAddrWindow                                        4     1      3     814
                                              3 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (9) _write_data                                           1     1      0      45
                                              2 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (9) _write_command                                        1     1      0      45
                                              2 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (8) _spiwrite                                             2     2      0      23
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     689
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4     932
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     936
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _Wait_One_Second_With_Beep                            0     0      0       0
                    _Activate_Buzzer
                  _Deactivate_Buzzer
                   _Wait_Half_Second
 ---------------------------------------------------------------------------------
 (4) _Wait_Half_Second                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Deactivate_Buzzer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Activate_Buzzer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Day_Mode
     _PED_Control
       _Wait_One_Second_With_Beep
         _Activate_Buzzer
         _Deactivate_Buzzer
         _Wait_Half_Second
       _update_LCD_PED_Count
         ___awdiv
         ___awmod
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Set_EW
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_EW_LT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS_LT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Wait_N_Seconds
       _Wait_One_Second
         _Wait_Half_Second
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _strcpy
         _update_LCD_misc
           ___awtoft
             ___ftpack
             ___wmul (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftge
           ___wmul
           _drawtext
             _drawChar
               ___wmul
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _get_full_ADC
       _update_LCD_count
         ___awdiv
         ___awmod
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
   _Init_ADC
   _Initialize_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawCircle
       _drawPixel
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_data
           _spiwrite
     _drawRect
       _drawFastHLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
       _drawFastVLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillCircle
       _drawFastVLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
       _fillCircleHelper
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   _Night_Mode
     _Set_EW
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_EW_LT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS_LT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Wait_N_Seconds
       _Wait_One_Second
         _Wait_Half_Second
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _strcpy
         _update_LCD_misc
           ___awtoft
             ___ftpack
             ___wmul (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftge
           ___wmul
           _drawtext
             _drawChar
               ___wmul
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _get_full_ADC
       _update_LCD_count
         ___awdiv
         ___awmod
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
   ___awtoft
     ___ftpack
     ___wmul (ARG)
   ___ftdiv
     ___awtoft (ARG)
       ___ftpack
       ___wmul (ARG)
     ___ftpack (ARG)
     ___wmul (ARG)
   ___ftge
   ___wmul
   _get_full_ADC
   _init_IO
   _init_UART
     _OpenUSART

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      1F       5       24.2%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     40      7A       1       96.1%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      99      34        0.0%
DATA                 0      0      99       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Wed Oct 13 22:46:33 2021

                       drawCircle@f 001A                         drawCircle@r 0010  
                       drawCircle@x 001C                         drawCircle@y 001E  
         _Wait_One_Second_With_Beep DA66                         _SSPSTATbits 000FC7  
                      drawCircle@x0 000C                        drawCircle@y0 000E  
                      ___awdiv@sign 0006                 ___wmul@multiplicand 0003  
          update_LCD_color@Circle_Y 0035                                 l113 DF64  
                               l123 DA4C                                 l230 E7FE  
                               l401 DD32                                 l410 DD76  
                               l226 E800                                 l403 DD36  
                               l227 E76C                                 l404 DD3C  
                               l412 DD7A                                 l173 E1CC  
                               l237 F092                                 l405 DD40  
                               l413 DD80                                 l229 E7DC  
                               l406 DD62                                 l414 DD84  
                               l430 E696                                 l167 DBC0  
                               l191 ED2A                                 l255 EC32  
                               l415 DDA6                                 l271 E254  
                               l432 E6E6                                 l530 E024  
                               l531 E026                                 l436 E724  
                               l444 E42A                                 l524 DFFE  
                               l189 EE50                                 l533 E040  
                               l198 EDA6                                 l471 F69C  
                               l383 DDBA                                 l456 DAA4  
                               l536 DB38                                 l392 DDFE  
                               l376 DAF0                                 l480 EFCE  
                               l528 E018                                 l385 DDBE  
                               l529 E01A                                 l386 DDC4  
                               l394 DE02                                 l387 DDC8  
                               l395 DE08                                 l379 DB10  
                               l388 DDEA                                 l396 DE0C  
                               l397 DE2E                                 l742 E0C2  
                               l487 E598                                 l729 E2EA  
                               l754 DC60                                 l844 E65E  
                               l916 E9C0                                 l925 E380  
                               l855 E636                                 l919 E98C  
                 ?_Wait_Half_Second 0001       update_LCD_PED_Count@direction 003B  
                               _PR2 000FCB                   _Deactivate_Buzzer D9E4  
                               _dir 0078                                 _nbr 0069  
                               _txt 006B                      drawFastHLine@w 0009  
                    drawFastHLine@x 0012                      drawFastHLine@y 0008  
                      ___awmod@sign 0006             __end_of_update_LCD_misc F33C  
                               wreg 000FE8                  ??_Wait_Half_Second 0001  
                ?_Deactivate_Buzzer 0001                     ??_fillRectangle 000D  
                      __CFG_LVP$OFF 000000             _TFT_GreenTab_Initialize DB3A  
                      ___ftdiv@cntr 0016                        ___ftdiv@sign 001B  
                      __CFG_WDT$OFF 000000                      drawFastVLine@h 0009  
                              l3011 E294                                l3013 E29E  
                              l3005 E27E                                l1093 DC9E  
                              l3031 E2E0                                l3023 E2C4  
                              l3015 E2A6                                l3027 E2D0  
                              l3051 E074                                l3043 E058  
                              l3211 E216                      drawFastVLine@x 0012  
                              l3053 E07E                                l3221 E23C  
                    drawFastVLine@y 0008                                l3055 E086  
                              l3063 E0A8                                l3047 E066  
                              l3231 F41C                                l3223 E24A  
                              l3207 E1DE                                l2601 DBA2  
                              l3401 DD8A                                l3067 E0B8  
                              l3059 E09C                                l3235 F4F0  
                              l3331 DFEE                                l2613 DE56  
                              l3245 E4DA                                l3405 DBC8  
                              l2701 E5FE                                l3173 E7A4  
                              l3255 E588                                l3239 F5C6  
                              l2711 E63E                                l2703 E61E  
                              l3423 DB6A                                l3167 E736  
                              l3335 DFF6                                l3327 DFE4  
                              l2609 DE3A                                l2633 ED26  
                              l2625 ED0C                                l3249 E530  
                              l3417 DBE4                                l3409 DBD2  
                              l2705 E62A                                l3433 DB86  
                              l3193 E7EA                                l3185 E7D2  
                              l2643 ED66                                l2635 ED2E  
                              l2803 E8FE                                l3283 EF04  
                              l3275 EE56                                l3427 DB74  
                              l3347 E010                                l3339 E002  
                              l2645 ED9A                                l2629 ED18  
                              l2741 E86E                                l2717 E650  
                              l2805 E918                                l3293 EFB2  
                              l3189 E7E0                                l2583 E18E  
                              l2663 EE1C                                l2655 EDC8  
                              l2671 EE4C                                l2647 ED9E  
                              l2639 ED36                                l3287 EF5C  
                              l3279 EEAC                                l3199 E7FA  
                              l2593 E1B4                                l2665 EE44  
                              l2657 EDF0                                l2753 E8CC  
                              l2745 E888                                l2729 E82A  
                              l2905 F078                                l3393 DD46  
                              l3377 DDCE                                l3385 DE12  
                              l2809 E926                                l3609 E392  
                              l2595 E1C2                                l2579 E156  
                              l2755 E8D2                                l2851 DC3C  
                              l3635 E3E6                                l2677 DC6C  
                              l2933 F168                                l2941 DC08  
                              l2693 E5BA                                l2829 E966  
                              l3901 E4C0                                l2679 DC72  
                              l2783 EC94                                l2767 EC18  
                              l2695 E5C6                                l2839 E99A  
                              l2863 E350                                l3559 E670  
                              l2697 E5E6                                l2689 E5AA  
                              l2961 F224                                l3585 E6D2  
                              l3905 E4CC                                l2787 ECE6  
                              l2939 DBFE                                l2859 E31E  
                              l2869 E37C                                l2973 F24E  
                              l2965 F232                                l2977 F25C  
                              l2969 F240                                l2979 F262  
                              l2999 E26C                                STR_1 FFAD  
                              STR_2 FFE5                                STR_3 FFEB  
                              STR_4 FFEF                                STR_5 FFFD  
                              STR_6 FFCD                                STR_7 FFDE  
                              STR_8 FFC1                                STR_9 FFD7  
                              u1320 E184                                u2130 E20C  
                              u2050 E764                                u2060 E79A  
                              u1610 E852                                u1470 EDFE  
                              u1711 E8F0                                u2520 E4BA  
                              u2530 E4BC                                u1731 E90E  
                              u1840 F1F6                                u1850 F1F8  
                              _MODE 0067                                _RBPU 007F8F  
                              _TRMT 007D61                 ??_Deactivate_Buzzer 0001  
                              _main E42C                                _font FDBD  
                      ___ftpack@arg 0001                        ___ftpack@exp 0004  
                    ??_get_full_ADC 0003                                fsr2h 000FDA  
                              fsr1l 000FE1                                indf2 000FDF  
                              fsr2l 000FD9                                _wrap 0041  
                              _volt 0064                     drawFastHLine@hi 0010  
                   drawFastHLine@lo 0011            __end_of_update_LCD_color F69E  
          __end_of_update_LCD_count EFD0                  __size_of_LCD_Reset 0012  
                              prodh 000FF4                                prodl 000FF3  
                              start 0000                     ??_drawFastHLine 000C  
                   ??_drawFastVLine 000C                        ___param_bank 000010  
                      _Act_Mode_Txt 0054           __end_of_Deactivate_Buzzer D9EC  
                   drawFastVLine@hi 0010                     drawFastVLine@lo 0011  
                       _SW_EWLT_Txt 005A                         _SW_MODE_Txt 005E  
                             ?_main 0001                     __end_of___awdiv E2EC  
                   drawCircle@ddF_x 0016                               STR_10 FFF7  
                   drawCircle@ddF_y 0018                               STR_11 FFF3  
                             STR_12 FF98                               STR_13 FFFD  
                             STR_14 FFFB                     __end_of___awmod E0C4  
                   __end_of___ftdiv E9C2                               _T0CON 000FD5  
                   ___awdiv@divisor 0003                               _T2CON 000FCA  
                             _T3CON 000FB1                     ___awdiv@counter 0005  
                   drawCircle@color 0012                               _RCSTA 000FAB  
                             _TMR0H 000FD7                               _TMR0L 000FD6  
                             _SPBRG 000FAF                               _TRISA 000F92  
                             _TRISB 000F93                               _TRISC 000F94  
                             _TRISD 000F95                               _TRISE 000F96  
                             _TXREG 000FAD                               _TXSTA 000FAC  
                             _Count 006D                        ?_PED_Control 003C  
                             _Rcmd1 EAB4                               _Rcmd3 E9C2  
                       _SW_NSLT_Txt 0060                       drawRect@color 001B  
                     ___awtoft@sign 000C                     __end_of_init_IO DA92  
                             _font2 FEBC               fillCircleHelper@ddF_x 0021  
             fillCircleHelper@ddF_y 0023                   ??_Wait_One_Second 003C  
                     ___ftpack@sign 0005               fillCircleHelper@delta 001B  
             fillCircleHelper@color 001D                      __CFG_BOREN$OFF 000000  
                             tablat 000FF5                               status 000FD8  
            ??_update_LCD_PED_Count 003B                    __end_of_Day_Mode E726  
                    _Wait_N_Seconds DB64                     write_data@data_ 0003  
                   __initialization DCDE                        __end_of_main E4D6  
                      __end_of_font FEBC                    __end_of_Init_ADC D9FA  
                  __end_of_Rcmd2red DCDE                          _Night_Mode E382  
                            ??_main 003F                       __activetblptr 000002  
             Wait_N_Seconds@seconds 003C                   __end_of_LCD_Reset DA3E  
                      _SW_EWPED_Txt 005C           ??_TFT_GreenTab_Initialize 000D  
                  ?_update_LCD_misc 0001                              ?_Rcmd1 0001  
                            ?_Rcmd3 0001                              _ADCON0 000FC2  
                            _ADCON1 000FC1                              _ADCON2 000FC0  
                            _ADRESH 000FC4                              _ADRESL 000FC3  
                            _CCPR2L 000FBB                PED_Control@direction 003D  
                  ___awdiv@dividend 0001                    __end_of___awtoft DC62  
                  __end_of___ftpack E660                              _OSCCON 000FD3  
                            _SPBRGH 000FB0                              _SSPBUF 000FC9  
            __end_of_Wait_N_Seconds DB92                        _SW_NSPED_Txt 0062  
                  __end_of_delay_ms DF6C                              _Set_EW DD20  
                            _Set_NS DDA8                    __end_of_fillRect DE7A  
                  __end_of_drawChar EE52                    __end_of_drawRect DFD2  
                __size_of_Set_EW_LT 0044                  __size_of_OpenUSART 0070  
                            ___ftge E2EC                  __size_of_Set_NS_LT 0044  
          __size_of_Activate_Buzzer 0012                              ___wmul DB12  
                         ??___awdiv 0005           __size_of_fillCircleHelper 0138  
                  __end_of_drawtext E8E0                           ??___awmod 0005  
                         ??___ftdiv 0013                              _buffer 0080  
                            clear_0 DCE4                              clear_1 DCF0  
                  ___awdiv@quotient 0007                     ___awmod@divisor 0003  
        __size_of_Deactivate_Buzzer 0008                     ___awmod@counter 0005  
                      drawtext@size 0030                              _strcpy DBF4  
                            _strlen DC62                __end_of_get_full_ADC DB12  
                         ??_init_IO 0001                        __pdataCOMRAM 0041  
__size_of_Wait_One_Second_With_Beep 0016                         Set_EW@color 0036  
                      __mediumconst FDBC                              tblptrh 000FF7  
                            tblptrl 000FF6                              tblptru 000FF8  
                  __end_of_spiwrite DA52                         Set_NS@color 0036  
                        __accesstop 0080             __end_of__initialization DD16  
                        ___ftge@ff1 0001                          ___ftge@ff2 0004  
                   ?_Wait_N_Seconds 0001                       ___rparam_used 000001  
                        ___ftdiv@f1 000D                          ___ftdiv@f2 0010  
                        ___ftdiv@f3 0017                          ___awtoft@c 0009  
                     __end_of_Rcmd1 EBC4                       __end_of_Rcmd3 EAB4  
                    __pcstackCOMRAM 0001                       __end_of_font2 FF98  
                       ?_Night_Mode 0001                      drawPixel@color 0009  
            __size_of_write_command 0010                           ?_Day_Mode 0001  
        fillCircleHelper@cornername 0019                             ??_Rcmd1 000D  
                           ??_Rcmd3 000D                  __size_of_drawPixel 0030  
                 __end_of_Set_EW_LT DDA8                   __end_of_OpenUSART E042  
                 __end_of_Set_NS_LT DE30                __size_of_PED_Control 0032  
                        __pbssBANK0 0080                           ?_Init_ADC 0001  
                         ?_Rcmd2red 0001                  __size_of_init_UART 0014  
         __size_of_Wait_Half_Second 001A                     spiwrite@spidata 0002  
                 ?_update_LCD_color 0033                   ?_update_LCD_count 003A  
                           ?_Set_EW 0001                             ?_Set_NS 0001  
                __CFG_CCP2MX$PORTBE 000000                  ??_update_LCD_color 0034  
                ??_update_LCD_count 003B                             ?___ftge 0001  
                           ?___wmul 0001              __size_of_setAddrWindow 004E  
                           _CCP2CON 000FBA           update_LCD_PED_Count@count 003A  
                         ?___awtoft 0009                           ?___ftpack 0001  
                   _Wait_One_Second E0C4                          _fillCircle DEC8  
                           ?_strcpy 0001                             ?_strlen 0001  
                 ??_Activate_Buzzer 0001                          _fillScreen DAAC  
                        _drawCircle EFD0                          ??_Day_Mode 003F  
                         ?_delay_ms 0007                           ?_fillRect 0013  
         update_LCD_count@direction 003B                           ?_drawChar 001E  
                           _SSPCON1 000FC6                           ?_drawRect 0013  
                           _SSPSTAT 000FC7               __end_of_fillRectangle E802  
                         ?_drawtext 0029                             _SW_EWLT 0071  
                           _SW_MODE 0073                          ??_Init_ADC 0001  
                           _SW_NSLT 0074                          ??_Rcmd2red 0004  
               __size_of_Night_Mode 00AA                       _write_command D9FA  
                           __Hparam 0000                             __Lparam 0000  
                   __size_of_Set_EW 0044                     __size_of_Set_NS 0044  
             __end_of_drawFastHLine E256                   __end_of_drawPixel DBC2  
             __end_of_drawFastVLine E1CE                    _fillCircleHelper EBC4  
                   __size_of___ftge 0096                             ___awdiv E256  
                           ___awmod E042                             ___ftdiv E8E0  
                   __size_of___wmul 0028               __size_of_get_full_ADC 0026  
                         ?_spiwrite 0001                             __pcinit DCDE  
                        ??___awtoft 000C                          ??___ftpack 0006  
                           __ramtop 1000                             __ptext0 E42C  
                           __ptext1 DA52                             __ptext2 DFD2  
                           __ptext3 DA7C                             __ptext4 E382  
                           __ptext5 F69E                             __ptext6 DAAC  
                           __ptext7 E726                             __ptext8 DF6C  
                           __ptext9 E1CE                   __end_of_init_UART DA66  
                         _T0CONbits 000FD5                     __size_of_strcpy 0032  
                   __size_of_strlen 003E                             _init_IO DA7C  
                         _T3CONbits 000FB1                    ___awmod@dividend 0001  
                        ??_delay_ms 0009                       drawtext@_text 002A  
                     drawtext@color 002C                          ??_fillRect 0018  
                        ??_drawChar 0025                           _LCD_Reset DA2C  
                        ??_drawRect 001D                       _setAddrWindow DE7A  
                drawFastHLine@color 000A                          delay_ms@ms 0007  
              end_of_initialization DD16                          ??_drawtext 0031  
                    ?_write_command 0001                       __Lmediumconst FDBC  
                         _PED_Count 0070                        _get_full_ADC DAEC  
                      PED_Control@i 003E       __size_of_update_LCD_PED_Count 00C4  
           __end_of_Wait_One_Second E146                           _RCSTAbits 000FAB  
                           postdec1 000FE5                             postinc0 000FEE  
                           postinc2 000FDE                          ??_spiwrite 0001  
                           strlen@s 0001                     fillCircle@color 0031  
                       ?_fillCircle 002B                           _PORTAbits 000F80  
                  drawtext@cursor_x 0039                    drawtext@cursor_y 0038  
                         _PORTBbits 000F81                           _PORTDbits 000F83  
                         _PORTEbits 000F84                         ?_fillScreen 0014  
                       ?_drawCircle 000C                          drawChar@bg 0022  
                         _TRISCbits 000F94                      ?_setAddrWindow 0004  
                        ?_LCD_Reset 0001                    ??_Wait_N_Seconds 003C  
                  drawtext@textsize 0033            __size_of_update_LCD_misc 01BE  
                        drawPixel@x 000B                          drawPixel@y 0008  
                  _Wait_Half_Second DA92                         ___ftdiv@exp 001A  
                         _TXSTAbits 000FAC                  PED_Control@Num_Sec 003C  
                get_full_ADC@result 0005                      __end_of_Set_EW DD64  
                    __end_of_Set_NS DDEC                      __end_of___ftge E382  
                    __end_of___wmul DB3A                       delay_ms@count 000B  
                        _write_data DA0A                       __pidataCOMRAM DAC9  
                      ??_Night_Mode 003E            ?_TFT_GreenTab_Initialize 0001  
                        drawtext@bg 002E                      __end_of_strcpy DC26  
                    __end_of_strlen DCA0                 start_initialization DCDE  
                 __size_of_Day_Mode 00C6                     ??_write_command 0003  
                         _Set_EW_LT DD64                           _OpenUSART DFD2  
                         _Set_NS_LT DDEC                 __size_of_fillCircle 0052  
                  __CFG_OSC$INTIO67 000000                   __size_of_Init_ADC 000E  
                __end_of_Night_Mode E42C                   __size_of_Rcmd2red 003E  
               __size_of_fillScreen 001C                     Wait_N_Seconds@I 003D  
               __size_of_drawCircle 01AE                            ??_Set_EW 0036  
                          ??_Set_NS 0036                     _Activate_Buzzer DA1A  
                  ?_Wait_One_Second 0001                            ??___ftge 0007  
                          ??___wmul 0005                     setAddrWindow@x0 0007  
                   setAddrWindow@x1 0005                     setAddrWindow@y0 0004  
                   setAddrWindow@y1 0006                            ??_strcpy 0005  
                          ??_strlen 0003                        _PED_EW_Count 004E  
         __size_of_update_LCD_color 0362           __size_of_update_LCD_count 017E  
                 __size_of___awtoft 003C                   __size_of___ftpack 00C6  
                       __pbssCOMRAM 0064                       ??_PED_Control 003D  
                   ??_setAddrWindow 0007                        _PED_NS_Count 0051  
                       ??_LCD_Reset 000D            __end_of_fillCircleHelper ECFC  
                 __size_of_delay_ms 0052          ?_Wait_One_Second_With_Beep 0001  
                 __size_of_fillRect 004A                   __size_of_drawChar 0156  
                        ?_Set_EW_LT 0001                          ?_OpenUSART 0001  
                 __size_of_drawRect 0066                          ?_Set_NS_LT 0001  
                 __size_of_drawtext 00DE                   ??_update_LCD_misc 003A  
   __end_of_TFT_GreenTab_Initialize DB64                       __pmediumconst FDBC  
                          ?___awdiv 0001                            ?___awmod 0001  
                          ?___ftdiv 000D                           __tft_type 0076  
                         _direction 0079                  drawFastVLine@color 000A  
                       ?_write_data 0001                           _drawPixel DB92  
                 __size_of_spiwrite 0014                            ?_init_IO 0001  
                 _Initialize_Screen F69E                      __size_of_Rcmd1 0110  
                    __size_of_Rcmd3 00F2                           _init_UART DA52  
                ?_Initialize_Screen 0001                            _FLASHING 006E  
 __end_of_Wait_One_Second_With_Beep DA7C                 __end_of_PED_Control DBF4  
           __end_of_Activate_Buzzer DA2C                      ___wmul@product 0005  
               ??_Initialize_Screen 003A                            _PIE1bits 000F9D  
                          _PIR1bits 000F9E                            _PIR2bits 000FA1  
                          _EW_Count 0045                           fillRect@h 0015  
                         fillRect@i 001C                           fillRect@w 0014  
                         fillRect@x 001B                           fillRect@y 0013  
                         drawChar@c 001F                           drawChar@i 0028  
                         drawChar@j 0027                        ??_fillCircle 0033  
                         drawChar@x 0026                           drawChar@y 001E  
                        ?_drawPixel 0008              __size_of_fillRectangle 00DC  
                          _NS_Count 004B                          _ADCON0bits 000FC2  
          __end_of_Wait_Half_Second DAAC                   ___wmul@multiplier 0001  
         __end_of_Initialize_Screen FDBC                        ??_fillScreen 0016  
                         drawRect@h 0019                           drawRect@w 0017  
                         drawRect@x 0013                           drawRect@y 0015  
                     _FlashingR_Txt 0056                       _FlashingS_Txt 0058  
                      ??_drawCircle 0014        __end_of_update_LCD_PED_Count E59A  
                         main@nStep 003F                            _SW_EWPED 0072  
             update_LCD_color@color 0033                            _Day_Mode E660  
                          _SW_NSPED 0075           update_LCD_color@direction 0034  
                        ?_init_UART 0001              __size_of_drawFastHLine 0088  
                         copy_data0 DD0A                           drawtext@i 0036  
            __size_of_drawFastVLine 0088                           drawtext@x 0035  
                         drawtext@y 0029                            _Init_ADC D9EC  
                 write_command@cmd_ 0003                         ??_Set_EW_LT 0036  
                       ??_OpenUSART 0003                         ??_Set_NS_LT 0036  
                          _Rcmd2red DCA0                 __size_of_write_data 0010  
                   OpenUSART@config 0003                  __end_of_fillCircle DF1A  
                          __Hrparam 0000                  __end_of_fillScreen DAC8  
             update_LCD_count@count 003A                            __Lrparam 0000  
                __end_of_drawCircle F17E                    __size_of___awdiv 0096  
                  __size_of___awmod 0082                    __size_of___ftdiv 00E2  
                          ___awtoft DC26                            ___ftpack E59A  
                  _update_LCD_color F33C                    _update_LCD_count EE52  
                  __size_of_init_IO 0016                         _PED_Control DBC2  
                          _delay_ms DF1A                            __ptext10 DB3A  
                          __ptext11 E9C2                            __ptext20 E0C4  
                          __ptext12 DCA0                            __ptext21 F17E  
                          __ptext13 EAB4                            __ptext30 DD64  
                          __ptext22 DAEC                            __ptext14 DA2C  
                          __ptext31 DD20                            __ptext23 E2EC  
                          __ptext15 DF1A                            __ptext40 ECFC  
                          __ptext32 F33C                            __ptext24 E8E0  
                          __ptext16 D9EC                            __ptext41 DE30  
                          __ptext33 DEC8                            __ptext25 DC26  
                          __ptext17 E660                            __ptext50 E256  
                          __ptext42 E146                            __ptext34 EBC4  
                          __ptext26 E59A                            __ptext18 DB64  
                          __ptext51 DA66                            __ptext43 DB92  
                          __ptext35 EFD0                            __ptext27 DBF4  
                          __ptext19 EE52                            __ptext52 DA92  
                          __ptext44 DE7A                            __ptext36 DBC2  
                          __ptext28 DDEC                            __ptext53 D9E4  
                          __ptext45 DA0A                            __ptext37 E4D6  
                          __ptext29 DDA8                            __ptext54 DA1A  
                          __ptext46 D9FA                            __ptext38 E802  
                          __ptext47 DA3E                            __ptext39 DC62  
                          __ptext48 DB12                            __ptext49 E042  
                          _fillRect DE30                            _drawChar ECFC  
                          _drawRect DF6C    __size_of_TFT_GreenTab_Initialize 002A  
                  _FLASHING_REQUEST 006F                            _colstart 0077  
                          _drawtext E802                          strcpy@from 0003  
                     _fillRectangle E726                    ?_Activate_Buzzer 0001  
                     __size_of_main 00AA                     fillRectangle@hi 0011  
                   fillRectangle@lo 0012                       _drawFastHLine E1CE  
                    Set_EW_LT@color 0036                       _drawFastVLine E146  
                          _spiwrite DA3E                         ??_drawPixel 000B  
                          _rowstart 007A                  fillCircleHelper@x0 0013  
                fillCircleHelper@y0 0015          __size_of_Initialize_Screen 071E  
                        _INTCONbits 000FF2                      OpenUSART@spbrg 0001  
                       ??_init_UART 0004                          _EWLT_Count 0042  
                 ?_fillCircleHelper 0013                           spiwrite@x 0001  
       ??_Wait_One_Second_With_Beep 0001                     _update_LCD_misc F17E  
                    ?_fillRectangle 0008                  ??_fillCircleHelper 001F  
             __end_of_write_command DA0A                     fillScreen@color 0014  
              update_LCD_misc@nStep 003A                _update_LCD_PED_Count E4D6  
           __size_of_Wait_N_Seconds 002E                        fillCircle@x0 002B  
                      fillCircle@y0 002D                      ?_drawFastHLine 0008  
                    fillRectangle@h 000A                      fillRectangle@w 0009  
                    fillRectangle@x 0013                      fillRectangle@y 0008  
                    ?_drawFastVLine 0008                   fillCircleHelper@f 0025  
                 fillCircleHelper@r 0017                   fillCircleHelper@x 0027  
                 fillCircleHelper@y 0029                        ??_write_data 0003  
                     fillRect@color 0016            __size_of_Wait_One_Second 0082  
                          strcpy@cp 0005                            strlen@cp 0005  
                          strcpy@to 0001                          _NSLT_Count 0048  
                       fillCircle@r 002F               __end_of_setAddrWindow DEC8  
                fillRectangle@color 000B                       drawChar@color 0020  
                __end_of_write_data DA1A                        drawChar@line 0025  
                    Set_NS_LT@color 0036                       ?_get_full_ADC 0001  
                      drawChar@size 0024               ?_update_LCD_PED_Count 003A  
