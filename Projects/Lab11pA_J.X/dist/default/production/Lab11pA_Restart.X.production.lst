

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Sat Nov 06 16:51:20 2021

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	text44,global,reloc=2,class=CODE,delta=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	text53,global,reloc=2,class=CODE,delta=1
    72                           	psect	text54,global,reloc=2,class=CODE,delta=1
    73                           	psect	text55,global,reloc=2,class=CODE,delta=1
    74                           	psect	text56,global,reloc=2,class=CODE,delta=1
    75                           	psect	text57,global,reloc=2,class=CODE,delta=1
    76                           	psect	text58,global,reloc=2,class=CODE,delta=1
    77                           	psect	text59,global,reloc=2,class=CODE,delta=1
    78                           	psect	text60,global,reloc=2,class=CODE,delta=1
    79                           	psect	text61,global,reloc=2,class=CODE,delta=1
    80                           	psect	text62,global,reloc=2,class=CODE,delta=1
    81                           	psect	text63,global,reloc=2,class=CODE,delta=1
    82                           	psect	text64,global,reloc=2,class=CODE,delta=1
    83                           	psect	text65,global,reloc=2,class=CODE,delta=1
    84                           	psect	text66,global,reloc=2,class=CODE,delta=1
    85                           	psect	text67,global,reloc=2,class=CODE,delta=1
    86                           	psect	text68,global,reloc=2,class=CODE,delta=1
    87                           	psect	text69,global,reloc=2,class=CODE,delta=1
    88                           	psect	text70,global,reloc=2,class=CODE,delta=1
    89                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    90                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    91                           	psect	text72,global,reloc=2,class=CODE,delta=1
    92                           	psect	text73,global,reloc=2,class=CODE,delta=1
    93                           	psect	text74,global,reloc=2,class=CODE,delta=1
    94                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    95                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    96  0000                     
    97                           	psect	idataCOMRAM
    98  002568                     __pidataCOMRAM:
    99                           	opt stack 0
   100                           
   101                           ;initializer for _setup_fan_temp
   102  002568  4B                 	db	75
   103                           
   104                           ;initializer for _tempSecond
   105  002569  FF                 	db	255
   106                           
   107                           ;initializer for _wrap
   108  00256A  01                 	db	1
   109                           
   110                           	psect	idataBANK0
   111  001D44                     __pidataBANK0:
   112                           	opt stack 0
   113                           
   114                           ;initializer for _array1
   115  001D44  A2                 	db	162
   116  001D45  62                 	db	98
   117  001D46  E2                 	db	226
   118  001D47  22                 	db	34
   119  001D48  02                 	db	2
   120  001D49  C2                 	db	194
   121  001D4A  E0                 	db	224
   122  001D4B  A8                 	db	168
   123  001D4C  90                 	db	144
   124  001D4D  68                 	db	104
   125  001D4E  98                 	db	152
   126  001D4F  B0                 	db	176
   127  001D50  30                 	db	48
   128  001D51  18                 	db	24
   129  001D52  7A                 	db	122
   130  001D53  10                 	db	16
   131  001D54  38                 	db	56
   132  001D55  5A                 	db	90
   133  001D56  42                 	db	66
   134  001D57  4A                 	db	74
   135  001D58  52                 	db	82
   136                           
   137                           ;initializer for _alarm_time
   138  001D59  30                 	db	48
   139  001D5A  30                 	db	48
   140  001D5B  3A                 	db	58
   141  001D5C  30                 	db	48
   142  001D5D  30                 	db	48
   143  001D5E  3A                 	db	58
   144  001D5F  30                 	db	48
   145  001D60  30                 	db	48
   146  001D61  00                 	db	0
   147                           
   148                           ;initializer for _setup_alarm_time
   149  001D62  30                 	db	48
   150  001D63  30                 	db	48
   151  001D64  3A                 	db	58
   152  001D65  30                 	db	48
   153  001D66  30                 	db	48
   154  001D67  3A                 	db	58
   155  001D68  30                 	db	48
   156  001D69  30                 	db	48
   157  001D6A  00                 	db	0
   158                           
   159                           ;initializer for _setup_date
   160  001D6B  30                 	db	48
   161  001D6C  31                 	db	49
   162  001D6D  2F                 	db	47
   163  001D6E  30                 	db	48
   164  001D6F  31                 	db	49
   165  001D70  2F                 	db	47
   166  001D71  30                 	db	48
   167  001D72  30                 	db	48
   168  001D73  00                 	db	0
   169                           
   170                           ;initializer for _setup_time
   171  001D74  30                 	db	48
   172  001D75  30                 	db	48
   173  001D76  3A                 	db	58
   174  001D77  30                 	db	48
   175  001D78  30                 	db	48
   176  001D79  3A                 	db	58
   177  001D7A  30                 	db	48
   178  001D7B  30                 	db	48
   179  001D7C  00                 	db	0
   180                           
   181                           ;initializer for _setup_fan_text
   182  001D7D  30                 	db	48
   183  001D7E  37                 	db	55
   184  001D7F  35                 	db	53
   185  001D80  46                 	db	70
   186  001D81  00                 	db	0
   187                           
   188                           ;initializer for _Alarm_SW_Txt
   189  001D82  4F                 	db	79
   190  001D83  46                 	db	70
   191  001D84  46                 	db	70
   192  001D85  00                 	db	0
   193                           
   194                           ;initializer for _RTC_ALARM_Txt
   195  001D86  30                 	db	48
   196  001D87  00                 	db	0
   197                           
   198                           ;initializer for _date
   199  001D88  30                 	db	48
   200  001D89  30                 	db	48
   201  001D8A  2F                 	db	47
   202  001D8B  30                 	db	48
   203  001D8C  30                 	db	48
   204  001D8D  2F                 	db	47
   205  001D8E  30                 	db	48
   206  001D8F  30                 	db	48
   207  001D90  00                 	db	0
   208                           
   209                           ;initializer for _time
   210  001D91  30                 	db	48
   211  001D92  30                 	db	48
   212  001D93  3A                 	db	58
   213  001D94  30                 	db	48
   214  001D95  30                 	db	48
   215  001D96  3A                 	db	58
   216  001D97  30                 	db	48
   217  001D98  30                 	db	48
   218  001D99  00                 	db	0
   219                           
   220                           ;initializer for _RPM_Txt
   221  001D9A  30                 	db	48
   222  001D9B  30                 	db	48
   223  001D9C  30                 	db	48
   224  001D9D  30                 	db	48
   225  001D9E  00                 	db	0
   226                           
   227                           ;initializer for _DC_Txt
   228  001D9F  30                 	db	48
   229  001DA0  30                 	db	48
   230  001DA1  30                 	db	48
   231  001DA2  00                 	db	0
   232                           
   233                           ;initializer for _Fan_SW_Txt
   234  001DA3  4F                 	db	79
   235  001DA4  46                 	db	70
   236  001DA5  46                 	db	70
   237  001DA6  00                 	db	0
   238                           
   239                           ;initializer for _tempC
   240  001DA7  2B                 	db	43
   241  001DA8  32                 	db	50
   242  001DA9  35                 	db	53
   243  001DAA  00                 	db	0
   244                           
   245                           ;initializer for _tempF
   246  001DAB  2B                 	db	43
   247  001DAC  37                 	db	55
   248  001DAD  37                 	db	55
   249  001DAE  00                 	db	0
   250                           
   251                           	psect	idataBANK1
   252  002392                     __pidataBANK1:
   253                           	opt stack 0
   254                           
   255                           ;initializer for _buffer
   256  002392  20                 	db	32
   257  002393  45                 	db	69
   258  002394  43                 	db	67
   259  002395  45                 	db	69
   260  002396  33                 	db	51
   261  002397  33                 	db	51
   262  002398  30                 	db	48
   263  002399  31                 	db	49
   264  00239A  4C                 	db	76
   265  00239B  20                 	db	32
   266  00239C  46                 	db	70
   267  00239D  61                 	db	97
   268  00239E  6C                 	db	108
   269  00239F  6C                 	db	108
   270  0023A0  27                 	db	39
   271  0023A1  32                 	db	50
   272  0023A2  31                 	db	49
   273  0023A3  20                 	db	32
   274  0023A4  4C                 	db	76
   275  0023A5  31                 	db	49
   276  0023A6  31                 	db	49
   277  0023A7  00                 	db	0
   278  0023A8  00                 	db	0
   279  0023A9  00                 	db	0
   280  0023AA  00                 	db	0
   281  0023AB  00                 	db	0
   282  0023AC  00                 	db	0
   283  0023AD  00                 	db	0
   284  0023AE  00                 	db	0
   285  0023AF  00                 	db	0
   286  0023B0  00                 	db	0
   287                           
   288                           	psect	mediumconst
   289  00FD26                     __pmediumconst:
   290                           	opt stack 0
   291  00FD26  00                 	db	0
   292  00FD27                     _font:
   293                           	opt stack 0
   294  00FD27  00                 	db	0
   295  00FD28  00                 	db	0
   296  00FD29  00                 	db	0
   297  00FD2A  00                 	db	0
   298  00FD2B  00                 	db	0
   299  00FD2C  00                 	db	0
   300  00FD2D  00                 	db	0
   301  00FD2E  5F                 	db	95
   302  00FD2F  00                 	db	0
   303  00FD30  00                 	db	0
   304  00FD31  00                 	db	0
   305  00FD32  07                 	db	7
   306  00FD33  00                 	db	0
   307  00FD34  07                 	db	7
   308  00FD35  00                 	db	0
   309  00FD36  14                 	db	20
   310  00FD37  7F                 	db	127
   311  00FD38  14                 	db	20
   312  00FD39  7F                 	db	127
   313  00FD3A  14                 	db	20
   314  00FD3B  24                 	db	36
   315  00FD3C  2A                 	db	42
   316  00FD3D  7F                 	db	127
   317  00FD3E  2A                 	db	42
   318  00FD3F  12                 	db	18
   319  00FD40  23                 	db	35
   320  00FD41  13                 	db	19
   321  00FD42  08                 	db	8
   322  00FD43  64                 	db	100
   323  00FD44  62                 	db	98
   324  00FD45  36                 	db	54
   325  00FD46  49                 	db	73
   326  00FD47  56                 	db	86
   327  00FD48  20                 	db	32
   328  00FD49  50                 	db	80
   329  00FD4A  00                 	db	0
   330  00FD4B  08                 	db	8
   331  00FD4C  07                 	db	7
   332  00FD4D  03                 	db	3
   333  00FD4E  00                 	db	0
   334  00FD4F  00                 	db	0
   335  00FD50  1C                 	db	28
   336  00FD51  22                 	db	34
   337  00FD52  41                 	db	65
   338  00FD53  00                 	db	0
   339  00FD54  00                 	db	0
   340  00FD55  41                 	db	65
   341  00FD56  22                 	db	34
   342  00FD57  1C                 	db	28
   343  00FD58  00                 	db	0
   344  00FD59  2A                 	db	42
   345  00FD5A  1C                 	db	28
   346  00FD5B  7F                 	db	127
   347  00FD5C  1C                 	db	28
   348  00FD5D  2A                 	db	42
   349  00FD5E  08                 	db	8
   350  00FD5F  08                 	db	8
   351  00FD60  3E                 	db	62
   352  00FD61  08                 	db	8
   353  00FD62  08                 	db	8
   354  00FD63  00                 	db	0
   355  00FD64  80                 	db	128
   356  00FD65  70                 	db	112
   357  00FD66  30                 	db	48
   358  00FD67  00                 	db	0
   359  00FD68  08                 	db	8
   360  00FD69  08                 	db	8
   361  00FD6A  08                 	db	8
   362  00FD6B  08                 	db	8
   363  00FD6C  08                 	db	8
   364  00FD6D  00                 	db	0
   365  00FD6E  00                 	db	0
   366  00FD6F  60                 	db	96
   367  00FD70  60                 	db	96
   368  00FD71  00                 	db	0
   369  00FD72  20                 	db	32
   370  00FD73  10                 	db	16
   371  00FD74  08                 	db	8
   372  00FD75  04                 	db	4
   373  00FD76  02                 	db	2
   374  00FD77  3E                 	db	62
   375  00FD78  51                 	db	81
   376  00FD79  49                 	db	73
   377  00FD7A  45                 	db	69
   378  00FD7B  3E                 	db	62
   379  00FD7C  00                 	db	0
   380  00FD7D  42                 	db	66
   381  00FD7E  7F                 	db	127
   382  00FD7F  40                 	db	64
   383  00FD80  00                 	db	0
   384  00FD81  72                 	db	114
   385  00FD82  49                 	db	73
   386  00FD83  49                 	db	73
   387  00FD84  49                 	db	73
   388  00FD85  46                 	db	70
   389  00FD86  21                 	db	33
   390  00FD87  41                 	db	65
   391  00FD88  49                 	db	73
   392  00FD89  4D                 	db	77
   393  00FD8A  33                 	db	51
   394  00FD8B  18                 	db	24
   395  00FD8C  14                 	db	20
   396  00FD8D  12                 	db	18
   397  00FD8E  7F                 	db	127
   398  00FD8F  10                 	db	16
   399  00FD90  27                 	db	39
   400  00FD91  45                 	db	69
   401  00FD92  45                 	db	69
   402  00FD93  45                 	db	69
   403  00FD94  39                 	db	57
   404  00FD95  3C                 	db	60
   405  00FD96  4A                 	db	74
   406  00FD97  49                 	db	73
   407  00FD98  49                 	db	73
   408  00FD99  31                 	db	49
   409  00FD9A  41                 	db	65
   410  00FD9B  21                 	db	33
   411  00FD9C  11                 	db	17
   412  00FD9D  09                 	db	9
   413  00FD9E  07                 	db	7
   414  00FD9F  36                 	db	54
   415  00FDA0  49                 	db	73
   416  00FDA1  49                 	db	73
   417  00FDA2  49                 	db	73
   418  00FDA3  36                 	db	54
   419  00FDA4  46                 	db	70
   420  00FDA5  49                 	db	73
   421  00FDA6  49                 	db	73
   422  00FDA7  29                 	db	41
   423  00FDA8  1E                 	db	30
   424  00FDA9  00                 	db	0
   425  00FDAA  00                 	db	0
   426  00FDAB  14                 	db	20
   427  00FDAC  00                 	db	0
   428  00FDAD  00                 	db	0
   429  00FDAE  00                 	db	0
   430  00FDAF  40                 	db	64
   431  00FDB0  34                 	db	52
   432  00FDB1  00                 	db	0
   433  00FDB2  00                 	db	0
   434  00FDB3  00                 	db	0
   435  00FDB4  08                 	db	8
   436  00FDB5  14                 	db	20
   437  00FDB6  22                 	db	34
   438  00FDB7  41                 	db	65
   439  00FDB8  14                 	db	20
   440  00FDB9  14                 	db	20
   441  00FDBA  14                 	db	20
   442  00FDBB  14                 	db	20
   443  00FDBC  14                 	db	20
   444  00FDBD  00                 	db	0
   445  00FDBE  41                 	db	65
   446  00FDBF  22                 	db	34
   447  00FDC0  14                 	db	20
   448  00FDC1  08                 	db	8
   449  00FDC2  02                 	db	2
   450  00FDC3  01                 	db	1
   451  00FDC4  59                 	db	89
   452  00FDC5  09                 	db	9
   453  00FDC6  06                 	db	6
   454  00FDC7  3E                 	db	62
   455  00FDC8  41                 	db	65
   456  00FDC9  5D                 	db	93
   457  00FDCA  59                 	db	89
   458  00FDCB  4E                 	db	78
   459  00FDCC  7C                 	db	124
   460  00FDCD  12                 	db	18
   461  00FDCE  11                 	db	17
   462  00FDCF  12                 	db	18
   463  00FDD0  7C                 	db	124
   464  00FDD1  7F                 	db	127
   465  00FDD2  49                 	db	73
   466  00FDD3  49                 	db	73
   467  00FDD4  49                 	db	73
   468  00FDD5  36                 	db	54
   469  00FDD6  3E                 	db	62
   470  00FDD7  41                 	db	65
   471  00FDD8  41                 	db	65
   472  00FDD9  41                 	db	65
   473  00FDDA  22                 	db	34
   474  00FDDB  7F                 	db	127
   475  00FDDC  41                 	db	65
   476  00FDDD  41                 	db	65
   477  00FDDE  41                 	db	65
   478  00FDDF  3E                 	db	62
   479  00FDE0  7F                 	db	127
   480  00FDE1  49                 	db	73
   481  00FDE2  49                 	db	73
   482  00FDE3  49                 	db	73
   483  00FDE4  41                 	db	65
   484  00FDE5  7F                 	db	127
   485  00FDE6  09                 	db	9
   486  00FDE7  09                 	db	9
   487  00FDE8  09                 	db	9
   488  00FDE9  01                 	db	1
   489  00FDEA  3E                 	db	62
   490  00FDEB  41                 	db	65
   491  00FDEC  41                 	db	65
   492  00FDED  51                 	db	81
   493  00FDEE  73                 	db	115
   494  00FDEF  7F                 	db	127
   495  00FDF0  08                 	db	8
   496  00FDF1  08                 	db	8
   497  00FDF2  08                 	db	8
   498  00FDF3  7F                 	db	127
   499  00FDF4  00                 	db	0
   500  00FDF5  41                 	db	65
   501  00FDF6  7F                 	db	127
   502  00FDF7  41                 	db	65
   503  00FDF8  00                 	db	0
   504  00FDF9  20                 	db	32
   505  00FDFA  40                 	db	64
   506  00FDFB  41                 	db	65
   507  00FDFC  3F                 	db	63
   508  00FDFD  01                 	db	1
   509  00FDFE  7F                 	db	127
   510  00FDFF  08                 	db	8
   511  00FE00  14                 	db	20
   512  00FE01  22                 	db	34
   513  00FE02  41                 	db	65
   514  00FE03  7F                 	db	127
   515  00FE04  40                 	db	64
   516  00FE05  40                 	db	64
   517  00FE06  40                 	db	64
   518  00FE07  40                 	db	64
   519  00FE08  7F                 	db	127
   520  00FE09  02                 	db	2
   521  00FE0A  1C                 	db	28
   522  00FE0B  02                 	db	2
   523  00FE0C  7F                 	db	127
   524  00FE0D  7F                 	db	127
   525  00FE0E  04                 	db	4
   526  00FE0F  08                 	db	8
   527  00FE10  10                 	db	16
   528  00FE11  7F                 	db	127
   529  00FE12  3E                 	db	62
   530  00FE13  41                 	db	65
   531  00FE14  41                 	db	65
   532  00FE15  41                 	db	65
   533  00FE16  3E                 	db	62
   534  00FE17  7F                 	db	127
   535  00FE18  09                 	db	9
   536  00FE19  09                 	db	9
   537  00FE1A  09                 	db	9
   538  00FE1B  06                 	db	6
   539  00FE1C  3E                 	db	62
   540  00FE1D  41                 	db	65
   541  00FE1E  51                 	db	81
   542  00FE1F  21                 	db	33
   543  00FE20  5E                 	db	94
   544  00FE21  7F                 	db	127
   545  00FE22  09                 	db	9
   546  00FE23  19                 	db	25
   547  00FE24  29                 	db	41
   548  00FE25  46                 	db	70
   549  00FE26                     __end_of_font:
   550                           	opt stack 0
   551  00FE26                     _font2:
   552                           	opt stack 0
   553  00FE26  26                 	db	38
   554  00FE27  49                 	db	73
   555  00FE28  49                 	db	73
   556  00FE29  49                 	db	73
   557  00FE2A  32                 	db	50
   558  00FE2B  03                 	db	3
   559  00FE2C  01                 	db	1
   560  00FE2D  7F                 	db	127
   561  00FE2E  01                 	db	1
   562  00FE2F  03                 	db	3
   563  00FE30  3F                 	db	63
   564  00FE31  40                 	db	64
   565  00FE32  40                 	db	64
   566  00FE33  40                 	db	64
   567  00FE34  3F                 	db	63
   568  00FE35  1F                 	db	31
   569  00FE36  20                 	db	32
   570  00FE37  40                 	db	64
   571  00FE38  20                 	db	32
   572  00FE39  1F                 	db	31
   573  00FE3A  3F                 	db	63
   574  00FE3B  40                 	db	64
   575  00FE3C  38                 	db	56
   576  00FE3D  40                 	db	64
   577  00FE3E  3F                 	db	63
   578  00FE3F  63                 	db	99
   579  00FE40  14                 	db	20
   580  00FE41  08                 	db	8
   581  00FE42  14                 	db	20
   582  00FE43  63                 	db	99
   583  00FE44  03                 	db	3
   584  00FE45  04                 	db	4
   585  00FE46  78                 	db	120
   586  00FE47  04                 	db	4
   587  00FE48  03                 	db	3
   588  00FE49  61                 	db	97
   589  00FE4A  59                 	db	89
   590  00FE4B  49                 	db	73
   591  00FE4C  4D                 	db	77
   592  00FE4D  43                 	db	67
   593  00FE4E  00                 	db	0
   594  00FE4F  7F                 	db	127
   595  00FE50  41                 	db	65
   596  00FE51  41                 	db	65
   597  00FE52  41                 	db	65
   598  00FE53  02                 	db	2
   599  00FE54  04                 	db	4
   600  00FE55  08                 	db	8
   601  00FE56  10                 	db	16
   602  00FE57  20                 	db	32
   603  00FE58  00                 	db	0
   604  00FE59  41                 	db	65
   605  00FE5A  41                 	db	65
   606  00FE5B  41                 	db	65
   607  00FE5C  7F                 	db	127
   608  00FE5D  04                 	db	4
   609  00FE5E  02                 	db	2
   610  00FE5F  01                 	db	1
   611  00FE60  02                 	db	2
   612  00FE61  04                 	db	4
   613  00FE62  40                 	db	64
   614  00FE63  40                 	db	64
   615  00FE64  40                 	db	64
   616  00FE65  40                 	db	64
   617  00FE66  40                 	db	64
   618  00FE67  00                 	db	0
   619  00FE68  03                 	db	3
   620  00FE69  07                 	db	7
   621  00FE6A  08                 	db	8
   622  00FE6B  00                 	db	0
   623  00FE6C  20                 	db	32
   624  00FE6D  54                 	db	84
   625  00FE6E  54                 	db	84
   626  00FE6F  78                 	db	120
   627  00FE70  40                 	db	64
   628  00FE71  7F                 	db	127
   629  00FE72  28                 	db	40
   630  00FE73  44                 	db	68
   631  00FE74  44                 	db	68
   632  00FE75  38                 	db	56
   633  00FE76  38                 	db	56
   634  00FE77  44                 	db	68
   635  00FE78  44                 	db	68
   636  00FE79  44                 	db	68
   637  00FE7A  28                 	db	40
   638  00FE7B  38                 	db	56
   639  00FE7C  44                 	db	68
   640  00FE7D  44                 	db	68
   641  00FE7E  28                 	db	40
   642  00FE7F  7F                 	db	127
   643  00FE80  38                 	db	56
   644  00FE81  54                 	db	84
   645  00FE82  54                 	db	84
   646  00FE83  54                 	db	84
   647  00FE84  18                 	db	24
   648  00FE85  00                 	db	0
   649  00FE86  08                 	db	8
   650  00FE87  7E                 	db	126
   651  00FE88  09                 	db	9
   652  00FE89  02                 	db	2
   653  00FE8A  18                 	db	24
   654  00FE8B  A4                 	db	164
   655  00FE8C  A4                 	db	164
   656  00FE8D  9C                 	db	156
   657  00FE8E  78                 	db	120
   658  00FE8F  7F                 	db	127
   659  00FE90  08                 	db	8
   660  00FE91  04                 	db	4
   661  00FE92  04                 	db	4
   662  00FE93  78                 	db	120
   663  00FE94  00                 	db	0
   664  00FE95  44                 	db	68
   665  00FE96  7D                 	db	125
   666  00FE97  40                 	db	64
   667  00FE98  00                 	db	0
   668  00FE99  20                 	db	32
   669  00FE9A  40                 	db	64
   670  00FE9B  40                 	db	64
   671  00FE9C  3D                 	db	61
   672  00FE9D  00                 	db	0
   673  00FE9E  7F                 	db	127
   674  00FE9F  10                 	db	16
   675  00FEA0  28                 	db	40
   676  00FEA1  44                 	db	68
   677  00FEA2  00                 	db	0
   678  00FEA3  00                 	db	0
   679  00FEA4  41                 	db	65
   680  00FEA5  7F                 	db	127
   681  00FEA6  40                 	db	64
   682  00FEA7  00                 	db	0
   683  00FEA8  7C                 	db	124
   684  00FEA9  04                 	db	4
   685  00FEAA  78                 	db	120
   686  00FEAB  04                 	db	4
   687  00FEAC  78                 	db	120
   688  00FEAD  7C                 	db	124
   689  00FEAE  08                 	db	8
   690  00FEAF  04                 	db	4
   691  00FEB0  04                 	db	4
   692  00FEB1  78                 	db	120
   693  00FEB2  38                 	db	56
   694  00FEB3  44                 	db	68
   695  00FEB4  44                 	db	68
   696  00FEB5  44                 	db	68
   697  00FEB6  38                 	db	56
   698  00FEB7  FC                 	db	252
   699  00FEB8  18                 	db	24
   700  00FEB9  24                 	db	36
   701  00FEBA  24                 	db	36
   702  00FEBB  18                 	db	24
   703  00FEBC  18                 	db	24
   704  00FEBD  24                 	db	36
   705  00FEBE  24                 	db	36
   706  00FEBF  18                 	db	24
   707  00FEC0  FC                 	db	252
   708  00FEC1  7C                 	db	124
   709  00FEC2  08                 	db	8
   710  00FEC3  04                 	db	4
   711  00FEC4  04                 	db	4
   712  00FEC5  08                 	db	8
   713  00FEC6  48                 	db	72
   714  00FEC7  54                 	db	84
   715  00FEC8  54                 	db	84
   716  00FEC9  54                 	db	84
   717  00FECA  24                 	db	36
   718  00FECB  04                 	db	4
   719  00FECC  04                 	db	4
   720  00FECD  3F                 	db	63
   721  00FECE  44                 	db	68
   722  00FECF  24                 	db	36
   723  00FED0  3C                 	db	60
   724  00FED1  40                 	db	64
   725  00FED2  40                 	db	64
   726  00FED3  20                 	db	32
   727  00FED4  7C                 	db	124
   728  00FED5  1C                 	db	28
   729  00FED6  20                 	db	32
   730  00FED7  40                 	db	64
   731  00FED8  20                 	db	32
   732  00FED9  1C                 	db	28
   733  00FEDA  3C                 	db	60
   734  00FEDB  40                 	db	64
   735  00FEDC  30                 	db	48
   736  00FEDD  40                 	db	64
   737  00FEDE  3C                 	db	60
   738  00FEDF  44                 	db	68
   739  00FEE0  28                 	db	40
   740  00FEE1  10                 	db	16
   741  00FEE2  28                 	db	40
   742  00FEE3  44                 	db	68
   743  00FEE4  4C                 	db	76
   744  00FEE5  90                 	db	144
   745  00FEE6  90                 	db	144
   746  00FEE7  90                 	db	144
   747  00FEE8  7C                 	db	124
   748  00FEE9  44                 	db	68
   749  00FEEA  64                 	db	100
   750  00FEEB  54                 	db	84
   751  00FEEC  4C                 	db	76
   752  00FEED  44                 	db	68
   753  00FEEE  00                 	db	0
   754  00FEEF  08                 	db	8
   755  00FEF0  36                 	db	54
   756  00FEF1  41                 	db	65
   757  00FEF2  00                 	db	0
   758  00FEF3  00                 	db	0
   759  00FEF4  00                 	db	0
   760  00FEF5  77                 	db	119
   761  00FEF6  00                 	db	0
   762  00FEF7  00                 	db	0
   763  00FEF8  00                 	db	0
   764  00FEF9  41                 	db	65
   765  00FEFA  36                 	db	54
   766  00FEFB  08                 	db	8
   767  00FEFC  00                 	db	0
   768  00FEFD  02                 	db	2
   769  00FEFE  01                 	db	1
   770  00FEFF  02                 	db	2
   771  00FF00  04                 	db	4
   772  00FF01  02                 	db	2
   773  00FF02                     __end_of_font2:
   774                           	opt stack 0
   775  00FF02                     _dpowers:
   776                           	opt stack 0
   777  00FF02  0001               	dw	1
   778  00FF04  000A               	dw	10
   779  00FF06  0064               	dw	100
   780  00FF08  03E8               	dw	1000
   781  00FF0A  2710               	dw	10000
   782  00FF0C                     __end_of_dpowers:
   783                           	opt stack 0
   784  00FF0C                     _hexpowers:
   785                           	opt stack 0
   786  00FF0C  0001               	dw	1
   787  00FF0E  0010               	dw	16
   788  00FF10  0100               	dw	256
   789  00FF12  1000               	dw	4096
   790  00FF14                     __end_of_hexpowers:
   791                           	opt stack 0
   792  0000                     _ADCON1	set	4033
   793  0000                     _CCP1CON	set	4029
   794  0000                     _CCP2CON	set	4026
   795  0000                     _CCPR1L	set	4030
   796  0000                     _CCPR2L	set	4027
   797  0000                     _INTCON2bits	set	4081
   798  0000                     _INTCONbits	set	4082
   799  0000                     _OSCCON	set	4051
   800  0000                     _PIE1bits	set	3997
   801  0000                     _PIR1bits	set	3998
   802  0000                     _PORTAbits	set	3968
   803  0000                     _PORTBbits	set	3969
   804  0000                     _PORTDbits	set	3971
   805  0000                     _PORTEbits	set	3972
   806  0000                     _PR2	set	4043
   807  0000                     _RCSTA	set	4011
   808  0000                     _RCSTAbits	set	4011
   809  0000                     _SPBRG	set	4015
   810  0000                     _SPBRGH	set	4016
   811  0000                     _SSPBUF	set	4041
   812  0000                     _SSPCON1	set	4038
   813  0000                     _SSPSTAT	set	4039
   814  0000                     _SSPSTATbits	set	4039
   815  0000                     _T0CON	set	4053
   816  0000                     _T0CONbits	set	4053
   817  0000                     _T1CON	set	4045
   818  0000                     _T1CONbits	set	4045
   819  0000                     _T2CON	set	4042
   820  0000                     _T3CON	set	4017
   821  0000                     _TMR0H	set	4055
   822  0000                     _TMR0L	set	4054
   823  0000                     _TMR1H	set	4047
   824  0000                     _TMR1L	set	4046
   825  0000                     _TMR3L	set	4018
   826  0000                     _TRISA	set	3986
   827  0000                     _TRISB	set	3987
   828  0000                     _TRISBbits	set	3987
   829  0000                     _TRISC	set	3988
   830  0000                     _TRISCbits	set	3988
   831  0000                     _TRISD	set	3989
   832  0000                     _TXREG	set	4013
   833  0000                     _TXSTA	set	4012
   834  0000                     _TXSTAbits	set	4012
   835  0000                     _RBPU	set	32655
   836  0000                     _TRMT	set	32097
   837  00FF14                     STR_12:
   838  00FF14  25                 	db	37
   839  00FF15  30                 	db	48	;'0'
   840  00FF16  32                 	db	50	;'2'
   841  00FF17  78                 	db	120	;'x'
   842  00FF18  3A                 	db	58	;':'
   843  00FF19  25                 	db	37
   844  00FF1A  30                 	db	48	;'0'
   845  00FF1B  32                 	db	50	;'2'
   846  00FF1C  78                 	db	120	;'x'
   847  00FF1D  3A                 	db	58	;':'
   848  00FF1E  25                 	db	37
   849  00FF1F  30                 	db	48	;'0'
   850  00FF20  32                 	db	50	;'2'
   851  00FF21  78                 	db	120	;'x'
   852  00FF22  20                 	db	32
   853  00FF23  25                 	db	37
   854  00FF24  30                 	db	48	;'0'
   855  00FF25  32                 	db	50	;'2'
   856  00FF26  78                 	db	120	;'x'
   857  00FF27  2F                 	db	47
   858  00FF28  25                 	db	37
   859  00FF29  30                 	db	48	;'0'
   860  00FF2A  32                 	db	50	;'2'
   861  00FF2B  78                 	db	120	;'x'
   862  00FF2C  2F                 	db	47
   863  00FF2D  25                 	db	37
   864  00FF2E  30                 	db	48	;'0'
   865  00FF2F  32                 	db	50	;'2'
   866  00FF30  78                 	db	120	;'x'
   867  00FF31  00                 	db	0
   868  00FF32                     STR_18:
   869  00FF32  0A                 	db	10
   870  00FF33  54                 	db	84	;'T'
   871  00FF34  69                 	db	105	;'i'
   872  00FF35  6D                 	db	109	;'m'
   873  00FF36  65                 	db	101	;'e'
   874  00FF37  20                 	db	32
   875  00FF38  68                 	db	104	;'h'
   876  00FF39  61                 	db	97	;'a'
   877  00FF3A  73                 	db	115	;'s'
   878  00FF3B  20                 	db	32
   879  00FF3C  62                 	db	98	;'b'
   880  00FF3D  65                 	db	101	;'e'
   881  00FF3E  65                 	db	101	;'e'
   882  00FF3F  6E                 	db	110	;'n'
   883  00FF40  20                 	db	32
   884  00FF41  72                 	db	114	;'r'
   885  00FF42  65                 	db	101	;'e'
   886  00FF43  73                 	db	115	;'s'
   887  00FF44  65                 	db	101	;'e'
   888  00FF45  74                 	db	116	;'t'
   889  00FF46  0D                 	db	13
   890  00FF47  0A                 	db	10
   891  00FF48  0A                 	db	10
   892  00FF49  00                 	db	0
   893  00FF4A                     STR_16:
   894  00FF4A  43                 	db	67	;'C'
   895  00FF4B  61                 	db	97	;'a'
   896  00FF4C  6E                 	db	110	;'n'
   897  00FF4D  6E                 	db	110	;'n'
   898  00FF4E  6F                 	db	111	;'o'
   899  00FF4F  74                 	db	116	;'t'
   900  00FF50  20                 	db	32
   901  00FF51  66                 	db	102	;'f'
   902  00FF52  69                 	db	105	;'i'
   903  00FF53  6E                 	db	110	;'n'
   904  00FF54  64                 	db	100	;'d'
   905  00FF55  20                 	db	32
   906  00FF56  62                 	db	98	;'b'
   907  00FF57  75                 	db	117	;'u'
   908  00FF58  74                 	db	116	;'t'
   909  00FF59  74                 	db	116	;'t'
   910  00FF5A  6F                 	db	111	;'o'
   911  00FF5B  6E                 	db	110	;'n'
   912  00FF5C  20                 	db	32
   913  00FF5D  0D                 	db	13
   914  00FF5E  0A                 	db	10
   915  00FF5F  00                 	db	0
   916  00FF60                     STR_1:
   917  00FF60  45                 	db	69	;'E'
   918  00FF61  43                 	db	67	;'C'
   919  00FF62  45                 	db	69	;'E'
   920  00FF63  33                 	db	51	;'3'
   921  00FF64  33                 	db	51	;'3'
   922  00FF65  30                 	db	48	;'0'
   923  00FF66  31                 	db	49	;'1'
   924  00FF67  4C                 	db	76	;'L'
   925  00FF68  20                 	db	32
   926  00FF69  53                 	db	83	;'S'
   927  00FF6A  70                 	db	112	;'p'
   928  00FF6B  72                 	db	114	;'r'
   929  00FF6C  69                 	db	105	;'i'
   930  00FF6D  6E                 	db	110	;'n'
   931  00FF6E  67                 	db	103	;'g'
   932  00FF6F  20                 	db	32
   933  00FF70  32                 	db	50	;'2'
   934  00FF71  31                 	db	49	;'1'
   935  00FF72  2D                 	db	45
   936  00FF73  53                 	db	83	;'S'
   937  00FF74  31                 	db	49	;'1'
   938  00FF75  00                 	db	0
   939  00FF76                     STR_13:
   940  00FF76  20                 	db	32
   941  00FF77  54                 	db	84	;'T'
   942  00FF78  65                 	db	101	;'e'
   943  00FF79  6D                 	db	109	;'m'
   944  00FF7A  70                 	db	112	;'p'
   945  00FF7B  20                 	db	32
   946  00FF7C  3D                 	db	61	;'='
   947  00FF7D  20                 	db	32
   948  00FF7E  25                 	db	37
   949  00FF7F  64                 	db	100	;'d'
   950  00FF80  20                 	db	32
   951  00FF81  43                 	db	67	;'C'
   952  00FF82  20                 	db	32
   953  00FF83  3D                 	db	61	;'='
   954  00FF84  20                 	db	32
   955  00FF85  25                 	db	37
   956  00FF86  64                 	db	100	;'d'
   957  00FF87  20                 	db	32
   958  00FF88  46                 	db	70	;'F'
   959  00FF89  20                 	db	32
   960  00FF8A  00                 	db	0
   961  00FF8B                     STR_14:
   962  00FF8B  52                 	db	82	;'R'
   963  00FF8C  50                 	db	80	;'P'
   964  00FF8D  4D                 	db	77	;'M'
   965  00FF8E  20                 	db	32
   966  00FF8F  3D                 	db	61	;'='
   967  00FF90  20                 	db	32
   968  00FF91  25                 	db	37
   969  00FF92  64                 	db	100	;'d'
   970  00FF93  20                 	db	32
   971  00FF94  20                 	db	32
   972  00FF95  64                 	db	100	;'d'
   973  00FF96  63                 	db	99	;'c'
   974  00FF97  20                 	db	32
   975  00FF98  3D                 	db	61	;'='
   976  00FF99  20                 	db	32
   977  00FF9A  25                 	db	37
   978  00FF9B  64                 	db	100	;'d'
   979  00FF9C  0D                 	db	13
   980  00FF9D  0A                 	db	10
   981  00FF9E  00                 	db	0
   982  00FF9F                     STR_19:
   983  00FF9F  30                 	db	48	;'0'
   984  00FFA0  31                 	db	49	;'1'
   985  00FFA1  32                 	db	50	;'2'
   986  00FFA2  33                 	db	51	;'3'
   987  00FFA3  34                 	db	52	;'4'
   988  00FFA4  35                 	db	53	;'5'
   989  00FFA5  36                 	db	54	;'6'
   990  00FFA6  37                 	db	55	;'7'
   991  00FFA7  38                 	db	56	;'8'
   992  00FFA8  39                 	db	57	;'9'
   993  00FFA9  61                 	db	97	;'a'
   994  00FFAA  62                 	db	98	;'b'
   995  00FFAB  63                 	db	99	;'c'
   996  00FFAC  64                 	db	100	;'d'
   997  00FFAD  65                 	db	101	;'e'
   998  00FFAE  66                 	db	102	;'f'
   999  00FFAF  00                 	db	0
  1000  00FFB0                     STR_15:
  1001  00FFB0  4E                 	db	78	;'N'
  1002  00FFB1  45                 	db	69	;'E'
  1003  00FFB2  43                 	db	67	;'C'
  1004  00FFB3  5F                 	db	95	;'_'
  1005  00FFB4  43                 	db	67	;'C'
  1006  00FFB5  6F                 	db	111	;'o'
  1007  00FFB6  64                 	db	100	;'d'
  1008  00FFB7  65                 	db	101	;'e'
  1009  00FFB8  20                 	db	32
  1010  00FFB9  3D                 	db	61	;'='
  1011  00FFBA  20                 	db	32
  1012  00FFBB  25                 	db	37
  1013  00FFBC  78                 	db	120	;'x'
  1014  00FFBD  0D                 	db	13
  1015  00FFBE  0A                 	db	10
  1016  00FFBF  00                 	db	0
  1017  00FFC0                     STR_17:
  1018  00FFC0  62                 	db	98	;'b'
  1019  00FFC1  75                 	db	117	;'u'
  1020  00FFC2  74                 	db	116	;'t'
  1021  00FFC3  74                 	db	116	;'t'
  1022  00FFC4  6F                 	db	111	;'o'
  1023  00FFC5  6E                 	db	110	;'n'
  1024  00FFC6  20                 	db	32
  1025  00FFC7  3D                 	db	61	;'='
  1026  00FFC8  20                 	db	32
  1027  00FFC9  25                 	db	37
  1028  00FFCA  64                 	db	100	;'d'
  1029  00FFCB  20                 	db	32
  1030  00FFCC  0D                 	db	13
  1031  00FFCD  0A                 	db	10
  1032  00FFCE  00                 	db	0
  1033  00FFCF                     STR_2:
  1034  00FFCF  54                 	db	84	;'T'
  1035  00FFD0  65                 	db	101	;'e'
  1036  00FFD1  6D                 	db	109	;'m'
  1037  00FFD2  70                 	db	112	;'p'
  1038  00FFD3  65                 	db	101	;'e'
  1039  00FFD4  72                 	db	114	;'r'
  1040  00FFD5  61                 	db	97	;'a'
  1041  00FFD6  74                 	db	116	;'t'
  1042  00FFD7  75                 	db	117	;'u'
  1043  00FFD8  72                 	db	114	;'r'
  1044  00FFD9  65                 	db	101	;'e'
  1045  00FFDA  3A                 	db	58	;':'
  1046  00FFDB  00                 	db	0
  1047  00FFDC                     STR_7:
  1048  00FFDC  20                 	db	32
  1049  00FFDD  20                 	db	32
  1050  00FFDE  46                 	db	70	;'F'
  1051  00FFDF  41                 	db	65	;'A'
  1052  00FFE0  4E                 	db	78	;'N'
  1053  00FFE1  00                 	db	0
  1054  00FFE2                     STR_5:
  1055  00FFE2  54                 	db	84	;'T'
  1056  00FFE3  69                 	db	105	;'i'
  1057  00FFE4  6D                 	db	109	;'m'
  1058  00FFE5  65                 	db	101	;'e'
  1059  00FFE6  00                 	db	0
  1060  00FFE7                     STR_6:
  1061  00FFE7  44                 	db	68	;'D'
  1062  00FFE8  61                 	db	97	;'a'
  1063  00FFE9  74                 	db	116	;'t'
  1064  00FFEA  65                 	db	101	;'e'
  1065  00FFEB  00                 	db	0
  1066  00FFEC                     STR_10:
  1067  00FFEC  4F                 	db	79	;'O'
  1068  00FFED  4E                 	db	78	;'N'
  1069  00FFEE  20                 	db	32
  1070  00FFEF  00                 	db	0
  1071  00FFF0                     STR_11:
  1072  00FFF0  4F                 	db	79	;'O'
  1073  00FFF1  46                 	db	70	;'F'
  1074  00FFF2  46                 	db	70	;'F'
  1075  00FFF3  00                 	db	0
  1076  00FFF4                     STR_9:
  1077  00FFF4  52                 	db	82	;'R'
  1078  00FFF5  50                 	db	80	;'P'
  1079  00FFF6  4D                 	db	77	;'M'
  1080  00FFF7  00                 	db	0
  1081  00FFF8                     STR_3:
  1082  00FFF8  43                 	db	67	;'C'
  1083  00FFF9  2F                 	db	47
  1084  00FFFA  00                 	db	0
  1085  00FFFB                     STR_8:
  1086  00FFFB  44                 	db	68	;'D'
  1087  00FFFC  43                 	db	67	;'C'
  1088  00FFFD  00                 	db	0
  1089  0000                     
  1090                           ; #config settings
  1091  00FFFE  00                 	db	0	; dummy byte at the end
  1092  0000                     
  1093                           	psect	cinit
  1094  001B6C                     __pcinit:
  1095                           	opt stack 0
  1096  001B6C                     start_initialization:
  1097                           	opt stack 0
  1098  001B6C                     __initialization:
  1099                           	opt stack 0
  1100                           
  1101                           ; Clear objects allocated to BANK0 (12 bytes)
  1102  001B6C  EE00  F0EB         	lfsr	0,__pbssBANK0
  1103  001B70  0E0C               	movlw	12
  1104  001B72                     clear_0:
  1105  001B72  6AEE               	clrf	postinc0,c
  1106  001B74  06E8               	decf	wreg,f,c
  1107  001B76  E1FD               	bnz	clear_0
  1108                           
  1109                           ; Clear objects allocated to COMRAM (39 bytes)
  1110  001B78  EE00  F046         	lfsr	0,__pbssCOMRAM
  1111  001B7C  0E27               	movlw	39
  1112  001B7E                     clear_1:
  1113  001B7E  6AEE               	clrf	postinc0,c
  1114  001B80  06E8               	decf	wreg,f,c
  1115  001B82  E1FD               	bnz	clear_1
  1116                           
  1117                           ; Initialize objects allocated to BANK1 (31 bytes)
  1118                           ; load TBLPTR registers with __pidataBANK1
  1119  001B84  0E92               	movlw	low __pidataBANK1
  1120  001B86  6EF6               	movwf	tblptrl,c
  1121  001B88  0E23               	movlw	high __pidataBANK1
  1122  001B8A  6EF7               	movwf	tblptrh,c
  1123  001B8C  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1124  001B8E  6EF8               	movwf	tblptru,c
  1125  001B90  EE01  F000         	lfsr	0,__pdataBANK1
  1126  001B94  EE10 F01F          	lfsr	1,31
  1127  001B98                     copy_data0:
  1128  001B98  0009               	tblrd		*+
  1129  001B9A  CFF5 FFEE          	movff	tablat,postinc0
  1130  001B9E  50E5               	movf	postdec1,w,c
  1131  001BA0  50E1               	movf	fsr1l,w,c
  1132  001BA2  E1FA               	bnz	copy_data0
  1133                           
  1134                           ; Initialize objects allocated to BANK0 (107 bytes)
  1135                           ; load TBLPTR registers with __pidataBANK0
  1136  001BA4  0E44               	movlw	low __pidataBANK0
  1137  001BA6  6EF6               	movwf	tblptrl,c
  1138  001BA8  0E1D               	movlw	high __pidataBANK0
  1139  001BAA  6EF7               	movwf	tblptrh,c
  1140  001BAC  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1141  001BAE  6EF8               	movwf	tblptru,c
  1142  001BB0  EE00  F080         	lfsr	0,__pdataBANK0
  1143  001BB4  EE10 F06B          	lfsr	1,107
  1144  001BB8                     copy_data1:
  1145  001BB8  0009               	tblrd		*+
  1146  001BBA  CFF5 FFEE          	movff	tablat,postinc0
  1147  001BBE  50E5               	movf	postdec1,w,c
  1148  001BC0  50E1               	movf	fsr1l,w,c
  1149  001BC2  E1FA               	bnz	copy_data1
  1150                           
  1151                           ; Initialize objects allocated to COMRAM (3 bytes)
  1152                           ; load TBLPTR registers with __pidataCOMRAM
  1153  001BC4  0E68               	movlw	low __pidataCOMRAM
  1154  001BC6  6EF6               	movwf	tblptrl,c
  1155  001BC8  0E25               	movlw	high __pidataCOMRAM
  1156  001BCA  6EF7               	movwf	tblptrh,c
  1157  001BCC  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1158  001BCE  6EF8               	movwf	tblptru,c
  1159  001BD0  0009               	tblrd		*+	;fetch initializer
  1160  001BD2  CFF5 F06D          	movff	tablat,__pdataCOMRAM
  1161  001BD6  0009               	tblrd		*+	;fetch initializer
  1162  001BD8  CFF5 F06E          	movff	tablat,__pdataCOMRAM+1
  1163  001BDC  0009               	tblrd		*+	;fetch initializer
  1164  001BDE  CFF5 F06F          	movff	tablat,__pdataCOMRAM+2
  1165  001BE2                     end_of_initialization:
  1166                           	opt stack 0
  1167  001BE2                     __end_of__initialization:
  1168                           	opt stack 0
  1169  001BE2  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1170  001BE4  6EF8               	movwf	tblptru,c
  1171  001BE6  0100               	movlb	0
  1172  001BE8  EF07  F005         	goto	_main	;jump to C main() function
  1173                           tblptru	equ	0xFF8
  1174                           tblptrh	equ	0xFF7
  1175                           tblptrl	equ	0xFF6
  1176                           tablat	equ	0xFF5
  1177                           postinc0	equ	0xFEE
  1178                           wreg	equ	0xFE8
  1179                           postdec1	equ	0xFE5
  1180                           fsr1l	equ	0xFE1
  1181                           
  1182                           	psect	bssCOMRAM
  1183  000046                     __pbssCOMRAM:
  1184                           	opt stack 0
  1185  000046                     _DS1621_tempC:
  1186                           	opt stack 0
  1187  000046                     	ds	2
  1188  000048                     _DS1621_tempF:
  1189                           	opt stack 0
  1190  000048                     	ds	2
  1191  00004A                     _Time_Elapsed:
  1192                           	opt stack 0
  1193  00004A                     	ds	2
  1194  00004C                     _rpm:
  1195                           	opt stack 0
  1196  00004C                     	ds	2
  1197  00004E                     _txt:
  1198                           	opt stack 0
  1199  00004E                     	ds	2
  1200  000050                     _FAN:
  1201                           	opt stack 0
  1202  000050                     	ds	1
  1203  000051                     _Nec_code1:
  1204                           	opt stack 0
  1205  000051                     	ds	1
  1206  000052                     _Nec_state:
  1207                           	opt stack 0
  1208  000052                     	ds	1
  1209  000053                     __tft_type:
  1210                           	opt stack 0
  1211  000053                     	ds	1
  1212  000054                     _alarm_date:
  1213                           	opt stack 0
  1214  000054                     	ds	1
  1215  000055                     _alarm_hour:
  1216                           	opt stack 0
  1217  000055                     	ds	1
  1218  000056                     _alarm_minute:
  1219                           	opt stack 0
  1220  000056                     	ds	1
  1221  000057                     _alarm_second:
  1222                           	opt stack 0
  1223  000057                     	ds	1
  1224  000058                     _bit_count:
  1225                           	opt stack 0
  1226  000058                     	ds	1
  1227  000059                     _colstart:
  1228                           	opt stack 0
  1229  000059                     	ds	1
  1230  00005A                     _day:
  1231                           	opt stack 0
  1232  00005A                     	ds	1
  1233  00005B                     _dow:
  1234                           	opt stack 0
  1235  00005B                     	ds	1
  1236  00005C                     _duty_cycle:
  1237                           	opt stack 0
  1238  00005C                     	ds	1
  1239  00005D                     _found:
  1240                           	opt stack 0
  1241  00005D                     	ds	1
  1242  00005E                     _hour:
  1243                           	opt stack 0
  1244  00005E                     	ds	1
  1245  00005F                     _minute:
  1246                           	opt stack 0
  1247  00005F                     	ds	1
  1248  000060                     _month:
  1249                           	opt stack 0
  1250  000060                     	ds	1
  1251  000061                     _rowstart:
  1252                           	opt stack 0
  1253  000061                     	ds	1
  1254  000062                     _second:
  1255                           	opt stack 0
  1256  000062                     	ds	1
  1257  000063                     _setup_alarm_hour:
  1258                           	opt stack 0
  1259  000063                     	ds	1
  1260  000064                     _setup_alarm_minute:
  1261                           	opt stack 0
  1262  000064                     	ds	1
  1263  000065                     _setup_alarm_second:
  1264                           	opt stack 0
  1265  000065                     	ds	1
  1266  000066                     _setup_day:
  1267                           	opt stack 0
  1268  000066                     	ds	1
  1269  000067                     _setup_hour:
  1270                           	opt stack 0
  1271  000067                     	ds	1
  1272  000068                     _setup_minute:
  1273                           	opt stack 0
  1274  000068                     	ds	1
  1275  000069                     _setup_month:
  1276                           	opt stack 0
  1277  000069                     	ds	1
  1278  00006A                     _setup_second:
  1279                           	opt stack 0
  1280  00006A                     	ds	1
  1281  00006B                     _setup_year:
  1282                           	opt stack 0
  1283  00006B                     	ds	1
  1284  00006C                     _year:
  1285                           	opt stack 0
  1286  00006C                     	ds	1
  1287                           tblptru	equ	0xFF8
  1288                           tblptrh	equ	0xFF7
  1289                           tblptrl	equ	0xFF6
  1290                           tablat	equ	0xFF5
  1291                           postinc0	equ	0xFEE
  1292                           wreg	equ	0xFE8
  1293                           postdec1	equ	0xFE5
  1294                           fsr1l	equ	0xFE1
  1295                           
  1296                           	psect	dataCOMRAM
  1297  00006D                     __pdataCOMRAM:
  1298                           	opt stack 0
  1299  00006D                     _setup_fan_temp:
  1300                           	opt stack 0
  1301  00006D                     	ds	1
  1302  00006E                     _tempSecond:
  1303                           	opt stack 0
  1304  00006E                     	ds	1
  1305  00006F                     _wrap:
  1306                           	opt stack 0
  1307  00006F                     	ds	1
  1308                           tblptru	equ	0xFF8
  1309                           tblptrh	equ	0xFF7
  1310                           tblptrl	equ	0xFF6
  1311                           tablat	equ	0xFF5
  1312                           postinc0	equ	0xFEE
  1313                           wreg	equ	0xFE8
  1314                           postdec1	equ	0xFE5
  1315                           fsr1l	equ	0xFE1
  1316                           
  1317                           	psect	bssBANK0
  1318  0000EB                     __pbssBANK0:
  1319                           	opt stack 0
  1320  0000EB                     _Nec_code:
  1321                           	opt stack 0
  1322  0000EB                     	ds	4
  1323  0000EF                     _ALARMEN:
  1324                           	opt stack 0
  1325  0000EF                     	ds	2
  1326  0000F1                     _nbr:
  1327                           	opt stack 0
  1328  0000F1                     	ds	2
  1329  0000F3                     _nec_ok:
  1330                           	opt stack 0
  1331  0000F3                     	ds	2
  1332  0000F5                     _rps:
  1333                           	opt stack 0
  1334  0000F5                     	ds	2
  1335                           tblptru	equ	0xFF8
  1336                           tblptrh	equ	0xFF7
  1337                           tblptrl	equ	0xFF6
  1338                           tablat	equ	0xFF5
  1339                           postinc0	equ	0xFEE
  1340                           wreg	equ	0xFE8
  1341                           postdec1	equ	0xFE5
  1342                           fsr1l	equ	0xFE1
  1343                           
  1344                           	psect	dataBANK0
  1345  000080                     __pdataBANK0:
  1346                           	opt stack 0
  1347  000080                     _array1:
  1348                           	opt stack 0
  1349  000080                     	ds	21
  1350  000095                     _alarm_time:
  1351                           	opt stack 0
  1352  000095                     	ds	9
  1353  00009E                     _setup_alarm_time:
  1354                           	opt stack 0
  1355  00009E                     	ds	9
  1356  0000A7                     _setup_date:
  1357                           	opt stack 0
  1358  0000A7                     	ds	9
  1359  0000B0                     _setup_time:
  1360                           	opt stack 0
  1361  0000B0                     	ds	9
  1362  0000B9                     _setup_fan_text:
  1363                           	opt stack 0
  1364  0000B9                     	ds	5
  1365  0000BE                     _Alarm_SW_Txt:
  1366                           	opt stack 0
  1367  0000BE                     	ds	4
  1368  0000C2                     _RTC_ALARM_Txt:
  1369                           	opt stack 0
  1370  0000C2                     	ds	2
  1371  0000C4                     _date:
  1372                           	opt stack 0
  1373  0000C4                     	ds	9
  1374  0000CD                     _time:
  1375                           	opt stack 0
  1376  0000CD                     	ds	9
  1377  0000D6                     _RPM_Txt:
  1378                           	opt stack 0
  1379  0000D6                     	ds	5
  1380  0000DB                     _DC_Txt:
  1381                           	opt stack 0
  1382  0000DB                     	ds	4
  1383  0000DF                     _Fan_SW_Txt:
  1384                           	opt stack 0
  1385  0000DF                     	ds	4
  1386  0000E3                     _tempC:
  1387                           	opt stack 0
  1388  0000E3                     	ds	4
  1389  0000E7                     _tempF:
  1390                           	opt stack 0
  1391  0000E7                     	ds	4
  1392                           tblptru	equ	0xFF8
  1393                           tblptrh	equ	0xFF7
  1394                           tblptrl	equ	0xFF6
  1395                           tablat	equ	0xFF5
  1396                           postinc0	equ	0xFEE
  1397                           wreg	equ	0xFE8
  1398                           postdec1	equ	0xFE5
  1399                           fsr1l	equ	0xFE1
  1400                           
  1401                           	psect	dataBANK1
  1402  000100                     __pdataBANK1:
  1403                           	opt stack 0
  1404  000100                     _buffer:
  1405                           	opt stack 0
  1406  000100                     	ds	31
  1407                           tblptru	equ	0xFF8
  1408                           tblptrh	equ	0xFF7
  1409                           tblptrl	equ	0xFF6
  1410                           tablat	equ	0xFF5
  1411                           postinc0	equ	0xFEE
  1412                           wreg	equ	0xFE8
  1413                           postdec1	equ	0xFE5
  1414                           fsr1l	equ	0xFE1
  1415                           
  1416                           	psect	cstackBANK1
  1417  00011F                     __pcstackBANK1:
  1418                           	opt stack 0
  1419  00011F                     _Update_Screen$2393:
  1420                           	opt stack 0
  1421                           
  1422                           ; 2 bytes @ 0x0
  1423  00011F                     	ds	2
  1424  000121                     Update_Screen@neg_tempF:
  1425                           	opt stack 0
  1426                           
  1427                           ; 2 bytes @ 0x2
  1428  000121                     	ds	2
  1429  000123                     _Update_Screen$2392:
  1430                           	opt stack 0
  1431                           
  1432                           ; 2 bytes @ 0x4
  1433  000123                     	ds	2
  1434  000125                     main@U:
  1435                           	opt stack 0
  1436                           
  1437                           ; 1 bytes @ 0x6
  1438  000125                     	ds	1
  1439  000126                     main@j:
  1440                           	opt stack 0
  1441                           
  1442                           ; 2 bytes @ 0x7
  1443  000126                     	ds	2
  1444                           tblptru	equ	0xFF8
  1445                           tblptrh	equ	0xFF7
  1446                           tblptrl	equ	0xFF6
  1447                           tablat	equ	0xFF5
  1448                           postinc0	equ	0xFEE
  1449                           wreg	equ	0xFE8
  1450                           postdec1	equ	0xFE5
  1451                           fsr1l	equ	0xFE1
  1452                           
  1453                           	psect	cstackBANK0
  1454  0000F7                     __pcstackBANK0:
  1455                           	opt stack 0
  1456  0000F7                     drawtext@x:
  1457                           	opt stack 0
  1458                           
  1459                           ; 1 bytes @ 0x0
  1460  0000F7                     	ds	1
  1461  0000F8                     drawtext@textsize:
  1462                           	opt stack 0
  1463                           
  1464                           ; 2 bytes @ 0x1
  1465  0000F8                     	ds	2
  1466  0000FA                     drawtext@i:
  1467                           	opt stack 0
  1468                           
  1469                           ; 2 bytes @ 0x3
  1470  0000FA                     	ds	2
  1471  0000FC                     drawtext@cursor_y:
  1472                           	opt stack 0
  1473                           
  1474                           ; 1 bytes @ 0x5
  1475  0000FC                     	ds	1
  1476  0000FD                     drawtext@cursor_x:
  1477                           	opt stack 0
  1478                           
  1479                           ; 1 bytes @ 0x6
  1480  0000FD                     	ds	1
  1481                           tblptru	equ	0xFF8
  1482                           tblptrh	equ	0xFF7
  1483                           tblptrl	equ	0xFF6
  1484                           tablat	equ	0xFF5
  1485                           postinc0	equ	0xFEE
  1486                           wreg	equ	0xFE8
  1487                           postdec1	equ	0xFE5
  1488                           fsr1l	equ	0xFE1
  1489                           
  1490                           	psect	cstackCOMRAM
  1491  000001                     __pcstackCOMRAM:
  1492                           	opt stack 0
  1493  000001                     ??_INT0_isr:
  1494  000001                     
  1495                           ; 1 bytes @ 0x0
  1496  000001                     	ds	2
  1497  000003                     ??_chkisr:
  1498                           
  1499                           ; 0 bytes @ 0x2
  1500  000003                     	ds	14
  1501  000011                     ??_isdigit:
  1502  000011                     ?_strlen:
  1503                           	opt stack 0
  1504  000011                     ?___wmul:
  1505                           	opt stack 0
  1506  000011                     ?___awmod:
  1507                           	opt stack 0
  1508  000011                     ?___lwdiv:
  1509                           	opt stack 0
  1510  000011                     ?___ftpack:
  1511                           	opt stack 0
  1512  000011                     ?___fttol:
  1513                           	opt stack 0
  1514  000011                     I2C_Read@ack:
  1515                           	opt stack 0
  1516  000011                     I2C_Write@outByte:
  1517                           	opt stack 0
  1518  000011                     spiwrite@x:
  1519                           	opt stack 0
  1520  000011                     putch@c:
  1521                           	opt stack 0
  1522  000011                     Set_DC_RGB@duty_cycle:
  1523                           	opt stack 0
  1524  000011                     Set_RPM_RGB@rpm:
  1525                           	opt stack 0
  1526  000011                     Wait_One_Sec@j:
  1527                           	opt stack 0
  1528  000011                     OpenUSART@spbrg:
  1529                           	opt stack 0
  1530  000011                     ___wmul@multiplier:
  1531                           	opt stack 0
  1532  000011                     ___awmod@dividend:
  1533                           	opt stack 0
  1534  000011                     ___lwdiv@dividend:
  1535                           	opt stack 0
  1536  000011                     strcpy@to:
  1537                           	opt stack 0
  1538  000011                     strlen@s:
  1539                           	opt stack 0
  1540  000011                     ___ftpack@arg:
  1541                           	opt stack 0
  1542  000011                     ___fttol@f1:
  1543                           	opt stack 0
  1544  000011                     I2C_Init@c:
  1545                           	opt stack 0
  1546                           
  1547                           ; 4 bytes @ 0x10
  1548  000011                     	ds	1
  1549  000012                     I2C_Read@n:
  1550                           	opt stack 0
  1551  000012                     I2C_Write@n:
  1552                           	opt stack 0
  1553  000012                     spiwrite@spidata:
  1554                           	opt stack 0
  1555  000012                     _isdigit$2041:
  1556                           	opt stack 0
  1557                           
  1558                           ; 1 bytes @ 0x11
  1559  000012                     	ds	1
  1560  000013                     ??_strlen:
  1561  000013                     I2C_Read@inByte:
  1562                           	opt stack 0
  1563  000013                     I2C_Write_Cmd_Only@Cmd:
  1564                           	opt stack 0
  1565  000013                     I2C_Write_Cmd_Write_Data@Cmd:
  1566                           	opt stack 0
  1567  000013                     DS3231_Setup_Time@Device:
  1568                           	opt stack 0
  1569  000013                     write_command@cmd_:
  1570                           	opt stack 0
  1571  000013                     write_data@data_:
  1572                           	opt stack 0
  1573  000013                     OpenUSART@config:
  1574                           	opt stack 0
  1575  000013                     isdigit@c:
  1576                           	opt stack 0
  1577  000013                     ___wmul@multiplicand:
  1578                           	opt stack 0
  1579  000013                     ___awmod@divisor:
  1580                           	opt stack 0
  1581  000013                     ___lwdiv@divisor:
  1582                           	opt stack 0
  1583  000013                     strcpy@from:
  1584                           	opt stack 0
  1585                           
  1586                           ; 2 bytes @ 0x12
  1587  000013                     	ds	1
  1588  000014                     ?_DS1621_Read_Temp:
  1589                           	opt stack 0
  1590  000014                     I2C_Write_Cmd_Only@Device:
  1591                           	opt stack 0
  1592  000014                     I2C_Write_Cmd_Write_Data@Data_Out:
  1593                           	opt stack 0
  1594  000014                     DS3231_Read_Time@Address:
  1595                           	opt stack 0
  1596  000014                     DS3231_Setup_Time@Address:
  1597                           	opt stack 0
  1598  000014                     setAddrWindow@y0:
  1599                           	opt stack 0
  1600  000014                     ___ftpack@exp:
  1601                           	opt stack 0
  1602                           
  1603                           ; 1 bytes @ 0x13
  1604  000014                     	ds	1
  1605  000015                     ??___fttol:
  1606  000015                     I2C_Write_Cmd_Write_Data@Device:
  1607                           	opt stack 0
  1608  000015                     DS3231_Read_Time@Device:
  1609                           	opt stack 0
  1610  000015                     setAddrWindow@x1:
  1611                           	opt stack 0
  1612  000015                     ___awmod@counter:
  1613                           	opt stack 0
  1614  000015                     ___ftpack@sign:
  1615                           	opt stack 0
  1616  000015                     ___lwdiv@counter:
  1617                           	opt stack 0
  1618  000015                     ___wmul@product:
  1619                           	opt stack 0
  1620  000015                     strcpy@cp:
  1621                           	opt stack 0
  1622  000015                     strlen@cp:
  1623                           	opt stack 0
  1624                           
  1625                           ; 2 bytes @ 0x14
  1626  000015                     	ds	1
  1627  000016                     ??___ftpack:
  1628  000016                     DS1621_Init@Device:
  1629                           	opt stack 0
  1630  000016                     DS1621_Read_Temp@Cmd:
  1631                           	opt stack 0
  1632  000016                     setAddrWindow@y1:
  1633                           	opt stack 0
  1634  000016                     ___awmod@sign:
  1635                           	opt stack 0
  1636  000016                     ___lwdiv@quotient:
  1637                           	opt stack 0
  1638                           
  1639                           ; 2 bytes @ 0x15
  1640  000016                     	ds	1
  1641  000017                     ?___awdiv:
  1642                           	opt stack 0
  1643  000017                     DS1621_Read_Temp@Data_Ret:
  1644                           	opt stack 0
  1645  000017                     setAddrWindow@x0:
  1646                           	opt stack 0
  1647  000017                     delay_ms@ms:
  1648                           	opt stack 0
  1649  000017                     ___awdiv@dividend:
  1650                           	opt stack 0
  1651                           
  1652                           ; 2 bytes @ 0x16
  1653  000017                     	ds	1
  1654  000018                     ?___lwmod:
  1655                           	opt stack 0
  1656  000018                     DS1621_Read_Temp@Device:
  1657                           	opt stack 0
  1658  000018                     drawPixel@y:
  1659                           	opt stack 0
  1660  000018                     drawFastVLine@y:
  1661                           	opt stack 0
  1662  000018                     fillRectangle@y:
  1663                           	opt stack 0
  1664  000018                     ___lwmod@dividend:
  1665                           	opt stack 0
  1666                           
  1667                           ; 2 bytes @ 0x17
  1668  000018                     	ds	1
  1669  000019                     ??_delay_ms:
  1670  000019                     ?___lbtoft:
  1671                           	opt stack 0
  1672  000019                     drawFastVLine@h:
  1673                           	opt stack 0
  1674  000019                     fillRectangle@w:
  1675                           	opt stack 0
  1676  000019                     drawPixel@color:
  1677                           	opt stack 0
  1678  000019                     ___awdiv@divisor:
  1679                           	opt stack 0
  1680                           
  1681                           ; 2 bytes @ 0x18
  1682  000019                     	ds	1
  1683  00001A                     fillRectangle@h:
  1684                           	opt stack 0
  1685  00001A                     ___fttol@sign1:
  1686                           	opt stack 0
  1687  00001A                     drawFastVLine@color:
  1688                           	opt stack 0
  1689  00001A                     ___lwmod@divisor:
  1690                           	opt stack 0
  1691                           
  1692                           ; 2 bytes @ 0x19
  1693  00001A                     	ds	1
  1694  00001B                     drawPixel@x:
  1695                           	opt stack 0
  1696  00001B                     ___awdiv@counter:
  1697                           	opt stack 0
  1698  00001B                     delay_ms@count:
  1699                           	opt stack 0
  1700  00001B                     fillRectangle@color:
  1701                           	opt stack 0
  1702  00001B                     ___fttol@lval:
  1703                           	opt stack 0
  1704                           
  1705                           ; 4 bytes @ 0x1A
  1706  00001B                     	ds	1
  1707  00001C                     ??_drawFastVLine:
  1708  00001C                     ___awdiv@sign:
  1709                           	opt stack 0
  1710  00001C                     ___lbtoft@c:
  1711                           	opt stack 0
  1712  00001C                     ___lwmod@counter:
  1713                           	opt stack 0
  1714  00001C                     drawCircle@x0:
  1715                           	opt stack 0
  1716                           
  1717                           ; 2 bytes @ 0x1B
  1718  00001C                     	ds	1
  1719  00001D                     ??_fillRectangle:
  1720  00001D                     ?_printf:
  1721                           	opt stack 0
  1722  00001D                     ?___ftmul:
  1723                           	opt stack 0
  1724  00001D                     printf@f:
  1725                           	opt stack 0
  1726  00001D                     ___awdiv@quotient:
  1727                           	opt stack 0
  1728  00001D                     ___ftmul@f1:
  1729                           	opt stack 0
  1730                           
  1731                           ; 3 bytes @ 0x1C
  1732  00001D                     	ds	1
  1733  00001E                     drawCircle@y0:
  1734                           	opt stack 0
  1735                           
  1736                           ; 2 bytes @ 0x1D
  1737  00001E                     	ds	1
  1738  00001F                     ?_get_RPM:
  1739                           	opt stack 0
  1740  00001F                     ___fttol@exp1:
  1741                           	opt stack 0
  1742                           
  1743                           ; 1 bytes @ 0x1E
  1744  00001F                     	ds	1
  1745  000020                     drawFastVLine@hi:
  1746                           	opt stack 0
  1747  000020                     drawCircle@r:
  1748                           	opt stack 0
  1749  000020                     ___ftmul@f2:
  1750                           	opt stack 0
  1751                           
  1752                           ; 3 bytes @ 0x1F
  1753  000020                     	ds	1
  1754  000021                     drawFastVLine@lo:
  1755                           	opt stack 0
  1756  000021                     fillRectangle@hi:
  1757                           	opt stack 0
  1758  000021                     get_RPM@RPS:
  1759                           	opt stack 0
  1760                           
  1761                           ; 2 bytes @ 0x20
  1762  000021                     	ds	1
  1763  000022                     drawFastVLine@x:
  1764                           	opt stack 0
  1765  000022                     fillRectangle@lo:
  1766                           	opt stack 0
  1767  000022                     drawCircle@color:
  1768                           	opt stack 0
  1769                           
  1770                           ; 2 bytes @ 0x21
  1771  000022                     	ds	1
  1772  000023                     ??___ftmul:
  1773  000023                     fillRect@y:
  1774                           	opt stack 0
  1775  000023                     fillRectangle@x:
  1776                           	opt stack 0
  1777                           
  1778                           ; 1 bytes @ 0x22
  1779  000023                     	ds	1
  1780  000024                     ??_drawCircle:
  1781  000024                     fillRect@w:
  1782                           	opt stack 0
  1783  000024                     fillScreen@color:
  1784                           	opt stack 0
  1785                           
  1786                           ; 2 bytes @ 0x23
  1787  000024                     	ds	1
  1788  000025                     fillRect@h:
  1789                           	opt stack 0
  1790                           
  1791                           ; 1 bytes @ 0x24
  1792  000025                     	ds	1
  1793  000026                     ___ftmul@exp:
  1794                           	opt stack 0
  1795  000026                     fillRect@color:
  1796                           	opt stack 0
  1797  000026                     drawCircle@ddF_x:
  1798                           	opt stack 0
  1799                           
  1800                           ; 2 bytes @ 0x25
  1801  000026                     	ds	1
  1802  000027                     ___ftmul@f3_as_product:
  1803                           	opt stack 0
  1804                           
  1805                           ; 3 bytes @ 0x26
  1806  000027                     	ds	1
  1807  000028                     ??_fillRect:
  1808  000028                     drawCircle@ddF_y:
  1809                           	opt stack 0
  1810                           
  1811                           ; 2 bytes @ 0x27
  1812  000028                     	ds	2
  1813  00002A                     ___ftmul@cntr:
  1814                           	opt stack 0
  1815  00002A                     drawCircle@f:
  1816                           	opt stack 0
  1817                           
  1818                           ; 2 bytes @ 0x29
  1819  00002A                     	ds	1
  1820  00002B                     ??_printf:
  1821  00002B                     fillRect@x:
  1822                           	opt stack 0
  1823  00002B                     ___ftmul@sign:
  1824                           	opt stack 0
  1825                           
  1826                           ; 1 bytes @ 0x2A
  1827  00002B                     	ds	1
  1828  00002C                     ?___ftdiv:
  1829                           	opt stack 0
  1830  00002C                     fillRect@i:
  1831                           	opt stack 0
  1832  00002C                     drawCircle@x:
  1833                           	opt stack 0
  1834  00002C                     ___ftdiv@f1:
  1835                           	opt stack 0
  1836                           
  1837                           ; 3 bytes @ 0x2B
  1838  00002C                     	ds	2
  1839  00002E                     drawChar@y:
  1840                           	opt stack 0
  1841  00002E                     drawCircle@y:
  1842                           	opt stack 0
  1843                           
  1844                           ; 2 bytes @ 0x2D
  1845  00002E                     	ds	1
  1846  00002F                     drawChar@c:
  1847                           	opt stack 0
  1848  00002F                     printf@idx:
  1849                           	opt stack 0
  1850  00002F                     ___ftdiv@f2:
  1851                           	opt stack 0
  1852                           
  1853                           ; 3 bytes @ 0x2E
  1854  00002F                     	ds	1
  1855  000030                     drawChar@color:
  1856                           	opt stack 0
  1857  000030                     printf@ap:
  1858                           	opt stack 0
  1859                           
  1860                           ; 2 bytes @ 0x2F
  1861  000030                     	ds	2
  1862  000032                     ??___ftdiv:
  1863  000032                     printf@prec:
  1864                           	opt stack 0
  1865  000032                     drawChar@bg:
  1866                           	opt stack 0
  1867                           
  1868                           ; 2 bytes @ 0x31
  1869  000032                     	ds	1
  1870  000033                     printf@val:
  1871                           	opt stack 0
  1872                           
  1873                           ; 2 bytes @ 0x32
  1874  000033                     	ds	1
  1875  000034                     drawChar@size:
  1876                           	opt stack 0
  1877                           
  1878                           ; 1 bytes @ 0x33
  1879  000034                     	ds	1
  1880  000035                     drawChar@line:
  1881                           	opt stack 0
  1882  000035                     printf@flag:
  1883                           	opt stack 0
  1884  000035                     ___ftdiv@cntr:
  1885                           	opt stack 0
  1886                           
  1887                           ; 1 bytes @ 0x34
  1888  000035                     	ds	1
  1889  000036                     drawChar@x:
  1890                           	opt stack 0
  1891  000036                     printf@width:
  1892                           	opt stack 0
  1893  000036                     ___ftdiv@f3:
  1894                           	opt stack 0
  1895                           
  1896                           ; 3 bytes @ 0x35
  1897  000036                     	ds	1
  1898  000037                     drawChar@j:
  1899                           	opt stack 0
  1900                           
  1901                           ; 1 bytes @ 0x36
  1902  000037                     	ds	1
  1903  000038                     drawChar@i:
  1904                           	opt stack 0
  1905  000038                     printf@c:
  1906                           	opt stack 0
  1907                           
  1908                           ; 1 bytes @ 0x37
  1909  000038                     	ds	1
  1910  000039                     drawtext@y:
  1911                           	opt stack 0
  1912  000039                     ___ftdiv@exp:
  1913                           	opt stack 0
  1914                           
  1915                           ; 1 bytes @ 0x38
  1916  000039                     	ds	1
  1917  00003A                     ___ftdiv@sign:
  1918                           	opt stack 0
  1919  00003A                     drawtext@_text:
  1920                           	opt stack 0
  1921                           
  1922                           ; 2 bytes @ 0x39
  1923  00003A                     	ds	1
  1924  00003B                     ??_do_update_pwm:
  1925                           
  1926                           ; 0 bytes @ 0x3A
  1927  00003B                     	ds	1
  1928  00003C                     drawtext@color:
  1929                           	opt stack 0
  1930                           
  1931                           ; 2 bytes @ 0x3B
  1932  00003C                     	ds	2
  1933  00003E                     drawtext@bg:
  1934                           	opt stack 0
  1935  00003E                     do_update_pwm@dc_f:
  1936                           	opt stack 0
  1937                           
  1938                           ; 3 bytes @ 0x3D
  1939  00003E                     	ds	2
  1940  000040                     drawtext@size:
  1941                           	opt stack 0
  1942                           
  1943                           ; 1 bytes @ 0x3F
  1944  000040                     	ds	1
  1945  000041                     ??_drawtext:
  1946  000041                     do_update_pwm@duty_cycle:
  1947                           	opt stack 0
  1948                           
  1949                           ; 1 bytes @ 0x40
  1950  000041                     	ds	1
  1951  000042                     do_update_pwm@dc_I:
  1952                           	opt stack 0
  1953                           
  1954                           ; 2 bytes @ 0x41
  1955  000042                     	ds	1
  1956  000043                     ??_Update_Screen:
  1957                           
  1958                           ; 0 bytes @ 0x42
  1959  000043                     	ds	1
  1960  000044                     
  1961                           ; 0 bytes @ 0x43
  1962  000044                     	ds	1
  1963  000045                     
  1964                           ; 0 bytes @ 0x44
  1965  000045                     	ds	1
  1966                           tblptru	equ	0xFF8
  1967                           tblptrh	equ	0xFF7
  1968                           tblptrl	equ	0xFF6
  1969                           tablat	equ	0xFF5
  1970                           postinc0	equ	0xFEE
  1971                           wreg	equ	0xFE8
  1972                           postdec1	equ	0xFE5
  1973                           fsr1l	equ	0xFE1
  1974                           
  1975 ;;
  1976 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1977 ;;
  1978 ;; *************** function _main *****************
  1979 ;; Defined at:
  1980 ;;		line 117 in file "Lab11pA_Restart.c"
  1981 ;; Parameters:    Size  Location     Type
  1982 ;;		None
  1983 ;; Auto vars:     Size  Location     Type
  1984 ;;  j               2    7[BANK1 ] int 
  1985 ;;  U               1    6[BANK1 ] unsigned char 
  1986 ;; Return value:  Size  Location     Type
  1987 ;;		None               void
  1988 ;; Registers used:
  1989 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1990 ;; Tracked objects:
  1991 ;;		On entry : 0/0
  1992 ;;		On exit  : 0/0
  1993 ;;		Unchanged: 0/0
  1994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1995 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1996 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1997 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1998 ;;      Totals:         1       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1999 ;;Total ram usage:        4 bytes
  2000 ;; Hardware stack levels required when called:   11
  2001 ;; This function calls:
  2002 ;;		_DS1621_Read_Temp
  2003 ;;		_DS3231_Read_Time
  2004 ;;		_DS3231_Setup_Time
  2005 ;;		_Decrease_Speed
  2006 ;;		_Do_Beep
  2007 ;;		_Do_Init
  2008 ;;		_Increase_Speed
  2009 ;;		_Initialize_Screen
  2010 ;;		_Set_DC_RGB
  2011 ;;		_Set_RPM_RGB
  2012 ;;		_Toggle_Fan
  2013 ;;		_Update_Screen
  2014 ;;		___awdiv
  2015 ;;		___wmul
  2016 ;;		_do_update_pwm
  2017 ;;		_get_RPM
  2018 ;;		_printf
  2019 ;; This function is called by:
  2020 ;;		Startup code after reset
  2021 ;; This function uses a non-reentrant model
  2022 ;;
  2023                           
  2024                           	psect	text0
  2025  000A0E                     __ptext0:
  2026                           	opt stack 0
  2027  000A0E                     _main:
  2028                           	opt stack 20
  2029                           
  2030                           ;Lab11pA_Restart.c: 119: Do_Init();
  2031                           
  2032                           ;incstack = 0
  2033  000A0E  EC06  F010         	call	_Do_Init	;wreg free
  2034                           
  2035                           ;Lab11pA_Restart.c: 120: Initialize_Screen();
  2036  000A12  ECD2  F003         	call	_Initialize_Screen	;wreg free
  2037                           
  2038                           ;Lab11pA_Restart.c: 122: PORTAbits.RA5 = 0;
  2039  000A16  9A80               	bcf	3968,5,c	;volatile
  2040                           
  2041                           ;Lab11pA_Restart.c: 123: PORTEbits.RE2 = 0;
  2042  000A18  9484               	bcf	3972,2,c	;volatile
  2043                           
  2044                           ;Lab11pA_Restart.c: 124: duty_cycle = 50;
  2045  000A1A  0E32               	movlw	50
  2046  000A1C  6E5C               	movwf	_duty_cycle,c
  2047                           
  2048                           ;Lab11pA_Restart.c: 125: do_update_pwm(duty_cycle);
  2049  000A1E  505C               	movf	_duty_cycle,w,c
  2050  000A20  EC8B  F00C         	call	_do_update_pwm
  2051  000A24  D000               	goto	l7044
  2052  000A26                     l7044:
  2053                           
  2054                           ;Lab11pA_Restart.c: 127: {
  2055                           ;Lab11pA_Restart.c: 129: DS3231_Read_Time();
  2056  000A26  EC0B  F00F         	call	_DS3231_Read_Time	;wreg free
  2057                           
  2058                           ;Lab11pA_Restart.c: 131: if(tempSecond != second)
  2059  000A2A  5062               	movf	_second,w,c
  2060  000A2C  186E               	xorwf	_tempSecond,w,c
  2061  000A2E  B4D8               	btfsc	status,2,c
  2062  000A30  D075               	goto	l7068
  2063                           
  2064                           ;Lab11pA_Restart.c: 132: {
  2065                           ;Lab11pA_Restart.c: 133: tempSecond = second;
  2066  000A32  C062  F06E         	movff	_second,_tempSecond
  2067                           
  2068                           ;Lab11pA_Restart.c: 134: DS1621_tempC = DS1621_Read_Temp();
  2069  000A36  ECCA  F010         	call	_DS1621_Read_Temp	;wreg free
  2070  000A3A  C014  F046         	movff	?_DS1621_Read_Temp,_DS1621_tempC
  2071  000A3E  C015  F047         	movff	?_DS1621_Read_Temp+1,_DS1621_tempC+1
  2072                           
  2073                           ;Lab11pA_Restart.c: 135: DS1621_tempF = (DS1621_tempC * 9 / 5) + 32;
  2074  000A42  C046  F011         	movff	_DS1621_tempC,___wmul@multiplier
  2075  000A46  C047  F012         	movff	_DS1621_tempC+1,___wmul@multiplier+1
  2076  000A4A  0E00               	movlw	0
  2077  000A4C  6E14               	movwf	___wmul@multiplicand+1,c
  2078  000A4E  0E09               	movlw	9
  2079  000A50  6E13               	movwf	___wmul@multiplicand,c
  2080  000A52  EC48  F011         	call	___wmul	;wreg free
  2081  000A56  C011  F017         	movff	?___wmul,___awdiv@dividend
  2082  000A5A  C012  F018         	movff	?___wmul+1,___awdiv@dividend+1
  2083  000A5E  0E00               	movlw	0
  2084  000A60  6E1A               	movwf	___awdiv@divisor+1,c
  2085  000A62  0E05               	movlw	5
  2086  000A64  6E19               	movwf	___awdiv@divisor,c
  2087  000A66  ECE6  F00C         	call	___awdiv	;wreg free
  2088  000A6A  0E20               	movlw	32
  2089  000A6C  2417               	addwf	?___awdiv,w,c
  2090  000A6E  6E48               	movwf	_DS1621_tempF,c
  2091  000A70  0E00               	movlw	0
  2092  000A72  2018               	addwfc	?___awdiv+1,w,c
  2093  000A74  6E49               	movwf	_DS1621_tempF+1,c
  2094                           
  2095                           ;Lab11pA_Restart.c: 136: rpm = get_RPM();
  2096  000A76  EC4E  F010         	call	_get_RPM	;wreg free
  2097  000A7A  C01F  F04C         	movff	?_get_RPM,_rpm
  2098  000A7E  C020  F04D         	movff	?_get_RPM+1,_rpm+1
  2099                           
  2100                           ;Lab11pA_Restart.c: 137: printf ("%02x:%02x:%02x %02x/%02x/%02x",hour,minute,second,mont
      +                          h,day,year);
  2101  000A82  0E14               	movlw	low STR_12
  2102  000A84  6E1D               	movwf	printf@f,c
  2103  000A86  0EFF               	movlw	high STR_12
  2104  000A88  6E1E               	movwf	printf@f+1,c
  2105  000A8A  C05E  F01F         	movff	_hour,?_printf+2
  2106  000A8E  6A20               	clrf	?_printf+3,c
  2107  000A90  C05F  F021         	movff	_minute,?_printf+4
  2108  000A94  6A22               	clrf	?_printf+5,c
  2109  000A96  C062  F023         	movff	_second,?_printf+6
  2110  000A9A  6A24               	clrf	?_printf+7,c
  2111  000A9C  C060  F025         	movff	_month,?_printf+8
  2112  000AA0  6A26               	clrf	?_printf+9,c
  2113  000AA2  C05A  F027         	movff	_day,?_printf+10
  2114  000AA6  6A28               	clrf	?_printf+11,c
  2115  000AA8  C06C  F029         	movff	_year,?_printf+12
  2116  000AAC  6A2A               	clrf	?_printf+13,c
  2117  000AAE  EC25  F002         	call	_printf	;wreg free
  2118                           
  2119                           ;Lab11pA_Restart.c: 138: printf (" Temp = %d C = %d F ", DS1621_tempC, DS1621_tempF);
  2120  000AB2  0E76               	movlw	low STR_13
  2121  000AB4  6E1D               	movwf	printf@f,c
  2122  000AB6  0EFF               	movlw	high STR_13
  2123  000AB8  6E1E               	movwf	printf@f+1,c
  2124  000ABA  C046  F01F         	movff	_DS1621_tempC,?_printf+2
  2125  000ABE  C047  F020         	movff	_DS1621_tempC+1,?_printf+3
  2126  000AC2  C048  F021         	movff	_DS1621_tempF,?_printf+4
  2127  000AC6  C049  F022         	movff	_DS1621_tempF+1,?_printf+5
  2128  000ACA  EC25  F002         	call	_printf	;wreg free
  2129                           
  2130                           ;Lab11pA_Restart.c: 139: printf ("RPM = %d  dc = %d\r\n", rpm, duty_cycle);
  2131  000ACE  0E8B               	movlw	low STR_14
  2132  000AD0  6E1D               	movwf	printf@f,c
  2133  000AD2  0EFF               	movlw	high STR_14
  2134  000AD4  6E1E               	movwf	printf@f+1,c
  2135  000AD6  C04C  F01F         	movff	_rpm,?_printf+2
  2136  000ADA  C04D  F020         	movff	_rpm+1,?_printf+3
  2137  000ADE  C05C  F021         	movff	_duty_cycle,?_printf+4
  2138  000AE2  6A22               	clrf	?_printf+5,c
  2139  000AE4  EC25  F002         	call	_printf	;wreg free
  2140                           
  2141                           ;Lab11pA_Restart.c: 140: char U = (int)(duty_cycle/10);
  2142  000AE8  C05C  F017         	movff	_duty_cycle,___awdiv@dividend
  2143  000AEC  6A18               	clrf	___awdiv@dividend+1,c
  2144  000AEE  0E00               	movlw	0
  2145  000AF0  6E1A               	movwf	___awdiv@divisor+1,c
  2146  000AF2  0E0A               	movlw	10
  2147  000AF4  6E19               	movwf	___awdiv@divisor,c
  2148  000AF6  ECE6  F00C         	call	___awdiv	;wreg free
  2149  000AFA  5017               	movf	?___awdiv,w,c
  2150  000AFC  0101               	movlb	1	; () banked
  2151  000AFE  6F25               	movwf	main@U& (0+255),b
  2152                           
  2153                           ; BSR set to: 1
  2154                           ;Lab11pA_Restart.c: 141: Set_DC_RGB(U);
  2155  000B00  C125  F011         	movff	main@U,Set_DC_RGB@duty_cycle
  2156  000B04  6A12               	clrf	Set_DC_RGB@duty_cycle+1,c
  2157  000B06  EC48  F008         	call	_Set_DC_RGB	;wreg free
  2158                           
  2159                           ;Lab11pA_Restart.c: 142: Set_RPM_RGB(rpm);
  2160  000B0A  C04C  F011         	movff	_rpm,Set_RPM_RGB@rpm
  2161  000B0E  C04D  F012         	movff	_rpm+1,Set_RPM_RGB@rpm+1
  2162  000B12  EC6C  F00E         	call	_Set_RPM_RGB	;wreg free
  2163                           
  2164                           ;Lab11pA_Restart.c: 143: Update_Screen();
  2165  000B16  EC0E  F000         	call	_Update_Screen	;wreg free
  2166  000B1A  D000               	goto	l7068
  2167  000B1C                     l7068:
  2168                           
  2169                           ;Lab11pA_Restart.c: 144: }
  2170                           ;Lab11pA_Restart.c: 146: if (nec_ok == 1)
  2171  000B1C  0100               	movlb	0	; () banked
  2172  000B1E  05F3               	decf	_nec_ok& (0+255),w,b
  2173  000B20  0100               	movlb	0	; () banked
  2174  000B22  11F4               	iorwf	(_nec_ok+1)& (0+255),w,b
  2175  000B24  A4D8               	btfss	status,2,c
  2176  000B26  D77F               	goto	l7044
  2177                           
  2178                           ; BSR set to: 0
  2179                           ;Lab11pA_Restart.c: 147: {
  2180                           ;Lab11pA_Restart.c: 148: nec_ok = 0;
  2181  000B28  0E00               	movlw	0
  2182  000B2A  0100               	movlb	0	; () banked
  2183  000B2C  6FF4               	movwf	(_nec_ok+1)& (0+255),b
  2184  000B2E  0E00               	movlw	0
  2185  000B30  6FF3               	movwf	_nec_ok& (0+255),b
  2186                           
  2187                           ; BSR set to: 0
  2188                           ;Lab11pA_Restart.c: 149: printf ("NEC_Code = %x\r\n", Nec_code1);
  2189  000B32  0EB0               	movlw	low STR_15
  2190  000B34  6E1D               	movwf	printf@f,c
  2191  000B36  0EFF               	movlw	high STR_15
  2192  000B38  6E1E               	movwf	printf@f+1,c
  2193  000B3A  C051  F01F         	movff	_Nec_code1,?_printf+2
  2194  000B3E  6A20               	clrf	?_printf+3,c
  2195  000B40  EC25  F002         	call	_printf	;wreg free
  2196                           
  2197                           ;Lab11pA_Restart.c: 151: INTCONbits.INT0IE = 1;
  2198  000B44  88F2               	bsf	intcon,4,c	;volatile
  2199                           
  2200                           ;Lab11pA_Restart.c: 152: INTCON2bits.INTEDG0 = 0;
  2201  000B46  9CF1               	bcf	intcon2,6,c	;volatile
  2202                           
  2203                           ;Lab11pA_Restart.c: 154: found = 0xff;
  2204  000B48  685D               	setf	_found,c
  2205                           
  2206                           ;Lab11pA_Restart.c: 155: for (int j=0; j< 21; j++)
  2207  000B4A  0E00               	movlw	0
  2208  000B4C  0101               	movlb	1	; () banked
  2209  000B4E  6F27               	movwf	(main@j+1)& (0+255),b
  2210  000B50  0E00               	movlw	0
  2211  000B52  6F26               	movwf	main@j& (0+255),b
  2212  000B54                     l7082:
  2213                           
  2214                           ; BSR set to: 1
  2215  000B54  0101               	movlb	1	; () banked
  2216  000B56  BF27               	btfsc	(main@j+1)& (0+255),7,b
  2217  000B58  D00A               	goto	l7086
  2218  000B5A  0101               	movlb	1	; () banked
  2219  000B5C  5127               	movf	(main@j+1)& (0+255),w,b
  2220  000B5E  E120               	bnz	l7096
  2221  000B60  0E15               	movlw	21
  2222  000B62  0101               	movlb	1	; () banked
  2223  000B64  5D26               	subwf	main@j& (0+255),w,b
  2224  000B66  B0D8               	btfsc	status,0,c
  2225  000B68  D01B               	goto	l7096
  2226  000B6A  D001               	goto	l7086
  2227                           
  2228                           ; BSR set to: 1
  2229  000B6C  D019               	goto	l7096
  2230  000B6E                     l7086:
  2231                           
  2232                           ; BSR set to: 1
  2233                           ;Lab11pA_Restart.c: 156: {
  2234                           ;Lab11pA_Restart.c: 157: if (Nec_code1 == array1[j])
  2235  000B6E  0E80               	movlw	low _array1
  2236  000B70  0101               	movlb	1	; () banked
  2237  000B72  2526               	addwf	main@j& (0+255),w,b
  2238  000B74  6ED9               	movwf	fsr2l,c
  2239  000B76  0E00               	movlw	high _array1
  2240  000B78  0101               	movlb	1	; () banked
  2241  000B7A  2127               	addwfc	(main@j+1)& (0+255),w,b
  2242  000B7C  6EDA               	movwf	fsr2h,c
  2243  000B7E  5051               	movf	_Nec_code1,w,c
  2244  000B80  18DE               	xorwf	postinc2,w,c
  2245  000B82  A4D8               	btfss	status,2,c
  2246  000B84  D008               	goto	l7092
  2247                           
  2248                           ; BSR set to: 1
  2249                           ;Lab11pA_Restart.c: 158: {
  2250                           ;Lab11pA_Restart.c: 159: found = j;
  2251  000B86  C126  F05D         	movff	main@j,_found
  2252                           
  2253                           ; BSR set to: 1
  2254                           ;Lab11pA_Restart.c: 160: j = 21;
  2255  000B8A  0E00               	movlw	0
  2256  000B8C  0101               	movlb	1	; () banked
  2257  000B8E  6F27               	movwf	(main@j+1)& (0+255),b
  2258  000B90  0E15               	movlw	21
  2259  000B92  6F26               	movwf	main@j& (0+255),b
  2260  000B94  D000               	goto	l7092
  2261  000B96                     l7092:
  2262                           
  2263                           ; BSR set to: 1
  2264  000B96  0101               	movlb	1	; () banked
  2265  000B98  4B26               	infsnz	main@j& (0+255),f,b
  2266  000B9A  2B27               	incf	(main@j+1)& (0+255),f,b
  2267  000B9C  D7DB               	goto	l7082
  2268                           
  2269                           ; BSR set to: 1
  2270  000B9E  D000               	goto	l7096
  2271  000BA0                     l7096:
  2272                           
  2273                           ; BSR set to: 1
  2274                           ;Lab11pA_Restart.c: 161: }
  2275                           ;Lab11pA_Restart.c: 162: }
  2276                           ;Lab11pA_Restart.c: 164: if (found == 0xff)
  2277  000BA0  285D               	incf	_found,w,c
  2278  000BA2  A4D8               	btfss	status,2,c
  2279  000BA4  D007               	goto	l7100
  2280                           
  2281                           ; BSR set to: 1
  2282                           ;Lab11pA_Restart.c: 165: {
  2283                           ;Lab11pA_Restart.c: 166: printf ("Cannot find button \r\n");
  2284  000BA6  0E4A               	movlw	low STR_16
  2285  000BA8  6E1D               	movwf	printf@f,c
  2286  000BAA  0EFF               	movlw	high STR_16
  2287  000BAC  6E1E               	movwf	printf@f+1,c
  2288  000BAE  EC25  F002         	call	_printf	;wreg free
  2289                           
  2290                           ;Lab11pA_Restart.c: 167: }
  2291  000BB2  D739               	goto	l7044
  2292  000BB4                     l7100:
  2293                           
  2294                           ;Lab11pA_Restart.c: 168: else
  2295                           ;Lab11pA_Restart.c: 169: {
  2296                           ;Lab11pA_Restart.c: 170: Do_Beep();
  2297  000BB4  EC03  F012         	call	_Do_Beep	;wreg free
  2298                           
  2299                           ;Lab11pA_Restart.c: 171: printf ("button = %d \r\n", found);
  2300  000BB8  0EC0               	movlw	low STR_17
  2301  000BBA  6E1D               	movwf	printf@f,c
  2302  000BBC  0EFF               	movlw	high STR_17
  2303  000BBE  6E1E               	movwf	printf@f+1,c
  2304  000BC0  C05D  F01F         	movff	_found,?_printf+2
  2305  000BC4  6A20               	clrf	?_printf+3,c
  2306  000BC6  EC25  F002         	call	_printf	;wreg free
  2307                           
  2308                           ;Lab11pA_Restart.c: 172: if (found == 5) Toggle_Fan();
  2309  000BCA  0E05               	movlw	5
  2310  000BCC  185D               	xorwf	_found,w,c
  2311  000BCE  A4D8               	btfss	status,2,c
  2312  000BD0  D003               	goto	l7108
  2313  000BD2  EC1A  F012         	call	_Toggle_Fan	;wreg free
  2314  000BD6  D000               	goto	l7108
  2315  000BD8                     l7108:
  2316                           
  2317                           ;Lab11pA_Restart.c: 173: if (found == 6) Decrease_Speed();
  2318  000BD8  0E06               	movlw	6
  2319  000BDA  185D               	xorwf	_found,w,c
  2320  000BDC  A4D8               	btfss	status,2,c
  2321  000BDE  D003               	goto	l7112
  2322  000BE0  EC70  F011         	call	_Decrease_Speed	;wreg free
  2323  000BE4  D000               	goto	l7112
  2324  000BE6                     l7112:
  2325                           
  2326                           ;Lab11pA_Restart.c: 174: if (found == 7) Increase_Speed();
  2327  000BE6  0E07               	movlw	7
  2328  000BE8  185D               	xorwf	_found,w,c
  2329  000BEA  A4D8               	btfss	status,2,c
  2330  000BEC  D003               	goto	l7116
  2331  000BEE  EC5C  F011         	call	_Increase_Speed	;wreg free
  2332  000BF2  D000               	goto	l7116
  2333  000BF4                     l7116:
  2334                           
  2335                           ;Lab11pA_Restart.c: 175: if (found == 8)
  2336  000BF4  0E08               	movlw	8
  2337  000BF6  185D               	xorwf	_found,w,c
  2338  000BF8  A4D8               	btfss	status,2,c
  2339  000BFA  D009               	goto	l7122
  2340                           
  2341                           ;Lab11pA_Restart.c: 176: {
  2342                           ;Lab11pA_Restart.c: 177: printf("\nTime has been reset\r\n\n");
  2343  000BFC  0E32               	movlw	low STR_18
  2344  000BFE  6E1D               	movwf	printf@f,c
  2345  000C00  0EFF               	movlw	high STR_18
  2346  000C02  6E1E               	movwf	printf@f+1,c
  2347  000C04  EC25  F002         	call	_printf	;wreg free
  2348                           
  2349                           ;Lab11pA_Restart.c: 178: DS3231_Setup_Time();
  2350  000C08  ECD8  F00E         	call	_DS3231_Setup_Time	;wreg free
  2351                           
  2352                           ;Lab11pA_Restart.c: 179: }
  2353  000C0C  D70C               	goto	l7044
  2354  000C0E                     l7122:
  2355                           
  2356                           ;Lab11pA_Restart.c: 180: else do_update_pwm(duty_cycle);
  2357  000C0E  505C               	movf	_duty_cycle,w,c
  2358  000C10  EC8B  F00C         	call	_do_update_pwm
  2359  000C14  D708               	goto	l7044
  2360  000C16  EF0C  F000         	goto	start
  2361  000C1A                     __end_of_main:
  2362                           	opt stack 0
  2363                           tblptru	equ	0xFF8
  2364                           tblptrh	equ	0xFF7
  2365                           tblptrl	equ	0xFF6
  2366                           tablat	equ	0xFF5
  2367                           intcon	equ	0xFF2
  2368                           intcon2	equ	0xFF1
  2369                           postinc0	equ	0xFEE
  2370                           wreg	equ	0xFE8
  2371                           postdec1	equ	0xFE5
  2372                           fsr1l	equ	0xFE1
  2373                           postinc2	equ	0xFDE
  2374                           fsr2h	equ	0xFDA
  2375                           fsr2l	equ	0xFD9
  2376                           status	equ	0xFD8
  2377                           
  2378 ;; *************** function _printf *****************
  2379 ;; Defined at:
  2380 ;;		line 464 in file "E:\XC8\sources\common\doprnt.c"
  2381 ;; Parameters:    Size  Location     Type
  2382 ;;  f               2   28[COMRAM] PTR const unsigned char 
  2383 ;;		 -> STR_18(24), STR_17(15), STR_16(22), STR_15(16), 
  2384 ;;		 -> STR_14(20), STR_13(21), STR_12(30), 
  2385 ;; Auto vars:     Size  Location     Type
  2386 ;;  idx             1   46[COMRAM] unsigned char 
  2387 ;;  tmpval          4    0        struct .
  2388 ;;  cp              3    0        PTR const unsigned char 
  2389 ;;  width           2   53[COMRAM] int 
  2390 ;;  val             2   50[COMRAM] unsigned int 
  2391 ;;  ap              2   47[COMRAM] PTR void [1]
  2392 ;;		 -> ?_printf(2), 
  2393 ;;  len             2    0        unsigned int 
  2394 ;;  c               1   55[COMRAM] char 
  2395 ;;  flag            1   52[COMRAM] unsigned char 
  2396 ;;  prec            1   49[COMRAM] char 
  2397 ;; Return value:  Size  Location     Type
  2398 ;;                  2   28[COMRAM] int 
  2399 ;; Registers used:
  2400 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2401 ;; Tracked objects:
  2402 ;;		On entry : 0/0
  2403 ;;		On exit  : 0/0
  2404 ;;		Unchanged: 0/0
  2405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2406 ;;      Params:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2407 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2408 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2409 ;;      Totals:        28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2410 ;;Total ram usage:       28 bytes
  2411 ;; Hardware stack levels used:    1
  2412 ;; Hardware stack levels required when called:    4
  2413 ;; This function calls:
  2414 ;;		___lwdiv
  2415 ;;		___lwmod
  2416 ;;		___wmul
  2417 ;;		_isdigit
  2418 ;;		_putch
  2419 ;; This function is called by:
  2420 ;;		_main
  2421 ;; This function uses a non-reentrant model
  2422 ;;
  2423                           
  2424                           	psect	text1
  2425  00044A                     __ptext1:
  2426                           	opt stack 0
  2427  00044A                     _printf:
  2428                           	opt stack 26
  2429                           
  2430                           ;doprnt.c: 466: va_list ap;
  2431                           ;doprnt.c: 499: signed char c;
  2432                           ;doprnt.c: 501: int width;
  2433                           ;doprnt.c: 506: signed char prec;
  2434                           ;doprnt.c: 508: unsigned char flag;
  2435                           ;doprnt.c: 523: union {
  2436                           ;doprnt.c: 524: unsigned long vd;
  2437                           ;doprnt.c: 525: double integ;
  2438                           ;doprnt.c: 526: } tmpval;
  2439                           ;doprnt.c: 528: unsigned int val;
  2440                           ;doprnt.c: 529: unsigned len;
  2441                           ;doprnt.c: 530: const char * cp;
  2442                           ;doprnt.c: 533: *ap = __va_start();
  2443                           
  2444                           ;incstack = 0
  2445  00044A  0E1F               	movlw	low (?_printf+2)
  2446  00044C  6E30               	movwf	printf@ap,c
  2447  00044E  0E00               	movlw	high (?_printf+2)
  2448  000450  6E31               	movwf	printf@ap+1,c
  2449                           
  2450                           ;doprnt.c: 536: while(c = *f++) {
  2451  000452  D199               	goto	l6756
  2452  000454                     l6630:
  2453                           
  2454                           ;doprnt.c: 538: if(c != '%')
  2455  000454  0E25               	movlw	37
  2456  000456  1838               	xorwf	printf@c,w,c
  2457  000458  B4D8               	btfsc	status,2,c
  2458  00045A  D004               	goto	l6634
  2459                           
  2460                           ;doprnt.c: 540: {
  2461                           ;doprnt.c: 541: (putch(c) );
  2462  00045C  5038               	movf	printf@c,w,c
  2463  00045E  EC7D  F012         	call	_putch
  2464                           
  2465                           ;doprnt.c: 542: continue;
  2466  000462  D191               	goto	l6756
  2467  000464                     l6634:
  2468                           
  2469                           ;doprnt.c: 543: }
  2470                           ;doprnt.c: 546: width = 0;
  2471  000464  0E00               	movlw	0
  2472  000466  6E37               	movwf	printf@width+1,c
  2473  000468  0E00               	movlw	0
  2474  00046A  6E36               	movwf	printf@width,c
  2475                           
  2476                           ;doprnt.c: 548: flag = 0;
  2477  00046C  0E00               	movlw	0
  2478  00046E  6E35               	movwf	printf@flag,c
  2479                           
  2480                           ;doprnt.c: 551: switch(*f) {
  2481                           
  2482                           ;doprnt.c: 550: for(;;) {
  2483  000470  D005               	goto	l6640
  2484  000472                     l6636:
  2485                           
  2486                           ;doprnt.c: 580: flag |= 0x04;
  2487  000472  8435               	bsf	printf@flag,2,c
  2488                           
  2489                           ;doprnt.c: 581: f++;
  2490  000474  4A1D               	infsnz	printf@f,f,c
  2491  000476  2A1E               	incf	printf@f+1,f,c
  2492                           
  2493                           ;doprnt.c: 582: continue;
  2494  000478  D001               	goto	l6640
  2495                           
  2496                           ;doprnt.c: 584: }
  2497  00047A  D00B               	goto	l6642
  2498  00047C                     l6640:
  2499  00047C  C01D  FFF6         	movff	printf@f,tblptrl
  2500  000480  C01E  FFF7         	movff	printf@f+1,tblptrh
  2501  000484                     	if	0	;tblptru may be non-zero
  2502  000484                     	endif
  2503  000484                     	if	0	;tblptru may be non-zero
  2504  000484                     	endif
  2505  000484  0008               	tblrd		*
  2506  000486  50F5               	movf	tablat,w,c
  2507                           
  2508                           ; Switch size 1, requested type "space"
  2509                           ; Number of cases is 1, Range of values is 48 to 48
  2510                           ; switch strategies available:
  2511                           ; Name         Instructions Cycles
  2512                           ; simple_byte            4     3 (average)
  2513                           ;	Chosen strategy is simple_byte
  2514  000488  0A30               	xorlw	48	; case 48
  2515  00048A  B4D8               	btfsc	status,2,c
  2516  00048C  D7F2               	goto	l6636
  2517                           
  2518                           ;doprnt.c: 585: break;
  2519  00048E  D001               	goto	l6642
  2520                           
  2521                           ;doprnt.c: 586: }
  2522  000490  D7F5               	goto	l6640
  2523  000492                     l6642:
  2524                           
  2525                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2526  000492  C01D  FFF6         	movff	printf@f,tblptrl
  2527  000496  C01E  FFF7         	movff	printf@f+1,tblptrh
  2528  00049A                     	if	0	;tblptru may be non-zero
  2529  00049A                     	endif
  2530  00049A                     	if	0	;tblptru may be non-zero
  2531  00049A                     	endif
  2532  00049A  0008               	tblrd		*
  2533  00049C  50F5               	movf	tablat,w,c
  2534  00049E  ECA8  F011         	call	_isdigit
  2535  0004A2  A0D8               	btfss	status,0,c
  2536  0004A4  D03B               	goto	l6658
  2537                           
  2538                           ;doprnt.c: 598: width = 0;
  2539  0004A6  0E00               	movlw	0
  2540  0004A8  6E37               	movwf	printf@width+1,c
  2541  0004AA  0E00               	movlw	0
  2542  0004AC  6E36               	movwf	printf@width,c
  2543  0004AE  D000               	goto	l6646
  2544  0004B0                     l6646:
  2545                           
  2546                           ;doprnt.c: 600: width *= 10;
  2547  0004B0  C036  F011         	movff	printf@width,___wmul@multiplier
  2548  0004B4  C037  F012         	movff	printf@width+1,___wmul@multiplier+1
  2549  0004B8  0E00               	movlw	0
  2550  0004BA  6E14               	movwf	___wmul@multiplicand+1,c
  2551  0004BC  0E0A               	movlw	10
  2552  0004BE  6E13               	movwf	___wmul@multiplicand,c
  2553  0004C0  EC48  F011         	call	___wmul	;wreg free
  2554  0004C4  C011  F036         	movff	?___wmul,printf@width
  2555  0004C8  C012  F037         	movff	?___wmul+1,printf@width+1
  2556                           
  2557                           ;doprnt.c: 601: width += *f++ - '0';
  2558  0004CC  0ED0               	movlw	208
  2559  0004CE  6E2B               	movwf	??_printf& (0+255),c
  2560  0004D0  0EFF               	movlw	255
  2561  0004D2  6E2C               	movwf	(??_printf+1)& (0+255),c
  2562  0004D4  C01D  FFF6         	movff	printf@f,tblptrl
  2563  0004D8  C01E  FFF7         	movff	printf@f+1,tblptrh
  2564  0004DC                     	if	0	;tblptru may be non-zero
  2565  0004DC                     	endif
  2566  0004DC                     	if	0	;tblptru may be non-zero
  2567  0004DC                     	endif
  2568  0004DC  0008               	tblrd		*
  2569  0004DE  50F5               	movf	tablat,w,c
  2570  0004E0  6E2D               	movwf	(??_printf+2)& (0+255),c
  2571  0004E2  6A2E               	clrf	(??_printf+3)& (0+255),c
  2572  0004E4  502B               	movf	??_printf,w,c
  2573  0004E6  262D               	addwf	??_printf+2,f,c
  2574  0004E8  502C               	movf	??_printf+1,w,c
  2575  0004EA  222E               	addwfc	??_printf+3,f,c
  2576  0004EC  502D               	movf	??_printf+2,w,c
  2577  0004EE  2636               	addwf	printf@width,f,c
  2578  0004F0  502E               	movf	??_printf+3,w,c
  2579  0004F2  2237               	addwfc	printf@width+1,f,c
  2580  0004F4  4A1D               	infsnz	printf@f,f,c
  2581  0004F6  2A1E               	incf	printf@f+1,f,c
  2582                           
  2583                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2584  0004F8  C01D  FFF6         	movff	printf@f,tblptrl
  2585  0004FC  C01E  FFF7         	movff	printf@f+1,tblptrh
  2586  000500                     	if	0	;tblptru may be non-zero
  2587  000500                     	endif
  2588  000500                     	if	0	;tblptru may be non-zero
  2589  000500                     	endif
  2590  000500  0008               	tblrd		*
  2591  000502  50F5               	movf	tablat,w,c
  2592  000504  ECA8  F011         	call	_isdigit
  2593  000508  A0D8               	btfss	status,0,c
  2594  00050A  D008               	goto	l6658
  2595  00050C  D7D1               	goto	l6646
  2596                           
  2597                           ;doprnt.c: 608: }
  2598                           ;doprnt.c: 635: switch(c = *f++) {
  2599  00050E  D006               	goto	l6658
  2600                           
  2601                           ;doprnt.c: 638: goto alldone;
  2602                           
  2603                           ;doprnt.c: 637: case 0:
  2604  000510  D148               	goto	l746
  2605                           
  2606                           ;doprnt.c: 698: case 'i':
  2607                           ;doprnt.c: 699: break;
  2608                           
  2609                           ;doprnt.c: 697: case 'd':
  2610  000512  D01B               	goto	l709
  2611  000514                     l6654:
  2612                           
  2613                           ;doprnt.c: 721: flag |= 0x80;
  2614  000514  8E35               	bsf	printf@flag,7,c
  2615                           
  2616                           ;doprnt.c: 723: break;
  2617  000516  D019               	goto	l709
  2618                           
  2619                           ;doprnt.c: 813: continue;
  2620                           
  2621                           ;doprnt.c: 802: default:
  2622  000518  D136               	goto	l6756
  2623                           
  2624                           ;doprnt.c: 822: }
  2625  00051A  D017               	goto	l709
  2626  00051C                     l6658:
  2627  00051C  C01D  FFF6         	movff	printf@f,tblptrl
  2628  000520  C01E  FFF7         	movff	printf@f+1,tblptrh
  2629  000524  4A1D               	infsnz	printf@f,f,c
  2630  000526  2A1E               	incf	printf@f+1,f,c
  2631  000528                     	if	0	;tblptru may be non-zero
  2632  000528                     	endif
  2633  000528                     	if	0	;tblptru may be non-zero
  2634  000528                     	endif
  2635  000528  0008               	tblrd		*
  2636  00052A  CFF5 F038          	movff	tablat,printf@c
  2637  00052E  5038               	movf	printf@c,w,c
  2638                           
  2639                           ; Switch size 1, requested type "space"
  2640                           ; Number of cases is 4, Range of values is 0 to 120
  2641                           ; switch strategies available:
  2642                           ; Name         Instructions Cycles
  2643                           ; simple_byte           13     7 (average)
  2644                           ;	Chosen strategy is simple_byte
  2645  000530  0A00               	xorlw	0	; case 0
  2646  000532  B4D8               	btfsc	status,2,c
  2647  000534  D136               	goto	l746
  2648  000536  0A64               	xorlw	100	; case 100
  2649  000538  B4D8               	btfsc	status,2,c
  2650  00053A  D007               	goto	l709
  2651  00053C  0A0D               	xorlw	13	; case 105
  2652  00053E  B4D8               	btfsc	status,2,c
  2653  000540  D004               	goto	l709
  2654  000542  0A11               	xorlw	17	; case 120
  2655  000544  B4D8               	btfsc	status,2,c
  2656  000546  D7E6               	goto	l6654
  2657  000548  D11E               	goto	l6756
  2658  00054A                     l709:
  2659                           
  2660                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  2661  00054A  BE35               	btfsc	printf@flag,7,c
  2662  00054C  D015               	goto	l6670
  2663                           
  2664                           ;doprnt.c: 1253: {
  2665                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2666  00054E  C030  FFD9         	movff	printf@ap,fsr2l
  2667  000552  C031  FFDA         	movff	printf@ap+1,fsr2h
  2668  000556  CFDE F033          	movff	postinc2,printf@val
  2669  00055A  CFDD F034          	movff	postdec2,printf@val+1
  2670  00055E  0E02               	movlw	2
  2671  000560  2630               	addwf	printf@ap,f,c
  2672  000562  0E00               	movlw	0
  2673  000564  2231               	addwfc	printf@ap+1,f,c
  2674                           
  2675                           ;doprnt.c: 1261: if((int)val < 0) {
  2676  000566  AE34               	btfss	printf@val+1,7,c
  2677  000568  D04E               	goto	l6704
  2678                           
  2679                           ;doprnt.c: 1262: flag |= 0x03;
  2680  00056A  0E03               	movlw	3
  2681  00056C  1235               	iorwf	printf@flag,f,c
  2682                           
  2683                           ;doprnt.c: 1263: val = -val;
  2684  00056E  6C33               	negf	printf@val,c
  2685  000570  1E34               	comf	printf@val+1,f,c
  2686  000572  B0D8               	btfsc	status,0,c
  2687  000574  2A34               	incf	printf@val+1,f,c
  2688                           
  2689                           ;doprnt.c: 1264: }
  2690                           ;doprnt.c: 1266: }
  2691  000576  D047               	goto	l6704
  2692  000578                     l6670:
  2693                           
  2694                           ;doprnt.c: 1268: else
  2695                           ;doprnt.c: 1273: {
  2696                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2697  000578  C030  FFD9         	movff	printf@ap,fsr2l
  2698  00057C  C031  FFDA         	movff	printf@ap+1,fsr2h
  2699  000580  CFDE F033          	movff	postinc2,printf@val
  2700  000584  CFDD F034          	movff	postdec2,printf@val+1
  2701  000588  0E02               	movlw	2
  2702  00058A  2630               	addwf	printf@ap,f,c
  2703  00058C  0E00               	movlw	0
  2704  00058E  2231               	addwfc	printf@ap+1,f,c
  2705                           
  2706                           ;doprnt.c: 1287: }
  2707                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  2708  000590  D03A               	goto	l6704
  2709  000592                     l6674:
  2710                           
  2711                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2712  000592  0E01               	movlw	1
  2713  000594  6E38               	movwf	printf@c,c
  2714  000596                     l6676:
  2715  000596  0E05               	movlw	5
  2716  000598  1838               	xorwf	printf@c,w,c
  2717  00059A  B4D8               	btfsc	status,2,c
  2718  00059C  D03D               	goto	l6706
  2719  00059E  D001               	goto	l6680
  2720  0005A0  D03B               	goto	l6706
  2721  0005A2                     l6680:
  2722                           
  2723                           ;doprnt.c: 1306: if(val < dpowers[c])
  2724  0005A2  5038               	movf	printf@c,w,c
  2725  0005A4  0D02               	mullw	2
  2726  0005A6  0E02               	movlw	low _dpowers
  2727  0005A8  24F3               	addwf	prodl,w,c
  2728  0005AA  6EF6               	movwf	tblptrl,c
  2729  0005AC  0EFF               	movlw	high _dpowers
  2730  0005AE  20F4               	addwfc	prodh,w,c
  2731  0005B0  6EF7               	movwf	tblptrh,c
  2732  0005B2                     	if	0	;There are less than 3 active tblptr bytes
  2733  0005B2                     	endif
  2734  0005B2  0009               	tblrd		*+
  2735  0005B4  50F5               	movf	tablat,w,c
  2736  0005B6  5C33               	subwf	printf@val,w,c
  2737  0005B8  0009               	tblrd		*+
  2738  0005BA  50F5               	movf	tablat,w,c
  2739  0005BC  5834               	subwfb	printf@val+1,w,c
  2740  0005BE  A0D8               	btfss	status,0,c
  2741  0005C0  D02B               	goto	l6706
  2742  0005C2  D001               	goto	l6684
  2743                           
  2744                           ;doprnt.c: 1307: break;
  2745  0005C4  D029               	goto	l6706
  2746  0005C6                     l6684:
  2747  0005C6  2A38               	incf	printf@c,f,c
  2748  0005C8  D7E6               	goto	l6676
  2749                           
  2750                           ;doprnt.c: 1309: break;
  2751  0005CA  D026               	goto	l6706
  2752  0005CC                     l6688:
  2753                           
  2754                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2755  0005CC  0E01               	movlw	1
  2756  0005CE  6E38               	movwf	printf@c,c
  2757  0005D0                     l6690:
  2758  0005D0  0E04               	movlw	4
  2759  0005D2  1838               	xorwf	printf@c,w,c
  2760  0005D4  B4D8               	btfsc	status,2,c
  2761  0005D6  D020               	goto	l6706
  2762  0005D8  D001               	goto	l6694
  2763  0005DA  D01E               	goto	l6706
  2764  0005DC                     l6694:
  2765                           
  2766                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2767  0005DC  5038               	movf	printf@c,w,c
  2768  0005DE  0D02               	mullw	2
  2769  0005E0  0E0C               	movlw	low _hexpowers
  2770  0005E2  24F3               	addwf	prodl,w,c
  2771  0005E4  6EF6               	movwf	tblptrl,c
  2772  0005E6  0EFF               	movlw	high _hexpowers
  2773  0005E8  20F4               	addwfc	prodh,w,c
  2774  0005EA  6EF7               	movwf	tblptrh,c
  2775  0005EC                     	if	0	;There are less than 3 active tblptr bytes
  2776  0005EC                     	endif
  2777  0005EC  0009               	tblrd		*+
  2778  0005EE  50F5               	movf	tablat,w,c
  2779  0005F0  5C33               	subwf	printf@val,w,c
  2780  0005F2  0009               	tblrd		*+
  2781  0005F4  50F5               	movf	tablat,w,c
  2782  0005F6  5834               	subwfb	printf@val+1,w,c
  2783  0005F8  A0D8               	btfss	status,0,c
  2784  0005FA  D00E               	goto	l6706
  2785  0005FC  D001               	goto	l6698
  2786                           
  2787                           ;doprnt.c: 1318: break;
  2788  0005FE  D00C               	goto	l6706
  2789  000600                     l6698:
  2790  000600  2A38               	incf	printf@c,f,c
  2791  000602  D7E6               	goto	l6690
  2792                           
  2793                           ;doprnt.c: 1336: }
  2794                           
  2795                           ;doprnt.c: 1320: break;
  2796  000604  D009               	goto	l6706
  2797  000606                     l6704:
  2798  000606  5035               	movf	printf@flag,w,c
  2799  000608  0B80               	andlw	128
  2800                           
  2801                           ; Switch size 1, requested type "space"
  2802                           ; Number of cases is 2, Range of values is 0 to 128
  2803                           ; switch strategies available:
  2804                           ; Name         Instructions Cycles
  2805                           ; simple_byte            7     4 (average)
  2806                           ;	Chosen strategy is simple_byte
  2807  00060A  0A00               	xorlw	0	; case 0
  2808  00060C  B4D8               	btfsc	status,2,c
  2809  00060E  D7C1               	goto	l6674
  2810  000610  0A80               	xorlw	128	; case 128
  2811  000612  B4D8               	btfsc	status,2,c
  2812  000614  D7DB               	goto	l6688
  2813  000616  D000               	goto	l6706
  2814  000618                     l6706:
  2815                           
  2816                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2817  000618  5036               	movf	printf@width,w,c
  2818  00061A  1037               	iorwf	printf@width+1,w,c
  2819  00061C  B4D8               	btfsc	status,2,c
  2820  00061E  D00A               	goto	l6712
  2821  000620  C035  F02B         	movff	printf@flag,??_printf
  2822  000624  0E03               	movlw	3
  2823  000626  162B               	andwf	??_printf,f,c
  2824  000628  B4D8               	btfsc	status,2,c
  2825  00062A  D004               	goto	l6712
  2826                           
  2827                           ;doprnt.c: 1346: width--;
  2828  00062C  0636               	decf	printf@width,f,c
  2829  00062E  A0D8               	btfss	status,0,c
  2830  000630  0637               	decf	printf@width+1,f,c
  2831  000632  D000               	goto	l6712
  2832  000634                     l6712:
  2833                           
  2834                           ;doprnt.c: 1381: if(width > c)
  2835  000634  0E80               	movlw	128
  2836  000636  BE38               	btfsc	printf@c,7,c
  2837  000638  0E7F               	movlw	127
  2838  00063A  6E2B               	movwf	??_printf& (0+255),c
  2839  00063C  5036               	movf	printf@width,w,c
  2840  00063E  5C38               	subwf	printf@c,w,c
  2841  000640  5037               	movf	printf@width+1,w,c
  2842  000642  0A80               	xorlw	128
  2843  000644  582B               	subwfb	??_printf& (0+255),w,c
  2844  000646  B0D8               	btfsc	status,0,c
  2845  000648  D007               	goto	l6716
  2846                           
  2847                           ;doprnt.c: 1382: width -= c;
  2848  00064A  5038               	movf	printf@c,w,c
  2849  00064C  5E36               	subwf	printf@width,f,c
  2850  00064E  0E00               	movlw	0
  2851  000650  BE38               	btfsc	printf@c,7,c
  2852  000652  0EFF               	movlw	255
  2853  000654  5A37               	subwfb	printf@width+1,f,c
  2854  000656  D005               	goto	l6718
  2855  000658                     l6716:
  2856                           
  2857                           ;doprnt.c: 1383: else
  2858                           ;doprnt.c: 1384: width = 0;
  2859  000658  0E00               	movlw	0
  2860  00065A  6E37               	movwf	printf@width+1,c
  2861  00065C  0E00               	movlw	0
  2862  00065E  6E36               	movwf	printf@width,c
  2863  000660  D000               	goto	l6718
  2864  000662                     l6718:
  2865                           
  2866                           ;doprnt.c: 1387: if(flag & 0x04) {
  2867  000662  A435               	btfss	printf@flag,2,c
  2868  000664  D01A               	goto	l6730
  2869                           
  2870                           ;doprnt.c: 1392: if(flag & 0x03)
  2871  000666  C035  F02B         	movff	printf@flag,??_printf
  2872  00066A  0E03               	movlw	3
  2873  00066C  162B               	andwf	??_printf,f,c
  2874  00066E  B4D8               	btfsc	status,2,c
  2875  000670  D004               	goto	l6724
  2876                           
  2877                           ;doprnt.c: 1393: (putch('-') );
  2878  000672  0E2D               	movlw	45
  2879  000674  EC7D  F012         	call	_putch
  2880  000678  D000               	goto	l6724
  2881  00067A                     l6724:
  2882                           
  2883                           ;doprnt.c: 1415: if(width)
  2884  00067A  5036               	movf	printf@width,w,c
  2885  00067C  1037               	iorwf	printf@width+1,w,c
  2886  00067E  B4D8               	btfsc	status,2,c
  2887  000680  D026               	goto	l6740
  2888  000682                     l6726:
  2889                           
  2890                           ;doprnt.c: 1417: (putch('0') );
  2891  000682  0E30               	movlw	48
  2892  000684  EC7D  F012         	call	_putch
  2893                           
  2894                           ;doprnt.c: 1418: while(--width);
  2895  000688  0636               	decf	printf@width,f,c
  2896  00068A  A0D8               	btfss	status,0,c
  2897  00068C  0637               	decf	printf@width+1,f,c
  2898  00068E  5036               	movf	printf@width,w,c
  2899  000690  1037               	iorwf	printf@width+1,w,c
  2900  000692  B4D8               	btfsc	status,2,c
  2901  000694  D01C               	goto	l6740
  2902  000696  D7F5               	goto	l6726
  2903                           
  2904                           ;doprnt.c: 1420: } else
  2905  000698  D01A               	goto	l6740
  2906  00069A                     l6730:
  2907                           
  2908                           ;doprnt.c: 1422: {
  2909                           ;doprnt.c: 1424: if(width
  2910                           ;doprnt.c: 1428: )
  2911  00069A  5036               	movf	printf@width,w,c
  2912  00069C  1037               	iorwf	printf@width+1,w,c
  2913  00069E  B4D8               	btfsc	status,2,c
  2914  0006A0  D00C               	goto	l6736
  2915  0006A2                     l6732:
  2916                           
  2917                           ;doprnt.c: 1430: (putch(' ') );
  2918  0006A2  0E20               	movlw	32
  2919  0006A4  EC7D  F012         	call	_putch
  2920                           
  2921                           ;doprnt.c: 1431: while(--width);
  2922  0006A8  0636               	decf	printf@width,f,c
  2923  0006AA  A0D8               	btfss	status,0,c
  2924  0006AC  0637               	decf	printf@width+1,f,c
  2925  0006AE  5036               	movf	printf@width,w,c
  2926  0006B0  1037               	iorwf	printf@width+1,w,c
  2927  0006B2  B4D8               	btfsc	status,2,c
  2928  0006B4  D002               	goto	l6736
  2929  0006B6  D7F5               	goto	l6732
  2930  0006B8  D000               	goto	l6736
  2931  0006BA                     l6736:
  2932                           
  2933                           ;doprnt.c: 1438: if(flag & 0x03)
  2934  0006BA  C035  F02B         	movff	printf@flag,??_printf
  2935  0006BE  0E03               	movlw	3
  2936  0006C0  162B               	andwf	??_printf,f,c
  2937  0006C2  B4D8               	btfsc	status,2,c
  2938  0006C4  D004               	goto	l6740
  2939                           
  2940                           ;doprnt.c: 1439: (putch('-') );
  2941  0006C6  0E2D               	movlw	45
  2942  0006C8  EC7D  F012         	call	_putch
  2943  0006CC  D000               	goto	l6740
  2944  0006CE                     l6740:
  2945                           
  2946                           ;doprnt.c: 1469: }
  2947                           ;doprnt.c: 1472: prec = c;
  2948  0006CE  C038  F032         	movff	printf@c,printf@prec
  2949                           
  2950                           ;doprnt.c: 1474: while(prec--) {
  2951  0006D2  D053               	goto	l6754
  2952                           
  2953                           ;doprnt.c: 1476: switch((unsigned char)(flag & 0x80))
  2954  0006D4  D045               	goto	l6750
  2955  0006D6                     l6742:
  2956                           
  2957                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2958  0006D6  5032               	movf	printf@prec,w,c
  2959  0006D8  0D02               	mullw	2
  2960  0006DA  0E02               	movlw	low _dpowers
  2961  0006DC  24F3               	addwf	prodl,w,c
  2962  0006DE  6EF6               	movwf	tblptrl,c
  2963  0006E0  0EFF               	movlw	high _dpowers
  2964  0006E2  20F4               	addwfc	prodh,w,c
  2965  0006E4  6EF7               	movwf	tblptrh,c
  2966  0006E6                     	if	0	;There are less than 3 active tblptr bytes
  2967  0006E6                     	endif
  2968  0006E6  0009               	tblrd		*+
  2969  0006E8  CFF5 F013          	movff	tablat,___lwdiv@divisor
  2970  0006EC  000A               	tblrd		*-
  2971  0006EE  CFF5 F014          	movff	tablat,___lwdiv@divisor+1
  2972  0006F2  C033  F011         	movff	printf@val,___lwdiv@dividend
  2973  0006F6  C034  F012         	movff	printf@val+1,___lwdiv@dividend+1
  2974  0006FA  EC3D  F00F         	call	___lwdiv	;wreg free
  2975  0006FE  C011  F018         	movff	?___lwdiv,___lwmod@dividend
  2976  000702  C012  F019         	movff	?___lwdiv+1,___lwmod@dividend+1
  2977  000706  0E00               	movlw	0
  2978  000708  6E1B               	movwf	___lwmod@divisor+1,c
  2979  00070A  0E0A               	movlw	10
  2980  00070C  6E1A               	movwf	___lwmod@divisor,c
  2981  00070E  ECBB  F00F         	call	___lwmod	;wreg free
  2982  000712  5018               	movf	?___lwmod,w,c
  2983  000714  0F30               	addlw	48
  2984  000716  6E38               	movwf	printf@c,c
  2985                           
  2986                           ;doprnt.c: 1491: break;
  2987  000718  D02C               	goto	l6752
  2988  00071A                     l6744:
  2989                           
  2990                           ;doprnt.c: 1499: {
  2991                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  2992  00071A  C033  F011         	movff	printf@val,___lwdiv@dividend
  2993  00071E  C034  F012         	movff	printf@val+1,___lwdiv@dividend+1
  2994  000722  5032               	movf	printf@prec,w,c
  2995  000724  0D02               	mullw	2
  2996  000726  0E0C               	movlw	low _hexpowers
  2997  000728  24F3               	addwf	prodl,w,c
  2998  00072A  6EF6               	movwf	tblptrl,c
  2999  00072C  0EFF               	movlw	high _hexpowers
  3000  00072E  20F4               	addwfc	prodh,w,c
  3001  000730  6EF7               	movwf	tblptrh,c
  3002  000732                     	if	0	;There are less than 3 active tblptr bytes
  3003  000732                     	endif
  3004  000732  0009               	tblrd		*+
  3005  000734  CFF5 F013          	movff	tablat,___lwdiv@divisor
  3006  000738  000A               	tblrd		*-
  3007  00073A  CFF5 F014          	movff	tablat,___lwdiv@divisor+1
  3008  00073E  EC3D  F00F         	call	___lwdiv	;wreg free
  3009  000742  5011               	movf	?___lwdiv,w,c
  3010  000744  0B0F               	andlw	15
  3011  000746  6E2F               	movwf	printf@idx,c
  3012                           
  3013                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  3014  000748  502F               	movf	printf@idx,w,c
  3015  00074A  0D01               	mullw	1
  3016  00074C  0E9F               	movlw	low STR_19
  3017  00074E  24F3               	addwf	prodl,w,c
  3018  000750  6EF6               	movwf	tblptrl,c
  3019  000752  0EFF               	movlw	high STR_19
  3020  000754  20F4               	addwfc	prodh,w,c
  3021  000756  6EF7               	movwf	tblptrh,c
  3022  000758                     	if	0	;There are less than 3 active tblptr bytes
  3023  000758                     	endif
  3024  000758  0008               	tblrd		*
  3025  00075A  CFF5 F038          	movff	tablat,printf@c
  3026                           
  3027                           ;doprnt.c: 1523: }
  3028                           
  3029                           ;doprnt.c: 1508: }
  3030                           ;doprnt.c: 1510: break;
  3031  00075E  D009               	goto	l6752
  3032  000760                     l6750:
  3033  000760  5035               	movf	printf@flag,w,c
  3034  000762  0B80               	andlw	128
  3035                           
  3036                           ; Switch size 1, requested type "space"
  3037                           ; Number of cases is 2, Range of values is 0 to 128
  3038                           ; switch strategies available:
  3039                           ; Name         Instructions Cycles
  3040                           ; simple_byte            7     4 (average)
  3041                           ;	Chosen strategy is simple_byte
  3042  000764  0A00               	xorlw	0	; case 0
  3043  000766  B4D8               	btfsc	status,2,c
  3044  000768  D7B6               	goto	l6742
  3045  00076A  0A80               	xorlw	128	; case 128
  3046  00076C  B4D8               	btfsc	status,2,c
  3047  00076E  D7D5               	goto	l6744
  3048  000770  D000               	goto	l6752
  3049  000772                     l6752:
  3050                           
  3051                           ;doprnt.c: 1524: (putch(c) );
  3052  000772  5038               	movf	printf@c,w,c
  3053  000774  EC7D  F012         	call	_putch
  3054  000778  D000               	goto	l6754
  3055  00077A                     l6754:
  3056  00077A  0632               	decf	printf@prec,f,c
  3057  00077C  2832               	incf	printf@prec,w,c
  3058  00077E  B4D8               	btfsc	status,2,c
  3059  000780  D002               	goto	l6756
  3060  000782  D7EE               	goto	l6750
  3061  000784  D000               	goto	l6756
  3062  000786                     l6756:
  3063  000786  C01D  FFF6         	movff	printf@f,tblptrl
  3064  00078A  C01E  FFF7         	movff	printf@f+1,tblptrh
  3065  00078E  4A1D               	infsnz	printf@f,f,c
  3066  000790  2A1E               	incf	printf@f+1,f,c
  3067  000792                     	if	0	;tblptru may be non-zero
  3068  000792                     	endif
  3069  000792                     	if	0	;tblptru may be non-zero
  3070  000792                     	endif
  3071  000792  0008               	tblrd		*
  3072  000794  CFF5 F038          	movff	tablat,printf@c
  3073  000798  5038               	movf	printf@c,w,c
  3074  00079A  B4D8               	btfsc	status,2,c
  3075  00079C  D002               	goto	l746
  3076  00079E  D65A               	goto	l6630
  3077  0007A0  D000               	goto	l746
  3078  0007A2                     l746:
  3079  0007A2  0012               	return		;funcret
  3080  0007A4                     __end_of_printf:
  3081                           	opt stack 0
  3082                           tblptru	equ	0xFF8
  3083                           tblptrh	equ	0xFF7
  3084                           tblptrl	equ	0xFF6
  3085                           tablat	equ	0xFF5
  3086                           prodh	equ	0xFF4
  3087                           prodl	equ	0xFF3
  3088                           intcon	equ	0xFF2
  3089                           intcon2	equ	0xFF1
  3090                           postinc0	equ	0xFEE
  3091                           wreg	equ	0xFE8
  3092                           postdec1	equ	0xFE5
  3093                           fsr1l	equ	0xFE1
  3094                           postinc2	equ	0xFDE
  3095                           postdec2	equ	0xFDD
  3096                           fsr2h	equ	0xFDA
  3097                           fsr2l	equ	0xFD9
  3098                           status	equ	0xFD8
  3099                           
  3100 ;; *************** function _putch *****************
  3101 ;; Defined at:
  3102 ;;		line 83 in file "Lab11pA_Restart.c"
  3103 ;; Parameters:    Size  Location     Type
  3104 ;;  c               1    wreg     unsigned char 
  3105 ;; Auto vars:     Size  Location     Type
  3106 ;;  c               1   16[COMRAM] unsigned char 
  3107 ;; Return value:  Size  Location     Type
  3108 ;;		None               void
  3109 ;; Registers used:
  3110 ;;		wreg
  3111 ;; Tracked objects:
  3112 ;;		On entry : 0/0
  3113 ;;		On exit  : 0/0
  3114 ;;		Unchanged: 0/0
  3115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3116 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3117 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3118 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3119 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3120 ;;Total ram usage:        1 bytes
  3121 ;; Hardware stack levels used:    1
  3122 ;; Hardware stack levels required when called:    3
  3123 ;; This function calls:
  3124 ;;		Nothing
  3125 ;; This function is called by:
  3126 ;;		_printf
  3127 ;; This function uses a non-reentrant model
  3128 ;;
  3129                           
  3130                           	psect	text2
  3131  0024FA                     __ptext2:
  3132                           	opt stack 0
  3133  0024FA                     _putch:
  3134                           	opt stack 26
  3135                           
  3136                           ;incstack = 0
  3137                           ;putch@c stored from wreg
  3138  0024FA  6E11               	movwf	putch@c,c
  3139                           
  3140                           ;Lab11pA_Restart.c: 85: while (!TRMT);
  3141  0024FC  D000               	goto	l650
  3142  0024FE                     l650:
  3143  0024FE  A2AC               	btfss	4012,1,c	;volatile
  3144  002500  D7FE               	goto	l650
  3145                           
  3146                           ;Lab11pA_Restart.c: 86: TXREG = c;
  3147  002502  C011  FFAD         	movff	putch@c,4013	;volatile
  3148  002506  0012               	return		;funcret
  3149  002508                     __end_of_putch:
  3150                           	opt stack 0
  3151                           tblptru	equ	0xFF8
  3152                           tblptrh	equ	0xFF7
  3153                           tblptrl	equ	0xFF6
  3154                           tablat	equ	0xFF5
  3155                           prodh	equ	0xFF4
  3156                           prodl	equ	0xFF3
  3157                           intcon	equ	0xFF2
  3158                           intcon2	equ	0xFF1
  3159                           postinc0	equ	0xFEE
  3160                           wreg	equ	0xFE8
  3161                           postdec1	equ	0xFE5
  3162                           fsr1l	equ	0xFE1
  3163                           postinc2	equ	0xFDE
  3164                           postdec2	equ	0xFDD
  3165                           fsr2h	equ	0xFDA
  3166                           fsr2l	equ	0xFD9
  3167                           status	equ	0xFD8
  3168                           
  3169 ;; *************** function _isdigit *****************
  3170 ;; Defined at:
  3171 ;;		line 8 in file "E:\XC8\sources\common\isdigit.c"
  3172 ;; Parameters:    Size  Location     Type
  3173 ;;  c               1    wreg     unsigned char 
  3174 ;; Auto vars:     Size  Location     Type
  3175 ;;  c               1   18[COMRAM] unsigned char 
  3176 ;; Return value:  Size  Location     Type
  3177 ;;		None               void
  3178 ;; Registers used:
  3179 ;;		wreg, status,2, status,0
  3180 ;; Tracked objects:
  3181 ;;		On entry : 0/0
  3182 ;;		On exit  : 0/0
  3183 ;;		Unchanged: 0/0
  3184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3185 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3186 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3187 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3188 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3189 ;;Total ram usage:        3 bytes
  3190 ;; Hardware stack levels used:    1
  3191 ;; Hardware stack levels required when called:    3
  3192 ;; This function calls:
  3193 ;;		Nothing
  3194 ;; This function is called by:
  3195 ;;		_printf
  3196 ;; This function uses a non-reentrant model
  3197 ;;
  3198                           
  3199                           	psect	text3
  3200  002350                     __ptext3:
  3201                           	opt stack 0
  3202  002350                     _isdigit:
  3203                           	opt stack 26
  3204                           
  3205                           ;incstack = 0
  3206                           ;isdigit@c stored from wreg
  3207  002350  6E13               	movwf	isdigit@c,c
  3208  002352  0E00               	movlw	0
  3209  002354  6E12               	movwf	_isdigit$2041,c
  3210  002356  0E3A               	movlw	58
  3211  002358  6013               	cpfslt	isdigit@c,c
  3212  00235A  D006               	goto	l6114
  3213  00235C  0E2F               	movlw	47
  3214  00235E  6413               	cpfsgt	isdigit@c,c
  3215  002360  D003               	goto	l6114
  3216  002362  0E01               	movlw	1
  3217  002364  6E12               	movwf	_isdigit$2041,c
  3218  002366  D000               	goto	l6114
  3219  002368                     l6114:
  3220  002368  C012  F011         	movff	_isdigit$2041,??_isdigit
  3221  00236C  3011               	rrcf	??_isdigit,w,c
  3222  00236E  D000               	goto	l1213
  3223  002370                     l1213:
  3224  002370  0012               	return		;funcret
  3225  002372                     __end_of_isdigit:
  3226                           	opt stack 0
  3227                           tblptru	equ	0xFF8
  3228                           tblptrh	equ	0xFF7
  3229                           tblptrl	equ	0xFF6
  3230                           tablat	equ	0xFF5
  3231                           prodh	equ	0xFF4
  3232                           prodl	equ	0xFF3
  3233                           intcon	equ	0xFF2
  3234                           intcon2	equ	0xFF1
  3235                           postinc0	equ	0xFEE
  3236                           wreg	equ	0xFE8
  3237                           postdec1	equ	0xFE5
  3238                           fsr1l	equ	0xFE1
  3239                           postinc2	equ	0xFDE
  3240                           postdec2	equ	0xFDD
  3241                           fsr2h	equ	0xFDA
  3242                           fsr2l	equ	0xFD9
  3243                           status	equ	0xFD8
  3244                           
  3245 ;; *************** function ___lwmod *****************
  3246 ;; Defined at:
  3247 ;;		line 8 in file "E:\XC8\sources\common\lwmod.c"
  3248 ;; Parameters:    Size  Location     Type
  3249 ;;  dividend        2   23[COMRAM] unsigned int 
  3250 ;;  divisor         2   25[COMRAM] unsigned int 
  3251 ;; Auto vars:     Size  Location     Type
  3252 ;;  counter         1   27[COMRAM] unsigned char 
  3253 ;; Return value:  Size  Location     Type
  3254 ;;                  2   23[COMRAM] unsigned int 
  3255 ;; Registers used:
  3256 ;;		wreg, status,2, status,0
  3257 ;; Tracked objects:
  3258 ;;		On entry : 0/0
  3259 ;;		On exit  : 0/0
  3260 ;;		Unchanged: 0/0
  3261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3262 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3263 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3264 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3265 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3266 ;;Total ram usage:        5 bytes
  3267 ;; Hardware stack levels used:    1
  3268 ;; Hardware stack levels required when called:    3
  3269 ;; This function calls:
  3270 ;;		Nothing
  3271 ;; This function is called by:
  3272 ;;		_printf
  3273 ;; This function uses a non-reentrant model
  3274 ;;
  3275                           
  3276                           	psect	text4
  3277  001F76                     __ptext4:
  3278                           	opt stack 0
  3279  001F76                     ___lwmod:
  3280                           	opt stack 26
  3281                           
  3282                           ;incstack = 0
  3283  001F76  501A               	movf	___lwmod@divisor,w,c
  3284  001F78  101B               	iorwf	___lwmod@divisor+1,w,c
  3285  001F7A  B4D8               	btfsc	status,2,c
  3286  001F7C  D01D               	goto	l1315
  3287  001F7E  0E01               	movlw	1
  3288  001F80  6E1C               	movwf	___lwmod@counter,c
  3289  001F82  D005               	goto	l6226
  3290  001F84                     l6224:
  3291  001F84  90D8               	bcf	status,0,c
  3292  001F86  361A               	rlcf	___lwmod@divisor,f,c
  3293  001F88  361B               	rlcf	___lwmod@divisor+1,f,c
  3294  001F8A  2A1C               	incf	___lwmod@counter,f,c
  3295  001F8C  D000               	goto	l6226
  3296  001F8E                     l6226:
  3297  001F8E  BE1B               	btfsc	___lwmod@divisor+1,7,c
  3298  001F90  D002               	goto	l6228
  3299  001F92  D7F8               	goto	l6224
  3300  001F94  D000               	goto	l6228
  3301  001F96                     l6228:
  3302  001F96  501A               	movf	___lwmod@divisor,w,c
  3303  001F98  5C18               	subwf	___lwmod@dividend,w,c
  3304  001F9A  501B               	movf	___lwmod@divisor+1,w,c
  3305  001F9C  5819               	subwfb	___lwmod@dividend+1,w,c
  3306  001F9E  A0D8               	btfss	status,0,c
  3307  001FA0  D005               	goto	l6232
  3308  001FA2  501A               	movf	___lwmod@divisor,w,c
  3309  001FA4  5E18               	subwf	___lwmod@dividend,f,c
  3310  001FA6  501B               	movf	___lwmod@divisor+1,w,c
  3311  001FA8  5A19               	subwfb	___lwmod@dividend+1,f,c
  3312  001FAA  D000               	goto	l6232
  3313  001FAC                     l6232:
  3314  001FAC  90D8               	bcf	status,0,c
  3315  001FAE  321B               	rrcf	___lwmod@divisor+1,f,c
  3316  001FB0  321A               	rrcf	___lwmod@divisor,f,c
  3317  001FB2  2E1C               	decfsz	___lwmod@counter,f,c
  3318  001FB4  D7F0               	goto	l6228
  3319  001FB6  D000               	goto	l1315
  3320  001FB8                     l1315:
  3321  001FB8  C018  F018         	movff	___lwmod@dividend,?___lwmod
  3322  001FBC  C019  F019         	movff	___lwmod@dividend+1,?___lwmod+1
  3323  001FC0  0012               	return		;funcret
  3324  001FC2                     __end_of___lwmod:
  3325                           	opt stack 0
  3326                           tblptru	equ	0xFF8
  3327                           tblptrh	equ	0xFF7
  3328                           tblptrl	equ	0xFF6
  3329                           tablat	equ	0xFF5
  3330                           prodh	equ	0xFF4
  3331                           prodl	equ	0xFF3
  3332                           intcon	equ	0xFF2
  3333                           intcon2	equ	0xFF1
  3334                           postinc0	equ	0xFEE
  3335                           wreg	equ	0xFE8
  3336                           postdec1	equ	0xFE5
  3337                           fsr1l	equ	0xFE1
  3338                           postinc2	equ	0xFDE
  3339                           postdec2	equ	0xFDD
  3340                           fsr2h	equ	0xFDA
  3341                           fsr2l	equ	0xFD9
  3342                           status	equ	0xFD8
  3343                           
  3344 ;; *************** function ___lwdiv *****************
  3345 ;; Defined at:
  3346 ;;		line 8 in file "E:\XC8\sources\common\lwdiv.c"
  3347 ;; Parameters:    Size  Location     Type
  3348 ;;  dividend        2   16[COMRAM] unsigned int 
  3349 ;;  divisor         2   18[COMRAM] unsigned int 
  3350 ;; Auto vars:     Size  Location     Type
  3351 ;;  quotient        2   21[COMRAM] unsigned int 
  3352 ;;  counter         1   20[COMRAM] unsigned char 
  3353 ;; Return value:  Size  Location     Type
  3354 ;;                  2   16[COMRAM] unsigned int 
  3355 ;; Registers used:
  3356 ;;		wreg, status,2, status,0
  3357 ;; Tracked objects:
  3358 ;;		On entry : 0/0
  3359 ;;		On exit  : 0/0
  3360 ;;		Unchanged: 0/0
  3361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3362 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3363 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3364 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3365 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3366 ;;Total ram usage:        7 bytes
  3367 ;; Hardware stack levels used:    1
  3368 ;; Hardware stack levels required when called:    3
  3369 ;; This function calls:
  3370 ;;		Nothing
  3371 ;; This function is called by:
  3372 ;;		_printf
  3373 ;; This function uses a non-reentrant model
  3374 ;;
  3375                           
  3376                           	psect	text5
  3377  001E7A                     __ptext5:
  3378                           	opt stack 0
  3379  001E7A                     ___lwdiv:
  3380                           	opt stack 26
  3381                           
  3382                           ;incstack = 0
  3383  001E7A  0E00               	movlw	0
  3384  001E7C  6E17               	movwf	___lwdiv@quotient+1,c
  3385  001E7E  0E00               	movlw	0
  3386  001E80  6E16               	movwf	___lwdiv@quotient,c
  3387  001E82  5013               	movf	___lwdiv@divisor,w,c
  3388  001E84  1014               	iorwf	___lwdiv@divisor+1,w,c
  3389  001E86  B4D8               	btfsc	status,2,c
  3390  001E88  D021               	goto	l1305
  3391  001E8A  0E01               	movlw	1
  3392  001E8C  6E15               	movwf	___lwdiv@counter,c
  3393  001E8E  D005               	goto	l6206
  3394  001E90                     l6204:
  3395  001E90  90D8               	bcf	status,0,c
  3396  001E92  3613               	rlcf	___lwdiv@divisor,f,c
  3397  001E94  3614               	rlcf	___lwdiv@divisor+1,f,c
  3398  001E96  2A15               	incf	___lwdiv@counter,f,c
  3399  001E98  D000               	goto	l6206
  3400  001E9A                     l6206:
  3401  001E9A  BE14               	btfsc	___lwdiv@divisor+1,7,c
  3402  001E9C  D002               	goto	l6208
  3403  001E9E  D7F8               	goto	l6204
  3404  001EA0  D000               	goto	l6208
  3405  001EA2                     l6208:
  3406  001EA2  90D8               	bcf	status,0,c
  3407  001EA4  3616               	rlcf	___lwdiv@quotient,f,c
  3408  001EA6  3617               	rlcf	___lwdiv@quotient+1,f,c
  3409  001EA8  5013               	movf	___lwdiv@divisor,w,c
  3410  001EAA  5C11               	subwf	___lwdiv@dividend,w,c
  3411  001EAC  5014               	movf	___lwdiv@divisor+1,w,c
  3412  001EAE  5812               	subwfb	___lwdiv@dividend+1,w,c
  3413  001EB0  A0D8               	btfss	status,0,c
  3414  001EB2  D006               	goto	l6216
  3415  001EB4  5013               	movf	___lwdiv@divisor,w,c
  3416  001EB6  5E11               	subwf	___lwdiv@dividend,f,c
  3417  001EB8  5014               	movf	___lwdiv@divisor+1,w,c
  3418  001EBA  5A12               	subwfb	___lwdiv@dividend+1,f,c
  3419  001EBC  8016               	bsf	___lwdiv@quotient,0,c
  3420  001EBE  D000               	goto	l6216
  3421  001EC0                     l6216:
  3422  001EC0  90D8               	bcf	status,0,c
  3423  001EC2  3214               	rrcf	___lwdiv@divisor+1,f,c
  3424  001EC4  3213               	rrcf	___lwdiv@divisor,f,c
  3425  001EC6  2E15               	decfsz	___lwdiv@counter,f,c
  3426  001EC8  D7EC               	goto	l6208
  3427  001ECA  D000               	goto	l1305
  3428  001ECC                     l1305:
  3429  001ECC  C016  F011         	movff	___lwdiv@quotient,?___lwdiv
  3430  001ED0  C017  F012         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3431  001ED4  0012               	return		;funcret
  3432  001ED6                     __end_of___lwdiv:
  3433                           	opt stack 0
  3434                           tblptru	equ	0xFF8
  3435                           tblptrh	equ	0xFF7
  3436                           tblptrl	equ	0xFF6
  3437                           tablat	equ	0xFF5
  3438                           prodh	equ	0xFF4
  3439                           prodl	equ	0xFF3
  3440                           intcon	equ	0xFF2
  3441                           intcon2	equ	0xFF1
  3442                           postinc0	equ	0xFEE
  3443                           wreg	equ	0xFE8
  3444                           postdec1	equ	0xFE5
  3445                           fsr1l	equ	0xFE1
  3446                           postinc2	equ	0xFDE
  3447                           postdec2	equ	0xFDD
  3448                           fsr2h	equ	0xFDA
  3449                           fsr2l	equ	0xFD9
  3450                           status	equ	0xFD8
  3451                           
  3452 ;; *************** function _get_RPM *****************
  3453 ;; Defined at:
  3454 ;;		line 18 in file "Fan_Support.c"
  3455 ;; Parameters:    Size  Location     Type
  3456 ;;		None
  3457 ;; Auto vars:     Size  Location     Type
  3458 ;;  RPS             2   32[COMRAM] int 
  3459 ;; Return value:  Size  Location     Type
  3460 ;;                  2   30[COMRAM] int 
  3461 ;; Registers used:
  3462 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3463 ;; Tracked objects:
  3464 ;;		On entry : 0/0
  3465 ;;		On exit  : 0/0
  3466 ;;		Unchanged: 0/0
  3467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3468 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3469 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3470 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3471 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3472 ;;Total ram usage:        4 bytes
  3473 ;; Hardware stack levels used:    1
  3474 ;; Hardware stack levels required when called:    4
  3475 ;; This function calls:
  3476 ;;		___awdiv
  3477 ;;		___wmul
  3478 ;; This function is called by:
  3479 ;;		_main
  3480 ;; This function uses a non-reentrant model
  3481 ;;
  3482                           
  3483                           	psect	text6
  3484  00209C                     __ptext6:
  3485                           	opt stack 0
  3486  00209C                     _get_RPM:
  3487                           	opt stack 26
  3488                           
  3489                           ;Fan_Support.c: 20: int RPS = TMR3L / 2;
  3490                           
  3491                           ;incstack = 0
  3492  00209C  CFB2 F017          	movff	4018,___awdiv@dividend	;volatile
  3493  0020A0  6A18               	clrf	___awdiv@dividend+1,c
  3494  0020A2  0E00               	movlw	0
  3495  0020A4  6E1A               	movwf	___awdiv@divisor+1,c
  3496  0020A6  0E02               	movlw	2
  3497  0020A8  6E19               	movwf	___awdiv@divisor,c
  3498  0020AA  ECE6  F00C         	call	___awdiv	;wreg free
  3499  0020AE  C017  F021         	movff	?___awdiv,get_RPM@RPS
  3500  0020B2  C018  F022         	movff	?___awdiv+1,get_RPM@RPS+1
  3501                           
  3502                           ;Fan_Support.c: 22: TMR3L = 0;
  3503  0020B6  0E00               	movlw	0
  3504  0020B8  6EB2               	movwf	4018,c	;volatile
  3505                           
  3506                           ;Fan_Support.c: 23: return (RPS * 60);
  3507  0020BA  C021  F011         	movff	get_RPM@RPS,___wmul@multiplier
  3508  0020BE  C022  F012         	movff	get_RPM@RPS+1,___wmul@multiplier+1
  3509  0020C2  0E00               	movlw	0
  3510  0020C4  6E14               	movwf	___wmul@multiplicand+1,c
  3511  0020C6  0E3C               	movlw	60
  3512  0020C8  6E13               	movwf	___wmul@multiplicand,c
  3513  0020CA  EC48  F011         	call	___wmul	;wreg free
  3514  0020CE  C011  F01F         	movff	?___wmul,?_get_RPM
  3515  0020D2  C012  F020         	movff	?___wmul+1,?_get_RPM+1
  3516  0020D6  D000               	goto	l478
  3517  0020D8                     l478:
  3518  0020D8  0012               	return		;funcret
  3519  0020DA                     __end_of_get_RPM:
  3520                           	opt stack 0
  3521                           tblptru	equ	0xFF8
  3522                           tblptrh	equ	0xFF7
  3523                           tblptrl	equ	0xFF6
  3524                           tablat	equ	0xFF5
  3525                           prodh	equ	0xFF4
  3526                           prodl	equ	0xFF3
  3527                           intcon	equ	0xFF2
  3528                           intcon2	equ	0xFF1
  3529                           postinc0	equ	0xFEE
  3530                           wreg	equ	0xFE8
  3531                           postdec1	equ	0xFE5
  3532                           fsr1l	equ	0xFE1
  3533                           postinc2	equ	0xFDE
  3534                           postdec2	equ	0xFDD
  3535                           fsr2h	equ	0xFDA
  3536                           fsr2l	equ	0xFD9
  3537                           status	equ	0xFD8
  3538                           
  3539 ;; *************** function _Update_Screen *****************
  3540 ;; Defined at:
  3541 ;;		line 69 in file "Main_Screen.c"
  3542 ;; Parameters:    Size  Location     Type
  3543 ;;		None
  3544 ;; Auto vars:     Size  Location     Type
  3545 ;;  neg_tempF       2    2[BANK1 ] int 
  3546 ;; Return value:  Size  Location     Type
  3547 ;;		None               void
  3548 ;; Registers used:
  3549 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3550 ;; Tracked objects:
  3551 ;;		On entry : 0/0
  3552 ;;		On exit  : 0/0
  3553 ;;		Unchanged: 0/0
  3554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3555 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3556 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3557 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3558 ;;      Totals:         2       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3559 ;;Total ram usage:        8 bytes
  3560 ;; Hardware stack levels used:    1
  3561 ;; Hardware stack levels required when called:   10
  3562 ;; This function calls:
  3563 ;;		___awdiv
  3564 ;;		___awmod
  3565 ;;		_drawtext
  3566 ;;		_strcpy
  3567 ;; This function is called by:
  3568 ;;		_main
  3569 ;; This function uses a non-reentrant model
  3570 ;;
  3571                           
  3572                           	psect	text7
  3573  00001C                     __ptext7:
  3574                           	opt stack 0
  3575  00001C                     _Update_Screen:
  3576                           	opt stack 20
  3577                           
  3578                           ;Main_Screen.c: 71: if ((DS1621_tempC & 0x80) == 0x80)
  3579                           
  3580                           ;incstack = 0
  3581  00001C  AE46               	btfss	_DS1621_tempC,7,c
  3582  00001E  D01C               	goto	l6418
  3583                           
  3584                           ;Main_Screen.c: 72: {
  3585                           ;Main_Screen.c: 73: tempC[0] = '-';
  3586  000020  0E2D               	movlw	45
  3587  000022  0100               	movlb	0	; () banked
  3588  000024  6FE3               	movwf	_tempC& (0+255),b
  3589                           
  3590                           ; BSR set to: 0
  3591                           ;Main_Screen.c: 74: tempC[1] = (DS1621_tempC & 0x7f)/10 + '0';
  3592  000026  0E7F               	movlw	127
  3593  000028  1446               	andwf	_DS1621_tempC,w,c
  3594  00002A  6E17               	movwf	___awdiv@dividend,c
  3595  00002C  6A18               	clrf	___awdiv@dividend+1,c
  3596  00002E  0E00               	movlw	0
  3597  000030  6E1A               	movwf	___awdiv@divisor+1,c
  3598  000032  0E0A               	movlw	10
  3599  000034  6E19               	movwf	___awdiv@divisor,c
  3600  000036  ECE6  F00C         	call	___awdiv	;wreg free
  3601  00003A  5017               	movf	?___awdiv,w,c
  3602  00003C  0F30               	addlw	48
  3603  00003E  0100               	movlb	0	; () banked
  3604  000040  6FE4               	movwf	(_tempC+1)& (0+255),b
  3605                           
  3606                           ; BSR set to: 0
  3607                           ;Main_Screen.c: 75: tempC[2] = (DS1621_tempC & 0x7f)%10 + '0';
  3608  000042  0E7F               	movlw	127
  3609  000044  1446               	andwf	_DS1621_tempC,w,c
  3610  000046  6E11               	movwf	___awmod@dividend,c
  3611  000048  6A12               	clrf	___awmod@dividend+1,c
  3612  00004A  0E00               	movlw	0
  3613  00004C  6E14               	movwf	___awmod@divisor+1,c
  3614  00004E  0E0A               	movlw	10
  3615  000050  6E13               	movwf	___awmod@divisor,c
  3616  000052  EC75  F00D         	call	___awmod	;wreg free
  3617  000056  D01B               	goto	L1
  3618  000058                     l6418:
  3619                           
  3620                           ;Main_Screen.c: 77: else
  3621                           ;Main_Screen.c: 78: {
  3622                           ;Main_Screen.c: 79: tempC[0] = '+';
  3623  000058  0E2B               	movlw	43
  3624  00005A  0100               	movlb	0	; () banked
  3625  00005C  6FE3               	movwf	_tempC& (0+255),b
  3626                           
  3627                           ; BSR set to: 0
  3628                           ;Main_Screen.c: 80: tempC[1] = DS1621_tempC/10 + '0';
  3629  00005E  C046  F017         	movff	_DS1621_tempC,___awdiv@dividend
  3630  000062  C047  F018         	movff	_DS1621_tempC+1,___awdiv@dividend+1
  3631  000066  0E00               	movlw	0
  3632  000068  6E1A               	movwf	___awdiv@divisor+1,c
  3633  00006A  0E0A               	movlw	10
  3634  00006C  6E19               	movwf	___awdiv@divisor,c
  3635  00006E  ECE6  F00C         	call	___awdiv	;wreg free
  3636  000072  5017               	movf	?___awdiv,w,c
  3637  000074  0F30               	addlw	48
  3638  000076  0100               	movlb	0	; () banked
  3639  000078  6FE4               	movwf	(_tempC+1)& (0+255),b
  3640                           
  3641                           ; BSR set to: 0
  3642                           ;Main_Screen.c: 81: tempC[2] = DS1621_tempC%10 + '0';
  3643  00007A  C046  F011         	movff	_DS1621_tempC,___awmod@dividend
  3644  00007E  C047  F012         	movff	_DS1621_tempC+1,___awmod@dividend+1
  3645  000082  0E00               	movlw	0
  3646  000084  6E14               	movwf	___awmod@divisor+1,c
  3647  000086  0E0A               	movlw	10
  3648  000088  6E13               	movwf	___awmod@divisor,c
  3649  00008A  EC75  F00D         	call	___awmod	;wreg free
  3650  00008E                     L1:
  3651  00008E  5011               	movf	?___awmod,w,c
  3652  000090  0F30               	addlw	48
  3653  000092  0100               	movlb	0	; () banked
  3654  000094  6FE5               	movwf	(_tempC+2)& (0+255),b
  3655  000096  D000               	goto	l6424
  3656  000098                     l6424:
  3657                           
  3658                           ; BSR set to: 0
  3659                           ;Main_Screen.c: 82: }
  3660                           ;Main_Screen.c: 84: if (DS1621_tempF < 0)
  3661  000098  AE49               	btfss	_DS1621_tempF+1,7,c
  3662  00009A  D028               	goto	l6434
  3663                           
  3664                           ; BSR set to: 0
  3665                           ;Main_Screen.c: 85: {
  3666                           ;Main_Screen.c: 86: tempF[0] = '-';
  3667  00009C  0E2D               	movlw	45
  3668  00009E  0100               	movlb	0	; () banked
  3669  0000A0  6FE7               	movwf	_tempF& (0+255),b
  3670                           
  3671                           ; BSR set to: 0
  3672                           ;Main_Screen.c: 87: int neg_tempF = -DS1621_tempF;
  3673  0000A2  C048  F043         	movff	_DS1621_tempF,??_Update_Screen
  3674  0000A6  C049  F044         	movff	_DS1621_tempF+1,??_Update_Screen+1
  3675  0000AA  1E43               	comf	??_Update_Screen,f,c
  3676  0000AC  1E44               	comf	??_Update_Screen+1,f,c
  3677  0000AE  4A43               	infsnz	??_Update_Screen,f,c
  3678  0000B0  2A44               	incf	??_Update_Screen+1,f,c
  3679  0000B2  C043  F121         	movff	??_Update_Screen,Update_Screen@neg_tempF
  3680  0000B6  C044  F122         	movff	??_Update_Screen+1,Update_Screen@neg_tempF+1
  3681                           
  3682                           ; BSR set to: 0
  3683                           ;Main_Screen.c: 88: tempF[1] = neg_tempF/10 + '0';
  3684  0000BA  C121  F017         	movff	Update_Screen@neg_tempF,___awdiv@dividend
  3685  0000BE  C122  F018         	movff	Update_Screen@neg_tempF+1,___awdiv@dividend+1
  3686  0000C2  0E00               	movlw	0
  3687  0000C4  6E1A               	movwf	___awdiv@divisor+1,c
  3688  0000C6  0E0A               	movlw	10
  3689  0000C8  6E19               	movwf	___awdiv@divisor,c
  3690  0000CA  ECE6  F00C         	call	___awdiv	;wreg free
  3691  0000CE  5017               	movf	?___awdiv,w,c
  3692  0000D0  0F30               	addlw	48
  3693  0000D2  0100               	movlb	0	; () banked
  3694  0000D4  6FE8               	movwf	(_tempF+1)& (0+255),b
  3695                           
  3696                           ; BSR set to: 0
  3697                           ;Main_Screen.c: 89: tempF[2] = neg_tempF%10 + '0';
  3698  0000D6  C121  F011         	movff	Update_Screen@neg_tempF,___awmod@dividend
  3699  0000DA  C122  F012         	movff	Update_Screen@neg_tempF+1,___awmod@dividend+1
  3700  0000DE  0E00               	movlw	0
  3701  0000E0  6E14               	movwf	___awmod@divisor+1,c
  3702  0000E2  0E0A               	movlw	10
  3703  0000E4  6E13               	movwf	___awmod@divisor,c
  3704  0000E6  EC75  F00D         	call	___awmod	;wreg free
  3705  0000EA  D01B               	goto	L2
  3706  0000EC                     l6434:
  3707                           
  3708                           ; BSR set to: 0
  3709                           ;Main_Screen.c: 91: else
  3710                           ;Main_Screen.c: 92: {
  3711                           ;Main_Screen.c: 93: tempF[0] = '+';
  3712  0000EC  0E2B               	movlw	43
  3713  0000EE  0100               	movlb	0	; () banked
  3714  0000F0  6FE7               	movwf	_tempF& (0+255),b
  3715                           
  3716                           ; BSR set to: 0
  3717                           ;Main_Screen.c: 94: tempF[1] = DS1621_tempF/10 + '0';
  3718  0000F2  C048  F017         	movff	_DS1621_tempF,___awdiv@dividend
  3719  0000F6  C049  F018         	movff	_DS1621_tempF+1,___awdiv@dividend+1
  3720  0000FA  0E00               	movlw	0
  3721  0000FC  6E1A               	movwf	___awdiv@divisor+1,c
  3722  0000FE  0E0A               	movlw	10
  3723  000100  6E19               	movwf	___awdiv@divisor,c
  3724  000102  ECE6  F00C         	call	___awdiv	;wreg free
  3725  000106  5017               	movf	?___awdiv,w,c
  3726  000108  0F30               	addlw	48
  3727  00010A  0100               	movlb	0	; () banked
  3728  00010C  6FE8               	movwf	(_tempF+1)& (0+255),b
  3729                           
  3730                           ; BSR set to: 0
  3731                           ;Main_Screen.c: 95: tempF[2] = DS1621_tempF%10 + '0';
  3732  00010E  C048  F011         	movff	_DS1621_tempF,___awmod@dividend
  3733  000112  C049  F012         	movff	_DS1621_tempF+1,___awmod@dividend+1
  3734  000116  0E00               	movlw	0
  3735  000118  6E14               	movwf	___awmod@divisor+1,c
  3736  00011A  0E0A               	movlw	10
  3737  00011C  6E13               	movwf	___awmod@divisor,c
  3738  00011E  EC75  F00D         	call	___awmod	;wreg free
  3739  000122                     L2:
  3740  000122  5011               	movf	?___awmod,w,c
  3741  000124  0F30               	addlw	48
  3742  000126  0100               	movlb	0	; () banked
  3743  000128  6FE9               	movwf	(_tempF+2)& (0+255),b
  3744  00012A  D000               	goto	l6440
  3745  00012C                     l6440:
  3746                           
  3747                           ; BSR set to: 0
  3748                           ;Main_Screen.c: 96: }
  3749                           ;Main_Screen.c: 97: time[0] = (hour>>4) + '0';
  3750  00012C  385E               	swapf	_hour,w,c
  3751  00012E  0B0F               	andlw	15
  3752  000130  0F30               	addlw	48
  3753  000132  0100               	movlb	0	; () banked
  3754  000134  6FCD               	movwf	_time& (0+255),b
  3755                           
  3756                           ; BSR set to: 0
  3757                           ;Main_Screen.c: 98: time[1] = (hour & 0x0f)+ '0';
  3758  000136  505E               	movf	_hour,w,c
  3759  000138  0B0F               	andlw	15
  3760  00013A  0F30               	addlw	48
  3761  00013C  0100               	movlb	0	; () banked
  3762  00013E  6FCE               	movwf	(_time+1)& (0+255),b
  3763                           
  3764                           ; BSR set to: 0
  3765                           ;Main_Screen.c: 101: time[3] = (minute>>4) + '0';
  3766  000140  385F               	swapf	_minute,w,c
  3767  000142  0B0F               	andlw	15
  3768  000144  0F30               	addlw	48
  3769  000146  0100               	movlb	0	; () banked
  3770  000148  6FD0               	movwf	(_time+3)& (0+255),b
  3771                           
  3772                           ; BSR set to: 0
  3773                           ;Main_Screen.c: 102: time[4] = (minute & 0x0f)+ '0';
  3774  00014A  505F               	movf	_minute,w,c
  3775  00014C  0B0F               	andlw	15
  3776  00014E  0F30               	addlw	48
  3777  000150  0100               	movlb	0	; () banked
  3778  000152  6FD1               	movwf	(_time+4)& (0+255),b
  3779                           
  3780                           ; BSR set to: 0
  3781                           ;Main_Screen.c: 104: time[6] = (second>>4) + '0';
  3782  000154  3862               	swapf	_second,w,c
  3783  000156  0B0F               	andlw	15
  3784  000158  0F30               	addlw	48
  3785  00015A  0100               	movlb	0	; () banked
  3786  00015C  6FD3               	movwf	(_time+6)& (0+255),b
  3787                           
  3788                           ; BSR set to: 0
  3789                           ;Main_Screen.c: 105: time[7] = (second & 0x0f)+ '0';
  3790  00015E  5062               	movf	_second,w,c
  3791  000160  0B0F               	andlw	15
  3792  000162  0F30               	addlw	48
  3793  000164  0100               	movlb	0	; () banked
  3794  000166  6FD4               	movwf	(_time+7)& (0+255),b
  3795                           
  3796                           ; BSR set to: 0
  3797                           ;Main_Screen.c: 107: date[0] = (month>>4) + '0';
  3798  000168  3860               	swapf	_month,w,c
  3799  00016A  0B0F               	andlw	15
  3800  00016C  0F30               	addlw	48
  3801  00016E  0100               	movlb	0	; () banked
  3802  000170  6FC4               	movwf	_date& (0+255),b
  3803                           
  3804                           ; BSR set to: 0
  3805                           ;Main_Screen.c: 108: date[1] = (month & 0x0f)+ '0';
  3806  000172  5060               	movf	_month,w,c
  3807  000174  0B0F               	andlw	15
  3808  000176  0F30               	addlw	48
  3809  000178  0100               	movlb	0	; () banked
  3810  00017A  6FC5               	movwf	(_date+1)& (0+255),b
  3811                           
  3812                           ; BSR set to: 0
  3813                           ;Main_Screen.c: 109: date[3] = (day>>4) + '0';
  3814  00017C  385A               	swapf	_day,w,c
  3815  00017E  0B0F               	andlw	15
  3816  000180  0F30               	addlw	48
  3817  000182  0100               	movlb	0	; () banked
  3818  000184  6FC7               	movwf	(_date+3)& (0+255),b
  3819                           
  3820                           ; BSR set to: 0
  3821                           ;Main_Screen.c: 110: date[4] = (day & 0x0f)+ '0';
  3822  000186  505A               	movf	_day,w,c
  3823  000188  0B0F               	andlw	15
  3824  00018A  0F30               	addlw	48
  3825  00018C  0100               	movlb	0	; () banked
  3826  00018E  6FC8               	movwf	(_date+4)& (0+255),b
  3827                           
  3828                           ; BSR set to: 0
  3829                           ;Main_Screen.c: 111: date[6] = (year>>4) + '0';
  3830  000190  386C               	swapf	_year,w,c
  3831  000192  0B0F               	andlw	15
  3832  000194  0F30               	addlw	48
  3833  000196  0100               	movlb	0	; () banked
  3834  000198  6FCA               	movwf	(_date+6)& (0+255),b
  3835                           
  3836                           ; BSR set to: 0
  3837                           ;Main_Screen.c: 112: date[7] = (year & 0x0f)+ '0';
  3838  00019A  506C               	movf	_year,w,c
  3839  00019C  0B0F               	andlw	15
  3840  00019E  0F30               	addlw	48
  3841  0001A0  0100               	movlb	0	; () banked
  3842  0001A2  6FCB               	movwf	(_date+7)& (0+255),b
  3843                           
  3844                           ; BSR set to: 0
  3845                           ;Main_Screen.c: 115: if (FAN == 1) strcpy(Fan_SW_Txt, "ON ");
  3846  0001A4  0450               	decf	_FAN,w,c
  3847  0001A6  A4D8               	btfss	status,2,c
  3848  0001A8  D00B               	goto	l6468
  3849                           
  3850                           ; BSR set to: 0
  3851  0001AA  0EDF               	movlw	low _Fan_SW_Txt
  3852  0001AC  6E11               	movwf	strcpy@to,c
  3853  0001AE  0E00               	movlw	high _Fan_SW_Txt
  3854  0001B0  6E12               	movwf	strcpy@to+1,c
  3855  0001B2  0EEC               	movlw	low STR_10
  3856  0001B4  6E13               	movwf	strcpy@from,c
  3857  0001B6  0EFF               	movlw	high STR_10
  3858  0001B8  6E14               	movwf	strcpy@from+1,c
  3859  0001BA  EC02  F011         	call	_strcpy	;wreg free
  3860  0001BE  D00B               	goto	l6470
  3861  0001C0                     l6468:
  3862                           
  3863                           ;Main_Screen.c: 116: else strcpy(Fan_SW_Txt, "OFF");
  3864  0001C0  0EDF               	movlw	low _Fan_SW_Txt
  3865  0001C2  6E11               	movwf	strcpy@to,c
  3866  0001C4  0E00               	movlw	high _Fan_SW_Txt
  3867  0001C6  6E12               	movwf	strcpy@to+1,c
  3868  0001C8  0EF0               	movlw	low STR_11
  3869  0001CA  6E13               	movwf	strcpy@from,c
  3870  0001CC  0EFF               	movlw	high STR_11
  3871  0001CE  6E14               	movwf	strcpy@from+1,c
  3872  0001D0  EC02  F011         	call	_strcpy	;wreg free
  3873  0001D4  D000               	goto	l6470
  3874  0001D6                     l6470:
  3875                           
  3876                           ;Main_Screen.c: 119: DC_Txt[0] = duty_cycle/100 + '0';
  3877  0001D6  C05C  F017         	movff	_duty_cycle,___awdiv@dividend
  3878  0001DA  6A18               	clrf	___awdiv@dividend+1,c
  3879  0001DC  0E00               	movlw	0
  3880  0001DE  6E1A               	movwf	___awdiv@divisor+1,c
  3881  0001E0  0E64               	movlw	100
  3882  0001E2  6E19               	movwf	___awdiv@divisor,c
  3883  0001E4  ECE6  F00C         	call	___awdiv	;wreg free
  3884  0001E8  5017               	movf	?___awdiv,w,c
  3885  0001EA  0F30               	addlw	48
  3886  0001EC  0100               	movlb	0	; () banked
  3887  0001EE  6FDB               	movwf	_DC_Txt& (0+255),b
  3888                           
  3889                           ; BSR set to: 0
  3890                           ;Main_Screen.c: 120: DC_Txt[1] = (duty_cycle%100)/10 + '0';
  3891  0001F0  0E00               	movlw	0
  3892  0001F2  6E14               	movwf	___awmod@divisor+1,c
  3893  0001F4  0E64               	movlw	100
  3894  0001F6  6E13               	movwf	___awmod@divisor,c
  3895  0001F8  C05C  F011         	movff	_duty_cycle,___awmod@dividend
  3896  0001FC  6A12               	clrf	___awmod@dividend+1,c
  3897  0001FE  EC75  F00D         	call	___awmod	;wreg free
  3898  000202  C011  F017         	movff	?___awmod,___awdiv@dividend
  3899  000206  C012  F018         	movff	?___awmod+1,___awdiv@dividend+1
  3900  00020A  0E00               	movlw	0
  3901  00020C  6E1A               	movwf	___awdiv@divisor+1,c
  3902  00020E  0E0A               	movlw	10
  3903  000210  6E19               	movwf	___awdiv@divisor,c
  3904  000212  ECE6  F00C         	call	___awdiv	;wreg free
  3905  000216  5017               	movf	?___awdiv,w,c
  3906  000218  0F30               	addlw	48
  3907  00021A  0100               	movlb	0	; () banked
  3908  00021C  6FDC               	movwf	(_DC_Txt+1)& (0+255),b
  3909                           
  3910                           ; BSR set to: 0
  3911                           ;Main_Screen.c: 121: DC_Txt[2] = (duty_cycle%100)%10 + '0';
  3912  00021E  0E00               	movlw	0
  3913  000220  6E14               	movwf	___awmod@divisor+1,c
  3914  000222  0E64               	movlw	100
  3915  000224  6E13               	movwf	___awmod@divisor,c
  3916  000226  C05C  F011         	movff	_duty_cycle,___awmod@dividend
  3917  00022A  6A12               	clrf	___awmod@dividend+1,c
  3918  00022C  EC75  F00D         	call	___awmod	;wreg free
  3919  000230  C011  F123         	movff	?___awmod,_Update_Screen$2392
  3920  000234  C012  F124         	movff	?___awmod+1,_Update_Screen$2392+1
  3921                           
  3922                           ;Main_Screen.c: 121: DC_Txt[2] = (duty_cycle%100)%10 + '0';
  3923  000238  C123  F011         	movff	_Update_Screen$2392,___awmod@dividend
  3924  00023C  C124  F012         	movff	_Update_Screen$2392+1,___awmod@dividend+1
  3925  000240  0E00               	movlw	0
  3926  000242  6E14               	movwf	___awmod@divisor+1,c
  3927  000244  0E0A               	movlw	10
  3928  000246  6E13               	movwf	___awmod@divisor,c
  3929  000248  EC75  F00D         	call	___awmod	;wreg free
  3930  00024C  5011               	movf	?___awmod,w,c
  3931  00024E  0F30               	addlw	48
  3932  000250  0100               	movlb	0	; () banked
  3933  000252  6FDD               	movwf	(_DC_Txt+2)& (0+255),b
  3934                           
  3935                           ; BSR set to: 0
  3936                           ;Main_Screen.c: 124: RPM_Txt[0] = rpm/1000 + '0';
  3937  000254  C04C  F017         	movff	_rpm,___awdiv@dividend
  3938  000258  C04D  F018         	movff	_rpm+1,___awdiv@dividend+1
  3939  00025C  0E03               	movlw	3
  3940  00025E  6E1A               	movwf	___awdiv@divisor+1,c
  3941  000260  0EE8               	movlw	232
  3942  000262  6E19               	movwf	___awdiv@divisor,c
  3943  000264  ECE6  F00C         	call	___awdiv	;wreg free
  3944  000268  5017               	movf	?___awdiv,w,c
  3945  00026A  0F30               	addlw	48
  3946  00026C  0100               	movlb	0	; () banked
  3947  00026E  6FD6               	movwf	_RPM_Txt& (0+255),b
  3948                           
  3949                           ; BSR set to: 0
  3950                           ;Main_Screen.c: 125: RPM_Txt[1] = (rpm%1000)/100 + '0';
  3951  000270  0E03               	movlw	3
  3952  000272  6E14               	movwf	___awmod@divisor+1,c
  3953  000274  0EE8               	movlw	232
  3954  000276  6E13               	movwf	___awmod@divisor,c
  3955  000278  C04C  F011         	movff	_rpm,___awmod@dividend
  3956  00027C  C04D  F012         	movff	_rpm+1,___awmod@dividend+1
  3957  000280  EC75  F00D         	call	___awmod	;wreg free
  3958  000284  C011  F017         	movff	?___awmod,___awdiv@dividend
  3959  000288  C012  F018         	movff	?___awmod+1,___awdiv@dividend+1
  3960  00028C  0E00               	movlw	0
  3961  00028E  6E1A               	movwf	___awdiv@divisor+1,c
  3962  000290  0E64               	movlw	100
  3963  000292  6E19               	movwf	___awdiv@divisor,c
  3964  000294  ECE6  F00C         	call	___awdiv	;wreg free
  3965  000298  5017               	movf	?___awdiv,w,c
  3966  00029A  0F30               	addlw	48
  3967  00029C  0100               	movlb	0	; () banked
  3968  00029E  6FD7               	movwf	(_RPM_Txt+1)& (0+255),b
  3969                           
  3970                           ; BSR set to: 0
  3971                           ;Main_Screen.c: 126: RPM_Txt[2] = ((rpm%1000)%100)/10 + '0';
  3972  0002A0  0E03               	movlw	3
  3973  0002A2  6E14               	movwf	___awmod@divisor+1,c
  3974  0002A4  0EE8               	movlw	232
  3975  0002A6  6E13               	movwf	___awmod@divisor,c
  3976  0002A8  C04C  F011         	movff	_rpm,___awmod@dividend
  3977  0002AC  C04D  F012         	movff	_rpm+1,___awmod@dividend+1
  3978  0002B0  EC75  F00D         	call	___awmod	;wreg free
  3979  0002B4  C011  F123         	movff	?___awmod,_Update_Screen$2392
  3980  0002B8  C012  F124         	movff	?___awmod+1,_Update_Screen$2392+1
  3981                           
  3982                           ;Main_Screen.c: 126: RPM_Txt[2] = ((rpm%1000)%100)/10 + '0';
  3983  0002BC  0E00               	movlw	0
  3984  0002BE  6E14               	movwf	___awmod@divisor+1,c
  3985  0002C0  0E64               	movlw	100
  3986  0002C2  6E13               	movwf	___awmod@divisor,c
  3987  0002C4  C123  F011         	movff	_Update_Screen$2392,___awmod@dividend
  3988  0002C8  C124  F012         	movff	_Update_Screen$2392+1,___awmod@dividend+1
  3989  0002CC  EC75  F00D         	call	___awmod	;wreg free
  3990  0002D0  C011  F017         	movff	?___awmod,___awdiv@dividend
  3991  0002D4  C012  F018         	movff	?___awmod+1,___awdiv@dividend+1
  3992  0002D8  0E00               	movlw	0
  3993  0002DA  6E1A               	movwf	___awdiv@divisor+1,c
  3994  0002DC  0E0A               	movlw	10
  3995  0002DE  6E19               	movwf	___awdiv@divisor,c
  3996  0002E0  ECE6  F00C         	call	___awdiv	;wreg free
  3997  0002E4  5017               	movf	?___awdiv,w,c
  3998  0002E6  0F30               	addlw	48
  3999  0002E8  0100               	movlb	0	; () banked
  4000  0002EA  6FD8               	movwf	(_RPM_Txt+2)& (0+255),b
  4001                           
  4002                           ; BSR set to: 0
  4003                           ;Main_Screen.c: 127: RPM_Txt[3] = ((rpm%1000)%100)%10 + '0';
  4004  0002EC  0E03               	movlw	3
  4005  0002EE  6E14               	movwf	___awmod@divisor+1,c
  4006  0002F0  0EE8               	movlw	232
  4007  0002F2  6E13               	movwf	___awmod@divisor,c
  4008  0002F4  C04C  F011         	movff	_rpm,___awmod@dividend
  4009  0002F8  C04D  F012         	movff	_rpm+1,___awmod@dividend+1
  4010  0002FC  EC75  F00D         	call	___awmod	;wreg free
  4011  000300  C011  F123         	movff	?___awmod,_Update_Screen$2392
  4012  000304  C012  F124         	movff	?___awmod+1,_Update_Screen$2392+1
  4013                           
  4014                           ;Main_Screen.c: 127: RPM_Txt[3] = ((rpm%1000)%100)%10 + '0';
  4015  000308  0E00               	movlw	0
  4016  00030A  6E14               	movwf	___awmod@divisor+1,c
  4017  00030C  0E64               	movlw	100
  4018  00030E  6E13               	movwf	___awmod@divisor,c
  4019  000310  C123  F011         	movff	_Update_Screen$2392,___awmod@dividend
  4020  000314  C124  F012         	movff	_Update_Screen$2392+1,___awmod@dividend+1
  4021  000318  EC75  F00D         	call	___awmod	;wreg free
  4022  00031C  C011  F11F         	movff	?___awmod,_Update_Screen$2393
  4023  000320  C012  F120         	movff	?___awmod+1,_Update_Screen$2393+1
  4024                           
  4025                           ;Main_Screen.c: 127: RPM_Txt[3] = ((rpm%1000)%100)%10 + '0';
  4026  000324  C11F  F011         	movff	_Update_Screen$2393,___awmod@dividend
  4027  000328  C120  F012         	movff	_Update_Screen$2393+1,___awmod@dividend+1
  4028  00032C  0E00               	movlw	0
  4029  00032E  6E14               	movwf	___awmod@divisor+1,c
  4030  000330  0E0A               	movlw	10
  4031  000332  6E13               	movwf	___awmod@divisor,c
  4032  000334  EC75  F00D         	call	___awmod	;wreg free
  4033  000338  5011               	movf	?___awmod,w,c
  4034  00033A  0F30               	addlw	48
  4035  00033C  0100               	movlb	0	; () banked
  4036  00033E  6FD9               	movwf	(_RPM_Txt+3)& (0+255),b
  4037                           
  4038                           ; BSR set to: 0
  4039                           ;Main_Screen.c: 129: drawtext(1, 23, tempC , 0xFFE0 , 0x0000 , 2);
  4040  000340  0E17               	movlw	23
  4041  000342  6E39               	movwf	drawtext@y,c
  4042  000344  0EE3               	movlw	low _tempC
  4043  000346  6E3A               	movwf	drawtext@_text,c
  4044  000348  0E00               	movlw	high _tempC
  4045  00034A  6E3B               	movwf	drawtext@_text+1,c
  4046  00034C  0EFF               	movlw	255
  4047  00034E  6E3D               	movwf	drawtext@color+1,c
  4048  000350  0EE0               	movlw	224
  4049  000352  6E3C               	movwf	drawtext@color,c
  4050  000354  0E00               	movlw	0
  4051  000356  6E3F               	movwf	drawtext@bg+1,c
  4052  000358  0E00               	movlw	0
  4053  00035A  6E3E               	movwf	drawtext@bg,c
  4054  00035C  0E02               	movlw	2
  4055  00035E  6E40               	movwf	drawtext@size,c
  4056  000360  0E01               	movlw	1
  4057  000362  EC5C  F009         	call	_drawtext
  4058                           
  4059                           ;Main_Screen.c: 130: drawtext(70, 23, tempF , 0xFFE0 , 0x0000 , 2);
  4060  000366  0E17               	movlw	23
  4061  000368  6E39               	movwf	drawtext@y,c
  4062  00036A  0EE7               	movlw	low _tempF
  4063  00036C  6E3A               	movwf	drawtext@_text,c
  4064  00036E  0E00               	movlw	high _tempF
  4065  000370  6E3B               	movwf	drawtext@_text+1,c
  4066  000372  0EFF               	movlw	255
  4067  000374  6E3D               	movwf	drawtext@color+1,c
  4068  000376  0EE0               	movlw	224
  4069  000378  6E3C               	movwf	drawtext@color,c
  4070  00037A  0E00               	movlw	0
  4071  00037C  6E3F               	movwf	drawtext@bg+1,c
  4072  00037E  0E00               	movlw	0
  4073  000380  6E3E               	movwf	drawtext@bg,c
  4074  000382  0E02               	movlw	2
  4075  000384  6E40               	movwf	drawtext@size,c
  4076  000386  0E46               	movlw	70
  4077  000388  EC5C  F009         	call	_drawtext
  4078                           
  4079                           ;Main_Screen.c: 131: drawtext(15 , 52 , time , 0x07FF , 0x0000 , 2);
  4080  00038C  0E34               	movlw	52
  4081  00038E  6E39               	movwf	drawtext@y,c
  4082  000390  0ECD               	movlw	low _time
  4083  000392  6E3A               	movwf	drawtext@_text,c
  4084  000394  0E00               	movlw	high _time
  4085  000396  6E3B               	movwf	drawtext@_text+1,c
  4086  000398  0E07               	movlw	7
  4087  00039A  6E3D               	movwf	drawtext@color+1,c
  4088  00039C  683C               	setf	drawtext@color,c
  4089  00039E  0E00               	movlw	0
  4090  0003A0  6E3F               	movwf	drawtext@bg+1,c
  4091  0003A2  0E00               	movlw	0
  4092  0003A4  6E3E               	movwf	drawtext@bg,c
  4093  0003A6  0E02               	movlw	2
  4094  0003A8  6E40               	movwf	drawtext@size,c
  4095  0003AA  0E0F               	movlw	15
  4096  0003AC  EC5C  F009         	call	_drawtext
  4097                           
  4098                           ;Main_Screen.c: 132: drawtext(15 , 82 , date , 0x07E0 , 0x0000 , 2);
  4099  0003B0  0E52               	movlw	82
  4100  0003B2  6E39               	movwf	drawtext@y,c
  4101  0003B4  0EC4               	movlw	low _date
  4102  0003B6  6E3A               	movwf	drawtext@_text,c
  4103  0003B8  0E00               	movlw	high _date
  4104  0003BA  6E3B               	movwf	drawtext@_text+1,c
  4105  0003BC  0E07               	movlw	7
  4106  0003BE  6E3D               	movwf	drawtext@color+1,c
  4107  0003C0  0EE0               	movlw	224
  4108  0003C2  6E3C               	movwf	drawtext@color,c
  4109  0003C4  0E00               	movlw	0
  4110  0003C6  6E3F               	movwf	drawtext@bg+1,c
  4111  0003C8  0E00               	movlw	0
  4112  0003CA  6E3E               	movwf	drawtext@bg,c
  4113  0003CC  0E02               	movlw	2
  4114  0003CE  6E40               	movwf	drawtext@size,c
  4115  0003D0  0E0F               	movlw	15
  4116  0003D2  EC5C  F009         	call	_drawtext
  4117                           
  4118                           ;Main_Screen.c: 134: drawtext(95, 130, Fan_SW_Txt, 0xF800 , 0x0000 , 1);
  4119  0003D6  0E82               	movlw	130
  4120  0003D8  6E39               	movwf	drawtext@y,c
  4121  0003DA  0EDF               	movlw	low _Fan_SW_Txt
  4122  0003DC  6E3A               	movwf	drawtext@_text,c
  4123  0003DE  0E00               	movlw	high _Fan_SW_Txt
  4124  0003E0  6E3B               	movwf	drawtext@_text+1,c
  4125  0003E2  0EF8               	movlw	248
  4126  0003E4  6E3D               	movwf	drawtext@color+1,c
  4127  0003E6  0E00               	movlw	0
  4128  0003E8  6E3C               	movwf	drawtext@color,c
  4129  0003EA  0E00               	movlw	0
  4130  0003EC  6E3F               	movwf	drawtext@bg+1,c
  4131  0003EE  0E00               	movlw	0
  4132  0003F0  6E3E               	movwf	drawtext@bg,c
  4133  0003F2  0E01               	movlw	1
  4134  0003F4  6E40               	movwf	drawtext@size,c
  4135  0003F6  0E5F               	movlw	95
  4136  0003F8  EC5C  F009         	call	_drawtext
  4137                           
  4138                           ;Main_Screen.c: 135: drawtext(10, 150, DC_Txt, 0x07E0, 0x0000, 1);
  4139  0003FC  0E96               	movlw	150
  4140  0003FE  6E39               	movwf	drawtext@y,c
  4141  000400  0EDB               	movlw	low _DC_Txt
  4142  000402  6E3A               	movwf	drawtext@_text,c
  4143  000404  0E00               	movlw	high _DC_Txt
  4144  000406  6E3B               	movwf	drawtext@_text+1,c
  4145  000408  0E07               	movlw	7
  4146  00040A  6E3D               	movwf	drawtext@color+1,c
  4147  00040C  0EE0               	movlw	224
  4148  00040E  6E3C               	movwf	drawtext@color,c
  4149  000410  0E00               	movlw	0
  4150  000412  6E3F               	movwf	drawtext@bg+1,c
  4151  000414  0E00               	movlw	0
  4152  000416  6E3E               	movwf	drawtext@bg,c
  4153  000418  0E01               	movlw	1
  4154  00041A  6E40               	movwf	drawtext@size,c
  4155  00041C  0E0A               	movlw	10
  4156  00041E  EC5C  F009         	call	_drawtext
  4157                           
  4158                           ;Main_Screen.c: 136: drawtext(93, 150, RPM_Txt, 0x07E0, 0x0000, 1);
  4159  000422  0E96               	movlw	150
  4160  000424  6E39               	movwf	drawtext@y,c
  4161  000426  0ED6               	movlw	low _RPM_Txt
  4162  000428  6E3A               	movwf	drawtext@_text,c
  4163  00042A  0E00               	movlw	high _RPM_Txt
  4164  00042C  6E3B               	movwf	drawtext@_text+1,c
  4165  00042E  0E07               	movlw	7
  4166  000430  6E3D               	movwf	drawtext@color+1,c
  4167  000432  0EE0               	movlw	224
  4168  000434  6E3C               	movwf	drawtext@color,c
  4169  000436  0E00               	movlw	0
  4170  000438  6E3F               	movwf	drawtext@bg+1,c
  4171  00043A  0E00               	movlw	0
  4172  00043C  6E3E               	movwf	drawtext@bg,c
  4173  00043E  0E01               	movlw	1
  4174  000440  6E40               	movwf	drawtext@size,c
  4175  000442  0E5D               	movlw	93
  4176  000444  EC5C  F009         	call	_drawtext
  4177  000448  0012               	return		;funcret
  4178  00044A                     __end_of_Update_Screen:
  4179                           	opt stack 0
  4180                           tblptru	equ	0xFF8
  4181                           tblptrh	equ	0xFF7
  4182                           tblptrl	equ	0xFF6
  4183                           tablat	equ	0xFF5
  4184                           prodh	equ	0xFF4
  4185                           prodl	equ	0xFF3
  4186                           intcon	equ	0xFF2
  4187                           intcon2	equ	0xFF1
  4188                           postinc0	equ	0xFEE
  4189                           wreg	equ	0xFE8
  4190                           postdec1	equ	0xFE5
  4191                           fsr1l	equ	0xFE1
  4192                           postinc2	equ	0xFDE
  4193                           postdec2	equ	0xFDD
  4194                           fsr2h	equ	0xFDA
  4195                           fsr2l	equ	0xFD9
  4196                           status	equ	0xFD8
  4197                           
  4198 ;; *************** function ___awmod *****************
  4199 ;; Defined at:
  4200 ;;		line 8 in file "E:\XC8\sources\common\awmod.c"
  4201 ;; Parameters:    Size  Location     Type
  4202 ;;  dividend        2   16[COMRAM] int 
  4203 ;;  divisor         2   18[COMRAM] int 
  4204 ;; Auto vars:     Size  Location     Type
  4205 ;;  sign            1   21[COMRAM] unsigned char 
  4206 ;;  counter         1   20[COMRAM] unsigned char 
  4207 ;; Return value:  Size  Location     Type
  4208 ;;                  2   16[COMRAM] int 
  4209 ;; Registers used:
  4210 ;;		wreg, status,2, status,0
  4211 ;; Tracked objects:
  4212 ;;		On entry : 0/0
  4213 ;;		On exit  : 0/0
  4214 ;;		Unchanged: 0/0
  4215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4216 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4217 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4218 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4219 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4220 ;;Total ram usage:        6 bytes
  4221 ;; Hardware stack levels used:    1
  4222 ;; Hardware stack levels required when called:    3
  4223 ;; This function calls:
  4224 ;;		Nothing
  4225 ;; This function is called by:
  4226 ;;		_Update_Screen
  4227 ;; This function uses a non-reentrant model
  4228 ;;
  4229                           
  4230                           	psect	text8
  4231  001AEA                     __ptext8:
  4232                           	opt stack 0
  4233  001AEA                     ___awmod:
  4234                           	opt stack 26
  4235                           
  4236                           ;incstack = 0
  4237  001AEA  0E00               	movlw	0
  4238  001AEC  6E16               	movwf	___awmod@sign,c
  4239  001AEE  AE12               	btfss	___awmod@dividend+1,7,c
  4240  001AF0  D007               	goto	l6170
  4241  001AF2  6C11               	negf	___awmod@dividend,c
  4242  001AF4  1E12               	comf	___awmod@dividend+1,f,c
  4243  001AF6  B0D8               	btfsc	status,0,c
  4244  001AF8  2A12               	incf	___awmod@dividend+1,f,c
  4245  001AFA  0E01               	movlw	1
  4246  001AFC  6E16               	movwf	___awmod@sign,c
  4247  001AFE  D000               	goto	l6170
  4248  001B00                     l6170:
  4249  001B00  AE14               	btfss	___awmod@divisor+1,7,c
  4250  001B02  D005               	goto	l6174
  4251  001B04  6C13               	negf	___awmod@divisor,c
  4252  001B06  1E14               	comf	___awmod@divisor+1,f,c
  4253  001B08  B0D8               	btfsc	status,0,c
  4254  001B0A  2A14               	incf	___awmod@divisor+1,f,c
  4255  001B0C  D000               	goto	l6174
  4256  001B0E                     l6174:
  4257  001B0E  5013               	movf	___awmod@divisor,w,c
  4258  001B10  1014               	iorwf	___awmod@divisor+1,w,c
  4259  001B12  B4D8               	btfsc	status,2,c
  4260  001B14  D01D               	goto	l6190
  4261  001B16  0E01               	movlw	1
  4262  001B18  6E15               	movwf	___awmod@counter,c
  4263  001B1A  D005               	goto	l6180
  4264  001B1C                     l6178:
  4265  001B1C  90D8               	bcf	status,0,c
  4266  001B1E  3613               	rlcf	___awmod@divisor,f,c
  4267  001B20  3614               	rlcf	___awmod@divisor+1,f,c
  4268  001B22  2A15               	incf	___awmod@counter,f,c
  4269  001B24  D000               	goto	l6180
  4270  001B26                     l6180:
  4271  001B26  BE14               	btfsc	___awmod@divisor+1,7,c
  4272  001B28  D002               	goto	l6182
  4273  001B2A  D7F8               	goto	l6178
  4274  001B2C  D000               	goto	l6182
  4275  001B2E                     l6182:
  4276  001B2E  5013               	movf	___awmod@divisor,w,c
  4277  001B30  5C11               	subwf	___awmod@dividend,w,c
  4278  001B32  5014               	movf	___awmod@divisor+1,w,c
  4279  001B34  5812               	subwfb	___awmod@dividend+1,w,c
  4280  001B36  A0D8               	btfss	status,0,c
  4281  001B38  D005               	goto	l6186
  4282  001B3A  5013               	movf	___awmod@divisor,w,c
  4283  001B3C  5E11               	subwf	___awmod@dividend,f,c
  4284  001B3E  5014               	movf	___awmod@divisor+1,w,c
  4285  001B40  5A12               	subwfb	___awmod@dividend+1,f,c
  4286  001B42  D000               	goto	l6186
  4287  001B44                     l6186:
  4288  001B44  90D8               	bcf	status,0,c
  4289  001B46  3214               	rrcf	___awmod@divisor+1,f,c
  4290  001B48  3213               	rrcf	___awmod@divisor,f,c
  4291  001B4A  2E15               	decfsz	___awmod@counter,f,c
  4292  001B4C  D7F0               	goto	l6182
  4293  001B4E  D000               	goto	l6190
  4294  001B50                     l6190:
  4295  001B50  5016               	movf	___awmod@sign,w,c
  4296  001B52  B4D8               	btfsc	status,2,c
  4297  001B54  D005               	goto	l6194
  4298  001B56  6C11               	negf	___awmod@dividend,c
  4299  001B58  1E12               	comf	___awmod@dividend+1,f,c
  4300  001B5A  B0D8               	btfsc	status,0,c
  4301  001B5C  2A12               	incf	___awmod@dividend+1,f,c
  4302  001B5E  D000               	goto	l6194
  4303  001B60                     l6194:
  4304  001B60  C011  F011         	movff	___awmod@dividend,?___awmod
  4305  001B64  C012  F012         	movff	___awmod@dividend+1,?___awmod+1
  4306  001B68  D000               	goto	l988
  4307  001B6A                     l988:
  4308  001B6A  0012               	return		;funcret
  4309  001B6C                     __end_of___awmod:
  4310                           	opt stack 0
  4311                           tblptru	equ	0xFF8
  4312                           tblptrh	equ	0xFF7
  4313                           tblptrl	equ	0xFF6
  4314                           tablat	equ	0xFF5
  4315                           prodh	equ	0xFF4
  4316                           prodl	equ	0xFF3
  4317                           intcon	equ	0xFF2
  4318                           intcon2	equ	0xFF1
  4319                           postinc0	equ	0xFEE
  4320                           wreg	equ	0xFE8
  4321                           postdec1	equ	0xFE5
  4322                           fsr1l	equ	0xFE1
  4323                           postinc2	equ	0xFDE
  4324                           postdec2	equ	0xFDD
  4325                           fsr2h	equ	0xFDA
  4326                           fsr2l	equ	0xFD9
  4327                           status	equ	0xFD8
  4328                           
  4329 ;; *************** function ___awdiv *****************
  4330 ;; Defined at:
  4331 ;;		line 8 in file "E:\XC8\sources\common\awdiv.c"
  4332 ;; Parameters:    Size  Location     Type
  4333 ;;  dividend        2   22[COMRAM] int 
  4334 ;;  divisor         2   24[COMRAM] int 
  4335 ;; Auto vars:     Size  Location     Type
  4336 ;;  quotient        2   28[COMRAM] int 
  4337 ;;  sign            1   27[COMRAM] unsigned char 
  4338 ;;  counter         1   26[COMRAM] unsigned char 
  4339 ;; Return value:  Size  Location     Type
  4340 ;;                  2   22[COMRAM] int 
  4341 ;; Registers used:
  4342 ;;		wreg, status,2, status,0
  4343 ;; Tracked objects:
  4344 ;;		On entry : 0/0
  4345 ;;		On exit  : 0/0
  4346 ;;		Unchanged: 0/0
  4347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4348 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4349 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4350 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4351 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4352 ;;Total ram usage:        8 bytes
  4353 ;; Hardware stack levels used:    1
  4354 ;; Hardware stack levels required when called:    3
  4355 ;; This function calls:
  4356 ;;		Nothing
  4357 ;; This function is called by:
  4358 ;;		_Update_Screen
  4359 ;;		_get_RPM
  4360 ;;		_main
  4361 ;; This function uses a non-reentrant model
  4362 ;;
  4363                           
  4364                           	psect	text9
  4365  0019CC                     __ptext9:
  4366                           	opt stack 0
  4367  0019CC                     ___awdiv:
  4368                           	opt stack 26
  4369                           
  4370                           ;incstack = 0
  4371  0019CC  0E00               	movlw	0
  4372  0019CE  6E1C               	movwf	___awdiv@sign,c
  4373  0019D0  AE1A               	btfss	___awdiv@divisor+1,7,c
  4374  0019D2  D007               	goto	l6126
  4375  0019D4  6C19               	negf	___awdiv@divisor,c
  4376  0019D6  1E1A               	comf	___awdiv@divisor+1,f,c
  4377  0019D8  B0D8               	btfsc	status,0,c
  4378  0019DA  2A1A               	incf	___awdiv@divisor+1,f,c
  4379  0019DC  0E01               	movlw	1
  4380  0019DE  6E1C               	movwf	___awdiv@sign,c
  4381  0019E0  D000               	goto	l6126
  4382  0019E2                     l6126:
  4383  0019E2  AE18               	btfss	___awdiv@dividend+1,7,c
  4384  0019E4  D007               	goto	l6132
  4385  0019E6  6C17               	negf	___awdiv@dividend,c
  4386  0019E8  1E18               	comf	___awdiv@dividend+1,f,c
  4387  0019EA  B0D8               	btfsc	status,0,c
  4388  0019EC  2A18               	incf	___awdiv@dividend+1,f,c
  4389  0019EE  0E01               	movlw	1
  4390  0019F0  1A1C               	xorwf	___awdiv@sign,f,c
  4391  0019F2  D000               	goto	l6132
  4392  0019F4                     l6132:
  4393  0019F4  0E00               	movlw	0
  4394  0019F6  6E1E               	movwf	___awdiv@quotient+1,c
  4395  0019F8  0E00               	movlw	0
  4396  0019FA  6E1D               	movwf	___awdiv@quotient,c
  4397  0019FC  5019               	movf	___awdiv@divisor,w,c
  4398  0019FE  101A               	iorwf	___awdiv@divisor+1,w,c
  4399  001A00  B4D8               	btfsc	status,2,c
  4400  001A02  D021               	goto	l6154
  4401  001A04  0E01               	movlw	1
  4402  001A06  6E1B               	movwf	___awdiv@counter,c
  4403  001A08  D005               	goto	l6140
  4404  001A0A                     l6138:
  4405  001A0A  90D8               	bcf	status,0,c
  4406  001A0C  3619               	rlcf	___awdiv@divisor,f,c
  4407  001A0E  361A               	rlcf	___awdiv@divisor+1,f,c
  4408  001A10  2A1B               	incf	___awdiv@counter,f,c
  4409  001A12  D000               	goto	l6140
  4410  001A14                     l6140:
  4411  001A14  BE1A               	btfsc	___awdiv@divisor+1,7,c
  4412  001A16  D002               	goto	l6142
  4413  001A18  D7F8               	goto	l6138
  4414  001A1A  D000               	goto	l6142
  4415  001A1C                     l6142:
  4416  001A1C  90D8               	bcf	status,0,c
  4417  001A1E  361D               	rlcf	___awdiv@quotient,f,c
  4418  001A20  361E               	rlcf	___awdiv@quotient+1,f,c
  4419  001A22  5019               	movf	___awdiv@divisor,w,c
  4420  001A24  5C17               	subwf	___awdiv@dividend,w,c
  4421  001A26  501A               	movf	___awdiv@divisor+1,w,c
  4422  001A28  5818               	subwfb	___awdiv@dividend+1,w,c
  4423  001A2A  A0D8               	btfss	status,0,c
  4424  001A2C  D006               	goto	l6150
  4425  001A2E  5019               	movf	___awdiv@divisor,w,c
  4426  001A30  5E17               	subwf	___awdiv@dividend,f,c
  4427  001A32  501A               	movf	___awdiv@divisor+1,w,c
  4428  001A34  5A18               	subwfb	___awdiv@dividend+1,f,c
  4429  001A36  801D               	bsf	___awdiv@quotient,0,c
  4430  001A38  D000               	goto	l6150
  4431  001A3A                     l6150:
  4432  001A3A  90D8               	bcf	status,0,c
  4433  001A3C  321A               	rrcf	___awdiv@divisor+1,f,c
  4434  001A3E  3219               	rrcf	___awdiv@divisor,f,c
  4435  001A40  2E1B               	decfsz	___awdiv@counter,f,c
  4436  001A42  D7EC               	goto	l6142
  4437  001A44  D000               	goto	l6154
  4438  001A46                     l6154:
  4439  001A46  501C               	movf	___awdiv@sign,w,c
  4440  001A48  B4D8               	btfsc	status,2,c
  4441  001A4A  D005               	goto	l6158
  4442  001A4C  6C1D               	negf	___awdiv@quotient,c
  4443  001A4E  1E1E               	comf	___awdiv@quotient+1,f,c
  4444  001A50  B0D8               	btfsc	status,0,c
  4445  001A52  2A1E               	incf	___awdiv@quotient+1,f,c
  4446  001A54  D000               	goto	l6158
  4447  001A56                     l6158:
  4448  001A56  C01D  F017         	movff	___awdiv@quotient,?___awdiv
  4449  001A5A  C01E  F018         	movff	___awdiv@quotient+1,?___awdiv+1
  4450  001A5E  D000               	goto	l975
  4451  001A60                     l975:
  4452  001A60  0012               	return		;funcret
  4453  001A62                     __end_of___awdiv:
  4454                           	opt stack 0
  4455                           tblptru	equ	0xFF8
  4456                           tblptrh	equ	0xFF7
  4457                           tblptrl	equ	0xFF6
  4458                           tablat	equ	0xFF5
  4459                           prodh	equ	0xFF4
  4460                           prodl	equ	0xFF3
  4461                           intcon	equ	0xFF2
  4462                           intcon2	equ	0xFF1
  4463                           postinc0	equ	0xFEE
  4464                           wreg	equ	0xFE8
  4465                           postdec1	equ	0xFE5
  4466                           fsr1l	equ	0xFE1
  4467                           postinc2	equ	0xFDE
  4468                           postdec2	equ	0xFDD
  4469                           fsr2h	equ	0xFDA
  4470                           fsr2l	equ	0xFD9
  4471                           status	equ	0xFD8
  4472                           
  4473 ;; *************** function _Toggle_Fan *****************
  4474 ;; Defined at:
  4475 ;;		line 27 in file "Fan_Support.c"
  4476 ;; Parameters:    Size  Location     Type
  4477 ;;		None
  4478 ;; Auto vars:     Size  Location     Type
  4479 ;;		None
  4480 ;; Return value:  Size  Location     Type
  4481 ;;		None               void
  4482 ;; Registers used:
  4483 ;;		wreg, status,2, status,0, cstack
  4484 ;; Tracked objects:
  4485 ;;		On entry : 0/0
  4486 ;;		On exit  : 0/0
  4487 ;;		Unchanged: 0/0
  4488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4489 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4490 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4491 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4492 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4493 ;;Total ram usage:        0 bytes
  4494 ;; Hardware stack levels used:    1
  4495 ;; Hardware stack levels required when called:    7
  4496 ;; This function calls:
  4497 ;;		_Turn_Off_Fan
  4498 ;;		_Turn_On_Fan
  4499 ;; This function is called by:
  4500 ;;		_main
  4501 ;; This function uses a non-reentrant model
  4502 ;;
  4503                           
  4504                           	psect	text10
  4505  002434                     __ptext10:
  4506                           	opt stack 0
  4507  002434                     _Toggle_Fan:
  4508                           	opt stack 23
  4509                           
  4510                           ;Fan_Support.c: 29: if (FAN==0) Turn_On_Fan();
  4511                           
  4512                           ;incstack = 0
  4513  002434  5050               	movf	_FAN,w,c
  4514  002436  A4D8               	btfss	status,2,c
  4515  002438  D003               	goto	l6518
  4516  00243A  EC65  F012         	call	_Turn_On_Fan	;wreg free
  4517  00243E  D003               	goto	l483
  4518  002440                     l6518:
  4519                           
  4520                           ;Fan_Support.c: 30: else Turn_Off_Fan();
  4521  002440  EC90  F012         	call	_Turn_Off_Fan	;wreg free
  4522  002444  D000               	goto	l483
  4523  002446                     l483:
  4524  002446  0012               	return		;funcret
  4525  002448                     __end_of_Toggle_Fan:
  4526                           	opt stack 0
  4527                           tblptru	equ	0xFF8
  4528                           tblptrh	equ	0xFF7
  4529                           tblptrl	equ	0xFF6
  4530                           tablat	equ	0xFF5
  4531                           prodh	equ	0xFF4
  4532                           prodl	equ	0xFF3
  4533                           intcon	equ	0xFF2
  4534                           intcon2	equ	0xFF1
  4535                           postinc0	equ	0xFEE
  4536                           wreg	equ	0xFE8
  4537                           postdec1	equ	0xFE5
  4538                           fsr1l	equ	0xFE1
  4539                           postinc2	equ	0xFDE
  4540                           postdec2	equ	0xFDD
  4541                           fsr2h	equ	0xFDA
  4542                           fsr2l	equ	0xFD9
  4543                           status	equ	0xFD8
  4544                           
  4545 ;; *************** function _Turn_On_Fan *****************
  4546 ;; Defined at:
  4547 ;;		line 43 in file "Fan_Support.c"
  4548 ;; Parameters:    Size  Location     Type
  4549 ;;		None
  4550 ;; Auto vars:     Size  Location     Type
  4551 ;;		None
  4552 ;; Return value:  Size  Location     Type
  4553 ;;		None               void
  4554 ;; Registers used:
  4555 ;;		wreg, status,2, status,0, cstack
  4556 ;; Tracked objects:
  4557 ;;		On entry : 0/0
  4558 ;;		On exit  : 0/0
  4559 ;;		Unchanged: 0/0
  4560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4561 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4562 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4563 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4564 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4565 ;;Total ram usage:        0 bytes
  4566 ;; Hardware stack levels used:    1
  4567 ;; Hardware stack levels required when called:    6
  4568 ;; This function calls:
  4569 ;;		_do_update_pwm
  4570 ;; This function is called by:
  4571 ;;		_Toggle_Fan
  4572 ;; This function uses a non-reentrant model
  4573 ;;
  4574                           
  4575                           	psect	text11
  4576  0024CA                     __ptext11:
  4577                           	opt stack 0
  4578  0024CA                     _Turn_On_Fan:
  4579                           	opt stack 23
  4580                           
  4581                           ;Fan_Support.c: 46: FAN=1;
  4582                           
  4583                           ;incstack = 0
  4584  0024CA  0E01               	movlw	1
  4585  0024CC  6E50               	movwf	_FAN,c
  4586                           
  4587                           ;Fan_Support.c: 47: do_update_pwm(duty_cycle);
  4588  0024CE  505C               	movf	_duty_cycle,w,c
  4589  0024D0  EC8B  F00C         	call	_do_update_pwm
  4590                           
  4591                           ;Fan_Support.c: 48: PORTAbits.RA5=1;
  4592  0024D4  8A80               	bsf	3968,5,c	;volatile
  4593                           
  4594                           ;Fan_Support.c: 49: PORTEbits.RE2=1;
  4595  0024D6  8484               	bsf	3972,2,c	;volatile
  4596  0024D8  0012               	return		;funcret
  4597  0024DA                     __end_of_Turn_On_Fan:
  4598                           	opt stack 0
  4599                           tblptru	equ	0xFF8
  4600                           tblptrh	equ	0xFF7
  4601                           tblptrl	equ	0xFF6
  4602                           tablat	equ	0xFF5
  4603                           prodh	equ	0xFF4
  4604                           prodl	equ	0xFF3
  4605                           intcon	equ	0xFF2
  4606                           intcon2	equ	0xFF1
  4607                           postinc0	equ	0xFEE
  4608                           wreg	equ	0xFE8
  4609                           postdec1	equ	0xFE5
  4610                           fsr1l	equ	0xFE1
  4611                           postinc2	equ	0xFDE
  4612                           postdec2	equ	0xFDD
  4613                           fsr2h	equ	0xFDA
  4614                           fsr2l	equ	0xFD9
  4615                           status	equ	0xFD8
  4616                           
  4617 ;; *************** function _Turn_Off_Fan *****************
  4618 ;; Defined at:
  4619 ;;		line 34 in file "Fan_Support.c"
  4620 ;; Parameters:    Size  Location     Type
  4621 ;;		None
  4622 ;; Auto vars:     Size  Location     Type
  4623 ;;		None
  4624 ;; Return value:  Size  Location     Type
  4625 ;;		None               void
  4626 ;; Registers used:
  4627 ;;		wreg, status,2
  4628 ;; Tracked objects:
  4629 ;;		On entry : 0/0
  4630 ;;		On exit  : 0/0
  4631 ;;		Unchanged: 0/0
  4632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4633 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4634 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4635 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4636 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4637 ;;Total ram usage:        0 bytes
  4638 ;; Hardware stack levels used:    1
  4639 ;; Hardware stack levels required when called:    3
  4640 ;; This function calls:
  4641 ;;		Nothing
  4642 ;; This function is called by:
  4643 ;;		_Toggle_Fan
  4644 ;; This function uses a non-reentrant model
  4645 ;;
  4646                           
  4647                           	psect	text12
  4648  002520                     __ptext12:
  4649                           	opt stack 0
  4650  002520                     _Turn_Off_Fan:
  4651                           	opt stack 26
  4652                           
  4653                           ;Fan_Support.c: 37: FAN=0;
  4654                           
  4655                           ;incstack = 0
  4656  002520  0E00               	movlw	0
  4657  002522  6E50               	movwf	_FAN,c
  4658                           
  4659                           ;Fan_Support.c: 38: PORTAbits.RA5=0;
  4660  002524  9A80               	bcf	3968,5,c	;volatile
  4661                           
  4662                           ;Fan_Support.c: 39: PORTEbits.RE2=0;
  4663  002526  9484               	bcf	3972,2,c	;volatile
  4664  002528  0012               	return		;funcret
  4665  00252A                     __end_of_Turn_Off_Fan:
  4666                           	opt stack 0
  4667                           tblptru	equ	0xFF8
  4668                           tblptrh	equ	0xFF7
  4669                           tblptrl	equ	0xFF6
  4670                           tablat	equ	0xFF5
  4671                           prodh	equ	0xFF4
  4672                           prodl	equ	0xFF3
  4673                           intcon	equ	0xFF2
  4674                           intcon2	equ	0xFF1
  4675                           postinc0	equ	0xFEE
  4676                           wreg	equ	0xFE8
  4677                           postdec1	equ	0xFE5
  4678                           fsr1l	equ	0xFE1
  4679                           postinc2	equ	0xFDE
  4680                           postdec2	equ	0xFDD
  4681                           fsr2h	equ	0xFDA
  4682                           fsr2l	equ	0xFD9
  4683                           status	equ	0xFD8
  4684                           
  4685 ;; *************** function _Set_RPM_RGB *****************
  4686 ;; Defined at:
  4687 ;;		line 152 in file "Fan_Support.c"
  4688 ;; Parameters:    Size  Location     Type
  4689 ;;  rpm             2   16[COMRAM] int 
  4690 ;; Auto vars:     Size  Location     Type
  4691 ;;		None
  4692 ;; Return value:  Size  Location     Type
  4693 ;;		None               void
  4694 ;; Registers used:
  4695 ;;		wreg, status,2, status,0
  4696 ;; Tracked objects:
  4697 ;;		On entry : 0/0
  4698 ;;		On exit  : 0/0
  4699 ;;		Unchanged: 0/0
  4700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4701 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4702 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4703 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4704 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4705 ;;Total ram usage:        2 bytes
  4706 ;; Hardware stack levels used:    1
  4707 ;; Hardware stack levels required when called:    3
  4708 ;; This function calls:
  4709 ;;		Nothing
  4710 ;; This function is called by:
  4711 ;;		_main
  4712 ;; This function uses a non-reentrant model
  4713 ;;
  4714                           
  4715                           	psect	text13
  4716  001CD8                     __ptext13:
  4717                           	opt stack 0
  4718  001CD8                     _Set_RPM_RGB:
  4719                           	opt stack 27
  4720                           
  4721                           ;Fan_Support.c: 154: if (rpm==0)
  4722                           
  4723                           ;incstack = 0
  4724  001CD8  5011               	movf	Set_RPM_RGB@rpm,w,c
  4725  001CDA  1012               	iorwf	Set_RPM_RGB@rpm+1,w,c
  4726  001CDC  A4D8               	btfss	status,2,c
  4727  001CDE  D002               	goto	l6586
  4728                           
  4729                           ;Fan_Support.c: 155: {
  4730                           ;Fan_Support.c: 156: PORTDbits.RD6=0;
  4731  001CE0  9C83               	bcf	3971,6,c	;volatile
  4732  001CE2  D010               	goto	L3
  4733  001CE4                     l6586:
  4734                           
  4735                           ;Fan_Support.c: 159: else if (rpm>0 & rpm<1800)
  4736  001CE4  BE12               	btfsc	Set_RPM_RGB@rpm+1,7,c
  4737  001CE6  D010               	goto	l6592
  4738  001CE8  5012               	movf	Set_RPM_RGB@rpm+1,w,c
  4739  001CEA  E103               	bnz	u5460
  4740  001CEC  0411               	decf	Set_RPM_RGB@rpm,w,c
  4741  001CEE  A0D8               	btfss	status,0,c
  4742  001CF0  D00B               	goto	l6592
  4743  001CF2                     u5460:
  4744  001CF2  BE12               	btfsc	Set_RPM_RGB@rpm+1,7,c
  4745  001CF4  D006               	goto	l6590
  4746  001CF6  0E08               	movlw	8
  4747  001CF8  5C11               	subwf	Set_RPM_RGB@rpm,w,c
  4748  001CFA  0E07               	movlw	7
  4749  001CFC  5812               	subwfb	Set_RPM_RGB@rpm+1,w,c
  4750  001CFE  B0D8               	btfsc	status,0,c
  4751  001D00  D003               	goto	l6592
  4752  001D02                     l6590:
  4753                           
  4754                           ;Fan_Support.c: 160: {
  4755                           ;Fan_Support.c: 161: PORTDbits.RD6=1;
  4756  001D02  8C83               	bsf	3971,6,c	;volatile
  4757  001D04                     L3:
  4758                           
  4759                           ;Fan_Support.c: 162: PORTDbits.RD7=0;
  4760  001D04  9E83               	bcf	3971,7,c	;volatile
  4761                           
  4762                           ;Fan_Support.c: 163: }
  4763  001D06  D01D               	goto	l531
  4764  001D08                     l6592:
  4765                           
  4766                           ;Fan_Support.c: 164: else if (rpm>=1800 & rpm<2700)
  4767  001D08  BE12               	btfsc	Set_RPM_RGB@rpm+1,7,c
  4768  001D0A  D010               	goto	l6598
  4769  001D0C  0E08               	movlw	8
  4770  001D0E  5C11               	subwf	Set_RPM_RGB@rpm,w,c
  4771  001D10  0E07               	movlw	7
  4772  001D12  5812               	subwfb	Set_RPM_RGB@rpm+1,w,c
  4773  001D14  A0D8               	btfss	status,0,c
  4774  001D16  D00A               	goto	l6598
  4775  001D18  BE12               	btfsc	Set_RPM_RGB@rpm+1,7,c
  4776  001D1A  D006               	goto	l6596
  4777  001D1C  0E8C               	movlw	140
  4778  001D1E  5C11               	subwf	Set_RPM_RGB@rpm,w,c
  4779  001D20  0E0A               	movlw	10
  4780  001D22  5812               	subwfb	Set_RPM_RGB@rpm+1,w,c
  4781  001D24  B0D8               	btfsc	status,0,c
  4782  001D26  D002               	goto	l6598
  4783  001D28                     l6596:
  4784                           
  4785                           ;Fan_Support.c: 165: {
  4786                           ;Fan_Support.c: 166: PORTDbits.RD6=1;
  4787  001D28  8C83               	bsf	3971,6,c	;volatile
  4788  001D2A  D009               	goto	L4
  4789  001D2C                     l6598:
  4790                           
  4791                           ;Fan_Support.c: 169: else if (rpm>=2700)
  4792  001D2C  BE12               	btfsc	Set_RPM_RGB@rpm+1,7,c
  4793  001D2E  D009               	goto	l531
  4794  001D30  0E8C               	movlw	140
  4795  001D32  5C11               	subwf	Set_RPM_RGB@rpm,w,c
  4796  001D34  0E0A               	movlw	10
  4797  001D36  5812               	subwfb	Set_RPM_RGB@rpm+1,w,c
  4798  001D38  A0D8               	btfss	status,0,c
  4799  001D3A  D003               	goto	l531
  4800                           
  4801                           ;Fan_Support.c: 170: {
  4802                           ;Fan_Support.c: 171: PORTDbits.RD6=0;
  4803  001D3C  9C83               	bcf	3971,6,c	;volatile
  4804  001D3E                     L4:
  4805                           
  4806                           ;Fan_Support.c: 172: PORTDbits.RD7=1;
  4807  001D3E  8E83               	bsf	3971,7,c	;volatile
  4808  001D40  D000               	goto	l531
  4809  001D42                     l531:
  4810  001D42  0012               	return		;funcret
  4811  001D44                     __end_of_Set_RPM_RGB:
  4812                           	opt stack 0
  4813                           tblptru	equ	0xFF8
  4814                           tblptrh	equ	0xFF7
  4815                           tblptrl	equ	0xFF6
  4816                           tablat	equ	0xFF5
  4817                           prodh	equ	0xFF4
  4818                           prodl	equ	0xFF3
  4819                           intcon	equ	0xFF2
  4820                           intcon2	equ	0xFF1
  4821                           postinc0	equ	0xFEE
  4822                           wreg	equ	0xFE8
  4823                           postdec1	equ	0xFE5
  4824                           fsr1l	equ	0xFE1
  4825                           postinc2	equ	0xFDE
  4826                           postdec2	equ	0xFDD
  4827                           fsr2h	equ	0xFDA
  4828                           fsr2l	equ	0xFD9
  4829                           status	equ	0xFD8
  4830                           
  4831 ;; *************** function _Set_DC_RGB *****************
  4832 ;; Defined at:
  4833 ;;		line 99 in file "Fan_Support.c"
  4834 ;; Parameters:    Size  Location     Type
  4835 ;;  duty_cycle      2   16[COMRAM] int 
  4836 ;; Auto vars:     Size  Location     Type
  4837 ;;		None
  4838 ;; Return value:  Size  Location     Type
  4839 ;;		None               void
  4840 ;; Registers used:
  4841 ;;		wreg, status,2, status,0
  4842 ;; Tracked objects:
  4843 ;;		On entry : 0/0
  4844 ;;		On exit  : 0/0
  4845 ;;		Unchanged: 0/0
  4846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4847 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4848 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4849 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4850 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4851 ;;Total ram usage:        2 bytes
  4852 ;; Hardware stack levels used:    1
  4853 ;; Hardware stack levels required when called:    3
  4854 ;; This function calls:
  4855 ;;		Nothing
  4856 ;; This function is called by:
  4857 ;;		_main
  4858 ;; This function uses a non-reentrant model
  4859 ;;
  4860                           
  4861                           	psect	text14
  4862  001090                     __ptext14:
  4863                           	opt stack 0
  4864  001090                     _Set_DC_RGB:
  4865                           	opt stack 27
  4866                           
  4867                           ;Fan_Support.c: 101: if (duty_cycle>=0 & duty_cycle<9)
  4868                           
  4869                           ;incstack = 0
  4870  001090  BE12               	btfsc	Set_DC_RGB@duty_cycle+1,7,c
  4871  001092  D00A               	goto	l6542
  4872  001094  BE12               	btfsc	Set_DC_RGB@duty_cycle+1,7,c
  4873  001096  D006               	goto	l6540
  4874  001098  5012               	movf	Set_DC_RGB@duty_cycle+1,w,c
  4875  00109A  E106               	bnz	l6542
  4876  00109C  0E09               	movlw	9
  4877  00109E  5C11               	subwf	Set_DC_RGB@duty_cycle,w,c
  4878  0010A0  B0D8               	btfsc	status,0,c
  4879  0010A2  D002               	goto	l6542
  4880  0010A4                     l6540:
  4881                           
  4882                           ;Fan_Support.c: 102: {
  4883                           ;Fan_Support.c: 103: PORTAbits.RA1=0;
  4884  0010A4  9280               	bcf	3968,1,c	;volatile
  4885  0010A6  D011               	goto	L5
  4886  0010A8                     l6542:
  4887                           
  4888                           ;Fan_Support.c: 107: else if (duty_cycle>=10 & duty_cycle<19)
  4889  0010A8  BE12               	btfsc	Set_DC_RGB@duty_cycle+1,7,c
  4890  0010AA  D011               	goto	l6548
  4891  0010AC  5012               	movf	Set_DC_RGB@duty_cycle+1,w,c
  4892  0010AE  E104               	bnz	u5320
  4893  0010B0  0E0A               	movlw	10
  4894  0010B2  5C11               	subwf	Set_DC_RGB@duty_cycle,w,c
  4895  0010B4  A0D8               	btfss	status,0,c
  4896  0010B6  D00B               	goto	l6548
  4897  0010B8                     u5320:
  4898  0010B8  BE12               	btfsc	Set_DC_RGB@duty_cycle+1,7,c
  4899  0010BA  D006               	goto	l6546
  4900  0010BC  5012               	movf	Set_DC_RGB@duty_cycle+1,w,c
  4901  0010BE  E107               	bnz	l6548
  4902  0010C0  0E13               	movlw	19
  4903  0010C2  5C11               	subwf	Set_DC_RGB@duty_cycle,w,c
  4904  0010C4  B0D8               	btfsc	status,0,c
  4905  0010C6  D003               	goto	l6548
  4906  0010C8                     l6546:
  4907                           
  4908                           ;Fan_Support.c: 108: {
  4909                           ;Fan_Support.c: 109: PORTAbits.RA1=1;
  4910  0010C8  8280               	bsf	3968,1,c	;volatile
  4911  0010CA                     L5:
  4912                           
  4913                           ;Fan_Support.c: 110: PORTAbits.RA2=0;
  4914  0010CA  9480               	bcf	3968,2,c	;volatile
  4915  0010CC  D012               	goto	L6
  4916  0010CE                     l6548:
  4917                           
  4918                           ;Fan_Support.c: 113: else if (duty_cycle>=20 & duty_cycle<29)
  4919  0010CE  BE12               	btfsc	Set_DC_RGB@duty_cycle+1,7,c
  4920  0010D0  D012               	goto	l6554
  4921  0010D2  5012               	movf	Set_DC_RGB@duty_cycle+1,w,c
  4922  0010D4  E104               	bnz	u5340
  4923  0010D6  0E14               	movlw	20
  4924  0010D8  5C11               	subwf	Set_DC_RGB@duty_cycle,w,c
  4925  0010DA  A0D8               	btfss	status,0,c
  4926  0010DC  D00C               	goto	l6554
  4927  0010DE                     u5340:
  4928  0010DE  BE12               	btfsc	Set_DC_RGB@duty_cycle+1,7,c
  4929  0010E0  D006               	goto	l6552
  4930  0010E2  5012               	movf	Set_DC_RGB@duty_cycle+1,w,c
  4931  0010E4  E108               	bnz	l6554
  4932  0010E6  0E1D               	movlw	29
  4933  0010E8  5C11               	subwf	Set_DC_RGB@duty_cycle,w,c
  4934  0010EA  B0D8               	btfsc	status,0,c
  4935  0010EC  D004               	goto	l6554
  4936  0010EE                     l6552:
  4937                           
  4938                           ;Fan_Support.c: 114: {
  4939                           ;Fan_Support.c: 115: PORTAbits.RA1=0;
  4940  0010EE  9280               	bcf	3968,1,c	;volatile
  4941  0010F0  D013               	goto	L7
  4942  0010F2                     L6:
  4943                           
  4944                           ;Fan_Support.c: 117: PORTAbits.RA4=0;
  4945  0010F2  9880               	bcf	3968,4,c	;volatile
  4946                           
  4947                           ;Fan_Support.c: 118: }
  4948  0010F4  D058               	goto	l521
  4949  0010F6                     l6554:
  4950                           
  4951                           ;Fan_Support.c: 119: else if (duty_cycle>=30 & duty_cycle<39)
  4952  0010F6  BE12               	btfsc	Set_DC_RGB@duty_cycle+1,7,c
  4953  0010F8  D011               	goto	l6560
  4954  0010FA  5012               	movf	Set_DC_RGB@duty_cycle+1,w,c
  4955  0010FC  E104               	bnz	u5360
  4956  0010FE  0E1E               	movlw	30
  4957  001100  5C11               	subwf	Set_DC_RGB@duty_cycle,w,c
  4958  001102  A0D8               	btfss	status,0,c
  4959  001104  D00B               	goto	l6560
  4960  001106                     u5360:
  4961  001106  BE12               	btfsc	Set_DC_RGB@duty_cycle+1,7,c
  4962  001108  D006               	goto	l6558
  4963  00110A  5012               	movf	Set_DC_RGB@duty_cycle+1,w,c
  4964  00110C  E107               	bnz	l6560
  4965  00110E  0E27               	movlw	39
  4966  001110  5C11               	subwf	Set_DC_RGB@duty_cycle,w,c
  4967  001112  B0D8               	btfsc	status,0,c
  4968  001114  D003               	goto	l6560
  4969  001116                     l6558:
  4970                           
  4971                           ;Fan_Support.c: 120: {
  4972                           ;Fan_Support.c: 121: PORTAbits.RA1=1;
  4973  001116  8280               	bsf	3968,1,c	;volatile
  4974  001118                     L7:
  4975                           
  4976                           ;Fan_Support.c: 122: PORTAbits.RA2=1;
  4977  001118  8480               	bsf	3968,2,c	;volatile
  4978  00111A  D7EB               	goto	L6
  4979  00111C                     l6560:
  4980                           
  4981                           ;Fan_Support.c: 125: else if (duty_cycle>=40 & duty_cycle<49)
  4982  00111C  BE12               	btfsc	Set_DC_RGB@duty_cycle+1,7,c
  4983  00111E  D010               	goto	l6566
  4984  001120  5012               	movf	Set_DC_RGB@duty_cycle+1,w,c
  4985  001122  E104               	bnz	u5380
  4986  001124  0E28               	movlw	40
  4987  001126  5C11               	subwf	Set_DC_RGB@duty_cycle,w,c
  4988  001128  A0D8               	btfss	status,0,c
  4989  00112A  D00A               	goto	l6566
  4990  00112C                     u5380:
  4991  00112C  BE12               	btfsc	Set_DC_RGB@duty_cycle+1,7,c
  4992  00112E  D006               	goto	l6564
  4993  001130  5012               	movf	Set_DC_RGB@duty_cycle+1,w,c
  4994  001132  E106               	bnz	l6566
  4995  001134  0E31               	movlw	49
  4996  001136  5C11               	subwf	Set_DC_RGB@duty_cycle,w,c
  4997  001138  B0D8               	btfsc	status,0,c
  4998  00113A  D002               	goto	l6566
  4999  00113C                     l6564:
  5000                           
  5001                           ;Fan_Support.c: 126: {
  5002                           ;Fan_Support.c: 127: PORTAbits.RA1=0;
  5003  00113C  9280               	bcf	3968,1,c	;volatile
  5004  00113E  D011               	goto	L8
  5005  001140                     l6566:
  5006                           
  5007                           ;Fan_Support.c: 131: else if (duty_cycle>=50 & duty_cycle<59)
  5008  001140  BE12               	btfsc	Set_DC_RGB@duty_cycle+1,7,c
  5009  001142  D011               	goto	l6572
  5010  001144  5012               	movf	Set_DC_RGB@duty_cycle+1,w,c
  5011  001146  E104               	bnz	u5400
  5012  001148  0E32               	movlw	50
  5013  00114A  5C11               	subwf	Set_DC_RGB@duty_cycle,w,c
  5014  00114C  A0D8               	btfss	status,0,c
  5015  00114E  D00B               	goto	l6572
  5016  001150                     u5400:
  5017  001150  BE12               	btfsc	Set_DC_RGB@duty_cycle+1,7,c
  5018  001152  D006               	goto	l6570
  5019  001154  5012               	movf	Set_DC_RGB@duty_cycle+1,w,c
  5020  001156  E107               	bnz	l6572
  5021  001158  0E3B               	movlw	59
  5022  00115A  5C11               	subwf	Set_DC_RGB@duty_cycle,w,c
  5023  00115C  B0D8               	btfsc	status,0,c
  5024  00115E  D003               	goto	l6572
  5025  001160                     l6570:
  5026                           
  5027                           ;Fan_Support.c: 132: {
  5028                           ;Fan_Support.c: 133: PORTAbits.RA1=1;
  5029  001160  8280               	bsf	3968,1,c	;volatile
  5030  001162                     L8:
  5031                           
  5032                           ;Fan_Support.c: 134: PORTAbits.RA2=0;
  5033  001162  9480               	bcf	3968,2,c	;volatile
  5034  001164  D012               	goto	L9
  5035  001166                     l6572:
  5036                           
  5037                           ;Fan_Support.c: 137: else if (duty_cycle>=60 & duty_cycle<69)
  5038  001166  BE12               	btfsc	Set_DC_RGB@duty_cycle+1,7,c
  5039  001168  D012               	goto	l6578
  5040  00116A  5012               	movf	Set_DC_RGB@duty_cycle+1,w,c
  5041  00116C  E104               	bnz	u5420
  5042  00116E  0E3C               	movlw	60
  5043  001170  5C11               	subwf	Set_DC_RGB@duty_cycle,w,c
  5044  001172  A0D8               	btfss	status,0,c
  5045  001174  D00C               	goto	l6578
  5046  001176                     u5420:
  5047  001176  BE12               	btfsc	Set_DC_RGB@duty_cycle+1,7,c
  5048  001178  D006               	goto	l6576
  5049  00117A  5012               	movf	Set_DC_RGB@duty_cycle+1,w,c
  5050  00117C  E108               	bnz	l6578
  5051  00117E  0E45               	movlw	69
  5052  001180  5C11               	subwf	Set_DC_RGB@duty_cycle,w,c
  5053  001182  B0D8               	btfsc	status,0,c
  5054  001184  D004               	goto	l6578
  5055  001186                     l6576:
  5056                           
  5057                           ;Fan_Support.c: 138: {
  5058                           ;Fan_Support.c: 139: PORTAbits.RA1=0;
  5059  001186  9280               	bcf	3968,1,c	;volatile
  5060  001188  D00B               	goto	L10
  5061  00118A                     L9:
  5062                           
  5063                           ;Fan_Support.c: 141: PORTAbits.RA4=1;
  5064  00118A  8880               	bsf	3968,4,c	;volatile
  5065                           
  5066                           ;Fan_Support.c: 142: }
  5067  00118C  D00C               	goto	l521
  5068  00118E                     l6578:
  5069                           
  5070                           ;Fan_Support.c: 143: else if (duty_cycle>=70)
  5071  00118E  BE12               	btfsc	Set_DC_RGB@duty_cycle+1,7,c
  5072  001190  D00A               	goto	l521
  5073  001192  5012               	movf	Set_DC_RGB@duty_cycle+1,w,c
  5074  001194  E104               	bnz	u5440
  5075  001196  0E46               	movlw	70
  5076  001198  5C11               	subwf	Set_DC_RGB@duty_cycle,w,c
  5077  00119A  A0D8               	btfss	status,0,c
  5078  00119C  D004               	goto	l521
  5079  00119E                     u5440:
  5080                           
  5081                           ;Fan_Support.c: 144: {
  5082                           ;Fan_Support.c: 145: PORTAbits.RA1=1;
  5083  00119E  8280               	bsf	3968,1,c	;volatile
  5084  0011A0                     L10:
  5085                           
  5086                           ;Fan_Support.c: 146: PORTAbits.RA2=1;
  5087  0011A0  8480               	bsf	3968,2,c	;volatile
  5088  0011A2  D7F3               	goto	L9
  5089                           
  5090                           ;Fan_Support.c: 147: PORTAbits.RA4=1;
  5091  0011A4  D000               	goto	l521
  5092  0011A6                     l521:
  5093  0011A6  0012               	return		;funcret
  5094  0011A8                     __end_of_Set_DC_RGB:
  5095                           	opt stack 0
  5096                           tblptru	equ	0xFF8
  5097                           tblptrh	equ	0xFF7
  5098                           tblptrl	equ	0xFF6
  5099                           tablat	equ	0xFF5
  5100                           prodh	equ	0xFF4
  5101                           prodl	equ	0xFF3
  5102                           intcon	equ	0xFF2
  5103                           intcon2	equ	0xFF1
  5104                           postinc0	equ	0xFEE
  5105                           wreg	equ	0xFE8
  5106                           postdec1	equ	0xFE5
  5107                           fsr1l	equ	0xFE1
  5108                           postinc2	equ	0xFDE
  5109                           postdec2	equ	0xFDD
  5110                           fsr2h	equ	0xFDA
  5111                           fsr2l	equ	0xFD9
  5112                           status	equ	0xFD8
  5113                           
  5114 ;; *************** function _Initialize_Screen *****************
  5115 ;; Defined at:
  5116 ;;		line 34 in file "Main_Screen.c"
  5117 ;; Parameters:    Size  Location     Type
  5118 ;;		None
  5119 ;; Auto vars:     Size  Location     Type
  5120 ;;		None
  5121 ;; Return value:  Size  Location     Type
  5122 ;;		None               void
  5123 ;; Registers used:
  5124 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5125 ;; Tracked objects:
  5126 ;;		On entry : 0/0
  5127 ;;		On exit  : 0/0
  5128 ;;		Unchanged: 0/0
  5129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5130 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5131 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5132 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5133 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5134 ;;Total ram usage:        0 bytes
  5135 ;; Hardware stack levels used:    1
  5136 ;; Hardware stack levels required when called:   10
  5137 ;; This function calls:
  5138 ;;		_LCD_Reset
  5139 ;;		_TFT_GreenTab_Initialize
  5140 ;;		_drawCircle
  5141 ;;		_drawtext
  5142 ;;		_fillScreen
  5143 ;;		_strcpy
  5144 ;; This function is called by:
  5145 ;;		_main
  5146 ;; This function uses a non-reentrant model
  5147 ;;
  5148                           
  5149                           	psect	text15
  5150  0007A4                     __ptext15:
  5151                           	opt stack 0
  5152  0007A4                     _Initialize_Screen:
  5153                           	opt stack 20
  5154                           
  5155                           ;Main_Screen.c: 36: LCD_Reset();
  5156                           
  5157                           ;incstack = 0
  5158  0007A4  EC38  F012         	call	_LCD_Reset	;wreg free
  5159                           
  5160                           ;Main_Screen.c: 37: TFT_GreenTab_Initialize();
  5161  0007A8  EC33  F011         	call	_TFT_GreenTab_Initialize	;wreg free
  5162                           
  5163                           ;Main_Screen.c: 38: fillScreen(0x0000);
  5164  0007AC  0E00               	movlw	0
  5165  0007AE  6E25               	movwf	fillScreen@color+1,c
  5166  0007B0  0E00               	movlw	0
  5167  0007B2  6E24               	movwf	fillScreen@color,c
  5168  0007B4  ECE8  F011         	call	_fillScreen	;wreg free
  5169                           
  5170                           ;Main_Screen.c: 39: txt = buffer;
  5171  0007B8  0E00               	movlw	low _buffer
  5172  0007BA  6E4E               	movwf	_txt,c
  5173  0007BC  0E01               	movlw	high _buffer
  5174  0007BE  6E4F               	movwf	_txt+1,c
  5175                           
  5176                           ;Main_Screen.c: 40: strcpy(txt, "ECE3301L Spring 21-S1");
  5177  0007C0  C04E  F011         	movff	_txt,strcpy@to
  5178  0007C4  C04F  F012         	movff	_txt+1,strcpy@to+1
  5179  0007C8  0E60               	movlw	low STR_1
  5180  0007CA  6E13               	movwf	strcpy@from,c
  5181  0007CC  0EFF               	movlw	high STR_1
  5182  0007CE  6E14               	movwf	strcpy@from+1,c
  5183  0007D0  EC02  F011         	call	_strcpy	;wreg free
  5184                           
  5185                           ;Main_Screen.c: 42: drawtext(1 , 1, txt, 0xFFFF , 0x0000, 1);
  5186  0007D4  0E01               	movlw	1
  5187  0007D6  6E39               	movwf	drawtext@y,c
  5188  0007D8  C04E  F03A         	movff	_txt,drawtext@_text
  5189  0007DC  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  5190  0007E0  0EFF               	movlw	255
  5191  0007E2  6E3D               	movwf	drawtext@color+1,c
  5192  0007E4  683C               	setf	drawtext@color,c
  5193  0007E6  0E00               	movlw	0
  5194  0007E8  6E3F               	movwf	drawtext@bg+1,c
  5195  0007EA  0E00               	movlw	0
  5196  0007EC  6E3E               	movwf	drawtext@bg,c
  5197  0007EE  0E01               	movlw	1
  5198  0007F0  6E40               	movwf	drawtext@size,c
  5199  0007F2  0E01               	movlw	1
  5200  0007F4  EC5C  F009         	call	_drawtext
  5201                           
  5202                           ;Main_Screen.c: 44: strcpy(txt, "Temperature:");
  5203  0007F8  C04E  F011         	movff	_txt,strcpy@to
  5204  0007FC  C04F  F012         	movff	_txt+1,strcpy@to+1
  5205  000800  0ECF               	movlw	low STR_2
  5206  000802  6E13               	movwf	strcpy@from,c
  5207  000804  0EFF               	movlw	high STR_2
  5208  000806  6E14               	movwf	strcpy@from+1,c
  5209  000808  EC02  F011         	call	_strcpy	;wreg free
  5210                           
  5211                           ;Main_Screen.c: 45: drawtext(24 , 11 , txt, 0xF81F, 0x0000, 1);
  5212  00080C  0E0B               	movlw	11
  5213  00080E  6E39               	movwf	drawtext@y,c
  5214  000810  C04E  F03A         	movff	_txt,drawtext@_text
  5215  000814  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  5216  000818  0EF8               	movlw	248
  5217  00081A  6E3D               	movwf	drawtext@color+1,c
  5218  00081C  0E1F               	movlw	31
  5219  00081E  6E3C               	movwf	drawtext@color,c
  5220  000820  0E00               	movlw	0
  5221  000822  6E3F               	movwf	drawtext@bg+1,c
  5222  000824  0E00               	movlw	0
  5223  000826  6E3E               	movwf	drawtext@bg,c
  5224  000828  0E01               	movlw	1
  5225  00082A  6E40               	movwf	drawtext@size,c
  5226  00082C  0E18               	movlw	24
  5227  00082E  EC5C  F009         	call	_drawtext
  5228                           
  5229                           ;Main_Screen.c: 46: drawCircle(40, 23 , 2 , 0xFFE0);
  5230  000832  0E00               	movlw	0
  5231  000834  6E1D               	movwf	drawCircle@x0+1,c
  5232  000836  0E28               	movlw	40
  5233  000838  6E1C               	movwf	drawCircle@x0,c
  5234  00083A  0E00               	movlw	0
  5235  00083C  6E1F               	movwf	drawCircle@y0+1,c
  5236  00083E  0E17               	movlw	23
  5237  000840  6E1E               	movwf	drawCircle@y0,c
  5238  000842  0E00               	movlw	0
  5239  000844  6E21               	movwf	drawCircle@r+1,c
  5240  000846  0E02               	movlw	2
  5241  000848  6E20               	movwf	drawCircle@r,c
  5242  00084A  0EFF               	movlw	255
  5243  00084C  6E23               	movwf	drawCircle@color+1,c
  5244  00084E  0EE0               	movlw	224
  5245  000850  6E22               	movwf	drawCircle@color,c
  5246  000852  EC0D  F006         	call	_drawCircle	;wreg free
  5247                           
  5248                           ;Main_Screen.c: 47: strcpy(txt, "C/");
  5249  000856  C04E  F011         	movff	_txt,strcpy@to
  5250  00085A  C04F  F012         	movff	_txt+1,strcpy@to+1
  5251  00085E  0EF8               	movlw	low STR_3
  5252  000860  6E13               	movwf	strcpy@from,c
  5253  000862  0EFF               	movlw	high STR_3
  5254  000864  6E14               	movwf	strcpy@from+1,c
  5255  000866  EC02  F011         	call	_strcpy	;wreg free
  5256                           
  5257                           ;Main_Screen.c: 48: drawtext(45 , 23, txt, 0xFFE0 , 0x0000, 2);
  5258  00086A  0E17               	movlw	23
  5259  00086C  6E39               	movwf	drawtext@y,c
  5260  00086E  C04E  F03A         	movff	_txt,drawtext@_text
  5261  000872  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  5262  000876  0EFF               	movlw	255
  5263  000878  6E3D               	movwf	drawtext@color+1,c
  5264  00087A  0EE0               	movlw	224
  5265  00087C  6E3C               	movwf	drawtext@color,c
  5266  00087E  0E00               	movlw	0
  5267  000880  6E3F               	movwf	drawtext@bg+1,c
  5268  000882  0E00               	movlw	0
  5269  000884  6E3E               	movwf	drawtext@bg,c
  5270  000886  0E02               	movlw	2
  5271  000888  6E40               	movwf	drawtext@size,c
  5272  00088A  0E2D               	movlw	45
  5273  00088C  EC5C  F009         	call	_drawtext
  5274                           
  5275                           ;Main_Screen.c: 49: strcpy(txt, "F");
  5276  000890  C04E  F011         	movff	_txt,strcpy@to
  5277  000894  C04F  F012         	movff	_txt+1,strcpy@to+1
  5278  000898  0EF2               	movlw	low (STR_11+2)
  5279  00089A  6E13               	movwf	strcpy@from,c
  5280  00089C  0EFF               	movlw	high (STR_11+2)
  5281  00089E  6E14               	movwf	strcpy@from+1,c
  5282  0008A0  EC02  F011         	call	_strcpy	;wreg free
  5283                           
  5284                           ;Main_Screen.c: 50: drawCircle(110, 23 , 2 , 0xFFE0);
  5285  0008A4  0E00               	movlw	0
  5286  0008A6  6E1D               	movwf	drawCircle@x0+1,c
  5287  0008A8  0E6E               	movlw	110
  5288  0008AA  6E1C               	movwf	drawCircle@x0,c
  5289  0008AC  0E00               	movlw	0
  5290  0008AE  6E1F               	movwf	drawCircle@y0+1,c
  5291  0008B0  0E17               	movlw	23
  5292  0008B2  6E1E               	movwf	drawCircle@y0,c
  5293  0008B4  0E00               	movlw	0
  5294  0008B6  6E21               	movwf	drawCircle@r+1,c
  5295  0008B8  0E02               	movlw	2
  5296  0008BA  6E20               	movwf	drawCircle@r,c
  5297  0008BC  0EFF               	movlw	255
  5298  0008BE  6E23               	movwf	drawCircle@color+1,c
  5299  0008C0  0EE0               	movlw	224
  5300  0008C2  6E22               	movwf	drawCircle@color,c
  5301  0008C4  EC0D  F006         	call	_drawCircle	;wreg free
  5302                           
  5303                           ;Main_Screen.c: 51: drawtext(115 , 23, txt, 0xFFE0 , 0x0000, 2);
  5304  0008C8  0E17               	movlw	23
  5305  0008CA  6E39               	movwf	drawtext@y,c
  5306  0008CC  C04E  F03A         	movff	_txt,drawtext@_text
  5307  0008D0  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  5308  0008D4  0EFF               	movlw	255
  5309  0008D6  6E3D               	movwf	drawtext@color+1,c
  5310  0008D8  0EE0               	movlw	224
  5311  0008DA  6E3C               	movwf	drawtext@color,c
  5312  0008DC  0E00               	movlw	0
  5313  0008DE  6E3F               	movwf	drawtext@bg+1,c
  5314  0008E0  0E00               	movlw	0
  5315  0008E2  6E3E               	movwf	drawtext@bg,c
  5316  0008E4  0E02               	movlw	2
  5317  0008E6  6E40               	movwf	drawtext@size,c
  5318  0008E8  0E73               	movlw	115
  5319  0008EA  EC5C  F009         	call	_drawtext
  5320                           
  5321                           ;Main_Screen.c: 52: strcpy(txt, "Time");
  5322  0008EE  C04E  F011         	movff	_txt,strcpy@to
  5323  0008F2  C04F  F012         	movff	_txt+1,strcpy@to+1
  5324  0008F6  0EE2               	movlw	low STR_5
  5325  0008F8  6E13               	movwf	strcpy@from,c
  5326  0008FA  0EFF               	movlw	high STR_5
  5327  0008FC  6E14               	movwf	strcpy@from+1,c
  5328  0008FE  EC02  F011         	call	_strcpy	;wreg free
  5329                           
  5330                           ;Main_Screen.c: 53: drawtext(50 , 40 , txt, 0x001F , 0x0000, 1);
  5331  000902  0E28               	movlw	40
  5332  000904  6E39               	movwf	drawtext@y,c
  5333  000906  C04E  F03A         	movff	_txt,drawtext@_text
  5334  00090A  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  5335  00090E  0E00               	movlw	0
  5336  000910  6E3D               	movwf	drawtext@color+1,c
  5337  000912  0E1F               	movlw	31
  5338  000914  6E3C               	movwf	drawtext@color,c
  5339  000916  0E00               	movlw	0
  5340  000918  6E3F               	movwf	drawtext@bg+1,c
  5341  00091A  0E00               	movlw	0
  5342  00091C  6E3E               	movwf	drawtext@bg,c
  5343  00091E  0E01               	movlw	1
  5344  000920  6E40               	movwf	drawtext@size,c
  5345  000922  0E32               	movlw	50
  5346  000924  EC5C  F009         	call	_drawtext
  5347                           
  5348                           ;Main_Screen.c: 54: strcpy(txt, "Date");
  5349  000928  C04E  F011         	movff	_txt,strcpy@to
  5350  00092C  C04F  F012         	movff	_txt+1,strcpy@to+1
  5351  000930  0EE7               	movlw	low STR_6
  5352  000932  6E13               	movwf	strcpy@from,c
  5353  000934  0EFF               	movlw	high STR_6
  5354  000936  6E14               	movwf	strcpy@from+1,c
  5355  000938  EC02  F011         	call	_strcpy	;wreg free
  5356                           
  5357                           ;Main_Screen.c: 55: drawtext(50 , 71 , txt, 0xF800 , 0x0000, 1);
  5358  00093C  0E47               	movlw	71
  5359  00093E  6E39               	movwf	drawtext@y,c
  5360  000940  C04E  F03A         	movff	_txt,drawtext@_text
  5361  000944  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  5362  000948  0EF8               	movlw	248
  5363  00094A  6E3D               	movwf	drawtext@color+1,c
  5364  00094C  0E00               	movlw	0
  5365  00094E  6E3C               	movwf	drawtext@color,c
  5366  000950  0E00               	movlw	0
  5367  000952  6E3F               	movwf	drawtext@bg+1,c
  5368  000954  0E00               	movlw	0
  5369  000956  6E3E               	movwf	drawtext@bg,c
  5370  000958  0E01               	movlw	1
  5371  00095A  6E40               	movwf	drawtext@size,c
  5372  00095C  0E32               	movlw	50
  5373  00095E  EC5C  F009         	call	_drawtext
  5374                           
  5375                           ;Main_Screen.c: 58: strcpy(txt, "  FAN");
  5376  000962  C04E  F011         	movff	_txt,strcpy@to
  5377  000966  C04F  F012         	movff	_txt+1,strcpy@to+1
  5378  00096A  0EDC               	movlw	low STR_7
  5379  00096C  6E13               	movwf	strcpy@from,c
  5380  00096E  0EFF               	movlw	high STR_7
  5381  000970  6E14               	movwf	strcpy@from+1,c
  5382  000972  EC02  F011         	call	_strcpy	;wreg free
  5383                           
  5384                           ;Main_Screen.c: 59: drawtext(85, 120, txt, 0x001F , 0x0000, 1);
  5385  000976  0E78               	movlw	120
  5386  000978  6E39               	movwf	drawtext@y,c
  5387  00097A  C04E  F03A         	movff	_txt,drawtext@_text
  5388  00097E  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  5389  000982  0E00               	movlw	0
  5390  000984  6E3D               	movwf	drawtext@color+1,c
  5391  000986  0E1F               	movlw	31
  5392  000988  6E3C               	movwf	drawtext@color,c
  5393  00098A  0E00               	movlw	0
  5394  00098C  6E3F               	movwf	drawtext@bg+1,c
  5395  00098E  0E00               	movlw	0
  5396  000990  6E3E               	movwf	drawtext@bg,c
  5397  000992  0E01               	movlw	1
  5398  000994  6E40               	movwf	drawtext@size,c
  5399  000996  0E55               	movlw	85
  5400  000998  EC5C  F009         	call	_drawtext
  5401                           
  5402                           ;Main_Screen.c: 61: strcpy(txt, "DC");
  5403  00099C  C04E  F011         	movff	_txt,strcpy@to
  5404  0009A0  C04F  F012         	movff	_txt+1,strcpy@to+1
  5405  0009A4  0EFB               	movlw	low STR_8
  5406  0009A6  6E13               	movwf	strcpy@from,c
  5407  0009A8  0EFF               	movlw	high STR_8
  5408  0009AA  6E14               	movwf	strcpy@from+1,c
  5409  0009AC  EC02  F011         	call	_strcpy	;wreg free
  5410                           
  5411                           ;Main_Screen.c: 62: drawtext(12, 140, txt, 0xFFFF , 0x0000, 1);
  5412  0009B0  0E8C               	movlw	140
  5413  0009B2  6E39               	movwf	drawtext@y,c
  5414  0009B4  C04E  F03A         	movff	_txt,drawtext@_text
  5415  0009B8  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  5416  0009BC  0EFF               	movlw	255
  5417  0009BE  6E3D               	movwf	drawtext@color+1,c
  5418  0009C0  683C               	setf	drawtext@color,c
  5419  0009C2  0E00               	movlw	0
  5420  0009C4  6E3F               	movwf	drawtext@bg+1,c
  5421  0009C6  0E00               	movlw	0
  5422  0009C8  6E3E               	movwf	drawtext@bg,c
  5423  0009CA  0E01               	movlw	1
  5424  0009CC  6E40               	movwf	drawtext@size,c
  5425  0009CE  0E0C               	movlw	12
  5426  0009D0  EC5C  F009         	call	_drawtext
  5427                           
  5428                           ;Main_Screen.c: 64: strcpy(txt, "RPM");
  5429  0009D4  C04E  F011         	movff	_txt,strcpy@to
  5430  0009D8  C04F  F012         	movff	_txt+1,strcpy@to+1
  5431  0009DC  0EF4               	movlw	low STR_9
  5432  0009DE  6E13               	movwf	strcpy@from,c
  5433  0009E0  0EFF               	movlw	high STR_9
  5434  0009E2  6E14               	movwf	strcpy@from+1,c
  5435  0009E4  EC02  F011         	call	_strcpy	;wreg free
  5436                           
  5437                           ;Main_Screen.c: 65: drawtext(95, 140, txt, 0xFFFF , 0x0000 , 1);
  5438  0009E8  0E8C               	movlw	140
  5439  0009EA  6E39               	movwf	drawtext@y,c
  5440  0009EC  C04E  F03A         	movff	_txt,drawtext@_text
  5441  0009F0  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  5442  0009F4  0EFF               	movlw	255
  5443  0009F6  6E3D               	movwf	drawtext@color+1,c
  5444  0009F8  683C               	setf	drawtext@color,c
  5445  0009FA  0E00               	movlw	0
  5446  0009FC  6E3F               	movwf	drawtext@bg+1,c
  5447  0009FE  0E00               	movlw	0
  5448  000A00  6E3E               	movwf	drawtext@bg,c
  5449  000A02  0E01               	movlw	1
  5450  000A04  6E40               	movwf	drawtext@size,c
  5451  000A06  0E5F               	movlw	95
  5452  000A08  EC5C  F009         	call	_drawtext
  5453  000A0C  0012               	return		;funcret
  5454  000A0E                     __end_of_Initialize_Screen:
  5455                           	opt stack 0
  5456                           tblptru	equ	0xFF8
  5457                           tblptrh	equ	0xFF7
  5458                           tblptrl	equ	0xFF6
  5459                           tablat	equ	0xFF5
  5460                           prodh	equ	0xFF4
  5461                           prodl	equ	0xFF3
  5462                           intcon	equ	0xFF2
  5463                           intcon2	equ	0xFF1
  5464                           postinc0	equ	0xFEE
  5465                           wreg	equ	0xFE8
  5466                           postdec1	equ	0xFE5
  5467                           fsr1l	equ	0xFE1
  5468                           postinc2	equ	0xFDE
  5469                           postdec2	equ	0xFDD
  5470                           fsr2h	equ	0xFDA
  5471                           fsr2l	equ	0xFD9
  5472                           status	equ	0xFD8
  5473                           
  5474 ;; *************** function _strcpy *****************
  5475 ;; Defined at:
  5476 ;;		line 8 in file "E:\XC8\sources\common\strcpy.c"
  5477 ;; Parameters:    Size  Location     Type
  5478 ;;  to              2   16[COMRAM] PTR unsigned char 
  5479 ;;		 -> NULL(0), Fan_SW_Txt(4), buffer(31), 
  5480 ;;  from            2   18[COMRAM] PTR const unsigned char 
  5481 ;;		 -> STR_11(4), STR_10(4), STR_9(4), STR_8(3), 
  5482 ;;		 -> STR_7(6), STR_6(5), STR_5(5), STR_4(2), 
  5483 ;;		 -> STR_3(3), STR_2(13), STR_1(22), 
  5484 ;; Auto vars:     Size  Location     Type
  5485 ;;  cp              2   20[COMRAM] PTR unsigned char 
  5486 ;;		 -> NULL(0), Fan_SW_Txt(4), buffer(31), 
  5487 ;; Return value:  Size  Location     Type
  5488 ;;                  2   16[COMRAM] PTR unsigned char 
  5489 ;; Registers used:
  5490 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  5491 ;; Tracked objects:
  5492 ;;		On entry : 0/0
  5493 ;;		On exit  : 0/0
  5494 ;;		Unchanged: 0/0
  5495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5496 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5497 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5498 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5499 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5500 ;;Total ram usage:        6 bytes
  5501 ;; Hardware stack levels used:    1
  5502 ;; Hardware stack levels required when called:    3
  5503 ;; This function calls:
  5504 ;;		Nothing
  5505 ;; This function is called by:
  5506 ;;		_Initialize_Screen
  5507 ;;		_Update_Screen
  5508 ;; This function uses a non-reentrant model
  5509 ;;
  5510                           
  5511                           	psect	text16
  5512  002204                     __ptext16:
  5513                           	opt stack 0
  5514  002204                     _strcpy:
  5515                           	opt stack 26
  5516                           
  5517                           ;incstack = 0
  5518  002204  C011  F015         	movff	strcpy@to,strcpy@cp
  5519  002208  C012  F016         	movff	strcpy@to+1,strcpy@cp+1
  5520  00220C  D005               	goto	l6076
  5521  00220E                     l6074:
  5522  00220E  4A15               	infsnz	strcpy@cp,f,c
  5523  002210  2A16               	incf	strcpy@cp+1,f,c
  5524  002212  4A13               	infsnz	strcpy@from,f,c
  5525  002214  2A14               	incf	strcpy@from+1,f,c
  5526  002216  D000               	goto	l6076
  5527  002218                     l6076:
  5528  002218  C013  FFF6         	movff	strcpy@from,tblptrl
  5529  00221C  C014  FFF7         	movff	strcpy@from+1,tblptrh
  5530  002220                     	if	0	;tblptru may be non-zero
  5531  002220                     	endif
  5532  002220                     	if	0	;tblptru may be non-zero
  5533  002220                     	endif
  5534  002220  C015  FFD9         	movff	strcpy@cp,fsr2l
  5535  002224  C016  FFDA         	movff	strcpy@cp+1,fsr2h
  5536  002228  0008               	tblrd		*
  5537  00222A  CFF5 FFDF          	movff	tablat,indf2
  5538  00222E  50DF               	movf	indf2,w,c
  5539  002230  A4D8               	btfss	status,2,c
  5540  002232  D7ED               	goto	l6074
  5541                           
  5542                           ;	Return value of _strcpy is never used
  5543  002234  0012               	return		;funcret
  5544  002236                     __end_of_strcpy:
  5545                           	opt stack 0
  5546                           tblptru	equ	0xFF8
  5547                           tblptrh	equ	0xFF7
  5548                           tblptrl	equ	0xFF6
  5549                           tablat	equ	0xFF5
  5550                           prodh	equ	0xFF4
  5551                           prodl	equ	0xFF3
  5552                           intcon	equ	0xFF2
  5553                           intcon2	equ	0xFF1
  5554                           postinc0	equ	0xFEE
  5555                           wreg	equ	0xFE8
  5556                           postdec1	equ	0xFE5
  5557                           fsr1l	equ	0xFE1
  5558                           indf2	equ	0xFDF
  5559                           postinc2	equ	0xFDE
  5560                           postdec2	equ	0xFDD
  5561                           fsr2h	equ	0xFDA
  5562                           fsr2l	equ	0xFD9
  5563                           status	equ	0xFD8
  5564                           
  5565 ;; *************** function _fillScreen *****************
  5566 ;; Defined at:
  5567 ;;		line 620 in file "ST7735_TFT.c"
  5568 ;; Parameters:    Size  Location     Type
  5569 ;;  color           2   35[COMRAM] unsigned int 
  5570 ;; Auto vars:     Size  Location     Type
  5571 ;;		None
  5572 ;; Return value:  Size  Location     Type
  5573 ;;		None               void
  5574 ;; Registers used:
  5575 ;;		wreg, status,2, status,0, cstack
  5576 ;; Tracked objects:
  5577 ;;		On entry : 0/0
  5578 ;;		On exit  : 0/0
  5579 ;;		Unchanged: 0/0
  5580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5581 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5582 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5583 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5584 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5585 ;;Total ram usage:        2 bytes
  5586 ;; Hardware stack levels used:    1
  5587 ;; Hardware stack levels required when called:    7
  5588 ;; This function calls:
  5589 ;;		_fillRectangle
  5590 ;; This function is called by:
  5591 ;;		_Initialize_Screen
  5592 ;; This function uses a non-reentrant model
  5593 ;;
  5594                           
  5595                           	psect	text17
  5596  0023D0                     __ptext17:
  5597                           	opt stack 0
  5598  0023D0                     _fillScreen:
  5599                           	opt stack 22
  5600                           
  5601                           ;ST7735_TFT.c: 622: fillRectangle(0, 0, 128, 160, color);
  5602                           
  5603                           ;incstack = 0
  5604  0023D0  0E00               	movlw	0
  5605  0023D2  6E18               	movwf	fillRectangle@y,c
  5606  0023D4  0E80               	movlw	128
  5607  0023D6  6E19               	movwf	fillRectangle@w,c
  5608  0023D8  0EA0               	movlw	160
  5609  0023DA  6E1A               	movwf	fillRectangle@h,c
  5610  0023DC  C024  F01B         	movff	fillScreen@color,fillRectangle@color
  5611  0023E0  C025  F01C         	movff	fillScreen@color+1,fillRectangle@color+1
  5612  0023E4  0E00               	movlw	0
  5613  0023E6  ECBA  F00B         	call	_fillRectangle
  5614  0023EA  0012               	return		;funcret
  5615  0023EC                     __end_of_fillScreen:
  5616                           	opt stack 0
  5617                           tblptru	equ	0xFF8
  5618                           tblptrh	equ	0xFF7
  5619                           tblptrl	equ	0xFF6
  5620                           tablat	equ	0xFF5
  5621                           prodh	equ	0xFF4
  5622                           prodl	equ	0xFF3
  5623                           intcon	equ	0xFF2
  5624                           intcon2	equ	0xFF1
  5625                           postinc0	equ	0xFEE
  5626                           wreg	equ	0xFE8
  5627                           postdec1	equ	0xFE5
  5628                           fsr1l	equ	0xFE1
  5629                           indf2	equ	0xFDF
  5630                           postinc2	equ	0xFDE
  5631                           postdec2	equ	0xFDD
  5632                           fsr2h	equ	0xFDA
  5633                           fsr2l	equ	0xFD9
  5634                           status	equ	0xFD8
  5635                           
  5636 ;; *************** function _fillRectangle *****************
  5637 ;; Defined at:
  5638 ;;		line 504 in file "ST7735_TFT.c"
  5639 ;; Parameters:    Size  Location     Type
  5640 ;;  x               1    wreg     unsigned char 
  5641 ;;  y               1   23[COMRAM] unsigned char 
  5642 ;;  w               1   24[COMRAM] unsigned char 
  5643 ;;  h               1   25[COMRAM] unsigned char 
  5644 ;;  color           2   26[COMRAM] unsigned int 
  5645 ;; Auto vars:     Size  Location     Type
  5646 ;;  x               1   34[COMRAM] unsigned char 
  5647 ;;  lo              1   33[COMRAM] unsigned char 
  5648 ;;  hi              1   32[COMRAM] unsigned char 
  5649 ;; Return value:  Size  Location     Type
  5650 ;;		None               void
  5651 ;; Registers used:
  5652 ;;		wreg, status,2, status,0, cstack
  5653 ;; Tracked objects:
  5654 ;;		On entry : 0/0
  5655 ;;		On exit  : 0/0
  5656 ;;		Unchanged: 0/0
  5657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5658 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5659 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5660 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5661 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5662 ;;Total ram usage:       12 bytes
  5663 ;; Hardware stack levels used:    1
  5664 ;; Hardware stack levels required when called:    6
  5665 ;; This function calls:
  5666 ;;		_setAddrWindow
  5667 ;;		_spiwrite
  5668 ;; This function is called by:
  5669 ;;		_fillScreen
  5670 ;; This function uses a non-reentrant model
  5671 ;;
  5672                           
  5673                           	psect	text18
  5674  001774                     __ptext18:
  5675                           	opt stack 0
  5676  001774                     _fillRectangle:
  5677                           	opt stack 22
  5678                           
  5679                           ;incstack = 0
  5680                           ;fillRectangle@x stored from wreg
  5681  001774  6E23               	movwf	fillRectangle@x,c
  5682                           
  5683                           ;ST7735_TFT.c: 506: unsigned char hi, lo;
  5684                           ;ST7735_TFT.c: 507: if((x >= 128) || (y >= 160))
  5685  001776  0E80               	movlw	128
  5686  001778  6023               	cpfslt	fillRectangle@x,c
  5687  00177A  D069               	goto	l402
  5688  00177C  0E9F               	movlw	159
  5689  00177E  6418               	cpfsgt	fillRectangle@y,c
  5690  001780  D001               	goto	l5786
  5691                           
  5692                           ;ST7735_TFT.c: 508: return;
  5693  001782  D065               	goto	l402
  5694  001784                     l5786:
  5695                           
  5696                           ;ST7735_TFT.c: 509: if((x + w - 1) >= 128)
  5697  001784  0EFF               	movlw	255
  5698  001786  6E1D               	movwf	??_fillRectangle& (0+255),c
  5699  001788  0EFF               	movlw	255
  5700  00178A  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  5701  00178C  5019               	movf	fillRectangle@w,w,c
  5702  00178E  C023  F01F         	movff	fillRectangle@x,??_fillRectangle+2
  5703  001792  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  5704  001794  261F               	addwf	??_fillRectangle+2,f,c
  5705  001796  0E00               	movlw	0
  5706  001798  2220               	addwfc	??_fillRectangle+3,f,c
  5707  00179A  501D               	movf	??_fillRectangle,w,c
  5708  00179C  261F               	addwf	??_fillRectangle+2,f,c
  5709  00179E  501E               	movf	??_fillRectangle+1,w,c
  5710  0017A0  2220               	addwfc	??_fillRectangle+3,f,c
  5711  0017A2  BE20               	btfsc	??_fillRectangle+3,7,c
  5712  0017A4  D00A               	goto	l403
  5713  0017A6  5020               	movf	??_fillRectangle+3,w,c
  5714  0017A8  E104               	bnz	u4630
  5715  0017AA  0E80               	movlw	128
  5716  0017AC  5C1F               	subwf	??_fillRectangle+2,w,c
  5717  0017AE  A0D8               	btfss	status,0,c
  5718  0017B0  D004               	goto	l403
  5719  0017B2                     u4630:
  5720                           
  5721                           ;ST7735_TFT.c: 510: w = 128 - x;
  5722  0017B2  5023               	movf	fillRectangle@x,w,c
  5723  0017B4  0800               	sublw	0
  5724  0017B6  0F80               	addlw	128
  5725  0017B8  6E19               	movwf	fillRectangle@w,c
  5726  0017BA                     l403:
  5727                           
  5728                           ;ST7735_TFT.c: 511: if((y + h - 1) >= 160)
  5729  0017BA  0EFF               	movlw	255
  5730  0017BC  6E1D               	movwf	??_fillRectangle& (0+255),c
  5731  0017BE  0EFF               	movlw	255
  5732  0017C0  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  5733  0017C2  501A               	movf	fillRectangle@h,w,c
  5734  0017C4  C018  F01F         	movff	fillRectangle@y,??_fillRectangle+2
  5735  0017C8  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  5736  0017CA  261F               	addwf	??_fillRectangle+2,f,c
  5737  0017CC  0E00               	movlw	0
  5738  0017CE  2220               	addwfc	??_fillRectangle+3,f,c
  5739  0017D0  501D               	movf	??_fillRectangle,w,c
  5740  0017D2  261F               	addwf	??_fillRectangle+2,f,c
  5741  0017D4  501E               	movf	??_fillRectangle+1,w,c
  5742  0017D6  2220               	addwfc	??_fillRectangle+3,f,c
  5743  0017D8  BE20               	btfsc	??_fillRectangle+3,7,c
  5744  0017DA  D00B               	goto	l5792
  5745  0017DC  5020               	movf	??_fillRectangle+3,w,c
  5746  0017DE  E104               	bnz	u4640
  5747  0017E0  0EA0               	movlw	160
  5748  0017E2  5C1F               	subwf	??_fillRectangle+2,w,c
  5749  0017E4  A0D8               	btfss	status,0,c
  5750  0017E6  D005               	goto	l5792
  5751  0017E8                     u4640:
  5752                           
  5753                           ;ST7735_TFT.c: 512: h = 160 - y;
  5754  0017E8  5018               	movf	fillRectangle@y,w,c
  5755  0017EA  0800               	sublw	0
  5756  0017EC  0FA0               	addlw	160
  5757  0017EE  6E1A               	movwf	fillRectangle@h,c
  5758  0017F0  D000               	goto	l5792
  5759  0017F2                     l5792:
  5760                           
  5761                           ;ST7735_TFT.c: 513: setAddrWindow(x, y, x+w-1, y+h-1);
  5762  0017F2  C018  F014         	movff	fillRectangle@y,setAddrWindow@y0
  5763  0017F6  5023               	movf	fillRectangle@x,w,c
  5764  0017F8  2419               	addwf	fillRectangle@w,w,c
  5765  0017FA  6E1D               	movwf	??_fillRectangle& (0+255),c
  5766  0017FC  041D               	decf	??_fillRectangle,w,c
  5767  0017FE  6E15               	movwf	setAddrWindow@x1,c
  5768  001800  5018               	movf	fillRectangle@y,w,c
  5769  001802  241A               	addwf	fillRectangle@h,w,c
  5770  001804  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  5771  001806  041E               	decf	??_fillRectangle+1,w,c
  5772  001808  6E16               	movwf	setAddrWindow@y1,c
  5773  00180A  5023               	movf	fillRectangle@x,w,c
  5774  00180C  EC94  F00F         	call	_setAddrWindow
  5775                           
  5776                           ;ST7735_TFT.c: 514: hi = color >> 8; lo = color;
  5777  001810  501C               	movf	fillRectangle@color+1,w,c
  5778  001812  6E21               	movwf	fillRectangle@hi,c
  5779  001814  C01B  F022         	movff	fillRectangle@color,fillRectangle@lo
  5780                           
  5781                           ;ST7735_TFT.c: 515: PORTDbits.RD0 = 1;
  5782  001818  8083               	bsf	3971,0,c	;volatile
  5783                           
  5784                           ;ST7735_TFT.c: 516: PORTDbits.RD1 = 0;
  5785  00181A  9283               	bcf	3971,1,c	;volatile
  5786                           
  5787                           ;ST7735_TFT.c: 518: for(y=h; y>0; y--) {
  5788  00181C  C01A  F018         	movff	fillRectangle@h,fillRectangle@y
  5789  001820                     l5804:
  5790  001820  5018               	movf	fillRectangle@y,w,c
  5791  001822  B4D8               	btfsc	status,2,c
  5792  001824  D013               	goto	l406
  5793  001826  D001               	goto	l405
  5794  001828  D011               	goto	l406
  5795  00182A                     l405:
  5796                           
  5797                           ;ST7735_TFT.c: 519: for(x = w; x > 0; x--) {
  5798  00182A  C019  F023         	movff	fillRectangle@w,fillRectangle@x
  5799  00182E                     l5808:
  5800  00182E  5023               	movf	fillRectangle@x,w,c
  5801  001830  B4D8               	btfsc	status,2,c
  5802  001832  D00A               	goto	l5818
  5803  001834  D001               	goto	l5812
  5804  001836  D008               	goto	l5818
  5805  001838                     l5812:
  5806                           
  5807                           ;ST7735_TFT.c: 520: spiwrite(hi);
  5808  001838  5021               	movf	fillRectangle@hi,w,c
  5809  00183A  EC24  F012         	call	_spiwrite
  5810                           
  5811                           ;ST7735_TFT.c: 521: spiwrite(lo);
  5812  00183E  5022               	movf	fillRectangle@lo,w,c
  5813  001840  EC24  F012         	call	_spiwrite
  5814  001844  0623               	decf	fillRectangle@x,f,c
  5815  001846  D7F3               	goto	l5808
  5816  001848                     l5818:
  5817  001848  0618               	decf	fillRectangle@y,f,c
  5818  00184A  D7EA               	goto	l5804
  5819  00184C                     l406:
  5820                           
  5821                           ;ST7735_TFT.c: 522: }
  5822                           ;ST7735_TFT.c: 523: }
  5823                           ;ST7735_TFT.c: 524: PORTDbits.RD1 = 1;
  5824  00184C  8283               	bsf	3971,1,c	;volatile
  5825  00184E                     l402:
  5826  00184E  0012               	return		;funcret
  5827  001850                     __end_of_fillRectangle:
  5828                           	opt stack 0
  5829                           tblptru	equ	0xFF8
  5830                           tblptrh	equ	0xFF7
  5831                           tblptrl	equ	0xFF6
  5832                           tablat	equ	0xFF5
  5833                           prodh	equ	0xFF4
  5834                           prodl	equ	0xFF3
  5835                           intcon	equ	0xFF2
  5836                           intcon2	equ	0xFF1
  5837                           postinc0	equ	0xFEE
  5838                           wreg	equ	0xFE8
  5839                           postdec1	equ	0xFE5
  5840                           fsr1l	equ	0xFE1
  5841                           indf2	equ	0xFDF
  5842                           postinc2	equ	0xFDE
  5843                           postdec2	equ	0xFDD
  5844                           fsr2h	equ	0xFDA
  5845                           fsr2l	equ	0xFD9
  5846                           status	equ	0xFD8
  5847                           
  5848 ;; *************** function _drawtext *****************
  5849 ;; Defined at:
  5850 ;;		line 475 in file "ST7735_TFT.c"
  5851 ;; Parameters:    Size  Location     Type
  5852 ;;  x               1    wreg     unsigned char 
  5853 ;;  y               1   56[COMRAM] unsigned char 
  5854 ;;  _text           2   57[COMRAM] PTR unsigned char 
  5855 ;;		 -> NULL(0), RPM_Txt(5), DC_Txt(4), Fan_SW_Txt(4), 
  5856 ;;		 -> date(9), time(9), tempF(4), tempC(4), 
  5857 ;;		 -> buffer(31), 
  5858 ;;  color           2   59[COMRAM] unsigned int 
  5859 ;;  bg              2   61[COMRAM] unsigned int 
  5860 ;;  size            1   63[COMRAM] unsigned char 
  5861 ;; Auto vars:     Size  Location     Type
  5862 ;;  x               1    0[BANK0 ] unsigned char 
  5863 ;;  i               2    3[BANK0 ] unsigned int 
  5864 ;;  textsize        2    1[BANK0 ] unsigned int 
  5865 ;;  cursor_x        1    6[BANK0 ] unsigned char 
  5866 ;;  cursor_y        1    5[BANK0 ] unsigned char 
  5867 ;; Return value:  Size  Location     Type
  5868 ;;		None               void
  5869 ;; Registers used:
  5870 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5871 ;; Tracked objects:
  5872 ;;		On entry : 0/0
  5873 ;;		On exit  : 0/0
  5874 ;;		Unchanged: 0/0
  5875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5876 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5877 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5878 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5879 ;;      Totals:        10       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5880 ;;Total ram usage:       17 bytes
  5881 ;; Hardware stack levels used:    1
  5882 ;; Hardware stack levels required when called:    9
  5883 ;; This function calls:
  5884 ;;		_drawChar
  5885 ;;		_strlen
  5886 ;; This function is called by:
  5887 ;;		_Initialize_Screen
  5888 ;;		_Update_Screen
  5889 ;; This function uses a non-reentrant model
  5890 ;;
  5891                           
  5892                           	psect	text19
  5893  0012B8                     __ptext19:
  5894                           	opt stack 0
  5895  0012B8                     _drawtext:
  5896                           	opt stack 20
  5897                           
  5898                           ;incstack = 0
  5899                           ;drawtext@x stored from wreg
  5900  0012B8  0100               	movlb	0	; () banked
  5901  0012BA  6FF7               	movwf	drawtext@x& (0+255),b
  5902                           
  5903                           ; BSR set to: 0
  5904                           ;ST7735_TFT.c: 477: unsigned char cursor_x, cursor_y;
  5905                           ;ST7735_TFT.c: 478: unsigned int textsize, i;
  5906                           ;ST7735_TFT.c: 479: cursor_x = x, cursor_y = y;
  5907  0012BC  C0F7  F0FD         	movff	drawtext@x,drawtext@cursor_x
  5908                           
  5909                           ; BSR set to: 0
  5910  0012C0  C039  F0FC         	movff	drawtext@y,drawtext@cursor_y
  5911                           
  5912                           ; BSR set to: 0
  5913                           ;ST7735_TFT.c: 480: textsize = strlen(_text);
  5914  0012C4  C03A  F011         	movff	drawtext@_text,strlen@s
  5915  0012C8  C03B  F012         	movff	drawtext@_text+1,strlen@s+1
  5916  0012CC  EC6D  F010         	call	_strlen	;wreg free
  5917  0012D0  C011  F0F8         	movff	?_strlen,drawtext@textsize
  5918  0012D4  C012  F0F9         	movff	?_strlen+1,drawtext@textsize+1
  5919                           
  5920                           ;ST7735_TFT.c: 481: for(i = 0; i < textsize; i++){
  5921  0012D8  0E00               	movlw	0
  5922  0012DA  0100               	movlb	0	; () banked
  5923  0012DC  6FFB               	movwf	(drawtext@i+1)& (0+255),b
  5924  0012DE  0E00               	movlw	0
  5925  0012E0  6FFA               	movwf	drawtext@i& (0+255),b
  5926  0012E2  D064               	goto	l6004
  5927  0012E4                     l5978:
  5928                           
  5929                           ; BSR set to: 0
  5930                           ;ST7735_TFT.c: 482: if(wrap && ((cursor_x + size * 5) > 128)){
  5931  0012E4  506F               	movf	_wrap,w,c
  5932  0012E6  B4D8               	btfsc	status,2,c
  5933  0012E8  D034               	goto	l5994
  5934                           
  5935                           ; BSR set to: 0
  5936  0012EA  5040               	movf	drawtext@size,w,c
  5937  0012EC  0D05               	mullw	5
  5938  0012EE  0100               	movlb	0	; () banked
  5939  0012F0  51FD               	movf	drawtext@cursor_x& (0+255),w,b
  5940  0012F2  6E41               	movwf	??_drawtext& (0+255),c
  5941  0012F4  6A42               	clrf	(??_drawtext+1)& (0+255),c
  5942  0012F6  50F3               	movf	prodl,w,c
  5943  0012F8  2641               	addwf	??_drawtext,f,c
  5944  0012FA  50F4               	movf	prodh,w,c
  5945  0012FC  2242               	addwfc	??_drawtext+1,f,c
  5946  0012FE  BE42               	btfsc	??_drawtext+1,7,c
  5947  001300  D028               	goto	l5994
  5948  001302  5042               	movf	??_drawtext+1,w,c
  5949  001304  E104               	bnz	u4870
  5950  001306  0E81               	movlw	129
  5951  001308  5C41               	subwf	??_drawtext,w,c
  5952  00130A  A0D8               	btfss	status,0,c
  5953  00130C  D022               	goto	l5994
  5954  00130E                     u4870:
  5955                           
  5956                           ; BSR set to: 0
  5957                           ;ST7735_TFT.c: 483: cursor_x = 0;
  5958  00130E  0E00               	movlw	0
  5959  001310  0100               	movlb	0	; () banked
  5960  001312  6FFD               	movwf	drawtext@cursor_x& (0+255),b
  5961                           
  5962                           ; BSR set to: 0
  5963                           ;ST7735_TFT.c: 484: cursor_y = cursor_y + size * 7 + 3 ;
  5964  001314  5040               	movf	drawtext@size,w,c
  5965  001316  0D07               	mullw	7
  5966  001318  50F3               	movf	prodl,w,c
  5967  00131A  0100               	movlb	0	; () banked
  5968  00131C  25FC               	addwf	drawtext@cursor_y& (0+255),w,b
  5969  00131E  0F03               	addlw	3
  5970  001320  0100               	movlb	0	; () banked
  5971  001322  6FFC               	movwf	drawtext@cursor_y& (0+255),b
  5972                           
  5973                           ; BSR set to: 0
  5974                           ;ST7735_TFT.c: 485: if(cursor_y > 160) cursor_y = 160;
  5975  001324  0EA0               	movlw	160
  5976  001326  0100               	movlb	0	; () banked
  5977  001328  65FC               	cpfsgt	drawtext@cursor_y& (0+255),b
  5978  00132A  D004               	goto	l5990
  5979                           
  5980                           ; BSR set to: 0
  5981  00132C  0EA0               	movlw	160
  5982  00132E  0100               	movlb	0	; () banked
  5983  001330  6FFC               	movwf	drawtext@cursor_y& (0+255),b
  5984  001332  D000               	goto	l5990
  5985  001334                     l5990:
  5986                           
  5987                           ; BSR set to: 0
  5988                           ;ST7735_TFT.c: 486: if(_text[i] == 0x20) goto _skip; }
  5989  001334  0100               	movlb	0	; () banked
  5990  001336  51FA               	movf	drawtext@i& (0+255),w,b
  5991  001338  243A               	addwf	drawtext@_text,w,c
  5992  00133A  6ED9               	movwf	fsr2l,c
  5993  00133C  0100               	movlb	0	; () banked
  5994  00133E  51FB               	movf	(drawtext@i+1)& (0+255),w,b
  5995  001340  203B               	addwfc	drawtext@_text+1,w,c
  5996  001342  6EDA               	movwf	fsr2h,c
  5997  001344  0E20               	movlw	32
  5998  001346  18DE               	xorwf	postinc2,w,c
  5999  001348  B4D8               	btfsc	status,2,c
  6000  00134A  D02C               	goto	l6002
  6001  00134C  D002               	goto	l5994
  6002                           
  6003                           ; BSR set to: 0
  6004  00134E  D02A               	goto	l6002
  6005                           
  6006                           ; BSR set to: 0
  6007  001350  D000               	goto	l5994
  6008  001352                     l5994:
  6009                           
  6010                           ; BSR set to: 0
  6011                           ;ST7735_TFT.c: 487: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
  6012  001352  C0FC  F02E         	movff	drawtext@cursor_y,drawChar@y
  6013  001356  0100               	movlb	0	; () banked
  6014  001358  51FA               	movf	drawtext@i& (0+255),w,b
  6015  00135A  243A               	addwf	drawtext@_text,w,c
  6016  00135C  6ED9               	movwf	fsr2l,c
  6017  00135E  0100               	movlb	0	; () banked
  6018  001360  51FB               	movf	(drawtext@i+1)& (0+255),w,b
  6019  001362  203B               	addwfc	drawtext@_text+1,w,c
  6020  001364  6EDA               	movwf	fsr2h,c
  6021  001366  50DF               	movf	indf2,w,c
  6022  001368  6E2F               	movwf	drawChar@c,c
  6023  00136A  C03C  F030         	movff	drawtext@color,drawChar@color
  6024  00136E  C03D  F031         	movff	drawtext@color+1,drawChar@color+1
  6025  001372  C03E  F032         	movff	drawtext@bg,drawChar@bg
  6026  001376  C03F  F033         	movff	drawtext@bg+1,drawChar@bg+1
  6027  00137A  C040  F034         	movff	drawtext@size,drawChar@size
  6028  00137E  0100               	movlb	0	; () banked
  6029  001380  51FD               	movf	drawtext@cursor_x& (0+255),w,b
  6030  001382  EC9D  F007         	call	_drawChar
  6031                           
  6032                           ;ST7735_TFT.c: 488: cursor_x = cursor_x + size * 6;
  6033  001386  5040               	movf	drawtext@size,w,c
  6034  001388  0D06               	mullw	6
  6035  00138A  50F3               	movf	prodl,w,c
  6036  00138C  0100               	movlb	0	; () banked
  6037  00138E  25FD               	addwf	drawtext@cursor_x& (0+255),w,b
  6038  001390  0100               	movlb	0	; () banked
  6039  001392  6FFD               	movwf	drawtext@cursor_x& (0+255),b
  6040                           
  6041                           ; BSR set to: 0
  6042                           ;ST7735_TFT.c: 489: if(cursor_x > 128) cursor_x = 128;
  6043  001394  0E80               	movlw	128
  6044  001396  0100               	movlb	0	; () banked
  6045  001398  65FD               	cpfsgt	drawtext@cursor_x& (0+255),b
  6046  00139A  D004               	goto	l6002
  6047                           
  6048                           ; BSR set to: 0
  6049  00139C  0E80               	movlw	128
  6050  00139E  0100               	movlb	0	; () banked
  6051  0013A0  6FFD               	movwf	drawtext@cursor_x& (0+255),b
  6052                           
  6053                           ; BSR set to: 0
  6054  0013A2  D000               	goto	l6002
  6055  0013A4                     l6002:
  6056                           
  6057                           ; BSR set to: 0
  6058  0013A4  0100               	movlb	0	; () banked
  6059  0013A6  4BFA               	infsnz	drawtext@i& (0+255),f,b
  6060  0013A8  2BFB               	incf	(drawtext@i+1)& (0+255),f,b
  6061  0013AA  D000               	goto	l6004
  6062  0013AC                     l6004:
  6063                           
  6064                           ; BSR set to: 0
  6065  0013AC  0100               	movlb	0	; () banked
  6066  0013AE  51F8               	movf	drawtext@textsize& (0+255),w,b
  6067  0013B0  0100               	movlb	0	; () banked
  6068  0013B2  5DFA               	subwf	drawtext@i& (0+255),w,b
  6069  0013B4  0100               	movlb	0	; () banked
  6070  0013B6  51F9               	movf	(drawtext@textsize+1)& (0+255),w,b
  6071  0013B8  0100               	movlb	0	; () banked
  6072  0013BA  59FB               	subwfb	(drawtext@i+1)& (0+255),w,b
  6073  0013BC  A0D8               	btfss	status,0,c
  6074  0013BE  D792               	goto	l5978
  6075                           
  6076                           ; BSR set to: 0
  6077                           
  6078                           ; BSR set to: 0
  6079  0013C0  0012               	return		;funcret
  6080  0013C2                     __end_of_drawtext:
  6081                           	opt stack 0
  6082                           tblptru	equ	0xFF8
  6083                           tblptrh	equ	0xFF7
  6084                           tblptrl	equ	0xFF6
  6085                           tablat	equ	0xFF5
  6086                           prodh	equ	0xFF4
  6087                           prodl	equ	0xFF3
  6088                           intcon	equ	0xFF2
  6089                           intcon2	equ	0xFF1
  6090                           postinc0	equ	0xFEE
  6091                           wreg	equ	0xFE8
  6092                           postdec1	equ	0xFE5
  6093                           fsr1l	equ	0xFE1
  6094                           indf2	equ	0xFDF
  6095                           postinc2	equ	0xFDE
  6096                           postdec2	equ	0xFDD
  6097                           fsr2h	equ	0xFDA
  6098                           fsr2l	equ	0xFD9
  6099                           status	equ	0xFD8
  6100                           
  6101 ;; *************** function _strlen *****************
  6102 ;; Defined at:
  6103 ;;		line 4 in file "E:\XC8\sources\common\strlen.c"
  6104 ;; Parameters:    Size  Location     Type
  6105 ;;  s               2   16[COMRAM] PTR const unsigned char 
  6106 ;;		 -> NULL(0), RPM_Txt(5), DC_Txt(4), Fan_SW_Txt(4), 
  6107 ;;		 -> date(9), time(9), tempF(4), tempC(4), 
  6108 ;;		 -> buffer(31), 
  6109 ;; Auto vars:     Size  Location     Type
  6110 ;;  cp              2   20[COMRAM] PTR const unsigned char 
  6111 ;;		 -> NULL(0), RPM_Txt(5), DC_Txt(4), Fan_SW_Txt(4), 
  6112 ;;		 -> date(9), time(9), tempF(4), tempC(4), 
  6113 ;;		 -> buffer(31), 
  6114 ;; Return value:  Size  Location     Type
  6115 ;;                  2   16[COMRAM] unsigned int 
  6116 ;; Registers used:
  6117 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6118 ;; Tracked objects:
  6119 ;;		On entry : 0/0
  6120 ;;		On exit  : 0/0
  6121 ;;		Unchanged: 0/0
  6122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6123 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6124 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6125 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6126 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6127 ;;Total ram usage:        6 bytes
  6128 ;; Hardware stack levels used:    1
  6129 ;; Hardware stack levels required when called:    3
  6130 ;; This function calls:
  6131 ;;		Nothing
  6132 ;; This function is called by:
  6133 ;;		_drawtext
  6134 ;; This function uses a non-reentrant model
  6135 ;;
  6136                           
  6137                           	psect	text20
  6138  0020DA                     __ptext20:
  6139                           	opt stack 0
  6140  0020DA                     _strlen:
  6141                           	opt stack 25
  6142                           
  6143                           ; BSR set to: 0
  6144                           ;incstack = 0
  6145  0020DA  C011  F015         	movff	strlen@s,strlen@cp
  6146  0020DE  C012  F016         	movff	strlen@s+1,strlen@cp+1
  6147  0020E2  D003               	goto	l5776
  6148  0020E4                     l5774:
  6149  0020E4  4A15               	infsnz	strlen@cp,f,c
  6150  0020E6  2A16               	incf	strlen@cp+1,f,c
  6151  0020E8  D000               	goto	l5776
  6152  0020EA                     l5776:
  6153  0020EA  C015  FFD9         	movff	strlen@cp,fsr2l
  6154  0020EE  C016  FFDA         	movff	strlen@cp+1,fsr2h
  6155  0020F2  50DF               	movf	indf2,w,c
  6156  0020F4  A4D8               	btfss	status,2,c
  6157  0020F6  D7F6               	goto	l5774
  6158  0020F8  C011  F013         	movff	strlen@s,??_strlen
  6159  0020FC  C012  F014         	movff	strlen@s+1,??_strlen+1
  6160  002100  1E13               	comf	??_strlen,f,c
  6161  002102  1E14               	comf	??_strlen+1,f,c
  6162  002104  4A13               	infsnz	??_strlen,f,c
  6163  002106  2A14               	incf	??_strlen+1,f,c
  6164  002108  5015               	movf	strlen@cp,w,c
  6165  00210A  2413               	addwf	??_strlen,w,c
  6166  00210C  6E11               	movwf	?_strlen,c
  6167  00210E  5016               	movf	strlen@cp+1,w,c
  6168  002110  2014               	addwfc	??_strlen+1,w,c
  6169  002112  6E12               	movwf	?_strlen+1,c
  6170  002114  D000               	goto	l1344
  6171  002116                     l1344:
  6172  002116  0012               	return		;funcret
  6173  002118                     __end_of_strlen:
  6174                           	opt stack 0
  6175                           tblptru	equ	0xFF8
  6176                           tblptrh	equ	0xFF7
  6177                           tblptrl	equ	0xFF6
  6178                           tablat	equ	0xFF5
  6179                           prodh	equ	0xFF4
  6180                           prodl	equ	0xFF3
  6181                           intcon	equ	0xFF2
  6182                           intcon2	equ	0xFF1
  6183                           postinc0	equ	0xFEE
  6184                           wreg	equ	0xFE8
  6185                           postdec1	equ	0xFE5
  6186                           fsr1l	equ	0xFE1
  6187                           indf2	equ	0xFDF
  6188                           postinc2	equ	0xFDE
  6189                           postdec2	equ	0xFDD
  6190                           fsr2h	equ	0xFDA
  6191                           fsr2l	equ	0xFD9
  6192                           status	equ	0xFD8
  6193                           
  6194 ;; *************** function _drawChar *****************
  6195 ;; Defined at:
  6196 ;;		line 448 in file "ST7735_TFT.c"
  6197 ;; Parameters:    Size  Location     Type
  6198 ;;  x               1    wreg     unsigned char 
  6199 ;;  y               1   45[COMRAM] unsigned char 
  6200 ;;  c               1   46[COMRAM] unsigned char 
  6201 ;;  color           2   47[COMRAM] unsigned int 
  6202 ;;  bg              2   49[COMRAM] unsigned int 
  6203 ;;  size            1   51[COMRAM] unsigned char 
  6204 ;; Auto vars:     Size  Location     Type
  6205 ;;  x               1   53[COMRAM] unsigned char 
  6206 ;;  line            1   52[COMRAM] unsigned char 
  6207 ;;  i               1   55[COMRAM] unsigned char 
  6208 ;;  j               1   54[COMRAM] unsigned char 
  6209 ;; Return value:  Size  Location     Type
  6210 ;;		None               void
  6211 ;; Registers used:
  6212 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6213 ;; Tracked objects:
  6214 ;;		On entry : 0/0
  6215 ;;		On exit  : 0/0
  6216 ;;		Unchanged: 0/0
  6217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6218 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6219 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6220 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6221 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6222 ;;Total ram usage:       11 bytes
  6223 ;; Hardware stack levels used:    1
  6224 ;; Hardware stack levels required when called:    8
  6225 ;; This function calls:
  6226 ;;		___wmul
  6227 ;;		_drawPixel
  6228 ;;		_fillRect
  6229 ;; This function is called by:
  6230 ;;		_drawtext
  6231 ;; This function uses a non-reentrant model
  6232 ;;
  6233                           
  6234                           	psect	text21
  6235  000F3A                     __ptext21:
  6236                           	opt stack 0
  6237  000F3A                     _drawChar:
  6238                           	opt stack 20
  6239                           
  6240                           ;incstack = 0
  6241                           ;drawChar@x stored from wreg
  6242  000F3A  6E36               	movwf	drawChar@x,c
  6243                           
  6244                           ;ST7735_TFT.c: 450: char i, j;
  6245                           ;ST7735_TFT.c: 451: if((x >= 128) || (y >= 160))
  6246  000F3C  0E80               	movlw	128
  6247  000F3E  6036               	cpfslt	drawChar@x,c
  6248  000F40  D0A6               	goto	l365
  6249  000F42  0E9F               	movlw	159
  6250  000F44  642E               	cpfsgt	drawChar@y,c
  6251  000F46  D001               	goto	l5722
  6252                           
  6253                           ;ST7735_TFT.c: 452: return;
  6254  000F48  D0A2               	goto	l365
  6255  000F4A                     l5722:
  6256                           
  6257                           ;ST7735_TFT.c: 453: if(size < 1) size = 1;
  6258  000F4A  5034               	movf	drawChar@size,w,c
  6259  000F4C  A4D8               	btfss	status,2,c
  6260  000F4E  D003               	goto	l5726
  6261  000F50  0E01               	movlw	1
  6262  000F52  6E34               	movwf	drawChar@size,c
  6263  000F54  D000               	goto	l5726
  6264  000F56                     l5726:
  6265                           
  6266                           ;ST7735_TFT.c: 454: if((c < ' ') || (c > '~'))
  6267  000F56  0E1F               	movlw	31
  6268  000F58  642F               	cpfsgt	drawChar@c,c
  6269  000F5A  D004               	goto	l5730
  6270  000F5C  0E7E               	movlw	126
  6271  000F5E  642F               	cpfsgt	drawChar@c,c
  6272  000F60  D003               	goto	l367
  6273  000F62  D000               	goto	l5730
  6274  000F64                     l5730:
  6275                           
  6276                           ;ST7735_TFT.c: 455: c = '?';
  6277  000F64  0E3F               	movlw	63
  6278  000F66  6E2F               	movwf	drawChar@c,c
  6279  000F68                     l367:
  6280                           
  6281                           ;ST7735_TFT.c: 456: for(i=0; i<5; i++ ) {
  6282  000F68  0E00               	movlw	0
  6283  000F6A  6E38               	movwf	drawChar@i,c
  6284  000F6C                     l5732:
  6285  000F6C  0E04               	movlw	4
  6286  000F6E  6438               	cpfsgt	drawChar@i,c
  6287  000F70  D001               	goto	l5736
  6288  000F72  D08D               	goto	l365
  6289  000F74                     l5736:
  6290                           
  6291                           ;ST7735_TFT.c: 457: unsigned char line;
  6292                           ;ST7735_TFT.c: 458: if(c < 'S')
  6293  000F74  0E53               	movlw	83
  6294  000F76  602F               	cpfslt	drawChar@c,c
  6295  000F78  D015               	goto	l5740
  6296                           
  6297                           ;ST7735_TFT.c: 459: line = font[(c - 32)*5 + i];
  6298  000F7A  0EE0               	movlw	224
  6299  000F7C  242F               	addwf	drawChar@c,w,c
  6300  000F7E  6E11               	movwf	___wmul@multiplier,c
  6301  000F80  6A12               	clrf	___wmul@multiplier+1,c
  6302  000F82  0EFF               	movlw	255
  6303  000F84  2212               	addwfc	___wmul@multiplier+1,f,c
  6304  000F86  0E00               	movlw	0
  6305  000F88  6E14               	movwf	___wmul@multiplicand+1,c
  6306  000F8A  0E05               	movlw	5
  6307  000F8C  6E13               	movwf	___wmul@multiplicand,c
  6308  000F8E  EC48  F011         	call	___wmul	;wreg free
  6309  000F92  5038               	movf	drawChar@i,w,c
  6310  000F94  2611               	addwf	?___wmul,f,c
  6311  000F96  0E00               	movlw	0
  6312  000F98  2212               	addwfc	?___wmul+1,f,c
  6313  000F9A  0E27               	movlw	low _font
  6314  000F9C  2411               	addwf	?___wmul,w,c
  6315  000F9E  6EF6               	movwf	tblptrl,c
  6316  000FA0  0EFD               	movlw	high _font
  6317  000FA2  D014               	goto	L11
  6318  000FA4                     l5740:
  6319                           
  6320                           ;ST7735_TFT.c: 460: else
  6321                           ;ST7735_TFT.c: 461: line = font2[(c - 'S')*5 + i];
  6322  000FA4  0EAD               	movlw	173
  6323  000FA6  242F               	addwf	drawChar@c,w,c
  6324  000FA8  6E11               	movwf	___wmul@multiplier,c
  6325  000FAA  6A12               	clrf	___wmul@multiplier+1,c
  6326  000FAC  0EFF               	movlw	255
  6327  000FAE  2212               	addwfc	___wmul@multiplier+1,f,c
  6328  000FB0  0E00               	movlw	0
  6329  000FB2  6E14               	movwf	___wmul@multiplicand+1,c
  6330  000FB4  0E05               	movlw	5
  6331  000FB6  6E13               	movwf	___wmul@multiplicand,c
  6332  000FB8  EC48  F011         	call	___wmul	;wreg free
  6333  000FBC  5038               	movf	drawChar@i,w,c
  6334  000FBE  2611               	addwf	?___wmul,f,c
  6335  000FC0  0E00               	movlw	0
  6336  000FC2  2212               	addwfc	?___wmul+1,f,c
  6337  000FC4  0E26               	movlw	low _font2
  6338  000FC6  2411               	addwf	?___wmul,w,c
  6339  000FC8  6EF6               	movwf	tblptrl,c
  6340  000FCA  0EFE               	movlw	high _font2
  6341  000FCC                     L11:
  6342  000FCC  2012               	addwfc	?___wmul+1,w,c
  6343  000FCE  6EF7               	movwf	tblptrh,c
  6344  000FD0                     	if	0	;There are less than 3 active tblptr bytes
  6345  000FD0                     	endif
  6346  000FD0  0008               	tblrd		*
  6347  000FD2  CFF5 F035          	movff	tablat,drawChar@line
  6348  000FD6  D000               	goto	l5742
  6349  000FD8                     l5742:
  6350                           
  6351                           ;ST7735_TFT.c: 462: for(j=0; j<7; j++, line >>= 1) {
  6352  000FD8  0E00               	movlw	0
  6353  000FDA  6E37               	movwf	drawChar@j,c
  6354  000FDC                     l5744:
  6355  000FDC  0E06               	movlw	6
  6356  000FDE  6437               	cpfsgt	drawChar@j,c
  6357  000FE0  D001               	goto	l374
  6358  000FE2  D053               	goto	l5768
  6359  000FE4                     l374:
  6360                           
  6361                           ;ST7735_TFT.c: 463: if(line & 0x01) {
  6362  000FE4  A035               	btfss	drawChar@line,0,c
  6363  000FE6  D023               	goto	l5754
  6364                           
  6365                           ;ST7735_TFT.c: 464: if(size == 1) drawPixel(x+i, y+j, color);
  6366  000FE8  0434               	decf	drawChar@size,w,c
  6367  000FEA  A4D8               	btfss	status,2,c
  6368  000FEC  D00C               	goto	l5752
  6369  000FEE  502E               	movf	drawChar@y,w,c
  6370  000FF0  2437               	addwf	drawChar@j,w,c
  6371  000FF2  6E18               	movwf	drawPixel@y,c
  6372  000FF4  C030  F019         	movff	drawChar@color,drawPixel@color
  6373  000FF8  C031  F01A         	movff	drawChar@color+1,drawPixel@color+1
  6374  000FFC  5036               	movf	drawChar@x,w,c
  6375  000FFE  2438               	addwf	drawChar@i,w,c
  6376  001000  EC1B  F011         	call	_drawPixel
  6377  001004  D03E               	goto	l5762
  6378  001006                     l5752:
  6379                           
  6380                           ;ST7735_TFT.c: 465: else fillRect(x+(i*size), y+(j*size), size, size, color);
  6381  001006  5037               	movf	drawChar@j,w,c
  6382  001008  0234               	mulwf	drawChar@size,c
  6383  00100A  50F3               	movf	prodl,w,c
  6384  00100C  242E               	addwf	drawChar@y,w,c
  6385  00100E  6E23               	movwf	fillRect@y,c
  6386  001010  C034  F024         	movff	drawChar@size,fillRect@w
  6387  001014  C034  F025         	movff	drawChar@size,fillRect@h
  6388  001018  C030  F026         	movff	drawChar@color,fillRect@color
  6389  00101C  C031  F027         	movff	drawChar@color+1,fillRect@color+1
  6390  001020  5038               	movf	drawChar@i,w,c
  6391  001022  0234               	mulwf	drawChar@size,c
  6392  001024  50F3               	movf	prodl,w,c
  6393  001026  2436               	addwf	drawChar@x,w,c
  6394  001028  ECE1  F00F         	call	_fillRect
  6395                           
  6396                           ;ST7735_TFT.c: 466: }
  6397  00102C  D02A               	goto	l5762
  6398  00102E                     l5754:
  6399                           
  6400                           ;ST7735_TFT.c: 467: else if(bg != color) {
  6401  00102E  5030               	movf	drawChar@color,w,c
  6402  001030  1832               	xorwf	drawChar@bg,w,c
  6403  001032  E104               	bnz	u4560
  6404  001034  5031               	movf	drawChar@color+1,w,c
  6405  001036  1833               	xorwf	drawChar@bg+1,w,c
  6406  001038  B4D8               	btfsc	status,2,c
  6407  00103A  D023               	goto	l5762
  6408  00103C                     u4560:
  6409                           
  6410                           ;ST7735_TFT.c: 468: if(size == 1) drawPixel(x+i, y+j, bg);
  6411  00103C  0434               	decf	drawChar@size,w,c
  6412  00103E  A4D8               	btfss	status,2,c
  6413  001040  D00C               	goto	l5760
  6414  001042  502E               	movf	drawChar@y,w,c
  6415  001044  2437               	addwf	drawChar@j,w,c
  6416  001046  6E18               	movwf	drawPixel@y,c
  6417  001048  C032  F019         	movff	drawChar@bg,drawPixel@color
  6418  00104C  C033  F01A         	movff	drawChar@bg+1,drawPixel@color+1
  6419  001050  5036               	movf	drawChar@x,w,c
  6420  001052  2438               	addwf	drawChar@i,w,c
  6421  001054  EC1B  F011         	call	_drawPixel
  6422  001058  D014               	goto	l5762
  6423  00105A                     l5760:
  6424                           
  6425                           ;ST7735_TFT.c: 469: else fillRect(x+i*size, y+j*size, size, size, bg);
  6426  00105A  5037               	movf	drawChar@j,w,c
  6427  00105C  0234               	mulwf	drawChar@size,c
  6428  00105E  50F3               	movf	prodl,w,c
  6429  001060  242E               	addwf	drawChar@y,w,c
  6430  001062  6E23               	movwf	fillRect@y,c
  6431  001064  C034  F024         	movff	drawChar@size,fillRect@w
  6432  001068  C034  F025         	movff	drawChar@size,fillRect@h
  6433  00106C  C032  F026         	movff	drawChar@bg,fillRect@color
  6434  001070  C033  F027         	movff	drawChar@bg+1,fillRect@color+1
  6435  001074  5038               	movf	drawChar@i,w,c
  6436  001076  0234               	mulwf	drawChar@size,c
  6437  001078  50F3               	movf	prodl,w,c
  6438  00107A  2436               	addwf	drawChar@x,w,c
  6439  00107C  ECE1  F00F         	call	_fillRect
  6440  001080  D000               	goto	l5762
  6441  001082                     l5762:
  6442  001082  2A37               	incf	drawChar@j,f,c
  6443  001084  90D8               	bcf	status,0,c
  6444  001086  3235               	rrcf	drawChar@line,f,c
  6445  001088  D7A9               	goto	l5744
  6446  00108A                     l5768:
  6447  00108A  2A38               	incf	drawChar@i,f,c
  6448  00108C  D76F               	goto	l5732
  6449  00108E                     l365:
  6450  00108E  0012               	return		;funcret
  6451  001090                     __end_of_drawChar:
  6452                           	opt stack 0
  6453                           tblptru	equ	0xFF8
  6454                           tblptrh	equ	0xFF7
  6455                           tblptrl	equ	0xFF6
  6456                           tablat	equ	0xFF5
  6457                           prodh	equ	0xFF4
  6458                           prodl	equ	0xFF3
  6459                           intcon	equ	0xFF2
  6460                           intcon2	equ	0xFF1
  6461                           postinc0	equ	0xFEE
  6462                           wreg	equ	0xFE8
  6463                           postdec1	equ	0xFE5
  6464                           fsr1l	equ	0xFE1
  6465                           indf2	equ	0xFDF
  6466                           postinc2	equ	0xFDE
  6467                           postdec2	equ	0xFDD
  6468                           fsr2h	equ	0xFDA
  6469                           fsr2l	equ	0xFD9
  6470                           status	equ	0xFD8
  6471                           
  6472 ;; *************** function _fillRect *****************
  6473 ;; Defined at:
  6474 ;;		line 438 in file "ST7735_TFT.c"
  6475 ;; Parameters:    Size  Location     Type
  6476 ;;  x               1    wreg     unsigned char 
  6477 ;;  y               1   34[COMRAM] unsigned char 
  6478 ;;  w               1   35[COMRAM] unsigned char 
  6479 ;;  h               1   36[COMRAM] unsigned char 
  6480 ;;  color           2   37[COMRAM] unsigned int 
  6481 ;; Auto vars:     Size  Location     Type
  6482 ;;  x               1   42[COMRAM] unsigned char 
  6483 ;;  i               2   43[COMRAM] int 
  6484 ;; Return value:  Size  Location     Type
  6485 ;;		None               void
  6486 ;; Registers used:
  6487 ;;		wreg, status,2, status,0, cstack
  6488 ;; Tracked objects:
  6489 ;;		On entry : 0/0
  6490 ;;		On exit  : 0/0
  6491 ;;		Unchanged: 0/0
  6492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6493 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6494 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6495 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6496 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6497 ;;Total ram usage:       11 bytes
  6498 ;; Hardware stack levels used:    1
  6499 ;; Hardware stack levels required when called:    7
  6500 ;; This function calls:
  6501 ;;		_drawFastVLine
  6502 ;; This function is called by:
  6503 ;;		_drawChar
  6504 ;; This function uses a non-reentrant model
  6505 ;;
  6506                           
  6507                           	psect	text22
  6508  001FC2                     __ptext22:
  6509                           	opt stack 0
  6510  001FC2                     _fillRect:
  6511                           	opt stack 20
  6512                           
  6513                           ;incstack = 0
  6514                           ;fillRect@x stored from wreg
  6515  001FC2  6E2B               	movwf	fillRect@x,c
  6516                           
  6517                           ;ST7735_TFT.c: 440: signed int i;
  6518                           ;ST7735_TFT.c: 442: for (i = x; i < x + w; i++)
  6519  001FC4  C02B  F02C         	movff	fillRect@x,fillRect@i
  6520  001FC8  6A2D               	clrf	fillRect@i+1,c
  6521  001FCA  D00E               	goto	l5452
  6522  001FCC                     l5448:
  6523                           
  6524                           ;ST7735_TFT.c: 443: {
  6525                           ;ST7735_TFT.c: 444: drawFastVLine(i, y, h, color);
  6526  001FCC  C023  F018         	movff	fillRect@y,drawFastVLine@y
  6527  001FD0  C025  F019         	movff	fillRect@h,drawFastVLine@h
  6528  001FD4  C026  F01A         	movff	fillRect@color,drawFastVLine@color
  6529  001FD8  C027  F01B         	movff	fillRect@color+1,drawFastVLine@color+1
  6530  001FDC  502C               	movf	fillRect@i,w,c
  6531  001FDE  EC31  F00D         	call	_drawFastVLine
  6532  001FE2  4A2C               	infsnz	fillRect@i,f,c
  6533  001FE4  2A2D               	incf	fillRect@i+1,f,c
  6534  001FE6  D000               	goto	l5452
  6535  001FE8                     l5452:
  6536  001FE8  5024               	movf	fillRect@w,w,c
  6537  001FEA  C02B  F028         	movff	fillRect@x,??_fillRect
  6538  001FEE  6A29               	clrf	(??_fillRect+1)& (0+255),c
  6539  001FF0  2628               	addwf	??_fillRect,f,c
  6540  001FF2  0E00               	movlw	0
  6541  001FF4  2229               	addwfc	??_fillRect+1,f,c
  6542  001FF6  5028               	movf	??_fillRect,w,c
  6543  001FF8  5C2C               	subwf	fillRect@i,w,c
  6544  001FFA  502D               	movf	fillRect@i+1,w,c
  6545  001FFC  0A80               	xorlw	128
  6546  001FFE  6E2A               	movwf	(??_fillRect+2)& (0+255),c
  6547  002000  5029               	movf	??_fillRect+1,w,c
  6548  002002  0A80               	xorlw	128
  6549  002004  582A               	subwfb	(??_fillRect+2)& (0+255),w,c
  6550  002006  A0D8               	btfss	status,0,c
  6551  002008  D7E1               	goto	l5448
  6552  00200A  0012               	return		;funcret
  6553  00200C                     __end_of_fillRect:
  6554                           	opt stack 0
  6555                           tblptru	equ	0xFF8
  6556                           tblptrh	equ	0xFF7
  6557                           tblptrl	equ	0xFF6
  6558                           tablat	equ	0xFF5
  6559                           prodh	equ	0xFF4
  6560                           prodl	equ	0xFF3
  6561                           intcon	equ	0xFF2
  6562                           intcon2	equ	0xFF1
  6563                           postinc0	equ	0xFEE
  6564                           wreg	equ	0xFE8
  6565                           postdec1	equ	0xFE5
  6566                           fsr1l	equ	0xFE1
  6567                           indf2	equ	0xFDF
  6568                           postinc2	equ	0xFDE
  6569                           postdec2	equ	0xFDD
  6570                           fsr2h	equ	0xFDA
  6571                           fsr2l	equ	0xFD9
  6572                           status	equ	0xFD8
  6573                           
  6574 ;; *************** function _drawFastVLine *****************
  6575 ;; Defined at:
  6576 ;;		line 417 in file "ST7735_TFT.c"
  6577 ;; Parameters:    Size  Location     Type
  6578 ;;  x               1    wreg     unsigned char 
  6579 ;;  y               1   23[COMRAM] unsigned char 
  6580 ;;  h               1   24[COMRAM] unsigned char 
  6581 ;;  color           2   25[COMRAM] unsigned int 
  6582 ;; Auto vars:     Size  Location     Type
  6583 ;;  x               1   33[COMRAM] unsigned char 
  6584 ;;  lo              1   32[COMRAM] unsigned char 
  6585 ;;  hi              1   31[COMRAM] unsigned char 
  6586 ;; Return value:  Size  Location     Type
  6587 ;;		None               void
  6588 ;; Registers used:
  6589 ;;		wreg, status,2, status,0, cstack
  6590 ;; Tracked objects:
  6591 ;;		On entry : 0/0
  6592 ;;		On exit  : 0/0
  6593 ;;		Unchanged: 0/0
  6594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6595 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6596 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6597 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6598 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6599 ;;Total ram usage:       11 bytes
  6600 ;; Hardware stack levels used:    1
  6601 ;; Hardware stack levels required when called:    6
  6602 ;; This function calls:
  6603 ;;		_setAddrWindow
  6604 ;;		_spiwrite
  6605 ;; This function is called by:
  6606 ;;		_fillRect
  6607 ;;		_fillCircleHelper
  6608 ;;		_fillCircle
  6609 ;;		_drawRect
  6610 ;; This function uses a non-reentrant model
  6611 ;;
  6612                           
  6613                           	psect	text23
  6614  001A62                     __ptext23:
  6615                           	opt stack 0
  6616  001A62                     _drawFastVLine:
  6617                           	opt stack 20
  6618                           
  6619                           ;incstack = 0
  6620                           ;drawFastVLine@x stored from wreg
  6621  001A62  6E22               	movwf	drawFastVLine@x,c
  6622                           
  6623                           ;ST7735_TFT.c: 419: unsigned char hi, lo;
  6624                           ;ST7735_TFT.c: 420: if((x >= 128) || (y >= 160))
  6625  001A64  0E80               	movlw	128
  6626  001A66  6022               	cpfslt	drawFastVLine@x,c
  6627  001A68  D03F               	goto	l349
  6628  001A6A  0E9F               	movlw	159
  6629  001A6C  6418               	cpfsgt	drawFastVLine@y,c
  6630  001A6E  D001               	goto	l5322
  6631                           
  6632                           ;ST7735_TFT.c: 421: return;
  6633  001A70  D03B               	goto	l349
  6634  001A72                     l5322:
  6635                           
  6636                           ;ST7735_TFT.c: 422: if((y + h - 1) >= 160)
  6637  001A72  0EFF               	movlw	255
  6638  001A74  6E1C               	movwf	??_drawFastVLine& (0+255),c
  6639  001A76  0EFF               	movlw	255
  6640  001A78  6E1D               	movwf	(??_drawFastVLine+1)& (0+255),c
  6641  001A7A  5019               	movf	drawFastVLine@h,w,c
  6642  001A7C  C018  F01E         	movff	drawFastVLine@y,??_drawFastVLine+2
  6643  001A80  6A1F               	clrf	(??_drawFastVLine+3)& (0+255),c
  6644  001A82  261E               	addwf	??_drawFastVLine+2,f,c
  6645  001A84  0E00               	movlw	0
  6646  001A86  221F               	addwfc	??_drawFastVLine+3,f,c
  6647  001A88  501C               	movf	??_drawFastVLine,w,c
  6648  001A8A  261E               	addwf	??_drawFastVLine+2,f,c
  6649  001A8C  501D               	movf	??_drawFastVLine+1,w,c
  6650  001A8E  221F               	addwfc	??_drawFastVLine+3,f,c
  6651  001A90  BE1F               	btfsc	??_drawFastVLine+3,7,c
  6652  001A92  D00B               	goto	l5326
  6653  001A94  501F               	movf	??_drawFastVLine+3,w,c
  6654  001A96  E104               	bnz	u4100
  6655  001A98  0EA0               	movlw	160
  6656  001A9A  5C1E               	subwf	??_drawFastVLine+2,w,c
  6657  001A9C  A0D8               	btfss	status,0,c
  6658  001A9E  D005               	goto	l5326
  6659  001AA0                     u4100:
  6660                           
  6661                           ;ST7735_TFT.c: 423: h = 160 - y;
  6662  001AA0  5018               	movf	drawFastVLine@y,w,c
  6663  001AA2  0800               	sublw	0
  6664  001AA4  0FA0               	addlw	160
  6665  001AA6  6E19               	movwf	drawFastVLine@h,c
  6666  001AA8  D000               	goto	l5326
  6667  001AAA                     l5326:
  6668                           
  6669                           ;ST7735_TFT.c: 424: hi = color >> 8; lo = color;
  6670  001AAA  501B               	movf	drawFastVLine@color+1,w,c
  6671  001AAC  6E20               	movwf	drawFastVLine@hi,c
  6672  001AAE  C01A  F021         	movff	drawFastVLine@color,drawFastVLine@lo
  6673                           
  6674                           ;ST7735_TFT.c: 425: setAddrWindow(x, y, x, y + h - 1);
  6675  001AB2  C018  F014         	movff	drawFastVLine@y,setAddrWindow@y0
  6676  001AB6  C022  F015         	movff	drawFastVLine@x,setAddrWindow@x1
  6677  001ABA  5018               	movf	drawFastVLine@y,w,c
  6678  001ABC  2419               	addwf	drawFastVLine@h,w,c
  6679  001ABE  6E1C               	movwf	??_drawFastVLine& (0+255),c
  6680  001AC0  041C               	decf	??_drawFastVLine,w,c
  6681  001AC2  6E16               	movwf	setAddrWindow@y1,c
  6682  001AC4  5022               	movf	drawFastVLine@x,w,c
  6683  001AC6  EC94  F00F         	call	_setAddrWindow
  6684                           
  6685                           ;ST7735_TFT.c: 426: PORTDbits.RD0 = 1;
  6686  001ACA  8083               	bsf	3971,0,c	;volatile
  6687                           
  6688                           ;ST7735_TFT.c: 427: PORTDbits.RD1 = 0;
  6689  001ACC  9283               	bcf	3971,1,c	;volatile
  6690                           
  6691                           ;ST7735_TFT.c: 429: while (h--) {
  6692  001ACE  D007               	goto	l5338
  6693  001AD0                     l5336:
  6694                           
  6695                           ;ST7735_TFT.c: 430: spiwrite(hi);
  6696  001AD0  5020               	movf	drawFastVLine@hi,w,c
  6697  001AD2  EC24  F012         	call	_spiwrite
  6698                           
  6699                           ;ST7735_TFT.c: 431: spiwrite(lo);
  6700  001AD6  5021               	movf	drawFastVLine@lo,w,c
  6701  001AD8  EC24  F012         	call	_spiwrite
  6702  001ADC  D000               	goto	l5338
  6703  001ADE                     l5338:
  6704  001ADE  0619               	decf	drawFastVLine@h,f,c
  6705  001AE0  2819               	incf	drawFastVLine@h,w,c
  6706  001AE2  A4D8               	btfss	status,2,c
  6707  001AE4  D7F5               	goto	l5336
  6708                           
  6709                           ;ST7735_TFT.c: 432: }
  6710                           ;ST7735_TFT.c: 433: PORTDbits.RD1 = 1;
  6711  001AE6  8283               	bsf	3971,1,c	;volatile
  6712  001AE8                     l349:
  6713  001AE8  0012               	return		;funcret
  6714  001AEA                     __end_of_drawFastVLine:
  6715                           	opt stack 0
  6716                           tblptru	equ	0xFF8
  6717                           tblptrh	equ	0xFF7
  6718                           tblptrl	equ	0xFF6
  6719                           tablat	equ	0xFF5
  6720                           prodh	equ	0xFF4
  6721                           prodl	equ	0xFF3
  6722                           intcon	equ	0xFF2
  6723                           intcon2	equ	0xFF1
  6724                           postinc0	equ	0xFEE
  6725                           wreg	equ	0xFE8
  6726                           postdec1	equ	0xFE5
  6727                           fsr1l	equ	0xFE1
  6728                           indf2	equ	0xFDF
  6729                           postinc2	equ	0xFDE
  6730                           postdec2	equ	0xFDD
  6731                           fsr2h	equ	0xFDA
  6732                           fsr2l	equ	0xFD9
  6733                           status	equ	0xFD8
  6734                           
  6735 ;; *************** function _drawCircle *****************
  6736 ;; Defined at:
  6737 ;;		line 529 in file "ST7735_TFT.c"
  6738 ;; Parameters:    Size  Location     Type
  6739 ;;  x0              2   27[COMRAM] int 
  6740 ;;  y0              2   29[COMRAM] int 
  6741 ;;  r               2   31[COMRAM] int 
  6742 ;;  color           2   33[COMRAM] unsigned int 
  6743 ;; Auto vars:     Size  Location     Type
  6744 ;;  y               2   45[COMRAM] int 
  6745 ;;  x               2   43[COMRAM] int 
  6746 ;;  f               2   41[COMRAM] int 
  6747 ;;  ddF_y           2   39[COMRAM] int 
  6748 ;;  ddF_x           2   37[COMRAM] int 
  6749 ;; Return value:  Size  Location     Type
  6750 ;;		None               void
  6751 ;; Registers used:
  6752 ;;		wreg, status,2, status,0, cstack
  6753 ;; Tracked objects:
  6754 ;;		On entry : 0/0
  6755 ;;		On exit  : 0/0
  6756 ;;		Unchanged: 0/0
  6757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6758 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6759 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6760 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6761 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6762 ;;Total ram usage:       20 bytes
  6763 ;; Hardware stack levels used:    1
  6764 ;; Hardware stack levels required when called:    7
  6765 ;; This function calls:
  6766 ;;		_drawPixel
  6767 ;; This function is called by:
  6768 ;;		_Initialize_Screen
  6769 ;; This function uses a non-reentrant model
  6770 ;;
  6771                           
  6772                           	psect	text24
  6773  000C1A                     __ptext24:
  6774                           	opt stack 0
  6775  000C1A                     _drawCircle:
  6776                           	opt stack 22
  6777                           
  6778                           ;ST7735_TFT.c: 531: signed int f, ddF_x, ddF_y, x, y;
  6779                           ;ST7735_TFT.c: 532: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  6780                           
  6781                           ;incstack = 0
  6782  000C1A  C020  F024         	movff	drawCircle@r,??_drawCircle
  6783  000C1E  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
  6784  000C22  1E24               	comf	??_drawCircle,f,c
  6785  000C24  1E25               	comf	??_drawCircle+1,f,c
  6786  000C26  4A24               	infsnz	??_drawCircle,f,c
  6787  000C28  2A25               	incf	??_drawCircle+1,f,c
  6788  000C2A  0E01               	movlw	1
  6789  000C2C  2424               	addwf	??_drawCircle,w,c
  6790  000C2E  6E2A               	movwf	drawCircle@f,c
  6791  000C30  0E00               	movlw	0
  6792  000C32  2025               	addwfc	??_drawCircle+1,w,c
  6793  000C34  6E2B               	movwf	drawCircle@f+1,c
  6794  000C36  0E00               	movlw	0
  6795  000C38  6E27               	movwf	drawCircle@ddF_x+1,c
  6796  000C3A  0E01               	movlw	1
  6797  000C3C  6E26               	movwf	drawCircle@ddF_x,c
  6798  000C3E  C020  F024         	movff	drawCircle@r,??_drawCircle
  6799  000C42  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
  6800  000C46  90D8               	bcf	status,0,c
  6801  000C48  3624               	rlcf	??_drawCircle,f,c
  6802  000C4A  3625               	rlcf	??_drawCircle+1,f,c
  6803  000C4C  1E24               	comf	??_drawCircle,f,c
  6804  000C4E  1E25               	comf	??_drawCircle+1,f,c
  6805  000C50  4A24               	infsnz	??_drawCircle,f,c
  6806  000C52  2A25               	incf	??_drawCircle+1,f,c
  6807  000C54  C024  F028         	movff	??_drawCircle,drawCircle@ddF_y
  6808  000C58  C025  F029         	movff	??_drawCircle+1,drawCircle@ddF_y+1
  6809  000C5C  0E00               	movlw	0
  6810  000C5E  6E2D               	movwf	drawCircle@x+1,c
  6811  000C60  0E00               	movlw	0
  6812  000C62  6E2C               	movwf	drawCircle@x,c
  6813  000C64  C020  F02E         	movff	drawCircle@r,drawCircle@y
  6814  000C68  C021  F02F         	movff	drawCircle@r+1,drawCircle@y+1
  6815                           
  6816                           ;ST7735_TFT.c: 533: drawPixel(x0 , y0 + r, color);
  6817  000C6C  501E               	movf	drawCircle@y0,w,c
  6818  000C6E  2420               	addwf	drawCircle@r,w,c
  6819  000C70  6E18               	movwf	drawPixel@y,c
  6820  000C72  C022  F019         	movff	drawCircle@color,drawPixel@color
  6821  000C76  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6822  000C7A  501C               	movf	drawCircle@x0,w,c
  6823  000C7C  EC1B  F011         	call	_drawPixel
  6824                           
  6825                           ;ST7735_TFT.c: 534: drawPixel(x0 , y0 - r, color);
  6826  000C80  5020               	movf	drawCircle@r,w,c
  6827  000C82  0800               	sublw	0
  6828  000C84  241E               	addwf	drawCircle@y0,w,c
  6829  000C86  6E18               	movwf	drawPixel@y,c
  6830  000C88  C022  F019         	movff	drawCircle@color,drawPixel@color
  6831  000C8C  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6832  000C90  501C               	movf	drawCircle@x0,w,c
  6833  000C92  EC1B  F011         	call	_drawPixel
  6834                           
  6835                           ;ST7735_TFT.c: 535: drawPixel(x0+r, y0 , color);
  6836  000C96  C01E  F018         	movff	drawCircle@y0,drawPixel@y
  6837  000C9A  C022  F019         	movff	drawCircle@color,drawPixel@color
  6838  000C9E  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6839  000CA2  501C               	movf	drawCircle@x0,w,c
  6840  000CA4  2420               	addwf	drawCircle@r,w,c
  6841  000CA6  EC1B  F011         	call	_drawPixel
  6842                           
  6843                           ;ST7735_TFT.c: 536: drawPixel(x0-r, y0 , color);
  6844  000CAA  C01E  F018         	movff	drawCircle@y0,drawPixel@y
  6845  000CAE  C022  F019         	movff	drawCircle@color,drawPixel@color
  6846  000CB2  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6847  000CB6  5020               	movf	drawCircle@r,w,c
  6848  000CB8  0800               	sublw	0
  6849  000CBA  241C               	addwf	drawCircle@x0,w,c
  6850  000CBC  EC1B  F011         	call	_drawPixel
  6851                           
  6852                           ;ST7735_TFT.c: 537: while (x < y) {
  6853  000CC0  D078               	goto	l6052
  6854  000CC2                     l6024:
  6855                           
  6856                           ;ST7735_TFT.c: 538: if (f >= 0) {
  6857  000CC2  BE2B               	btfsc	drawCircle@f+1,7,c
  6858  000CC4  D00B               	goto	l413
  6859                           
  6860                           ;ST7735_TFT.c: 539: y--;
  6861  000CC6  062E               	decf	drawCircle@y,f,c
  6862  000CC8  A0D8               	btfss	status,0,c
  6863  000CCA  062F               	decf	drawCircle@y+1,f,c
  6864                           
  6865                           ;ST7735_TFT.c: 540: ddF_y += 2;
  6866  000CCC  0E02               	movlw	2
  6867  000CCE  2628               	addwf	drawCircle@ddF_y,f,c
  6868  000CD0  0E00               	movlw	0
  6869  000CD2  2229               	addwfc	drawCircle@ddF_y+1,f,c
  6870                           
  6871                           ;ST7735_TFT.c: 541: f += ddF_y;
  6872  000CD4  5028               	movf	drawCircle@ddF_y,w,c
  6873  000CD6  262A               	addwf	drawCircle@f,f,c
  6874  000CD8  5029               	movf	drawCircle@ddF_y+1,w,c
  6875  000CDA  222B               	addwfc	drawCircle@f+1,f,c
  6876  000CDC                     l413:
  6877                           
  6878                           ;ST7735_TFT.c: 542: }
  6879                           ;ST7735_TFT.c: 543: x++;
  6880  000CDC  4A2C               	infsnz	drawCircle@x,f,c
  6881  000CDE  2A2D               	incf	drawCircle@x+1,f,c
  6882                           
  6883                           ;ST7735_TFT.c: 544: ddF_x += 2;
  6884  000CE0  0E02               	movlw	2
  6885  000CE2  2626               	addwf	drawCircle@ddF_x,f,c
  6886  000CE4  0E00               	movlw	0
  6887  000CE6  2227               	addwfc	drawCircle@ddF_x+1,f,c
  6888                           
  6889                           ;ST7735_TFT.c: 545: f += ddF_x;
  6890  000CE8  5026               	movf	drawCircle@ddF_x,w,c
  6891  000CEA  262A               	addwf	drawCircle@f,f,c
  6892  000CEC  5027               	movf	drawCircle@ddF_x+1,w,c
  6893  000CEE  222B               	addwfc	drawCircle@f+1,f,c
  6894                           
  6895                           ;ST7735_TFT.c: 546: drawPixel(x0 + x, y0 + y, color);
  6896  000CF0  501E               	movf	drawCircle@y0,w,c
  6897  000CF2  242E               	addwf	drawCircle@y,w,c
  6898  000CF4  6E18               	movwf	drawPixel@y,c
  6899  000CF6  C022  F019         	movff	drawCircle@color,drawPixel@color
  6900  000CFA  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6901  000CFE  501C               	movf	drawCircle@x0,w,c
  6902  000D00  242C               	addwf	drawCircle@x,w,c
  6903  000D02  EC1B  F011         	call	_drawPixel
  6904                           
  6905                           ;ST7735_TFT.c: 547: drawPixel(x0 - x, y0 + y, color);
  6906  000D06  501E               	movf	drawCircle@y0,w,c
  6907  000D08  242E               	addwf	drawCircle@y,w,c
  6908  000D0A  6E18               	movwf	drawPixel@y,c
  6909  000D0C  C022  F019         	movff	drawCircle@color,drawPixel@color
  6910  000D10  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6911  000D14  502C               	movf	drawCircle@x,w,c
  6912  000D16  0800               	sublw	0
  6913  000D18  241C               	addwf	drawCircle@x0,w,c
  6914  000D1A  EC1B  F011         	call	_drawPixel
  6915                           
  6916                           ;ST7735_TFT.c: 548: drawPixel(x0 + x, y0 - y, color);
  6917  000D1E  502E               	movf	drawCircle@y,w,c
  6918  000D20  0800               	sublw	0
  6919  000D22  241E               	addwf	drawCircle@y0,w,c
  6920  000D24  6E18               	movwf	drawPixel@y,c
  6921  000D26  C022  F019         	movff	drawCircle@color,drawPixel@color
  6922  000D2A  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6923  000D2E  501C               	movf	drawCircle@x0,w,c
  6924  000D30  242C               	addwf	drawCircle@x,w,c
  6925  000D32  EC1B  F011         	call	_drawPixel
  6926                           
  6927                           ;ST7735_TFT.c: 549: drawPixel(x0 - x, y0 - y, color);
  6928  000D36  502E               	movf	drawCircle@y,w,c
  6929  000D38  0800               	sublw	0
  6930  000D3A  241E               	addwf	drawCircle@y0,w,c
  6931  000D3C  6E18               	movwf	drawPixel@y,c
  6932  000D3E  C022  F019         	movff	drawCircle@color,drawPixel@color
  6933  000D42  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6934  000D46  502C               	movf	drawCircle@x,w,c
  6935  000D48  0800               	sublw	0
  6936  000D4A  241C               	addwf	drawCircle@x0,w,c
  6937  000D4C  EC1B  F011         	call	_drawPixel
  6938                           
  6939                           ;ST7735_TFT.c: 550: drawPixel(x0 + y, y0 + x, color);
  6940  000D50  501E               	movf	drawCircle@y0,w,c
  6941  000D52  242C               	addwf	drawCircle@x,w,c
  6942  000D54  6E18               	movwf	drawPixel@y,c
  6943  000D56  C022  F019         	movff	drawCircle@color,drawPixel@color
  6944  000D5A  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6945  000D5E  501C               	movf	drawCircle@x0,w,c
  6946  000D60  242E               	addwf	drawCircle@y,w,c
  6947  000D62  EC1B  F011         	call	_drawPixel
  6948                           
  6949                           ;ST7735_TFT.c: 551: drawPixel(x0 - y, y0 + x, color);
  6950  000D66  501E               	movf	drawCircle@y0,w,c
  6951  000D68  242C               	addwf	drawCircle@x,w,c
  6952  000D6A  6E18               	movwf	drawPixel@y,c
  6953  000D6C  C022  F019         	movff	drawCircle@color,drawPixel@color
  6954  000D70  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6955  000D74  502E               	movf	drawCircle@y,w,c
  6956  000D76  0800               	sublw	0
  6957  000D78  241C               	addwf	drawCircle@x0,w,c
  6958  000D7A  EC1B  F011         	call	_drawPixel
  6959                           
  6960                           ;ST7735_TFT.c: 552: drawPixel(x0 + y, y0 - x, color);
  6961  000D7E  502C               	movf	drawCircle@x,w,c
  6962  000D80  0800               	sublw	0
  6963  000D82  241E               	addwf	drawCircle@y0,w,c
  6964  000D84  6E18               	movwf	drawPixel@y,c
  6965  000D86  C022  F019         	movff	drawCircle@color,drawPixel@color
  6966  000D8A  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6967  000D8E  501C               	movf	drawCircle@x0,w,c
  6968  000D90  242E               	addwf	drawCircle@y,w,c
  6969  000D92  EC1B  F011         	call	_drawPixel
  6970                           
  6971                           ;ST7735_TFT.c: 553: drawPixel(x0 - y, y0 - x, color);
  6972  000D96  502C               	movf	drawCircle@x,w,c
  6973  000D98  0800               	sublw	0
  6974  000D9A  241E               	addwf	drawCircle@y0,w,c
  6975  000D9C  6E18               	movwf	drawPixel@y,c
  6976  000D9E  C022  F019         	movff	drawCircle@color,drawPixel@color
  6977  000DA2  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6978  000DA6  502E               	movf	drawCircle@y,w,c
  6979  000DA8  0800               	sublw	0
  6980  000DAA  241C               	addwf	drawCircle@x0,w,c
  6981  000DAC  EC1B  F011         	call	_drawPixel
  6982  000DB0  D000               	goto	l6052
  6983  000DB2                     l6052:
  6984  000DB2  502E               	movf	drawCircle@y,w,c
  6985  000DB4  5C2C               	subwf	drawCircle@x,w,c
  6986  000DB6  502D               	movf	drawCircle@x+1,w,c
  6987  000DB8  0A80               	xorlw	128
  6988  000DBA  6E24               	movwf	??_drawCircle& (0+255),c
  6989  000DBC  502F               	movf	drawCircle@y+1,w,c
  6990  000DBE  0A80               	xorlw	128
  6991  000DC0  5824               	subwfb	??_drawCircle& (0+255),w,c
  6992  000DC2  A0D8               	btfss	status,0,c
  6993  000DC4  D77E               	goto	l6024
  6994  000DC6  0012               	return		;funcret
  6995  000DC8                     __end_of_drawCircle:
  6996                           	opt stack 0
  6997                           tblptru	equ	0xFF8
  6998                           tblptrh	equ	0xFF7
  6999                           tblptrl	equ	0xFF6
  7000                           tablat	equ	0xFF5
  7001                           prodh	equ	0xFF4
  7002                           prodl	equ	0xFF3
  7003                           intcon	equ	0xFF2
  7004                           intcon2	equ	0xFF1
  7005                           postinc0	equ	0xFEE
  7006                           wreg	equ	0xFE8
  7007                           postdec1	equ	0xFE5
  7008                           fsr1l	equ	0xFE1
  7009                           indf2	equ	0xFDF
  7010                           postinc2	equ	0xFDE
  7011                           postdec2	equ	0xFDD
  7012                           fsr2h	equ	0xFDA
  7013                           fsr2l	equ	0xFD9
  7014                           status	equ	0xFD8
  7015                           
  7016 ;; *************** function _drawPixel *****************
  7017 ;; Defined at:
  7018 ;;		line 408 in file "ST7735_TFT.c"
  7019 ;; Parameters:    Size  Location     Type
  7020 ;;  x               1    wreg     unsigned char 
  7021 ;;  y               1   23[COMRAM] unsigned char 
  7022 ;;  color           2   24[COMRAM] unsigned int 
  7023 ;; Auto vars:     Size  Location     Type
  7024 ;;  x               1   26[COMRAM] unsigned char 
  7025 ;; Return value:  Size  Location     Type
  7026 ;;		None               void
  7027 ;; Registers used:
  7028 ;;		wreg, status,2, status,0, cstack
  7029 ;; Tracked objects:
  7030 ;;		On entry : 0/0
  7031 ;;		On exit  : 0/0
  7032 ;;		Unchanged: 0/0
  7033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7034 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7035 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7036 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7037 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7038 ;;Total ram usage:        4 bytes
  7039 ;; Hardware stack levels used:    1
  7040 ;; Hardware stack levels required when called:    6
  7041 ;; This function calls:
  7042 ;;		_setAddrWindow
  7043 ;;		_write_data
  7044 ;; This function is called by:
  7045 ;;		_drawChar
  7046 ;;		_drawCircle
  7047 ;;		_drawCircleHelper
  7048 ;; This function uses a non-reentrant model
  7049 ;;
  7050                           
  7051                           	psect	text25
  7052  002236                     __ptext25:
  7053                           	opt stack 0
  7054  002236                     _drawPixel:
  7055                           	opt stack 21
  7056                           
  7057                           ;incstack = 0
  7058                           ;drawPixel@x stored from wreg
  7059  002236  6E1B               	movwf	drawPixel@x,c
  7060                           
  7061                           ;ST7735_TFT.c: 410: if((x >= 128) || (y >= 160))
  7062  002238  0E80               	movlw	128
  7063  00223A  601B               	cpfslt	drawPixel@x,c
  7064  00223C  D013               	goto	l343
  7065  00223E  0E9F               	movlw	159
  7066  002240  6418               	cpfsgt	drawPixel@y,c
  7067  002242  D001               	goto	l5440
  7068                           
  7069                           ;ST7735_TFT.c: 411: return;
  7070  002244  D00F               	goto	l343
  7071  002246                     l5440:
  7072                           
  7073                           ;ST7735_TFT.c: 412: setAddrWindow(x,y,x+1,y+1);
  7074  002246  C018  F014         	movff	drawPixel@y,setAddrWindow@y0
  7075  00224A  281B               	incf	drawPixel@x,w,c
  7076  00224C  6E15               	movwf	setAddrWindow@x1,c
  7077  00224E  2818               	incf	drawPixel@y,w,c
  7078  002250  6E16               	movwf	setAddrWindow@y1,c
  7079  002252  501B               	movf	drawPixel@x,w,c
  7080  002254  EC94  F00F         	call	_setAddrWindow
  7081                           
  7082                           ;ST7735_TFT.c: 413: write_data(color >> 8);
  7083  002258  501A               	movf	drawPixel@color+1,w,c
  7084  00225A  EC6D  F012         	call	_write_data
  7085                           
  7086                           ;ST7735_TFT.c: 414: write_data(color & 0xFF);
  7087  00225E  5019               	movf	drawPixel@color,w,c
  7088  002260  EC6D  F012         	call	_write_data
  7089  002264                     l343:
  7090  002264  0012               	return		;funcret
  7091  002266                     __end_of_drawPixel:
  7092                           	opt stack 0
  7093                           tblptru	equ	0xFF8
  7094                           tblptrh	equ	0xFF7
  7095                           tblptrl	equ	0xFF6
  7096                           tablat	equ	0xFF5
  7097                           prodh	equ	0xFF4
  7098                           prodl	equ	0xFF3
  7099                           intcon	equ	0xFF2
  7100                           intcon2	equ	0xFF1
  7101                           postinc0	equ	0xFEE
  7102                           wreg	equ	0xFE8
  7103                           postdec1	equ	0xFE5
  7104                           fsr1l	equ	0xFE1
  7105                           indf2	equ	0xFDF
  7106                           postinc2	equ	0xFDE
  7107                           postdec2	equ	0xFDD
  7108                           fsr2h	equ	0xFDA
  7109                           fsr2l	equ	0xFD9
  7110                           status	equ	0xFD8
  7111                           
  7112 ;; *************** function _setAddrWindow *****************
  7113 ;; Defined at:
  7114 ;;		line 393 in file "ST7735_TFT.c"
  7115 ;; Parameters:    Size  Location     Type
  7116 ;;  x0              1    wreg     unsigned char 
  7117 ;;  y0              1   19[COMRAM] unsigned char 
  7118 ;;  x1              1   20[COMRAM] unsigned char 
  7119 ;;  y1              1   21[COMRAM] unsigned char 
  7120 ;; Auto vars:     Size  Location     Type
  7121 ;;  x0              1   22[COMRAM] unsigned char 
  7122 ;; Return value:  Size  Location     Type
  7123 ;;		None               void
  7124 ;; Registers used:
  7125 ;;		wreg, status,2, status,0, cstack
  7126 ;; Tracked objects:
  7127 ;;		On entry : 0/0
  7128 ;;		On exit  : 0/0
  7129 ;;		Unchanged: 0/0
  7130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7131 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7132 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7133 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7134 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7135 ;;Total ram usage:        4 bytes
  7136 ;; Hardware stack levels used:    1
  7137 ;; Hardware stack levels required when called:    5
  7138 ;; This function calls:
  7139 ;;		_write_command
  7140 ;;		_write_data
  7141 ;; This function is called by:
  7142 ;;		_drawPixel
  7143 ;;		_drawFastVLine
  7144 ;;		_fillRectangle
  7145 ;;		_drawFastHLine
  7146 ;; This function uses a non-reentrant model
  7147 ;;
  7148                           
  7149                           	psect	text26
  7150  001F28                     __ptext26:
  7151                           	opt stack 0
  7152  001F28                     _setAddrWindow:
  7153                           	opt stack 20
  7154                           
  7155                           ;incstack = 0
  7156                           ;setAddrWindow@x0 stored from wreg
  7157  001F28  6E17               	movwf	setAddrWindow@x0,c
  7158                           
  7159                           ;ST7735_TFT.c: 395: write_command(0x2A);
  7160  001F2A  0E2A               	movlw	42
  7161  001F2C  EC75  F012         	call	_write_command
  7162                           
  7163                           ;ST7735_TFT.c: 396: write_data(0);
  7164  001F30  0E00               	movlw	0
  7165  001F32  EC6D  F012         	call	_write_data
  7166                           
  7167                           ;ST7735_TFT.c: 397: write_data(x0 + colstart);
  7168  001F36  5017               	movf	setAddrWindow@x0,w,c
  7169  001F38  2459               	addwf	_colstart,w,c
  7170  001F3A  EC6D  F012         	call	_write_data
  7171                           
  7172                           ;ST7735_TFT.c: 398: write_data(0);
  7173  001F3E  0E00               	movlw	0
  7174  001F40  EC6D  F012         	call	_write_data
  7175                           
  7176                           ;ST7735_TFT.c: 399: write_data(x1 + colstart);
  7177  001F44  5015               	movf	setAddrWindow@x1,w,c
  7178  001F46  2459               	addwf	_colstart,w,c
  7179  001F48  EC6D  F012         	call	_write_data
  7180                           
  7181                           ;ST7735_TFT.c: 400: write_command(0x2B);
  7182  001F4C  0E2B               	movlw	43
  7183  001F4E  EC75  F012         	call	_write_command
  7184                           
  7185                           ;ST7735_TFT.c: 401: write_data(0);
  7186  001F52  0E00               	movlw	0
  7187  001F54  EC6D  F012         	call	_write_data
  7188                           
  7189                           ;ST7735_TFT.c: 402: write_data(y0 + rowstart);
  7190  001F58  5014               	movf	setAddrWindow@y0,w,c
  7191  001F5A  2461               	addwf	_rowstart,w,c
  7192  001F5C  EC6D  F012         	call	_write_data
  7193                           
  7194                           ;ST7735_TFT.c: 403: write_data(0);
  7195  001F60  0E00               	movlw	0
  7196  001F62  EC6D  F012         	call	_write_data
  7197                           
  7198                           ;ST7735_TFT.c: 404: write_data(y1 + rowstart);
  7199  001F66  5016               	movf	setAddrWindow@y1,w,c
  7200  001F68  2461               	addwf	_rowstart,w,c
  7201  001F6A  EC6D  F012         	call	_write_data
  7202                           
  7203                           ;ST7735_TFT.c: 405: write_command(0x2C);
  7204  001F6E  0E2C               	movlw	44
  7205  001F70  EC75  F012         	call	_write_command
  7206  001F74  0012               	return		;funcret
  7207  001F76                     __end_of_setAddrWindow:
  7208                           	opt stack 0
  7209                           tblptru	equ	0xFF8
  7210                           tblptrh	equ	0xFF7
  7211                           tblptrl	equ	0xFF6
  7212                           tablat	equ	0xFF5
  7213                           prodh	equ	0xFF4
  7214                           prodl	equ	0xFF3
  7215                           intcon	equ	0xFF2
  7216                           intcon2	equ	0xFF1
  7217                           postinc0	equ	0xFEE
  7218                           wreg	equ	0xFE8
  7219                           postdec1	equ	0xFE5
  7220                           fsr1l	equ	0xFE1
  7221                           indf2	equ	0xFDF
  7222                           postinc2	equ	0xFDE
  7223                           postdec2	equ	0xFDD
  7224                           fsr2h	equ	0xFDA
  7225                           fsr2l	equ	0xFD9
  7226                           status	equ	0xFD8
  7227                           
  7228 ;; *************** function _TFT_GreenTab_Initialize *****************
  7229 ;; Defined at:
  7230 ;;		line 645 in file "ST7735_TFT.c"
  7231 ;; Parameters:    Size  Location     Type
  7232 ;;		None
  7233 ;; Auto vars:     Size  Location     Type
  7234 ;;		None
  7235 ;; Return value:  Size  Location     Type
  7236 ;;		None               void
  7237 ;; Registers used:
  7238 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7239 ;; Tracked objects:
  7240 ;;		On entry : 0/0
  7241 ;;		On exit  : 0/0
  7242 ;;		Unchanged: 0/0
  7243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7244 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7245 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7246 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7247 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7248 ;;Total ram usage:        0 bytes
  7249 ;; Hardware stack levels used:    1
  7250 ;; Hardware stack levels required when called:    6
  7251 ;; This function calls:
  7252 ;;		_Rcmd1
  7253 ;;		_Rcmd2red
  7254 ;;		_Rcmd3
  7255 ;;		_write_command
  7256 ;;		_write_data
  7257 ;; This function is called by:
  7258 ;;		_Initialize_Screen
  7259 ;; This function uses a non-reentrant model
  7260 ;;
  7261                           
  7262                           	psect	text27
  7263  002266                     __ptext27:
  7264                           	opt stack 0
  7265  002266                     _TFT_GreenTab_Initialize:
  7266                           	opt stack 23
  7267                           
  7268                           ;ST7735_TFT.c: 647: PORTDbits.RD1 = 1;
  7269                           
  7270                           ;incstack = 0
  7271  002266  8283               	bsf	3971,1,c	;volatile
  7272                           
  7273                           ;ST7735_TFT.c: 648: PORTDbits.RD0 = 0;
  7274  002268  9083               	bcf	3971,0,c	;volatile
  7275                           
  7276                           ;ST7735_TFT.c: 650: SSPSTAT=0x80;
  7277  00226A  0E80               	movlw	128
  7278  00226C  6EC7               	movwf	4039,c	;volatile
  7279                           
  7280                           ;ST7735_TFT.c: 651: SSPCON1=0x30;
  7281  00226E  0E30               	movlw	48
  7282  002270  6EC6               	movwf	4038,c	;volatile
  7283                           
  7284                           ;ST7735_TFT.c: 654: Rcmd1();
  7285  002272  ECD4  F008         	call	_Rcmd1	;wreg free
  7286                           
  7287                           ;ST7735_TFT.c: 655: Rcmd2red();
  7288  002276  EC8C  F010         	call	_Rcmd2red	;wreg free
  7289                           
  7290                           ;ST7735_TFT.c: 656: Rcmd3();
  7291  00227A  EC5D  F00A         	call	_Rcmd3	;wreg free
  7292                           
  7293                           ;ST7735_TFT.c: 657: write_command(0x36);
  7294  00227E  0E36               	movlw	54
  7295  002280  EC75  F012         	call	_write_command
  7296                           
  7297                           ;ST7735_TFT.c: 658: write_data(0xC0);
  7298  002284  0EC0               	movlw	192
  7299  002286  EC6D  F012         	call	_write_data
  7300                           
  7301                           ;ST7735_TFT.c: 659: _tft_type = 1;
  7302  00228A  0E01               	movlw	1
  7303  00228C  6E53               	movwf	__tft_type,c
  7304  00228E  0012               	return		;funcret
  7305  002290                     __end_of_TFT_GreenTab_Initialize:
  7306                           	opt stack 0
  7307                           tblptru	equ	0xFF8
  7308                           tblptrh	equ	0xFF7
  7309                           tblptrl	equ	0xFF6
  7310                           tablat	equ	0xFF5
  7311                           prodh	equ	0xFF4
  7312                           prodl	equ	0xFF3
  7313                           intcon	equ	0xFF2
  7314                           intcon2	equ	0xFF1
  7315                           postinc0	equ	0xFEE
  7316                           wreg	equ	0xFE8
  7317                           postdec1	equ	0xFE5
  7318                           fsr1l	equ	0xFE1
  7319                           indf2	equ	0xFDF
  7320                           postinc2	equ	0xFDE
  7321                           postdec2	equ	0xFDD
  7322                           fsr2h	equ	0xFDA
  7323                           fsr2l	equ	0xFD9
  7324                           status	equ	0xFD8
  7325                           
  7326 ;; *************** function _Rcmd3 *****************
  7327 ;; Defined at:
  7328 ;;		line 339 in file "ST7735_TFT.c"
  7329 ;; Parameters:    Size  Location     Type
  7330 ;;		None
  7331 ;; Auto vars:     Size  Location     Type
  7332 ;;		None
  7333 ;; Return value:  Size  Location     Type
  7334 ;;		None               void
  7335 ;; Registers used:
  7336 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7337 ;; Tracked objects:
  7338 ;;		On entry : 0/0
  7339 ;;		On exit  : 0/0
  7340 ;;		Unchanged: 0/0
  7341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7342 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7343 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7344 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7345 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7346 ;;Total ram usage:        0 bytes
  7347 ;; Hardware stack levels used:    1
  7348 ;; Hardware stack levels required when called:    5
  7349 ;; This function calls:
  7350 ;;		_delay_ms
  7351 ;;		_write_command
  7352 ;;		_write_data
  7353 ;; This function is called by:
  7354 ;;		_TFT_GreenTab_Initialize
  7355 ;;		_TFT_BlackTab_Initialize
  7356 ;; This function uses a non-reentrant model
  7357 ;;
  7358                           
  7359                           	psect	text28
  7360  0014BA                     __ptext28:
  7361                           	opt stack 0
  7362  0014BA                     _Rcmd3:
  7363                           	opt stack 23
  7364                           
  7365                           ;ST7735_TFT.c: 341: write_command(0xE0);
  7366                           
  7367                           ;incstack = 0
  7368  0014BA  0EE0               	movlw	224
  7369  0014BC  EC75  F012         	call	_write_command
  7370                           
  7371                           ;ST7735_TFT.c: 342: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
  7372  0014C0  0E02               	movlw	2
  7373  0014C2  EC6D  F012         	call	_write_data
  7374  0014C6  0E1C               	movlw	28
  7375  0014C8  EC6D  F012         	call	_write_data
  7376  0014CC  0E07               	movlw	7
  7377  0014CE  EC6D  F012         	call	_write_data
  7378  0014D2  0E12               	movlw	18
  7379  0014D4  EC6D  F012         	call	_write_data
  7380                           
  7381                           ;ST7735_TFT.c: 343: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
  7382  0014D8  0E37               	movlw	55
  7383  0014DA  EC6D  F012         	call	_write_data
  7384  0014DE  0E32               	movlw	50
  7385  0014E0  EC6D  F012         	call	_write_data
  7386  0014E4  0E29               	movlw	41
  7387  0014E6  EC6D  F012         	call	_write_data
  7388  0014EA  0E2D               	movlw	45
  7389  0014EC  EC6D  F012         	call	_write_data
  7390                           
  7391                           ;ST7735_TFT.c: 344: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
  7392  0014F0  0E29               	movlw	41
  7393  0014F2  EC6D  F012         	call	_write_data
  7394  0014F6  0E25               	movlw	37
  7395  0014F8  EC6D  F012         	call	_write_data
  7396  0014FC  0E2B               	movlw	43
  7397  0014FE  EC6D  F012         	call	_write_data
  7398  001502  0E39               	movlw	57
  7399  001504  EC6D  F012         	call	_write_data
  7400                           
  7401                           ;ST7735_TFT.c: 345: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
  7402  001508  0E00               	movlw	0
  7403  00150A  EC6D  F012         	call	_write_data
  7404  00150E  0E01               	movlw	1
  7405  001510  EC6D  F012         	call	_write_data
  7406  001514  0E03               	movlw	3
  7407  001516  EC6D  F012         	call	_write_data
  7408  00151A  0E10               	movlw	16
  7409  00151C  EC6D  F012         	call	_write_data
  7410                           
  7411                           ;ST7735_TFT.c: 346: write_command(0xE1);
  7412  001520  0EE1               	movlw	225
  7413  001522  EC75  F012         	call	_write_command
  7414                           
  7415                           ;ST7735_TFT.c: 347: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
  7416  001526  0E03               	movlw	3
  7417  001528  EC6D  F012         	call	_write_data
  7418  00152C  0E1D               	movlw	29
  7419  00152E  EC6D  F012         	call	_write_data
  7420  001532  0E07               	movlw	7
  7421  001534  EC6D  F012         	call	_write_data
  7422  001538  0E06               	movlw	6
  7423  00153A  EC6D  F012         	call	_write_data
  7424                           
  7425                           ;ST7735_TFT.c: 348: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
  7426  00153E  0E2E               	movlw	46
  7427  001540  EC6D  F012         	call	_write_data
  7428  001544  0E2C               	movlw	44
  7429  001546  EC6D  F012         	call	_write_data
  7430  00154A  0E29               	movlw	41
  7431  00154C  EC6D  F012         	call	_write_data
  7432  001550  0E2D               	movlw	45
  7433  001552  EC6D  F012         	call	_write_data
  7434                           
  7435                           ;ST7735_TFT.c: 349: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
  7436  001556  0E2E               	movlw	46
  7437  001558  EC6D  F012         	call	_write_data
  7438  00155C  0E2E               	movlw	46
  7439  00155E  EC6D  F012         	call	_write_data
  7440  001562  0E37               	movlw	55
  7441  001564  EC6D  F012         	call	_write_data
  7442  001568  0E3F               	movlw	63
  7443  00156A  EC6D  F012         	call	_write_data
  7444                           
  7445                           ;ST7735_TFT.c: 350: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
  7446  00156E  0E00               	movlw	0
  7447  001570  EC6D  F012         	call	_write_data
  7448  001574  0E00               	movlw	0
  7449  001576  EC6D  F012         	call	_write_data
  7450  00157A  0E02               	movlw	2
  7451  00157C  EC6D  F012         	call	_write_data
  7452  001580  0E10               	movlw	16
  7453  001582  EC6D  F012         	call	_write_data
  7454                           
  7455                           ;ST7735_TFT.c: 351: write_command(0x13);
  7456  001586  0E13               	movlw	19
  7457  001588  EC75  F012         	call	_write_command
  7458                           
  7459                           ;ST7735_TFT.c: 352: delay_ms(10);
  7460  00158C  0E00               	movlw	0
  7461  00158E  6E18               	movwf	delay_ms@ms+1,c
  7462  001590  0E0A               	movlw	10
  7463  001592  6E17               	movwf	delay_ms@ms,c
  7464  001594  EC6B  F00F         	call	_delay_ms	;wreg free
  7465                           
  7466                           ;ST7735_TFT.c: 353: write_command(0x29);
  7467  001598  0E29               	movlw	41
  7468  00159A  EC75  F012         	call	_write_command
  7469                           
  7470                           ;ST7735_TFT.c: 354: delay_ms(100);
  7471  00159E  0E00               	movlw	0
  7472  0015A0  6E18               	movwf	delay_ms@ms+1,c
  7473  0015A2  0E64               	movlw	100
  7474  0015A4  6E17               	movwf	delay_ms@ms,c
  7475  0015A6  EC6B  F00F         	call	_delay_ms	;wreg free
  7476  0015AA  0012               	return		;funcret
  7477  0015AC                     __end_of_Rcmd3:
  7478                           	opt stack 0
  7479                           tblptru	equ	0xFF8
  7480                           tblptrh	equ	0xFF7
  7481                           tblptrl	equ	0xFF6
  7482                           tablat	equ	0xFF5
  7483                           prodh	equ	0xFF4
  7484                           prodl	equ	0xFF3
  7485                           intcon	equ	0xFF2
  7486                           intcon2	equ	0xFF1
  7487                           postinc0	equ	0xFEE
  7488                           wreg	equ	0xFE8
  7489                           postdec1	equ	0xFE5
  7490                           fsr1l	equ	0xFE1
  7491                           indf2	equ	0xFDF
  7492                           postinc2	equ	0xFDE
  7493                           postdec2	equ	0xFDD
  7494                           fsr2h	equ	0xFDA
  7495                           fsr2l	equ	0xFD9
  7496                           status	equ	0xFD8
  7497                           
  7498 ;; *************** function _Rcmd2red *****************
  7499 ;; Defined at:
  7500 ;;		line 329 in file "ST7735_TFT.c"
  7501 ;; Parameters:    Size  Location     Type
  7502 ;;		None
  7503 ;; Auto vars:     Size  Location     Type
  7504 ;;		None
  7505 ;; Return value:  Size  Location     Type
  7506 ;;		None               void
  7507 ;; Registers used:
  7508 ;;		wreg, status,2, cstack
  7509 ;; Tracked objects:
  7510 ;;		On entry : 0/0
  7511 ;;		On exit  : 0/0
  7512 ;;		Unchanged: 0/0
  7513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7514 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7515 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7516 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7517 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7518 ;;Total ram usage:        0 bytes
  7519 ;; Hardware stack levels used:    1
  7520 ;; Hardware stack levels required when called:    5
  7521 ;; This function calls:
  7522 ;;		_write_command
  7523 ;;		_write_data
  7524 ;; This function is called by:
  7525 ;;		_TFT_GreenTab_Initialize
  7526 ;; This function uses a non-reentrant model
  7527 ;;
  7528                           
  7529                           	psect	text29
  7530  002118                     __ptext29:
  7531                           	opt stack 0
  7532  002118                     _Rcmd2red:
  7533                           	opt stack 23
  7534                           
  7535                           ;ST7735_TFT.c: 331: write_command(0x2A);
  7536                           
  7537                           ;incstack = 0
  7538  002118  0E2A               	movlw	42
  7539  00211A  EC75  F012         	call	_write_command
  7540                           
  7541                           ;ST7735_TFT.c: 332: write_data(0x00); write_data(0x00);
  7542  00211E  0E00               	movlw	0
  7543  002120  EC6D  F012         	call	_write_data
  7544  002124  0E00               	movlw	0
  7545  002126  EC6D  F012         	call	_write_data
  7546                           
  7547                           ;ST7735_TFT.c: 333: write_data(0x00); write_data(0x7F);
  7548  00212A  0E00               	movlw	0
  7549  00212C  EC6D  F012         	call	_write_data
  7550  002130  0E7F               	movlw	127
  7551  002132  EC6D  F012         	call	_write_data
  7552                           
  7553                           ;ST7735_TFT.c: 334: write_command(0x2B);
  7554  002136  0E2B               	movlw	43
  7555  002138  EC75  F012         	call	_write_command
  7556                           
  7557                           ;ST7735_TFT.c: 335: write_data(0x00); write_data(0x00);
  7558  00213C  0E00               	movlw	0
  7559  00213E  EC6D  F012         	call	_write_data
  7560  002142  0E00               	movlw	0
  7561  002144  EC6D  F012         	call	_write_data
  7562                           
  7563                           ;ST7735_TFT.c: 336: write_data(0x00); write_data(0x9F);
  7564  002148  0E00               	movlw	0
  7565  00214A  EC6D  F012         	call	_write_data
  7566  00214E  0E9F               	movlw	159
  7567  002150  EC6D  F012         	call	_write_data
  7568  002154  0012               	return		;funcret
  7569  002156                     __end_of_Rcmd2red:
  7570                           	opt stack 0
  7571                           tblptru	equ	0xFF8
  7572                           tblptrh	equ	0xFF7
  7573                           tblptrl	equ	0xFF6
  7574                           tablat	equ	0xFF5
  7575                           prodh	equ	0xFF4
  7576                           prodl	equ	0xFF3
  7577                           intcon	equ	0xFF2
  7578                           intcon2	equ	0xFF1
  7579                           postinc0	equ	0xFEE
  7580                           wreg	equ	0xFE8
  7581                           postdec1	equ	0xFE5
  7582                           fsr1l	equ	0xFE1
  7583                           indf2	equ	0xFDF
  7584                           postinc2	equ	0xFDE
  7585                           postdec2	equ	0xFDD
  7586                           fsr2h	equ	0xFDA
  7587                           fsr2l	equ	0xFD9
  7588                           status	equ	0xFD8
  7589                           
  7590 ;; *************** function _Rcmd1 *****************
  7591 ;; Defined at:
  7592 ;;		line 282 in file "ST7735_TFT.c"
  7593 ;; Parameters:    Size  Location     Type
  7594 ;;		None
  7595 ;; Auto vars:     Size  Location     Type
  7596 ;;		None
  7597 ;; Return value:  Size  Location     Type
  7598 ;;		None               void
  7599 ;; Registers used:
  7600 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7601 ;; Tracked objects:
  7602 ;;		On entry : 0/0
  7603 ;;		On exit  : 0/0
  7604 ;;		Unchanged: 0/0
  7605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7606 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7607 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7608 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7609 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7610 ;;Total ram usage:        0 bytes
  7611 ;; Hardware stack levels used:    1
  7612 ;; Hardware stack levels required when called:    5
  7613 ;; This function calls:
  7614 ;;		_delay_ms
  7615 ;;		_write_command
  7616 ;;		_write_data
  7617 ;; This function is called by:
  7618 ;;		_TFT_GreenTab_Initialize
  7619 ;;		_TFT_BlackTab_Initialize
  7620 ;; This function uses a non-reentrant model
  7621 ;;
  7622                           
  7623                           	psect	text30
  7624  0011A8                     __ptext30:
  7625                           	opt stack 0
  7626  0011A8                     _Rcmd1:
  7627                           	opt stack 23
  7628                           
  7629                           ;ST7735_TFT.c: 284: write_command(0x01);
  7630                           
  7631                           ;incstack = 0
  7632  0011A8  0E01               	movlw	1
  7633  0011AA  EC75  F012         	call	_write_command
  7634                           
  7635                           ;ST7735_TFT.c: 285: delay_ms(150);
  7636  0011AE  0E00               	movlw	0
  7637  0011B0  6E18               	movwf	delay_ms@ms+1,c
  7638  0011B2  0E96               	movlw	150
  7639  0011B4  6E17               	movwf	delay_ms@ms,c
  7640  0011B6  EC6B  F00F         	call	_delay_ms	;wreg free
  7641                           
  7642                           ;ST7735_TFT.c: 286: write_command(0x11);
  7643  0011BA  0E11               	movlw	17
  7644  0011BC  EC75  F012         	call	_write_command
  7645                           
  7646                           ;ST7735_TFT.c: 287: delay_ms(500);
  7647  0011C0  0E01               	movlw	1
  7648  0011C2  6E18               	movwf	delay_ms@ms+1,c
  7649  0011C4  0EF4               	movlw	244
  7650  0011C6  6E17               	movwf	delay_ms@ms,c
  7651  0011C8  EC6B  F00F         	call	_delay_ms	;wreg free
  7652                           
  7653                           ;ST7735_TFT.c: 288: write_command(0xB1);
  7654  0011CC  0EB1               	movlw	177
  7655  0011CE  EC75  F012         	call	_write_command
  7656                           
  7657                           ;ST7735_TFT.c: 289: write_data(0x01);
  7658  0011D2  0E01               	movlw	1
  7659  0011D4  EC6D  F012         	call	_write_data
  7660                           
  7661                           ;ST7735_TFT.c: 290: write_data(0x2C);
  7662  0011D8  0E2C               	movlw	44
  7663  0011DA  EC6D  F012         	call	_write_data
  7664                           
  7665                           ;ST7735_TFT.c: 291: write_data(0x2D);
  7666  0011DE  0E2D               	movlw	45
  7667  0011E0  EC6D  F012         	call	_write_data
  7668                           
  7669                           ;ST7735_TFT.c: 292: write_command(0xB2);
  7670  0011E4  0EB2               	movlw	178
  7671  0011E6  EC75  F012         	call	_write_command
  7672                           
  7673                           ;ST7735_TFT.c: 293: write_data(0x01);
  7674  0011EA  0E01               	movlw	1
  7675  0011EC  EC6D  F012         	call	_write_data
  7676                           
  7677                           ;ST7735_TFT.c: 294: write_data(0x2C);
  7678  0011F0  0E2C               	movlw	44
  7679  0011F2  EC6D  F012         	call	_write_data
  7680                           
  7681                           ;ST7735_TFT.c: 295: write_data(0x2D);
  7682  0011F6  0E2D               	movlw	45
  7683  0011F8  EC6D  F012         	call	_write_data
  7684                           
  7685                           ;ST7735_TFT.c: 296: write_command(0xB3);
  7686  0011FC  0EB3               	movlw	179
  7687  0011FE  EC75  F012         	call	_write_command
  7688                           
  7689                           ;ST7735_TFT.c: 297: write_data(0x01);
  7690  001202  0E01               	movlw	1
  7691  001204  EC6D  F012         	call	_write_data
  7692                           
  7693                           ;ST7735_TFT.c: 298: write_data(0x2C);
  7694  001208  0E2C               	movlw	44
  7695  00120A  EC6D  F012         	call	_write_data
  7696                           
  7697                           ;ST7735_TFT.c: 299: write_data(0x2D);
  7698  00120E  0E2D               	movlw	45
  7699  001210  EC6D  F012         	call	_write_data
  7700                           
  7701                           ;ST7735_TFT.c: 300: write_data(0x01);
  7702  001214  0E01               	movlw	1
  7703  001216  EC6D  F012         	call	_write_data
  7704                           
  7705                           ;ST7735_TFT.c: 301: write_data(0x2C);
  7706  00121A  0E2C               	movlw	44
  7707  00121C  EC6D  F012         	call	_write_data
  7708                           
  7709                           ;ST7735_TFT.c: 302: write_data(0x2D);
  7710  001220  0E2D               	movlw	45
  7711  001222  EC6D  F012         	call	_write_data
  7712                           
  7713                           ;ST7735_TFT.c: 303: write_command(0xB4);
  7714  001226  0EB4               	movlw	180
  7715  001228  EC75  F012         	call	_write_command
  7716                           
  7717                           ;ST7735_TFT.c: 304: write_data(0x07);
  7718  00122C  0E07               	movlw	7
  7719  00122E  EC6D  F012         	call	_write_data
  7720                           
  7721                           ;ST7735_TFT.c: 305: write_command(0xC0);
  7722  001232  0EC0               	movlw	192
  7723  001234  EC75  F012         	call	_write_command
  7724                           
  7725                           ;ST7735_TFT.c: 306: write_data(0xA2);
  7726  001238  0EA2               	movlw	162
  7727  00123A  EC6D  F012         	call	_write_data
  7728                           
  7729                           ;ST7735_TFT.c: 307: write_data(0x02);
  7730  00123E  0E02               	movlw	2
  7731  001240  EC6D  F012         	call	_write_data
  7732                           
  7733                           ;ST7735_TFT.c: 308: write_data(0x84);
  7734  001244  0E84               	movlw	132
  7735  001246  EC6D  F012         	call	_write_data
  7736                           
  7737                           ;ST7735_TFT.c: 309: write_command(0xC1);
  7738  00124A  0EC1               	movlw	193
  7739  00124C  EC75  F012         	call	_write_command
  7740                           
  7741                           ;ST7735_TFT.c: 310: write_data(0xC5);
  7742  001250  0EC5               	movlw	197
  7743  001252  EC6D  F012         	call	_write_data
  7744                           
  7745                           ;ST7735_TFT.c: 311: write_command(0xC2);
  7746  001256  0EC2               	movlw	194
  7747  001258  EC75  F012         	call	_write_command
  7748                           
  7749                           ;ST7735_TFT.c: 312: write_data(0x0A);
  7750  00125C  0E0A               	movlw	10
  7751  00125E  EC6D  F012         	call	_write_data
  7752                           
  7753                           ;ST7735_TFT.c: 313: write_data(0x00);
  7754  001262  0E00               	movlw	0
  7755  001264  EC6D  F012         	call	_write_data
  7756                           
  7757                           ;ST7735_TFT.c: 314: write_command(0xC3);
  7758  001268  0EC3               	movlw	195
  7759  00126A  EC75  F012         	call	_write_command
  7760                           
  7761                           ;ST7735_TFT.c: 315: write_data(0x8A);
  7762  00126E  0E8A               	movlw	138
  7763  001270  EC6D  F012         	call	_write_data
  7764                           
  7765                           ;ST7735_TFT.c: 316: write_data(0x2A);
  7766  001274  0E2A               	movlw	42
  7767  001276  EC6D  F012         	call	_write_data
  7768                           
  7769                           ;ST7735_TFT.c: 317: write_command(0xC4);
  7770  00127A  0EC4               	movlw	196
  7771  00127C  EC75  F012         	call	_write_command
  7772                           
  7773                           ;ST7735_TFT.c: 318: write_data(0x8A);
  7774  001280  0E8A               	movlw	138
  7775  001282  EC6D  F012         	call	_write_data
  7776                           
  7777                           ;ST7735_TFT.c: 319: write_data(0xEE);
  7778  001286  0EEE               	movlw	238
  7779  001288  EC6D  F012         	call	_write_data
  7780                           
  7781                           ;ST7735_TFT.c: 320: write_command(0xC5);
  7782  00128C  0EC5               	movlw	197
  7783  00128E  EC75  F012         	call	_write_command
  7784                           
  7785                           ;ST7735_TFT.c: 321: write_data(0x0E);
  7786  001292  0E0E               	movlw	14
  7787  001294  EC6D  F012         	call	_write_data
  7788                           
  7789                           ;ST7735_TFT.c: 322: write_command(0x20);
  7790  001298  0E20               	movlw	32
  7791  00129A  EC75  F012         	call	_write_command
  7792                           
  7793                           ;ST7735_TFT.c: 323: write_command(0x36);
  7794  00129E  0E36               	movlw	54
  7795  0012A0  EC75  F012         	call	_write_command
  7796                           
  7797                           ;ST7735_TFT.c: 324: write_data(0xC8);
  7798  0012A4  0EC8               	movlw	200
  7799  0012A6  EC6D  F012         	call	_write_data
  7800                           
  7801                           ;ST7735_TFT.c: 325: write_command(0x3A);
  7802  0012AA  0E3A               	movlw	58
  7803  0012AC  EC75  F012         	call	_write_command
  7804                           
  7805                           ;ST7735_TFT.c: 326: write_data(0x05);
  7806  0012B0  0E05               	movlw	5
  7807  0012B2  EC6D  F012         	call	_write_data
  7808  0012B6  0012               	return		;funcret
  7809  0012B8                     __end_of_Rcmd1:
  7810                           	opt stack 0
  7811                           tblptru	equ	0xFF8
  7812                           tblptrh	equ	0xFF7
  7813                           tblptrl	equ	0xFF6
  7814                           tablat	equ	0xFF5
  7815                           prodh	equ	0xFF4
  7816                           prodl	equ	0xFF3
  7817                           intcon	equ	0xFF2
  7818                           intcon2	equ	0xFF1
  7819                           postinc0	equ	0xFEE
  7820                           wreg	equ	0xFE8
  7821                           postdec1	equ	0xFE5
  7822                           fsr1l	equ	0xFE1
  7823                           indf2	equ	0xFDF
  7824                           postinc2	equ	0xFDE
  7825                           postdec2	equ	0xFDD
  7826                           fsr2h	equ	0xFDA
  7827                           fsr2l	equ	0xFD9
  7828                           status	equ	0xFD8
  7829                           
  7830 ;; *************** function _write_data *****************
  7831 ;; Defined at:
  7832 ;;		line 210 in file "ST7735_TFT.c"
  7833 ;; Parameters:    Size  Location     Type
  7834 ;;  data_           1    wreg     unsigned char 
  7835 ;; Auto vars:     Size  Location     Type
  7836 ;;  data_           1   18[COMRAM] unsigned char 
  7837 ;; Return value:  Size  Location     Type
  7838 ;;		None               void
  7839 ;; Registers used:
  7840 ;;		wreg, status,2, cstack
  7841 ;; Tracked objects:
  7842 ;;		On entry : 0/0
  7843 ;;		On exit  : 0/0
  7844 ;;		Unchanged: 0/0
  7845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7846 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7847 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7848 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7849 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7850 ;;Total ram usage:        1 bytes
  7851 ;; Hardware stack levels used:    1
  7852 ;; Hardware stack levels required when called:    4
  7853 ;; This function calls:
  7854 ;;		_spiwrite
  7855 ;; This function is called by:
  7856 ;;		_Rcmd1
  7857 ;;		_Rcmd2red
  7858 ;;		_Rcmd3
  7859 ;;		_setAddrWindow
  7860 ;;		_drawPixel
  7861 ;;		_TFT_GreenTab_Initialize
  7862 ;;		_Bcmd
  7863 ;;		_setScrollDefinition
  7864 ;;		_Rcmd2green
  7865 ;;		_VerticalScroll
  7866 ;; This function uses a non-reentrant model
  7867 ;;
  7868                           
  7869                           	psect	text31
  7870  0024DA                     __ptext31:
  7871                           	opt stack 0
  7872  0024DA                     _write_data:
  7873                           	opt stack 20
  7874                           
  7875                           ;incstack = 0
  7876                           ;write_data@data_ stored from wreg
  7877  0024DA  6E13               	movwf	write_data@data_,c
  7878                           
  7879                           ;ST7735_TFT.c: 212: PORTDbits.RD1 = 0;
  7880  0024DC  9283               	bcf	3971,1,c	;volatile
  7881                           
  7882                           ;ST7735_TFT.c: 213: PORTDbits.RD0 = 1;
  7883  0024DE  8083               	bsf	3971,0,c	;volatile
  7884                           
  7885                           ;ST7735_TFT.c: 214: spiwrite(data_);
  7886  0024E0  5013               	movf	write_data@data_,w,c
  7887  0024E2  EC24  F012         	call	_spiwrite
  7888                           
  7889                           ;ST7735_TFT.c: 215: PORTDbits.RD1 = 1;
  7890  0024E6  8283               	bsf	3971,1,c	;volatile
  7891  0024E8  0012               	return		;funcret
  7892  0024EA                     __end_of_write_data:
  7893                           	opt stack 0
  7894                           tblptru	equ	0xFF8
  7895                           tblptrh	equ	0xFF7
  7896                           tblptrl	equ	0xFF6
  7897                           tablat	equ	0xFF5
  7898                           prodh	equ	0xFF4
  7899                           prodl	equ	0xFF3
  7900                           intcon	equ	0xFF2
  7901                           intcon2	equ	0xFF1
  7902                           postinc0	equ	0xFEE
  7903                           wreg	equ	0xFE8
  7904                           postdec1	equ	0xFE5
  7905                           fsr1l	equ	0xFE1
  7906                           indf2	equ	0xFDF
  7907                           postinc2	equ	0xFDE
  7908                           postdec2	equ	0xFDD
  7909                           fsr2h	equ	0xFDA
  7910                           fsr2l	equ	0xFD9
  7911                           status	equ	0xFD8
  7912                           
  7913 ;; *************** function _write_command *****************
  7914 ;; Defined at:
  7915 ;;		line 199 in file "ST7735_TFT.c"
  7916 ;; Parameters:    Size  Location     Type
  7917 ;;  cmd_            1    wreg     unsigned char 
  7918 ;; Auto vars:     Size  Location     Type
  7919 ;;  cmd_            1   18[COMRAM] unsigned char 
  7920 ;; Return value:  Size  Location     Type
  7921 ;;		None               void
  7922 ;; Registers used:
  7923 ;;		wreg, status,2, cstack
  7924 ;; Tracked objects:
  7925 ;;		On entry : 0/0
  7926 ;;		On exit  : 0/0
  7927 ;;		Unchanged: 0/0
  7928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7929 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7930 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7931 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7932 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7933 ;;Total ram usage:        1 bytes
  7934 ;; Hardware stack levels used:    1
  7935 ;; Hardware stack levels required when called:    4
  7936 ;; This function calls:
  7937 ;;		_spiwrite
  7938 ;; This function is called by:
  7939 ;;		_Rcmd1
  7940 ;;		_Rcmd2red
  7941 ;;		_Rcmd3
  7942 ;;		_setAddrWindow
  7943 ;;		_TFT_GreenTab_Initialize
  7944 ;;		_Bcmd
  7945 ;;		_setScrollDefinition
  7946 ;;		_Rcmd2green
  7947 ;;		_VerticalScroll
  7948 ;; This function uses a non-reentrant model
  7949 ;;
  7950                           
  7951                           	psect	text32
  7952  0024EA                     __ptext32:
  7953                           	opt stack 0
  7954  0024EA                     _write_command:
  7955                           	opt stack 20
  7956                           
  7957                           ;incstack = 0
  7958                           ;write_command@cmd_ stored from wreg
  7959  0024EA  6E13               	movwf	write_command@cmd_,c
  7960                           
  7961                           ;ST7735_TFT.c: 201: PORTDbits.RD1 = 0;
  7962  0024EC  9283               	bcf	3971,1,c	;volatile
  7963                           
  7964                           ;ST7735_TFT.c: 203: PORTDbits.RD0 = 0;
  7965  0024EE  9083               	bcf	3971,0,c	;volatile
  7966                           
  7967                           ;ST7735_TFT.c: 204: spiwrite(cmd_);
  7968  0024F0  5013               	movf	write_command@cmd_,w,c
  7969  0024F2  EC24  F012         	call	_spiwrite
  7970                           
  7971                           ;ST7735_TFT.c: 206: PORTDbits.RD1 = 1;
  7972  0024F6  8283               	bsf	3971,1,c	;volatile
  7973  0024F8  0012               	return		;funcret
  7974  0024FA                     __end_of_write_command:
  7975                           	opt stack 0
  7976                           tblptru	equ	0xFF8
  7977                           tblptrh	equ	0xFF7
  7978                           tblptrl	equ	0xFF6
  7979                           tablat	equ	0xFF5
  7980                           prodh	equ	0xFF4
  7981                           prodl	equ	0xFF3
  7982                           intcon	equ	0xFF2
  7983                           intcon2	equ	0xFF1
  7984                           postinc0	equ	0xFEE
  7985                           wreg	equ	0xFE8
  7986                           postdec1	equ	0xFE5
  7987                           fsr1l	equ	0xFE1
  7988                           indf2	equ	0xFDF
  7989                           postinc2	equ	0xFDE
  7990                           postdec2	equ	0xFDD
  7991                           fsr2h	equ	0xFDA
  7992                           fsr2l	equ	0xFD9
  7993                           status	equ	0xFD8
  7994                           
  7995 ;; *************** function _spiwrite *****************
  7996 ;; Defined at:
  7997 ;;		line 190 in file "ST7735_TFT.c"
  7998 ;; Parameters:    Size  Location     Type
  7999 ;;  spidata         1    wreg     unsigned char 
  8000 ;; Auto vars:     Size  Location     Type
  8001 ;;  spidata         1   17[COMRAM] unsigned char 
  8002 ;;  x               1   16[COMRAM] unsigned char 
  8003 ;; Return value:  Size  Location     Type
  8004 ;;		None               void
  8005 ;; Registers used:
  8006 ;;		wreg
  8007 ;; Tracked objects:
  8008 ;;		On entry : 0/0
  8009 ;;		On exit  : 0/0
  8010 ;;		Unchanged: 0/0
  8011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8012 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8013 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8014 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8015 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8016 ;;Total ram usage:        2 bytes
  8017 ;; Hardware stack levels used:    1
  8018 ;; Hardware stack levels required when called:    3
  8019 ;; This function calls:
  8020 ;;		Nothing
  8021 ;; This function is called by:
  8022 ;;		_write_command
  8023 ;;		_write_data
  8024 ;;		_drawFastVLine
  8025 ;;		_fillRectangle
  8026 ;;		_drawFastHLine
  8027 ;; This function uses a non-reentrant model
  8028 ;;
  8029                           
  8030                           	psect	text33
  8031  002448                     __ptext33:
  8032                           	opt stack 0
  8033  002448                     _spiwrite:
  8034                           	opt stack 22
  8035                           
  8036                           ;incstack = 0
  8037                           ;spiwrite@spidata stored from wreg
  8038  002448  6E12               	movwf	spiwrite@spidata,c
  8039                           
  8040                           ;ST7735_TFT.c: 192: char x;
  8041                           ;ST7735_TFT.c: 193: PIR1bits.SSPIF = 0;
  8042  00244A  969E               	bcf	3998,3,c	;volatile
  8043                           
  8044                           ;ST7735_TFT.c: 194: x = SSPBUF;
  8045  00244C  CFC9 F011          	movff	4041,spiwrite@x	;volatile
  8046                           
  8047                           ;ST7735_TFT.c: 195: SSPBUF = spidata;
  8048  002450  C012  FFC9         	movff	spiwrite@spidata,4041	;volatile
  8049                           
  8050                           ;ST7735_TFT.c: 196: while (!SSPSTATbits.BF);
  8051  002454  D000               	goto	l299
  8052  002456                     l299:
  8053  002456  A0C7               	btfss	4039,0,c	;volatile
  8054  002458  D7FE               	goto	l299
  8055  00245A  0012               	return		;funcret
  8056  00245C                     __end_of_spiwrite:
  8057                           	opt stack 0
  8058                           tblptru	equ	0xFF8
  8059                           tblptrh	equ	0xFF7
  8060                           tblptrl	equ	0xFF6
  8061                           tablat	equ	0xFF5
  8062                           prodh	equ	0xFF4
  8063                           prodl	equ	0xFF3
  8064                           intcon	equ	0xFF2
  8065                           intcon2	equ	0xFF1
  8066                           postinc0	equ	0xFEE
  8067                           wreg	equ	0xFE8
  8068                           postdec1	equ	0xFE5
  8069                           fsr1l	equ	0xFE1
  8070                           indf2	equ	0xFDF
  8071                           postinc2	equ	0xFDE
  8072                           postdec2	equ	0xFDD
  8073                           fsr2h	equ	0xFDA
  8074                           fsr2l	equ	0xFD9
  8075                           status	equ	0xFD8
  8076                           
  8077 ;; *************** function _LCD_Reset *****************
  8078 ;; Defined at:
  8079 ;;		line 218 in file "ST7735_TFT.c"
  8080 ;; Parameters:    Size  Location     Type
  8081 ;;		None
  8082 ;; Auto vars:     Size  Location     Type
  8083 ;;		None
  8084 ;; Return value:  Size  Location     Type
  8085 ;;		None               void
  8086 ;; Registers used:
  8087 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8088 ;; Tracked objects:
  8089 ;;		On entry : 0/0
  8090 ;;		On exit  : 0/0
  8091 ;;		Unchanged: 0/0
  8092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8093 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8094 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8095 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8096 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8097 ;;Total ram usage:        0 bytes
  8098 ;; Hardware stack levels used:    1
  8099 ;; Hardware stack levels required when called:    5
  8100 ;; This function calls:
  8101 ;;		_delay_ms
  8102 ;; This function is called by:
  8103 ;;		_Initialize_Screen
  8104 ;; This function uses a non-reentrant model
  8105 ;;
  8106                           
  8107                           	psect	text34
  8108  002470                     __ptext34:
  8109                           	opt stack 0
  8110  002470                     _LCD_Reset:
  8111                           	opt stack 24
  8112                           
  8113                           ;ST7735_TFT.c: 220: PORTDbits.RD2 = 0;
  8114                           
  8115                           ;incstack = 0
  8116  002470  9483               	bcf	3971,2,c	;volatile
  8117                           
  8118                           ;ST7735_TFT.c: 221: delay_ms(100);
  8119  002472  0E00               	movlw	0
  8120  002474  6E18               	movwf	delay_ms@ms+1,c
  8121  002476  0E64               	movlw	100
  8122  002478  6E17               	movwf	delay_ms@ms,c
  8123  00247A  EC6B  F00F         	call	_delay_ms	;wreg free
  8124                           
  8125                           ;ST7735_TFT.c: 222: PORTDbits.RD2 = 1;
  8126  00247E  8483               	bsf	3971,2,c	;volatile
  8127  002480  0012               	return		;funcret
  8128  002482                     __end_of_LCD_Reset:
  8129                           	opt stack 0
  8130                           tblptru	equ	0xFF8
  8131                           tblptrh	equ	0xFF7
  8132                           tblptrl	equ	0xFF6
  8133                           tablat	equ	0xFF5
  8134                           prodh	equ	0xFF4
  8135                           prodl	equ	0xFF3
  8136                           intcon	equ	0xFF2
  8137                           intcon2	equ	0xFF1
  8138                           postinc0	equ	0xFEE
  8139                           wreg	equ	0xFE8
  8140                           postdec1	equ	0xFE5
  8141                           fsr1l	equ	0xFE1
  8142                           indf2	equ	0xFDF
  8143                           postinc2	equ	0xFDE
  8144                           postdec2	equ	0xFDD
  8145                           fsr2h	equ	0xFDA
  8146                           fsr2l	equ	0xFD9
  8147                           status	equ	0xFD8
  8148                           
  8149 ;; *************** function _delay_ms *****************
  8150 ;; Defined at:
  8151 ;;		line 65 in file "ST7735_TFT.c"
  8152 ;; Parameters:    Size  Location     Type
  8153 ;;  ms              2   22[COMRAM] int 
  8154 ;; Auto vars:     Size  Location     Type
  8155 ;;  count           2   26[COMRAM] int 
  8156 ;; Return value:  Size  Location     Type
  8157 ;;		None               void
  8158 ;; Registers used:
  8159 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8160 ;; Tracked objects:
  8161 ;;		On entry : 0/0
  8162 ;;		On exit  : 0/0
  8163 ;;		Unchanged: 0/0
  8164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8165 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8166 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8167 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8168 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8169 ;;Total ram usage:        6 bytes
  8170 ;; Hardware stack levels used:    1
  8171 ;; Hardware stack levels required when called:    4
  8172 ;; This function calls:
  8173 ;;		___wmul
  8174 ;; This function is called by:
  8175 ;;		_LCD_Reset
  8176 ;;		_Rcmd1
  8177 ;;		_Rcmd3
  8178 ;;		_Bcmd
  8179 ;; This function uses a non-reentrant model
  8180 ;;
  8181                           
  8182                           	psect	text35
  8183  001ED6                     __ptext35:
  8184                           	opt stack 0
  8185  001ED6                     _delay_ms:
  8186                           	opt stack 23
  8187                           
  8188                           ;ST7735_TFT.c: 71: int count;
  8189                           ;ST7735_TFT.c: 72: count = 8000000/4000/16 * ms;
  8190                           
  8191                           ;incstack = 0
  8192  001ED6  C017  F011         	movff	delay_ms@ms,___wmul@multiplier
  8193  001EDA  C018  F012         	movff	delay_ms@ms+1,___wmul@multiplier+1
  8194  001EDE  0E00               	movlw	0
  8195  001EE0  6E14               	movwf	___wmul@multiplicand+1,c
  8196  001EE2  0E7D               	movlw	125
  8197  001EE4  6E13               	movwf	___wmul@multiplicand,c
  8198  001EE6  EC48  F011         	call	___wmul	;wreg free
  8199  001EEA  C011  F01B         	movff	?___wmul,delay_ms@count
  8200  001EEE  C012  F01C         	movff	?___wmul+1,delay_ms@count+1
  8201                           
  8202                           ;ST7735_TFT.c: 73: count = (0xffff - count);
  8203  001EF2  C01B  F019         	movff	delay_ms@count,??_delay_ms
  8204  001EF6  C01C  F01A         	movff	delay_ms@count+1,??_delay_ms+1
  8205  001EFA  1E19               	comf	??_delay_ms,f,c
  8206  001EFC  1E1A               	comf	??_delay_ms+1,f,c
  8207  001EFE  4A19               	infsnz	??_delay_ms,f,c
  8208  001F00  2A1A               	incf	??_delay_ms+1,f,c
  8209  001F02  0EFF               	movlw	255
  8210  001F04  2419               	addwf	??_delay_ms,w,c
  8211  001F06  6E1B               	movwf	delay_ms@count,c
  8212  001F08  0EFF               	movlw	255
  8213  001F0A  201A               	addwfc	??_delay_ms+1,w,c
  8214  001F0C  6E1C               	movwf	delay_ms@count+1,c
  8215                           
  8216                           ;ST7735_TFT.c: 75: T0CON = 0x03;
  8217  001F0E  0E03               	movlw	3
  8218  001F10  6ED5               	movwf	4053,c	;volatile
  8219                           
  8220                           ;ST7735_TFT.c: 77: TMR0L = count & 0x00ff;
  8221  001F12  C01B  FFD6         	movff	delay_ms@count,4054	;volatile
  8222                           
  8223                           ;ST7735_TFT.c: 78: TMR0H = count >> 8;
  8224  001F16  501C               	movf	delay_ms@count+1,w,c
  8225  001F18  6ED7               	movwf	4055,c	;volatile
  8226                           
  8227                           ;ST7735_TFT.c: 80: INTCONbits.TMR0IF = 0;
  8228  001F1A  94F2               	bcf	intcon,2,c	;volatile
  8229                           
  8230                           ;ST7735_TFT.c: 81: T0CONbits.TMR0ON = 1;
  8231  001F1C  8ED5               	bsf	4053,7,c	;volatile
  8232                           
  8233                           ;ST7735_TFT.c: 83: while (INTCONbits.TMR0IF == 0);
  8234  001F1E  D000               	goto	l289
  8235  001F20                     l289:
  8236  001F20  A4F2               	btfss	intcon,2,c	;volatile
  8237  001F22  D7FE               	goto	l289
  8238                           
  8239                           ;ST7735_TFT.c: 84: T0CONbits.TMR0ON = 0;
  8240  001F24  9ED5               	bcf	4053,7,c	;volatile
  8241  001F26  0012               	return		;funcret
  8242  001F28                     __end_of_delay_ms:
  8243                           	opt stack 0
  8244                           tblptru	equ	0xFF8
  8245                           tblptrh	equ	0xFF7
  8246                           tblptrl	equ	0xFF6
  8247                           tablat	equ	0xFF5
  8248                           prodh	equ	0xFF4
  8249                           prodl	equ	0xFF3
  8250                           intcon	equ	0xFF2
  8251                           intcon2	equ	0xFF1
  8252                           postinc0	equ	0xFEE
  8253                           wreg	equ	0xFE8
  8254                           postdec1	equ	0xFE5
  8255                           fsr1l	equ	0xFE1
  8256                           indf2	equ	0xFDF
  8257                           postinc2	equ	0xFDE
  8258                           postdec2	equ	0xFDD
  8259                           fsr2h	equ	0xFDA
  8260                           fsr2l	equ	0xFD9
  8261                           status	equ	0xFD8
  8262                           
  8263 ;; *************** function ___wmul *****************
  8264 ;; Defined at:
  8265 ;;		line 15 in file "E:\XC8\sources\common\Umul16.c"
  8266 ;; Parameters:    Size  Location     Type
  8267 ;;  multiplier      2   16[COMRAM] unsigned int 
  8268 ;;  multiplicand    2   18[COMRAM] unsigned int 
  8269 ;; Auto vars:     Size  Location     Type
  8270 ;;  product         2   20[COMRAM] unsigned int 
  8271 ;; Return value:  Size  Location     Type
  8272 ;;                  2   16[COMRAM] unsigned int 
  8273 ;; Registers used:
  8274 ;;		wreg, status,2, status,0, prodl, prodh
  8275 ;; Tracked objects:
  8276 ;;		On entry : 0/0
  8277 ;;		On exit  : 0/0
  8278 ;;		Unchanged: 0/0
  8279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8280 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8281 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8282 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8283 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8284 ;;Total ram usage:        6 bytes
  8285 ;; Hardware stack levels used:    1
  8286 ;; Hardware stack levels required when called:    3
  8287 ;; This function calls:
  8288 ;;		Nothing
  8289 ;; This function is called by:
  8290 ;;		_delay_ms
  8291 ;;		_drawChar
  8292 ;;		_get_RPM
  8293 ;;		_main
  8294 ;;		_printf
  8295 ;; This function uses a non-reentrant model
  8296 ;;
  8297                           
  8298                           	psect	text36
  8299  002290                     __ptext36:
  8300                           	opt stack 0
  8301  002290                     ___wmul:
  8302                           	opt stack 26
  8303                           
  8304                           ;incstack = 0
  8305  002290  5011               	movf	___wmul@multiplier,w,c
  8306  002292  0213               	mulwf	___wmul@multiplicand,c
  8307  002294  CFF3 F015          	movff	prodl,___wmul@product
  8308  002298  CFF4 F016          	movff	prodh,___wmul@product+1
  8309  00229C  5011               	movf	___wmul@multiplier,w,c
  8310  00229E  0214               	mulwf	___wmul@multiplicand+1,c
  8311  0022A0  50F3               	movf	prodl,w,c
  8312  0022A2  2616               	addwf	___wmul@product+1,f,c
  8313  0022A4  5012               	movf	___wmul@multiplier+1,w,c
  8314  0022A6  0213               	mulwf	___wmul@multiplicand,c
  8315  0022A8  50F3               	movf	prodl,w,c
  8316  0022AA  2616               	addwf	___wmul@product+1,f,c
  8317  0022AC  C015  F011         	movff	___wmul@product,?___wmul
  8318  0022B0  C016  F012         	movff	___wmul@product+1,?___wmul+1
  8319  0022B4  D000               	goto	l782
  8320  0022B6                     l782:
  8321  0022B6  0012               	return		;funcret
  8322  0022B8                     __end_of___wmul:
  8323                           	opt stack 0
  8324                           tblptru	equ	0xFF8
  8325                           tblptrh	equ	0xFF7
  8326                           tblptrl	equ	0xFF6
  8327                           tablat	equ	0xFF5
  8328                           prodh	equ	0xFF4
  8329                           prodl	equ	0xFF3
  8330                           intcon	equ	0xFF2
  8331                           intcon2	equ	0xFF1
  8332                           postinc0	equ	0xFEE
  8333                           wreg	equ	0xFE8
  8334                           postdec1	equ	0xFE5
  8335                           fsr1l	equ	0xFE1
  8336                           indf2	equ	0xFDF
  8337                           postinc2	equ	0xFDE
  8338                           postdec2	equ	0xFDD
  8339                           fsr2h	equ	0xFDA
  8340                           fsr2l	equ	0xFD9
  8341                           status	equ	0xFD8
  8342                           
  8343 ;; *************** function _Increase_Speed *****************
  8344 ;; Defined at:
  8345 ;;		line 53 in file "Fan_Support.c"
  8346 ;; Parameters:    Size  Location     Type
  8347 ;;		None
  8348 ;; Auto vars:     Size  Location     Type
  8349 ;;		None
  8350 ;; Return value:  Size  Location     Type
  8351 ;;		None               void
  8352 ;; Registers used:
  8353 ;;		wreg, status,2, status,0, cstack
  8354 ;; Tracked objects:
  8355 ;;		On entry : 0/0
  8356 ;;		On exit  : 0/0
  8357 ;;		Unchanged: 0/0
  8358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8359 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8360 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8361 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8362 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8363 ;;Total ram usage:        0 bytes
  8364 ;; Hardware stack levels used:    1
  8365 ;; Hardware stack levels required when called:    7
  8366 ;; This function calls:
  8367 ;;		_Do_Beep
  8368 ;;		_do_update_pwm
  8369 ;; This function is called by:
  8370 ;;		_main
  8371 ;; This function uses a non-reentrant model
  8372 ;;
  8373                           
  8374                           	psect	text37
  8375  0022B8                     __ptext37:
  8376                           	opt stack 0
  8377  0022B8                     _Increase_Speed:
  8378                           	opt stack 23
  8379                           
  8380                           ;Fan_Support.c: 55: if (duty_cycle==100)
  8381                           
  8382                           ;incstack = 0
  8383  0022B8  0E64               	movlw	100
  8384  0022BA  185C               	xorwf	_duty_cycle,w,c
  8385  0022BC  A4D8               	btfss	status,2,c
  8386  0022BE  D008               	goto	l6524
  8387                           
  8388                           ;Fan_Support.c: 56: {
  8389                           ;Fan_Support.c: 57: Do_Beep();
  8390  0022C0  EC03  F012         	call	_Do_Beep	;wreg free
  8391                           
  8392                           ;Fan_Support.c: 58: Do_Beep();
  8393  0022C4  EC03  F012         	call	_Do_Beep	;wreg free
  8394                           
  8395                           ;Fan_Support.c: 59: do_update_pwm(duty_cycle);
  8396  0022C8  505C               	movf	_duty_cycle,w,c
  8397  0022CA  EC8B  F00C         	call	_do_update_pwm
  8398                           
  8399                           ;Fan_Support.c: 60: }
  8400  0022CE  D007               	goto	l494
  8401  0022D0                     l6524:
  8402                           
  8403                           ;Fan_Support.c: 61: else
  8404                           ;Fan_Support.c: 62: {
  8405                           ;Fan_Support.c: 63: duty_cycle = duty_cycle + 5;
  8406  0022D0  505C               	movf	_duty_cycle,w,c
  8407  0022D2  0F05               	addlw	5
  8408  0022D4  6E5C               	movwf	_duty_cycle,c
  8409                           
  8410                           ;Fan_Support.c: 64: do_update_pwm(duty_cycle);
  8411  0022D6  505C               	movf	_duty_cycle,w,c
  8412  0022D8  EC8B  F00C         	call	_do_update_pwm
  8413  0022DC  D000               	goto	l494
  8414  0022DE                     l494:
  8415  0022DE  0012               	return		;funcret
  8416  0022E0                     __end_of_Increase_Speed:
  8417                           	opt stack 0
  8418                           tblptru	equ	0xFF8
  8419                           tblptrh	equ	0xFF7
  8420                           tblptrl	equ	0xFF6
  8421                           tablat	equ	0xFF5
  8422                           prodh	equ	0xFF4
  8423                           prodl	equ	0xFF3
  8424                           intcon	equ	0xFF2
  8425                           intcon2	equ	0xFF1
  8426                           postinc0	equ	0xFEE
  8427                           wreg	equ	0xFE8
  8428                           postdec1	equ	0xFE5
  8429                           fsr1l	equ	0xFE1
  8430                           indf2	equ	0xFDF
  8431                           postinc2	equ	0xFDE
  8432                           postdec2	equ	0xFDD
  8433                           fsr2h	equ	0xFDA
  8434                           fsr2l	equ	0xFD9
  8435                           status	equ	0xFD8
  8436                           
  8437 ;; *************** function _Do_Init *****************
  8438 ;; Defined at:
  8439 ;;		line 95 in file "Lab11pA_Restart.c"
  8440 ;; Parameters:    Size  Location     Type
  8441 ;;		None
  8442 ;; Auto vars:     Size  Location     Type
  8443 ;;		None
  8444 ;; Return value:  Size  Location     Type
  8445 ;;		None               void
  8446 ;; Registers used:
  8447 ;;		wreg, status,2, status,0, cstack
  8448 ;; Tracked objects:
  8449 ;;		On entry : 0/0
  8450 ;;		On exit  : 0/0
  8451 ;;		Unchanged: 0/0
  8452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8453 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8454 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8455 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8456 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8457 ;;Total ram usage:        0 bytes
  8458 ;; Hardware stack levels used:    1
  8459 ;; Hardware stack levels required when called:    7
  8460 ;; This function calls:
  8461 ;;		_DS1621_Init
  8462 ;;		_I2C_Init
  8463 ;;		_init_INTERRUPT
  8464 ;;		_init_UART
  8465 ;; This function is called by:
  8466 ;;		_main
  8467 ;; This function uses a non-reentrant model
  8468 ;;
  8469                           
  8470                           	psect	text38
  8471  00200C                     __ptext38:
  8472                           	opt stack 0
  8473  00200C                     _Do_Init:
  8474                           	opt stack 23
  8475                           
  8476                           ;Lab11pA_Restart.c: 97: init_UART();
  8477                           
  8478                           ;incstack = 0
  8479  00200C  EC2E  F012         	call	_init_UART	;wreg free
  8480                           
  8481                           ;Lab11pA_Restart.c: 98: OSCCON=0x70;
  8482  002010  0E70               	movlw	112
  8483  002012  6ED3               	movwf	4051,c	;volatile
  8484                           
  8485                           ;Lab11pA_Restart.c: 100: ADCON1=0x0F;
  8486  002014  0E0F               	movlw	15
  8487  002016  6EC1               	movwf	4033,c	;volatile
  8488                           
  8489                           ;Lab11pA_Restart.c: 101: TRISA = 0x00;
  8490  002018  0E00               	movlw	0
  8491  00201A  6E92               	movwf	3986,c	;volatile
  8492                           
  8493                           ;Lab11pA_Restart.c: 102: TRISB = 0x01;
  8494  00201C  0E01               	movlw	1
  8495  00201E  6E93               	movwf	3987,c	;volatile
  8496                           
  8497                           ;Lab11pA_Restart.c: 103: TRISC = 0x02;
  8498  002020  0E02               	movlw	2
  8499  002022  6E94               	movwf	3988,c	;volatile
  8500                           
  8501                           ;Lab11pA_Restart.c: 104: TRISD = 0x00;
  8502  002024  0E00               	movlw	0
  8503  002026  6E95               	movwf	3989,c	;volatile
  8504                           
  8505                           ;Lab11pA_Restart.c: 107: RBPU=0;
  8506  002028  9EF1               	bcf	intcon2,7,c	;volatile
  8507                           
  8508                           ;Lab11pA_Restart.c: 108: TMR3L = 0x00;
  8509  00202A  0E00               	movlw	0
  8510  00202C  6EB2               	movwf	4018,c	;volatile
  8511                           
  8512                           ;Lab11pA_Restart.c: 109: T3CON = 0x03;
  8513  00202E  0E03               	movlw	3
  8514  002030  6EB1               	movwf	4017,c	;volatile
  8515                           
  8516                           ;Lab11pA_Restart.c: 110: I2C_Init(100000);
  8517  002032  0EA0               	movlw	160
  8518  002034  6E11               	movwf	I2C_Init@c,c
  8519  002036  0E86               	movlw	134
  8520  002038  6E12               	movwf	I2C_Init@c+1,c
  8521  00203A  0E01               	movlw	1
  8522  00203C  6E13               	movwf	I2C_Init@c+2,c
  8523  00203E  0E00               	movlw	0
  8524  002040  6E14               	movwf	I2C_Init@c+3,c
  8525  002042  EC95  F012         	call	_I2C_Init	;wreg free
  8526                           
  8527                           ;Lab11pA_Restart.c: 112: DS1621_Init();
  8528  002046  ECD9  F011         	call	_DS1621_Init	;wreg free
  8529                           
  8530                           ;Lab11pA_Restart.c: 113: init_INTERRUPT();
  8531  00204A  ECE8  F010         	call	_init_INTERRUPT	;wreg free
  8532                           
  8533                           ;Lab11pA_Restart.c: 114: FAN = 0;
  8534  00204E  0E00               	movlw	0
  8535  002050  6E50               	movwf	_FAN,c
  8536  002052  0012               	return		;funcret
  8537  002054                     __end_of_Do_Init:
  8538                           	opt stack 0
  8539                           tblptru	equ	0xFF8
  8540                           tblptrh	equ	0xFF7
  8541                           tblptrl	equ	0xFF6
  8542                           tablat	equ	0xFF5
  8543                           prodh	equ	0xFF4
  8544                           prodl	equ	0xFF3
  8545                           intcon	equ	0xFF2
  8546                           intcon2	equ	0xFF1
  8547                           postinc0	equ	0xFEE
  8548                           wreg	equ	0xFE8
  8549                           postdec1	equ	0xFE5
  8550                           fsr1l	equ	0xFE1
  8551                           indf2	equ	0xFDF
  8552                           postinc2	equ	0xFDE
  8553                           postdec2	equ	0xFDD
  8554                           fsr2h	equ	0xFDA
  8555                           fsr2l	equ	0xFD9
  8556                           status	equ	0xFD8
  8557                           
  8558 ;; *************** function _init_UART *****************
  8559 ;; Defined at:
  8560 ;;		line 89 in file "Lab11pA_Restart.c"
  8561 ;; Parameters:    Size  Location     Type
  8562 ;;		None
  8563 ;; Auto vars:     Size  Location     Type
  8564 ;;		None
  8565 ;; Return value:  Size  Location     Type
  8566 ;;		None               void
  8567 ;; Registers used:
  8568 ;;		wreg, status,2, cstack
  8569 ;; Tracked objects:
  8570 ;;		On entry : 0/0
  8571 ;;		On exit  : 0/0
  8572 ;;		Unchanged: 0/0
  8573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8574 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8575 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8576 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8577 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8578 ;;Total ram usage:        0 bytes
  8579 ;; Hardware stack levels used:    1
  8580 ;; Hardware stack levels required when called:    4
  8581 ;; This function calls:
  8582 ;;		_OpenUSART
  8583 ;; This function is called by:
  8584 ;;		_Do_Init
  8585 ;; This function uses a non-reentrant model
  8586 ;;
  8587                           
  8588                           	psect	text39
  8589  00245C                     __ptext39:
  8590                           	opt stack 0
  8591  00245C                     _init_UART:
  8592                           	opt stack 25
  8593                           
  8594                           ;Lab11pA_Restart.c: 91: OpenUSART (0b01111111 & 0b10111111 & 0b11111110 & 0b11111101 & 0
      +                          b11111111 & 0b11111111, 25);
  8595                           
  8596                           ;incstack = 0
  8597  00245C  0E00               	movlw	0
  8598  00245E  6E12               	movwf	OpenUSART@spbrg+1,c
  8599  002460  0E19               	movlw	25
  8600  002462  6E11               	movwf	OpenUSART@spbrg,c
  8601  002464  0E3C               	movlw	60
  8602  002466  EC34  F00E         	call	_OpenUSART
  8603                           
  8604                           ;Lab11pA_Restart.c: 92: OSCCON = 0x70;
  8605  00246A  0E70               	movlw	112
  8606  00246C  6ED3               	movwf	4051,c	;volatile
  8607  00246E  0012               	return		;funcret
  8608  002470                     __end_of_init_UART:
  8609                           	opt stack 0
  8610                           tblptru	equ	0xFF8
  8611                           tblptrh	equ	0xFF7
  8612                           tblptrl	equ	0xFF6
  8613                           tablat	equ	0xFF5
  8614                           prodh	equ	0xFF4
  8615                           prodl	equ	0xFF3
  8616                           intcon	equ	0xFF2
  8617                           intcon2	equ	0xFF1
  8618                           postinc0	equ	0xFEE
  8619                           wreg	equ	0xFE8
  8620                           postdec1	equ	0xFE5
  8621                           fsr1l	equ	0xFE1
  8622                           indf2	equ	0xFDF
  8623                           postinc2	equ	0xFDE
  8624                           postdec2	equ	0xFDD
  8625                           fsr2h	equ	0xFDA
  8626                           fsr2l	equ	0xFD9
  8627                           status	equ	0xFD8
  8628                           
  8629 ;; *************** function _OpenUSART *****************
  8630 ;; Defined at:
  8631 ;;		line 73 in file "E:\XC8\sources\pic18\plib\USART\uopen.c"
  8632 ;; Parameters:    Size  Location     Type
  8633 ;;  config          1    wreg     unsigned char 
  8634 ;;  spbrg           2   16[COMRAM] unsigned int 
  8635 ;; Auto vars:     Size  Location     Type
  8636 ;;  config          1   18[COMRAM] unsigned char 
  8637 ;; Return value:  Size  Location     Type
  8638 ;;		None               void
  8639 ;; Registers used:
  8640 ;;		wreg, status,2
  8641 ;; Tracked objects:
  8642 ;;		On entry : 0/0
  8643 ;;		On exit  : 0/0
  8644 ;;		Unchanged: 0/0
  8645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8646 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8647 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8648 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8649 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8650 ;;Total ram usage:        3 bytes
  8651 ;; Hardware stack levels used:    1
  8652 ;; Hardware stack levels required when called:    3
  8653 ;; This function calls:
  8654 ;;		Nothing
  8655 ;; This function is called by:
  8656 ;;		_init_UART
  8657 ;; This function uses a non-reentrant model
  8658 ;;
  8659                           
  8660                           	psect	text40
  8661  001C68                     __ptext40:
  8662                           	opt stack 0
  8663  001C68                     _OpenUSART:
  8664                           	opt stack 25
  8665                           
  8666                           ;incstack = 0
  8667                           ;OpenUSART@config stored from wreg
  8668  001C68  6E13               	movwf	OpenUSART@config,c
  8669  001C6A  0E00               	movlw	0
  8670  001C6C  6EAC               	movwf	4012,c	;volatile
  8671  001C6E  0E00               	movlw	0
  8672  001C70  6EAB               	movwf	4011,c	;volatile
  8673  001C72  A013               	btfss	OpenUSART@config,0,c
  8674  001C74  D002               	goto	l5858
  8675  001C76  88AC               	bsf	4012,4,c	;volatile
  8676  001C78  D000               	goto	l5858
  8677  001C7A                     l5858:
  8678  001C7A  A213               	btfss	OpenUSART@config,1,c
  8679  001C7C  D003               	goto	l5862
  8680  001C7E  8CAC               	bsf	4012,6,c	;volatile
  8681  001C80  8CAB               	bsf	4011,6,c	;volatile
  8682  001C82  D000               	goto	l5862
  8683  001C84                     l5862:
  8684  001C84  A413               	btfss	OpenUSART@config,2,c
  8685  001C86  D002               	goto	l5866
  8686  001C88  8EAC               	bsf	4012,7,c	;volatile
  8687  001C8A  D000               	goto	l5866
  8688  001C8C                     l5866:
  8689  001C8C  A613               	btfss	OpenUSART@config,3,c
  8690  001C8E  D002               	goto	l770
  8691  001C90  88AB               	bsf	4011,4,c	;volatile
  8692  001C92  D002               	goto	l5870
  8693  001C94                     l770:
  8694  001C94  8AAB               	bsf	4011,5,c	;volatile
  8695  001C96  D000               	goto	l5870
  8696  001C98                     l5870:
  8697  001C98  B813               	btfsc	OpenUSART@config,4,c
  8698  001C9A  84AC               	bsf	4012,2,c	;volatile
  8699  001C9C  989E               	bcf	3998,4,c	;volatile
  8700  001C9E  AA13               	btfss	OpenUSART@config,5,c
  8701  001CA0  D002               	goto	l5878
  8702  001CA2  86AB               	bsf	4011,3,c	;volatile
  8703  001CA4  D000               	goto	l5878
  8704  001CA6                     l5878:
  8705  001CA6  AC13               	btfss	OpenUSART@config,6,c
  8706  001CA8  D002               	goto	l774
  8707  001CAA  8A9D               	bsf	3997,5,c	;volatile
  8708  001CAC  D001               	goto	l775
  8709  001CAE                     l774:
  8710  001CAE  9A9D               	bcf	3997,5,c	;volatile
  8711  001CB0                     l775:
  8712  001CB0  9A9E               	bcf	3998,5,c	;volatile
  8713  001CB2  AE13               	btfss	OpenUSART@config,7,c
  8714  001CB4  D002               	goto	l776
  8715  001CB6  889D               	bsf	3997,4,c	;volatile
  8716  001CB8  D001               	goto	l777
  8717  001CBA                     l776:
  8718  001CBA  989D               	bcf	3997,4,c	;volatile
  8719  001CBC                     l777:
  8720  001CBC  C011  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  8721  001CC0  5012               	movf	OpenUSART@spbrg+1,w,c
  8722  001CC2  6EB0               	movwf	4016,c	;volatile
  8723  001CC4  8AAC               	bsf	4012,5,c	;volatile
  8724  001CC6  8EAB               	bsf	4011,7,c	;volatile
  8725  001CC8  9C94               	bcf	3988,6,c	;volatile
  8726  001CCA  8E94               	bsf	3988,7,c	;volatile
  8727  001CCC  B8AC               	btfsc	4012,4,c	;volatile
  8728  001CCE  BEAC               	btfsc	4012,7,c	;volatile
  8729  001CD0  D002               	goto	l779
  8730  001CD2  8C94               	bsf	3988,6,c	;volatile
  8731  001CD4  D000               	goto	l779
  8732  001CD6                     l779:
  8733  001CD6  0012               	return		;funcret
  8734  001CD8                     __end_of_OpenUSART:
  8735                           	opt stack 0
  8736                           tblptru	equ	0xFF8
  8737                           tblptrh	equ	0xFF7
  8738                           tblptrl	equ	0xFF6
  8739                           tablat	equ	0xFF5
  8740                           prodh	equ	0xFF4
  8741                           prodl	equ	0xFF3
  8742                           intcon	equ	0xFF2
  8743                           intcon2	equ	0xFF1
  8744                           postinc0	equ	0xFEE
  8745                           wreg	equ	0xFE8
  8746                           postdec1	equ	0xFE5
  8747                           fsr1l	equ	0xFE1
  8748                           indf2	equ	0xFDF
  8749                           postinc2	equ	0xFDE
  8750                           postdec2	equ	0xFDD
  8751                           fsr2h	equ	0xFDA
  8752                           fsr2l	equ	0xFD9
  8753                           status	equ	0xFD8
  8754                           
  8755 ;; *************** function _init_INTERRUPT *****************
  8756 ;; Defined at:
  8757 ;;		line 15 in file "Interrupt.c"
  8758 ;; Parameters:    Size  Location     Type
  8759 ;;		None
  8760 ;; Auto vars:     Size  Location     Type
  8761 ;;		None
  8762 ;; Return value:  Size  Location     Type
  8763 ;;		None               void
  8764 ;; Registers used:
  8765 ;;		wreg, status,2
  8766 ;; Tracked objects:
  8767 ;;		On entry : 0/0
  8768 ;;		On exit  : 0/0
  8769 ;;		Unchanged: 0/0
  8770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8771 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8772 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8773 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8774 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8775 ;;Total ram usage:        0 bytes
  8776 ;; Hardware stack levels used:    1
  8777 ;; Hardware stack levels required when called:    3
  8778 ;; This function calls:
  8779 ;;		Nothing
  8780 ;; This function is called by:
  8781 ;;		_Do_Init
  8782 ;; This function uses a non-reentrant model
  8783 ;;
  8784                           
  8785                           	psect	text41
  8786  0021D0                     __ptext41:
  8787                           	opt stack 0
  8788  0021D0                     _init_INTERRUPT:
  8789                           	opt stack 26
  8790                           
  8791                           ;Interrupt.c: 17: INTCONbits.INT0IF = 0;
  8792                           
  8793                           ;incstack = 0
  8794  0021D0  92F2               	bcf	intcon,1,c	;volatile
  8795                           
  8796                           ;Interrupt.c: 18: INTCON2bits.INTEDG0 = 0;
  8797  0021D2  9CF1               	bcf	intcon2,6,c	;volatile
  8798                           
  8799                           ;Interrupt.c: 19: INTCONbits.INT0IE = 1;
  8800  0021D4  88F2               	bsf	intcon,4,c	;volatile
  8801                           
  8802                           ;Interrupt.c: 20: TMR1H = 0;
  8803  0021D6  0E00               	movlw	0
  8804  0021D8  6ECF               	movwf	4047,c	;volatile
  8805                           
  8806                           ;Interrupt.c: 21: TMR1L = 0;
  8807  0021DA  0E00               	movlw	0
  8808  0021DC  6ECE               	movwf	4046,c	;volatile
  8809                           
  8810                           ;Interrupt.c: 22: PIR1bits.TMR1IF = 0;
  8811  0021DE  909E               	bcf	3998,0,c	;volatile
  8812                           
  8813                           ;Interrupt.c: 23: PIE1bits.TMR1IE = 1;
  8814  0021E0  809D               	bsf	3997,0,c	;volatile
  8815                           
  8816                           ;Interrupt.c: 24: INTCONbits.PEIE = 1;
  8817  0021E2  8CF2               	bsf	intcon,6,c	;volatile
  8818                           
  8819                           ;Interrupt.c: 25: INTCONbits.GIE = 1;
  8820  0021E4  8EF2               	bsf	intcon,7,c	;volatile
  8821                           
  8822                           ;Interrupt.c: 26: nec_ok = 0;
  8823  0021E6  0E00               	movlw	0
  8824  0021E8  0100               	movlb	0	; () banked
  8825  0021EA  6FF4               	movwf	(_nec_ok+1)& (0+255),b
  8826  0021EC  0E00               	movlw	0
  8827  0021EE  6FF3               	movwf	_nec_ok& (0+255),b
  8828                           
  8829                           ;Interrupt.c: 27: Nec_code = 0x0;
  8830  0021F0  0E00               	movlw	0
  8831  0021F2  0100               	movlb	0	; () banked
  8832  0021F4  6FEB               	movwf	_Nec_code& (0+255),b
  8833  0021F6  0E00               	movlw	0
  8834  0021F8  6FEC               	movwf	(_Nec_code+1)& (0+255),b
  8835  0021FA  0E00               	movlw	0
  8836  0021FC  6FED               	movwf	(_Nec_code+2)& (0+255),b
  8837  0021FE  0E00               	movlw	0
  8838  002200  6FEE               	movwf	(_Nec_code+3)& (0+255),b
  8839                           
  8840                           ; BSR set to: 0
  8841  002202  0012               	return		;funcret
  8842  002204                     __end_of_init_INTERRUPT:
  8843                           	opt stack 0
  8844                           tblptru	equ	0xFF8
  8845                           tblptrh	equ	0xFF7
  8846                           tblptrl	equ	0xFF6
  8847                           tablat	equ	0xFF5
  8848                           prodh	equ	0xFF4
  8849                           prodl	equ	0xFF3
  8850                           intcon	equ	0xFF2
  8851                           intcon2	equ	0xFF1
  8852                           postinc0	equ	0xFEE
  8853                           wreg	equ	0xFE8
  8854                           postdec1	equ	0xFE5
  8855                           fsr1l	equ	0xFE1
  8856                           indf2	equ	0xFDF
  8857                           postinc2	equ	0xFDE
  8858                           postdec2	equ	0xFDD
  8859                           fsr2h	equ	0xFDA
  8860                           fsr2l	equ	0xFD9
  8861                           status	equ	0xFD8
  8862                           
  8863 ;; *************** function _I2C_Init *****************
  8864 ;; Defined at:
  8865 ;;		line 14 in file "I2C.c"
  8866 ;; Parameters:    Size  Location     Type
  8867 ;;  c               4   16[COMRAM] unsigned long 
  8868 ;; Auto vars:     Size  Location     Type
  8869 ;;		None
  8870 ;; Return value:  Size  Location     Type
  8871 ;;		None               void
  8872 ;; Registers used:
  8873 ;;		wreg, cstack
  8874 ;; Tracked objects:
  8875 ;;		On entry : 0/0
  8876 ;;		On exit  : 0/0
  8877 ;;		Unchanged: 0/0
  8878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8879 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8880 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8881 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8882 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8883 ;;Total ram usage:        4 bytes
  8884 ;; Hardware stack levels used:    1
  8885 ;; Hardware stack levels required when called:    4
  8886 ;; This function calls:
  8887 ;;		_i2cHighScl
  8888 ;;		_i2cHighSda
  8889 ;; This function is called by:
  8890 ;;		_Do_Init
  8891 ;; This function uses a non-reentrant model
  8892 ;;
  8893                           
  8894                           	psect	text42
  8895  00252A                     __ptext42:
  8896                           	opt stack 0
  8897  00252A                     _I2C_Init:
  8898                           	opt stack 25
  8899                           
  8900                           ;I2C.c: 16: i2cHighScl();
  8901                           
  8902                           ; BSR set to: 0
  8903                           ;incstack = 0
  8904  00252A  EC84  F012         	call	_i2cHighScl	;wreg free
  8905                           
  8906                           ;I2C.c: 17: i2cHighSda();
  8907  00252E  ECAC  F012         	call	_i2cHighSda	;wreg free
  8908  002532  0012               	return		;funcret
  8909  002534                     __end_of_I2C_Init:
  8910                           	opt stack 0
  8911                           tblptru	equ	0xFF8
  8912                           tblptrh	equ	0xFF7
  8913                           tblptrl	equ	0xFF6
  8914                           tablat	equ	0xFF5
  8915                           prodh	equ	0xFF4
  8916                           prodl	equ	0xFF3
  8917                           intcon	equ	0xFF2
  8918                           intcon2	equ	0xFF1
  8919                           postinc0	equ	0xFEE
  8920                           wreg	equ	0xFE8
  8921                           postdec1	equ	0xFE5
  8922                           fsr1l	equ	0xFE1
  8923                           indf2	equ	0xFDF
  8924                           postinc2	equ	0xFDE
  8925                           postdec2	equ	0xFDD
  8926                           fsr2h	equ	0xFDA
  8927                           fsr2l	equ	0xFD9
  8928                           status	equ	0xFD8
  8929                           
  8930 ;; *************** function _DS1621_Init *****************
  8931 ;; Defined at:
  8932 ;;		line 21 in file "I2C_Support.c"
  8933 ;; Parameters:    Size  Location     Type
  8934 ;;		None
  8935 ;; Auto vars:     Size  Location     Type
  8936 ;;  Device          1   21[COMRAM] unsigned char 
  8937 ;; Return value:  Size  Location     Type
  8938 ;;		None               void
  8939 ;; Registers used:
  8940 ;;		wreg, status,2, status,0, cstack
  8941 ;; Tracked objects:
  8942 ;;		On entry : 0/0
  8943 ;;		On exit  : 0/0
  8944 ;;		Unchanged: 0/0
  8945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8946 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8947 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8948 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8949 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8950 ;;Total ram usage:        1 bytes
  8951 ;; Hardware stack levels used:    1
  8952 ;; Hardware stack levels required when called:    6
  8953 ;; This function calls:
  8954 ;;		_I2C_Write_Cmd_Only
  8955 ;;		_I2C_Write_Cmd_Write_Data
  8956 ;; This function is called by:
  8957 ;;		_Do_Init
  8958 ;; This function uses a non-reentrant model
  8959 ;;
  8960                           
  8961                           	psect	text43
  8962  0023B2                     __ptext43:
  8963                           	opt stack 0
  8964  0023B2                     _DS1621_Init:
  8965                           	opt stack 23
  8966                           
  8967                           ;I2C_Support.c: 23: char Device = 0x48;
  8968                           
  8969                           ;incstack = 0
  8970  0023B2  0E48               	movlw	72
  8971  0023B4  6E16               	movwf	DS1621_Init@Device,c
  8972                           
  8973                           ;I2C_Support.c: 24: I2C_Write_Cmd_Write_Data (Device, 0xAC, 0x02);
  8974  0023B6  0EAC               	movlw	172
  8975  0023B8  6E13               	movwf	I2C_Write_Cmd_Write_Data@Cmd,c
  8976  0023BA  0E02               	movlw	2
  8977  0023BC  6E14               	movwf	I2C_Write_Cmd_Write_Data@Data_Out,c
  8978  0023BE  5016               	movf	DS1621_Init@Device,w,c
  8979  0023C0  ECB9  F011         	call	_I2C_Write_Cmd_Write_Data
  8980                           
  8981                           ;I2C_Support.c: 25: I2C_Write_Cmd_Only(Device, 0xEE);
  8982  0023C4  0EEE               	movlw	238
  8983  0023C6  6E13               	movwf	I2C_Write_Cmd_Only@Cmd,c
  8984  0023C8  5016               	movf	DS1621_Init@Device,w,c
  8985  0023CA  ECF6  F011         	call	_I2C_Write_Cmd_Only
  8986  0023CE  0012               	return		;funcret
  8987  0023D0                     __end_of_DS1621_Init:
  8988                           	opt stack 0
  8989                           tblptru	equ	0xFF8
  8990                           tblptrh	equ	0xFF7
  8991                           tblptrl	equ	0xFF6
  8992                           tablat	equ	0xFF5
  8993                           prodh	equ	0xFF4
  8994                           prodl	equ	0xFF3
  8995                           intcon	equ	0xFF2
  8996                           intcon2	equ	0xFF1
  8997                           postinc0	equ	0xFEE
  8998                           wreg	equ	0xFE8
  8999                           postdec1	equ	0xFE5
  9000                           fsr1l	equ	0xFE1
  9001                           indf2	equ	0xFDF
  9002                           postinc2	equ	0xFDE
  9003                           postdec2	equ	0xFDD
  9004                           fsr2h	equ	0xFDA
  9005                           fsr2l	equ	0xFD9
  9006                           status	equ	0xFD8
  9007                           
  9008 ;; *************** function _I2C_Write_Cmd_Write_Data *****************
  9009 ;; Defined at:
  9010 ;;		line 152 in file "I2C.c"
  9011 ;; Parameters:    Size  Location     Type
  9012 ;;  Device          1    wreg     unsigned char 
  9013 ;;  Cmd             1   18[COMRAM] unsigned char 
  9014 ;;  Data_Out        1   19[COMRAM] unsigned char 
  9015 ;; Auto vars:     Size  Location     Type
  9016 ;;  Device          1   20[COMRAM] unsigned char 
  9017 ;; Return value:  Size  Location     Type
  9018 ;;		None               void
  9019 ;; Registers used:
  9020 ;;		wreg, status,2, status,0, cstack
  9021 ;; Tracked objects:
  9022 ;;		On entry : 0/0
  9023 ;;		On exit  : 0/0
  9024 ;;		Unchanged: 0/0
  9025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9026 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9027 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9028 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9029 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9030 ;;Total ram usage:        3 bytes
  9031 ;; Hardware stack levels used:    1
  9032 ;; Hardware stack levels required when called:    5
  9033 ;; This function calls:
  9034 ;;		_I2C_Start
  9035 ;;		_I2C_Stop
  9036 ;;		_I2C_Write
  9037 ;; This function is called by:
  9038 ;;		_DS1621_Init
  9039 ;; This function uses a non-reentrant model
  9040 ;;
  9041                           
  9042                           	psect	text44
  9043  002372                     __ptext44:
  9044                           	opt stack 0
  9045  002372                     _I2C_Write_Cmd_Write_Data:
  9046                           	opt stack 23
  9047                           
  9048                           ;incstack = 0
  9049                           ;I2C_Write_Cmd_Write_Data@Device stored from wreg
  9050  002372  6E15               	movwf	I2C_Write_Cmd_Write_Data@Device,c
  9051                           
  9052                           ;I2C.c: 154: I2C_Start();
  9053  002374  EC53  F012         	call	_I2C_Start	;wreg free
  9054                           
  9055                           ;I2C.c: 155: I2C_Write((Device << 1) | 0);
  9056  002378  5015               	movf	I2C_Write_Cmd_Write_Data@Device,w,c
  9057  00237A  2415               	addwf	I2C_Write_Cmd_Write_Data@Device,w,c
  9058  00237C  ECAB  F010         	call	_I2C_Write
  9059                           
  9060                           ;I2C.c: 156: I2C_Write(Cmd);
  9061  002380  5013               	movf	I2C_Write_Cmd_Write_Data@Cmd,w,c
  9062  002382  ECAB  F010         	call	_I2C_Write
  9063                           
  9064                           ;I2C.c: 157: I2C_Write(Data_Out);
  9065  002386  5014               	movf	I2C_Write_Cmd_Write_Data@Data_Out,w,c
  9066  002388  ECAB  F010         	call	_I2C_Write
  9067                           
  9068                           ;I2C.c: 158: I2C_Stop();
  9069  00238C  EC4A  F012         	call	_I2C_Stop	;wreg free
  9070  002390  0012               	return		;funcret
  9071  002392                     __end_of_I2C_Write_Cmd_Write_Data:
  9072                           	opt stack 0
  9073                           tblptru	equ	0xFF8
  9074                           tblptrh	equ	0xFF7
  9075                           tblptrl	equ	0xFF6
  9076                           tablat	equ	0xFF5
  9077                           prodh	equ	0xFF4
  9078                           prodl	equ	0xFF3
  9079                           intcon	equ	0xFF2
  9080                           intcon2	equ	0xFF1
  9081                           postinc0	equ	0xFEE
  9082                           wreg	equ	0xFE8
  9083                           postdec1	equ	0xFE5
  9084                           fsr1l	equ	0xFE1
  9085                           indf2	equ	0xFDF
  9086                           postinc2	equ	0xFDE
  9087                           postdec2	equ	0xFDD
  9088                           fsr2h	equ	0xFDA
  9089                           fsr2l	equ	0xFD9
  9090                           status	equ	0xFD8
  9091                           
  9092 ;; *************** function _I2C_Write_Cmd_Only *****************
  9093 ;; Defined at:
  9094 ;;		line 144 in file "I2C.c"
  9095 ;; Parameters:    Size  Location     Type
  9096 ;;  Device          1    wreg     unsigned char 
  9097 ;;  Cmd             1   18[COMRAM] unsigned char 
  9098 ;; Auto vars:     Size  Location     Type
  9099 ;;  Device          1   19[COMRAM] unsigned char 
  9100 ;; Return value:  Size  Location     Type
  9101 ;;		None               void
  9102 ;; Registers used:
  9103 ;;		wreg, status,2, status,0, cstack
  9104 ;; Tracked objects:
  9105 ;;		On entry : 0/0
  9106 ;;		On exit  : 0/0
  9107 ;;		Unchanged: 0/0
  9108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9109 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9110 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9111 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9112 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9113 ;;Total ram usage:        2 bytes
  9114 ;; Hardware stack levels used:    1
  9115 ;; Hardware stack levels required when called:    5
  9116 ;; This function calls:
  9117 ;;		_I2C_Start
  9118 ;;		_I2C_Stop
  9119 ;;		_I2C_Write
  9120 ;; This function is called by:
  9121 ;;		_DS1621_Init
  9122 ;; This function uses a non-reentrant model
  9123 ;;
  9124                           
  9125                           	psect	text45
  9126  0023EC                     __ptext45:
  9127                           	opt stack 0
  9128  0023EC                     _I2C_Write_Cmd_Only:
  9129                           	opt stack 23
  9130                           
  9131                           ;incstack = 0
  9132                           ;I2C_Write_Cmd_Only@Device stored from wreg
  9133  0023EC  6E14               	movwf	I2C_Write_Cmd_Only@Device,c
  9134                           
  9135                           ;I2C.c: 146: I2C_Start();
  9136  0023EE  EC53  F012         	call	_I2C_Start	;wreg free
  9137                           
  9138                           ;I2C.c: 147: I2C_Write((Device << 1) | 0);
  9139  0023F2  5014               	movf	I2C_Write_Cmd_Only@Device,w,c
  9140  0023F4  2414               	addwf	I2C_Write_Cmd_Only@Device,w,c
  9141  0023F6  ECAB  F010         	call	_I2C_Write
  9142                           
  9143                           ;I2C.c: 148: I2C_Write(Cmd);
  9144  0023FA  5013               	movf	I2C_Write_Cmd_Only@Cmd,w,c
  9145  0023FC  ECAB  F010         	call	_I2C_Write
  9146                           
  9147                           ;I2C.c: 149: I2C_Stop();
  9148  002400  EC4A  F012         	call	_I2C_Stop	;wreg free
  9149  002404  0012               	return		;funcret
  9150  002406                     __end_of_I2C_Write_Cmd_Only:
  9151                           	opt stack 0
  9152                           tblptru	equ	0xFF8
  9153                           tblptrh	equ	0xFF7
  9154                           tblptrl	equ	0xFF6
  9155                           tablat	equ	0xFF5
  9156                           prodh	equ	0xFF4
  9157                           prodl	equ	0xFF3
  9158                           intcon	equ	0xFF2
  9159                           intcon2	equ	0xFF1
  9160                           postinc0	equ	0xFEE
  9161                           wreg	equ	0xFE8
  9162                           postdec1	equ	0xFE5
  9163                           fsr1l	equ	0xFE1
  9164                           indf2	equ	0xFDF
  9165                           postinc2	equ	0xFDE
  9166                           postdec2	equ	0xFDD
  9167                           fsr2h	equ	0xFDA
  9168                           fsr2l	equ	0xFD9
  9169                           status	equ	0xFD8
  9170                           
  9171 ;; *************** function _Decrease_Speed *****************
  9172 ;; Defined at:
  9173 ;;		line 68 in file "Fan_Support.c"
  9174 ;; Parameters:    Size  Location     Type
  9175 ;;		None
  9176 ;; Auto vars:     Size  Location     Type
  9177 ;;		None
  9178 ;; Return value:  Size  Location     Type
  9179 ;;		None               void
  9180 ;; Registers used:
  9181 ;;		wreg, status,2, status,0, cstack
  9182 ;; Tracked objects:
  9183 ;;		On entry : 0/0
  9184 ;;		On exit  : 0/0
  9185 ;;		Unchanged: 0/0
  9186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9187 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9188 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9189 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9190 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9191 ;;Total ram usage:        0 bytes
  9192 ;; Hardware stack levels used:    1
  9193 ;; Hardware stack levels required when called:    7
  9194 ;; This function calls:
  9195 ;;		_Do_Beep
  9196 ;;		_do_update_pwm
  9197 ;; This function is called by:
  9198 ;;		_main
  9199 ;; This function uses a non-reentrant model
  9200 ;;
  9201                           
  9202                           	psect	text46
  9203  0022E0                     __ptext46:
  9204                           	opt stack 0
  9205  0022E0                     _Decrease_Speed:
  9206                           	opt stack 23
  9207                           
  9208                           ;Fan_Support.c: 70: if (duty_cycle==0)
  9209                           
  9210                           ;incstack = 0
  9211  0022E0  505C               	movf	_duty_cycle,w,c
  9212  0022E2  A4D8               	btfss	status,2,c
  9213  0022E4  D008               	goto	l6532
  9214                           
  9215                           ;Fan_Support.c: 71: {
  9216                           ;Fan_Support.c: 72: Do_Beep();
  9217  0022E6  EC03  F012         	call	_Do_Beep	;wreg free
  9218                           
  9219                           ;Fan_Support.c: 73: Do_Beep();
  9220  0022EA  EC03  F012         	call	_Do_Beep	;wreg free
  9221                           
  9222                           ;Fan_Support.c: 74: do_update_pwm(duty_cycle);
  9223  0022EE  505C               	movf	_duty_cycle,w,c
  9224  0022F0  EC8B  F00C         	call	_do_update_pwm
  9225                           
  9226                           ;Fan_Support.c: 75: }
  9227  0022F4  D007               	goto	l499
  9228  0022F6                     l6532:
  9229                           
  9230                           ;Fan_Support.c: 76: else
  9231                           ;Fan_Support.c: 77: {
  9232                           ;Fan_Support.c: 78: duty_cycle = duty_cycle - 5;
  9233  0022F6  505C               	movf	_duty_cycle,w,c
  9234  0022F8  0FFB               	addlw	251
  9235  0022FA  6E5C               	movwf	_duty_cycle,c
  9236                           
  9237                           ;Fan_Support.c: 79: do_update_pwm(duty_cycle);
  9238  0022FC  505C               	movf	_duty_cycle,w,c
  9239  0022FE  EC8B  F00C         	call	_do_update_pwm
  9240  002302  D000               	goto	l499
  9241  002304                     l499:
  9242  002304  0012               	return		;funcret
  9243  002306                     __end_of_Decrease_Speed:
  9244                           	opt stack 0
  9245                           tblptru	equ	0xFF8
  9246                           tblptrh	equ	0xFF7
  9247                           tblptrl	equ	0xFF6
  9248                           tablat	equ	0xFF5
  9249                           prodh	equ	0xFF4
  9250                           prodl	equ	0xFF3
  9251                           intcon	equ	0xFF2
  9252                           intcon2	equ	0xFF1
  9253                           postinc0	equ	0xFEE
  9254                           wreg	equ	0xFE8
  9255                           postdec1	equ	0xFE5
  9256                           fsr1l	equ	0xFE1
  9257                           indf2	equ	0xFDF
  9258                           postinc2	equ	0xFDE
  9259                           postdec2	equ	0xFDD
  9260                           fsr2h	equ	0xFDA
  9261                           fsr2l	equ	0xFD9
  9262                           status	equ	0xFD8
  9263                           
  9264 ;; *************** function _Do_Beep *****************
  9265 ;; Defined at:
  9266 ;;		line 9 in file "Utils.c"
  9267 ;; Parameters:    Size  Location     Type
  9268 ;;		None
  9269 ;; Auto vars:     Size  Location     Type
  9270 ;;		None
  9271 ;; Return value:  Size  Location     Type
  9272 ;;		None               void
  9273 ;; Registers used:
  9274 ;;		wreg, status,2, status,0, cstack
  9275 ;; Tracked objects:
  9276 ;;		On entry : 0/0
  9277 ;;		On exit  : 0/0
  9278 ;;		Unchanged: 0/0
  9279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9280 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9281 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9282 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9283 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9284 ;;Total ram usage:        0 bytes
  9285 ;; Hardware stack levels used:    1
  9286 ;; Hardware stack levels required when called:    6
  9287 ;; This function calls:
  9288 ;;		_Activate_Buzzer
  9289 ;;		_Deactivate_Buzzer
  9290 ;;		_Wait_One_Sec
  9291 ;;		_do_update_pwm
  9292 ;; This function is called by:
  9293 ;;		_Increase_Speed
  9294 ;;		_Decrease_Speed
  9295 ;;		_main
  9296 ;; This function uses a non-reentrant model
  9297 ;;
  9298                           
  9299                           	psect	text47
  9300  002406                     __ptext47:
  9301                           	opt stack 0
  9302  002406                     _Do_Beep:
  9303                           	opt stack 23
  9304                           
  9305                           ;Utils.c: 11: Activate_Buzzer();
  9306                           
  9307                           ;incstack = 0
  9308  002406  EC41  F012         	call	_Activate_Buzzer	;wreg free
  9309                           
  9310                           ;Utils.c: 12: Wait_One_Sec();
  9311  00240A  EC96  F011         	call	_Wait_One_Sec	;wreg free
  9312                           
  9313                           ;Utils.c: 13: Deactivate_Buzzer();
  9314  00240E  ECA4  F012         	call	_Deactivate_Buzzer	;wreg free
  9315                           
  9316                           ;Utils.c: 14: Wait_One_Sec();
  9317  002412  EC96  F011         	call	_Wait_One_Sec	;wreg free
  9318                           
  9319                           ;Utils.c: 15: do_update_pwm(duty_cycle);
  9320  002416  505C               	movf	_duty_cycle,w,c
  9321  002418  EC8B  F00C         	call	_do_update_pwm
  9322  00241C  0012               	return		;funcret
  9323  00241E                     __end_of_Do_Beep:
  9324                           	opt stack 0
  9325                           tblptru	equ	0xFF8
  9326                           tblptrh	equ	0xFF7
  9327                           tblptrl	equ	0xFF6
  9328                           tablat	equ	0xFF5
  9329                           prodh	equ	0xFF4
  9330                           prodl	equ	0xFF3
  9331                           intcon	equ	0xFF2
  9332                           intcon2	equ	0xFF1
  9333                           postinc0	equ	0xFEE
  9334                           wreg	equ	0xFE8
  9335                           postdec1	equ	0xFE5
  9336                           fsr1l	equ	0xFE1
  9337                           indf2	equ	0xFDF
  9338                           postinc2	equ	0xFDE
  9339                           postdec2	equ	0xFDD
  9340                           fsr2h	equ	0xFDA
  9341                           fsr2l	equ	0xFD9
  9342                           status	equ	0xFD8
  9343                           
  9344 ;; *************** function _do_update_pwm *****************
  9345 ;; Defined at:
  9346 ;;		line 84 in file "Fan_Support.c"
  9347 ;; Parameters:    Size  Location     Type
  9348 ;;  duty_cycle      1    wreg     unsigned char 
  9349 ;; Auto vars:     Size  Location     Type
  9350 ;;  duty_cycle      1   64[COMRAM] unsigned char 
  9351 ;;  dc_f            3   61[COMRAM] float 
  9352 ;;  dc_I            2   65[COMRAM] int 
  9353 ;; Return value:  Size  Location     Type
  9354 ;;		None               void
  9355 ;; Registers used:
  9356 ;;		wreg, status,2, status,0, cstack
  9357 ;; Tracked objects:
  9358 ;;		On entry : 0/0
  9359 ;;		On exit  : 0/0
  9360 ;;		Unchanged: 0/0
  9361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9362 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9363 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9364 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9365 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9366 ;;Total ram usage:        9 bytes
  9367 ;; Hardware stack levels used:    1
  9368 ;; Hardware stack levels required when called:    5
  9369 ;; This function calls:
  9370 ;;		___ftdiv
  9371 ;;		___ftmul
  9372 ;;		___fttol
  9373 ;;		___lbtoft
  9374 ;; This function is called by:
  9375 ;;		_Turn_On_Fan
  9376 ;;		_Increase_Speed
  9377 ;;		_Decrease_Speed
  9378 ;;		_Do_Beep
  9379 ;;		_main
  9380 ;; This function uses a non-reentrant model
  9381 ;;
  9382                           
  9383                           	psect	text48
  9384  001916                     __ptext48:
  9385                           	opt stack 0
  9386  001916                     _do_update_pwm:
  9387                           	opt stack 25
  9388                           
  9389                           ;incstack = 0
  9390                           ;do_update_pwm@duty_cycle stored from wreg
  9391  001916  6E41               	movwf	do_update_pwm@duty_cycle,c
  9392                           
  9393                           ;Fan_Support.c: 86: float dc_f;
  9394                           ;Fan_Support.c: 87: int dc_I;
  9395                           ;Fan_Support.c: 88: PR2 = 0b00000100 ;
  9396  001918  0E04               	movlw	4
  9397  00191A  6ECB               	movwf	4043,c	;volatile
  9398                           
  9399                           ;Fan_Support.c: 89: T2CON = 0b00000111 ;
  9400  00191C  0E07               	movlw	7
  9401  00191E  6ECA               	movwf	4042,c	;volatile
  9402                           
  9403                           ;Fan_Support.c: 90: dc_f = ( 4.0 * duty_cycle / 20.0) ;
  9404  001920  0E00               	movlw	0
  9405  001922  6E20               	movwf	___ftmul@f2,c
  9406  001924  0E80               	movlw	128
  9407  001926  6E21               	movwf	___ftmul@f2+1,c
  9408  001928  0E40               	movlw	64
  9409  00192A  6E22               	movwf	___ftmul@f2+2,c
  9410  00192C  5041               	movf	do_update_pwm@duty_cycle,w,c
  9411  00192E  EC83  F011         	call	___lbtoft
  9412  001932  C019  F01D         	movff	?___lbtoft,___ftmul@f1
  9413  001936  C01A  F01E         	movff	?___lbtoft+1,___ftmul@f1+1
  9414  00193A  C01B  F01F         	movff	?___lbtoft+2,___ftmul@f1+2
  9415  00193E  ECE1  F009         	call	___ftmul	;wreg free
  9416  001942  C01D  F02C         	movff	?___ftmul,___ftdiv@f1
  9417  001946  C01E  F02D         	movff	?___ftmul+1,___ftdiv@f1+1
  9418  00194A  C01F  F02E         	movff	?___ftmul+2,___ftdiv@f1+2
  9419  00194E  0E00               	movlw	0
  9420  001950  6E2F               	movwf	___ftdiv@f2,c
  9421  001952  0EA0               	movlw	160
  9422  001954  6E30               	movwf	___ftdiv@f2+1,c
  9423  001956  0E41               	movlw	65
  9424  001958  6E31               	movwf	___ftdiv@f2+2,c
  9425  00195A  EC49  F00B         	call	___ftdiv	;wreg free
  9426  00195E  C02C  F03E         	movff	?___ftdiv,do_update_pwm@dc_f
  9427  001962  C02D  F03F         	movff	?___ftdiv+1,do_update_pwm@dc_f+1
  9428  001966  C02E  F040         	movff	?___ftdiv+2,do_update_pwm@dc_f+2
  9429                           
  9430                           ;Fan_Support.c: 92: dc_I = (int) dc_f;
  9431  00196A  C03E  F011         	movff	do_update_pwm@dc_f,___fttol@f1
  9432  00196E  C03F  F012         	movff	do_update_pwm@dc_f+1,___fttol@f1+1
  9433  001972  C040  F013         	movff	do_update_pwm@dc_f+2,___fttol@f1+2
  9434  001976  ECD6  F00A         	call	___fttol	;wreg free
  9435  00197A  C011  F042         	movff	?___fttol,do_update_pwm@dc_I
  9436  00197E  C012  F043         	movff	?___fttol+1,do_update_pwm@dc_I+1
  9437                           
  9438                           ;Fan_Support.c: 93: if (dc_I > duty_cycle) dc_I++;
  9439  001982  5041               	movf	do_update_pwm@duty_cycle,w,c
  9440  001984  6E3B               	movwf	??_do_update_pwm& (0+255),c
  9441  001986  6A3C               	clrf	(??_do_update_pwm+1)& (0+255),c
  9442  001988  5042               	movf	do_update_pwm@dc_I,w,c
  9443  00198A  5C3B               	subwf	??_do_update_pwm,w,c
  9444  00198C  503C               	movf	??_do_update_pwm+1,w,c
  9445  00198E  0A80               	xorlw	128
  9446  001990  6E3D               	movwf	(??_do_update_pwm+2)& (0+255),c
  9447  001992  5043               	movf	do_update_pwm@dc_I+1,w,c
  9448  001994  0A80               	xorlw	128
  9449  001996  583D               	subwfb	(??_do_update_pwm+2)& (0+255),w,c
  9450  001998  B0D8               	btfsc	status,0,c
  9451  00199A  D003               	goto	l5832
  9452  00199C  4A42               	infsnz	do_update_pwm@dc_I,f,c
  9453  00199E  2A43               	incf	do_update_pwm@dc_I+1,f,c
  9454  0019A0  D000               	goto	l5832
  9455  0019A2                     l5832:
  9456                           
  9457                           ;Fan_Support.c: 94: CCP1CON = ((dc_I & 0x03) << 4) | 0b00001100;
  9458  0019A2  C042  F03B         	movff	do_update_pwm@dc_I,??_do_update_pwm
  9459  0019A6  0E03               	movlw	3
  9460  0019A8  163B               	andwf	??_do_update_pwm,f,c
  9461  0019AA  383B               	swapf	??_do_update_pwm,w,c
  9462  0019AC  0BF0               	andlw	240
  9463  0019AE  090C               	iorlw	12
  9464  0019B0  6EBD               	movwf	4029,c	;volatile
  9465                           
  9466                           ;Fan_Support.c: 95: CCPR1L = (dc_I) >> 2;
  9467  0019B2  C042  F03B         	movff	do_update_pwm@dc_I,??_do_update_pwm
  9468  0019B6  C043  F03C         	movff	do_update_pwm@dc_I+1,??_do_update_pwm+1
  9469  0019BA  343C               	rlcf	??_do_update_pwm+1,w,c
  9470  0019BC  323C               	rrcf	??_do_update_pwm+1,f,c
  9471  0019BE  323B               	rrcf	??_do_update_pwm,f,c
  9472  0019C0  343C               	rlcf	??_do_update_pwm+1,w,c
  9473  0019C2  323C               	rrcf	??_do_update_pwm+1,f,c
  9474  0019C4  323B               	rrcf	??_do_update_pwm,f,c
  9475  0019C6  503B               	movf	??_do_update_pwm,w,c
  9476  0019C8  6EBE               	movwf	4030,c	;volatile
  9477  0019CA  0012               	return		;funcret
  9478  0019CC                     __end_of_do_update_pwm:
  9479                           	opt stack 0
  9480                           tblptru	equ	0xFF8
  9481                           tblptrh	equ	0xFF7
  9482                           tblptrl	equ	0xFF6
  9483                           tablat	equ	0xFF5
  9484                           prodh	equ	0xFF4
  9485                           prodl	equ	0xFF3
  9486                           intcon	equ	0xFF2
  9487                           intcon2	equ	0xFF1
  9488                           postinc0	equ	0xFEE
  9489                           wreg	equ	0xFE8
  9490                           postdec1	equ	0xFE5
  9491                           fsr1l	equ	0xFE1
  9492                           indf2	equ	0xFDF
  9493                           postinc2	equ	0xFDE
  9494                           postdec2	equ	0xFDD
  9495                           fsr2h	equ	0xFDA
  9496                           fsr2l	equ	0xFD9
  9497                           status	equ	0xFD8
  9498                           
  9499 ;; *************** function ___lbtoft *****************
  9500 ;; Defined at:
  9501 ;;		line 27 in file "E:\XC8\sources\common\lbtoft.c"
  9502 ;; Parameters:    Size  Location     Type
  9503 ;;  c               1    wreg     unsigned char 
  9504 ;; Auto vars:     Size  Location     Type
  9505 ;;  c               1   27[COMRAM] unsigned char 
  9506 ;; Return value:  Size  Location     Type
  9507 ;;                  3   24[COMRAM] float 
  9508 ;; Registers used:
  9509 ;;		wreg, status,2, status,0, cstack
  9510 ;; Tracked objects:
  9511 ;;		On entry : 0/0
  9512 ;;		On exit  : 0/0
  9513 ;;		Unchanged: 0/0
  9514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9515 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9516 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9517 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9518 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9519 ;;Total ram usage:        4 bytes
  9520 ;; Hardware stack levels used:    1
  9521 ;; Hardware stack levels required when called:    4
  9522 ;; This function calls:
  9523 ;;		___ftpack
  9524 ;; This function is called by:
  9525 ;;		_do_update_pwm
  9526 ;; This function uses a non-reentrant model
  9527 ;;
  9528                           
  9529                           	psect	text49
  9530  002306                     __ptext49:
  9531                           	opt stack 0
  9532  002306                     ___lbtoft:
  9533                           	opt stack 25
  9534                           
  9535                           ;incstack = 0
  9536                           ;___lbtoft@c stored from wreg
  9537  002306  6E1C               	movwf	___lbtoft@c,c
  9538  002308  501C               	movf	___lbtoft@c,w,c
  9539  00230A  6E11               	movwf	___ftpack@arg,c
  9540  00230C  6A12               	clrf	___ftpack@arg+1,c
  9541  00230E  6A13               	clrf	___ftpack@arg+2,c
  9542  002310  0E8E               	movlw	142
  9543  002312  6E14               	movwf	___ftpack@exp,c
  9544  002314  0E00               	movlw	0
  9545  002316  6E15               	movwf	___ftpack@sign,c
  9546  002318  EC28  F00C         	call	___ftpack	;wreg free
  9547  00231C  C011  F019         	movff	?___ftpack,?___lbtoft
  9548  002320  C012  F01A         	movff	?___ftpack+1,?___lbtoft+1
  9549  002324  C013  F01B         	movff	?___ftpack+2,?___lbtoft+2
  9550  002328  D000               	goto	l1239
  9551  00232A                     l1239:
  9552  00232A  0012               	return		;funcret
  9553  00232C                     __end_of___lbtoft:
  9554                           	opt stack 0
  9555                           tblptru	equ	0xFF8
  9556                           tblptrh	equ	0xFF7
  9557                           tblptrl	equ	0xFF6
  9558                           tablat	equ	0xFF5
  9559                           prodh	equ	0xFF4
  9560                           prodl	equ	0xFF3
  9561                           intcon	equ	0xFF2
  9562                           intcon2	equ	0xFF1
  9563                           postinc0	equ	0xFEE
  9564                           wreg	equ	0xFE8
  9565                           postdec1	equ	0xFE5
  9566                           fsr1l	equ	0xFE1
  9567                           indf2	equ	0xFDF
  9568                           postinc2	equ	0xFDE
  9569                           postdec2	equ	0xFDD
  9570                           fsr2h	equ	0xFDA
  9571                           fsr2l	equ	0xFD9
  9572                           status	equ	0xFD8
  9573                           
  9574 ;; *************** function ___fttol *****************
  9575 ;; Defined at:
  9576 ;;		line 44 in file "E:\XC8\sources\common\fttol.c"
  9577 ;; Parameters:    Size  Location     Type
  9578 ;;  f1              3   16[COMRAM] float 
  9579 ;; Auto vars:     Size  Location     Type
  9580 ;;  lval            4   26[COMRAM] unsigned long 
  9581 ;;  exp1            1   30[COMRAM] unsigned char 
  9582 ;;  sign1           1   25[COMRAM] unsigned char 
  9583 ;; Return value:  Size  Location     Type
  9584 ;;                  4   16[COMRAM] long 
  9585 ;; Registers used:
  9586 ;;		wreg, status,2, status,0
  9587 ;; Tracked objects:
  9588 ;;		On entry : 0/0
  9589 ;;		On exit  : 0/0
  9590 ;;		Unchanged: 0/0
  9591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9592 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9593 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9594 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9595 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9596 ;;Total ram usage:       15 bytes
  9597 ;; Hardware stack levels used:    1
  9598 ;; Hardware stack levels required when called:    3
  9599 ;; This function calls:
  9600 ;;		Nothing
  9601 ;; This function is called by:
  9602 ;;		_do_update_pwm
  9603 ;; This function uses a non-reentrant model
  9604 ;;
  9605                           
  9606                           	psect	text50
  9607  0015AC                     __ptext50:
  9608                           	opt stack 0
  9609  0015AC                     ___fttol:
  9610                           	opt stack 26
  9611                           
  9612                           ;incstack = 0
  9613  0015AC  C013  F015         	movff	___fttol@f1+2,??___fttol
  9614  0015B0  6A16               	clrf	(??___fttol+1)& (0+255),c
  9615  0015B2  6A17               	clrf	(??___fttol+2)& (0+255),c
  9616  0015B4  3412               	rlcf	___fttol@f1+1,w,c
  9617  0015B6  3615               	rlcf	??___fttol& (0+255),f,c
  9618  0015B8  E301               	bnc	u4381
  9619  0015BA  8016               	bsf	(??___fttol+1)& (0+255),0,c
  9620  0015BC                     u4381:
  9621  0015BC  5015               	movf	??___fttol,w,c
  9622  0015BE  6E1F               	movwf	___fttol@exp1,c
  9623  0015C0  501F               	movf	___fttol@exp1,w,c
  9624  0015C2  A4D8               	btfss	status,2,c
  9625  0015C4  D002               	goto	l5554
  9626  0015C6  D039               	goto	l5578
  9627  0015C8  D063               	goto	l1198
  9628  0015CA                     l5554:
  9629  0015CA  0E17               	movlw	23
  9630  0015CC  6E15               	movwf	??___fttol& (0+255),c
  9631  0015CE  C011  F016         	movff	___fttol@f1,??___fttol+1
  9632  0015D2  C012  F017         	movff	___fttol@f1+1,??___fttol+2
  9633  0015D6  C013  F018         	movff	___fttol@f1+2,??___fttol+3
  9634  0015DA  2815               	incf	??___fttol,w,c
  9635  0015DC  6E19               	movwf	(??___fttol+4)& (0+255),c
  9636  0015DE  D004               	goto	u4400
  9637  0015E0                     u4405:
  9638  0015E0  90D8               	bcf	status,0,c
  9639  0015E2  3218               	rrcf	??___fttol+3,f,c
  9640  0015E4  3217               	rrcf	??___fttol+2,f,c
  9641  0015E6  3216               	rrcf	??___fttol+1,f,c
  9642  0015E8                     u4400:
  9643  0015E8  2E19               	decfsz	(??___fttol+4)& (0+255),f,c
  9644  0015EA  D7FA               	goto	u4405
  9645  0015EC  5016               	movf	??___fttol+1,w,c
  9646  0015EE  6E1A               	movwf	___fttol@sign1,c
  9647  0015F0  8E12               	bsf	___fttol@f1+1,7,c
  9648  0015F2  0EFF               	movlw	255
  9649  0015F4  1611               	andwf	___fttol@f1,f,c
  9650  0015F6  0EFF               	movlw	255
  9651  0015F8  1612               	andwf	___fttol@f1+1,f,c
  9652  0015FA  0E00               	movlw	0
  9653  0015FC  1613               	andwf	___fttol@f1+2,f,c
  9654  0015FE  5011               	movf	___fttol@f1,w,c
  9655  001600  6E1B               	movwf	___fttol@lval,c
  9656  001602  5012               	movf	___fttol@f1+1,w,c
  9657  001604  6E1C               	movwf	___fttol@lval+1,c
  9658  001606  5013               	movf	___fttol@f1+2,w,c
  9659  001608  6E1D               	movwf	___fttol@lval+2,c
  9660  00160A  6A1E               	clrf	___fttol@lval+3,c
  9661  00160C  0E8E               	movlw	142
  9662  00160E  5E1F               	subwf	___fttol@exp1,f,c
  9663  001610  AE1F               	btfss	___fttol@exp1,7,c
  9664  001612  D010               	goto	l5576
  9665  001614  501F               	movf	___fttol@exp1,w,c
  9666  001616  0A80               	xorlw	128
  9667  001618  0F8F               	addlw	143
  9668  00161A  B0D8               	btfsc	status,0,c
  9669  00161C  D003               	goto	l5572
  9670  00161E  D00D               	goto	l5578
  9671  001620  D037               	goto	l1198
  9672  001622  D000               	goto	l5572
  9673  001624                     l5572:
  9674  001624  90D8               	bcf	status,0,c
  9675  001626  321E               	rrcf	___fttol@lval+3,f,c
  9676  001628  321D               	rrcf	___fttol@lval+2,f,c
  9677  00162A  321C               	rrcf	___fttol@lval+1,f,c
  9678  00162C  321B               	rrcf	___fttol@lval,f,c
  9679  00162E  3E1F               	incfsz	___fttol@exp1,f,c
  9680  001630  D7F9               	goto	l5572
  9681  001632  D019               	goto	l5586
  9682  001634                     l5576:
  9683  001634  0E17               	movlw	23
  9684  001636  641F               	cpfsgt	___fttol@exp1,c
  9685  001638  D011               	goto	l5584
  9686  00163A                     l5578:
  9687  00163A  0E00               	movlw	0
  9688  00163C  6E11               	movwf	?___fttol,c
  9689  00163E  0E00               	movlw	0
  9690  001640  6E12               	movwf	?___fttol+1,c
  9691  001642  0E00               	movlw	0
  9692  001644  6E13               	movwf	?___fttol+2,c
  9693  001646  0E00               	movlw	0
  9694  001648  6E14               	movwf	?___fttol+3,c
  9695  00164A  D022               	goto	l1198
  9696  00164C  D007               	goto	l5584
  9697  00164E                     l5582:
  9698  00164E  90D8               	bcf	status,0,c
  9699  001650  361B               	rlcf	___fttol@lval,f,c
  9700  001652  361C               	rlcf	___fttol@lval+1,f,c
  9701  001654  361D               	rlcf	___fttol@lval+2,f,c
  9702  001656  361E               	rlcf	___fttol@lval+3,f,c
  9703  001658  061F               	decf	___fttol@exp1,f,c
  9704  00165A  D000               	goto	l5584
  9705  00165C                     l5584:
  9706  00165C  501F               	movf	___fttol@exp1,w,c
  9707  00165E  B4D8               	btfsc	status,2,c
  9708  001660  D002               	goto	l5586
  9709  001662  D7F5               	goto	l5582
  9710  001664  D000               	goto	l5586
  9711  001666                     l5586:
  9712  001666  501A               	movf	___fttol@sign1,w,c
  9713  001668  B4D8               	btfsc	status,2,c
  9714  00166A  D009               	goto	l5590
  9715  00166C  1E1E               	comf	___fttol@lval+3,f,c
  9716  00166E  1E1D               	comf	___fttol@lval+2,f,c
  9717  001670  1E1C               	comf	___fttol@lval+1,f,c
  9718  001672  6C1B               	negf	___fttol@lval,c
  9719  001674  0E00               	movlw	0
  9720  001676  221C               	addwfc	___fttol@lval+1,f,c
  9721  001678  221D               	addwfc	___fttol@lval+2,f,c
  9722  00167A  221E               	addwfc	___fttol@lval+3,f,c
  9723  00167C  D000               	goto	l5590
  9724  00167E                     l5590:
  9725  00167E  C01B  F011         	movff	___fttol@lval,?___fttol
  9726  001682  C01C  F012         	movff	___fttol@lval+1,?___fttol+1
  9727  001686  C01D  F013         	movff	___fttol@lval+2,?___fttol+2
  9728  00168A  C01E  F014         	movff	___fttol@lval+3,?___fttol+3
  9729  00168E  D000               	goto	l1198
  9730  001690                     l1198:
  9731  001690  0012               	return		;funcret
  9732  001692                     __end_of___fttol:
  9733                           	opt stack 0
  9734                           tblptru	equ	0xFF8
  9735                           tblptrh	equ	0xFF7
  9736                           tblptrl	equ	0xFF6
  9737                           tablat	equ	0xFF5
  9738                           prodh	equ	0xFF4
  9739                           prodl	equ	0xFF3
  9740                           intcon	equ	0xFF2
  9741                           intcon2	equ	0xFF1
  9742                           postinc0	equ	0xFEE
  9743                           wreg	equ	0xFE8
  9744                           postdec1	equ	0xFE5
  9745                           fsr1l	equ	0xFE1
  9746                           indf2	equ	0xFDF
  9747                           postinc2	equ	0xFDE
  9748                           postdec2	equ	0xFDD
  9749                           fsr2h	equ	0xFDA
  9750                           fsr2l	equ	0xFD9
  9751                           status	equ	0xFD8
  9752                           
  9753 ;; *************** function ___ftmul *****************
  9754 ;; Defined at:
  9755 ;;		line 62 in file "E:\XC8\sources\common\ftmul.c"
  9756 ;; Parameters:    Size  Location     Type
  9757 ;;  f1              3   28[COMRAM] float 
  9758 ;;  f2              3   31[COMRAM] float 
  9759 ;; Auto vars:     Size  Location     Type
  9760 ;;  f3_as_produc    3   38[COMRAM] unsigned um
  9761 ;;  sign            1   42[COMRAM] unsigned char 
  9762 ;;  cntr            1   41[COMRAM] unsigned char 
  9763 ;;  exp             1   37[COMRAM] unsigned char 
  9764 ;; Return value:  Size  Location     Type
  9765 ;;                  3   28[COMRAM] float 
  9766 ;; Registers used:
  9767 ;;		wreg, status,2, status,0, cstack
  9768 ;; Tracked objects:
  9769 ;;		On entry : 0/0
  9770 ;;		On exit  : 0/0
  9771 ;;		Unchanged: 0/0
  9772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9773 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9774 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9775 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9776 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9777 ;;Total ram usage:       15 bytes
  9778 ;; Hardware stack levels used:    1
  9779 ;; Hardware stack levels required when called:    4
  9780 ;; This function calls:
  9781 ;;		___ftpack
  9782 ;; This function is called by:
  9783 ;;		_do_update_pwm
  9784 ;; This function uses a non-reentrant model
  9785 ;;
  9786                           
  9787                           	psect	text51
  9788  0013C2                     __ptext51:
  9789                           	opt stack 0
  9790  0013C2                     ___ftmul:
  9791                           	opt stack 25
  9792                           
  9793                           ;incstack = 0
  9794  0013C2  C01F  F023         	movff	___ftmul@f1+2,??___ftmul
  9795  0013C6  6A24               	clrf	(??___ftmul+1)& (0+255),c
  9796  0013C8  6A25               	clrf	(??___ftmul+2)& (0+255),c
  9797  0013CA  341E               	rlcf	___ftmul@f1+1,w,c
  9798  0013CC  3623               	rlcf	??___ftmul& (0+255),f,c
  9799  0013CE  E301               	bnc	u4321
  9800  0013D0  8024               	bsf	(??___ftmul+1)& (0+255),0,c
  9801  0013D2                     u4321:
  9802  0013D2  5023               	movf	??___ftmul,w,c
  9803  0013D4  6E26               	movwf	___ftmul@exp,c
  9804  0013D6  5026               	movf	___ftmul@exp,w,c
  9805  0013D8  A4D8               	btfss	status,2,c
  9806  0013DA  D002               	goto	l5506
  9807  0013DC  D00E               	goto	l5508
  9808  0013DE  D06C               	goto	l1177
  9809  0013E0                     l5506:
  9810  0013E0  C022  F023         	movff	___ftmul@f2+2,??___ftmul
  9811  0013E4  6A24               	clrf	(??___ftmul+1)& (0+255),c
  9812  0013E6  6A25               	clrf	(??___ftmul+2)& (0+255),c
  9813  0013E8  3421               	rlcf	___ftmul@f2+1,w,c
  9814  0013EA  3623               	rlcf	??___ftmul& (0+255),f,c
  9815  0013EC  E301               	bnc	u4341
  9816  0013EE  8024               	bsf	(??___ftmul+1)& (0+255),0,c
  9817  0013F0                     u4341:
  9818  0013F0  5023               	movf	??___ftmul,w,c
  9819  0013F2  6E2B               	movwf	___ftmul@sign,c
  9820  0013F4  502B               	movf	___ftmul@sign,w,c
  9821  0013F6  A4D8               	btfss	status,2,c
  9822  0013F8  D007               	goto	l5512
  9823  0013FA                     l5508:
  9824  0013FA  0E00               	movlw	0
  9825  0013FC  6E1D               	movwf	?___ftmul,c
  9826  0013FE  0E00               	movlw	0
  9827  001400  6E1E               	movwf	?___ftmul+1,c
  9828  001402  0E00               	movlw	0
  9829  001404  6E1F               	movwf	?___ftmul+2,c
  9830  001406  D058               	goto	l1177
  9831  001408                     l5512:
  9832  001408  502B               	movf	___ftmul@sign,w,c
  9833  00140A  0F7B               	addlw	123
  9834  00140C  2626               	addwf	___ftmul@exp,f,c
  9835  00140E  C01F  F02B         	movff	___ftmul@f1+2,___ftmul@sign
  9836  001412  5022               	movf	___ftmul@f2+2,w,c
  9837  001414  1A2B               	xorwf	___ftmul@sign,f,c
  9838  001416  0E80               	movlw	128
  9839  001418  162B               	andwf	___ftmul@sign,f,c
  9840  00141A  8E1E               	bsf	___ftmul@f1+1,7,c
  9841  00141C  8E21               	bsf	___ftmul@f2+1,7,c
  9842  00141E  0EFF               	movlw	255
  9843  001420  1620               	andwf	___ftmul@f2,f,c
  9844  001422  0EFF               	movlw	255
  9845  001424  1621               	andwf	___ftmul@f2+1,f,c
  9846  001426  0E00               	movlw	0
  9847  001428  1622               	andwf	___ftmul@f2+2,f,c
  9848  00142A  0E00               	movlw	0
  9849  00142C  6E27               	movwf	___ftmul@f3_as_product,c
  9850  00142E  0E00               	movlw	0
  9851  001430  6E28               	movwf	___ftmul@f3_as_product+1,c
  9852  001432  0E00               	movlw	0
  9853  001434  6E29               	movwf	___ftmul@f3_as_product+2,c
  9854  001436  0E07               	movlw	7
  9855  001438  6E2A               	movwf	___ftmul@cntr,c
  9856  00143A  D000               	goto	l5526
  9857  00143C                     l5526:
  9858  00143C  A01D               	btfss	___ftmul@f1,0,c
  9859  00143E  D007               	goto	l5530
  9860  001440  5020               	movf	___ftmul@f2,w,c
  9861  001442  2627               	addwf	___ftmul@f3_as_product,f,c
  9862  001444  5021               	movf	___ftmul@f2+1,w,c
  9863  001446  2228               	addwfc	___ftmul@f3_as_product+1,f,c
  9864  001448  5022               	movf	___ftmul@f2+2,w,c
  9865  00144A  2229               	addwfc	___ftmul@f3_as_product+2,f,c
  9866  00144C  D000               	goto	l5530
  9867  00144E                     l5530:
  9868  00144E  90D8               	bcf	status,0,c
  9869  001450  321F               	rrcf	___ftmul@f1+2,f,c
  9870  001452  321E               	rrcf	___ftmul@f1+1,f,c
  9871  001454  321D               	rrcf	___ftmul@f1,f,c
  9872  001456  90D8               	bcf	status,0,c
  9873  001458  3620               	rlcf	___ftmul@f2,f,c
  9874  00145A  3621               	rlcf	___ftmul@f2+1,f,c
  9875  00145C  3622               	rlcf	___ftmul@f2+2,f,c
  9876  00145E  2E2A               	decfsz	___ftmul@cntr,f,c
  9877  001460  D7ED               	goto	l5526
  9878  001462  D000               	goto	l5534
  9879  001464                     l5534:
  9880  001464  0E09               	movlw	9
  9881  001466  6E2A               	movwf	___ftmul@cntr,c
  9882  001468  D000               	goto	l5536
  9883  00146A                     l5536:
  9884  00146A  A01D               	btfss	___ftmul@f1,0,c
  9885  00146C  D007               	goto	l5540
  9886  00146E  5020               	movf	___ftmul@f2,w,c
  9887  001470  2627               	addwf	___ftmul@f3_as_product,f,c
  9888  001472  5021               	movf	___ftmul@f2+1,w,c
  9889  001474  2228               	addwfc	___ftmul@f3_as_product+1,f,c
  9890  001476  5022               	movf	___ftmul@f2+2,w,c
  9891  001478  2229               	addwfc	___ftmul@f3_as_product+2,f,c
  9892  00147A  D000               	goto	l5540
  9893  00147C                     l5540:
  9894  00147C  90D8               	bcf	status,0,c
  9895  00147E  321F               	rrcf	___ftmul@f1+2,f,c
  9896  001480  321E               	rrcf	___ftmul@f1+1,f,c
  9897  001482  321D               	rrcf	___ftmul@f1,f,c
  9898  001484  90D8               	bcf	status,0,c
  9899  001486  3229               	rrcf	___ftmul@f3_as_product+2,f,c
  9900  001488  3228               	rrcf	___ftmul@f3_as_product+1,f,c
  9901  00148A  3227               	rrcf	___ftmul@f3_as_product,f,c
  9902  00148C  2E2A               	decfsz	___ftmul@cntr,f,c
  9903  00148E  D7ED               	goto	l5536
  9904  001490  D000               	goto	l5544
  9905  001492                     l5544:
  9906  001492  C027  F011         	movff	___ftmul@f3_as_product,___ftpack@arg
  9907  001496  C028  F012         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  9908  00149A  C029  F013         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  9909  00149E  C026  F014         	movff	___ftmul@exp,___ftpack@exp
  9910  0014A2  C02B  F015         	movff	___ftmul@sign,___ftpack@sign
  9911  0014A6  EC28  F00C         	call	___ftpack	;wreg free
  9912  0014AA  C011  F01D         	movff	?___ftpack,?___ftmul
  9913  0014AE  C012  F01E         	movff	?___ftpack+1,?___ftmul+1
  9914  0014B2  C013  F01F         	movff	?___ftpack+2,?___ftmul+2
  9915  0014B6  D000               	goto	l1177
  9916  0014B8                     l1177:
  9917  0014B8  0012               	return		;funcret
  9918  0014BA                     __end_of___ftmul:
  9919                           	opt stack 0
  9920                           tblptru	equ	0xFF8
  9921                           tblptrh	equ	0xFF7
  9922                           tblptrl	equ	0xFF6
  9923                           tablat	equ	0xFF5
  9924                           prodh	equ	0xFF4
  9925                           prodl	equ	0xFF3
  9926                           intcon	equ	0xFF2
  9927                           intcon2	equ	0xFF1
  9928                           postinc0	equ	0xFEE
  9929                           wreg	equ	0xFE8
  9930                           postdec1	equ	0xFE5
  9931                           fsr1l	equ	0xFE1
  9932                           indf2	equ	0xFDF
  9933                           postinc2	equ	0xFDE
  9934                           postdec2	equ	0xFDD
  9935                           fsr2h	equ	0xFDA
  9936                           fsr2l	equ	0xFD9
  9937                           status	equ	0xFD8
  9938                           
  9939 ;; *************** function ___ftdiv *****************
  9940 ;; Defined at:
  9941 ;;		line 54 in file "E:\XC8\sources\common\ftdiv.c"
  9942 ;; Parameters:    Size  Location     Type
  9943 ;;  f1              3   43[COMRAM] float 
  9944 ;;  f2              3   46[COMRAM] float 
  9945 ;; Auto vars:     Size  Location     Type
  9946 ;;  f3              3   53[COMRAM] float 
  9947 ;;  sign            1   57[COMRAM] unsigned char 
  9948 ;;  exp             1   56[COMRAM] unsigned char 
  9949 ;;  cntr            1   52[COMRAM] unsigned char 
  9950 ;; Return value:  Size  Location     Type
  9951 ;;                  3   43[COMRAM] float 
  9952 ;; Registers used:
  9953 ;;		wreg, status,2, status,0, cstack
  9954 ;; Tracked objects:
  9955 ;;		On entry : 0/0
  9956 ;;		On exit  : 0/0
  9957 ;;		Unchanged: 0/0
  9958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9959 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9960 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9961 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9962 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9963 ;;Total ram usage:       15 bytes
  9964 ;; Hardware stack levels used:    1
  9965 ;; Hardware stack levels required when called:    4
  9966 ;; This function calls:
  9967 ;;		___ftpack
  9968 ;; This function is called by:
  9969 ;;		_do_update_pwm
  9970 ;; This function uses a non-reentrant model
  9971 ;;
  9972                           
  9973                           	psect	text52
  9974  001692                     __ptext52:
  9975                           	opt stack 0
  9976  001692                     ___ftdiv:
  9977                           	opt stack 25
  9978                           
  9979                           ;incstack = 0
  9980  001692  C02E  F032         	movff	___ftdiv@f1+2,??___ftdiv
  9981  001696  6A33               	clrf	(??___ftdiv+1)& (0+255),c
  9982  001698  6A34               	clrf	(??___ftdiv+2)& (0+255),c
  9983  00169A  342D               	rlcf	___ftdiv@f1+1,w,c
  9984  00169C  3632               	rlcf	??___ftdiv& (0+255),f,c
  9985  00169E  E301               	bnc	u4271
  9986  0016A0  8033               	bsf	(??___ftdiv+1)& (0+255),0,c
  9987  0016A2                     u4271:
  9988  0016A2  5032               	movf	??___ftdiv,w,c
  9989  0016A4  6E39               	movwf	___ftdiv@exp,c
  9990  0016A6  5039               	movf	___ftdiv@exp,w,c
  9991  0016A8  A4D8               	btfss	status,2,c
  9992  0016AA  D002               	goto	l5460
  9993  0016AC  D00E               	goto	l5462
  9994  0016AE  D061               	goto	l1162
  9995  0016B0                     l5460:
  9996  0016B0  C031  F032         	movff	___ftdiv@f2+2,??___ftdiv
  9997  0016B4  6A33               	clrf	(??___ftdiv+1)& (0+255),c
  9998  0016B6  6A34               	clrf	(??___ftdiv+2)& (0+255),c
  9999  0016B8  3430               	rlcf	___ftdiv@f2+1,w,c
 10000  0016BA  3632               	rlcf	??___ftdiv& (0+255),f,c
 10001  0016BC  E301               	bnc	u4291
 10002  0016BE  8033               	bsf	(??___ftdiv+1)& (0+255),0,c
 10003  0016C0                     u4291:
 10004  0016C0  5032               	movf	??___ftdiv,w,c
 10005  0016C2  6E3A               	movwf	___ftdiv@sign,c
 10006  0016C4  503A               	movf	___ftdiv@sign,w,c
 10007  0016C6  A4D8               	btfss	status,2,c
 10008  0016C8  D007               	goto	l5466
 10009  0016CA                     l5462:
 10010  0016CA  0E00               	movlw	0
 10011  0016CC  6E2C               	movwf	?___ftdiv,c
 10012  0016CE  0E00               	movlw	0
 10013  0016D0  6E2D               	movwf	?___ftdiv+1,c
 10014  0016D2  0E00               	movlw	0
 10015  0016D4  6E2E               	movwf	?___ftdiv+2,c
 10016  0016D6  D04D               	goto	l1162
 10017  0016D8                     l5466:
 10018  0016D8  0E00               	movlw	0
 10019  0016DA  6E36               	movwf	___ftdiv@f3,c
 10020  0016DC  0E00               	movlw	0
 10021  0016DE  6E37               	movwf	___ftdiv@f3+1,c
 10022  0016E0  0E00               	movlw	0
 10023  0016E2  6E38               	movwf	___ftdiv@f3+2,c
 10024  0016E4  503A               	movf	___ftdiv@sign,w,c
 10025  0016E6  0F89               	addlw	137
 10026  0016E8  5E39               	subwf	___ftdiv@exp,f,c
 10027  0016EA  C02E  F03A         	movff	___ftdiv@f1+2,___ftdiv@sign
 10028  0016EE  5031               	movf	___ftdiv@f2+2,w,c
 10029  0016F0  1A3A               	xorwf	___ftdiv@sign,f,c
 10030  0016F2  0E80               	movlw	128
 10031  0016F4  163A               	andwf	___ftdiv@sign,f,c
 10032  0016F6  8E2D               	bsf	___ftdiv@f1+1,7,c
 10033  0016F8  0EFF               	movlw	255
 10034  0016FA  162C               	andwf	___ftdiv@f1,f,c
 10035  0016FC  0EFF               	movlw	255
 10036  0016FE  162D               	andwf	___ftdiv@f1+1,f,c
 10037  001700  0E00               	movlw	0
 10038  001702  162E               	andwf	___ftdiv@f1+2,f,c
 10039  001704  8E30               	bsf	___ftdiv@f2+1,7,c
 10040  001706  0EFF               	movlw	255
 10041  001708  162F               	andwf	___ftdiv@f2,f,c
 10042  00170A  0EFF               	movlw	255
 10043  00170C  1630               	andwf	___ftdiv@f2+1,f,c
 10044  00170E  0E00               	movlw	0
 10045  001710  1631               	andwf	___ftdiv@f2+2,f,c
 10046  001712  0E18               	movlw	24
 10047  001714  6E35               	movwf	___ftdiv@cntr,c
 10048  001716  D000               	goto	l5486
 10049  001718                     l5486:
 10050  001718  90D8               	bcf	status,0,c
 10051  00171A  3636               	rlcf	___ftdiv@f3,f,c
 10052  00171C  3637               	rlcf	___ftdiv@f3+1,f,c
 10053  00171E  3638               	rlcf	___ftdiv@f3+2,f,c
 10054  001720  502F               	movf	___ftdiv@f2,w,c
 10055  001722  5C2C               	subwf	___ftdiv@f1,w,c
 10056  001724  5030               	movf	___ftdiv@f2+1,w,c
 10057  001726  582D               	subwfb	___ftdiv@f1+1,w,c
 10058  001728  5031               	movf	___ftdiv@f2+2,w,c
 10059  00172A  582E               	subwfb	___ftdiv@f1+2,w,c
 10060  00172C  A0D8               	btfss	status,0,c
 10061  00172E  D007               	goto	l1165
 10062  001730  502F               	movf	___ftdiv@f2,w,c
 10063  001732  5E2C               	subwf	___ftdiv@f1,f,c
 10064  001734  5030               	movf	___ftdiv@f2+1,w,c
 10065  001736  5A2D               	subwfb	___ftdiv@f1+1,f,c
 10066  001738  5031               	movf	___ftdiv@f2+2,w,c
 10067  00173A  5A2E               	subwfb	___ftdiv@f1+2,f,c
 10068  00173C  8036               	bsf	___ftdiv@f3,0,c
 10069  00173E                     l1165:
 10070  00173E  90D8               	bcf	status,0,c
 10071  001740  362C               	rlcf	___ftdiv@f1,f,c
 10072  001742  362D               	rlcf	___ftdiv@f1+1,f,c
 10073  001744  362E               	rlcf	___ftdiv@f1+2,f,c
 10074  001746  2E35               	decfsz	___ftdiv@cntr,f,c
 10075  001748  D7E7               	goto	l5486
 10076  00174A  D000               	goto	l5496
 10077  00174C                     l5496:
 10078  00174C  C036  F011         	movff	___ftdiv@f3,___ftpack@arg
 10079  001750  C037  F012         	movff	___ftdiv@f3+1,___ftpack@arg+1
 10080  001754  C038  F013         	movff	___ftdiv@f3+2,___ftpack@arg+2
 10081  001758  C039  F014         	movff	___ftdiv@exp,___ftpack@exp
 10082  00175C  C03A  F015         	movff	___ftdiv@sign,___ftpack@sign
 10083  001760  EC28  F00C         	call	___ftpack	;wreg free
 10084  001764  C011  F02C         	movff	?___ftpack,?___ftdiv
 10085  001768  C012  F02D         	movff	?___ftpack+1,?___ftdiv+1
 10086  00176C  C013  F02E         	movff	?___ftpack+2,?___ftdiv+2
 10087  001770  D000               	goto	l1162
 10088  001772                     l1162:
 10089  001772  0012               	return		;funcret
 10090  001774                     __end_of___ftdiv:
 10091                           	opt stack 0
 10092                           tblptru	equ	0xFF8
 10093                           tblptrh	equ	0xFF7
 10094                           tblptrl	equ	0xFF6
 10095                           tablat	equ	0xFF5
 10096                           prodh	equ	0xFF4
 10097                           prodl	equ	0xFF3
 10098                           intcon	equ	0xFF2
 10099                           intcon2	equ	0xFF1
 10100                           postinc0	equ	0xFEE
 10101                           wreg	equ	0xFE8
 10102                           postdec1	equ	0xFE5
 10103                           fsr1l	equ	0xFE1
 10104                           indf2	equ	0xFDF
 10105                           postinc2	equ	0xFDE
 10106                           postdec2	equ	0xFDD
 10107                           fsr2h	equ	0xFDA
 10108                           fsr2l	equ	0xFD9
 10109                           status	equ	0xFD8
 10110                           
 10111 ;; *************** function ___ftpack *****************
 10112 ;; Defined at:
 10113 ;;		line 62 in file "E:\XC8\sources\common\float.c"
 10114 ;; Parameters:    Size  Location     Type
 10115 ;;  arg             3   16[COMRAM] unsigned um
 10116 ;;  exp             1   19[COMRAM] unsigned char 
 10117 ;;  sign            1   20[COMRAM] unsigned char 
 10118 ;; Auto vars:     Size  Location     Type
 10119 ;;		None
 10120 ;; Return value:  Size  Location     Type
 10121 ;;                  3   16[COMRAM] float 
 10122 ;; Registers used:
 10123 ;;		wreg, status,2, status,0
 10124 ;; Tracked objects:
 10125 ;;		On entry : 0/0
 10126 ;;		On exit  : 0/0
 10127 ;;		Unchanged: 0/0
 10128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10129 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10130 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10131 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10132 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10133 ;;Total ram usage:        8 bytes
 10134 ;; Hardware stack levels used:    1
 10135 ;; Hardware stack levels required when called:    3
 10136 ;; This function calls:
 10137 ;;		Nothing
 10138 ;; This function is called by:
 10139 ;;		___ftdiv
 10140 ;;		___ftmul
 10141 ;;		___lbtoft
 10142 ;; This function uses a non-reentrant model
 10143 ;;
 10144                           
 10145                           	psect	text53
 10146  001850                     __ptext53:
 10147                           	opt stack 0
 10148  001850                     ___ftpack:
 10149                           	opt stack 25
 10150                           
 10151                           ;incstack = 0
 10152  001850  5014               	movf	___ftpack@exp,w,c
 10153  001852  B4D8               	btfsc	status,2,c
 10154  001854  D005               	goto	l5350
 10155  001856  5011               	movf	___ftpack@arg,w,c
 10156  001858  1012               	iorwf	___ftpack@arg+1,w,c
 10157  00185A  1013               	iorwf	___ftpack@arg+2,w,c
 10158  00185C  A4D8               	btfss	status,2,c
 10159  00185E  D00E               	goto	l5356
 10160  001860                     l5350:
 10161  001860  0E00               	movlw	0
 10162  001862  6E11               	movwf	?___ftpack,c
 10163  001864  0E00               	movlw	0
 10164  001866  6E12               	movwf	?___ftpack+1,c
 10165  001868  0E00               	movlw	0
 10166  00186A  6E13               	movwf	?___ftpack+2,c
 10167  00186C  D053               	goto	l1090
 10168  00186E  D006               	goto	l5356
 10169  001870                     l5354:
 10170  001870  2A14               	incf	___ftpack@exp,f,c
 10171  001872  90D8               	bcf	status,0,c
 10172  001874  3213               	rrcf	___ftpack@arg+2,f,c
 10173  001876  3212               	rrcf	___ftpack@arg+1,f,c
 10174  001878  3211               	rrcf	___ftpack@arg,f,c
 10175  00187A  D000               	goto	l5356
 10176  00187C                     l5356:
 10177  00187C  0E00               	movlw	0
 10178  00187E  1411               	andwf	___ftpack@arg,w,c
 10179  001880  6E16               	movwf	??___ftpack& (0+255),c
 10180  001882  0E00               	movlw	0
 10181  001884  1412               	andwf	___ftpack@arg+1,w,c
 10182  001886  6E17               	movwf	(??___ftpack+1)& (0+255),c
 10183  001888  0EFE               	movlw	254
 10184  00188A  1413               	andwf	___ftpack@arg+2,w,c
 10185  00188C  6E18               	movwf	(??___ftpack+2)& (0+255),c
 10186  00188E  5016               	movf	??___ftpack,w,c
 10187  001890  1017               	iorwf	??___ftpack+1,w,c
 10188  001892  1018               	iorwf	??___ftpack+2,w,c
 10189  001894  B4D8               	btfsc	status,2,c
 10190  001896  D00E               	goto	l5362
 10191  001898  D7EB               	goto	l5354
 10192  00189A  D00C               	goto	l5362
 10193  00189C                     l5358:
 10194  00189C  2A14               	incf	___ftpack@exp,f,c
 10195  00189E  0E01               	movlw	1
 10196  0018A0  2611               	addwf	___ftpack@arg,f,c
 10197  0018A2  0E00               	movlw	0
 10198  0018A4  2212               	addwfc	___ftpack@arg+1,f,c
 10199  0018A6  0E00               	movlw	0
 10200  0018A8  2213               	addwfc	___ftpack@arg+2,f,c
 10201  0018AA  90D8               	bcf	status,0,c
 10202  0018AC  3213               	rrcf	___ftpack@arg+2,f,c
 10203  0018AE  3212               	rrcf	___ftpack@arg+1,f,c
 10204  0018B0  3211               	rrcf	___ftpack@arg,f,c
 10205  0018B2  D000               	goto	l5362
 10206  0018B4                     l5362:
 10207  0018B4  0E00               	movlw	0
 10208  0018B6  1411               	andwf	___ftpack@arg,w,c
 10209  0018B8  6E16               	movwf	??___ftpack& (0+255),c
 10210  0018BA  0E00               	movlw	0
 10211  0018BC  1412               	andwf	___ftpack@arg+1,w,c
 10212  0018BE  6E17               	movwf	(??___ftpack+1)& (0+255),c
 10213  0018C0  0EFF               	movlw	255
 10214  0018C2  1413               	andwf	___ftpack@arg+2,w,c
 10215  0018C4  6E18               	movwf	(??___ftpack+2)& (0+255),c
 10216  0018C6  5016               	movf	??___ftpack,w,c
 10217  0018C8  1017               	iorwf	??___ftpack+1,w,c
 10218  0018CA  1018               	iorwf	??___ftpack+2,w,c
 10219  0018CC  B4D8               	btfsc	status,2,c
 10220  0018CE  D008               	goto	l5366
 10221  0018D0  D7E5               	goto	l5358
 10222  0018D2  D006               	goto	l5366
 10223  0018D4                     l5364:
 10224  0018D4  0614               	decf	___ftpack@exp,f,c
 10225  0018D6  90D8               	bcf	status,0,c
 10226  0018D8  3611               	rlcf	___ftpack@arg,f,c
 10227  0018DA  3612               	rlcf	___ftpack@arg+1,f,c
 10228  0018DC  3613               	rlcf	___ftpack@arg+2,f,c
 10229  0018DE  D000               	goto	l5366
 10230  0018E0                     l5366:
 10231  0018E0  BE12               	btfsc	___ftpack@arg+1,7,c
 10232  0018E2  D004               	goto	l1101
 10233  0018E4  0E02               	movlw	2
 10234  0018E6  6014               	cpfslt	___ftpack@exp,c
 10235  0018E8  D7F5               	goto	l5364
 10236  0018EA  D000               	goto	l1101
 10237  0018EC                     l1101:
 10238  0018EC  B014               	btfsc	___ftpack@exp,0,c
 10239  0018EE  D002               	goto	l5372
 10240  0018F0  9E12               	bcf	___ftpack@arg+1,7,c
 10241  0018F2  D000               	goto	l5372
 10242  0018F4                     l5372:
 10243  0018F4  90D8               	bcf	status,0,c
 10244  0018F6  3214               	rrcf	___ftpack@exp,f,c
 10245  0018F8  5014               	movf	___ftpack@exp,w,c
 10246  0018FA  1213               	iorwf	___ftpack@arg+2,f,c
 10247  0018FC  5015               	movf	___ftpack@sign,w,c
 10248  0018FE  B4D8               	btfsc	status,2,c
 10249  001900  D002               	goto	l5378
 10250  001902  8E13               	bsf	___ftpack@arg+2,7,c
 10251  001904  D000               	goto	l5378
 10252  001906                     l5378:
 10253  001906  C011  F011         	movff	___ftpack@arg,?___ftpack
 10254  00190A  C012  F012         	movff	___ftpack@arg+1,?___ftpack+1
 10255  00190E  C013  F013         	movff	___ftpack@arg+2,?___ftpack+2
 10256  001912  D000               	goto	l1090
 10257  001914                     l1090:
 10258  001914  0012               	return		;funcret
 10259  001916                     __end_of___ftpack:
 10260                           	opt stack 0
 10261                           tblptru	equ	0xFF8
 10262                           tblptrh	equ	0xFF7
 10263                           tblptrl	equ	0xFF6
 10264                           tablat	equ	0xFF5
 10265                           prodh	equ	0xFF4
 10266                           prodl	equ	0xFF3
 10267                           intcon	equ	0xFF2
 10268                           intcon2	equ	0xFF1
 10269                           postinc0	equ	0xFEE
 10270                           wreg	equ	0xFE8
 10271                           postdec1	equ	0xFE5
 10272                           fsr1l	equ	0xFE1
 10273                           indf2	equ	0xFDF
 10274                           postinc2	equ	0xFDE
 10275                           postdec2	equ	0xFDD
 10276                           fsr2h	equ	0xFDA
 10277                           fsr2l	equ	0xFD9
 10278                           status	equ	0xFD8
 10279                           
 10280 ;; *************** function _Wait_One_Sec *****************
 10281 ;; Defined at:
 10282 ;;		line 18 in file "Utils.c"
 10283 ;; Parameters:    Size  Location     Type
 10284 ;;		None
 10285 ;; Auto vars:     Size  Location     Type
 10286 ;;  j               2   16[COMRAM] int 
 10287 ;; Return value:  Size  Location     Type
 10288 ;;		None               void
 10289 ;; Registers used:
 10290 ;;		wreg, status,2, status,0
 10291 ;; Tracked objects:
 10292 ;;		On entry : 0/0
 10293 ;;		On exit  : 0/0
 10294 ;;		Unchanged: 0/0
 10295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10296 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10297 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10298 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10299 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10300 ;;Total ram usage:        2 bytes
 10301 ;; Hardware stack levels used:    1
 10302 ;; Hardware stack levels required when called:    3
 10303 ;; This function calls:
 10304 ;;		Nothing
 10305 ;; This function is called by:
 10306 ;;		_Do_Beep
 10307 ;; This function uses a non-reentrant model
 10308 ;;
 10309                           
 10310                           	psect	text54
 10311  00232C                     __ptext54:
 10312                           	opt stack 0
 10313  00232C                     _Wait_One_Sec:
 10314                           	opt stack 25
 10315                           
 10316                           ;Utils.c: 20: for (int j=0; j<17000;j++);
 10317                           
 10318                           ;incstack = 0
 10319  00232C  0E00               	movlw	0
 10320  00232E  6E12               	movwf	Wait_One_Sec@j+1,c
 10321  002330  0E00               	movlw	0
 10322  002332  6E11               	movwf	Wait_One_Sec@j,c
 10323  002334                     l5840:
 10324  002334  BE12               	btfsc	Wait_One_Sec@j+1,7,c
 10325  002336  D008               	goto	l5844
 10326  002338  0E68               	movlw	104
 10327  00233A  5C11               	subwf	Wait_One_Sec@j,w,c
 10328  00233C  0E42               	movlw	66
 10329  00233E  5812               	subwfb	Wait_One_Sec@j+1,w,c
 10330  002340  B0D8               	btfsc	status,0,c
 10331  002342  D005               	goto	l539
 10332  002344  D001               	goto	l5844
 10333  002346  D003               	goto	l539
 10334  002348                     l5844:
 10335  002348  4A11               	infsnz	Wait_One_Sec@j,f,c
 10336  00234A  2A12               	incf	Wait_One_Sec@j+1,f,c
 10337  00234C  D7F3               	goto	l5840
 10338  00234E                     l539:
 10339  00234E  0012               	return		;funcret
 10340  002350                     __end_of_Wait_One_Sec:
 10341                           	opt stack 0
 10342                           tblptru	equ	0xFF8
 10343                           tblptrh	equ	0xFF7
 10344                           tblptrl	equ	0xFF6
 10345                           tablat	equ	0xFF5
 10346                           prodh	equ	0xFF4
 10347                           prodl	equ	0xFF3
 10348                           intcon	equ	0xFF2
 10349                           intcon2	equ	0xFF1
 10350                           postinc0	equ	0xFEE
 10351                           wreg	equ	0xFE8
 10352                           postdec1	equ	0xFE5
 10353                           fsr1l	equ	0xFE1
 10354                           indf2	equ	0xFDF
 10355                           postinc2	equ	0xFDE
 10356                           postdec2	equ	0xFDD
 10357                           fsr2h	equ	0xFDA
 10358                           fsr2l	equ	0xFD9
 10359                           status	equ	0xFD8
 10360                           
 10361 ;; *************** function _Deactivate_Buzzer *****************
 10362 ;; Defined at:
 10363 ;;		line 31 in file "Utils.c"
 10364 ;; Parameters:    Size  Location     Type
 10365 ;;		None
 10366 ;; Auto vars:     Size  Location     Type
 10367 ;;		None
 10368 ;; Return value:  Size  Location     Type
 10369 ;;		None               void
 10370 ;; Registers used:
 10371 ;;		wreg, status,2
 10372 ;; Tracked objects:
 10373 ;;		On entry : 0/0
 10374 ;;		On exit  : 0/0
 10375 ;;		Unchanged: 0/0
 10376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10377 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10378 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10379 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10380 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10381 ;;Total ram usage:        0 bytes
 10382 ;; Hardware stack levels used:    1
 10383 ;; Hardware stack levels required when called:    3
 10384 ;; This function calls:
 10385 ;;		Nothing
 10386 ;; This function is called by:
 10387 ;;		_Do_Beep
 10388 ;; This function uses a non-reentrant model
 10389 ;;
 10390                           
 10391                           	psect	text55
 10392  002548                     __ptext55:
 10393                           	opt stack 0
 10394  002548                     _Deactivate_Buzzer:
 10395                           	opt stack 25
 10396                           
 10397                           ;Utils.c: 33: CCP2CON = 0x0;
 10398                           
 10399                           ;incstack = 0
 10400  002548  0E00               	movlw	0
 10401  00254A  6EBA               	movwf	4026,c	;volatile
 10402                           
 10403                           ;Utils.c: 34: PORTBbits.RB3 = 0;
 10404  00254C  9681               	bcf	3969,3,c	;volatile
 10405  00254E  0012               	return		;funcret
 10406  002550                     __end_of_Deactivate_Buzzer:
 10407                           	opt stack 0
 10408                           tblptru	equ	0xFF8
 10409                           tblptrh	equ	0xFF7
 10410                           tblptrl	equ	0xFF6
 10411                           tablat	equ	0xFF5
 10412                           prodh	equ	0xFF4
 10413                           prodl	equ	0xFF3
 10414                           intcon	equ	0xFF2
 10415                           intcon2	equ	0xFF1
 10416                           postinc0	equ	0xFEE
 10417                           wreg	equ	0xFE8
 10418                           postdec1	equ	0xFE5
 10419                           fsr1l	equ	0xFE1
 10420                           indf2	equ	0xFDF
 10421                           postinc2	equ	0xFDE
 10422                           postdec2	equ	0xFDD
 10423                           fsr2h	equ	0xFDA
 10424                           fsr2l	equ	0xFD9
 10425                           status	equ	0xFD8
 10426                           
 10427 ;; *************** function _Activate_Buzzer *****************
 10428 ;; Defined at:
 10429 ;;		line 23 in file "Utils.c"
 10430 ;; Parameters:    Size  Location     Type
 10431 ;;		None
 10432 ;; Auto vars:     Size  Location     Type
 10433 ;;		None
 10434 ;; Return value:  Size  Location     Type
 10435 ;;		None               void
 10436 ;; Registers used:
 10437 ;;		wreg, status,2
 10438 ;; Tracked objects:
 10439 ;;		On entry : 0/0
 10440 ;;		On exit  : 0/0
 10441 ;;		Unchanged: 0/0
 10442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10443 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10444 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10445 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10446 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10447 ;;Total ram usage:        0 bytes
 10448 ;; Hardware stack levels used:    1
 10449 ;; Hardware stack levels required when called:    3
 10450 ;; This function calls:
 10451 ;;		Nothing
 10452 ;; This function is called by:
 10453 ;;		_Do_Beep
 10454 ;; This function uses a non-reentrant model
 10455 ;;
 10456                           
 10457                           	psect	text56
 10458  002482                     __ptext56:
 10459                           	opt stack 0
 10460  002482                     _Activate_Buzzer:
 10461                           	opt stack 25
 10462                           
 10463                           ;Utils.c: 25: PR2 = 0b11111001;
 10464                           
 10465                           ;incstack = 0
 10466  002482  0EF9               	movlw	249
 10467  002484  6ECB               	movwf	4043,c	;volatile
 10468                           
 10469                           ;Utils.c: 26: T2CON = 0b00000101;
 10470  002486  0E05               	movlw	5
 10471  002488  6ECA               	movwf	4042,c	;volatile
 10472                           
 10473                           ;Utils.c: 27: CCPR2L = 0b01001010;
 10474  00248A  0E4A               	movlw	74
 10475  00248C  6EBB               	movwf	4027,c	;volatile
 10476                           
 10477                           ;Utils.c: 28: CCP2CON = 0b00111100;
 10478  00248E  0E3C               	movlw	60
 10479  002490  6EBA               	movwf	4026,c	;volatile
 10480  002492  0012               	return		;funcret
 10481  002494                     __end_of_Activate_Buzzer:
 10482                           	opt stack 0
 10483                           tblptru	equ	0xFF8
 10484                           tblptrh	equ	0xFF7
 10485                           tblptrl	equ	0xFF6
 10486                           tablat	equ	0xFF5
 10487                           prodh	equ	0xFF4
 10488                           prodl	equ	0xFF3
 10489                           intcon	equ	0xFF2
 10490                           intcon2	equ	0xFF1
 10491                           postinc0	equ	0xFEE
 10492                           wreg	equ	0xFE8
 10493                           postdec1	equ	0xFE5
 10494                           fsr1l	equ	0xFE1
 10495                           indf2	equ	0xFDF
 10496                           postinc2	equ	0xFDE
 10497                           postdec2	equ	0xFDD
 10498                           fsr2h	equ	0xFDA
 10499                           fsr2l	equ	0xFD9
 10500                           status	equ	0xFD8
 10501                           
 10502 ;; *************** function _DS3231_Setup_Time *****************
 10503 ;; Defined at:
 10504 ;;		line 67 in file "I2C_Support.c"
 10505 ;; Parameters:    Size  Location     Type
 10506 ;;		None
 10507 ;; Auto vars:     Size  Location     Type
 10508 ;;  Address         1   19[COMRAM] unsigned char 
 10509 ;;  Device          1   18[COMRAM] unsigned char 
 10510 ;; Return value:  Size  Location     Type
 10511 ;;		None               void
 10512 ;; Registers used:
 10513 ;;		wreg, status,2, status,0, cstack
 10514 ;; Tracked objects:
 10515 ;;		On entry : 0/0
 10516 ;;		On exit  : 0/0
 10517 ;;		Unchanged: 0/0
 10518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10520 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10521 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10522 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10523 ;;Total ram usage:        2 bytes
 10524 ;; Hardware stack levels used:    1
 10525 ;; Hardware stack levels required when called:    5
 10526 ;; This function calls:
 10527 ;;		_I2C_Start
 10528 ;;		_I2C_Stop
 10529 ;;		_I2C_Write
 10530 ;; This function is called by:
 10531 ;;		_main
 10532 ;; This function uses a non-reentrant model
 10533 ;;
 10534                           
 10535                           	psect	text57
 10536  001DB0                     __ptext57:
 10537                           	opt stack 0
 10538  001DB0                     _DS3231_Setup_Time:
 10539                           	opt stack 25
 10540                           
 10541                           ;I2C_Support.c: 70: char Device = 0x68;
 10542                           
 10543                           ;incstack = 0
 10544  001DB0  0E68               	movlw	104
 10545  001DB2  6E13               	movwf	DS3231_Setup_Time@Device,c
 10546                           
 10547                           ;I2C_Support.c: 71: char Address = 0x00;
 10548  001DB4  0E00               	movlw	0
 10549  001DB6  6E14               	movwf	DS3231_Setup_Time@Address,c
 10550                           
 10551                           ;I2C_Support.c: 73: second = 0x00;
 10552  001DB8  0E00               	movlw	0
 10553  001DBA  6E62               	movwf	_second,c
 10554                           
 10555                           ;I2C_Support.c: 74: minute = 0x00;
 10556  001DBC  0E00               	movlw	0
 10557  001DBE  6E5F               	movwf	_minute,c
 10558                           
 10559                           ;I2C_Support.c: 75: hour = 0x00;
 10560  001DC0  0E00               	movlw	0
 10561  001DC2  6E5E               	movwf	_hour,c
 10562                           
 10563                           ;I2C_Support.c: 76: dow = 0x00;
 10564  001DC4  0E00               	movlw	0
 10565  001DC6  6E5B               	movwf	_dow,c
 10566                           
 10567                           ;I2C_Support.c: 77: day = 0x28;
 10568  001DC8  0E28               	movlw	40
 10569  001DCA  6E5A               	movwf	_day,c
 10570                           
 10571                           ;I2C_Support.c: 78: month = 0x10;
 10572  001DCC  0E10               	movlw	16
 10573  001DCE  6E60               	movwf	_month,c
 10574                           
 10575                           ;I2C_Support.c: 79: year = 0x21;
 10576  001DD0  0E21               	movlw	33
 10577  001DD2  6E6C               	movwf	_year,c
 10578                           
 10579                           ;I2C_Support.c: 81: I2C_Start();
 10580  001DD4  EC53  F012         	call	_I2C_Start	;wreg free
 10581                           
 10582                           ;I2C_Support.c: 82: I2C_Write((Device << 1) | 0);
 10583  001DD8  5013               	movf	DS3231_Setup_Time@Device,w,c
 10584  001DDA  2413               	addwf	DS3231_Setup_Time@Device,w,c
 10585  001DDC  ECAB  F010         	call	_I2C_Write
 10586                           
 10587                           ;I2C_Support.c: 83: I2C_Write(Address);
 10588  001DE0  5014               	movf	DS3231_Setup_Time@Address,w,c
 10589  001DE2  ECAB  F010         	call	_I2C_Write
 10590                           
 10591                           ;I2C_Support.c: 84: I2C_Write(second);
 10592  001DE6  5062               	movf	_second,w,c
 10593  001DE8  ECAB  F010         	call	_I2C_Write
 10594                           
 10595                           ;I2C_Support.c: 85: I2C_Write(minute);
 10596  001DEC  505F               	movf	_minute,w,c
 10597  001DEE  ECAB  F010         	call	_I2C_Write
 10598                           
 10599                           ;I2C_Support.c: 86: I2C_Write(hour);
 10600  001DF2  505E               	movf	_hour,w,c
 10601  001DF4  ECAB  F010         	call	_I2C_Write
 10602                           
 10603                           ;I2C_Support.c: 87: I2C_Write(dow);
 10604  001DF8  505B               	movf	_dow,w,c
 10605  001DFA  ECAB  F010         	call	_I2C_Write
 10606                           
 10607                           ;I2C_Support.c: 88: I2C_Write(day);
 10608  001DFE  505A               	movf	_day,w,c
 10609  001E00  ECAB  F010         	call	_I2C_Write
 10610                           
 10611                           ;I2C_Support.c: 89: I2C_Write(month);
 10612  001E04  5060               	movf	_month,w,c
 10613  001E06  ECAB  F010         	call	_I2C_Write
 10614                           
 10615                           ;I2C_Support.c: 90: I2C_Write(year);
 10616  001E0A  506C               	movf	_year,w,c
 10617  001E0C  ECAB  F010         	call	_I2C_Write
 10618                           
 10619                           ;I2C_Support.c: 91: I2C_Stop();
 10620  001E10  EC4A  F012         	call	_I2C_Stop	;wreg free
 10621  001E14  0012               	return		;funcret
 10622  001E16                     __end_of_DS3231_Setup_Time:
 10623                           	opt stack 0
 10624                           tblptru	equ	0xFF8
 10625                           tblptrh	equ	0xFF7
 10626                           tblptrl	equ	0xFF6
 10627                           tablat	equ	0xFF5
 10628                           prodh	equ	0xFF4
 10629                           prodl	equ	0xFF3
 10630                           intcon	equ	0xFF2
 10631                           intcon2	equ	0xFF1
 10632                           postinc0	equ	0xFEE
 10633                           wreg	equ	0xFE8
 10634                           postdec1	equ	0xFE5
 10635                           fsr1l	equ	0xFE1
 10636                           indf2	equ	0xFDF
 10637                           postinc2	equ	0xFDE
 10638                           postdec2	equ	0xFDD
 10639                           fsr2h	equ	0xFDA
 10640                           fsr2l	equ	0xFD9
 10641                           status	equ	0xFD8
 10642                           
 10643 ;; *************** function _DS3231_Read_Time *****************
 10644 ;; Defined at:
 10645 ;;		line 45 in file "I2C_Support.c"
 10646 ;; Parameters:    Size  Location     Type
 10647 ;;		None
 10648 ;; Auto vars:     Size  Location     Type
 10649 ;;  Device          1   20[COMRAM] unsigned char 
 10650 ;;  Address         1   19[COMRAM] unsigned char 
 10651 ;;  Data_Ret        1    0        unsigned char 
 10652 ;; Return value:  Size  Location     Type
 10653 ;;		None               void
 10654 ;; Registers used:
 10655 ;;		wreg, status,2, status,0, cstack
 10656 ;; Tracked objects:
 10657 ;;		On entry : 0/0
 10658 ;;		On exit  : 0/0
 10659 ;;		Unchanged: 0/0
 10660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10661 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10662 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10663 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10664 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10665 ;;Total ram usage:        2 bytes
 10666 ;; Hardware stack levels used:    1
 10667 ;; Hardware stack levels required when called:    6
 10668 ;; This function calls:
 10669 ;;		_I2C_ReStart
 10670 ;;		_I2C_Read
 10671 ;;		_I2C_Start
 10672 ;;		_I2C_Stop
 10673 ;;		_I2C_Write
 10674 ;; This function is called by:
 10675 ;;		_main
 10676 ;; This function uses a non-reentrant model
 10677 ;;
 10678                           
 10679                           	psect	text58
 10680  001E16                     __ptext58:
 10681                           	opt stack 0
 10682  001E16                     _DS3231_Read_Time:
 10683                           	opt stack 24
 10684                           
 10685                           ;I2C_Support.c: 47: char Device = 0x68;
 10686                           
 10687                           ;incstack = 0
 10688  001E16  0E68               	movlw	104
 10689  001E18  6E15               	movwf	DS3231_Read_Time@Device,c
 10690                           
 10691                           ;I2C_Support.c: 48: char Address = 0x00;
 10692  001E1A  0E00               	movlw	0
 10693  001E1C  6E14               	movwf	DS3231_Read_Time@Address,c
 10694                           
 10695                           ;I2C_Support.c: 49: char Data_Ret;
 10696                           ;I2C_Support.c: 50: I2C_Start();
 10697  001E1E  EC53  F012         	call	_I2C_Start	;wreg free
 10698                           
 10699                           ;I2C_Support.c: 51: I2C_Write((Device << 1) | 0);
 10700  001E22  5015               	movf	DS3231_Read_Time@Device,w,c
 10701  001E24  2415               	addwf	DS3231_Read_Time@Device,w,c
 10702  001E26  ECAB  F010         	call	_I2C_Write
 10703                           
 10704                           ;I2C_Support.c: 52: I2C_Write(Address);
 10705  001E2A  5014               	movf	DS3231_Read_Time@Address,w,c
 10706  001E2C  ECAB  F010         	call	_I2C_Write
 10707                           
 10708                           ;I2C_Support.c: 53: I2C_ReStart();
 10709  001E30  EC0F  F012         	call	_I2C_ReStart	;wreg free
 10710                           
 10711                           ;I2C_Support.c: 54: I2C_Write((Device << 1) | 1);
 10712  001E34  80D8               	bsf	status,0,c
 10713  001E36  3415               	rlcf	DS3231_Read_Time@Device,w,c
 10714  001E38  ECAB  F010         	call	_I2C_Write
 10715                           
 10716                           ;I2C_Support.c: 56: second = I2C_Read(1);
 10717  001E3C  0E01               	movlw	1
 10718  001E3E  EC2A  F010         	call	_I2C_Read
 10719  001E42  6E62               	movwf	_second,c
 10720                           
 10721                           ;I2C_Support.c: 57: minute = I2C_Read(1);
 10722  001E44  0E01               	movlw	1
 10723  001E46  EC2A  F010         	call	_I2C_Read
 10724  001E4A  6E5F               	movwf	_minute,c
 10725                           
 10726                           ;I2C_Support.c: 58: hour = I2C_Read(1);
 10727  001E4C  0E01               	movlw	1
 10728  001E4E  EC2A  F010         	call	_I2C_Read
 10729  001E52  6E5E               	movwf	_hour,c
 10730                           
 10731                           ;I2C_Support.c: 59: dow = I2C_Read(1);
 10732  001E54  0E01               	movlw	1
 10733  001E56  EC2A  F010         	call	_I2C_Read
 10734  001E5A  6E5B               	movwf	_dow,c
 10735                           
 10736                           ;I2C_Support.c: 60: day = I2C_Read(1);
 10737  001E5C  0E01               	movlw	1
 10738  001E5E  EC2A  F010         	call	_I2C_Read
 10739  001E62  6E5A               	movwf	_day,c
 10740                           
 10741                           ;I2C_Support.c: 61: month = I2C_Read(1);
 10742  001E64  0E01               	movlw	1
 10743  001E66  EC2A  F010         	call	_I2C_Read
 10744  001E6A  6E60               	movwf	_month,c
 10745                           
 10746                           ;I2C_Support.c: 62: year = I2C_Read(0);
 10747  001E6C  0E00               	movlw	0
 10748  001E6E  EC2A  F010         	call	_I2C_Read
 10749  001E72  6E6C               	movwf	_year,c
 10750                           
 10751                           ;I2C_Support.c: 64: I2C_Stop();
 10752  001E74  EC4A  F012         	call	_I2C_Stop	;wreg free
 10753  001E78  0012               	return		;funcret
 10754  001E7A                     __end_of_DS3231_Read_Time:
 10755                           	opt stack 0
 10756                           tblptru	equ	0xFF8
 10757                           tblptrh	equ	0xFF7
 10758                           tblptrl	equ	0xFF6
 10759                           tablat	equ	0xFF5
 10760                           prodh	equ	0xFF4
 10761                           prodl	equ	0xFF3
 10762                           intcon	equ	0xFF2
 10763                           intcon2	equ	0xFF1
 10764                           postinc0	equ	0xFEE
 10765                           wreg	equ	0xFE8
 10766                           postdec1	equ	0xFE5
 10767                           fsr1l	equ	0xFE1
 10768                           indf2	equ	0xFDF
 10769                           postinc2	equ	0xFDE
 10770                           postdec2	equ	0xFDD
 10771                           fsr2h	equ	0xFDA
 10772                           fsr2l	equ	0xFD9
 10773                           status	equ	0xFD8
 10774                           
 10775 ;; *************** function _DS1621_Read_Temp *****************
 10776 ;; Defined at:
 10777 ;;		line 29 in file "I2C_Support.c"
 10778 ;; Parameters:    Size  Location     Type
 10779 ;;		None
 10780 ;; Auto vars:     Size  Location     Type
 10781 ;;  Device          1   23[COMRAM] unsigned char 
 10782 ;;  Data_Ret        1   22[COMRAM] unsigned char 
 10783 ;;  Cmd             1   21[COMRAM] unsigned char 
 10784 ;; Return value:  Size  Location     Type
 10785 ;;                  2   19[COMRAM] int 
 10786 ;; Registers used:
 10787 ;;		wreg, status,2, status,0, cstack
 10788 ;; Tracked objects:
 10789 ;;		On entry : 0/0
 10790 ;;		On exit  : 0/0
 10791 ;;		Unchanged: 0/0
 10792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10793 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10794 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10795 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10796 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10797 ;;Total ram usage:        5 bytes
 10798 ;; Hardware stack levels used:    1
 10799 ;; Hardware stack levels required when called:    6
 10800 ;; This function calls:
 10801 ;;		_I2C_ReStart
 10802 ;;		_I2C_Read
 10803 ;;		_I2C_Start
 10804 ;;		_I2C_Stop
 10805 ;;		_I2C_Write
 10806 ;; This function is called by:
 10807 ;;		_main
 10808 ;; This function uses a non-reentrant model
 10809 ;;
 10810                           
 10811                           	psect	text59
 10812  002194                     __ptext59:
 10813                           	opt stack 0
 10814  002194                     _DS1621_Read_Temp:
 10815                           	opt stack 24
 10816                           
 10817                           ;I2C_Support.c: 31: char Device = 0x48;
 10818                           
 10819                           ;incstack = 0
 10820  002194  0E48               	movlw	72
 10821  002196  6E18               	movwf	DS1621_Read_Temp@Device,c
 10822                           
 10823                           ;I2C_Support.c: 32: char Cmd = 0xAA;
 10824  002198  0EAA               	movlw	170
 10825  00219A  6E16               	movwf	DS1621_Read_Temp@Cmd,c
 10826                           
 10827                           ;I2C_Support.c: 34: char Data_Ret;
 10828                           ;I2C_Support.c: 35: I2C_Start();
 10829  00219C  EC53  F012         	call	_I2C_Start	;wreg free
 10830                           
 10831                           ;I2C_Support.c: 36: I2C_Write((Device << 1) | 0);
 10832  0021A0  5018               	movf	DS1621_Read_Temp@Device,w,c
 10833  0021A2  2418               	addwf	DS1621_Read_Temp@Device,w,c
 10834  0021A4  ECAB  F010         	call	_I2C_Write
 10835                           
 10836                           ;I2C_Support.c: 37: I2C_Write(Cmd);
 10837  0021A8  5016               	movf	DS1621_Read_Temp@Cmd,w,c
 10838  0021AA  ECAB  F010         	call	_I2C_Write
 10839                           
 10840                           ;I2C_Support.c: 38: I2C_ReStart();
 10841  0021AE  EC0F  F012         	call	_I2C_ReStart	;wreg free
 10842                           
 10843                           ;I2C_Support.c: 39: I2C_Write((Device << 1) | 1);
 10844  0021B2  80D8               	bsf	status,0,c
 10845  0021B4  3418               	rlcf	DS1621_Read_Temp@Device,w,c
 10846  0021B6  ECAB  F010         	call	_I2C_Write
 10847                           
 10848                           ;I2C_Support.c: 40: Data_Ret = I2C_Read(0);
 10849  0021BA  0E00               	movlw	0
 10850  0021BC  EC2A  F010         	call	_I2C_Read
 10851  0021C0  6E17               	movwf	DS1621_Read_Temp@Data_Ret,c
 10852                           
 10853                           ;I2C_Support.c: 41: I2C_Stop();
 10854  0021C2  EC4A  F012         	call	_I2C_Stop	;wreg free
 10855                           
 10856                           ;I2C_Support.c: 42: return Data_Ret;
 10857  0021C6  C017  F014         	movff	DS1621_Read_Temp@Data_Ret,?_DS1621_Read_Temp
 10858  0021CA  6A15               	clrf	?_DS1621_Read_Temp+1,c
 10859  0021CC  D000               	goto	l231
 10860  0021CE                     l231:
 10861  0021CE  0012               	return		;funcret
 10862  0021D0                     __end_of_DS1621_Read_Temp:
 10863                           	opt stack 0
 10864                           tblptru	equ	0xFF8
 10865                           tblptrh	equ	0xFF7
 10866                           tblptrl	equ	0xFF6
 10867                           tablat	equ	0xFF5
 10868                           prodh	equ	0xFF4
 10869                           prodl	equ	0xFF3
 10870                           intcon	equ	0xFF2
 10871                           intcon2	equ	0xFF1
 10872                           postinc0	equ	0xFEE
 10873                           wreg	equ	0xFE8
 10874                           postdec1	equ	0xFE5
 10875                           fsr1l	equ	0xFE1
 10876                           indf2	equ	0xFDF
 10877                           postinc2	equ	0xFDE
 10878                           postdec2	equ	0xFDD
 10879                           fsr2h	equ	0xFDA
 10880                           fsr2l	equ	0xFD9
 10881                           status	equ	0xFD8
 10882                           
 10883 ;; *************** function _I2C_Write *****************
 10884 ;; Defined at:
 10885 ;;		line 41 in file "I2C.c"
 10886 ;; Parameters:    Size  Location     Type
 10887 ;;  outByte         1    wreg     unsigned char 
 10888 ;; Auto vars:     Size  Location     Type
 10889 ;;  outByte         1   16[COMRAM] unsigned char 
 10890 ;;  n               1   17[COMRAM] unsigned char 
 10891 ;; Return value:  Size  Location     Type
 10892 ;;		None               void
 10893 ;; Registers used:
 10894 ;;		wreg, status,2, status,0, cstack
 10895 ;; Tracked objects:
 10896 ;;		On entry : 0/0
 10897 ;;		On exit  : 0/0
 10898 ;;		Unchanged: 0/0
 10899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10900 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10901 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10902 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10903 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10904 ;;Total ram usage:        2 bytes
 10905 ;; Hardware stack levels used:    1
 10906 ;; Hardware stack levels required when called:    4
 10907 ;; This function calls:
 10908 ;;		_i2cHighScl
 10909 ;;		_i2cHighSda
 10910 ;;		_i2cLowScl
 10911 ;;		_i2cLowSda
 10912 ;; This function is called by:
 10913 ;;		_I2C_Write_Cmd_Only
 10914 ;;		_I2C_Write_Cmd_Write_Data
 10915 ;;		_DS1621_Read_Temp
 10916 ;;		_DS3231_Read_Time
 10917 ;;		_DS3231_Setup_Time
 10918 ;;		_I2C_Write_Address_Read_One_Byte
 10919 ;;		_I2C_Write_Address_Write_One_Byte
 10920 ;;		_I2C_Write_Cmd_Read_One_Byte
 10921 ;; This function uses a non-reentrant model
 10922 ;;
 10923                           
 10924                           	psect	text60
 10925  002156                     __ptext60:
 10926                           	opt stack 0
 10927  002156                     _I2C_Write:
 10928                           	opt stack 23
 10929                           
 10930                           ;incstack = 0
 10931                           ;I2C_Write@outByte stored from wreg
 10932  002156  6E11               	movwf	I2C_Write@outByte,c
 10933                           
 10934                           ;I2C.c: 43: unsigned char n;
 10935                           ;I2C.c: 44: for (n = 0; n < 8; n++)
 10936  002158  0E00               	movlw	0
 10937  00215A  6E12               	movwf	I2C_Write@n,c
 10938  00215C                     l5384:
 10939  00215C  0E07               	movlw	7
 10940  00215E  6412               	cpfsgt	I2C_Write@n,c
 10941  002160  D001               	goto	l179
 10942  002162  D011               	goto	l5402
 10943  002164                     l179:
 10944                           
 10945                           ;I2C.c: 45: {
 10946                           ;I2C.c: 46: if (outByte & 0x80) i2cHighSda();
 10947  002164  AE11               	btfss	I2C_Write@outByte,7,c
 10948  002166  D003               	goto	l5390
 10949  002168  ECAC  F012         	call	_i2cHighSda	;wreg free
 10950  00216C  D003               	goto	l5392
 10951  00216E                     l5390:
 10952                           
 10953                           ;I2C.c: 47: else i2cLowSda();
 10954  00216E  EC9F  F012         	call	_i2cLowSda	;wreg free
 10955  002172  D000               	goto	l5392
 10956  002174                     l5392:
 10957                           
 10958                           ;I2C.c: 48: i2cHighScl();
 10959  002174  EC84  F012         	call	_i2cHighScl	;wreg free
 10960                           
 10961                           ;I2C.c: 49: i2cLowScl();
 10962  002178  ECA8  F012         	call	_i2cLowScl	;wreg free
 10963                           
 10964                           ;I2C.c: 50: outByte = outByte << 1;
 10965  00217C  5011               	movf	I2C_Write@outByte,w,c
 10966  00217E  2411               	addwf	I2C_Write@outByte,w,c
 10967  002180  6E11               	movwf	I2C_Write@outByte,c
 10968  002182  2A12               	incf	I2C_Write@n,f,c
 10969  002184  D7EB               	goto	l5384
 10970  002186                     l5402:
 10971                           
 10972                           ;I2C.c: 51: }
 10973                           ;I2C.c: 52: i2cHighSda();
 10974  002186  ECAC  F012         	call	_i2cHighSda	;wreg free
 10975                           
 10976                           ;I2C.c: 53: i2cHighScl();
 10977  00218A  EC84  F012         	call	_i2cHighScl	;wreg free
 10978                           
 10979                           ;I2C.c: 54: i2cLowScl();
 10980  00218E  ECA8  F012         	call	_i2cLowScl	;wreg free
 10981  002192  0012               	return		;funcret
 10982  002194                     __end_of_I2C_Write:
 10983                           	opt stack 0
 10984                           tblptru	equ	0xFF8
 10985                           tblptrh	equ	0xFF7
 10986                           tblptrl	equ	0xFF6
 10987                           tablat	equ	0xFF5
 10988                           prodh	equ	0xFF4
 10989                           prodl	equ	0xFF3
 10990                           intcon	equ	0xFF2
 10991                           intcon2	equ	0xFF1
 10992                           postinc0	equ	0xFEE
 10993                           wreg	equ	0xFE8
 10994                           postdec1	equ	0xFE5
 10995                           fsr1l	equ	0xFE1
 10996                           indf2	equ	0xFDF
 10997                           postinc2	equ	0xFDE
 10998                           postdec2	equ	0xFDD
 10999                           fsr2h	equ	0xFDA
 11000                           fsr2l	equ	0xFD9
 11001                           status	equ	0xFD8
 11002                           
 11003 ;; *************** function _I2C_Stop *****************
 11004 ;; Defined at:
 11005 ;;		line 88 in file "I2C.c"
 11006 ;; Parameters:    Size  Location     Type
 11007 ;;		None
 11008 ;; Auto vars:     Size  Location     Type
 11009 ;;		None
 11010 ;; Return value:  Size  Location     Type
 11011 ;;		None               void
 11012 ;; Registers used:
 11013 ;;		wreg, cstack
 11014 ;; Tracked objects:
 11015 ;;		On entry : 0/0
 11016 ;;		On exit  : 0/0
 11017 ;;		Unchanged: 0/0
 11018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11019 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11020 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11021 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11022 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11023 ;;Total ram usage:        0 bytes
 11024 ;; Hardware stack levels used:    1
 11025 ;; Hardware stack levels required when called:    4
 11026 ;; This function calls:
 11027 ;;		_i2cHighScl
 11028 ;;		_i2cHighSda
 11029 ;;		_i2cLowScl
 11030 ;;		_i2cLowSda
 11031 ;; This function is called by:
 11032 ;;		_I2C_Write_Cmd_Only
 11033 ;;		_I2C_Write_Cmd_Write_Data
 11034 ;;		_DS1621_Read_Temp
 11035 ;;		_DS3231_Read_Time
 11036 ;;		_DS3231_Setup_Time
 11037 ;;		_I2C_Write_Address_Read_One_Byte
 11038 ;;		_I2C_Write_Address_Write_One_Byte
 11039 ;;		_I2C_Write_Cmd_Read_One_Byte
 11040 ;; This function uses a non-reentrant model
 11041 ;;
 11042                           
 11043                           	psect	text61
 11044  002494                     __ptext61:
 11045                           	opt stack 0
 11046  002494                     _I2C_Stop:
 11047                           	opt stack 23
 11048                           
 11049                           ;I2C.c: 90: i2cLowScl();
 11050                           
 11051                           ;incstack = 0
 11052  002494  ECA8  F012         	call	_i2cLowScl	;wreg free
 11053                           
 11054                           ;I2C.c: 91: i2cLowSda();
 11055  002498  EC9F  F012         	call	_i2cLowSda	;wreg free
 11056                           
 11057                           ;I2C.c: 92: i2cHighScl();
 11058  00249C  EC84  F012         	call	_i2cHighScl	;wreg free
 11059                           
 11060                           ;I2C.c: 93: i2cHighSda();
 11061  0024A0  ECAC  F012         	call	_i2cHighSda	;wreg free
 11062  0024A4  0012               	return		;funcret
 11063  0024A6                     __end_of_I2C_Stop:
 11064                           	opt stack 0
 11065                           tblptru	equ	0xFF8
 11066                           tblptrh	equ	0xFF7
 11067                           tblptrl	equ	0xFF6
 11068                           tablat	equ	0xFF5
 11069                           prodh	equ	0xFF4
 11070                           prodl	equ	0xFF3
 11071                           intcon	equ	0xFF2
 11072                           intcon2	equ	0xFF1
 11073                           postinc0	equ	0xFEE
 11074                           wreg	equ	0xFE8
 11075                           postdec1	equ	0xFE5
 11076                           fsr1l	equ	0xFE1
 11077                           indf2	equ	0xFDF
 11078                           postinc2	equ	0xFDE
 11079                           postdec2	equ	0xFDD
 11080                           fsr2h	equ	0xFDA
 11081                           fsr2l	equ	0xFD9
 11082                           status	equ	0xFD8
 11083                           
 11084 ;; *************** function _I2C_Start *****************
 11085 ;; Defined at:
 11086 ;;		line 71 in file "I2C.c"
 11087 ;; Parameters:    Size  Location     Type
 11088 ;;		None
 11089 ;; Auto vars:     Size  Location     Type
 11090 ;;		None
 11091 ;; Return value:  Size  Location     Type
 11092 ;;		None               void
 11093 ;; Registers used:
 11094 ;;		wreg, cstack
 11095 ;; Tracked objects:
 11096 ;;		On entry : 0/0
 11097 ;;		On exit  : 0/0
 11098 ;;		Unchanged: 0/0
 11099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11100 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11101 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11102 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11103 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11104 ;;Total ram usage:        0 bytes
 11105 ;; Hardware stack levels used:    1
 11106 ;; Hardware stack levels required when called:    4
 11107 ;; This function calls:
 11108 ;;		_i2cHighScl
 11109 ;;		_i2cHighSda
 11110 ;;		_i2cLowScl
 11111 ;;		_i2cLowSda
 11112 ;; This function is called by:
 11113 ;;		_I2C_Write_Cmd_Only
 11114 ;;		_I2C_Write_Cmd_Write_Data
 11115 ;;		_DS1621_Read_Temp
 11116 ;;		_DS3231_Read_Time
 11117 ;;		_DS3231_Setup_Time
 11118 ;;		_I2C_Write_Address_Read_One_Byte
 11119 ;;		_I2C_Write_Address_Write_One_Byte
 11120 ;;		_I2C_Write_Cmd_Read_One_Byte
 11121 ;; This function uses a non-reentrant model
 11122 ;;
 11123                           
 11124                           	psect	text62
 11125  0024A6                     __ptext62:
 11126                           	opt stack 0
 11127  0024A6                     _I2C_Start:
 11128                           	opt stack 23
 11129                           
 11130                           ;I2C.c: 73: i2cHighSda();
 11131                           
 11132                           ;incstack = 0
 11133  0024A6  ECAC  F012         	call	_i2cHighSda	;wreg free
 11134                           
 11135                           ;I2C.c: 74: i2cHighScl();
 11136  0024AA  EC84  F012         	call	_i2cHighScl	;wreg free
 11137                           
 11138                           ;I2C.c: 75: i2cLowSda();
 11139  0024AE  EC9F  F012         	call	_i2cLowSda	;wreg free
 11140                           
 11141                           ;I2C.c: 76: i2cLowScl();
 11142  0024B2  ECA8  F012         	call	_i2cLowScl	;wreg free
 11143  0024B6  0012               	return		;funcret
 11144  0024B8                     __end_of_I2C_Start:
 11145                           	opt stack 0
 11146                           tblptru	equ	0xFF8
 11147                           tblptrh	equ	0xFF7
 11148                           tblptrl	equ	0xFF6
 11149                           tablat	equ	0xFF5
 11150                           prodh	equ	0xFF4
 11151                           prodl	equ	0xFF3
 11152                           intcon	equ	0xFF2
 11153                           intcon2	equ	0xFF1
 11154                           postinc0	equ	0xFEE
 11155                           wreg	equ	0xFE8
 11156                           postdec1	equ	0xFE5
 11157                           fsr1l	equ	0xFE1
 11158                           indf2	equ	0xFDF
 11159                           postinc2	equ	0xFDE
 11160                           postdec2	equ	0xFDD
 11161                           fsr2h	equ	0xFDA
 11162                           fsr2l	equ	0xFD9
 11163                           status	equ	0xFD8
 11164                           
 11165 ;; *************** function _I2C_Read *****************
 11166 ;; Defined at:
 11167 ;;		line 20 in file "I2C.c"
 11168 ;; Parameters:    Size  Location     Type
 11169 ;;  ack             1    wreg     unsigned char 
 11170 ;; Auto vars:     Size  Location     Type
 11171 ;;  ack             1   16[COMRAM] unsigned char 
 11172 ;;  inByte          1   18[COMRAM] unsigned char 
 11173 ;;  n               1   17[COMRAM] unsigned char 
 11174 ;; Return value:  Size  Location     Type
 11175 ;;                  1    wreg      unsigned char 
 11176 ;; Registers used:
 11177 ;;		wreg, status,2, status,0, cstack
 11178 ;; Tracked objects:
 11179 ;;		On entry : 0/0
 11180 ;;		On exit  : 0/0
 11181 ;;		Unchanged: 0/0
 11182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11183 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11184 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11185 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11186 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11187 ;;Total ram usage:        3 bytes
 11188 ;; Hardware stack levels used:    1
 11189 ;; Hardware stack levels required when called:    5
 11190 ;; This function calls:
 11191 ;;		_i2cAck
 11192 ;;		_i2cHighScl
 11193 ;;		_i2cHighSda
 11194 ;;		_i2cLowScl
 11195 ;;		_i2cNack
 11196 ;; This function is called by:
 11197 ;;		_DS1621_Read_Temp
 11198 ;;		_DS3231_Read_Time
 11199 ;;		_I2C_Write_Address_Read_One_Byte
 11200 ;;		_I2C_Write_Cmd_Read_One_Byte
 11201 ;; This function uses a non-reentrant model
 11202 ;;
 11203                           
 11204                           	psect	text63
 11205  002054                     __ptext63:
 11206                           	opt stack 0
 11207  002054                     _I2C_Read:
 11208                           	opt stack 24
 11209                           
 11210                           ;incstack = 0
 11211                           ;I2C_Read@ack stored from wreg
 11212  002054  6E11               	movwf	I2C_Read@ack,c
 11213                           
 11214                           ;I2C.c: 22: unsigned char inByte, n;
 11215                           ;I2C.c: 23: i2cHighSda();
 11216  002056  ECAC  F012         	call	_i2cHighSda	;wreg free
 11217                           
 11218                           ;I2C.c: 24: for (n = 0; n < 8; n++)
 11219  00205A  0E00               	movlw	0
 11220  00205C  6E12               	movwf	I2C_Read@n,c
 11221  00205E                     l5910:
 11222  00205E  0E07               	movlw	7
 11223  002060  6412               	cpfsgt	I2C_Read@n,c
 11224  002062  D001               	goto	l5914
 11225  002064  D00F               	goto	l5928
 11226  002066                     l5914:
 11227                           
 11228                           ;I2C.c: 25: {
 11229                           ;I2C.c: 26: i2cHighScl();
 11230  002066  EC84  F012         	call	_i2cHighScl	;wreg free
 11231                           
 11232                           ;I2C.c: 28: if (PORTBbits.RB5)
 11233  00206A  AA81               	btfss	3969,5,c	;volatile
 11234  00206C  D003               	goto	l5920
 11235                           
 11236                           ;I2C.c: 29: inByte = (inByte << 1) | 0x01;
 11237  00206E  80D8               	bsf	status,0,c
 11238  002070  3613               	rlcf	I2C_Read@inByte,f,c
 11239  002072  D004               	goto	l5922
 11240  002074                     l5920:
 11241                           
 11242                           ;I2C.c: 30: else
 11243                           ;I2C.c: 31: inByte = inByte << 1;
 11244  002074  5013               	movf	I2C_Read@inByte,w,c
 11245  002076  2413               	addwf	I2C_Read@inByte,w,c
 11246  002078  6E13               	movwf	I2C_Read@inByte,c
 11247  00207A  D000               	goto	l5922
 11248  00207C                     l5922:
 11249                           
 11250                           ;I2C.c: 32: i2cLowScl();
 11251  00207C  ECA8  F012         	call	_i2cLowScl	;wreg free
 11252  002080  2A12               	incf	I2C_Read@n,f,c
 11253  002082  D7ED               	goto	l5910
 11254  002084                     l5928:
 11255                           
 11256                           ;I2C.c: 33: }
 11257                           ;I2C.c: 34: if (ack) i2cAck();
 11258  002084  5011               	movf	I2C_Read@ack,w,c
 11259  002086  B4D8               	btfsc	status,2,c
 11260  002088  D003               	goto	l5932
 11261  00208A  EC5C  F012         	call	_i2cAck	;wreg free
 11262  00208E  D003               	goto	l5934
 11263  002090                     l5932:
 11264                           
 11265                           ;I2C.c: 35: else i2cNack();
 11266  002090  EC9A  F012         	call	_i2cNack	;wreg free
 11267  002094  D000               	goto	l5934
 11268  002096                     l5934:
 11269                           
 11270                           ;I2C.c: 38: return(inByte);
 11271  002096  5013               	movf	I2C_Read@inByte,w,c
 11272  002098  D000               	goto	l176
 11273  00209A                     l176:
 11274  00209A  0012               	return		;funcret
 11275  00209C                     __end_of_I2C_Read:
 11276                           	opt stack 0
 11277                           tblptru	equ	0xFF8
 11278                           tblptrh	equ	0xFF7
 11279                           tblptrl	equ	0xFF6
 11280                           tablat	equ	0xFF5
 11281                           prodh	equ	0xFF4
 11282                           prodl	equ	0xFF3
 11283                           intcon	equ	0xFF2
 11284                           intcon2	equ	0xFF1
 11285                           postinc0	equ	0xFEE
 11286                           wreg	equ	0xFE8
 11287                           postdec1	equ	0xFE5
 11288                           fsr1l	equ	0xFE1
 11289                           indf2	equ	0xFDF
 11290                           postinc2	equ	0xFDE
 11291                           postdec2	equ	0xFDD
 11292                           fsr2h	equ	0xFDA
 11293                           fsr2l	equ	0xFD9
 11294                           status	equ	0xFD8
 11295                           
 11296 ;; *************** function _i2cNack *****************
 11297 ;; Defined at:
 11298 ;;		line 57 in file "I2C.c"
 11299 ;; Parameters:    Size  Location     Type
 11300 ;;		None
 11301 ;; Auto vars:     Size  Location     Type
 11302 ;;		None
 11303 ;; Return value:  Size  Location     Type
 11304 ;;		None               void
 11305 ;; Registers used:
 11306 ;;		wreg, cstack
 11307 ;; Tracked objects:
 11308 ;;		On entry : 0/0
 11309 ;;		On exit  : 0/0
 11310 ;;		Unchanged: 0/0
 11311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11312 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11313 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11314 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11315 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11316 ;;Total ram usage:        0 bytes
 11317 ;; Hardware stack levels used:    1
 11318 ;; Hardware stack levels required when called:    4
 11319 ;; This function calls:
 11320 ;;		_i2cHighScl
 11321 ;;		_i2cLowScl
 11322 ;; This function is called by:
 11323 ;;		_I2C_Read
 11324 ;; This function uses a non-reentrant model
 11325 ;;
 11326                           
 11327                           	psect	text64
 11328  002534                     __ptext64:
 11329                           	opt stack 0
 11330  002534                     _i2cNack:
 11331                           	opt stack 24
 11332                           
 11333                           ;I2C.c: 59: i2cHighScl();
 11334                           
 11335                           ;incstack = 0
 11336  002534  EC84  F012         	call	_i2cHighScl	;wreg free
 11337                           
 11338                           ;I2C.c: 60: i2cLowScl();
 11339  002538  ECA8  F012         	call	_i2cLowScl	;wreg free
 11340  00253C  0012               	return		;funcret
 11341  00253E                     __end_of_i2cNack:
 11342                           	opt stack 0
 11343                           tblptru	equ	0xFF8
 11344                           tblptrh	equ	0xFF7
 11345                           tblptrl	equ	0xFF6
 11346                           tablat	equ	0xFF5
 11347                           prodh	equ	0xFF4
 11348                           prodl	equ	0xFF3
 11349                           intcon	equ	0xFF2
 11350                           intcon2	equ	0xFF1
 11351                           postinc0	equ	0xFEE
 11352                           wreg	equ	0xFE8
 11353                           postdec1	equ	0xFE5
 11354                           fsr1l	equ	0xFE1
 11355                           indf2	equ	0xFDF
 11356                           postinc2	equ	0xFDE
 11357                           postdec2	equ	0xFDD
 11358                           fsr2h	equ	0xFDA
 11359                           fsr2l	equ	0xFD9
 11360                           status	equ	0xFD8
 11361                           
 11362 ;; *************** function _i2cAck *****************
 11363 ;; Defined at:
 11364 ;;		line 63 in file "I2C.c"
 11365 ;; Parameters:    Size  Location     Type
 11366 ;;		None
 11367 ;; Auto vars:     Size  Location     Type
 11368 ;;		None
 11369 ;; Return value:  Size  Location     Type
 11370 ;;		None               void
 11371 ;; Registers used:
 11372 ;;		wreg, cstack
 11373 ;; Tracked objects:
 11374 ;;		On entry : 0/0
 11375 ;;		On exit  : 0/0
 11376 ;;		Unchanged: 0/0
 11377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11378 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11379 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11380 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11381 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11382 ;;Total ram usage:        0 bytes
 11383 ;; Hardware stack levels used:    1
 11384 ;; Hardware stack levels required when called:    4
 11385 ;; This function calls:
 11386 ;;		_i2cHighScl
 11387 ;;		_i2cHighSda
 11388 ;;		_i2cLowScl
 11389 ;;		_i2cLowSda
 11390 ;; This function is called by:
 11391 ;;		_I2C_Read
 11392 ;; This function uses a non-reentrant model
 11393 ;;
 11394                           
 11395                           	psect	text65
 11396  0024B8                     __ptext65:
 11397                           	opt stack 0
 11398  0024B8                     _i2cAck:
 11399                           	opt stack 24
 11400                           
 11401                           ;I2C.c: 65: i2cLowSda();
 11402                           
 11403                           ;incstack = 0
 11404  0024B8  EC9F  F012         	call	_i2cLowSda	;wreg free
 11405                           
 11406                           ;I2C.c: 66: i2cHighScl();
 11407  0024BC  EC84  F012         	call	_i2cHighScl	;wreg free
 11408                           
 11409                           ;I2C.c: 67: i2cLowScl();
 11410  0024C0  ECA8  F012         	call	_i2cLowScl	;wreg free
 11411                           
 11412                           ;I2C.c: 68: i2cHighSda();
 11413  0024C4  ECAC  F012         	call	_i2cHighSda	;wreg free
 11414  0024C8  0012               	return		;funcret
 11415  0024CA                     __end_of_i2cAck:
 11416                           	opt stack 0
 11417                           tblptru	equ	0xFF8
 11418                           tblptrh	equ	0xFF7
 11419                           tblptrl	equ	0xFF6
 11420                           tablat	equ	0xFF5
 11421                           prodh	equ	0xFF4
 11422                           prodl	equ	0xFF3
 11423                           intcon	equ	0xFF2
 11424                           intcon2	equ	0xFF1
 11425                           postinc0	equ	0xFEE
 11426                           wreg	equ	0xFE8
 11427                           postdec1	equ	0xFE5
 11428                           fsr1l	equ	0xFE1
 11429                           indf2	equ	0xFDF
 11430                           postinc2	equ	0xFDE
 11431                           postdec2	equ	0xFDD
 11432                           fsr2h	equ	0xFDA
 11433                           fsr2l	equ	0xFD9
 11434                           status	equ	0xFD8
 11435                           
 11436 ;; *************** function _I2C_ReStart *****************
 11437 ;; Defined at:
 11438 ;;		line 79 in file "I2C.c"
 11439 ;; Parameters:    Size  Location     Type
 11440 ;;		None
 11441 ;; Auto vars:     Size  Location     Type
 11442 ;;		None
 11443 ;; Return value:  Size  Location     Type
 11444 ;;		None               void
 11445 ;; Registers used:
 11446 ;;		wreg, cstack
 11447 ;; Tracked objects:
 11448 ;;		On entry : 0/0
 11449 ;;		On exit  : 0/0
 11450 ;;		Unchanged: 0/0
 11451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11452 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11453 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11454 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11455 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11456 ;;Total ram usage:        0 bytes
 11457 ;; Hardware stack levels used:    1
 11458 ;; Hardware stack levels required when called:    4
 11459 ;; This function calls:
 11460 ;;		_i2cHighScl
 11461 ;;		_i2cHighSda
 11462 ;;		_i2cLowScl
 11463 ;;		_i2cLowSda
 11464 ;; This function is called by:
 11465 ;;		_DS1621_Read_Temp
 11466 ;;		_DS3231_Read_Time
 11467 ;;		_I2C_Write_Address_Read_One_Byte
 11468 ;;		_I2C_Write_Cmd_Read_One_Byte
 11469 ;; This function uses a non-reentrant model
 11470 ;;
 11471                           
 11472                           	psect	text66
 11473  00241E                     __ptext66:
 11474                           	opt stack 0
 11475  00241E                     _I2C_ReStart:
 11476                           	opt stack 25
 11477                           
 11478                           ;I2C.c: 81: i2cLowScl();
 11479                           
 11480                           ;incstack = 0
 11481  00241E  ECA8  F012         	call	_i2cLowScl	;wreg free
 11482                           
 11483                           ;I2C.c: 82: i2cHighSda();
 11484  002422  ECAC  F012         	call	_i2cHighSda	;wreg free
 11485                           
 11486                           ;I2C.c: 83: i2cHighScl();
 11487  002426  EC84  F012         	call	_i2cHighScl	;wreg free
 11488                           
 11489                           ;I2C.c: 84: i2cLowSda();
 11490  00242A  EC9F  F012         	call	_i2cLowSda	;wreg free
 11491                           
 11492                           ;I2C.c: 85: i2cLowScl();
 11493  00242E  ECA8  F012         	call	_i2cLowScl	;wreg free
 11494  002432  0012               	return		;funcret
 11495  002434                     __end_of_I2C_ReStart:
 11496                           	opt stack 0
 11497                           tblptru	equ	0xFF8
 11498                           tblptrh	equ	0xFF7
 11499                           tblptrl	equ	0xFF6
 11500                           tablat	equ	0xFF5
 11501                           prodh	equ	0xFF4
 11502                           prodl	equ	0xFF3
 11503                           intcon	equ	0xFF2
 11504                           intcon2	equ	0xFF1
 11505                           postinc0	equ	0xFEE
 11506                           wreg	equ	0xFE8
 11507                           postdec1	equ	0xFE5
 11508                           fsr1l	equ	0xFE1
 11509                           indf2	equ	0xFDF
 11510                           postinc2	equ	0xFDE
 11511                           postdec2	equ	0xFDD
 11512                           fsr2h	equ	0xFDA
 11513                           fsr2l	equ	0xFD9
 11514                           status	equ	0xFD8
 11515                           
 11516 ;; *************** function _i2cLowSda *****************
 11517 ;; Defined at:
 11518 ;;		line 102 in file "I2C.c"
 11519 ;; Parameters:    Size  Location     Type
 11520 ;;		None
 11521 ;; Auto vars:     Size  Location     Type
 11522 ;;		None
 11523 ;; Return value:  Size  Location     Type
 11524 ;;		None               void
 11525 ;; Registers used:
 11526 ;;		None
 11527 ;; Tracked objects:
 11528 ;;		On entry : 0/0
 11529 ;;		On exit  : 0/0
 11530 ;;		Unchanged: 0/0
 11531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11532 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11533 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11534 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11535 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11536 ;;Total ram usage:        0 bytes
 11537 ;; Hardware stack levels used:    1
 11538 ;; Hardware stack levels required when called:    3
 11539 ;; This function calls:
 11540 ;;		Nothing
 11541 ;; This function is called by:
 11542 ;;		_I2C_Write
 11543 ;;		_i2cAck
 11544 ;;		_I2C_Start
 11545 ;;		_I2C_ReStart
 11546 ;;		_I2C_Stop
 11547 ;; This function uses a non-reentrant model
 11548 ;;
 11549                           
 11550                           	psect	text67
 11551  00253E                     __ptext67:
 11552                           	opt stack 0
 11553  00253E                     _i2cLowSda:
 11554                           	opt stack 23
 11555                           
 11556                           ;I2C.c: 104: PORTBbits.RB5 = 0;
 11557                           
 11558                           ;incstack = 0
 11559  00253E  9A81               	bcf	3969,5,c	;volatile
 11560                           
 11561                           ;I2C.c: 105: TRISBbits.RB5 = 0;
 11562  002540  9A93               	bcf	3987,5,c	;volatile
 11563                           
 11564                           ;I2C.c: 106: _delay((unsigned long)((2)*(8000000/4000000.0)));
 11565  002542  D000               	nop2		;2 cycle nop
 11566  002544  D000               	nop2		;2 cycle nop
 11567  002546  0012               	return		;funcret
 11568  002548                     __end_of_i2cLowSda:
 11569                           	opt stack 0
 11570                           tblptru	equ	0xFF8
 11571                           tblptrh	equ	0xFF7
 11572                           tblptrl	equ	0xFF6
 11573                           tablat	equ	0xFF5
 11574                           prodh	equ	0xFF4
 11575                           prodl	equ	0xFF3
 11576                           intcon	equ	0xFF2
 11577                           intcon2	equ	0xFF1
 11578                           postinc0	equ	0xFEE
 11579                           wreg	equ	0xFE8
 11580                           postdec1	equ	0xFE5
 11581                           fsr1l	equ	0xFE1
 11582                           indf2	equ	0xFDF
 11583                           postinc2	equ	0xFDE
 11584                           postdec2	equ	0xFDD
 11585                           fsr2h	equ	0xFDA
 11586                           fsr2l	equ	0xFD9
 11587                           status	equ	0xFD8
 11588                           
 11589 ;; *************** function _i2cLowScl *****************
 11590 ;; Defined at:
 11591 ;;		line 115 in file "I2C.c"
 11592 ;; Parameters:    Size  Location     Type
 11593 ;;		None
 11594 ;; Auto vars:     Size  Location     Type
 11595 ;;		None
 11596 ;; Return value:  Size  Location     Type
 11597 ;;		None               void
 11598 ;; Registers used:
 11599 ;;		None
 11600 ;; Tracked objects:
 11601 ;;		On entry : 0/0
 11602 ;;		On exit  : 0/0
 11603 ;;		Unchanged: 0/0
 11604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11605 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11606 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11607 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11608 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11609 ;;Total ram usage:        0 bytes
 11610 ;; Hardware stack levels used:    1
 11611 ;; Hardware stack levels required when called:    3
 11612 ;; This function calls:
 11613 ;;		Nothing
 11614 ;; This function is called by:
 11615 ;;		_I2C_Read
 11616 ;;		_I2C_Write
 11617 ;;		_i2cNack
 11618 ;;		_i2cAck
 11619 ;;		_I2C_Start
 11620 ;;		_I2C_ReStart
 11621 ;;		_I2C_Stop
 11622 ;; This function uses a non-reentrant model
 11623 ;;
 11624                           
 11625                           	psect	text68
 11626  002550                     __ptext68:
 11627                           	opt stack 0
 11628  002550                     _i2cLowScl:
 11629                           	opt stack 23
 11630                           
 11631                           ;I2C.c: 117: PORTBbits.RB4 = 0;
 11632                           
 11633                           ;incstack = 0
 11634  002550  9881               	bcf	3969,4,c	;volatile
 11635                           
 11636                           ;I2C.c: 118: TRISBbits.RB4 = 0;
 11637  002552  9893               	bcf	3987,4,c	;volatile
 11638                           
 11639                           ;I2C.c: 119: _delay((unsigned long)((1)*(8000000/4000000.0)));
 11640  002554  D000               	nop2		;2 cycle nop
 11641  002556  0012               	return		;funcret
 11642  002558                     __end_of_i2cLowScl:
 11643                           	opt stack 0
 11644                           tblptru	equ	0xFF8
 11645                           tblptrh	equ	0xFF7
 11646                           tblptrl	equ	0xFF6
 11647                           tablat	equ	0xFF5
 11648                           prodh	equ	0xFF4
 11649                           prodl	equ	0xFF3
 11650                           intcon	equ	0xFF2
 11651                           intcon2	equ	0xFF1
 11652                           postinc0	equ	0xFEE
 11653                           wreg	equ	0xFE8
 11654                           postdec1	equ	0xFE5
 11655                           fsr1l	equ	0xFE1
 11656                           indf2	equ	0xFDF
 11657                           postinc2	equ	0xFDE
 11658                           postdec2	equ	0xFDD
 11659                           fsr2h	equ	0xFDA
 11660                           fsr2l	equ	0xFD9
 11661                           status	equ	0xFD8
 11662                           
 11663 ;; *************** function _i2cHighSda *****************
 11664 ;; Defined at:
 11665 ;;		line 96 in file "I2C.c"
 11666 ;; Parameters:    Size  Location     Type
 11667 ;;		None
 11668 ;; Auto vars:     Size  Location     Type
 11669 ;;		None
 11670 ;; Return value:  Size  Location     Type
 11671 ;;		None               void
 11672 ;; Registers used:
 11673 ;;		None
 11674 ;; Tracked objects:
 11675 ;;		On entry : 0/0
 11676 ;;		On exit  : 0/0
 11677 ;;		Unchanged: 0/0
 11678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11679 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11680 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11681 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11682 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11683 ;;Total ram usage:        0 bytes
 11684 ;; Hardware stack levels used:    1
 11685 ;; Hardware stack levels required when called:    3
 11686 ;; This function calls:
 11687 ;;		Nothing
 11688 ;; This function is called by:
 11689 ;;		_I2C_Init
 11690 ;;		_I2C_Read
 11691 ;;		_I2C_Write
 11692 ;;		_i2cAck
 11693 ;;		_I2C_Start
 11694 ;;		_I2C_ReStart
 11695 ;;		_I2C_Stop
 11696 ;; This function uses a non-reentrant model
 11697 ;;
 11698                           
 11699                           	psect	text69
 11700  002558                     __ptext69:
 11701                           	opt stack 0
 11702  002558                     _i2cHighSda:
 11703                           	opt stack 25
 11704                           
 11705                           ;I2C.c: 98: TRISBbits.RB5 = 1;
 11706                           
 11707                           ;incstack = 0
 11708  002558  8A93               	bsf	3987,5,c	;volatile
 11709                           
 11710                           ;I2C.c: 99: _delay((unsigned long)((2)*(8000000/4000000.0)));
 11711  00255A  D000               	nop2		;2 cycle nop
 11712  00255C  D000               	nop2		;2 cycle nop
 11713  00255E  0012               	return		;funcret
 11714  002560                     __end_of_i2cHighSda:
 11715                           	opt stack 0
 11716                           tblptru	equ	0xFF8
 11717                           tblptrh	equ	0xFF7
 11718                           tblptrl	equ	0xFF6
 11719                           tablat	equ	0xFF5
 11720                           prodh	equ	0xFF4
 11721                           prodl	equ	0xFF3
 11722                           intcon	equ	0xFF2
 11723                           intcon2	equ	0xFF1
 11724                           postinc0	equ	0xFEE
 11725                           wreg	equ	0xFE8
 11726                           postdec1	equ	0xFE5
 11727                           fsr1l	equ	0xFE1
 11728                           indf2	equ	0xFDF
 11729                           postinc2	equ	0xFDE
 11730                           postdec2	equ	0xFDD
 11731                           fsr2h	equ	0xFDA
 11732                           fsr2l	equ	0xFD9
 11733                           status	equ	0xFD8
 11734                           
 11735 ;; *************** function _i2cHighScl *****************
 11736 ;; Defined at:
 11737 ;;		line 109 in file "I2C.c"
 11738 ;; Parameters:    Size  Location     Type
 11739 ;;		None
 11740 ;; Auto vars:     Size  Location     Type
 11741 ;;		None
 11742 ;; Return value:  Size  Location     Type
 11743 ;;		None               void
 11744 ;; Registers used:
 11745 ;;		wreg
 11746 ;; Tracked objects:
 11747 ;;		On entry : 0/0
 11748 ;;		On exit  : 0/0
 11749 ;;		Unchanged: 0/0
 11750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11751 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11752 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11753 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11754 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11755 ;;Total ram usage:        0 bytes
 11756 ;; Hardware stack levels used:    1
 11757 ;; Hardware stack levels required when called:    3
 11758 ;; This function calls:
 11759 ;;		Nothing
 11760 ;; This function is called by:
 11761 ;;		_I2C_Init
 11762 ;;		_I2C_Read
 11763 ;;		_I2C_Write
 11764 ;;		_i2cNack
 11765 ;;		_i2cAck
 11766 ;;		_I2C_Start
 11767 ;;		_I2C_ReStart
 11768 ;;		_I2C_Stop
 11769 ;; This function uses a non-reentrant model
 11770 ;;
 11771                           
 11772                           	psect	text70
 11773  002508                     __ptext70:
 11774                           	opt stack 0
 11775  002508                     _i2cHighScl:
 11776                           	opt stack 25
 11777                           
 11778                           ;I2C.c: 111: TRISBbits.RB4 = 1;
 11779                           
 11780                           ;incstack = 0
 11781  002508  8893               	bsf	3987,4,c	;volatile
 11782                           
 11783                           ;I2C.c: 112: _delay((unsigned long)((10)*(8000000/4000000.0)));
 11784  00250A  0E06               	movlw	6
 11785  00250C                     u5977:
 11786  00250C  2EE8               	decfsz	wreg,f,c
 11787  00250E  D7FE               	goto	u5977
 11788  002510  D000               	nop2		;nop
 11789  002512  0012               	return		;funcret
 11790  002514                     __end_of_i2cHighScl:
 11791                           	opt stack 0
 11792                           tblptru	equ	0xFF8
 11793                           tblptrh	equ	0xFF7
 11794                           tblptrl	equ	0xFF6
 11795                           tablat	equ	0xFF5
 11796                           prodh	equ	0xFF4
 11797                           prodl	equ	0xFF3
 11798                           intcon	equ	0xFF2
 11799                           intcon2	equ	0xFF1
 11800                           postinc0	equ	0xFEE
 11801                           wreg	equ	0xFE8
 11802                           postdec1	equ	0xFE5
 11803                           fsr1l	equ	0xFE1
 11804                           indf2	equ	0xFDF
 11805                           postinc2	equ	0xFDE
 11806                           postdec2	equ	0xFDD
 11807                           fsr2h	equ	0xFDA
 11808                           fsr2l	equ	0xFD9
 11809                           status	equ	0xFD8
 11810                           
 11811 ;; *************** function _chkisr *****************
 11812 ;; Defined at:
 11813 ;;		line 30 in file "Interrupt.c"
 11814 ;; Parameters:    Size  Location     Type
 11815 ;;		None
 11816 ;; Auto vars:     Size  Location     Type
 11817 ;;		None
 11818 ;; Return value:  Size  Location     Type
 11819 ;;		None               void
 11820 ;; Registers used:
 11821 ;;		wreg, status,2, status,0, cstack
 11822 ;; Tracked objects:
 11823 ;;		On entry : 0/0
 11824 ;;		On exit  : 0/0
 11825 ;;		Unchanged: 0/0
 11826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11827 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11828 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11829 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11830 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11831 ;;Total ram usage:       14 bytes
 11832 ;; Hardware stack levels used:    1
 11833 ;; Hardware stack levels required when called:    2
 11834 ;; This function calls:
 11835 ;;		_INT0_isr
 11836 ;;		_TIMER1_isr
 11837 ;; This function is called by:
 11838 ;;		Interrupt level 2
 11839 ;; This function uses a non-reentrant model
 11840 ;;
 11841                           
 11842                           	psect	intcode
 11843  000008                     __pintcode:
 11844                           	opt stack 0
 11845  000008                     _chkisr:
 11846                           	opt stack 20
 11847                           
 11848                           ;incstack = 0
 11849  000008  CFFA F003          	movff	pclath,??_chkisr
 11850  00000C  CFFB F004          	movff	pclatu,??_chkisr+1
 11851  000010  CFE9 F005          	movff	fsr0l,??_chkisr+2
 11852  000014  EDF6  F00D         	call	int_func,f	;refresh shadow registers
 11853                           pclatu	equ	0xFFB
 11854                           pclath	equ	0xFFA
 11855                           tblptru	equ	0xFF8
 11856                           tblptrh	equ	0xFF7
 11857                           tblptrl	equ	0xFF6
 11858                           tablat	equ	0xFF5
 11859                           prodh	equ	0xFF4
 11860                           prodl	equ	0xFF3
 11861                           intcon	equ	0xFF2
 11862                           intcon2	equ	0xFF1
 11863                           postinc0	equ	0xFEE
 11864                           fsr0l	equ	0xFE9
 11865                           wreg	equ	0xFE8
 11866                           postdec1	equ	0xFE5
 11867                           fsr1l	equ	0xFE1
 11868                           indf2	equ	0xFDF
 11869                           postinc2	equ	0xFDE
 11870                           postdec2	equ	0xFDD
 11871                           fsr2h	equ	0xFDA
 11872                           fsr2l	equ	0xFD9
 11873                           status	equ	0xFD8
 11874                           
 11875                           	psect	intcode_body
 11876  001BEC                     __pintcode_body:
 11877                           	opt stack 20
 11878  001BEC                     int_func:
 11879                           	opt stack 20
 11880  001BEC  0006               	pop		; remove dummy address from shadow register refresh
 11881  001BEE  CFEA F006          	movff	fsr0h,??_chkisr+3
 11882  001BF2  CFE1 F007          	movff	fsr1l,??_chkisr+4
 11883  001BF6  CFE2 F008          	movff	fsr1h,??_chkisr+5
 11884  001BFA  CFD9 F009          	movff	fsr2l,??_chkisr+6
 11885  001BFE  CFDA F00A          	movff	fsr2h,??_chkisr+7
 11886  001C02  CFF3 F00B          	movff	prodl,??_chkisr+8
 11887  001C06  CFF4 F00C          	movff	prodh,??_chkisr+9
 11888  001C0A  CFF6 F00D          	movff	tblptrl,??_chkisr+10
 11889  001C0E  CFF7 F00E          	movff	tblptrh,??_chkisr+11
 11890  001C12  CFF8 F00F          	movff	tblptru,??_chkisr+12
 11891  001C16  CFF5 F010          	movff	tablat,??_chkisr+13
 11892                           
 11893                           ;Interrupt.c: 32: if (PIR1bits.TMR1IF == 1) TIMER1_isr();
 11894  001C1A  A09E               	btfss	3998,0,c	;volatile
 11895  001C1C  D003               	goto	i2l4942
 11896  001C1E  EC8A  F012         	call	_TIMER1_isr	;wreg free
 11897  001C22  D000               	goto	i2l4942
 11898  001C24                     i2l4942:
 11899                           
 11900                           ;Interrupt.c: 33: if (INTCONbits.INT0IF == 1) INT0_isr();
 11901  001C24  A2F2               	btfss	intcon,1,c	;volatile
 11902  001C26  D003               	goto	i2l251
 11903  001C28  ECE4  F006         	call	_INT0_isr	;wreg free
 11904  001C2C  D000               	goto	i2l251
 11905  001C2E                     i2l251:
 11906  001C2E  C010  FFF5         	movff	??_chkisr+13,tablat
 11907  001C32  C00F  FFF8         	movff	??_chkisr+12,tblptru
 11908  001C36  C00E  FFF7         	movff	??_chkisr+11,tblptrh
 11909  001C3A  C00D  FFF6         	movff	??_chkisr+10,tblptrl
 11910  001C3E  C00C  FFF4         	movff	??_chkisr+9,prodh
 11911  001C42  C00B  FFF3         	movff	??_chkisr+8,prodl
 11912  001C46  C00A  FFDA         	movff	??_chkisr+7,fsr2h
 11913  001C4A  C009  FFD9         	movff	??_chkisr+6,fsr2l
 11914  001C4E  C008  FFE2         	movff	??_chkisr+5,fsr1h
 11915  001C52  C007  FFE1         	movff	??_chkisr+4,fsr1l
 11916  001C56  C006  FFEA         	movff	??_chkisr+3,fsr0h
 11917  001C5A  C005  FFE9         	movff	??_chkisr+2,fsr0l
 11918  001C5E  C004  FFFB         	movff	??_chkisr+1,pclatu
 11919  001C62  C003  FFFA         	movff	??_chkisr,pclath
 11920  001C66  0011               	retfie		f
 11921  001C68                     __end_of_chkisr:
 11922                           	opt stack 0
 11923                           pclatu	equ	0xFFB
 11924                           pclath	equ	0xFFA
 11925                           tblptru	equ	0xFF8
 11926                           tblptrh	equ	0xFF7
 11927                           tblptrl	equ	0xFF6
 11928                           tablat	equ	0xFF5
 11929                           prodh	equ	0xFF4
 11930                           prodl	equ	0xFF3
 11931                           intcon	equ	0xFF2
 11932                           intcon2	equ	0xFF1
 11933                           postinc0	equ	0xFEE
 11934                           fsr0h	equ	0xFEA
 11935                           fsr0l	equ	0xFE9
 11936                           wreg	equ	0xFE8
 11937                           postdec1	equ	0xFE5
 11938                           fsr1h	equ	0xFE2
 11939                           fsr1l	equ	0xFE1
 11940                           indf2	equ	0xFDF
 11941                           postinc2	equ	0xFDE
 11942                           postdec2	equ	0xFDD
 11943                           fsr2h	equ	0xFDA
 11944                           fsr2l	equ	0xFD9
 11945                           status	equ	0xFD8
 11946                           
 11947 ;; *************** function _TIMER1_isr *****************
 11948 ;; Defined at:
 11949 ;;		line 36 in file "Interrupt.c"
 11950 ;; Parameters:    Size  Location     Type
 11951 ;;		None
 11952 ;; Auto vars:     Size  Location     Type
 11953 ;;		None
 11954 ;; Return value:  Size  Location     Type
 11955 ;;		None               void
 11956 ;; Registers used:
 11957 ;;		wreg, status,2
 11958 ;; Tracked objects:
 11959 ;;		On entry : 0/0
 11960 ;;		On exit  : 0/0
 11961 ;;		Unchanged: 0/0
 11962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11963 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11964 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11965 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11966 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11967 ;;Total ram usage:        0 bytes
 11968 ;; Hardware stack levels used:    1
 11969 ;; This function calls:
 11970 ;;		Nothing
 11971 ;; This function is called by:
 11972 ;;		_chkisr
 11973 ;; This function uses a non-reentrant model
 11974 ;;
 11975                           
 11976                           	psect	text72
 11977  002514                     __ptext72:
 11978                           	opt stack 0
 11979  002514                     _TIMER1_isr:
 11980                           	opt stack 21
 11981                           
 11982                           ;Interrupt.c: 38: Nec_state = 0;
 11983                           
 11984                           ;incstack = 0
 11985  002514  0E00               	movlw	0
 11986  002516  6E52               	movwf	_Nec_state,c
 11987                           
 11988                           ;Interrupt.c: 39: INTCON2bits.INTEDG0 = 0;
 11989  002518  9CF1               	bcf	intcon2,6,c	;volatile
 11990                           
 11991                           ;Interrupt.c: 40: T1CONbits.TMR1ON = 0;
 11992  00251A  90CD               	bcf	4045,0,c	;volatile
 11993                           
 11994                           ;Interrupt.c: 41: PIR1bits.TMR1IF = 0;
 11995  00251C  909E               	bcf	3998,0,c	;volatile
 11996  00251E  0012               	return		;funcret
 11997  002520                     __end_of_TIMER1_isr:
 11998                           	opt stack 0
 11999                           pclatu	equ	0xFFB
 12000                           pclath	equ	0xFFA
 12001                           tblptru	equ	0xFF8
 12002                           tblptrh	equ	0xFF7
 12003                           tblptrl	equ	0xFF6
 12004                           tablat	equ	0xFF5
 12005                           prodh	equ	0xFF4
 12006                           prodl	equ	0xFF3
 12007                           intcon	equ	0xFF2
 12008                           intcon2	equ	0xFF1
 12009                           postinc0	equ	0xFEE
 12010                           fsr0h	equ	0xFEA
 12011                           fsr0l	equ	0xFE9
 12012                           wreg	equ	0xFE8
 12013                           postdec1	equ	0xFE5
 12014                           fsr1h	equ	0xFE2
 12015                           fsr1l	equ	0xFE1
 12016                           indf2	equ	0xFDF
 12017                           postinc2	equ	0xFDE
 12018                           postdec2	equ	0xFDD
 12019                           fsr2h	equ	0xFDA
 12020                           fsr2l	equ	0xFD9
 12021                           status	equ	0xFD8
 12022                           
 12023 ;; *************** function _INT0_isr *****************
 12024 ;; Defined at:
 12025 ;;		line 50 in file "Interrupt.c"
 12026 ;; Parameters:    Size  Location     Type
 12027 ;;		None
 12028 ;; Auto vars:     Size  Location     Type
 12029 ;;		None
 12030 ;; Return value:  Size  Location     Type
 12031 ;;		None               void
 12032 ;; Registers used:
 12033 ;;		wreg, status,2, status,0, cstack
 12034 ;; Tracked objects:
 12035 ;;		On entry : 0/0
 12036 ;;		On exit  : 0/0
 12037 ;;		Unchanged: 0/0
 12038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12039 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12040 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12041 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12042 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12043 ;;Total ram usage:        2 bytes
 12044 ;; Hardware stack levels used:    1
 12045 ;; Hardware stack levels required when called:    1
 12046 ;; This function calls:
 12047 ;;		_force_nec_state0
 12048 ;; This function is called by:
 12049 ;;		_chkisr
 12050 ;; This function uses a non-reentrant model
 12051 ;;
 12052                           
 12053                           	psect	text73
 12054  000DC8                     __ptext73:
 12055                           	opt stack 0
 12056  000DC8                     _INT0_isr:
 12057                           	opt stack 20
 12058                           
 12059                           ;Interrupt.c: 52: INTCONbits.INT0IF = 0;
 12060                           
 12061                           ;incstack = 0
 12062  000DC8  92F2               	bcf	intcon,1,c	;volatile
 12063                           
 12064                           ;Interrupt.c: 53: if (Nec_state != 0)
 12065  000DCA  5052               	movf	_Nec_state,w,c
 12066  000DCC  B4D8               	btfsc	status,2,c
 12067  000DCE  D0A3               	goto	i2l4452
 12068                           
 12069                           ;Interrupt.c: 54: {
 12070                           ;Interrupt.c: 55: Time_Elapsed = (TMR1H << 8) | TMR1L;
 12071  000DD0  50CE               	movf	4046,w,c	;volatile
 12072  000DD2  CFCF F001          	movff	4047,??_INT0_isr	;volatile
 12073  000DD6  6A02               	clrf	(??_INT0_isr+1)& (0+255),c
 12074  000DD8  C001  F002         	movff	??_INT0_isr,??_INT0_isr+1
 12075  000DDC  6A01               	clrf	??_INT0_isr,c
 12076  000DDE  1001               	iorwf	??_INT0_isr,w,c
 12077  000DE0  6E4A               	movwf	_Time_Elapsed,c
 12078  000DE2  5002               	movf	??_INT0_isr+1,w,c
 12079  000DE4  6E4B               	movwf	_Time_Elapsed+1,c
 12080                           
 12081                           ;Interrupt.c: 56: TMR1H = 0;
 12082  000DE6  0E00               	movlw	0
 12083  000DE8  6ECF               	movwf	4047,c	;volatile
 12084                           
 12085                           ;Interrupt.c: 57: TMR1L = 0;
 12086  000DEA  0E00               	movlw	0
 12087  000DEC  6ECE               	movwf	4046,c	;volatile
 12088                           
 12089                           ;Interrupt.c: 58: }
 12090                           ;Interrupt.c: 60: switch(Nec_state)
 12091  000DEE  D093               	goto	i2l4452
 12092  000DF0                     i2l4380:
 12093                           
 12094                           ;Interrupt.c: 63: {
 12095                           ;Interrupt.c: 64: TMR1H = 0;
 12096  000DF0  0E00               	movlw	0
 12097  000DF2  6ECF               	movwf	4047,c	;volatile
 12098                           
 12099                           ;Interrupt.c: 65: TMR1L = 0;
 12100  000DF4  0E00               	movlw	0
 12101  000DF6  6ECE               	movwf	4046,c	;volatile
 12102                           
 12103                           ;Interrupt.c: 66: PIR1bits.TMR1IF = 0;
 12104  000DF8  909E               	bcf	3998,0,c	;volatile
 12105                           
 12106                           ;Interrupt.c: 67: T1CON= 0x90;
 12107  000DFA  0E90               	movlw	144
 12108  000DFC  6ECD               	movwf	4045,c	;volatile
 12109                           
 12110                           ;Interrupt.c: 68: T1CONbits.TMR1ON = 1;
 12111  000DFE  80CD               	bsf	4045,0,c	;volatile
 12112                           
 12113                           ;Interrupt.c: 69: bit_count = 0;
 12114  000E00  0E00               	movlw	0
 12115  000E02  6E58               	movwf	_bit_count,c
 12116                           
 12117                           ;Interrupt.c: 70: Nec_code = 0;
 12118  000E04  0E00               	movlw	0
 12119  000E06  0100               	movlb	0	; () banked
 12120  000E08  6FEB               	movwf	_Nec_code& (0+255),b
 12121  000E0A  0E00               	movlw	0
 12122  000E0C  6FEC               	movwf	(_Nec_code+1)& (0+255),b
 12123  000E0E  0E00               	movlw	0
 12124  000E10  6FED               	movwf	(_Nec_code+2)& (0+255),b
 12125  000E12  0E00               	movlw	0
 12126  000E14  6FEE               	movwf	(_Nec_code+3)& (0+255),b
 12127                           
 12128                           ;Interrupt.c: 71: Nec_state = 1;
 12129  000E16  0E01               	movlw	1
 12130  000E18  6E52               	movwf	_Nec_state,c
 12131  000E1A  D027               	goto	i2l4410
 12132                           
 12133                           ; BSR set to: 0
 12134                           ;Interrupt.c: 73: return;
 12135                           
 12136                           ; BSR set to: 0
 12137                           ;Interrupt.c: 72: INTCON2bits.INTEDG0 = 1;
 12138  000E1C  D08D               	goto	i2l263
 12139  000E1E                     i2l4390:
 12140                           
 12141                           ;Interrupt.c: 77: {
 12142                           ;Interrupt.c: 78: if (Time_Elapsed > 8500 && Time_Elapsed < 9500)
 12143  000E1E  0E35               	movlw	53
 12144  000E20  5C4A               	subwf	_Time_Elapsed,w,c
 12145  000E22  0E21               	movlw	33
 12146  000E24  584B               	subwfb	_Time_Elapsed+1,w,c
 12147  000E26  A0D8               	btfss	status,0,c
 12148  000E28  D009               	goto	i2l4396
 12149  000E2A  0E1C               	movlw	28
 12150  000E2C  5C4A               	subwf	_Time_Elapsed,w,c
 12151  000E2E  0E25               	movlw	37
 12152  000E30  584B               	subwfb	_Time_Elapsed+1,w,c
 12153  000E32  B0D8               	btfsc	status,0,c
 12154  000E34  D003               	goto	i2l4396
 12155                           
 12156                           ;Interrupt.c: 79: {
 12157                           ;Interrupt.c: 80: Nec_state = 2;
 12158  000E36  0E02               	movlw	2
 12159  000E38  6E52               	movwf	_Nec_state,c
 12160                           
 12161                           ;Interrupt.c: 81: }
 12162  000E3A  D02A               	goto	i2l4422
 12163  000E3C                     i2l4396:
 12164                           
 12165                           ;Interrupt.c: 82: else
 12166                           ;Interrupt.c: 83: {
 12167                           ;Interrupt.c: 84: force_nec_state0();
 12168  000E3C  ECB0  F012         	call	_force_nec_state0	;wreg free
 12169  000E40  D027               	goto	i2l4422
 12170  000E42  D026               	goto	i2l4422
 12171                           
 12172                           ;Interrupt.c: 87: return;
 12173                           
 12174                           ;Interrupt.c: 85: }
 12175                           ;Interrupt.c: 86: INTCON2bits.INTEDG0 = 0;
 12176  000E44  D079               	goto	i2l263
 12177  000E46                     i2l4402:
 12178                           
 12179                           ;Interrupt.c: 91: {
 12180                           ;Interrupt.c: 92: if (Time_Elapsed > 4000 && Time_Elapsed < 5000 )
 12181  000E46  0EA1               	movlw	161
 12182  000E48  5C4A               	subwf	_Time_Elapsed,w,c
 12183  000E4A  0E0F               	movlw	15
 12184  000E4C  584B               	subwfb	_Time_Elapsed+1,w,c
 12185  000E4E  A0D8               	btfss	status,0,c
 12186  000E50  D009               	goto	i2l4408
 12187  000E52  0E88               	movlw	136
 12188  000E54  5C4A               	subwf	_Time_Elapsed,w,c
 12189  000E56  0E13               	movlw	19
 12190  000E58  584B               	subwfb	_Time_Elapsed+1,w,c
 12191  000E5A  B0D8               	btfsc	status,0,c
 12192  000E5C  D003               	goto	i2l4408
 12193                           
 12194                           ;Interrupt.c: 93: {
 12195                           ;Interrupt.c: 94: Nec_state = 3;
 12196  000E5E  0E03               	movlw	3
 12197  000E60  6E52               	movwf	_Nec_state,c
 12198                           
 12199                           ;Interrupt.c: 95: }
 12200  000E62  D003               	goto	i2l4410
 12201  000E64                     i2l4408:
 12202                           
 12203                           ;Interrupt.c: 96: else
 12204                           ;Interrupt.c: 97: {
 12205                           ;Interrupt.c: 98: force_nec_state0();
 12206  000E64  ECB0  F012         	call	_force_nec_state0	;wreg free
 12207  000E68  D000               	goto	i2l4410
 12208  000E6A                     i2l4410:
 12209                           
 12210                           ;Interrupt.c: 99: }
 12211                           ;Interrupt.c: 100: INTCON2bits.INTEDG0 = 1;
 12212  000E6A  8CF1               	bsf	intcon2,6,c	;volatile
 12213                           
 12214                           ;Interrupt.c: 101: return;
 12215  000E6C  D065               	goto	i2l263
 12216  000E6E                     i2l4414:
 12217                           
 12218                           ;Interrupt.c: 105: {
 12219                           ;Interrupt.c: 106: if (Time_Elapsed > 400 && Time_Elapsed < 700)
 12220  000E6E  0E91               	movlw	145
 12221  000E70  5C4A               	subwf	_Time_Elapsed,w,c
 12222  000E72  0E01               	movlw	1
 12223  000E74  584B               	subwfb	_Time_Elapsed+1,w,c
 12224  000E76  A0D8               	btfss	status,0,c
 12225  000E78  D008               	goto	i2l4420
 12226  000E7A  0EBC               	movlw	188
 12227  000E7C  5C4A               	subwf	_Time_Elapsed,w,c
 12228  000E7E  0E02               	movlw	2
 12229  000E80  584B               	subwfb	_Time_Elapsed+1,w,c
 12230  000E82  B0D8               	btfsc	status,0,c
 12231  000E84  D002               	goto	i2l4420
 12232                           
 12233                           ;Interrupt.c: 107: {
 12234                           ;Interrupt.c: 108: Nec_state = 4;
 12235  000E86  0E04               	movlw	4
 12236  000E88  D7D7               	goto	L12
 12237  000E8A                     i2l4420:
 12238                           
 12239                           ;Interrupt.c: 110: else
 12240                           ;Interrupt.c: 111: {
 12241                           ;Interrupt.c: 112: force_nec_state0();
 12242  000E8A  ECB0  F012         	call	_force_nec_state0	;wreg free
 12243  000E8E  D000               	goto	i2l4422
 12244  000E90                     i2l4422:
 12245                           
 12246                           ;Interrupt.c: 113: }
 12247                           ;Interrupt.c: 114: INTCON2bits.INTEDG0 = 0;
 12248  000E90  9CF1               	bcf	intcon2,6,c	;volatile
 12249                           
 12250                           ;Interrupt.c: 115: return;
 12251  000E92  D052               	goto	i2l263
 12252  000E94                     i2l4426:
 12253                           
 12254                           ;Interrupt.c: 119: {
 12255                           ;Interrupt.c: 120: if (Time_Elapsed >= 400 && Time_Elapsed <= 1800)
 12256  000E94  0E90               	movlw	144
 12257  000E96  5C4A               	subwf	_Time_Elapsed,w,c
 12258  000E98  0E01               	movlw	1
 12259  000E9A  584B               	subwfb	_Time_Elapsed+1,w,c
 12260  000E9C  A0D8               	btfss	status,0,c
 12261  000E9E  D034               	goto	i2l4442
 12262  000EA0  0E09               	movlw	9
 12263  000EA2  5C4A               	subwf	_Time_Elapsed,w,c
 12264  000EA4  0E07               	movlw	7
 12265  000EA6  584B               	subwfb	_Time_Elapsed+1,w,c
 12266  000EA8  B0D8               	btfsc	status,0,c
 12267  000EAA  D02E               	goto	i2l4442
 12268                           
 12269                           ;Interrupt.c: 121: {
 12270                           ;Interrupt.c: 122: Nec_code = Nec_code<<1;
 12271  000EAC  90D8               	bcf	status,0,c
 12272  000EAE  0100               	movlb	0	; () banked
 12273  000EB0  35EB               	rlcf	_Nec_code& (0+255),w,b
 12274  000EB2  0100               	movlb	0	; () banked
 12275  000EB4  6FEB               	movwf	_Nec_code& (0+255),b
 12276  000EB6  0100               	movlb	0	; () banked
 12277  000EB8  35EC               	rlcf	(_Nec_code+1)& (0+255),w,b
 12278  000EBA  0100               	movlb	0	; () banked
 12279  000EBC  6FEC               	movwf	(_Nec_code+1)& (0+255),b
 12280  000EBE  0100               	movlb	0	; () banked
 12281  000EC0  35ED               	rlcf	(_Nec_code+2)& (0+255),w,b
 12282  000EC2  0100               	movlb	0	; () banked
 12283  000EC4  6FED               	movwf	(_Nec_code+2)& (0+255),b
 12284  000EC6  0100               	movlb	0	; () banked
 12285  000EC8  35EE               	rlcf	(_Nec_code+3)& (0+255),w,b
 12286  000ECA  0100               	movlb	0	; () banked
 12287  000ECC  6FEE               	movwf	(_Nec_code+3)& (0+255),b
 12288                           
 12289                           ;Interrupt.c: 123: if ( Time_Elapsed > 1000)
 12290  000ECE  0EE9               	movlw	233
 12291  000ED0  5C4A               	subwf	_Time_Elapsed,w,c
 12292  000ED2  0E03               	movlw	3
 12293  000ED4  584B               	subwfb	_Time_Elapsed+1,w,c
 12294  000ED6  A0D8               	btfss	status,0,c
 12295  000ED8  D008               	goto	i2l4434
 12296                           
 12297                           ; BSR set to: 0
 12298                           ;Interrupt.c: 124: {
 12299                           ;Interrupt.c: 125: Nec_code++;
 12300  000EDA  0E01               	movlw	1
 12301  000EDC  0100               	movlb	0	; () banked
 12302  000EDE  27EB               	addwf	_Nec_code& (0+255),f,b
 12303  000EE0  0E00               	movlw	0
 12304  000EE2  23EC               	addwfc	(_Nec_code+1)& (0+255),f,b
 12305  000EE4  23ED               	addwfc	(_Nec_code+2)& (0+255),f,b
 12306  000EE6  23EE               	addwfc	(_Nec_code+3)& (0+255),f,b
 12307  000EE8  D000               	goto	i2l4434
 12308  000EEA                     i2l4434:
 12309                           
 12310                           ; BSR set to: 0
 12311                           ;Interrupt.c: 126: }
 12312                           ;Interrupt.c: 127: bit_count++;
 12313  000EEA  2A58               	incf	_bit_count,f,c
 12314                           
 12315                           ; BSR set to: 0
 12316                           ;Interrupt.c: 128: if(bit_count > 31)
 12317  000EEC  0E1F               	movlw	31
 12318  000EEE  6458               	cpfsgt	_bit_count,c
 12319  000EF0  D008               	goto	i2l276
 12320                           
 12321                           ; BSR set to: 0
 12322                           ;Interrupt.c: 129: {
 12323                           ;Interrupt.c: 130: nec_ok = 1;
 12324  000EF2  0E00               	movlw	0
 12325  000EF4  0100               	movlb	0	; () banked
 12326  000EF6  6FF4               	movwf	(_nec_ok+1)& (0+255),b
 12327  000EF8  0E01               	movlw	1
 12328  000EFA  6FF3               	movwf	_nec_ok& (0+255),b
 12329                           
 12330                           ; BSR set to: 0
 12331                           ;Interrupt.c: 131: INTCONbits.INT0IE = 0;
 12332  000EFC  98F2               	bcf	intcon,4,c	;volatile
 12333                           
 12334                           ;Interrupt.c: 132: Nec_state = 0;
 12335  000EFE  0E00               	movlw	0
 12336  000F00  6E52               	movwf	_Nec_state,c
 12337  000F02                     i2l276:
 12338                           
 12339                           ; BSR set to: 0
 12340                           ;Interrupt.c: 133: }
 12341                           ;Interrupt.c: 134: Nec_state = 3;
 12342  000F02  0E03               	movlw	3
 12343  000F04  6E52               	movwf	_Nec_state,c
 12344                           
 12345                           ;Interrupt.c: 135: }
 12346  000F06  D003               	goto	i2l4444
 12347  000F08                     i2l4442:
 12348                           
 12349                           ;Interrupt.c: 136: else
 12350                           ;Interrupt.c: 137: {
 12351                           ;Interrupt.c: 138: force_nec_state0();
 12352  000F08  ECB0  F012         	call	_force_nec_state0	;wreg free
 12353  000F0C  D000               	goto	i2l4444
 12354  000F0E                     i2l4444:
 12355                           
 12356                           ;Interrupt.c: 139: }
 12357                           ;Interrupt.c: 140: INTCON2bits.INTEDG0 = 1;
 12358  000F0E  8CF1               	bsf	intcon2,6,c	;volatile
 12359                           
 12360                           ;Interrupt.c: 141: Nec_code1 = (char) ((Nec_code >> 8));
 12361  000F10  C0EC  F051         	movff	_Nec_code+1,_Nec_code1
 12362                           
 12363                           ;Interrupt.c: 143: }
 12364                           ;Interrupt.c: 144: }
 12365                           
 12366                           ;Interrupt.c: 142: return;
 12367  000F14  D011               	goto	i2l263
 12368  000F16                     i2l4452:
 12369  000F16  5052               	movf	_Nec_state,w,c
 12370                           
 12371                           ; Switch size 1, requested type "space"
 12372                           ; Number of cases is 5, Range of values is 0 to 4
 12373                           ; switch strategies available:
 12374                           ; Name         Instructions Cycles
 12375                           ; simple_byte           16     9 (average)
 12376                           ;	Chosen strategy is simple_byte
 12377  000F18  0A00               	xorlw	0	; case 0
 12378  000F1A  B4D8               	btfsc	status,2,c
 12379  000F1C  D769               	goto	i2l4380
 12380  000F1E  0A01               	xorlw	1	; case 1
 12381  000F20  B4D8               	btfsc	status,2,c
 12382  000F22  D77D               	goto	i2l4390
 12383  000F24  0A03               	xorlw	3	; case 2
 12384  000F26  B4D8               	btfsc	status,2,c
 12385  000F28  D78E               	goto	i2l4402
 12386  000F2A  0A01               	xorlw	1	; case 3
 12387  000F2C  B4D8               	btfsc	status,2,c
 12388  000F2E  D79F               	goto	i2l4414
 12389  000F30  0A07               	xorlw	7	; case 4
 12390  000F32  B4D8               	btfsc	status,2,c
 12391  000F34  D7AF               	goto	i2l4426
 12392  000F36  D000               	goto	i2l263
 12393  000F38                     i2l263:
 12394  000F38  0012               	return		;funcret
 12395  000F3A                     __end_of_INT0_isr:
 12396                           	opt stack 0
 12397                           pclatu	equ	0xFFB
 12398                           pclath	equ	0xFFA
 12399                           tblptru	equ	0xFF8
 12400                           tblptrh	equ	0xFF7
 12401                           tblptrl	equ	0xFF6
 12402                           tablat	equ	0xFF5
 12403                           prodh	equ	0xFF4
 12404                           prodl	equ	0xFF3
 12405                           intcon	equ	0xFF2
 12406                           intcon2	equ	0xFF1
 12407                           postinc0	equ	0xFEE
 12408                           fsr0h	equ	0xFEA
 12409                           fsr0l	equ	0xFE9
 12410                           wreg	equ	0xFE8
 12411                           postdec1	equ	0xFE5
 12412                           fsr1h	equ	0xFE2
 12413                           fsr1l	equ	0xFE1
 12414                           indf2	equ	0xFDF
 12415                           postinc2	equ	0xFDE
 12416                           postdec2	equ	0xFDD
 12417                           fsr2h	equ	0xFDA
 12418                           fsr2l	equ	0xFD9
 12419                           status	equ	0xFD8
 12420                           
 12421 ;; *************** function _force_nec_state0 *****************
 12422 ;; Defined at:
 12423 ;;		line 44 in file "Interrupt.c"
 12424 ;; Parameters:    Size  Location     Type
 12425 ;;		None
 12426 ;; Auto vars:     Size  Location     Type
 12427 ;;		None
 12428 ;; Return value:  Size  Location     Type
 12429 ;;		None               void
 12430 ;; Registers used:
 12431 ;;		wreg, status,2
 12432 ;; Tracked objects:
 12433 ;;		On entry : 0/0
 12434 ;;		On exit  : 0/0
 12435 ;;		Unchanged: 0/0
 12436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12438 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12439 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12440 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12441 ;;Total ram usage:        0 bytes
 12442 ;; Hardware stack levels used:    1
 12443 ;; This function calls:
 12444 ;;		Nothing
 12445 ;; This function is called by:
 12446 ;;		_INT0_isr
 12447 ;; This function uses a non-reentrant model
 12448 ;;
 12449                           
 12450                           	psect	text74
 12451  002560                     __ptext74:
 12452                           	opt stack 0
 12453  002560                     _force_nec_state0:
 12454                           	opt stack 20
 12455                           
 12456                           ;Interrupt.c: 46: Nec_state=0;
 12457                           
 12458                           ;incstack = 0
 12459  002560  0E00               	movlw	0
 12460  002562  6E52               	movwf	_Nec_state,c
 12461                           
 12462                           ;Interrupt.c: 47: T1CONbits.TMR1ON = 0;
 12463  002564  90CD               	bcf	4045,0,c	;volatile
 12464  002566  0012               	return		;funcret
 12465  002568                     __end_of_force_nec_state0:
 12466                           	opt stack 0
 12467                           pclatu	equ	0xFFB
 12468                           pclath	equ	0xFFA
 12469                           tblptru	equ	0xFF8
 12470                           tblptrh	equ	0xFF7
 12471                           tblptrl	equ	0xFF6
 12472                           tablat	equ	0xFF5
 12473                           prodh	equ	0xFF4
 12474                           prodl	equ	0xFF3
 12475                           intcon	equ	0xFF2
 12476                           intcon2	equ	0xFF1
 12477                           postinc0	equ	0xFEE
 12478                           fsr0h	equ	0xFEA
 12479                           fsr0l	equ	0xFE9
 12480                           wreg	equ	0xFE8
 12481                           postdec1	equ	0xFE5
 12482                           fsr1h	equ	0xFE2
 12483                           fsr1l	equ	0xFE1
 12484                           indf2	equ	0xFDF
 12485                           postinc2	equ	0xFDE
 12486                           postdec2	equ	0xFDD
 12487                           fsr2h	equ	0xFDA
 12488                           fsr2l	equ	0xFD9
 12489                           status	equ	0xFD8
 12490                           pclatu	equ	0xFFB
 12491                           pclath	equ	0xFFA
 12492                           tblptru	equ	0xFF8
 12493                           tblptrh	equ	0xFF7
 12494                           tblptrl	equ	0xFF6
 12495                           tablat	equ	0xFF5
 12496                           prodh	equ	0xFF4
 12497                           prodl	equ	0xFF3
 12498                           intcon	equ	0xFF2
 12499                           intcon2	equ	0xFF1
 12500                           postinc0	equ	0xFEE
 12501                           fsr0h	equ	0xFEA
 12502                           fsr0l	equ	0xFE9
 12503                           wreg	equ	0xFE8
 12504                           postdec1	equ	0xFE5
 12505                           fsr1h	equ	0xFE2
 12506                           fsr1l	equ	0xFE1
 12507                           indf2	equ	0xFDF
 12508                           postinc2	equ	0xFDE
 12509                           postdec2	equ	0xFDD
 12510                           fsr2h	equ	0xFDA
 12511                           fsr2l	equ	0xFD9
 12512                           status	equ	0xFD8
 12513                           
 12514                           	psect	rparam
 12515  0000                     pclatu	equ	0xFFB
 12516                           pclath	equ	0xFFA
 12517                           tblptru	equ	0xFF8
 12518                           tblptrh	equ	0xFF7
 12519                           tblptrl	equ	0xFF6
 12520                           tablat	equ	0xFF5
 12521                           prodh	equ	0xFF4
 12522                           prodl	equ	0xFF3
 12523                           intcon	equ	0xFF2
 12524                           intcon2	equ	0xFF1
 12525                           postinc0	equ	0xFEE
 12526                           fsr0h	equ	0xFEA
 12527                           fsr0l	equ	0xFE9
 12528                           wreg	equ	0xFE8
 12529                           postdec1	equ	0xFE5
 12530                           fsr1h	equ	0xFE2
 12531                           fsr1l	equ	0xFE1
 12532                           indf2	equ	0xFDF
 12533                           postinc2	equ	0xFDE
 12534                           postdec2	equ	0xFDD
 12535                           fsr2h	equ	0xFDA
 12536                           fsr2l	equ	0xFD9
 12537                           status	equ	0xFD8


Data Sizes:
    Strings     234
    Constant    493
    Data        141
    BSS         51
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     69     111
    BANK0           128      7     126
    BANK1           256      9      40
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), RPM_Txt(BANK0[5]), DC_Txt(BANK0[4]), Fan_SW_Txt(BANK0[4]), 
		 -> date(BANK0[9]), time(BANK0[9]), tempF(BANK0[4]), tempC(BANK0[4]), 
		 -> buffer(BANK1[31]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), RPM_Txt(BANK0[5]), DC_Txt(BANK0[4]), Fan_SW_Txt(BANK0[4]), 
		 -> date(BANK0[9]), time(BANK0[9]), tempF(BANK0[4]), tempC(BANK0[4]), 
		 -> buffer(BANK1[31]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), STR_8(CODE[3]), 
		 -> STR_7(CODE[6]), STR_6(CODE[5]), STR_5(CODE[5]), STR_4(CODE[2]), 
		 -> STR_3(CODE[3]), STR_2(CODE[13]), STR_1(CODE[22]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), Fan_SW_Txt(BANK0[4]), buffer(BANK1[31]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), Fan_SW_Txt(BANK0[4]), buffer(BANK1[31]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 30
		 -> STR_18(CODE[24]), STR_17(CODE[15]), STR_16(CODE[22]), STR_15(CODE[16]), 
		 -> STR_14(CODE[20]), STR_13(CODE[21]), STR_12(CODE[30]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), Fan_SW_Txt(BANK0[4]), buffer(BANK1[31]), 

    txt	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK1[31]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), RPM_Txt(BANK0[5]), DC_Txt(BANK0[4]), Fan_SW_Txt(BANK0[4]), 
		 -> date(BANK0[9]), time(BANK0[9]), tempF(BANK0[4]), tempC(BANK0[4]), 
		 -> buffer(BANK1[31]), 


Critical Paths under _main in COMRAM

    _main->_Update_Screen
    _printf->___lwmod
    ___lwmod->___lwdiv
    _get_RPM->___awdiv
    _Update_Screen->_drawtext
    ___awdiv->___awmod
    ___awdiv->___wmul
    _Turn_On_Fan->_do_update_pwm
    _Initialize_Screen->_drawtext
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawCircle->_drawPixel
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _write_data->_spiwrite
    _write_command->_spiwrite
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul
    _Increase_Speed->_do_update_pwm
    _Do_Init->_DS1621_Init
    _init_UART->_OpenUSART
    _DS1621_Init->_I2C_Write_Cmd_Write_Data
    _I2C_Write_Cmd_Write_Data->_I2C_Write
    _I2C_Write_Cmd_Only->_I2C_Write
    _Decrease_Speed->_do_update_pwm
    _Do_Beep->_do_update_pwm
    _do_update_pwm->___ftdiv
    ___lbtoft->___ftpack
    ___ftmul->___lbtoft
    ___ftdiv->___ftmul
    _DS3231_Setup_Time->_I2C_Write
    _DS3231_Read_Time->_I2C_Read
    _DS1621_Read_Temp->_I2C_Read

Critical Paths under _chkisr in COMRAM

    _chkisr->_INT0_isr

Critical Paths under _main in BANK0

    _Update_Screen->_drawtext
    _Initialize_Screen->_drawtext

Critical Paths under _chkisr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_Update_Screen

Critical Paths under _chkisr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _chkisr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _chkisr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _chkisr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _chkisr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _chkisr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _chkisr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _chkisr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _chkisr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _chkisr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _chkisr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _chkisr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _chkisr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _chkisr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _chkisr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0  126830
                                             68 COMRAM     1     1      0
                                              6 BANK1      3     3      0
                   _DS1621_Read_Temp
                   _DS3231_Read_Time
                  _DS3231_Setup_Time
                     _Decrease_Speed
                            _Do_Beep
                            _Do_Init
                     _Increase_Speed
                  _Initialize_Screen
                         _Set_DC_RGB
                        _Set_RPM_RGB
                         _Toggle_Fan
                      _Update_Screen
                            ___awdiv
                             ___wmul
                      _do_update_pwm
                            _get_RPM
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              37    23     14    3911
                                             28 COMRAM    28    14     14
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      31
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             16 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     362
                                             23 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     501
                                             16 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _get_RPM                                              4     2      2    3051
                                             30 COMRAM     4     2      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Update_Screen                                       12    12      0   23083
                                             66 COMRAM     2     2      0
                                              0 BANK1      6     6      0
                            ___awdiv
                            ___awmod
                           _drawtext
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    2123
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    2005
                                             22 COMRAM     8     4      4
                            ___awmod (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Toggle_Fan                                           0     0      0    8034
                       _Turn_Off_Fan
                        _Turn_On_Fan
 ---------------------------------------------------------------------------------
 (2) _Turn_On_Fan                                          0     0      0    8034
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (2) _Turn_Off_Fan                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Set_RPM_RGB                                          2     0      2     251
                                             16 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _Set_DC_RGB                                           2     0      2     530
                                             16 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _Initialize_Screen                                    0     0      0   34162
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                         _drawCircle
                           _drawtext
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4    1539
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _fillScreen                                           2     0      2    2192
                                             35 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (3) _fillRectangle                                       12     7      5    2096
                                             23 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _drawtext                                            17     9      8   17011
                                             56 COMRAM    10     2      8
                                              0 BANK0      7     7      0
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _strlen                                               6     4      2     195
                                             16 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) _drawChar                                            11     4      7   10904
                                             45 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (4) _fillRect                                            11     6      5    3876
                                             34 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (5) _drawFastVLine                                       11     7      4    3102
                                             23 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _drawCircle                                          20    12      8    6744
                                             27 COMRAM    20    12      8
                          _drawPixel
 ---------------------------------------------------------------------------------
 (4) _drawPixel                                            4     1      3    4207
                                             23 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (6) _setAddrWindow                                        4     1      3    1034
                                             19 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _TFT_GreenTab_Initialize                              0     0      0    4624
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd3                                                0     0      0    2182
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd2red                                             0     0      0     130
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd1                                                0     0      0    2182
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (7) _write_data                                           1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (7) _write_command                                        1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (6) _spiwrite                                             2     2      0      34
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _LCD_Reset                                            0     0      0    2052
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             6     4      2    2052
                                             22 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1012
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _Increase_Speed                                       0     0      0   16136
                            _Do_Beep
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (1) _Do_Init                                              0     0      0    1121
                        _DS1621_Init
                           _I2C_Init
                     _init_INTERRUPT
                          _init_UART
 ---------------------------------------------------------------------------------
 (2) _init_UART                                            0     0      0     375
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (3) _OpenUSART                                            3     1      2     375
                                             16 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _init_INTERRUPT                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Init                                             4     0      4      65
                                             16 COMRAM     4     0      4
                         _i2cHighScl
                         _i2cHighSda
 ---------------------------------------------------------------------------------
 (2) _DS1621_Init                                          1     1      0     681
                                             21 COMRAM     1     1      0
                 _I2C_Write_Cmd_Only
           _I2C_Write_Cmd_Write_Data
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Write_Data                             3     1      2     356
                                             18 COMRAM     3     1      2
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Only                                   2     1      1     260
                                             18 COMRAM     2     1      1
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _Decrease_Speed                                       0     0      0   16136
                            _Do_Beep
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (2) _Do_Beep                                              0     0      0    8102
                    _Activate_Buzzer
                  _Deactivate_Buzzer
                       _Wait_One_Sec
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (1) _do_update_pwm                                        9     9      0    8034
                                             58 COMRAM     9     9      0
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (2) ___lbtoft                                             4     1      3    2039
                                             24 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     436
                                             16 COMRAM    15    11      4
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    2716
                                             28 COMRAM    15     9      6
                           ___ftpack
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    2648
                                             43 COMRAM    15     9      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2008
                                             16 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (3) _Wait_One_Sec                                         2     2      0      68
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _Deactivate_Buzzer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Activate_Buzzer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DS3231_Setup_Time                                    2     2      0     201
                                             18 COMRAM     2     2      0
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DS3231_Read_Time                                     3     3      0     430
                                             19 COMRAM     2     2      0
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DS1621_Read_Temp                                     5     3      2     464
                                             19 COMRAM     5     3      2
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Write                                            2     2      0     133
                                             16 COMRAM     2     2      0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Stop                                             0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Start                                            0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (2) _I2C_Read                                             3     3      0     198
                                             16 COMRAM     3     3      0
                             _i2cAck
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                            _i2cNack
 ---------------------------------------------------------------------------------
 (3) _i2cNack                                              0     0      0       0
                         _i2cHighScl
                          _i2cLowScl
 ---------------------------------------------------------------------------------
 (3) _i2cAck                                               0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (2) _I2C_ReStart                                          0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (5) _i2cLowSda                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2cLowScl                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2cHighSda                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2cHighScl                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _chkisr                                              14    14      0       0
                                              2 COMRAM    14    14      0
                           _INT0_isr
                         _TIMER1_isr
 ---------------------------------------------------------------------------------
 (10) _TIMER1_isr                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _INT0_isr                                            2     2      0       0
                                              0 COMRAM     2     2      0
                   _force_nec_state0
 ---------------------------------------------------------------------------------
 (11) _force_nec_state0                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DS1621_Read_Temp
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Read_Time
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Setup_Time
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _Decrease_Speed
     _Do_Beep
       _Activate_Buzzer
       _Deactivate_Buzzer
       _Wait_One_Sec
       _do_update_pwm
         ___ftdiv
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
         ___lbtoft
           ___ftpack
     _do_update_pwm
       ___ftdiv
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___ftmul
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___fttol
       ___lbtoft
         ___ftpack
   _Do_Beep
     _Activate_Buzzer
     _Deactivate_Buzzer
     _Wait_One_Sec
     _do_update_pwm
       ___ftdiv
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___ftmul
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___fttol
       ___lbtoft
         ___ftpack
   _Do_Init
     _DS1621_Init
       _I2C_Write_Cmd_Only
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Cmd_Write_Data
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _I2C_Init
       _i2cHighScl
       _i2cHighSda
     _init_INTERRUPT
     _init_UART
       _OpenUSART
   _Increase_Speed
     _Do_Beep
       _Activate_Buzzer
       _Deactivate_Buzzer
       _Wait_One_Sec
       _do_update_pwm
         ___ftdiv
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
         ___lbtoft
           ___ftpack
     _do_update_pwm
       ___ftdiv
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___ftmul
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___fttol
       ___lbtoft
         ___ftpack
   _Initialize_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawCircle
       _drawPixel
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_data
           _spiwrite
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   _Set_DC_RGB
   _Set_RPM_RGB
   _Toggle_Fan
     _Turn_Off_Fan
     _Turn_On_Fan
       _do_update_pwm
         ___ftdiv
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
         ___lbtoft
           ___ftpack
   _Update_Screen
     ___awdiv
       ___awmod (ARG)
       ___wmul (ARG)
     ___awmod
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _strcpy
   ___awdiv
     ___awmod (ARG)
     ___wmul (ARG)
   ___wmul
   _do_update_pwm
     ___ftdiv
       ___ftmul (ARG)
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
     ___ftmul
       ___ftpack
       ___lbtoft (ARG)
         ___ftpack
     ___fttol
     ___lbtoft
       ___ftpack
   _get_RPM
     ___awdiv
       ___awmod (ARG)
       ___wmul (ARG)
     ___wmul
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch

 _chkisr (ROOT)
   _INT0_isr
     _force_nec_state0
   _TIMER1_isr

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      9      28       7       15.6%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      7      7E       5       98.4%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     45      6F       1       87.4%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     115      34        0.0%
DATA                 0      0     115       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Sat Nov 06 16:51:20 2021

                      drawCircle@f 002A                        drawCircle@r 0020  
                      drawCircle@x 002C                        drawCircle@y 002E  
               __size_of_I2C_Start 0012                        _SSPSTATbits 000FC7  
               __size_of_I2C_Write 003E                       drawCircle@x0 001C  
                     drawCircle@y0 001E                       ___awdiv@sign 001C  
             __size_of_Turn_On_Fan 0010                ___wmul@multiplicand 0013  
                  ??_Update_Screen 0043                                l231 21CE  
                              l402 184E                                l403 17BA  
                              l413 0CDC                                l405 182A  
                              l406 184C                                l343 2264  
                              l176 209A                                l521 11A6  
                              l179 2164                                l531 1D42  
                              l349 1AE8                                l365 108E  
                              l374 0FE4                                l367 0F68  
                              l289 1F20                                l650 24FE  
                              l539 234E                                l299 2456  
                              l483 2446                                l709 054A  
                              l494 22DE                                l478 20D8  
                              l770 1C94                                l746 07A2  
                              l499 2304                                l774 1CAE  
                              l782 22B6                                l775 1CB0  
                              l776 1CBA                                _FAN 0050  
                              l777 1CBC                                l779 1CD6  
                              l975 1A60                                l988 1B6A  
                              _PR2 000FCB                                _day 005A  
                _Deactivate_Buzzer 2548               __size_of_I2C_ReStart 0016  
                              _dow 005B                                _nbr 00F1  
                              _rpm 004C              __size_of_Turn_Off_Fan 000A  
                              _rps 00F5                                _txt 004E  
                     ___awmod@sign 0016                                wreg 000FE8  
               ?_Deactivate_Buzzer 0001                         _Fan_SW_Txt 00DF  
                  ??_fillRectangle 001D                       __CFG_LVP$OFF 000000  
          _TFT_GreenTab_Initialize 2266                       ___ftdiv@cntr 0035  
                     ___ftdiv@sign 003A                       __CFG_WDT$OFF 000000  
                             l1101 18EC                     drawFastVLine@h 0019  
                             l1213 2370                               l1305 1ECC  
                             l1090 1914                               l1162 1772  
                             l1315 1FB8                               l1165 173E  
                             l1239 232A                               l1344 2116  
                             l1177 14B8                     drawFastVLine@x 0022  
                   drawFastVLine@y 0018                               l1198 1690  
                             l6002 13A4                               l6004 13AC  
                             l6024 0CC2                               l5402 2186  
                             l5322 1A72                               l6114 2368  
                             l6052 0DB2                               l6140 1A14  
                             l6132 19F4                               l6204 1E90  
                             l7100 0BB4                               l5350 1860  
                             l5326 1AAA                               l6150 1A3A  
                             l6142 1A1C                               l6126 19E2  
                             l6206 1E9A                               l5512 1408  
                             l5440 2246                               l5336 1AD0  
                             l6216 1EC0                               l6208 1EA2  
                             l6232 1FAC                               l6224 1F84  
                             l7112 0BE6                               l5362 18B4  
                             l5354 1870                               l5530 144E  
                             l5506 13E0                               l5338 1ADE  
                             l6074 220E                               l6138 1A0A  
                             l6154 1A46                               l6170 1B00  
                             l6226 1F8E                               l7122 0C0E  
                             l5372 18F4                               l5364 18D4  
                             l5356 187C                               l5460 16B0  
                             l5540 147C                               l5508 13FA  
                             l5452 1FE8                               l6076 2218  
                             l6180 1B26                               l6228 1F96  
                             l7116 0BF4                               l7108 0BD8  
                             l7044 0A26                               l5390 216E  
                             l5366 18E0                               l5358 189C  
                             l5462 16CA                               l5534 1464  
                             l5526 143C                               l6158 1A56  
                             l6182 1B2E                               l6190 1B50  
                             l6174 1B0E     I2C_Write_Cmd_Write_Data@Device 0015  
                             l5392 2174                               l5384 215C  
                             l5544 1492                               l5536 146A  
                             l5448 1FCC                               l6440 012C  
                             l6424 0098                               l5378 1906  
                             l5466 16D8                               l5554 15CA  
                             l5730 0F64                               l5722 0F4A  
                             l6194 1B60                               l6186 1B44  
                             l6178 1B1C                               l6434 00EC  
                             l6418 0058                               l7082 0B54  
                             l5572 1624                               l6532 22F6  
                             l6524 22D0                               l5740 0FA4  
                             l5732 0F6C                               l5812 1838  
                             l5804 1820                               l6540 10A4  
                             l7092 0B96                               l7068 0B1C  
                             l5910 205E                               l5486 1718  
                             l5590 167E                               l5582 164E  
                             l5742 0FD8                               l5726 0F56  
                             l6542 10A8                               l6518 2440  
                             l6470 01D6                               l6630 0454  
                             l7086 0B6E                               l5920 2074  
                             l5840 2334                               l5496 174C  
                             l5584 165C                               l5576 1634  
                             l5832 19A2                               l5760 105A  
                             l5752 1006                               l5744 0FDC  
                             l5736 0F74                               l5808 182E  
                             l6560 111C                               l6552 10EE  
                             l6712 0634                               l6704 0606  
                             l6640 047C                               l7096 0BA0  
                             l5922 207C                               l5914 2066  
                             l5578 163A                               l5586 1666  
                             l5762 1082                               l5754 102E  
                             l5818 1848                               l6570 1160  
                             l6554 10F6                               l6546 10C8  
                             l6730 069A                               l6706 0618  
                             l6642 0492                               l6634 0464  
                             l5932 2090                               l5844 2348  
                             l6572 1166                               l6564 113C  
                             l6548 10CE                               l6468 01C0  
                             l6732 06A2                               l6740 06CE  
                             l6724 067A                               l6716 0658  
                             l6636 0472                               l5934 2096  
                             l5870 1C98                               l5862 1C84  
                             l5774 20E4                               l6566 1140  
                             l6558 1116                               l6590 1D02  
                             l6742 06D6                               l6750 0760  
                             l6726 0682                               l6718 0662  
                             l6670 0578                               l6654 0514  
                             l6646 04B0                               l5928 2084  
                             l5768 108A                               l5776 20EA  
                             l5792 17F2                               l6576 1186  
                             l6592 1D08                               l6744 071A  
                             l6752 0772                               l6736 06BA  
                             l6680 05A2                               l5866 1C8C  
                             l5858 1C7A                               l5786 1784  
                             l6578 118E                               l6586 1CE4  
                             l6754 077A                               l6690 05D0  
                             l6674 0592                               l6658 051C  
                             l6596 1D28                               l6684 05C6  
                             l6676 0596                               l6756 0786  
                             l5878 1CA6                               l5990 1334  
                             l6598 1D2C                               l6694 05DC  
                             l6688 05CC                               l5994 1352  
                             l5978 12E4                               l6698 0600  
                             STR_1 FF60                               STR_2 FFCF  
                             STR_3 FFF8                               STR_4 FFF2  
                             STR_5 FFE2                               STR_6 FFE7  
                             STR_7 FFDC                               STR_8 FFFB  
                             STR_9 FFF4                               u4100 1AA0  
                             u4400 15E8                               u4321 13D2  
                             u4341 13F0                               u4405 15E0  
                             u4271 16A2                               u5400 1150  
                             u5320 10B8                               u4291 16C0  
                             u5420 1176                               u5340 10DE  
                             u4381 15BC                               u4630 17B2  
                             u4560 103C                               u4640 17E8  
                             u5440 119E                               u5360 1106  
                             u5380 112C                               u5460 1CF2  
                             u4870 130E                               _RBPU 007F8F  
                             u5977 250C                               _TRMT 007D61  
                     _DS1621_tempC 0046                       _DS1621_tempF 0048  
              ??_Deactivate_Buzzer 0011                               _date 00C4  
                             _main 0A0E                               _font FD27  
                     ___ftpack@arg 0011                               _hour 005E  
                     ___ftpack@exp 0014                   __end_of_I2C_Init 2534  
                 __end_of_I2C_Read 209C                               _time 00CD  
                             _year 006C                               fsr0h 000FEA  
                             fsr1h 000FE2                               fsr0l 000FE9  
                             fsr2h 000FDA                               fsr1l 000FE1  
                             indf2 000FDF                               fsr2l 000FD9  
                             _wrap 006F                   __end_of_I2C_Stop 24A6  
                             pclat 000FFA                 __size_of_LCD_Reset 0012  
                             prodh 000FF4                               prodl 000FF3  
                  __end_of_Do_Beep 241E                               start 0018  
      __size_of_I2C_Write_Cmd_Only 001A                    __end_of_Do_Init 2054  
                   _Increase_Speed 22B8                    ??_drawFastVLine 001C  
                     ___ftmul@cntr 002A                    __end_of_i2cNack 253E  
                     ___param_bank 000010                       ___ftmul@sign 002B  
                     ___fttol@exp1 001F                       _Turn_Off_Fan 2520  
                     ___fttol@lval 001B                        ?_TIMER1_isr 0001  
                 __end_of_INT0_isr 0F3A          __end_of_Deactivate_Buzzer 2550  
                  ??_do_update_pwm 003B                    drawFastVLine@hi 0020  
                  drawFastVLine@lo 0021                              ?_main 0001  
                  __end_of___awdiv 1A62                    drawCircle@ddF_x 0026  
                            STR_10 FFEC                    drawCircle@ddF_y 0028  
                            STR_11 FFF0                              STR_12 FF14  
                            STR_13 FF76                              STR_14 FF8B  
                            STR_15 FFB0                              STR_16 FF4A  
                            STR_17 FFC0                              STR_18 FF32  
                            STR_19 FF9F                    __end_of___awmod 1B6C  
                  __end_of___ftdiv 1774                    __end_of___ftmul 14BA  
                            _T0CON 000FD5                    ___awdiv@divisor 0019  
                            _T1CON 000FCD                    __end_of___fttol 1692  
                            _T2CON 000FCA                              _T3CON 000FB1  
                  __end_of___lwdiv 1ED6                    __end_of___lwmod 1FC2  
                            i2l251 1C2E                              i2l263 0F38  
                            i2l276 0F02                    ___awdiv@counter 001B  
                  drawCircle@color 0022                              _RCSTA 000FAB  
                            _TMR0H 000FD7                              _TMR1H 000FCF  
                            _TMR0L 000FD6                              _TMR1L 000FCE  
                            _TMR3L 000FB2                              _SPBRG 000FAF  
                            _TRISA 000F92                              _TRISB 000F93  
                            _TRISC 000F94                              _TRISD 000F95  
                            _TXREG 000FAD                              _TXSTA 000FAC  
                  __end_of_get_RPM 20DA                              _Rcmd1 11A8  
                            _Rcmd3 14BA                         _i2cHighSda 2558  
                       _i2cHighScl 2508                    __end_of_dpowers FF0C  
                            _font2 FE26                              _found 005D  
                  __end_of_isdigit 2372                              _tempC 00E3  
                            _tempF 00E7                              _month 0060  
                    ___ftpack@sign 0015                              main@U 0125  
                            _putch 24FA                              main@j 0126  
                __end_of_I2C_Start 24B8                  __end_of_I2C_Write 2194  
                   __CFG_BOREN$OFF 000000                              tablat 000FF5  
                            status 000FD8             __end_of_Increase_Speed 22E0  
                ?_DS1621_Read_Temp 0014                    write_data@data_ 0013  
               ??_DS1621_Read_Temp 0016                    __initialization 1B6C  
                    ??_Set_RPM_RGB 0013                       __end_of_main 0C1A  
                     __end_of_font FE26                   __end_of_Rcmd2red 2156  
                 ??_Decrease_Speed 0044                             ??_main 0045  
                    ___fttol@sign1 001A                      __activetblptr 000002  
                ?_DS3231_Read_Time 0001                  __end_of_LCD_Reset 2482  
                       _Set_DC_RGB 1090          ??_TFT_GreenTab_Initialize 001D  
               ??_DS3231_Read_Time 0014                             ?_Rcmd1 0001  
                           ?_Rcmd3 0001            __size_of_init_INTERRUPT 0034  
                        I2C_Init@c 0011                          I2C_Read@n 0012  
                           _ADCON1 000FC1                DS1621_Read_Temp@Cmd 0016  
                           _CCPR1L 000FBE                             _CCPR2L 000FBB  
                 ___awdiv@dividend 0017                 __size_of_i2cLowSda 000A  
               __size_of_i2cLowScl 0008                             ?_putch 0001  
                 __end_of___ftpack 1916                   __end_of___lbtoft 232C  
                        ??_Do_Beep 0044                             _DC_Txt 00DB  
                           i2l4410 0E6A                             i2l4402 0E46  
                           i2l4420 0E8A                             i2l4422 0E90  
                           i2l4414 0E6E                             i2l4408 0E64  
                        ??_Do_Init 0017                             i2l4434 0EEA  
                           i2l4442 0F08                             i2l4426 0E94  
                           i2l4444 0F0E                             i2l4380 0DF0  
                           i2l4452 0F16                             i2l4390 0E1E  
                           i2l4396 0E3C                             i2l4942 1C24  
                           _OSCCON 000FD3                __size_of_TIMER1_isr 000C  
                           _SPBRGH 000FB0                             _SSPBUF 000FC9  
                  ?_Increase_Speed 0001                          ??_i2cNack 0011  
                     _Alarm_SW_Txt 00BE                   _force_nec_state0 2560  
                 __end_of_delay_ms 1F28                             _i2cAck 24B8  
                 __end_of_fillRect 200C                   __end_of_drawChar 1090  
               __size_of_OpenUSART 0070           __size_of_Activate_Buzzer 0012  
                           ___wmul 2290                          ??___awdiv 001B  
                 __end_of_drawtext 13C2                          ??___awmod 0015  
                        ??___ftdiv 0032                          ??___ftmul 0023  
                        ??___fttol 0015                             _chkisr 0008  
                        ??___lwdiv 0015                             _array1 0080  
                        ??___lwmod 001C                             _buffer 0100  
                           _nec_ok 00F3                             clear_0 1B72  
                           clear_1 1B7E                   ___awdiv@quotient 001D  
                           _minute 005F                             _second 0062  
          DS3231_Setup_Time@Device 0013                    ___awmod@divisor 0013  
                        ??_get_RPM 0021         __size_of_Deactivate_Buzzer 0008  
                  ___awmod@counter 0015                             _printf 044A  
                     drawtext@size 0040                             _strcpy 2204  
                           _strlen 20DA              ___ftmul@f3_as_product 0027  
              __end_of_Set_RPM_RGB 1D44                         _Toggle_Fan 2434  
                     __pdataCOMRAM 006D                          ??_isdigit 0011  
                        ?_I2C_Init 0011                          ?_I2C_Read 0001  
                        ?_I2C_Stop 0001                       __mediumconst FD26  
                           tblptrh 000FF7                             tblptrl 000FF6  
                           tblptru 000FF8   __end_of_I2C_Write_Cmd_Write_Data 2392  
                      ?_i2cHighSda 0001                        ?_i2cHighScl 0001  
                           putch@c 0011                   __end_of_spiwrite 245C  
                       __accesstop 0080            __end_of__initialization 1BE2  
                        ?_INT0_isr 0001                 _setup_alarm_minute 0064  
               _setup_alarm_second 0065                      ___rparam_used 000001  
                       ___ftdiv@f1 002C                         ___ftdiv@f2 002F  
                       ___ftdiv@f3 0036                         ___lbtoft@c 001C  
                       ___ftmul@f1 001D                         ___ftmul@f2 0020  
                       ___fttol@f1 0011                      __end_of_Rcmd1 12B8  
                    __end_of_Rcmd3 15AC                     __pcstackCOMRAM 0001  
                     __pidataBANK0 1D44                       __pidataBANK1 2392  
                    __end_of_font2 FF02                  __end_of_i2cLowSda 2548  
                __end_of_i2cLowScl 2558                      __end_of_putch 2508  
                   drawPixel@color 0019             __size_of_write_command 0010  
                       ??_I2C_Init 0015                        ?_Set_DC_RGB 0011  
                       ??_I2C_Read 0011                       _alarm_minute 0056  
                     _alarm_second 0057                         ??_I2C_Stop 0011  
                          ??_Rcmd1 001D                            ??_Rcmd3 001D  
               __size_of_drawPixel 0030                  __end_of_OpenUSART 1CD8  
                          ??_putch 0011                         __pbssBANK0 00EB  
                 _setup_alarm_hour 0063                   _setup_alarm_time 009E  
                    ??_DS1621_Init 0016                          ?_Rcmd2red 0001  
               __size_of_init_UART 0014                    spiwrite@spidata 0012  
                       _alarm_date 0054                         ??_INT0_isr 0001  
                       _alarm_hour 0055                         _alarm_time 0095  
                    ?_Wait_One_Sec 0001                            ?_i2cAck 0001  
             Set_DC_RGB@duty_cycle 0011                 __CFG_CCP2MX$PORTBE 000000  
                    ??_Turn_On_Fan 0044                     I2C_Read@inByte 0013  
                          ?___wmul 0011                __size_of_i2cHighSda 0008  
              __size_of_i2cHighScl 000C                        _Set_RPM_RGB 1CD8  
                          ?_chkisr 0001             __size_of_setAddrWindow 004E  
                          _CCP1CON 000FBD   I2C_Write_Cmd_Write_Data@Data_Out 0014  
                          _CCP2CON 000FBA                       ??_TIMER1_isr 0001  
                    ??_I2C_ReStart 0011                            _ALARMEN 00EF  
                        ?___ftpack 0011                          ?___lbtoft 0019  
                       I2C_Write@n 0012                            ?_printf 001D  
                          ?_strcpy 0011                            ?_strlen 0011  
                      ?_Toggle_Fan 0001                  ??_Activate_Buzzer 0011  
                       _fillScreen 23D0              __end_of_Update_Screen 044A  
                       _drawCircle 0C1A                     _init_INTERRUPT 21D0  
                        ?_delay_ms 0017                          ?_fillRect 0023  
                        ?_drawChar 002E                            _SSPCON1 000FC6  
                          _SSPSTAT 000FC7                            _RPM_Txt 00D6  
            __end_of_fillRectangle 1850                            _Do_Beep 2406  
                        ?_drawtext 0039                  _DS3231_Setup_Time 1DB0  
                          _Do_Init 200C           _I2C_Write_Cmd_Write_Data 2372  
       __end_of_I2C_Write_Cmd_Only 2406                         ??_Rcmd2red 0014  
           DS1621_Read_Temp@Device 0018                     ??_Wait_One_Sec 0011  
                          _i2cNack 2534                 __end_of_TIMER1_isr 2520  
               ?_DS3231_Setup_Time 0001                      _write_command 24EA  
                        _I2C_Start 24A6                          _I2C_Write 2156  
                  __size_of_i2cAck 0012                            __Hparam 0000  
                          __Lparam 0000                __size_of_Set_DC_RGB 0118  
              __end_of_DS1621_Init 23D0                  __end_of_drawPixel 2266  
              ??_DS3231_Setup_Time 0013              __end_of_drawFastVLine 1AEA  
                          ___awdiv 19CC                            ___awmod 1AEA  
                          ___ftdiv 1692                    __size_of___wmul 0028  
                          ___ftmul 13C2                            ___fttol 15AC  
                          ___lwdiv 1E7A                            ___lwmod 1F76  
                  __size_of_chkisr 1C60                          ?_spiwrite 0001  
                          __pcinit 1B6C                         ??___ftpack 0016  
                       ??___lbtoft 001C                            __ramtop 1000  
                          _get_RPM 209C                            __ptext0 0A0E  
                          __ptext1 044A                            __ptext2 24FA  
                          __ptext3 2350                            __ptext4 1F76  
                          __ptext5 1E7A          __size_of_DS1621_Read_Temp 003C  
                          __ptext6 209C                            __ptext7 001C  
                          __ptext8 1AEA                            __ptext9 19CC  
                  __size_of_printf 035A                  __end_of_init_UART 2470  
              __end_of_Turn_On_Fan 24DA             __end_of_init_INTERRUPT 2204  
                        _T0CONbits 000FD5                    __size_of_strcpy 0032  
                  __size_of_strlen 003E                  __end_of_hexpowers FF14  
         __end_of_force_nec_state0 2568                          _T1CONbits 000FCD  
         DS3231_Setup_Time@Address 0014                            _dpowers FF02  
            __end_of_do_update_pwm 19CC                            _isdigit 2350  
                 ___awmod@dividend 0011                         _duty_cycle 005C  
                       ??_delay_ms 0019                __end_of_I2C_ReStart 2434  
                    drawtext@_text 003A                      drawtext@color 003C  
                       ??_fillRect 0028          __end_of_DS3231_Setup_Time 1E16  
                 ??_Increase_Speed 0044                         ??_drawChar 0035  
                        _LCD_Reset 2470                      _setAddrWindow 1F28  
                   __pintcode_body 1BEC                      Wait_One_Sec@j 0011  
                       delay_ms@ms 0017               end_of_initialization 1BE2  
                       ??_drawtext 0041                     ?_write_command 0001  
                    __Lmediumconst FD26          __size_of_DS3231_Read_Time 0064  
                          int_func 1BEC            DS3231_Read_Time@Address 0014  
                       ?_I2C_Start 0001                         ?_I2C_Write 0001  
                       get_RPM@RPS 0021                __size_of_Toggle_Fan 0014  
                       _tempSecond 006E                          _RCSTAbits 000FAB  
                          printf@c 0038                            printf@f 001D  
                          postdec1 000FE5                            postdec2 000FDD  
                          postinc0 000FEE                            postinc2 000FDE  
                       ??_spiwrite 0011                            strlen@s 0011  
      I2C_Write_Cmd_Write_Data@Cmd 0013                          _PORTAbits 000F80  
                 drawtext@cursor_x 00FD                   drawtext@cursor_y 00FC  
                        _PORTBbits 000F81                          _PORTDbits 000F83  
                        _PORTEbits 000F84                   I2C_Write@outByte 0011  
                  ?_init_INTERRUPT 0001                         _setup_date 00A7  
                      ?_fillScreen 0024                         _setup_hour 0067  
                       _setup_time 00B0                         _setup_year 006B  
                      ?_drawCircle 001C                         drawChar@bg 0032  
                        _TRISBbits 000F93                          _TRISCbits 000F94  
                     ??_i2cHighSda 0011                       ??_i2cHighScl 0011  
                __size_of_I2C_Init 000A                  __size_of_I2C_Read 0048  
                __size_of_I2C_Stop 0012                     ?_setAddrWindow 0014  
                       ?_LCD_Reset 0001                   drawtext@textsize 00F8  
                       drawPixel@x 001B                         drawPixel@y 0018  
               _Update_Screen$2392 0123                 _Update_Screen$2393 011F  
                      _DS1621_Init 23B2                        ___ftdiv@exp 0039  
                      printf@width 0036                          _TXSTAbits 000FAC  
                __size_of_INT0_isr 0172                     __end_of_i2cAck 24CA  
                      ___ftmul@exp 0026           DS1621_Read_Temp@Data_Ret 0017  
                      _Turn_On_Fan 24CA                 __end_of_i2cHighSda 2560  
               __end_of_i2cHighScl 2514                     __end_of___wmul 22B8  
                    delay_ms@count 001B                         _write_data 24DA  
                    __pidataCOMRAM 2568                     __end_of_chkisr 1C68  
         ?_TFT_GreenTab_Initialize 0001                        _I2C_ReStart 241E  
                       drawtext@bg 003E                          _Nec_code1 0051  
                        _i2cLowSda 253E                          _i2cLowScl 2550  
             __end_of_Wait_One_Sec 2350                     __end_of_printf 07A4  
                     ??_Set_DC_RGB 0013                     __end_of_strcpy 2236  
                   __end_of_strlen 2118                          _Nec_state 0052  
              start_initialization 1B6C             Update_Screen@neg_tempF 0121  
       __size_of_DS3231_Setup_Time 0066            __size_of_Decrease_Speed 0026  
                  ??_write_command 0013                          _OpenUSART 1C68  
                 __CFG_OSC$INTIO67 000000                        ??_I2C_Start 0011  
                      ??_I2C_Write 0011                           ??_i2cAck 0011  
                __size_of_Rcmd2red 003E                __size_of_fillScreen 001C  
              __size_of_drawCircle 01AE                    _Activate_Buzzer 2482  
               __end_of_Set_DC_RGB 11A8                           ??___wmul 0015  
                     ?_Set_RPM_RGB 0011                      ?_Turn_Off_Fan 0001  
                         ??_chkisr 0003                        __pdataBANK0 0080  
                      __pdataBANK1 0100                    setAddrWindow@x0 0017  
                  setAddrWindow@x1 0015                    setAddrWindow@y0 0014  
                  setAddrWindow@y1 0016                           ??_printf 002B  
                 _DS1621_Read_Temp 2194                           ??_strcpy 0015  
                         ??_strlen 0013                       ??_Toggle_Fan 0044  
                       ?_i2cLowSda 0001                         ?_i2cLowScl 0001  
                __size_of___ftpack 00C6                  __size_of___lbtoft 0026  
                      __pbssCOMRAM 0046         ??_I2C_Write_Cmd_Write_Data 0015  
                  ??_setAddrWindow 0017                      __pcstackBANK0 00F7  
                    __pcstackBANK1 011F                        ??_LCD_Reset 001D  
                     _isdigit$2041 0012                  __size_of_delay_ms 0052  
                         ?_Do_Beep 0001                           ?_Do_Init 0001  
                __size_of_fillRect 004A                  __size_of_drawChar 0156  
                       ?_OpenUSART 0011                   _DS3231_Read_Time 1E16  
                         ?_i2cNack 0001                  __size_of_drawtext 010A  
                 ___lwdiv@dividend 0011                 __end_of_Toggle_Fan 2448  
                      I2C_Read@ack 0011                          _bit_count 0058  
                        __pintcode 0008    __end_of_TFT_GreenTab_Initialize 2290  
                   ??_Turn_Off_Fan 0011                      __pmediumconst FD26  
                         ?___awdiv 0017                           ?___awmod 0011  
                         ?___ftdiv 002C                           ?___ftmul 001D  
                         ?___fttol 0011                          __tft_type 0053  
                         ?___lwdiv 0011                 _I2C_Write_Cmd_Only 23EC  
                         ?___lwmod 0018                 drawFastVLine@color 001A  
                      ?_write_data 0001                          _drawPixel 2236  
                         ?_get_RPM 001F                  __size_of_spiwrite 0014  
              ?_I2C_Write_Cmd_Only 0013                  ?_force_nec_state0 0001  
                         ?_isdigit 0001                           _I2C_Init 252A  
                         _I2C_Read 2054                           _I2C_Stop 2494  
                _Initialize_Screen 07A4                     __size_of_Rcmd1 0110  
                   __size_of_Rcmd3 00F2                          _init_UART 245C  
               ??_force_nec_state0 0001           I2C_Write_Cmd_Only@Device 0014  
                        _hexpowers FF0C                 ?_Initialize_Screen 0001  
                 ___lwdiv@quotient 0016                     __size_of_putch 000E  
          __end_of_Activate_Buzzer 2494                     ___wmul@product 0015  
              ??_Initialize_Screen 0043                           _INT0_isr 0DC8  
             ??_I2C_Write_Cmd_Only 0014                           _PIE1bits 000F9D  
           __size_of_Update_Screen 042E             DS3231_Read_Time@Device 0015  
                         _PIR1bits 000F9E                   ??_init_INTERRUPT 0011  
            __size_of_Wait_One_Sec 0024                          _setup_day 0066  
                DS1621_Init@Device 0016                          fillRect@h 0025  
                        fillRect@i 002C                          fillRect@w 0024  
                        fillRect@x 002B                          fillRect@y 0023  
                        drawChar@c 002F                          drawChar@i 0038  
                        drawChar@j 0037                          drawChar@x 0036  
                        drawChar@y 002E                         ?_drawPixel 0018  
           __size_of_fillRectangle 00DC                  ___wmul@multiplier 0011  
        __end_of_Initialize_Screen 0A0E                        ??_i2cLowSda 0011  
                      ??_i2cLowScl 0011                       ??_fillScreen 0026  
                     ??_drawCircle 0024                         printf@flag 0035  
                       printf@prec 0032                         ?_init_UART 0001  
                   _Decrease_Speed 22E0                        _INTCON2bits 000FF1  
                        copy_data0 1B98                          copy_data1 1BB8  
                        drawtext@i 00FA             __size_of_drawFastVLine 0088  
                        drawtext@x 00F7                          drawtext@y 0039  
                         _Nec_code 00EB                  write_command@cmd_ 0013  
                      ??_OpenUSART 0013                   __size_of_Do_Beep 0018  
                     ?_DS1621_Init 0001                           _Rcmd2red 2118  
                 __size_of_Do_Init 0048                __size_of_write_data 0010  
                  OpenUSART@config 0013                       _Time_Elapsed 004A  
                 __size_of_i2cNack 000A                      _RTC_ALARM_Txt 00C2  
                     _Wait_One_Sec 232C                           __Hrparam 0000  
           __size_of_do_update_pwm 00B6                 __end_of_fillScreen 23EC  
                         __Lrparam 0000                 __end_of_drawCircle 0DC8  
                     ?_Turn_On_Fan 0001                   __size_of___awdiv 0096  
                 __size_of___awmod 0082                   __size_of___ftdiv 00E2  
                 __size_of___ftmul 00F8                   __size_of___fttol 00E6  
                 __size_of___lwdiv 005C                   __size_of___lwmod 004C  
             __size_of_Set_RPM_RGB 006C                           ___ftpack 1850  
                         ___lbtoft 2306                       ?_I2C_ReStart 0001  
                 __size_of_get_RPM 003E                      _Update_Screen 001C  
                   _setup_fan_temp 006D                     _setup_fan_text 00B9  
                 __size_of_isdigit 0022                           _delay_ms 1ED6  
           __end_of_Decrease_Speed 2306                    ___lwdiv@divisor 0013  
                  ___lwdiv@counter 0015                           __ptext10 2434  
                         __ptext11 24CA                           __ptext20 20DA  
                         __ptext12 2520                           __ptext21 0F3A  
                         __ptext13 1CD8                           __ptext30 11A8  
                         __ptext22 1FC2                           __ptext14 1090  
                         __ptext31 24DA                           __ptext23 1A62  
                         __ptext15 07A4                           __ptext40 1C68  
                         __ptext32 24EA                           __ptext24 0C1A  
                         __ptext16 2204                           __ptext41 21D0  
                         __ptext33 2448                           __ptext25 2236  
                         __ptext17 23D0                           __ptext50 15AC  
                         __ptext42 252A                           __ptext34 2470  
                         __ptext26 1F28                           __ptext18 1774  
                         __ptext51 13C2                           __ptext43 23B2  
                         __ptext35 1ED6                           __ptext27 2266  
                         __ptext19 12B8                           __ptext60 2156  
                         __ptext52 1692                           __ptext44 2372  
                         __ptext36 2290                           __ptext28 14BA  
                         __ptext61 2494                           __ptext53 1850  
                         __ptext45 23EC                           __ptext37 22B8  
                         __ptext29 2118                           __ptext70 2508  
                         __ptext62 24A6                           __ptext54 232C  
                         __ptext46 22E0                           __ptext38 200C  
                         __ptext63 2054                           __ptext55 2548  
                         __ptext47 2406                           __ptext39 245C  
                         __ptext72 2514                           __ptext64 2534  
                         __ptext56 2482                           __ptext48 1916  
                         __ptext73 0DC8                           __ptext65 24B8  
                         __ptext57 1DB0                           __ptext49 2306  
                         __ptext74 2560                           __ptext66 241E  
                         __ptext58 1E16                           __ptext67 253E  
                         __ptext59 2194                           __ptext68 2550  
                         __ptext69 2558                           _fillRect 1FC2  
                         _drawChar 0F3A               __end_of_Turn_Off_Fan 252A  
 __size_of_TFT_GreenTab_Initialize 002A                           _colstart 0059  
                         _drawtext 12B8                         strcpy@from 0013  
                    _fillRectangle 1774           __end_of_DS1621_Read_Temp 21D0  
                 ?_Activate_Buzzer 0001                      __size_of_main 020C  
          __size_of_Increase_Speed 0028                    fillRectangle@hi 0021  
                  fillRectangle@lo 0022                      _drawFastVLine 1A62  
                        printf@idx 002F                           _spiwrite 2448  
                        printf@val 0033                        ??_drawPixel 001B  
                         _rowstart 0061           __end_of_DS3231_Read_Time 1E7A  
       __size_of_Initialize_Screen 026A                     ?_Update_Screen 0001  
                       _INTCONbits 000FF2                      _do_update_pwm 1916  
                   OpenUSART@spbrg 0011                        ??_init_UART 0014  
                  ?_Decrease_Speed 0001                           isdigit@c 0013  
                        spiwrite@x 0011                           intlevel2 0000  
                   ?_fillRectangle 0018                   ___lwmod@dividend 0018  
            __end_of_write_command 24FA                    fillScreen@color 0024  
          do_update_pwm@duty_cycle 0041                     fillRectangle@h 001A  
                   fillRectangle@w 0019                     fillRectangle@x 0023  
                   fillRectangle@y 0018                     ?_drawFastVLine 0018  
                         printf@ap 0030                       ??_write_data 0013  
                       _TIMER1_isr 2514                      fillRect@color 0026  
                   ?_do_update_pwm 0001                    ___lwmod@divisor 001A  
                         strcpy@cp 0015                           strlen@cp 0015  
                         strcpy@to 0011              I2C_Write_Cmd_Only@Cmd 0013  
                  ___lwmod@counter 001C                       _setup_minute 0068  
                     _setup_second 006A              __end_of_setAddrWindow 1F76  
               fillRectangle@color 001B                  do_update_pwm@dc_I 0042  
                do_update_pwm@dc_f 003E                      drawChar@color 0030  
                      _setup_month 0069                     Set_RPM_RGB@rpm 0011  
               __end_of_write_data 24EA          __size_of_force_nec_state0 0008  
                     drawChar@line 0035                       drawChar@size 0034  
__size_of_I2C_Write_Cmd_Write_Data 0020               __size_of_DS1621_Init 001E  
        ?_I2C_Write_Cmd_Write_Data 0013  
