

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Wed Nov 10 16:20:29 2021

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	text44,global,reloc=2,class=CODE,delta=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	text53,global,reloc=2,class=CODE,delta=1
    72                           	psect	text54,global,reloc=2,class=CODE,delta=1
    73                           	psect	text55,global,reloc=2,class=CODE,delta=1
    74                           	psect	text56,global,reloc=2,class=CODE,delta=1
    75                           	psect	text57,global,reloc=2,class=CODE,delta=1
    76                           	psect	text58,global,reloc=2,class=CODE,delta=1
    77                           	psect	text59,global,reloc=2,class=CODE,delta=1
    78                           	psect	text60,global,reloc=2,class=CODE,delta=1
    79                           	psect	text61,global,reloc=2,class=CODE,delta=1
    80                           	psect	text62,global,reloc=2,class=CODE,delta=1
    81                           	psect	text63,global,reloc=2,class=CODE,delta=1
    82                           	psect	text64,global,reloc=2,class=CODE,delta=1
    83                           	psect	text65,global,reloc=2,class=CODE,delta=1
    84                           	psect	text66,global,reloc=2,class=CODE,delta=1
    85                           	psect	text67,global,reloc=2,class=CODE,delta=1
    86                           	psect	text68,global,reloc=2,class=CODE,delta=1
    87                           	psect	text69,global,reloc=2,class=CODE,delta=1
    88                           	psect	text70,global,reloc=2,class=CODE,delta=1
    89                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    90                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    91                           	psect	text72,global,reloc=2,class=CODE,delta=1
    92                           	psect	text73,global,reloc=2,class=CODE,delta=1
    93                           	psect	text74,global,reloc=2,class=CODE,delta=1
    94                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    95                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    96  0000                     
    97                           	psect	idataCOMRAM
    98  002508                     __pidataCOMRAM:
    99                           	opt stack 0
   100                           
   101                           ;initializer for _tempSecond
   102  002508  FF                 	db	255
   103                           
   104                           ;initializer for _wrap
   105  002509  01                 	db	1
   106                           
   107                           	psect	idataBANK0
   108  001CE6                     __pidataBANK0:
   109                           	opt stack 0
   110                           
   111                           ;initializer for _Display_D1
   112  001CE6  00                 	db	0
   113  001CE7  02                 	db	2
   114  001CE8  04                 	db	4
   115  001CE9  06                 	db	6
   116  001CEA  10                 	db	16
   117  001CEB  12                 	db	18
   118  001CEC  14                 	db	20
   119  001CED  16                 	db	22
   120  001CEE  16                 	db	22
   121  001CEF  16                 	db	22
   122  001CF0  16                 	db	22
   123                           
   124                           ;initializer for _alarm_time
   125  001CF1  30                 	db	48
   126  001CF2  30                 	db	48
   127  001CF3  3A                 	db	58
   128  001CF4  30                 	db	48
   129  001CF5  30                 	db	48
   130  001CF6  3A                 	db	58
   131  001CF7  30                 	db	48
   132  001CF8  30                 	db	48
   133  001CF9  00                 	db	0
   134                           
   135                           ;initializer for _setup_alarm_time
   136  001CFA  30                 	db	48
   137  001CFB  30                 	db	48
   138  001CFC  3A                 	db	58
   139  001CFD  30                 	db	48
   140  001CFE  30                 	db	48
   141  001CFF  3A                 	db	58
   142  001D00  30                 	db	48
   143  001D01  30                 	db	48
   144  001D02  00                 	db	0
   145                           
   146                           ;initializer for _setup_date
   147  001D03  30                 	db	48
   148  001D04  31                 	db	49
   149  001D05  2F                 	db	47
   150  001D06  30                 	db	48
   151  001D07  31                 	db	49
   152  001D08  2F                 	db	47
   153  001D09  30                 	db	48
   154  001D0A  30                 	db	48
   155  001D0B  00                 	db	0
   156                           
   157                           ;initializer for _setup_time
   158  001D0C  30                 	db	48
   159  001D0D  30                 	db	48
   160  001D0E  3A                 	db	58
   161  001D0F  30                 	db	48
   162  001D10  30                 	db	48
   163  001D11  3A                 	db	58
   164  001D12  30                 	db	48
   165  001D13  30                 	db	48
   166  001D14  00                 	db	0
   167                           
   168                           ;initializer for _setup_fan_text
   169  001D15  30                 	db	48
   170  001D16  37                 	db	55
   171  001D17  35                 	db	53
   172  001D18  46                 	db	70
   173  001D19  00                 	db	0
   174                           
   175                           ;initializer for _Alarm_SW_Txt
   176  001D1A  4F                 	db	79
   177  001D1B  46                 	db	70
   178  001D1C  46                 	db	70
   179  001D1D  00                 	db	0
   180                           
   181                           ;initializer for _Display_D2
   182  001D1E  00                 	db	0
   183  001D1F  40                 	db	64
   184  001D20  C0                 	db	192
   185  001D21  80                 	db	128
   186                           
   187                           ;initializer for _RTC_ALARM_Txt
   188  001D22  30                 	db	48
   189  001D23  00                 	db	0
   190                           
   191                           ;initializer for _setup_fan_temp
   192  001D24  4B                 	db	75
   193                           
   194                           ;initializer for _date
   195  001D25  30                 	db	48
   196  001D26  30                 	db	48
   197  001D27  2F                 	db	47
   198  001D28  30                 	db	48
   199  001D29  30                 	db	48
   200  001D2A  2F                 	db	47
   201  001D2B  30                 	db	48
   202  001D2C  30                 	db	48
   203  001D2D  00                 	db	0
   204                           
   205                           ;initializer for _time
   206  001D2E  30                 	db	48
   207  001D2F  30                 	db	48
   208  001D30  3A                 	db	58
   209  001D31  30                 	db	48
   210  001D32  30                 	db	48
   211  001D33  3A                 	db	58
   212  001D34  30                 	db	48
   213  001D35  30                 	db	48
   214  001D36  00                 	db	0
   215                           
   216                           ;initializer for _RPM_Txt
   217  001D37  30                 	db	48
   218  001D38  30                 	db	48
   219  001D39  30                 	db	48
   220  001D3A  30                 	db	48
   221  001D3B  00                 	db	0
   222                           
   223                           ;initializer for _DC_Txt
   224  001D3C  30                 	db	48
   225  001D3D  30                 	db	48
   226  001D3E  30                 	db	48
   227  001D3F  00                 	db	0
   228                           
   229                           ;initializer for _Fan_SW_Txt
   230  001D40  4F                 	db	79
   231  001D41  46                 	db	70
   232  001D42  46                 	db	70
   233  001D43  00                 	db	0
   234                           
   235                           ;initializer for _tempC
   236  001D44  2B                 	db	43
   237  001D45  32                 	db	50
   238  001D46  35                 	db	53
   239  001D47  00                 	db	0
   240                           
   241                           ;initializer for _tempF
   242  001D48  2B                 	db	43
   243  001D49  37                 	db	55
   244  001D4A  37                 	db	55
   245  001D4B  00                 	db	0
   246                           
   247                           	psect	idataBANK1
   248  0018B4                     __pidataBANK1:
   249                           	opt stack 0
   250                           
   251                           ;initializer for _txt1
   252  0018B4  43                 	db	67
   253  0018B5  48                 	db	72
   254  0018B6  2D                 	db	45
   255  0018B7  00                 	db	0
   256  0018B8  43                 	db	67
   257  0018B9  48                 	db	72
   258  0018BA  20                 	db	32
   259  0018BB  00                 	db	0
   260  0018BC  43                 	db	67
   261  0018BD  48                 	db	72
   262  0018BE  2B                 	db	43
   263  0018BF  00                 	db	0
   264  0018C0  50                 	db	80
   265  0018C1  52                 	db	82
   266  0018C2  56                 	db	86
   267  0018C3  00                 	db	0
   268  0018C4  4E                 	db	78
   269  0018C5  58                 	db	88
   270  0018C6  54                 	db	84
   271  0018C7  00                 	db	0
   272  0018C8  50                 	db	80
   273  0018C9  4C                 	db	76
   274  0018CA  59                 	db	89
   275  0018CB  00                 	db	0
   276  0018CC  56                 	db	86
   277  0018CD  4C                 	db	76
   278  0018CE  2D                 	db	45
   279  0018CF  00                 	db	0
   280  0018D0  56                 	db	86
   281  0018D1  4C                 	db	76
   282  0018D2  2B                 	db	43
   283  0018D3  00                 	db	0
   284  0018D4  45                 	db	69
   285  0018D5  51                 	db	81
   286  0018D6  20                 	db	32
   287  0018D7  00                 	db	0
   288  0018D8  20                 	db	32
   289  0018D9  30                 	db	48
   290  0018DA  20                 	db	32
   291  0018DB  00                 	db	0
   292  0018DC  31                 	db	49
   293  0018DD  30                 	db	48
   294  0018DE  30                 	db	48
   295  0018DF  00                 	db	0
   296  0018E0  32                 	db	50
   297  0018E1  30                 	db	48
   298  0018E2  30                 	db	48
   299  0018E3  00                 	db	0
   300  0018E4  20                 	db	32
   301  0018E5  31                 	db	49
   302  0018E6  20                 	db	32
   303  0018E7  00                 	db	0
   304  0018E8  20                 	db	32
   305  0018E9  32                 	db	50
   306  0018EA  20                 	db	32
   307  0018EB  00                 	db	0
   308  0018EC  20                 	db	32
   309  0018ED  33                 	db	51
   310  0018EE  20                 	db	32
   311  0018EF  00                 	db	0
   312  0018F0  20                 	db	32
   313  0018F1  34                 	db	52
   314  0018F2  20                 	db	32
   315  0018F3  00                 	db	0
   316  0018F4  20                 	db	32
   317  0018F5  35                 	db	53
   318  0018F6  20                 	db	32
   319  0018F7  00                 	db	0
   320  0018F8  20                 	db	32
   321  0018F9  36                 	db	54
   322  0018FA  20                 	db	32
   323  0018FB  00                 	db	0
   324  0018FC  20                 	db	32
   325  0018FD  37                 	db	55
   326  0018FE  20                 	db	32
   327  0018FF  00                 	db	0
   328  001900  20                 	db	32
   329  001901  38                 	db	56
   330  001902  20                 	db	32
   331  001903  00                 	db	0
   332  001904  20                 	db	32
   333  001905  39                 	db	57
   334  001906  20                 	db	32
   335  001907  00                 	db	0
   336                           
   337                           ;initializer for _color
   338  001908  F800               	dw	63488
   339  00190A  F800               	dw	63488
   340  00190C  F800               	dw	63488
   341  00190E  001F               	dw	31
   342  001910  001F               	dw	31
   343  001912  07E0               	dw	2016
   344  001914  F81F               	dw	63519
   345  001916  F81F               	dw	63519
   346  001918  F81F               	dw	63519
   347  00191A  0000               	dw	0
   348  00191C  0000               	dw	0
   349  00191E  0000               	dw	0
   350  001920  0000               	dw	0
   351  001922  0000               	dw	0
   352  001924  0000               	dw	0
   353  001926  0000               	dw	0
   354  001928  0000               	dw	0
   355  00192A  0000               	dw	0
   356  00192C  0000               	dw	0
   357  00192E  0000               	dw	0
   358  001930  0000               	dw	0
   359                           
   360                           ;initializer for _array1
   361  001932  A2                 	db	162
   362  001933  62                 	db	98
   363  001934  E2                 	db	226
   364  001935  22                 	db	34
   365  001936  02                 	db	2
   366  001937  C2                 	db	194
   367  001938  E0                 	db	224
   368  001939  A8                 	db	168
   369  00193A  90                 	db	144
   370  00193B  68                 	db	104
   371  00193C  98                 	db	152
   372  00193D  B0                 	db	176
   373  00193E  30                 	db	48
   374  00193F  18                 	db	24
   375  001940  7A                 	db	122
   376  001941  10                 	db	16
   377  001942  38                 	db	56
   378  001943  5A                 	db	90
   379  001944  42                 	db	66
   380  001945  4A                 	db	74
   381  001946  52                 	db	82
   382                           
   383                           ;initializer for _buffer
   384  001947  20                 	db	32
   385  001948  45                 	db	69
   386  001949  43                 	db	67
   387  00194A  45                 	db	69
   388  00194B  33                 	db	51
   389  00194C  33                 	db	51
   390  00194D  30                 	db	48
   391  00194E  31                 	db	49
   392  00194F  4C                 	db	76
   393  001950  20                 	db	32
   394  001951  46                 	db	70
   395  001952  61                 	db	97
   396  001953  6C                 	db	108
   397  001954  6C                 	db	108
   398  001955  27                 	db	39
   399  001956  32                 	db	50
   400  001957  31                 	db	49
   401  001958  20                 	db	32
   402  001959  4C                 	db	76
   403  00195A  31                 	db	49
   404  00195B  31                 	db	49
   405  00195C  00                 	db	0
   406  00195D  00                 	db	0
   407  00195E  00                 	db	0
   408  00195F  00                 	db	0
   409  001960  00                 	db	0
   410  001961  00                 	db	0
   411  001962  00                 	db	0
   412  001963  00                 	db	0
   413  001964  00                 	db	0
   414  001965  00                 	db	0
   415                           
   416                           	psect	mediumconst
   417  00FD26                     __pmediumconst:
   418                           	opt stack 0
   419  00FD26  00                 	db	0
   420  00FD27                     _font:
   421                           	opt stack 0
   422  00FD27  00                 	db	0
   423  00FD28  00                 	db	0
   424  00FD29  00                 	db	0
   425  00FD2A  00                 	db	0
   426  00FD2B  00                 	db	0
   427  00FD2C  00                 	db	0
   428  00FD2D  00                 	db	0
   429  00FD2E  5F                 	db	95
   430  00FD2F  00                 	db	0
   431  00FD30  00                 	db	0
   432  00FD31  00                 	db	0
   433  00FD32  07                 	db	7
   434  00FD33  00                 	db	0
   435  00FD34  07                 	db	7
   436  00FD35  00                 	db	0
   437  00FD36  14                 	db	20
   438  00FD37  7F                 	db	127
   439  00FD38  14                 	db	20
   440  00FD39  7F                 	db	127
   441  00FD3A  14                 	db	20
   442  00FD3B  24                 	db	36
   443  00FD3C  2A                 	db	42
   444  00FD3D  7F                 	db	127
   445  00FD3E  2A                 	db	42
   446  00FD3F  12                 	db	18
   447  00FD40  23                 	db	35
   448  00FD41  13                 	db	19
   449  00FD42  08                 	db	8
   450  00FD43  64                 	db	100
   451  00FD44  62                 	db	98
   452  00FD45  36                 	db	54
   453  00FD46  49                 	db	73
   454  00FD47  56                 	db	86
   455  00FD48  20                 	db	32
   456  00FD49  50                 	db	80
   457  00FD4A  00                 	db	0
   458  00FD4B  08                 	db	8
   459  00FD4C  07                 	db	7
   460  00FD4D  03                 	db	3
   461  00FD4E  00                 	db	0
   462  00FD4F  00                 	db	0
   463  00FD50  1C                 	db	28
   464  00FD51  22                 	db	34
   465  00FD52  41                 	db	65
   466  00FD53  00                 	db	0
   467  00FD54  00                 	db	0
   468  00FD55  41                 	db	65
   469  00FD56  22                 	db	34
   470  00FD57  1C                 	db	28
   471  00FD58  00                 	db	0
   472  00FD59  2A                 	db	42
   473  00FD5A  1C                 	db	28
   474  00FD5B  7F                 	db	127
   475  00FD5C  1C                 	db	28
   476  00FD5D  2A                 	db	42
   477  00FD5E  08                 	db	8
   478  00FD5F  08                 	db	8
   479  00FD60  3E                 	db	62
   480  00FD61  08                 	db	8
   481  00FD62  08                 	db	8
   482  00FD63  00                 	db	0
   483  00FD64  80                 	db	128
   484  00FD65  70                 	db	112
   485  00FD66  30                 	db	48
   486  00FD67  00                 	db	0
   487  00FD68  08                 	db	8
   488  00FD69  08                 	db	8
   489  00FD6A  08                 	db	8
   490  00FD6B  08                 	db	8
   491  00FD6C  08                 	db	8
   492  00FD6D  00                 	db	0
   493  00FD6E  00                 	db	0
   494  00FD6F  60                 	db	96
   495  00FD70  60                 	db	96
   496  00FD71  00                 	db	0
   497  00FD72  20                 	db	32
   498  00FD73  10                 	db	16
   499  00FD74  08                 	db	8
   500  00FD75  04                 	db	4
   501  00FD76  02                 	db	2
   502  00FD77  3E                 	db	62
   503  00FD78  51                 	db	81
   504  00FD79  49                 	db	73
   505  00FD7A  45                 	db	69
   506  00FD7B  3E                 	db	62
   507  00FD7C  00                 	db	0
   508  00FD7D  42                 	db	66
   509  00FD7E  7F                 	db	127
   510  00FD7F  40                 	db	64
   511  00FD80  00                 	db	0
   512  00FD81  72                 	db	114
   513  00FD82  49                 	db	73
   514  00FD83  49                 	db	73
   515  00FD84  49                 	db	73
   516  00FD85  46                 	db	70
   517  00FD86  21                 	db	33
   518  00FD87  41                 	db	65
   519  00FD88  49                 	db	73
   520  00FD89  4D                 	db	77
   521  00FD8A  33                 	db	51
   522  00FD8B  18                 	db	24
   523  00FD8C  14                 	db	20
   524  00FD8D  12                 	db	18
   525  00FD8E  7F                 	db	127
   526  00FD8F  10                 	db	16
   527  00FD90  27                 	db	39
   528  00FD91  45                 	db	69
   529  00FD92  45                 	db	69
   530  00FD93  45                 	db	69
   531  00FD94  39                 	db	57
   532  00FD95  3C                 	db	60
   533  00FD96  4A                 	db	74
   534  00FD97  49                 	db	73
   535  00FD98  49                 	db	73
   536  00FD99  31                 	db	49
   537  00FD9A  41                 	db	65
   538  00FD9B  21                 	db	33
   539  00FD9C  11                 	db	17
   540  00FD9D  09                 	db	9
   541  00FD9E  07                 	db	7
   542  00FD9F  36                 	db	54
   543  00FDA0  49                 	db	73
   544  00FDA1  49                 	db	73
   545  00FDA2  49                 	db	73
   546  00FDA3  36                 	db	54
   547  00FDA4  46                 	db	70
   548  00FDA5  49                 	db	73
   549  00FDA6  49                 	db	73
   550  00FDA7  29                 	db	41
   551  00FDA8  1E                 	db	30
   552  00FDA9  00                 	db	0
   553  00FDAA  00                 	db	0
   554  00FDAB  14                 	db	20
   555  00FDAC  00                 	db	0
   556  00FDAD  00                 	db	0
   557  00FDAE  00                 	db	0
   558  00FDAF  40                 	db	64
   559  00FDB0  34                 	db	52
   560  00FDB1  00                 	db	0
   561  00FDB2  00                 	db	0
   562  00FDB3  00                 	db	0
   563  00FDB4  08                 	db	8
   564  00FDB5  14                 	db	20
   565  00FDB6  22                 	db	34
   566  00FDB7  41                 	db	65
   567  00FDB8  14                 	db	20
   568  00FDB9  14                 	db	20
   569  00FDBA  14                 	db	20
   570  00FDBB  14                 	db	20
   571  00FDBC  14                 	db	20
   572  00FDBD  00                 	db	0
   573  00FDBE  41                 	db	65
   574  00FDBF  22                 	db	34
   575  00FDC0  14                 	db	20
   576  00FDC1  08                 	db	8
   577  00FDC2  02                 	db	2
   578  00FDC3  01                 	db	1
   579  00FDC4  59                 	db	89
   580  00FDC5  09                 	db	9
   581  00FDC6  06                 	db	6
   582  00FDC7  3E                 	db	62
   583  00FDC8  41                 	db	65
   584  00FDC9  5D                 	db	93
   585  00FDCA  59                 	db	89
   586  00FDCB  4E                 	db	78
   587  00FDCC  7C                 	db	124
   588  00FDCD  12                 	db	18
   589  00FDCE  11                 	db	17
   590  00FDCF  12                 	db	18
   591  00FDD0  7C                 	db	124
   592  00FDD1  7F                 	db	127
   593  00FDD2  49                 	db	73
   594  00FDD3  49                 	db	73
   595  00FDD4  49                 	db	73
   596  00FDD5  36                 	db	54
   597  00FDD6  3E                 	db	62
   598  00FDD7  41                 	db	65
   599  00FDD8  41                 	db	65
   600  00FDD9  41                 	db	65
   601  00FDDA  22                 	db	34
   602  00FDDB  7F                 	db	127
   603  00FDDC  41                 	db	65
   604  00FDDD  41                 	db	65
   605  00FDDE  41                 	db	65
   606  00FDDF  3E                 	db	62
   607  00FDE0  7F                 	db	127
   608  00FDE1  49                 	db	73
   609  00FDE2  49                 	db	73
   610  00FDE3  49                 	db	73
   611  00FDE4  41                 	db	65
   612  00FDE5  7F                 	db	127
   613  00FDE6  09                 	db	9
   614  00FDE7  09                 	db	9
   615  00FDE8  09                 	db	9
   616  00FDE9  01                 	db	1
   617  00FDEA  3E                 	db	62
   618  00FDEB  41                 	db	65
   619  00FDEC  41                 	db	65
   620  00FDED  51                 	db	81
   621  00FDEE  73                 	db	115
   622  00FDEF  7F                 	db	127
   623  00FDF0  08                 	db	8
   624  00FDF1  08                 	db	8
   625  00FDF2  08                 	db	8
   626  00FDF3  7F                 	db	127
   627  00FDF4  00                 	db	0
   628  00FDF5  41                 	db	65
   629  00FDF6  7F                 	db	127
   630  00FDF7  41                 	db	65
   631  00FDF8  00                 	db	0
   632  00FDF9  20                 	db	32
   633  00FDFA  40                 	db	64
   634  00FDFB  41                 	db	65
   635  00FDFC  3F                 	db	63
   636  00FDFD  01                 	db	1
   637  00FDFE  7F                 	db	127
   638  00FDFF  08                 	db	8
   639  00FE00  14                 	db	20
   640  00FE01  22                 	db	34
   641  00FE02  41                 	db	65
   642  00FE03  7F                 	db	127
   643  00FE04  40                 	db	64
   644  00FE05  40                 	db	64
   645  00FE06  40                 	db	64
   646  00FE07  40                 	db	64
   647  00FE08  7F                 	db	127
   648  00FE09  02                 	db	2
   649  00FE0A  1C                 	db	28
   650  00FE0B  02                 	db	2
   651  00FE0C  7F                 	db	127
   652  00FE0D  7F                 	db	127
   653  00FE0E  04                 	db	4
   654  00FE0F  08                 	db	8
   655  00FE10  10                 	db	16
   656  00FE11  7F                 	db	127
   657  00FE12  3E                 	db	62
   658  00FE13  41                 	db	65
   659  00FE14  41                 	db	65
   660  00FE15  41                 	db	65
   661  00FE16  3E                 	db	62
   662  00FE17  7F                 	db	127
   663  00FE18  09                 	db	9
   664  00FE19  09                 	db	9
   665  00FE1A  09                 	db	9
   666  00FE1B  06                 	db	6
   667  00FE1C  3E                 	db	62
   668  00FE1D  41                 	db	65
   669  00FE1E  51                 	db	81
   670  00FE1F  21                 	db	33
   671  00FE20  5E                 	db	94
   672  00FE21  7F                 	db	127
   673  00FE22  09                 	db	9
   674  00FE23  19                 	db	25
   675  00FE24  29                 	db	41
   676  00FE25  46                 	db	70
   677  00FE26                     __end_of_font:
   678                           	opt stack 0
   679  00FE26                     _font2:
   680                           	opt stack 0
   681  00FE26  26                 	db	38
   682  00FE27  49                 	db	73
   683  00FE28  49                 	db	73
   684  00FE29  49                 	db	73
   685  00FE2A  32                 	db	50
   686  00FE2B  03                 	db	3
   687  00FE2C  01                 	db	1
   688  00FE2D  7F                 	db	127
   689  00FE2E  01                 	db	1
   690  00FE2F  03                 	db	3
   691  00FE30  3F                 	db	63
   692  00FE31  40                 	db	64
   693  00FE32  40                 	db	64
   694  00FE33  40                 	db	64
   695  00FE34  3F                 	db	63
   696  00FE35  1F                 	db	31
   697  00FE36  20                 	db	32
   698  00FE37  40                 	db	64
   699  00FE38  20                 	db	32
   700  00FE39  1F                 	db	31
   701  00FE3A  3F                 	db	63
   702  00FE3B  40                 	db	64
   703  00FE3C  38                 	db	56
   704  00FE3D  40                 	db	64
   705  00FE3E  3F                 	db	63
   706  00FE3F  63                 	db	99
   707  00FE40  14                 	db	20
   708  00FE41  08                 	db	8
   709  00FE42  14                 	db	20
   710  00FE43  63                 	db	99
   711  00FE44  03                 	db	3
   712  00FE45  04                 	db	4
   713  00FE46  78                 	db	120
   714  00FE47  04                 	db	4
   715  00FE48  03                 	db	3
   716  00FE49  61                 	db	97
   717  00FE4A  59                 	db	89
   718  00FE4B  49                 	db	73
   719  00FE4C  4D                 	db	77
   720  00FE4D  43                 	db	67
   721  00FE4E  00                 	db	0
   722  00FE4F  7F                 	db	127
   723  00FE50  41                 	db	65
   724  00FE51  41                 	db	65
   725  00FE52  41                 	db	65
   726  00FE53  02                 	db	2
   727  00FE54  04                 	db	4
   728  00FE55  08                 	db	8
   729  00FE56  10                 	db	16
   730  00FE57  20                 	db	32
   731  00FE58  00                 	db	0
   732  00FE59  41                 	db	65
   733  00FE5A  41                 	db	65
   734  00FE5B  41                 	db	65
   735  00FE5C  7F                 	db	127
   736  00FE5D  04                 	db	4
   737  00FE5E  02                 	db	2
   738  00FE5F  01                 	db	1
   739  00FE60  02                 	db	2
   740  00FE61  04                 	db	4
   741  00FE62  40                 	db	64
   742  00FE63  40                 	db	64
   743  00FE64  40                 	db	64
   744  00FE65  40                 	db	64
   745  00FE66  40                 	db	64
   746  00FE67  00                 	db	0
   747  00FE68  03                 	db	3
   748  00FE69  07                 	db	7
   749  00FE6A  08                 	db	8
   750  00FE6B  00                 	db	0
   751  00FE6C  20                 	db	32
   752  00FE6D  54                 	db	84
   753  00FE6E  54                 	db	84
   754  00FE6F  78                 	db	120
   755  00FE70  40                 	db	64
   756  00FE71  7F                 	db	127
   757  00FE72  28                 	db	40
   758  00FE73  44                 	db	68
   759  00FE74  44                 	db	68
   760  00FE75  38                 	db	56
   761  00FE76  38                 	db	56
   762  00FE77  44                 	db	68
   763  00FE78  44                 	db	68
   764  00FE79  44                 	db	68
   765  00FE7A  28                 	db	40
   766  00FE7B  38                 	db	56
   767  00FE7C  44                 	db	68
   768  00FE7D  44                 	db	68
   769  00FE7E  28                 	db	40
   770  00FE7F  7F                 	db	127
   771  00FE80  38                 	db	56
   772  00FE81  54                 	db	84
   773  00FE82  54                 	db	84
   774  00FE83  54                 	db	84
   775  00FE84  18                 	db	24
   776  00FE85  00                 	db	0
   777  00FE86  08                 	db	8
   778  00FE87  7E                 	db	126
   779  00FE88  09                 	db	9
   780  00FE89  02                 	db	2
   781  00FE8A  18                 	db	24
   782  00FE8B  A4                 	db	164
   783  00FE8C  A4                 	db	164
   784  00FE8D  9C                 	db	156
   785  00FE8E  78                 	db	120
   786  00FE8F  7F                 	db	127
   787  00FE90  08                 	db	8
   788  00FE91  04                 	db	4
   789  00FE92  04                 	db	4
   790  00FE93  78                 	db	120
   791  00FE94  00                 	db	0
   792  00FE95  44                 	db	68
   793  00FE96  7D                 	db	125
   794  00FE97  40                 	db	64
   795  00FE98  00                 	db	0
   796  00FE99  20                 	db	32
   797  00FE9A  40                 	db	64
   798  00FE9B  40                 	db	64
   799  00FE9C  3D                 	db	61
   800  00FE9D  00                 	db	0
   801  00FE9E  7F                 	db	127
   802  00FE9F  10                 	db	16
   803  00FEA0  28                 	db	40
   804  00FEA1  44                 	db	68
   805  00FEA2  00                 	db	0
   806  00FEA3  00                 	db	0
   807  00FEA4  41                 	db	65
   808  00FEA5  7F                 	db	127
   809  00FEA6  40                 	db	64
   810  00FEA7  00                 	db	0
   811  00FEA8  7C                 	db	124
   812  00FEA9  04                 	db	4
   813  00FEAA  78                 	db	120
   814  00FEAB  04                 	db	4
   815  00FEAC  78                 	db	120
   816  00FEAD  7C                 	db	124
   817  00FEAE  08                 	db	8
   818  00FEAF  04                 	db	4
   819  00FEB0  04                 	db	4
   820  00FEB1  78                 	db	120
   821  00FEB2  38                 	db	56
   822  00FEB3  44                 	db	68
   823  00FEB4  44                 	db	68
   824  00FEB5  44                 	db	68
   825  00FEB6  38                 	db	56
   826  00FEB7  FC                 	db	252
   827  00FEB8  18                 	db	24
   828  00FEB9  24                 	db	36
   829  00FEBA  24                 	db	36
   830  00FEBB  18                 	db	24
   831  00FEBC  18                 	db	24
   832  00FEBD  24                 	db	36
   833  00FEBE  24                 	db	36
   834  00FEBF  18                 	db	24
   835  00FEC0  FC                 	db	252
   836  00FEC1  7C                 	db	124
   837  00FEC2  08                 	db	8
   838  00FEC3  04                 	db	4
   839  00FEC4  04                 	db	4
   840  00FEC5  08                 	db	8
   841  00FEC6  48                 	db	72
   842  00FEC7  54                 	db	84
   843  00FEC8  54                 	db	84
   844  00FEC9  54                 	db	84
   845  00FECA  24                 	db	36
   846  00FECB  04                 	db	4
   847  00FECC  04                 	db	4
   848  00FECD  3F                 	db	63
   849  00FECE  44                 	db	68
   850  00FECF  24                 	db	36
   851  00FED0  3C                 	db	60
   852  00FED1  40                 	db	64
   853  00FED2  40                 	db	64
   854  00FED3  20                 	db	32
   855  00FED4  7C                 	db	124
   856  00FED5  1C                 	db	28
   857  00FED6  20                 	db	32
   858  00FED7  40                 	db	64
   859  00FED8  20                 	db	32
   860  00FED9  1C                 	db	28
   861  00FEDA  3C                 	db	60
   862  00FEDB  40                 	db	64
   863  00FEDC  30                 	db	48
   864  00FEDD  40                 	db	64
   865  00FEDE  3C                 	db	60
   866  00FEDF  44                 	db	68
   867  00FEE0  28                 	db	40
   868  00FEE1  10                 	db	16
   869  00FEE2  28                 	db	40
   870  00FEE3  44                 	db	68
   871  00FEE4  4C                 	db	76
   872  00FEE5  90                 	db	144
   873  00FEE6  90                 	db	144
   874  00FEE7  90                 	db	144
   875  00FEE8  7C                 	db	124
   876  00FEE9  44                 	db	68
   877  00FEEA  64                 	db	100
   878  00FEEB  54                 	db	84
   879  00FEEC  4C                 	db	76
   880  00FEED  44                 	db	68
   881  00FEEE  00                 	db	0
   882  00FEEF  08                 	db	8
   883  00FEF0  36                 	db	54
   884  00FEF1  41                 	db	65
   885  00FEF2  00                 	db	0
   886  00FEF3  00                 	db	0
   887  00FEF4  00                 	db	0
   888  00FEF5  77                 	db	119
   889  00FEF6  00                 	db	0
   890  00FEF7  00                 	db	0
   891  00FEF8  00                 	db	0
   892  00FEF9  41                 	db	65
   893  00FEFA  36                 	db	54
   894  00FEFB  08                 	db	8
   895  00FEFC  00                 	db	0
   896  00FEFD  02                 	db	2
   897  00FEFE  01                 	db	1
   898  00FEFF  02                 	db	2
   899  00FF00  04                 	db	4
   900  00FF01  02                 	db	2
   901  00FF02                     __end_of_font2:
   902                           	opt stack 0
   903  00FF02                     _dpowers:
   904                           	opt stack 0
   905  00FF02  0001               	dw	1
   906  00FF04  000A               	dw	10
   907  00FF06  0064               	dw	100
   908  00FF08  03E8               	dw	1000
   909  00FF0A  2710               	dw	10000
   910  00FF0C                     __end_of_dpowers:
   911                           	opt stack 0
   912  00FF0C                     _hexpowers:
   913                           	opt stack 0
   914  00FF0C  0001               	dw	1
   915  00FF0E  0010               	dw	16
   916  00FF10  0100               	dw	256
   917  00FF12  1000               	dw	4096
   918  00FF14                     __end_of_hexpowers:
   919                           	opt stack 0
   920  0000                     _ADCON1	set	4033
   921  0000                     _CCP1CON	set	4029
   922  0000                     _CCP2CON	set	4026
   923  0000                     _CCPR1L	set	4030
   924  0000                     _CCPR2L	set	4027
   925  0000                     _INTCON2bits	set	4081
   926  0000                     _INTCONbits	set	4082
   927  0000                     _OSCCON	set	4051
   928  0000                     _PIE1bits	set	3997
   929  0000                     _PIR1bits	set	3998
   930  0000                     _PORTA	set	3968
   931  0000                     _PORTAbits	set	3968
   932  0000                     _PORTBbits	set	3969
   933  0000                     _PORTD	set	3971
   934  0000                     _PORTDbits	set	3971
   935  0000                     _PORTEbits	set	3972
   936  0000                     _PR2	set	4043
   937  0000                     _RCSTA	set	4011
   938  0000                     _RCSTAbits	set	4011
   939  0000                     _SPBRG	set	4015
   940  0000                     _SPBRGH	set	4016
   941  0000                     _SSPBUF	set	4041
   942  0000                     _SSPCON1	set	4038
   943  0000                     _SSPSTAT	set	4039
   944  0000                     _SSPSTATbits	set	4039
   945  0000                     _T0CON	set	4053
   946  0000                     _T0CONbits	set	4053
   947  0000                     _T1CON	set	4045
   948  0000                     _T1CONbits	set	4045
   949  0000                     _T2CON	set	4042
   950  0000                     _T3CON	set	4017
   951  0000                     _TMR0H	set	4055
   952  0000                     _TMR0L	set	4054
   953  0000                     _TMR1H	set	4047
   954  0000                     _TMR1L	set	4046
   955  0000                     _TMR3L	set	4018
   956  0000                     _TRISA	set	3986
   957  0000                     _TRISB	set	3987
   958  0000                     _TRISBbits	set	3987
   959  0000                     _TRISC	set	3988
   960  0000                     _TRISCbits	set	3988
   961  0000                     _TRISD	set	3989
   962  0000                     _TRISE	set	3990
   963  0000                     _TXREG	set	4013
   964  0000                     _TXSTA	set	4012
   965  0000                     _TXSTAbits	set	4012
   966  0000                     _RBPU	set	32655
   967  0000                     _TRMT	set	32097
   968  00FF14                     STR_12:
   969  00FF14  25                 	db	37
   970  00FF15  30                 	db	48	;'0'
   971  00FF16  32                 	db	50	;'2'
   972  00FF17  78                 	db	120	;'x'
   973  00FF18  3A                 	db	58	;':'
   974  00FF19  25                 	db	37
   975  00FF1A  30                 	db	48	;'0'
   976  00FF1B  32                 	db	50	;'2'
   977  00FF1C  78                 	db	120	;'x'
   978  00FF1D  3A                 	db	58	;':'
   979  00FF1E  25                 	db	37
   980  00FF1F  30                 	db	48	;'0'
   981  00FF20  32                 	db	50	;'2'
   982  00FF21  78                 	db	120	;'x'
   983  00FF22  20                 	db	32
   984  00FF23  25                 	db	37
   985  00FF24  30                 	db	48	;'0'
   986  00FF25  32                 	db	50	;'2'
   987  00FF26  78                 	db	120	;'x'
   988  00FF27  2F                 	db	47
   989  00FF28  25                 	db	37
   990  00FF29  30                 	db	48	;'0'
   991  00FF2A  32                 	db	50	;'2'
   992  00FF2B  78                 	db	120	;'x'
   993  00FF2C  2F                 	db	47
   994  00FF2D  25                 	db	37
   995  00FF2E  30                 	db	48	;'0'
   996  00FF2F  32                 	db	50	;'2'
   997  00FF30  78                 	db	120	;'x'
   998  00FF31  00                 	db	0
   999  00FF32                     STR_18:
  1000  00FF32  0A                 	db	10
  1001  00FF33  54                 	db	84	;'T'
  1002  00FF34  69                 	db	105	;'i'
  1003  00FF35  6D                 	db	109	;'m'
  1004  00FF36  65                 	db	101	;'e'
  1005  00FF37  20                 	db	32
  1006  00FF38  68                 	db	104	;'h'
  1007  00FF39  61                 	db	97	;'a'
  1008  00FF3A  73                 	db	115	;'s'
  1009  00FF3B  20                 	db	32
  1010  00FF3C  62                 	db	98	;'b'
  1011  00FF3D  65                 	db	101	;'e'
  1012  00FF3E  65                 	db	101	;'e'
  1013  00FF3F  6E                 	db	110	;'n'
  1014  00FF40  20                 	db	32
  1015  00FF41  72                 	db	114	;'r'
  1016  00FF42  65                 	db	101	;'e'
  1017  00FF43  73                 	db	115	;'s'
  1018  00FF44  65                 	db	101	;'e'
  1019  00FF45  74                 	db	116	;'t'
  1020  00FF46  0D                 	db	13
  1021  00FF47  0A                 	db	10
  1022  00FF48  0A                 	db	10
  1023  00FF49  00                 	db	0
  1024  00FF4A                     STR_16:
  1025  00FF4A  43                 	db	67	;'C'
  1026  00FF4B  61                 	db	97	;'a'
  1027  00FF4C  6E                 	db	110	;'n'
  1028  00FF4D  6E                 	db	110	;'n'
  1029  00FF4E  6F                 	db	111	;'o'
  1030  00FF4F  74                 	db	116	;'t'
  1031  00FF50  20                 	db	32
  1032  00FF51  66                 	db	102	;'f'
  1033  00FF52  69                 	db	105	;'i'
  1034  00FF53  6E                 	db	110	;'n'
  1035  00FF54  64                 	db	100	;'d'
  1036  00FF55  20                 	db	32
  1037  00FF56  62                 	db	98	;'b'
  1038  00FF57  75                 	db	117	;'u'
  1039  00FF58  74                 	db	116	;'t'
  1040  00FF59  74                 	db	116	;'t'
  1041  00FF5A  6F                 	db	111	;'o'
  1042  00FF5B  6E                 	db	110	;'n'
  1043  00FF5C  20                 	db	32
  1044  00FF5D  0D                 	db	13
  1045  00FF5E  0A                 	db	10
  1046  00FF5F  00                 	db	0
  1047  00FF60                     STR_1:
  1048  00FF60  45                 	db	69	;'E'
  1049  00FF61  43                 	db	67	;'C'
  1050  00FF62  45                 	db	69	;'E'
  1051  00FF63  33                 	db	51	;'3'
  1052  00FF64  33                 	db	51	;'3'
  1053  00FF65  30                 	db	48	;'0'
  1054  00FF66  31                 	db	49	;'1'
  1055  00FF67  4C                 	db	76	;'L'
  1056  00FF68  20                 	db	32
  1057  00FF69  53                 	db	83	;'S'
  1058  00FF6A  70                 	db	112	;'p'
  1059  00FF6B  72                 	db	114	;'r'
  1060  00FF6C  69                 	db	105	;'i'
  1061  00FF6D  6E                 	db	110	;'n'
  1062  00FF6E  67                 	db	103	;'g'
  1063  00FF6F  20                 	db	32
  1064  00FF70  32                 	db	50	;'2'
  1065  00FF71  31                 	db	49	;'1'
  1066  00FF72  2D                 	db	45
  1067  00FF73  53                 	db	83	;'S'
  1068  00FF74  31                 	db	49	;'1'
  1069  00FF75  00                 	db	0
  1070  00FF76                     STR_13:
  1071  00FF76  20                 	db	32
  1072  00FF77  54                 	db	84	;'T'
  1073  00FF78  65                 	db	101	;'e'
  1074  00FF79  6D                 	db	109	;'m'
  1075  00FF7A  70                 	db	112	;'p'
  1076  00FF7B  20                 	db	32
  1077  00FF7C  3D                 	db	61	;'='
  1078  00FF7D  20                 	db	32
  1079  00FF7E  25                 	db	37
  1080  00FF7F  64                 	db	100	;'d'
  1081  00FF80  20                 	db	32
  1082  00FF81  43                 	db	67	;'C'
  1083  00FF82  20                 	db	32
  1084  00FF83  3D                 	db	61	;'='
  1085  00FF84  20                 	db	32
  1086  00FF85  25                 	db	37
  1087  00FF86  64                 	db	100	;'d'
  1088  00FF87  20                 	db	32
  1089  00FF88  46                 	db	70	;'F'
  1090  00FF89  20                 	db	32
  1091  00FF8A  00                 	db	0
  1092  00FF8B                     STR_14:
  1093  00FF8B  52                 	db	82	;'R'
  1094  00FF8C  50                 	db	80	;'P'
  1095  00FF8D  4D                 	db	77	;'M'
  1096  00FF8E  20                 	db	32
  1097  00FF8F  3D                 	db	61	;'='
  1098  00FF90  20                 	db	32
  1099  00FF91  25                 	db	37
  1100  00FF92  64                 	db	100	;'d'
  1101  00FF93  20                 	db	32
  1102  00FF94  20                 	db	32
  1103  00FF95  64                 	db	100	;'d'
  1104  00FF96  63                 	db	99	;'c'
  1105  00FF97  20                 	db	32
  1106  00FF98  3D                 	db	61	;'='
  1107  00FF99  20                 	db	32
  1108  00FF9A  25                 	db	37
  1109  00FF9B  64                 	db	100	;'d'
  1110  00FF9C  0D                 	db	13
  1111  00FF9D  0A                 	db	10
  1112  00FF9E  00                 	db	0
  1113  00FF9F                     STR_19:
  1114  00FF9F  30                 	db	48	;'0'
  1115  00FFA0  31                 	db	49	;'1'
  1116  00FFA1  32                 	db	50	;'2'
  1117  00FFA2  33                 	db	51	;'3'
  1118  00FFA3  34                 	db	52	;'4'
  1119  00FFA4  35                 	db	53	;'5'
  1120  00FFA5  36                 	db	54	;'6'
  1121  00FFA6  37                 	db	55	;'7'
  1122  00FFA7  38                 	db	56	;'8'
  1123  00FFA8  39                 	db	57	;'9'
  1124  00FFA9  61                 	db	97	;'a'
  1125  00FFAA  62                 	db	98	;'b'
  1126  00FFAB  63                 	db	99	;'c'
  1127  00FFAC  64                 	db	100	;'d'
  1128  00FFAD  65                 	db	101	;'e'
  1129  00FFAE  66                 	db	102	;'f'
  1130  00FFAF  00                 	db	0
  1131  00FFB0                     STR_15:
  1132  00FFB0  4E                 	db	78	;'N'
  1133  00FFB1  45                 	db	69	;'E'
  1134  00FFB2  43                 	db	67	;'C'
  1135  00FFB3  5F                 	db	95	;'_'
  1136  00FFB4  43                 	db	67	;'C'
  1137  00FFB5  6F                 	db	111	;'o'
  1138  00FFB6  64                 	db	100	;'d'
  1139  00FFB7  65                 	db	101	;'e'
  1140  00FFB8  20                 	db	32
  1141  00FFB9  3D                 	db	61	;'='
  1142  00FFBA  20                 	db	32
  1143  00FFBB  25                 	db	37
  1144  00FFBC  78                 	db	120	;'x'
  1145  00FFBD  0D                 	db	13
  1146  00FFBE  0A                 	db	10
  1147  00FFBF  00                 	db	0
  1148  00FFC0                     STR_17:
  1149  00FFC0  62                 	db	98	;'b'
  1150  00FFC1  75                 	db	117	;'u'
  1151  00FFC2  74                 	db	116	;'t'
  1152  00FFC3  74                 	db	116	;'t'
  1153  00FFC4  6F                 	db	111	;'o'
  1154  00FFC5  6E                 	db	110	;'n'
  1155  00FFC6  20                 	db	32
  1156  00FFC7  3D                 	db	61	;'='
  1157  00FFC8  20                 	db	32
  1158  00FFC9  25                 	db	37
  1159  00FFCA  64                 	db	100	;'d'
  1160  00FFCB  20                 	db	32
  1161  00FFCC  0D                 	db	13
  1162  00FFCD  0A                 	db	10
  1163  00FFCE  00                 	db	0
  1164  00FFCF                     STR_2:
  1165  00FFCF  54                 	db	84	;'T'
  1166  00FFD0  65                 	db	101	;'e'
  1167  00FFD1  6D                 	db	109	;'m'
  1168  00FFD2  70                 	db	112	;'p'
  1169  00FFD3  65                 	db	101	;'e'
  1170  00FFD4  72                 	db	114	;'r'
  1171  00FFD5  61                 	db	97	;'a'
  1172  00FFD6  74                 	db	116	;'t'
  1173  00FFD7  75                 	db	117	;'u'
  1174  00FFD8  72                 	db	114	;'r'
  1175  00FFD9  65                 	db	101	;'e'
  1176  00FFDA  3A                 	db	58	;':'
  1177  00FFDB  00                 	db	0
  1178  00FFDC                     STR_7:
  1179  00FFDC  20                 	db	32
  1180  00FFDD  20                 	db	32
  1181  00FFDE  46                 	db	70	;'F'
  1182  00FFDF  41                 	db	65	;'A'
  1183  00FFE0  4E                 	db	78	;'N'
  1184  00FFE1  00                 	db	0
  1185  00FFE2                     STR_5:
  1186  00FFE2  54                 	db	84	;'T'
  1187  00FFE3  69                 	db	105	;'i'
  1188  00FFE4  6D                 	db	109	;'m'
  1189  00FFE5  65                 	db	101	;'e'
  1190  00FFE6  00                 	db	0
  1191  00FFE7                     STR_6:
  1192  00FFE7  44                 	db	68	;'D'
  1193  00FFE8  61                 	db	97	;'a'
  1194  00FFE9  74                 	db	116	;'t'
  1195  00FFEA  65                 	db	101	;'e'
  1196  00FFEB  00                 	db	0
  1197  00FFEC                     STR_10:
  1198  00FFEC  4F                 	db	79	;'O'
  1199  00FFED  4E                 	db	78	;'N'
  1200  00FFEE  20                 	db	32
  1201  00FFEF  00                 	db	0
  1202  00FFF0                     STR_11:
  1203  00FFF0  4F                 	db	79	;'O'
  1204  00FFF1  46                 	db	70	;'F'
  1205  00FFF2  46                 	db	70	;'F'
  1206  00FFF3  00                 	db	0
  1207  00FFF4                     STR_9:
  1208  00FFF4  52                 	db	82	;'R'
  1209  00FFF5  50                 	db	80	;'P'
  1210  00FFF6  4D                 	db	77	;'M'
  1211  00FFF7  00                 	db	0
  1212  00FFF8                     STR_3:
  1213  00FFF8  43                 	db	67	;'C'
  1214  00FFF9  2F                 	db	47
  1215  00FFFA  00                 	db	0
  1216  00FFFB                     STR_8:
  1217  00FFFB  44                 	db	68	;'D'
  1218  00FFFC  43                 	db	67	;'C'
  1219  00FFFD  00                 	db	0
  1220  0000                     
  1221                           ; #config settings
  1222  00FFFE  00                 	db	0	; dummy byte at the end
  1223  0000                     
  1224                           	psect	cinit
  1225  001B82                     __pcinit:
  1226                           	opt stack 0
  1227  001B82                     start_initialization:
  1228                           	opt stack 0
  1229  001B82                     __initialization:
  1230                           	opt stack 0
  1231                           
  1232                           ; Clear objects allocated to BANK0 (13 bytes)
  1233  001B82  EE00  F0E6         	lfsr	0,__pbssBANK0
  1234  001B86  0E0D               	movlw	13
  1235  001B88                     clear_0:
  1236  001B88  6AEE               	clrf	postinc0,c
  1237  001B8A  06E8               	decf	wreg,f,c
  1238  001B8C  E1FD               	bnz	clear_0
  1239                           
  1240                           ; Clear objects allocated to COMRAM (40 bytes)
  1241  001B8E  EE00  F046         	lfsr	0,__pbssCOMRAM
  1242  001B92  0E28               	movlw	40
  1243  001B94                     clear_1:
  1244  001B94  6AEE               	clrf	postinc0,c
  1245  001B96  06E8               	decf	wreg,f,c
  1246  001B98  E1FD               	bnz	clear_1
  1247                           
  1248                           ; Initialize objects allocated to BANK1 (178 bytes)
  1249                           ; load TBLPTR registers with __pidataBANK1
  1250  001B9A  0EB4               	movlw	low __pidataBANK1
  1251  001B9C  6EF6               	movwf	tblptrl,c
  1252  001B9E  0E18               	movlw	high __pidataBANK1
  1253  001BA0  6EF7               	movwf	tblptrh,c
  1254  001BA2  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1255  001BA4  6EF8               	movwf	tblptru,c
  1256  001BA6  EE01  F000         	lfsr	0,__pdataBANK1
  1257  001BAA  EE10 F0B2          	lfsr	1,178
  1258  001BAE                     copy_data0:
  1259  001BAE  0009               	tblrd		*+
  1260  001BB0  CFF5 FFEE          	movff	tablat,postinc0
  1261  001BB4  50E5               	movf	postdec1,w,c
  1262  001BB6  50E1               	movf	fsr1l,w,c
  1263  001BB8  E1FA               	bnz	copy_data0
  1264                           
  1265                           ; Initialize objects allocated to BANK0 (102 bytes)
  1266                           ; load TBLPTR registers with __pidataBANK0
  1267  001BBA  0EE6               	movlw	low __pidataBANK0
  1268  001BBC  6EF6               	movwf	tblptrl,c
  1269  001BBE  0E1C               	movlw	high __pidataBANK0
  1270  001BC0  6EF7               	movwf	tblptrh,c
  1271  001BC2  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1272  001BC4  6EF8               	movwf	tblptru,c
  1273  001BC6  EE00  F080         	lfsr	0,__pdataBANK0
  1274  001BCA  EE10 F066          	lfsr	1,102
  1275  001BCE                     copy_data1:
  1276  001BCE  0009               	tblrd		*+
  1277  001BD0  CFF5 FFEE          	movff	tablat,postinc0
  1278  001BD4  50E5               	movf	postdec1,w,c
  1279  001BD6  50E1               	movf	fsr1l,w,c
  1280  001BD8  E1FA               	bnz	copy_data1
  1281                           
  1282                           ; Initialize objects allocated to COMRAM (2 bytes)
  1283                           ; load TBLPTR registers with __pidataCOMRAM
  1284  001BDA  0E08               	movlw	low __pidataCOMRAM
  1285  001BDC  6EF6               	movwf	tblptrl,c
  1286  001BDE  0E25               	movlw	high __pidataCOMRAM
  1287  001BE0  6EF7               	movwf	tblptrh,c
  1288  001BE2  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1289  001BE4  6EF8               	movwf	tblptru,c
  1290  001BE6  0009               	tblrd		*+	;fetch initializer
  1291  001BE8  CFF5 F06E          	movff	tablat,__pdataCOMRAM
  1292  001BEC  0009               	tblrd		*+	;fetch initializer
  1293  001BEE  CFF5 F06F          	movff	tablat,__pdataCOMRAM+1
  1294  001BF2                     end_of_initialization:
  1295                           	opt stack 0
  1296  001BF2                     __end_of__initialization:
  1297                           	opt stack 0
  1298  001BF2  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1299  001BF4  6EF8               	movwf	tblptru,c
  1300  001BF6  0100               	movlb	0
  1301  001BF8  EF07  F005         	goto	_main	;jump to C main() function
  1302                           tblptru	equ	0xFF8
  1303                           tblptrh	equ	0xFF7
  1304                           tblptrl	equ	0xFF6
  1305                           tablat	equ	0xFF5
  1306                           postinc0	equ	0xFEE
  1307                           wreg	equ	0xFE8
  1308                           postdec1	equ	0xFE5
  1309                           fsr1l	equ	0xFE1
  1310                           
  1311                           	psect	bssCOMRAM
  1312  000046                     __pbssCOMRAM:
  1313                           	opt stack 0
  1314  000046                     _DS1621_tempC:
  1315                           	opt stack 0
  1316  000046                     	ds	2
  1317  000048                     _DS1621_tempF:
  1318                           	opt stack 0
  1319  000048                     	ds	2
  1320  00004A                     _Time_Elapsed:
  1321                           	opt stack 0
  1322  00004A                     	ds	2
  1323  00004C                     _rpm:
  1324                           	opt stack 0
  1325  00004C                     	ds	2
  1326  00004E                     _txt:
  1327                           	opt stack 0
  1328  00004E                     	ds	2
  1329  000050                     _FAN:
  1330                           	opt stack 0
  1331  000050                     	ds	1
  1332  000051                     _MASKA:
  1333                           	opt stack 0
  1334  000051                     	ds	1
  1335  000052                     _MASKD:
  1336                           	opt stack 0
  1337  000052                     	ds	1
  1338  000053                     _Nec_code1:
  1339                           	opt stack 0
  1340  000053                     	ds	1
  1341  000054                     _Nec_state:
  1342                           	opt stack 0
  1343  000054                     	ds	1
  1344  000055                     __tft_type:
  1345                           	opt stack 0
  1346  000055                     	ds	1
  1347  000056                     _alarm_date:
  1348                           	opt stack 0
  1349  000056                     	ds	1
  1350  000057                     _alarm_hour:
  1351                           	opt stack 0
  1352  000057                     	ds	1
  1353  000058                     _alarm_minute:
  1354                           	opt stack 0
  1355  000058                     	ds	1
  1356  000059                     _alarm_second:
  1357                           	opt stack 0
  1358  000059                     	ds	1
  1359  00005A                     _bit_count:
  1360                           	opt stack 0
  1361  00005A                     	ds	1
  1362  00005B                     _colstart:
  1363                           	opt stack 0
  1364  00005B                     	ds	1
  1365  00005C                     _day:
  1366                           	opt stack 0
  1367  00005C                     	ds	1
  1368  00005D                     _dow:
  1369                           	opt stack 0
  1370  00005D                     	ds	1
  1371  00005E                     _duty_cycle:
  1372                           	opt stack 0
  1373  00005E                     	ds	1
  1374  00005F                     _found:
  1375                           	opt stack 0
  1376  00005F                     	ds	1
  1377  000060                     _hour:
  1378                           	opt stack 0
  1379  000060                     	ds	1
  1380  000061                     _minute:
  1381                           	opt stack 0
  1382  000061                     	ds	1
  1383  000062                     _month:
  1384                           	opt stack 0
  1385  000062                     	ds	1
  1386  000063                     _rowstart:
  1387                           	opt stack 0
  1388  000063                     	ds	1
  1389  000064                     _second:
  1390                           	opt stack 0
  1391  000064                     	ds	1
  1392  000065                     _setup_alarm_minute:
  1393                           	opt stack 0
  1394  000065                     	ds	1
  1395  000066                     _setup_alarm_second:
  1396                           	opt stack 0
  1397  000066                     	ds	1
  1398  000067                     _setup_day:
  1399                           	opt stack 0
  1400  000067                     	ds	1
  1401  000068                     _setup_hour:
  1402                           	opt stack 0
  1403  000068                     	ds	1
  1404  000069                     _setup_minute:
  1405                           	opt stack 0
  1406  000069                     	ds	1
  1407  00006A                     _setup_month:
  1408                           	opt stack 0
  1409  00006A                     	ds	1
  1410  00006B                     _setup_second:
  1411                           	opt stack 0
  1412  00006B                     	ds	1
  1413  00006C                     _setup_year:
  1414                           	opt stack 0
  1415  00006C                     	ds	1
  1416  00006D                     _year:
  1417                           	opt stack 0
  1418  00006D                     	ds	1
  1419                           tblptru	equ	0xFF8
  1420                           tblptrh	equ	0xFF7
  1421                           tblptrl	equ	0xFF6
  1422                           tablat	equ	0xFF5
  1423                           postinc0	equ	0xFEE
  1424                           wreg	equ	0xFE8
  1425                           postdec1	equ	0xFE5
  1426                           fsr1l	equ	0xFE1
  1427                           
  1428                           	psect	dataCOMRAM
  1429  00006E                     __pdataCOMRAM:
  1430                           	opt stack 0
  1431  00006E                     _tempSecond:
  1432                           	opt stack 0
  1433  00006E                     	ds	1
  1434  00006F                     _wrap:
  1435                           	opt stack 0
  1436  00006F                     	ds	1
  1437                           tblptru	equ	0xFF8
  1438                           tblptrh	equ	0xFF7
  1439                           tblptrl	equ	0xFF6
  1440                           tablat	equ	0xFF5
  1441                           postinc0	equ	0xFEE
  1442                           wreg	equ	0xFE8
  1443                           postdec1	equ	0xFE5
  1444                           fsr1l	equ	0xFE1
  1445                           
  1446                           	psect	bssBANK0
  1447  0000E6                     __pbssBANK0:
  1448                           	opt stack 0
  1449  0000E6                     _Nec_code:
  1450                           	opt stack 0
  1451  0000E6                     	ds	4
  1452  0000EA                     _ALARMEN:
  1453                           	opt stack 0
  1454  0000EA                     	ds	2
  1455  0000EC                     _nbr:
  1456                           	opt stack 0
  1457  0000EC                     	ds	2
  1458  0000EE                     _nec_ok:
  1459                           	opt stack 0
  1460  0000EE                     	ds	2
  1461  0000F0                     _rps:
  1462                           	opt stack 0
  1463  0000F0                     	ds	2
  1464  0000F2                     _setup_alarm_hour:
  1465                           	opt stack 0
  1466  0000F2                     	ds	1
  1467                           tblptru	equ	0xFF8
  1468                           tblptrh	equ	0xFF7
  1469                           tblptrl	equ	0xFF6
  1470                           tablat	equ	0xFF5
  1471                           postinc0	equ	0xFEE
  1472                           wreg	equ	0xFE8
  1473                           postdec1	equ	0xFE5
  1474                           fsr1l	equ	0xFE1
  1475                           
  1476                           	psect	dataBANK0
  1477  000080                     __pdataBANK0:
  1478                           	opt stack 0
  1479  000080                     _Display_D1:
  1480                           	opt stack 0
  1481  000080                     	ds	11
  1482  00008B                     _alarm_time:
  1483                           	opt stack 0
  1484  00008B                     	ds	9
  1485  000094                     _setup_alarm_time:
  1486                           	opt stack 0
  1487  000094                     	ds	9
  1488  00009D                     _setup_date:
  1489                           	opt stack 0
  1490  00009D                     	ds	9
  1491  0000A6                     _setup_time:
  1492                           	opt stack 0
  1493  0000A6                     	ds	9
  1494  0000AF                     _setup_fan_text:
  1495                           	opt stack 0
  1496  0000AF                     	ds	5
  1497  0000B4                     _Alarm_SW_Txt:
  1498                           	opt stack 0
  1499  0000B4                     	ds	4
  1500  0000B8                     _Display_D2:
  1501                           	opt stack 0
  1502  0000B8                     	ds	4
  1503  0000BC                     _RTC_ALARM_Txt:
  1504                           	opt stack 0
  1505  0000BC                     	ds	2
  1506  0000BE                     _setup_fan_temp:
  1507                           	opt stack 0
  1508  0000BE                     	ds	1
  1509  0000BF                     _date:
  1510                           	opt stack 0
  1511  0000BF                     	ds	9
  1512  0000C8                     _time:
  1513                           	opt stack 0
  1514  0000C8                     	ds	9
  1515  0000D1                     _RPM_Txt:
  1516                           	opt stack 0
  1517  0000D1                     	ds	5
  1518  0000D6                     _DC_Txt:
  1519                           	opt stack 0
  1520  0000D6                     	ds	4
  1521  0000DA                     _Fan_SW_Txt:
  1522                           	opt stack 0
  1523  0000DA                     	ds	4
  1524  0000DE                     _tempC:
  1525                           	opt stack 0
  1526  0000DE                     	ds	4
  1527  0000E2                     _tempF:
  1528                           	opt stack 0
  1529  0000E2                     	ds	4
  1530                           tblptru	equ	0xFF8
  1531                           tblptrh	equ	0xFF7
  1532                           tblptrl	equ	0xFF6
  1533                           tablat	equ	0xFF5
  1534                           postinc0	equ	0xFEE
  1535                           wreg	equ	0xFE8
  1536                           postdec1	equ	0xFE5
  1537                           fsr1l	equ	0xFE1
  1538                           
  1539                           	psect	dataBANK1
  1540  000100                     __pdataBANK1:
  1541                           	opt stack 0
  1542  000100                     _txt1:
  1543                           	opt stack 0
  1544  000100                     	ds	84
  1545  000154                     _color:
  1546                           	opt stack 0
  1547  000154                     	ds	42
  1548  00017E                     _array1:
  1549                           	opt stack 0
  1550  00017E                     	ds	21
  1551  000193                     _buffer:
  1552                           	opt stack 0
  1553  000193                     	ds	31
  1554                           tblptru	equ	0xFF8
  1555                           tblptrh	equ	0xFF7
  1556                           tblptrl	equ	0xFF6
  1557                           tablat	equ	0xFF5
  1558                           postinc0	equ	0xFEE
  1559                           wreg	equ	0xFE8
  1560                           postdec1	equ	0xFE5
  1561                           fsr1l	equ	0xFE1
  1562                           
  1563                           	psect	cstackBANK1
  1564  0001B2                     __pcstackBANK1:
  1565                           	opt stack 0
  1566  0001B2                     main@U:
  1567                           	opt stack 0
  1568                           
  1569                           ; 1 bytes @ 0x0
  1570  0001B2                     	ds	1
  1571  0001B3                     main@j:
  1572                           	opt stack 0
  1573                           
  1574                           ; 2 bytes @ 0x1
  1575  0001B3                     	ds	2
  1576                           tblptru	equ	0xFF8
  1577                           tblptrh	equ	0xFF7
  1578                           tblptrl	equ	0xFF6
  1579                           tablat	equ	0xFF5
  1580                           postinc0	equ	0xFEE
  1581                           wreg	equ	0xFE8
  1582                           postdec1	equ	0xFE5
  1583                           fsr1l	equ	0xFE1
  1584                           
  1585                           	psect	cstackBANK0
  1586  0000F3                     __pcstackBANK0:
  1587                           	opt stack 0
  1588  0000F3                     drawtext@x:
  1589                           	opt stack 0
  1590                           
  1591                           ; 1 bytes @ 0x0
  1592  0000F3                     	ds	1
  1593  0000F4                     drawtext@textsize:
  1594                           	opt stack 0
  1595                           
  1596                           ; 2 bytes @ 0x1
  1597  0000F4                     	ds	2
  1598  0000F6                     drawtext@i:
  1599                           	opt stack 0
  1600                           
  1601                           ; 2 bytes @ 0x3
  1602  0000F6                     	ds	2
  1603  0000F8                     drawtext@cursor_y:
  1604                           	opt stack 0
  1605                           
  1606                           ; 1 bytes @ 0x5
  1607  0000F8                     	ds	1
  1608  0000F9                     drawtext@cursor_x:
  1609                           	opt stack 0
  1610                           
  1611                           ; 1 bytes @ 0x6
  1612  0000F9                     	ds	1
  1613  0000FA                     _Update_Screen$2407:
  1614                           	opt stack 0
  1615                           
  1616                           ; 2 bytes @ 0x7
  1617  0000FA                     	ds	2
  1618  0000FC                     Update_Screen@neg_tempF:
  1619                           	opt stack 0
  1620                           
  1621                           ; 2 bytes @ 0x9
  1622  0000FC                     	ds	2
  1623  0000FE                     _Update_Screen$2406:
  1624                           	opt stack 0
  1625                           
  1626                           ; 2 bytes @ 0xB
  1627  0000FE                     	ds	2
  1628                           tblptru	equ	0xFF8
  1629                           tblptrh	equ	0xFF7
  1630                           tblptrl	equ	0xFF6
  1631                           tablat	equ	0xFF5
  1632                           postinc0	equ	0xFEE
  1633                           wreg	equ	0xFE8
  1634                           postdec1	equ	0xFE5
  1635                           fsr1l	equ	0xFE1
  1636                           
  1637                           	psect	cstackCOMRAM
  1638  000001                     __pcstackCOMRAM:
  1639                           	opt stack 0
  1640  000001                     ??_INT0_isr:
  1641  000001                     
  1642                           ; 1 bytes @ 0x0
  1643  000001                     	ds	2
  1644  000003                     ??_chkisr:
  1645                           
  1646                           ; 0 bytes @ 0x2
  1647  000003                     	ds	14
  1648  000011                     ??_isdigit:
  1649  000011                     ?_strlen:
  1650                           	opt stack 0
  1651  000011                     ?___wmul:
  1652                           	opt stack 0
  1653  000011                     ?___awmod:
  1654                           	opt stack 0
  1655  000011                     ?___lwdiv:
  1656                           	opt stack 0
  1657  000011                     ?___ftpack:
  1658                           	opt stack 0
  1659  000011                     ?___fttol:
  1660                           	opt stack 0
  1661  000011                     I2C_Read@ack:
  1662                           	opt stack 0
  1663  000011                     I2C_Write@outByte:
  1664                           	opt stack 0
  1665  000011                     spiwrite@x:
  1666                           	opt stack 0
  1667  000011                     putch@c:
  1668                           	opt stack 0
  1669  000011                     Set_DC_RGB@duty_cycle:
  1670                           	opt stack 0
  1671  000011                     Set_RPM_RGB@rpm:
  1672                           	opt stack 0
  1673  000011                     Wait_One_Sec@j:
  1674                           	opt stack 0
  1675  000011                     OpenUSART@spbrg:
  1676                           	opt stack 0
  1677  000011                     ___wmul@multiplier:
  1678                           	opt stack 0
  1679  000011                     ___awmod@dividend:
  1680                           	opt stack 0
  1681  000011                     ___lwdiv@dividend:
  1682                           	opt stack 0
  1683  000011                     strcpy@to:
  1684                           	opt stack 0
  1685  000011                     strlen@s:
  1686                           	opt stack 0
  1687  000011                     ___ftpack@arg:
  1688                           	opt stack 0
  1689  000011                     ___fttol@f1:
  1690                           	opt stack 0
  1691  000011                     I2C_Init@c:
  1692                           	opt stack 0
  1693                           
  1694                           ; 4 bytes @ 0x10
  1695  000011                     	ds	1
  1696  000012                     I2C_Read@n:
  1697                           	opt stack 0
  1698  000012                     I2C_Write@n:
  1699                           	opt stack 0
  1700  000012                     spiwrite@spidata:
  1701                           	opt stack 0
  1702  000012                     _isdigit$2055:
  1703                           	opt stack 0
  1704                           
  1705                           ; 1 bytes @ 0x11
  1706  000012                     	ds	1
  1707  000013                     ??_strlen:
  1708  000013                     I2C_Read@inByte:
  1709                           	opt stack 0
  1710  000013                     I2C_Write_Cmd_Only@Cmd:
  1711                           	opt stack 0
  1712  000013                     I2C_Write_Cmd_Write_Data@Cmd:
  1713                           	opt stack 0
  1714  000013                     DS3231_Setup_Time@Device:
  1715                           	opt stack 0
  1716  000013                     write_command@cmd_:
  1717                           	opt stack 0
  1718  000013                     write_data@data_:
  1719                           	opt stack 0
  1720  000013                     OpenUSART@config:
  1721                           	opt stack 0
  1722  000013                     isdigit@c:
  1723                           	opt stack 0
  1724  000013                     ___wmul@multiplicand:
  1725                           	opt stack 0
  1726  000013                     ___awmod@divisor:
  1727                           	opt stack 0
  1728  000013                     ___lwdiv@divisor:
  1729                           	opt stack 0
  1730  000013                     strcpy@from:
  1731                           	opt stack 0
  1732                           
  1733                           ; 2 bytes @ 0x12
  1734  000013                     	ds	1
  1735  000014                     ?_DS1621_Read_Temp:
  1736                           	opt stack 0
  1737  000014                     I2C_Write_Cmd_Only@Device:
  1738                           	opt stack 0
  1739  000014                     I2C_Write_Cmd_Write_Data@Data_Out:
  1740                           	opt stack 0
  1741  000014                     DS3231_Read_Time@Address:
  1742                           	opt stack 0
  1743  000014                     DS3231_Setup_Time@Address:
  1744                           	opt stack 0
  1745  000014                     setAddrWindow@y0:
  1746                           	opt stack 0
  1747  000014                     ___ftpack@exp:
  1748                           	opt stack 0
  1749                           
  1750                           ; 1 bytes @ 0x13
  1751  000014                     	ds	1
  1752  000015                     ??___fttol:
  1753  000015                     I2C_Write_Cmd_Write_Data@Device:
  1754                           	opt stack 0
  1755  000015                     DS3231_Read_Time@Device:
  1756                           	opt stack 0
  1757  000015                     setAddrWindow@x1:
  1758                           	opt stack 0
  1759  000015                     ___awmod@counter:
  1760                           	opt stack 0
  1761  000015                     ___ftpack@sign:
  1762                           	opt stack 0
  1763  000015                     ___lwdiv@counter:
  1764                           	opt stack 0
  1765  000015                     ___wmul@product:
  1766                           	opt stack 0
  1767  000015                     strcpy@cp:
  1768                           	opt stack 0
  1769  000015                     strlen@cp:
  1770                           	opt stack 0
  1771                           
  1772                           ; 2 bytes @ 0x14
  1773  000015                     	ds	1
  1774  000016                     ??___ftpack:
  1775  000016                     DS1621_Init@Device:
  1776                           	opt stack 0
  1777  000016                     DS1621_Read_Temp@Cmd:
  1778                           	opt stack 0
  1779  000016                     setAddrWindow@y1:
  1780                           	opt stack 0
  1781  000016                     ___awmod@sign:
  1782                           	opt stack 0
  1783  000016                     ___lwdiv@quotient:
  1784                           	opt stack 0
  1785                           
  1786                           ; 2 bytes @ 0x15
  1787  000016                     	ds	1
  1788  000017                     ?___awdiv:
  1789                           	opt stack 0
  1790  000017                     DS1621_Read_Temp@Data_Ret:
  1791                           	opt stack 0
  1792  000017                     setAddrWindow@x0:
  1793                           	opt stack 0
  1794  000017                     delay_ms@ms:
  1795                           	opt stack 0
  1796  000017                     ___awdiv@dividend:
  1797                           	opt stack 0
  1798                           
  1799                           ; 2 bytes @ 0x16
  1800  000017                     	ds	1
  1801  000018                     ?___lwmod:
  1802                           	opt stack 0
  1803  000018                     DS1621_Read_Temp@Device:
  1804                           	opt stack 0
  1805  000018                     drawPixel@y:
  1806                           	opt stack 0
  1807  000018                     drawFastVLine@y:
  1808                           	opt stack 0
  1809  000018                     fillRectangle@y:
  1810                           	opt stack 0
  1811  000018                     ___lwmod@dividend:
  1812                           	opt stack 0
  1813                           
  1814                           ; 2 bytes @ 0x17
  1815  000018                     	ds	1
  1816  000019                     ??_delay_ms:
  1817  000019                     ?___lbtoft:
  1818                           	opt stack 0
  1819  000019                     drawFastVLine@h:
  1820                           	opt stack 0
  1821  000019                     fillRectangle@w:
  1822                           	opt stack 0
  1823  000019                     drawPixel@color:
  1824                           	opt stack 0
  1825  000019                     ___awdiv@divisor:
  1826                           	opt stack 0
  1827                           
  1828                           ; 2 bytes @ 0x18
  1829  000019                     	ds	1
  1830  00001A                     fillRectangle@h:
  1831                           	opt stack 0
  1832  00001A                     ___fttol@sign1:
  1833                           	opt stack 0
  1834  00001A                     drawFastVLine@color:
  1835                           	opt stack 0
  1836  00001A                     ___lwmod@divisor:
  1837                           	opt stack 0
  1838                           
  1839                           ; 2 bytes @ 0x19
  1840  00001A                     	ds	1
  1841  00001B                     drawPixel@x:
  1842                           	opt stack 0
  1843  00001B                     ___awdiv@counter:
  1844                           	opt stack 0
  1845  00001B                     delay_ms@count:
  1846                           	opt stack 0
  1847  00001B                     fillRectangle@color:
  1848                           	opt stack 0
  1849  00001B                     ___fttol@lval:
  1850                           	opt stack 0
  1851                           
  1852                           ; 4 bytes @ 0x1A
  1853  00001B                     	ds	1
  1854  00001C                     ??_drawFastVLine:
  1855  00001C                     ___awdiv@sign:
  1856                           	opt stack 0
  1857  00001C                     ___lbtoft@c:
  1858                           	opt stack 0
  1859  00001C                     ___lwmod@counter:
  1860                           	opt stack 0
  1861  00001C                     drawCircle@x0:
  1862                           	opt stack 0
  1863                           
  1864                           ; 2 bytes @ 0x1B
  1865  00001C                     	ds	1
  1866  00001D                     ??_fillRectangle:
  1867  00001D                     ?_printf:
  1868                           	opt stack 0
  1869  00001D                     ?___ftmul:
  1870                           	opt stack 0
  1871  00001D                     printf@f:
  1872                           	opt stack 0
  1873  00001D                     ___awdiv@quotient:
  1874                           	opt stack 0
  1875  00001D                     ___ftmul@f1:
  1876                           	opt stack 0
  1877                           
  1878                           ; 3 bytes @ 0x1C
  1879  00001D                     	ds	1
  1880  00001E                     drawCircle@y0:
  1881                           	opt stack 0
  1882                           
  1883                           ; 2 bytes @ 0x1D
  1884  00001E                     	ds	1
  1885  00001F                     ?_get_RPM:
  1886                           	opt stack 0
  1887  00001F                     ___fttol@exp1:
  1888                           	opt stack 0
  1889                           
  1890                           ; 1 bytes @ 0x1E
  1891  00001F                     	ds	1
  1892  000020                     drawFastVLine@hi:
  1893                           	opt stack 0
  1894  000020                     drawCircle@r:
  1895                           	opt stack 0
  1896  000020                     ___ftmul@f2:
  1897                           	opt stack 0
  1898                           
  1899                           ; 3 bytes @ 0x1F
  1900  000020                     	ds	1
  1901  000021                     drawFastVLine@lo:
  1902                           	opt stack 0
  1903  000021                     fillRectangle@hi:
  1904                           	opt stack 0
  1905  000021                     get_RPM@RPS:
  1906                           	opt stack 0
  1907                           
  1908                           ; 2 bytes @ 0x20
  1909  000021                     	ds	1
  1910  000022                     drawFastVLine@x:
  1911                           	opt stack 0
  1912  000022                     fillRectangle@lo:
  1913                           	opt stack 0
  1914  000022                     drawCircle@color:
  1915                           	opt stack 0
  1916                           
  1917                           ; 2 bytes @ 0x21
  1918  000022                     	ds	1
  1919  000023                     ??___ftmul:
  1920  000023                     fillRect@y:
  1921                           	opt stack 0
  1922  000023                     fillRectangle@x:
  1923                           	opt stack 0
  1924                           
  1925                           ; 1 bytes @ 0x22
  1926  000023                     	ds	1
  1927  000024                     ??_drawCircle:
  1928  000024                     fillRect@w:
  1929                           	opt stack 0
  1930  000024                     fillScreen@color:
  1931                           	opt stack 0
  1932                           
  1933                           ; 2 bytes @ 0x23
  1934  000024                     	ds	1
  1935  000025                     fillRect@h:
  1936                           	opt stack 0
  1937                           
  1938                           ; 1 bytes @ 0x24
  1939  000025                     	ds	1
  1940  000026                     ___ftmul@exp:
  1941                           	opt stack 0
  1942  000026                     fillRect@color:
  1943                           	opt stack 0
  1944  000026                     drawCircle@ddF_x:
  1945                           	opt stack 0
  1946                           
  1947                           ; 2 bytes @ 0x25
  1948  000026                     	ds	1
  1949  000027                     ___ftmul@f3_as_product:
  1950                           	opt stack 0
  1951                           
  1952                           ; 3 bytes @ 0x26
  1953  000027                     	ds	1
  1954  000028                     ??_fillRect:
  1955  000028                     drawCircle@ddF_y:
  1956                           	opt stack 0
  1957                           
  1958                           ; 2 bytes @ 0x27
  1959  000028                     	ds	2
  1960  00002A                     ___ftmul@cntr:
  1961                           	opt stack 0
  1962  00002A                     drawCircle@f:
  1963                           	opt stack 0
  1964                           
  1965                           ; 2 bytes @ 0x29
  1966  00002A                     	ds	1
  1967  00002B                     ??_printf:
  1968  00002B                     fillRect@x:
  1969                           	opt stack 0
  1970  00002B                     ___ftmul@sign:
  1971                           	opt stack 0
  1972                           
  1973                           ; 1 bytes @ 0x2A
  1974  00002B                     	ds	1
  1975  00002C                     ?___ftdiv:
  1976                           	opt stack 0
  1977  00002C                     fillRect@i:
  1978                           	opt stack 0
  1979  00002C                     drawCircle@x:
  1980                           	opt stack 0
  1981  00002C                     ___ftdiv@f1:
  1982                           	opt stack 0
  1983                           
  1984                           ; 3 bytes @ 0x2B
  1985  00002C                     	ds	2
  1986  00002E                     drawChar@y:
  1987                           	opt stack 0
  1988  00002E                     drawCircle@y:
  1989                           	opt stack 0
  1990                           
  1991                           ; 2 bytes @ 0x2D
  1992  00002E                     	ds	1
  1993  00002F                     drawChar@c:
  1994                           	opt stack 0
  1995  00002F                     printf@idx:
  1996                           	opt stack 0
  1997  00002F                     ___ftdiv@f2:
  1998                           	opt stack 0
  1999                           
  2000                           ; 3 bytes @ 0x2E
  2001  00002F                     	ds	1
  2002  000030                     drawChar@color:
  2003                           	opt stack 0
  2004  000030                     printf@ap:
  2005                           	opt stack 0
  2006                           
  2007                           ; 2 bytes @ 0x2F
  2008  000030                     	ds	2
  2009  000032                     ??___ftdiv:
  2010  000032                     printf@prec:
  2011                           	opt stack 0
  2012  000032                     drawChar@bg:
  2013                           	opt stack 0
  2014                           
  2015                           ; 2 bytes @ 0x31
  2016  000032                     	ds	1
  2017  000033                     printf@val:
  2018                           	opt stack 0
  2019                           
  2020                           ; 2 bytes @ 0x32
  2021  000033                     	ds	1
  2022  000034                     drawChar@size:
  2023                           	opt stack 0
  2024                           
  2025                           ; 1 bytes @ 0x33
  2026  000034                     	ds	1
  2027  000035                     drawChar@line:
  2028                           	opt stack 0
  2029  000035                     printf@flag:
  2030                           	opt stack 0
  2031  000035                     ___ftdiv@cntr:
  2032                           	opt stack 0
  2033                           
  2034                           ; 1 bytes @ 0x34
  2035  000035                     	ds	1
  2036  000036                     drawChar@x:
  2037                           	opt stack 0
  2038  000036                     printf@width:
  2039                           	opt stack 0
  2040  000036                     ___ftdiv@f3:
  2041                           	opt stack 0
  2042                           
  2043                           ; 3 bytes @ 0x35
  2044  000036                     	ds	1
  2045  000037                     drawChar@j:
  2046                           	opt stack 0
  2047                           
  2048                           ; 1 bytes @ 0x36
  2049  000037                     	ds	1
  2050  000038                     drawChar@i:
  2051                           	opt stack 0
  2052  000038                     printf@c:
  2053                           	opt stack 0
  2054                           
  2055                           ; 1 bytes @ 0x37
  2056  000038                     	ds	1
  2057  000039                     drawtext@y:
  2058                           	opt stack 0
  2059  000039                     ___ftdiv@exp:
  2060                           	opt stack 0
  2061                           
  2062                           ; 1 bytes @ 0x38
  2063  000039                     	ds	1
  2064  00003A                     ___ftdiv@sign:
  2065                           	opt stack 0
  2066  00003A                     drawtext@_text:
  2067                           	opt stack 0
  2068                           
  2069                           ; 2 bytes @ 0x39
  2070  00003A                     	ds	1
  2071  00003B                     ??_do_update_pwm:
  2072                           
  2073                           ; 0 bytes @ 0x3A
  2074  00003B                     	ds	1
  2075  00003C                     drawtext@color:
  2076                           	opt stack 0
  2077                           
  2078                           ; 2 bytes @ 0x3B
  2079  00003C                     	ds	2
  2080  00003E                     drawtext@bg:
  2081                           	opt stack 0
  2082  00003E                     do_update_pwm@dc_f:
  2083                           	opt stack 0
  2084                           
  2085                           ; 3 bytes @ 0x3D
  2086  00003E                     	ds	2
  2087  000040                     drawtext@size:
  2088                           	opt stack 0
  2089                           
  2090                           ; 1 bytes @ 0x3F
  2091  000040                     	ds	1
  2092  000041                     ??_drawtext:
  2093  000041                     do_update_pwm@duty_cycle:
  2094                           	opt stack 0
  2095                           
  2096                           ; 1 bytes @ 0x40
  2097  000041                     	ds	1
  2098  000042                     do_update_pwm@dc_I:
  2099                           	opt stack 0
  2100                           
  2101                           ; 2 bytes @ 0x41
  2102  000042                     	ds	1
  2103  000043                     ??_Update_Screen:
  2104                           
  2105                           ; 0 bytes @ 0x42
  2106  000043                     	ds	1
  2107  000044                     
  2108                           ; 0 bytes @ 0x43
  2109  000044                     	ds	1
  2110  000045                     
  2111                           ; 0 bytes @ 0x44
  2112  000045                     	ds	1
  2113                           tblptru	equ	0xFF8
  2114                           tblptrh	equ	0xFF7
  2115                           tblptrl	equ	0xFF6
  2116                           tablat	equ	0xFF5
  2117                           postinc0	equ	0xFEE
  2118                           wreg	equ	0xFE8
  2119                           postdec1	equ	0xFE5
  2120                           fsr1l	equ	0xFE1
  2121                           
  2122 ;;
  2123 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2124 ;;
  2125 ;; *************** function _main *****************
  2126 ;; Defined at:
  2127 ;;		line 123 in file "Lab11pA_J.c"
  2128 ;; Parameters:    Size  Location     Type
  2129 ;;		None
  2130 ;; Auto vars:     Size  Location     Type
  2131 ;;  j               2    1[BANK1 ] int 
  2132 ;;  U               1    0[BANK1 ] unsigned char 
  2133 ;; Return value:  Size  Location     Type
  2134 ;;		None               void
  2135 ;; Registers used:
  2136 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2137 ;; Tracked objects:
  2138 ;;		On entry : 0/0
  2139 ;;		On exit  : 0/0
  2140 ;;		Unchanged: 0/0
  2141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2142 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2143 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2144 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2145 ;;      Totals:         1       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2146 ;;Total ram usage:        4 bytes
  2147 ;; Hardware stack levels required when called:   11
  2148 ;; This function calls:
  2149 ;;		_DS1621_Read_Temp
  2150 ;;		_DS3231_Read_Time
  2151 ;;		_DS3231_Setup_Time
  2152 ;;		_Decrease_Speed
  2153 ;;		_Do_Beep
  2154 ;;		_Do_Init
  2155 ;;		_Increase_Speed
  2156 ;;		_Initialize_Screen
  2157 ;;		_Set_DC_RGB
  2158 ;;		_Set_RPM_RGB
  2159 ;;		_Toggle_Fan
  2160 ;;		_Update_Screen
  2161 ;;		___awdiv
  2162 ;;		___wmul
  2163 ;;		_do_update_pwm
  2164 ;;		_get_RPM
  2165 ;;		_printf
  2166 ;; This function is called by:
  2167 ;;		Startup code after reset
  2168 ;; This function uses a non-reentrant model
  2169 ;;
  2170                           
  2171                           	psect	text0
  2172  000A0E                     __ptext0:
  2173                           	opt stack 0
  2174  000A0E                     _main:
  2175                           	opt stack 20
  2176                           
  2177                           ;Lab11pA_J.c: 125: Do_Init();
  2178                           
  2179                           ;incstack = 0
  2180  000A0E  ECAF  F00F         	call	_Do_Init	;wreg free
  2181                           
  2182                           ;Lab11pA_J.c: 126: Initialize_Screen();
  2183  000A12  ECD2  F003         	call	_Initialize_Screen	;wreg free
  2184                           
  2185                           ;Lab11pA_J.c: 128: PORTAbits.RA5 = 0;
  2186  000A16  9A80               	bcf	3968,5,c	;volatile
  2187                           
  2188                           ;Lab11pA_J.c: 129: PORTEbits.RE2 = 0;
  2189  000A18  9484               	bcf	3972,2,c	;volatile
  2190                           
  2191                           ;Lab11pA_J.c: 130: duty_cycle = 50;
  2192  000A1A  0E32               	movlw	50
  2193  000A1C  6E5E               	movwf	_duty_cycle,c
  2194                           
  2195                           ;Lab11pA_J.c: 131: do_update_pwm(duty_cycle);
  2196  000A1E  505E               	movf	_duty_cycle,w,c
  2197  000A20  ECFF  F00B         	call	_do_update_pwm
  2198  000A24  D000               	goto	l6951
  2199  000A26                     l6951:
  2200                           
  2201                           ;Lab11pA_J.c: 133: {
  2202                           ;Lab11pA_J.c: 135: DS3231_Read_Time();
  2203  000A26  ECD9  F00E         	call	_DS3231_Read_Time	;wreg free
  2204                           
  2205                           ;Lab11pA_J.c: 137: if(tempSecond != second)
  2206  000A2A  5064               	movf	_second,w,c
  2207  000A2C  186E               	xorwf	_tempSecond,w,c
  2208  000A2E  B4D8               	btfsc	status,2,c
  2209  000A30  D075               	goto	l6977
  2210                           
  2211                           ;Lab11pA_J.c: 138: {
  2212                           ;Lab11pA_J.c: 139: tempSecond = second;
  2213  000A32  C064  F06E         	movff	_second,_tempSecond
  2214                           
  2215                           ;Lab11pA_J.c: 140: DS1621_tempC = DS1621_Read_Temp();
  2216  000A36  EC9A  F010         	call	_DS1621_Read_Temp	;wreg free
  2217  000A3A  C014  F046         	movff	?_DS1621_Read_Temp,_DS1621_tempC
  2218  000A3E  C015  F047         	movff	?_DS1621_Read_Temp+1,_DS1621_tempC+1
  2219                           
  2220                           ;Lab11pA_J.c: 141: DS1621_tempF = (DS1621_tempC * 9 / 5) + 32;
  2221  000A42  C046  F011         	movff	_DS1621_tempC,___wmul@multiplier
  2222  000A46  C047  F012         	movff	_DS1621_tempC+1,___wmul@multiplier+1
  2223  000A4A  0E00               	movlw	0
  2224  000A4C  6E14               	movwf	___wmul@multiplicand+1,c
  2225  000A4E  0E09               	movlw	9
  2226  000A50  6E13               	movwf	___wmul@multiplicand,c
  2227  000A52  EC18  F011         	call	___wmul	;wreg free
  2228  000A56  C011  F017         	movff	?___wmul,___awdiv@dividend
  2229  000A5A  C012  F018         	movff	?___wmul+1,___awdiv@dividend+1
  2230  000A5E  0E00               	movlw	0
  2231  000A60  6E1A               	movwf	___awdiv@divisor+1,c
  2232  000A62  0E05               	movlw	5
  2233  000A64  6E19               	movwf	___awdiv@divisor,c
  2234  000A66  ECB3  F00C         	call	___awdiv	;wreg free
  2235  000A6A  0E20               	movlw	32
  2236  000A6C  2417               	addwf	?___awdiv,w,c
  2237  000A6E  6E48               	movwf	_DS1621_tempF,c
  2238  000A70  0E00               	movlw	0
  2239  000A72  2018               	addwfc	?___awdiv+1,w,c
  2240  000A74  6E49               	movwf	_DS1621_tempF+1,c
  2241                           
  2242                           ;Lab11pA_J.c: 142: rpm = get_RPM();
  2243  000A76  EC1E  F010         	call	_get_RPM	;wreg free
  2244  000A7A  C01F  F04C         	movff	?_get_RPM,_rpm
  2245  000A7E  C020  F04D         	movff	?_get_RPM+1,_rpm+1
  2246                           
  2247                           ;Lab11pA_J.c: 143: printf ("%02x:%02x:%02x %02x/%02x/%02x",hour,minute,second,month,day,
      +                          year);
  2248  000A82  0E14               	movlw	low STR_12
  2249  000A84  6E1D               	movwf	printf@f,c
  2250  000A86  0EFF               	movlw	high STR_12
  2251  000A88  6E1E               	movwf	printf@f+1,c
  2252  000A8A  C060  F01F         	movff	_hour,?_printf+2
  2253  000A8E  6A20               	clrf	?_printf+3,c
  2254  000A90  C061  F021         	movff	_minute,?_printf+4
  2255  000A94  6A22               	clrf	?_printf+5,c
  2256  000A96  C064  F023         	movff	_second,?_printf+6
  2257  000A9A  6A24               	clrf	?_printf+7,c
  2258  000A9C  C062  F025         	movff	_month,?_printf+8
  2259  000AA0  6A26               	clrf	?_printf+9,c
  2260  000AA2  C05C  F027         	movff	_day,?_printf+10
  2261  000AA6  6A28               	clrf	?_printf+11,c
  2262  000AA8  C06D  F029         	movff	_year,?_printf+12
  2263  000AAC  6A2A               	clrf	?_printf+13,c
  2264  000AAE  EC25  F002         	call	_printf	;wreg free
  2265                           
  2266                           ;Lab11pA_J.c: 144: printf (" Temp = %d C = %d F ", DS1621_tempC, DS1621_tempF);
  2267  000AB2  0E76               	movlw	low STR_13
  2268  000AB4  6E1D               	movwf	printf@f,c
  2269  000AB6  0EFF               	movlw	high STR_13
  2270  000AB8  6E1E               	movwf	printf@f+1,c
  2271  000ABA  C046  F01F         	movff	_DS1621_tempC,?_printf+2
  2272  000ABE  C047  F020         	movff	_DS1621_tempC+1,?_printf+3
  2273  000AC2  C048  F021         	movff	_DS1621_tempF,?_printf+4
  2274  000AC6  C049  F022         	movff	_DS1621_tempF+1,?_printf+5
  2275  000ACA  EC25  F002         	call	_printf	;wreg free
  2276                           
  2277                           ;Lab11pA_J.c: 145: printf ("RPM = %d  dc = %d\r\n", rpm, duty_cycle);
  2278  000ACE  0E8B               	movlw	low STR_14
  2279  000AD0  6E1D               	movwf	printf@f,c
  2280  000AD2  0EFF               	movlw	high STR_14
  2281  000AD4  6E1E               	movwf	printf@f+1,c
  2282  000AD6  C04C  F01F         	movff	_rpm,?_printf+2
  2283  000ADA  C04D  F020         	movff	_rpm+1,?_printf+3
  2284  000ADE  C05E  F021         	movff	_duty_cycle,?_printf+4
  2285  000AE2  6A22               	clrf	?_printf+5,c
  2286  000AE4  EC25  F002         	call	_printf	;wreg free
  2287                           
  2288                           ;Lab11pA_J.c: 146: char U = (int)(duty_cycle/10);
  2289  000AE8  C05E  F017         	movff	_duty_cycle,___awdiv@dividend
  2290  000AEC  6A18               	clrf	___awdiv@dividend+1,c
  2291  000AEE  0E00               	movlw	0
  2292  000AF0  6E1A               	movwf	___awdiv@divisor+1,c
  2293  000AF2  0E0A               	movlw	10
  2294  000AF4  6E19               	movwf	___awdiv@divisor,c
  2295  000AF6  ECB3  F00C         	call	___awdiv	;wreg free
  2296  000AFA  5017               	movf	?___awdiv,w,c
  2297  000AFC  0101               	movlb	1	; () banked
  2298  000AFE  6FB2               	movwf	main@U& (0+255),b
  2299                           
  2300                           ; BSR set to: 1
  2301                           ;Lab11pA_J.c: 147: Set_DC_RGB(U);
  2302  000B00  C1B2  F011         	movff	main@U,Set_DC_RGB@duty_cycle
  2303  000B04  6A12               	clrf	Set_DC_RGB@duty_cycle+1,c
  2304  000B06  ECC3  F011         	call	_Set_DC_RGB	;wreg free
  2305                           
  2306                           ;Lab11pA_J.c: 148: Set_RPM_RGB(rpm);
  2307  000B0A  C04C  F011         	movff	_rpm,Set_RPM_RGB@rpm
  2308  000B0E  C04D  F012         	movff	_rpm+1,Set_RPM_RGB@rpm+1
  2309  000B12  ECFE  F00D         	call	_Set_RPM_RGB	;wreg free
  2310                           
  2311                           ;Lab11pA_J.c: 149: Update_Screen();
  2312  000B16  EC0E  F000         	call	_Update_Screen	;wreg free
  2313  000B1A  D000               	goto	l6977
  2314  000B1C                     l6977:
  2315                           
  2316                           ;Lab11pA_J.c: 150: }
  2317                           ;Lab11pA_J.c: 152: if (nec_ok == 1)
  2318  000B1C  0100               	movlb	0	; () banked
  2319  000B1E  05EE               	decf	_nec_ok& (0+255),w,b
  2320  000B20  0100               	movlb	0	; () banked
  2321  000B22  11EF               	iorwf	(_nec_ok+1)& (0+255),w,b
  2322  000B24  A4D8               	btfss	status,2,c
  2323  000B26  D77F               	goto	l6951
  2324                           
  2325                           ; BSR set to: 0
  2326                           ;Lab11pA_J.c: 153: {
  2327                           ;Lab11pA_J.c: 154: nec_ok = 0;
  2328  000B28  0E00               	movlw	0
  2329  000B2A  0100               	movlb	0	; () banked
  2330  000B2C  6FEF               	movwf	(_nec_ok+1)& (0+255),b
  2331  000B2E  0E00               	movlw	0
  2332  000B30  6FEE               	movwf	_nec_ok& (0+255),b
  2333                           
  2334                           ; BSR set to: 0
  2335                           ;Lab11pA_J.c: 155: printf ("NEC_Code = %x\r\n", Nec_code1);
  2336  000B32  0EB0               	movlw	low STR_15
  2337  000B34  6E1D               	movwf	printf@f,c
  2338  000B36  0EFF               	movlw	high STR_15
  2339  000B38  6E1E               	movwf	printf@f+1,c
  2340  000B3A  C053  F01F         	movff	_Nec_code1,?_printf+2
  2341  000B3E  6A20               	clrf	?_printf+3,c
  2342  000B40  EC25  F002         	call	_printf	;wreg free
  2343                           
  2344                           ;Lab11pA_J.c: 157: INTCONbits.INT0IE = 1;
  2345  000B44  88F2               	bsf	intcon,4,c	;volatile
  2346                           
  2347                           ;Lab11pA_J.c: 158: INTCON2bits.INTEDG0 = 0;
  2348  000B46  9CF1               	bcf	intcon2,6,c	;volatile
  2349                           
  2350                           ;Lab11pA_J.c: 160: found = 0xff;
  2351  000B48  685F               	setf	_found,c
  2352                           
  2353                           ;Lab11pA_J.c: 161: for (int j=0; j< 21; j++)
  2354  000B4A  0E00               	movlw	0
  2355  000B4C  0101               	movlb	1	; () banked
  2356  000B4E  6FB4               	movwf	(main@j+1)& (0+255),b
  2357  000B50  0E00               	movlw	0
  2358  000B52  6FB3               	movwf	main@j& (0+255),b
  2359  000B54                     l6991:
  2360                           
  2361                           ; BSR set to: 1
  2362  000B54  0101               	movlb	1	; () banked
  2363  000B56  BFB4               	btfsc	(main@j+1)& (0+255),7,b
  2364  000B58  D00A               	goto	l6995
  2365  000B5A  0101               	movlb	1	; () banked
  2366  000B5C  51B4               	movf	(main@j+1)& (0+255),w,b
  2367  000B5E  E120               	bnz	l7005
  2368  000B60  0E15               	movlw	21
  2369  000B62  0101               	movlb	1	; () banked
  2370  000B64  5DB3               	subwf	main@j& (0+255),w,b
  2371  000B66  B0D8               	btfsc	status,0,c
  2372  000B68  D01B               	goto	l7005
  2373  000B6A  D001               	goto	l6995
  2374                           
  2375                           ; BSR set to: 1
  2376  000B6C  D019               	goto	l7005
  2377  000B6E                     l6995:
  2378                           
  2379                           ; BSR set to: 1
  2380                           ;Lab11pA_J.c: 162: {
  2381                           ;Lab11pA_J.c: 163: if (Nec_code1 == array1[j])
  2382  000B6E  0E7E               	movlw	low _array1
  2383  000B70  0101               	movlb	1	; () banked
  2384  000B72  25B3               	addwf	main@j& (0+255),w,b
  2385  000B74  6ED9               	movwf	fsr2l,c
  2386  000B76  0E01               	movlw	high _array1
  2387  000B78  0101               	movlb	1	; () banked
  2388  000B7A  21B4               	addwfc	(main@j+1)& (0+255),w,b
  2389  000B7C  6EDA               	movwf	fsr2h,c
  2390  000B7E  5053               	movf	_Nec_code1,w,c
  2391  000B80  18DE               	xorwf	postinc2,w,c
  2392  000B82  A4D8               	btfss	status,2,c
  2393  000B84  D008               	goto	l7001
  2394                           
  2395                           ; BSR set to: 1
  2396                           ;Lab11pA_J.c: 164: {
  2397                           ;Lab11pA_J.c: 165: found = j;
  2398  000B86  C1B3  F05F         	movff	main@j,_found
  2399                           
  2400                           ; BSR set to: 1
  2401                           ;Lab11pA_J.c: 166: j = 21;
  2402  000B8A  0E00               	movlw	0
  2403  000B8C  0101               	movlb	1	; () banked
  2404  000B8E  6FB4               	movwf	(main@j+1)& (0+255),b
  2405  000B90  0E15               	movlw	21
  2406  000B92  6FB3               	movwf	main@j& (0+255),b
  2407  000B94  D000               	goto	l7001
  2408  000B96                     l7001:
  2409                           
  2410                           ; BSR set to: 1
  2411  000B96  0101               	movlb	1	; () banked
  2412  000B98  4BB3               	infsnz	main@j& (0+255),f,b
  2413  000B9A  2BB4               	incf	(main@j+1)& (0+255),f,b
  2414  000B9C  D7DB               	goto	l6991
  2415                           
  2416                           ; BSR set to: 1
  2417  000B9E  D000               	goto	l7005
  2418  000BA0                     l7005:
  2419                           
  2420                           ; BSR set to: 1
  2421                           ;Lab11pA_J.c: 167: }
  2422                           ;Lab11pA_J.c: 168: }
  2423                           ;Lab11pA_J.c: 170: if (found == 0xff)
  2424  000BA0  285F               	incf	_found,w,c
  2425  000BA2  A4D8               	btfss	status,2,c
  2426  000BA4  D007               	goto	l7009
  2427                           
  2428                           ; BSR set to: 1
  2429                           ;Lab11pA_J.c: 171: {
  2430                           ;Lab11pA_J.c: 172: printf ("Cannot find button \r\n");
  2431  000BA6  0E4A               	movlw	low STR_16
  2432  000BA8  6E1D               	movwf	printf@f,c
  2433  000BAA  0EFF               	movlw	high STR_16
  2434  000BAC  6E1E               	movwf	printf@f+1,c
  2435  000BAE  EC25  F002         	call	_printf	;wreg free
  2436                           
  2437                           ;Lab11pA_J.c: 173: }
  2438  000BB2  D739               	goto	l6951
  2439  000BB4                     l7009:
  2440                           
  2441                           ;Lab11pA_J.c: 174: else
  2442                           ;Lab11pA_J.c: 175: {
  2443                           ;Lab11pA_J.c: 176: Do_Beep();
  2444  000BB4  ECDD  F011         	call	_Do_Beep	;wreg free
  2445                           
  2446                           ;Lab11pA_J.c: 177: printf ("button = %d \r\n", found);
  2447  000BB8  0EC0               	movlw	low STR_17
  2448  000BBA  6E1D               	movwf	printf@f,c
  2449  000BBC  0EFF               	movlw	high STR_17
  2450  000BBE  6E1E               	movwf	printf@f+1,c
  2451  000BC0  C05F  F01F         	movff	_found,?_printf+2
  2452  000BC4  6A20               	clrf	?_printf+3,c
  2453  000BC6  EC25  F002         	call	_printf	;wreg free
  2454                           
  2455                           ;Lab11pA_J.c: 178: if (found == 5) Toggle_Fan();
  2456  000BCA  0E05               	movlw	5
  2457  000BCC  185F               	xorwf	_found,w,c
  2458  000BCE  A4D8               	btfss	status,2,c
  2459  000BD0  D003               	goto	l7017
  2460  000BD2  EC74  F011         	call	_Toggle_Fan	;wreg free
  2461  000BD6  D000               	goto	l7017
  2462  000BD8                     l7017:
  2463                           
  2464                           ;Lab11pA_J.c: 179: if (found == 6) Decrease_Speed();
  2465  000BD8  0E06               	movlw	6
  2466  000BDA  185F               	xorwf	_found,w,c
  2467  000BDC  A4D8               	btfss	status,2,c
  2468  000BDE  D003               	goto	l7021
  2469  000BE0  EC85  F011         	call	_Decrease_Speed	;wreg free
  2470  000BE4  D000               	goto	l7021
  2471  000BE6                     l7021:
  2472                           
  2473                           ;Lab11pA_J.c: 180: if (found == 7) Increase_Speed();
  2474  000BE6  0E07               	movlw	7
  2475  000BE8  185F               	xorwf	_found,w,c
  2476  000BEA  A4D8               	btfss	status,2,c
  2477  000BEC  D003               	goto	l7025
  2478  000BEE  EC3F  F011         	call	_Increase_Speed	;wreg free
  2479  000BF2  D000               	goto	l7025
  2480  000BF4                     l7025:
  2481                           
  2482                           ;Lab11pA_J.c: 181: if (found == 8)
  2483  000BF4  0E08               	movlw	8
  2484  000BF6  185F               	xorwf	_found,w,c
  2485  000BF8  A4D8               	btfss	status,2,c
  2486  000BFA  D009               	goto	l7031
  2487                           
  2488                           ;Lab11pA_J.c: 182: {
  2489                           ;Lab11pA_J.c: 183: printf("\nTime has been reset\r\n\n");
  2490  000BFC  0E32               	movlw	low STR_18
  2491  000BFE  6E1D               	movwf	printf@f,c
  2492  000C00  0EFF               	movlw	high STR_18
  2493  000C02  6E1E               	movwf	printf@f+1,c
  2494  000C04  EC25  F002         	call	_printf	;wreg free
  2495                           
  2496                           ;Lab11pA_J.c: 184: DS3231_Setup_Time();
  2497  000C08  ECA6  F00E         	call	_DS3231_Setup_Time	;wreg free
  2498                           
  2499                           ;Lab11pA_J.c: 185: }
  2500  000C0C  D70C               	goto	l6951
  2501  000C0E                     l7031:
  2502                           
  2503                           ;Lab11pA_J.c: 186: else do_update_pwm(duty_cycle);
  2504  000C0E  505E               	movf	_duty_cycle,w,c
  2505  000C10  ECFF  F00B         	call	_do_update_pwm
  2506  000C14  D708               	goto	l6951
  2507  000C16  EF0C  F000         	goto	start
  2508  000C1A                     __end_of_main:
  2509                           	opt stack 0
  2510                           tblptru	equ	0xFF8
  2511                           tblptrh	equ	0xFF7
  2512                           tblptrl	equ	0xFF6
  2513                           tablat	equ	0xFF5
  2514                           intcon	equ	0xFF2
  2515                           intcon2	equ	0xFF1
  2516                           postinc0	equ	0xFEE
  2517                           wreg	equ	0xFE8
  2518                           postdec1	equ	0xFE5
  2519                           fsr1l	equ	0xFE1
  2520                           postinc2	equ	0xFDE
  2521                           fsr2h	equ	0xFDA
  2522                           fsr2l	equ	0xFD9
  2523                           status	equ	0xFD8
  2524                           
  2525 ;; *************** function _printf *****************
  2526 ;; Defined at:
  2527 ;;		line 464 in file "E:\XC8\sources\common\doprnt.c"
  2528 ;; Parameters:    Size  Location     Type
  2529 ;;  f               2   28[COMRAM] PTR const unsigned char 
  2530 ;;		 -> STR_18(24), STR_17(15), STR_16(22), STR_15(16), 
  2531 ;;		 -> STR_14(20), STR_13(21), STR_12(30), 
  2532 ;; Auto vars:     Size  Location     Type
  2533 ;;  idx             1   46[COMRAM] unsigned char 
  2534 ;;  tmpval          4    0        struct .
  2535 ;;  cp              3    0        PTR const unsigned char 
  2536 ;;  width           2   53[COMRAM] int 
  2537 ;;  val             2   50[COMRAM] unsigned int 
  2538 ;;  ap              2   47[COMRAM] PTR void [1]
  2539 ;;		 -> ?_printf(2), 
  2540 ;;  len             2    0        unsigned int 
  2541 ;;  c               1   55[COMRAM] char 
  2542 ;;  flag            1   52[COMRAM] unsigned char 
  2543 ;;  prec            1   49[COMRAM] char 
  2544 ;; Return value:  Size  Location     Type
  2545 ;;                  2   28[COMRAM] int 
  2546 ;; Registers used:
  2547 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2548 ;; Tracked objects:
  2549 ;;		On entry : 0/0
  2550 ;;		On exit  : 0/0
  2551 ;;		Unchanged: 0/0
  2552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2553 ;;      Params:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2554 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2555 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2556 ;;      Totals:        28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2557 ;;Total ram usage:       28 bytes
  2558 ;; Hardware stack levels used:    1
  2559 ;; Hardware stack levels required when called:    4
  2560 ;; This function calls:
  2561 ;;		___lwdiv
  2562 ;;		___lwmod
  2563 ;;		___wmul
  2564 ;;		_isdigit
  2565 ;;		_putch
  2566 ;; This function is called by:
  2567 ;;		_main
  2568 ;; This function uses a non-reentrant model
  2569 ;;
  2570                           
  2571                           	psect	text1
  2572  00044A                     __ptext1:
  2573                           	opt stack 0
  2574  00044A                     _printf:
  2575                           	opt stack 26
  2576                           
  2577                           ;doprnt.c: 466: va_list ap;
  2578                           ;doprnt.c: 499: signed char c;
  2579                           ;doprnt.c: 501: int width;
  2580                           ;doprnt.c: 506: signed char prec;
  2581                           ;doprnt.c: 508: unsigned char flag;
  2582                           ;doprnt.c: 523: union {
  2583                           ;doprnt.c: 524: unsigned long vd;
  2584                           ;doprnt.c: 525: double integ;
  2585                           ;doprnt.c: 526: } tmpval;
  2586                           ;doprnt.c: 528: unsigned int val;
  2587                           ;doprnt.c: 529: unsigned len;
  2588                           ;doprnt.c: 530: const char * cp;
  2589                           ;doprnt.c: 533: *ap = __va_start();
  2590                           
  2591                           ;incstack = 0
  2592  00044A  0E1F               	movlw	low (?_printf+2)
  2593  00044C  6E30               	movwf	printf@ap,c
  2594  00044E  0E00               	movlw	high (?_printf+2)
  2595  000450  6E31               	movwf	printf@ap+1,c
  2596                           
  2597                           ;doprnt.c: 536: while(c = *f++) {
  2598  000452  D199               	goto	l6663
  2599  000454                     l6537:
  2600                           
  2601                           ;doprnt.c: 538: if(c != '%')
  2602  000454  0E25               	movlw	37
  2603  000456  1838               	xorwf	printf@c,w,c
  2604  000458  B4D8               	btfsc	status,2,c
  2605  00045A  D004               	goto	l6541
  2606                           
  2607                           ;doprnt.c: 540: {
  2608                           ;doprnt.c: 541: (putch(c) );
  2609  00045C  5038               	movf	printf@c,w,c
  2610  00045E  EC4D  F012         	call	_putch
  2611                           
  2612                           ;doprnt.c: 542: continue;
  2613  000462  D191               	goto	l6663
  2614  000464                     l6541:
  2615                           
  2616                           ;doprnt.c: 543: }
  2617                           ;doprnt.c: 546: width = 0;
  2618  000464  0E00               	movlw	0
  2619  000466  6E37               	movwf	printf@width+1,c
  2620  000468  0E00               	movlw	0
  2621  00046A  6E36               	movwf	printf@width,c
  2622                           
  2623                           ;doprnt.c: 548: flag = 0;
  2624  00046C  0E00               	movlw	0
  2625  00046E  6E35               	movwf	printf@flag,c
  2626                           
  2627                           ;doprnt.c: 551: switch(*f) {
  2628                           
  2629                           ;doprnt.c: 550: for(;;) {
  2630  000470  D005               	goto	l6547
  2631  000472                     l6543:
  2632                           
  2633                           ;doprnt.c: 580: flag |= 0x04;
  2634  000472  8435               	bsf	printf@flag,2,c
  2635                           
  2636                           ;doprnt.c: 581: f++;
  2637  000474  4A1D               	infsnz	printf@f,f,c
  2638  000476  2A1E               	incf	printf@f+1,f,c
  2639                           
  2640                           ;doprnt.c: 582: continue;
  2641  000478  D001               	goto	l6547
  2642                           
  2643                           ;doprnt.c: 584: }
  2644  00047A  D00B               	goto	l6549
  2645  00047C                     l6547:
  2646  00047C  C01D  FFF6         	movff	printf@f,tblptrl
  2647  000480  C01E  FFF7         	movff	printf@f+1,tblptrh
  2648  000484                     	if	0	;tblptru may be non-zero
  2649  000484                     	endif
  2650  000484                     	if	0	;tblptru may be non-zero
  2651  000484                     	endif
  2652  000484  0008               	tblrd		*
  2653  000486  50F5               	movf	tablat,w,c
  2654                           
  2655                           ; Switch size 1, requested type "space"
  2656                           ; Number of cases is 1, Range of values is 48 to 48
  2657                           ; switch strategies available:
  2658                           ; Name         Instructions Cycles
  2659                           ; simple_byte            4     3 (average)
  2660                           ;	Chosen strategy is simple_byte
  2661  000488  0A30               	xorlw	48	; case 48
  2662  00048A  B4D8               	btfsc	status,2,c
  2663  00048C  D7F2               	goto	l6543
  2664                           
  2665                           ;doprnt.c: 585: break;
  2666  00048E  D001               	goto	l6549
  2667                           
  2668                           ;doprnt.c: 586: }
  2669  000490  D7F5               	goto	l6547
  2670  000492                     l6549:
  2671                           
  2672                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2673  000492  C01D  FFF6         	movff	printf@f,tblptrl
  2674  000496  C01E  FFF7         	movff	printf@f+1,tblptrh
  2675  00049A                     	if	0	;tblptru may be non-zero
  2676  00049A                     	endif
  2677  00049A                     	if	0	;tblptru may be non-zero
  2678  00049A                     	endif
  2679  00049A  0008               	tblrd		*
  2680  00049C  50F5               	movf	tablat,w,c
  2681  00049E  EC63  F011         	call	_isdigit
  2682  0004A2  A0D8               	btfss	status,0,c
  2683  0004A4  D03B               	goto	l6565
  2684                           
  2685                           ;doprnt.c: 598: width = 0;
  2686  0004A6  0E00               	movlw	0
  2687  0004A8  6E37               	movwf	printf@width+1,c
  2688  0004AA  0E00               	movlw	0
  2689  0004AC  6E36               	movwf	printf@width,c
  2690  0004AE  D000               	goto	l6553
  2691  0004B0                     l6553:
  2692                           
  2693                           ;doprnt.c: 600: width *= 10;
  2694  0004B0  C036  F011         	movff	printf@width,___wmul@multiplier
  2695  0004B4  C037  F012         	movff	printf@width+1,___wmul@multiplier+1
  2696  0004B8  0E00               	movlw	0
  2697  0004BA  6E14               	movwf	___wmul@multiplicand+1,c
  2698  0004BC  0E0A               	movlw	10
  2699  0004BE  6E13               	movwf	___wmul@multiplicand,c
  2700  0004C0  EC18  F011         	call	___wmul	;wreg free
  2701  0004C4  C011  F036         	movff	?___wmul,printf@width
  2702  0004C8  C012  F037         	movff	?___wmul+1,printf@width+1
  2703                           
  2704                           ;doprnt.c: 601: width += *f++ - '0';
  2705  0004CC  0ED0               	movlw	208
  2706  0004CE  6E2B               	movwf	??_printf& (0+255),c
  2707  0004D0  0EFF               	movlw	255
  2708  0004D2  6E2C               	movwf	(??_printf+1)& (0+255),c
  2709  0004D4  C01D  FFF6         	movff	printf@f,tblptrl
  2710  0004D8  C01E  FFF7         	movff	printf@f+1,tblptrh
  2711  0004DC                     	if	0	;tblptru may be non-zero
  2712  0004DC                     	endif
  2713  0004DC                     	if	0	;tblptru may be non-zero
  2714  0004DC                     	endif
  2715  0004DC  0008               	tblrd		*
  2716  0004DE  50F5               	movf	tablat,w,c
  2717  0004E0  6E2D               	movwf	(??_printf+2)& (0+255),c
  2718  0004E2  6A2E               	clrf	(??_printf+3)& (0+255),c
  2719  0004E4  502B               	movf	??_printf,w,c
  2720  0004E6  262D               	addwf	??_printf+2,f,c
  2721  0004E8  502C               	movf	??_printf+1,w,c
  2722  0004EA  222E               	addwfc	??_printf+3,f,c
  2723  0004EC  502D               	movf	??_printf+2,w,c
  2724  0004EE  2636               	addwf	printf@width,f,c
  2725  0004F0  502E               	movf	??_printf+3,w,c
  2726  0004F2  2237               	addwfc	printf@width+1,f,c
  2727  0004F4  4A1D               	infsnz	printf@f,f,c
  2728  0004F6  2A1E               	incf	printf@f+1,f,c
  2729                           
  2730                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2731  0004F8  C01D  FFF6         	movff	printf@f,tblptrl
  2732  0004FC  C01E  FFF7         	movff	printf@f+1,tblptrh
  2733  000500                     	if	0	;tblptru may be non-zero
  2734  000500                     	endif
  2735  000500                     	if	0	;tblptru may be non-zero
  2736  000500                     	endif
  2737  000500  0008               	tblrd		*
  2738  000502  50F5               	movf	tablat,w,c
  2739  000504  EC63  F011         	call	_isdigit
  2740  000508  A0D8               	btfss	status,0,c
  2741  00050A  D008               	goto	l6565
  2742  00050C  D7D1               	goto	l6553
  2743                           
  2744                           ;doprnt.c: 608: }
  2745                           ;doprnt.c: 635: switch(c = *f++) {
  2746  00050E  D006               	goto	l6565
  2747                           
  2748                           ;doprnt.c: 638: goto alldone;
  2749                           
  2750                           ;doprnt.c: 637: case 0:
  2751  000510  D148               	goto	l757
  2752                           
  2753                           ;doprnt.c: 698: case 'i':
  2754                           ;doprnt.c: 699: break;
  2755                           
  2756                           ;doprnt.c: 697: case 'd':
  2757  000512  D01B               	goto	l720
  2758  000514                     l6561:
  2759                           
  2760                           ;doprnt.c: 721: flag |= 0x80;
  2761  000514  8E35               	bsf	printf@flag,7,c
  2762                           
  2763                           ;doprnt.c: 723: break;
  2764  000516  D019               	goto	l720
  2765                           
  2766                           ;doprnt.c: 813: continue;
  2767                           
  2768                           ;doprnt.c: 802: default:
  2769  000518  D136               	goto	l6663
  2770                           
  2771                           ;doprnt.c: 822: }
  2772  00051A  D017               	goto	l720
  2773  00051C                     l6565:
  2774  00051C  C01D  FFF6         	movff	printf@f,tblptrl
  2775  000520  C01E  FFF7         	movff	printf@f+1,tblptrh
  2776  000524  4A1D               	infsnz	printf@f,f,c
  2777  000526  2A1E               	incf	printf@f+1,f,c
  2778  000528                     	if	0	;tblptru may be non-zero
  2779  000528                     	endif
  2780  000528                     	if	0	;tblptru may be non-zero
  2781  000528                     	endif
  2782  000528  0008               	tblrd		*
  2783  00052A  CFF5 F038          	movff	tablat,printf@c
  2784  00052E  5038               	movf	printf@c,w,c
  2785                           
  2786                           ; Switch size 1, requested type "space"
  2787                           ; Number of cases is 4, Range of values is 0 to 120
  2788                           ; switch strategies available:
  2789                           ; Name         Instructions Cycles
  2790                           ; simple_byte           13     7 (average)
  2791                           ;	Chosen strategy is simple_byte
  2792  000530  0A00               	xorlw	0	; case 0
  2793  000532  B4D8               	btfsc	status,2,c
  2794  000534  D136               	goto	l757
  2795  000536  0A64               	xorlw	100	; case 100
  2796  000538  B4D8               	btfsc	status,2,c
  2797  00053A  D007               	goto	l720
  2798  00053C  0A0D               	xorlw	13	; case 105
  2799  00053E  B4D8               	btfsc	status,2,c
  2800  000540  D004               	goto	l720
  2801  000542  0A11               	xorlw	17	; case 120
  2802  000544  B4D8               	btfsc	status,2,c
  2803  000546  D7E6               	goto	l6561
  2804  000548  D11E               	goto	l6663
  2805  00054A                     l720:
  2806                           
  2807                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  2808  00054A  BE35               	btfsc	printf@flag,7,c
  2809  00054C  D015               	goto	l6577
  2810                           
  2811                           ;doprnt.c: 1253: {
  2812                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2813  00054E  C030  FFD9         	movff	printf@ap,fsr2l
  2814  000552  C031  FFDA         	movff	printf@ap+1,fsr2h
  2815  000556  CFDE F033          	movff	postinc2,printf@val
  2816  00055A  CFDD F034          	movff	postdec2,printf@val+1
  2817  00055E  0E02               	movlw	2
  2818  000560  2630               	addwf	printf@ap,f,c
  2819  000562  0E00               	movlw	0
  2820  000564  2231               	addwfc	printf@ap+1,f,c
  2821                           
  2822                           ;doprnt.c: 1261: if((int)val < 0) {
  2823  000566  AE34               	btfss	printf@val+1,7,c
  2824  000568  D04E               	goto	l6611
  2825                           
  2826                           ;doprnt.c: 1262: flag |= 0x03;
  2827  00056A  0E03               	movlw	3
  2828  00056C  1235               	iorwf	printf@flag,f,c
  2829                           
  2830                           ;doprnt.c: 1263: val = -val;
  2831  00056E  6C33               	negf	printf@val,c
  2832  000570  1E34               	comf	printf@val+1,f,c
  2833  000572  B0D8               	btfsc	status,0,c
  2834  000574  2A34               	incf	printf@val+1,f,c
  2835                           
  2836                           ;doprnt.c: 1264: }
  2837                           ;doprnt.c: 1266: }
  2838  000576  D047               	goto	l6611
  2839  000578                     l6577:
  2840                           
  2841                           ;doprnt.c: 1268: else
  2842                           ;doprnt.c: 1273: {
  2843                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2844  000578  C030  FFD9         	movff	printf@ap,fsr2l
  2845  00057C  C031  FFDA         	movff	printf@ap+1,fsr2h
  2846  000580  CFDE F033          	movff	postinc2,printf@val
  2847  000584  CFDD F034          	movff	postdec2,printf@val+1
  2848  000588  0E02               	movlw	2
  2849  00058A  2630               	addwf	printf@ap,f,c
  2850  00058C  0E00               	movlw	0
  2851  00058E  2231               	addwfc	printf@ap+1,f,c
  2852                           
  2853                           ;doprnt.c: 1287: }
  2854                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  2855  000590  D03A               	goto	l6611
  2856  000592                     l6581:
  2857                           
  2858                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2859  000592  0E01               	movlw	1
  2860  000594  6E38               	movwf	printf@c,c
  2861  000596                     l6583:
  2862  000596  0E05               	movlw	5
  2863  000598  1838               	xorwf	printf@c,w,c
  2864  00059A  B4D8               	btfsc	status,2,c
  2865  00059C  D03D               	goto	l6613
  2866  00059E  D001               	goto	l6587
  2867  0005A0  D03B               	goto	l6613
  2868  0005A2                     l6587:
  2869                           
  2870                           ;doprnt.c: 1306: if(val < dpowers[c])
  2871  0005A2  5038               	movf	printf@c,w,c
  2872  0005A4  0D02               	mullw	2
  2873  0005A6  0E02               	movlw	low _dpowers
  2874  0005A8  24F3               	addwf	prodl,w,c
  2875  0005AA  6EF6               	movwf	tblptrl,c
  2876  0005AC  0EFF               	movlw	high _dpowers
  2877  0005AE  20F4               	addwfc	prodh,w,c
  2878  0005B0  6EF7               	movwf	tblptrh,c
  2879  0005B2                     	if	0	;There are less than 3 active tblptr bytes
  2880  0005B2                     	endif
  2881  0005B2  0009               	tblrd		*+
  2882  0005B4  50F5               	movf	tablat,w,c
  2883  0005B6  5C33               	subwf	printf@val,w,c
  2884  0005B8  0009               	tblrd		*+
  2885  0005BA  50F5               	movf	tablat,w,c
  2886  0005BC  5834               	subwfb	printf@val+1,w,c
  2887  0005BE  A0D8               	btfss	status,0,c
  2888  0005C0  D02B               	goto	l6613
  2889  0005C2  D001               	goto	l6591
  2890                           
  2891                           ;doprnt.c: 1307: break;
  2892  0005C4  D029               	goto	l6613
  2893  0005C6                     l6591:
  2894  0005C6  2A38               	incf	printf@c,f,c
  2895  0005C8  D7E6               	goto	l6583
  2896                           
  2897                           ;doprnt.c: 1309: break;
  2898  0005CA  D026               	goto	l6613
  2899  0005CC                     l6595:
  2900                           
  2901                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2902  0005CC  0E01               	movlw	1
  2903  0005CE  6E38               	movwf	printf@c,c
  2904  0005D0                     l6597:
  2905  0005D0  0E04               	movlw	4
  2906  0005D2  1838               	xorwf	printf@c,w,c
  2907  0005D4  B4D8               	btfsc	status,2,c
  2908  0005D6  D020               	goto	l6613
  2909  0005D8  D001               	goto	l6601
  2910  0005DA  D01E               	goto	l6613
  2911  0005DC                     l6601:
  2912                           
  2913                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2914  0005DC  5038               	movf	printf@c,w,c
  2915  0005DE  0D02               	mullw	2
  2916  0005E0  0E0C               	movlw	low _hexpowers
  2917  0005E2  24F3               	addwf	prodl,w,c
  2918  0005E4  6EF6               	movwf	tblptrl,c
  2919  0005E6  0EFF               	movlw	high _hexpowers
  2920  0005E8  20F4               	addwfc	prodh,w,c
  2921  0005EA  6EF7               	movwf	tblptrh,c
  2922  0005EC                     	if	0	;There are less than 3 active tblptr bytes
  2923  0005EC                     	endif
  2924  0005EC  0009               	tblrd		*+
  2925  0005EE  50F5               	movf	tablat,w,c
  2926  0005F0  5C33               	subwf	printf@val,w,c
  2927  0005F2  0009               	tblrd		*+
  2928  0005F4  50F5               	movf	tablat,w,c
  2929  0005F6  5834               	subwfb	printf@val+1,w,c
  2930  0005F8  A0D8               	btfss	status,0,c
  2931  0005FA  D00E               	goto	l6613
  2932  0005FC  D001               	goto	l6605
  2933                           
  2934                           ;doprnt.c: 1318: break;
  2935  0005FE  D00C               	goto	l6613
  2936  000600                     l6605:
  2937  000600  2A38               	incf	printf@c,f,c
  2938  000602  D7E6               	goto	l6597
  2939                           
  2940                           ;doprnt.c: 1336: }
  2941                           
  2942                           ;doprnt.c: 1320: break;
  2943  000604  D009               	goto	l6613
  2944  000606                     l6611:
  2945  000606  5035               	movf	printf@flag,w,c
  2946  000608  0B80               	andlw	128
  2947                           
  2948                           ; Switch size 1, requested type "space"
  2949                           ; Number of cases is 2, Range of values is 0 to 128
  2950                           ; switch strategies available:
  2951                           ; Name         Instructions Cycles
  2952                           ; simple_byte            7     4 (average)
  2953                           ;	Chosen strategy is simple_byte
  2954  00060A  0A00               	xorlw	0	; case 0
  2955  00060C  B4D8               	btfsc	status,2,c
  2956  00060E  D7C1               	goto	l6581
  2957  000610  0A80               	xorlw	128	; case 128
  2958  000612  B4D8               	btfsc	status,2,c
  2959  000614  D7DB               	goto	l6595
  2960  000616  D000               	goto	l6613
  2961  000618                     l6613:
  2962                           
  2963                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2964  000618  5036               	movf	printf@width,w,c
  2965  00061A  1037               	iorwf	printf@width+1,w,c
  2966  00061C  B4D8               	btfsc	status,2,c
  2967  00061E  D00A               	goto	l6619
  2968  000620  C035  F02B         	movff	printf@flag,??_printf
  2969  000624  0E03               	movlw	3
  2970  000626  162B               	andwf	??_printf,f,c
  2971  000628  B4D8               	btfsc	status,2,c
  2972  00062A  D004               	goto	l6619
  2973                           
  2974                           ;doprnt.c: 1346: width--;
  2975  00062C  0636               	decf	printf@width,f,c
  2976  00062E  A0D8               	btfss	status,0,c
  2977  000630  0637               	decf	printf@width+1,f,c
  2978  000632  D000               	goto	l6619
  2979  000634                     l6619:
  2980                           
  2981                           ;doprnt.c: 1381: if(width > c)
  2982  000634  0E80               	movlw	128
  2983  000636  BE38               	btfsc	printf@c,7,c
  2984  000638  0E7F               	movlw	127
  2985  00063A  6E2B               	movwf	??_printf& (0+255),c
  2986  00063C  5036               	movf	printf@width,w,c
  2987  00063E  5C38               	subwf	printf@c,w,c
  2988  000640  5037               	movf	printf@width+1,w,c
  2989  000642  0A80               	xorlw	128
  2990  000644  582B               	subwfb	??_printf& (0+255),w,c
  2991  000646  B0D8               	btfsc	status,0,c
  2992  000648  D007               	goto	l6623
  2993                           
  2994                           ;doprnt.c: 1382: width -= c;
  2995  00064A  5038               	movf	printf@c,w,c
  2996  00064C  5E36               	subwf	printf@width,f,c
  2997  00064E  0E00               	movlw	0
  2998  000650  BE38               	btfsc	printf@c,7,c
  2999  000652  0EFF               	movlw	255
  3000  000654  5A37               	subwfb	printf@width+1,f,c
  3001  000656  D005               	goto	l6625
  3002  000658                     l6623:
  3003                           
  3004                           ;doprnt.c: 1383: else
  3005                           ;doprnt.c: 1384: width = 0;
  3006  000658  0E00               	movlw	0
  3007  00065A  6E37               	movwf	printf@width+1,c
  3008  00065C  0E00               	movlw	0
  3009  00065E  6E36               	movwf	printf@width,c
  3010  000660  D000               	goto	l6625
  3011  000662                     l6625:
  3012                           
  3013                           ;doprnt.c: 1387: if(flag & 0x04) {
  3014  000662  A435               	btfss	printf@flag,2,c
  3015  000664  D01A               	goto	l6637
  3016                           
  3017                           ;doprnt.c: 1392: if(flag & 0x03)
  3018  000666  C035  F02B         	movff	printf@flag,??_printf
  3019  00066A  0E03               	movlw	3
  3020  00066C  162B               	andwf	??_printf,f,c
  3021  00066E  B4D8               	btfsc	status,2,c
  3022  000670  D004               	goto	l6631
  3023                           
  3024                           ;doprnt.c: 1393: (putch('-') );
  3025  000672  0E2D               	movlw	45
  3026  000674  EC4D  F012         	call	_putch
  3027  000678  D000               	goto	l6631
  3028  00067A                     l6631:
  3029                           
  3030                           ;doprnt.c: 1415: if(width)
  3031  00067A  5036               	movf	printf@width,w,c
  3032  00067C  1037               	iorwf	printf@width+1,w,c
  3033  00067E  B4D8               	btfsc	status,2,c
  3034  000680  D026               	goto	l6647
  3035  000682                     l6633:
  3036                           
  3037                           ;doprnt.c: 1417: (putch('0') );
  3038  000682  0E30               	movlw	48
  3039  000684  EC4D  F012         	call	_putch
  3040                           
  3041                           ;doprnt.c: 1418: while(--width);
  3042  000688  0636               	decf	printf@width,f,c
  3043  00068A  A0D8               	btfss	status,0,c
  3044  00068C  0637               	decf	printf@width+1,f,c
  3045  00068E  5036               	movf	printf@width,w,c
  3046  000690  1037               	iorwf	printf@width+1,w,c
  3047  000692  B4D8               	btfsc	status,2,c
  3048  000694  D01C               	goto	l6647
  3049  000696  D7F5               	goto	l6633
  3050                           
  3051                           ;doprnt.c: 1420: } else
  3052  000698  D01A               	goto	l6647
  3053  00069A                     l6637:
  3054                           
  3055                           ;doprnt.c: 1422: {
  3056                           ;doprnt.c: 1424: if(width
  3057                           ;doprnt.c: 1428: )
  3058  00069A  5036               	movf	printf@width,w,c
  3059  00069C  1037               	iorwf	printf@width+1,w,c
  3060  00069E  B4D8               	btfsc	status,2,c
  3061  0006A0  D00C               	goto	l6643
  3062  0006A2                     l6639:
  3063                           
  3064                           ;doprnt.c: 1430: (putch(' ') );
  3065  0006A2  0E20               	movlw	32
  3066  0006A4  EC4D  F012         	call	_putch
  3067                           
  3068                           ;doprnt.c: 1431: while(--width);
  3069  0006A8  0636               	decf	printf@width,f,c
  3070  0006AA  A0D8               	btfss	status,0,c
  3071  0006AC  0637               	decf	printf@width+1,f,c
  3072  0006AE  5036               	movf	printf@width,w,c
  3073  0006B0  1037               	iorwf	printf@width+1,w,c
  3074  0006B2  B4D8               	btfsc	status,2,c
  3075  0006B4  D002               	goto	l6643
  3076  0006B6  D7F5               	goto	l6639
  3077  0006B8  D000               	goto	l6643
  3078  0006BA                     l6643:
  3079                           
  3080                           ;doprnt.c: 1438: if(flag & 0x03)
  3081  0006BA  C035  F02B         	movff	printf@flag,??_printf
  3082  0006BE  0E03               	movlw	3
  3083  0006C0  162B               	andwf	??_printf,f,c
  3084  0006C2  B4D8               	btfsc	status,2,c
  3085  0006C4  D004               	goto	l6647
  3086                           
  3087                           ;doprnt.c: 1439: (putch('-') );
  3088  0006C6  0E2D               	movlw	45
  3089  0006C8  EC4D  F012         	call	_putch
  3090  0006CC  D000               	goto	l6647
  3091  0006CE                     l6647:
  3092                           
  3093                           ;doprnt.c: 1469: }
  3094                           ;doprnt.c: 1472: prec = c;
  3095  0006CE  C038  F032         	movff	printf@c,printf@prec
  3096                           
  3097                           ;doprnt.c: 1474: while(prec--) {
  3098  0006D2  D053               	goto	l6661
  3099                           
  3100                           ;doprnt.c: 1476: switch((unsigned char)(flag & 0x80))
  3101  0006D4  D045               	goto	l6657
  3102  0006D6                     l6649:
  3103                           
  3104                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3105  0006D6  5032               	movf	printf@prec,w,c
  3106  0006D8  0D02               	mullw	2
  3107  0006DA  0E02               	movlw	low _dpowers
  3108  0006DC  24F3               	addwf	prodl,w,c
  3109  0006DE  6EF6               	movwf	tblptrl,c
  3110  0006E0  0EFF               	movlw	high _dpowers
  3111  0006E2  20F4               	addwfc	prodh,w,c
  3112  0006E4  6EF7               	movwf	tblptrh,c
  3113  0006E6                     	if	0	;There are less than 3 active tblptr bytes
  3114  0006E6                     	endif
  3115  0006E6  0009               	tblrd		*+
  3116  0006E8  CFF5 F013          	movff	tablat,___lwdiv@divisor
  3117  0006EC  000A               	tblrd		*-
  3118  0006EE  CFF5 F014          	movff	tablat,___lwdiv@divisor+1
  3119  0006F2  C033  F011         	movff	printf@val,___lwdiv@dividend
  3120  0006F6  C034  F012         	movff	printf@val+1,___lwdiv@dividend+1
  3121  0006FA  EC0B  F00F         	call	___lwdiv	;wreg free
  3122  0006FE  C011  F018         	movff	?___lwdiv,___lwmod@dividend
  3123  000702  C012  F019         	movff	?___lwdiv+1,___lwmod@dividend+1
  3124  000706  0E00               	movlw	0
  3125  000708  6E1B               	movwf	___lwmod@divisor+1,c
  3126  00070A  0E0A               	movlw	10
  3127  00070C  6E1A               	movwf	___lwmod@divisor,c
  3128  00070E  EC89  F00F         	call	___lwmod	;wreg free
  3129  000712  5018               	movf	?___lwmod,w,c
  3130  000714  0F30               	addlw	48
  3131  000716  6E38               	movwf	printf@c,c
  3132                           
  3133                           ;doprnt.c: 1491: break;
  3134  000718  D02C               	goto	l6659
  3135  00071A                     l6651:
  3136                           
  3137                           ;doprnt.c: 1499: {
  3138                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  3139  00071A  C033  F011         	movff	printf@val,___lwdiv@dividend
  3140  00071E  C034  F012         	movff	printf@val+1,___lwdiv@dividend+1
  3141  000722  5032               	movf	printf@prec,w,c
  3142  000724  0D02               	mullw	2
  3143  000726  0E0C               	movlw	low _hexpowers
  3144  000728  24F3               	addwf	prodl,w,c
  3145  00072A  6EF6               	movwf	tblptrl,c
  3146  00072C  0EFF               	movlw	high _hexpowers
  3147  00072E  20F4               	addwfc	prodh,w,c
  3148  000730  6EF7               	movwf	tblptrh,c
  3149  000732                     	if	0	;There are less than 3 active tblptr bytes
  3150  000732                     	endif
  3151  000732  0009               	tblrd		*+
  3152  000734  CFF5 F013          	movff	tablat,___lwdiv@divisor
  3153  000738  000A               	tblrd		*-
  3154  00073A  CFF5 F014          	movff	tablat,___lwdiv@divisor+1
  3155  00073E  EC0B  F00F         	call	___lwdiv	;wreg free
  3156  000742  5011               	movf	?___lwdiv,w,c
  3157  000744  0B0F               	andlw	15
  3158  000746  6E2F               	movwf	printf@idx,c
  3159                           
  3160                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  3161  000748  502F               	movf	printf@idx,w,c
  3162  00074A  0D01               	mullw	1
  3163  00074C  0E9F               	movlw	low STR_19
  3164  00074E  24F3               	addwf	prodl,w,c
  3165  000750  6EF6               	movwf	tblptrl,c
  3166  000752  0EFF               	movlw	high STR_19
  3167  000754  20F4               	addwfc	prodh,w,c
  3168  000756  6EF7               	movwf	tblptrh,c
  3169  000758                     	if	0	;There are less than 3 active tblptr bytes
  3170  000758                     	endif
  3171  000758  0008               	tblrd		*
  3172  00075A  CFF5 F038          	movff	tablat,printf@c
  3173                           
  3174                           ;doprnt.c: 1523: }
  3175                           
  3176                           ;doprnt.c: 1508: }
  3177                           ;doprnt.c: 1510: break;
  3178  00075E  D009               	goto	l6659
  3179  000760                     l6657:
  3180  000760  5035               	movf	printf@flag,w,c
  3181  000762  0B80               	andlw	128
  3182                           
  3183                           ; Switch size 1, requested type "space"
  3184                           ; Number of cases is 2, Range of values is 0 to 128
  3185                           ; switch strategies available:
  3186                           ; Name         Instructions Cycles
  3187                           ; simple_byte            7     4 (average)
  3188                           ;	Chosen strategy is simple_byte
  3189  000764  0A00               	xorlw	0	; case 0
  3190  000766  B4D8               	btfsc	status,2,c
  3191  000768  D7B6               	goto	l6649
  3192  00076A  0A80               	xorlw	128	; case 128
  3193  00076C  B4D8               	btfsc	status,2,c
  3194  00076E  D7D5               	goto	l6651
  3195  000770  D000               	goto	l6659
  3196  000772                     l6659:
  3197                           
  3198                           ;doprnt.c: 1524: (putch(c) );
  3199  000772  5038               	movf	printf@c,w,c
  3200  000774  EC4D  F012         	call	_putch
  3201  000778  D000               	goto	l6661
  3202  00077A                     l6661:
  3203  00077A  0632               	decf	printf@prec,f,c
  3204  00077C  2832               	incf	printf@prec,w,c
  3205  00077E  B4D8               	btfsc	status,2,c
  3206  000780  D002               	goto	l6663
  3207  000782  D7EE               	goto	l6657
  3208  000784  D000               	goto	l6663
  3209  000786                     l6663:
  3210  000786  C01D  FFF6         	movff	printf@f,tblptrl
  3211  00078A  C01E  FFF7         	movff	printf@f+1,tblptrh
  3212  00078E  4A1D               	infsnz	printf@f,f,c
  3213  000790  2A1E               	incf	printf@f+1,f,c
  3214  000792                     	if	0	;tblptru may be non-zero
  3215  000792                     	endif
  3216  000792                     	if	0	;tblptru may be non-zero
  3217  000792                     	endif
  3218  000792  0008               	tblrd		*
  3219  000794  CFF5 F038          	movff	tablat,printf@c
  3220  000798  5038               	movf	printf@c,w,c
  3221  00079A  B4D8               	btfsc	status,2,c
  3222  00079C  D002               	goto	l757
  3223  00079E  D65A               	goto	l6537
  3224  0007A0  D000               	goto	l757
  3225  0007A2                     l757:
  3226  0007A2  0012               	return		;funcret
  3227  0007A4                     __end_of_printf:
  3228                           	opt stack 0
  3229                           tblptru	equ	0xFF8
  3230                           tblptrh	equ	0xFF7
  3231                           tblptrl	equ	0xFF6
  3232                           tablat	equ	0xFF5
  3233                           prodh	equ	0xFF4
  3234                           prodl	equ	0xFF3
  3235                           intcon	equ	0xFF2
  3236                           intcon2	equ	0xFF1
  3237                           postinc0	equ	0xFEE
  3238                           wreg	equ	0xFE8
  3239                           postdec1	equ	0xFE5
  3240                           fsr1l	equ	0xFE1
  3241                           postinc2	equ	0xFDE
  3242                           postdec2	equ	0xFDD
  3243                           fsr2h	equ	0xFDA
  3244                           fsr2l	equ	0xFD9
  3245                           status	equ	0xFD8
  3246                           
  3247 ;; *************** function _putch *****************
  3248 ;; Defined at:
  3249 ;;		line 89 in file "Lab11pA_J.c"
  3250 ;; Parameters:    Size  Location     Type
  3251 ;;  c               1    wreg     unsigned char 
  3252 ;; Auto vars:     Size  Location     Type
  3253 ;;  c               1   16[COMRAM] unsigned char 
  3254 ;; Return value:  Size  Location     Type
  3255 ;;		None               void
  3256 ;; Registers used:
  3257 ;;		wreg
  3258 ;; Tracked objects:
  3259 ;;		On entry : 0/0
  3260 ;;		On exit  : 0/0
  3261 ;;		Unchanged: 0/0
  3262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3263 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3264 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3265 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3266 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3267 ;;Total ram usage:        1 bytes
  3268 ;; Hardware stack levels used:    1
  3269 ;; Hardware stack levels required when called:    3
  3270 ;; This function calls:
  3271 ;;		Nothing
  3272 ;; This function is called by:
  3273 ;;		_printf
  3274 ;; This function uses a non-reentrant model
  3275 ;;
  3276                           
  3277                           	psect	text2
  3278  00249A                     __ptext2:
  3279                           	opt stack 0
  3280  00249A                     _putch:
  3281                           	opt stack 26
  3282                           
  3283                           ;incstack = 0
  3284                           ;putch@c stored from wreg
  3285  00249A  6E11               	movwf	putch@c,c
  3286                           
  3287                           ;Lab11pA_J.c: 91: while (!TRMT);
  3288  00249C  D000               	goto	l661
  3289  00249E                     l661:
  3290  00249E  A2AC               	btfss	4012,1,c	;volatile
  3291  0024A0  D7FE               	goto	l661
  3292                           
  3293                           ;Lab11pA_J.c: 92: TXREG = c;
  3294  0024A2  C011  FFAD         	movff	putch@c,4013	;volatile
  3295  0024A6  0012               	return		;funcret
  3296  0024A8                     __end_of_putch:
  3297                           	opt stack 0
  3298                           tblptru	equ	0xFF8
  3299                           tblptrh	equ	0xFF7
  3300                           tblptrl	equ	0xFF6
  3301                           tablat	equ	0xFF5
  3302                           prodh	equ	0xFF4
  3303                           prodl	equ	0xFF3
  3304                           intcon	equ	0xFF2
  3305                           intcon2	equ	0xFF1
  3306                           postinc0	equ	0xFEE
  3307                           wreg	equ	0xFE8
  3308                           postdec1	equ	0xFE5
  3309                           fsr1l	equ	0xFE1
  3310                           postinc2	equ	0xFDE
  3311                           postdec2	equ	0xFDD
  3312                           fsr2h	equ	0xFDA
  3313                           fsr2l	equ	0xFD9
  3314                           status	equ	0xFD8
  3315                           
  3316 ;; *************** function _isdigit *****************
  3317 ;; Defined at:
  3318 ;;		line 8 in file "E:\XC8\sources\common\isdigit.c"
  3319 ;; Parameters:    Size  Location     Type
  3320 ;;  c               1    wreg     unsigned char 
  3321 ;; Auto vars:     Size  Location     Type
  3322 ;;  c               1   18[COMRAM] unsigned char 
  3323 ;; Return value:  Size  Location     Type
  3324 ;;		None               void
  3325 ;; Registers used:
  3326 ;;		wreg, status,2, status,0
  3327 ;; Tracked objects:
  3328 ;;		On entry : 0/0
  3329 ;;		On exit  : 0/0
  3330 ;;		Unchanged: 0/0
  3331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3332 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3333 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3334 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3335 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3336 ;;Total ram usage:        3 bytes
  3337 ;; Hardware stack levels used:    1
  3338 ;; Hardware stack levels required when called:    3
  3339 ;; This function calls:
  3340 ;;		Nothing
  3341 ;; This function is called by:
  3342 ;;		_printf
  3343 ;; This function uses a non-reentrant model
  3344 ;;
  3345                           
  3346                           	psect	text3
  3347  0022C6                     __ptext3:
  3348                           	opt stack 0
  3349  0022C6                     _isdigit:
  3350                           	opt stack 26
  3351                           
  3352                           ;incstack = 0
  3353                           ;isdigit@c stored from wreg
  3354  0022C6  6E13               	movwf	isdigit@c,c
  3355  0022C8  0E00               	movlw	0
  3356  0022CA  6E12               	movwf	_isdigit$2055,c
  3357  0022CC  0E3A               	movlw	58
  3358  0022CE  6013               	cpfslt	isdigit@c,c
  3359  0022D0  D006               	goto	l6057
  3360  0022D2  0E2F               	movlw	47
  3361  0022D4  6413               	cpfsgt	isdigit@c,c
  3362  0022D6  D003               	goto	l6057
  3363  0022D8  0E01               	movlw	1
  3364  0022DA  6E12               	movwf	_isdigit$2055,c
  3365  0022DC  D000               	goto	l6057
  3366  0022DE                     l6057:
  3367  0022DE  C012  F011         	movff	_isdigit$2055,??_isdigit
  3368  0022E2  3011               	rrcf	??_isdigit,w,c
  3369  0022E4  D000               	goto	l1224
  3370  0022E6                     l1224:
  3371  0022E6  0012               	return		;funcret
  3372  0022E8                     __end_of_isdigit:
  3373                           	opt stack 0
  3374                           tblptru	equ	0xFF8
  3375                           tblptrh	equ	0xFF7
  3376                           tblptrl	equ	0xFF6
  3377                           tablat	equ	0xFF5
  3378                           prodh	equ	0xFF4
  3379                           prodl	equ	0xFF3
  3380                           intcon	equ	0xFF2
  3381                           intcon2	equ	0xFF1
  3382                           postinc0	equ	0xFEE
  3383                           wreg	equ	0xFE8
  3384                           postdec1	equ	0xFE5
  3385                           fsr1l	equ	0xFE1
  3386                           postinc2	equ	0xFDE
  3387                           postdec2	equ	0xFDD
  3388                           fsr2h	equ	0xFDA
  3389                           fsr2l	equ	0xFD9
  3390                           status	equ	0xFD8
  3391                           
  3392 ;; *************** function ___lwmod *****************
  3393 ;; Defined at:
  3394 ;;		line 8 in file "E:\XC8\sources\common\lwmod.c"
  3395 ;; Parameters:    Size  Location     Type
  3396 ;;  dividend        2   23[COMRAM] unsigned int 
  3397 ;;  divisor         2   25[COMRAM] unsigned int 
  3398 ;; Auto vars:     Size  Location     Type
  3399 ;;  counter         1   27[COMRAM] unsigned char 
  3400 ;; Return value:  Size  Location     Type
  3401 ;;                  2   23[COMRAM] unsigned int 
  3402 ;; Registers used:
  3403 ;;		wreg, status,2, status,0
  3404 ;; Tracked objects:
  3405 ;;		On entry : 0/0
  3406 ;;		On exit  : 0/0
  3407 ;;		Unchanged: 0/0
  3408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3409 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3410 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3411 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3412 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3413 ;;Total ram usage:        5 bytes
  3414 ;; Hardware stack levels used:    1
  3415 ;; Hardware stack levels required when called:    3
  3416 ;; This function calls:
  3417 ;;		Nothing
  3418 ;; This function is called by:
  3419 ;;		_printf
  3420 ;; This function uses a non-reentrant model
  3421 ;;
  3422                           
  3423                           	psect	text4
  3424  001F12                     __ptext4:
  3425                           	opt stack 0
  3426  001F12                     ___lwmod:
  3427                           	opt stack 26
  3428                           
  3429                           ;incstack = 0
  3430  001F12  501A               	movf	___lwmod@divisor,w,c
  3431  001F14  101B               	iorwf	___lwmod@divisor+1,w,c
  3432  001F16  B4D8               	btfsc	status,2,c
  3433  001F18  D01D               	goto	l1326
  3434  001F1A  0E01               	movlw	1
  3435  001F1C  6E1C               	movwf	___lwmod@counter,c
  3436  001F1E  D005               	goto	l6169
  3437  001F20                     l6167:
  3438  001F20  90D8               	bcf	status,0,c
  3439  001F22  361A               	rlcf	___lwmod@divisor,f,c
  3440  001F24  361B               	rlcf	___lwmod@divisor+1,f,c
  3441  001F26  2A1C               	incf	___lwmod@counter,f,c
  3442  001F28  D000               	goto	l6169
  3443  001F2A                     l6169:
  3444  001F2A  BE1B               	btfsc	___lwmod@divisor+1,7,c
  3445  001F2C  D002               	goto	l6171
  3446  001F2E  D7F8               	goto	l6167
  3447  001F30  D000               	goto	l6171
  3448  001F32                     l6171:
  3449  001F32  501A               	movf	___lwmod@divisor,w,c
  3450  001F34  5C18               	subwf	___lwmod@dividend,w,c
  3451  001F36  501B               	movf	___lwmod@divisor+1,w,c
  3452  001F38  5819               	subwfb	___lwmod@dividend+1,w,c
  3453  001F3A  A0D8               	btfss	status,0,c
  3454  001F3C  D005               	goto	l6175
  3455  001F3E  501A               	movf	___lwmod@divisor,w,c
  3456  001F40  5E18               	subwf	___lwmod@dividend,f,c
  3457  001F42  501B               	movf	___lwmod@divisor+1,w,c
  3458  001F44  5A19               	subwfb	___lwmod@dividend+1,f,c
  3459  001F46  D000               	goto	l6175
  3460  001F48                     l6175:
  3461  001F48  90D8               	bcf	status,0,c
  3462  001F4A  321B               	rrcf	___lwmod@divisor+1,f,c
  3463  001F4C  321A               	rrcf	___lwmod@divisor,f,c
  3464  001F4E  2E1C               	decfsz	___lwmod@counter,f,c
  3465  001F50  D7F0               	goto	l6171
  3466  001F52  D000               	goto	l1326
  3467  001F54                     l1326:
  3468  001F54  C018  F018         	movff	___lwmod@dividend,?___lwmod
  3469  001F58  C019  F019         	movff	___lwmod@dividend+1,?___lwmod+1
  3470  001F5C  0012               	return		;funcret
  3471  001F5E                     __end_of___lwmod:
  3472                           	opt stack 0
  3473                           tblptru	equ	0xFF8
  3474                           tblptrh	equ	0xFF7
  3475                           tblptrl	equ	0xFF6
  3476                           tablat	equ	0xFF5
  3477                           prodh	equ	0xFF4
  3478                           prodl	equ	0xFF3
  3479                           intcon	equ	0xFF2
  3480                           intcon2	equ	0xFF1
  3481                           postinc0	equ	0xFEE
  3482                           wreg	equ	0xFE8
  3483                           postdec1	equ	0xFE5
  3484                           fsr1l	equ	0xFE1
  3485                           postinc2	equ	0xFDE
  3486                           postdec2	equ	0xFDD
  3487                           fsr2h	equ	0xFDA
  3488                           fsr2l	equ	0xFD9
  3489                           status	equ	0xFD8
  3490                           
  3491 ;; *************** function ___lwdiv *****************
  3492 ;; Defined at:
  3493 ;;		line 8 in file "E:\XC8\sources\common\lwdiv.c"
  3494 ;; Parameters:    Size  Location     Type
  3495 ;;  dividend        2   16[COMRAM] unsigned int 
  3496 ;;  divisor         2   18[COMRAM] unsigned int 
  3497 ;; Auto vars:     Size  Location     Type
  3498 ;;  quotient        2   21[COMRAM] unsigned int 
  3499 ;;  counter         1   20[COMRAM] unsigned char 
  3500 ;; Return value:  Size  Location     Type
  3501 ;;                  2   16[COMRAM] unsigned int 
  3502 ;; Registers used:
  3503 ;;		wreg, status,2, status,0
  3504 ;; Tracked objects:
  3505 ;;		On entry : 0/0
  3506 ;;		On exit  : 0/0
  3507 ;;		Unchanged: 0/0
  3508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3509 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3510 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3511 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3512 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3513 ;;Total ram usage:        7 bytes
  3514 ;; Hardware stack levels used:    1
  3515 ;; Hardware stack levels required when called:    3
  3516 ;; This function calls:
  3517 ;;		Nothing
  3518 ;; This function is called by:
  3519 ;;		_printf
  3520 ;; This function uses a non-reentrant model
  3521 ;;
  3522                           
  3523                           	psect	text5
  3524  001E16                     __ptext5:
  3525                           	opt stack 0
  3526  001E16                     ___lwdiv:
  3527                           	opt stack 26
  3528                           
  3529                           ;incstack = 0
  3530  001E16  0E00               	movlw	0
  3531  001E18  6E17               	movwf	___lwdiv@quotient+1,c
  3532  001E1A  0E00               	movlw	0
  3533  001E1C  6E16               	movwf	___lwdiv@quotient,c
  3534  001E1E  5013               	movf	___lwdiv@divisor,w,c
  3535  001E20  1014               	iorwf	___lwdiv@divisor+1,w,c
  3536  001E22  B4D8               	btfsc	status,2,c
  3537  001E24  D021               	goto	l1316
  3538  001E26  0E01               	movlw	1
  3539  001E28  6E15               	movwf	___lwdiv@counter,c
  3540  001E2A  D005               	goto	l6149
  3541  001E2C                     l6147:
  3542  001E2C  90D8               	bcf	status,0,c
  3543  001E2E  3613               	rlcf	___lwdiv@divisor,f,c
  3544  001E30  3614               	rlcf	___lwdiv@divisor+1,f,c
  3545  001E32  2A15               	incf	___lwdiv@counter,f,c
  3546  001E34  D000               	goto	l6149
  3547  001E36                     l6149:
  3548  001E36  BE14               	btfsc	___lwdiv@divisor+1,7,c
  3549  001E38  D002               	goto	l6151
  3550  001E3A  D7F8               	goto	l6147
  3551  001E3C  D000               	goto	l6151
  3552  001E3E                     l6151:
  3553  001E3E  90D8               	bcf	status,0,c
  3554  001E40  3616               	rlcf	___lwdiv@quotient,f,c
  3555  001E42  3617               	rlcf	___lwdiv@quotient+1,f,c
  3556  001E44  5013               	movf	___lwdiv@divisor,w,c
  3557  001E46  5C11               	subwf	___lwdiv@dividend,w,c
  3558  001E48  5014               	movf	___lwdiv@divisor+1,w,c
  3559  001E4A  5812               	subwfb	___lwdiv@dividend+1,w,c
  3560  001E4C  A0D8               	btfss	status,0,c
  3561  001E4E  D006               	goto	l6159
  3562  001E50  5013               	movf	___lwdiv@divisor,w,c
  3563  001E52  5E11               	subwf	___lwdiv@dividend,f,c
  3564  001E54  5014               	movf	___lwdiv@divisor+1,w,c
  3565  001E56  5A12               	subwfb	___lwdiv@dividend+1,f,c
  3566  001E58  8016               	bsf	___lwdiv@quotient,0,c
  3567  001E5A  D000               	goto	l6159
  3568  001E5C                     l6159:
  3569  001E5C  90D8               	bcf	status,0,c
  3570  001E5E  3214               	rrcf	___lwdiv@divisor+1,f,c
  3571  001E60  3213               	rrcf	___lwdiv@divisor,f,c
  3572  001E62  2E15               	decfsz	___lwdiv@counter,f,c
  3573  001E64  D7EC               	goto	l6151
  3574  001E66  D000               	goto	l1316
  3575  001E68                     l1316:
  3576  001E68  C016  F011         	movff	___lwdiv@quotient,?___lwdiv
  3577  001E6C  C017  F012         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3578  001E70  0012               	return		;funcret
  3579  001E72                     __end_of___lwdiv:
  3580                           	opt stack 0
  3581                           tblptru	equ	0xFF8
  3582                           tblptrh	equ	0xFF7
  3583                           tblptrl	equ	0xFF6
  3584                           tablat	equ	0xFF5
  3585                           prodh	equ	0xFF4
  3586                           prodl	equ	0xFF3
  3587                           intcon	equ	0xFF2
  3588                           intcon2	equ	0xFF1
  3589                           postinc0	equ	0xFEE
  3590                           wreg	equ	0xFE8
  3591                           postdec1	equ	0xFE5
  3592                           fsr1l	equ	0xFE1
  3593                           postinc2	equ	0xFDE
  3594                           postdec2	equ	0xFDD
  3595                           fsr2h	equ	0xFDA
  3596                           fsr2l	equ	0xFD9
  3597                           status	equ	0xFD8
  3598                           
  3599 ;; *************** function _get_RPM *****************
  3600 ;; Defined at:
  3601 ;;		line 14 in file "Fan_Support.c"
  3602 ;; Parameters:    Size  Location     Type
  3603 ;;		None
  3604 ;; Auto vars:     Size  Location     Type
  3605 ;;  RPS             2   32[COMRAM] int 
  3606 ;; Return value:  Size  Location     Type
  3607 ;;                  2   30[COMRAM] int 
  3608 ;; Registers used:
  3609 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3610 ;; Tracked objects:
  3611 ;;		On entry : 0/0
  3612 ;;		On exit  : 0/0
  3613 ;;		Unchanged: 0/0
  3614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3615 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3616 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3617 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3618 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3619 ;;Total ram usage:        4 bytes
  3620 ;; Hardware stack levels used:    1
  3621 ;; Hardware stack levels required when called:    4
  3622 ;; This function calls:
  3623 ;;		___awdiv
  3624 ;;		___wmul
  3625 ;; This function is called by:
  3626 ;;		_main
  3627 ;; This function uses a non-reentrant model
  3628 ;;
  3629                           
  3630                           	psect	text6
  3631  00203C                     __ptext6:
  3632                           	opt stack 0
  3633  00203C                     _get_RPM:
  3634                           	opt stack 26
  3635                           
  3636                           ;Fan_Support.c: 16: int RPS = TMR3L / 2;
  3637                           
  3638                           ;incstack = 0
  3639  00203C  CFB2 F017          	movff	4018,___awdiv@dividend	;volatile
  3640  002040  6A18               	clrf	___awdiv@dividend+1,c
  3641  002042  0E00               	movlw	0
  3642  002044  6E1A               	movwf	___awdiv@divisor+1,c
  3643  002046  0E02               	movlw	2
  3644  002048  6E19               	movwf	___awdiv@divisor,c
  3645  00204A  ECB3  F00C         	call	___awdiv	;wreg free
  3646  00204E  C017  F021         	movff	?___awdiv,get_RPM@RPS
  3647  002052  C018  F022         	movff	?___awdiv+1,get_RPM@RPS+1
  3648                           
  3649                           ;Fan_Support.c: 18: TMR3L = 0;
  3650  002056  0E00               	movlw	0
  3651  002058  6EB2               	movwf	4018,c	;volatile
  3652                           
  3653                           ;Fan_Support.c: 19: return (RPS * 60);
  3654  00205A  C021  F011         	movff	get_RPM@RPS,___wmul@multiplier
  3655  00205E  C022  F012         	movff	get_RPM@RPS+1,___wmul@multiplier+1
  3656  002062  0E00               	movlw	0
  3657  002064  6E14               	movwf	___wmul@multiplicand+1,c
  3658  002066  0E3C               	movlw	60
  3659  002068  6E13               	movwf	___wmul@multiplicand,c
  3660  00206A  EC18  F011         	call	___wmul	;wreg free
  3661  00206E  C011  F01F         	movff	?___wmul,?_get_RPM
  3662  002072  C012  F020         	movff	?___wmul+1,?_get_RPM+1
  3663  002076  D000               	goto	l492
  3664  002078                     l492:
  3665  002078  0012               	return		;funcret
  3666  00207A                     __end_of_get_RPM:
  3667                           	opt stack 0
  3668                           tblptru	equ	0xFF8
  3669                           tblptrh	equ	0xFF7
  3670                           tblptrl	equ	0xFF6
  3671                           tablat	equ	0xFF5
  3672                           prodh	equ	0xFF4
  3673                           prodl	equ	0xFF3
  3674                           intcon	equ	0xFF2
  3675                           intcon2	equ	0xFF1
  3676                           postinc0	equ	0xFEE
  3677                           wreg	equ	0xFE8
  3678                           postdec1	equ	0xFE5
  3679                           fsr1l	equ	0xFE1
  3680                           postinc2	equ	0xFDE
  3681                           postdec2	equ	0xFDD
  3682                           fsr2h	equ	0xFDA
  3683                           fsr2l	equ	0xFD9
  3684                           status	equ	0xFD8
  3685                           
  3686 ;; *************** function _Update_Screen *****************
  3687 ;; Defined at:
  3688 ;;		line 69 in file "Main_Screen.c"
  3689 ;; Parameters:    Size  Location     Type
  3690 ;;		None
  3691 ;; Auto vars:     Size  Location     Type
  3692 ;;  neg_tempF       2    9[BANK0 ] int 
  3693 ;; Return value:  Size  Location     Type
  3694 ;;		None               void
  3695 ;; Registers used:
  3696 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3697 ;; Tracked objects:
  3698 ;;		On entry : 0/0
  3699 ;;		On exit  : 0/0
  3700 ;;		Unchanged: 0/0
  3701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3703 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3704 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3705 ;;      Totals:         2       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3706 ;;Total ram usage:        8 bytes
  3707 ;; Hardware stack levels used:    1
  3708 ;; Hardware stack levels required when called:   10
  3709 ;; This function calls:
  3710 ;;		___awdiv
  3711 ;;		___awmod
  3712 ;;		_drawtext
  3713 ;;		_strcpy
  3714 ;; This function is called by:
  3715 ;;		_main
  3716 ;; This function uses a non-reentrant model
  3717 ;;
  3718                           
  3719                           	psect	text7
  3720  00001C                     __ptext7:
  3721                           	opt stack 0
  3722  00001C                     _Update_Screen:
  3723                           	opt stack 20
  3724                           
  3725                           ;Main_Screen.c: 71: if ((DS1621_tempC & 0x80) == 0x80)
  3726                           
  3727                           ;incstack = 0
  3728  00001C  AE46               	btfss	_DS1621_tempC,7,c
  3729  00001E  D01C               	goto	l6361
  3730                           
  3731                           ;Main_Screen.c: 72: {
  3732                           ;Main_Screen.c: 73: tempC[0] = '-';
  3733  000020  0E2D               	movlw	45
  3734  000022  0100               	movlb	0	; () banked
  3735  000024  6FDE               	movwf	_tempC& (0+255),b
  3736                           
  3737                           ; BSR set to: 0
  3738                           ;Main_Screen.c: 74: tempC[1] = (DS1621_tempC & 0x7f)/10 + '0';
  3739  000026  0E7F               	movlw	127
  3740  000028  1446               	andwf	_DS1621_tempC,w,c
  3741  00002A  6E17               	movwf	___awdiv@dividend,c
  3742  00002C  6A18               	clrf	___awdiv@dividend+1,c
  3743  00002E  0E00               	movlw	0
  3744  000030  6E1A               	movwf	___awdiv@divisor+1,c
  3745  000032  0E0A               	movlw	10
  3746  000034  6E19               	movwf	___awdiv@divisor,c
  3747  000036  ECB3  F00C         	call	___awdiv	;wreg free
  3748  00003A  5017               	movf	?___awdiv,w,c
  3749  00003C  0F30               	addlw	48
  3750  00003E  0100               	movlb	0	; () banked
  3751  000040  6FDF               	movwf	(_tempC+1)& (0+255),b
  3752                           
  3753                           ; BSR set to: 0
  3754                           ;Main_Screen.c: 75: tempC[2] = (DS1621_tempC & 0x7f)%10 + '0';
  3755  000042  0E7F               	movlw	127
  3756  000044  1446               	andwf	_DS1621_tempC,w,c
  3757  000046  6E11               	movwf	___awmod@dividend,c
  3758  000048  6A12               	clrf	___awmod@dividend+1,c
  3759  00004A  0E00               	movlw	0
  3760  00004C  6E14               	movwf	___awmod@divisor+1,c
  3761  00004E  0E0A               	movlw	10
  3762  000050  6E13               	movwf	___awmod@divisor,c
  3763  000052  EC42  F00D         	call	___awmod	;wreg free
  3764  000056  D01B               	goto	L1
  3765  000058                     l6361:
  3766                           
  3767                           ;Main_Screen.c: 77: else
  3768                           ;Main_Screen.c: 78: {
  3769                           ;Main_Screen.c: 79: tempC[0] = '+';
  3770  000058  0E2B               	movlw	43
  3771  00005A  0100               	movlb	0	; () banked
  3772  00005C  6FDE               	movwf	_tempC& (0+255),b
  3773                           
  3774                           ; BSR set to: 0
  3775                           ;Main_Screen.c: 80: tempC[1] = DS1621_tempC/10 + '0';
  3776  00005E  C046  F017         	movff	_DS1621_tempC,___awdiv@dividend
  3777  000062  C047  F018         	movff	_DS1621_tempC+1,___awdiv@dividend+1
  3778  000066  0E00               	movlw	0
  3779  000068  6E1A               	movwf	___awdiv@divisor+1,c
  3780  00006A  0E0A               	movlw	10
  3781  00006C  6E19               	movwf	___awdiv@divisor,c
  3782  00006E  ECB3  F00C         	call	___awdiv	;wreg free
  3783  000072  5017               	movf	?___awdiv,w,c
  3784  000074  0F30               	addlw	48
  3785  000076  0100               	movlb	0	; () banked
  3786  000078  6FDF               	movwf	(_tempC+1)& (0+255),b
  3787                           
  3788                           ; BSR set to: 0
  3789                           ;Main_Screen.c: 81: tempC[2] = DS1621_tempC%10 + '0';
  3790  00007A  C046  F011         	movff	_DS1621_tempC,___awmod@dividend
  3791  00007E  C047  F012         	movff	_DS1621_tempC+1,___awmod@dividend+1
  3792  000082  0E00               	movlw	0
  3793  000084  6E14               	movwf	___awmod@divisor+1,c
  3794  000086  0E0A               	movlw	10
  3795  000088  6E13               	movwf	___awmod@divisor,c
  3796  00008A  EC42  F00D         	call	___awmod	;wreg free
  3797  00008E                     L1:
  3798  00008E  5011               	movf	?___awmod,w,c
  3799  000090  0F30               	addlw	48
  3800  000092  0100               	movlb	0	; () banked
  3801  000094  6FE0               	movwf	(_tempC+2)& (0+255),b
  3802  000096  D000               	goto	l6367
  3803  000098                     l6367:
  3804                           
  3805                           ; BSR set to: 0
  3806                           ;Main_Screen.c: 82: }
  3807                           ;Main_Screen.c: 84: if (DS1621_tempF < 0)
  3808  000098  AE49               	btfss	_DS1621_tempF+1,7,c
  3809  00009A  D028               	goto	l6377
  3810                           
  3811                           ; BSR set to: 0
  3812                           ;Main_Screen.c: 85: {
  3813                           ;Main_Screen.c: 86: tempF[0] = '-';
  3814  00009C  0E2D               	movlw	45
  3815  00009E  0100               	movlb	0	; () banked
  3816  0000A0  6FE2               	movwf	_tempF& (0+255),b
  3817                           
  3818                           ; BSR set to: 0
  3819                           ;Main_Screen.c: 87: int neg_tempF = -DS1621_tempF;
  3820  0000A2  C048  F043         	movff	_DS1621_tempF,??_Update_Screen
  3821  0000A6  C049  F044         	movff	_DS1621_tempF+1,??_Update_Screen+1
  3822  0000AA  1E43               	comf	??_Update_Screen,f,c
  3823  0000AC  1E44               	comf	??_Update_Screen+1,f,c
  3824  0000AE  4A43               	infsnz	??_Update_Screen,f,c
  3825  0000B0  2A44               	incf	??_Update_Screen+1,f,c
  3826  0000B2  C043  F0FC         	movff	??_Update_Screen,Update_Screen@neg_tempF
  3827  0000B6  C044  F0FD         	movff	??_Update_Screen+1,Update_Screen@neg_tempF+1
  3828                           
  3829                           ; BSR set to: 0
  3830                           ;Main_Screen.c: 88: tempF[1] = neg_tempF/10 + '0';
  3831  0000BA  C0FC  F017         	movff	Update_Screen@neg_tempF,___awdiv@dividend
  3832  0000BE  C0FD  F018         	movff	Update_Screen@neg_tempF+1,___awdiv@dividend+1
  3833  0000C2  0E00               	movlw	0
  3834  0000C4  6E1A               	movwf	___awdiv@divisor+1,c
  3835  0000C6  0E0A               	movlw	10
  3836  0000C8  6E19               	movwf	___awdiv@divisor,c
  3837  0000CA  ECB3  F00C         	call	___awdiv	;wreg free
  3838  0000CE  5017               	movf	?___awdiv,w,c
  3839  0000D0  0F30               	addlw	48
  3840  0000D2  0100               	movlb	0	; () banked
  3841  0000D4  6FE3               	movwf	(_tempF+1)& (0+255),b
  3842                           
  3843                           ; BSR set to: 0
  3844                           ;Main_Screen.c: 89: tempF[2] = neg_tempF%10 + '0';
  3845  0000D6  C0FC  F011         	movff	Update_Screen@neg_tempF,___awmod@dividend
  3846  0000DA  C0FD  F012         	movff	Update_Screen@neg_tempF+1,___awmod@dividend+1
  3847  0000DE  0E00               	movlw	0
  3848  0000E0  6E14               	movwf	___awmod@divisor+1,c
  3849  0000E2  0E0A               	movlw	10
  3850  0000E4  6E13               	movwf	___awmod@divisor,c
  3851  0000E6  EC42  F00D         	call	___awmod	;wreg free
  3852  0000EA  D01B               	goto	L2
  3853  0000EC                     l6377:
  3854                           
  3855                           ; BSR set to: 0
  3856                           ;Main_Screen.c: 91: else
  3857                           ;Main_Screen.c: 92: {
  3858                           ;Main_Screen.c: 93: tempF[0] = '+';
  3859  0000EC  0E2B               	movlw	43
  3860  0000EE  0100               	movlb	0	; () banked
  3861  0000F0  6FE2               	movwf	_tempF& (0+255),b
  3862                           
  3863                           ; BSR set to: 0
  3864                           ;Main_Screen.c: 94: tempF[1] = DS1621_tempF/10 + '0';
  3865  0000F2  C048  F017         	movff	_DS1621_tempF,___awdiv@dividend
  3866  0000F6  C049  F018         	movff	_DS1621_tempF+1,___awdiv@dividend+1
  3867  0000FA  0E00               	movlw	0
  3868  0000FC  6E1A               	movwf	___awdiv@divisor+1,c
  3869  0000FE  0E0A               	movlw	10
  3870  000100  6E19               	movwf	___awdiv@divisor,c
  3871  000102  ECB3  F00C         	call	___awdiv	;wreg free
  3872  000106  5017               	movf	?___awdiv,w,c
  3873  000108  0F30               	addlw	48
  3874  00010A  0100               	movlb	0	; () banked
  3875  00010C  6FE3               	movwf	(_tempF+1)& (0+255),b
  3876                           
  3877                           ; BSR set to: 0
  3878                           ;Main_Screen.c: 95: tempF[2] = DS1621_tempF%10 + '0';
  3879  00010E  C048  F011         	movff	_DS1621_tempF,___awmod@dividend
  3880  000112  C049  F012         	movff	_DS1621_tempF+1,___awmod@dividend+1
  3881  000116  0E00               	movlw	0
  3882  000118  6E14               	movwf	___awmod@divisor+1,c
  3883  00011A  0E0A               	movlw	10
  3884  00011C  6E13               	movwf	___awmod@divisor,c
  3885  00011E  EC42  F00D         	call	___awmod	;wreg free
  3886  000122                     L2:
  3887  000122  5011               	movf	?___awmod,w,c
  3888  000124  0F30               	addlw	48
  3889  000126  0100               	movlb	0	; () banked
  3890  000128  6FE4               	movwf	(_tempF+2)& (0+255),b
  3891  00012A  D000               	goto	l6383
  3892  00012C                     l6383:
  3893                           
  3894                           ; BSR set to: 0
  3895                           ;Main_Screen.c: 96: }
  3896                           ;Main_Screen.c: 97: time[0] = (hour>>4) + '0';
  3897  00012C  3860               	swapf	_hour,w,c
  3898  00012E  0B0F               	andlw	15
  3899  000130  0F30               	addlw	48
  3900  000132  0100               	movlb	0	; () banked
  3901  000134  6FC8               	movwf	_time& (0+255),b
  3902                           
  3903                           ; BSR set to: 0
  3904                           ;Main_Screen.c: 98: time[1] = (hour & 0x0f)+ '0';
  3905  000136  5060               	movf	_hour,w,c
  3906  000138  0B0F               	andlw	15
  3907  00013A  0F30               	addlw	48
  3908  00013C  0100               	movlb	0	; () banked
  3909  00013E  6FC9               	movwf	(_time+1)& (0+255),b
  3910                           
  3911                           ; BSR set to: 0
  3912                           ;Main_Screen.c: 101: time[3] = (minute>>4) + '0';
  3913  000140  3861               	swapf	_minute,w,c
  3914  000142  0B0F               	andlw	15
  3915  000144  0F30               	addlw	48
  3916  000146  0100               	movlb	0	; () banked
  3917  000148  6FCB               	movwf	(_time+3)& (0+255),b
  3918                           
  3919                           ; BSR set to: 0
  3920                           ;Main_Screen.c: 102: time[4] = (minute & 0x0f)+ '0';
  3921  00014A  5061               	movf	_minute,w,c
  3922  00014C  0B0F               	andlw	15
  3923  00014E  0F30               	addlw	48
  3924  000150  0100               	movlb	0	; () banked
  3925  000152  6FCC               	movwf	(_time+4)& (0+255),b
  3926                           
  3927                           ; BSR set to: 0
  3928                           ;Main_Screen.c: 104: time[6] = (second>>4) + '0';
  3929  000154  3864               	swapf	_second,w,c
  3930  000156  0B0F               	andlw	15
  3931  000158  0F30               	addlw	48
  3932  00015A  0100               	movlb	0	; () banked
  3933  00015C  6FCE               	movwf	(_time+6)& (0+255),b
  3934                           
  3935                           ; BSR set to: 0
  3936                           ;Main_Screen.c: 105: time[7] = (second & 0x0f)+ '0';
  3937  00015E  5064               	movf	_second,w,c
  3938  000160  0B0F               	andlw	15
  3939  000162  0F30               	addlw	48
  3940  000164  0100               	movlb	0	; () banked
  3941  000166  6FCF               	movwf	(_time+7)& (0+255),b
  3942                           
  3943                           ; BSR set to: 0
  3944                           ;Main_Screen.c: 107: date[0] = (month>>4) + '0';
  3945  000168  3862               	swapf	_month,w,c
  3946  00016A  0B0F               	andlw	15
  3947  00016C  0F30               	addlw	48
  3948  00016E  0100               	movlb	0	; () banked
  3949  000170  6FBF               	movwf	_date& (0+255),b
  3950                           
  3951                           ; BSR set to: 0
  3952                           ;Main_Screen.c: 108: date[1] = (month & 0x0f)+ '0';
  3953  000172  5062               	movf	_month,w,c
  3954  000174  0B0F               	andlw	15
  3955  000176  0F30               	addlw	48
  3956  000178  0100               	movlb	0	; () banked
  3957  00017A  6FC0               	movwf	(_date+1)& (0+255),b
  3958                           
  3959                           ; BSR set to: 0
  3960                           ;Main_Screen.c: 109: date[3] = (day>>4) + '0';
  3961  00017C  385C               	swapf	_day,w,c
  3962  00017E  0B0F               	andlw	15
  3963  000180  0F30               	addlw	48
  3964  000182  0100               	movlb	0	; () banked
  3965  000184  6FC2               	movwf	(_date+3)& (0+255),b
  3966                           
  3967                           ; BSR set to: 0
  3968                           ;Main_Screen.c: 110: date[4] = (day & 0x0f)+ '0';
  3969  000186  505C               	movf	_day,w,c
  3970  000188  0B0F               	andlw	15
  3971  00018A  0F30               	addlw	48
  3972  00018C  0100               	movlb	0	; () banked
  3973  00018E  6FC3               	movwf	(_date+4)& (0+255),b
  3974                           
  3975                           ; BSR set to: 0
  3976                           ;Main_Screen.c: 111: date[6] = (year>>4) + '0';
  3977  000190  386D               	swapf	_year,w,c
  3978  000192  0B0F               	andlw	15
  3979  000194  0F30               	addlw	48
  3980  000196  0100               	movlb	0	; () banked
  3981  000198  6FC5               	movwf	(_date+6)& (0+255),b
  3982                           
  3983                           ; BSR set to: 0
  3984                           ;Main_Screen.c: 112: date[7] = (year & 0x0f)+ '0';
  3985  00019A  506D               	movf	_year,w,c
  3986  00019C  0B0F               	andlw	15
  3987  00019E  0F30               	addlw	48
  3988  0001A0  0100               	movlb	0	; () banked
  3989  0001A2  6FC6               	movwf	(_date+7)& (0+255),b
  3990                           
  3991                           ; BSR set to: 0
  3992                           ;Main_Screen.c: 115: if (FAN == 1) strcpy(Fan_SW_Txt, "ON ");
  3993  0001A4  0450               	decf	_FAN,w,c
  3994  0001A6  A4D8               	btfss	status,2,c
  3995  0001A8  D00B               	goto	l6411
  3996                           
  3997                           ; BSR set to: 0
  3998  0001AA  0EDA               	movlw	low _Fan_SW_Txt
  3999  0001AC  6E11               	movwf	strcpy@to,c
  4000  0001AE  0E00               	movlw	high _Fan_SW_Txt
  4001  0001B0  6E12               	movwf	strcpy@to+1,c
  4002  0001B2  0EEC               	movlw	low STR_10
  4003  0001B4  6E13               	movwf	strcpy@from,c
  4004  0001B6  0EFF               	movlw	high STR_10
  4005  0001B8  6E14               	movwf	strcpy@from+1,c
  4006  0001BA  ECD2  F010         	call	_strcpy	;wreg free
  4007  0001BE  D00B               	goto	l6413
  4008  0001C0                     l6411:
  4009                           
  4010                           ;Main_Screen.c: 116: else strcpy(Fan_SW_Txt, "OFF");
  4011  0001C0  0EDA               	movlw	low _Fan_SW_Txt
  4012  0001C2  6E11               	movwf	strcpy@to,c
  4013  0001C4  0E00               	movlw	high _Fan_SW_Txt
  4014  0001C6  6E12               	movwf	strcpy@to+1,c
  4015  0001C8  0EF0               	movlw	low STR_11
  4016  0001CA  6E13               	movwf	strcpy@from,c
  4017  0001CC  0EFF               	movlw	high STR_11
  4018  0001CE  6E14               	movwf	strcpy@from+1,c
  4019  0001D0  ECD2  F010         	call	_strcpy	;wreg free
  4020  0001D4  D000               	goto	l6413
  4021  0001D6                     l6413:
  4022                           
  4023                           ;Main_Screen.c: 119: DC_Txt[0] = duty_cycle/100 + '0';
  4024  0001D6  C05E  F017         	movff	_duty_cycle,___awdiv@dividend
  4025  0001DA  6A18               	clrf	___awdiv@dividend+1,c
  4026  0001DC  0E00               	movlw	0
  4027  0001DE  6E1A               	movwf	___awdiv@divisor+1,c
  4028  0001E0  0E64               	movlw	100
  4029  0001E2  6E19               	movwf	___awdiv@divisor,c
  4030  0001E4  ECB3  F00C         	call	___awdiv	;wreg free
  4031  0001E8  5017               	movf	?___awdiv,w,c
  4032  0001EA  0F30               	addlw	48
  4033  0001EC  0100               	movlb	0	; () banked
  4034  0001EE  6FD6               	movwf	_DC_Txt& (0+255),b
  4035                           
  4036                           ; BSR set to: 0
  4037                           ;Main_Screen.c: 120: DC_Txt[1] = (duty_cycle%100)/10 + '0';
  4038  0001F0  0E00               	movlw	0
  4039  0001F2  6E14               	movwf	___awmod@divisor+1,c
  4040  0001F4  0E64               	movlw	100
  4041  0001F6  6E13               	movwf	___awmod@divisor,c
  4042  0001F8  C05E  F011         	movff	_duty_cycle,___awmod@dividend
  4043  0001FC  6A12               	clrf	___awmod@dividend+1,c
  4044  0001FE  EC42  F00D         	call	___awmod	;wreg free
  4045  000202  C011  F017         	movff	?___awmod,___awdiv@dividend
  4046  000206  C012  F018         	movff	?___awmod+1,___awdiv@dividend+1
  4047  00020A  0E00               	movlw	0
  4048  00020C  6E1A               	movwf	___awdiv@divisor+1,c
  4049  00020E  0E0A               	movlw	10
  4050  000210  6E19               	movwf	___awdiv@divisor,c
  4051  000212  ECB3  F00C         	call	___awdiv	;wreg free
  4052  000216  5017               	movf	?___awdiv,w,c
  4053  000218  0F30               	addlw	48
  4054  00021A  0100               	movlb	0	; () banked
  4055  00021C  6FD7               	movwf	(_DC_Txt+1)& (0+255),b
  4056                           
  4057                           ; BSR set to: 0
  4058                           ;Main_Screen.c: 121: DC_Txt[2] = (duty_cycle%100)%10 + '0';
  4059  00021E  0E00               	movlw	0
  4060  000220  6E14               	movwf	___awmod@divisor+1,c
  4061  000222  0E64               	movlw	100
  4062  000224  6E13               	movwf	___awmod@divisor,c
  4063  000226  C05E  F011         	movff	_duty_cycle,___awmod@dividend
  4064  00022A  6A12               	clrf	___awmod@dividend+1,c
  4065  00022C  EC42  F00D         	call	___awmod	;wreg free
  4066  000230  C011  F0FE         	movff	?___awmod,_Update_Screen$2406
  4067  000234  C012  F0FF         	movff	?___awmod+1,_Update_Screen$2406+1
  4068                           
  4069                           ;Main_Screen.c: 121: DC_Txt[2] = (duty_cycle%100)%10 + '0';
  4070  000238  C0FE  F011         	movff	_Update_Screen$2406,___awmod@dividend
  4071  00023C  C0FF  F012         	movff	_Update_Screen$2406+1,___awmod@dividend+1
  4072  000240  0E00               	movlw	0
  4073  000242  6E14               	movwf	___awmod@divisor+1,c
  4074  000244  0E0A               	movlw	10
  4075  000246  6E13               	movwf	___awmod@divisor,c
  4076  000248  EC42  F00D         	call	___awmod	;wreg free
  4077  00024C  5011               	movf	?___awmod,w,c
  4078  00024E  0F30               	addlw	48
  4079  000250  0100               	movlb	0	; () banked
  4080  000252  6FD8               	movwf	(_DC_Txt+2)& (0+255),b
  4081                           
  4082                           ; BSR set to: 0
  4083                           ;Main_Screen.c: 124: RPM_Txt[0] = rpm/1000 + '0';
  4084  000254  C04C  F017         	movff	_rpm,___awdiv@dividend
  4085  000258  C04D  F018         	movff	_rpm+1,___awdiv@dividend+1
  4086  00025C  0E03               	movlw	3
  4087  00025E  6E1A               	movwf	___awdiv@divisor+1,c
  4088  000260  0EE8               	movlw	232
  4089  000262  6E19               	movwf	___awdiv@divisor,c
  4090  000264  ECB3  F00C         	call	___awdiv	;wreg free
  4091  000268  5017               	movf	?___awdiv,w,c
  4092  00026A  0F30               	addlw	48
  4093  00026C  0100               	movlb	0	; () banked
  4094  00026E  6FD1               	movwf	_RPM_Txt& (0+255),b
  4095                           
  4096                           ; BSR set to: 0
  4097                           ;Main_Screen.c: 125: RPM_Txt[1] = (rpm%1000)/100 + '0';
  4098  000270  0E03               	movlw	3
  4099  000272  6E14               	movwf	___awmod@divisor+1,c
  4100  000274  0EE8               	movlw	232
  4101  000276  6E13               	movwf	___awmod@divisor,c
  4102  000278  C04C  F011         	movff	_rpm,___awmod@dividend
  4103  00027C  C04D  F012         	movff	_rpm+1,___awmod@dividend+1
  4104  000280  EC42  F00D         	call	___awmod	;wreg free
  4105  000284  C011  F017         	movff	?___awmod,___awdiv@dividend
  4106  000288  C012  F018         	movff	?___awmod+1,___awdiv@dividend+1
  4107  00028C  0E00               	movlw	0
  4108  00028E  6E1A               	movwf	___awdiv@divisor+1,c
  4109  000290  0E64               	movlw	100
  4110  000292  6E19               	movwf	___awdiv@divisor,c
  4111  000294  ECB3  F00C         	call	___awdiv	;wreg free
  4112  000298  5017               	movf	?___awdiv,w,c
  4113  00029A  0F30               	addlw	48
  4114  00029C  0100               	movlb	0	; () banked
  4115  00029E  6FD2               	movwf	(_RPM_Txt+1)& (0+255),b
  4116                           
  4117                           ; BSR set to: 0
  4118                           ;Main_Screen.c: 126: RPM_Txt[2] = ((rpm%1000)%100)/10 + '0';
  4119  0002A0  0E03               	movlw	3
  4120  0002A2  6E14               	movwf	___awmod@divisor+1,c
  4121  0002A4  0EE8               	movlw	232
  4122  0002A6  6E13               	movwf	___awmod@divisor,c
  4123  0002A8  C04C  F011         	movff	_rpm,___awmod@dividend
  4124  0002AC  C04D  F012         	movff	_rpm+1,___awmod@dividend+1
  4125  0002B0  EC42  F00D         	call	___awmod	;wreg free
  4126  0002B4  C011  F0FE         	movff	?___awmod,_Update_Screen$2406
  4127  0002B8  C012  F0FF         	movff	?___awmod+1,_Update_Screen$2406+1
  4128                           
  4129                           ;Main_Screen.c: 126: RPM_Txt[2] = ((rpm%1000)%100)/10 + '0';
  4130  0002BC  0E00               	movlw	0
  4131  0002BE  6E14               	movwf	___awmod@divisor+1,c
  4132  0002C0  0E64               	movlw	100
  4133  0002C2  6E13               	movwf	___awmod@divisor,c
  4134  0002C4  C0FE  F011         	movff	_Update_Screen$2406,___awmod@dividend
  4135  0002C8  C0FF  F012         	movff	_Update_Screen$2406+1,___awmod@dividend+1
  4136  0002CC  EC42  F00D         	call	___awmod	;wreg free
  4137  0002D0  C011  F017         	movff	?___awmod,___awdiv@dividend
  4138  0002D4  C012  F018         	movff	?___awmod+1,___awdiv@dividend+1
  4139  0002D8  0E00               	movlw	0
  4140  0002DA  6E1A               	movwf	___awdiv@divisor+1,c
  4141  0002DC  0E0A               	movlw	10
  4142  0002DE  6E19               	movwf	___awdiv@divisor,c
  4143  0002E0  ECB3  F00C         	call	___awdiv	;wreg free
  4144  0002E4  5017               	movf	?___awdiv,w,c
  4145  0002E6  0F30               	addlw	48
  4146  0002E8  0100               	movlb	0	; () banked
  4147  0002EA  6FD3               	movwf	(_RPM_Txt+2)& (0+255),b
  4148                           
  4149                           ; BSR set to: 0
  4150                           ;Main_Screen.c: 127: RPM_Txt[3] = ((rpm%1000)%100)%10 + '0';
  4151  0002EC  0E03               	movlw	3
  4152  0002EE  6E14               	movwf	___awmod@divisor+1,c
  4153  0002F0  0EE8               	movlw	232
  4154  0002F2  6E13               	movwf	___awmod@divisor,c
  4155  0002F4  C04C  F011         	movff	_rpm,___awmod@dividend
  4156  0002F8  C04D  F012         	movff	_rpm+1,___awmod@dividend+1
  4157  0002FC  EC42  F00D         	call	___awmod	;wreg free
  4158  000300  C011  F0FE         	movff	?___awmod,_Update_Screen$2406
  4159  000304  C012  F0FF         	movff	?___awmod+1,_Update_Screen$2406+1
  4160                           
  4161                           ;Main_Screen.c: 127: RPM_Txt[3] = ((rpm%1000)%100)%10 + '0';
  4162  000308  0E00               	movlw	0
  4163  00030A  6E14               	movwf	___awmod@divisor+1,c
  4164  00030C  0E64               	movlw	100
  4165  00030E  6E13               	movwf	___awmod@divisor,c
  4166  000310  C0FE  F011         	movff	_Update_Screen$2406,___awmod@dividend
  4167  000314  C0FF  F012         	movff	_Update_Screen$2406+1,___awmod@dividend+1
  4168  000318  EC42  F00D         	call	___awmod	;wreg free
  4169  00031C  C011  F0FA         	movff	?___awmod,_Update_Screen$2407
  4170  000320  C012  F0FB         	movff	?___awmod+1,_Update_Screen$2407+1
  4171                           
  4172                           ;Main_Screen.c: 127: RPM_Txt[3] = ((rpm%1000)%100)%10 + '0';
  4173  000324  C0FA  F011         	movff	_Update_Screen$2407,___awmod@dividend
  4174  000328  C0FB  F012         	movff	_Update_Screen$2407+1,___awmod@dividend+1
  4175  00032C  0E00               	movlw	0
  4176  00032E  6E14               	movwf	___awmod@divisor+1,c
  4177  000330  0E0A               	movlw	10
  4178  000332  6E13               	movwf	___awmod@divisor,c
  4179  000334  EC42  F00D         	call	___awmod	;wreg free
  4180  000338  5011               	movf	?___awmod,w,c
  4181  00033A  0F30               	addlw	48
  4182  00033C  0100               	movlb	0	; () banked
  4183  00033E  6FD4               	movwf	(_RPM_Txt+3)& (0+255),b
  4184                           
  4185                           ; BSR set to: 0
  4186                           ;Main_Screen.c: 129: drawtext(1, 23, tempC , 0xFFE0 , 0x0000 , 2);
  4187  000340  0E17               	movlw	23
  4188  000342  6E39               	movwf	drawtext@y,c
  4189  000344  0EDE               	movlw	low _tempC
  4190  000346  6E3A               	movwf	drawtext@_text,c
  4191  000348  0E00               	movlw	high _tempC
  4192  00034A  6E3B               	movwf	drawtext@_text+1,c
  4193  00034C  0EFF               	movlw	255
  4194  00034E  6E3D               	movwf	drawtext@color+1,c
  4195  000350  0EE0               	movlw	224
  4196  000352  6E3C               	movwf	drawtext@color,c
  4197  000354  0E00               	movlw	0
  4198  000356  6E3F               	movwf	drawtext@bg+1,c
  4199  000358  0E00               	movlw	0
  4200  00035A  6E3E               	movwf	drawtext@bg,c
  4201  00035C  0E02               	movlw	2
  4202  00035E  6E40               	movwf	drawtext@size,c
  4203  000360  0E01               	movlw	1
  4204  000362  ECD0  F008         	call	_drawtext
  4205                           
  4206                           ;Main_Screen.c: 130: drawtext(70, 23, tempF , 0xFFE0 , 0x0000 , 2);
  4207  000366  0E17               	movlw	23
  4208  000368  6E39               	movwf	drawtext@y,c
  4209  00036A  0EE2               	movlw	low _tempF
  4210  00036C  6E3A               	movwf	drawtext@_text,c
  4211  00036E  0E00               	movlw	high _tempF
  4212  000370  6E3B               	movwf	drawtext@_text+1,c
  4213  000372  0EFF               	movlw	255
  4214  000374  6E3D               	movwf	drawtext@color+1,c
  4215  000376  0EE0               	movlw	224
  4216  000378  6E3C               	movwf	drawtext@color,c
  4217  00037A  0E00               	movlw	0
  4218  00037C  6E3F               	movwf	drawtext@bg+1,c
  4219  00037E  0E00               	movlw	0
  4220  000380  6E3E               	movwf	drawtext@bg,c
  4221  000382  0E02               	movlw	2
  4222  000384  6E40               	movwf	drawtext@size,c
  4223  000386  0E46               	movlw	70
  4224  000388  ECD0  F008         	call	_drawtext
  4225                           
  4226                           ;Main_Screen.c: 131: drawtext(15 , 52 , time , 0x07FF , 0x0000 , 2);
  4227  00038C  0E34               	movlw	52
  4228  00038E  6E39               	movwf	drawtext@y,c
  4229  000390  0EC8               	movlw	low _time
  4230  000392  6E3A               	movwf	drawtext@_text,c
  4231  000394  0E00               	movlw	high _time
  4232  000396  6E3B               	movwf	drawtext@_text+1,c
  4233  000398  0E07               	movlw	7
  4234  00039A  6E3D               	movwf	drawtext@color+1,c
  4235  00039C  683C               	setf	drawtext@color,c
  4236  00039E  0E00               	movlw	0
  4237  0003A0  6E3F               	movwf	drawtext@bg+1,c
  4238  0003A2  0E00               	movlw	0
  4239  0003A4  6E3E               	movwf	drawtext@bg,c
  4240  0003A6  0E02               	movlw	2
  4241  0003A8  6E40               	movwf	drawtext@size,c
  4242  0003AA  0E0F               	movlw	15
  4243  0003AC  ECD0  F008         	call	_drawtext
  4244                           
  4245                           ;Main_Screen.c: 132: drawtext(15 , 82 , date , 0x07E0 , 0x0000 , 2);
  4246  0003B0  0E52               	movlw	82
  4247  0003B2  6E39               	movwf	drawtext@y,c
  4248  0003B4  0EBF               	movlw	low _date
  4249  0003B6  6E3A               	movwf	drawtext@_text,c
  4250  0003B8  0E00               	movlw	high _date
  4251  0003BA  6E3B               	movwf	drawtext@_text+1,c
  4252  0003BC  0E07               	movlw	7
  4253  0003BE  6E3D               	movwf	drawtext@color+1,c
  4254  0003C0  0EE0               	movlw	224
  4255  0003C2  6E3C               	movwf	drawtext@color,c
  4256  0003C4  0E00               	movlw	0
  4257  0003C6  6E3F               	movwf	drawtext@bg+1,c
  4258  0003C8  0E00               	movlw	0
  4259  0003CA  6E3E               	movwf	drawtext@bg,c
  4260  0003CC  0E02               	movlw	2
  4261  0003CE  6E40               	movwf	drawtext@size,c
  4262  0003D0  0E0F               	movlw	15
  4263  0003D2  ECD0  F008         	call	_drawtext
  4264                           
  4265                           ;Main_Screen.c: 134: drawtext(95, 130, Fan_SW_Txt, 0xF800 , 0x0000 , 1);
  4266  0003D6  0E82               	movlw	130
  4267  0003D8  6E39               	movwf	drawtext@y,c
  4268  0003DA  0EDA               	movlw	low _Fan_SW_Txt
  4269  0003DC  6E3A               	movwf	drawtext@_text,c
  4270  0003DE  0E00               	movlw	high _Fan_SW_Txt
  4271  0003E0  6E3B               	movwf	drawtext@_text+1,c
  4272  0003E2  0EF8               	movlw	248
  4273  0003E4  6E3D               	movwf	drawtext@color+1,c
  4274  0003E6  0E00               	movlw	0
  4275  0003E8  6E3C               	movwf	drawtext@color,c
  4276  0003EA  0E00               	movlw	0
  4277  0003EC  6E3F               	movwf	drawtext@bg+1,c
  4278  0003EE  0E00               	movlw	0
  4279  0003F0  6E3E               	movwf	drawtext@bg,c
  4280  0003F2  0E01               	movlw	1
  4281  0003F4  6E40               	movwf	drawtext@size,c
  4282  0003F6  0E5F               	movlw	95
  4283  0003F8  ECD0  F008         	call	_drawtext
  4284                           
  4285                           ;Main_Screen.c: 135: drawtext(10, 150, DC_Txt, 0x07E0, 0x0000, 1);
  4286  0003FC  0E96               	movlw	150
  4287  0003FE  6E39               	movwf	drawtext@y,c
  4288  000400  0ED6               	movlw	low _DC_Txt
  4289  000402  6E3A               	movwf	drawtext@_text,c
  4290  000404  0E00               	movlw	high _DC_Txt
  4291  000406  6E3B               	movwf	drawtext@_text+1,c
  4292  000408  0E07               	movlw	7
  4293  00040A  6E3D               	movwf	drawtext@color+1,c
  4294  00040C  0EE0               	movlw	224
  4295  00040E  6E3C               	movwf	drawtext@color,c
  4296  000410  0E00               	movlw	0
  4297  000412  6E3F               	movwf	drawtext@bg+1,c
  4298  000414  0E00               	movlw	0
  4299  000416  6E3E               	movwf	drawtext@bg,c
  4300  000418  0E01               	movlw	1
  4301  00041A  6E40               	movwf	drawtext@size,c
  4302  00041C  0E0A               	movlw	10
  4303  00041E  ECD0  F008         	call	_drawtext
  4304                           
  4305                           ;Main_Screen.c: 136: drawtext(93, 150, RPM_Txt, 0x07E0, 0x0000, 1);
  4306  000422  0E96               	movlw	150
  4307  000424  6E39               	movwf	drawtext@y,c
  4308  000426  0ED1               	movlw	low _RPM_Txt
  4309  000428  6E3A               	movwf	drawtext@_text,c
  4310  00042A  0E00               	movlw	high _RPM_Txt
  4311  00042C  6E3B               	movwf	drawtext@_text+1,c
  4312  00042E  0E07               	movlw	7
  4313  000430  6E3D               	movwf	drawtext@color+1,c
  4314  000432  0EE0               	movlw	224
  4315  000434  6E3C               	movwf	drawtext@color,c
  4316  000436  0E00               	movlw	0
  4317  000438  6E3F               	movwf	drawtext@bg+1,c
  4318  00043A  0E00               	movlw	0
  4319  00043C  6E3E               	movwf	drawtext@bg,c
  4320  00043E  0E01               	movlw	1
  4321  000440  6E40               	movwf	drawtext@size,c
  4322  000442  0E5D               	movlw	93
  4323  000444  ECD0  F008         	call	_drawtext
  4324  000448  0012               	return		;funcret
  4325  00044A                     __end_of_Update_Screen:
  4326                           	opt stack 0
  4327                           tblptru	equ	0xFF8
  4328                           tblptrh	equ	0xFF7
  4329                           tblptrl	equ	0xFF6
  4330                           tablat	equ	0xFF5
  4331                           prodh	equ	0xFF4
  4332                           prodl	equ	0xFF3
  4333                           intcon	equ	0xFF2
  4334                           intcon2	equ	0xFF1
  4335                           postinc0	equ	0xFEE
  4336                           wreg	equ	0xFE8
  4337                           postdec1	equ	0xFE5
  4338                           fsr1l	equ	0xFE1
  4339                           postinc2	equ	0xFDE
  4340                           postdec2	equ	0xFDD
  4341                           fsr2h	equ	0xFDA
  4342                           fsr2l	equ	0xFD9
  4343                           status	equ	0xFD8
  4344                           
  4345 ;; *************** function ___awmod *****************
  4346 ;; Defined at:
  4347 ;;		line 8 in file "E:\XC8\sources\common\awmod.c"
  4348 ;; Parameters:    Size  Location     Type
  4349 ;;  dividend        2   16[COMRAM] int 
  4350 ;;  divisor         2   18[COMRAM] int 
  4351 ;; Auto vars:     Size  Location     Type
  4352 ;;  sign            1   21[COMRAM] unsigned char 
  4353 ;;  counter         1   20[COMRAM] unsigned char 
  4354 ;; Return value:  Size  Location     Type
  4355 ;;                  2   16[COMRAM] int 
  4356 ;; Registers used:
  4357 ;;		wreg, status,2, status,0
  4358 ;; Tracked objects:
  4359 ;;		On entry : 0/0
  4360 ;;		On exit  : 0/0
  4361 ;;		Unchanged: 0/0
  4362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4363 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4364 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4365 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4366 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4367 ;;Total ram usage:        6 bytes
  4368 ;; Hardware stack levels used:    1
  4369 ;; Hardware stack levels required when called:    3
  4370 ;; This function calls:
  4371 ;;		Nothing
  4372 ;; This function is called by:
  4373 ;;		_Update_Screen
  4374 ;; This function uses a non-reentrant model
  4375 ;;
  4376                           
  4377                           	psect	text8
  4378  001A84                     __ptext8:
  4379                           	opt stack 0
  4380  001A84                     ___awmod:
  4381                           	opt stack 26
  4382                           
  4383                           ;incstack = 0
  4384  001A84  0E00               	movlw	0
  4385  001A86  6E16               	movwf	___awmod@sign,c
  4386  001A88  AE12               	btfss	___awmod@dividend+1,7,c
  4387  001A8A  D007               	goto	l6113
  4388  001A8C  6C11               	negf	___awmod@dividend,c
  4389  001A8E  1E12               	comf	___awmod@dividend+1,f,c
  4390  001A90  B0D8               	btfsc	status,0,c
  4391  001A92  2A12               	incf	___awmod@dividend+1,f,c
  4392  001A94  0E01               	movlw	1
  4393  001A96  6E16               	movwf	___awmod@sign,c
  4394  001A98  D000               	goto	l6113
  4395  001A9A                     l6113:
  4396  001A9A  AE14               	btfss	___awmod@divisor+1,7,c
  4397  001A9C  D005               	goto	l6117
  4398  001A9E  6C13               	negf	___awmod@divisor,c
  4399  001AA0  1E14               	comf	___awmod@divisor+1,f,c
  4400  001AA2  B0D8               	btfsc	status,0,c
  4401  001AA4  2A14               	incf	___awmod@divisor+1,f,c
  4402  001AA6  D000               	goto	l6117
  4403  001AA8                     l6117:
  4404  001AA8  5013               	movf	___awmod@divisor,w,c
  4405  001AAA  1014               	iorwf	___awmod@divisor+1,w,c
  4406  001AAC  B4D8               	btfsc	status,2,c
  4407  001AAE  D01D               	goto	l6133
  4408  001AB0  0E01               	movlw	1
  4409  001AB2  6E15               	movwf	___awmod@counter,c
  4410  001AB4  D005               	goto	l6123
  4411  001AB6                     l6121:
  4412  001AB6  90D8               	bcf	status,0,c
  4413  001AB8  3613               	rlcf	___awmod@divisor,f,c
  4414  001ABA  3614               	rlcf	___awmod@divisor+1,f,c
  4415  001ABC  2A15               	incf	___awmod@counter,f,c
  4416  001ABE  D000               	goto	l6123
  4417  001AC0                     l6123:
  4418  001AC0  BE14               	btfsc	___awmod@divisor+1,7,c
  4419  001AC2  D002               	goto	l6125
  4420  001AC4  D7F8               	goto	l6121
  4421  001AC6  D000               	goto	l6125
  4422  001AC8                     l6125:
  4423  001AC8  5013               	movf	___awmod@divisor,w,c
  4424  001ACA  5C11               	subwf	___awmod@dividend,w,c
  4425  001ACC  5014               	movf	___awmod@divisor+1,w,c
  4426  001ACE  5812               	subwfb	___awmod@dividend+1,w,c
  4427  001AD0  A0D8               	btfss	status,0,c
  4428  001AD2  D005               	goto	l6129
  4429  001AD4  5013               	movf	___awmod@divisor,w,c
  4430  001AD6  5E11               	subwf	___awmod@dividend,f,c
  4431  001AD8  5014               	movf	___awmod@divisor+1,w,c
  4432  001ADA  5A12               	subwfb	___awmod@dividend+1,f,c
  4433  001ADC  D000               	goto	l6129
  4434  001ADE                     l6129:
  4435  001ADE  90D8               	bcf	status,0,c
  4436  001AE0  3214               	rrcf	___awmod@divisor+1,f,c
  4437  001AE2  3213               	rrcf	___awmod@divisor,f,c
  4438  001AE4  2E15               	decfsz	___awmod@counter,f,c
  4439  001AE6  D7F0               	goto	l6125
  4440  001AE8  D000               	goto	l6133
  4441  001AEA                     l6133:
  4442  001AEA  5016               	movf	___awmod@sign,w,c
  4443  001AEC  B4D8               	btfsc	status,2,c
  4444  001AEE  D005               	goto	l6137
  4445  001AF0  6C11               	negf	___awmod@dividend,c
  4446  001AF2  1E12               	comf	___awmod@dividend+1,f,c
  4447  001AF4  B0D8               	btfsc	status,0,c
  4448  001AF6  2A12               	incf	___awmod@dividend+1,f,c
  4449  001AF8  D000               	goto	l6137
  4450  001AFA                     l6137:
  4451  001AFA  C011  F011         	movff	___awmod@dividend,?___awmod
  4452  001AFE  C012  F012         	movff	___awmod@dividend+1,?___awmod+1
  4453  001B02  D000               	goto	l999
  4454  001B04                     l999:
  4455  001B04  0012               	return		;funcret
  4456  001B06                     __end_of___awmod:
  4457                           	opt stack 0
  4458                           tblptru	equ	0xFF8
  4459                           tblptrh	equ	0xFF7
  4460                           tblptrl	equ	0xFF6
  4461                           tablat	equ	0xFF5
  4462                           prodh	equ	0xFF4
  4463                           prodl	equ	0xFF3
  4464                           intcon	equ	0xFF2
  4465                           intcon2	equ	0xFF1
  4466                           postinc0	equ	0xFEE
  4467                           wreg	equ	0xFE8
  4468                           postdec1	equ	0xFE5
  4469                           fsr1l	equ	0xFE1
  4470                           postinc2	equ	0xFDE
  4471                           postdec2	equ	0xFDD
  4472                           fsr2h	equ	0xFDA
  4473                           fsr2l	equ	0xFD9
  4474                           status	equ	0xFD8
  4475                           
  4476 ;; *************** function ___awdiv *****************
  4477 ;; Defined at:
  4478 ;;		line 8 in file "E:\XC8\sources\common\awdiv.c"
  4479 ;; Parameters:    Size  Location     Type
  4480 ;;  dividend        2   22[COMRAM] int 
  4481 ;;  divisor         2   24[COMRAM] int 
  4482 ;; Auto vars:     Size  Location     Type
  4483 ;;  quotient        2   28[COMRAM] int 
  4484 ;;  sign            1   27[COMRAM] unsigned char 
  4485 ;;  counter         1   26[COMRAM] unsigned char 
  4486 ;; Return value:  Size  Location     Type
  4487 ;;                  2   22[COMRAM] int 
  4488 ;; Registers used:
  4489 ;;		wreg, status,2, status,0
  4490 ;; Tracked objects:
  4491 ;;		On entry : 0/0
  4492 ;;		On exit  : 0/0
  4493 ;;		Unchanged: 0/0
  4494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4495 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4496 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4498 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4499 ;;Total ram usage:        8 bytes
  4500 ;; Hardware stack levels used:    1
  4501 ;; Hardware stack levels required when called:    3
  4502 ;; This function calls:
  4503 ;;		Nothing
  4504 ;; This function is called by:
  4505 ;;		_Update_Screen
  4506 ;;		_get_RPM
  4507 ;;		_main
  4508 ;; This function uses a non-reentrant model
  4509 ;;
  4510                           
  4511                           	psect	text9
  4512  001966                     __ptext9:
  4513                           	opt stack 0
  4514  001966                     ___awdiv:
  4515                           	opt stack 26
  4516                           
  4517                           ;incstack = 0
  4518  001966  0E00               	movlw	0
  4519  001968  6E1C               	movwf	___awdiv@sign,c
  4520  00196A  AE1A               	btfss	___awdiv@divisor+1,7,c
  4521  00196C  D007               	goto	l6069
  4522  00196E  6C19               	negf	___awdiv@divisor,c
  4523  001970  1E1A               	comf	___awdiv@divisor+1,f,c
  4524  001972  B0D8               	btfsc	status,0,c
  4525  001974  2A1A               	incf	___awdiv@divisor+1,f,c
  4526  001976  0E01               	movlw	1
  4527  001978  6E1C               	movwf	___awdiv@sign,c
  4528  00197A  D000               	goto	l6069
  4529  00197C                     l6069:
  4530  00197C  AE18               	btfss	___awdiv@dividend+1,7,c
  4531  00197E  D007               	goto	l6075
  4532  001980  6C17               	negf	___awdiv@dividend,c
  4533  001982  1E18               	comf	___awdiv@dividend+1,f,c
  4534  001984  B0D8               	btfsc	status,0,c
  4535  001986  2A18               	incf	___awdiv@dividend+1,f,c
  4536  001988  0E01               	movlw	1
  4537  00198A  1A1C               	xorwf	___awdiv@sign,f,c
  4538  00198C  D000               	goto	l6075
  4539  00198E                     l6075:
  4540  00198E  0E00               	movlw	0
  4541  001990  6E1E               	movwf	___awdiv@quotient+1,c
  4542  001992  0E00               	movlw	0
  4543  001994  6E1D               	movwf	___awdiv@quotient,c
  4544  001996  5019               	movf	___awdiv@divisor,w,c
  4545  001998  101A               	iorwf	___awdiv@divisor+1,w,c
  4546  00199A  B4D8               	btfsc	status,2,c
  4547  00199C  D021               	goto	l6097
  4548  00199E  0E01               	movlw	1
  4549  0019A0  6E1B               	movwf	___awdiv@counter,c
  4550  0019A2  D005               	goto	l6083
  4551  0019A4                     l6081:
  4552  0019A4  90D8               	bcf	status,0,c
  4553  0019A6  3619               	rlcf	___awdiv@divisor,f,c
  4554  0019A8  361A               	rlcf	___awdiv@divisor+1,f,c
  4555  0019AA  2A1B               	incf	___awdiv@counter,f,c
  4556  0019AC  D000               	goto	l6083
  4557  0019AE                     l6083:
  4558  0019AE  BE1A               	btfsc	___awdiv@divisor+1,7,c
  4559  0019B0  D002               	goto	l6085
  4560  0019B2  D7F8               	goto	l6081
  4561  0019B4  D000               	goto	l6085
  4562  0019B6                     l6085:
  4563  0019B6  90D8               	bcf	status,0,c
  4564  0019B8  361D               	rlcf	___awdiv@quotient,f,c
  4565  0019BA  361E               	rlcf	___awdiv@quotient+1,f,c
  4566  0019BC  5019               	movf	___awdiv@divisor,w,c
  4567  0019BE  5C17               	subwf	___awdiv@dividend,w,c
  4568  0019C0  501A               	movf	___awdiv@divisor+1,w,c
  4569  0019C2  5818               	subwfb	___awdiv@dividend+1,w,c
  4570  0019C4  A0D8               	btfss	status,0,c
  4571  0019C6  D006               	goto	l6093
  4572  0019C8  5019               	movf	___awdiv@divisor,w,c
  4573  0019CA  5E17               	subwf	___awdiv@dividend,f,c
  4574  0019CC  501A               	movf	___awdiv@divisor+1,w,c
  4575  0019CE  5A18               	subwfb	___awdiv@dividend+1,f,c
  4576  0019D0  801D               	bsf	___awdiv@quotient,0,c
  4577  0019D2  D000               	goto	l6093
  4578  0019D4                     l6093:
  4579  0019D4  90D8               	bcf	status,0,c
  4580  0019D6  321A               	rrcf	___awdiv@divisor+1,f,c
  4581  0019D8  3219               	rrcf	___awdiv@divisor,f,c
  4582  0019DA  2E1B               	decfsz	___awdiv@counter,f,c
  4583  0019DC  D7EC               	goto	l6085
  4584  0019DE  D000               	goto	l6097
  4585  0019E0                     l6097:
  4586  0019E0  501C               	movf	___awdiv@sign,w,c
  4587  0019E2  B4D8               	btfsc	status,2,c
  4588  0019E4  D005               	goto	l6101
  4589  0019E6  6C1D               	negf	___awdiv@quotient,c
  4590  0019E8  1E1E               	comf	___awdiv@quotient+1,f,c
  4591  0019EA  B0D8               	btfsc	status,0,c
  4592  0019EC  2A1E               	incf	___awdiv@quotient+1,f,c
  4593  0019EE  D000               	goto	l6101
  4594  0019F0                     l6101:
  4595  0019F0  C01D  F017         	movff	___awdiv@quotient,?___awdiv
  4596  0019F4  C01E  F018         	movff	___awdiv@quotient+1,?___awdiv+1
  4597  0019F8  D000               	goto	l986
  4598  0019FA                     l986:
  4599  0019FA  0012               	return		;funcret
  4600  0019FC                     __end_of___awdiv:
  4601                           	opt stack 0
  4602                           tblptru	equ	0xFF8
  4603                           tblptrh	equ	0xFF7
  4604                           tblptrl	equ	0xFF6
  4605                           tablat	equ	0xFF5
  4606                           prodh	equ	0xFF4
  4607                           prodl	equ	0xFF3
  4608                           intcon	equ	0xFF2
  4609                           intcon2	equ	0xFF1
  4610                           postinc0	equ	0xFEE
  4611                           wreg	equ	0xFE8
  4612                           postdec1	equ	0xFE5
  4613                           fsr1l	equ	0xFE1
  4614                           postinc2	equ	0xFDE
  4615                           postdec2	equ	0xFDD
  4616                           fsr2h	equ	0xFDA
  4617                           fsr2l	equ	0xFD9
  4618                           status	equ	0xFD8
  4619                           
  4620 ;; *************** function _Toggle_Fan *****************
  4621 ;; Defined at:
  4622 ;;		line 22 in file "Fan_Support.c"
  4623 ;; Parameters:    Size  Location     Type
  4624 ;;		None
  4625 ;; Auto vars:     Size  Location     Type
  4626 ;;		None
  4627 ;; Return value:  Size  Location     Type
  4628 ;;		None               void
  4629 ;; Registers used:
  4630 ;;		wreg, status,2, status,0, cstack
  4631 ;; Tracked objects:
  4632 ;;		On entry : 0/0
  4633 ;;		On exit  : 0/0
  4634 ;;		Unchanged: 0/0
  4635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4636 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4637 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4638 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4639 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4640 ;;Total ram usage:        0 bytes
  4641 ;; Hardware stack levels used:    1
  4642 ;; Hardware stack levels required when called:    7
  4643 ;; This function calls:
  4644 ;;		_Turn_Off_Fan
  4645 ;;		_Turn_On_Fan
  4646 ;; This function is called by:
  4647 ;;		_main
  4648 ;; This function uses a non-reentrant model
  4649 ;;
  4650                           
  4651                           	psect	text10
  4652  0022E8                     __ptext10:
  4653                           	opt stack 0
  4654  0022E8                     _Toggle_Fan:
  4655                           	opt stack 23
  4656                           
  4657                           ;Fan_Support.c: 24: FAN = (!FAN);
  4658                           
  4659                           ;incstack = 0
  4660  0022E8  5050               	movf	_FAN,w,c
  4661  0022EA  A4D8               	btfss	status,2,c
  4662  0022EC  D002               	goto	u5010
  4663  0022EE  0E01               	movlw	1
  4664  0022F0  D001               	goto	u5020
  4665  0022F2                     u5010:
  4666  0022F2  0E00               	movlw	0
  4667  0022F4                     u5020:
  4668  0022F4  6E50               	movwf	_FAN,c
  4669                           
  4670                           ;Fan_Support.c: 25: if(FAN == 1)
  4671  0022F6  0450               	decf	_FAN,w,c
  4672  0022F8  A4D8               	btfss	status,2,c
  4673  0022FA  D003               	goto	l6463
  4674                           
  4675                           ;Fan_Support.c: 26: {
  4676                           ;Fan_Support.c: 27: Turn_On_Fan();
  4677  0022FC  EC35  F012         	call	_Turn_On_Fan	;wreg free
  4678                           
  4679                           ;Fan_Support.c: 28: }
  4680  002300  D003               	goto	l497
  4681  002302                     l6463:
  4682                           
  4683                           ;Fan_Support.c: 29: else
  4684                           ;Fan_Support.c: 30: {
  4685                           ;Fan_Support.c: 31: Turn_Off_Fan();
  4686  002302  EC60  F012         	call	_Turn_Off_Fan	;wreg free
  4687  002306  D000               	goto	l497
  4688  002308                     l497:
  4689  002308  0012               	return		;funcret
  4690  00230A                     __end_of_Toggle_Fan:
  4691                           	opt stack 0
  4692                           tblptru	equ	0xFF8
  4693                           tblptrh	equ	0xFF7
  4694                           tblptrl	equ	0xFF6
  4695                           tablat	equ	0xFF5
  4696                           prodh	equ	0xFF4
  4697                           prodl	equ	0xFF3
  4698                           intcon	equ	0xFF2
  4699                           intcon2	equ	0xFF1
  4700                           postinc0	equ	0xFEE
  4701                           wreg	equ	0xFE8
  4702                           postdec1	equ	0xFE5
  4703                           fsr1l	equ	0xFE1
  4704                           postinc2	equ	0xFDE
  4705                           postdec2	equ	0xFDD
  4706                           fsr2h	equ	0xFDA
  4707                           fsr2l	equ	0xFD9
  4708                           status	equ	0xFD8
  4709                           
  4710 ;; *************** function _Turn_On_Fan *****************
  4711 ;; Defined at:
  4712 ;;		line 42 in file "Fan_Support.c"
  4713 ;; Parameters:    Size  Location     Type
  4714 ;;		None
  4715 ;; Auto vars:     Size  Location     Type
  4716 ;;		None
  4717 ;; Return value:  Size  Location     Type
  4718 ;;		None               void
  4719 ;; Registers used:
  4720 ;;		wreg, status,2, status,0, cstack
  4721 ;; Tracked objects:
  4722 ;;		On entry : 0/0
  4723 ;;		On exit  : 0/0
  4724 ;;		Unchanged: 0/0
  4725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4726 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4727 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4728 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4729 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4730 ;;Total ram usage:        0 bytes
  4731 ;; Hardware stack levels used:    1
  4732 ;; Hardware stack levels required when called:    6
  4733 ;; This function calls:
  4734 ;;		_do_update_pwm
  4735 ;; This function is called by:
  4736 ;;		_Toggle_Fan
  4737 ;; This function uses a non-reentrant model
  4738 ;;
  4739                           
  4740                           	psect	text11
  4741  00246A                     __ptext11:
  4742                           	opt stack 0
  4743  00246A                     _Turn_On_Fan:
  4744                           	opt stack 23
  4745                           
  4746                           ;Fan_Support.c: 44: FAN = 1;
  4747                           
  4748                           ;incstack = 0
  4749  00246A  0E01               	movlw	1
  4750  00246C  6E50               	movwf	_FAN,c
  4751                           
  4752                           ;Fan_Support.c: 45: do_update_pwm(duty_cycle);
  4753  00246E  505E               	movf	_duty_cycle,w,c
  4754  002470  ECFF  F00B         	call	_do_update_pwm
  4755                           
  4756                           ;Fan_Support.c: 46: PORTAbits.RA5 = 1;
  4757  002474  8A80               	bsf	3968,5,c	;volatile
  4758                           
  4759                           ;Fan_Support.c: 47: PORTEbits.RE2 = 1;
  4760  002476  8484               	bsf	3972,2,c	;volatile
  4761  002478  0012               	return		;funcret
  4762  00247A                     __end_of_Turn_On_Fan:
  4763                           	opt stack 0
  4764                           tblptru	equ	0xFF8
  4765                           tblptrh	equ	0xFF7
  4766                           tblptrl	equ	0xFF6
  4767                           tablat	equ	0xFF5
  4768                           prodh	equ	0xFF4
  4769                           prodl	equ	0xFF3
  4770                           intcon	equ	0xFF2
  4771                           intcon2	equ	0xFF1
  4772                           postinc0	equ	0xFEE
  4773                           wreg	equ	0xFE8
  4774                           postdec1	equ	0xFE5
  4775                           fsr1l	equ	0xFE1
  4776                           postinc2	equ	0xFDE
  4777                           postdec2	equ	0xFDD
  4778                           fsr2h	equ	0xFDA
  4779                           fsr2l	equ	0xFD9
  4780                           status	equ	0xFD8
  4781                           
  4782 ;; *************** function _Turn_Off_Fan *****************
  4783 ;; Defined at:
  4784 ;;		line 35 in file "Fan_Support.c"
  4785 ;; Parameters:    Size  Location     Type
  4786 ;;		None
  4787 ;; Auto vars:     Size  Location     Type
  4788 ;;		None
  4789 ;; Return value:  Size  Location     Type
  4790 ;;		None               void
  4791 ;; Registers used:
  4792 ;;		wreg, status,2
  4793 ;; Tracked objects:
  4794 ;;		On entry : 0/0
  4795 ;;		On exit  : 0/0
  4796 ;;		Unchanged: 0/0
  4797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4798 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4799 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4800 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4801 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4802 ;;Total ram usage:        0 bytes
  4803 ;; Hardware stack levels used:    1
  4804 ;; Hardware stack levels required when called:    3
  4805 ;; This function calls:
  4806 ;;		Nothing
  4807 ;; This function is called by:
  4808 ;;		_Toggle_Fan
  4809 ;; This function uses a non-reentrant model
  4810 ;;
  4811                           
  4812                           	psect	text12
  4813  0024C0                     __ptext12:
  4814                           	opt stack 0
  4815  0024C0                     _Turn_Off_Fan:
  4816                           	opt stack 26
  4817                           
  4818                           ;Fan_Support.c: 37: FAN = 0;
  4819                           
  4820                           ;incstack = 0
  4821  0024C0  0E00               	movlw	0
  4822  0024C2  6E50               	movwf	_FAN,c
  4823                           
  4824                           ;Fan_Support.c: 38: PORTAbits.RA5 = 0;
  4825  0024C4  9A80               	bcf	3968,5,c	;volatile
  4826                           
  4827                           ;Fan_Support.c: 39: PORTEbits.RE2 = 0;
  4828  0024C6  9484               	bcf	3972,2,c	;volatile
  4829  0024C8  0012               	return		;funcret
  4830  0024CA                     __end_of_Turn_Off_Fan:
  4831                           	opt stack 0
  4832                           tblptru	equ	0xFF8
  4833                           tblptrh	equ	0xFF7
  4834                           tblptrl	equ	0xFF6
  4835                           tablat	equ	0xFF5
  4836                           prodh	equ	0xFF4
  4837                           prodl	equ	0xFF3
  4838                           intcon	equ	0xFF2
  4839                           intcon2	equ	0xFF1
  4840                           postinc0	equ	0xFEE
  4841                           wreg	equ	0xFE8
  4842                           postdec1	equ	0xFE5
  4843                           fsr1l	equ	0xFE1
  4844                           postinc2	equ	0xFDE
  4845                           postdec2	equ	0xFDD
  4846                           fsr2h	equ	0xFDA
  4847                           fsr2l	equ	0xFD9
  4848                           status	equ	0xFD8
  4849                           
  4850 ;; *************** function _Set_RPM_RGB *****************
  4851 ;; Defined at:
  4852 ;;		line 98 in file "Fan_Support.c"
  4853 ;; Parameters:    Size  Location     Type
  4854 ;;  rpm             2   16[COMRAM] int 
  4855 ;; Auto vars:     Size  Location     Type
  4856 ;;		None
  4857 ;; Return value:  Size  Location     Type
  4858 ;;		None               void
  4859 ;; Registers used:
  4860 ;;		wreg, status,2, status,0
  4861 ;; Tracked objects:
  4862 ;;		On entry : 0/0
  4863 ;;		On exit  : 0/0
  4864 ;;		Unchanged: 0/0
  4865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4866 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4867 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4868 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4869 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4870 ;;Total ram usage:        2 bytes
  4871 ;; Hardware stack levels used:    1
  4872 ;; Hardware stack levels required when called:    3
  4873 ;; This function calls:
  4874 ;;		Nothing
  4875 ;; This function is called by:
  4876 ;;		_main
  4877 ;; This function uses a non-reentrant model
  4878 ;;
  4879                           
  4880                           	psect	text13
  4881  001BFC                     __ptext13:
  4882                           	opt stack 0
  4883  001BFC                     _Set_RPM_RGB:
  4884                           	opt stack 27
  4885                           
  4886                           ;Fan_Support.c: 100: MASKD = PORTD & 0x07;
  4887                           
  4888                           ;incstack = 0
  4889  001BFC  5083               	movf	3971,w,c	;volatile
  4890  001BFE  0B07               	andlw	7
  4891  001C00  6E52               	movwf	_MASKD,c
  4892                           
  4893                           ;Fan_Support.c: 101: if (rpm ==0 )
  4894  001C02  5011               	movf	Set_RPM_RGB@rpm,w,c
  4895  001C04  1012               	iorwf	Set_RPM_RGB@rpm+1,w,c
  4896  001C06  A4D8               	btfss	status,2,c
  4897  001C08  D003               	goto	l6489
  4898                           
  4899                           ;Fan_Support.c: 102: PORTD = Display_D2[0] | MASKD;
  4900  001C0A  0100               	movlb	0	; () banked
  4901  001C0C  51B8               	movf	_Display_D2& (0+255),w,b
  4902  001C0E  D02F               	goto	L5
  4903  001C10                     l6489:
  4904                           
  4905                           ;Fan_Support.c: 103: else if (rpm > 0 && rpm < 1800)
  4906  001C10  BE12               	btfsc	Set_RPM_RGB@rpm+1,7,c
  4907  001C12  D010               	goto	l6495
  4908  001C14  5012               	movf	Set_RPM_RGB@rpm+1,w,c
  4909  001C16  E103               	bnz	u5070
  4910  001C18  0411               	decf	Set_RPM_RGB@rpm,w,c
  4911  001C1A  A0D8               	btfss	status,0,c
  4912  001C1C  D00B               	goto	l6495
  4913  001C1E                     u5070:
  4914  001C1E  BE12               	btfsc	Set_RPM_RGB@rpm+1,7,c
  4915  001C20  D006               	goto	l6493
  4916  001C22  0E08               	movlw	8
  4917  001C24  5C11               	subwf	Set_RPM_RGB@rpm,w,c
  4918  001C26  0E07               	movlw	7
  4919  001C28  5812               	subwfb	Set_RPM_RGB@rpm+1,w,c
  4920  001C2A  B0D8               	btfsc	status,0,c
  4921  001C2C  D003               	goto	l6495
  4922  001C2E                     l6493:
  4923                           
  4924                           ;Fan_Support.c: 104: PORTD = Display_D2[1] | MASKD;
  4925  001C2E  0100               	movlb	0	; () banked
  4926  001C30  51B9               	movf	(_Display_D2+1)& (0+255),w,b
  4927  001C32  D01D               	goto	L5
  4928  001C34                     l6495:
  4929                           
  4930                           ;Fan_Support.c: 105: else if (rpm >= 1800 && rpm < 2700)
  4931  001C34  BE12               	btfsc	Set_RPM_RGB@rpm+1,7,c
  4932  001C36  D011               	goto	l6501
  4933  001C38  0E08               	movlw	8
  4934  001C3A  5C11               	subwf	Set_RPM_RGB@rpm,w,c
  4935  001C3C  0E07               	movlw	7
  4936  001C3E  5812               	subwfb	Set_RPM_RGB@rpm+1,w,c
  4937  001C40  A0D8               	btfss	status,0,c
  4938  001C42  D00B               	goto	l6501
  4939  001C44  BE12               	btfsc	Set_RPM_RGB@rpm+1,7,c
  4940  001C46  D006               	goto	l6499
  4941  001C48  0E8C               	movlw	140
  4942  001C4A  5C11               	subwf	Set_RPM_RGB@rpm,w,c
  4943  001C4C  0E0A               	movlw	10
  4944  001C4E  5812               	subwfb	Set_RPM_RGB@rpm+1,w,c
  4945  001C50  B0D8               	btfsc	status,0,c
  4946  001C52  D003               	goto	l6501
  4947  001C54                     l6499:
  4948                           
  4949                           ;Fan_Support.c: 106: PORTD = Display_D2[2] | MASKD;
  4950  001C54  0100               	movlb	0	; () banked
  4951  001C56  51BA               	movf	(_Display_D2+2)& (0+255),w,b
  4952  001C58  D00A               	goto	L5
  4953  001C5A                     l6501:
  4954                           
  4955                           ;Fan_Support.c: 107: else if (rpm >= 2700)
  4956  001C5A  BE12               	btfsc	Set_RPM_RGB@rpm+1,7,c
  4957  001C5C  D00B               	goto	l530
  4958  001C5E  0E8C               	movlw	140
  4959  001C60  5C11               	subwf	Set_RPM_RGB@rpm,w,c
  4960  001C62  0E0A               	movlw	10
  4961  001C64  5812               	subwfb	Set_RPM_RGB@rpm+1,w,c
  4962  001C66  A0D8               	btfss	status,0,c
  4963  001C68  D005               	goto	l530
  4964                           
  4965                           ;Fan_Support.c: 108: PORTD = Display_D2[3] | MASKD;
  4966  001C6A  0100               	movlb	0	; () banked
  4967  001C6C  51BB               	movf	(_Display_D2+3)& (0+255),w,b
  4968  001C6E                     L5:
  4969  001C6E  1052               	iorwf	_MASKD,w,c
  4970  001C70  6E83               	movwf	3971,c	;volatile
  4971                           
  4972                           ; BSR set to: 0
  4973                           
  4974                           ; BSR set to: 0
  4975                           
  4976                           ; BSR set to: 0
  4977  001C72  D000               	goto	l530
  4978  001C74                     l530:
  4979  001C74  0012               	return		;funcret
  4980  001C76                     __end_of_Set_RPM_RGB:
  4981                           	opt stack 0
  4982                           tblptru	equ	0xFF8
  4983                           tblptrh	equ	0xFF7
  4984                           tblptrl	equ	0xFF6
  4985                           tablat	equ	0xFF5
  4986                           prodh	equ	0xFF4
  4987                           prodl	equ	0xFF3
  4988                           intcon	equ	0xFF2
  4989                           intcon2	equ	0xFF1
  4990                           postinc0	equ	0xFEE
  4991                           wreg	equ	0xFE8
  4992                           postdec1	equ	0xFE5
  4993                           fsr1l	equ	0xFE1
  4994                           postinc2	equ	0xFDE
  4995                           postdec2	equ	0xFDD
  4996                           fsr2h	equ	0xFDA
  4997                           fsr2l	equ	0xFD9
  4998                           status	equ	0xFD8
  4999                           
  5000 ;; *************** function _Set_DC_RGB *****************
  5001 ;; Defined at:
  5002 ;;		line 92 in file "Fan_Support.c"
  5003 ;; Parameters:    Size  Location     Type
  5004 ;;  duty_cycle      2   16[COMRAM] int 
  5005 ;; Auto vars:     Size  Location     Type
  5006 ;;		None
  5007 ;; Return value:  Size  Location     Type
  5008 ;;		None               void
  5009 ;; Registers used:
  5010 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5011 ;; Tracked objects:
  5012 ;;		On entry : 0/0
  5013 ;;		On exit  : 0/0
  5014 ;;		Unchanged: 0/0
  5015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5016 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5017 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5018 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5019 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5020 ;;Total ram usage:        2 bytes
  5021 ;; Hardware stack levels used:    1
  5022 ;; Hardware stack levels required when called:    3
  5023 ;; This function calls:
  5024 ;;		Nothing
  5025 ;; This function is called by:
  5026 ;;		_main
  5027 ;; This function uses a non-reentrant model
  5028 ;;
  5029                           
  5030                           	psect	text14
  5031  002386                     __ptext14:
  5032                           	opt stack 0
  5033  002386                     _Set_DC_RGB:
  5034                           	opt stack 27
  5035                           
  5036                           ;Fan_Support.c: 94: MASKA = PORTA & 0x20;
  5037                           
  5038                           ;incstack = 0
  5039  002386  5080               	movf	3968,w,c	;volatile
  5040  002388  0B20               	andlw	32
  5041  00238A  6E51               	movwf	_MASKA,c
  5042                           
  5043                           ;Fan_Support.c: 95: PORTA = Display_D1[duty_cycle] | MASKA;
  5044  00238C  0E80               	movlw	low _Display_D1
  5045  00238E  2411               	addwf	Set_DC_RGB@duty_cycle,w,c
  5046  002390  6ED9               	movwf	fsr2l,c
  5047  002392  0E00               	movlw	high _Display_D1
  5048  002394  2012               	addwfc	Set_DC_RGB@duty_cycle+1,w,c
  5049  002396  6EDA               	movwf	fsr2h,c
  5050  002398  50DF               	movf	indf2,w,c
  5051  00239A  1051               	iorwf	_MASKA,w,c
  5052  00239C  6E80               	movwf	3968,c	;volatile
  5053  00239E  0012               	return		;funcret
  5054  0023A0                     __end_of_Set_DC_RGB:
  5055                           	opt stack 0
  5056                           tblptru	equ	0xFF8
  5057                           tblptrh	equ	0xFF7
  5058                           tblptrl	equ	0xFF6
  5059                           tablat	equ	0xFF5
  5060                           prodh	equ	0xFF4
  5061                           prodl	equ	0xFF3
  5062                           intcon	equ	0xFF2
  5063                           intcon2	equ	0xFF1
  5064                           postinc0	equ	0xFEE
  5065                           wreg	equ	0xFE8
  5066                           postdec1	equ	0xFE5
  5067                           fsr1l	equ	0xFE1
  5068                           indf2	equ	0xFDF
  5069                           postinc2	equ	0xFDE
  5070                           postdec2	equ	0xFDD
  5071                           fsr2h	equ	0xFDA
  5072                           fsr2l	equ	0xFD9
  5073                           status	equ	0xFD8
  5074                           
  5075 ;; *************** function _Initialize_Screen *****************
  5076 ;; Defined at:
  5077 ;;		line 34 in file "Main_Screen.c"
  5078 ;; Parameters:    Size  Location     Type
  5079 ;;		None
  5080 ;; Auto vars:     Size  Location     Type
  5081 ;;		None
  5082 ;; Return value:  Size  Location     Type
  5083 ;;		None               void
  5084 ;; Registers used:
  5085 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5086 ;; Tracked objects:
  5087 ;;		On entry : 0/0
  5088 ;;		On exit  : 0/0
  5089 ;;		Unchanged: 0/0
  5090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5091 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5092 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5093 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5094 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5095 ;;Total ram usage:        0 bytes
  5096 ;; Hardware stack levels used:    1
  5097 ;; Hardware stack levels required when called:   10
  5098 ;; This function calls:
  5099 ;;		_LCD_Reset
  5100 ;;		_TFT_GreenTab_Initialize
  5101 ;;		_drawCircle
  5102 ;;		_drawtext
  5103 ;;		_fillScreen
  5104 ;;		_strcpy
  5105 ;; This function is called by:
  5106 ;;		_main
  5107 ;; This function uses a non-reentrant model
  5108 ;;
  5109                           
  5110                           	psect	text15
  5111  0007A4                     __ptext15:
  5112                           	opt stack 0
  5113  0007A4                     _Initialize_Screen:
  5114                           	opt stack 20
  5115                           
  5116                           ;Main_Screen.c: 36: LCD_Reset();
  5117                           
  5118                           ;incstack = 0
  5119  0007A4  EC08  F012         	call	_LCD_Reset	;wreg free
  5120                           
  5121                           ;Main_Screen.c: 37: TFT_GreenTab_Initialize();
  5122  0007A8  EC03  F011         	call	_TFT_GreenTab_Initialize	;wreg free
  5123                           
  5124                           ;Main_Screen.c: 38: fillScreen(0x0000);
  5125  0007AC  0E00               	movlw	0
  5126  0007AE  6E25               	movwf	fillScreen@color+1,c
  5127  0007B0  0E00               	movlw	0
  5128  0007B2  6E24               	movwf	fillScreen@color,c
  5129  0007B4  ECB5  F011         	call	_fillScreen	;wreg free
  5130                           
  5131                           ;Main_Screen.c: 39: txt = buffer;
  5132  0007B8  0E93               	movlw	low _buffer
  5133  0007BA  6E4E               	movwf	_txt,c
  5134  0007BC  0E01               	movlw	high _buffer
  5135  0007BE  6E4F               	movwf	_txt+1,c
  5136                           
  5137                           ;Main_Screen.c: 40: strcpy(txt, "ECE3301L Spring 21-S1");
  5138  0007C0  C04E  F011         	movff	_txt,strcpy@to
  5139  0007C4  C04F  F012         	movff	_txt+1,strcpy@to+1
  5140  0007C8  0E60               	movlw	low STR_1
  5141  0007CA  6E13               	movwf	strcpy@from,c
  5142  0007CC  0EFF               	movlw	high STR_1
  5143  0007CE  6E14               	movwf	strcpy@from+1,c
  5144  0007D0  ECD2  F010         	call	_strcpy	;wreg free
  5145                           
  5146                           ;Main_Screen.c: 42: drawtext(1 , 1, txt, 0xFFFF , 0x0000, 1);
  5147  0007D4  0E01               	movlw	1
  5148  0007D6  6E39               	movwf	drawtext@y,c
  5149  0007D8  C04E  F03A         	movff	_txt,drawtext@_text
  5150  0007DC  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  5151  0007E0  0EFF               	movlw	255
  5152  0007E2  6E3D               	movwf	drawtext@color+1,c
  5153  0007E4  683C               	setf	drawtext@color,c
  5154  0007E6  0E00               	movlw	0
  5155  0007E8  6E3F               	movwf	drawtext@bg+1,c
  5156  0007EA  0E00               	movlw	0
  5157  0007EC  6E3E               	movwf	drawtext@bg,c
  5158  0007EE  0E01               	movlw	1
  5159  0007F0  6E40               	movwf	drawtext@size,c
  5160  0007F2  0E01               	movlw	1
  5161  0007F4  ECD0  F008         	call	_drawtext
  5162                           
  5163                           ;Main_Screen.c: 44: strcpy(txt, "Temperature:");
  5164  0007F8  C04E  F011         	movff	_txt,strcpy@to
  5165  0007FC  C04F  F012         	movff	_txt+1,strcpy@to+1
  5166  000800  0ECF               	movlw	low STR_2
  5167  000802  6E13               	movwf	strcpy@from,c
  5168  000804  0EFF               	movlw	high STR_2
  5169  000806  6E14               	movwf	strcpy@from+1,c
  5170  000808  ECD2  F010         	call	_strcpy	;wreg free
  5171                           
  5172                           ;Main_Screen.c: 45: drawtext(24 , 11 , txt, 0xF81F, 0x0000, 1);
  5173  00080C  0E0B               	movlw	11
  5174  00080E  6E39               	movwf	drawtext@y,c
  5175  000810  C04E  F03A         	movff	_txt,drawtext@_text
  5176  000814  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  5177  000818  0EF8               	movlw	248
  5178  00081A  6E3D               	movwf	drawtext@color+1,c
  5179  00081C  0E1F               	movlw	31
  5180  00081E  6E3C               	movwf	drawtext@color,c
  5181  000820  0E00               	movlw	0
  5182  000822  6E3F               	movwf	drawtext@bg+1,c
  5183  000824  0E00               	movlw	0
  5184  000826  6E3E               	movwf	drawtext@bg,c
  5185  000828  0E01               	movlw	1
  5186  00082A  6E40               	movwf	drawtext@size,c
  5187  00082C  0E18               	movlw	24
  5188  00082E  ECD0  F008         	call	_drawtext
  5189                           
  5190                           ;Main_Screen.c: 46: drawCircle(40, 23 , 2 , 0xFFE0);
  5191  000832  0E00               	movlw	0
  5192  000834  6E1D               	movwf	drawCircle@x0+1,c
  5193  000836  0E28               	movlw	40
  5194  000838  6E1C               	movwf	drawCircle@x0,c
  5195  00083A  0E00               	movlw	0
  5196  00083C  6E1F               	movwf	drawCircle@y0+1,c
  5197  00083E  0E17               	movlw	23
  5198  000840  6E1E               	movwf	drawCircle@y0,c
  5199  000842  0E00               	movlw	0
  5200  000844  6E21               	movwf	drawCircle@r+1,c
  5201  000846  0E02               	movlw	2
  5202  000848  6E20               	movwf	drawCircle@r,c
  5203  00084A  0EFF               	movlw	255
  5204  00084C  6E23               	movwf	drawCircle@color+1,c
  5205  00084E  0EE0               	movlw	224
  5206  000850  6E22               	movwf	drawCircle@color,c
  5207  000852  EC0D  F006         	call	_drawCircle	;wreg free
  5208                           
  5209                           ;Main_Screen.c: 47: strcpy(txt, "C/");
  5210  000856  C04E  F011         	movff	_txt,strcpy@to
  5211  00085A  C04F  F012         	movff	_txt+1,strcpy@to+1
  5212  00085E  0EF8               	movlw	low STR_3
  5213  000860  6E13               	movwf	strcpy@from,c
  5214  000862  0EFF               	movlw	high STR_3
  5215  000864  6E14               	movwf	strcpy@from+1,c
  5216  000866  ECD2  F010         	call	_strcpy	;wreg free
  5217                           
  5218                           ;Main_Screen.c: 48: drawtext(45 , 23, txt, 0xFFE0 , 0x0000, 2);
  5219  00086A  0E17               	movlw	23
  5220  00086C  6E39               	movwf	drawtext@y,c
  5221  00086E  C04E  F03A         	movff	_txt,drawtext@_text
  5222  000872  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  5223  000876  0EFF               	movlw	255
  5224  000878  6E3D               	movwf	drawtext@color+1,c
  5225  00087A  0EE0               	movlw	224
  5226  00087C  6E3C               	movwf	drawtext@color,c
  5227  00087E  0E00               	movlw	0
  5228  000880  6E3F               	movwf	drawtext@bg+1,c
  5229  000882  0E00               	movlw	0
  5230  000884  6E3E               	movwf	drawtext@bg,c
  5231  000886  0E02               	movlw	2
  5232  000888  6E40               	movwf	drawtext@size,c
  5233  00088A  0E2D               	movlw	45
  5234  00088C  ECD0  F008         	call	_drawtext
  5235                           
  5236                           ;Main_Screen.c: 49: strcpy(txt, "F");
  5237  000890  C04E  F011         	movff	_txt,strcpy@to
  5238  000894  C04F  F012         	movff	_txt+1,strcpy@to+1
  5239  000898  0EF2               	movlw	low (STR_11+2)
  5240  00089A  6E13               	movwf	strcpy@from,c
  5241  00089C  0EFF               	movlw	high (STR_11+2)
  5242  00089E  6E14               	movwf	strcpy@from+1,c
  5243  0008A0  ECD2  F010         	call	_strcpy	;wreg free
  5244                           
  5245                           ;Main_Screen.c: 50: drawCircle(110, 23 , 2 , 0xFFE0);
  5246  0008A4  0E00               	movlw	0
  5247  0008A6  6E1D               	movwf	drawCircle@x0+1,c
  5248  0008A8  0E6E               	movlw	110
  5249  0008AA  6E1C               	movwf	drawCircle@x0,c
  5250  0008AC  0E00               	movlw	0
  5251  0008AE  6E1F               	movwf	drawCircle@y0+1,c
  5252  0008B0  0E17               	movlw	23
  5253  0008B2  6E1E               	movwf	drawCircle@y0,c
  5254  0008B4  0E00               	movlw	0
  5255  0008B6  6E21               	movwf	drawCircle@r+1,c
  5256  0008B8  0E02               	movlw	2
  5257  0008BA  6E20               	movwf	drawCircle@r,c
  5258  0008BC  0EFF               	movlw	255
  5259  0008BE  6E23               	movwf	drawCircle@color+1,c
  5260  0008C0  0EE0               	movlw	224
  5261  0008C2  6E22               	movwf	drawCircle@color,c
  5262  0008C4  EC0D  F006         	call	_drawCircle	;wreg free
  5263                           
  5264                           ;Main_Screen.c: 51: drawtext(115 , 23, txt, 0xFFE0 , 0x0000, 2);
  5265  0008C8  0E17               	movlw	23
  5266  0008CA  6E39               	movwf	drawtext@y,c
  5267  0008CC  C04E  F03A         	movff	_txt,drawtext@_text
  5268  0008D0  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  5269  0008D4  0EFF               	movlw	255
  5270  0008D6  6E3D               	movwf	drawtext@color+1,c
  5271  0008D8  0EE0               	movlw	224
  5272  0008DA  6E3C               	movwf	drawtext@color,c
  5273  0008DC  0E00               	movlw	0
  5274  0008DE  6E3F               	movwf	drawtext@bg+1,c
  5275  0008E0  0E00               	movlw	0
  5276  0008E2  6E3E               	movwf	drawtext@bg,c
  5277  0008E4  0E02               	movlw	2
  5278  0008E6  6E40               	movwf	drawtext@size,c
  5279  0008E8  0E73               	movlw	115
  5280  0008EA  ECD0  F008         	call	_drawtext
  5281                           
  5282                           ;Main_Screen.c: 52: strcpy(txt, "Time");
  5283  0008EE  C04E  F011         	movff	_txt,strcpy@to
  5284  0008F2  C04F  F012         	movff	_txt+1,strcpy@to+1
  5285  0008F6  0EE2               	movlw	low STR_5
  5286  0008F8  6E13               	movwf	strcpy@from,c
  5287  0008FA  0EFF               	movlw	high STR_5
  5288  0008FC  6E14               	movwf	strcpy@from+1,c
  5289  0008FE  ECD2  F010         	call	_strcpy	;wreg free
  5290                           
  5291                           ;Main_Screen.c: 53: drawtext(50 , 40 , txt, 0x001F , 0x0000, 1);
  5292  000902  0E28               	movlw	40
  5293  000904  6E39               	movwf	drawtext@y,c
  5294  000906  C04E  F03A         	movff	_txt,drawtext@_text
  5295  00090A  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  5296  00090E  0E00               	movlw	0
  5297  000910  6E3D               	movwf	drawtext@color+1,c
  5298  000912  0E1F               	movlw	31
  5299  000914  6E3C               	movwf	drawtext@color,c
  5300  000916  0E00               	movlw	0
  5301  000918  6E3F               	movwf	drawtext@bg+1,c
  5302  00091A  0E00               	movlw	0
  5303  00091C  6E3E               	movwf	drawtext@bg,c
  5304  00091E  0E01               	movlw	1
  5305  000920  6E40               	movwf	drawtext@size,c
  5306  000922  0E32               	movlw	50
  5307  000924  ECD0  F008         	call	_drawtext
  5308                           
  5309                           ;Main_Screen.c: 54: strcpy(txt, "Date");
  5310  000928  C04E  F011         	movff	_txt,strcpy@to
  5311  00092C  C04F  F012         	movff	_txt+1,strcpy@to+1
  5312  000930  0EE7               	movlw	low STR_6
  5313  000932  6E13               	movwf	strcpy@from,c
  5314  000934  0EFF               	movlw	high STR_6
  5315  000936  6E14               	movwf	strcpy@from+1,c
  5316  000938  ECD2  F010         	call	_strcpy	;wreg free
  5317                           
  5318                           ;Main_Screen.c: 55: drawtext(50 , 71 , txt, 0xF800 , 0x0000, 1);
  5319  00093C  0E47               	movlw	71
  5320  00093E  6E39               	movwf	drawtext@y,c
  5321  000940  C04E  F03A         	movff	_txt,drawtext@_text
  5322  000944  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  5323  000948  0EF8               	movlw	248
  5324  00094A  6E3D               	movwf	drawtext@color+1,c
  5325  00094C  0E00               	movlw	0
  5326  00094E  6E3C               	movwf	drawtext@color,c
  5327  000950  0E00               	movlw	0
  5328  000952  6E3F               	movwf	drawtext@bg+1,c
  5329  000954  0E00               	movlw	0
  5330  000956  6E3E               	movwf	drawtext@bg,c
  5331  000958  0E01               	movlw	1
  5332  00095A  6E40               	movwf	drawtext@size,c
  5333  00095C  0E32               	movlw	50
  5334  00095E  ECD0  F008         	call	_drawtext
  5335                           
  5336                           ;Main_Screen.c: 58: strcpy(txt, "  FAN");
  5337  000962  C04E  F011         	movff	_txt,strcpy@to
  5338  000966  C04F  F012         	movff	_txt+1,strcpy@to+1
  5339  00096A  0EDC               	movlw	low STR_7
  5340  00096C  6E13               	movwf	strcpy@from,c
  5341  00096E  0EFF               	movlw	high STR_7
  5342  000970  6E14               	movwf	strcpy@from+1,c
  5343  000972  ECD2  F010         	call	_strcpy	;wreg free
  5344                           
  5345                           ;Main_Screen.c: 59: drawtext(85, 120, txt, 0x001F , 0x0000, 1);
  5346  000976  0E78               	movlw	120
  5347  000978  6E39               	movwf	drawtext@y,c
  5348  00097A  C04E  F03A         	movff	_txt,drawtext@_text
  5349  00097E  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  5350  000982  0E00               	movlw	0
  5351  000984  6E3D               	movwf	drawtext@color+1,c
  5352  000986  0E1F               	movlw	31
  5353  000988  6E3C               	movwf	drawtext@color,c
  5354  00098A  0E00               	movlw	0
  5355  00098C  6E3F               	movwf	drawtext@bg+1,c
  5356  00098E  0E00               	movlw	0
  5357  000990  6E3E               	movwf	drawtext@bg,c
  5358  000992  0E01               	movlw	1
  5359  000994  6E40               	movwf	drawtext@size,c
  5360  000996  0E55               	movlw	85
  5361  000998  ECD0  F008         	call	_drawtext
  5362                           
  5363                           ;Main_Screen.c: 61: strcpy(txt, "DC");
  5364  00099C  C04E  F011         	movff	_txt,strcpy@to
  5365  0009A0  C04F  F012         	movff	_txt+1,strcpy@to+1
  5366  0009A4  0EFB               	movlw	low STR_8
  5367  0009A6  6E13               	movwf	strcpy@from,c
  5368  0009A8  0EFF               	movlw	high STR_8
  5369  0009AA  6E14               	movwf	strcpy@from+1,c
  5370  0009AC  ECD2  F010         	call	_strcpy	;wreg free
  5371                           
  5372                           ;Main_Screen.c: 62: drawtext(12, 140, txt, 0xFFFF , 0x0000, 1);
  5373  0009B0  0E8C               	movlw	140
  5374  0009B2  6E39               	movwf	drawtext@y,c
  5375  0009B4  C04E  F03A         	movff	_txt,drawtext@_text
  5376  0009B8  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  5377  0009BC  0EFF               	movlw	255
  5378  0009BE  6E3D               	movwf	drawtext@color+1,c
  5379  0009C0  683C               	setf	drawtext@color,c
  5380  0009C2  0E00               	movlw	0
  5381  0009C4  6E3F               	movwf	drawtext@bg+1,c
  5382  0009C6  0E00               	movlw	0
  5383  0009C8  6E3E               	movwf	drawtext@bg,c
  5384  0009CA  0E01               	movlw	1
  5385  0009CC  6E40               	movwf	drawtext@size,c
  5386  0009CE  0E0C               	movlw	12
  5387  0009D0  ECD0  F008         	call	_drawtext
  5388                           
  5389                           ;Main_Screen.c: 64: strcpy(txt, "RPM");
  5390  0009D4  C04E  F011         	movff	_txt,strcpy@to
  5391  0009D8  C04F  F012         	movff	_txt+1,strcpy@to+1
  5392  0009DC  0EF4               	movlw	low STR_9
  5393  0009DE  6E13               	movwf	strcpy@from,c
  5394  0009E0  0EFF               	movlw	high STR_9
  5395  0009E2  6E14               	movwf	strcpy@from+1,c
  5396  0009E4  ECD2  F010         	call	_strcpy	;wreg free
  5397                           
  5398                           ;Main_Screen.c: 65: drawtext(95, 140, txt, 0xFFFF , 0x0000 , 1);
  5399  0009E8  0E8C               	movlw	140
  5400  0009EA  6E39               	movwf	drawtext@y,c
  5401  0009EC  C04E  F03A         	movff	_txt,drawtext@_text
  5402  0009F0  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  5403  0009F4  0EFF               	movlw	255
  5404  0009F6  6E3D               	movwf	drawtext@color+1,c
  5405  0009F8  683C               	setf	drawtext@color,c
  5406  0009FA  0E00               	movlw	0
  5407  0009FC  6E3F               	movwf	drawtext@bg+1,c
  5408  0009FE  0E00               	movlw	0
  5409  000A00  6E3E               	movwf	drawtext@bg,c
  5410  000A02  0E01               	movlw	1
  5411  000A04  6E40               	movwf	drawtext@size,c
  5412  000A06  0E5F               	movlw	95
  5413  000A08  ECD0  F008         	call	_drawtext
  5414  000A0C  0012               	return		;funcret
  5415  000A0E                     __end_of_Initialize_Screen:
  5416                           	opt stack 0
  5417                           tblptru	equ	0xFF8
  5418                           tblptrh	equ	0xFF7
  5419                           tblptrl	equ	0xFF6
  5420                           tablat	equ	0xFF5
  5421                           prodh	equ	0xFF4
  5422                           prodl	equ	0xFF3
  5423                           intcon	equ	0xFF2
  5424                           intcon2	equ	0xFF1
  5425                           postinc0	equ	0xFEE
  5426                           wreg	equ	0xFE8
  5427                           postdec1	equ	0xFE5
  5428                           fsr1l	equ	0xFE1
  5429                           indf2	equ	0xFDF
  5430                           postinc2	equ	0xFDE
  5431                           postdec2	equ	0xFDD
  5432                           fsr2h	equ	0xFDA
  5433                           fsr2l	equ	0xFD9
  5434                           status	equ	0xFD8
  5435                           
  5436 ;; *************** function _strcpy *****************
  5437 ;; Defined at:
  5438 ;;		line 8 in file "E:\XC8\sources\common\strcpy.c"
  5439 ;; Parameters:    Size  Location     Type
  5440 ;;  to              2   16[COMRAM] PTR unsigned char 
  5441 ;;		 -> NULL(0), Fan_SW_Txt(4), buffer(31), 
  5442 ;;  from            2   18[COMRAM] PTR const unsigned char 
  5443 ;;		 -> STR_11(4), STR_10(4), STR_9(4), STR_8(3), 
  5444 ;;		 -> STR_7(6), STR_6(5), STR_5(5), STR_4(2), 
  5445 ;;		 -> STR_3(3), STR_2(13), STR_1(22), 
  5446 ;; Auto vars:     Size  Location     Type
  5447 ;;  cp              2   20[COMRAM] PTR unsigned char 
  5448 ;;		 -> NULL(0), Fan_SW_Txt(4), buffer(31), 
  5449 ;; Return value:  Size  Location     Type
  5450 ;;                  2   16[COMRAM] PTR unsigned char 
  5451 ;; Registers used:
  5452 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  5453 ;; Tracked objects:
  5454 ;;		On entry : 0/0
  5455 ;;		On exit  : 0/0
  5456 ;;		Unchanged: 0/0
  5457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5458 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5459 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5460 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5461 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5462 ;;Total ram usage:        6 bytes
  5463 ;; Hardware stack levels used:    1
  5464 ;; Hardware stack levels required when called:    3
  5465 ;; This function calls:
  5466 ;;		Nothing
  5467 ;; This function is called by:
  5468 ;;		_Initialize_Screen
  5469 ;;		_Update_Screen
  5470 ;; This function uses a non-reentrant model
  5471 ;;
  5472                           
  5473                           	psect	text16
  5474  0021A4                     __ptext16:
  5475                           	opt stack 0
  5476  0021A4                     _strcpy:
  5477                           	opt stack 26
  5478                           
  5479                           ;incstack = 0
  5480  0021A4  C011  F015         	movff	strcpy@to,strcpy@cp
  5481  0021A8  C012  F016         	movff	strcpy@to+1,strcpy@cp+1
  5482  0021AC  D005               	goto	l6019
  5483  0021AE                     l6017:
  5484  0021AE  4A15               	infsnz	strcpy@cp,f,c
  5485  0021B0  2A16               	incf	strcpy@cp+1,f,c
  5486  0021B2  4A13               	infsnz	strcpy@from,f,c
  5487  0021B4  2A14               	incf	strcpy@from+1,f,c
  5488  0021B6  D000               	goto	l6019
  5489  0021B8                     l6019:
  5490  0021B8  C013  FFF6         	movff	strcpy@from,tblptrl
  5491  0021BC  C014  FFF7         	movff	strcpy@from+1,tblptrh
  5492  0021C0                     	if	0	;tblptru may be non-zero
  5493  0021C0                     	endif
  5494  0021C0                     	if	0	;tblptru may be non-zero
  5495  0021C0                     	endif
  5496  0021C0  C015  FFD9         	movff	strcpy@cp,fsr2l
  5497  0021C4  C016  FFDA         	movff	strcpy@cp+1,fsr2h
  5498  0021C8  0008               	tblrd		*
  5499  0021CA  CFF5 FFDF          	movff	tablat,indf2
  5500  0021CE  50DF               	movf	indf2,w,c
  5501  0021D0  A4D8               	btfss	status,2,c
  5502  0021D2  D7ED               	goto	l6017
  5503                           
  5504                           ;	Return value of _strcpy is never used
  5505  0021D4  0012               	return		;funcret
  5506  0021D6                     __end_of_strcpy:
  5507                           	opt stack 0
  5508                           tblptru	equ	0xFF8
  5509                           tblptrh	equ	0xFF7
  5510                           tblptrl	equ	0xFF6
  5511                           tablat	equ	0xFF5
  5512                           prodh	equ	0xFF4
  5513                           prodl	equ	0xFF3
  5514                           intcon	equ	0xFF2
  5515                           intcon2	equ	0xFF1
  5516                           postinc0	equ	0xFEE
  5517                           wreg	equ	0xFE8
  5518                           postdec1	equ	0xFE5
  5519                           fsr1l	equ	0xFE1
  5520                           indf2	equ	0xFDF
  5521                           postinc2	equ	0xFDE
  5522                           postdec2	equ	0xFDD
  5523                           fsr2h	equ	0xFDA
  5524                           fsr2l	equ	0xFD9
  5525                           status	equ	0xFD8
  5526                           
  5527 ;; *************** function _fillScreen *****************
  5528 ;; Defined at:
  5529 ;;		line 620 in file "ST7735_TFT.c"
  5530 ;; Parameters:    Size  Location     Type
  5531 ;;  color           2   35[COMRAM] unsigned int 
  5532 ;; Auto vars:     Size  Location     Type
  5533 ;;		None
  5534 ;; Return value:  Size  Location     Type
  5535 ;;		None               void
  5536 ;; Registers used:
  5537 ;;		wreg, status,2, status,0, cstack
  5538 ;; Tracked objects:
  5539 ;;		On entry : 0/0
  5540 ;;		On exit  : 0/0
  5541 ;;		Unchanged: 0/0
  5542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5543 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5544 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5545 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5546 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5547 ;;Total ram usage:        2 bytes
  5548 ;; Hardware stack levels used:    1
  5549 ;; Hardware stack levels required when called:    7
  5550 ;; This function calls:
  5551 ;;		_fillRectangle
  5552 ;; This function is called by:
  5553 ;;		_Initialize_Screen
  5554 ;; This function uses a non-reentrant model
  5555 ;;
  5556                           
  5557                           	psect	text17
  5558  00236A                     __ptext17:
  5559                           	opt stack 0
  5560  00236A                     _fillScreen:
  5561                           	opt stack 22
  5562                           
  5563                           ;ST7735_TFT.c: 622: fillRectangle(0, 0, 128, 160, color);
  5564                           
  5565                           ;incstack = 0
  5566  00236A  0E00               	movlw	0
  5567  00236C  6E18               	movwf	fillRectangle@y,c
  5568  00236E  0E80               	movlw	128
  5569  002370  6E19               	movwf	fillRectangle@w,c
  5570  002372  0EA0               	movlw	160
  5571  002374  6E1A               	movwf	fillRectangle@h,c
  5572  002376  C024  F01B         	movff	fillScreen@color,fillRectangle@color
  5573  00237A  C025  F01C         	movff	fillScreen@color+1,fillRectangle@color+1
  5574  00237E  0E00               	movlw	0
  5575  002380  EC2E  F00B         	call	_fillRectangle
  5576  002384  0012               	return		;funcret
  5577  002386                     __end_of_fillScreen:
  5578                           	opt stack 0
  5579                           tblptru	equ	0xFF8
  5580                           tblptrh	equ	0xFF7
  5581                           tblptrl	equ	0xFF6
  5582                           tablat	equ	0xFF5
  5583                           prodh	equ	0xFF4
  5584                           prodl	equ	0xFF3
  5585                           intcon	equ	0xFF2
  5586                           intcon2	equ	0xFF1
  5587                           postinc0	equ	0xFEE
  5588                           wreg	equ	0xFE8
  5589                           postdec1	equ	0xFE5
  5590                           fsr1l	equ	0xFE1
  5591                           indf2	equ	0xFDF
  5592                           postinc2	equ	0xFDE
  5593                           postdec2	equ	0xFDD
  5594                           fsr2h	equ	0xFDA
  5595                           fsr2l	equ	0xFD9
  5596                           status	equ	0xFD8
  5597                           
  5598 ;; *************** function _fillRectangle *****************
  5599 ;; Defined at:
  5600 ;;		line 504 in file "ST7735_TFT.c"
  5601 ;; Parameters:    Size  Location     Type
  5602 ;;  x               1    wreg     unsigned char 
  5603 ;;  y               1   23[COMRAM] unsigned char 
  5604 ;;  w               1   24[COMRAM] unsigned char 
  5605 ;;  h               1   25[COMRAM] unsigned char 
  5606 ;;  color           2   26[COMRAM] unsigned int 
  5607 ;; Auto vars:     Size  Location     Type
  5608 ;;  x               1   34[COMRAM] unsigned char 
  5609 ;;  lo              1   33[COMRAM] unsigned char 
  5610 ;;  hi              1   32[COMRAM] unsigned char 
  5611 ;; Return value:  Size  Location     Type
  5612 ;;		None               void
  5613 ;; Registers used:
  5614 ;;		wreg, status,2, status,0, cstack
  5615 ;; Tracked objects:
  5616 ;;		On entry : 0/0
  5617 ;;		On exit  : 0/0
  5618 ;;		Unchanged: 0/0
  5619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5620 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5621 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5622 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5623 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5624 ;;Total ram usage:       12 bytes
  5625 ;; Hardware stack levels used:    1
  5626 ;; Hardware stack levels required when called:    6
  5627 ;; This function calls:
  5628 ;;		_setAddrWindow
  5629 ;;		_spiwrite
  5630 ;; This function is called by:
  5631 ;;		_fillScreen
  5632 ;; This function uses a non-reentrant model
  5633 ;;
  5634                           
  5635                           	psect	text18
  5636  00165C                     __ptext18:
  5637                           	opt stack 0
  5638  00165C                     _fillRectangle:
  5639                           	opt stack 22
  5640                           
  5641                           ;incstack = 0
  5642                           ;fillRectangle@x stored from wreg
  5643  00165C  6E23               	movwf	fillRectangle@x,c
  5644                           
  5645                           ;ST7735_TFT.c: 506: unsigned char hi, lo;
  5646                           ;ST7735_TFT.c: 507: if((x >= 128) || (y >= 160))
  5647  00165E  0E80               	movlw	128
  5648  001660  6023               	cpfslt	fillRectangle@x,c
  5649  001662  D069               	goto	l416
  5650  001664  0E9F               	movlw	159
  5651  001666  6418               	cpfsgt	fillRectangle@y,c
  5652  001668  D001               	goto	l5729
  5653                           
  5654                           ;ST7735_TFT.c: 508: return;
  5655  00166A  D065               	goto	l416
  5656  00166C                     l5729:
  5657                           
  5658                           ;ST7735_TFT.c: 509: if((x + w - 1) >= 128)
  5659  00166C  0EFF               	movlw	255
  5660  00166E  6E1D               	movwf	??_fillRectangle& (0+255),c
  5661  001670  0EFF               	movlw	255
  5662  001672  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  5663  001674  5019               	movf	fillRectangle@w,w,c
  5664  001676  C023  F01F         	movff	fillRectangle@x,??_fillRectangle+2
  5665  00167A  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  5666  00167C  261F               	addwf	??_fillRectangle+2,f,c
  5667  00167E  0E00               	movlw	0
  5668  001680  2220               	addwfc	??_fillRectangle+3,f,c
  5669  001682  501D               	movf	??_fillRectangle,w,c
  5670  001684  261F               	addwf	??_fillRectangle+2,f,c
  5671  001686  501E               	movf	??_fillRectangle+1,w,c
  5672  001688  2220               	addwfc	??_fillRectangle+3,f,c
  5673  00168A  BE20               	btfsc	??_fillRectangle+3,7,c
  5674  00168C  D00A               	goto	l417
  5675  00168E  5020               	movf	??_fillRectangle+3,w,c
  5676  001690  E104               	bnz	u4370
  5677  001692  0E80               	movlw	128
  5678  001694  5C1F               	subwf	??_fillRectangle+2,w,c
  5679  001696  A0D8               	btfss	status,0,c
  5680  001698  D004               	goto	l417
  5681  00169A                     u4370:
  5682                           
  5683                           ;ST7735_TFT.c: 510: w = 128 - x;
  5684  00169A  5023               	movf	fillRectangle@x,w,c
  5685  00169C  0800               	sublw	0
  5686  00169E  0F80               	addlw	128
  5687  0016A0  6E19               	movwf	fillRectangle@w,c
  5688  0016A2                     l417:
  5689                           
  5690                           ;ST7735_TFT.c: 511: if((y + h - 1) >= 160)
  5691  0016A2  0EFF               	movlw	255
  5692  0016A4  6E1D               	movwf	??_fillRectangle& (0+255),c
  5693  0016A6  0EFF               	movlw	255
  5694  0016A8  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  5695  0016AA  501A               	movf	fillRectangle@h,w,c
  5696  0016AC  C018  F01F         	movff	fillRectangle@y,??_fillRectangle+2
  5697  0016B0  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  5698  0016B2  261F               	addwf	??_fillRectangle+2,f,c
  5699  0016B4  0E00               	movlw	0
  5700  0016B6  2220               	addwfc	??_fillRectangle+3,f,c
  5701  0016B8  501D               	movf	??_fillRectangle,w,c
  5702  0016BA  261F               	addwf	??_fillRectangle+2,f,c
  5703  0016BC  501E               	movf	??_fillRectangle+1,w,c
  5704  0016BE  2220               	addwfc	??_fillRectangle+3,f,c
  5705  0016C0  BE20               	btfsc	??_fillRectangle+3,7,c
  5706  0016C2  D00B               	goto	l5735
  5707  0016C4  5020               	movf	??_fillRectangle+3,w,c
  5708  0016C6  E104               	bnz	u4380
  5709  0016C8  0EA0               	movlw	160
  5710  0016CA  5C1F               	subwf	??_fillRectangle+2,w,c
  5711  0016CC  A0D8               	btfss	status,0,c
  5712  0016CE  D005               	goto	l5735
  5713  0016D0                     u4380:
  5714                           
  5715                           ;ST7735_TFT.c: 512: h = 160 - y;
  5716  0016D0  5018               	movf	fillRectangle@y,w,c
  5717  0016D2  0800               	sublw	0
  5718  0016D4  0FA0               	addlw	160
  5719  0016D6  6E1A               	movwf	fillRectangle@h,c
  5720  0016D8  D000               	goto	l5735
  5721  0016DA                     l5735:
  5722                           
  5723                           ;ST7735_TFT.c: 513: setAddrWindow(x, y, x+w-1, y+h-1);
  5724  0016DA  C018  F014         	movff	fillRectangle@y,setAddrWindow@y0
  5725  0016DE  5023               	movf	fillRectangle@x,w,c
  5726  0016E0  2419               	addwf	fillRectangle@w,w,c
  5727  0016E2  6E1D               	movwf	??_fillRectangle& (0+255),c
  5728  0016E4  041D               	decf	??_fillRectangle,w,c
  5729  0016E6  6E15               	movwf	setAddrWindow@x1,c
  5730  0016E8  5018               	movf	fillRectangle@y,w,c
  5731  0016EA  241A               	addwf	fillRectangle@h,w,c
  5732  0016EC  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  5733  0016EE  041E               	decf	??_fillRectangle+1,w,c
  5734  0016F0  6E16               	movwf	setAddrWindow@y1,c
  5735  0016F2  5023               	movf	fillRectangle@x,w,c
  5736  0016F4  EC62  F00F         	call	_setAddrWindow
  5737                           
  5738                           ;ST7735_TFT.c: 514: hi = color >> 8; lo = color;
  5739  0016F8  501C               	movf	fillRectangle@color+1,w,c
  5740  0016FA  6E21               	movwf	fillRectangle@hi,c
  5741  0016FC  C01B  F022         	movff	fillRectangle@color,fillRectangle@lo
  5742                           
  5743                           ;ST7735_TFT.c: 515: PORTDbits.RD0 = 1;
  5744  001700  8083               	bsf	3971,0,c	;volatile
  5745                           
  5746                           ;ST7735_TFT.c: 516: PORTDbits.RD1 = 0;
  5747  001702  9283               	bcf	3971,1,c	;volatile
  5748                           
  5749                           ;ST7735_TFT.c: 518: for(y=h; y>0; y--) {
  5750  001704  C01A  F018         	movff	fillRectangle@h,fillRectangle@y
  5751  001708                     l5747:
  5752  001708  5018               	movf	fillRectangle@y,w,c
  5753  00170A  B4D8               	btfsc	status,2,c
  5754  00170C  D013               	goto	l420
  5755  00170E  D001               	goto	l419
  5756  001710  D011               	goto	l420
  5757  001712                     l419:
  5758                           
  5759                           ;ST7735_TFT.c: 519: for(x = w; x > 0; x--) {
  5760  001712  C019  F023         	movff	fillRectangle@w,fillRectangle@x
  5761  001716                     l5751:
  5762  001716  5023               	movf	fillRectangle@x,w,c
  5763  001718  B4D8               	btfsc	status,2,c
  5764  00171A  D00A               	goto	l5761
  5765  00171C  D001               	goto	l5755
  5766  00171E  D008               	goto	l5761
  5767  001720                     l5755:
  5768                           
  5769                           ;ST7735_TFT.c: 520: spiwrite(hi);
  5770  001720  5021               	movf	fillRectangle@hi,w,c
  5771  001722  ECF4  F011         	call	_spiwrite
  5772                           
  5773                           ;ST7735_TFT.c: 521: spiwrite(lo);
  5774  001726  5022               	movf	fillRectangle@lo,w,c
  5775  001728  ECF4  F011         	call	_spiwrite
  5776  00172C  0623               	decf	fillRectangle@x,f,c
  5777  00172E  D7F3               	goto	l5751
  5778  001730                     l5761:
  5779  001730  0618               	decf	fillRectangle@y,f,c
  5780  001732  D7EA               	goto	l5747
  5781  001734                     l420:
  5782                           
  5783                           ;ST7735_TFT.c: 522: }
  5784                           ;ST7735_TFT.c: 523: }
  5785                           ;ST7735_TFT.c: 524: PORTDbits.RD1 = 1;
  5786  001734  8283               	bsf	3971,1,c	;volatile
  5787  001736                     l416:
  5788  001736  0012               	return		;funcret
  5789  001738                     __end_of_fillRectangle:
  5790                           	opt stack 0
  5791                           tblptru	equ	0xFF8
  5792                           tblptrh	equ	0xFF7
  5793                           tblptrl	equ	0xFF6
  5794                           tablat	equ	0xFF5
  5795                           prodh	equ	0xFF4
  5796                           prodl	equ	0xFF3
  5797                           intcon	equ	0xFF2
  5798                           intcon2	equ	0xFF1
  5799                           postinc0	equ	0xFEE
  5800                           wreg	equ	0xFE8
  5801                           postdec1	equ	0xFE5
  5802                           fsr1l	equ	0xFE1
  5803                           indf2	equ	0xFDF
  5804                           postinc2	equ	0xFDE
  5805                           postdec2	equ	0xFDD
  5806                           fsr2h	equ	0xFDA
  5807                           fsr2l	equ	0xFD9
  5808                           status	equ	0xFD8
  5809                           
  5810 ;; *************** function _drawtext *****************
  5811 ;; Defined at:
  5812 ;;		line 475 in file "ST7735_TFT.c"
  5813 ;; Parameters:    Size  Location     Type
  5814 ;;  x               1    wreg     unsigned char 
  5815 ;;  y               1   56[COMRAM] unsigned char 
  5816 ;;  _text           2   57[COMRAM] PTR unsigned char 
  5817 ;;		 -> NULL(0), RPM_Txt(5), DC_Txt(4), Fan_SW_Txt(4), 
  5818 ;;		 -> date(9), time(9), tempF(4), tempC(4), 
  5819 ;;		 -> buffer(31), 
  5820 ;;  color           2   59[COMRAM] unsigned int 
  5821 ;;  bg              2   61[COMRAM] unsigned int 
  5822 ;;  size            1   63[COMRAM] unsigned char 
  5823 ;; Auto vars:     Size  Location     Type
  5824 ;;  x               1    0[BANK0 ] unsigned char 
  5825 ;;  i               2    3[BANK0 ] unsigned int 
  5826 ;;  textsize        2    1[BANK0 ] unsigned int 
  5827 ;;  cursor_x        1    6[BANK0 ] unsigned char 
  5828 ;;  cursor_y        1    5[BANK0 ] unsigned char 
  5829 ;; Return value:  Size  Location     Type
  5830 ;;		None               void
  5831 ;; Registers used:
  5832 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5833 ;; Tracked objects:
  5834 ;;		On entry : 0/0
  5835 ;;		On exit  : 0/0
  5836 ;;		Unchanged: 0/0
  5837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5838 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5839 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5840 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5841 ;;      Totals:        10       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5842 ;;Total ram usage:       17 bytes
  5843 ;; Hardware stack levels used:    1
  5844 ;; Hardware stack levels required when called:    9
  5845 ;; This function calls:
  5846 ;;		_drawChar
  5847 ;;		_strlen
  5848 ;; This function is called by:
  5849 ;;		_Initialize_Screen
  5850 ;;		_Update_Screen
  5851 ;; This function uses a non-reentrant model
  5852 ;;
  5853                           
  5854                           	psect	text19
  5855  0011A0                     __ptext19:
  5856                           	opt stack 0
  5857  0011A0                     _drawtext:
  5858                           	opt stack 20
  5859                           
  5860                           ;incstack = 0
  5861                           ;drawtext@x stored from wreg
  5862  0011A0  0100               	movlb	0	; () banked
  5863  0011A2  6FF3               	movwf	drawtext@x& (0+255),b
  5864                           
  5865                           ; BSR set to: 0
  5866                           ;ST7735_TFT.c: 477: unsigned char cursor_x, cursor_y;
  5867                           ;ST7735_TFT.c: 478: unsigned int textsize, i;
  5868                           ;ST7735_TFT.c: 479: cursor_x = x, cursor_y = y;
  5869  0011A4  C0F3  F0F9         	movff	drawtext@x,drawtext@cursor_x
  5870                           
  5871                           ; BSR set to: 0
  5872  0011A8  C039  F0F8         	movff	drawtext@y,drawtext@cursor_y
  5873                           
  5874                           ; BSR set to: 0
  5875                           ;ST7735_TFT.c: 480: textsize = strlen(_text);
  5876  0011AC  C03A  F011         	movff	drawtext@_text,strlen@s
  5877  0011B0  C03B  F012         	movff	drawtext@_text+1,strlen@s+1
  5878  0011B4  EC3D  F010         	call	_strlen	;wreg free
  5879  0011B8  C011  F0F4         	movff	?_strlen,drawtext@textsize
  5880  0011BC  C012  F0F5         	movff	?_strlen+1,drawtext@textsize+1
  5881                           
  5882                           ;ST7735_TFT.c: 481: for(i = 0; i < textsize; i++){
  5883  0011C0  0E00               	movlw	0
  5884  0011C2  0100               	movlb	0	; () banked
  5885  0011C4  6FF7               	movwf	(drawtext@i+1)& (0+255),b
  5886  0011C6  0E00               	movlw	0
  5887  0011C8  6FF6               	movwf	drawtext@i& (0+255),b
  5888  0011CA  D064               	goto	l5947
  5889  0011CC                     l5921:
  5890                           
  5891                           ; BSR set to: 0
  5892                           ;ST7735_TFT.c: 482: if(wrap && ((cursor_x + size * 5) > 128)){
  5893  0011CC  506F               	movf	_wrap,w,c
  5894  0011CE  B4D8               	btfsc	status,2,c
  5895  0011D0  D034               	goto	l5937
  5896                           
  5897                           ; BSR set to: 0
  5898  0011D2  5040               	movf	drawtext@size,w,c
  5899  0011D4  0D05               	mullw	5
  5900  0011D6  0100               	movlb	0	; () banked
  5901  0011D8  51F9               	movf	drawtext@cursor_x& (0+255),w,b
  5902  0011DA  6E41               	movwf	??_drawtext& (0+255),c
  5903  0011DC  6A42               	clrf	(??_drawtext+1)& (0+255),c
  5904  0011DE  50F3               	movf	prodl,w,c
  5905  0011E0  2641               	addwf	??_drawtext,f,c
  5906  0011E2  50F4               	movf	prodh,w,c
  5907  0011E4  2242               	addwfc	??_drawtext+1,f,c
  5908  0011E6  BE42               	btfsc	??_drawtext+1,7,c
  5909  0011E8  D028               	goto	l5937
  5910  0011EA  5042               	movf	??_drawtext+1,w,c
  5911  0011EC  E104               	bnz	u4610
  5912  0011EE  0E81               	movlw	129
  5913  0011F0  5C41               	subwf	??_drawtext,w,c
  5914  0011F2  A0D8               	btfss	status,0,c
  5915  0011F4  D022               	goto	l5937
  5916  0011F6                     u4610:
  5917                           
  5918                           ; BSR set to: 0
  5919                           ;ST7735_TFT.c: 483: cursor_x = 0;
  5920  0011F6  0E00               	movlw	0
  5921  0011F8  0100               	movlb	0	; () banked
  5922  0011FA  6FF9               	movwf	drawtext@cursor_x& (0+255),b
  5923                           
  5924                           ; BSR set to: 0
  5925                           ;ST7735_TFT.c: 484: cursor_y = cursor_y + size * 7 + 3 ;
  5926  0011FC  5040               	movf	drawtext@size,w,c
  5927  0011FE  0D07               	mullw	7
  5928  001200  50F3               	movf	prodl,w,c
  5929  001202  0100               	movlb	0	; () banked
  5930  001204  25F8               	addwf	drawtext@cursor_y& (0+255),w,b
  5931  001206  0F03               	addlw	3
  5932  001208  0100               	movlb	0	; () banked
  5933  00120A  6FF8               	movwf	drawtext@cursor_y& (0+255),b
  5934                           
  5935                           ; BSR set to: 0
  5936                           ;ST7735_TFT.c: 485: if(cursor_y > 160) cursor_y = 160;
  5937  00120C  0EA0               	movlw	160
  5938  00120E  0100               	movlb	0	; () banked
  5939  001210  65F8               	cpfsgt	drawtext@cursor_y& (0+255),b
  5940  001212  D004               	goto	l5933
  5941                           
  5942                           ; BSR set to: 0
  5943  001214  0EA0               	movlw	160
  5944  001216  0100               	movlb	0	; () banked
  5945  001218  6FF8               	movwf	drawtext@cursor_y& (0+255),b
  5946  00121A  D000               	goto	l5933
  5947  00121C                     l5933:
  5948                           
  5949                           ; BSR set to: 0
  5950                           ;ST7735_TFT.c: 486: if(_text[i] == 0x20) goto _skip; }
  5951  00121C  0100               	movlb	0	; () banked
  5952  00121E  51F6               	movf	drawtext@i& (0+255),w,b
  5953  001220  243A               	addwf	drawtext@_text,w,c
  5954  001222  6ED9               	movwf	fsr2l,c
  5955  001224  0100               	movlb	0	; () banked
  5956  001226  51F7               	movf	(drawtext@i+1)& (0+255),w,b
  5957  001228  203B               	addwfc	drawtext@_text+1,w,c
  5958  00122A  6EDA               	movwf	fsr2h,c
  5959  00122C  0E20               	movlw	32
  5960  00122E  18DE               	xorwf	postinc2,w,c
  5961  001230  B4D8               	btfsc	status,2,c
  5962  001232  D02C               	goto	l5945
  5963  001234  D002               	goto	l5937
  5964                           
  5965                           ; BSR set to: 0
  5966  001236  D02A               	goto	l5945
  5967                           
  5968                           ; BSR set to: 0
  5969  001238  D000               	goto	l5937
  5970  00123A                     l5937:
  5971                           
  5972                           ; BSR set to: 0
  5973                           ;ST7735_TFT.c: 487: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
  5974  00123A  C0F8  F02E         	movff	drawtext@cursor_y,drawChar@y
  5975  00123E  0100               	movlb	0	; () banked
  5976  001240  51F6               	movf	drawtext@i& (0+255),w,b
  5977  001242  243A               	addwf	drawtext@_text,w,c
  5978  001244  6ED9               	movwf	fsr2l,c
  5979  001246  0100               	movlb	0	; () banked
  5980  001248  51F7               	movf	(drawtext@i+1)& (0+255),w,b
  5981  00124A  203B               	addwfc	drawtext@_text+1,w,c
  5982  00124C  6EDA               	movwf	fsr2h,c
  5983  00124E  50DF               	movf	indf2,w,c
  5984  001250  6E2F               	movwf	drawChar@c,c
  5985  001252  C03C  F030         	movff	drawtext@color,drawChar@color
  5986  001256  C03D  F031         	movff	drawtext@color+1,drawChar@color+1
  5987  00125A  C03E  F032         	movff	drawtext@bg,drawChar@bg
  5988  00125E  C03F  F033         	movff	drawtext@bg+1,drawChar@bg+1
  5989  001262  C040  F034         	movff	drawtext@size,drawChar@size
  5990  001266  0100               	movlb	0	; () banked
  5991  001268  51F9               	movf	drawtext@cursor_x& (0+255),w,b
  5992  00126A  EC9D  F007         	call	_drawChar
  5993                           
  5994                           ;ST7735_TFT.c: 488: cursor_x = cursor_x + size * 6;
  5995  00126E  5040               	movf	drawtext@size,w,c
  5996  001270  0D06               	mullw	6
  5997  001272  50F3               	movf	prodl,w,c
  5998  001274  0100               	movlb	0	; () banked
  5999  001276  25F9               	addwf	drawtext@cursor_x& (0+255),w,b
  6000  001278  0100               	movlb	0	; () banked
  6001  00127A  6FF9               	movwf	drawtext@cursor_x& (0+255),b
  6002                           
  6003                           ; BSR set to: 0
  6004                           ;ST7735_TFT.c: 489: if(cursor_x > 128) cursor_x = 128;
  6005  00127C  0E80               	movlw	128
  6006  00127E  0100               	movlb	0	; () banked
  6007  001280  65F9               	cpfsgt	drawtext@cursor_x& (0+255),b
  6008  001282  D004               	goto	l5945
  6009                           
  6010                           ; BSR set to: 0
  6011  001284  0E80               	movlw	128
  6012  001286  0100               	movlb	0	; () banked
  6013  001288  6FF9               	movwf	drawtext@cursor_x& (0+255),b
  6014                           
  6015                           ; BSR set to: 0
  6016  00128A  D000               	goto	l5945
  6017  00128C                     l5945:
  6018                           
  6019                           ; BSR set to: 0
  6020  00128C  0100               	movlb	0	; () banked
  6021  00128E  4BF6               	infsnz	drawtext@i& (0+255),f,b
  6022  001290  2BF7               	incf	(drawtext@i+1)& (0+255),f,b
  6023  001292  D000               	goto	l5947
  6024  001294                     l5947:
  6025                           
  6026                           ; BSR set to: 0
  6027  001294  0100               	movlb	0	; () banked
  6028  001296  51F4               	movf	drawtext@textsize& (0+255),w,b
  6029  001298  0100               	movlb	0	; () banked
  6030  00129A  5DF6               	subwf	drawtext@i& (0+255),w,b
  6031  00129C  0100               	movlb	0	; () banked
  6032  00129E  51F5               	movf	(drawtext@textsize+1)& (0+255),w,b
  6033  0012A0  0100               	movlb	0	; () banked
  6034  0012A2  59F7               	subwfb	(drawtext@i+1)& (0+255),w,b
  6035  0012A4  A0D8               	btfss	status,0,c
  6036  0012A6  D792               	goto	l5921
  6037                           
  6038                           ; BSR set to: 0
  6039                           
  6040                           ; BSR set to: 0
  6041  0012A8  0012               	return		;funcret
  6042  0012AA                     __end_of_drawtext:
  6043                           	opt stack 0
  6044                           tblptru	equ	0xFF8
  6045                           tblptrh	equ	0xFF7
  6046                           tblptrl	equ	0xFF6
  6047                           tablat	equ	0xFF5
  6048                           prodh	equ	0xFF4
  6049                           prodl	equ	0xFF3
  6050                           intcon	equ	0xFF2
  6051                           intcon2	equ	0xFF1
  6052                           postinc0	equ	0xFEE
  6053                           wreg	equ	0xFE8
  6054                           postdec1	equ	0xFE5
  6055                           fsr1l	equ	0xFE1
  6056                           indf2	equ	0xFDF
  6057                           postinc2	equ	0xFDE
  6058                           postdec2	equ	0xFDD
  6059                           fsr2h	equ	0xFDA
  6060                           fsr2l	equ	0xFD9
  6061                           status	equ	0xFD8
  6062                           
  6063 ;; *************** function _strlen *****************
  6064 ;; Defined at:
  6065 ;;		line 4 in file "E:\XC8\sources\common\strlen.c"
  6066 ;; Parameters:    Size  Location     Type
  6067 ;;  s               2   16[COMRAM] PTR const unsigned char 
  6068 ;;		 -> NULL(0), RPM_Txt(5), DC_Txt(4), Fan_SW_Txt(4), 
  6069 ;;		 -> date(9), time(9), tempF(4), tempC(4), 
  6070 ;;		 -> buffer(31), 
  6071 ;; Auto vars:     Size  Location     Type
  6072 ;;  cp              2   20[COMRAM] PTR const unsigned char 
  6073 ;;		 -> NULL(0), RPM_Txt(5), DC_Txt(4), Fan_SW_Txt(4), 
  6074 ;;		 -> date(9), time(9), tempF(4), tempC(4), 
  6075 ;;		 -> buffer(31), 
  6076 ;; Return value:  Size  Location     Type
  6077 ;;                  2   16[COMRAM] unsigned int 
  6078 ;; Registers used:
  6079 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6080 ;; Tracked objects:
  6081 ;;		On entry : 0/0
  6082 ;;		On exit  : 0/0
  6083 ;;		Unchanged: 0/0
  6084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6085 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6086 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6087 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6088 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6089 ;;Total ram usage:        6 bytes
  6090 ;; Hardware stack levels used:    1
  6091 ;; Hardware stack levels required when called:    3
  6092 ;; This function calls:
  6093 ;;		Nothing
  6094 ;; This function is called by:
  6095 ;;		_drawtext
  6096 ;; This function uses a non-reentrant model
  6097 ;;
  6098                           
  6099                           	psect	text20
  6100  00207A                     __ptext20:
  6101                           	opt stack 0
  6102  00207A                     _strlen:
  6103                           	opt stack 25
  6104                           
  6105                           ; BSR set to: 0
  6106                           ;incstack = 0
  6107  00207A  C011  F015         	movff	strlen@s,strlen@cp
  6108  00207E  C012  F016         	movff	strlen@s+1,strlen@cp+1
  6109  002082  D003               	goto	l5719
  6110  002084                     l5717:
  6111  002084  4A15               	infsnz	strlen@cp,f,c
  6112  002086  2A16               	incf	strlen@cp+1,f,c
  6113  002088  D000               	goto	l5719
  6114  00208A                     l5719:
  6115  00208A  C015  FFD9         	movff	strlen@cp,fsr2l
  6116  00208E  C016  FFDA         	movff	strlen@cp+1,fsr2h
  6117  002092  50DF               	movf	indf2,w,c
  6118  002094  A4D8               	btfss	status,2,c
  6119  002096  D7F6               	goto	l5717
  6120  002098  C011  F013         	movff	strlen@s,??_strlen
  6121  00209C  C012  F014         	movff	strlen@s+1,??_strlen+1
  6122  0020A0  1E13               	comf	??_strlen,f,c
  6123  0020A2  1E14               	comf	??_strlen+1,f,c
  6124  0020A4  4A13               	infsnz	??_strlen,f,c
  6125  0020A6  2A14               	incf	??_strlen+1,f,c
  6126  0020A8  5015               	movf	strlen@cp,w,c
  6127  0020AA  2413               	addwf	??_strlen,w,c
  6128  0020AC  6E11               	movwf	?_strlen,c
  6129  0020AE  5016               	movf	strlen@cp+1,w,c
  6130  0020B0  2014               	addwfc	??_strlen+1,w,c
  6131  0020B2  6E12               	movwf	?_strlen+1,c
  6132  0020B4  D000               	goto	l1355
  6133  0020B6                     l1355:
  6134  0020B6  0012               	return		;funcret
  6135  0020B8                     __end_of_strlen:
  6136                           	opt stack 0
  6137                           tblptru	equ	0xFF8
  6138                           tblptrh	equ	0xFF7
  6139                           tblptrl	equ	0xFF6
  6140                           tablat	equ	0xFF5
  6141                           prodh	equ	0xFF4
  6142                           prodl	equ	0xFF3
  6143                           intcon	equ	0xFF2
  6144                           intcon2	equ	0xFF1
  6145                           postinc0	equ	0xFEE
  6146                           wreg	equ	0xFE8
  6147                           postdec1	equ	0xFE5
  6148                           fsr1l	equ	0xFE1
  6149                           indf2	equ	0xFDF
  6150                           postinc2	equ	0xFDE
  6151                           postdec2	equ	0xFDD
  6152                           fsr2h	equ	0xFDA
  6153                           fsr2l	equ	0xFD9
  6154                           status	equ	0xFD8
  6155                           
  6156 ;; *************** function _drawChar *****************
  6157 ;; Defined at:
  6158 ;;		line 448 in file "ST7735_TFT.c"
  6159 ;; Parameters:    Size  Location     Type
  6160 ;;  x               1    wreg     unsigned char 
  6161 ;;  y               1   45[COMRAM] unsigned char 
  6162 ;;  c               1   46[COMRAM] unsigned char 
  6163 ;;  color           2   47[COMRAM] unsigned int 
  6164 ;;  bg              2   49[COMRAM] unsigned int 
  6165 ;;  size            1   51[COMRAM] unsigned char 
  6166 ;; Auto vars:     Size  Location     Type
  6167 ;;  x               1   53[COMRAM] unsigned char 
  6168 ;;  line            1   52[COMRAM] unsigned char 
  6169 ;;  i               1   55[COMRAM] unsigned char 
  6170 ;;  j               1   54[COMRAM] unsigned char 
  6171 ;; Return value:  Size  Location     Type
  6172 ;;		None               void
  6173 ;; Registers used:
  6174 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6175 ;; Tracked objects:
  6176 ;;		On entry : 0/0
  6177 ;;		On exit  : 0/0
  6178 ;;		Unchanged: 0/0
  6179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6180 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6181 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6182 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6183 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6184 ;;Total ram usage:       11 bytes
  6185 ;; Hardware stack levels used:    1
  6186 ;; Hardware stack levels required when called:    8
  6187 ;; This function calls:
  6188 ;;		___wmul
  6189 ;;		_drawPixel
  6190 ;;		_fillRect
  6191 ;; This function is called by:
  6192 ;;		_drawtext
  6193 ;; This function uses a non-reentrant model
  6194 ;;
  6195                           
  6196                           	psect	text21
  6197  000F3A                     __ptext21:
  6198                           	opt stack 0
  6199  000F3A                     _drawChar:
  6200                           	opt stack 20
  6201                           
  6202                           ;incstack = 0
  6203                           ;drawChar@x stored from wreg
  6204  000F3A  6E36               	movwf	drawChar@x,c
  6205                           
  6206                           ;ST7735_TFT.c: 450: char i, j;
  6207                           ;ST7735_TFT.c: 451: if((x >= 128) || (y >= 160))
  6208  000F3C  0E80               	movlw	128
  6209  000F3E  6036               	cpfslt	drawChar@x,c
  6210  000F40  D0A6               	goto	l379
  6211  000F42  0E9F               	movlw	159
  6212  000F44  642E               	cpfsgt	drawChar@y,c
  6213  000F46  D001               	goto	l5665
  6214                           
  6215                           ;ST7735_TFT.c: 452: return;
  6216  000F48  D0A2               	goto	l379
  6217  000F4A                     l5665:
  6218                           
  6219                           ;ST7735_TFT.c: 453: if(size < 1) size = 1;
  6220  000F4A  5034               	movf	drawChar@size,w,c
  6221  000F4C  A4D8               	btfss	status,2,c
  6222  000F4E  D003               	goto	l5669
  6223  000F50  0E01               	movlw	1
  6224  000F52  6E34               	movwf	drawChar@size,c
  6225  000F54  D000               	goto	l5669
  6226  000F56                     l5669:
  6227                           
  6228                           ;ST7735_TFT.c: 454: if((c < ' ') || (c > '~'))
  6229  000F56  0E1F               	movlw	31
  6230  000F58  642F               	cpfsgt	drawChar@c,c
  6231  000F5A  D004               	goto	l5673
  6232  000F5C  0E7E               	movlw	126
  6233  000F5E  642F               	cpfsgt	drawChar@c,c
  6234  000F60  D003               	goto	l381
  6235  000F62  D000               	goto	l5673
  6236  000F64                     l5673:
  6237                           
  6238                           ;ST7735_TFT.c: 455: c = '?';
  6239  000F64  0E3F               	movlw	63
  6240  000F66  6E2F               	movwf	drawChar@c,c
  6241  000F68                     l381:
  6242                           
  6243                           ;ST7735_TFT.c: 456: for(i=0; i<5; i++ ) {
  6244  000F68  0E00               	movlw	0
  6245  000F6A  6E38               	movwf	drawChar@i,c
  6246  000F6C                     l5675:
  6247  000F6C  0E04               	movlw	4
  6248  000F6E  6438               	cpfsgt	drawChar@i,c
  6249  000F70  D001               	goto	l5679
  6250  000F72  D08D               	goto	l379
  6251  000F74                     l5679:
  6252                           
  6253                           ;ST7735_TFT.c: 457: unsigned char line;
  6254                           ;ST7735_TFT.c: 458: if(c < 'S')
  6255  000F74  0E53               	movlw	83
  6256  000F76  602F               	cpfslt	drawChar@c,c
  6257  000F78  D015               	goto	l5683
  6258                           
  6259                           ;ST7735_TFT.c: 459: line = font[(c - 32)*5 + i];
  6260  000F7A  0EE0               	movlw	224
  6261  000F7C  242F               	addwf	drawChar@c,w,c
  6262  000F7E  6E11               	movwf	___wmul@multiplier,c
  6263  000F80  6A12               	clrf	___wmul@multiplier+1,c
  6264  000F82  0EFF               	movlw	255
  6265  000F84  2212               	addwfc	___wmul@multiplier+1,f,c
  6266  000F86  0E00               	movlw	0
  6267  000F88  6E14               	movwf	___wmul@multiplicand+1,c
  6268  000F8A  0E05               	movlw	5
  6269  000F8C  6E13               	movwf	___wmul@multiplicand,c
  6270  000F8E  EC18  F011         	call	___wmul	;wreg free
  6271  000F92  5038               	movf	drawChar@i,w,c
  6272  000F94  2611               	addwf	?___wmul,f,c
  6273  000F96  0E00               	movlw	0
  6274  000F98  2212               	addwfc	?___wmul+1,f,c
  6275  000F9A  0E27               	movlw	low _font
  6276  000F9C  2411               	addwf	?___wmul,w,c
  6277  000F9E  6EF6               	movwf	tblptrl,c
  6278  000FA0  0EFD               	movlw	high _font
  6279  000FA2  D014               	goto	L6
  6280  000FA4                     l5683:
  6281                           
  6282                           ;ST7735_TFT.c: 460: else
  6283                           ;ST7735_TFT.c: 461: line = font2[(c - 'S')*5 + i];
  6284  000FA4  0EAD               	movlw	173
  6285  000FA6  242F               	addwf	drawChar@c,w,c
  6286  000FA8  6E11               	movwf	___wmul@multiplier,c
  6287  000FAA  6A12               	clrf	___wmul@multiplier+1,c
  6288  000FAC  0EFF               	movlw	255
  6289  000FAE  2212               	addwfc	___wmul@multiplier+1,f,c
  6290  000FB0  0E00               	movlw	0
  6291  000FB2  6E14               	movwf	___wmul@multiplicand+1,c
  6292  000FB4  0E05               	movlw	5
  6293  000FB6  6E13               	movwf	___wmul@multiplicand,c
  6294  000FB8  EC18  F011         	call	___wmul	;wreg free
  6295  000FBC  5038               	movf	drawChar@i,w,c
  6296  000FBE  2611               	addwf	?___wmul,f,c
  6297  000FC0  0E00               	movlw	0
  6298  000FC2  2212               	addwfc	?___wmul+1,f,c
  6299  000FC4  0E26               	movlw	low _font2
  6300  000FC6  2411               	addwf	?___wmul,w,c
  6301  000FC8  6EF6               	movwf	tblptrl,c
  6302  000FCA  0EFE               	movlw	high _font2
  6303  000FCC                     L6:
  6304  000FCC  2012               	addwfc	?___wmul+1,w,c
  6305  000FCE  6EF7               	movwf	tblptrh,c
  6306  000FD0                     	if	0	;There are less than 3 active tblptr bytes
  6307  000FD0                     	endif
  6308  000FD0  0008               	tblrd		*
  6309  000FD2  CFF5 F035          	movff	tablat,drawChar@line
  6310  000FD6  D000               	goto	l5685
  6311  000FD8                     l5685:
  6312                           
  6313                           ;ST7735_TFT.c: 462: for(j=0; j<7; j++, line >>= 1) {
  6314  000FD8  0E00               	movlw	0
  6315  000FDA  6E37               	movwf	drawChar@j,c
  6316  000FDC                     l5687:
  6317  000FDC  0E06               	movlw	6
  6318  000FDE  6437               	cpfsgt	drawChar@j,c
  6319  000FE0  D001               	goto	l388
  6320  000FE2  D053               	goto	l5711
  6321  000FE4                     l388:
  6322                           
  6323                           ;ST7735_TFT.c: 463: if(line & 0x01) {
  6324  000FE4  A035               	btfss	drawChar@line,0,c
  6325  000FE6  D023               	goto	l5697
  6326                           
  6327                           ;ST7735_TFT.c: 464: if(size == 1) drawPixel(x+i, y+j, color);
  6328  000FE8  0434               	decf	drawChar@size,w,c
  6329  000FEA  A4D8               	btfss	status,2,c
  6330  000FEC  D00C               	goto	l5695
  6331  000FEE  502E               	movf	drawChar@y,w,c
  6332  000FF0  2437               	addwf	drawChar@j,w,c
  6333  000FF2  6E18               	movwf	drawPixel@y,c
  6334  000FF4  C030  F019         	movff	drawChar@color,drawPixel@color
  6335  000FF8  C031  F01A         	movff	drawChar@color+1,drawPixel@color+1
  6336  000FFC  5036               	movf	drawChar@x,w,c
  6337  000FFE  2438               	addwf	drawChar@i,w,c
  6338  001000  ECEB  F010         	call	_drawPixel
  6339  001004  D03E               	goto	l5705
  6340  001006                     l5695:
  6341                           
  6342                           ;ST7735_TFT.c: 465: else fillRect(x+(i*size), y+(j*size), size, size, color);
  6343  001006  5037               	movf	drawChar@j,w,c
  6344  001008  0234               	mulwf	drawChar@size,c
  6345  00100A  50F3               	movf	prodl,w,c
  6346  00100C  242E               	addwf	drawChar@y,w,c
  6347  00100E  6E23               	movwf	fillRect@y,c
  6348  001010  C034  F024         	movff	drawChar@size,fillRect@w
  6349  001014  C034  F025         	movff	drawChar@size,fillRect@h
  6350  001018  C030  F026         	movff	drawChar@color,fillRect@color
  6351  00101C  C031  F027         	movff	drawChar@color+1,fillRect@color+1
  6352  001020  5038               	movf	drawChar@i,w,c
  6353  001022  0234               	mulwf	drawChar@size,c
  6354  001024  50F3               	movf	prodl,w,c
  6355  001026  2436               	addwf	drawChar@x,w,c
  6356  001028  ECD5  F00F         	call	_fillRect
  6357                           
  6358                           ;ST7735_TFT.c: 466: }
  6359  00102C  D02A               	goto	l5705
  6360  00102E                     l5697:
  6361                           
  6362                           ;ST7735_TFT.c: 467: else if(bg != color) {
  6363  00102E  5030               	movf	drawChar@color,w,c
  6364  001030  1832               	xorwf	drawChar@bg,w,c
  6365  001032  E104               	bnz	u4300
  6366  001034  5031               	movf	drawChar@color+1,w,c
  6367  001036  1833               	xorwf	drawChar@bg+1,w,c
  6368  001038  B4D8               	btfsc	status,2,c
  6369  00103A  D023               	goto	l5705
  6370  00103C                     u4300:
  6371                           
  6372                           ;ST7735_TFT.c: 468: if(size == 1) drawPixel(x+i, y+j, bg);
  6373  00103C  0434               	decf	drawChar@size,w,c
  6374  00103E  A4D8               	btfss	status,2,c
  6375  001040  D00C               	goto	l5703
  6376  001042  502E               	movf	drawChar@y,w,c
  6377  001044  2437               	addwf	drawChar@j,w,c
  6378  001046  6E18               	movwf	drawPixel@y,c
  6379  001048  C032  F019         	movff	drawChar@bg,drawPixel@color
  6380  00104C  C033  F01A         	movff	drawChar@bg+1,drawPixel@color+1
  6381  001050  5036               	movf	drawChar@x,w,c
  6382  001052  2438               	addwf	drawChar@i,w,c
  6383  001054  ECEB  F010         	call	_drawPixel
  6384  001058  D014               	goto	l5705
  6385  00105A                     l5703:
  6386                           
  6387                           ;ST7735_TFT.c: 469: else fillRect(x+i*size, y+j*size, size, size, bg);
  6388  00105A  5037               	movf	drawChar@j,w,c
  6389  00105C  0234               	mulwf	drawChar@size,c
  6390  00105E  50F3               	movf	prodl,w,c
  6391  001060  242E               	addwf	drawChar@y,w,c
  6392  001062  6E23               	movwf	fillRect@y,c
  6393  001064  C034  F024         	movff	drawChar@size,fillRect@w
  6394  001068  C034  F025         	movff	drawChar@size,fillRect@h
  6395  00106C  C032  F026         	movff	drawChar@bg,fillRect@color
  6396  001070  C033  F027         	movff	drawChar@bg+1,fillRect@color+1
  6397  001074  5038               	movf	drawChar@i,w,c
  6398  001076  0234               	mulwf	drawChar@size,c
  6399  001078  50F3               	movf	prodl,w,c
  6400  00107A  2436               	addwf	drawChar@x,w,c
  6401  00107C  ECD5  F00F         	call	_fillRect
  6402  001080  D000               	goto	l5705
  6403  001082                     l5705:
  6404  001082  2A37               	incf	drawChar@j,f,c
  6405  001084  90D8               	bcf	status,0,c
  6406  001086  3235               	rrcf	drawChar@line,f,c
  6407  001088  D7A9               	goto	l5687
  6408  00108A                     l5711:
  6409  00108A  2A38               	incf	drawChar@i,f,c
  6410  00108C  D76F               	goto	l5675
  6411  00108E                     l379:
  6412  00108E  0012               	return		;funcret
  6413  001090                     __end_of_drawChar:
  6414                           	opt stack 0
  6415                           tblptru	equ	0xFF8
  6416                           tblptrh	equ	0xFF7
  6417                           tblptrl	equ	0xFF6
  6418                           tablat	equ	0xFF5
  6419                           prodh	equ	0xFF4
  6420                           prodl	equ	0xFF3
  6421                           intcon	equ	0xFF2
  6422                           intcon2	equ	0xFF1
  6423                           postinc0	equ	0xFEE
  6424                           wreg	equ	0xFE8
  6425                           postdec1	equ	0xFE5
  6426                           fsr1l	equ	0xFE1
  6427                           indf2	equ	0xFDF
  6428                           postinc2	equ	0xFDE
  6429                           postdec2	equ	0xFDD
  6430                           fsr2h	equ	0xFDA
  6431                           fsr2l	equ	0xFD9
  6432                           status	equ	0xFD8
  6433                           
  6434 ;; *************** function _fillRect *****************
  6435 ;; Defined at:
  6436 ;;		line 438 in file "ST7735_TFT.c"
  6437 ;; Parameters:    Size  Location     Type
  6438 ;;  x               1    wreg     unsigned char 
  6439 ;;  y               1   34[COMRAM] unsigned char 
  6440 ;;  w               1   35[COMRAM] unsigned char 
  6441 ;;  h               1   36[COMRAM] unsigned char 
  6442 ;;  color           2   37[COMRAM] unsigned int 
  6443 ;; Auto vars:     Size  Location     Type
  6444 ;;  x               1   42[COMRAM] unsigned char 
  6445 ;;  i               2   43[COMRAM] int 
  6446 ;; Return value:  Size  Location     Type
  6447 ;;		None               void
  6448 ;; Registers used:
  6449 ;;		wreg, status,2, status,0, cstack
  6450 ;; Tracked objects:
  6451 ;;		On entry : 0/0
  6452 ;;		On exit  : 0/0
  6453 ;;		Unchanged: 0/0
  6454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6455 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6456 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6457 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6458 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6459 ;;Total ram usage:       11 bytes
  6460 ;; Hardware stack levels used:    1
  6461 ;; Hardware stack levels required when called:    7
  6462 ;; This function calls:
  6463 ;;		_drawFastVLine
  6464 ;; This function is called by:
  6465 ;;		_drawChar
  6466 ;; This function uses a non-reentrant model
  6467 ;;
  6468                           
  6469                           	psect	text22
  6470  001FAA                     __ptext22:
  6471                           	opt stack 0
  6472  001FAA                     _fillRect:
  6473                           	opt stack 20
  6474                           
  6475                           ;incstack = 0
  6476                           ;fillRect@x stored from wreg
  6477  001FAA  6E2B               	movwf	fillRect@x,c
  6478                           
  6479                           ;ST7735_TFT.c: 440: signed int i;
  6480                           ;ST7735_TFT.c: 442: for (i = x; i < x + w; i++)
  6481  001FAC  C02B  F02C         	movff	fillRect@x,fillRect@i
  6482  001FB0  6A2D               	clrf	fillRect@i+1,c
  6483  001FB2  D00E               	goto	l5395
  6484  001FB4                     l5391:
  6485                           
  6486                           ;ST7735_TFT.c: 443: {
  6487                           ;ST7735_TFT.c: 444: drawFastVLine(i, y, h, color);
  6488  001FB4  C023  F018         	movff	fillRect@y,drawFastVLine@y
  6489  001FB8  C025  F019         	movff	fillRect@h,drawFastVLine@h
  6490  001FBC  C026  F01A         	movff	fillRect@color,drawFastVLine@color
  6491  001FC0  C027  F01B         	movff	fillRect@color+1,drawFastVLine@color+1
  6492  001FC4  502C               	movf	fillRect@i,w,c
  6493  001FC6  ECFE  F00C         	call	_drawFastVLine
  6494  001FCA  4A2C               	infsnz	fillRect@i,f,c
  6495  001FCC  2A2D               	incf	fillRect@i+1,f,c
  6496  001FCE  D000               	goto	l5395
  6497  001FD0                     l5395:
  6498  001FD0  5024               	movf	fillRect@w,w,c
  6499  001FD2  C02B  F028         	movff	fillRect@x,??_fillRect
  6500  001FD6  6A29               	clrf	(??_fillRect+1)& (0+255),c
  6501  001FD8  2628               	addwf	??_fillRect,f,c
  6502  001FDA  0E00               	movlw	0
  6503  001FDC  2229               	addwfc	??_fillRect+1,f,c
  6504  001FDE  5028               	movf	??_fillRect,w,c
  6505  001FE0  5C2C               	subwf	fillRect@i,w,c
  6506  001FE2  502D               	movf	fillRect@i+1,w,c
  6507  001FE4  0A80               	xorlw	128
  6508  001FE6  6E2A               	movwf	(??_fillRect+2)& (0+255),c
  6509  001FE8  5029               	movf	??_fillRect+1,w,c
  6510  001FEA  0A80               	xorlw	128
  6511  001FEC  582A               	subwfb	(??_fillRect+2)& (0+255),w,c
  6512  001FEE  A0D8               	btfss	status,0,c
  6513  001FF0  D7E1               	goto	l5391
  6514  001FF2  0012               	return		;funcret
  6515  001FF4                     __end_of_fillRect:
  6516                           	opt stack 0
  6517                           tblptru	equ	0xFF8
  6518                           tblptrh	equ	0xFF7
  6519                           tblptrl	equ	0xFF6
  6520                           tablat	equ	0xFF5
  6521                           prodh	equ	0xFF4
  6522                           prodl	equ	0xFF3
  6523                           intcon	equ	0xFF2
  6524                           intcon2	equ	0xFF1
  6525                           postinc0	equ	0xFEE
  6526                           wreg	equ	0xFE8
  6527                           postdec1	equ	0xFE5
  6528                           fsr1l	equ	0xFE1
  6529                           indf2	equ	0xFDF
  6530                           postinc2	equ	0xFDE
  6531                           postdec2	equ	0xFDD
  6532                           fsr2h	equ	0xFDA
  6533                           fsr2l	equ	0xFD9
  6534                           status	equ	0xFD8
  6535                           
  6536 ;; *************** function _drawFastVLine *****************
  6537 ;; Defined at:
  6538 ;;		line 417 in file "ST7735_TFT.c"
  6539 ;; Parameters:    Size  Location     Type
  6540 ;;  x               1    wreg     unsigned char 
  6541 ;;  y               1   23[COMRAM] unsigned char 
  6542 ;;  h               1   24[COMRAM] unsigned char 
  6543 ;;  color           2   25[COMRAM] unsigned int 
  6544 ;; Auto vars:     Size  Location     Type
  6545 ;;  x               1   33[COMRAM] unsigned char 
  6546 ;;  lo              1   32[COMRAM] unsigned char 
  6547 ;;  hi              1   31[COMRAM] unsigned char 
  6548 ;; Return value:  Size  Location     Type
  6549 ;;		None               void
  6550 ;; Registers used:
  6551 ;;		wreg, status,2, status,0, cstack
  6552 ;; Tracked objects:
  6553 ;;		On entry : 0/0
  6554 ;;		On exit  : 0/0
  6555 ;;		Unchanged: 0/0
  6556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6557 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6558 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6559 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6560 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6561 ;;Total ram usage:       11 bytes
  6562 ;; Hardware stack levels used:    1
  6563 ;; Hardware stack levels required when called:    6
  6564 ;; This function calls:
  6565 ;;		_setAddrWindow
  6566 ;;		_spiwrite
  6567 ;; This function is called by:
  6568 ;;		_fillRect
  6569 ;;		_fillCircleHelper
  6570 ;;		_fillCircle
  6571 ;;		_drawRect
  6572 ;; This function uses a non-reentrant model
  6573 ;;
  6574                           
  6575                           	psect	text23
  6576  0019FC                     __ptext23:
  6577                           	opt stack 0
  6578  0019FC                     _drawFastVLine:
  6579                           	opt stack 20
  6580                           
  6581                           ;incstack = 0
  6582                           ;drawFastVLine@x stored from wreg
  6583  0019FC  6E22               	movwf	drawFastVLine@x,c
  6584                           
  6585                           ;ST7735_TFT.c: 419: unsigned char hi, lo;
  6586                           ;ST7735_TFT.c: 420: if((x >= 128) || (y >= 160))
  6587  0019FE  0E80               	movlw	128
  6588  001A00  6022               	cpfslt	drawFastVLine@x,c
  6589  001A02  D03F               	goto	l363
  6590  001A04  0E9F               	movlw	159
  6591  001A06  6418               	cpfsgt	drawFastVLine@y,c
  6592  001A08  D001               	goto	l5265
  6593                           
  6594                           ;ST7735_TFT.c: 421: return;
  6595  001A0A  D03B               	goto	l363
  6596  001A0C                     l5265:
  6597                           
  6598                           ;ST7735_TFT.c: 422: if((y + h - 1) >= 160)
  6599  001A0C  0EFF               	movlw	255
  6600  001A0E  6E1C               	movwf	??_drawFastVLine& (0+255),c
  6601  001A10  0EFF               	movlw	255
  6602  001A12  6E1D               	movwf	(??_drawFastVLine+1)& (0+255),c
  6603  001A14  5019               	movf	drawFastVLine@h,w,c
  6604  001A16  C018  F01E         	movff	drawFastVLine@y,??_drawFastVLine+2
  6605  001A1A  6A1F               	clrf	(??_drawFastVLine+3)& (0+255),c
  6606  001A1C  261E               	addwf	??_drawFastVLine+2,f,c
  6607  001A1E  0E00               	movlw	0
  6608  001A20  221F               	addwfc	??_drawFastVLine+3,f,c
  6609  001A22  501C               	movf	??_drawFastVLine,w,c
  6610  001A24  261E               	addwf	??_drawFastVLine+2,f,c
  6611  001A26  501D               	movf	??_drawFastVLine+1,w,c
  6612  001A28  221F               	addwfc	??_drawFastVLine+3,f,c
  6613  001A2A  BE1F               	btfsc	??_drawFastVLine+3,7,c
  6614  001A2C  D00B               	goto	l5269
  6615  001A2E  501F               	movf	??_drawFastVLine+3,w,c
  6616  001A30  E104               	bnz	u3840
  6617  001A32  0EA0               	movlw	160
  6618  001A34  5C1E               	subwf	??_drawFastVLine+2,w,c
  6619  001A36  A0D8               	btfss	status,0,c
  6620  001A38  D005               	goto	l5269
  6621  001A3A                     u3840:
  6622                           
  6623                           ;ST7735_TFT.c: 423: h = 160 - y;
  6624  001A3A  5018               	movf	drawFastVLine@y,w,c
  6625  001A3C  0800               	sublw	0
  6626  001A3E  0FA0               	addlw	160
  6627  001A40  6E19               	movwf	drawFastVLine@h,c
  6628  001A42  D000               	goto	l5269
  6629  001A44                     l5269:
  6630                           
  6631                           ;ST7735_TFT.c: 424: hi = color >> 8; lo = color;
  6632  001A44  501B               	movf	drawFastVLine@color+1,w,c
  6633  001A46  6E20               	movwf	drawFastVLine@hi,c
  6634  001A48  C01A  F021         	movff	drawFastVLine@color,drawFastVLine@lo
  6635                           
  6636                           ;ST7735_TFT.c: 425: setAddrWindow(x, y, x, y + h - 1);
  6637  001A4C  C018  F014         	movff	drawFastVLine@y,setAddrWindow@y0
  6638  001A50  C022  F015         	movff	drawFastVLine@x,setAddrWindow@x1
  6639  001A54  5018               	movf	drawFastVLine@y,w,c
  6640  001A56  2419               	addwf	drawFastVLine@h,w,c
  6641  001A58  6E1C               	movwf	??_drawFastVLine& (0+255),c
  6642  001A5A  041C               	decf	??_drawFastVLine,w,c
  6643  001A5C  6E16               	movwf	setAddrWindow@y1,c
  6644  001A5E  5022               	movf	drawFastVLine@x,w,c
  6645  001A60  EC62  F00F         	call	_setAddrWindow
  6646                           
  6647                           ;ST7735_TFT.c: 426: PORTDbits.RD0 = 1;
  6648  001A64  8083               	bsf	3971,0,c	;volatile
  6649                           
  6650                           ;ST7735_TFT.c: 427: PORTDbits.RD1 = 0;
  6651  001A66  9283               	bcf	3971,1,c	;volatile
  6652                           
  6653                           ;ST7735_TFT.c: 429: while (h--) {
  6654  001A68  D007               	goto	l5281
  6655  001A6A                     l5279:
  6656                           
  6657                           ;ST7735_TFT.c: 430: spiwrite(hi);
  6658  001A6A  5020               	movf	drawFastVLine@hi,w,c
  6659  001A6C  ECF4  F011         	call	_spiwrite
  6660                           
  6661                           ;ST7735_TFT.c: 431: spiwrite(lo);
  6662  001A70  5021               	movf	drawFastVLine@lo,w,c
  6663  001A72  ECF4  F011         	call	_spiwrite
  6664  001A76  D000               	goto	l5281
  6665  001A78                     l5281:
  6666  001A78  0619               	decf	drawFastVLine@h,f,c
  6667  001A7A  2819               	incf	drawFastVLine@h,w,c
  6668  001A7C  A4D8               	btfss	status,2,c
  6669  001A7E  D7F5               	goto	l5279
  6670                           
  6671                           ;ST7735_TFT.c: 432: }
  6672                           ;ST7735_TFT.c: 433: PORTDbits.RD1 = 1;
  6673  001A80  8283               	bsf	3971,1,c	;volatile
  6674  001A82                     l363:
  6675  001A82  0012               	return		;funcret
  6676  001A84                     __end_of_drawFastVLine:
  6677                           	opt stack 0
  6678                           tblptru	equ	0xFF8
  6679                           tblptrh	equ	0xFF7
  6680                           tblptrl	equ	0xFF6
  6681                           tablat	equ	0xFF5
  6682                           prodh	equ	0xFF4
  6683                           prodl	equ	0xFF3
  6684                           intcon	equ	0xFF2
  6685                           intcon2	equ	0xFF1
  6686                           postinc0	equ	0xFEE
  6687                           wreg	equ	0xFE8
  6688                           postdec1	equ	0xFE5
  6689                           fsr1l	equ	0xFE1
  6690                           indf2	equ	0xFDF
  6691                           postinc2	equ	0xFDE
  6692                           postdec2	equ	0xFDD
  6693                           fsr2h	equ	0xFDA
  6694                           fsr2l	equ	0xFD9
  6695                           status	equ	0xFD8
  6696                           
  6697 ;; *************** function _drawCircle *****************
  6698 ;; Defined at:
  6699 ;;		line 529 in file "ST7735_TFT.c"
  6700 ;; Parameters:    Size  Location     Type
  6701 ;;  x0              2   27[COMRAM] int 
  6702 ;;  y0              2   29[COMRAM] int 
  6703 ;;  r               2   31[COMRAM] int 
  6704 ;;  color           2   33[COMRAM] unsigned int 
  6705 ;; Auto vars:     Size  Location     Type
  6706 ;;  y               2   45[COMRAM] int 
  6707 ;;  x               2   43[COMRAM] int 
  6708 ;;  f               2   41[COMRAM] int 
  6709 ;;  ddF_y           2   39[COMRAM] int 
  6710 ;;  ddF_x           2   37[COMRAM] int 
  6711 ;; Return value:  Size  Location     Type
  6712 ;;		None               void
  6713 ;; Registers used:
  6714 ;;		wreg, status,2, status,0, cstack
  6715 ;; Tracked objects:
  6716 ;;		On entry : 0/0
  6717 ;;		On exit  : 0/0
  6718 ;;		Unchanged: 0/0
  6719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6720 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6721 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6722 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6723 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6724 ;;Total ram usage:       20 bytes
  6725 ;; Hardware stack levels used:    1
  6726 ;; Hardware stack levels required when called:    7
  6727 ;; This function calls:
  6728 ;;		_drawPixel
  6729 ;; This function is called by:
  6730 ;;		_Initialize_Screen
  6731 ;; This function uses a non-reentrant model
  6732 ;;
  6733                           
  6734                           	psect	text24
  6735  000C1A                     __ptext24:
  6736                           	opt stack 0
  6737  000C1A                     _drawCircle:
  6738                           	opt stack 22
  6739                           
  6740                           ;ST7735_TFT.c: 531: signed int f, ddF_x, ddF_y, x, y;
  6741                           ;ST7735_TFT.c: 532: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  6742                           
  6743                           ;incstack = 0
  6744  000C1A  C020  F024         	movff	drawCircle@r,??_drawCircle
  6745  000C1E  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
  6746  000C22  1E24               	comf	??_drawCircle,f,c
  6747  000C24  1E25               	comf	??_drawCircle+1,f,c
  6748  000C26  4A24               	infsnz	??_drawCircle,f,c
  6749  000C28  2A25               	incf	??_drawCircle+1,f,c
  6750  000C2A  0E01               	movlw	1
  6751  000C2C  2424               	addwf	??_drawCircle,w,c
  6752  000C2E  6E2A               	movwf	drawCircle@f,c
  6753  000C30  0E00               	movlw	0
  6754  000C32  2025               	addwfc	??_drawCircle+1,w,c
  6755  000C34  6E2B               	movwf	drawCircle@f+1,c
  6756  000C36  0E00               	movlw	0
  6757  000C38  6E27               	movwf	drawCircle@ddF_x+1,c
  6758  000C3A  0E01               	movlw	1
  6759  000C3C  6E26               	movwf	drawCircle@ddF_x,c
  6760  000C3E  C020  F024         	movff	drawCircle@r,??_drawCircle
  6761  000C42  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
  6762  000C46  90D8               	bcf	status,0,c
  6763  000C48  3624               	rlcf	??_drawCircle,f,c
  6764  000C4A  3625               	rlcf	??_drawCircle+1,f,c
  6765  000C4C  1E24               	comf	??_drawCircle,f,c
  6766  000C4E  1E25               	comf	??_drawCircle+1,f,c
  6767  000C50  4A24               	infsnz	??_drawCircle,f,c
  6768  000C52  2A25               	incf	??_drawCircle+1,f,c
  6769  000C54  C024  F028         	movff	??_drawCircle,drawCircle@ddF_y
  6770  000C58  C025  F029         	movff	??_drawCircle+1,drawCircle@ddF_y+1
  6771  000C5C  0E00               	movlw	0
  6772  000C5E  6E2D               	movwf	drawCircle@x+1,c
  6773  000C60  0E00               	movlw	0
  6774  000C62  6E2C               	movwf	drawCircle@x,c
  6775  000C64  C020  F02E         	movff	drawCircle@r,drawCircle@y
  6776  000C68  C021  F02F         	movff	drawCircle@r+1,drawCircle@y+1
  6777                           
  6778                           ;ST7735_TFT.c: 533: drawPixel(x0 , y0 + r, color);
  6779  000C6C  501E               	movf	drawCircle@y0,w,c
  6780  000C6E  2420               	addwf	drawCircle@r,w,c
  6781  000C70  6E18               	movwf	drawPixel@y,c
  6782  000C72  C022  F019         	movff	drawCircle@color,drawPixel@color
  6783  000C76  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6784  000C7A  501C               	movf	drawCircle@x0,w,c
  6785  000C7C  ECEB  F010         	call	_drawPixel
  6786                           
  6787                           ;ST7735_TFT.c: 534: drawPixel(x0 , y0 - r, color);
  6788  000C80  5020               	movf	drawCircle@r,w,c
  6789  000C82  0800               	sublw	0
  6790  000C84  241E               	addwf	drawCircle@y0,w,c
  6791  000C86  6E18               	movwf	drawPixel@y,c
  6792  000C88  C022  F019         	movff	drawCircle@color,drawPixel@color
  6793  000C8C  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6794  000C90  501C               	movf	drawCircle@x0,w,c
  6795  000C92  ECEB  F010         	call	_drawPixel
  6796                           
  6797                           ;ST7735_TFT.c: 535: drawPixel(x0+r, y0 , color);
  6798  000C96  C01E  F018         	movff	drawCircle@y0,drawPixel@y
  6799  000C9A  C022  F019         	movff	drawCircle@color,drawPixel@color
  6800  000C9E  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6801  000CA2  501C               	movf	drawCircle@x0,w,c
  6802  000CA4  2420               	addwf	drawCircle@r,w,c
  6803  000CA6  ECEB  F010         	call	_drawPixel
  6804                           
  6805                           ;ST7735_TFT.c: 536: drawPixel(x0-r, y0 , color);
  6806  000CAA  C01E  F018         	movff	drawCircle@y0,drawPixel@y
  6807  000CAE  C022  F019         	movff	drawCircle@color,drawPixel@color
  6808  000CB2  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6809  000CB6  5020               	movf	drawCircle@r,w,c
  6810  000CB8  0800               	sublw	0
  6811  000CBA  241C               	addwf	drawCircle@x0,w,c
  6812  000CBC  ECEB  F010         	call	_drawPixel
  6813                           
  6814                           ;ST7735_TFT.c: 537: while (x < y) {
  6815  000CC0  D078               	goto	l5995
  6816  000CC2                     l5967:
  6817                           
  6818                           ;ST7735_TFT.c: 538: if (f >= 0) {
  6819  000CC2  BE2B               	btfsc	drawCircle@f+1,7,c
  6820  000CC4  D00B               	goto	l427
  6821                           
  6822                           ;ST7735_TFT.c: 539: y--;
  6823  000CC6  062E               	decf	drawCircle@y,f,c
  6824  000CC8  A0D8               	btfss	status,0,c
  6825  000CCA  062F               	decf	drawCircle@y+1,f,c
  6826                           
  6827                           ;ST7735_TFT.c: 540: ddF_y += 2;
  6828  000CCC  0E02               	movlw	2
  6829  000CCE  2628               	addwf	drawCircle@ddF_y,f,c
  6830  000CD0  0E00               	movlw	0
  6831  000CD2  2229               	addwfc	drawCircle@ddF_y+1,f,c
  6832                           
  6833                           ;ST7735_TFT.c: 541: f += ddF_y;
  6834  000CD4  5028               	movf	drawCircle@ddF_y,w,c
  6835  000CD6  262A               	addwf	drawCircle@f,f,c
  6836  000CD8  5029               	movf	drawCircle@ddF_y+1,w,c
  6837  000CDA  222B               	addwfc	drawCircle@f+1,f,c
  6838  000CDC                     l427:
  6839                           
  6840                           ;ST7735_TFT.c: 542: }
  6841                           ;ST7735_TFT.c: 543: x++;
  6842  000CDC  4A2C               	infsnz	drawCircle@x,f,c
  6843  000CDE  2A2D               	incf	drawCircle@x+1,f,c
  6844                           
  6845                           ;ST7735_TFT.c: 544: ddF_x += 2;
  6846  000CE0  0E02               	movlw	2
  6847  000CE2  2626               	addwf	drawCircle@ddF_x,f,c
  6848  000CE4  0E00               	movlw	0
  6849  000CE6  2227               	addwfc	drawCircle@ddF_x+1,f,c
  6850                           
  6851                           ;ST7735_TFT.c: 545: f += ddF_x;
  6852  000CE8  5026               	movf	drawCircle@ddF_x,w,c
  6853  000CEA  262A               	addwf	drawCircle@f,f,c
  6854  000CEC  5027               	movf	drawCircle@ddF_x+1,w,c
  6855  000CEE  222B               	addwfc	drawCircle@f+1,f,c
  6856                           
  6857                           ;ST7735_TFT.c: 546: drawPixel(x0 + x, y0 + y, color);
  6858  000CF0  501E               	movf	drawCircle@y0,w,c
  6859  000CF2  242E               	addwf	drawCircle@y,w,c
  6860  000CF4  6E18               	movwf	drawPixel@y,c
  6861  000CF6  C022  F019         	movff	drawCircle@color,drawPixel@color
  6862  000CFA  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6863  000CFE  501C               	movf	drawCircle@x0,w,c
  6864  000D00  242C               	addwf	drawCircle@x,w,c
  6865  000D02  ECEB  F010         	call	_drawPixel
  6866                           
  6867                           ;ST7735_TFT.c: 547: drawPixel(x0 - x, y0 + y, color);
  6868  000D06  501E               	movf	drawCircle@y0,w,c
  6869  000D08  242E               	addwf	drawCircle@y,w,c
  6870  000D0A  6E18               	movwf	drawPixel@y,c
  6871  000D0C  C022  F019         	movff	drawCircle@color,drawPixel@color
  6872  000D10  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6873  000D14  502C               	movf	drawCircle@x,w,c
  6874  000D16  0800               	sublw	0
  6875  000D18  241C               	addwf	drawCircle@x0,w,c
  6876  000D1A  ECEB  F010         	call	_drawPixel
  6877                           
  6878                           ;ST7735_TFT.c: 548: drawPixel(x0 + x, y0 - y, color);
  6879  000D1E  502E               	movf	drawCircle@y,w,c
  6880  000D20  0800               	sublw	0
  6881  000D22  241E               	addwf	drawCircle@y0,w,c
  6882  000D24  6E18               	movwf	drawPixel@y,c
  6883  000D26  C022  F019         	movff	drawCircle@color,drawPixel@color
  6884  000D2A  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6885  000D2E  501C               	movf	drawCircle@x0,w,c
  6886  000D30  242C               	addwf	drawCircle@x,w,c
  6887  000D32  ECEB  F010         	call	_drawPixel
  6888                           
  6889                           ;ST7735_TFT.c: 549: drawPixel(x0 - x, y0 - y, color);
  6890  000D36  502E               	movf	drawCircle@y,w,c
  6891  000D38  0800               	sublw	0
  6892  000D3A  241E               	addwf	drawCircle@y0,w,c
  6893  000D3C  6E18               	movwf	drawPixel@y,c
  6894  000D3E  C022  F019         	movff	drawCircle@color,drawPixel@color
  6895  000D42  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6896  000D46  502C               	movf	drawCircle@x,w,c
  6897  000D48  0800               	sublw	0
  6898  000D4A  241C               	addwf	drawCircle@x0,w,c
  6899  000D4C  ECEB  F010         	call	_drawPixel
  6900                           
  6901                           ;ST7735_TFT.c: 550: drawPixel(x0 + y, y0 + x, color);
  6902  000D50  501E               	movf	drawCircle@y0,w,c
  6903  000D52  242C               	addwf	drawCircle@x,w,c
  6904  000D54  6E18               	movwf	drawPixel@y,c
  6905  000D56  C022  F019         	movff	drawCircle@color,drawPixel@color
  6906  000D5A  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6907  000D5E  501C               	movf	drawCircle@x0,w,c
  6908  000D60  242E               	addwf	drawCircle@y,w,c
  6909  000D62  ECEB  F010         	call	_drawPixel
  6910                           
  6911                           ;ST7735_TFT.c: 551: drawPixel(x0 - y, y0 + x, color);
  6912  000D66  501E               	movf	drawCircle@y0,w,c
  6913  000D68  242C               	addwf	drawCircle@x,w,c
  6914  000D6A  6E18               	movwf	drawPixel@y,c
  6915  000D6C  C022  F019         	movff	drawCircle@color,drawPixel@color
  6916  000D70  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6917  000D74  502E               	movf	drawCircle@y,w,c
  6918  000D76  0800               	sublw	0
  6919  000D78  241C               	addwf	drawCircle@x0,w,c
  6920  000D7A  ECEB  F010         	call	_drawPixel
  6921                           
  6922                           ;ST7735_TFT.c: 552: drawPixel(x0 + y, y0 - x, color);
  6923  000D7E  502C               	movf	drawCircle@x,w,c
  6924  000D80  0800               	sublw	0
  6925  000D82  241E               	addwf	drawCircle@y0,w,c
  6926  000D84  6E18               	movwf	drawPixel@y,c
  6927  000D86  C022  F019         	movff	drawCircle@color,drawPixel@color
  6928  000D8A  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6929  000D8E  501C               	movf	drawCircle@x0,w,c
  6930  000D90  242E               	addwf	drawCircle@y,w,c
  6931  000D92  ECEB  F010         	call	_drawPixel
  6932                           
  6933                           ;ST7735_TFT.c: 553: drawPixel(x0 - y, y0 - x, color);
  6934  000D96  502C               	movf	drawCircle@x,w,c
  6935  000D98  0800               	sublw	0
  6936  000D9A  241E               	addwf	drawCircle@y0,w,c
  6937  000D9C  6E18               	movwf	drawPixel@y,c
  6938  000D9E  C022  F019         	movff	drawCircle@color,drawPixel@color
  6939  000DA2  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6940  000DA6  502E               	movf	drawCircle@y,w,c
  6941  000DA8  0800               	sublw	0
  6942  000DAA  241C               	addwf	drawCircle@x0,w,c
  6943  000DAC  ECEB  F010         	call	_drawPixel
  6944  000DB0  D000               	goto	l5995
  6945  000DB2                     l5995:
  6946  000DB2  502E               	movf	drawCircle@y,w,c
  6947  000DB4  5C2C               	subwf	drawCircle@x,w,c
  6948  000DB6  502D               	movf	drawCircle@x+1,w,c
  6949  000DB8  0A80               	xorlw	128
  6950  000DBA  6E24               	movwf	??_drawCircle& (0+255),c
  6951  000DBC  502F               	movf	drawCircle@y+1,w,c
  6952  000DBE  0A80               	xorlw	128
  6953  000DC0  5824               	subwfb	??_drawCircle& (0+255),w,c
  6954  000DC2  A0D8               	btfss	status,0,c
  6955  000DC4  D77E               	goto	l5967
  6956  000DC6  0012               	return		;funcret
  6957  000DC8                     __end_of_drawCircle:
  6958                           	opt stack 0
  6959                           tblptru	equ	0xFF8
  6960                           tblptrh	equ	0xFF7
  6961                           tblptrl	equ	0xFF6
  6962                           tablat	equ	0xFF5
  6963                           prodh	equ	0xFF4
  6964                           prodl	equ	0xFF3
  6965                           intcon	equ	0xFF2
  6966                           intcon2	equ	0xFF1
  6967                           postinc0	equ	0xFEE
  6968                           wreg	equ	0xFE8
  6969                           postdec1	equ	0xFE5
  6970                           fsr1l	equ	0xFE1
  6971                           indf2	equ	0xFDF
  6972                           postinc2	equ	0xFDE
  6973                           postdec2	equ	0xFDD
  6974                           fsr2h	equ	0xFDA
  6975                           fsr2l	equ	0xFD9
  6976                           status	equ	0xFD8
  6977                           
  6978 ;; *************** function _drawPixel *****************
  6979 ;; Defined at:
  6980 ;;		line 408 in file "ST7735_TFT.c"
  6981 ;; Parameters:    Size  Location     Type
  6982 ;;  x               1    wreg     unsigned char 
  6983 ;;  y               1   23[COMRAM] unsigned char 
  6984 ;;  color           2   24[COMRAM] unsigned int 
  6985 ;; Auto vars:     Size  Location     Type
  6986 ;;  x               1   26[COMRAM] unsigned char 
  6987 ;; Return value:  Size  Location     Type
  6988 ;;		None               void
  6989 ;; Registers used:
  6990 ;;		wreg, status,2, status,0, cstack
  6991 ;; Tracked objects:
  6992 ;;		On entry : 0/0
  6993 ;;		On exit  : 0/0
  6994 ;;		Unchanged: 0/0
  6995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6996 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6997 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6998 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6999 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7000 ;;Total ram usage:        4 bytes
  7001 ;; Hardware stack levels used:    1
  7002 ;; Hardware stack levels required when called:    6
  7003 ;; This function calls:
  7004 ;;		_setAddrWindow
  7005 ;;		_write_data
  7006 ;; This function is called by:
  7007 ;;		_drawChar
  7008 ;;		_drawCircle
  7009 ;;		_drawCircleHelper
  7010 ;; This function uses a non-reentrant model
  7011 ;;
  7012                           
  7013                           	psect	text25
  7014  0021D6                     __ptext25:
  7015                           	opt stack 0
  7016  0021D6                     _drawPixel:
  7017                           	opt stack 21
  7018                           
  7019                           ;incstack = 0
  7020                           ;drawPixel@x stored from wreg
  7021  0021D6  6E1B               	movwf	drawPixel@x,c
  7022                           
  7023                           ;ST7735_TFT.c: 410: if((x >= 128) || (y >= 160))
  7024  0021D8  0E80               	movlw	128
  7025  0021DA  601B               	cpfslt	drawPixel@x,c
  7026  0021DC  D013               	goto	l357
  7027  0021DE  0E9F               	movlw	159
  7028  0021E0  6418               	cpfsgt	drawPixel@y,c
  7029  0021E2  D001               	goto	l5383
  7030                           
  7031                           ;ST7735_TFT.c: 411: return;
  7032  0021E4  D00F               	goto	l357
  7033  0021E6                     l5383:
  7034                           
  7035                           ;ST7735_TFT.c: 412: setAddrWindow(x,y,x+1,y+1);
  7036  0021E6  C018  F014         	movff	drawPixel@y,setAddrWindow@y0
  7037  0021EA  281B               	incf	drawPixel@x,w,c
  7038  0021EC  6E15               	movwf	setAddrWindow@x1,c
  7039  0021EE  2818               	incf	drawPixel@y,w,c
  7040  0021F0  6E16               	movwf	setAddrWindow@y1,c
  7041  0021F2  501B               	movf	drawPixel@x,w,c
  7042  0021F4  EC62  F00F         	call	_setAddrWindow
  7043                           
  7044                           ;ST7735_TFT.c: 413: write_data(color >> 8);
  7045  0021F8  501A               	movf	drawPixel@color+1,w,c
  7046  0021FA  EC3D  F012         	call	_write_data
  7047                           
  7048                           ;ST7735_TFT.c: 414: write_data(color & 0xFF);
  7049  0021FE  5019               	movf	drawPixel@color,w,c
  7050  002200  EC3D  F012         	call	_write_data
  7051  002204                     l357:
  7052  002204  0012               	return		;funcret
  7053  002206                     __end_of_drawPixel:
  7054                           	opt stack 0
  7055                           tblptru	equ	0xFF8
  7056                           tblptrh	equ	0xFF7
  7057                           tblptrl	equ	0xFF6
  7058                           tablat	equ	0xFF5
  7059                           prodh	equ	0xFF4
  7060                           prodl	equ	0xFF3
  7061                           intcon	equ	0xFF2
  7062                           intcon2	equ	0xFF1
  7063                           postinc0	equ	0xFEE
  7064                           wreg	equ	0xFE8
  7065                           postdec1	equ	0xFE5
  7066                           fsr1l	equ	0xFE1
  7067                           indf2	equ	0xFDF
  7068                           postinc2	equ	0xFDE
  7069                           postdec2	equ	0xFDD
  7070                           fsr2h	equ	0xFDA
  7071                           fsr2l	equ	0xFD9
  7072                           status	equ	0xFD8
  7073                           
  7074 ;; *************** function _setAddrWindow *****************
  7075 ;; Defined at:
  7076 ;;		line 393 in file "ST7735_TFT.c"
  7077 ;; Parameters:    Size  Location     Type
  7078 ;;  x0              1    wreg     unsigned char 
  7079 ;;  y0              1   19[COMRAM] unsigned char 
  7080 ;;  x1              1   20[COMRAM] unsigned char 
  7081 ;;  y1              1   21[COMRAM] unsigned char 
  7082 ;; Auto vars:     Size  Location     Type
  7083 ;;  x0              1   22[COMRAM] unsigned char 
  7084 ;; Return value:  Size  Location     Type
  7085 ;;		None               void
  7086 ;; Registers used:
  7087 ;;		wreg, status,2, status,0, cstack
  7088 ;; Tracked objects:
  7089 ;;		On entry : 0/0
  7090 ;;		On exit  : 0/0
  7091 ;;		Unchanged: 0/0
  7092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7093 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7094 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7095 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7096 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7097 ;;Total ram usage:        4 bytes
  7098 ;; Hardware stack levels used:    1
  7099 ;; Hardware stack levels required when called:    5
  7100 ;; This function calls:
  7101 ;;		_write_command
  7102 ;;		_write_data
  7103 ;; This function is called by:
  7104 ;;		_drawPixel
  7105 ;;		_drawFastVLine
  7106 ;;		_fillRectangle
  7107 ;;		_drawFastHLine
  7108 ;; This function uses a non-reentrant model
  7109 ;;
  7110                           
  7111                           	psect	text26
  7112  001EC4                     __ptext26:
  7113                           	opt stack 0
  7114  001EC4                     _setAddrWindow:
  7115                           	opt stack 20
  7116                           
  7117                           ;incstack = 0
  7118                           ;setAddrWindow@x0 stored from wreg
  7119  001EC4  6E17               	movwf	setAddrWindow@x0,c
  7120                           
  7121                           ;ST7735_TFT.c: 395: write_command(0x2A);
  7122  001EC6  0E2A               	movlw	42
  7123  001EC8  EC45  F012         	call	_write_command
  7124                           
  7125                           ;ST7735_TFT.c: 396: write_data(0);
  7126  001ECC  0E00               	movlw	0
  7127  001ECE  EC3D  F012         	call	_write_data
  7128                           
  7129                           ;ST7735_TFT.c: 397: write_data(x0 + colstart);
  7130  001ED2  5017               	movf	setAddrWindow@x0,w,c
  7131  001ED4  245B               	addwf	_colstart,w,c
  7132  001ED6  EC3D  F012         	call	_write_data
  7133                           
  7134                           ;ST7735_TFT.c: 398: write_data(0);
  7135  001EDA  0E00               	movlw	0
  7136  001EDC  EC3D  F012         	call	_write_data
  7137                           
  7138                           ;ST7735_TFT.c: 399: write_data(x1 + colstart);
  7139  001EE0  5015               	movf	setAddrWindow@x1,w,c
  7140  001EE2  245B               	addwf	_colstart,w,c
  7141  001EE4  EC3D  F012         	call	_write_data
  7142                           
  7143                           ;ST7735_TFT.c: 400: write_command(0x2B);
  7144  001EE8  0E2B               	movlw	43
  7145  001EEA  EC45  F012         	call	_write_command
  7146                           
  7147                           ;ST7735_TFT.c: 401: write_data(0);
  7148  001EEE  0E00               	movlw	0
  7149  001EF0  EC3D  F012         	call	_write_data
  7150                           
  7151                           ;ST7735_TFT.c: 402: write_data(y0 + rowstart);
  7152  001EF4  5014               	movf	setAddrWindow@y0,w,c
  7153  001EF6  2463               	addwf	_rowstart,w,c
  7154  001EF8  EC3D  F012         	call	_write_data
  7155                           
  7156                           ;ST7735_TFT.c: 403: write_data(0);
  7157  001EFC  0E00               	movlw	0
  7158  001EFE  EC3D  F012         	call	_write_data
  7159                           
  7160                           ;ST7735_TFT.c: 404: write_data(y1 + rowstart);
  7161  001F02  5016               	movf	setAddrWindow@y1,w,c
  7162  001F04  2463               	addwf	_rowstart,w,c
  7163  001F06  EC3D  F012         	call	_write_data
  7164                           
  7165                           ;ST7735_TFT.c: 405: write_command(0x2C);
  7166  001F0A  0E2C               	movlw	44
  7167  001F0C  EC45  F012         	call	_write_command
  7168  001F10  0012               	return		;funcret
  7169  001F12                     __end_of_setAddrWindow:
  7170                           	opt stack 0
  7171                           tblptru	equ	0xFF8
  7172                           tblptrh	equ	0xFF7
  7173                           tblptrl	equ	0xFF6
  7174                           tablat	equ	0xFF5
  7175                           prodh	equ	0xFF4
  7176                           prodl	equ	0xFF3
  7177                           intcon	equ	0xFF2
  7178                           intcon2	equ	0xFF1
  7179                           postinc0	equ	0xFEE
  7180                           wreg	equ	0xFE8
  7181                           postdec1	equ	0xFE5
  7182                           fsr1l	equ	0xFE1
  7183                           indf2	equ	0xFDF
  7184                           postinc2	equ	0xFDE
  7185                           postdec2	equ	0xFDD
  7186                           fsr2h	equ	0xFDA
  7187                           fsr2l	equ	0xFD9
  7188                           status	equ	0xFD8
  7189                           
  7190 ;; *************** function _TFT_GreenTab_Initialize *****************
  7191 ;; Defined at:
  7192 ;;		line 645 in file "ST7735_TFT.c"
  7193 ;; Parameters:    Size  Location     Type
  7194 ;;		None
  7195 ;; Auto vars:     Size  Location     Type
  7196 ;;		None
  7197 ;; Return value:  Size  Location     Type
  7198 ;;		None               void
  7199 ;; Registers used:
  7200 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7201 ;; Tracked objects:
  7202 ;;		On entry : 0/0
  7203 ;;		On exit  : 0/0
  7204 ;;		Unchanged: 0/0
  7205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7206 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7207 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7208 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7209 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7210 ;;Total ram usage:        0 bytes
  7211 ;; Hardware stack levels used:    1
  7212 ;; Hardware stack levels required when called:    6
  7213 ;; This function calls:
  7214 ;;		_Rcmd1
  7215 ;;		_Rcmd2red
  7216 ;;		_Rcmd3
  7217 ;;		_write_command
  7218 ;;		_write_data
  7219 ;; This function is called by:
  7220 ;;		_Initialize_Screen
  7221 ;; This function uses a non-reentrant model
  7222 ;;
  7223                           
  7224                           	psect	text27
  7225  002206                     __ptext27:
  7226                           	opt stack 0
  7227  002206                     _TFT_GreenTab_Initialize:
  7228                           	opt stack 23
  7229                           
  7230                           ;ST7735_TFT.c: 647: PORTDbits.RD1 = 1;
  7231                           
  7232                           ;incstack = 0
  7233  002206  8283               	bsf	3971,1,c	;volatile
  7234                           
  7235                           ;ST7735_TFT.c: 648: PORTDbits.RD0 = 0;
  7236  002208  9083               	bcf	3971,0,c	;volatile
  7237                           
  7238                           ;ST7735_TFT.c: 650: SSPSTAT=0x80;
  7239  00220A  0E80               	movlw	128
  7240  00220C  6EC7               	movwf	4039,c	;volatile
  7241                           
  7242                           ;ST7735_TFT.c: 651: SSPCON1=0x30;
  7243  00220E  0E30               	movlw	48
  7244  002210  6EC6               	movwf	4038,c	;volatile
  7245                           
  7246                           ;ST7735_TFT.c: 654: Rcmd1();
  7247  002212  EC48  F008         	call	_Rcmd1	;wreg free
  7248                           
  7249                           ;ST7735_TFT.c: 655: Rcmd2red();
  7250  002216  EC5C  F010         	call	_Rcmd2red	;wreg free
  7251                           
  7252                           ;ST7735_TFT.c: 656: Rcmd3();
  7253  00221A  ECD1  F009         	call	_Rcmd3	;wreg free
  7254                           
  7255                           ;ST7735_TFT.c: 657: write_command(0x36);
  7256  00221E  0E36               	movlw	54
  7257  002220  EC45  F012         	call	_write_command
  7258                           
  7259                           ;ST7735_TFT.c: 658: write_data(0xC0);
  7260  002224  0EC0               	movlw	192
  7261  002226  EC3D  F012         	call	_write_data
  7262                           
  7263                           ;ST7735_TFT.c: 659: _tft_type = 1;
  7264  00222A  0E01               	movlw	1
  7265  00222C  6E55               	movwf	__tft_type,c
  7266  00222E  0012               	return		;funcret
  7267  002230                     __end_of_TFT_GreenTab_Initialize:
  7268                           	opt stack 0
  7269                           tblptru	equ	0xFF8
  7270                           tblptrh	equ	0xFF7
  7271                           tblptrl	equ	0xFF6
  7272                           tablat	equ	0xFF5
  7273                           prodh	equ	0xFF4
  7274                           prodl	equ	0xFF3
  7275                           intcon	equ	0xFF2
  7276                           intcon2	equ	0xFF1
  7277                           postinc0	equ	0xFEE
  7278                           wreg	equ	0xFE8
  7279                           postdec1	equ	0xFE5
  7280                           fsr1l	equ	0xFE1
  7281                           indf2	equ	0xFDF
  7282                           postinc2	equ	0xFDE
  7283                           postdec2	equ	0xFDD
  7284                           fsr2h	equ	0xFDA
  7285                           fsr2l	equ	0xFD9
  7286                           status	equ	0xFD8
  7287                           
  7288 ;; *************** function _Rcmd3 *****************
  7289 ;; Defined at:
  7290 ;;		line 339 in file "ST7735_TFT.c"
  7291 ;; Parameters:    Size  Location     Type
  7292 ;;		None
  7293 ;; Auto vars:     Size  Location     Type
  7294 ;;		None
  7295 ;; Return value:  Size  Location     Type
  7296 ;;		None               void
  7297 ;; Registers used:
  7298 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7299 ;; Tracked objects:
  7300 ;;		On entry : 0/0
  7301 ;;		On exit  : 0/0
  7302 ;;		Unchanged: 0/0
  7303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7305 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7306 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7307 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7308 ;;Total ram usage:        0 bytes
  7309 ;; Hardware stack levels used:    1
  7310 ;; Hardware stack levels required when called:    5
  7311 ;; This function calls:
  7312 ;;		_delay_ms
  7313 ;;		_write_command
  7314 ;;		_write_data
  7315 ;; This function is called by:
  7316 ;;		_TFT_GreenTab_Initialize
  7317 ;;		_TFT_BlackTab_Initialize
  7318 ;; This function uses a non-reentrant model
  7319 ;;
  7320                           
  7321                           	psect	text28
  7322  0013A2                     __ptext28:
  7323                           	opt stack 0
  7324  0013A2                     _Rcmd3:
  7325                           	opt stack 23
  7326                           
  7327                           ;ST7735_TFT.c: 341: write_command(0xE0);
  7328                           
  7329                           ;incstack = 0
  7330  0013A2  0EE0               	movlw	224
  7331  0013A4  EC45  F012         	call	_write_command
  7332                           
  7333                           ;ST7735_TFT.c: 342: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
  7334  0013A8  0E02               	movlw	2
  7335  0013AA  EC3D  F012         	call	_write_data
  7336  0013AE  0E1C               	movlw	28
  7337  0013B0  EC3D  F012         	call	_write_data
  7338  0013B4  0E07               	movlw	7
  7339  0013B6  EC3D  F012         	call	_write_data
  7340  0013BA  0E12               	movlw	18
  7341  0013BC  EC3D  F012         	call	_write_data
  7342                           
  7343                           ;ST7735_TFT.c: 343: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
  7344  0013C0  0E37               	movlw	55
  7345  0013C2  EC3D  F012         	call	_write_data
  7346  0013C6  0E32               	movlw	50
  7347  0013C8  EC3D  F012         	call	_write_data
  7348  0013CC  0E29               	movlw	41
  7349  0013CE  EC3D  F012         	call	_write_data
  7350  0013D2  0E2D               	movlw	45
  7351  0013D4  EC3D  F012         	call	_write_data
  7352                           
  7353                           ;ST7735_TFT.c: 344: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
  7354  0013D8  0E29               	movlw	41
  7355  0013DA  EC3D  F012         	call	_write_data
  7356  0013DE  0E25               	movlw	37
  7357  0013E0  EC3D  F012         	call	_write_data
  7358  0013E4  0E2B               	movlw	43
  7359  0013E6  EC3D  F012         	call	_write_data
  7360  0013EA  0E39               	movlw	57
  7361  0013EC  EC3D  F012         	call	_write_data
  7362                           
  7363                           ;ST7735_TFT.c: 345: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
  7364  0013F0  0E00               	movlw	0
  7365  0013F2  EC3D  F012         	call	_write_data
  7366  0013F6  0E01               	movlw	1
  7367  0013F8  EC3D  F012         	call	_write_data
  7368  0013FC  0E03               	movlw	3
  7369  0013FE  EC3D  F012         	call	_write_data
  7370  001402  0E10               	movlw	16
  7371  001404  EC3D  F012         	call	_write_data
  7372                           
  7373                           ;ST7735_TFT.c: 346: write_command(0xE1);
  7374  001408  0EE1               	movlw	225
  7375  00140A  EC45  F012         	call	_write_command
  7376                           
  7377                           ;ST7735_TFT.c: 347: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
  7378  00140E  0E03               	movlw	3
  7379  001410  EC3D  F012         	call	_write_data
  7380  001414  0E1D               	movlw	29
  7381  001416  EC3D  F012         	call	_write_data
  7382  00141A  0E07               	movlw	7
  7383  00141C  EC3D  F012         	call	_write_data
  7384  001420  0E06               	movlw	6
  7385  001422  EC3D  F012         	call	_write_data
  7386                           
  7387                           ;ST7735_TFT.c: 348: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
  7388  001426  0E2E               	movlw	46
  7389  001428  EC3D  F012         	call	_write_data
  7390  00142C  0E2C               	movlw	44
  7391  00142E  EC3D  F012         	call	_write_data
  7392  001432  0E29               	movlw	41
  7393  001434  EC3D  F012         	call	_write_data
  7394  001438  0E2D               	movlw	45
  7395  00143A  EC3D  F012         	call	_write_data
  7396                           
  7397                           ;ST7735_TFT.c: 349: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
  7398  00143E  0E2E               	movlw	46
  7399  001440  EC3D  F012         	call	_write_data
  7400  001444  0E2E               	movlw	46
  7401  001446  EC3D  F012         	call	_write_data
  7402  00144A  0E37               	movlw	55
  7403  00144C  EC3D  F012         	call	_write_data
  7404  001450  0E3F               	movlw	63
  7405  001452  EC3D  F012         	call	_write_data
  7406                           
  7407                           ;ST7735_TFT.c: 350: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
  7408  001456  0E00               	movlw	0
  7409  001458  EC3D  F012         	call	_write_data
  7410  00145C  0E00               	movlw	0
  7411  00145E  EC3D  F012         	call	_write_data
  7412  001462  0E02               	movlw	2
  7413  001464  EC3D  F012         	call	_write_data
  7414  001468  0E10               	movlw	16
  7415  00146A  EC3D  F012         	call	_write_data
  7416                           
  7417                           ;ST7735_TFT.c: 351: write_command(0x13);
  7418  00146E  0E13               	movlw	19
  7419  001470  EC45  F012         	call	_write_command
  7420                           
  7421                           ;ST7735_TFT.c: 352: delay_ms(10);
  7422  001474  0E00               	movlw	0
  7423  001476  6E18               	movwf	delay_ms@ms+1,c
  7424  001478  0E0A               	movlw	10
  7425  00147A  6E17               	movwf	delay_ms@ms,c
  7426  00147C  EC39  F00F         	call	_delay_ms	;wreg free
  7427                           
  7428                           ;ST7735_TFT.c: 353: write_command(0x29);
  7429  001480  0E29               	movlw	41
  7430  001482  EC45  F012         	call	_write_command
  7431                           
  7432                           ;ST7735_TFT.c: 354: delay_ms(100);
  7433  001486  0E00               	movlw	0
  7434  001488  6E18               	movwf	delay_ms@ms+1,c
  7435  00148A  0E64               	movlw	100
  7436  00148C  6E17               	movwf	delay_ms@ms,c
  7437  00148E  EC39  F00F         	call	_delay_ms	;wreg free
  7438  001492  0012               	return		;funcret
  7439  001494                     __end_of_Rcmd3:
  7440                           	opt stack 0
  7441                           tblptru	equ	0xFF8
  7442                           tblptrh	equ	0xFF7
  7443                           tblptrl	equ	0xFF6
  7444                           tablat	equ	0xFF5
  7445                           prodh	equ	0xFF4
  7446                           prodl	equ	0xFF3
  7447                           intcon	equ	0xFF2
  7448                           intcon2	equ	0xFF1
  7449                           postinc0	equ	0xFEE
  7450                           wreg	equ	0xFE8
  7451                           postdec1	equ	0xFE5
  7452                           fsr1l	equ	0xFE1
  7453                           indf2	equ	0xFDF
  7454                           postinc2	equ	0xFDE
  7455                           postdec2	equ	0xFDD
  7456                           fsr2h	equ	0xFDA
  7457                           fsr2l	equ	0xFD9
  7458                           status	equ	0xFD8
  7459                           
  7460 ;; *************** function _Rcmd2red *****************
  7461 ;; Defined at:
  7462 ;;		line 329 in file "ST7735_TFT.c"
  7463 ;; Parameters:    Size  Location     Type
  7464 ;;		None
  7465 ;; Auto vars:     Size  Location     Type
  7466 ;;		None
  7467 ;; Return value:  Size  Location     Type
  7468 ;;		None               void
  7469 ;; Registers used:
  7470 ;;		wreg, status,2, cstack
  7471 ;; Tracked objects:
  7472 ;;		On entry : 0/0
  7473 ;;		On exit  : 0/0
  7474 ;;		Unchanged: 0/0
  7475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7476 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7477 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7478 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7479 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7480 ;;Total ram usage:        0 bytes
  7481 ;; Hardware stack levels used:    1
  7482 ;; Hardware stack levels required when called:    5
  7483 ;; This function calls:
  7484 ;;		_write_command
  7485 ;;		_write_data
  7486 ;; This function is called by:
  7487 ;;		_TFT_GreenTab_Initialize
  7488 ;; This function uses a non-reentrant model
  7489 ;;
  7490                           
  7491                           	psect	text29
  7492  0020B8                     __ptext29:
  7493                           	opt stack 0
  7494  0020B8                     _Rcmd2red:
  7495                           	opt stack 23
  7496                           
  7497                           ;ST7735_TFT.c: 331: write_command(0x2A);
  7498                           
  7499                           ;incstack = 0
  7500  0020B8  0E2A               	movlw	42
  7501  0020BA  EC45  F012         	call	_write_command
  7502                           
  7503                           ;ST7735_TFT.c: 332: write_data(0x00); write_data(0x00);
  7504  0020BE  0E00               	movlw	0
  7505  0020C0  EC3D  F012         	call	_write_data
  7506  0020C4  0E00               	movlw	0
  7507  0020C6  EC3D  F012         	call	_write_data
  7508                           
  7509                           ;ST7735_TFT.c: 333: write_data(0x00); write_data(0x7F);
  7510  0020CA  0E00               	movlw	0
  7511  0020CC  EC3D  F012         	call	_write_data
  7512  0020D0  0E7F               	movlw	127
  7513  0020D2  EC3D  F012         	call	_write_data
  7514                           
  7515                           ;ST7735_TFT.c: 334: write_command(0x2B);
  7516  0020D6  0E2B               	movlw	43
  7517  0020D8  EC45  F012         	call	_write_command
  7518                           
  7519                           ;ST7735_TFT.c: 335: write_data(0x00); write_data(0x00);
  7520  0020DC  0E00               	movlw	0
  7521  0020DE  EC3D  F012         	call	_write_data
  7522  0020E2  0E00               	movlw	0
  7523  0020E4  EC3D  F012         	call	_write_data
  7524                           
  7525                           ;ST7735_TFT.c: 336: write_data(0x00); write_data(0x9F);
  7526  0020E8  0E00               	movlw	0
  7527  0020EA  EC3D  F012         	call	_write_data
  7528  0020EE  0E9F               	movlw	159
  7529  0020F0  EC3D  F012         	call	_write_data
  7530  0020F4  0012               	return		;funcret
  7531  0020F6                     __end_of_Rcmd2red:
  7532                           	opt stack 0
  7533                           tblptru	equ	0xFF8
  7534                           tblptrh	equ	0xFF7
  7535                           tblptrl	equ	0xFF6
  7536                           tablat	equ	0xFF5
  7537                           prodh	equ	0xFF4
  7538                           prodl	equ	0xFF3
  7539                           intcon	equ	0xFF2
  7540                           intcon2	equ	0xFF1
  7541                           postinc0	equ	0xFEE
  7542                           wreg	equ	0xFE8
  7543                           postdec1	equ	0xFE5
  7544                           fsr1l	equ	0xFE1
  7545                           indf2	equ	0xFDF
  7546                           postinc2	equ	0xFDE
  7547                           postdec2	equ	0xFDD
  7548                           fsr2h	equ	0xFDA
  7549                           fsr2l	equ	0xFD9
  7550                           status	equ	0xFD8
  7551                           
  7552 ;; *************** function _Rcmd1 *****************
  7553 ;; Defined at:
  7554 ;;		line 282 in file "ST7735_TFT.c"
  7555 ;; Parameters:    Size  Location     Type
  7556 ;;		None
  7557 ;; Auto vars:     Size  Location     Type
  7558 ;;		None
  7559 ;; Return value:  Size  Location     Type
  7560 ;;		None               void
  7561 ;; Registers used:
  7562 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7563 ;; Tracked objects:
  7564 ;;		On entry : 0/0
  7565 ;;		On exit  : 0/0
  7566 ;;		Unchanged: 0/0
  7567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7568 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7569 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7570 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7571 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7572 ;;Total ram usage:        0 bytes
  7573 ;; Hardware stack levels used:    1
  7574 ;; Hardware stack levels required when called:    5
  7575 ;; This function calls:
  7576 ;;		_delay_ms
  7577 ;;		_write_command
  7578 ;;		_write_data
  7579 ;; This function is called by:
  7580 ;;		_TFT_GreenTab_Initialize
  7581 ;;		_TFT_BlackTab_Initialize
  7582 ;; This function uses a non-reentrant model
  7583 ;;
  7584                           
  7585                           	psect	text30
  7586  001090                     __ptext30:
  7587                           	opt stack 0
  7588  001090                     _Rcmd1:
  7589                           	opt stack 23
  7590                           
  7591                           ;ST7735_TFT.c: 284: write_command(0x01);
  7592                           
  7593                           ;incstack = 0
  7594  001090  0E01               	movlw	1
  7595  001092  EC45  F012         	call	_write_command
  7596                           
  7597                           ;ST7735_TFT.c: 285: delay_ms(150);
  7598  001096  0E00               	movlw	0
  7599  001098  6E18               	movwf	delay_ms@ms+1,c
  7600  00109A  0E96               	movlw	150
  7601  00109C  6E17               	movwf	delay_ms@ms,c
  7602  00109E  EC39  F00F         	call	_delay_ms	;wreg free
  7603                           
  7604                           ;ST7735_TFT.c: 286: write_command(0x11);
  7605  0010A2  0E11               	movlw	17
  7606  0010A4  EC45  F012         	call	_write_command
  7607                           
  7608                           ;ST7735_TFT.c: 287: delay_ms(500);
  7609  0010A8  0E01               	movlw	1
  7610  0010AA  6E18               	movwf	delay_ms@ms+1,c
  7611  0010AC  0EF4               	movlw	244
  7612  0010AE  6E17               	movwf	delay_ms@ms,c
  7613  0010B0  EC39  F00F         	call	_delay_ms	;wreg free
  7614                           
  7615                           ;ST7735_TFT.c: 288: write_command(0xB1);
  7616  0010B4  0EB1               	movlw	177
  7617  0010B6  EC45  F012         	call	_write_command
  7618                           
  7619                           ;ST7735_TFT.c: 289: write_data(0x01);
  7620  0010BA  0E01               	movlw	1
  7621  0010BC  EC3D  F012         	call	_write_data
  7622                           
  7623                           ;ST7735_TFT.c: 290: write_data(0x2C);
  7624  0010C0  0E2C               	movlw	44
  7625  0010C2  EC3D  F012         	call	_write_data
  7626                           
  7627                           ;ST7735_TFT.c: 291: write_data(0x2D);
  7628  0010C6  0E2D               	movlw	45
  7629  0010C8  EC3D  F012         	call	_write_data
  7630                           
  7631                           ;ST7735_TFT.c: 292: write_command(0xB2);
  7632  0010CC  0EB2               	movlw	178
  7633  0010CE  EC45  F012         	call	_write_command
  7634                           
  7635                           ;ST7735_TFT.c: 293: write_data(0x01);
  7636  0010D2  0E01               	movlw	1
  7637  0010D4  EC3D  F012         	call	_write_data
  7638                           
  7639                           ;ST7735_TFT.c: 294: write_data(0x2C);
  7640  0010D8  0E2C               	movlw	44
  7641  0010DA  EC3D  F012         	call	_write_data
  7642                           
  7643                           ;ST7735_TFT.c: 295: write_data(0x2D);
  7644  0010DE  0E2D               	movlw	45
  7645  0010E0  EC3D  F012         	call	_write_data
  7646                           
  7647                           ;ST7735_TFT.c: 296: write_command(0xB3);
  7648  0010E4  0EB3               	movlw	179
  7649  0010E6  EC45  F012         	call	_write_command
  7650                           
  7651                           ;ST7735_TFT.c: 297: write_data(0x01);
  7652  0010EA  0E01               	movlw	1
  7653  0010EC  EC3D  F012         	call	_write_data
  7654                           
  7655                           ;ST7735_TFT.c: 298: write_data(0x2C);
  7656  0010F0  0E2C               	movlw	44
  7657  0010F2  EC3D  F012         	call	_write_data
  7658                           
  7659                           ;ST7735_TFT.c: 299: write_data(0x2D);
  7660  0010F6  0E2D               	movlw	45
  7661  0010F8  EC3D  F012         	call	_write_data
  7662                           
  7663                           ;ST7735_TFT.c: 300: write_data(0x01);
  7664  0010FC  0E01               	movlw	1
  7665  0010FE  EC3D  F012         	call	_write_data
  7666                           
  7667                           ;ST7735_TFT.c: 301: write_data(0x2C);
  7668  001102  0E2C               	movlw	44
  7669  001104  EC3D  F012         	call	_write_data
  7670                           
  7671                           ;ST7735_TFT.c: 302: write_data(0x2D);
  7672  001108  0E2D               	movlw	45
  7673  00110A  EC3D  F012         	call	_write_data
  7674                           
  7675                           ;ST7735_TFT.c: 303: write_command(0xB4);
  7676  00110E  0EB4               	movlw	180
  7677  001110  EC45  F012         	call	_write_command
  7678                           
  7679                           ;ST7735_TFT.c: 304: write_data(0x07);
  7680  001114  0E07               	movlw	7
  7681  001116  EC3D  F012         	call	_write_data
  7682                           
  7683                           ;ST7735_TFT.c: 305: write_command(0xC0);
  7684  00111A  0EC0               	movlw	192
  7685  00111C  EC45  F012         	call	_write_command
  7686                           
  7687                           ;ST7735_TFT.c: 306: write_data(0xA2);
  7688  001120  0EA2               	movlw	162
  7689  001122  EC3D  F012         	call	_write_data
  7690                           
  7691                           ;ST7735_TFT.c: 307: write_data(0x02);
  7692  001126  0E02               	movlw	2
  7693  001128  EC3D  F012         	call	_write_data
  7694                           
  7695                           ;ST7735_TFT.c: 308: write_data(0x84);
  7696  00112C  0E84               	movlw	132
  7697  00112E  EC3D  F012         	call	_write_data
  7698                           
  7699                           ;ST7735_TFT.c: 309: write_command(0xC1);
  7700  001132  0EC1               	movlw	193
  7701  001134  EC45  F012         	call	_write_command
  7702                           
  7703                           ;ST7735_TFT.c: 310: write_data(0xC5);
  7704  001138  0EC5               	movlw	197
  7705  00113A  EC3D  F012         	call	_write_data
  7706                           
  7707                           ;ST7735_TFT.c: 311: write_command(0xC2);
  7708  00113E  0EC2               	movlw	194
  7709  001140  EC45  F012         	call	_write_command
  7710                           
  7711                           ;ST7735_TFT.c: 312: write_data(0x0A);
  7712  001144  0E0A               	movlw	10
  7713  001146  EC3D  F012         	call	_write_data
  7714                           
  7715                           ;ST7735_TFT.c: 313: write_data(0x00);
  7716  00114A  0E00               	movlw	0
  7717  00114C  EC3D  F012         	call	_write_data
  7718                           
  7719                           ;ST7735_TFT.c: 314: write_command(0xC3);
  7720  001150  0EC3               	movlw	195
  7721  001152  EC45  F012         	call	_write_command
  7722                           
  7723                           ;ST7735_TFT.c: 315: write_data(0x8A);
  7724  001156  0E8A               	movlw	138
  7725  001158  EC3D  F012         	call	_write_data
  7726                           
  7727                           ;ST7735_TFT.c: 316: write_data(0x2A);
  7728  00115C  0E2A               	movlw	42
  7729  00115E  EC3D  F012         	call	_write_data
  7730                           
  7731                           ;ST7735_TFT.c: 317: write_command(0xC4);
  7732  001162  0EC4               	movlw	196
  7733  001164  EC45  F012         	call	_write_command
  7734                           
  7735                           ;ST7735_TFT.c: 318: write_data(0x8A);
  7736  001168  0E8A               	movlw	138
  7737  00116A  EC3D  F012         	call	_write_data
  7738                           
  7739                           ;ST7735_TFT.c: 319: write_data(0xEE);
  7740  00116E  0EEE               	movlw	238
  7741  001170  EC3D  F012         	call	_write_data
  7742                           
  7743                           ;ST7735_TFT.c: 320: write_command(0xC5);
  7744  001174  0EC5               	movlw	197
  7745  001176  EC45  F012         	call	_write_command
  7746                           
  7747                           ;ST7735_TFT.c: 321: write_data(0x0E);
  7748  00117A  0E0E               	movlw	14
  7749  00117C  EC3D  F012         	call	_write_data
  7750                           
  7751                           ;ST7735_TFT.c: 322: write_command(0x20);
  7752  001180  0E20               	movlw	32
  7753  001182  EC45  F012         	call	_write_command
  7754                           
  7755                           ;ST7735_TFT.c: 323: write_command(0x36);
  7756  001186  0E36               	movlw	54
  7757  001188  EC45  F012         	call	_write_command
  7758                           
  7759                           ;ST7735_TFT.c: 324: write_data(0xC8);
  7760  00118C  0EC8               	movlw	200
  7761  00118E  EC3D  F012         	call	_write_data
  7762                           
  7763                           ;ST7735_TFT.c: 325: write_command(0x3A);
  7764  001192  0E3A               	movlw	58
  7765  001194  EC45  F012         	call	_write_command
  7766                           
  7767                           ;ST7735_TFT.c: 326: write_data(0x05);
  7768  001198  0E05               	movlw	5
  7769  00119A  EC3D  F012         	call	_write_data
  7770  00119E  0012               	return		;funcret
  7771  0011A0                     __end_of_Rcmd1:
  7772                           	opt stack 0
  7773                           tblptru	equ	0xFF8
  7774                           tblptrh	equ	0xFF7
  7775                           tblptrl	equ	0xFF6
  7776                           tablat	equ	0xFF5
  7777                           prodh	equ	0xFF4
  7778                           prodl	equ	0xFF3
  7779                           intcon	equ	0xFF2
  7780                           intcon2	equ	0xFF1
  7781                           postinc0	equ	0xFEE
  7782                           wreg	equ	0xFE8
  7783                           postdec1	equ	0xFE5
  7784                           fsr1l	equ	0xFE1
  7785                           indf2	equ	0xFDF
  7786                           postinc2	equ	0xFDE
  7787                           postdec2	equ	0xFDD
  7788                           fsr2h	equ	0xFDA
  7789                           fsr2l	equ	0xFD9
  7790                           status	equ	0xFD8
  7791                           
  7792 ;; *************** function _write_data *****************
  7793 ;; Defined at:
  7794 ;;		line 210 in file "ST7735_TFT.c"
  7795 ;; Parameters:    Size  Location     Type
  7796 ;;  data_           1    wreg     unsigned char 
  7797 ;; Auto vars:     Size  Location     Type
  7798 ;;  data_           1   18[COMRAM] unsigned char 
  7799 ;; Return value:  Size  Location     Type
  7800 ;;		None               void
  7801 ;; Registers used:
  7802 ;;		wreg, status,2, cstack
  7803 ;; Tracked objects:
  7804 ;;		On entry : 0/0
  7805 ;;		On exit  : 0/0
  7806 ;;		Unchanged: 0/0
  7807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7808 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7809 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7810 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7811 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7812 ;;Total ram usage:        1 bytes
  7813 ;; Hardware stack levels used:    1
  7814 ;; Hardware stack levels required when called:    4
  7815 ;; This function calls:
  7816 ;;		_spiwrite
  7817 ;; This function is called by:
  7818 ;;		_Rcmd1
  7819 ;;		_Rcmd2red
  7820 ;;		_Rcmd3
  7821 ;;		_setAddrWindow
  7822 ;;		_drawPixel
  7823 ;;		_TFT_GreenTab_Initialize
  7824 ;;		_Bcmd
  7825 ;;		_setScrollDefinition
  7826 ;;		_Rcmd2green
  7827 ;;		_VerticalScroll
  7828 ;; This function uses a non-reentrant model
  7829 ;;
  7830                           
  7831                           	psect	text31
  7832  00247A                     __ptext31:
  7833                           	opt stack 0
  7834  00247A                     _write_data:
  7835                           	opt stack 20
  7836                           
  7837                           ;incstack = 0
  7838                           ;write_data@data_ stored from wreg
  7839  00247A  6E13               	movwf	write_data@data_,c
  7840                           
  7841                           ;ST7735_TFT.c: 212: PORTDbits.RD1 = 0;
  7842  00247C  9283               	bcf	3971,1,c	;volatile
  7843                           
  7844                           ;ST7735_TFT.c: 213: PORTDbits.RD0 = 1;
  7845  00247E  8083               	bsf	3971,0,c	;volatile
  7846                           
  7847                           ;ST7735_TFT.c: 214: spiwrite(data_);
  7848  002480  5013               	movf	write_data@data_,w,c
  7849  002482  ECF4  F011         	call	_spiwrite
  7850                           
  7851                           ;ST7735_TFT.c: 215: PORTDbits.RD1 = 1;
  7852  002486  8283               	bsf	3971,1,c	;volatile
  7853  002488  0012               	return		;funcret
  7854  00248A                     __end_of_write_data:
  7855                           	opt stack 0
  7856                           tblptru	equ	0xFF8
  7857                           tblptrh	equ	0xFF7
  7858                           tblptrl	equ	0xFF6
  7859                           tablat	equ	0xFF5
  7860                           prodh	equ	0xFF4
  7861                           prodl	equ	0xFF3
  7862                           intcon	equ	0xFF2
  7863                           intcon2	equ	0xFF1
  7864                           postinc0	equ	0xFEE
  7865                           wreg	equ	0xFE8
  7866                           postdec1	equ	0xFE5
  7867                           fsr1l	equ	0xFE1
  7868                           indf2	equ	0xFDF
  7869                           postinc2	equ	0xFDE
  7870                           postdec2	equ	0xFDD
  7871                           fsr2h	equ	0xFDA
  7872                           fsr2l	equ	0xFD9
  7873                           status	equ	0xFD8
  7874                           
  7875 ;; *************** function _write_command *****************
  7876 ;; Defined at:
  7877 ;;		line 199 in file "ST7735_TFT.c"
  7878 ;; Parameters:    Size  Location     Type
  7879 ;;  cmd_            1    wreg     unsigned char 
  7880 ;; Auto vars:     Size  Location     Type
  7881 ;;  cmd_            1   18[COMRAM] unsigned char 
  7882 ;; Return value:  Size  Location     Type
  7883 ;;		None               void
  7884 ;; Registers used:
  7885 ;;		wreg, status,2, cstack
  7886 ;; Tracked objects:
  7887 ;;		On entry : 0/0
  7888 ;;		On exit  : 0/0
  7889 ;;		Unchanged: 0/0
  7890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7891 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7892 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7893 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7894 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7895 ;;Total ram usage:        1 bytes
  7896 ;; Hardware stack levels used:    1
  7897 ;; Hardware stack levels required when called:    4
  7898 ;; This function calls:
  7899 ;;		_spiwrite
  7900 ;; This function is called by:
  7901 ;;		_Rcmd1
  7902 ;;		_Rcmd2red
  7903 ;;		_Rcmd3
  7904 ;;		_setAddrWindow
  7905 ;;		_TFT_GreenTab_Initialize
  7906 ;;		_Bcmd
  7907 ;;		_setScrollDefinition
  7908 ;;		_Rcmd2green
  7909 ;;		_VerticalScroll
  7910 ;; This function uses a non-reentrant model
  7911 ;;
  7912                           
  7913                           	psect	text32
  7914  00248A                     __ptext32:
  7915                           	opt stack 0
  7916  00248A                     _write_command:
  7917                           	opt stack 20
  7918                           
  7919                           ;incstack = 0
  7920                           ;write_command@cmd_ stored from wreg
  7921  00248A  6E13               	movwf	write_command@cmd_,c
  7922                           
  7923                           ;ST7735_TFT.c: 201: PORTDbits.RD1 = 0;
  7924  00248C  9283               	bcf	3971,1,c	;volatile
  7925                           
  7926                           ;ST7735_TFT.c: 203: PORTDbits.RD0 = 0;
  7927  00248E  9083               	bcf	3971,0,c	;volatile
  7928                           
  7929                           ;ST7735_TFT.c: 204: spiwrite(cmd_);
  7930  002490  5013               	movf	write_command@cmd_,w,c
  7931  002492  ECF4  F011         	call	_spiwrite
  7932                           
  7933                           ;ST7735_TFT.c: 206: PORTDbits.RD1 = 1;
  7934  002496  8283               	bsf	3971,1,c	;volatile
  7935  002498  0012               	return		;funcret
  7936  00249A                     __end_of_write_command:
  7937                           	opt stack 0
  7938                           tblptru	equ	0xFF8
  7939                           tblptrh	equ	0xFF7
  7940                           tblptrl	equ	0xFF6
  7941                           tablat	equ	0xFF5
  7942                           prodh	equ	0xFF4
  7943                           prodl	equ	0xFF3
  7944                           intcon	equ	0xFF2
  7945                           intcon2	equ	0xFF1
  7946                           postinc0	equ	0xFEE
  7947                           wreg	equ	0xFE8
  7948                           postdec1	equ	0xFE5
  7949                           fsr1l	equ	0xFE1
  7950                           indf2	equ	0xFDF
  7951                           postinc2	equ	0xFDE
  7952                           postdec2	equ	0xFDD
  7953                           fsr2h	equ	0xFDA
  7954                           fsr2l	equ	0xFD9
  7955                           status	equ	0xFD8
  7956                           
  7957 ;; *************** function _spiwrite *****************
  7958 ;; Defined at:
  7959 ;;		line 190 in file "ST7735_TFT.c"
  7960 ;; Parameters:    Size  Location     Type
  7961 ;;  spidata         1    wreg     unsigned char 
  7962 ;; Auto vars:     Size  Location     Type
  7963 ;;  spidata         1   17[COMRAM] unsigned char 
  7964 ;;  x               1   16[COMRAM] unsigned char 
  7965 ;; Return value:  Size  Location     Type
  7966 ;;		None               void
  7967 ;; Registers used:
  7968 ;;		wreg
  7969 ;; Tracked objects:
  7970 ;;		On entry : 0/0
  7971 ;;		On exit  : 0/0
  7972 ;;		Unchanged: 0/0
  7973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7974 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7975 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7976 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7977 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7978 ;;Total ram usage:        2 bytes
  7979 ;; Hardware stack levels used:    1
  7980 ;; Hardware stack levels required when called:    3
  7981 ;; This function calls:
  7982 ;;		Nothing
  7983 ;; This function is called by:
  7984 ;;		_write_command
  7985 ;;		_write_data
  7986 ;;		_drawFastVLine
  7987 ;;		_fillRectangle
  7988 ;;		_drawFastHLine
  7989 ;; This function uses a non-reentrant model
  7990 ;;
  7991                           
  7992                           	psect	text33
  7993  0023E8                     __ptext33:
  7994                           	opt stack 0
  7995  0023E8                     _spiwrite:
  7996                           	opt stack 22
  7997                           
  7998                           ;incstack = 0
  7999                           ;spiwrite@spidata stored from wreg
  8000  0023E8  6E12               	movwf	spiwrite@spidata,c
  8001                           
  8002                           ;ST7735_TFT.c: 192: char x;
  8003                           ;ST7735_TFT.c: 193: PIR1bits.SSPIF = 0;
  8004  0023EA  969E               	bcf	3998,3,c	;volatile
  8005                           
  8006                           ;ST7735_TFT.c: 194: x = SSPBUF;
  8007  0023EC  CFC9 F011          	movff	4041,spiwrite@x	;volatile
  8008                           
  8009                           ;ST7735_TFT.c: 195: SSPBUF = spidata;
  8010  0023F0  C012  FFC9         	movff	spiwrite@spidata,4041	;volatile
  8011                           
  8012                           ;ST7735_TFT.c: 196: while (!SSPSTATbits.BF);
  8013  0023F4  D000               	goto	l313
  8014  0023F6                     l313:
  8015  0023F6  A0C7               	btfss	4039,0,c	;volatile
  8016  0023F8  D7FE               	goto	l313
  8017  0023FA  0012               	return		;funcret
  8018  0023FC                     __end_of_spiwrite:
  8019                           	opt stack 0
  8020                           tblptru	equ	0xFF8
  8021                           tblptrh	equ	0xFF7
  8022                           tblptrl	equ	0xFF6
  8023                           tablat	equ	0xFF5
  8024                           prodh	equ	0xFF4
  8025                           prodl	equ	0xFF3
  8026                           intcon	equ	0xFF2
  8027                           intcon2	equ	0xFF1
  8028                           postinc0	equ	0xFEE
  8029                           wreg	equ	0xFE8
  8030                           postdec1	equ	0xFE5
  8031                           fsr1l	equ	0xFE1
  8032                           indf2	equ	0xFDF
  8033                           postinc2	equ	0xFDE
  8034                           postdec2	equ	0xFDD
  8035                           fsr2h	equ	0xFDA
  8036                           fsr2l	equ	0xFD9
  8037                           status	equ	0xFD8
  8038                           
  8039 ;; *************** function _LCD_Reset *****************
  8040 ;; Defined at:
  8041 ;;		line 218 in file "ST7735_TFT.c"
  8042 ;; Parameters:    Size  Location     Type
  8043 ;;		None
  8044 ;; Auto vars:     Size  Location     Type
  8045 ;;		None
  8046 ;; Return value:  Size  Location     Type
  8047 ;;		None               void
  8048 ;; Registers used:
  8049 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8050 ;; Tracked objects:
  8051 ;;		On entry : 0/0
  8052 ;;		On exit  : 0/0
  8053 ;;		Unchanged: 0/0
  8054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8055 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8056 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8057 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8058 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8059 ;;Total ram usage:        0 bytes
  8060 ;; Hardware stack levels used:    1
  8061 ;; Hardware stack levels required when called:    5
  8062 ;; This function calls:
  8063 ;;		_delay_ms
  8064 ;; This function is called by:
  8065 ;;		_Initialize_Screen
  8066 ;; This function uses a non-reentrant model
  8067 ;;
  8068                           
  8069                           	psect	text34
  8070  002410                     __ptext34:
  8071                           	opt stack 0
  8072  002410                     _LCD_Reset:
  8073                           	opt stack 24
  8074                           
  8075                           ;ST7735_TFT.c: 220: PORTDbits.RD2 = 0;
  8076                           
  8077                           ;incstack = 0
  8078  002410  9483               	bcf	3971,2,c	;volatile
  8079                           
  8080                           ;ST7735_TFT.c: 221: delay_ms(100);
  8081  002412  0E00               	movlw	0
  8082  002414  6E18               	movwf	delay_ms@ms+1,c
  8083  002416  0E64               	movlw	100
  8084  002418  6E17               	movwf	delay_ms@ms,c
  8085  00241A  EC39  F00F         	call	_delay_ms	;wreg free
  8086                           
  8087                           ;ST7735_TFT.c: 222: PORTDbits.RD2 = 1;
  8088  00241E  8483               	bsf	3971,2,c	;volatile
  8089  002420  0012               	return		;funcret
  8090  002422                     __end_of_LCD_Reset:
  8091                           	opt stack 0
  8092                           tblptru	equ	0xFF8
  8093                           tblptrh	equ	0xFF7
  8094                           tblptrl	equ	0xFF6
  8095                           tablat	equ	0xFF5
  8096                           prodh	equ	0xFF4
  8097                           prodl	equ	0xFF3
  8098                           intcon	equ	0xFF2
  8099                           intcon2	equ	0xFF1
  8100                           postinc0	equ	0xFEE
  8101                           wreg	equ	0xFE8
  8102                           postdec1	equ	0xFE5
  8103                           fsr1l	equ	0xFE1
  8104                           indf2	equ	0xFDF
  8105                           postinc2	equ	0xFDE
  8106                           postdec2	equ	0xFDD
  8107                           fsr2h	equ	0xFDA
  8108                           fsr2l	equ	0xFD9
  8109                           status	equ	0xFD8
  8110                           
  8111 ;; *************** function _delay_ms *****************
  8112 ;; Defined at:
  8113 ;;		line 65 in file "ST7735_TFT.c"
  8114 ;; Parameters:    Size  Location     Type
  8115 ;;  ms              2   22[COMRAM] int 
  8116 ;; Auto vars:     Size  Location     Type
  8117 ;;  count           2   26[COMRAM] int 
  8118 ;; Return value:  Size  Location     Type
  8119 ;;		None               void
  8120 ;; Registers used:
  8121 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8122 ;; Tracked objects:
  8123 ;;		On entry : 0/0
  8124 ;;		On exit  : 0/0
  8125 ;;		Unchanged: 0/0
  8126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8127 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8128 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8129 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8130 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8131 ;;Total ram usage:        6 bytes
  8132 ;; Hardware stack levels used:    1
  8133 ;; Hardware stack levels required when called:    4
  8134 ;; This function calls:
  8135 ;;		___wmul
  8136 ;; This function is called by:
  8137 ;;		_LCD_Reset
  8138 ;;		_Rcmd1
  8139 ;;		_Rcmd3
  8140 ;;		_Bcmd
  8141 ;; This function uses a non-reentrant model
  8142 ;;
  8143                           
  8144                           	psect	text35
  8145  001E72                     __ptext35:
  8146                           	opt stack 0
  8147  001E72                     _delay_ms:
  8148                           	opt stack 23
  8149                           
  8150                           ;ST7735_TFT.c: 71: int count;
  8151                           ;ST7735_TFT.c: 72: count = 8000000/4000/16 * ms;
  8152                           
  8153                           ;incstack = 0
  8154  001E72  C017  F011         	movff	delay_ms@ms,___wmul@multiplier
  8155  001E76  C018  F012         	movff	delay_ms@ms+1,___wmul@multiplier+1
  8156  001E7A  0E00               	movlw	0
  8157  001E7C  6E14               	movwf	___wmul@multiplicand+1,c
  8158  001E7E  0E7D               	movlw	125
  8159  001E80  6E13               	movwf	___wmul@multiplicand,c
  8160  001E82  EC18  F011         	call	___wmul	;wreg free
  8161  001E86  C011  F01B         	movff	?___wmul,delay_ms@count
  8162  001E8A  C012  F01C         	movff	?___wmul+1,delay_ms@count+1
  8163                           
  8164                           ;ST7735_TFT.c: 73: count = (0xffff - count);
  8165  001E8E  C01B  F019         	movff	delay_ms@count,??_delay_ms
  8166  001E92  C01C  F01A         	movff	delay_ms@count+1,??_delay_ms+1
  8167  001E96  1E19               	comf	??_delay_ms,f,c
  8168  001E98  1E1A               	comf	??_delay_ms+1,f,c
  8169  001E9A  4A19               	infsnz	??_delay_ms,f,c
  8170  001E9C  2A1A               	incf	??_delay_ms+1,f,c
  8171  001E9E  0EFF               	movlw	255
  8172  001EA0  2419               	addwf	??_delay_ms,w,c
  8173  001EA2  6E1B               	movwf	delay_ms@count,c
  8174  001EA4  0EFF               	movlw	255
  8175  001EA6  201A               	addwfc	??_delay_ms+1,w,c
  8176  001EA8  6E1C               	movwf	delay_ms@count+1,c
  8177                           
  8178                           ;ST7735_TFT.c: 75: T0CON = 0x03;
  8179  001EAA  0E03               	movlw	3
  8180  001EAC  6ED5               	movwf	4053,c	;volatile
  8181                           
  8182                           ;ST7735_TFT.c: 77: TMR0L = count & 0x00ff;
  8183  001EAE  C01B  FFD6         	movff	delay_ms@count,4054	;volatile
  8184                           
  8185                           ;ST7735_TFT.c: 78: TMR0H = count >> 8;
  8186  001EB2  501C               	movf	delay_ms@count+1,w,c
  8187  001EB4  6ED7               	movwf	4055,c	;volatile
  8188                           
  8189                           ;ST7735_TFT.c: 80: INTCONbits.TMR0IF = 0;
  8190  001EB6  94F2               	bcf	intcon,2,c	;volatile
  8191                           
  8192                           ;ST7735_TFT.c: 81: T0CONbits.TMR0ON = 1;
  8193  001EB8  8ED5               	bsf	4053,7,c	;volatile
  8194                           
  8195                           ;ST7735_TFT.c: 83: while (INTCONbits.TMR0IF == 0);
  8196  001EBA  D000               	goto	l303
  8197  001EBC                     l303:
  8198  001EBC  A4F2               	btfss	intcon,2,c	;volatile
  8199  001EBE  D7FE               	goto	l303
  8200                           
  8201                           ;ST7735_TFT.c: 84: T0CONbits.TMR0ON = 0;
  8202  001EC0  9ED5               	bcf	4053,7,c	;volatile
  8203  001EC2  0012               	return		;funcret
  8204  001EC4                     __end_of_delay_ms:
  8205                           	opt stack 0
  8206                           tblptru	equ	0xFF8
  8207                           tblptrh	equ	0xFF7
  8208                           tblptrl	equ	0xFF6
  8209                           tablat	equ	0xFF5
  8210                           prodh	equ	0xFF4
  8211                           prodl	equ	0xFF3
  8212                           intcon	equ	0xFF2
  8213                           intcon2	equ	0xFF1
  8214                           postinc0	equ	0xFEE
  8215                           wreg	equ	0xFE8
  8216                           postdec1	equ	0xFE5
  8217                           fsr1l	equ	0xFE1
  8218                           indf2	equ	0xFDF
  8219                           postinc2	equ	0xFDE
  8220                           postdec2	equ	0xFDD
  8221                           fsr2h	equ	0xFDA
  8222                           fsr2l	equ	0xFD9
  8223                           status	equ	0xFD8
  8224                           
  8225 ;; *************** function ___wmul *****************
  8226 ;; Defined at:
  8227 ;;		line 15 in file "E:\XC8\sources\common\Umul16.c"
  8228 ;; Parameters:    Size  Location     Type
  8229 ;;  multiplier      2   16[COMRAM] unsigned int 
  8230 ;;  multiplicand    2   18[COMRAM] unsigned int 
  8231 ;; Auto vars:     Size  Location     Type
  8232 ;;  product         2   20[COMRAM] unsigned int 
  8233 ;; Return value:  Size  Location     Type
  8234 ;;                  2   16[COMRAM] unsigned int 
  8235 ;; Registers used:
  8236 ;;		wreg, status,2, status,0, prodl, prodh
  8237 ;; Tracked objects:
  8238 ;;		On entry : 0/0
  8239 ;;		On exit  : 0/0
  8240 ;;		Unchanged: 0/0
  8241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8242 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8243 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8244 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8245 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8246 ;;Total ram usage:        6 bytes
  8247 ;; Hardware stack levels used:    1
  8248 ;; Hardware stack levels required when called:    3
  8249 ;; This function calls:
  8250 ;;		Nothing
  8251 ;; This function is called by:
  8252 ;;		_delay_ms
  8253 ;;		_drawChar
  8254 ;;		_get_RPM
  8255 ;;		_main
  8256 ;;		_printf
  8257 ;; This function uses a non-reentrant model
  8258 ;;
  8259                           
  8260                           	psect	text36
  8261  002230                     __ptext36:
  8262                           	opt stack 0
  8263  002230                     ___wmul:
  8264                           	opt stack 26
  8265                           
  8266                           ;incstack = 0
  8267  002230  5011               	movf	___wmul@multiplier,w,c
  8268  002232  0213               	mulwf	___wmul@multiplicand,c
  8269  002234  CFF3 F015          	movff	prodl,___wmul@product
  8270  002238  CFF4 F016          	movff	prodh,___wmul@product+1
  8271  00223C  5011               	movf	___wmul@multiplier,w,c
  8272  00223E  0214               	mulwf	___wmul@multiplicand+1,c
  8273  002240  50F3               	movf	prodl,w,c
  8274  002242  2616               	addwf	___wmul@product+1,f,c
  8275  002244  5012               	movf	___wmul@multiplier+1,w,c
  8276  002246  0213               	mulwf	___wmul@multiplicand,c
  8277  002248  50F3               	movf	prodl,w,c
  8278  00224A  2616               	addwf	___wmul@product+1,f,c
  8279  00224C  C015  F011         	movff	___wmul@product,?___wmul
  8280  002250  C016  F012         	movff	___wmul@product+1,?___wmul+1
  8281  002254  D000               	goto	l793
  8282  002256                     l793:
  8283  002256  0012               	return		;funcret
  8284  002258                     __end_of___wmul:
  8285                           	opt stack 0
  8286                           tblptru	equ	0xFF8
  8287                           tblptrh	equ	0xFF7
  8288                           tblptrl	equ	0xFF6
  8289                           tablat	equ	0xFF5
  8290                           prodh	equ	0xFF4
  8291                           prodl	equ	0xFF3
  8292                           intcon	equ	0xFF2
  8293                           intcon2	equ	0xFF1
  8294                           postinc0	equ	0xFEE
  8295                           wreg	equ	0xFE8
  8296                           postdec1	equ	0xFE5
  8297                           fsr1l	equ	0xFE1
  8298                           indf2	equ	0xFDF
  8299                           postinc2	equ	0xFDE
  8300                           postdec2	equ	0xFDD
  8301                           fsr2h	equ	0xFDA
  8302                           fsr2l	equ	0xFD9
  8303                           status	equ	0xFD8
  8304                           
  8305 ;; *************** function _Increase_Speed *****************
  8306 ;; Defined at:
  8307 ;;		line 50 in file "Fan_Support.c"
  8308 ;; Parameters:    Size  Location     Type
  8309 ;;		None
  8310 ;; Auto vars:     Size  Location     Type
  8311 ;;		None
  8312 ;; Return value:  Size  Location     Type
  8313 ;;		None               void
  8314 ;; Registers used:
  8315 ;;		wreg, status,2, status,0, cstack
  8316 ;; Tracked objects:
  8317 ;;		On entry : 0/0
  8318 ;;		On exit  : 0/0
  8319 ;;		Unchanged: 0/0
  8320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8321 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8322 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8323 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8324 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8325 ;;Total ram usage:        0 bytes
  8326 ;; Hardware stack levels used:    1
  8327 ;; Hardware stack levels required when called:    7
  8328 ;; This function calls:
  8329 ;;		_Do_Beep
  8330 ;;		_do_update_pwm
  8331 ;; This function is called by:
  8332 ;;		_main
  8333 ;; This function uses a non-reentrant model
  8334 ;;
  8335                           
  8336                           	psect	text37
  8337  00227E                     __ptext37:
  8338                           	opt stack 0
  8339  00227E                     _Increase_Speed:
  8340                           	opt stack 23
  8341                           
  8342                           ;Fan_Support.c: 52: if (duty_cycle == 100)
  8343                           
  8344                           ;incstack = 0
  8345  00227E  0E64               	movlw	100
  8346  002280  185E               	xorwf	_duty_cycle,w,c
  8347  002282  A4D8               	btfss	status,2,c
  8348  002284  D006               	goto	l6469
  8349                           
  8350                           ;Fan_Support.c: 53: {
  8351                           ;Fan_Support.c: 54: Do_Beep();
  8352  002286  ECDD  F011         	call	_Do_Beep	;wreg free
  8353                           
  8354                           ;Fan_Support.c: 55: do_update_pwm(duty_cycle);
  8355  00228A  505E               	movf	_duty_cycle,w,c
  8356  00228C  ECFF  F00B         	call	_do_update_pwm
  8357                           
  8358                           ;Fan_Support.c: 56: }
  8359  002290  D007               	goto	l508
  8360  002292                     l6469:
  8361                           
  8362                           ;Fan_Support.c: 57: else
  8363                           ;Fan_Support.c: 58: {
  8364                           ;Fan_Support.c: 59: duty_cycle = duty_cycle + 5;
  8365  002292  505E               	movf	_duty_cycle,w,c
  8366  002294  0F05               	addlw	5
  8367  002296  6E5E               	movwf	_duty_cycle,c
  8368                           
  8369                           ;Fan_Support.c: 60: do_update_pwm(duty_cycle);
  8370  002298  505E               	movf	_duty_cycle,w,c
  8371  00229A  ECFF  F00B         	call	_do_update_pwm
  8372  00229E  D000               	goto	l508
  8373  0022A0                     l508:
  8374  0022A0  0012               	return		;funcret
  8375  0022A2                     __end_of_Increase_Speed:
  8376                           	opt stack 0
  8377                           tblptru	equ	0xFF8
  8378                           tblptrh	equ	0xFF7
  8379                           tblptrl	equ	0xFF6
  8380                           tablat	equ	0xFF5
  8381                           prodh	equ	0xFF4
  8382                           prodl	equ	0xFF3
  8383                           intcon	equ	0xFF2
  8384                           intcon2	equ	0xFF1
  8385                           postinc0	equ	0xFEE
  8386                           wreg	equ	0xFE8
  8387                           postdec1	equ	0xFE5
  8388                           fsr1l	equ	0xFE1
  8389                           indf2	equ	0xFDF
  8390                           postinc2	equ	0xFDE
  8391                           postdec2	equ	0xFDD
  8392                           fsr2h	equ	0xFDA
  8393                           fsr2l	equ	0xFD9
  8394                           status	equ	0xFD8
  8395                           
  8396 ;; *************** function _Do_Init *****************
  8397 ;; Defined at:
  8398 ;;		line 101 in file "Lab11pA_J.c"
  8399 ;; Parameters:    Size  Location     Type
  8400 ;;		None
  8401 ;; Auto vars:     Size  Location     Type
  8402 ;;		None
  8403 ;; Return value:  Size  Location     Type
  8404 ;;		None               void
  8405 ;; Registers used:
  8406 ;;		wreg, status,2, status,0, cstack
  8407 ;; Tracked objects:
  8408 ;;		On entry : 0/0
  8409 ;;		On exit  : 0/0
  8410 ;;		Unchanged: 0/0
  8411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8412 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8413 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8415 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8416 ;;Total ram usage:        0 bytes
  8417 ;; Hardware stack levels used:    1
  8418 ;; Hardware stack levels required when called:    7
  8419 ;; This function calls:
  8420 ;;		_DS1621_Init
  8421 ;;		_I2C_Init
  8422 ;;		_init_INTERRUPT
  8423 ;;		_init_UART
  8424 ;; This function is called by:
  8425 ;;		_main
  8426 ;; This function uses a non-reentrant model
  8427 ;;
  8428                           
  8429                           	psect	text38
  8430  001F5E                     __ptext38:
  8431                           	opt stack 0
  8432  001F5E                     _Do_Init:
  8433                           	opt stack 23
  8434                           
  8435                           ;Lab11pA_J.c: 103: init_UART();
  8436                           
  8437                           ;incstack = 0
  8438  001F5E  ECFE  F011         	call	_init_UART	;wreg free
  8439                           
  8440                           ;Lab11pA_J.c: 104: OSCCON=0x70;
  8441  001F62  0E70               	movlw	112
  8442  001F64  6ED3               	movwf	4051,c	;volatile
  8443                           
  8444                           ;Lab11pA_J.c: 106: ADCON1=0x0F;
  8445  001F66  0E0F               	movlw	15
  8446  001F68  6EC1               	movwf	4033,c	;volatile
  8447                           
  8448                           ;Lab11pA_J.c: 107: TRISA = 0x00;
  8449  001F6A  0E00               	movlw	0
  8450  001F6C  6E92               	movwf	3986,c	;volatile
  8451                           
  8452                           ;Lab11pA_J.c: 108: TRISB = 0x01;
  8453  001F6E  0E01               	movlw	1
  8454  001F70  6E93               	movwf	3987,c	;volatile
  8455                           
  8456                           ;Lab11pA_J.c: 109: TRISC = 0x01;
  8457  001F72  0E01               	movlw	1
  8458  001F74  6E94               	movwf	3988,c	;volatile
  8459                           
  8460                           ;Lab11pA_J.c: 110: TRISD = 0x00;
  8461  001F76  0E00               	movlw	0
  8462  001F78  6E95               	movwf	3989,c	;volatile
  8463                           
  8464                           ;Lab11pA_J.c: 111: TRISE = 0x00;
  8465  001F7A  0E00               	movlw	0
  8466  001F7C  6E96               	movwf	3990,c	;volatile
  8467                           
  8468                           ;Lab11pA_J.c: 113: RBPU=0;
  8469  001F7E  9EF1               	bcf	intcon2,7,c	;volatile
  8470                           
  8471                           ;Lab11pA_J.c: 114: TMR3L = 0x00;
  8472  001F80  0E00               	movlw	0
  8473  001F82  6EB2               	movwf	4018,c	;volatile
  8474                           
  8475                           ;Lab11pA_J.c: 115: T3CON = 0x03;
  8476  001F84  0E03               	movlw	3
  8477  001F86  6EB1               	movwf	4017,c	;volatile
  8478                           
  8479                           ;Lab11pA_J.c: 116: I2C_Init(100000);
  8480  001F88  0EA0               	movlw	160
  8481  001F8A  6E11               	movwf	I2C_Init@c,c
  8482  001F8C  0E86               	movlw	134
  8483  001F8E  6E12               	movwf	I2C_Init@c+1,c
  8484  001F90  0E01               	movlw	1
  8485  001F92  6E13               	movwf	I2C_Init@c+2,c
  8486  001F94  0E00               	movlw	0
  8487  001F96  6E14               	movwf	I2C_Init@c+3,c
  8488  001F98  EC65  F012         	call	_I2C_Init	;wreg free
  8489                           
  8490                           ;Lab11pA_J.c: 118: DS1621_Init();
  8491  001F9C  ECA6  F011         	call	_DS1621_Init	;wreg free
  8492                           
  8493                           ;Lab11pA_J.c: 119: init_INTERRUPT();
  8494  001FA0  ECB8  F010         	call	_init_INTERRUPT	;wreg free
  8495                           
  8496                           ;Lab11pA_J.c: 120: FAN = 0;
  8497  001FA4  0E00               	movlw	0
  8498  001FA6  6E50               	movwf	_FAN,c
  8499  001FA8  0012               	return		;funcret
  8500  001FAA                     __end_of_Do_Init:
  8501                           	opt stack 0
  8502                           tblptru	equ	0xFF8
  8503                           tblptrh	equ	0xFF7
  8504                           tblptrl	equ	0xFF6
  8505                           tablat	equ	0xFF5
  8506                           prodh	equ	0xFF4
  8507                           prodl	equ	0xFF3
  8508                           intcon	equ	0xFF2
  8509                           intcon2	equ	0xFF1
  8510                           postinc0	equ	0xFEE
  8511                           wreg	equ	0xFE8
  8512                           postdec1	equ	0xFE5
  8513                           fsr1l	equ	0xFE1
  8514                           indf2	equ	0xFDF
  8515                           postinc2	equ	0xFDE
  8516                           postdec2	equ	0xFDD
  8517                           fsr2h	equ	0xFDA
  8518                           fsr2l	equ	0xFD9
  8519                           status	equ	0xFD8
  8520                           
  8521 ;; *************** function _init_UART *****************
  8522 ;; Defined at:
  8523 ;;		line 95 in file "Lab11pA_J.c"
  8524 ;; Parameters:    Size  Location     Type
  8525 ;;		None
  8526 ;; Auto vars:     Size  Location     Type
  8527 ;;		None
  8528 ;; Return value:  Size  Location     Type
  8529 ;;		None               void
  8530 ;; Registers used:
  8531 ;;		wreg, status,2, cstack
  8532 ;; Tracked objects:
  8533 ;;		On entry : 0/0
  8534 ;;		On exit  : 0/0
  8535 ;;		Unchanged: 0/0
  8536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8537 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8538 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8539 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8540 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8541 ;;Total ram usage:        0 bytes
  8542 ;; Hardware stack levels used:    1
  8543 ;; Hardware stack levels required when called:    4
  8544 ;; This function calls:
  8545 ;;		_OpenUSART
  8546 ;; This function is called by:
  8547 ;;		_Do_Init
  8548 ;; This function uses a non-reentrant model
  8549 ;;
  8550                           
  8551                           	psect	text39
  8552  0023FC                     __ptext39:
  8553                           	opt stack 0
  8554  0023FC                     _init_UART:
  8555                           	opt stack 25
  8556                           
  8557                           ;Lab11pA_J.c: 97: OpenUSART (0b01111111 & 0b10111111 & 0b11111110 & 0b11111101 & 0b11111
      +                          111 & 0b11111111, 25);
  8558                           
  8559                           ;incstack = 0
  8560  0023FC  0E00               	movlw	0
  8561  0023FE  6E12               	movwf	OpenUSART@spbrg+1,c
  8562  002400  0E19               	movlw	25
  8563  002402  6E11               	movwf	OpenUSART@spbrg,c
  8564  002404  0E3C               	movlw	60
  8565  002406  EC3B  F00E         	call	_OpenUSART
  8566                           
  8567                           ;Lab11pA_J.c: 98: OSCCON = 0x70;
  8568  00240A  0E70               	movlw	112
  8569  00240C  6ED3               	movwf	4051,c	;volatile
  8570  00240E  0012               	return		;funcret
  8571  002410                     __end_of_init_UART:
  8572                           	opt stack 0
  8573                           tblptru	equ	0xFF8
  8574                           tblptrh	equ	0xFF7
  8575                           tblptrl	equ	0xFF6
  8576                           tablat	equ	0xFF5
  8577                           prodh	equ	0xFF4
  8578                           prodl	equ	0xFF3
  8579                           intcon	equ	0xFF2
  8580                           intcon2	equ	0xFF1
  8581                           postinc0	equ	0xFEE
  8582                           wreg	equ	0xFE8
  8583                           postdec1	equ	0xFE5
  8584                           fsr1l	equ	0xFE1
  8585                           indf2	equ	0xFDF
  8586                           postinc2	equ	0xFDE
  8587                           postdec2	equ	0xFDD
  8588                           fsr2h	equ	0xFDA
  8589                           fsr2l	equ	0xFD9
  8590                           status	equ	0xFD8
  8591                           
  8592 ;; *************** function _OpenUSART *****************
  8593 ;; Defined at:
  8594 ;;		line 73 in file "E:\XC8\sources\pic18\plib\USART\uopen.c"
  8595 ;; Parameters:    Size  Location     Type
  8596 ;;  config          1    wreg     unsigned char 
  8597 ;;  spbrg           2   16[COMRAM] unsigned int 
  8598 ;; Auto vars:     Size  Location     Type
  8599 ;;  config          1   18[COMRAM] unsigned char 
  8600 ;; Return value:  Size  Location     Type
  8601 ;;		None               void
  8602 ;; Registers used:
  8603 ;;		wreg, status,2
  8604 ;; Tracked objects:
  8605 ;;		On entry : 0/0
  8606 ;;		On exit  : 0/0
  8607 ;;		Unchanged: 0/0
  8608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8609 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8610 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8611 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8612 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8613 ;;Total ram usage:        3 bytes
  8614 ;; Hardware stack levels used:    1
  8615 ;; Hardware stack levels required when called:    3
  8616 ;; This function calls:
  8617 ;;		Nothing
  8618 ;; This function is called by:
  8619 ;;		_init_UART
  8620 ;; This function uses a non-reentrant model
  8621 ;;
  8622                           
  8623                           	psect	text40
  8624  001C76                     __ptext40:
  8625                           	opt stack 0
  8626  001C76                     _OpenUSART:
  8627                           	opt stack 25
  8628                           
  8629                           ;incstack = 0
  8630                           ;OpenUSART@config stored from wreg
  8631  001C76  6E13               	movwf	OpenUSART@config,c
  8632  001C78  0E00               	movlw	0
  8633  001C7A  6EAC               	movwf	4012,c	;volatile
  8634  001C7C  0E00               	movlw	0
  8635  001C7E  6EAB               	movwf	4011,c	;volatile
  8636  001C80  A013               	btfss	OpenUSART@config,0,c
  8637  001C82  D002               	goto	l5801
  8638  001C84  88AC               	bsf	4012,4,c	;volatile
  8639  001C86  D000               	goto	l5801
  8640  001C88                     l5801:
  8641  001C88  A213               	btfss	OpenUSART@config,1,c
  8642  001C8A  D003               	goto	l5805
  8643  001C8C  8CAC               	bsf	4012,6,c	;volatile
  8644  001C8E  8CAB               	bsf	4011,6,c	;volatile
  8645  001C90  D000               	goto	l5805
  8646  001C92                     l5805:
  8647  001C92  A413               	btfss	OpenUSART@config,2,c
  8648  001C94  D002               	goto	l5809
  8649  001C96  8EAC               	bsf	4012,7,c	;volatile
  8650  001C98  D000               	goto	l5809
  8651  001C9A                     l5809:
  8652  001C9A  A613               	btfss	OpenUSART@config,3,c
  8653  001C9C  D002               	goto	l781
  8654  001C9E  88AB               	bsf	4011,4,c	;volatile
  8655  001CA0  D002               	goto	l5813
  8656  001CA2                     l781:
  8657  001CA2  8AAB               	bsf	4011,5,c	;volatile
  8658  001CA4  D000               	goto	l5813
  8659  001CA6                     l5813:
  8660  001CA6  B813               	btfsc	OpenUSART@config,4,c
  8661  001CA8  84AC               	bsf	4012,2,c	;volatile
  8662  001CAA  989E               	bcf	3998,4,c	;volatile
  8663  001CAC  AA13               	btfss	OpenUSART@config,5,c
  8664  001CAE  D002               	goto	l5821
  8665  001CB0  86AB               	bsf	4011,3,c	;volatile
  8666  001CB2  D000               	goto	l5821
  8667  001CB4                     l5821:
  8668  001CB4  AC13               	btfss	OpenUSART@config,6,c
  8669  001CB6  D002               	goto	l785
  8670  001CB8  8A9D               	bsf	3997,5,c	;volatile
  8671  001CBA  D001               	goto	l786
  8672  001CBC                     l785:
  8673  001CBC  9A9D               	bcf	3997,5,c	;volatile
  8674  001CBE                     l786:
  8675  001CBE  9A9E               	bcf	3998,5,c	;volatile
  8676  001CC0  AE13               	btfss	OpenUSART@config,7,c
  8677  001CC2  D002               	goto	l787
  8678  001CC4  889D               	bsf	3997,4,c	;volatile
  8679  001CC6  D001               	goto	l788
  8680  001CC8                     l787:
  8681  001CC8  989D               	bcf	3997,4,c	;volatile
  8682  001CCA                     l788:
  8683  001CCA  C011  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  8684  001CCE  5012               	movf	OpenUSART@spbrg+1,w,c
  8685  001CD0  6EB0               	movwf	4016,c	;volatile
  8686  001CD2  8AAC               	bsf	4012,5,c	;volatile
  8687  001CD4  8EAB               	bsf	4011,7,c	;volatile
  8688  001CD6  9C94               	bcf	3988,6,c	;volatile
  8689  001CD8  8E94               	bsf	3988,7,c	;volatile
  8690  001CDA  B8AC               	btfsc	4012,4,c	;volatile
  8691  001CDC  BEAC               	btfsc	4012,7,c	;volatile
  8692  001CDE  D002               	goto	l790
  8693  001CE0  8C94               	bsf	3988,6,c	;volatile
  8694  001CE2  D000               	goto	l790
  8695  001CE4                     l790:
  8696  001CE4  0012               	return		;funcret
  8697  001CE6                     __end_of_OpenUSART:
  8698                           	opt stack 0
  8699                           tblptru	equ	0xFF8
  8700                           tblptrh	equ	0xFF7
  8701                           tblptrl	equ	0xFF6
  8702                           tablat	equ	0xFF5
  8703                           prodh	equ	0xFF4
  8704                           prodl	equ	0xFF3
  8705                           intcon	equ	0xFF2
  8706                           intcon2	equ	0xFF1
  8707                           postinc0	equ	0xFEE
  8708                           wreg	equ	0xFE8
  8709                           postdec1	equ	0xFE5
  8710                           fsr1l	equ	0xFE1
  8711                           indf2	equ	0xFDF
  8712                           postinc2	equ	0xFDE
  8713                           postdec2	equ	0xFDD
  8714                           fsr2h	equ	0xFDA
  8715                           fsr2l	equ	0xFD9
  8716                           status	equ	0xFD8
  8717                           
  8718 ;; *************** function _init_INTERRUPT *****************
  8719 ;; Defined at:
  8720 ;;		line 15 in file "Interrupt.c"
  8721 ;; Parameters:    Size  Location     Type
  8722 ;;		None
  8723 ;; Auto vars:     Size  Location     Type
  8724 ;;		None
  8725 ;; Return value:  Size  Location     Type
  8726 ;;		None               void
  8727 ;; Registers used:
  8728 ;;		wreg, status,2
  8729 ;; Tracked objects:
  8730 ;;		On entry : 0/0
  8731 ;;		On exit  : 0/0
  8732 ;;		Unchanged: 0/0
  8733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8735 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8736 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8737 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8738 ;;Total ram usage:        0 bytes
  8739 ;; Hardware stack levels used:    1
  8740 ;; Hardware stack levels required when called:    3
  8741 ;; This function calls:
  8742 ;;		Nothing
  8743 ;; This function is called by:
  8744 ;;		_Do_Init
  8745 ;; This function uses a non-reentrant model
  8746 ;;
  8747                           
  8748                           	psect	text41
  8749  002170                     __ptext41:
  8750                           	opt stack 0
  8751  002170                     _init_INTERRUPT:
  8752                           	opt stack 26
  8753                           
  8754                           ;Interrupt.c: 17: INTCONbits.INT0IF = 0;
  8755                           
  8756                           ;incstack = 0
  8757  002170  92F2               	bcf	intcon,1,c	;volatile
  8758                           
  8759                           ;Interrupt.c: 18: INTCON2bits.INTEDG0 = 0;
  8760  002172  9CF1               	bcf	intcon2,6,c	;volatile
  8761                           
  8762                           ;Interrupt.c: 19: INTCONbits.INT0IE = 1;
  8763  002174  88F2               	bsf	intcon,4,c	;volatile
  8764                           
  8765                           ;Interrupt.c: 20: TMR1H = 0;
  8766  002176  0E00               	movlw	0
  8767  002178  6ECF               	movwf	4047,c	;volatile
  8768                           
  8769                           ;Interrupt.c: 21: TMR1L = 0;
  8770  00217A  0E00               	movlw	0
  8771  00217C  6ECE               	movwf	4046,c	;volatile
  8772                           
  8773                           ;Interrupt.c: 22: PIR1bits.TMR1IF = 0;
  8774  00217E  909E               	bcf	3998,0,c	;volatile
  8775                           
  8776                           ;Interrupt.c: 23: PIE1bits.TMR1IE = 1;
  8777  002180  809D               	bsf	3997,0,c	;volatile
  8778                           
  8779                           ;Interrupt.c: 24: INTCONbits.PEIE = 1;
  8780  002182  8CF2               	bsf	intcon,6,c	;volatile
  8781                           
  8782                           ;Interrupt.c: 25: INTCONbits.GIE = 1;
  8783  002184  8EF2               	bsf	intcon,7,c	;volatile
  8784                           
  8785                           ;Interrupt.c: 26: nec_ok = 0;
  8786  002186  0E00               	movlw	0
  8787  002188  0100               	movlb	0	; () banked
  8788  00218A  6FEF               	movwf	(_nec_ok+1)& (0+255),b
  8789  00218C  0E00               	movlw	0
  8790  00218E  6FEE               	movwf	_nec_ok& (0+255),b
  8791                           
  8792                           ;Interrupt.c: 27: Nec_code = 0x0;
  8793  002190  0E00               	movlw	0
  8794  002192  0100               	movlb	0	; () banked
  8795  002194  6FE6               	movwf	_Nec_code& (0+255),b
  8796  002196  0E00               	movlw	0
  8797  002198  6FE7               	movwf	(_Nec_code+1)& (0+255),b
  8798  00219A  0E00               	movlw	0
  8799  00219C  6FE8               	movwf	(_Nec_code+2)& (0+255),b
  8800  00219E  0E00               	movlw	0
  8801  0021A0  6FE9               	movwf	(_Nec_code+3)& (0+255),b
  8802                           
  8803                           ; BSR set to: 0
  8804  0021A2  0012               	return		;funcret
  8805  0021A4                     __end_of_init_INTERRUPT:
  8806                           	opt stack 0
  8807                           tblptru	equ	0xFF8
  8808                           tblptrh	equ	0xFF7
  8809                           tblptrl	equ	0xFF6
  8810                           tablat	equ	0xFF5
  8811                           prodh	equ	0xFF4
  8812                           prodl	equ	0xFF3
  8813                           intcon	equ	0xFF2
  8814                           intcon2	equ	0xFF1
  8815                           postinc0	equ	0xFEE
  8816                           wreg	equ	0xFE8
  8817                           postdec1	equ	0xFE5
  8818                           fsr1l	equ	0xFE1
  8819                           indf2	equ	0xFDF
  8820                           postinc2	equ	0xFDE
  8821                           postdec2	equ	0xFDD
  8822                           fsr2h	equ	0xFDA
  8823                           fsr2l	equ	0xFD9
  8824                           status	equ	0xFD8
  8825                           
  8826 ;; *************** function _I2C_Init *****************
  8827 ;; Defined at:
  8828 ;;		line 14 in file "I2C_Soft.c"
  8829 ;; Parameters:    Size  Location     Type
  8830 ;;  c               4   16[COMRAM] unsigned long 
  8831 ;; Auto vars:     Size  Location     Type
  8832 ;;		None
  8833 ;; Return value:  Size  Location     Type
  8834 ;;		None               void
  8835 ;; Registers used:
  8836 ;;		wreg, cstack
  8837 ;; Tracked objects:
  8838 ;;		On entry : 0/0
  8839 ;;		On exit  : 0/0
  8840 ;;		Unchanged: 0/0
  8841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8842 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8843 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8844 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8845 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8846 ;;Total ram usage:        4 bytes
  8847 ;; Hardware stack levels used:    1
  8848 ;; Hardware stack levels required when called:    4
  8849 ;; This function calls:
  8850 ;;		_i2cHighScl
  8851 ;;		_i2cHighSda
  8852 ;; This function is called by:
  8853 ;;		_Do_Init
  8854 ;; This function uses a non-reentrant model
  8855 ;;
  8856                           
  8857                           	psect	text42
  8858  0024CA                     __ptext42:
  8859                           	opt stack 0
  8860  0024CA                     _I2C_Init:
  8861                           	opt stack 25
  8862                           
  8863                           ;I2C_Soft.c: 16: i2cHighScl();
  8864                           
  8865                           ; BSR set to: 0
  8866                           ;incstack = 0
  8867  0024CA  EC54  F012         	call	_i2cHighScl	;wreg free
  8868                           
  8869                           ;I2C_Soft.c: 17: i2cHighSda();
  8870  0024CE  EC7C  F012         	call	_i2cHighSda	;wreg free
  8871  0024D2  0012               	return		;funcret
  8872  0024D4                     __end_of_I2C_Init:
  8873                           	opt stack 0
  8874                           tblptru	equ	0xFF8
  8875                           tblptrh	equ	0xFF7
  8876                           tblptrl	equ	0xFF6
  8877                           tablat	equ	0xFF5
  8878                           prodh	equ	0xFF4
  8879                           prodl	equ	0xFF3
  8880                           intcon	equ	0xFF2
  8881                           intcon2	equ	0xFF1
  8882                           postinc0	equ	0xFEE
  8883                           wreg	equ	0xFE8
  8884                           postdec1	equ	0xFE5
  8885                           fsr1l	equ	0xFE1
  8886                           indf2	equ	0xFDF
  8887                           postinc2	equ	0xFDE
  8888                           postdec2	equ	0xFDD
  8889                           fsr2h	equ	0xFDA
  8890                           fsr2l	equ	0xFD9
  8891                           status	equ	0xFD8
  8892                           
  8893 ;; *************** function _DS1621_Init *****************
  8894 ;; Defined at:
  8895 ;;		line 21 in file "I2C_Support.c"
  8896 ;; Parameters:    Size  Location     Type
  8897 ;;		None
  8898 ;; Auto vars:     Size  Location     Type
  8899 ;;  Device          1   21[COMRAM] unsigned char 
  8900 ;; Return value:  Size  Location     Type
  8901 ;;		None               void
  8902 ;; Registers used:
  8903 ;;		wreg, status,2, status,0, cstack
  8904 ;; Tracked objects:
  8905 ;;		On entry : 0/0
  8906 ;;		On exit  : 0/0
  8907 ;;		Unchanged: 0/0
  8908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8909 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8910 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8911 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8912 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8913 ;;Total ram usage:        1 bytes
  8914 ;; Hardware stack levels used:    1
  8915 ;; Hardware stack levels required when called:    6
  8916 ;; This function calls:
  8917 ;;		_I2C_Write_Cmd_Only
  8918 ;;		_I2C_Write_Cmd_Write_Data
  8919 ;; This function is called by:
  8920 ;;		_Do_Init
  8921 ;; This function uses a non-reentrant model
  8922 ;;
  8923                           
  8924                           	psect	text43
  8925  00234C                     __ptext43:
  8926                           	opt stack 0
  8927  00234C                     _DS1621_Init:
  8928                           	opt stack 23
  8929                           
  8930                           ;I2C_Support.c: 23: char Device = 0x48;
  8931                           
  8932                           ;incstack = 0
  8933  00234C  0E48               	movlw	72
  8934  00234E  6E16               	movwf	DS1621_Init@Device,c
  8935                           
  8936                           ;I2C_Support.c: 24: I2C_Write_Cmd_Write_Data (Device, 0xAC, 0x02);
  8937  002350  0EAC               	movlw	172
  8938  002352  6E13               	movwf	I2C_Write_Cmd_Write_Data@Cmd,c
  8939  002354  0E02               	movlw	2
  8940  002356  6E14               	movwf	I2C_Write_Cmd_Write_Data@Data_Out,c
  8941  002358  5016               	movf	DS1621_Init@Device,w,c
  8942  00235A  EC96  F011         	call	_I2C_Write_Cmd_Write_Data
  8943                           
  8944                           ;I2C_Support.c: 25: I2C_Write_Cmd_Only(Device, 0xEE);
  8945  00235E  0EEE               	movlw	238
  8946  002360  6E13               	movwf	I2C_Write_Cmd_Only@Cmd,c
  8947  002362  5016               	movf	DS1621_Init@Device,w,c
  8948  002364  ECD0  F011         	call	_I2C_Write_Cmd_Only
  8949  002368  0012               	return		;funcret
  8950  00236A                     __end_of_DS1621_Init:
  8951                           	opt stack 0
  8952                           tblptru	equ	0xFF8
  8953                           tblptrh	equ	0xFF7
  8954                           tblptrl	equ	0xFF6
  8955                           tablat	equ	0xFF5
  8956                           prodh	equ	0xFF4
  8957                           prodl	equ	0xFF3
  8958                           intcon	equ	0xFF2
  8959                           intcon2	equ	0xFF1
  8960                           postinc0	equ	0xFEE
  8961                           wreg	equ	0xFE8
  8962                           postdec1	equ	0xFE5
  8963                           fsr1l	equ	0xFE1
  8964                           indf2	equ	0xFDF
  8965                           postinc2	equ	0xFDE
  8966                           postdec2	equ	0xFDD
  8967                           fsr2h	equ	0xFDA
  8968                           fsr2l	equ	0xFD9
  8969                           status	equ	0xFD8
  8970                           
  8971 ;; *************** function _I2C_Write_Cmd_Write_Data *****************
  8972 ;; Defined at:
  8973 ;;		line 152 in file "I2C_Soft.c"
  8974 ;; Parameters:    Size  Location     Type
  8975 ;;  Device          1    wreg     unsigned char 
  8976 ;;  Cmd             1   18[COMRAM] unsigned char 
  8977 ;;  Data_Out        1   19[COMRAM] unsigned char 
  8978 ;; Auto vars:     Size  Location     Type
  8979 ;;  Device          1   20[COMRAM] unsigned char 
  8980 ;; Return value:  Size  Location     Type
  8981 ;;		None               void
  8982 ;; Registers used:
  8983 ;;		wreg, status,2, status,0, cstack
  8984 ;; Tracked objects:
  8985 ;;		On entry : 0/0
  8986 ;;		On exit  : 0/0
  8987 ;;		Unchanged: 0/0
  8988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8989 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8990 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8991 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8992 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8993 ;;Total ram usage:        3 bytes
  8994 ;; Hardware stack levels used:    1
  8995 ;; Hardware stack levels required when called:    5
  8996 ;; This function calls:
  8997 ;;		_I2C_Start
  8998 ;;		_I2C_Stop
  8999 ;;		_I2C_Write
  9000 ;; This function is called by:
  9001 ;;		_DS1621_Init
  9002 ;; This function uses a non-reentrant model
  9003 ;;
  9004                           
  9005                           	psect	text44
  9006  00232C                     __ptext44:
  9007                           	opt stack 0
  9008  00232C                     _I2C_Write_Cmd_Write_Data:
  9009                           	opt stack 23
  9010                           
  9011                           ;incstack = 0
  9012                           ;I2C_Write_Cmd_Write_Data@Device stored from wreg
  9013  00232C  6E15               	movwf	I2C_Write_Cmd_Write_Data@Device,c
  9014                           
  9015                           ;I2C_Soft.c: 154: I2C_Start();
  9016  00232E  EC23  F012         	call	_I2C_Start	;wreg free
  9017                           
  9018                           ;I2C_Soft.c: 155: I2C_Write((Device << 1) | 0);
  9019  002332  5015               	movf	I2C_Write_Cmd_Write_Data@Device,w,c
  9020  002334  2415               	addwf	I2C_Write_Cmd_Write_Data@Device,w,c
  9021  002336  EC7B  F010         	call	_I2C_Write
  9022                           
  9023                           ;I2C_Soft.c: 156: I2C_Write(Cmd);
  9024  00233A  5013               	movf	I2C_Write_Cmd_Write_Data@Cmd,w,c
  9025  00233C  EC7B  F010         	call	_I2C_Write
  9026                           
  9027                           ;I2C_Soft.c: 157: I2C_Write(Data_Out);
  9028  002340  5014               	movf	I2C_Write_Cmd_Write_Data@Data_Out,w,c
  9029  002342  EC7B  F010         	call	_I2C_Write
  9030                           
  9031                           ;I2C_Soft.c: 158: I2C_Stop();
  9032  002346  EC1A  F012         	call	_I2C_Stop	;wreg free
  9033  00234A  0012               	return		;funcret
  9034  00234C                     __end_of_I2C_Write_Cmd_Write_Data:
  9035                           	opt stack 0
  9036                           tblptru	equ	0xFF8
  9037                           tblptrh	equ	0xFF7
  9038                           tblptrl	equ	0xFF6
  9039                           tablat	equ	0xFF5
  9040                           prodh	equ	0xFF4
  9041                           prodl	equ	0xFF3
  9042                           intcon	equ	0xFF2
  9043                           intcon2	equ	0xFF1
  9044                           postinc0	equ	0xFEE
  9045                           wreg	equ	0xFE8
  9046                           postdec1	equ	0xFE5
  9047                           fsr1l	equ	0xFE1
  9048                           indf2	equ	0xFDF
  9049                           postinc2	equ	0xFDE
  9050                           postdec2	equ	0xFDD
  9051                           fsr2h	equ	0xFDA
  9052                           fsr2l	equ	0xFD9
  9053                           status	equ	0xFD8
  9054                           
  9055 ;; *************** function _I2C_Write_Cmd_Only *****************
  9056 ;; Defined at:
  9057 ;;		line 144 in file "I2C_Soft.c"
  9058 ;; Parameters:    Size  Location     Type
  9059 ;;  Device          1    wreg     unsigned char 
  9060 ;;  Cmd             1   18[COMRAM] unsigned char 
  9061 ;; Auto vars:     Size  Location     Type
  9062 ;;  Device          1   19[COMRAM] unsigned char 
  9063 ;; Return value:  Size  Location     Type
  9064 ;;		None               void
  9065 ;; Registers used:
  9066 ;;		wreg, status,2, status,0, cstack
  9067 ;; Tracked objects:
  9068 ;;		On entry : 0/0
  9069 ;;		On exit  : 0/0
  9070 ;;		Unchanged: 0/0
  9071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9072 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9073 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9074 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9075 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9076 ;;Total ram usage:        2 bytes
  9077 ;; Hardware stack levels used:    1
  9078 ;; Hardware stack levels required when called:    5
  9079 ;; This function calls:
  9080 ;;		_I2C_Start
  9081 ;;		_I2C_Stop
  9082 ;;		_I2C_Write
  9083 ;; This function is called by:
  9084 ;;		_DS1621_Init
  9085 ;; This function uses a non-reentrant model
  9086 ;;
  9087                           
  9088                           	psect	text45
  9089  0023A0                     __ptext45:
  9090                           	opt stack 0
  9091  0023A0                     _I2C_Write_Cmd_Only:
  9092                           	opt stack 23
  9093                           
  9094                           ;incstack = 0
  9095                           ;I2C_Write_Cmd_Only@Device stored from wreg
  9096  0023A0  6E14               	movwf	I2C_Write_Cmd_Only@Device,c
  9097                           
  9098                           ;I2C_Soft.c: 146: I2C_Start();
  9099  0023A2  EC23  F012         	call	_I2C_Start	;wreg free
  9100                           
  9101                           ;I2C_Soft.c: 147: I2C_Write((Device << 1) | 0);
  9102  0023A6  5014               	movf	I2C_Write_Cmd_Only@Device,w,c
  9103  0023A8  2414               	addwf	I2C_Write_Cmd_Only@Device,w,c
  9104  0023AA  EC7B  F010         	call	_I2C_Write
  9105                           
  9106                           ;I2C_Soft.c: 148: I2C_Write(Cmd);
  9107  0023AE  5013               	movf	I2C_Write_Cmd_Only@Cmd,w,c
  9108  0023B0  EC7B  F010         	call	_I2C_Write
  9109                           
  9110                           ;I2C_Soft.c: 149: I2C_Stop();
  9111  0023B4  EC1A  F012         	call	_I2C_Stop	;wreg free
  9112  0023B8  0012               	return		;funcret
  9113  0023BA                     __end_of_I2C_Write_Cmd_Only:
  9114                           	opt stack 0
  9115                           tblptru	equ	0xFF8
  9116                           tblptrh	equ	0xFF7
  9117                           tblptrl	equ	0xFF6
  9118                           tablat	equ	0xFF5
  9119                           prodh	equ	0xFF4
  9120                           prodl	equ	0xFF3
  9121                           intcon	equ	0xFF2
  9122                           intcon2	equ	0xFF1
  9123                           postinc0	equ	0xFEE
  9124                           wreg	equ	0xFE8
  9125                           postdec1	equ	0xFE5
  9126                           fsr1l	equ	0xFE1
  9127                           indf2	equ	0xFDF
  9128                           postinc2	equ	0xFDE
  9129                           postdec2	equ	0xFDD
  9130                           fsr2h	equ	0xFDA
  9131                           fsr2l	equ	0xFD9
  9132                           status	equ	0xFD8
  9133                           
  9134 ;; *************** function _Decrease_Speed *****************
  9135 ;; Defined at:
  9136 ;;		line 64 in file "Fan_Support.c"
  9137 ;; Parameters:    Size  Location     Type
  9138 ;;		None
  9139 ;; Auto vars:     Size  Location     Type
  9140 ;;		None
  9141 ;; Return value:  Size  Location     Type
  9142 ;;		None               void
  9143 ;; Registers used:
  9144 ;;		wreg, status,2, status,0, cstack
  9145 ;; Tracked objects:
  9146 ;;		On entry : 0/0
  9147 ;;		On exit  : 0/0
  9148 ;;		Unchanged: 0/0
  9149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9151 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9153 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9154 ;;Total ram usage:        0 bytes
  9155 ;; Hardware stack levels used:    1
  9156 ;; Hardware stack levels required when called:    7
  9157 ;; This function calls:
  9158 ;;		_Do_Beep
  9159 ;;		_do_update_pwm
  9160 ;; This function is called by:
  9161 ;;		_main
  9162 ;; This function uses a non-reentrant model
  9163 ;;
  9164                           
  9165                           	psect	text46
  9166  00230A                     __ptext46:
  9167                           	opt stack 0
  9168  00230A                     _Decrease_Speed:
  9169                           	opt stack 23
  9170                           
  9171                           ;Fan_Support.c: 66: if (duty_cycle == 0)
  9172                           
  9173                           ;incstack = 0
  9174  00230A  505E               	movf	_duty_cycle,w,c
  9175  00230C  A4D8               	btfss	status,2,c
  9176  00230E  D006               	goto	l6477
  9177                           
  9178                           ;Fan_Support.c: 67: {
  9179                           ;Fan_Support.c: 68: Do_Beep();
  9180  002310  ECDD  F011         	call	_Do_Beep	;wreg free
  9181                           
  9182                           ;Fan_Support.c: 69: do_update_pwm(duty_cycle);
  9183  002314  505E               	movf	_duty_cycle,w,c
  9184  002316  ECFF  F00B         	call	_do_update_pwm
  9185                           
  9186                           ;Fan_Support.c: 70: }
  9187  00231A  D007               	goto	l513
  9188  00231C                     l6477:
  9189                           
  9190                           ;Fan_Support.c: 71: else
  9191                           ;Fan_Support.c: 72: {
  9192                           ;Fan_Support.c: 73: duty_cycle = duty_cycle - 5;
  9193  00231C  505E               	movf	_duty_cycle,w,c
  9194  00231E  0FFB               	addlw	251
  9195  002320  6E5E               	movwf	_duty_cycle,c
  9196                           
  9197                           ;Fan_Support.c: 74: do_update_pwm(duty_cycle);
  9198  002322  505E               	movf	_duty_cycle,w,c
  9199  002324  ECFF  F00B         	call	_do_update_pwm
  9200  002328  D000               	goto	l513
  9201  00232A                     l513:
  9202  00232A  0012               	return		;funcret
  9203  00232C                     __end_of_Decrease_Speed:
  9204                           	opt stack 0
  9205                           tblptru	equ	0xFF8
  9206                           tblptrh	equ	0xFF7
  9207                           tblptrl	equ	0xFF6
  9208                           tablat	equ	0xFF5
  9209                           prodh	equ	0xFF4
  9210                           prodl	equ	0xFF3
  9211                           intcon	equ	0xFF2
  9212                           intcon2	equ	0xFF1
  9213                           postinc0	equ	0xFEE
  9214                           wreg	equ	0xFE8
  9215                           postdec1	equ	0xFE5
  9216                           fsr1l	equ	0xFE1
  9217                           indf2	equ	0xFDF
  9218                           postinc2	equ	0xFDE
  9219                           postdec2	equ	0xFDD
  9220                           fsr2h	equ	0xFDA
  9221                           fsr2l	equ	0xFD9
  9222                           status	equ	0xFD8
  9223                           
  9224 ;; *************** function _Do_Beep *****************
  9225 ;; Defined at:
  9226 ;;		line 9 in file "Utils.c"
  9227 ;; Parameters:    Size  Location     Type
  9228 ;;		None
  9229 ;; Auto vars:     Size  Location     Type
  9230 ;;		None
  9231 ;; Return value:  Size  Location     Type
  9232 ;;		None               void
  9233 ;; Registers used:
  9234 ;;		wreg, status,2, status,0, cstack
  9235 ;; Tracked objects:
  9236 ;;		On entry : 0/0
  9237 ;;		On exit  : 0/0
  9238 ;;		Unchanged: 0/0
  9239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9240 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9241 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9242 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9243 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9244 ;;Total ram usage:        0 bytes
  9245 ;; Hardware stack levels used:    1
  9246 ;; Hardware stack levels required when called:    6
  9247 ;; This function calls:
  9248 ;;		_Activate_Buzzer
  9249 ;;		_Deactivate_Buzzer
  9250 ;;		_Wait_One_Sec
  9251 ;;		_do_update_pwm
  9252 ;; This function is called by:
  9253 ;;		_Increase_Speed
  9254 ;;		_Decrease_Speed
  9255 ;;		_main
  9256 ;; This function uses a non-reentrant model
  9257 ;;
  9258                           
  9259                           	psect	text47
  9260  0023BA                     __ptext47:
  9261                           	opt stack 0
  9262  0023BA                     _Do_Beep:
  9263                           	opt stack 23
  9264                           
  9265                           ;Utils.c: 11: Activate_Buzzer();
  9266                           
  9267                           ;incstack = 0
  9268  0023BA  EC11  F012         	call	_Activate_Buzzer	;wreg free
  9269                           
  9270                           ;Utils.c: 12: Wait_One_Sec();
  9271  0023BE  EC51  F011         	call	_Wait_One_Sec	;wreg free
  9272                           
  9273                           ;Utils.c: 13: Deactivate_Buzzer();
  9274  0023C2  EC74  F012         	call	_Deactivate_Buzzer	;wreg free
  9275                           
  9276                           ;Utils.c: 14: Wait_One_Sec();
  9277  0023C6  EC51  F011         	call	_Wait_One_Sec	;wreg free
  9278                           
  9279                           ;Utils.c: 15: do_update_pwm(duty_cycle);
  9280  0023CA  505E               	movf	_duty_cycle,w,c
  9281  0023CC  ECFF  F00B         	call	_do_update_pwm
  9282  0023D0  0012               	return		;funcret
  9283  0023D2                     __end_of_Do_Beep:
  9284                           	opt stack 0
  9285                           tblptru	equ	0xFF8
  9286                           tblptrh	equ	0xFF7
  9287                           tblptrl	equ	0xFF6
  9288                           tablat	equ	0xFF5
  9289                           prodh	equ	0xFF4
  9290                           prodl	equ	0xFF3
  9291                           intcon	equ	0xFF2
  9292                           intcon2	equ	0xFF1
  9293                           postinc0	equ	0xFEE
  9294                           wreg	equ	0xFE8
  9295                           postdec1	equ	0xFE5
  9296                           fsr1l	equ	0xFE1
  9297                           indf2	equ	0xFDF
  9298                           postinc2	equ	0xFDE
  9299                           postdec2	equ	0xFDD
  9300                           fsr2h	equ	0xFDA
  9301                           fsr2l	equ	0xFD9
  9302                           status	equ	0xFD8
  9303                           
  9304 ;; *************** function _do_update_pwm *****************
  9305 ;; Defined at:
  9306 ;;		line 78 in file "Fan_Support.c"
  9307 ;; Parameters:    Size  Location     Type
  9308 ;;  duty_cycle      1    wreg     unsigned char 
  9309 ;; Auto vars:     Size  Location     Type
  9310 ;;  duty_cycle      1   64[COMRAM] unsigned char 
  9311 ;;  dc_f            3   61[COMRAM] float 
  9312 ;;  dc_I            2   65[COMRAM] int 
  9313 ;; Return value:  Size  Location     Type
  9314 ;;		None               void
  9315 ;; Registers used:
  9316 ;;		wreg, status,2, status,0, cstack
  9317 ;; Tracked objects:
  9318 ;;		On entry : 0/0
  9319 ;;		On exit  : 0/0
  9320 ;;		Unchanged: 0/0
  9321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9322 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9323 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9324 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9325 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9326 ;;Total ram usage:        9 bytes
  9327 ;; Hardware stack levels used:    1
  9328 ;; Hardware stack levels required when called:    5
  9329 ;; This function calls:
  9330 ;;		___ftdiv
  9331 ;;		___ftmul
  9332 ;;		___fttol
  9333 ;;		___lbtoft
  9334 ;; This function is called by:
  9335 ;;		_Turn_On_Fan
  9336 ;;		_Increase_Speed
  9337 ;;		_Decrease_Speed
  9338 ;;		_Do_Beep
  9339 ;;		_main
  9340 ;; This function uses a non-reentrant model
  9341 ;;
  9342                           
  9343                           	psect	text48
  9344  0017FE                     __ptext48:
  9345                           	opt stack 0
  9346  0017FE                     _do_update_pwm:
  9347                           	opt stack 25
  9348                           
  9349                           ;incstack = 0
  9350                           ;do_update_pwm@duty_cycle stored from wreg
  9351  0017FE  6E41               	movwf	do_update_pwm@duty_cycle,c
  9352                           
  9353                           ;Fan_Support.c: 80: float dc_f;
  9354                           ;Fan_Support.c: 81: int dc_I;
  9355                           ;Fan_Support.c: 82: PR2 = 0b00000100 ;
  9356  001800  0E04               	movlw	4
  9357  001802  6ECB               	movwf	4043,c	;volatile
  9358                           
  9359                           ;Fan_Support.c: 83: T2CON = 0b00000111 ;
  9360  001804  0E07               	movlw	7
  9361  001806  6ECA               	movwf	4042,c	;volatile
  9362                           
  9363                           ;Fan_Support.c: 84: dc_f = ( 4.0 * duty_cycle / 20.0) ;
  9364  001808  0E00               	movlw	0
  9365  00180A  6E20               	movwf	___ftmul@f2,c
  9366  00180C  0E80               	movlw	128
  9367  00180E  6E21               	movwf	___ftmul@f2+1,c
  9368  001810  0E40               	movlw	64
  9369  001812  6E22               	movwf	___ftmul@f2+2,c
  9370  001814  5041               	movf	do_update_pwm@duty_cycle,w,c
  9371  001816  EC2C  F011         	call	___lbtoft
  9372  00181A  C019  F01D         	movff	?___lbtoft,___ftmul@f1
  9373  00181E  C01A  F01E         	movff	?___lbtoft+1,___ftmul@f1+1
  9374  001822  C01B  F01F         	movff	?___lbtoft+2,___ftmul@f1+2
  9375  001826  EC55  F009         	call	___ftmul	;wreg free
  9376  00182A  C01D  F02C         	movff	?___ftmul,___ftdiv@f1
  9377  00182E  C01E  F02D         	movff	?___ftmul+1,___ftdiv@f1+1
  9378  001832  C01F  F02E         	movff	?___ftmul+2,___ftdiv@f1+2
  9379  001836  0E00               	movlw	0
  9380  001838  6E2F               	movwf	___ftdiv@f2,c
  9381  00183A  0EA0               	movlw	160
  9382  00183C  6E30               	movwf	___ftdiv@f2+1,c
  9383  00183E  0E41               	movlw	65
  9384  001840  6E31               	movwf	___ftdiv@f2+2,c
  9385  001842  ECBD  F00A         	call	___ftdiv	;wreg free
  9386  001846  C02C  F03E         	movff	?___ftdiv,do_update_pwm@dc_f
  9387  00184A  C02D  F03F         	movff	?___ftdiv+1,do_update_pwm@dc_f+1
  9388  00184E  C02E  F040         	movff	?___ftdiv+2,do_update_pwm@dc_f+2
  9389                           
  9390                           ;Fan_Support.c: 86: dc_I = (int) dc_f;
  9391  001852  C03E  F011         	movff	do_update_pwm@dc_f,___fttol@f1
  9392  001856  C03F  F012         	movff	do_update_pwm@dc_f+1,___fttol@f1+1
  9393  00185A  C040  F013         	movff	do_update_pwm@dc_f+2,___fttol@f1+2
  9394  00185E  EC4A  F00A         	call	___fttol	;wreg free
  9395  001862  C011  F042         	movff	?___fttol,do_update_pwm@dc_I
  9396  001866  C012  F043         	movff	?___fttol+1,do_update_pwm@dc_I+1
  9397                           
  9398                           ;Fan_Support.c: 87: if (dc_I > duty_cycle) dc_I++;
  9399  00186A  5041               	movf	do_update_pwm@duty_cycle,w,c
  9400  00186C  6E3B               	movwf	??_do_update_pwm& (0+255),c
  9401  00186E  6A3C               	clrf	(??_do_update_pwm+1)& (0+255),c
  9402  001870  5042               	movf	do_update_pwm@dc_I,w,c
  9403  001872  5C3B               	subwf	??_do_update_pwm,w,c
  9404  001874  503C               	movf	??_do_update_pwm+1,w,c
  9405  001876  0A80               	xorlw	128
  9406  001878  6E3D               	movwf	(??_do_update_pwm+2)& (0+255),c
  9407  00187A  5043               	movf	do_update_pwm@dc_I+1,w,c
  9408  00187C  0A80               	xorlw	128
  9409  00187E  583D               	subwfb	(??_do_update_pwm+2)& (0+255),w,c
  9410  001880  B0D8               	btfsc	status,0,c
  9411  001882  D003               	goto	l5775
  9412  001884  4A42               	infsnz	do_update_pwm@dc_I,f,c
  9413  001886  2A43               	incf	do_update_pwm@dc_I+1,f,c
  9414  001888  D000               	goto	l5775
  9415  00188A                     l5775:
  9416                           
  9417                           ;Fan_Support.c: 88: CCP1CON = ((dc_I & 0x03) << 4) | 0b00001100;
  9418  00188A  C042  F03B         	movff	do_update_pwm@dc_I,??_do_update_pwm
  9419  00188E  0E03               	movlw	3
  9420  001890  163B               	andwf	??_do_update_pwm,f,c
  9421  001892  383B               	swapf	??_do_update_pwm,w,c
  9422  001894  0BF0               	andlw	240
  9423  001896  090C               	iorlw	12
  9424  001898  6EBD               	movwf	4029,c	;volatile
  9425                           
  9426                           ;Fan_Support.c: 89: CCPR1L = (dc_I) >> 2;
  9427  00189A  C042  F03B         	movff	do_update_pwm@dc_I,??_do_update_pwm
  9428  00189E  C043  F03C         	movff	do_update_pwm@dc_I+1,??_do_update_pwm+1
  9429  0018A2  343C               	rlcf	??_do_update_pwm+1,w,c
  9430  0018A4  323C               	rrcf	??_do_update_pwm+1,f,c
  9431  0018A6  323B               	rrcf	??_do_update_pwm,f,c
  9432  0018A8  343C               	rlcf	??_do_update_pwm+1,w,c
  9433  0018AA  323C               	rrcf	??_do_update_pwm+1,f,c
  9434  0018AC  323B               	rrcf	??_do_update_pwm,f,c
  9435  0018AE  503B               	movf	??_do_update_pwm,w,c
  9436  0018B0  6EBE               	movwf	4030,c	;volatile
  9437  0018B2  0012               	return		;funcret
  9438  0018B4                     __end_of_do_update_pwm:
  9439                           	opt stack 0
  9440                           tblptru	equ	0xFF8
  9441                           tblptrh	equ	0xFF7
  9442                           tblptrl	equ	0xFF6
  9443                           tablat	equ	0xFF5
  9444                           prodh	equ	0xFF4
  9445                           prodl	equ	0xFF3
  9446                           intcon	equ	0xFF2
  9447                           intcon2	equ	0xFF1
  9448                           postinc0	equ	0xFEE
  9449                           wreg	equ	0xFE8
  9450                           postdec1	equ	0xFE5
  9451                           fsr1l	equ	0xFE1
  9452                           indf2	equ	0xFDF
  9453                           postinc2	equ	0xFDE
  9454                           postdec2	equ	0xFDD
  9455                           fsr2h	equ	0xFDA
  9456                           fsr2l	equ	0xFD9
  9457                           status	equ	0xFD8
  9458                           
  9459 ;; *************** function ___lbtoft *****************
  9460 ;; Defined at:
  9461 ;;		line 27 in file "E:\XC8\sources\common\lbtoft.c"
  9462 ;; Parameters:    Size  Location     Type
  9463 ;;  c               1    wreg     unsigned char 
  9464 ;; Auto vars:     Size  Location     Type
  9465 ;;  c               1   27[COMRAM] unsigned char 
  9466 ;; Return value:  Size  Location     Type
  9467 ;;                  3   24[COMRAM] float 
  9468 ;; Registers used:
  9469 ;;		wreg, status,2, status,0, cstack
  9470 ;; Tracked objects:
  9471 ;;		On entry : 0/0
  9472 ;;		On exit  : 0/0
  9473 ;;		Unchanged: 0/0
  9474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9475 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9476 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9477 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9478 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9479 ;;Total ram usage:        4 bytes
  9480 ;; Hardware stack levels used:    1
  9481 ;; Hardware stack levels required when called:    4
  9482 ;; This function calls:
  9483 ;;		___ftpack
  9484 ;; This function is called by:
  9485 ;;		_do_update_pwm
  9486 ;; This function uses a non-reentrant model
  9487 ;;
  9488                           
  9489                           	psect	text49
  9490  002258                     __ptext49:
  9491                           	opt stack 0
  9492  002258                     ___lbtoft:
  9493                           	opt stack 25
  9494                           
  9495                           ;incstack = 0
  9496                           ;___lbtoft@c stored from wreg
  9497  002258  6E1C               	movwf	___lbtoft@c,c
  9498  00225A  501C               	movf	___lbtoft@c,w,c
  9499  00225C  6E11               	movwf	___ftpack@arg,c
  9500  00225E  6A12               	clrf	___ftpack@arg+1,c
  9501  002260  6A13               	clrf	___ftpack@arg+2,c
  9502  002262  0E8E               	movlw	142
  9503  002264  6E14               	movwf	___ftpack@exp,c
  9504  002266  0E00               	movlw	0
  9505  002268  6E15               	movwf	___ftpack@sign,c
  9506  00226A  EC9C  F00B         	call	___ftpack	;wreg free
  9507  00226E  C011  F019         	movff	?___ftpack,?___lbtoft
  9508  002272  C012  F01A         	movff	?___ftpack+1,?___lbtoft+1
  9509  002276  C013  F01B         	movff	?___ftpack+2,?___lbtoft+2
  9510  00227A  D000               	goto	l1250
  9511  00227C                     l1250:
  9512  00227C  0012               	return		;funcret
  9513  00227E                     __end_of___lbtoft:
  9514                           	opt stack 0
  9515                           tblptru	equ	0xFF8
  9516                           tblptrh	equ	0xFF7
  9517                           tblptrl	equ	0xFF6
  9518                           tablat	equ	0xFF5
  9519                           prodh	equ	0xFF4
  9520                           prodl	equ	0xFF3
  9521                           intcon	equ	0xFF2
  9522                           intcon2	equ	0xFF1
  9523                           postinc0	equ	0xFEE
  9524                           wreg	equ	0xFE8
  9525                           postdec1	equ	0xFE5
  9526                           fsr1l	equ	0xFE1
  9527                           indf2	equ	0xFDF
  9528                           postinc2	equ	0xFDE
  9529                           postdec2	equ	0xFDD
  9530                           fsr2h	equ	0xFDA
  9531                           fsr2l	equ	0xFD9
  9532                           status	equ	0xFD8
  9533                           
  9534 ;; *************** function ___fttol *****************
  9535 ;; Defined at:
  9536 ;;		line 44 in file "E:\XC8\sources\common\fttol.c"
  9537 ;; Parameters:    Size  Location     Type
  9538 ;;  f1              3   16[COMRAM] float 
  9539 ;; Auto vars:     Size  Location     Type
  9540 ;;  lval            4   26[COMRAM] unsigned long 
  9541 ;;  exp1            1   30[COMRAM] unsigned char 
  9542 ;;  sign1           1   25[COMRAM] unsigned char 
  9543 ;; Return value:  Size  Location     Type
  9544 ;;                  4   16[COMRAM] long 
  9545 ;; Registers used:
  9546 ;;		wreg, status,2, status,0
  9547 ;; Tracked objects:
  9548 ;;		On entry : 0/0
  9549 ;;		On exit  : 0/0
  9550 ;;		Unchanged: 0/0
  9551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9552 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9553 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9554 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9555 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9556 ;;Total ram usage:       15 bytes
  9557 ;; Hardware stack levels used:    1
  9558 ;; Hardware stack levels required when called:    3
  9559 ;; This function calls:
  9560 ;;		Nothing
  9561 ;; This function is called by:
  9562 ;;		_do_update_pwm
  9563 ;; This function uses a non-reentrant model
  9564 ;;
  9565                           
  9566                           	psect	text50
  9567  001494                     __ptext50:
  9568                           	opt stack 0
  9569  001494                     ___fttol:
  9570                           	opt stack 26
  9571                           
  9572                           ;incstack = 0
  9573  001494  C013  F015         	movff	___fttol@f1+2,??___fttol
  9574  001498  6A16               	clrf	(??___fttol+1)& (0+255),c
  9575  00149A  6A17               	clrf	(??___fttol+2)& (0+255),c
  9576  00149C  3412               	rlcf	___fttol@f1+1,w,c
  9577  00149E  3615               	rlcf	??___fttol& (0+255),f,c
  9578  0014A0  E301               	bnc	u4121
  9579  0014A2  8016               	bsf	(??___fttol+1)& (0+255),0,c
  9580  0014A4                     u4121:
  9581  0014A4  5015               	movf	??___fttol,w,c
  9582  0014A6  6E1F               	movwf	___fttol@exp1,c
  9583  0014A8  501F               	movf	___fttol@exp1,w,c
  9584  0014AA  A4D8               	btfss	status,2,c
  9585  0014AC  D002               	goto	l5497
  9586  0014AE  D039               	goto	l5521
  9587  0014B0  D063               	goto	l1209
  9588  0014B2                     l5497:
  9589  0014B2  0E17               	movlw	23
  9590  0014B4  6E15               	movwf	??___fttol& (0+255),c
  9591  0014B6  C011  F016         	movff	___fttol@f1,??___fttol+1
  9592  0014BA  C012  F017         	movff	___fttol@f1+1,??___fttol+2
  9593  0014BE  C013  F018         	movff	___fttol@f1+2,??___fttol+3
  9594  0014C2  2815               	incf	??___fttol,w,c
  9595  0014C4  6E19               	movwf	(??___fttol+4)& (0+255),c
  9596  0014C6  D004               	goto	u4140
  9597  0014C8                     u4145:
  9598  0014C8  90D8               	bcf	status,0,c
  9599  0014CA  3218               	rrcf	??___fttol+3,f,c
  9600  0014CC  3217               	rrcf	??___fttol+2,f,c
  9601  0014CE  3216               	rrcf	??___fttol+1,f,c
  9602  0014D0                     u4140:
  9603  0014D0  2E19               	decfsz	(??___fttol+4)& (0+255),f,c
  9604  0014D2  D7FA               	goto	u4145
  9605  0014D4  5016               	movf	??___fttol+1,w,c
  9606  0014D6  6E1A               	movwf	___fttol@sign1,c
  9607  0014D8  8E12               	bsf	___fttol@f1+1,7,c
  9608  0014DA  0EFF               	movlw	255
  9609  0014DC  1611               	andwf	___fttol@f1,f,c
  9610  0014DE  0EFF               	movlw	255
  9611  0014E0  1612               	andwf	___fttol@f1+1,f,c
  9612  0014E2  0E00               	movlw	0
  9613  0014E4  1613               	andwf	___fttol@f1+2,f,c
  9614  0014E6  5011               	movf	___fttol@f1,w,c
  9615  0014E8  6E1B               	movwf	___fttol@lval,c
  9616  0014EA  5012               	movf	___fttol@f1+1,w,c
  9617  0014EC  6E1C               	movwf	___fttol@lval+1,c
  9618  0014EE  5013               	movf	___fttol@f1+2,w,c
  9619  0014F0  6E1D               	movwf	___fttol@lval+2,c
  9620  0014F2  6A1E               	clrf	___fttol@lval+3,c
  9621  0014F4  0E8E               	movlw	142
  9622  0014F6  5E1F               	subwf	___fttol@exp1,f,c
  9623  0014F8  AE1F               	btfss	___fttol@exp1,7,c
  9624  0014FA  D010               	goto	l5519
  9625  0014FC  501F               	movf	___fttol@exp1,w,c
  9626  0014FE  0A80               	xorlw	128
  9627  001500  0F8F               	addlw	143
  9628  001502  B0D8               	btfsc	status,0,c
  9629  001504  D003               	goto	l5515
  9630  001506  D00D               	goto	l5521
  9631  001508  D037               	goto	l1209
  9632  00150A  D000               	goto	l5515
  9633  00150C                     l5515:
  9634  00150C  90D8               	bcf	status,0,c
  9635  00150E  321E               	rrcf	___fttol@lval+3,f,c
  9636  001510  321D               	rrcf	___fttol@lval+2,f,c
  9637  001512  321C               	rrcf	___fttol@lval+1,f,c
  9638  001514  321B               	rrcf	___fttol@lval,f,c
  9639  001516  3E1F               	incfsz	___fttol@exp1,f,c
  9640  001518  D7F9               	goto	l5515
  9641  00151A  D019               	goto	l5529
  9642  00151C                     l5519:
  9643  00151C  0E17               	movlw	23
  9644  00151E  641F               	cpfsgt	___fttol@exp1,c
  9645  001520  D011               	goto	l5527
  9646  001522                     l5521:
  9647  001522  0E00               	movlw	0
  9648  001524  6E11               	movwf	?___fttol,c
  9649  001526  0E00               	movlw	0
  9650  001528  6E12               	movwf	?___fttol+1,c
  9651  00152A  0E00               	movlw	0
  9652  00152C  6E13               	movwf	?___fttol+2,c
  9653  00152E  0E00               	movlw	0
  9654  001530  6E14               	movwf	?___fttol+3,c
  9655  001532  D022               	goto	l1209
  9656  001534  D007               	goto	l5527
  9657  001536                     l5525:
  9658  001536  90D8               	bcf	status,0,c
  9659  001538  361B               	rlcf	___fttol@lval,f,c
  9660  00153A  361C               	rlcf	___fttol@lval+1,f,c
  9661  00153C  361D               	rlcf	___fttol@lval+2,f,c
  9662  00153E  361E               	rlcf	___fttol@lval+3,f,c
  9663  001540  061F               	decf	___fttol@exp1,f,c
  9664  001542  D000               	goto	l5527
  9665  001544                     l5527:
  9666  001544  501F               	movf	___fttol@exp1,w,c
  9667  001546  B4D8               	btfsc	status,2,c
  9668  001548  D002               	goto	l5529
  9669  00154A  D7F5               	goto	l5525
  9670  00154C  D000               	goto	l5529
  9671  00154E                     l5529:
  9672  00154E  501A               	movf	___fttol@sign1,w,c
  9673  001550  B4D8               	btfsc	status,2,c
  9674  001552  D009               	goto	l5533
  9675  001554  1E1E               	comf	___fttol@lval+3,f,c
  9676  001556  1E1D               	comf	___fttol@lval+2,f,c
  9677  001558  1E1C               	comf	___fttol@lval+1,f,c
  9678  00155A  6C1B               	negf	___fttol@lval,c
  9679  00155C  0E00               	movlw	0
  9680  00155E  221C               	addwfc	___fttol@lval+1,f,c
  9681  001560  221D               	addwfc	___fttol@lval+2,f,c
  9682  001562  221E               	addwfc	___fttol@lval+3,f,c
  9683  001564  D000               	goto	l5533
  9684  001566                     l5533:
  9685  001566  C01B  F011         	movff	___fttol@lval,?___fttol
  9686  00156A  C01C  F012         	movff	___fttol@lval+1,?___fttol+1
  9687  00156E  C01D  F013         	movff	___fttol@lval+2,?___fttol+2
  9688  001572  C01E  F014         	movff	___fttol@lval+3,?___fttol+3
  9689  001576  D000               	goto	l1209
  9690  001578                     l1209:
  9691  001578  0012               	return		;funcret
  9692  00157A                     __end_of___fttol:
  9693                           	opt stack 0
  9694                           tblptru	equ	0xFF8
  9695                           tblptrh	equ	0xFF7
  9696                           tblptrl	equ	0xFF6
  9697                           tablat	equ	0xFF5
  9698                           prodh	equ	0xFF4
  9699                           prodl	equ	0xFF3
  9700                           intcon	equ	0xFF2
  9701                           intcon2	equ	0xFF1
  9702                           postinc0	equ	0xFEE
  9703                           wreg	equ	0xFE8
  9704                           postdec1	equ	0xFE5
  9705                           fsr1l	equ	0xFE1
  9706                           indf2	equ	0xFDF
  9707                           postinc2	equ	0xFDE
  9708                           postdec2	equ	0xFDD
  9709                           fsr2h	equ	0xFDA
  9710                           fsr2l	equ	0xFD9
  9711                           status	equ	0xFD8
  9712                           
  9713 ;; *************** function ___ftmul *****************
  9714 ;; Defined at:
  9715 ;;		line 62 in file "E:\XC8\sources\common\ftmul.c"
  9716 ;; Parameters:    Size  Location     Type
  9717 ;;  f1              3   28[COMRAM] float 
  9718 ;;  f2              3   31[COMRAM] float 
  9719 ;; Auto vars:     Size  Location     Type
  9720 ;;  f3_as_produc    3   38[COMRAM] unsigned um
  9721 ;;  sign            1   42[COMRAM] unsigned char 
  9722 ;;  cntr            1   41[COMRAM] unsigned char 
  9723 ;;  exp             1   37[COMRAM] unsigned char 
  9724 ;; Return value:  Size  Location     Type
  9725 ;;                  3   28[COMRAM] float 
  9726 ;; Registers used:
  9727 ;;		wreg, status,2, status,0, cstack
  9728 ;; Tracked objects:
  9729 ;;		On entry : 0/0
  9730 ;;		On exit  : 0/0
  9731 ;;		Unchanged: 0/0
  9732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9733 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9734 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9735 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9736 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9737 ;;Total ram usage:       15 bytes
  9738 ;; Hardware stack levels used:    1
  9739 ;; Hardware stack levels required when called:    4
  9740 ;; This function calls:
  9741 ;;		___ftpack
  9742 ;; This function is called by:
  9743 ;;		_do_update_pwm
  9744 ;; This function uses a non-reentrant model
  9745 ;;
  9746                           
  9747                           	psect	text51
  9748  0012AA                     __ptext51:
  9749                           	opt stack 0
  9750  0012AA                     ___ftmul:
  9751                           	opt stack 25
  9752                           
  9753                           ;incstack = 0
  9754  0012AA  C01F  F023         	movff	___ftmul@f1+2,??___ftmul
  9755  0012AE  6A24               	clrf	(??___ftmul+1)& (0+255),c
  9756  0012B0  6A25               	clrf	(??___ftmul+2)& (0+255),c
  9757  0012B2  341E               	rlcf	___ftmul@f1+1,w,c
  9758  0012B4  3623               	rlcf	??___ftmul& (0+255),f,c
  9759  0012B6  E301               	bnc	u4061
  9760  0012B8  8024               	bsf	(??___ftmul+1)& (0+255),0,c
  9761  0012BA                     u4061:
  9762  0012BA  5023               	movf	??___ftmul,w,c
  9763  0012BC  6E26               	movwf	___ftmul@exp,c
  9764  0012BE  5026               	movf	___ftmul@exp,w,c
  9765  0012C0  A4D8               	btfss	status,2,c
  9766  0012C2  D002               	goto	l5449
  9767  0012C4  D00E               	goto	l5451
  9768  0012C6  D06C               	goto	l1188
  9769  0012C8                     l5449:
  9770  0012C8  C022  F023         	movff	___ftmul@f2+2,??___ftmul
  9771  0012CC  6A24               	clrf	(??___ftmul+1)& (0+255),c
  9772  0012CE  6A25               	clrf	(??___ftmul+2)& (0+255),c
  9773  0012D0  3421               	rlcf	___ftmul@f2+1,w,c
  9774  0012D2  3623               	rlcf	??___ftmul& (0+255),f,c
  9775  0012D4  E301               	bnc	u4081
  9776  0012D6  8024               	bsf	(??___ftmul+1)& (0+255),0,c
  9777  0012D8                     u4081:
  9778  0012D8  5023               	movf	??___ftmul,w,c
  9779  0012DA  6E2B               	movwf	___ftmul@sign,c
  9780  0012DC  502B               	movf	___ftmul@sign,w,c
  9781  0012DE  A4D8               	btfss	status,2,c
  9782  0012E0  D007               	goto	l5455
  9783  0012E2                     l5451:
  9784  0012E2  0E00               	movlw	0
  9785  0012E4  6E1D               	movwf	?___ftmul,c
  9786  0012E6  0E00               	movlw	0
  9787  0012E8  6E1E               	movwf	?___ftmul+1,c
  9788  0012EA  0E00               	movlw	0
  9789  0012EC  6E1F               	movwf	?___ftmul+2,c
  9790  0012EE  D058               	goto	l1188
  9791  0012F0                     l5455:
  9792  0012F0  502B               	movf	___ftmul@sign,w,c
  9793  0012F2  0F7B               	addlw	123
  9794  0012F4  2626               	addwf	___ftmul@exp,f,c
  9795  0012F6  C01F  F02B         	movff	___ftmul@f1+2,___ftmul@sign
  9796  0012FA  5022               	movf	___ftmul@f2+2,w,c
  9797  0012FC  1A2B               	xorwf	___ftmul@sign,f,c
  9798  0012FE  0E80               	movlw	128
  9799  001300  162B               	andwf	___ftmul@sign,f,c
  9800  001302  8E1E               	bsf	___ftmul@f1+1,7,c
  9801  001304  8E21               	bsf	___ftmul@f2+1,7,c
  9802  001306  0EFF               	movlw	255
  9803  001308  1620               	andwf	___ftmul@f2,f,c
  9804  00130A  0EFF               	movlw	255
  9805  00130C  1621               	andwf	___ftmul@f2+1,f,c
  9806  00130E  0E00               	movlw	0
  9807  001310  1622               	andwf	___ftmul@f2+2,f,c
  9808  001312  0E00               	movlw	0
  9809  001314  6E27               	movwf	___ftmul@f3_as_product,c
  9810  001316  0E00               	movlw	0
  9811  001318  6E28               	movwf	___ftmul@f3_as_product+1,c
  9812  00131A  0E00               	movlw	0
  9813  00131C  6E29               	movwf	___ftmul@f3_as_product+2,c
  9814  00131E  0E07               	movlw	7
  9815  001320  6E2A               	movwf	___ftmul@cntr,c
  9816  001322  D000               	goto	l5469
  9817  001324                     l5469:
  9818  001324  A01D               	btfss	___ftmul@f1,0,c
  9819  001326  D007               	goto	l5473
  9820  001328  5020               	movf	___ftmul@f2,w,c
  9821  00132A  2627               	addwf	___ftmul@f3_as_product,f,c
  9822  00132C  5021               	movf	___ftmul@f2+1,w,c
  9823  00132E  2228               	addwfc	___ftmul@f3_as_product+1,f,c
  9824  001330  5022               	movf	___ftmul@f2+2,w,c
  9825  001332  2229               	addwfc	___ftmul@f3_as_product+2,f,c
  9826  001334  D000               	goto	l5473
  9827  001336                     l5473:
  9828  001336  90D8               	bcf	status,0,c
  9829  001338  321F               	rrcf	___ftmul@f1+2,f,c
  9830  00133A  321E               	rrcf	___ftmul@f1+1,f,c
  9831  00133C  321D               	rrcf	___ftmul@f1,f,c
  9832  00133E  90D8               	bcf	status,0,c
  9833  001340  3620               	rlcf	___ftmul@f2,f,c
  9834  001342  3621               	rlcf	___ftmul@f2+1,f,c
  9835  001344  3622               	rlcf	___ftmul@f2+2,f,c
  9836  001346  2E2A               	decfsz	___ftmul@cntr,f,c
  9837  001348  D7ED               	goto	l5469
  9838  00134A  D000               	goto	l5477
  9839  00134C                     l5477:
  9840  00134C  0E09               	movlw	9
  9841  00134E  6E2A               	movwf	___ftmul@cntr,c
  9842  001350  D000               	goto	l5479
  9843  001352                     l5479:
  9844  001352  A01D               	btfss	___ftmul@f1,0,c
  9845  001354  D007               	goto	l5483
  9846  001356  5020               	movf	___ftmul@f2,w,c
  9847  001358  2627               	addwf	___ftmul@f3_as_product,f,c
  9848  00135A  5021               	movf	___ftmul@f2+1,w,c
  9849  00135C  2228               	addwfc	___ftmul@f3_as_product+1,f,c
  9850  00135E  5022               	movf	___ftmul@f2+2,w,c
  9851  001360  2229               	addwfc	___ftmul@f3_as_product+2,f,c
  9852  001362  D000               	goto	l5483
  9853  001364                     l5483:
  9854  001364  90D8               	bcf	status,0,c
  9855  001366  321F               	rrcf	___ftmul@f1+2,f,c
  9856  001368  321E               	rrcf	___ftmul@f1+1,f,c
  9857  00136A  321D               	rrcf	___ftmul@f1,f,c
  9858  00136C  90D8               	bcf	status,0,c
  9859  00136E  3229               	rrcf	___ftmul@f3_as_product+2,f,c
  9860  001370  3228               	rrcf	___ftmul@f3_as_product+1,f,c
  9861  001372  3227               	rrcf	___ftmul@f3_as_product,f,c
  9862  001374  2E2A               	decfsz	___ftmul@cntr,f,c
  9863  001376  D7ED               	goto	l5479
  9864  001378  D000               	goto	l5487
  9865  00137A                     l5487:
  9866  00137A  C027  F011         	movff	___ftmul@f3_as_product,___ftpack@arg
  9867  00137E  C028  F012         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  9868  001382  C029  F013         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  9869  001386  C026  F014         	movff	___ftmul@exp,___ftpack@exp
  9870  00138A  C02B  F015         	movff	___ftmul@sign,___ftpack@sign
  9871  00138E  EC9C  F00B         	call	___ftpack	;wreg free
  9872  001392  C011  F01D         	movff	?___ftpack,?___ftmul
  9873  001396  C012  F01E         	movff	?___ftpack+1,?___ftmul+1
  9874  00139A  C013  F01F         	movff	?___ftpack+2,?___ftmul+2
  9875  00139E  D000               	goto	l1188
  9876  0013A0                     l1188:
  9877  0013A0  0012               	return		;funcret
  9878  0013A2                     __end_of___ftmul:
  9879                           	opt stack 0
  9880                           tblptru	equ	0xFF8
  9881                           tblptrh	equ	0xFF7
  9882                           tblptrl	equ	0xFF6
  9883                           tablat	equ	0xFF5
  9884                           prodh	equ	0xFF4
  9885                           prodl	equ	0xFF3
  9886                           intcon	equ	0xFF2
  9887                           intcon2	equ	0xFF1
  9888                           postinc0	equ	0xFEE
  9889                           wreg	equ	0xFE8
  9890                           postdec1	equ	0xFE5
  9891                           fsr1l	equ	0xFE1
  9892                           indf2	equ	0xFDF
  9893                           postinc2	equ	0xFDE
  9894                           postdec2	equ	0xFDD
  9895                           fsr2h	equ	0xFDA
  9896                           fsr2l	equ	0xFD9
  9897                           status	equ	0xFD8
  9898                           
  9899 ;; *************** function ___ftdiv *****************
  9900 ;; Defined at:
  9901 ;;		line 54 in file "E:\XC8\sources\common\ftdiv.c"
  9902 ;; Parameters:    Size  Location     Type
  9903 ;;  f1              3   43[COMRAM] float 
  9904 ;;  f2              3   46[COMRAM] float 
  9905 ;; Auto vars:     Size  Location     Type
  9906 ;;  f3              3   53[COMRAM] float 
  9907 ;;  sign            1   57[COMRAM] unsigned char 
  9908 ;;  exp             1   56[COMRAM] unsigned char 
  9909 ;;  cntr            1   52[COMRAM] unsigned char 
  9910 ;; Return value:  Size  Location     Type
  9911 ;;                  3   43[COMRAM] float 
  9912 ;; Registers used:
  9913 ;;		wreg, status,2, status,0, cstack
  9914 ;; Tracked objects:
  9915 ;;		On entry : 0/0
  9916 ;;		On exit  : 0/0
  9917 ;;		Unchanged: 0/0
  9918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9919 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9920 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9921 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9922 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9923 ;;Total ram usage:       15 bytes
  9924 ;; Hardware stack levels used:    1
  9925 ;; Hardware stack levels required when called:    4
  9926 ;; This function calls:
  9927 ;;		___ftpack
  9928 ;; This function is called by:
  9929 ;;		_do_update_pwm
  9930 ;; This function uses a non-reentrant model
  9931 ;;
  9932                           
  9933                           	psect	text52
  9934  00157A                     __ptext52:
  9935                           	opt stack 0
  9936  00157A                     ___ftdiv:
  9937                           	opt stack 25
  9938                           
  9939                           ;incstack = 0
  9940  00157A  C02E  F032         	movff	___ftdiv@f1+2,??___ftdiv
  9941  00157E  6A33               	clrf	(??___ftdiv+1)& (0+255),c
  9942  001580  6A34               	clrf	(??___ftdiv+2)& (0+255),c
  9943  001582  342D               	rlcf	___ftdiv@f1+1,w,c
  9944  001584  3632               	rlcf	??___ftdiv& (0+255),f,c
  9945  001586  E301               	bnc	u4011
  9946  001588  8033               	bsf	(??___ftdiv+1)& (0+255),0,c
  9947  00158A                     u4011:
  9948  00158A  5032               	movf	??___ftdiv,w,c
  9949  00158C  6E39               	movwf	___ftdiv@exp,c
  9950  00158E  5039               	movf	___ftdiv@exp,w,c
  9951  001590  A4D8               	btfss	status,2,c
  9952  001592  D002               	goto	l5403
  9953  001594  D00E               	goto	l5405
  9954  001596  D061               	goto	l1173
  9955  001598                     l5403:
  9956  001598  C031  F032         	movff	___ftdiv@f2+2,??___ftdiv
  9957  00159C  6A33               	clrf	(??___ftdiv+1)& (0+255),c
  9958  00159E  6A34               	clrf	(??___ftdiv+2)& (0+255),c
  9959  0015A0  3430               	rlcf	___ftdiv@f2+1,w,c
  9960  0015A2  3632               	rlcf	??___ftdiv& (0+255),f,c
  9961  0015A4  E301               	bnc	u4031
  9962  0015A6  8033               	bsf	(??___ftdiv+1)& (0+255),0,c
  9963  0015A8                     u4031:
  9964  0015A8  5032               	movf	??___ftdiv,w,c
  9965  0015AA  6E3A               	movwf	___ftdiv@sign,c
  9966  0015AC  503A               	movf	___ftdiv@sign,w,c
  9967  0015AE  A4D8               	btfss	status,2,c
  9968  0015B0  D007               	goto	l5409
  9969  0015B2                     l5405:
  9970  0015B2  0E00               	movlw	0
  9971  0015B4  6E2C               	movwf	?___ftdiv,c
  9972  0015B6  0E00               	movlw	0
  9973  0015B8  6E2D               	movwf	?___ftdiv+1,c
  9974  0015BA  0E00               	movlw	0
  9975  0015BC  6E2E               	movwf	?___ftdiv+2,c
  9976  0015BE  D04D               	goto	l1173
  9977  0015C0                     l5409:
  9978  0015C0  0E00               	movlw	0
  9979  0015C2  6E36               	movwf	___ftdiv@f3,c
  9980  0015C4  0E00               	movlw	0
  9981  0015C6  6E37               	movwf	___ftdiv@f3+1,c
  9982  0015C8  0E00               	movlw	0
  9983  0015CA  6E38               	movwf	___ftdiv@f3+2,c
  9984  0015CC  503A               	movf	___ftdiv@sign,w,c
  9985  0015CE  0F89               	addlw	137
  9986  0015D0  5E39               	subwf	___ftdiv@exp,f,c
  9987  0015D2  C02E  F03A         	movff	___ftdiv@f1+2,___ftdiv@sign
  9988  0015D6  5031               	movf	___ftdiv@f2+2,w,c
  9989  0015D8  1A3A               	xorwf	___ftdiv@sign,f,c
  9990  0015DA  0E80               	movlw	128
  9991  0015DC  163A               	andwf	___ftdiv@sign,f,c
  9992  0015DE  8E2D               	bsf	___ftdiv@f1+1,7,c
  9993  0015E0  0EFF               	movlw	255
  9994  0015E2  162C               	andwf	___ftdiv@f1,f,c
  9995  0015E4  0EFF               	movlw	255
  9996  0015E6  162D               	andwf	___ftdiv@f1+1,f,c
  9997  0015E8  0E00               	movlw	0
  9998  0015EA  162E               	andwf	___ftdiv@f1+2,f,c
  9999  0015EC  8E30               	bsf	___ftdiv@f2+1,7,c
 10000  0015EE  0EFF               	movlw	255
 10001  0015F0  162F               	andwf	___ftdiv@f2,f,c
 10002  0015F2  0EFF               	movlw	255
 10003  0015F4  1630               	andwf	___ftdiv@f2+1,f,c
 10004  0015F6  0E00               	movlw	0
 10005  0015F8  1631               	andwf	___ftdiv@f2+2,f,c
 10006  0015FA  0E18               	movlw	24
 10007  0015FC  6E35               	movwf	___ftdiv@cntr,c
 10008  0015FE  D000               	goto	l5429
 10009  001600                     l5429:
 10010  001600  90D8               	bcf	status,0,c
 10011  001602  3636               	rlcf	___ftdiv@f3,f,c
 10012  001604  3637               	rlcf	___ftdiv@f3+1,f,c
 10013  001606  3638               	rlcf	___ftdiv@f3+2,f,c
 10014  001608  502F               	movf	___ftdiv@f2,w,c
 10015  00160A  5C2C               	subwf	___ftdiv@f1,w,c
 10016  00160C  5030               	movf	___ftdiv@f2+1,w,c
 10017  00160E  582D               	subwfb	___ftdiv@f1+1,w,c
 10018  001610  5031               	movf	___ftdiv@f2+2,w,c
 10019  001612  582E               	subwfb	___ftdiv@f1+2,w,c
 10020  001614  A0D8               	btfss	status,0,c
 10021  001616  D007               	goto	l1176
 10022  001618  502F               	movf	___ftdiv@f2,w,c
 10023  00161A  5E2C               	subwf	___ftdiv@f1,f,c
 10024  00161C  5030               	movf	___ftdiv@f2+1,w,c
 10025  00161E  5A2D               	subwfb	___ftdiv@f1+1,f,c
 10026  001620  5031               	movf	___ftdiv@f2+2,w,c
 10027  001622  5A2E               	subwfb	___ftdiv@f1+2,f,c
 10028  001624  8036               	bsf	___ftdiv@f3,0,c
 10029  001626                     l1176:
 10030  001626  90D8               	bcf	status,0,c
 10031  001628  362C               	rlcf	___ftdiv@f1,f,c
 10032  00162A  362D               	rlcf	___ftdiv@f1+1,f,c
 10033  00162C  362E               	rlcf	___ftdiv@f1+2,f,c
 10034  00162E  2E35               	decfsz	___ftdiv@cntr,f,c
 10035  001630  D7E7               	goto	l5429
 10036  001632  D000               	goto	l5439
 10037  001634                     l5439:
 10038  001634  C036  F011         	movff	___ftdiv@f3,___ftpack@arg
 10039  001638  C037  F012         	movff	___ftdiv@f3+1,___ftpack@arg+1
 10040  00163C  C038  F013         	movff	___ftdiv@f3+2,___ftpack@arg+2
 10041  001640  C039  F014         	movff	___ftdiv@exp,___ftpack@exp
 10042  001644  C03A  F015         	movff	___ftdiv@sign,___ftpack@sign
 10043  001648  EC9C  F00B         	call	___ftpack	;wreg free
 10044  00164C  C011  F02C         	movff	?___ftpack,?___ftdiv
 10045  001650  C012  F02D         	movff	?___ftpack+1,?___ftdiv+1
 10046  001654  C013  F02E         	movff	?___ftpack+2,?___ftdiv+2
 10047  001658  D000               	goto	l1173
 10048  00165A                     l1173:
 10049  00165A  0012               	return		;funcret
 10050  00165C                     __end_of___ftdiv:
 10051                           	opt stack 0
 10052                           tblptru	equ	0xFF8
 10053                           tblptrh	equ	0xFF7
 10054                           tblptrl	equ	0xFF6
 10055                           tablat	equ	0xFF5
 10056                           prodh	equ	0xFF4
 10057                           prodl	equ	0xFF3
 10058                           intcon	equ	0xFF2
 10059                           intcon2	equ	0xFF1
 10060                           postinc0	equ	0xFEE
 10061                           wreg	equ	0xFE8
 10062                           postdec1	equ	0xFE5
 10063                           fsr1l	equ	0xFE1
 10064                           indf2	equ	0xFDF
 10065                           postinc2	equ	0xFDE
 10066                           postdec2	equ	0xFDD
 10067                           fsr2h	equ	0xFDA
 10068                           fsr2l	equ	0xFD9
 10069                           status	equ	0xFD8
 10070                           
 10071 ;; *************** function ___ftpack *****************
 10072 ;; Defined at:
 10073 ;;		line 62 in file "E:\XC8\sources\common\float.c"
 10074 ;; Parameters:    Size  Location     Type
 10075 ;;  arg             3   16[COMRAM] unsigned um
 10076 ;;  exp             1   19[COMRAM] unsigned char 
 10077 ;;  sign            1   20[COMRAM] unsigned char 
 10078 ;; Auto vars:     Size  Location     Type
 10079 ;;		None
 10080 ;; Return value:  Size  Location     Type
 10081 ;;                  3   16[COMRAM] float 
 10082 ;; Registers used:
 10083 ;;		wreg, status,2, status,0
 10084 ;; Tracked objects:
 10085 ;;		On entry : 0/0
 10086 ;;		On exit  : 0/0
 10087 ;;		Unchanged: 0/0
 10088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10089 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10090 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10091 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10092 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10093 ;;Total ram usage:        8 bytes
 10094 ;; Hardware stack levels used:    1
 10095 ;; Hardware stack levels required when called:    3
 10096 ;; This function calls:
 10097 ;;		Nothing
 10098 ;; This function is called by:
 10099 ;;		___ftdiv
 10100 ;;		___ftmul
 10101 ;;		___lbtoft
 10102 ;; This function uses a non-reentrant model
 10103 ;;
 10104                           
 10105                           	psect	text53
 10106  001738                     __ptext53:
 10107                           	opt stack 0
 10108  001738                     ___ftpack:
 10109                           	opt stack 25
 10110                           
 10111                           ;incstack = 0
 10112  001738  5014               	movf	___ftpack@exp,w,c
 10113  00173A  B4D8               	btfsc	status,2,c
 10114  00173C  D005               	goto	l5293
 10115  00173E  5011               	movf	___ftpack@arg,w,c
 10116  001740  1012               	iorwf	___ftpack@arg+1,w,c
 10117  001742  1013               	iorwf	___ftpack@arg+2,w,c
 10118  001744  A4D8               	btfss	status,2,c
 10119  001746  D00E               	goto	l5299
 10120  001748                     l5293:
 10121  001748  0E00               	movlw	0
 10122  00174A  6E11               	movwf	?___ftpack,c
 10123  00174C  0E00               	movlw	0
 10124  00174E  6E12               	movwf	?___ftpack+1,c
 10125  001750  0E00               	movlw	0
 10126  001752  6E13               	movwf	?___ftpack+2,c
 10127  001754  D053               	goto	l1101
 10128  001756  D006               	goto	l5299
 10129  001758                     l5297:
 10130  001758  2A14               	incf	___ftpack@exp,f,c
 10131  00175A  90D8               	bcf	status,0,c
 10132  00175C  3213               	rrcf	___ftpack@arg+2,f,c
 10133  00175E  3212               	rrcf	___ftpack@arg+1,f,c
 10134  001760  3211               	rrcf	___ftpack@arg,f,c
 10135  001762  D000               	goto	l5299
 10136  001764                     l5299:
 10137  001764  0E00               	movlw	0
 10138  001766  1411               	andwf	___ftpack@arg,w,c
 10139  001768  6E16               	movwf	??___ftpack& (0+255),c
 10140  00176A  0E00               	movlw	0
 10141  00176C  1412               	andwf	___ftpack@arg+1,w,c
 10142  00176E  6E17               	movwf	(??___ftpack+1)& (0+255),c
 10143  001770  0EFE               	movlw	254
 10144  001772  1413               	andwf	___ftpack@arg+2,w,c
 10145  001774  6E18               	movwf	(??___ftpack+2)& (0+255),c
 10146  001776  5016               	movf	??___ftpack,w,c
 10147  001778  1017               	iorwf	??___ftpack+1,w,c
 10148  00177A  1018               	iorwf	??___ftpack+2,w,c
 10149  00177C  B4D8               	btfsc	status,2,c
 10150  00177E  D00E               	goto	l5305
 10151  001780  D7EB               	goto	l5297
 10152  001782  D00C               	goto	l5305
 10153  001784                     l5301:
 10154  001784  2A14               	incf	___ftpack@exp,f,c
 10155  001786  0E01               	movlw	1
 10156  001788  2611               	addwf	___ftpack@arg,f,c
 10157  00178A  0E00               	movlw	0
 10158  00178C  2212               	addwfc	___ftpack@arg+1,f,c
 10159  00178E  0E00               	movlw	0
 10160  001790  2213               	addwfc	___ftpack@arg+2,f,c
 10161  001792  90D8               	bcf	status,0,c
 10162  001794  3213               	rrcf	___ftpack@arg+2,f,c
 10163  001796  3212               	rrcf	___ftpack@arg+1,f,c
 10164  001798  3211               	rrcf	___ftpack@arg,f,c
 10165  00179A  D000               	goto	l5305
 10166  00179C                     l5305:
 10167  00179C  0E00               	movlw	0
 10168  00179E  1411               	andwf	___ftpack@arg,w,c
 10169  0017A0  6E16               	movwf	??___ftpack& (0+255),c
 10170  0017A2  0E00               	movlw	0
 10171  0017A4  1412               	andwf	___ftpack@arg+1,w,c
 10172  0017A6  6E17               	movwf	(??___ftpack+1)& (0+255),c
 10173  0017A8  0EFF               	movlw	255
 10174  0017AA  1413               	andwf	___ftpack@arg+2,w,c
 10175  0017AC  6E18               	movwf	(??___ftpack+2)& (0+255),c
 10176  0017AE  5016               	movf	??___ftpack,w,c
 10177  0017B0  1017               	iorwf	??___ftpack+1,w,c
 10178  0017B2  1018               	iorwf	??___ftpack+2,w,c
 10179  0017B4  B4D8               	btfsc	status,2,c
 10180  0017B6  D008               	goto	l5309
 10181  0017B8  D7E5               	goto	l5301
 10182  0017BA  D006               	goto	l5309
 10183  0017BC                     l5307:
 10184  0017BC  0614               	decf	___ftpack@exp,f,c
 10185  0017BE  90D8               	bcf	status,0,c
 10186  0017C0  3611               	rlcf	___ftpack@arg,f,c
 10187  0017C2  3612               	rlcf	___ftpack@arg+1,f,c
 10188  0017C4  3613               	rlcf	___ftpack@arg+2,f,c
 10189  0017C6  D000               	goto	l5309
 10190  0017C8                     l5309:
 10191  0017C8  BE12               	btfsc	___ftpack@arg+1,7,c
 10192  0017CA  D004               	goto	l1112
 10193  0017CC  0E02               	movlw	2
 10194  0017CE  6014               	cpfslt	___ftpack@exp,c
 10195  0017D0  D7F5               	goto	l5307
 10196  0017D2  D000               	goto	l1112
 10197  0017D4                     l1112:
 10198  0017D4  B014               	btfsc	___ftpack@exp,0,c
 10199  0017D6  D002               	goto	l5315
 10200  0017D8  9E12               	bcf	___ftpack@arg+1,7,c
 10201  0017DA  D000               	goto	l5315
 10202  0017DC                     l5315:
 10203  0017DC  90D8               	bcf	status,0,c
 10204  0017DE  3214               	rrcf	___ftpack@exp,f,c
 10205  0017E0  5014               	movf	___ftpack@exp,w,c
 10206  0017E2  1213               	iorwf	___ftpack@arg+2,f,c
 10207  0017E4  5015               	movf	___ftpack@sign,w,c
 10208  0017E6  B4D8               	btfsc	status,2,c
 10209  0017E8  D002               	goto	l5321
 10210  0017EA  8E13               	bsf	___ftpack@arg+2,7,c
 10211  0017EC  D000               	goto	l5321
 10212  0017EE                     l5321:
 10213  0017EE  C011  F011         	movff	___ftpack@arg,?___ftpack
 10214  0017F2  C012  F012         	movff	___ftpack@arg+1,?___ftpack+1
 10215  0017F6  C013  F013         	movff	___ftpack@arg+2,?___ftpack+2
 10216  0017FA  D000               	goto	l1101
 10217  0017FC                     l1101:
 10218  0017FC  0012               	return		;funcret
 10219  0017FE                     __end_of___ftpack:
 10220                           	opt stack 0
 10221                           tblptru	equ	0xFF8
 10222                           tblptrh	equ	0xFF7
 10223                           tblptrl	equ	0xFF6
 10224                           tablat	equ	0xFF5
 10225                           prodh	equ	0xFF4
 10226                           prodl	equ	0xFF3
 10227                           intcon	equ	0xFF2
 10228                           intcon2	equ	0xFF1
 10229                           postinc0	equ	0xFEE
 10230                           wreg	equ	0xFE8
 10231                           postdec1	equ	0xFE5
 10232                           fsr1l	equ	0xFE1
 10233                           indf2	equ	0xFDF
 10234                           postinc2	equ	0xFDE
 10235                           postdec2	equ	0xFDD
 10236                           fsr2h	equ	0xFDA
 10237                           fsr2l	equ	0xFD9
 10238                           status	equ	0xFD8
 10239                           
 10240 ;; *************** function _Wait_One_Sec *****************
 10241 ;; Defined at:
 10242 ;;		line 18 in file "Utils.c"
 10243 ;; Parameters:    Size  Location     Type
 10244 ;;		None
 10245 ;; Auto vars:     Size  Location     Type
 10246 ;;  j               2   16[COMRAM] int 
 10247 ;; Return value:  Size  Location     Type
 10248 ;;		None               void
 10249 ;; Registers used:
 10250 ;;		wreg, status,2, status,0
 10251 ;; Tracked objects:
 10252 ;;		On entry : 0/0
 10253 ;;		On exit  : 0/0
 10254 ;;		Unchanged: 0/0
 10255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10256 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10257 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10258 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10259 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10260 ;;Total ram usage:        2 bytes
 10261 ;; Hardware stack levels used:    1
 10262 ;; Hardware stack levels required when called:    3
 10263 ;; This function calls:
 10264 ;;		Nothing
 10265 ;; This function is called by:
 10266 ;;		_Do_Beep
 10267 ;; This function uses a non-reentrant model
 10268 ;;
 10269                           
 10270                           	psect	text54
 10271  0022A2                     __ptext54:
 10272                           	opt stack 0
 10273  0022A2                     _Wait_One_Sec:
 10274                           	opt stack 25
 10275                           
 10276                           ;Utils.c: 20: for (int j=0; j<17000;j++);
 10277                           
 10278                           ;incstack = 0
 10279  0022A2  0E00               	movlw	0
 10280  0022A4  6E12               	movwf	Wait_One_Sec@j+1,c
 10281  0022A6  0E00               	movlw	0
 10282  0022A8  6E11               	movwf	Wait_One_Sec@j,c
 10283  0022AA                     l5783:
 10284  0022AA  BE12               	btfsc	Wait_One_Sec@j+1,7,c
 10285  0022AC  D008               	goto	l5787
 10286  0022AE  0E68               	movlw	104
 10287  0022B0  5C11               	subwf	Wait_One_Sec@j,w,c
 10288  0022B2  0E42               	movlw	66
 10289  0022B4  5812               	subwfb	Wait_One_Sec@j+1,w,c
 10290  0022B6  B0D8               	btfsc	status,0,c
 10291  0022B8  D005               	goto	l538
 10292  0022BA  D001               	goto	l5787
 10293  0022BC  D003               	goto	l538
 10294  0022BE                     l5787:
 10295  0022BE  4A11               	infsnz	Wait_One_Sec@j,f,c
 10296  0022C0  2A12               	incf	Wait_One_Sec@j+1,f,c
 10297  0022C2  D7F3               	goto	l5783
 10298  0022C4                     l538:
 10299  0022C4  0012               	return		;funcret
 10300  0022C6                     __end_of_Wait_One_Sec:
 10301                           	opt stack 0
 10302                           tblptru	equ	0xFF8
 10303                           tblptrh	equ	0xFF7
 10304                           tblptrl	equ	0xFF6
 10305                           tablat	equ	0xFF5
 10306                           prodh	equ	0xFF4
 10307                           prodl	equ	0xFF3
 10308                           intcon	equ	0xFF2
 10309                           intcon2	equ	0xFF1
 10310                           postinc0	equ	0xFEE
 10311                           wreg	equ	0xFE8
 10312                           postdec1	equ	0xFE5
 10313                           fsr1l	equ	0xFE1
 10314                           indf2	equ	0xFDF
 10315                           postinc2	equ	0xFDE
 10316                           postdec2	equ	0xFDD
 10317                           fsr2h	equ	0xFDA
 10318                           fsr2l	equ	0xFD9
 10319                           status	equ	0xFD8
 10320                           
 10321 ;; *************** function _Deactivate_Buzzer *****************
 10322 ;; Defined at:
 10323 ;;		line 31 in file "Utils.c"
 10324 ;; Parameters:    Size  Location     Type
 10325 ;;		None
 10326 ;; Auto vars:     Size  Location     Type
 10327 ;;		None
 10328 ;; Return value:  Size  Location     Type
 10329 ;;		None               void
 10330 ;; Registers used:
 10331 ;;		wreg, status,2
 10332 ;; Tracked objects:
 10333 ;;		On entry : 0/0
 10334 ;;		On exit  : 0/0
 10335 ;;		Unchanged: 0/0
 10336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10337 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10338 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10339 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10340 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10341 ;;Total ram usage:        0 bytes
 10342 ;; Hardware stack levels used:    1
 10343 ;; Hardware stack levels required when called:    3
 10344 ;; This function calls:
 10345 ;;		Nothing
 10346 ;; This function is called by:
 10347 ;;		_Do_Beep
 10348 ;; This function uses a non-reentrant model
 10349 ;;
 10350                           
 10351                           	psect	text55
 10352  0024E8                     __ptext55:
 10353                           	opt stack 0
 10354  0024E8                     _Deactivate_Buzzer:
 10355                           	opt stack 25
 10356                           
 10357                           ;Utils.c: 33: CCP2CON = 0x0;
 10358                           
 10359                           ;incstack = 0
 10360  0024E8  0E00               	movlw	0
 10361  0024EA  6EBA               	movwf	4026,c	;volatile
 10362                           
 10363                           ;Utils.c: 34: PORTBbits.RB3 = 0;
 10364  0024EC  9681               	bcf	3969,3,c	;volatile
 10365  0024EE  0012               	return		;funcret
 10366  0024F0                     __end_of_Deactivate_Buzzer:
 10367                           	opt stack 0
 10368                           tblptru	equ	0xFF8
 10369                           tblptrh	equ	0xFF7
 10370                           tblptrl	equ	0xFF6
 10371                           tablat	equ	0xFF5
 10372                           prodh	equ	0xFF4
 10373                           prodl	equ	0xFF3
 10374                           intcon	equ	0xFF2
 10375                           intcon2	equ	0xFF1
 10376                           postinc0	equ	0xFEE
 10377                           wreg	equ	0xFE8
 10378                           postdec1	equ	0xFE5
 10379                           fsr1l	equ	0xFE1
 10380                           indf2	equ	0xFDF
 10381                           postinc2	equ	0xFDE
 10382                           postdec2	equ	0xFDD
 10383                           fsr2h	equ	0xFDA
 10384                           fsr2l	equ	0xFD9
 10385                           status	equ	0xFD8
 10386                           
 10387 ;; *************** function _Activate_Buzzer *****************
 10388 ;; Defined at:
 10389 ;;		line 23 in file "Utils.c"
 10390 ;; Parameters:    Size  Location     Type
 10391 ;;		None
 10392 ;; Auto vars:     Size  Location     Type
 10393 ;;		None
 10394 ;; Return value:  Size  Location     Type
 10395 ;;		None               void
 10396 ;; Registers used:
 10397 ;;		wreg, status,2
 10398 ;; Tracked objects:
 10399 ;;		On entry : 0/0
 10400 ;;		On exit  : 0/0
 10401 ;;		Unchanged: 0/0
 10402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10404 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10405 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10406 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10407 ;;Total ram usage:        0 bytes
 10408 ;; Hardware stack levels used:    1
 10409 ;; Hardware stack levels required when called:    3
 10410 ;; This function calls:
 10411 ;;		Nothing
 10412 ;; This function is called by:
 10413 ;;		_Do_Beep
 10414 ;; This function uses a non-reentrant model
 10415 ;;
 10416                           
 10417                           	psect	text56
 10418  002422                     __ptext56:
 10419                           	opt stack 0
 10420  002422                     _Activate_Buzzer:
 10421                           	opt stack 25
 10422                           
 10423                           ;Utils.c: 25: PR2 = 0b11111001;
 10424                           
 10425                           ;incstack = 0
 10426  002422  0EF9               	movlw	249
 10427  002424  6ECB               	movwf	4043,c	;volatile
 10428                           
 10429                           ;Utils.c: 26: T2CON = 0b00000101;
 10430  002426  0E05               	movlw	5
 10431  002428  6ECA               	movwf	4042,c	;volatile
 10432                           
 10433                           ;Utils.c: 27: CCPR2L = 0b01001010;
 10434  00242A  0E4A               	movlw	74
 10435  00242C  6EBB               	movwf	4027,c	;volatile
 10436                           
 10437                           ;Utils.c: 28: CCP2CON = 0b00111100;
 10438  00242E  0E3C               	movlw	60
 10439  002430  6EBA               	movwf	4026,c	;volatile
 10440  002432  0012               	return		;funcret
 10441  002434                     __end_of_Activate_Buzzer:
 10442                           	opt stack 0
 10443                           tblptru	equ	0xFF8
 10444                           tblptrh	equ	0xFF7
 10445                           tblptrl	equ	0xFF6
 10446                           tablat	equ	0xFF5
 10447                           prodh	equ	0xFF4
 10448                           prodl	equ	0xFF3
 10449                           intcon	equ	0xFF2
 10450                           intcon2	equ	0xFF1
 10451                           postinc0	equ	0xFEE
 10452                           wreg	equ	0xFE8
 10453                           postdec1	equ	0xFE5
 10454                           fsr1l	equ	0xFE1
 10455                           indf2	equ	0xFDF
 10456                           postinc2	equ	0xFDE
 10457                           postdec2	equ	0xFDD
 10458                           fsr2h	equ	0xFDA
 10459                           fsr2l	equ	0xFD9
 10460                           status	equ	0xFD8
 10461                           
 10462 ;; *************** function _DS3231_Setup_Time *****************
 10463 ;; Defined at:
 10464 ;;		line 67 in file "I2C_Support.c"
 10465 ;; Parameters:    Size  Location     Type
 10466 ;;		None
 10467 ;; Auto vars:     Size  Location     Type
 10468 ;;  Address         1   19[COMRAM] unsigned char 
 10469 ;;  Device          1   18[COMRAM] unsigned char 
 10470 ;; Return value:  Size  Location     Type
 10471 ;;		None               void
 10472 ;; Registers used:
 10473 ;;		wreg, status,2, status,0, cstack
 10474 ;; Tracked objects:
 10475 ;;		On entry : 0/0
 10476 ;;		On exit  : 0/0
 10477 ;;		Unchanged: 0/0
 10478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10479 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10480 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10481 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10482 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10483 ;;Total ram usage:        2 bytes
 10484 ;; Hardware stack levels used:    1
 10485 ;; Hardware stack levels required when called:    5
 10486 ;; This function calls:
 10487 ;;		_I2C_Start
 10488 ;;		_I2C_Stop
 10489 ;;		_I2C_Write
 10490 ;; This function is called by:
 10491 ;;		_main
 10492 ;; This function uses a non-reentrant model
 10493 ;;
 10494                           
 10495                           	psect	text57
 10496  001D4C                     __ptext57:
 10497                           	opt stack 0
 10498  001D4C                     _DS3231_Setup_Time:
 10499                           	opt stack 25
 10500                           
 10501                           ;I2C_Support.c: 70: char Device = 0x68;
 10502                           
 10503                           ;incstack = 0
 10504  001D4C  0E68               	movlw	104
 10505  001D4E  6E13               	movwf	DS3231_Setup_Time@Device,c
 10506                           
 10507                           ;I2C_Support.c: 71: char Address = 0x00;
 10508  001D50  0E00               	movlw	0
 10509  001D52  6E14               	movwf	DS3231_Setup_Time@Address,c
 10510                           
 10511                           ;I2C_Support.c: 73: second = 0x00;
 10512  001D54  0E00               	movlw	0
 10513  001D56  6E64               	movwf	_second,c
 10514                           
 10515                           ;I2C_Support.c: 74: minute = 0x00;
 10516  001D58  0E00               	movlw	0
 10517  001D5A  6E61               	movwf	_minute,c
 10518                           
 10519                           ;I2C_Support.c: 75: hour = 0x00;
 10520  001D5C  0E00               	movlw	0
 10521  001D5E  6E60               	movwf	_hour,c
 10522                           
 10523                           ;I2C_Support.c: 76: dow = 0x00;
 10524  001D60  0E00               	movlw	0
 10525  001D62  6E5D               	movwf	_dow,c
 10526                           
 10527                           ;I2C_Support.c: 77: day = 0x28;
 10528  001D64  0E28               	movlw	40
 10529  001D66  6E5C               	movwf	_day,c
 10530                           
 10531                           ;I2C_Support.c: 78: month = 0x10;
 10532  001D68  0E10               	movlw	16
 10533  001D6A  6E62               	movwf	_month,c
 10534                           
 10535                           ;I2C_Support.c: 79: year = 0x21;
 10536  001D6C  0E21               	movlw	33
 10537  001D6E  6E6D               	movwf	_year,c
 10538                           
 10539                           ;I2C_Support.c: 81: I2C_Start();
 10540  001D70  EC23  F012         	call	_I2C_Start	;wreg free
 10541                           
 10542                           ;I2C_Support.c: 82: I2C_Write((Device << 1) | 0);
 10543  001D74  5013               	movf	DS3231_Setup_Time@Device,w,c
 10544  001D76  2413               	addwf	DS3231_Setup_Time@Device,w,c
 10545  001D78  EC7B  F010         	call	_I2C_Write
 10546                           
 10547                           ;I2C_Support.c: 83: I2C_Write(Address);
 10548  001D7C  5014               	movf	DS3231_Setup_Time@Address,w,c
 10549  001D7E  EC7B  F010         	call	_I2C_Write
 10550                           
 10551                           ;I2C_Support.c: 84: I2C_Write(second);
 10552  001D82  5064               	movf	_second,w,c
 10553  001D84  EC7B  F010         	call	_I2C_Write
 10554                           
 10555                           ;I2C_Support.c: 85: I2C_Write(minute);
 10556  001D88  5061               	movf	_minute,w,c
 10557  001D8A  EC7B  F010         	call	_I2C_Write
 10558                           
 10559                           ;I2C_Support.c: 86: I2C_Write(hour);
 10560  001D8E  5060               	movf	_hour,w,c
 10561  001D90  EC7B  F010         	call	_I2C_Write
 10562                           
 10563                           ;I2C_Support.c: 87: I2C_Write(dow);
 10564  001D94  505D               	movf	_dow,w,c
 10565  001D96  EC7B  F010         	call	_I2C_Write
 10566                           
 10567                           ;I2C_Support.c: 88: I2C_Write(day);
 10568  001D9A  505C               	movf	_day,w,c
 10569  001D9C  EC7B  F010         	call	_I2C_Write
 10570                           
 10571                           ;I2C_Support.c: 89: I2C_Write(month);
 10572  001DA0  5062               	movf	_month,w,c
 10573  001DA2  EC7B  F010         	call	_I2C_Write
 10574                           
 10575                           ;I2C_Support.c: 90: I2C_Write(year);
 10576  001DA6  506D               	movf	_year,w,c
 10577  001DA8  EC7B  F010         	call	_I2C_Write
 10578                           
 10579                           ;I2C_Support.c: 91: I2C_Stop();
 10580  001DAC  EC1A  F012         	call	_I2C_Stop	;wreg free
 10581  001DB0  0012               	return		;funcret
 10582  001DB2                     __end_of_DS3231_Setup_Time:
 10583                           	opt stack 0
 10584                           tblptru	equ	0xFF8
 10585                           tblptrh	equ	0xFF7
 10586                           tblptrl	equ	0xFF6
 10587                           tablat	equ	0xFF5
 10588                           prodh	equ	0xFF4
 10589                           prodl	equ	0xFF3
 10590                           intcon	equ	0xFF2
 10591                           intcon2	equ	0xFF1
 10592                           postinc0	equ	0xFEE
 10593                           wreg	equ	0xFE8
 10594                           postdec1	equ	0xFE5
 10595                           fsr1l	equ	0xFE1
 10596                           indf2	equ	0xFDF
 10597                           postinc2	equ	0xFDE
 10598                           postdec2	equ	0xFDD
 10599                           fsr2h	equ	0xFDA
 10600                           fsr2l	equ	0xFD9
 10601                           status	equ	0xFD8
 10602                           
 10603 ;; *************** function _DS3231_Read_Time *****************
 10604 ;; Defined at:
 10605 ;;		line 45 in file "I2C_Support.c"
 10606 ;; Parameters:    Size  Location     Type
 10607 ;;		None
 10608 ;; Auto vars:     Size  Location     Type
 10609 ;;  Device          1   20[COMRAM] unsigned char 
 10610 ;;  Address         1   19[COMRAM] unsigned char 
 10611 ;;  Data_Ret        1    0        unsigned char 
 10612 ;; Return value:  Size  Location     Type
 10613 ;;		None               void
 10614 ;; Registers used:
 10615 ;;		wreg, status,2, status,0, cstack
 10616 ;; Tracked objects:
 10617 ;;		On entry : 0/0
 10618 ;;		On exit  : 0/0
 10619 ;;		Unchanged: 0/0
 10620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10621 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10622 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10623 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10624 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10625 ;;Total ram usage:        2 bytes
 10626 ;; Hardware stack levels used:    1
 10627 ;; Hardware stack levels required when called:    6
 10628 ;; This function calls:
 10629 ;;		_I2C_ReStart
 10630 ;;		_I2C_Read
 10631 ;;		_I2C_Start
 10632 ;;		_I2C_Stop
 10633 ;;		_I2C_Write
 10634 ;; This function is called by:
 10635 ;;		_main
 10636 ;; This function uses a non-reentrant model
 10637 ;;
 10638                           
 10639                           	psect	text58
 10640  001DB2                     __ptext58:
 10641                           	opt stack 0
 10642  001DB2                     _DS3231_Read_Time:
 10643                           	opt stack 24
 10644                           
 10645                           ;I2C_Support.c: 47: char Device = 0x68;
 10646                           
 10647                           ;incstack = 0
 10648  001DB2  0E68               	movlw	104
 10649  001DB4  6E15               	movwf	DS3231_Read_Time@Device,c
 10650                           
 10651                           ;I2C_Support.c: 48: char Address = 0x00;
 10652  001DB6  0E00               	movlw	0
 10653  001DB8  6E14               	movwf	DS3231_Read_Time@Address,c
 10654                           
 10655                           ;I2C_Support.c: 49: char Data_Ret;
 10656                           ;I2C_Support.c: 50: I2C_Start();
 10657  001DBA  EC23  F012         	call	_I2C_Start	;wreg free
 10658                           
 10659                           ;I2C_Support.c: 51: I2C_Write((Device << 1) | 0);
 10660  001DBE  5015               	movf	DS3231_Read_Time@Device,w,c
 10661  001DC0  2415               	addwf	DS3231_Read_Time@Device,w,c
 10662  001DC2  EC7B  F010         	call	_I2C_Write
 10663                           
 10664                           ;I2C_Support.c: 52: I2C_Write(Address);
 10665  001DC6  5014               	movf	DS3231_Read_Time@Address,w,c
 10666  001DC8  EC7B  F010         	call	_I2C_Write
 10667                           
 10668                           ;I2C_Support.c: 53: I2C_ReStart();
 10669  001DCC  ECE9  F011         	call	_I2C_ReStart	;wreg free
 10670                           
 10671                           ;I2C_Support.c: 54: I2C_Write((Device << 1) | 1);
 10672  001DD0  80D8               	bsf	status,0,c
 10673  001DD2  3415               	rlcf	DS3231_Read_Time@Device,w,c
 10674  001DD4  EC7B  F010         	call	_I2C_Write
 10675                           
 10676                           ;I2C_Support.c: 56: second = I2C_Read(1);
 10677  001DD8  0E01               	movlw	1
 10678  001DDA  ECFA  F00F         	call	_I2C_Read
 10679  001DDE  6E64               	movwf	_second,c
 10680                           
 10681                           ;I2C_Support.c: 57: minute = I2C_Read(1);
 10682  001DE0  0E01               	movlw	1
 10683  001DE2  ECFA  F00F         	call	_I2C_Read
 10684  001DE6  6E61               	movwf	_minute,c
 10685                           
 10686                           ;I2C_Support.c: 58: hour = I2C_Read(1);
 10687  001DE8  0E01               	movlw	1
 10688  001DEA  ECFA  F00F         	call	_I2C_Read
 10689  001DEE  6E60               	movwf	_hour,c
 10690                           
 10691                           ;I2C_Support.c: 59: dow = I2C_Read(1);
 10692  001DF0  0E01               	movlw	1
 10693  001DF2  ECFA  F00F         	call	_I2C_Read
 10694  001DF6  6E5D               	movwf	_dow,c
 10695                           
 10696                           ;I2C_Support.c: 60: day = I2C_Read(1);
 10697  001DF8  0E01               	movlw	1
 10698  001DFA  ECFA  F00F         	call	_I2C_Read
 10699  001DFE  6E5C               	movwf	_day,c
 10700                           
 10701                           ;I2C_Support.c: 61: month = I2C_Read(1);
 10702  001E00  0E01               	movlw	1
 10703  001E02  ECFA  F00F         	call	_I2C_Read
 10704  001E06  6E62               	movwf	_month,c
 10705                           
 10706                           ;I2C_Support.c: 62: year = I2C_Read(0);
 10707  001E08  0E00               	movlw	0
 10708  001E0A  ECFA  F00F         	call	_I2C_Read
 10709  001E0E  6E6D               	movwf	_year,c
 10710                           
 10711                           ;I2C_Support.c: 64: I2C_Stop();
 10712  001E10  EC1A  F012         	call	_I2C_Stop	;wreg free
 10713  001E14  0012               	return		;funcret
 10714  001E16                     __end_of_DS3231_Read_Time:
 10715                           	opt stack 0
 10716                           tblptru	equ	0xFF8
 10717                           tblptrh	equ	0xFF7
 10718                           tblptrl	equ	0xFF6
 10719                           tablat	equ	0xFF5
 10720                           prodh	equ	0xFF4
 10721                           prodl	equ	0xFF3
 10722                           intcon	equ	0xFF2
 10723                           intcon2	equ	0xFF1
 10724                           postinc0	equ	0xFEE
 10725                           wreg	equ	0xFE8
 10726                           postdec1	equ	0xFE5
 10727                           fsr1l	equ	0xFE1
 10728                           indf2	equ	0xFDF
 10729                           postinc2	equ	0xFDE
 10730                           postdec2	equ	0xFDD
 10731                           fsr2h	equ	0xFDA
 10732                           fsr2l	equ	0xFD9
 10733                           status	equ	0xFD8
 10734                           
 10735 ;; *************** function _DS1621_Read_Temp *****************
 10736 ;; Defined at:
 10737 ;;		line 29 in file "I2C_Support.c"
 10738 ;; Parameters:    Size  Location     Type
 10739 ;;		None
 10740 ;; Auto vars:     Size  Location     Type
 10741 ;;  Device          1   23[COMRAM] unsigned char 
 10742 ;;  Data_Ret        1   22[COMRAM] unsigned char 
 10743 ;;  Cmd             1   21[COMRAM] unsigned char 
 10744 ;; Return value:  Size  Location     Type
 10745 ;;                  2   19[COMRAM] int 
 10746 ;; Registers used:
 10747 ;;		wreg, status,2, status,0, cstack
 10748 ;; Tracked objects:
 10749 ;;		On entry : 0/0
 10750 ;;		On exit  : 0/0
 10751 ;;		Unchanged: 0/0
 10752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10753 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10754 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10755 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10756 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10757 ;;Total ram usage:        5 bytes
 10758 ;; Hardware stack levels used:    1
 10759 ;; Hardware stack levels required when called:    6
 10760 ;; This function calls:
 10761 ;;		_I2C_ReStart
 10762 ;;		_I2C_Read
 10763 ;;		_I2C_Start
 10764 ;;		_I2C_Stop
 10765 ;;		_I2C_Write
 10766 ;; This function is called by:
 10767 ;;		_main
 10768 ;; This function uses a non-reentrant model
 10769 ;;
 10770                           
 10771                           	psect	text59
 10772  002134                     __ptext59:
 10773                           	opt stack 0
 10774  002134                     _DS1621_Read_Temp:
 10775                           	opt stack 24
 10776                           
 10777                           ;I2C_Support.c: 31: char Device = 0x48;
 10778                           
 10779                           ;incstack = 0
 10780  002134  0E48               	movlw	72
 10781  002136  6E18               	movwf	DS1621_Read_Temp@Device,c
 10782                           
 10783                           ;I2C_Support.c: 32: char Cmd = 0xAA;
 10784  002138  0EAA               	movlw	170
 10785  00213A  6E16               	movwf	DS1621_Read_Temp@Cmd,c
 10786                           
 10787                           ;I2C_Support.c: 34: char Data_Ret;
 10788                           ;I2C_Support.c: 35: I2C_Start();
 10789  00213C  EC23  F012         	call	_I2C_Start	;wreg free
 10790                           
 10791                           ;I2C_Support.c: 36: I2C_Write((Device << 1) | 0);
 10792  002140  5018               	movf	DS1621_Read_Temp@Device,w,c
 10793  002142  2418               	addwf	DS1621_Read_Temp@Device,w,c
 10794  002144  EC7B  F010         	call	_I2C_Write
 10795                           
 10796                           ;I2C_Support.c: 37: I2C_Write(Cmd);
 10797  002148  5016               	movf	DS1621_Read_Temp@Cmd,w,c
 10798  00214A  EC7B  F010         	call	_I2C_Write
 10799                           
 10800                           ;I2C_Support.c: 38: I2C_ReStart();
 10801  00214E  ECE9  F011         	call	_I2C_ReStart	;wreg free
 10802                           
 10803                           ;I2C_Support.c: 39: I2C_Write((Device << 1) | 1);
 10804  002152  80D8               	bsf	status,0,c
 10805  002154  3418               	rlcf	DS1621_Read_Temp@Device,w,c
 10806  002156  EC7B  F010         	call	_I2C_Write
 10807                           
 10808                           ;I2C_Support.c: 40: Data_Ret = I2C_Read(0);
 10809  00215A  0E00               	movlw	0
 10810  00215C  ECFA  F00F         	call	_I2C_Read
 10811  002160  6E17               	movwf	DS1621_Read_Temp@Data_Ret,c
 10812                           
 10813                           ;I2C_Support.c: 41: I2C_Stop();
 10814  002162  EC1A  F012         	call	_I2C_Stop	;wreg free
 10815                           
 10816                           ;I2C_Support.c: 42: return Data_Ret;
 10817  002166  C017  F014         	movff	DS1621_Read_Temp@Data_Ret,?_DS1621_Read_Temp
 10818  00216A  6A15               	clrf	?_DS1621_Read_Temp+1,c
 10819  00216C  D000               	goto	l245
 10820  00216E                     l245:
 10821  00216E  0012               	return		;funcret
 10822  002170                     __end_of_DS1621_Read_Temp:
 10823                           	opt stack 0
 10824                           tblptru	equ	0xFF8
 10825                           tblptrh	equ	0xFF7
 10826                           tblptrl	equ	0xFF6
 10827                           tablat	equ	0xFF5
 10828                           prodh	equ	0xFF4
 10829                           prodl	equ	0xFF3
 10830                           intcon	equ	0xFF2
 10831                           intcon2	equ	0xFF1
 10832                           postinc0	equ	0xFEE
 10833                           wreg	equ	0xFE8
 10834                           postdec1	equ	0xFE5
 10835                           fsr1l	equ	0xFE1
 10836                           indf2	equ	0xFDF
 10837                           postinc2	equ	0xFDE
 10838                           postdec2	equ	0xFDD
 10839                           fsr2h	equ	0xFDA
 10840                           fsr2l	equ	0xFD9
 10841                           status	equ	0xFD8
 10842                           
 10843 ;; *************** function _I2C_Write *****************
 10844 ;; Defined at:
 10845 ;;		line 41 in file "I2C_Soft.c"
 10846 ;; Parameters:    Size  Location     Type
 10847 ;;  outByte         1    wreg     unsigned char 
 10848 ;; Auto vars:     Size  Location     Type
 10849 ;;  outByte         1   16[COMRAM] unsigned char 
 10850 ;;  n               1   17[COMRAM] unsigned char 
 10851 ;; Return value:  Size  Location     Type
 10852 ;;		None               void
 10853 ;; Registers used:
 10854 ;;		wreg, status,2, status,0, cstack
 10855 ;; Tracked objects:
 10856 ;;		On entry : 0/0
 10857 ;;		On exit  : 0/0
 10858 ;;		Unchanged: 0/0
 10859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10860 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10861 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10862 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10863 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10864 ;;Total ram usage:        2 bytes
 10865 ;; Hardware stack levels used:    1
 10866 ;; Hardware stack levels required when called:    4
 10867 ;; This function calls:
 10868 ;;		_i2cHighScl
 10869 ;;		_i2cHighSda
 10870 ;;		_i2cLowScl
 10871 ;;		_i2cLowSda
 10872 ;; This function is called by:
 10873 ;;		_I2C_Write_Cmd_Only
 10874 ;;		_I2C_Write_Cmd_Write_Data
 10875 ;;		_DS1621_Read_Temp
 10876 ;;		_DS3231_Read_Time
 10877 ;;		_DS3231_Setup_Time
 10878 ;;		_I2C_Write_Address_Read_One_Byte
 10879 ;;		_I2C_Write_Address_Write_One_Byte
 10880 ;;		_I2C_Write_Cmd_Read_One_Byte
 10881 ;; This function uses a non-reentrant model
 10882 ;;
 10883                           
 10884                           	psect	text60
 10885  0020F6                     __ptext60:
 10886                           	opt stack 0
 10887  0020F6                     _I2C_Write:
 10888                           	opt stack 23
 10889                           
 10890                           ;incstack = 0
 10891                           ;I2C_Write@outByte stored from wreg
 10892  0020F6  6E11               	movwf	I2C_Write@outByte,c
 10893                           
 10894                           ;I2C_Soft.c: 43: unsigned char n;
 10895                           ;I2C_Soft.c: 44: for(n=0; n<8; n++)
 10896  0020F8  0E00               	movlw	0
 10897  0020FA  6E12               	movwf	I2C_Write@n,c
 10898  0020FC                     l5327:
 10899  0020FC  0E07               	movlw	7
 10900  0020FE  6412               	cpfsgt	I2C_Write@n,c
 10901  002100  D001               	goto	l193
 10902  002102  D011               	goto	l5345
 10903  002104                     l193:
 10904                           
 10905                           ;I2C_Soft.c: 45: {
 10906                           ;I2C_Soft.c: 46: if(outByte&0x80) i2cHighSda();
 10907  002104  AE11               	btfss	I2C_Write@outByte,7,c
 10908  002106  D003               	goto	l5333
 10909  002108  EC7C  F012         	call	_i2cHighSda	;wreg free
 10910  00210C  D003               	goto	l5335
 10911  00210E                     l5333:
 10912                           
 10913                           ;I2C_Soft.c: 47: else i2cLowSda();
 10914  00210E  EC6F  F012         	call	_i2cLowSda	;wreg free
 10915  002112  D000               	goto	l5335
 10916  002114                     l5335:
 10917                           
 10918                           ;I2C_Soft.c: 48: i2cHighScl();
 10919  002114  EC54  F012         	call	_i2cHighScl	;wreg free
 10920                           
 10921                           ;I2C_Soft.c: 49: i2cLowScl();
 10922  002118  EC78  F012         	call	_i2cLowScl	;wreg free
 10923                           
 10924                           ;I2C_Soft.c: 50: outByte = outByte << 1;
 10925  00211C  5011               	movf	I2C_Write@outByte,w,c
 10926  00211E  2411               	addwf	I2C_Write@outByte,w,c
 10927  002120  6E11               	movwf	I2C_Write@outByte,c
 10928  002122  2A12               	incf	I2C_Write@n,f,c
 10929  002124  D7EB               	goto	l5327
 10930  002126                     l5345:
 10931                           
 10932                           ;I2C_Soft.c: 51: }
 10933                           ;I2C_Soft.c: 52: i2cHighSda();
 10934  002126  EC7C  F012         	call	_i2cHighSda	;wreg free
 10935                           
 10936                           ;I2C_Soft.c: 53: i2cHighScl();
 10937  00212A  EC54  F012         	call	_i2cHighScl	;wreg free
 10938                           
 10939                           ;I2C_Soft.c: 54: i2cLowScl();
 10940  00212E  EC78  F012         	call	_i2cLowScl	;wreg free
 10941  002132  0012               	return		;funcret
 10942  002134                     __end_of_I2C_Write:
 10943                           	opt stack 0
 10944                           tblptru	equ	0xFF8
 10945                           tblptrh	equ	0xFF7
 10946                           tblptrl	equ	0xFF6
 10947                           tablat	equ	0xFF5
 10948                           prodh	equ	0xFF4
 10949                           prodl	equ	0xFF3
 10950                           intcon	equ	0xFF2
 10951                           intcon2	equ	0xFF1
 10952                           postinc0	equ	0xFEE
 10953                           wreg	equ	0xFE8
 10954                           postdec1	equ	0xFE5
 10955                           fsr1l	equ	0xFE1
 10956                           indf2	equ	0xFDF
 10957                           postinc2	equ	0xFDE
 10958                           postdec2	equ	0xFDD
 10959                           fsr2h	equ	0xFDA
 10960                           fsr2l	equ	0xFD9
 10961                           status	equ	0xFD8
 10962                           
 10963 ;; *************** function _I2C_Stop *****************
 10964 ;; Defined at:
 10965 ;;		line 88 in file "I2C_Soft.c"
 10966 ;; Parameters:    Size  Location     Type
 10967 ;;		None
 10968 ;; Auto vars:     Size  Location     Type
 10969 ;;		None
 10970 ;; Return value:  Size  Location     Type
 10971 ;;		None               void
 10972 ;; Registers used:
 10973 ;;		wreg, cstack
 10974 ;; Tracked objects:
 10975 ;;		On entry : 0/0
 10976 ;;		On exit  : 0/0
 10977 ;;		Unchanged: 0/0
 10978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10979 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10980 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10981 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10982 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10983 ;;Total ram usage:        0 bytes
 10984 ;; Hardware stack levels used:    1
 10985 ;; Hardware stack levels required when called:    4
 10986 ;; This function calls:
 10987 ;;		_i2cHighScl
 10988 ;;		_i2cHighSda
 10989 ;;		_i2cLowScl
 10990 ;;		_i2cLowSda
 10991 ;; This function is called by:
 10992 ;;		_I2C_Write_Cmd_Only
 10993 ;;		_I2C_Write_Cmd_Write_Data
 10994 ;;		_DS1621_Read_Temp
 10995 ;;		_DS3231_Read_Time
 10996 ;;		_DS3231_Setup_Time
 10997 ;;		_I2C_Write_Address_Read_One_Byte
 10998 ;;		_I2C_Write_Address_Write_One_Byte
 10999 ;;		_I2C_Write_Cmd_Read_One_Byte
 11000 ;; This function uses a non-reentrant model
 11001 ;;
 11002                           
 11003                           	psect	text61
 11004  002434                     __ptext61:
 11005                           	opt stack 0
 11006  002434                     _I2C_Stop:
 11007                           	opt stack 23
 11008                           
 11009                           ;I2C_Soft.c: 90: i2cLowScl();
 11010                           
 11011                           ;incstack = 0
 11012  002434  EC78  F012         	call	_i2cLowScl	;wreg free
 11013                           
 11014                           ;I2C_Soft.c: 91: i2cLowSda();
 11015  002438  EC6F  F012         	call	_i2cLowSda	;wreg free
 11016                           
 11017                           ;I2C_Soft.c: 92: i2cHighScl();
 11018  00243C  EC54  F012         	call	_i2cHighScl	;wreg free
 11019                           
 11020                           ;I2C_Soft.c: 93: i2cHighSda();
 11021  002440  EC7C  F012         	call	_i2cHighSda	;wreg free
 11022  002444  0012               	return		;funcret
 11023  002446                     __end_of_I2C_Stop:
 11024                           	opt stack 0
 11025                           tblptru	equ	0xFF8
 11026                           tblptrh	equ	0xFF7
 11027                           tblptrl	equ	0xFF6
 11028                           tablat	equ	0xFF5
 11029                           prodh	equ	0xFF4
 11030                           prodl	equ	0xFF3
 11031                           intcon	equ	0xFF2
 11032                           intcon2	equ	0xFF1
 11033                           postinc0	equ	0xFEE
 11034                           wreg	equ	0xFE8
 11035                           postdec1	equ	0xFE5
 11036                           fsr1l	equ	0xFE1
 11037                           indf2	equ	0xFDF
 11038                           postinc2	equ	0xFDE
 11039                           postdec2	equ	0xFDD
 11040                           fsr2h	equ	0xFDA
 11041                           fsr2l	equ	0xFD9
 11042                           status	equ	0xFD8
 11043                           
 11044 ;; *************** function _I2C_Start *****************
 11045 ;; Defined at:
 11046 ;;		line 71 in file "I2C_Soft.c"
 11047 ;; Parameters:    Size  Location     Type
 11048 ;;		None
 11049 ;; Auto vars:     Size  Location     Type
 11050 ;;		None
 11051 ;; Return value:  Size  Location     Type
 11052 ;;		None               void
 11053 ;; Registers used:
 11054 ;;		wreg, cstack
 11055 ;; Tracked objects:
 11056 ;;		On entry : 0/0
 11057 ;;		On exit  : 0/0
 11058 ;;		Unchanged: 0/0
 11059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11060 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11061 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11062 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11063 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11064 ;;Total ram usage:        0 bytes
 11065 ;; Hardware stack levels used:    1
 11066 ;; Hardware stack levels required when called:    4
 11067 ;; This function calls:
 11068 ;;		_i2cHighScl
 11069 ;;		_i2cHighSda
 11070 ;;		_i2cLowScl
 11071 ;;		_i2cLowSda
 11072 ;; This function is called by:
 11073 ;;		_I2C_Write_Cmd_Only
 11074 ;;		_I2C_Write_Cmd_Write_Data
 11075 ;;		_DS1621_Read_Temp
 11076 ;;		_DS3231_Read_Time
 11077 ;;		_DS3231_Setup_Time
 11078 ;;		_I2C_Write_Address_Read_One_Byte
 11079 ;;		_I2C_Write_Address_Write_One_Byte
 11080 ;;		_I2C_Write_Cmd_Read_One_Byte
 11081 ;; This function uses a non-reentrant model
 11082 ;;
 11083                           
 11084                           	psect	text62
 11085  002446                     __ptext62:
 11086                           	opt stack 0
 11087  002446                     _I2C_Start:
 11088                           	opt stack 23
 11089                           
 11090                           ;I2C_Soft.c: 73: i2cHighSda();
 11091                           
 11092                           ;incstack = 0
 11093  002446  EC7C  F012         	call	_i2cHighSda	;wreg free
 11094                           
 11095                           ;I2C_Soft.c: 74: i2cHighScl();
 11096  00244A  EC54  F012         	call	_i2cHighScl	;wreg free
 11097                           
 11098                           ;I2C_Soft.c: 75: i2cLowSda();
 11099  00244E  EC6F  F012         	call	_i2cLowSda	;wreg free
 11100                           
 11101                           ;I2C_Soft.c: 76: i2cLowScl();
 11102  002452  EC78  F012         	call	_i2cLowScl	;wreg free
 11103  002456  0012               	return		;funcret
 11104  002458                     __end_of_I2C_Start:
 11105                           	opt stack 0
 11106                           tblptru	equ	0xFF8
 11107                           tblptrh	equ	0xFF7
 11108                           tblptrl	equ	0xFF6
 11109                           tablat	equ	0xFF5
 11110                           prodh	equ	0xFF4
 11111                           prodl	equ	0xFF3
 11112                           intcon	equ	0xFF2
 11113                           intcon2	equ	0xFF1
 11114                           postinc0	equ	0xFEE
 11115                           wreg	equ	0xFE8
 11116                           postdec1	equ	0xFE5
 11117                           fsr1l	equ	0xFE1
 11118                           indf2	equ	0xFDF
 11119                           postinc2	equ	0xFDE
 11120                           postdec2	equ	0xFDD
 11121                           fsr2h	equ	0xFDA
 11122                           fsr2l	equ	0xFD9
 11123                           status	equ	0xFD8
 11124                           
 11125 ;; *************** function _I2C_Read *****************
 11126 ;; Defined at:
 11127 ;;		line 20 in file "I2C_Soft.c"
 11128 ;; Parameters:    Size  Location     Type
 11129 ;;  ack             1    wreg     unsigned char 
 11130 ;; Auto vars:     Size  Location     Type
 11131 ;;  ack             1   16[COMRAM] unsigned char 
 11132 ;;  inByte          1   18[COMRAM] unsigned char 
 11133 ;;  n               1   17[COMRAM] unsigned char 
 11134 ;; Return value:  Size  Location     Type
 11135 ;;                  1    wreg      unsigned char 
 11136 ;; Registers used:
 11137 ;;		wreg, status,2, status,0, cstack
 11138 ;; Tracked objects:
 11139 ;;		On entry : 0/0
 11140 ;;		On exit  : 0/0
 11141 ;;		Unchanged: 0/0
 11142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11143 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11144 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11145 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11146 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11147 ;;Total ram usage:        3 bytes
 11148 ;; Hardware stack levels used:    1
 11149 ;; Hardware stack levels required when called:    5
 11150 ;; This function calls:
 11151 ;;		_i2cAck
 11152 ;;		_i2cHighScl
 11153 ;;		_i2cHighSda
 11154 ;;		_i2cLowScl
 11155 ;;		_i2cNack
 11156 ;; This function is called by:
 11157 ;;		_DS1621_Read_Temp
 11158 ;;		_DS3231_Read_Time
 11159 ;;		_I2C_Write_Address_Read_One_Byte
 11160 ;;		_I2C_Write_Cmd_Read_One_Byte
 11161 ;; This function uses a non-reentrant model
 11162 ;;
 11163                           
 11164                           	psect	text63
 11165  001FF4                     __ptext63:
 11166                           	opt stack 0
 11167  001FF4                     _I2C_Read:
 11168                           	opt stack 24
 11169                           
 11170                           ;incstack = 0
 11171                           ;I2C_Read@ack stored from wreg
 11172  001FF4  6E11               	movwf	I2C_Read@ack,c
 11173                           
 11174                           ;I2C_Soft.c: 22: unsigned char inByte, n;
 11175                           ;I2C_Soft.c: 23: i2cHighSda();
 11176  001FF6  EC7C  F012         	call	_i2cHighSda	;wreg free
 11177                           
 11178                           ;I2C_Soft.c: 24: for (n=0; n<8; n++)
 11179  001FFA  0E00               	movlw	0
 11180  001FFC  6E12               	movwf	I2C_Read@n,c
 11181  001FFE                     l5853:
 11182  001FFE  0E07               	movlw	7
 11183  002000  6412               	cpfsgt	I2C_Read@n,c
 11184  002002  D001               	goto	l5857
 11185  002004  D00F               	goto	l5871
 11186  002006                     l5857:
 11187                           
 11188                           ;I2C_Soft.c: 25: {
 11189                           ;I2C_Soft.c: 26: i2cHighScl();
 11190  002006  EC54  F012         	call	_i2cHighScl	;wreg free
 11191                           
 11192                           ;I2C_Soft.c: 28: if (PORTBbits.RB5)
 11193  00200A  AA81               	btfss	3969,5,c	;volatile
 11194  00200C  D003               	goto	l5863
 11195                           
 11196                           ;I2C_Soft.c: 29: inByte = (inByte << 1) | 0x01;
 11197  00200E  80D8               	bsf	status,0,c
 11198  002010  3613               	rlcf	I2C_Read@inByte,f,c
 11199  002012  D004               	goto	l5865
 11200  002014                     l5863:
 11201                           
 11202                           ;I2C_Soft.c: 30: else
 11203                           ;I2C_Soft.c: 31: inByte = inByte << 1;
 11204  002014  5013               	movf	I2C_Read@inByte,w,c
 11205  002016  2413               	addwf	I2C_Read@inByte,w,c
 11206  002018  6E13               	movwf	I2C_Read@inByte,c
 11207  00201A  D000               	goto	l5865
 11208  00201C                     l5865:
 11209                           
 11210                           ;I2C_Soft.c: 32: i2cLowScl();
 11211  00201C  EC78  F012         	call	_i2cLowScl	;wreg free
 11212  002020  2A12               	incf	I2C_Read@n,f,c
 11213  002022  D7ED               	goto	l5853
 11214  002024                     l5871:
 11215                           
 11216                           ;I2C_Soft.c: 33: }
 11217                           ;I2C_Soft.c: 34: if (ack) i2cAck();
 11218  002024  5011               	movf	I2C_Read@ack,w,c
 11219  002026  B4D8               	btfsc	status,2,c
 11220  002028  D003               	goto	l5875
 11221  00202A  EC2C  F012         	call	_i2cAck	;wreg free
 11222  00202E  D003               	goto	l5877
 11223  002030                     l5875:
 11224                           
 11225                           ;I2C_Soft.c: 35: else i2cNack();
 11226  002030  EC6A  F012         	call	_i2cNack	;wreg free
 11227  002034  D000               	goto	l5877
 11228  002036                     l5877:
 11229                           
 11230                           ;I2C_Soft.c: 38: return(inByte);
 11231  002036  5013               	movf	I2C_Read@inByte,w,c
 11232  002038  D000               	goto	l190
 11233  00203A                     l190:
 11234  00203A  0012               	return		;funcret
 11235  00203C                     __end_of_I2C_Read:
 11236                           	opt stack 0
 11237                           tblptru	equ	0xFF8
 11238                           tblptrh	equ	0xFF7
 11239                           tblptrl	equ	0xFF6
 11240                           tablat	equ	0xFF5
 11241                           prodh	equ	0xFF4
 11242                           prodl	equ	0xFF3
 11243                           intcon	equ	0xFF2
 11244                           intcon2	equ	0xFF1
 11245                           postinc0	equ	0xFEE
 11246                           wreg	equ	0xFE8
 11247                           postdec1	equ	0xFE5
 11248                           fsr1l	equ	0xFE1
 11249                           indf2	equ	0xFDF
 11250                           postinc2	equ	0xFDE
 11251                           postdec2	equ	0xFDD
 11252                           fsr2h	equ	0xFDA
 11253                           fsr2l	equ	0xFD9
 11254                           status	equ	0xFD8
 11255                           
 11256 ;; *************** function _i2cNack *****************
 11257 ;; Defined at:
 11258 ;;		line 57 in file "I2C_Soft.c"
 11259 ;; Parameters:    Size  Location     Type
 11260 ;;		None
 11261 ;; Auto vars:     Size  Location     Type
 11262 ;;		None
 11263 ;; Return value:  Size  Location     Type
 11264 ;;		None               void
 11265 ;; Registers used:
 11266 ;;		wreg, cstack
 11267 ;; Tracked objects:
 11268 ;;		On entry : 0/0
 11269 ;;		On exit  : 0/0
 11270 ;;		Unchanged: 0/0
 11271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11272 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11273 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11274 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11275 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11276 ;;Total ram usage:        0 bytes
 11277 ;; Hardware stack levels used:    1
 11278 ;; Hardware stack levels required when called:    4
 11279 ;; This function calls:
 11280 ;;		_i2cHighScl
 11281 ;;		_i2cLowScl
 11282 ;; This function is called by:
 11283 ;;		_I2C_Read
 11284 ;; This function uses a non-reentrant model
 11285 ;;
 11286                           
 11287                           	psect	text64
 11288  0024D4                     __ptext64:
 11289                           	opt stack 0
 11290  0024D4                     _i2cNack:
 11291                           	opt stack 24
 11292                           
 11293                           ;I2C_Soft.c: 59: i2cHighScl();
 11294                           
 11295                           ;incstack = 0
 11296  0024D4  EC54  F012         	call	_i2cHighScl	;wreg free
 11297                           
 11298                           ;I2C_Soft.c: 60: i2cLowScl();
 11299  0024D8  EC78  F012         	call	_i2cLowScl	;wreg free
 11300  0024DC  0012               	return		;funcret
 11301  0024DE                     __end_of_i2cNack:
 11302                           	opt stack 0
 11303                           tblptru	equ	0xFF8
 11304                           tblptrh	equ	0xFF7
 11305                           tblptrl	equ	0xFF6
 11306                           tablat	equ	0xFF5
 11307                           prodh	equ	0xFF4
 11308                           prodl	equ	0xFF3
 11309                           intcon	equ	0xFF2
 11310                           intcon2	equ	0xFF1
 11311                           postinc0	equ	0xFEE
 11312                           wreg	equ	0xFE8
 11313                           postdec1	equ	0xFE5
 11314                           fsr1l	equ	0xFE1
 11315                           indf2	equ	0xFDF
 11316                           postinc2	equ	0xFDE
 11317                           postdec2	equ	0xFDD
 11318                           fsr2h	equ	0xFDA
 11319                           fsr2l	equ	0xFD9
 11320                           status	equ	0xFD8
 11321                           
 11322 ;; *************** function _i2cAck *****************
 11323 ;; Defined at:
 11324 ;;		line 63 in file "I2C_Soft.c"
 11325 ;; Parameters:    Size  Location     Type
 11326 ;;		None
 11327 ;; Auto vars:     Size  Location     Type
 11328 ;;		None
 11329 ;; Return value:  Size  Location     Type
 11330 ;;		None               void
 11331 ;; Registers used:
 11332 ;;		wreg, cstack
 11333 ;; Tracked objects:
 11334 ;;		On entry : 0/0
 11335 ;;		On exit  : 0/0
 11336 ;;		Unchanged: 0/0
 11337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11338 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11339 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11340 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11341 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11342 ;;Total ram usage:        0 bytes
 11343 ;; Hardware stack levels used:    1
 11344 ;; Hardware stack levels required when called:    4
 11345 ;; This function calls:
 11346 ;;		_i2cHighScl
 11347 ;;		_i2cHighSda
 11348 ;;		_i2cLowScl
 11349 ;;		_i2cLowSda
 11350 ;; This function is called by:
 11351 ;;		_I2C_Read
 11352 ;; This function uses a non-reentrant model
 11353 ;;
 11354                           
 11355                           	psect	text65
 11356  002458                     __ptext65:
 11357                           	opt stack 0
 11358  002458                     _i2cAck:
 11359                           	opt stack 24
 11360                           
 11361                           ;I2C_Soft.c: 65: i2cLowSda();
 11362                           
 11363                           ;incstack = 0
 11364  002458  EC6F  F012         	call	_i2cLowSda	;wreg free
 11365                           
 11366                           ;I2C_Soft.c: 66: i2cHighScl();
 11367  00245C  EC54  F012         	call	_i2cHighScl	;wreg free
 11368                           
 11369                           ;I2C_Soft.c: 67: i2cLowScl();
 11370  002460  EC78  F012         	call	_i2cLowScl	;wreg free
 11371                           
 11372                           ;I2C_Soft.c: 68: i2cHighSda();
 11373  002464  EC7C  F012         	call	_i2cHighSda	;wreg free
 11374  002468  0012               	return		;funcret
 11375  00246A                     __end_of_i2cAck:
 11376                           	opt stack 0
 11377                           tblptru	equ	0xFF8
 11378                           tblptrh	equ	0xFF7
 11379                           tblptrl	equ	0xFF6
 11380                           tablat	equ	0xFF5
 11381                           prodh	equ	0xFF4
 11382                           prodl	equ	0xFF3
 11383                           intcon	equ	0xFF2
 11384                           intcon2	equ	0xFF1
 11385                           postinc0	equ	0xFEE
 11386                           wreg	equ	0xFE8
 11387                           postdec1	equ	0xFE5
 11388                           fsr1l	equ	0xFE1
 11389                           indf2	equ	0xFDF
 11390                           postinc2	equ	0xFDE
 11391                           postdec2	equ	0xFDD
 11392                           fsr2h	equ	0xFDA
 11393                           fsr2l	equ	0xFD9
 11394                           status	equ	0xFD8
 11395                           
 11396 ;; *************** function _I2C_ReStart *****************
 11397 ;; Defined at:
 11398 ;;		line 79 in file "I2C_Soft.c"
 11399 ;; Parameters:    Size  Location     Type
 11400 ;;		None
 11401 ;; Auto vars:     Size  Location     Type
 11402 ;;		None
 11403 ;; Return value:  Size  Location     Type
 11404 ;;		None               void
 11405 ;; Registers used:
 11406 ;;		wreg, cstack
 11407 ;; Tracked objects:
 11408 ;;		On entry : 0/0
 11409 ;;		On exit  : 0/0
 11410 ;;		Unchanged: 0/0
 11411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11412 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11413 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11415 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11416 ;;Total ram usage:        0 bytes
 11417 ;; Hardware stack levels used:    1
 11418 ;; Hardware stack levels required when called:    4
 11419 ;; This function calls:
 11420 ;;		_i2cHighScl
 11421 ;;		_i2cHighSda
 11422 ;;		_i2cLowScl
 11423 ;;		_i2cLowSda
 11424 ;; This function is called by:
 11425 ;;		_DS1621_Read_Temp
 11426 ;;		_DS3231_Read_Time
 11427 ;;		_I2C_Write_Address_Read_One_Byte
 11428 ;;		_I2C_Write_Cmd_Read_One_Byte
 11429 ;; This function uses a non-reentrant model
 11430 ;;
 11431                           
 11432                           	psect	text66
 11433  0023D2                     __ptext66:
 11434                           	opt stack 0
 11435  0023D2                     _I2C_ReStart:
 11436                           	opt stack 25
 11437                           
 11438                           ;I2C_Soft.c: 81: i2cLowScl();
 11439                           
 11440                           ;incstack = 0
 11441  0023D2  EC78  F012         	call	_i2cLowScl	;wreg free
 11442                           
 11443                           ;I2C_Soft.c: 82: i2cHighSda();
 11444  0023D6  EC7C  F012         	call	_i2cHighSda	;wreg free
 11445                           
 11446                           ;I2C_Soft.c: 83: i2cHighScl();
 11447  0023DA  EC54  F012         	call	_i2cHighScl	;wreg free
 11448                           
 11449                           ;I2C_Soft.c: 84: i2cLowSda();
 11450  0023DE  EC6F  F012         	call	_i2cLowSda	;wreg free
 11451                           
 11452                           ;I2C_Soft.c: 85: i2cLowScl();
 11453  0023E2  EC78  F012         	call	_i2cLowScl	;wreg free
 11454  0023E6  0012               	return		;funcret
 11455  0023E8                     __end_of_I2C_ReStart:
 11456                           	opt stack 0
 11457                           tblptru	equ	0xFF8
 11458                           tblptrh	equ	0xFF7
 11459                           tblptrl	equ	0xFF6
 11460                           tablat	equ	0xFF5
 11461                           prodh	equ	0xFF4
 11462                           prodl	equ	0xFF3
 11463                           intcon	equ	0xFF2
 11464                           intcon2	equ	0xFF1
 11465                           postinc0	equ	0xFEE
 11466                           wreg	equ	0xFE8
 11467                           postdec1	equ	0xFE5
 11468                           fsr1l	equ	0xFE1
 11469                           indf2	equ	0xFDF
 11470                           postinc2	equ	0xFDE
 11471                           postdec2	equ	0xFDD
 11472                           fsr2h	equ	0xFDA
 11473                           fsr2l	equ	0xFD9
 11474                           status	equ	0xFD8
 11475                           
 11476 ;; *************** function _i2cLowSda *****************
 11477 ;; Defined at:
 11478 ;;		line 102 in file "I2C_Soft.c"
 11479 ;; Parameters:    Size  Location     Type
 11480 ;;		None
 11481 ;; Auto vars:     Size  Location     Type
 11482 ;;		None
 11483 ;; Return value:  Size  Location     Type
 11484 ;;		None               void
 11485 ;; Registers used:
 11486 ;;		None
 11487 ;; Tracked objects:
 11488 ;;		On entry : 0/0
 11489 ;;		On exit  : 0/0
 11490 ;;		Unchanged: 0/0
 11491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11492 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11493 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11494 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11495 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11496 ;;Total ram usage:        0 bytes
 11497 ;; Hardware stack levels used:    1
 11498 ;; Hardware stack levels required when called:    3
 11499 ;; This function calls:
 11500 ;;		Nothing
 11501 ;; This function is called by:
 11502 ;;		_I2C_Write
 11503 ;;		_i2cAck
 11504 ;;		_I2C_Start
 11505 ;;		_I2C_ReStart
 11506 ;;		_I2C_Stop
 11507 ;; This function uses a non-reentrant model
 11508 ;;
 11509                           
 11510                           	psect	text67
 11511  0024DE                     __ptext67:
 11512                           	opt stack 0
 11513  0024DE                     _i2cLowSda:
 11514                           	opt stack 23
 11515                           
 11516                           ;I2C_Soft.c: 104: PORTBbits.RB5 = 0;
 11517                           
 11518                           ;incstack = 0
 11519  0024DE  9A81               	bcf	3969,5,c	;volatile
 11520                           
 11521                           ;I2C_Soft.c: 105: TRISBbits.RB5 = 0;
 11522  0024E0  9A93               	bcf	3987,5,c	;volatile
 11523                           
 11524                           ;I2C_Soft.c: 106: _delay((unsigned long)((2)*(8000000/4000000.0)));
 11525  0024E2  D000               	nop2		;2 cycle nop
 11526  0024E4  D000               	nop2		;2 cycle nop
 11527  0024E6  0012               	return		;funcret
 11528  0024E8                     __end_of_i2cLowSda:
 11529                           	opt stack 0
 11530                           tblptru	equ	0xFF8
 11531                           tblptrh	equ	0xFF7
 11532                           tblptrl	equ	0xFF6
 11533                           tablat	equ	0xFF5
 11534                           prodh	equ	0xFF4
 11535                           prodl	equ	0xFF3
 11536                           intcon	equ	0xFF2
 11537                           intcon2	equ	0xFF1
 11538                           postinc0	equ	0xFEE
 11539                           wreg	equ	0xFE8
 11540                           postdec1	equ	0xFE5
 11541                           fsr1l	equ	0xFE1
 11542                           indf2	equ	0xFDF
 11543                           postinc2	equ	0xFDE
 11544                           postdec2	equ	0xFDD
 11545                           fsr2h	equ	0xFDA
 11546                           fsr2l	equ	0xFD9
 11547                           status	equ	0xFD8
 11548                           
 11549 ;; *************** function _i2cLowScl *****************
 11550 ;; Defined at:
 11551 ;;		line 115 in file "I2C_Soft.c"
 11552 ;; Parameters:    Size  Location     Type
 11553 ;;		None
 11554 ;; Auto vars:     Size  Location     Type
 11555 ;;		None
 11556 ;; Return value:  Size  Location     Type
 11557 ;;		None               void
 11558 ;; Registers used:
 11559 ;;		None
 11560 ;; Tracked objects:
 11561 ;;		On entry : 0/0
 11562 ;;		On exit  : 0/0
 11563 ;;		Unchanged: 0/0
 11564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11565 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11566 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11567 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11568 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11569 ;;Total ram usage:        0 bytes
 11570 ;; Hardware stack levels used:    1
 11571 ;; Hardware stack levels required when called:    3
 11572 ;; This function calls:
 11573 ;;		Nothing
 11574 ;; This function is called by:
 11575 ;;		_I2C_Read
 11576 ;;		_I2C_Write
 11577 ;;		_i2cNack
 11578 ;;		_i2cAck
 11579 ;;		_I2C_Start
 11580 ;;		_I2C_ReStart
 11581 ;;		_I2C_Stop
 11582 ;; This function uses a non-reentrant model
 11583 ;;
 11584                           
 11585                           	psect	text68
 11586  0024F0                     __ptext68:
 11587                           	opt stack 0
 11588  0024F0                     _i2cLowScl:
 11589                           	opt stack 23
 11590                           
 11591                           ;I2C_Soft.c: 117: PORTBbits.RB4 = 0;
 11592                           
 11593                           ;incstack = 0
 11594  0024F0  9881               	bcf	3969,4,c	;volatile
 11595                           
 11596                           ;I2C_Soft.c: 118: TRISBbits.RB4 = 0;
 11597  0024F2  9893               	bcf	3987,4,c	;volatile
 11598                           
 11599                           ;I2C_Soft.c: 119: _delay((unsigned long)((1)*(8000000/4000000.0)));
 11600  0024F4  D000               	nop2		;2 cycle nop
 11601  0024F6  0012               	return		;funcret
 11602  0024F8                     __end_of_i2cLowScl:
 11603                           	opt stack 0
 11604                           tblptru	equ	0xFF8
 11605                           tblptrh	equ	0xFF7
 11606                           tblptrl	equ	0xFF6
 11607                           tablat	equ	0xFF5
 11608                           prodh	equ	0xFF4
 11609                           prodl	equ	0xFF3
 11610                           intcon	equ	0xFF2
 11611                           intcon2	equ	0xFF1
 11612                           postinc0	equ	0xFEE
 11613                           wreg	equ	0xFE8
 11614                           postdec1	equ	0xFE5
 11615                           fsr1l	equ	0xFE1
 11616                           indf2	equ	0xFDF
 11617                           postinc2	equ	0xFDE
 11618                           postdec2	equ	0xFDD
 11619                           fsr2h	equ	0xFDA
 11620                           fsr2l	equ	0xFD9
 11621                           status	equ	0xFD8
 11622                           
 11623 ;; *************** function _i2cHighSda *****************
 11624 ;; Defined at:
 11625 ;;		line 96 in file "I2C_Soft.c"
 11626 ;; Parameters:    Size  Location     Type
 11627 ;;		None
 11628 ;; Auto vars:     Size  Location     Type
 11629 ;;		None
 11630 ;; Return value:  Size  Location     Type
 11631 ;;		None               void
 11632 ;; Registers used:
 11633 ;;		None
 11634 ;; Tracked objects:
 11635 ;;		On entry : 0/0
 11636 ;;		On exit  : 0/0
 11637 ;;		Unchanged: 0/0
 11638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11639 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11640 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11641 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11642 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11643 ;;Total ram usage:        0 bytes
 11644 ;; Hardware stack levels used:    1
 11645 ;; Hardware stack levels required when called:    3
 11646 ;; This function calls:
 11647 ;;		Nothing
 11648 ;; This function is called by:
 11649 ;;		_I2C_Init
 11650 ;;		_I2C_Read
 11651 ;;		_I2C_Write
 11652 ;;		_i2cAck
 11653 ;;		_I2C_Start
 11654 ;;		_I2C_ReStart
 11655 ;;		_I2C_Stop
 11656 ;; This function uses a non-reentrant model
 11657 ;;
 11658                           
 11659                           	psect	text69
 11660  0024F8                     __ptext69:
 11661                           	opt stack 0
 11662  0024F8                     _i2cHighSda:
 11663                           	opt stack 25
 11664                           
 11665                           ;I2C_Soft.c: 98: TRISBbits.RB5 = 1;
 11666                           
 11667                           ;incstack = 0
 11668  0024F8  8A93               	bsf	3987,5,c	;volatile
 11669                           
 11670                           ;I2C_Soft.c: 99: _delay((unsigned long)((2)*(8000000/4000000.0)));
 11671  0024FA  D000               	nop2		;2 cycle nop
 11672  0024FC  D000               	nop2		;2 cycle nop
 11673  0024FE  0012               	return		;funcret
 11674  002500                     __end_of_i2cHighSda:
 11675                           	opt stack 0
 11676                           tblptru	equ	0xFF8
 11677                           tblptrh	equ	0xFF7
 11678                           tblptrl	equ	0xFF6
 11679                           tablat	equ	0xFF5
 11680                           prodh	equ	0xFF4
 11681                           prodl	equ	0xFF3
 11682                           intcon	equ	0xFF2
 11683                           intcon2	equ	0xFF1
 11684                           postinc0	equ	0xFEE
 11685                           wreg	equ	0xFE8
 11686                           postdec1	equ	0xFE5
 11687                           fsr1l	equ	0xFE1
 11688                           indf2	equ	0xFDF
 11689                           postinc2	equ	0xFDE
 11690                           postdec2	equ	0xFDD
 11691                           fsr2h	equ	0xFDA
 11692                           fsr2l	equ	0xFD9
 11693                           status	equ	0xFD8
 11694                           
 11695 ;; *************** function _i2cHighScl *****************
 11696 ;; Defined at:
 11697 ;;		line 109 in file "I2C_Soft.c"
 11698 ;; Parameters:    Size  Location     Type
 11699 ;;		None
 11700 ;; Auto vars:     Size  Location     Type
 11701 ;;		None
 11702 ;; Return value:  Size  Location     Type
 11703 ;;		None               void
 11704 ;; Registers used:
 11705 ;;		wreg
 11706 ;; Tracked objects:
 11707 ;;		On entry : 0/0
 11708 ;;		On exit  : 0/0
 11709 ;;		Unchanged: 0/0
 11710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11711 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11712 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11713 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11714 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11715 ;;Total ram usage:        0 bytes
 11716 ;; Hardware stack levels used:    1
 11717 ;; Hardware stack levels required when called:    3
 11718 ;; This function calls:
 11719 ;;		Nothing
 11720 ;; This function is called by:
 11721 ;;		_I2C_Init
 11722 ;;		_I2C_Read
 11723 ;;		_I2C_Write
 11724 ;;		_i2cNack
 11725 ;;		_i2cAck
 11726 ;;		_I2C_Start
 11727 ;;		_I2C_ReStart
 11728 ;;		_I2C_Stop
 11729 ;; This function uses a non-reentrant model
 11730 ;;
 11731                           
 11732                           	psect	text70
 11733  0024A8                     __ptext70:
 11734                           	opt stack 0
 11735  0024A8                     _i2cHighScl:
 11736                           	opt stack 25
 11737                           
 11738                           ;I2C_Soft.c: 111: TRISBbits.RB4 = 1;
 11739                           
 11740                           ;incstack = 0
 11741  0024A8  8893               	bsf	3987,4,c	;volatile
 11742                           
 11743                           ;I2C_Soft.c: 112: _delay((unsigned long)((10)*(8000000/4000000.0)));
 11744  0024AA  0E06               	movlw	6
 11745  0024AC                     u5587:
 11746  0024AC  2EE8               	decfsz	wreg,f,c
 11747  0024AE  D7FE               	goto	u5587
 11748  0024B0  D000               	nop2		;nop
 11749  0024B2  0012               	return		;funcret
 11750  0024B4                     __end_of_i2cHighScl:
 11751                           	opt stack 0
 11752                           tblptru	equ	0xFF8
 11753                           tblptrh	equ	0xFF7
 11754                           tblptrl	equ	0xFF6
 11755                           tablat	equ	0xFF5
 11756                           prodh	equ	0xFF4
 11757                           prodl	equ	0xFF3
 11758                           intcon	equ	0xFF2
 11759                           intcon2	equ	0xFF1
 11760                           postinc0	equ	0xFEE
 11761                           wreg	equ	0xFE8
 11762                           postdec1	equ	0xFE5
 11763                           fsr1l	equ	0xFE1
 11764                           indf2	equ	0xFDF
 11765                           postinc2	equ	0xFDE
 11766                           postdec2	equ	0xFDD
 11767                           fsr2h	equ	0xFDA
 11768                           fsr2l	equ	0xFD9
 11769                           status	equ	0xFD8
 11770                           
 11771 ;; *************** function _chkisr *****************
 11772 ;; Defined at:
 11773 ;;		line 30 in file "Interrupt.c"
 11774 ;; Parameters:    Size  Location     Type
 11775 ;;		None
 11776 ;; Auto vars:     Size  Location     Type
 11777 ;;		None
 11778 ;; Return value:  Size  Location     Type
 11779 ;;		None               void
 11780 ;; Registers used:
 11781 ;;		wreg, status,2, status,0, cstack
 11782 ;; Tracked objects:
 11783 ;;		On entry : 0/0
 11784 ;;		On exit  : 0/0
 11785 ;;		Unchanged: 0/0
 11786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11787 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11788 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11789 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11790 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11791 ;;Total ram usage:       14 bytes
 11792 ;; Hardware stack levels used:    1
 11793 ;; Hardware stack levels required when called:    2
 11794 ;; This function calls:
 11795 ;;		_INT0_isr
 11796 ;;		_TIMER1_isr
 11797 ;; This function is called by:
 11798 ;;		Interrupt level 2
 11799 ;; This function uses a non-reentrant model
 11800 ;;
 11801                           
 11802                           	psect	intcode
 11803  000008                     __pintcode:
 11804                           	opt stack 0
 11805  000008                     _chkisr:
 11806                           	opt stack 20
 11807                           
 11808                           ;incstack = 0
 11809  000008  CFFA F003          	movff	pclath,??_chkisr
 11810  00000C  CFFB F004          	movff	pclatu,??_chkisr+1
 11811  000010  CFE9 F005          	movff	fsr0l,??_chkisr+2
 11812  000014  ED83  F00D         	call	int_func,f	;refresh shadow registers
 11813                           pclatu	equ	0xFFB
 11814                           pclath	equ	0xFFA
 11815                           tblptru	equ	0xFF8
 11816                           tblptrh	equ	0xFF7
 11817                           tblptrl	equ	0xFF6
 11818                           tablat	equ	0xFF5
 11819                           prodh	equ	0xFF4
 11820                           prodl	equ	0xFF3
 11821                           intcon	equ	0xFF2
 11822                           intcon2	equ	0xFF1
 11823                           postinc0	equ	0xFEE
 11824                           fsr0l	equ	0xFE9
 11825                           wreg	equ	0xFE8
 11826                           postdec1	equ	0xFE5
 11827                           fsr1l	equ	0xFE1
 11828                           indf2	equ	0xFDF
 11829                           postinc2	equ	0xFDE
 11830                           postdec2	equ	0xFDD
 11831                           fsr2h	equ	0xFDA
 11832                           fsr2l	equ	0xFD9
 11833                           status	equ	0xFD8
 11834                           
 11835                           	psect	intcode_body
 11836  001B06                     __pintcode_body:
 11837                           	opt stack 20
 11838  001B06                     int_func:
 11839                           	opt stack 20
 11840  001B06  0006               	pop		; remove dummy address from shadow register refresh
 11841  001B08  CFEA F006          	movff	fsr0h,??_chkisr+3
 11842  001B0C  CFE1 F007          	movff	fsr1l,??_chkisr+4
 11843  001B10  CFE2 F008          	movff	fsr1h,??_chkisr+5
 11844  001B14  CFD9 F009          	movff	fsr2l,??_chkisr+6
 11845  001B18  CFDA F00A          	movff	fsr2h,??_chkisr+7
 11846  001B1C  CFF3 F00B          	movff	prodl,??_chkisr+8
 11847  001B20  CFF4 F00C          	movff	prodh,??_chkisr+9
 11848  001B24  CFF6 F00D          	movff	tblptrl,??_chkisr+10
 11849  001B28  CFF7 F00E          	movff	tblptrh,??_chkisr+11
 11850  001B2C  CFF8 F00F          	movff	tblptru,??_chkisr+12
 11851  001B30  CFF5 F010          	movff	tablat,??_chkisr+13
 11852                           
 11853                           ;Interrupt.c: 32: if (PIR1bits.TMR1IF == 1) TIMER1_isr();
 11854  001B34  A09E               	btfss	3998,0,c	;volatile
 11855  001B36  D003               	goto	i2l4883
 11856  001B38  EC5A  F012         	call	_TIMER1_isr	;wreg free
 11857  001B3C  D000               	goto	i2l4883
 11858  001B3E                     i2l4883:
 11859                           
 11860                           ;Interrupt.c: 33: if (INTCONbits.INT0IF == 1) INT0_isr();
 11861  001B3E  A2F2               	btfss	intcon,1,c	;volatile
 11862  001B40  D003               	goto	i2l265
 11863  001B42  ECE4  F006         	call	_INT0_isr	;wreg free
 11864  001B46  D000               	goto	i2l265
 11865  001B48                     i2l265:
 11866  001B48  C010  FFF5         	movff	??_chkisr+13,tablat
 11867  001B4C  C00F  FFF8         	movff	??_chkisr+12,tblptru
 11868  001B50  C00E  FFF7         	movff	??_chkisr+11,tblptrh
 11869  001B54  C00D  FFF6         	movff	??_chkisr+10,tblptrl
 11870  001B58  C00C  FFF4         	movff	??_chkisr+9,prodh
 11871  001B5C  C00B  FFF3         	movff	??_chkisr+8,prodl
 11872  001B60  C00A  FFDA         	movff	??_chkisr+7,fsr2h
 11873  001B64  C009  FFD9         	movff	??_chkisr+6,fsr2l
 11874  001B68  C008  FFE2         	movff	??_chkisr+5,fsr1h
 11875  001B6C  C007  FFE1         	movff	??_chkisr+4,fsr1l
 11876  001B70  C006  FFEA         	movff	??_chkisr+3,fsr0h
 11877  001B74  C005  FFE9         	movff	??_chkisr+2,fsr0l
 11878  001B78  C004  FFFB         	movff	??_chkisr+1,pclatu
 11879  001B7C  C003  FFFA         	movff	??_chkisr,pclath
 11880  001B80  0011               	retfie		f
 11881  001B82                     __end_of_chkisr:
 11882                           	opt stack 0
 11883                           pclatu	equ	0xFFB
 11884                           pclath	equ	0xFFA
 11885                           tblptru	equ	0xFF8
 11886                           tblptrh	equ	0xFF7
 11887                           tblptrl	equ	0xFF6
 11888                           tablat	equ	0xFF5
 11889                           prodh	equ	0xFF4
 11890                           prodl	equ	0xFF3
 11891                           intcon	equ	0xFF2
 11892                           intcon2	equ	0xFF1
 11893                           postinc0	equ	0xFEE
 11894                           fsr0h	equ	0xFEA
 11895                           fsr0l	equ	0xFE9
 11896                           wreg	equ	0xFE8
 11897                           postdec1	equ	0xFE5
 11898                           fsr1h	equ	0xFE2
 11899                           fsr1l	equ	0xFE1
 11900                           indf2	equ	0xFDF
 11901                           postinc2	equ	0xFDE
 11902                           postdec2	equ	0xFDD
 11903                           fsr2h	equ	0xFDA
 11904                           fsr2l	equ	0xFD9
 11905                           status	equ	0xFD8
 11906                           
 11907 ;; *************** function _TIMER1_isr *****************
 11908 ;; Defined at:
 11909 ;;		line 36 in file "Interrupt.c"
 11910 ;; Parameters:    Size  Location     Type
 11911 ;;		None
 11912 ;; Auto vars:     Size  Location     Type
 11913 ;;		None
 11914 ;; Return value:  Size  Location     Type
 11915 ;;		None               void
 11916 ;; Registers used:
 11917 ;;		wreg, status,2
 11918 ;; Tracked objects:
 11919 ;;		On entry : 0/0
 11920 ;;		On exit  : 0/0
 11921 ;;		Unchanged: 0/0
 11922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11923 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11924 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11925 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11926 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11927 ;;Total ram usage:        0 bytes
 11928 ;; Hardware stack levels used:    1
 11929 ;; This function calls:
 11930 ;;		Nothing
 11931 ;; This function is called by:
 11932 ;;		_chkisr
 11933 ;; This function uses a non-reentrant model
 11934 ;;
 11935                           
 11936                           	psect	text72
 11937  0024B4                     __ptext72:
 11938                           	opt stack 0
 11939  0024B4                     _TIMER1_isr:
 11940                           	opt stack 21
 11941                           
 11942                           ;Interrupt.c: 38: Nec_state = 0;
 11943                           
 11944                           ;incstack = 0
 11945  0024B4  0E00               	movlw	0
 11946  0024B6  6E54               	movwf	_Nec_state,c
 11947                           
 11948                           ;Interrupt.c: 39: INTCON2bits.INTEDG0 = 0;
 11949  0024B8  9CF1               	bcf	intcon2,6,c	;volatile
 11950                           
 11951                           ;Interrupt.c: 40: T1CONbits.TMR1ON = 0;
 11952  0024BA  90CD               	bcf	4045,0,c	;volatile
 11953                           
 11954                           ;Interrupt.c: 41: PIR1bits.TMR1IF = 0;
 11955  0024BC  909E               	bcf	3998,0,c	;volatile
 11956  0024BE  0012               	return		;funcret
 11957  0024C0                     __end_of_TIMER1_isr:
 11958                           	opt stack 0
 11959                           pclatu	equ	0xFFB
 11960                           pclath	equ	0xFFA
 11961                           tblptru	equ	0xFF8
 11962                           tblptrh	equ	0xFF7
 11963                           tblptrl	equ	0xFF6
 11964                           tablat	equ	0xFF5
 11965                           prodh	equ	0xFF4
 11966                           prodl	equ	0xFF3
 11967                           intcon	equ	0xFF2
 11968                           intcon2	equ	0xFF1
 11969                           postinc0	equ	0xFEE
 11970                           fsr0h	equ	0xFEA
 11971                           fsr0l	equ	0xFE9
 11972                           wreg	equ	0xFE8
 11973                           postdec1	equ	0xFE5
 11974                           fsr1h	equ	0xFE2
 11975                           fsr1l	equ	0xFE1
 11976                           indf2	equ	0xFDF
 11977                           postinc2	equ	0xFDE
 11978                           postdec2	equ	0xFDD
 11979                           fsr2h	equ	0xFDA
 11980                           fsr2l	equ	0xFD9
 11981                           status	equ	0xFD8
 11982                           
 11983 ;; *************** function _INT0_isr *****************
 11984 ;; Defined at:
 11985 ;;		line 50 in file "Interrupt.c"
 11986 ;; Parameters:    Size  Location     Type
 11987 ;;		None
 11988 ;; Auto vars:     Size  Location     Type
 11989 ;;		None
 11990 ;; Return value:  Size  Location     Type
 11991 ;;		None               void
 11992 ;; Registers used:
 11993 ;;		wreg, status,2, status,0, cstack
 11994 ;; Tracked objects:
 11995 ;;		On entry : 0/0
 11996 ;;		On exit  : 0/0
 11997 ;;		Unchanged: 0/0
 11998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11999 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12000 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12001 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12002 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12003 ;;Total ram usage:        2 bytes
 12004 ;; Hardware stack levels used:    1
 12005 ;; Hardware stack levels required when called:    1
 12006 ;; This function calls:
 12007 ;;		_force_nec_state0
 12008 ;; This function is called by:
 12009 ;;		_chkisr
 12010 ;; This function uses a non-reentrant model
 12011 ;;
 12012                           
 12013                           	psect	text73
 12014  000DC8                     __ptext73:
 12015                           	opt stack 0
 12016  000DC8                     _INT0_isr:
 12017                           	opt stack 20
 12018                           
 12019                           ;Interrupt.c: 52: INTCONbits.INT0IF = 0;
 12020                           
 12021                           ;incstack = 0
 12022  000DC8  92F2               	bcf	intcon,1,c	;volatile
 12023                           
 12024                           ;Interrupt.c: 53: if (Nec_state != 0)
 12025  000DCA  5054               	movf	_Nec_state,w,c
 12026  000DCC  B4D8               	btfsc	status,2,c
 12027  000DCE  D0A3               	goto	i2l4429
 12028                           
 12029                           ;Interrupt.c: 54: {
 12030                           ;Interrupt.c: 55: Time_Elapsed = (TMR1H << 8) | TMR1L;
 12031  000DD0  50CE               	movf	4046,w,c	;volatile
 12032  000DD2  CFCF F001          	movff	4047,??_INT0_isr	;volatile
 12033  000DD6  6A02               	clrf	(??_INT0_isr+1)& (0+255),c
 12034  000DD8  C001  F002         	movff	??_INT0_isr,??_INT0_isr+1
 12035  000DDC  6A01               	clrf	??_INT0_isr,c
 12036  000DDE  1001               	iorwf	??_INT0_isr,w,c
 12037  000DE0  6E4A               	movwf	_Time_Elapsed,c
 12038  000DE2  5002               	movf	??_INT0_isr+1,w,c
 12039  000DE4  6E4B               	movwf	_Time_Elapsed+1,c
 12040                           
 12041                           ;Interrupt.c: 56: TMR1H = 0;
 12042  000DE6  0E00               	movlw	0
 12043  000DE8  6ECF               	movwf	4047,c	;volatile
 12044                           
 12045                           ;Interrupt.c: 57: TMR1L = 0;
 12046  000DEA  0E00               	movlw	0
 12047  000DEC  6ECE               	movwf	4046,c	;volatile
 12048                           
 12049                           ;Interrupt.c: 58: }
 12050                           ;Interrupt.c: 60: switch(Nec_state)
 12051  000DEE  D093               	goto	i2l4429
 12052  000DF0                     i2l4357:
 12053                           
 12054                           ;Interrupt.c: 63: {
 12055                           ;Interrupt.c: 64: TMR1H = 0;
 12056  000DF0  0E00               	movlw	0
 12057  000DF2  6ECF               	movwf	4047,c	;volatile
 12058                           
 12059                           ;Interrupt.c: 65: TMR1L = 0;
 12060  000DF4  0E00               	movlw	0
 12061  000DF6  6ECE               	movwf	4046,c	;volatile
 12062                           
 12063                           ;Interrupt.c: 66: PIR1bits.TMR1IF = 0;
 12064  000DF8  909E               	bcf	3998,0,c	;volatile
 12065                           
 12066                           ;Interrupt.c: 67: T1CON= 0x90;
 12067  000DFA  0E90               	movlw	144
 12068  000DFC  6ECD               	movwf	4045,c	;volatile
 12069                           
 12070                           ;Interrupt.c: 68: T1CONbits.TMR1ON = 1;
 12071  000DFE  80CD               	bsf	4045,0,c	;volatile
 12072                           
 12073                           ;Interrupt.c: 69: bit_count = 0;
 12074  000E00  0E00               	movlw	0
 12075  000E02  6E5A               	movwf	_bit_count,c
 12076                           
 12077                           ;Interrupt.c: 70: Nec_code = 0;
 12078  000E04  0E00               	movlw	0
 12079  000E06  0100               	movlb	0	; () banked
 12080  000E08  6FE6               	movwf	_Nec_code& (0+255),b
 12081  000E0A  0E00               	movlw	0
 12082  000E0C  6FE7               	movwf	(_Nec_code+1)& (0+255),b
 12083  000E0E  0E00               	movlw	0
 12084  000E10  6FE8               	movwf	(_Nec_code+2)& (0+255),b
 12085  000E12  0E00               	movlw	0
 12086  000E14  6FE9               	movwf	(_Nec_code+3)& (0+255),b
 12087                           
 12088                           ;Interrupt.c: 71: Nec_state = 1;
 12089  000E16  0E01               	movlw	1
 12090  000E18  6E54               	movwf	_Nec_state,c
 12091  000E1A  D027               	goto	i2l4387
 12092                           
 12093                           ; BSR set to: 0
 12094                           ;Interrupt.c: 73: return;
 12095                           
 12096                           ; BSR set to: 0
 12097                           ;Interrupt.c: 72: INTCON2bits.INTEDG0 = 1;
 12098  000E1C  D08D               	goto	i2l277
 12099  000E1E                     i2l4367:
 12100                           
 12101                           ;Interrupt.c: 77: {
 12102                           ;Interrupt.c: 78: if (Time_Elapsed > 8500 && Time_Elapsed < 9500)
 12103  000E1E  0E35               	movlw	53
 12104  000E20  5C4A               	subwf	_Time_Elapsed,w,c
 12105  000E22  0E21               	movlw	33
 12106  000E24  584B               	subwfb	_Time_Elapsed+1,w,c
 12107  000E26  A0D8               	btfss	status,0,c
 12108  000E28  D009               	goto	i2l4373
 12109  000E2A  0E1C               	movlw	28
 12110  000E2C  5C4A               	subwf	_Time_Elapsed,w,c
 12111  000E2E  0E25               	movlw	37
 12112  000E30  584B               	subwfb	_Time_Elapsed+1,w,c
 12113  000E32  B0D8               	btfsc	status,0,c
 12114  000E34  D003               	goto	i2l4373
 12115                           
 12116                           ;Interrupt.c: 79: {
 12117                           ;Interrupt.c: 80: Nec_state = 2;
 12118  000E36  0E02               	movlw	2
 12119  000E38  6E54               	movwf	_Nec_state,c
 12120                           
 12121                           ;Interrupt.c: 81: }
 12122  000E3A  D02A               	goto	i2l4399
 12123  000E3C                     i2l4373:
 12124                           
 12125                           ;Interrupt.c: 82: else
 12126                           ;Interrupt.c: 83: {
 12127                           ;Interrupt.c: 84: force_nec_state0();
 12128  000E3C  EC80  F012         	call	_force_nec_state0	;wreg free
 12129  000E40  D027               	goto	i2l4399
 12130  000E42  D026               	goto	i2l4399
 12131                           
 12132                           ;Interrupt.c: 87: return;
 12133                           
 12134                           ;Interrupt.c: 85: }
 12135                           ;Interrupt.c: 86: INTCON2bits.INTEDG0 = 0;
 12136  000E44  D079               	goto	i2l277
 12137  000E46                     i2l4379:
 12138                           
 12139                           ;Interrupt.c: 91: {
 12140                           ;Interrupt.c: 92: if (Time_Elapsed > 4000 && Time_Elapsed < 5000 )
 12141  000E46  0EA1               	movlw	161
 12142  000E48  5C4A               	subwf	_Time_Elapsed,w,c
 12143  000E4A  0E0F               	movlw	15
 12144  000E4C  584B               	subwfb	_Time_Elapsed+1,w,c
 12145  000E4E  A0D8               	btfss	status,0,c
 12146  000E50  D009               	goto	i2l4385
 12147  000E52  0E88               	movlw	136
 12148  000E54  5C4A               	subwf	_Time_Elapsed,w,c
 12149  000E56  0E13               	movlw	19
 12150  000E58  584B               	subwfb	_Time_Elapsed+1,w,c
 12151  000E5A  B0D8               	btfsc	status,0,c
 12152  000E5C  D003               	goto	i2l4385
 12153                           
 12154                           ;Interrupt.c: 93: {
 12155                           ;Interrupt.c: 94: Nec_state = 3;
 12156  000E5E  0E03               	movlw	3
 12157  000E60  6E54               	movwf	_Nec_state,c
 12158                           
 12159                           ;Interrupt.c: 95: }
 12160  000E62  D003               	goto	i2l4387
 12161  000E64                     i2l4385:
 12162                           
 12163                           ;Interrupt.c: 96: else
 12164                           ;Interrupt.c: 97: {
 12165                           ;Interrupt.c: 98: force_nec_state0();
 12166  000E64  EC80  F012         	call	_force_nec_state0	;wreg free
 12167  000E68  D000               	goto	i2l4387
 12168  000E6A                     i2l4387:
 12169                           
 12170                           ;Interrupt.c: 99: }
 12171                           ;Interrupt.c: 100: INTCON2bits.INTEDG0 = 1;
 12172  000E6A  8CF1               	bsf	intcon2,6,c	;volatile
 12173                           
 12174                           ;Interrupt.c: 101: return;
 12175  000E6C  D065               	goto	i2l277
 12176  000E6E                     i2l4391:
 12177                           
 12178                           ;Interrupt.c: 105: {
 12179                           ;Interrupt.c: 106: if (Time_Elapsed > 400 && Time_Elapsed < 700)
 12180  000E6E  0E91               	movlw	145
 12181  000E70  5C4A               	subwf	_Time_Elapsed,w,c
 12182  000E72  0E01               	movlw	1
 12183  000E74  584B               	subwfb	_Time_Elapsed+1,w,c
 12184  000E76  A0D8               	btfss	status,0,c
 12185  000E78  D008               	goto	i2l4397
 12186  000E7A  0EBC               	movlw	188
 12187  000E7C  5C4A               	subwf	_Time_Elapsed,w,c
 12188  000E7E  0E02               	movlw	2
 12189  000E80  584B               	subwfb	_Time_Elapsed+1,w,c
 12190  000E82  B0D8               	btfsc	status,0,c
 12191  000E84  D002               	goto	i2l4397
 12192                           
 12193                           ;Interrupt.c: 107: {
 12194                           ;Interrupt.c: 108: Nec_state = 4;
 12195  000E86  0E04               	movlw	4
 12196  000E88  D7D7               	goto	L7
 12197  000E8A                     i2l4397:
 12198                           
 12199                           ;Interrupt.c: 110: else
 12200                           ;Interrupt.c: 111: {
 12201                           ;Interrupt.c: 112: force_nec_state0();
 12202  000E8A  EC80  F012         	call	_force_nec_state0	;wreg free
 12203  000E8E  D000               	goto	i2l4399
 12204  000E90                     i2l4399:
 12205                           
 12206                           ;Interrupt.c: 113: }
 12207                           ;Interrupt.c: 114: INTCON2bits.INTEDG0 = 0;
 12208  000E90  9CF1               	bcf	intcon2,6,c	;volatile
 12209                           
 12210                           ;Interrupt.c: 115: return;
 12211  000E92  D052               	goto	i2l277
 12212  000E94                     i2l4403:
 12213                           
 12214                           ;Interrupt.c: 119: {
 12215                           ;Interrupt.c: 120: if (Time_Elapsed >= 400 && Time_Elapsed <= 1800)
 12216  000E94  0E90               	movlw	144
 12217  000E96  5C4A               	subwf	_Time_Elapsed,w,c
 12218  000E98  0E01               	movlw	1
 12219  000E9A  584B               	subwfb	_Time_Elapsed+1,w,c
 12220  000E9C  A0D8               	btfss	status,0,c
 12221  000E9E  D034               	goto	i2l4419
 12222  000EA0  0E09               	movlw	9
 12223  000EA2  5C4A               	subwf	_Time_Elapsed,w,c
 12224  000EA4  0E07               	movlw	7
 12225  000EA6  584B               	subwfb	_Time_Elapsed+1,w,c
 12226  000EA8  B0D8               	btfsc	status,0,c
 12227  000EAA  D02E               	goto	i2l4419
 12228                           
 12229                           ;Interrupt.c: 121: {
 12230                           ;Interrupt.c: 122: Nec_code = Nec_code<<1;
 12231  000EAC  90D8               	bcf	status,0,c
 12232  000EAE  0100               	movlb	0	; () banked
 12233  000EB0  35E6               	rlcf	_Nec_code& (0+255),w,b
 12234  000EB2  0100               	movlb	0	; () banked
 12235  000EB4  6FE6               	movwf	_Nec_code& (0+255),b
 12236  000EB6  0100               	movlb	0	; () banked
 12237  000EB8  35E7               	rlcf	(_Nec_code+1)& (0+255),w,b
 12238  000EBA  0100               	movlb	0	; () banked
 12239  000EBC  6FE7               	movwf	(_Nec_code+1)& (0+255),b
 12240  000EBE  0100               	movlb	0	; () banked
 12241  000EC0  35E8               	rlcf	(_Nec_code+2)& (0+255),w,b
 12242  000EC2  0100               	movlb	0	; () banked
 12243  000EC4  6FE8               	movwf	(_Nec_code+2)& (0+255),b
 12244  000EC6  0100               	movlb	0	; () banked
 12245  000EC8  35E9               	rlcf	(_Nec_code+3)& (0+255),w,b
 12246  000ECA  0100               	movlb	0	; () banked
 12247  000ECC  6FE9               	movwf	(_Nec_code+3)& (0+255),b
 12248                           
 12249                           ;Interrupt.c: 123: if ( Time_Elapsed > 1000)
 12250  000ECE  0EE9               	movlw	233
 12251  000ED0  5C4A               	subwf	_Time_Elapsed,w,c
 12252  000ED2  0E03               	movlw	3
 12253  000ED4  584B               	subwfb	_Time_Elapsed+1,w,c
 12254  000ED6  A0D8               	btfss	status,0,c
 12255  000ED8  D008               	goto	i2l4411
 12256                           
 12257                           ; BSR set to: 0
 12258                           ;Interrupt.c: 124: {
 12259                           ;Interrupt.c: 125: Nec_code++;
 12260  000EDA  0E01               	movlw	1
 12261  000EDC  0100               	movlb	0	; () banked
 12262  000EDE  27E6               	addwf	_Nec_code& (0+255),f,b
 12263  000EE0  0E00               	movlw	0
 12264  000EE2  23E7               	addwfc	(_Nec_code+1)& (0+255),f,b
 12265  000EE4  23E8               	addwfc	(_Nec_code+2)& (0+255),f,b
 12266  000EE6  23E9               	addwfc	(_Nec_code+3)& (0+255),f,b
 12267  000EE8  D000               	goto	i2l4411
 12268  000EEA                     i2l4411:
 12269                           
 12270                           ; BSR set to: 0
 12271                           ;Interrupt.c: 126: }
 12272                           ;Interrupt.c: 127: bit_count++;
 12273  000EEA  2A5A               	incf	_bit_count,f,c
 12274                           
 12275                           ; BSR set to: 0
 12276                           ;Interrupt.c: 128: if(bit_count > 31)
 12277  000EEC  0E1F               	movlw	31
 12278  000EEE  645A               	cpfsgt	_bit_count,c
 12279  000EF0  D008               	goto	i2l290
 12280                           
 12281                           ; BSR set to: 0
 12282                           ;Interrupt.c: 129: {
 12283                           ;Interrupt.c: 130: nec_ok = 1;
 12284  000EF2  0E00               	movlw	0
 12285  000EF4  0100               	movlb	0	; () banked
 12286  000EF6  6FEF               	movwf	(_nec_ok+1)& (0+255),b
 12287  000EF8  0E01               	movlw	1
 12288  000EFA  6FEE               	movwf	_nec_ok& (0+255),b
 12289                           
 12290                           ; BSR set to: 0
 12291                           ;Interrupt.c: 131: INTCONbits.INT0IE = 0;
 12292  000EFC  98F2               	bcf	intcon,4,c	;volatile
 12293                           
 12294                           ;Interrupt.c: 132: Nec_state = 0;
 12295  000EFE  0E00               	movlw	0
 12296  000F00  6E54               	movwf	_Nec_state,c
 12297  000F02                     i2l290:
 12298                           
 12299                           ; BSR set to: 0
 12300                           ;Interrupt.c: 133: }
 12301                           ;Interrupt.c: 134: Nec_state = 3;
 12302  000F02  0E03               	movlw	3
 12303  000F04  6E54               	movwf	_Nec_state,c
 12304                           
 12305                           ;Interrupt.c: 135: }
 12306  000F06  D003               	goto	i2l4421
 12307  000F08                     i2l4419:
 12308                           
 12309                           ;Interrupt.c: 136: else
 12310                           ;Interrupt.c: 137: {
 12311                           ;Interrupt.c: 138: force_nec_state0();
 12312  000F08  EC80  F012         	call	_force_nec_state0	;wreg free
 12313  000F0C  D000               	goto	i2l4421
 12314  000F0E                     i2l4421:
 12315                           
 12316                           ;Interrupt.c: 139: }
 12317                           ;Interrupt.c: 140: INTCON2bits.INTEDG0 = 1;
 12318  000F0E  8CF1               	bsf	intcon2,6,c	;volatile
 12319                           
 12320                           ;Interrupt.c: 141: Nec_code1 = (char) ((Nec_code >> 8));
 12321  000F10  C0E7  F053         	movff	_Nec_code+1,_Nec_code1
 12322                           
 12323                           ;Interrupt.c: 143: }
 12324                           ;Interrupt.c: 144: }
 12325                           
 12326                           ;Interrupt.c: 142: return;
 12327  000F14  D011               	goto	i2l277
 12328  000F16                     i2l4429:
 12329  000F16  5054               	movf	_Nec_state,w,c
 12330                           
 12331                           ; Switch size 1, requested type "space"
 12332                           ; Number of cases is 5, Range of values is 0 to 4
 12333                           ; switch strategies available:
 12334                           ; Name         Instructions Cycles
 12335                           ; simple_byte           16     9 (average)
 12336                           ;	Chosen strategy is simple_byte
 12337  000F18  0A00               	xorlw	0	; case 0
 12338  000F1A  B4D8               	btfsc	status,2,c
 12339  000F1C  D769               	goto	i2l4357
 12340  000F1E  0A01               	xorlw	1	; case 1
 12341  000F20  B4D8               	btfsc	status,2,c
 12342  000F22  D77D               	goto	i2l4367
 12343  000F24  0A03               	xorlw	3	; case 2
 12344  000F26  B4D8               	btfsc	status,2,c
 12345  000F28  D78E               	goto	i2l4379
 12346  000F2A  0A01               	xorlw	1	; case 3
 12347  000F2C  B4D8               	btfsc	status,2,c
 12348  000F2E  D79F               	goto	i2l4391
 12349  000F30  0A07               	xorlw	7	; case 4
 12350  000F32  B4D8               	btfsc	status,2,c
 12351  000F34  D7AF               	goto	i2l4403
 12352  000F36  D000               	goto	i2l277
 12353  000F38                     i2l277:
 12354  000F38  0012               	return		;funcret
 12355  000F3A                     __end_of_INT0_isr:
 12356                           	opt stack 0
 12357                           pclatu	equ	0xFFB
 12358                           pclath	equ	0xFFA
 12359                           tblptru	equ	0xFF8
 12360                           tblptrh	equ	0xFF7
 12361                           tblptrl	equ	0xFF6
 12362                           tablat	equ	0xFF5
 12363                           prodh	equ	0xFF4
 12364                           prodl	equ	0xFF3
 12365                           intcon	equ	0xFF2
 12366                           intcon2	equ	0xFF1
 12367                           postinc0	equ	0xFEE
 12368                           fsr0h	equ	0xFEA
 12369                           fsr0l	equ	0xFE9
 12370                           wreg	equ	0xFE8
 12371                           postdec1	equ	0xFE5
 12372                           fsr1h	equ	0xFE2
 12373                           fsr1l	equ	0xFE1
 12374                           indf2	equ	0xFDF
 12375                           postinc2	equ	0xFDE
 12376                           postdec2	equ	0xFDD
 12377                           fsr2h	equ	0xFDA
 12378                           fsr2l	equ	0xFD9
 12379                           status	equ	0xFD8
 12380                           
 12381 ;; *************** function _force_nec_state0 *****************
 12382 ;; Defined at:
 12383 ;;		line 44 in file "Interrupt.c"
 12384 ;; Parameters:    Size  Location     Type
 12385 ;;		None
 12386 ;; Auto vars:     Size  Location     Type
 12387 ;;		None
 12388 ;; Return value:  Size  Location     Type
 12389 ;;		None               void
 12390 ;; Registers used:
 12391 ;;		wreg, status,2
 12392 ;; Tracked objects:
 12393 ;;		On entry : 0/0
 12394 ;;		On exit  : 0/0
 12395 ;;		Unchanged: 0/0
 12396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12398 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12399 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12400 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12401 ;;Total ram usage:        0 bytes
 12402 ;; Hardware stack levels used:    1
 12403 ;; This function calls:
 12404 ;;		Nothing
 12405 ;; This function is called by:
 12406 ;;		_INT0_isr
 12407 ;; This function uses a non-reentrant model
 12408 ;;
 12409                           
 12410                           	psect	text74
 12411  002500                     __ptext74:
 12412                           	opt stack 0
 12413  002500                     _force_nec_state0:
 12414                           	opt stack 20
 12415                           
 12416                           ;Interrupt.c: 46: Nec_state=0;
 12417                           
 12418                           ;incstack = 0
 12419  002500  0E00               	movlw	0
 12420  002502  6E54               	movwf	_Nec_state,c
 12421                           
 12422                           ;Interrupt.c: 47: T1CONbits.TMR1ON = 0;
 12423  002504  90CD               	bcf	4045,0,c	;volatile
 12424  002506  0012               	return		;funcret
 12425  002508                     __end_of_force_nec_state0:
 12426                           	opt stack 0
 12427                           pclatu	equ	0xFFB
 12428                           pclath	equ	0xFFA
 12429                           tblptru	equ	0xFF8
 12430                           tblptrh	equ	0xFF7
 12431                           tblptrl	equ	0xFF6
 12432                           tablat	equ	0xFF5
 12433                           prodh	equ	0xFF4
 12434                           prodl	equ	0xFF3
 12435                           intcon	equ	0xFF2
 12436                           intcon2	equ	0xFF1
 12437                           postinc0	equ	0xFEE
 12438                           fsr0h	equ	0xFEA
 12439                           fsr0l	equ	0xFE9
 12440                           wreg	equ	0xFE8
 12441                           postdec1	equ	0xFE5
 12442                           fsr1h	equ	0xFE2
 12443                           fsr1l	equ	0xFE1
 12444                           indf2	equ	0xFDF
 12445                           postinc2	equ	0xFDE
 12446                           postdec2	equ	0xFDD
 12447                           fsr2h	equ	0xFDA
 12448                           fsr2l	equ	0xFD9
 12449                           status	equ	0xFD8
 12450                           pclatu	equ	0xFFB
 12451                           pclath	equ	0xFFA
 12452                           tblptru	equ	0xFF8
 12453                           tblptrh	equ	0xFF7
 12454                           tblptrl	equ	0xFF6
 12455                           tablat	equ	0xFF5
 12456                           prodh	equ	0xFF4
 12457                           prodl	equ	0xFF3
 12458                           intcon	equ	0xFF2
 12459                           intcon2	equ	0xFF1
 12460                           postinc0	equ	0xFEE
 12461                           fsr0h	equ	0xFEA
 12462                           fsr0l	equ	0xFE9
 12463                           wreg	equ	0xFE8
 12464                           postdec1	equ	0xFE5
 12465                           fsr1h	equ	0xFE2
 12466                           fsr1l	equ	0xFE1
 12467                           indf2	equ	0xFDF
 12468                           postinc2	equ	0xFDE
 12469                           postdec2	equ	0xFDD
 12470                           fsr2h	equ	0xFDA
 12471                           fsr2l	equ	0xFD9
 12472                           status	equ	0xFD8
 12473                           
 12474                           	psect	rparam
 12475  0000                     pclatu	equ	0xFFB
 12476                           pclath	equ	0xFFA
 12477                           tblptru	equ	0xFF8
 12478                           tblptrh	equ	0xFF7
 12479                           tblptrl	equ	0xFF6
 12480                           tablat	equ	0xFF5
 12481                           prodh	equ	0xFF4
 12482                           prodl	equ	0xFF3
 12483                           intcon	equ	0xFF2
 12484                           intcon2	equ	0xFF1
 12485                           postinc0	equ	0xFEE
 12486                           fsr0h	equ	0xFEA
 12487                           fsr0l	equ	0xFE9
 12488                           wreg	equ	0xFE8
 12489                           postdec1	equ	0xFE5
 12490                           fsr1h	equ	0xFE2
 12491                           fsr1l	equ	0xFE1
 12492                           indf2	equ	0xFDF
 12493                           postinc2	equ	0xFDE
 12494                           postdec2	equ	0xFDD
 12495                           fsr2h	equ	0xFDA
 12496                           fsr2l	equ	0xFD9
 12497                           status	equ	0xFD8


Data Sizes:
    Strings     234
    Constant    493
    Data        282
    BSS         53
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     69     111
    BANK0           128     13     128
    BANK1           256      3     181
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), RPM_Txt(BANK0[5]), DC_Txt(BANK0[4]), Fan_SW_Txt(BANK0[4]), 
		 -> date(BANK0[9]), time(BANK0[9]), tempF(BANK0[4]), tempC(BANK0[4]), 
		 -> buffer(BANK1[31]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), RPM_Txt(BANK0[5]), DC_Txt(BANK0[4]), Fan_SW_Txt(BANK0[4]), 
		 -> date(BANK0[9]), time(BANK0[9]), tempF(BANK0[4]), tempC(BANK0[4]), 
		 -> buffer(BANK1[31]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), STR_8(CODE[3]), 
		 -> STR_7(CODE[6]), STR_6(CODE[5]), STR_5(CODE[5]), STR_4(CODE[2]), 
		 -> STR_3(CODE[3]), STR_2(CODE[13]), STR_1(CODE[22]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), Fan_SW_Txt(BANK0[4]), buffer(BANK1[31]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), Fan_SW_Txt(BANK0[4]), buffer(BANK1[31]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 30
		 -> STR_18(CODE[24]), STR_17(CODE[15]), STR_16(CODE[22]), STR_15(CODE[16]), 
		 -> STR_14(CODE[20]), STR_13(CODE[21]), STR_12(CODE[30]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), Fan_SW_Txt(BANK0[4]), buffer(BANK1[31]), 

    txt	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK1[31]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), RPM_Txt(BANK0[5]), DC_Txt(BANK0[4]), Fan_SW_Txt(BANK0[4]), 
		 -> date(BANK0[9]), time(BANK0[9]), tempF(BANK0[4]), tempC(BANK0[4]), 
		 -> buffer(BANK1[31]), 


Critical Paths under _main in COMRAM

    _main->_Update_Screen
    _printf->___lwmod
    ___lwmod->___lwdiv
    _get_RPM->___awdiv
    _Update_Screen->_drawtext
    ___awdiv->___awmod
    ___awdiv->___wmul
    _Turn_On_Fan->_do_update_pwm
    _Initialize_Screen->_drawtext
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawCircle->_drawPixel
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _write_data->_spiwrite
    _write_command->_spiwrite
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul
    _Increase_Speed->_do_update_pwm
    _Do_Init->_DS1621_Init
    _init_UART->_OpenUSART
    _DS1621_Init->_I2C_Write_Cmd_Write_Data
    _I2C_Write_Cmd_Write_Data->_I2C_Write
    _I2C_Write_Cmd_Only->_I2C_Write
    _Decrease_Speed->_do_update_pwm
    _Do_Beep->_do_update_pwm
    _do_update_pwm->___ftdiv
    ___lbtoft->___ftpack
    ___ftmul->___lbtoft
    ___ftdiv->___ftmul
    _DS3231_Setup_Time->_I2C_Write
    _DS3231_Read_Time->_I2C_Read
    _DS1621_Read_Temp->_I2C_Read

Critical Paths under _chkisr in COMRAM

    _chkisr->_INT0_isr

Critical Paths under _main in BANK0

    _main->_Update_Screen
    _Update_Screen->_drawtext
    _Initialize_Screen->_drawtext

Critical Paths under _chkisr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _chkisr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _chkisr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _chkisr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _chkisr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _chkisr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _chkisr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _chkisr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _chkisr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _chkisr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _chkisr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _chkisr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _chkisr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _chkisr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _chkisr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _chkisr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0  126396
                                             68 COMRAM     1     1      0
                                              0 BANK1      3     3      0
                   _DS1621_Read_Temp
                   _DS3231_Read_Time
                  _DS3231_Setup_Time
                     _Decrease_Speed
                            _Do_Beep
                            _Do_Init
                     _Increase_Speed
                  _Initialize_Screen
                         _Set_DC_RGB
                        _Set_RPM_RGB
                         _Toggle_Fan
                      _Update_Screen
                            ___awdiv
                             ___wmul
                      _do_update_pwm
                            _get_RPM
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              37    23     14    3911
                                             28 COMRAM    28    14     14
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      31
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             16 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     362
                                             23 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     501
                                             16 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _get_RPM                                              4     2      2    3051
                                             30 COMRAM     4     2      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Update_Screen                                       12    12      0   23083
                                             66 COMRAM     2     2      0
                                              7 BANK0      6     6      0
                            ___awdiv
                            ___awmod
                           _drawtext
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    2123
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    2005
                                             22 COMRAM     8     4      4
                            ___awmod (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Toggle_Fan                                           0     0      0    8034
                       _Turn_Off_Fan
                        _Turn_On_Fan
 ---------------------------------------------------------------------------------
 (2) _Turn_On_Fan                                          0     0      0    8034
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (2) _Turn_Off_Fan                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Set_RPM_RGB                                          2     0      2     251
                                             16 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _Set_DC_RGB                                           2     0      2      96
                                             16 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _Initialize_Screen                                    0     0      0   34162
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                         _drawCircle
                           _drawtext
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4    1539
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _fillScreen                                           2     0      2    2192
                                             35 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (3) _fillRectangle                                       12     7      5    2096
                                             23 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _drawtext                                            17     9      8   17011
                                             56 COMRAM    10     2      8
                                              0 BANK0      7     7      0
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _strlen                                               6     4      2     195
                                             16 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) _drawChar                                            11     4      7   10904
                                             45 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (4) _fillRect                                            11     6      5    3876
                                             34 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (5) _drawFastVLine                                       11     7      4    3102
                                             23 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _drawCircle                                          20    12      8    6744
                                             27 COMRAM    20    12      8
                          _drawPixel
 ---------------------------------------------------------------------------------
 (4) _drawPixel                                            4     1      3    4207
                                             23 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (6) _setAddrWindow                                        4     1      3    1034
                                             19 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _TFT_GreenTab_Initialize                              0     0      0    4624
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd3                                                0     0      0    2182
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd2red                                             0     0      0     130
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd1                                                0     0      0    2182
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (7) _write_data                                           1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (7) _write_command                                        1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (6) _spiwrite                                             2     2      0      34
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _LCD_Reset                                            0     0      0    2052
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             6     4      2    2052
                                             22 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1012
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _Increase_Speed                                       0     0      0   16136
                            _Do_Beep
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (1) _Do_Init                                              0     0      0    1121
                        _DS1621_Init
                           _I2C_Init
                     _init_INTERRUPT
                          _init_UART
 ---------------------------------------------------------------------------------
 (2) _init_UART                                            0     0      0     375
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (3) _OpenUSART                                            3     1      2     375
                                             16 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _init_INTERRUPT                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Init                                             4     0      4      65
                                             16 COMRAM     4     0      4
                         _i2cHighScl
                         _i2cHighSda
 ---------------------------------------------------------------------------------
 (2) _DS1621_Init                                          1     1      0     681
                                             21 COMRAM     1     1      0
                 _I2C_Write_Cmd_Only
           _I2C_Write_Cmd_Write_Data
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Write_Data                             3     1      2     356
                                             18 COMRAM     3     1      2
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Only                                   2     1      1     260
                                             18 COMRAM     2     1      1
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _Decrease_Speed                                       0     0      0   16136
                            _Do_Beep
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (2) _Do_Beep                                              0     0      0    8102
                    _Activate_Buzzer
                  _Deactivate_Buzzer
                       _Wait_One_Sec
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (1) _do_update_pwm                                        9     9      0    8034
                                             58 COMRAM     9     9      0
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (2) ___lbtoft                                             4     1      3    2039
                                             24 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     436
                                             16 COMRAM    15    11      4
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    2716
                                             28 COMRAM    15     9      6
                           ___ftpack
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    2648
                                             43 COMRAM    15     9      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2008
                                             16 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (3) _Wait_One_Sec                                         2     2      0      68
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _Deactivate_Buzzer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Activate_Buzzer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DS3231_Setup_Time                                    2     2      0     201
                                             18 COMRAM     2     2      0
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DS3231_Read_Time                                     3     3      0     430
                                             19 COMRAM     2     2      0
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DS1621_Read_Temp                                     5     3      2     464
                                             19 COMRAM     5     3      2
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Write                                            2     2      0     133
                                             16 COMRAM     2     2      0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Stop                                             0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Start                                            0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (2) _I2C_Read                                             3     3      0     198
                                             16 COMRAM     3     3      0
                             _i2cAck
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                            _i2cNack
 ---------------------------------------------------------------------------------
 (3) _i2cNack                                              0     0      0       0
                         _i2cHighScl
                          _i2cLowScl
 ---------------------------------------------------------------------------------
 (3) _i2cAck                                               0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (2) _I2C_ReStart                                          0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (5) _i2cLowSda                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2cLowScl                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2cHighSda                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2cHighScl                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _chkisr                                              14    14      0       0
                                              2 COMRAM    14    14      0
                           _INT0_isr
                         _TIMER1_isr
 ---------------------------------------------------------------------------------
 (10) _TIMER1_isr                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _INT0_isr                                            2     2      0       0
                                              0 COMRAM     2     2      0
                   _force_nec_state0
 ---------------------------------------------------------------------------------
 (11) _force_nec_state0                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DS1621_Read_Temp
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Read_Time
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Setup_Time
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _Decrease_Speed
     _Do_Beep
       _Activate_Buzzer
       _Deactivate_Buzzer
       _Wait_One_Sec
       _do_update_pwm
         ___ftdiv
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
         ___lbtoft
           ___ftpack
     _do_update_pwm
       ___ftdiv
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___ftmul
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___fttol
       ___lbtoft
         ___ftpack
   _Do_Beep
     _Activate_Buzzer
     _Deactivate_Buzzer
     _Wait_One_Sec
     _do_update_pwm
       ___ftdiv
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___ftmul
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___fttol
       ___lbtoft
         ___ftpack
   _Do_Init
     _DS1621_Init
       _I2C_Write_Cmd_Only
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Cmd_Write_Data
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _I2C_Init
       _i2cHighScl
       _i2cHighSda
     _init_INTERRUPT
     _init_UART
       _OpenUSART
   _Increase_Speed
     _Do_Beep
       _Activate_Buzzer
       _Deactivate_Buzzer
       _Wait_One_Sec
       _do_update_pwm
         ___ftdiv
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
         ___lbtoft
           ___ftpack
     _do_update_pwm
       ___ftdiv
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___ftmul
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___fttol
       ___lbtoft
         ___ftpack
   _Initialize_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawCircle
       _drawPixel
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_data
           _spiwrite
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   _Set_DC_RGB
   _Set_RPM_RGB
   _Toggle_Fan
     _Turn_Off_Fan
     _Turn_On_Fan
       _do_update_pwm
         ___ftdiv
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
         ___lbtoft
           ___ftpack
   _Update_Screen
     ___awdiv
       ___awmod (ARG)
       ___wmul (ARG)
     ___awmod
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _strcpy
   ___awdiv
     ___awmod (ARG)
     ___wmul (ARG)
   ___wmul
   _do_update_pwm
     ___ftdiv
       ___ftmul (ARG)
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
     ___ftmul
       ___ftpack
       ___lbtoft (ARG)
         ___ftpack
     ___fttol
     ___lbtoft
       ___ftpack
   _get_RPM
     ___awdiv
       ___awmod (ARG)
       ___wmul (ARG)
     ___wmul
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch

 _chkisr (ROOT)
   _INT0_isr
     _force_nec_state0
   _TIMER1_isr

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      3      B5       7       70.7%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      D      80       5      100.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     45      6F       1       87.4%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1A4      34        0.0%
DATA                 0      0     1A4       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Wed Nov 10 16:20:29 2021

                      drawCircle@f 002A                        drawCircle@r 0020  
                      drawCircle@x 002C                        drawCircle@y 002E  
               __size_of_I2C_Start 0012                        _SSPSTATbits 000FC7  
               __size_of_I2C_Write 003E                       drawCircle@x0 001C  
                     drawCircle@y0 001E                       ___awdiv@sign 001C  
             __size_of_Turn_On_Fan 0010                ___wmul@multiplicand 0013  
                  ??_Update_Screen 0043                                l303 1EBC  
                              l313 23F6                                l420 1734  
                              l245 216E                                l190 203A  
                              l416 1736                                l193 2104  
                              l513 232A                                l417 16A2  
                              l530 1C74                                l427 0CDC  
                              l363 1A82                                l419 1712  
                              l508 22A0                                l357 2204  
                              l381 0F68                                l720 054A  
                              l538 22C4                                l379 108E  
                              l388 0FE4                                l492 2078  
                              l661 249E                                l497 2308  
                              l781 1CA2                                l757 07A2  
                              l790 1CE4                                _FAN 0050  
                              l785 1CBC                                l793 2256  
                              l786 1CBE                                l787 1CC8  
                              l788 1CCA                                l986 19FA  
                              l999 1B04                                _PR2 000FCB  
                              _day 005C                  _Deactivate_Buzzer 24E8  
             __size_of_I2C_ReStart 0016                                _dow 005D  
                              _nbr 00EC                                _rpm 004C  
            __size_of_Turn_Off_Fan 000A                                _rps 00F0  
                              _txt 004E                       ___awmod@sign 0016  
                              wreg 000FE8                 ?_Deactivate_Buzzer 0001  
                       _Fan_SW_Txt 00DA                    ??_fillRectangle 001D  
                     __CFG_LVP$OFF 000000            _TFT_GreenTab_Initialize 2206  
                     ___ftdiv@cntr 0035                       ___ftdiv@sign 003A  
                     __CFG_WDT$OFF 000000                               l1101 17FC  
                             l1112 17D4                     drawFastVLine@h 0019  
                             l1224 22E6                               l1209 1578  
                             l1250 227C                               l1316 1E68  
                             l1173 165A                               l1326 1F54  
                             l1176 1626                               l1355 20B6  
                             l1188 13A0                     drawFastVLine@x 0022  
                   drawFastVLine@y 0018                               l5301 1784  
                             l6101 19F0                               l5321 17EE  
                             l5305 179C                               l6017 21AE  
                             l6121 1AB6                               l6113 1A9A  
                             l7001 0B96                               l5315 17DC  
                             l5307 17BC                               l5403 1598  
                             l6019 21B8                               l6123 1AC0  
                             l5333 210E                               l5309 17C8  
                             l5405 15B2                               l6125 1AC8  
                             l6133 1AEA                               l6117 1AA8  
                             l7021 0BE6                               l7005 0BA0  
                             l5335 2114                               l5327 20FC  
                             l6151 1E3E                               l7031 0C0E  
                             l5345 2126                               l5409 15C0  
                             l5521 1522                               l5281 1A78  
                             l5265 1A0C                               l6081 19A4  
                             l6137 1AFA                               l6129 1ADE  
                             l6057 22DE                               l7025 0BF4  
                             l7017 0BD8                               l7009 0BB4  
                             l5451 12E2                               l5515 150C  
                             l6083 19AE                               l6075 198E  
                             l6411 01C0                               l6147 1E2C  
                             l6171 1F32                               l5293 1748  
                             l5429 1600                               l5533 1566  
                             l5525 1536                               l5269 1A44  
                             l6501 1C5A                               l6093 19D4  
                             l6085 19B6                               l6069 197C  
                             l6413 01D6                               l6149 1E36  
   I2C_Write_Cmd_Write_Data@Device 0015                               l5439 1634  
                             l5455 12F0                               l5527 1544  
                             l5519 151C                               l5383 21E6  
                             l5279 1A6A                               l5391 1FB4  
                             l5703 105A                               l5711 108A  
                             l6159 1E5C                               l6175 1F48  
                             l6167 1F20                               l5297 1758  
                             l5473 1336                               l5449 12C8  
                             l5529 154E                               l5801 1C88  
                             l5705 1082                               l6097 19E0  
                             l6361 0058                               l6169 1F2A  
                             l6601 05DC                               l5299 1764  
                             l5483 1364                               l5395 1FD0  
                             l6611 0606                               l5477 134C  
                             l5469 1324                               l5821 1CB4  
                             l5813 1CA6                               l5805 1C92  
                             l5717 2084                               l6605 0600  
                             l6613 0618                               l6541 0464  
                             l5487 137A                               l5479 1352  
                             l5719 208A                               l5751 1716  
                             l5735 16DA                               l6463 2302  
                             l6383 012C                               l6367 0098  
                             l6631 067A                               l6623 0658  
                             l6543 0472                               l5497 14B2  
                             l5809 1C9A                               l5673 0F64  
                             l5665 0F4A                               l5921 11CC  
                             l5761 1730                               l5729 166C  
                             l6377 00EC                               l6633 0682  
                             l6625 0662                               l6561 0514  
                             l6553 04B0                               l6537 0454  
                             l5683 0FA4                               l5675 0F6C  
                             l5755 1720                               l5747 1708  
                             l6651 071A                               l6643 06BA  
                             l6619 0634                               l6547 047C  
                             l5853 1FFE                               l6477 231C  
                             l6469 2292                               l5685 0FD8  
                             l5669 0F56                               l5933 121C  
                             l6493 1C2E                               l6661 077A  
                             l6637 069A                               l6581 0592  
                             l6565 051C                               l6549 0492  
                             l5863 2014                               l5871 2024  
                             l5783 22AA                               l5775 188A  
                             l5695 1006                               l5687 0FDC  
                             l5679 0F74                               l6495 1C34  
                             l6639 06A2                               l6647 06CE  
                             l6591 05C6                               l6583 0596  
                             l6663 0786                               l5865 201C  
                             l5857 2006                               l5697 102E  
                             l5945 128C                               l5937 123A  
                             l6489 1C10                               l6649 06D6  
                             l6657 0760                               l6577 0578  
                             l5875 2030                               l5787 22BE  
                             l5947 1294                               l6499 1C54  
                             l6659 0772                               l6595 05CC  
                             l6587 05A2                               l5877 2036  
                             l6597 05D0                               l5967 0CC2  
                             l6951 0A26                               l5995 0DB2  
                             l6991 0B54                               l6977 0B1C  
                             l6995 0B6E                               STR_1 FF60  
                             STR_2 FFCF                               STR_3 FFF8  
                             STR_4 FFF2                               STR_5 FFE2  
                             STR_6 FFE7                               STR_7 FFDC  
                             STR_8 FFFB                               STR_9 FFF4  
                             u4011 158A                               u4031 15A8  
                             u4121 14A4                               u5010 22F2  
                             u4140 14D0                               u4300 103C  
                             u5020 22F4                               u4061 12BA  
                             u4081 12D8                               u4145 14C8  
                             u5070 1C1E                               u4610 11F6  
                             u4370 169A                               u4380 16D0  
                             u3840 1A3A                               u5587 24AC  
                             _RBPU 007F8F                               _TRMT 007D61  
                     _DS1621_tempC 0046                       _DS1621_tempF 0048  
              ??_Deactivate_Buzzer 0011                               _date 00BF  
                             _main 0A0E                               _font FD27  
                     ___ftpack@arg 0011                               _hour 0060  
                     ___ftpack@exp 0014                   __end_of_I2C_Init 24D4  
                 __end_of_I2C_Read 203C                               _time 00C8  
                             _year 006D                               fsr0h 000FEA  
                             _txt1 0100                               fsr1h 000FE2  
                             fsr0l 000FE9                               fsr2h 000FDA  
                             fsr1l 000FE1                               indf2 000FDF  
                             fsr2l 000FD9                               _wrap 006F  
                 __end_of_I2C_Stop 2446                               pclat 000FFA  
               __size_of_LCD_Reset 0012                               prodh 000FF4  
                             prodl 000FF3                    __end_of_Do_Beep 23D2  
                             start 0018        __size_of_I2C_Write_Cmd_Only 001A  
                  __end_of_Do_Init 1FAA                     _Increase_Speed 227E  
                  ??_drawFastVLine 001C                       ___ftmul@cntr 002A  
                  __end_of_i2cNack 24DE                       ___param_bank 000010  
                     ___ftmul@sign 002B                       ___fttol@exp1 001F  
                     _Turn_Off_Fan 24C0                       ___fttol@lval 001B  
                      ?_TIMER1_isr 0001                   __end_of_INT0_isr 0F3A  
        __end_of_Deactivate_Buzzer 24F0                    ??_do_update_pwm 003B  
                  drawFastVLine@hi 0020                    drawFastVLine@lo 0021  
                            ?_main 0001                    __end_of___awdiv 19FC  
                  drawCircle@ddF_x 0026                              STR_10 FFEC  
                  drawCircle@ddF_y 0028                              STR_11 FFF0  
                            STR_12 FF14                              STR_13 FF76  
                            STR_14 FF8B                              STR_15 FFB0  
                            STR_16 FF4A                              STR_17 FFC0  
                            STR_18 FF32                              STR_19 FF9F  
                  __end_of___awmod 1B06                    __end_of___ftdiv 165C  
                  __end_of___ftmul 13A2                              _T0CON 000FD5  
                  ___awdiv@divisor 0019                              _T1CON 000FCD  
                  __end_of___fttol 157A                              _T2CON 000FCA  
                            _T3CON 000FB1                    __end_of___lwdiv 1E72  
                            _MASKA 0051                              _MASKD 0052  
                  __end_of___lwmod 1F5E                              i2l265 1B48  
                            i2l290 0F02                              i2l277 0F38  
                  ___awdiv@counter 001B                    drawCircle@color 0022  
                            _RCSTA 000FAB                              _TMR0H 000FD7  
                            _TMR1H 000FCF                              _TMR0L 000FD6  
                            _TMR1L 000FCE                              _TMR3L 000FB2  
                            _SPBRG 000FAF                              _PORTA 000F80  
                            _PORTD 000F83                              _TRISA 000F92  
                            _TRISB 000F93                              _TRISC 000F94  
                            _TRISD 000F95                              _TRISE 000F96  
                            _TXREG 000FAD                              _TXSTA 000FAC  
                  __end_of_get_RPM 207A                              _Rcmd1 1090  
                            _Rcmd3 13A2                         _Display_D1 0080  
                       _Display_D2 00B8                         _i2cHighSda 24F8  
                       _i2cHighScl 24A8                    __end_of_dpowers FF0C  
                            _color 0154                              _font2 FE26  
                            _found 005F                    __end_of_isdigit 22E8  
                            _tempC 00DE                              _tempF 00E2  
                            _month 0062                      ___ftpack@sign 0015  
                            main@U 01B2                              _putch 249A  
                            main@j 01B3                  __end_of_I2C_Start 2458  
                __end_of_I2C_Write 2134                     __CFG_BOREN$OFF 000000  
                            tablat 000FF5                              status 000FD8  
           __end_of_Increase_Speed 22A2                  ?_DS1621_Read_Temp 0014  
                  write_data@data_ 0013                 ??_DS1621_Read_Temp 0016  
                  __initialization 1B82                      ??_Set_RPM_RGB 0013  
                     __end_of_main 0C1A                       __end_of_font FE26  
                 __end_of_Rcmd2red 20F6                   ??_Decrease_Speed 0044  
                           ??_main 0045                      ___fttol@sign1 001A  
                    __activetblptr 000002                  ?_DS3231_Read_Time 0001  
                __end_of_LCD_Reset 2422                         _Set_DC_RGB 2386  
        ??_TFT_GreenTab_Initialize 001D                 ??_DS3231_Read_Time 0014  
                           ?_Rcmd1 0001                             ?_Rcmd3 0001  
          __size_of_init_INTERRUPT 0034                          I2C_Init@c 0011  
                        I2C_Read@n 0012                             _ADCON1 000FC1  
              DS1621_Read_Temp@Cmd 0016                             _CCPR1L 000FBE  
                           _CCPR2L 000FBB                   ___awdiv@dividend 0017  
               __size_of_i2cLowSda 000A                 __size_of_i2cLowScl 0008  
                           ?_putch 0001                   __end_of___ftpack 17FE  
                 __end_of___lbtoft 227E                          ??_Do_Beep 0044  
                           _DC_Txt 00D6                             i2l4411 0EEA  
                           i2l4403 0E94                             i2l4421 0F0E  
                        ??_Do_Init 0017                             i2l4419 0F08  
                           i2l4373 0E3C                             i2l4357 0DF0  
                           i2l4429 0F16                             i2l4391 0E6E  
                           i2l4367 0E1E                             i2l4385 0E64  
                           i2l4387 0E6A                             i2l4379 0E46  
                           i2l4397 0E8A                             i2l4399 0E90  
                           i2l4883 1B3E                             _OSCCON 000FD3  
              __size_of_TIMER1_isr 000C                             _SPBRGH 000FB0  
                           _SSPBUF 000FC9                    ?_Increase_Speed 0001  
                        ??_i2cNack 0011                       _Alarm_SW_Txt 00B4  
                 _force_nec_state0 2500                   __end_of_delay_ms 1EC4  
                           _i2cAck 2458                   __end_of_fillRect 1FF4  
                 __end_of_drawChar 1090                 __size_of_OpenUSART 0070  
         __size_of_Activate_Buzzer 0012                             ___wmul 2230  
                        ??___awdiv 001B                   __end_of_drawtext 12AA  
                        ??___awmod 0015                          ??___ftdiv 0032  
                        ??___ftmul 0023                          ??___fttol 0015  
                           _chkisr 0008                          ??___lwdiv 0015  
                           _array1 017E                          ??___lwmod 001C  
                           _buffer 0193                             _nec_ok 00EE  
                           clear_0 1B88                             clear_1 1B94  
                 ___awdiv@quotient 001D                             _minute 0061  
                           _second 0064            DS3231_Setup_Time@Device 0013  
                  ___awmod@divisor 0013                          ??_get_RPM 0021  
       __size_of_Deactivate_Buzzer 0008                    ___awmod@counter 0015  
                           _printf 044A                       drawtext@size 0040  
                           _strcpy 21A4                             _strlen 207A  
            ___ftmul@f3_as_product 0027                __end_of_Set_RPM_RGB 1C76  
                       _Toggle_Fan 22E8                       __pdataCOMRAM 006E  
                        ??_isdigit 0011                          ?_I2C_Init 0011  
                        ?_I2C_Read 0001                          ?_I2C_Stop 0001  
                     __mediumconst FD26                             tblptrh 000FF7  
                           tblptrl 000FF6                             tblptru 000FF8  
 __end_of_I2C_Write_Cmd_Write_Data 234C                        ?_i2cHighSda 0001  
                      ?_i2cHighScl 0001                             putch@c 0011  
                 __end_of_spiwrite 23FC                         __accesstop 0080  
          __end_of__initialization 1BF2                          ?_INT0_isr 0001  
               _setup_alarm_minute 0065                 _setup_alarm_second 0066  
                    ___rparam_used 000001                         ___ftdiv@f1 002C  
                       ___ftdiv@f2 002F                         ___ftdiv@f3 0036  
                       ___lbtoft@c 001C                         ___ftmul@f1 001D  
                       ___ftmul@f2 0020                         ___fttol@f1 0011  
                    __end_of_Rcmd1 11A0                      __end_of_Rcmd3 1494  
                   __pcstackCOMRAM 0001                       __pidataBANK0 1CE6  
                     __pidataBANK1 18B4                      __end_of_font2 FF02  
                __end_of_i2cLowSda 24E8                  __end_of_i2cLowScl 24F8  
                    __end_of_putch 24A8                     drawPixel@color 0019  
           __size_of_write_command 0010                         ??_I2C_Init 0015  
                      ?_Set_DC_RGB 0011                         ??_I2C_Read 0011  
                     _alarm_minute 0058                       _alarm_second 0059  
                       ??_I2C_Stop 0011                            ??_Rcmd1 001D  
                          ??_Rcmd3 001D                 __size_of_drawPixel 0030  
                __end_of_OpenUSART 1CE6                            ??_putch 0011  
                       __pbssBANK0 00E6                   _setup_alarm_hour 00F2  
                 _setup_alarm_time 0094                      ??_DS1621_Init 0016  
                        ?_Rcmd2red 0001                 __size_of_init_UART 0014  
                  spiwrite@spidata 0012                         _alarm_date 0056  
                       ??_INT0_isr 0001                         _alarm_hour 0057  
                       _alarm_time 008B                      ?_Wait_One_Sec 0001  
                          ?_i2cAck 0001               Set_DC_RGB@duty_cycle 0011  
               __CFG_CCP2MX$PORTBE 000000                      ??_Turn_On_Fan 0044  
                   I2C_Read@inByte 0013                            ?___wmul 0011  
              __size_of_i2cHighSda 0008                __size_of_i2cHighScl 000C  
                      _Set_RPM_RGB 1BFC                            ?_chkisr 0001  
           __size_of_setAddrWindow 004E                            _CCP1CON 000FBD  
 I2C_Write_Cmd_Write_Data@Data_Out 0014                            _CCP2CON 000FBA  
                     ??_TIMER1_isr 0001                      ??_I2C_ReStart 0011  
                          _ALARMEN 00EA                          ?___ftpack 0011  
                        ?___lbtoft 0019                         I2C_Write@n 0012  
                          ?_printf 001D                            ?_strcpy 0011  
                          ?_strlen 0011                        ?_Toggle_Fan 0001  
                ??_Activate_Buzzer 0011                         _fillScreen 236A  
            __end_of_Update_Screen 044A                         _drawCircle 0C1A  
                   _init_INTERRUPT 2170                          ?_delay_ms 0017  
                        ?_fillRect 0023                          ?_drawChar 002E  
                          _SSPCON1 000FC6                            _SSPSTAT 000FC7  
                          _RPM_Txt 00D1              __end_of_fillRectangle 1738  
                          _Do_Beep 23BA                          ?_drawtext 0039  
                _DS3231_Setup_Time 1D4C                            _Do_Init 1F5E  
         _I2C_Write_Cmd_Write_Data 232C         __end_of_I2C_Write_Cmd_Only 23BA  
                       ??_Rcmd2red 0014             DS1621_Read_Temp@Device 0018  
                   ??_Wait_One_Sec 0011                            _i2cNack 24D4  
               __end_of_TIMER1_isr 24C0                 ?_DS3231_Setup_Time 0001  
                    _write_command 248A                          _I2C_Start 2446  
                        _I2C_Write 20F6                    __size_of_i2cAck 0012  
                          __Hparam 0000                            __Lparam 0000  
              __size_of_Set_DC_RGB 001A                __end_of_DS1621_Init 236A  
                __end_of_drawPixel 2206                ??_DS3231_Setup_Time 0013  
            __end_of_drawFastVLine 1A84                            ___awdiv 1966  
                          ___awmod 1A84                            ___ftdiv 157A  
                  __size_of___wmul 0028                            ___ftmul 12AA  
                          ___fttol 1494                            ___lwdiv 1E16  
                          ___lwmod 1F12                    __size_of_chkisr 1B7A  
                        ?_spiwrite 0001                            __pcinit 1B82  
                       ??___ftpack 0016                         ??___lbtoft 001C  
                          __ramtop 1000                            _get_RPM 203C  
                          __ptext0 0A0E                            __ptext1 044A  
                          __ptext2 249A                            __ptext3 22C6  
                          __ptext4 1F12                            __ptext5 1E16  
        __size_of_DS1621_Read_Temp 003C                            __ptext6 203C  
                          __ptext7 001C                            __ptext8 1A84  
                          __ptext9 1966                    __size_of_printf 035A  
                __end_of_init_UART 2410                __end_of_Turn_On_Fan 247A  
           __end_of_init_INTERRUPT 21A4                          _T0CONbits 000FD5  
                  __size_of_strcpy 0032                    __size_of_strlen 003E  
                __end_of_hexpowers FF14           __end_of_force_nec_state0 2508  
                        _T1CONbits 000FCD           DS3231_Setup_Time@Address 0014  
                          _dpowers FF02              __end_of_do_update_pwm 18B4  
                          _isdigit 22C6                   ___awmod@dividend 0011  
                       _duty_cycle 005E                         ??_delay_ms 0019  
              __end_of_I2C_ReStart 23E8                      drawtext@_text 003A  
                    drawtext@color 003C                         ??_fillRect 0028  
        __end_of_DS3231_Setup_Time 1DB2                   ??_Increase_Speed 0044  
                       ??_drawChar 0035                          _LCD_Reset 2410  
                    _setAddrWindow 1EC4                     __pintcode_body 1B06  
                    Wait_One_Sec@j 0011                         delay_ms@ms 0017  
             end_of_initialization 1BF2                         ??_drawtext 0041  
                   ?_write_command 0001                      __Lmediumconst FD26  
        __size_of_DS3231_Read_Time 0064                            int_func 1B06  
          DS3231_Read_Time@Address 0014                         ?_I2C_Start 0001  
                       ?_I2C_Write 0001                         get_RPM@RPS 0021  
              __size_of_Toggle_Fan 0022                         _tempSecond 006E  
                        _RCSTAbits 000FAB                            printf@c 0038  
                          printf@f 001D                            postdec1 000FE5  
                          postdec2 000FDD                            postinc0 000FEE  
                          postinc2 000FDE                         ??_spiwrite 0011  
                          strlen@s 0011        I2C_Write_Cmd_Write_Data@Cmd 0013  
                        _PORTAbits 000F80                   drawtext@cursor_x 00F9  
                 drawtext@cursor_y 00F8                          _PORTBbits 000F81  
                        _PORTDbits 000F83                          _PORTEbits 000F84  
                 I2C_Write@outByte 0011                    ?_init_INTERRUPT 0001  
                       _setup_date 009D                        ?_fillScreen 0024  
                       _setup_hour 0068                         _setup_time 00A6  
                       _setup_year 006C                        ?_drawCircle 001C  
                       drawChar@bg 0032                          _TRISBbits 000F93  
                        _TRISCbits 000F94                       ??_i2cHighSda 0011  
                     ??_i2cHighScl 0011                  __size_of_I2C_Init 000A  
                __size_of_I2C_Read 0048                  __size_of_I2C_Stop 0012  
                   ?_setAddrWindow 0014                         ?_LCD_Reset 0001  
                 drawtext@textsize 00F4                         drawPixel@x 001B  
                       drawPixel@y 0018                 _Update_Screen$2406 00FE  
               _Update_Screen$2407 00FA                        _DS1621_Init 234C  
                      ___ftdiv@exp 0039                        printf@width 0036  
                        _TXSTAbits 000FAC                  __size_of_INT0_isr 0172  
                   __end_of_i2cAck 246A                        ___ftmul@exp 0026  
         DS1621_Read_Temp@Data_Ret 0017                        _Turn_On_Fan 246A  
               __end_of_i2cHighSda 2500                 __end_of_i2cHighScl 24B4  
                   __end_of___wmul 2258                      delay_ms@count 001B  
                       _write_data 247A                      __pidataCOMRAM 2508  
                   __end_of_chkisr 1B82           ?_TFT_GreenTab_Initialize 0001  
                      _I2C_ReStart 23D2                         drawtext@bg 003E  
                        _Nec_code1 0053                          _i2cLowSda 24DE  
                        _i2cLowScl 24F0               __end_of_Wait_One_Sec 22C6  
                   __end_of_printf 07A4                       ??_Set_DC_RGB 0013  
                   __end_of_strcpy 21D6                     __end_of_strlen 20B8  
                        _Nec_state 0054                start_initialization 1B82  
           Update_Screen@neg_tempF 00FC         __size_of_DS3231_Setup_Time 0066  
          __size_of_Decrease_Speed 0022                    ??_write_command 0013  
                        _OpenUSART 1C76                   __CFG_OSC$INTIO67 000000  
                      ??_I2C_Start 0011                        ??_I2C_Write 0011  
                         ??_i2cAck 0011                  __size_of_Rcmd2red 003E  
              __size_of_fillScreen 001C                __size_of_drawCircle 01AE  
                  _Activate_Buzzer 2422                 __end_of_Set_DC_RGB 23A0  
                         ??___wmul 0015                       ?_Set_RPM_RGB 0011  
                    ?_Turn_Off_Fan 0001                           ??_chkisr 0003  
                      __pdataBANK0 0080                        __pdataBANK1 0100  
                  setAddrWindow@x0 0017                    setAddrWindow@x1 0015  
                  setAddrWindow@y0 0014                    setAddrWindow@y1 0016  
                         ??_printf 002B                   _DS1621_Read_Temp 2134  
                         ??_strcpy 0015                           ??_strlen 0013  
                     ??_Toggle_Fan 0044                         ?_i2cLowSda 0001  
                       ?_i2cLowScl 0001                  __size_of___ftpack 00C6  
                __size_of___lbtoft 0026                        __pbssCOMRAM 0046  
       ??_I2C_Write_Cmd_Write_Data 0015                    ??_setAddrWindow 0017  
                    __pcstackBANK0 00F3                      __pcstackBANK1 01B2  
                      ??_LCD_Reset 001D                       _isdigit$2055 0012  
                __size_of_delay_ms 0052                           ?_Do_Beep 0001  
                         ?_Do_Init 0001                  __size_of_fillRect 004A  
                __size_of_drawChar 0156                         ?_OpenUSART 0011  
                 _DS3231_Read_Time 1DB2                           ?_i2cNack 0001  
                __size_of_drawtext 010A                   ___lwdiv@dividend 0011  
               __end_of_Toggle_Fan 230A                        I2C_Read@ack 0011  
                        _bit_count 005A                          __pintcode 0008  
  __end_of_TFT_GreenTab_Initialize 2230                     ??_Turn_Off_Fan 0011  
                    __pmediumconst FD26                           ?___awdiv 0017  
                         ?___awmod 0011                           ?___ftdiv 002C  
                         ?___ftmul 001D                           ?___fttol 0011  
                        __tft_type 0055                           ?___lwdiv 0011  
               _I2C_Write_Cmd_Only 23A0                           ?___lwmod 0018  
               drawFastVLine@color 001A                        ?_write_data 0001  
                        _drawPixel 21D6                           ?_get_RPM 001F  
                __size_of_spiwrite 0014                ?_I2C_Write_Cmd_Only 0013  
                ?_force_nec_state0 0001                           ?_isdigit 0001  
                         _I2C_Init 24CA                           _I2C_Read 1FF4  
                         _I2C_Stop 2434                  _Initialize_Screen 07A4  
                   __size_of_Rcmd1 0110                     __size_of_Rcmd3 00F2  
                        _init_UART 23FC                 ??_force_nec_state0 0001  
         I2C_Write_Cmd_Only@Device 0014                          _hexpowers FF0C  
               ?_Initialize_Screen 0001                   ___lwdiv@quotient 0016  
                   __size_of_putch 000E            __end_of_Activate_Buzzer 2434  
                   ___wmul@product 0015                ??_Initialize_Screen 0043  
                         _INT0_isr 0DC8               ??_I2C_Write_Cmd_Only 0014  
                         _PIE1bits 000F9D             __size_of_Update_Screen 042E  
           DS3231_Read_Time@Device 0015                           _PIR1bits 000F9E  
                 ??_init_INTERRUPT 0011              __size_of_Wait_One_Sec 0024  
                        _setup_day 0067                  DS1621_Init@Device 0016  
                        fillRect@h 0025                          fillRect@i 002C  
                        fillRect@w 0024                          fillRect@x 002B  
                        fillRect@y 0023                          drawChar@c 002F  
                        drawChar@i 0038                          drawChar@j 0037  
                        drawChar@x 0036                          drawChar@y 002E  
                       ?_drawPixel 0018             __size_of_fillRectangle 00DC  
                ___wmul@multiplier 0011          __end_of_Initialize_Screen 0A0E  
                      ??_i2cLowSda 0011                        ??_i2cLowScl 0011  
                     ??_fillScreen 0026                       ??_drawCircle 0024  
                       printf@flag 0035                         printf@prec 0032  
                       ?_init_UART 0001                     _Decrease_Speed 230A  
                      _INTCON2bits 000FF1                          copy_data0 1BAE  
                        copy_data1 1BCE                          drawtext@i 00F6  
           __size_of_drawFastVLine 0088                          drawtext@x 00F3  
                        drawtext@y 0039                           _Nec_code 00E6  
                write_command@cmd_ 0013                        ??_OpenUSART 0013  
                 __size_of_Do_Beep 0018                       ?_DS1621_Init 0001  
                         _Rcmd2red 20B8                   __size_of_Do_Init 004C  
              __size_of_write_data 0010                    OpenUSART@config 0013  
                     _Time_Elapsed 004A                   __size_of_i2cNack 000A  
                    _RTC_ALARM_Txt 00BC                       _Wait_One_Sec 22A2  
                         __Hrparam 0000             __size_of_do_update_pwm 00B6  
               __end_of_fillScreen 2386                           __Lrparam 0000  
               __end_of_drawCircle 0DC8                       ?_Turn_On_Fan 0001  
                 __size_of___awdiv 0096                   __size_of___awmod 0082  
                 __size_of___ftdiv 00E2                   __size_of___ftmul 00F8  
                 __size_of___fttol 00E6                   __size_of___lwdiv 005C  
                 __size_of___lwmod 004C               __size_of_Set_RPM_RGB 007A  
                         ___ftpack 1738                           ___lbtoft 2258  
                     ?_I2C_ReStart 0001                   __size_of_get_RPM 003E  
                    _Update_Screen 001C                     _setup_fan_temp 00BE  
                   _setup_fan_text 00AF                   __size_of_isdigit 0022  
                         _delay_ms 1E72             __end_of_Decrease_Speed 232C  
                  ___lwdiv@divisor 0013                    ___lwdiv@counter 0015  
                         __ptext10 22E8                           __ptext11 246A  
                         __ptext20 207A                           __ptext12 24C0  
                         __ptext21 0F3A                           __ptext13 1BFC  
                         __ptext30 1090                           __ptext22 1FAA  
                         __ptext14 2386                           __ptext31 247A  
                         __ptext23 19FC                           __ptext15 07A4  
                         __ptext40 1C76                           __ptext32 248A  
                         __ptext24 0C1A                           __ptext16 21A4  
                         __ptext41 2170                           __ptext33 23E8  
                         __ptext25 21D6                           __ptext17 236A  
                         __ptext50 1494                           __ptext42 24CA  
                         __ptext34 2410                           __ptext26 1EC4  
                         __ptext18 165C                           __ptext51 12AA  
                         __ptext43 234C                           __ptext35 1E72  
                         __ptext27 2206                           __ptext19 11A0  
                         __ptext60 20F6                           __ptext52 157A  
                         __ptext44 232C                           __ptext36 2230  
                         __ptext28 13A2                           __ptext61 2434  
                         __ptext53 1738                           __ptext45 23A0  
                         __ptext37 227E                           __ptext29 20B8  
                         __ptext70 24A8                           __ptext62 2446  
                         __ptext54 22A2                           __ptext46 230A  
                         __ptext38 1F5E                           __ptext63 1FF4  
                         __ptext55 24E8                           __ptext47 23BA  
                         __ptext39 23FC                           __ptext72 24B4  
                         __ptext64 24D4                           __ptext56 2422  
                         __ptext48 17FE                           __ptext73 0DC8  
                         __ptext65 2458                           __ptext57 1D4C  
                         __ptext49 2258                           __ptext74 2500  
                         __ptext66 23D2                           __ptext58 1DB2  
                         __ptext67 24DE                           __ptext59 2134  
                         __ptext68 24F0                           __ptext69 24F8  
                         _fillRect 1FAA                           _drawChar 0F3A  
             __end_of_Turn_Off_Fan 24CA   __size_of_TFT_GreenTab_Initialize 002A  
                         _colstart 005B                           _drawtext 11A0  
                       strcpy@from 0013                      _fillRectangle 165C  
         __end_of_DS1621_Read_Temp 2170                   ?_Activate_Buzzer 0001  
                    __size_of_main 020C            __size_of_Increase_Speed 0024  
                  fillRectangle@hi 0021                    fillRectangle@lo 0022  
                    _drawFastVLine 19FC                          printf@idx 002F  
                         _spiwrite 23E8                          printf@val 0033  
                      ??_drawPixel 001B                           _rowstart 0063  
         __end_of_DS3231_Read_Time 1E16         __size_of_Initialize_Screen 026A  
                   ?_Update_Screen 0001                         _INTCONbits 000FF2  
                    _do_update_pwm 17FE                     OpenUSART@spbrg 0011  
                      ??_init_UART 0014                    ?_Decrease_Speed 0001  
                         isdigit@c 0013                          spiwrite@x 0011  
                         intlevel2 0000                     ?_fillRectangle 0018  
                 ___lwmod@dividend 0018              __end_of_write_command 249A  
                  fillScreen@color 0024            do_update_pwm@duty_cycle 0041  
                   fillRectangle@h 001A                     fillRectangle@w 0019  
                   fillRectangle@x 0023                     fillRectangle@y 0018  
                   ?_drawFastVLine 0018                           printf@ap 0030  
                     ??_write_data 0013                         _TIMER1_isr 24B4  
                    fillRect@color 0026                     ?_do_update_pwm 0001  
                  ___lwmod@divisor 001A                           strcpy@cp 0015  
                         strlen@cp 0015                           strcpy@to 0011  
            I2C_Write_Cmd_Only@Cmd 0013                    ___lwmod@counter 001C  
                     _setup_minute 0069                       _setup_second 006B  
            __end_of_setAddrWindow 1F12                 fillRectangle@color 001B  
                do_update_pwm@dc_I 0042                  do_update_pwm@dc_f 003E  
                    drawChar@color 0030                        _setup_month 006A  
                   Set_RPM_RGB@rpm 0011                 __end_of_write_data 248A  
        __size_of_force_nec_state0 0008                       drawChar@line 0035  
                     drawChar@size 0034  __size_of_I2C_Write_Cmd_Write_Data 0020  
             __size_of_DS1621_Init 001E          ?_I2C_Write_Cmd_Write_Data 0013  
